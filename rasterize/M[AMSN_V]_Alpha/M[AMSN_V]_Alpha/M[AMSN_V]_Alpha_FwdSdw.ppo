#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _838;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _234.x * cbMtdParam._m0[9u].x;
    float _242 = _234.y * cbMtdParam._m0[9u].y;
    float _243 = _234.z * cbMtdParam._m0[9u].z;
    float _244 = _234.w * TEXCOORD_1.z;
    vec4 _260 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3460 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0))));
    float _280 = fma(_277, _212, fma(_270, _204 * TANGENT.x, (_190 * _182) * _268));
    float _283 = fma(_277, _213, fma(_270, _204 * TANGENT.y, (_190 * _183) * _268));
    float _286 = fma(_277, _214, fma(_270, _204 * TANGENT.z, (_190 * _184) * _268));
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    float _291 = _290 * _280;
    float _292 = _290 * _283;
    float _293 = _290 * _286;
    float _3471 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _294 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _3482 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _295 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3504 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3515 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3526 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _299 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    float _381 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _382 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _403 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _406 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _409 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = (_422 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _431 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_425].x;
    float _432 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_425].y;
    float _433 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_425].z;
    float _3537 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _437 = 1.0 - _299;
    float _438 = _434 * _437;
    float _439 = _435 * _437;
    float _440 = _436 * _437;
    float _445 = (_434 + (-0.039999999105930328369140625)) * _299;
    float _446 = (_435 + (-0.039999999105930328369140625)) * _299;
    float _447 = (_436 + (-0.039999999105930328369140625)) * _299;
    float _448 = _445 + 0.039999999105930328369140625;
    float _450 = _446 + 0.039999999105930328369140625;
    float _451 = _447 + 0.039999999105930328369140625;
    vec4 _460 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _381, cbSceneParam._m0[86u].y * _382));
    float _463 = _460.x * TEXCOORD_1.w;
    float _464 = dot(vec3(_291, _292, _293), vec3(_373, _374, _375));
    float _467 = _464 * 2.0;
    float _471 = (_467 * _291) - _373;
    float _472 = (_467 * _292) - _374;
    float _473 = (_467 * _293) - _375;
    float _477 = abs(dot(vec3(_373, _374, _375), vec3(_291, _292, _293)));
    float _3570 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _479 = sqrt(_295);
    float _492 = exp2((_479 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_479 * 3.0));
    float _498 = (1.0 - _492) * ((_479 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _499 = _492 * _479;
    float _527 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _531 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _837;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _562 = fma(_535, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _527));
        float _566 = fma(_535, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _527));
        float _570 = fma(_535, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _527));
        float _595 = _527 + _291;
        float _596 = _531 + _292;
        float _597 = _535 + _293;
        float _607 = fma(_597, cbModelParam._m0[26u].z, fma(_596, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _595)) - _562;
        float _608 = fma(_597, cbModelParam._m0[27u].z, fma(_596, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _595)) - _566;
        float _609 = fma(_597, cbModelParam._m0[28u].z, fma(_596, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _595)) - _570;
        float _613 = inversesqrt(dot(vec3(_607, _608, _609), vec3(_607, _608, _609)));
        float _626 = ((_613 * _607) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_562 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _627 = ((_613 * _608) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_566 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _628 = ((_613 * _609) / cbModelParam._m0[34u].z) + ((((((_570 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_626, _627, _628), 0.0);
        float _665 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_631.x + (-0.5));
        float _667 = _665 * (_631.y + (-0.5));
        float _668 = _665 * (_631.z + (-0.5));
        float _675 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_638.x + (-0.5));
        float _677 = _675 * (_638.y + (-0.5));
        float _678 = _675 * (_638.z + (-0.5));
        float _685 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_645.x + (-0.5));
        float _687 = _685 * (_645.y + (-0.5));
        float _688 = _685 * (_645.z + (-0.5));
        float _695 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_652.x + (-0.5));
        float _697 = _695 * (_652.y + (-0.5));
        float _698 = _695 * (_652.z + (-0.5));
        float _699 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _700 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _701 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
        float _702 = _666 * 0.5;
        float _703 = _676 * 0.5;
        float _704 = _686 * 0.5;
        float _705 = dot(vec3(_702, _703, _704), vec3(_702, _703, _704));
        float _710 = (_705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_705);
        float _719 = (dot(vec3(_291, _292, _293), vec3(_710 * _702, _710 * _703, _710 * _704)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _729 = sqrt(((_703 * _703) + (_702 * _702)) + (_704 * _704)) / (_699 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _731 = _730 * 2.0;
        float _735 = (1.0 - _730) / (_730 + 1.0);
        float _3618 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _745 = ((((1.0 - _736) * (_731 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_731 + 1.0))) + _736) * _699;
        float _746 = _667 * 0.5;
        float _747 = _677 * 0.5;
        float _748 = _687 * 0.5;
        float _749 = dot(vec3(_746, _747, _748), vec3(_746, _747, _748));
        float _754 = (_749 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_749);
        float _762 = (dot(vec3(_291, _292, _293), vec3(_754 * _746, _754 * _747, _754 * _748)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _771 = sqrt(((_747 * _747) + (_746 * _746)) + (_748 * _748)) / (_700 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _772 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _773 = _772 * 2.0;
        float _777 = (1.0 - _772) / (_772 + 1.0);
        float _3651 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _787 = ((((1.0 - _778) * (_773 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_773 + 1.0))) + _778) * _700;
        float _788 = _668 * 0.5;
        float _789 = _678 * 0.5;
        float _790 = _688 * 0.5;
        float _791 = dot(vec3(_788, _789, _790), vec3(_788, _789, _790));
        float _796 = (_791 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_791);
        float _804 = (dot(vec3(_291, _292, _293), vec3(_796 * _788, _796 * _789, _796 * _790)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _813 = sqrt(((_789 * _789) + (_788 * _788)) + (_790 * _790)) / (_701 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _815 = _814 * 2.0;
        float _819 = (1.0 - _814) / (_814 + 1.0);
        float _3684 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _829 = ((((1.0 - _820) * (_815 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_815 + 1.0))) + _820) * _701;
        _837 = _668;
        _839 = _667;
        _840 = _666;
        _841 = _678;
        _842 = _677;
        _843 = _676;
        _844 = _688;
        _845 = _687;
        _846 = _686;
        _847 = _701;
        _848 = _700;
        _849 = _699;
        _850 = cbModelParam._m0[36u].z * (isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0)));
        _851 = cbModelParam._m0[36u].z * (isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)));
        _852 = cbModelParam._m0[36u].z * (isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0)));
    }
    else
    {
        _837 = _838;
        _839 = _838;
        _840 = _838;
        _841 = _838;
        _842 = _838;
        _843 = _838;
        _844 = _838;
        _845 = _838;
        _846 = _838;
        _847 = _838;
        _848 = _838;
        _849 = _838;
        _850 = 0.0;
        _851 = 0.0;
        _852 = 0.0;
    }
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _878 = fma(_535, cbModelParam._m0[30u].z, fma(_531, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _527));
        float _882 = fma(_535, cbModelParam._m0[31u].z, fma(_531, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _527));
        float _886 = fma(_535, cbModelParam._m0[32u].z, fma(_531, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _527));
        float _909 = _527 + _291;
        float _910 = _531 + _292;
        float _911 = _535 + _293;
        float _921 = fma(_911, cbModelParam._m0[30u].z, fma(_910, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _909)) - _878;
        float _922 = fma(_911, cbModelParam._m0[31u].z, fma(_910, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _909)) - _882;
        float _923 = fma(_911, cbModelParam._m0[32u].z, fma(_910, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _909)) - _886;
        float _927 = inversesqrt(dot(vec3(_921, _922, _923), vec3(_921, _922, _923)));
        float _940 = ((_927 * _921) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_878 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _941 = ((_927 * _922) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_882 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _942 = ((_927 * _923) / cbModelParam._m0[35u].z) + ((((((_886 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_940, _941, _942), 0.0);
        float _977 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_944.x + (-0.5));
        float _979 = _977 * (_944.y + (-0.5));
        float _980 = _977 * (_944.z + (-0.5));
        float _987 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_951.x + (-0.5));
        float _989 = _987 * (_951.y + (-0.5));
        float _990 = _987 * (_951.z + (-0.5));
        float _997 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_958.x + (-0.5));
        float _999 = _997 * (_958.y + (-0.5));
        float _1000 = _997 * (_958.z + (-0.5));
        float _1007 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_965.x + (-0.5));
        float _1009 = _1007 * (_965.y + (-0.5));
        float _1010 = _1007 * (_965.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_291, _292, _293), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3747 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1041 + 1.0))) + _1046) * _1011;
        float _1056 = _979 * 0.5;
        float _1057 = _989 * 0.5;
        float _1058 = _999 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_291, _292, _293), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _3780 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1083 + 1.0))) + _1088) * _1012;
        float _1098 = _980 * 0.5;
        float _1099 = _990 * 0.5;
        float _1100 = _1000 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1114 = (dot(vec3(_291, _292, _293), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1123 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1125 = _1124 * 2.0;
        float _1129 = (1.0 - _1124) / (_1124 + 1.0);
        float _3813 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1139 = ((((1.0 - _1130) * (_1125 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1125 + 1.0))) + _1130) * _1013;
        _1147 = _980;
        _1148 = _979;
        _1149 = _978;
        _1150 = _990;
        _1151 = _989;
        _1152 = _988;
        _1153 = _1000;
        _1154 = _999;
        _1155 = _998;
        _1156 = _1013;
        _1157 = _1012;
        _1158 = _1011;
        _1159 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1160 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
        _1161 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0)));
    }
    else
    {
        _1147 = _838;
        _1148 = _838;
        _1149 = _838;
        _1150 = _838;
        _1151 = _838;
        _1152 = _838;
        _1153 = _838;
        _1154 = _838;
        _1155 = _838;
        _1156 = _838;
        _1157 = _838;
        _1158 = _838;
        _1159 = 0.0;
        _1160 = 0.0;
        _1161 = 0.0;
    }
    float _1171 = (cbModelParam._m0[1u].x * (_1159 - _850)) + _850;
    float _1172 = (cbModelParam._m0[1u].x * (_1160 - _851)) + _851;
    float _1173 = (cbModelParam._m0[1u].x * (_1161 - _852)) + _852;
    float _1194 = fma(_1173, cbSceneParam._m0[89u].z, fma(_1172, cbSceneParam._m0[89u].y, _1171 * cbSceneParam._m0[89u].x));
    float _1197 = fma(_1173, cbSceneParam._m0[90u].z, fma(_1172, cbSceneParam._m0[90u].y, _1171 * cbSceneParam._m0[90u].x));
    float _1200 = fma(_1173, cbSceneParam._m0[91u].z, fma(_1172, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1171));
    float _1215 = _471 * 0.5;
    float _1216 = _472 * 0.5;
    float _1217 = _473 * 0.5;
    float _1218 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1149, _1152, _1155, _1158));
    float _1221 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1148, _1151, _1154, _1157));
    float _1224 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_1147, _1150, _1153, _1156));
    float _1258;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1231 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_837, _841, _844, _847));
        float _1235 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_839, _842, _845, _848));
        float _1239 = dot(vec4(_1215, _1216, _1217, 1.0), vec4(_840, _843, _846, _849));
        float _1246 = dot(vec4(cbModelParam._m0[39u]), vec4(_1215, _1216, _1217, 1.0));
        _1258 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1246) ? 0.0 : (isnan(0.0) ? _1246 : max(0.0, _1246))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1258 = 1.0;
    }
    float _1269;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1260 = dot(vec4(cbModelParam._m0[40u]), vec4(_1215, _1216, _1217, 1.0));
        _1269 = dot(vec3(isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)), isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)), isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1260) ? 0.0 : (isnan(0.0) ? _1260 : max(0.0, _1260))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1269 = 1.0;
    }
    float _1273 = (_1269 * cbModelParam._m0[1u].x) + (_1258 * (1.0 - cbModelParam._m0[1u].x));
    float _1283 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1284 = isnan(_1283) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1283 : min(cbModelParam._m0[25u].z, _1283));
    float _1366;
    float _1368;
    float _1370;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1333 = fma(_535, cbModelParam._m0[13u].z, fma(_531, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _527)) + cbModelParam._m0[13u].w;
        float _1337 = fma(_535, cbModelParam._m0[14u].z, fma(_531, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _527)) + cbModelParam._m0[14u].w;
        float _1341 = fma(_535, cbModelParam._m0[15u].z, fma(_531, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _527)) + cbModelParam._m0[15u].w;
        float _1344 = fma(_473, cbModelParam._m0[13u].z, fma(_472, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _471));
        float _1347 = fma(_473, cbModelParam._m0[14u].z, fma(_472, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _471));
        float _1350 = fma(_473, cbModelParam._m0[15u].z, fma(_472, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _471));
        float _1378;
        if (_1344 > 0.0)
        {
            _1378 = abs((1.0 - _1333) / _1344);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1344 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1333 + 1.0) / _1344);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1378 = frontier_phi_16_14_ladder;
        }
        float _1554;
        if (_1347 > 0.0)
        {
            _1554 = abs((1.0 - _1337) / _1347);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1347 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1337 + 1.0) / _1347);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1554 = frontier_phi_25_21_ladder;
        }
        float _1850;
        if (_1350 > 0.0)
        {
            _1850 = abs((1.0 - _1341) / _1350);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1341 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1850 = frontier_phi_37_32_ladder;
        }
        float _1852 = isnan(_1554) ? _1378 : (isnan(_1378) ? _1554 : min(_1378, _1554));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1344) + _1333;
        float _1858 = (_1853 * _1347) + _1337;
        float _1859 = (_1853 * _1350) + _1341;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1862 = (-1.0) - _1860;
        float _1864 = _1860 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1859 > _1864) || ((_1859 < _1862) || ((_1858 > _1864) || ((_1858 < _1862) || ((_1857 < _1862) || (_1857 > _1864))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2004 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1859, cbModelParam._m0[9u].z, fma(_1858, cbModelParam._m0[9u].y, _1857 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1859, cbModelParam._m0[10u].z, fma(_1858, cbModelParam._m0[10u].y, _1857 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1859, cbModelParam._m0[11u].z, fma(_1858, cbModelParam._m0[11u].y, _1857 * cbModelParam._m0[11u].x))), _1284);
            frontier_phi_15_37_ladder = _2004.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2004.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2004.z * cbModelParam._m0[1u].y;
        }
        _1366 = frontier_phi_15_37_ladder_1;
        _1368 = frontier_phi_15_37_ladder;
        _1370 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1354 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_471, _472, _473), _1284);
        _1366 = _1354.x * cbModelParam._m0[1u].y;
        _1368 = _1354.y * cbModelParam._m0[1u].y;
        _1370 = _1354.z * cbModelParam._m0[1u].y;
    }
    float _1374 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1375 = isnan(_1374) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1374 : min(cbModelParam._m0[25u].w, _1374));
    float _1468;
    float _1470;
    float _1472;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1432 = fma(_535, cbModelParam._m0[21u].z, fma(_531, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _527)) + cbModelParam._m0[21u].w;
        float _1436 = fma(_535, cbModelParam._m0[22u].z, fma(_531, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _527)) + cbModelParam._m0[22u].w;
        float _1440 = fma(_535, cbModelParam._m0[23u].z, fma(_531, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _527)) + cbModelParam._m0[23u].w;
        float _1443 = fma(_473, cbModelParam._m0[21u].z, fma(_472, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _471));
        float _1446 = fma(_473, cbModelParam._m0[22u].z, fma(_472, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _471));
        float _1449 = fma(_473, cbModelParam._m0[23u].z, fma(_472, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _471));
        float _1559;
        if (_1443 > 0.0)
        {
            _1559 = abs((1.0 - _1432) / _1443);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1432 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1559 = frontier_phi_27_23_ladder;
        }
        float _1877;
        if (_1446 > 0.0)
        {
            _1877 = abs((1.0 - _1436) / _1446);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1446 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1436 + 1.0) / _1446);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1877 = frontier_phi_39_34_ladder;
        }
        float _2215;
        if (_1449 > 0.0)
        {
            _2215 = abs((1.0 - _1440) / _1449);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1440 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2215 = frontier_phi_49_46_ladder;
        }
        float _2217 = isnan(_1877) ? _1559 : (isnan(_1559) ? _1877 : min(_1559, _1877));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1443) + _1432;
        float _2223 = (_2218 * _1446) + _1436;
        float _2224 = (_2218 * _1449) + _1440;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2225;
        float _2228 = _2225 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2224 > _2228) || ((_2224 < _2226) || ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 < _2226) || (_2222 > _2228))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2346 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2224, cbModelParam._m0[17u].z, fma(_2223, cbModelParam._m0[17u].y, _2222 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2224, cbModelParam._m0[18u].z, fma(_2223, cbModelParam._m0[18u].y, _2222 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2224, cbModelParam._m0[19u].z, fma(_2223, cbModelParam._m0[19u].y, _2222 * cbModelParam._m0[19u].x))), _1375);
            frontier_phi_24_49_ladder = _2346.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2346.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2346.x * cbModelParam._m0[1u].z;
        }
        _1468 = frontier_phi_24_49_ladder_2;
        _1470 = frontier_phi_24_49_ladder_1;
        _1472 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1452 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_471, _472, _473), _1375);
        _1468 = _1452.x * cbModelParam._m0[1u].z;
        _1470 = _1452.y * cbModelParam._m0[1u].z;
        _1472 = _1452.z * cbModelParam._m0[1u].z;
    }
    float _1485 = (((_498 * _448) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1468 - _1366)) + _1366);
    float _1487 = (((_498 * _450) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1470 - _1368)) + _1368);
    float _1489 = (((_498 * _451) + _499) * _463) * ((cbModelParam._m0[1u].w * (_1472 - _1370)) + _1370);
    float _1492 = fma(_1489, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1485 * cbSceneParam._m0[89u].x));
    float _1495 = fma(_1489, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1485 * cbSceneParam._m0[90u].x));
    float _1498 = fma(_1489, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, _1485 * cbSceneParam._m0[91u].x));
    float _1533 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1537 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1541 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1545 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1546 = _1533 / _1545;
    float _1547 = _1537 / _1545;
    float _1548 = _1541 / _1545;
    float _1695;
    float _1696;
    float _1697;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1575 = ((uint(_1548 > cbSceneParam._m0[59u].y) + uint(_1548 > cbSceneParam._m0[59u].x)) + uint(_1548 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1576 = _1575 + 43u;
        uint _1584 = _1575 + 44u;
        uint _1592 = _1575 + 45u;
        uint _1600 = _1575 + 46u;
        float _1611 = fma(_1545, cbSceneParam._m0[_1576].w, fma(_1541, cbSceneParam._m0[_1576].z, fma(_1537, cbSceneParam._m0[_1576].y, _1533 * cbSceneParam._m0[_1576].x)));
        float _1615 = fma(_1545, cbSceneParam._m0[_1584].w, fma(_1541, cbSceneParam._m0[_1584].z, fma(_1537, cbSceneParam._m0[_1584].y, _1533 * cbSceneParam._m0[_1584].x)));
        float _1623 = fma(_1545, cbSceneParam._m0[_1600].w, fma(_1541, cbSceneParam._m0[_1600].z, fma(_1537, cbSceneParam._m0[_1600].y, _1533 * cbSceneParam._m0[_1600].x)));
        float _1628 = cbSceneParam._m0[33u].z * _1623;
        float _1630 = cbSceneParam._m0[33u].w * _1623;
        float _1633 = fma(_1545, cbSceneParam._m0[_1592].w, fma(_1541, cbSceneParam._m0[_1592].z, fma(_1537, cbSceneParam._m0[_1592].y, _1533 * cbSceneParam._m0[_1592].x))) / _1623;
        float _1681 = (cbSceneParam._m0[33u].x - sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548))) * cbSceneParam._m0[33u].y;
        float _3939 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1688 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1628 + _1611) / _1623, (_1630 + _1615) / _1623), _1633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1630 + _1611) / _1623, (_1615 - _1628) / _1623), _1633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1611 - _1628) / _1623, (_1615 - _1630) / _1623), _1633), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1611 - _1630) / _1623, (_1628 + _1615) / _1623), _1633), 0.0)).x), vec4(0.25)));
        _1695 = 1.0 - (_1688 * cbSceneParam._m0[34u].x);
        _1696 = 1.0 - (_1688 * cbSceneParam._m0[34u].y);
        _1697 = 1.0 - (_1688 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1695 = 1.0;
        _1696 = 1.0;
        _1697 = 1.0;
    }
    float _1761;
    float _1763;
    float _1765;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1749 = fma(_1545, cbSceneParam._m0[63u].w, fma(_1541, cbSceneParam._m0[63u].z, fma(_1537, cbSceneParam._m0[63u].y, _1533 * cbSceneParam._m0[63u].x)));
        float _1750 = fma(_1545, cbSceneParam._m0[60u].w, fma(_1541, cbSceneParam._m0[60u].z, fma(_1537, cbSceneParam._m0[60u].y, _1533 * cbSceneParam._m0[60u].x))) / _1749;
        float _1751 = fma(_1545, cbSceneParam._m0[61u].w, fma(_1541, cbSceneParam._m0[61u].z, fma(_1537, cbSceneParam._m0[61u].y, _1533 * cbSceneParam._m0[61u].x))) / _1749;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1750 >= cbSceneParam._m0[64u].x) && (_1751 >= cbSceneParam._m0[64u].y)) && (_1750 <= cbSceneParam._m0[64u].z)) && (_1751 <= cbSceneParam._m0[64u].w))
        {
            float _1890 = fma(_1545, cbSceneParam._m0[62u].w, fma(_1541, cbSceneParam._m0[62u].z, fma(_1537, cbSceneParam._m0[62u].y, _1533 * cbSceneParam._m0[62u].x))) / _1749;
            float _1894 = isnan(cbSceneParam._m0[41u].w) ? _1890 : (isnan(_1890) ? cbSceneParam._m0[41u].w : max(_1890, cbSceneParam._m0[41u].w));
            float _1937 = (cbSceneParam._m0[33u].x - sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548))) * cbSceneParam._m0[33u].y;
            float _3955 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
            float _1944 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1750, cbSceneParam._m0[33u].w + _1751), _1894), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1750, _1751 - cbSceneParam._m0[33u].z), _1894), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1750 - cbSceneParam._m0[33u].z, _1751 - cbSceneParam._m0[33u].w), _1894), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1750 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1751), _1894), 0.0)).x), vec4(0.25)));
            float _1948 = 1.0 - (_1944 * cbSceneParam._m0[34u].x);
            float _1949 = 1.0 - (_1944 * cbSceneParam._m0[34u].y);
            float _1950 = 1.0 - (_1944 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1949) ? _1696 : (isnan(_1696) ? _1949 : min(_1696, _1949));
            frontier_phi_36_35_ladder_1 = isnan(_1950) ? _1697 : (isnan(_1697) ? _1950 : min(_1697, _1950));
            frontier_phi_36_35_ladder_2 = isnan(_1948) ? _1695 : (isnan(_1695) ? _1948 : min(_1695, _1948));
        }
        else
        {
            frontier_phi_36_35_ladder = _1696;
            frontier_phi_36_35_ladder_1 = _1697;
            frontier_phi_36_35_ladder_2 = _1695;
        }
        _1761 = frontier_phi_36_35_ladder_2;
        _1763 = frontier_phi_36_35_ladder;
        _1765 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1761 = _1695;
        _1763 = _1696;
        _1765 = _1697;
    }
    uvec4 _1770 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1772 = _1770.x * 14u;
    uint _1773 = _1772 + 13u;
    float _1780 = _463 + (-1.0);
    float _1785 = (cbLight._m0[_1773].x * _1780) + 1.0;
    float _1786 = (cbLight._m0[_1773].y * _1780) + 1.0;
    float _1787 = (cbLight._m0[_1773].z * _1780) + 1.0;
    float _1788 = (cbLight._m0[_1773].w * _1780) + 1.0;
    uint _1789 = _1772 + 5u;
    float _1795 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1799 = _1772 + 4u;
    float _1809 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1813 = _1772 | 1u;
    float _1824 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_291, _292, _293));
    float _1827 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_291, _292, _293));
    float _3991 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _4002 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1832 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1834 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.3183098733425140380859375;
    float _1841 = ((cbLight._m0[_1789].x * _1795) * _1834) + (((cbLight._m0[_1799].x * _1761) * _1809) * _1832);
    float _1842 = ((_1795 * cbLight._m0[_1789].y) * _1834) + (((cbLight._m0[_1799].y * _1763) * _1809) * _1832);
    float _1843 = ((_1795 * cbLight._m0[_1789].z) * _1834) + (((cbLight._m0[_1799].z * _1765) * _1809) * _1832);
    uvec4 _1847 = floatBitsToUint(cbLight._m0[_1772 + 12u]);
    bool _1849 = _1847.x == 0u;
    float _1951;
    float _1953;
    float _1955;
    if (_1849)
    {
        _1951 = _1841;
        _1953 = _1842;
        _1955 = _1843;
    }
    else
    {
        uint _1959 = _1772 + 6u;
        float _1975 = (dot(vec3(cbLight._m0[_1772 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1976 = _1975 * _1975;
        float _4013 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
        float _1977 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1978 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _1951 = (((cbLight._m0[_1959].x * 0.3183098733425140380859375) * _1977) * _1978) + _1841;
        _1953 = (((cbLight._m0[_1959].y * 0.3183098733425140380859375) * _1977) * _1978) + _1842;
        _1955 = (((cbLight._m0[_1959].z * 0.3183098733425140380859375) * _1977) * _1978) + _1843;
    }
    bool _1958 = _1847.y == 0u;
    float _2013;
    float _2015;
    float _2017;
    if (_1958)
    {
        _2013 = _1951;
        _2015 = _1953;
        _2017 = _1955;
    }
    else
    {
        uint _2186 = _1772 + 7u;
        float _2202 = (dot(vec3(cbLight._m0[_1772 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _2203 = _2202 * _2202;
        float _4029 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
        float _2204 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2205 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2013 = (((cbLight._m0[_2186].x * 0.3183098733425140380859375) * _2204) * _2205) + _1951;
        _2015 = (((cbLight._m0[_2186].y * 0.3183098733425140380859375) * _2204) * _2205) + _1953;
        _2017 = (((cbLight._m0[_2186].z * 0.3183098733425140380859375) * _2204) * _2205) + _1955;
    }
    uint _2020 = _1772 + 8u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1772].w)) * _295) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1772].x + _373;
    float _2036 = cbLight._m0[_1772].y + _374;
    float _2037 = cbLight._m0[_1772].z + _375;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1772].xyz));
    float _4045 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _2049 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2050 = dot(vec3(_291, _292, _293), vec3(_2042, _2043, _2044));
    float _4067 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1772].xyz), vec3(_2042, _2043, _2044));
    float _4078 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2034 * _2034;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2070 = exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0);
    float _2071 = 0.959999978542327880859375 - _445;
    float _2073 = 0.959999978542327880859375 - _446;
    float _2074 = 0.959999978542327880859375 - _447;
    float _2081 = 1.0 - _2034;
    float _2092 = (0.5 / (((_2049 * ((_2048 * _2081) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2081) + _2034) * _2048))) * _2048;
    float _4089 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    uint _2108 = _1772 + 9u;
    float _2119 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _295) * 0.949999988079071044921875);
    float _2120 = _2119 * _2119;
    float _2121 = cbLight._m0[_1813].x + _373;
    float _2122 = cbLight._m0[_1813].y + _374;
    float _2123 = cbLight._m0[_1813].z + _375;
    float _2127 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
    float _2128 = _2127 * _2121;
    float _2129 = _2127 * _2122;
    float _2130 = _2127 * _2123;
    float _2131 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1813].xyz));
    float _4100 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2134 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2135 = dot(vec3(_291, _292, _293), vec3(_2128, _2129, _2130));
    float _4111 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2138 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2139 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_2128, _2129, _2130));
    float _4122 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2143 = _2120 * _2120;
    float _2147 = ((_2138 * _2138) * (_2143 + (-1.0))) + 1.0;
    float _2154 = exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0);
    float _2161 = 1.0 - _2120;
    float _2171 = (0.5 / (((_2049 * ((_2134 * _2161) + _2120)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2161) + _2120) * _2134))) * _2134;
    float _4133 = isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0));
    float _2173 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2143 / ((_2147 * _2147) * 3.141590118408203125));
    float _2183 = (((((_2154 * _2071) + _448) * cbLight._m0[_2108].x) * _2173) * _1795) + ((((cbLight._m0[_2020].x * _1761) * ((_2070 * _2071) + _448)) * _2094) * _1809);
    float _2184 = (((((_2154 * _2073) + _450) * cbLight._m0[_2108].y) * _2173) * _1795) + ((((cbLight._m0[_2020].y * _1763) * ((_2070 * _2073) + _450)) * _2094) * _1809);
    float _2185 = (((((_2154 * _2074) + _451) * cbLight._m0[_2108].z) * _2173) * _1795) + ((((cbLight._m0[_2020].z * _1765) * ((_2070 * _2074) + _451)) * _2094) * _1809);
    float _2241;
    float _2243;
    float _2245;
    if (_1849)
    {
        _2241 = _2183;
        _2243 = _2184;
        _2245 = _2185;
    }
    else
    {
        uint _2247 = _1772 + 2u;
        uint _2251 = _1772 + 10u;
        float _2265 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _295) * 0.949999988079071044921875);
        float _2266 = _2265 * _2265;
        float _2267 = cbLight._m0[_2247].x + _373;
        float _2268 = cbLight._m0[_2247].y + _374;
        float _2269 = cbLight._m0[_2247].z + _375;
        float _2273 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
        float _2274 = _2273 * _2267;
        float _2275 = _2273 * _2268;
        float _2276 = _2273 * _2269;
        float _2277 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2247].xyz));
        float _4144 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2280 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2281 = dot(vec3(_291, _292, _293), vec3(_2274, _2275, _2276));
        float _4155 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2284 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2285 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2274, _2275, _2276));
        float _4166 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2289 = _2266 * _2266;
        float _2293 = ((_2284 * _2284) * (_2289 + (-1.0))) + 1.0;
        float _2300 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
        float _2307 = 1.0 - _2266;
        float _2317 = (0.5 / (((_2049 * ((_2280 * _2307) + _2266)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2307) + _2266) * _2280))) * _2280;
        float _4177 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
        float _2319 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2289 / ((_2293 * _2293) * 3.141590118408203125));
        float _2320 = isnan(1.0) ? _1787 : (isnan(_1787) ? 1.0 : min(_1787, 1.0));
        _2241 = (((((_2300 * _2071) + _448) * cbLight._m0[_2251].x) * _2319) * _2320) + _2183;
        _2243 = (((((_2300 * _2073) + _450) * cbLight._m0[_2251].y) * _2319) * _2320) + _2184;
        _2245 = (((((_2300 * _2074) + _451) * cbLight._m0[_2251].z) * _2319) * _2320) + _2185;
    }
    float _2351;
    float _2353;
    float _2355;
    if (_1958)
    {
        _2351 = _2241;
        _2353 = _2243;
        _2355 = _2245;
    }
    else
    {
        uint _2362 = _1772 + 3u;
        uint _2366 = _1772 + 11u;
        float _2380 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2362].w)) * _295) * 0.949999988079071044921875);
        float _2381 = _2380 * _2380;
        float _2382 = cbLight._m0[_2362].x + _373;
        float _2383 = cbLight._m0[_2362].y + _374;
        float _2384 = cbLight._m0[_2362].z + _375;
        float _2388 = inversesqrt(dot(vec3(_2382, _2383, _2384), vec3(_2382, _2383, _2384)));
        float _2389 = _2388 * _2382;
        float _2390 = _2388 * _2383;
        float _2391 = _2388 * _2384;
        float _2392 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2362].xyz));
        float _4193 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2395 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2396 = dot(vec3(_291, _292, _293), vec3(_2389, _2390, _2391));
        float _4204 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2399 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2400 = dot(vec3(cbLight._m0[_2362].xyz), vec3(_2389, _2390, _2391));
        float _4215 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2404 = _2381 * _2381;
        float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
        float _2415 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
        float _2422 = 1.0 - _2381;
        float _2432 = (0.5 / (((_2049 * ((_2395 * _2422) + _2381)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2422) + _2381) * _2395))) * _2395;
        float _4226 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2434 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
        float _2435 = isnan(1.0) ? _1788 : (isnan(_1788) ? 1.0 : min(_1788, 1.0));
        _2351 = (((((_2415 * _2071) + _448) * cbLight._m0[_2366].x) * _2434) * _2435) + _2241;
        _2353 = (((((_2415 * _2073) + _450) * cbLight._m0[_2366].y) * _2434) * _2435) + _2243;
        _2355 = (((((_2415 * _2074) + _451) * cbLight._m0[_2366].z) * _2434) * _2435) + _2245;
    }
    float _2500;
    float _2502;
    float _2504;
    float _2506;
    float _2508;
    float _2510;
    if (_1770.y == 0u)
    {
        uvec4 _2456 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2457 = _2456.x;
        uint _2468 = uint((float(_2456.y) * floor(float(uint(cbSceneParam._m0[85u].y * _382) / _2457))) + floor(float(uint(cbSceneParam._m0[85u].x * _381) / _2457)));
        float _2478 = (log2(_1548 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2479 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        uint _2482 = uint(isnan(14.0) ? _2479 : (isnan(_2479) ? 14.0 : min(_2479, 14.0)));
        uvec4 _2487 = texelFetch(g_lightClusterGridBuffer, int(((_2482 << 2u) + (_2468 << 6u)) >> 2u));
        uint _2488 = _2487.x;
        uint _2489 = _2456.z;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((((1u << ((_2489 >> 4u) & 15u)) + 4294967295u) & _2488) == 0u) || ((_2489 & 240u) == 0u))
        {
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
        }
        else
        {
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2729)
                {
                    frontier_phi_68_pred = _2718;
                    frontier_phi_68_pred_1 = _2717;
                    frontier_phi_68_pred_2 = _2716;
                    frontier_phi_68_pred_3 = _2714;
                    frontier_phi_68_pred_4 = _2713;
                    frontier_phi_68_pred_5 = _2715;
                }
                else
                {
                    float _2837;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    uint _2843;
                    _2837 = _2713;
                    _2838 = _2714;
                    _2839 = _2715;
                    _2840 = _2716;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2728;
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    for (;;)
                    {
                        uint _2847 = uint(findLSB(_2843)) + (_2719 << 5u);
                        uint _2844 = (_2843 + 4294967295u) & _2843;
                        uint _2849 = _2847 * 48u;
                        vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2849)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2849 + 3u)).x));
                        uint _2869 = (_2847 * 48u) + 4u;
                        vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2869)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2869 + 3u)).x));
                        uint _2888 = (_2847 * 48u) + 8u;
                        vec3 _2899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x));
                        float _2903 = _2863.x - _1546;
                        float _2904 = _2863.y - _1547;
                        float _2905 = _2863.z - _1548;
                        float _2906 = dot(vec3(_2903, _2904, _2905), vec3(_2903, _2904, _2905));
                        float _2909 = inversesqrt(_2906);
                        float _2910 = _2909 * _2903;
                        float _2911 = _2909 * _2904;
                        float _2912 = _2909 * _2905;
                        float _2913 = dot(vec3(_403, _406, _409), vec3(_2910, _2911, _2912));
                        float _2918 = 1.0 - (_2906 * _2863.w);
                        float _4252 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
                        float _2919 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2920 = sqrt(_2906) * _2882.w;
                        float _2923 = 1.39999997615814208984375 / (_2920 + 1.39999997615814208984375);
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2913) + _2924;
                        float _2930 = _2920 * _2920;
                        float _2934 = ((isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0))) * _2919) / ((_2930 * 0.699999988079071044921875) + 1.0);
                        float _2938 = (-0.0) - _1546;
                        float _2939 = (-0.0) - _1547;
                        float _2940 = (-0.0) - _1548;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2945 = _2944 * _2938;
                        float _2946 = _2944 * _2939;
                        float _2947 = _2944 * _2940;
                        float _2954 = exp2(log2(1.0 / ((_2930 * 3.5) + 5.0)) * 0.25);
                        float _2955 = 1.0 - _479;
                        float _2962 = sqrt(1.0 - ((1.0 - (_2955 * _2955)) * (1.0 - (_2954 * _2954))));
                        float _2963 = _2962 * _2962;
                        float _2964 = _2963 * _2963;
                        float _2965 = _2945 + _2910;
                        float _2966 = _2946 + _2911;
                        float _2967 = _2947 + _2912;
                        float _2971 = inversesqrt(dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967)));
                        float _2975 = dot(vec3(_403, _406, _409), vec3(_2945, _2946, _2947));
                        float _4268 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                        float _2978 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2979 = dot(vec3(_403, _406, _409), vec3(_2971 * _2965, _2971 * _2966, _2971 * _2967));
                        float _4279 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2982 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2986 = ((_2982 * _2982) * (_2964 + (-1.0))) + 1.0;
                        float _2987 = _2923 * _2963;
                        float _2988 = _2987 * _2987;
                        float _2991 = ((1.0 - _2988) * _2913) + _2988;
                        float _4290 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2992 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2993 = 1.0 - _2963;
                        float _3003 = (0.5 / (((_2992 * ((_2978 * _2993) + _2963)) + 9.9999999392252902907785028219223e-09) + (((_2992 * _2993) + _2963) * _2978))) * _2992;
                        float _4301 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3014 = (((_2964 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_2986 * _2986) * ((_2930 * 2.1991131305694580078125) + 3.141590118408203125))) * _2919;
                        _2772 = (_2934 * _2882.x) + _2840;
                        _2773 = (_2934 * _2882.y) + _2841;
                        _2774 = (_2934 * _2882.z) + _2842;
                        _2769 = (_3014 * _2899.x) + _2837;
                        _2770 = (_3014 * _2899.y) + _2838;
                        _2771 = (_3014 * _2899.z) + _2839;
                        if (_2844 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2844;
                        }
                    }
                    frontier_phi_68_pred = _2774;
                    frontier_phi_68_pred_1 = _2773;
                    frontier_phi_68_pred_2 = _2772;
                    frontier_phi_68_pred_3 = _2770;
                    frontier_phi_68_pred_4 = _2769;
                    frontier_phi_68_pred_5 = _2771;
                }
                _2580 = frontier_phi_68_pred;
                _2578 = frontier_phi_68_pred_1;
                _2576 = frontier_phi_68_pred_2;
                _2572 = frontier_phi_68_pred_3;
                _2570 = frontier_phi_68_pred_4;
                _2574 = frontier_phi_68_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2570;
                    _2714 = _2572;
                    _2715 = _2574;
                    _2716 = _2576;
                    _2717 = _2578;
                    _2718 = _2580;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
        }
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.z;
        uint _2586 = (_2584 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2586) & _2488) == 0u)
        {
            _2681 = _2569;
            _2683 = _2571;
            _2685 = _2573;
            _2687 = _2575;
            _2689 = _2577;
            _2691 = _2579;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548)));
            float _2707 = _2706 * _1546;
            float _2708 = _2706 * _1547;
            float _2709 = _2706 * _1548;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2586 < ((_2584 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2820 = _2569;
                float _2821 = _2571;
                float _2822 = _2573;
                float _2823 = _2575;
                float _2824 = _2577;
                float _2825 = _2579;
                uint _2826 = _2586;
                uint _2835;
                bool _2836;
                for (;;)
                {
                    _2835 = texelFetch(g_lightClassification, int((((_2482 << 5u) + (_2468 << 9u)) + (_2826 << 2u)) >> 2u)).x;
                    _2836 = _2835 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2836)
                    {
                        frontier_phi_74_pred = _2822;
                        frontier_phi_74_pred_1 = _2821;
                        frontier_phi_74_pred_2 = _2820;
                        frontier_phi_74_pred_3 = _2825;
                        frontier_phi_74_pred_4 = _2824;
                        frontier_phi_74_pred_5 = _2823;
                    }
                    else
                    {
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3032 = _2820;
                        float _3033 = _2821;
                        float _3034 = _2822;
                        float _3035 = _2823;
                        float _3036 = _2824;
                        float _3037 = _2825;
                        uint _3038 = _2835;
                        uint _3039;
                        vec4 _3064;
                        float _3065;
                        vec4 _3080;
                        vec3 _3092;
                        vec4 _3108;
                        vec4 _3124;
                        float _3171;
                        bool _3172;
                        for (;;)
                        {
                            uint _3049 = ((_2826 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3038));
                            _3039 = (_3038 + 4294967295u) & _3038;
                            uint _3051 = _3049 * 40u;
                            _3064 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3051)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3051 + 3u)).x));
                            _3065 = _3064.w;
                            uint _3067 = (_3049 * 40u) + 4u;
                            _3080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3067 + 3u)).x));
                            uint _3082 = (_3049 * 40u) + 8u;
                            _3092 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x));
                            uint _3095 = (_3049 * 40u) + 16u;
                            _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3111 = (_3049 * 40u) + 20u;
                            _3124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3111 + 3u)).x));
                            uint _3127 = (_3049 * 40u) + 24u;
                            vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 3u)).x));
                            uint _3146 = (_3049 * 40u) + 28u;
                            vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3146)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3146 + 3u)).x));
                            _3171 = fma(_1548, _3159.z, fma(_1547, _3159.y, _3159.x * _1546)) + _3159.w;
                            _3172 = !((fma(_1548, _3140.z, fma(_1547, _3140.y, _3140.x * _1546)) + _3140.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3172)
                            {
                                float _3199 = _3064.x - _1546;
                                float _3200 = _3064.y - _1547;
                                float _3201 = _3064.z - _1548;
                                float _3202 = dot(vec3(_3199, _3200, _3201), vec3(_3199, _3200, _3201));
                                float _3205 = inversesqrt(_3202);
                                float _3206 = _3205 * _3199;
                                float _3207 = _3205 * _3200;
                                float _3208 = _3205 * _3201;
                                float _3212 = 1.0 - (_3202 / (_3065 * _3065));
                                float _4312 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                                float _3213 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3217 = sqrt(_3202) * _3080.w;
                                float _3219 = 1.39999997615814208984375 / (_3217 + 1.39999997615814208984375);
                                float _3220 = _3219 * _3219;
                                float _3223 = ((1.0 - _3220) * dot(vec3(_3206, _3207, _3208), vec3(_403, _406, _409))) + _3220;
                                float _3226 = _3217 * _3217;
                                float _3230 = (fma(_1548, _3108.z, fma(_1547, _3108.y, _3108.x * _1546)) + _3108.w) / _3171;
                                float _3231 = (fma(_1548, _3124.z, fma(_1547, _3124.y, _3124.x * _1546)) + _3124.w) / _3171;
                                float _3235 = 1.0 - dot(vec2(_3230, _3231), vec2(_3230, _3231));
                                float _4328 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                                float _3236 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3237 = _3236 * (((isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0))) * _3213) / ((_3226 * 0.699999988079071044921875) + 1.0));
                                float _3249 = exp2(log2(1.0 / ((_3226 * 3.5) + 5.0)) * 0.25);
                                float _3250 = 1.0 - _479;
                                float _3257 = sqrt(1.0 - ((1.0 - (_3250 * _3250)) * (1.0 - (_3249 * _3249))));
                                float _3258 = _3257 * _3257;
                                float _3259 = _3258 * _3258;
                                float _3260 = _3206 - _2707;
                                float _3261 = _3207 - _2708;
                                float _3262 = _3208 - _2709;
                                float _3266 = inversesqrt(dot(vec3(_3260, _3261, _3262), vec3(_3260, _3261, _3262)));
                                float _3270 = dot(vec3(_403, _406, _409), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4339 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3273 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3274 = dot(vec3(_403, _406, _409), vec3(_3266 * _3260, _3266 * _3261, _3266 * _3262));
                                float _4350 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3281 = ((_3277 * _3277) * (_3259 + (-1.0))) + 1.0;
                                float _3282 = _3219 * _3258;
                                float _3283 = _3282 * _3282;
                                float _3289 = ((1.0 - _3283) * dot(vec3(_403, _406, _409), vec3(_3206, _3207, _3208))) + _3283;
                                float _4361 = isnan(0.0) ? _3289 : (isnan(_3289) ? 0.0 : max(_3289, 0.0));
                                float _3290 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3291 = 1.0 - _3258;
                                float _3301 = (0.5 / (((_3290 * ((_3273 * _3291) + _3258)) + 9.9999999392252902907785028219223e-09) + (((_3290 * _3291) + _3258) * _3273))) * _3290;
                                float _4372 = isnan(0.0) ? _3301 : (isnan(_3301) ? 0.0 : max(_3301, 0.0));
                                float _3311 = (_3236 * _3213) * (((_3259 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3281 * _3281) * ((_3226 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3311 * _3092.z;
                                frontier_phi_80_pred_1 = _3311 * _3092.y;
                                frontier_phi_80_pred_2 = _3311 * _3092.x;
                                frontier_phi_80_pred_3 = _3237 * _3080.z;
                                frontier_phi_80_pred_4 = _3237 * _3080.y;
                                frontier_phi_80_pred_5 = _3237 * _3080.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3317 = frontier_phi_80_pred;
                            _3316 = frontier_phi_80_pred_1;
                            _3315 = frontier_phi_80_pred_2;
                            _3320 = frontier_phi_80_pred_3;
                            _3319 = frontier_phi_80_pred_4;
                            _3318 = frontier_phi_80_pred_5;
                            _3022 = _3318 + _3035;
                            _3023 = _3319 + _3036;
                            _3024 = _3320 + _3037;
                            _3019 = _3315 + _3032;
                            _3020 = _3316 + _3033;
                            _3021 = _3317 + _3034;
                            if (_3039 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3039;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3021;
                        frontier_phi_74_pred_1 = _3020;
                        frontier_phi_74_pred_2 = _3019;
                        frontier_phi_74_pred_3 = _3024;
                        frontier_phi_74_pred_4 = _3023;
                        frontier_phi_74_pred_5 = _3022;
                    }
                    _2686 = frontier_phi_74_pred;
                    _2684 = frontier_phi_74_pred_1;
                    _2682 = frontier_phi_74_pred_2;
                    _2692 = frontier_phi_74_pred_3;
                    _2690 = frontier_phi_74_pred_4;
                    _2688 = frontier_phi_74_pred_5;
                    uint _2827 = _2826 + 1u;
                    if (_2827 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2820 = _2682;
                        _2821 = _2684;
                        _2822 = _2686;
                        _2823 = _2688;
                        _2824 = _2690;
                        _2825 = _2692;
                        _2826 = _2827;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2690;
                frontier_phi_62_63_ladder_1 = _2688;
                frontier_phi_62_63_ladder_2 = _2686;
                frontier_phi_62_63_ladder_3 = _2692;
                frontier_phi_62_63_ladder_4 = _2684;
                frontier_phi_62_63_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_62_63_ladder = _2577;
                frontier_phi_62_63_ladder_1 = _2575;
                frontier_phi_62_63_ladder_2 = _2573;
                frontier_phi_62_63_ladder_3 = _2579;
                frontier_phi_62_63_ladder_4 = _2571;
                frontier_phi_62_63_ladder_5 = _2569;
            }
            _2681 = frontier_phi_62_63_ladder_5;
            _2683 = frontier_phi_62_63_ladder_4;
            _2685 = frontier_phi_62_63_ladder_2;
            _2687 = frontier_phi_62_63_ladder_1;
            _2689 = frontier_phi_62_63_ladder;
            _2691 = frontier_phi_62_63_ladder_3;
        }
        float _2696 = isnan(1.0) ? _463 : (isnan(_463) ? 1.0 : min(_463, 1.0));
        _2500 = (_2696 * _2687) + _2013;
        _2502 = (_2696 * _2689) + _2015;
        _2504 = (_2696 * _2691) + _2017;
        _2506 = ((_2681 * _448) * _2696) + _2351;
        _2508 = ((_2683 * _450) * _2696) + _2353;
        _2510 = ((_2685 * _451) * _2696) + _2355;
    }
    else
    {
        _2500 = _2013;
        _2502 = _2015;
        _2504 = _2017;
        _2506 = _2351;
        _2508 = _2353;
        _2510 = _2355;
    }
    float _4388 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4399 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _4410 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _4421 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _2535 = cbInstanceData._m0[_422 + 6u].w * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)));
    float _2540 = _381 / cbSceneParam._m0[86u].x;
    float _2541 = _382 / cbSceneParam._m0[86u].y;
    vec4 _2555 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2557 = _2555.x;
    float _2558 = _2555.y;
    float _2559 = _2555.z;
    float _2560 = _2555.w;
    float _2631;
    float _2633;
    float _2635;
    float _2637;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2594 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2595 = _2594 / _315;
        float _2606 = _2595 * _366;
        float _2607 = _367 * _2595;
        float _2608 = (-0.0) - _2607;
        float _2609 = _2595 * _368;
        float _2611 = (cbSceneParam._m0[77u].w * _2608) / _2594;
        float _2612 = _2611 + cbSceneParam._m0[79u].w;
        float _2613 = cbSceneParam._m0[79u].w - _2607;
        float _2619 = sqrt(((_2606 * _2606) + (_2607 * _2607)) + (_2609 * _2609));
        float _2622 = (1.0 - (cbSceneParam._m0[77u].w / _2594)) * _2619;
        float _2627 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2629 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2782;
        if (abs((_2608 - _2611) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2782 = ((((_2612 > 0.0) ? exp2(_2627 * _2612) : (2.0 - exp2(_2629 * _2612))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2622;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : max(_2612, _2613));
            float _2744 = isnan(_2613) ? _2612 : (isnan(_2612) ? _2613 : min(_2612, _2613));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2782 = ((abs(_2619 / _2608) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2627 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2627 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2629 * _2753) - exp2(_2629 * _2754)) * _2742))) + (_2622 * cbSceneParam._m0[80u].z);
        }
        vec4 _2784 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2540, _2541, 1.0), 0.0);
        float _2793 = exp2((_2782 * (-1.44269502162933349609375)) * (1.0 - _2784.w));
        float _2794 = log2(_2793);
        float _2810 = log2(_2560);
        _2631 = (exp2(_2810 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].x)) * _2784.x) / cbSceneParam._m0[78u].x)) + _2557;
        _2633 = (exp2(_2810 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].y)) * _2784.y) / cbSceneParam._m0[78u].y)) + _2558;
        _2635 = (exp2(_2810 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2794 * cbSceneParam._m0[78u].z)) * _2784.z) / cbSceneParam._m0[78u].z)) + _2559;
        _2637 = _2793 * _2560;
    }
    else
    {
        _2631 = _2557;
        _2633 = _2558;
        _2635 = _2559;
        _2637 = _2560;
    }
    float _2649 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2650 = _2649 == 3.0;
    float _2651 = log2(_2637);
    float _2658 = exp2(_2651 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2500 + ((isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))) * _463))) + ((_2506 + ((isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2659 = exp2(_2651 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2502 + ((isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))) * _463))) + ((_2508 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2660 = exp2(_2651 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2504 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _463))) + ((_2510 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1273)) * cbPerFrame._m0[3u].x));
    float _2669 = (_2649 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2669 * (_2650 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2631)));
    SV_Target.y = _2669 * (_2650 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2633)));
    SV_Target.z = _2669 * (_2650 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2635)));
    SV_Target.w = _2535;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2535;
}


