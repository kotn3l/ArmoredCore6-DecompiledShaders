#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _847;
float _3260;
float _3261;
float _3262;
float _3263;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _192 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _199 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = _199 * NORMAL.x;
    float _201 = _199 * NORMAL.y;
    float _202 = _199 * NORMAL.z;
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214;
    float _215;
    float _216;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
    }
    else
    {
        _214 = _200;
        _215 = _201;
        _216 = _202;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _242 = _236.w;
    float _243 = _236.x * cbMtdParam._m0[9u].x;
    float _244 = _236.y * cbMtdParam._m0[9u].y;
    float _245 = _236.z * cbMtdParam._m0[9u].z;
    float _246 = _242 * TEXCOORD_1.z;
    vec4 _262 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _262.z;
    float _270 = (_262.x * 2.0) + (-1.0);
    float _272 = (_262.y * 2.0) + (-1.0);
    float _273 = dot(vec2(_270, _272), vec2(_270, _272));
    float _3272 = isnan(0.0) ? _273 : (isnan(_273) ? 0.0 : max(_273, 0.0));
    float _279 = sqrt(1.0 - (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0))));
    float _282 = fma(_279, _214, fma(_272, _206 * TANGENT.x, (_192 * _184) * _270));
    float _285 = fma(_279, _215, fma(_272, _206 * TANGENT.y, (_192 * _185) * _270));
    float _288 = fma(_279, _216, fma(_272, _206 * TANGENT.z, (_192 * _186) * _270));
    float _292 = inversesqrt(dot(vec3(_282, _285, _288), vec3(_282, _285, _288)));
    float _293 = _292 * _282;
    float _294 = _292 * _285;
    float _295 = _292 * _288;
    float _3283 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _296 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
    float _3294 = isnan(0.0) ? _266 : (isnan(_266) ? 0.0 : max(_266, 0.0));
    float _297 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3316 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3327 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3338 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _301 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    vec4 _382 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _384 = _382.w;
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _412 = fma(_295, cbSceneParam._m0[5u].z, fma(_294, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _293));
    float _415 = fma(_295, cbSceneParam._m0[6u].z, fma(_294, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _293));
    float _418 = fma(_295, cbSceneParam._m0[7u].z, fma(_294, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _293));
    uint _431 = uint(roundEven(NORMAL.w)) * 13u;
    uint _433 = _431 + 9u;
    uint _434 = _433 + uint(cbMatDynParam._m0[0u].w);
    float _440 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0)))) * cbInstanceData._m0[_434].x;
    float _441 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_434].y;
    float _442 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_434].z;
    float _3349 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
    float _3360 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
    float _3371 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _445 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _446 = 1.0 - _301;
    float _447 = _443 * _446;
    float _448 = _444 * _446;
    float _449 = _445 * _446;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _301;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _301;
    float _456 = (_445 + (-0.039999999105930328369140625)) * _301;
    float _457 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    float _460 = _456 + 0.039999999105930328369140625;
    vec4 _469 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _472 = _469.x * TEXCOORD_1.w;
    float _473 = dot(vec3(_293, _294, _295), vec3(_375, _376, _377));
    float _476 = _473 * 2.0;
    float _480 = (_476 * _293) - _375;
    float _481 = (_476 * _294) - _376;
    float _482 = (_476 * _295) - _377;
    float _486 = abs(dot(vec3(_375, _376, _377), vec3(_293, _294, _295)));
    float _3382 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _488 = sqrt(_297);
    float _501 = exp2((_488 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_488 * 3.0));
    float _507 = (1.0 - _501) * ((_488 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _508 = _501 * _488;
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _846;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _571 = fma(_544, cbModelParam._m0[26u].z, fma(_540, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _536));
        float _575 = fma(_544, cbModelParam._m0[27u].z, fma(_540, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _536));
        float _579 = fma(_544, cbModelParam._m0[28u].z, fma(_540, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _536));
        float _604 = _536 + _293;
        float _605 = _540 + _294;
        float _606 = _544 + _295;
        float _616 = fma(_606, cbModelParam._m0[26u].z, fma(_605, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _604)) - _571;
        float _617 = fma(_606, cbModelParam._m0[27u].z, fma(_605, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _604)) - _575;
        float _618 = fma(_606, cbModelParam._m0[28u].z, fma(_605, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _604)) - _579;
        float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
        float _635 = ((_622 * _616) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_571 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_622 * _617) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_575 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _637 = ((_622 * _618) / cbModelParam._m0[34u].z) + ((((((_579 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_635, _636, _637), 0.0);
        float _674 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _675 = _674 * (_640.x + (-0.5));
        float _676 = _674 * (_640.y + (-0.5));
        float _677 = _674 * (_640.z + (-0.5));
        float _684 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_647.x + (-0.5));
        float _686 = _684 * (_647.y + (-0.5));
        float _687 = _684 * (_647.z + (-0.5));
        float _694 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_654.x + (-0.5));
        float _696 = _694 * (_654.y + (-0.5));
        float _697 = _694 * (_654.z + (-0.5));
        float _704 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_661.x + (-0.5));
        float _706 = _704 * (_661.y + (-0.5));
        float _707 = _704 * (_661.z + (-0.5));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _711 = _675 * 0.5;
        float _712 = _685 * 0.5;
        float _713 = _695 * 0.5;
        float _714 = dot(vec3(_711, _712, _713), vec3(_711, _712, _713));
        float _719 = (_714 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_714);
        float _728 = (dot(vec3(_293, _294, _295), vec3(_719 * _711, _719 * _712, _719 * _713)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _738 = sqrt(((_712 * _712) + (_711 * _711)) + (_713 * _713)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _739 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _740 = _739 * 2.0;
        float _744 = (1.0 - _739) / (_739 + 1.0);
        float _3430 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _754 = ((((1.0 - _745) * (_740 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_740 + 1.0))) + _745) * _708;
        float _755 = _676 * 0.5;
        float _756 = _686 * 0.5;
        float _757 = _696 * 0.5;
        float _758 = dot(vec3(_755, _756, _757), vec3(_755, _756, _757));
        float _763 = (_758 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_758);
        float _771 = (dot(vec3(_293, _294, _295), vec3(_763 * _755, _763 * _756, _763 * _757)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
        float _780 = sqrt(((_756 * _756) + (_755 * _755)) + (_757 * _757)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3463 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_782 + 1.0))) + _787) * _709;
        float _797 = _677 * 0.5;
        float _798 = _687 * 0.5;
        float _799 = _697 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_293, _294, _295), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_710 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3496 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_824 + 1.0))) + _829) * _710;
        _846 = _677;
        _848 = _676;
        _849 = _675;
        _850 = _687;
        _851 = _686;
        _852 = _685;
        _853 = _697;
        _854 = _696;
        _855 = _695;
        _856 = _710;
        _857 = _709;
        _858 = _708;
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _861 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
    }
    else
    {
        _846 = _847;
        _848 = _847;
        _849 = _847;
        _850 = _847;
        _851 = _847;
        _852 = _847;
        _853 = _847;
        _854 = _847;
        _855 = _847;
        _856 = _847;
        _857 = _847;
        _858 = _847;
        _859 = 0.0;
        _860 = 0.0;
        _861 = 0.0;
    }
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _887 = fma(_544, cbModelParam._m0[30u].z, fma(_540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _536));
        float _891 = fma(_544, cbModelParam._m0[31u].z, fma(_540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _536));
        float _895 = fma(_544, cbModelParam._m0[32u].z, fma(_540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _536));
        float _918 = _536 + _293;
        float _919 = _540 + _294;
        float _920 = _544 + _295;
        float _930 = fma(_920, cbModelParam._m0[30u].z, fma(_919, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918)) - _887;
        float _931 = fma(_920, cbModelParam._m0[31u].z, fma(_919, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918)) - _891;
        float _932 = fma(_920, cbModelParam._m0[32u].z, fma(_919, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918)) - _895;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_887 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_891 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[35u].z) + ((((((_895 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_953.x + (-0.5));
        float _988 = _986 * (_953.y + (-0.5));
        float _989 = _986 * (_953.z + (-0.5));
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_960.x + (-0.5));
        float _998 = _996 * (_960.y + (-0.5));
        float _999 = _996 * (_960.z + (-0.5));
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_967.x + (-0.5));
        float _1008 = _1006 * (_967.y + (-0.5));
        float _1009 = _1006 * (_967.z + (-0.5));
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1039 = (dot(vec3(_293, _294, _295), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1048 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3559 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1050 + 1.0))) + _1055) * _1020;
        float _1065 = _988 * 0.5;
        float _1066 = _998 * 0.5;
        float _1067 = _1008 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_293, _294, _295), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3592 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1092 + 1.0))) + _1097) * _1021;
        float _1107 = _989 * 0.5;
        float _1108 = _999 * 0.5;
        float _1109 = _1009 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_293, _294, _295), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3625 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_1134 + 1.0))) + _1139) * _1022;
        _1156 = _989;
        _1157 = _988;
        _1158 = _987;
        _1159 = _999;
        _1160 = _998;
        _1161 = _997;
        _1162 = _1009;
        _1163 = _1008;
        _1164 = _1007;
        _1165 = _1022;
        _1166 = _1021;
        _1167 = _1020;
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _847;
        _1157 = _847;
        _1158 = _847;
        _1159 = _847;
        _1160 = _847;
        _1161 = _847;
        _1162 = _847;
        _1163 = _847;
        _1164 = _847;
        _1165 = _847;
        _1166 = _847;
        _1167 = _847;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1182 = (cbModelParam._m0[1u].x * (_1170 - _861)) + _861;
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1180));
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = _482 * 0.5;
    float _1227 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1158, _1161, _1164, _1167));
    float _1230 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1233 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1267;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1240 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_846, _850, _853, _856));
        float _1244 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_848, _851, _854, _857));
        float _1248 = dot(vec4(_1224, _1225, _1226, 1.0), vec4(_849, _852, _855, _858));
        float _1255 = dot(vec4(cbModelParam._m0[39u]), vec4(_1224, _1225, _1226, 1.0));
        _1267 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1255) ? 0.0 : (isnan(0.0) ? _1255 : max(0.0, _1255))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1267 = 1.0;
    }
    float _1278;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1269 = dot(vec4(cbModelParam._m0[40u]), vec4(_1224, _1225, _1226, 1.0));
        _1278 = dot(vec3(isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)), isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1278 = 1.0;
    }
    float _1282 = (_1278 * cbModelParam._m0[1u].x) + (_1267 * (1.0 - cbModelParam._m0[1u].x));
    float _1292 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1293 = isnan(_1292) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1292 : min(cbModelParam._m0[25u].z, _1292));
    float _1375;
    float _1377;
    float _1379;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1342 = fma(_544, cbModelParam._m0[13u].z, fma(_540, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _536)) + cbModelParam._m0[13u].w;
        float _1346 = fma(_544, cbModelParam._m0[14u].z, fma(_540, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _536)) + cbModelParam._m0[14u].w;
        float _1350 = fma(_544, cbModelParam._m0[15u].z, fma(_540, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _536)) + cbModelParam._m0[15u].w;
        float _1353 = fma(_482, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _480));
        float _1356 = fma(_482, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _480));
        float _1359 = fma(_482, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _480));
        float _1387;
        if (_1353 > 0.0)
        {
            _1387 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1387 = frontier_phi_16_14_ladder;
        }
        float _1616;
        if (_1356 > 0.0)
        {
            _1616 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1616 = frontier_phi_25_21_ladder;
        }
        float _1873;
        if (_1359 > 0.0)
        {
            _1873 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1873 = frontier_phi_37_32_ladder;
        }
        float _1875 = isnan(_1616) ? _1387 : (isnan(_1387) ? _1616 : min(_1387, _1616));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1353) + _1342;
        float _1881 = (_1876 * _1356) + _1346;
        float _1882 = (_1876 * _1359) + _1350;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1885 = (-1.0) - _1883;
        float _1887 = _1883 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1882 > _1887) || ((_1882 < _1885) || ((_1881 > _1887) || ((_1881 < _1885) || ((_1880 < _1885) || (_1880 > _1887))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2010 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1882, cbModelParam._m0[9u].z, fma(_1881, cbModelParam._m0[9u].y, _1880 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1882, cbModelParam._m0[10u].z, fma(_1881, cbModelParam._m0[10u].y, _1880 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1882, cbModelParam._m0[11u].z, fma(_1881, cbModelParam._m0[11u].y, _1880 * cbModelParam._m0[11u].x))), _1293);
            frontier_phi_15_37_ladder = _2010.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2010.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2010.x * cbModelParam._m0[1u].y;
        }
        _1375 = frontier_phi_15_37_ladder_2;
        _1377 = frontier_phi_15_37_ladder_1;
        _1379 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1363 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_480, _481, _482), _1293);
        _1375 = _1363.x * cbModelParam._m0[1u].y;
        _1377 = _1363.y * cbModelParam._m0[1u].y;
        _1379 = _1363.z * cbModelParam._m0[1u].y;
    }
    float _1383 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1384 = isnan(_1383) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1383 : min(cbModelParam._m0[25u].w, _1383));
    float _1477;
    float _1479;
    float _1481;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1441 = fma(_544, cbModelParam._m0[21u].z, fma(_540, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _536)) + cbModelParam._m0[21u].w;
        float _1445 = fma(_544, cbModelParam._m0[22u].z, fma(_540, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _536)) + cbModelParam._m0[22u].w;
        float _1449 = fma(_544, cbModelParam._m0[23u].z, fma(_540, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _536)) + cbModelParam._m0[23u].w;
        float _1452 = fma(_482, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _480));
        float _1455 = fma(_482, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _480));
        float _1458 = fma(_482, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _480));
        float _1621;
        if (_1452 > 0.0)
        {
            _1621 = abs((1.0 - _1441) / _1452);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1441 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1621 = frontier_phi_27_23_ladder;
        }
        float _1900;
        if (_1455 > 0.0)
        {
            _1900 = abs((1.0 - _1445) / _1455);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1445 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1900 = frontier_phi_39_34_ladder;
        }
        float _2113;
        if (_1458 > 0.0)
        {
            _2113 = abs((1.0 - _1449) / _1458);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1449 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2113 = frontier_phi_48_45_ladder;
        }
        float _2115 = isnan(_1900) ? _1621 : (isnan(_1621) ? _1900 : min(_1621, _1900));
        float _2116 = isnan(_2113) ? _2115 : (isnan(_2115) ? _2113 : min(_2115, _2113));
        float _2120 = (_2116 * _1452) + _1441;
        float _2121 = (_2116 * _1455) + _1445;
        float _2122 = (_2116 * _1458) + _1449;
        float _2123 = _2116 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2123;
        float _2126 = _2123 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2122 > _2126) || ((_2122 < _2124) || ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 < _2124) || (_2120 > _2126))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2322 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2122, cbModelParam._m0[17u].z, fma(_2121, cbModelParam._m0[17u].y, _2120 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2122, cbModelParam._m0[18u].z, fma(_2121, cbModelParam._m0[18u].y, _2120 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2122, cbModelParam._m0[19u].z, fma(_2121, cbModelParam._m0[19u].y, _2120 * cbModelParam._m0[19u].x))), _1384);
            frontier_phi_24_48_ladder = _2322.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2322.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2322.x * cbModelParam._m0[1u].z;
        }
        _1477 = frontier_phi_24_48_ladder_2;
        _1479 = frontier_phi_24_48_ladder_1;
        _1481 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1461 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_480, _481, _482), _1384);
        _1477 = _1461.x * cbModelParam._m0[1u].z;
        _1479 = _1461.y * cbModelParam._m0[1u].z;
        _1481 = _1461.z * cbModelParam._m0[1u].z;
    }
    float _1494 = (((_507 * _457) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1496 = (((_507 * _459) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1498 = (((_507 * _460) + _508) * _472) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1501 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1496, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1504 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1496, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1507 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1496, cbSceneParam._m0[91u].y, _1494 * cbSceneParam._m0[91u].x));
    vec4 _1515 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_390, _391));
    float _1517 = _1515.w;
    float _1529 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1517);
    float _1530 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1517);
    float _1531 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1517);
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_431 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _472 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1554 = _1537 + 5u;
    float _1560 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    uint _1564 = _1537 + 4u;
    float _1574 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1578 = _1537 | 1u;
    float _1589 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_293, _294, _295));
    float _1592 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_293, _294, _295));
    float _3761 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
    float _3772 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
    float _1597 = (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 0.3183098733425140380859375;
    float _1599 = (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) * 0.3183098733425140380859375;
    float _1606 = ((cbLight._m0[_1554].x * _1560) * _1599) + (((cbLight._m0[_1564].x * _1529) * _1574) * _1597);
    float _1607 = ((_1560 * cbLight._m0[_1554].y) * _1599) + (((cbLight._m0[_1564].y * _1530) * _1574) * _1597);
    float _1608 = ((_1560 * cbLight._m0[_1554].z) * _1599) + (((cbLight._m0[_1564].z * _1531) * _1574) * _1597);
    uvec4 _1613 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1615 = _1613.x == 0u;
    float _1626;
    float _1628;
    float _1630;
    if (_1615)
    {
        _1626 = _1606;
        _1628 = _1607;
        _1630 = _1608;
    }
    else
    {
        uint _1634 = _1537 + 6u;
        float _1650 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1651 = _1650 * _1650;
        float _3783 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1653 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1626 = (((cbLight._m0[_1634].x * 0.3183098733425140380859375) * _1652) * _1653) + _1606;
        _1628 = (((cbLight._m0[_1634].y * 0.3183098733425140380859375) * _1652) * _1653) + _1607;
        _1630 = (((cbLight._m0[_1634].z * 0.3183098733425140380859375) * _1652) * _1653) + _1608;
    }
    bool _1633 = _1613.y == 0u;
    float _1671;
    float _1673;
    float _1675;
    if (_1633)
    {
        _1671 = _1626;
        _1673 = _1628;
        _1675 = _1630;
    }
    else
    {
        uint _1844 = _1537 + 7u;
        float _1860 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_293, _294, _295)) * 0.5) + 0.5;
        float _1861 = _1860 * _1860;
        float _3799 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
        float _1862 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1863 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1671 = (((cbLight._m0[_1844].x * 0.3183098733425140380859375) * _1862) * _1863) + _1626;
        _1673 = (((cbLight._m0[_1844].y * 0.3183098733425140380859375) * _1862) * _1863) + _1628;
        _1675 = (((cbLight._m0[_1844].z * 0.3183098733425140380859375) * _1862) * _1863) + _1630;
    }
    uint _1678 = _1537 + 8u;
    float _1691 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _297) * 0.949999988079071044921875);
    float _1692 = _1691 * _1691;
    float _1693 = cbLight._m0[_1537].x + _375;
    float _1694 = cbLight._m0[_1537].y + _376;
    float _1695 = cbLight._m0[_1537].z + _377;
    float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
    float _1700 = _1699 * _1693;
    float _1701 = _1699 * _1694;
    float _1702 = _1699 * _1695;
    float _1703 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1537].xyz));
    float _3815 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
    float _1706 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
    float _3826 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _1707 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
    float _1708 = dot(vec3(_293, _294, _295), vec3(_1700, _1701, _1702));
    float _3837 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
    float _1711 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1712 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1700, _1701, _1702));
    float _3848 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _1716 = _1692 * _1692;
    float _1720 = ((_1711 * _1711) * (_1716 + (-1.0))) + 1.0;
    float _1728 = exp2(log2(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * 5.0);
    float _1729 = 0.959999978542327880859375 - _454;
    float _1731 = 0.959999978542327880859375 - _455;
    float _1732 = 0.959999978542327880859375 - _456;
    float _1739 = 1.0 - _1692;
    float _1750 = (0.5 / (((_1707 * ((_1706 * _1739) + _1692)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1739) + _1692) * _1706))) * _1706;
    float _3859 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1752 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_1716 / ((_1720 * _1720) * 3.141590118408203125));
    uint _1766 = _1537 + 9u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1578].w)) * _297) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1578].x + _375;
    float _1780 = cbLight._m0[_1578].y + _376;
    float _1781 = cbLight._m0[_1578].z + _377;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1578].xyz));
    float _3870 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0));
    float _1793 = dot(vec3(_293, _294, _295), vec3(_1786, _1787, _1788));
    float _3881 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1796 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
    float _1797 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_1786, _1787, _1788));
    float _3892 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = _1778 * _1778;
    float _1805 = ((_1796 * _1796) * (_1801 + (-1.0))) + 1.0;
    float _1812 = exp2(log2(1.0 - (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0)))) * 5.0);
    float _1819 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1707 * ((_1792 * _1819) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1819) + _1778) * _1792))) * _1792;
    float _3903 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1801 / ((_1805 * _1805) * 3.141590118408203125));
    float _1841 = (((((_1812 * _1729) + _457) * cbLight._m0[_1766].x) * _1831) * _1560) + ((((cbLight._m0[_1678].x * _1529) * ((_1728 * _1729) + _457)) * _1752) * _1574);
    float _1842 = (((((_1812 * _1731) + _459) * cbLight._m0[_1766].y) * _1831) * _1560) + ((((cbLight._m0[_1678].y * _1530) * ((_1728 * _1731) + _459)) * _1752) * _1574);
    float _1843 = (((((_1812 * _1732) + _460) * cbLight._m0[_1766].z) * _1831) * _1560) + ((((cbLight._m0[_1678].z * _1531) * ((_1728 * _1732) + _460)) * _1752) * _1574);
    float _1905;
    float _1907;
    float _1909;
    if (_1615)
    {
        _1905 = _1841;
        _1907 = _1842;
        _1909 = _1843;
    }
    else
    {
        uint _1911 = _1537 + 2u;
        uint _1915 = _1537 + 10u;
        float _1929 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1911].w)) * _297) * 0.949999988079071044921875);
        float _1930 = _1929 * _1929;
        float _1931 = cbLight._m0[_1911].x + _375;
        float _1932 = cbLight._m0[_1911].y + _376;
        float _1933 = cbLight._m0[_1911].z + _377;
        float _1937 = inversesqrt(dot(vec3(_1931, _1932, _1933), vec3(_1931, _1932, _1933)));
        float _1938 = _1937 * _1931;
        float _1939 = _1937 * _1932;
        float _1940 = _1937 * _1933;
        float _1941 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_1911].xyz));
        float _3914 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1944 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1945 = dot(vec3(_293, _294, _295), vec3(_1938, _1939, _1940));
        float _3925 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1948 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1949 = dot(vec3(cbLight._m0[_1911].xyz), vec3(_1938, _1939, _1940));
        float _3936 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1953 = _1930 * _1930;
        float _1957 = ((_1948 * _1948) * (_1953 + (-1.0))) + 1.0;
        float _1964 = exp2(log2(1.0 - (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0)))) * 5.0);
        float _1971 = 1.0 - _1930;
        float _1981 = (0.5 / (((_1707 * ((_1944 * _1971) + _1930)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _1971) + _1930) * _1944))) * _1944;
        float _3947 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1983 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1953 / ((_1957 * _1957) * 3.141590118408203125));
        float _1984 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1905 = (((((_1964 * _1729) + _457) * cbLight._m0[_1915].x) * _1983) * _1984) + _1841;
        _1907 = (((((_1964 * _1731) + _459) * cbLight._m0[_1915].y) * _1983) * _1984) + _1842;
        _1909 = (((((_1964 * _1732) + _460) * cbLight._m0[_1915].z) * _1983) * _1984) + _1843;
    }
    float _2019;
    float _2021;
    float _2023;
    if (_1633)
    {
        _2019 = _1905;
        _2021 = _1907;
        _2023 = _1909;
    }
    else
    {
        uint _2030 = _1537 + 3u;
        uint _2034 = _1537 + 11u;
        float _2048 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2030].w)) * _297) * 0.949999988079071044921875);
        float _2049 = _2048 * _2048;
        float _2050 = cbLight._m0[_2030].x + _375;
        float _2051 = cbLight._m0[_2030].y + _376;
        float _2052 = cbLight._m0[_2030].z + _377;
        float _2056 = inversesqrt(dot(vec3(_2050, _2051, _2052), vec3(_2050, _2051, _2052)));
        float _2057 = _2056 * _2050;
        float _2058 = _2056 * _2051;
        float _2059 = _2056 * _2052;
        float _2060 = dot(vec3(_293, _294, _295), vec3(cbLight._m0[_2030].xyz));
        float _3963 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2063 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _2064 = dot(vec3(_293, _294, _295), vec3(_2057, _2058, _2059));
        float _3974 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2067 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2068 = dot(vec3(cbLight._m0[_2030].xyz), vec3(_2057, _2058, _2059));
        float _3985 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
        float _2072 = _2049 * _2049;
        float _2076 = ((_2067 * _2067) * (_2072 + (-1.0))) + 1.0;
        float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)))) * 5.0);
        float _2090 = 1.0 - _2049;
        float _2100 = (0.5 / (((_1707 * ((_2063 * _2090) + _2049)) + 9.9999999392252902907785028219223e-09) + (((_1707 * _2090) + _2049) * _2063))) * _2063;
        float _3996 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2102 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * (_2072 / ((_2076 * _2076) * 3.141590118408203125));
        float _2103 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _2019 = (((((_2083 * _1729) + _457) * cbLight._m0[_2034].x) * _2102) * _2103) + _1905;
        _2021 = (((((_2083 * _1731) + _459) * cbLight._m0[_2034].y) * _2102) * _2103) + _1907;
        _2023 = (((((_2083 * _1732) + _460) * cbLight._m0[_2034].z) * _2102) * _2103) + _1909;
    }
    float _2237;
    float _2239;
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    if (_1535.y == 0u)
    {
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2178;
        float _2180 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2178;
        float _2181 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2178;
        uvec4 _2193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2194 = _2193.x;
        uint _2205 = uint((float(_2193.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2194))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2194)));
        float _2215 = (log2(_2181 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2216 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        uint _2219 = uint(isnan(14.0) ? _2216 : (isnan(_2216) ? 14.0 : min(_2216, 14.0)));
        uvec4 _2224 = texelFetch(g_lightClusterGridBuffer, int(((_2219 << 2u) + (_2205 << 6u)) >> 2u));
        uint _2225 = _2224.x;
        uint _2226 = _2193.z;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((((1u << ((_2226 >> 4u) & 15u)) + 4294967295u) & _2225) == 0u) || ((_2226 & 240u) == 0u))
        {
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
        }
        else
        {
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2336;
            float _2338;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            float _2482 = 0.0;
            float _2483 = 0.0;
            float _2484 = 0.0;
            uint _2485 = 0u;
            uint _2494;
            bool _2495;
            for (;;)
            {
                _2494 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2485 << 2u)) >> 2u)).x;
                _2495 = _2494 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2495)
                {
                    frontier_phi_65_pred = _2481;
                    frontier_phi_65_pred_1 = _2484;
                    frontier_phi_65_pred_2 = _2483;
                    frontier_phi_65_pred_3 = _2482;
                    frontier_phi_65_pred_4 = _2480;
                    frontier_phi_65_pred_5 = _2479;
                }
                else
                {
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    uint _2631;
                    _2625 = _2479;
                    _2626 = _2480;
                    _2627 = _2481;
                    _2628 = _2482;
                    _2629 = _2483;
                    _2630 = _2484;
                    _2631 = _2494;
                    float _2551;
                    float _2552;
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    for (;;)
                    {
                        uint _2635 = uint(findLSB(_2631)) + (_2485 << 5u);
                        uint _2632 = (_2631 + 4294967295u) & _2631;
                        uint _2637 = _2635 * 48u;
                        vec4 _2651 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2637)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2637 + 3u)).x));
                        uint _2657 = (_2635 * 48u) + 4u;
                        vec4 _2670 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2657)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2657 + 3u)).x));
                        uint _2676 = (_2635 * 48u) + 8u;
                        vec3 _2687 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2676)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2676 + 2u)).x));
                        float _2691 = _2651.x - _2179;
                        float _2692 = _2651.y - _2180;
                        float _2693 = _2651.z - _2181;
                        float _2694 = dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693));
                        float _2697 = inversesqrt(_2694);
                        float _2698 = _2697 * _2691;
                        float _2699 = _2697 * _2692;
                        float _2700 = _2697 * _2693;
                        float _2701 = dot(vec3(_412, _415, _418), vec3(_2698, _2699, _2700));
                        float _2706 = 1.0 - (_2694 * _2651.w);
                        float _4022 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2707 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2708 = sqrt(_2694) * _2670.w;
                        float _2711 = 1.39999997615814208984375 / (_2708 + 1.39999997615814208984375);
                        float _2712 = _2711 * _2711;
                        float _2715 = ((1.0 - _2712) * _2701) + _2712;
                        float _2718 = _2708 * _2708;
                        float _2722 = ((isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))) * _2707) / ((_2718 * 0.699999988079071044921875) + 1.0);
                        float _2726 = (-0.0) - _2179;
                        float _2727 = (-0.0) - _2180;
                        float _2728 = (-0.0) - _2181;
                        float _2732 = inversesqrt(dot(vec3(_2726, _2727, _2728), vec3(_2726, _2727, _2728)));
                        float _2733 = _2732 * _2726;
                        float _2734 = _2732 * _2727;
                        float _2735 = _2732 * _2728;
                        float _2743 = exp2(log2(1.0 / ((_2718 * 3.5) + 5.0)) * 0.25);
                        float _2744 = 1.0 - _488;
                        float _2751 = sqrt(1.0 - ((1.0 - (_2744 * _2744)) * (1.0 - (_2743 * _2743))));
                        float _2752 = _2751 * _2751;
                        float _2753 = _2752 * _2752;
                        float _2754 = _2733 + _2698;
                        float _2755 = _2734 + _2699;
                        float _2756 = _2735 + _2700;
                        float _2760 = inversesqrt(dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756)));
                        float _2764 = dot(vec3(_412, _415, _418), vec3(_2733, _2734, _2735));
                        float _4038 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
                        float _2767 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                        float _2768 = dot(vec3(_412, _415, _418), vec3(_2760 * _2754, _2760 * _2755, _2760 * _2756));
                        float _4049 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2771 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2775 = ((_2771 * _2771) * (_2753 + (-1.0))) + 1.0;
                        float _2776 = _2711 * _2752;
                        float _2777 = _2776 * _2776;
                        float _2780 = ((1.0 - _2777) * _2701) + _2777;
                        float _4060 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2781 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2782 = 1.0 - _2752;
                        float _2792 = (0.5 / (((_2781 * ((_2767 * _2782) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2781 * _2782) + _2752) * _2767))) * _2781;
                        float _4071 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2803 = (((_2753 * 3.1415927410125732421875) * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) / ((_2775 * _2775) * ((_2718 * 2.1991131305694580078125) + 3.141590118408203125))) * _2707;
                        _2554 = (_2722 * _2670.x) + _2628;
                        _2555 = (_2722 * _2670.y) + _2629;
                        _2556 = (_2722 * _2670.z) + _2630;
                        _2551 = (_2803 * _2687.x) + _2625;
                        _2552 = (_2803 * _2687.y) + _2626;
                        _2553 = (_2803 * _2687.z) + _2627;
                        if (_2632 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2625 = _2551;
                            _2626 = _2552;
                            _2627 = _2553;
                            _2628 = _2554;
                            _2629 = _2555;
                            _2630 = _2556;
                            _2631 = _2632;
                        }
                    }
                    frontier_phi_65_pred = _2553;
                    frontier_phi_65_pred_1 = _2556;
                    frontier_phi_65_pred_2 = _2555;
                    frontier_phi_65_pred_3 = _2554;
                    frontier_phi_65_pred_4 = _2552;
                    frontier_phi_65_pred_5 = _2551;
                }
                _2332 = frontier_phi_65_pred;
                _2338 = frontier_phi_65_pred_1;
                _2336 = frontier_phi_65_pred_2;
                _2334 = frontier_phi_65_pred_3;
                _2330 = frontier_phi_65_pred_4;
                _2328 = frontier_phi_65_pred_5;
                uint _2486 = _2485 + 1u;
                if (_2486 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2479 = _2328;
                    _2480 = _2330;
                    _2481 = _2332;
                    _2482 = _2334;
                    _2483 = _2336;
                    _2484 = _2338;
                    _2485 = _2486;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
        }
        uvec4 _2341 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2342 = _2341.z;
        uint _2344 = (_2342 >> 8u) & 15u;
        float _2447;
        float _2449;
        float _2451;
        float _2453;
        float _2455;
        float _2457;
        if (((4294967295u << _2344) & _2225) == 0u)
        {
            _2447 = _2327;
            _2449 = _2329;
            _2451 = _2331;
            _2453 = _2333;
            _2455 = _2335;
            _2457 = _2337;
        }
        else
        {
            float _2472 = inversesqrt(dot(vec3(_2179, _2180, _2181), vec3(_2179, _2180, _2181)));
            float _2473 = _2472 * _2179;
            float _2474 = _2472 * _2180;
            float _2475 = _2472 * _2181;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2344 < ((_2342 >> 12u) & 15u))
            {
                float _2448;
                float _2450;
                float _2452;
                float _2454;
                float _2456;
                float _2458;
                float _2608 = _2327;
                float _2609 = _2329;
                float _2610 = _2331;
                float _2611 = _2333;
                float _2612 = _2335;
                float _2613 = _2337;
                uint _2614 = _2344;
                uint _2623;
                bool _2624;
                for (;;)
                {
                    _2623 = texelFetch(g_lightClassification, int((((_2219 << 5u) + (_2205 << 9u)) + (_2614 << 2u)) >> 2u)).x;
                    _2624 = _2623 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2624)
                    {
                        frontier_phi_76_pred = _2613;
                        frontier_phi_76_pred_1 = _2612;
                        frontier_phi_76_pred_2 = _2611;
                        frontier_phi_76_pred_3 = _2610;
                        frontier_phi_76_pred_4 = _2609;
                        frontier_phi_76_pred_5 = _2608;
                    }
                    else
                    {
                        float _2819;
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _2832 = _2608;
                        float _2833 = _2609;
                        float _2834 = _2610;
                        float _2835 = _2611;
                        float _2836 = _2612;
                        float _2837 = _2613;
                        uint _2838 = _2623;
                        uint _2839;
                        vec4 _2864;
                        float _2865;
                        vec4 _2880;
                        vec3 _2892;
                        vec4 _2908;
                        vec4 _2924;
                        float _2971;
                        bool _2972;
                        for (;;)
                        {
                            uint _2849 = ((_2614 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2838));
                            _2839 = (_2838 + 4294967295u) & _2838;
                            uint _2851 = _2849 * 40u;
                            _2864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 3u)).x));
                            _2865 = _2864.w;
                            uint _2867 = (_2849 * 40u) + 4u;
                            _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2882 = (_2849 * 40u) + 8u;
                            _2892 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x));
                            uint _2895 = (_2849 * 40u) + 16u;
                            _2908 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 3u)).x));
                            uint _2911 = (_2849 * 40u) + 20u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            uint _2927 = (_2849 * 40u) + 24u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2946 = (_2849 * 40u) + 28u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            _2971 = fma(_2181, _2959.z, fma(_2180, _2959.y, _2959.x * _2179)) + _2959.w;
                            _2972 = !((fma(_2181, _2940.z, fma(_2180, _2940.y, _2940.x * _2179)) + _2940.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_2972)
                            {
                                float _2999 = _2864.x - _2179;
                                float _3000 = _2864.y - _2180;
                                float _3001 = _2864.z - _2181;
                                float _3002 = dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001));
                                float _3005 = inversesqrt(_3002);
                                float _3006 = _3005 * _2999;
                                float _3007 = _3005 * _3000;
                                float _3008 = _3005 * _3001;
                                float _3012 = 1.0 - (_3002 / (_2865 * _2865));
                                float _4082 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3017 = sqrt(_3002) * _2880.w;
                                float _3019 = 1.39999997615814208984375 / (_3017 + 1.39999997615814208984375);
                                float _3020 = _3019 * _3019;
                                float _3023 = ((1.0 - _3020) * dot(vec3(_3006, _3007, _3008), vec3(_412, _415, _418))) + _3020;
                                float _3026 = _3017 * _3017;
                                float _3030 = (fma(_2181, _2908.z, fma(_2180, _2908.y, _2908.x * _2179)) + _2908.w) / _2971;
                                float _3031 = (fma(_2181, _2924.z, fma(_2180, _2924.y, _2924.x * _2179)) + _2924.w) / _2971;
                                float _3035 = 1.0 - dot(vec2(_3030, _3031), vec2(_3030, _3031));
                                float _4098 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                                float _3036 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3037 = _3036 * (((isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0))) * _3013) / ((_3026 * 0.699999988079071044921875) + 1.0));
                                float _3049 = exp2(log2(1.0 / ((_3026 * 3.5) + 5.0)) * 0.25);
                                float _3050 = 1.0 - _488;
                                float _3057 = sqrt(1.0 - ((1.0 - (_3050 * _3050)) * (1.0 - (_3049 * _3049))));
                                float _3058 = _3057 * _3057;
                                float _3059 = _3058 * _3058;
                                float _3060 = _3006 - _2473;
                                float _3061 = _3007 - _2474;
                                float _3062 = _3008 - _2475;
                                float _3066 = inversesqrt(dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062)));
                                float _3070 = dot(vec3(_412, _415, _418), vec3((-0.0) - _2473, (-0.0) - _2474, (-0.0) - _2475));
                                float _4109 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3073 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3074 = dot(vec3(_412, _415, _418), vec3(_3066 * _3060, _3066 * _3061, _3066 * _3062));
                                float _4120 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3077 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3081 = ((_3077 * _3077) * (_3059 + (-1.0))) + 1.0;
                                float _3082 = _3019 * _3058;
                                float _3083 = _3082 * _3082;
                                float _3089 = ((1.0 - _3083) * dot(vec3(_412, _415, _418), vec3(_3006, _3007, _3008))) + _3083;
                                float _4131 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3090 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3091 = 1.0 - _3058;
                                float _3101 = (0.5 / (((_3090 * ((_3073 * _3091) + _3058)) + 9.9999999392252902907785028219223e-09) + (((_3090 * _3091) + _3058) * _3073))) * _3090;
                                float _4142 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3111 = (_3036 * _3013) * (((_3059 * 3.1415927410125732421875) * (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) / ((_3081 * _3081) * ((_3026 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3037 * _2880.z;
                                frontier_phi_82_pred_1 = _3037 * _2880.y;
                                frontier_phi_82_pred_2 = _3037 * _2880.x;
                                frontier_phi_82_pred_3 = _3111 * _2892.z;
                                frontier_phi_82_pred_4 = _3111 * _2892.y;
                                frontier_phi_82_pred_5 = _3111 * _2892.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3120 = frontier_phi_82_pred;
                            _3119 = frontier_phi_82_pred_1;
                            _3118 = frontier_phi_82_pred_2;
                            _3117 = frontier_phi_82_pred_3;
                            _3116 = frontier_phi_82_pred_4;
                            _3115 = frontier_phi_82_pred_5;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2819 = _3115 + _2832;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            if (_2839 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2832 = _2819;
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2839;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2824;
                        frontier_phi_76_pred_1 = _2823;
                        frontier_phi_76_pred_2 = _2822;
                        frontier_phi_76_pred_3 = _2821;
                        frontier_phi_76_pred_4 = _2820;
                        frontier_phi_76_pred_5 = _2819;
                    }
                    _2458 = frontier_phi_76_pred;
                    _2456 = frontier_phi_76_pred_1;
                    _2454 = frontier_phi_76_pred_2;
                    _2452 = frontier_phi_76_pred_3;
                    _2450 = frontier_phi_76_pred_4;
                    _2448 = frontier_phi_76_pred_5;
                    uint _2615 = _2614 + 1u;
                    if (_2615 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2608 = _2448;
                        _2609 = _2450;
                        _2610 = _2452;
                        _2611 = _2454;
                        _2612 = _2456;
                        _2613 = _2458;
                        _2614 = _2615;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2454;
                frontier_phi_57_58_ladder_1 = _2458;
                frontier_phi_57_58_ladder_2 = _2456;
                frontier_phi_57_58_ladder_3 = _2452;
                frontier_phi_57_58_ladder_4 = _2450;
                frontier_phi_57_58_ladder_5 = _2448;
            }
            else
            {
                frontier_phi_57_58_ladder = _2333;
                frontier_phi_57_58_ladder_1 = _2337;
                frontier_phi_57_58_ladder_2 = _2335;
                frontier_phi_57_58_ladder_3 = _2331;
                frontier_phi_57_58_ladder_4 = _2329;
                frontier_phi_57_58_ladder_5 = _2327;
            }
            _2447 = frontier_phi_57_58_ladder_5;
            _2449 = frontier_phi_57_58_ladder_4;
            _2451 = frontier_phi_57_58_ladder_3;
            _2453 = frontier_phi_57_58_ladder;
            _2455 = frontier_phi_57_58_ladder_2;
            _2457 = frontier_phi_57_58_ladder_1;
        }
        float _2462 = isnan(1.0) ? _472 : (isnan(_472) ? 1.0 : min(_472, 1.0));
        _2237 = (_2462 * _2453) + _1671;
        _2239 = (_2462 * _2455) + _1673;
        _2241 = (_2462 * _2457) + _1675;
        _2243 = ((_2447 * _457) * _2462) + _2019;
        _2245 = ((_2449 * _459) * _2462) + _2021;
        _2247 = ((_2451 * _460) * _2462) + _2023;
    }
    else
    {
        _2237 = _1671;
        _2239 = _1673;
        _2241 = _1675;
        _2243 = _2019;
        _2245 = _2021;
        _2247 = _2023;
    }
    float _4158 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4169 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _4180 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4191 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _2265 = ((isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2237 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _472))) + ((_2243 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2266 = ((isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_2239 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _472))) + ((_2245 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2267 = ((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2241 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _472))) + ((_2247 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1282)) * cbPerFrame._m0[3u].x);
    float _2272 = cbInstanceData._m0[_431 + 6u].w * (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0)));
    float _2277 = _390 / cbSceneParam._m0[86u].x;
    float _2278 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2292 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2294 = _2292.x;
    float _2295 = _2292.y;
    float _2296 = _2292.z;
    float _2297 = _2292.w;
    float _2389;
    float _2391;
    float _2393;
    float _2395;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2352 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2353 = _2352 / _317;
        float _2364 = _2353 * _368;
        float _2365 = _369 * _2353;
        float _2366 = (-0.0) - _2365;
        float _2367 = _2353 * _370;
        float _2369 = (cbSceneParam._m0[77u].w * _2366) / _2352;
        float _2370 = _2369 + cbSceneParam._m0[79u].w;
        float _2371 = cbSceneParam._m0[79u].w - _2365;
        float _2377 = sqrt(((_2364 * _2364) + (_2365 * _2365)) + (_2367 * _2367));
        float _2380 = (1.0 - (cbSceneParam._m0[77u].w / _2352)) * _2377;
        float _2385 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2387 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2564;
        if (abs((_2366 - _2369) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2564 = ((((_2370 > 0.0) ? exp2(_2385 * _2370) : (2.0 - exp2(_2387 * _2370))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2380;
        }
        else
        {
            float _2508 = 1.0 / cbSceneParam._m0[80u].x;
            float _2509 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : max(_2370, _2371));
            float _2510 = isnan(_2371) ? _2370 : (isnan(_2370) ? _2371 : min(_2370, _2371));
            float _2519 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : min(_2509, 0.0));
            float _2520 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : min(_2510, 0.0));
            _2564 = ((abs(_2377 / _2366) * cbSceneParam._m0[80u].y) * ((((_2519 - _2520) * 2.0) - ((exp2(_2385 * (isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0)))) - exp2(_2385 * (isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0))))) * _2508)) - ((exp2(_2387 * _2519) - exp2(_2387 * _2520)) * _2508))) + (_2380 * cbSceneParam._m0[80u].z);
        }
        vec4 _2566 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2277, _2278, 1.0), 0.0);
        float _2575 = exp2((_2564 * (-1.44269502162933349609375)) * (1.0 - _2566.w));
        float _2576 = log2(_2575);
        float _2592 = log2(_2297);
        _2389 = (exp2(_2592 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].x)) * _2566.x) / cbSceneParam._m0[78u].x)) + _2294;
        _2391 = (exp2(_2592 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].y)) * _2566.y) / cbSceneParam._m0[78u].y)) + _2295;
        _2393 = (exp2(_2592 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2576 * cbSceneParam._m0[78u].z)) * _2566.z) / cbSceneParam._m0[78u].z)) + _2296;
        _2395 = _2575 * _2297;
    }
    else
    {
        _2389 = _2294;
        _2391 = _2295;
        _2393 = _2296;
        _2395 = _2297;
    }
    bool _2602;
    vec4 _2405;
    vec4 _2427;
    float _2429;
    float _2433;
    float _2434;
    float _2435;
    float _2436;
    bool _2446;
    for (;;)
    {
        _2405 = cbMatDynParam._m0[0u];
        float _2407 = roundEven(_2405.y);
        bool _2408 = _2407 == 3.0;
        float _2409 = log2(_2395);
        float _2416 = exp2(_2409 * cbSceneParam._m0[78u].x) * _2265;
        float _2417 = exp2(_2409 * cbSceneParam._m0[78u].y) * _2266;
        float _2418 = exp2(_2409 * cbSceneParam._m0[78u].z) * _2267;
        float _2425 = _384 + (-0.5);
        _2427 = cbMtdParam._m0[1u];
        _2429 = _2427.y * _2425;
        float _2432 = (_2407 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2433 = _2432 * (_2408 ? _2416 : (_2416 + (cbSceneParam._m0[72u].w * _2389)));
        _2434 = _2432 * (_2408 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2391)));
        _2435 = _2432 * (_2408 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2393)));
        _2436 = _2425 * 0.999000012874603271484375;
        _2446 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2446)
        {
            if ((cbInstanceData._m0[_431 + 7u].x + _2436) < 0.5)
            {
                _2602 = true;
                break;
            }
        }
        uint _2543 = _433 + uint(_2405.w);
        if ((cbInstanceData._m0[_2543].w < 1.0) && ((cbInstanceData._m0[_2543].w + _2436) < 0.5))
        {
            _2602 = true;
            break;
        }
        if ((_2429 + _242) < _2427.x)
        {
            _2602 = true;
            break;
        }
        _2602 = false;
        break;
    }
    float _2810;
    if (_2602)
    {
        discard_state = true;
        _2810 = 0.0;
    }
    else
    {
        _2810 = _2272;
    }
    SV_Target.x = _2433;
    SV_Target.y = _2434;
    SV_Target.z = _2435;
    SV_Target.w = _2810;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2272;
    discard_exit();
}


