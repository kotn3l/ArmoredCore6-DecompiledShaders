#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Alpha_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD_1;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _845;
float _3234;
float _3235;
float _3236;
float _3237;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _190 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _197 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = _197 * NORMAL.x;
    float _199 = _197 * NORMAL.y;
    float _200 = _197 * NORMAL.z;
    float _204 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212;
    float _213;
    float _214;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
    }
    else
    {
        _212 = _198;
        _213 = _199;
        _214 = _200;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = _234.w;
    float _241 = _234.x * cbMtdParam._m0[9u].x;
    float _242 = _234.y * cbMtdParam._m0[9u].y;
    float _243 = _234.z * cbMtdParam._m0[9u].z;
    float _244 = _240 * TEXCOORD_1.z;
    vec4 _260 = texture(sampler2D(M_AMSN_V_Alpha_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_1.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3246 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))));
    float _280 = fma(_277, _212, fma(_270, _204 * TANGENT.x, (_190 * _182) * _268));
    float _283 = fma(_277, _213, fma(_270, _204 * TANGENT.y, (_190 * _183) * _268));
    float _286 = fma(_277, _214, fma(_270, _204 * TANGENT.z, (_190 * _184) * _268));
    float _290 = inversesqrt(dot(vec3(_280, _283, _286), vec3(_280, _283, _286)));
    float _291 = _290 * _280;
    float _292 = _290 * _283;
    float _293 = _290 * _286;
    float _3257 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _294 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _295 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3290 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3301 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3312 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _299 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    vec4 _380 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _382 = _380.w;
    float _388 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _389 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _410 = fma(_293, cbSceneParam._m0[5u].z, fma(_292, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _291));
    float _413 = fma(_293, cbSceneParam._m0[6u].z, fma(_292, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _291));
    float _416 = fma(_293, cbSceneParam._m0[7u].z, fma(_292, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _291));
    uint _429 = uint(roundEven(NORMAL.w)) * 13u;
    uint _431 = _429 + 9u;
    uint _432 = _431 + uint(cbMatDynParam._m0[0u].w);
    float _438 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_432].x;
    float _439 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_432].y;
    float _440 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_432].z;
    float _3323 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _3345 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _444 = 1.0 - _299;
    float _445 = _441 * _444;
    float _446 = _442 * _444;
    float _447 = _443 * _444;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _299;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _299;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _299;
    float _455 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    vec4 _467 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _388, cbSceneParam._m0[86u].y * _389));
    float _470 = _467.x * TEXCOORD_1.w;
    float _471 = dot(vec3(_291, _292, _293), vec3(_373, _374, _375));
    float _474 = _471 * 2.0;
    float _478 = (_474 * _291) - _373;
    float _479 = (_474 * _292) - _374;
    float _480 = (_474 * _293) - _375;
    float _484 = abs(dot(vec3(_373, _374, _375), vec3(_291, _292, _293)));
    float _3356 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _486 = sqrt(_295);
    float _499 = exp2((_486 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_486 * 3.0));
    float _505 = (1.0 - _499) * ((_486 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _506 = _499 * _486;
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _538 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _844;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _569 = fma(_542, cbModelParam._m0[26u].z, fma(_538, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _534));
        float _573 = fma(_542, cbModelParam._m0[27u].z, fma(_538, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _534));
        float _577 = fma(_542, cbModelParam._m0[28u].z, fma(_538, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _534));
        float _602 = _534 + _291;
        float _603 = _538 + _292;
        float _604 = _542 + _293;
        float _614 = fma(_604, cbModelParam._m0[26u].z, fma(_603, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _602)) - _569;
        float _615 = fma(_604, cbModelParam._m0[27u].z, fma(_603, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _602)) - _573;
        float _616 = fma(_604, cbModelParam._m0[28u].z, fma(_603, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _602)) - _577;
        float _620 = inversesqrt(dot(vec3(_614, _615, _616), vec3(_614, _615, _616)));
        float _633 = ((_620 * _614) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_569 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_620 * _615) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_573 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_620 * _616) / cbModelParam._m0[34u].z) + ((((((_577 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _652 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        vec4 _659 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_633, _634, _635), 0.0);
        float _672 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _673 = _672 * (_638.x + (-0.5));
        float _674 = _672 * (_638.y + (-0.5));
        float _675 = _672 * (_638.z + (-0.5));
        float _682 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_645.x + (-0.5));
        float _684 = _682 * (_645.y + (-0.5));
        float _685 = _682 * (_645.z + (-0.5));
        float _692 = exp2((_652.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_652.x + (-0.5));
        float _694 = _692 * (_652.y + (-0.5));
        float _695 = _692 * (_652.z + (-0.5));
        float _702 = exp2((_659.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_659.x + (-0.5));
        float _704 = _702 * (_659.y + (-0.5));
        float _705 = _702 * (_659.z + (-0.5));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = _673 * 0.5;
        float _710 = _683 * 0.5;
        float _711 = _693 * 0.5;
        float _712 = dot(vec3(_709, _710, _711), vec3(_709, _710, _711));
        float _717 = (_712 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_712);
        float _726 = (dot(vec3(_291, _292, _293), vec3(_717 * _709, _717 * _710, _717 * _711)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _736 = sqrt(((_710 * _710) + (_709 * _709)) + (_711 * _711)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _737 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _738 = _737 * 2.0;
        float _742 = (1.0 - _737) / (_737 + 1.0);
        float _3404 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _752 = ((((1.0 - _743) * (_738 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_738 + 1.0))) + _743) * _706;
        float _753 = _674 * 0.5;
        float _754 = _684 * 0.5;
        float _755 = _694 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _769 = (dot(vec3(_291, _292, _293), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _778 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _779 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _780 = _779 * 2.0;
        float _784 = (1.0 - _779) / (_779 + 1.0);
        float _3437 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _794 = ((((1.0 - _785) * (_780 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_780 + 1.0))) + _785) * _707;
        float _795 = _675 * 0.5;
        float _796 = _685 * 0.5;
        float _797 = _695 * 0.5;
        float _798 = dot(vec3(_795, _796, _797), vec3(_795, _796, _797));
        float _803 = (_798 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_798);
        float _811 = (dot(vec3(_291, _292, _293), vec3(_803 * _795, _803 * _796, _803 * _797)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _820 = sqrt(((_796 * _796) + (_795 * _795)) + (_797 * _797)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _821 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _822 = _821 * 2.0;
        float _826 = (1.0 - _821) / (_821 + 1.0);
        float _3470 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _836 = ((((1.0 - _827) * (_822 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_822 + 1.0))) + _827) * _708;
        _844 = _675;
        _846 = _674;
        _847 = _673;
        _848 = _685;
        _849 = _684;
        _850 = _683;
        _851 = _695;
        _852 = _694;
        _853 = _693;
        _854 = _708;
        _855 = _707;
        _856 = _706;
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0)));
    }
    else
    {
        _844 = _845;
        _846 = _845;
        _847 = _845;
        _848 = _845;
        _849 = _845;
        _850 = _845;
        _851 = _845;
        _852 = _845;
        _853 = _845;
        _854 = _845;
        _855 = _845;
        _856 = _845;
        _857 = 0.0;
        _858 = 0.0;
        _859 = 0.0;
    }
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _885 = fma(_542, cbModelParam._m0[30u].z, fma(_538, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _534));
        float _889 = fma(_542, cbModelParam._m0[31u].z, fma(_538, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _534));
        float _893 = fma(_542, cbModelParam._m0[32u].z, fma(_538, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _534));
        float _916 = _534 + _291;
        float _917 = _538 + _292;
        float _918 = _542 + _293;
        float _928 = fma(_918, cbModelParam._m0[30u].z, fma(_917, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _916)) - _885;
        float _929 = fma(_918, cbModelParam._m0[31u].z, fma(_917, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _916)) - _889;
        float _930 = fma(_918, cbModelParam._m0[32u].z, fma(_917, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _916)) - _893;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_885 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_889 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[35u].z) + ((((((_893 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _984 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_951.x + (-0.5));
        float _986 = _984 * (_951.y + (-0.5));
        float _987 = _984 * (_951.z + (-0.5));
        float _994 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_958.x + (-0.5));
        float _996 = _994 * (_958.y + (-0.5));
        float _997 = _994 * (_958.z + (-0.5));
        float _1004 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_965.x + (-0.5));
        float _1006 = _1004 * (_965.y + (-0.5));
        float _1007 = _1004 * (_965.z + (-0.5));
        float _1014 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_972.x + (-0.5));
        float _1016 = _1014 * (_972.y + (-0.5));
        float _1017 = _1014 * (_972.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_291, _292, _293), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _3533 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1048 + 1.0))) + _1053) * _1018;
        float _1063 = _986 * 0.5;
        float _1064 = _996 * 0.5;
        float _1065 = _1006 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_291, _292, _293), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _3566 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1090 + 1.0))) + _1095) * _1019;
        float _1105 = _987 * 0.5;
        float _1106 = _997 * 0.5;
        float _1107 = _1007 * 0.5;
        float _1108 = dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107));
        float _1113 = (_1108 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1108);
        float _1121 = (dot(vec3(_291, _292, _293), vec3(_1113 * _1105, _1113 * _1106, _1113 * _1107)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1130 = sqrt(((_1106 * _1106) + (_1105 * _1105)) + (_1107 * _1107)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1131 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1132 = _1131 * 2.0;
        float _1136 = (1.0 - _1131) / (_1131 + 1.0);
        float _3599 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1146 = ((((1.0 - _1137) * (_1132 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1132 + 1.0))) + _1137) * _1020;
        _1154 = _987;
        _1155 = _986;
        _1156 = _985;
        _1157 = _997;
        _1158 = _996;
        _1159 = _995;
        _1160 = _1007;
        _1161 = _1006;
        _1162 = _1005;
        _1163 = _1020;
        _1164 = _1019;
        _1165 = _1018;
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0)));
    }
    else
    {
        _1154 = _845;
        _1155 = _845;
        _1156 = _845;
        _1157 = _845;
        _1158 = _845;
        _1159 = _845;
        _1160 = _845;
        _1161 = _845;
        _1162 = _845;
        _1163 = _845;
        _1164 = _845;
        _1165 = _845;
        _1166 = 0.0;
        _1167 = 0.0;
        _1168 = 0.0;
    }
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1201 = fma(_1180, cbSceneParam._m0[89u].z, fma(_1179, cbSceneParam._m0[89u].y, _1178 * cbSceneParam._m0[89u].x));
    float _1204 = fma(_1180, cbSceneParam._m0[90u].z, fma(_1179, cbSceneParam._m0[90u].y, _1178 * cbSceneParam._m0[90u].x));
    float _1207 = fma(_1180, cbSceneParam._m0[91u].z, fma(_1179, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1178));
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1228 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1231 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1265;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1238 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_844, _848, _851, _854));
        float _1242 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_846, _849, _852, _855));
        float _1246 = dot(vec4(_1222, _1223, _1224, 1.0), vec4(_847, _850, _853, _856));
        float _1253 = dot(vec4(cbModelParam._m0[39u]), vec4(_1222, _1223, _1224, 1.0));
        _1265 = dot(vec3(isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1253) ? 0.0 : (isnan(0.0) ? _1253 : max(0.0, _1253))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1265 = 1.0;
    }
    float _1276;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1267 = dot(vec4(cbModelParam._m0[40u]), vec4(_1222, _1223, _1224, 1.0));
        _1276 = dot(vec3(isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)), isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)), isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1276 = 1.0;
    }
    float _1280 = (_1276 * cbModelParam._m0[1u].x) + (_1265 * (1.0 - cbModelParam._m0[1u].x));
    float _1290 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1291 = isnan(_1290) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1290 : min(cbModelParam._m0[25u].z, _1290));
    float _1373;
    float _1375;
    float _1377;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1340 = fma(_542, cbModelParam._m0[13u].z, fma(_538, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _534)) + cbModelParam._m0[13u].w;
        float _1344 = fma(_542, cbModelParam._m0[14u].z, fma(_538, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _534)) + cbModelParam._m0[14u].w;
        float _1348 = fma(_542, cbModelParam._m0[15u].z, fma(_538, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _534)) + cbModelParam._m0[15u].w;
        float _1351 = fma(_480, cbModelParam._m0[13u].z, fma(_479, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _478));
        float _1354 = fma(_480, cbModelParam._m0[14u].z, fma(_479, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _478));
        float _1357 = fma(_480, cbModelParam._m0[15u].z, fma(_479, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _478));
        float _1385;
        if (_1351 > 0.0)
        {
            _1385 = abs((1.0 - _1340) / _1351);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1351 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1340 + 1.0) / _1351);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1385 = frontier_phi_16_14_ladder;
        }
        float _1593;
        if (_1354 > 0.0)
        {
            _1593 = abs((1.0 - _1344) / _1354);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1354 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1344 + 1.0) / _1354);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1593 = frontier_phi_25_21_ladder;
        }
        float _1847;
        if (_1357 > 0.0)
        {
            _1847 = abs((1.0 - _1348) / _1357);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1348 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1847 = frontier_phi_37_32_ladder;
        }
        float _1849 = isnan(_1593) ? _1385 : (isnan(_1385) ? _1593 : min(_1385, _1593));
        float _1850 = isnan(_1847) ? _1849 : (isnan(_1849) ? _1847 : min(_1849, _1847));
        float _1854 = (_1850 * _1351) + _1340;
        float _1855 = (_1850 * _1354) + _1344;
        float _1856 = (_1850 * _1357) + _1348;
        float _1857 = _1850 * 9.9999997473787516355514526367188e-05;
        float _1859 = (-1.0) - _1857;
        float _1861 = _1857 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1856 > _1861) || ((_1856 < _1859) || ((_1855 > _1861) || ((_1855 < _1859) || ((_1854 < _1859) || (_1854 > _1861))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1984 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1856, cbModelParam._m0[9u].z, fma(_1855, cbModelParam._m0[9u].y, _1854 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1856, cbModelParam._m0[10u].z, fma(_1855, cbModelParam._m0[10u].y, _1854 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1856, cbModelParam._m0[11u].z, fma(_1855, cbModelParam._m0[11u].y, _1854 * cbModelParam._m0[11u].x))), _1291);
            frontier_phi_15_37_ladder = _1984.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1984.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1984.x * cbModelParam._m0[1u].y;
        }
        _1373 = frontier_phi_15_37_ladder_2;
        _1375 = frontier_phi_15_37_ladder_1;
        _1377 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1361 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_478, _479, _480), _1291);
        _1373 = _1361.x * cbModelParam._m0[1u].y;
        _1375 = _1361.y * cbModelParam._m0[1u].y;
        _1377 = _1361.z * cbModelParam._m0[1u].y;
    }
    float _1381 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1382 = isnan(_1381) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1381 : min(cbModelParam._m0[25u].w, _1381));
    float _1475;
    float _1477;
    float _1479;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1439 = fma(_542, cbModelParam._m0[21u].z, fma(_538, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _534)) + cbModelParam._m0[21u].w;
        float _1443 = fma(_542, cbModelParam._m0[22u].z, fma(_538, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _534)) + cbModelParam._m0[22u].w;
        float _1447 = fma(_542, cbModelParam._m0[23u].z, fma(_538, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _534)) + cbModelParam._m0[23u].w;
        float _1450 = fma(_480, cbModelParam._m0[21u].z, fma(_479, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _478));
        float _1453 = fma(_480, cbModelParam._m0[22u].z, fma(_479, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _478));
        float _1456 = fma(_480, cbModelParam._m0[23u].z, fma(_479, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _478));
        float _1598;
        if (_1450 > 0.0)
        {
            _1598 = abs((1.0 - _1439) / _1450);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1450 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1439 + 1.0) / _1450);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1598 = frontier_phi_27_23_ladder;
        }
        float _1874;
        if (_1453 > 0.0)
        {
            _1874 = abs((1.0 - _1443) / _1453);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1453 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1443 + 1.0) / _1453);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1874 = frontier_phi_39_34_ladder;
        }
        float _2087;
        if (_1456 > 0.0)
        {
            _2087 = abs((1.0 - _1447) / _1456);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1447 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2087 = frontier_phi_48_45_ladder;
        }
        float _2089 = isnan(_1874) ? _1598 : (isnan(_1598) ? _1874 : min(_1598, _1874));
        float _2090 = isnan(_2087) ? _2089 : (isnan(_2089) ? _2087 : min(_2089, _2087));
        float _2094 = (_2090 * _1450) + _1439;
        float _2095 = (_2090 * _1453) + _1443;
        float _2096 = (_2090 * _1456) + _1447;
        float _2097 = _2090 * 9.9999997473787516355514526367188e-05;
        float _2098 = (-1.0) - _2097;
        float _2100 = _2097 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2096 > _2100) || ((_2096 < _2098) || ((_2095 > _2100) || ((_2095 < _2098) || ((_2094 < _2098) || (_2094 > _2100))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2296 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2096, cbModelParam._m0[17u].z, fma(_2095, cbModelParam._m0[17u].y, _2094 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2096, cbModelParam._m0[18u].z, fma(_2095, cbModelParam._m0[18u].y, _2094 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2096, cbModelParam._m0[19u].z, fma(_2095, cbModelParam._m0[19u].y, _2094 * cbModelParam._m0[19u].x))), _1382);
            frontier_phi_24_48_ladder = _2296.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2296.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2296.x * cbModelParam._m0[1u].z;
        }
        _1475 = frontier_phi_24_48_ladder_2;
        _1477 = frontier_phi_24_48_ladder_1;
        _1479 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1459 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_478, _479, _480), _1382);
        _1475 = _1459.x * cbModelParam._m0[1u].z;
        _1477 = _1459.y * cbModelParam._m0[1u].z;
        _1479 = _1459.z * cbModelParam._m0[1u].z;
    }
    float _1492 = (((_505 * _455) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1475 - _1373)) + _1373);
    float _1494 = (((_505 * _457) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1477 - _1375)) + _1375);
    float _1496 = (((_505 * _458) + _506) * _470) * ((cbModelParam._m0[1u].w * (_1479 - _1377)) + _1377);
    float _1499 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1494, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1502 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1494, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1505 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1494, cbSceneParam._m0[91u].y, _1492 * cbSceneParam._m0[91u].x));
    uvec4 _1515 = floatBitsToUint(cbInstanceData._m0[_429 + 5u]);
    uint _1517 = _1515.x * 14u;
    uint _1518 = _1517 + 13u;
    float _1525 = _470 + (-1.0);
    float _1530 = (cbLight._m0[_1518].x * _1525) + 1.0;
    float _1531 = (cbLight._m0[_1518].y * _1525) + 1.0;
    float _1532 = (cbLight._m0[_1518].z * _1525) + 1.0;
    float _1533 = (cbLight._m0[_1518].w * _1525) + 1.0;
    uint _1534 = _1517 + 5u;
    float _1540 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
    uint _1544 = _1517 + 4u;
    float _1551 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
    uint _1555 = _1517 | 1u;
    float _1566 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_291, _292, _293));
    float _1569 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_291, _292, _293));
    float _3735 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _3746 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
    float _1574 = (isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * 0.3183098733425140380859375;
    float _1576 = (isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0))) * 0.3183098733425140380859375;
    float _1583 = ((cbLight._m0[_1534].x * _1540) * _1576) + ((cbLight._m0[_1544].x * _1551) * _1574);
    float _1584 = ((_1540 * cbLight._m0[_1534].y) * _1576) + ((_1551 * cbLight._m0[_1544].y) * _1574);
    float _1585 = ((_1540 * cbLight._m0[_1534].z) * _1576) + ((_1551 * cbLight._m0[_1544].z) * _1574);
    uvec4 _1590 = floatBitsToUint(cbLight._m0[_1517 + 12u]);
    bool _1592 = _1590.x == 0u;
    float _1603;
    float _1605;
    float _1607;
    if (_1592)
    {
        _1603 = _1583;
        _1605 = _1584;
        _1607 = _1585;
    }
    else
    {
        uint _1611 = _1517 + 6u;
        float _1627 = (dot(vec3(cbLight._m0[_1517 + 2u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1628 = _1627 * _1627;
        float _3757 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1630 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1603 = (((cbLight._m0[_1611].x * 0.3183098733425140380859375) * _1629) * _1630) + _1583;
        _1605 = (((cbLight._m0[_1611].y * 0.3183098733425140380859375) * _1629) * _1630) + _1584;
        _1607 = (((cbLight._m0[_1611].z * 0.3183098733425140380859375) * _1629) * _1630) + _1585;
    }
    bool _1610 = _1590.y == 0u;
    float _1648;
    float _1650;
    float _1652;
    if (_1610)
    {
        _1648 = _1603;
        _1650 = _1605;
        _1652 = _1607;
    }
    else
    {
        uint _1818 = _1517 + 7u;
        float _1834 = (dot(vec3(cbLight._m0[_1517 + 3u].xyz), vec3(_291, _292, _293)) * 0.5) + 0.5;
        float _1835 = _1834 * _1834;
        float _3773 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        float _1836 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
        float _1837 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1648 = (((cbLight._m0[_1818].x * 0.3183098733425140380859375) * _1836) * _1837) + _1603;
        _1650 = (((cbLight._m0[_1818].y * 0.3183098733425140380859375) * _1836) * _1837) + _1605;
        _1652 = (((cbLight._m0[_1818].z * 0.3183098733425140380859375) * _1836) * _1837) + _1607;
    }
    uint _1655 = _1517 + 8u;
    float _1668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1517].w)) * _295) * 0.949999988079071044921875);
    float _1669 = _1668 * _1668;
    float _1670 = cbLight._m0[_1517].x + _373;
    float _1671 = cbLight._m0[_1517].y + _374;
    float _1672 = cbLight._m0[_1517].z + _375;
    float _1676 = inversesqrt(dot(vec3(_1670, _1671, _1672), vec3(_1670, _1671, _1672)));
    float _1677 = _1676 * _1670;
    float _1678 = _1676 * _1671;
    float _1679 = _1676 * _1672;
    float _1680 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1517].xyz));
    float _3789 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1683 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _3800 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _1684 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
    float _1685 = dot(vec3(_291, _292, _293), vec3(_1677, _1678, _1679));
    float _3811 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1688 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1689 = dot(vec3(cbLight._m0[_1517].xyz), vec3(_1677, _1678, _1679));
    float _3822 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1693 = _1669 * _1669;
    float _1697 = ((_1688 * _1688) * (_1693 + (-1.0))) + 1.0;
    float _1705 = exp2(log2(1.0 - (isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0)))) * 5.0);
    float _1706 = 0.959999978542327880859375 - _452;
    float _1708 = 0.959999978542327880859375 - _453;
    float _1709 = 0.959999978542327880859375 - _454;
    float _1716 = 1.0 - _1669;
    float _1727 = (0.5 / (((_1684 * ((_1683 * _1716) + _1669)) + 9.9999999392252902907785028219223e-09) + (((_1684 * _1716) + _1669) * _1683))) * _1683;
    float _3833 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1729 = (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) * (_1693 / ((_1697 * _1697) * 3.141590118408203125));
    uint _1740 = _1517 + 9u;
    float _1751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1555].w)) * _295) * 0.949999988079071044921875);
    float _1752 = _1751 * _1751;
    float _1753 = cbLight._m0[_1555].x + _373;
    float _1754 = cbLight._m0[_1555].y + _374;
    float _1755 = cbLight._m0[_1555].z + _375;
    float _1759 = inversesqrt(dot(vec3(_1753, _1754, _1755), vec3(_1753, _1754, _1755)));
    float _1760 = _1759 * _1753;
    float _1761 = _1759 * _1754;
    float _1762 = _1759 * _1755;
    float _1763 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1555].xyz));
    float _3844 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1766 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _1767 = dot(vec3(_291, _292, _293), vec3(_1760, _1761, _1762));
    float _3855 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1555].xyz), vec3(_1760, _1761, _1762));
    float _3866 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = _1752 * _1752;
    float _1779 = ((_1770 * _1770) * (_1775 + (-1.0))) + 1.0;
    float _1786 = exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0);
    float _1793 = 1.0 - _1752;
    float _1803 = (0.5 / (((_1684 * ((_1766 * _1793) + _1752)) + 9.9999999392252902907785028219223e-09) + (((_1684 * _1793) + _1752) * _1766))) * _1766;
    float _3877 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1805 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1775 / ((_1779 * _1779) * 3.141590118408203125));
    float _1815 = (((((_1786 * _1706) + _455) * cbLight._m0[_1740].x) * _1805) * _1540) + (((((_1705 * _1706) + _455) * cbLight._m0[_1655].x) * _1729) * _1551);
    float _1816 = (((((_1786 * _1708) + _457) * cbLight._m0[_1740].y) * _1805) * _1540) + (((((_1705 * _1708) + _457) * cbLight._m0[_1655].y) * _1729) * _1551);
    float _1817 = (((((_1786 * _1709) + _458) * cbLight._m0[_1740].z) * _1805) * _1540) + (((((_1705 * _1709) + _458) * cbLight._m0[_1655].z) * _1729) * _1551);
    float _1879;
    float _1881;
    float _1883;
    if (_1592)
    {
        _1879 = _1815;
        _1881 = _1816;
        _1883 = _1817;
    }
    else
    {
        uint _1885 = _1517 + 2u;
        uint _1889 = _1517 + 10u;
        float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1885].w)) * _295) * 0.949999988079071044921875);
        float _1904 = _1903 * _1903;
        float _1905 = cbLight._m0[_1885].x + _373;
        float _1906 = cbLight._m0[_1885].y + _374;
        float _1907 = cbLight._m0[_1885].z + _375;
        float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
        float _1912 = _1911 * _1905;
        float _1913 = _1911 * _1906;
        float _1914 = _1911 * _1907;
        float _1915 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_1885].xyz));
        float _3888 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _1918 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1919 = dot(vec3(_291, _292, _293), vec3(_1912, _1913, _1914));
        float _3899 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1922 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1923 = dot(vec3(cbLight._m0[_1885].xyz), vec3(_1912, _1913, _1914));
        float _3910 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1927 = _1904 * _1904;
        float _1931 = ((_1922 * _1922) * (_1927 + (-1.0))) + 1.0;
        float _1938 = exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0);
        float _1945 = 1.0 - _1904;
        float _1955 = (0.5 / (((_1684 * ((_1918 * _1945) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1684 * _1945) + _1904) * _1918))) * _1918;
        float _3921 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1957 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1927 / ((_1931 * _1931) * 3.141590118408203125));
        float _1958 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1879 = (((((_1938 * _1706) + _455) * cbLight._m0[_1889].x) * _1957) * _1958) + _1815;
        _1881 = (((((_1938 * _1708) + _457) * cbLight._m0[_1889].y) * _1957) * _1958) + _1816;
        _1883 = (((((_1938 * _1709) + _458) * cbLight._m0[_1889].z) * _1957) * _1958) + _1817;
    }
    float _1993;
    float _1995;
    float _1997;
    if (_1610)
    {
        _1993 = _1879;
        _1995 = _1881;
        _1997 = _1883;
    }
    else
    {
        uint _2004 = _1517 + 3u;
        uint _2008 = _1517 + 11u;
        float _2022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2004].w)) * _295) * 0.949999988079071044921875);
        float _2023 = _2022 * _2022;
        float _2024 = cbLight._m0[_2004].x + _373;
        float _2025 = cbLight._m0[_2004].y + _374;
        float _2026 = cbLight._m0[_2004].z + _375;
        float _2030 = inversesqrt(dot(vec3(_2024, _2025, _2026), vec3(_2024, _2025, _2026)));
        float _2031 = _2030 * _2024;
        float _2032 = _2030 * _2025;
        float _2033 = _2030 * _2026;
        float _2034 = dot(vec3(_291, _292, _293), vec3(cbLight._m0[_2004].xyz));
        float _3937 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
        float _2037 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _2038 = dot(vec3(_291, _292, _293), vec3(_2031, _2032, _2033));
        float _3948 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2041 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _2042 = dot(vec3(cbLight._m0[_2004].xyz), vec3(_2031, _2032, _2033));
        float _3959 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2046 = _2023 * _2023;
        float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
        float _2057 = exp2(log2(1.0 - (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * 5.0);
        float _2064 = 1.0 - _2023;
        float _2074 = (0.5 / (((_1684 * ((_2037 * _2064) + _2023)) + 9.9999999392252902907785028219223e-09) + (((_1684 * _2064) + _2023) * _2037))) * _2037;
        float _3970 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2076 = (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
        float _2077 = isnan(1.0) ? _1533 : (isnan(_1533) ? 1.0 : min(_1533, 1.0));
        _1993 = (((((_2057 * _1706) + _455) * cbLight._m0[_2008].x) * _2076) * _2077) + _1879;
        _1995 = (((((_2057 * _1708) + _457) * cbLight._m0[_2008].y) * _2076) * _2077) + _1881;
        _1997 = (((((_2057 * _1709) + _458) * cbLight._m0[_2008].z) * _2076) * _2077) + _1883;
    }
    float _2211;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    float _2221;
    if (_1515.y == 0u)
    {
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2152;
        float _2154 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2152;
        float _2155 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2152;
        uvec4 _2167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2168 = _2167.x;
        uint _2179 = uint((float(_2167.y) * floor(float(uint(cbSceneParam._m0[85u].y * _389) / _2168))) + floor(float(uint(cbSceneParam._m0[85u].x * _388) / _2168)));
        float _2189 = (log2(_2155 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2190 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
        uint _2193 = uint(isnan(14.0) ? _2190 : (isnan(_2190) ? 14.0 : min(_2190, 14.0)));
        uvec4 _2198 = texelFetch(g_lightClusterGridBuffer, int(((_2193 << 2u) + (_2179 << 6u)) >> 2u));
        uint _2199 = _2198.x;
        uint _2200 = _2167.z;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        float _2309;
        float _2311;
        if (((((1u << ((_2200 >> 4u) & 15u)) + 4294967295u) & _2199) == 0u) || ((_2200 & 240u) == 0u))
        {
            _2301 = 0.0;
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
            _2309 = 0.0;
            _2311 = 0.0;
        }
        else
        {
            float _2302;
            float _2304;
            float _2306;
            float _2308;
            float _2310;
            float _2312;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            float _2456 = 0.0;
            float _2457 = 0.0;
            float _2458 = 0.0;
            uint _2459 = 0u;
            uint _2468;
            bool _2469;
            for (;;)
            {
                _2468 = texelFetch(g_lightClassification, int((((_2193 << 5u) + (_2179 << 9u)) + (_2459 << 2u)) >> 2u)).x;
                _2469 = _2468 == 0u;
                float frontier_phi_65_pred;
                float frontier_phi_65_pred_1;
                float frontier_phi_65_pred_2;
                float frontier_phi_65_pred_3;
                float frontier_phi_65_pred_4;
                float frontier_phi_65_pred_5;
                if (_2469)
                {
                    frontier_phi_65_pred = _2455;
                    frontier_phi_65_pred_1 = _2458;
                    frontier_phi_65_pred_2 = _2457;
                    frontier_phi_65_pred_3 = _2456;
                    frontier_phi_65_pred_4 = _2454;
                    frontier_phi_65_pred_5 = _2453;
                }
                else
                {
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    float _2604;
                    uint _2605;
                    _2599 = _2453;
                    _2600 = _2454;
                    _2601 = _2455;
                    _2602 = _2456;
                    _2603 = _2457;
                    _2604 = _2458;
                    _2605 = _2468;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    for (;;)
                    {
                        uint _2609 = uint(findLSB(_2605)) + (_2459 << 5u);
                        uint _2606 = (_2605 + 4294967295u) & _2605;
                        uint _2611 = _2609 * 48u;
                        vec4 _2625 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2611)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 3u)).x));
                        uint _2631 = (_2609 * 48u) + 4u;
                        vec4 _2644 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2631)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2631 + 3u)).x));
                        uint _2650 = (_2609 * 48u) + 8u;
                        vec3 _2661 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2650)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2650 + 2u)).x));
                        float _2665 = _2625.x - _2153;
                        float _2666 = _2625.y - _2154;
                        float _2667 = _2625.z - _2155;
                        float _2668 = dot(vec3(_2665, _2666, _2667), vec3(_2665, _2666, _2667));
                        float _2671 = inversesqrt(_2668);
                        float _2672 = _2671 * _2665;
                        float _2673 = _2671 * _2666;
                        float _2674 = _2671 * _2667;
                        float _2675 = dot(vec3(_410, _413, _416), vec3(_2672, _2673, _2674));
                        float _2680 = 1.0 - (_2668 * _2625.w);
                        float _3996 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2681 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2682 = sqrt(_2668) * _2644.w;
                        float _2685 = 1.39999997615814208984375 / (_2682 + 1.39999997615814208984375);
                        float _2686 = _2685 * _2685;
                        float _2689 = ((1.0 - _2686) * _2675) + _2686;
                        float _2692 = _2682 * _2682;
                        float _2696 = ((isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0))) * _2681) / ((_2692 * 0.699999988079071044921875) + 1.0);
                        float _2700 = (-0.0) - _2153;
                        float _2701 = (-0.0) - _2154;
                        float _2702 = (-0.0) - _2155;
                        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2717 = exp2(log2(1.0 / ((_2692 * 3.5) + 5.0)) * 0.25);
                        float _2718 = 1.0 - _486;
                        float _2725 = sqrt(1.0 - ((1.0 - (_2718 * _2718)) * (1.0 - (_2717 * _2717))));
                        float _2726 = _2725 * _2725;
                        float _2727 = _2726 * _2726;
                        float _2728 = _2707 + _2672;
                        float _2729 = _2708 + _2673;
                        float _2730 = _2709 + _2674;
                        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
                        float _2738 = dot(vec3(_410, _413, _416), vec3(_2707, _2708, _2709));
                        float _4012 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
                        float _2741 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
                        float _2742 = dot(vec3(_410, _413, _416), vec3(_2734 * _2728, _2734 * _2729, _2734 * _2730));
                        float _4023 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2745 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2749 = ((_2745 * _2745) * (_2727 + (-1.0))) + 1.0;
                        float _2750 = _2685 * _2726;
                        float _2751 = _2750 * _2750;
                        float _2754 = ((1.0 - _2751) * _2675) + _2751;
                        float _4034 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2755 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2756 = 1.0 - _2726;
                        float _2766 = (0.5 / (((_2755 * ((_2741 * _2756) + _2726)) + 9.9999999392252902907785028219223e-09) + (((_2755 * _2756) + _2726) * _2741))) * _2755;
                        float _4045 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2777 = (((_2727 * 3.1415927410125732421875) * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) / ((_2749 * _2749) * ((_2692 * 2.1991131305694580078125) + 3.141590118408203125))) * _2681;
                        _2528 = (_2696 * _2644.x) + _2602;
                        _2529 = (_2696 * _2644.y) + _2603;
                        _2530 = (_2696 * _2644.z) + _2604;
                        _2525 = (_2777 * _2661.x) + _2599;
                        _2526 = (_2777 * _2661.y) + _2600;
                        _2527 = (_2777 * _2661.z) + _2601;
                        if (_2606 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2599 = _2525;
                            _2600 = _2526;
                            _2601 = _2527;
                            _2602 = _2528;
                            _2603 = _2529;
                            _2604 = _2530;
                            _2605 = _2606;
                        }
                    }
                    frontier_phi_65_pred = _2527;
                    frontier_phi_65_pred_1 = _2530;
                    frontier_phi_65_pred_2 = _2529;
                    frontier_phi_65_pred_3 = _2528;
                    frontier_phi_65_pred_4 = _2526;
                    frontier_phi_65_pred_5 = _2525;
                }
                _2306 = frontier_phi_65_pred;
                _2312 = frontier_phi_65_pred_1;
                _2310 = frontier_phi_65_pred_2;
                _2308 = frontier_phi_65_pred_3;
                _2304 = frontier_phi_65_pred_4;
                _2302 = frontier_phi_65_pred_5;
                uint _2460 = _2459 + 1u;
                if (_2460 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2453 = _2302;
                    _2454 = _2304;
                    _2455 = _2306;
                    _2456 = _2308;
                    _2457 = _2310;
                    _2458 = _2312;
                    _2459 = _2460;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2301 = _2302;
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
            _2309 = _2310;
            _2311 = _2312;
        }
        uvec4 _2315 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2316 = _2315.z;
        uint _2318 = (_2316 >> 8u) & 15u;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        float _2429;
        float _2431;
        if (((4294967295u << _2318) & _2199) == 0u)
        {
            _2421 = _2301;
            _2423 = _2303;
            _2425 = _2305;
            _2427 = _2307;
            _2429 = _2309;
            _2431 = _2311;
        }
        else
        {
            float _2446 = inversesqrt(dot(vec3(_2153, _2154, _2155), vec3(_2153, _2154, _2155)));
            float _2447 = _2446 * _2153;
            float _2448 = _2446 * _2154;
            float _2449 = _2446 * _2155;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2318 < ((_2316 >> 12u) & 15u))
            {
                float _2422;
                float _2424;
                float _2426;
                float _2428;
                float _2430;
                float _2432;
                float _2582 = _2301;
                float _2583 = _2303;
                float _2584 = _2305;
                float _2585 = _2307;
                float _2586 = _2309;
                float _2587 = _2311;
                uint _2588 = _2318;
                uint _2597;
                bool _2598;
                for (;;)
                {
                    _2597 = texelFetch(g_lightClassification, int((((_2193 << 5u) + (_2179 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                    _2598 = _2597 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2598)
                    {
                        frontier_phi_76_pred = _2587;
                        frontier_phi_76_pred_1 = _2586;
                        frontier_phi_76_pred_2 = _2585;
                        frontier_phi_76_pred_3 = _2584;
                        frontier_phi_76_pred_4 = _2583;
                        frontier_phi_76_pred_5 = _2582;
                    }
                    else
                    {
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _2806 = _2582;
                        float _2807 = _2583;
                        float _2808 = _2584;
                        float _2809 = _2585;
                        float _2810 = _2586;
                        float _2811 = _2587;
                        uint _2812 = _2597;
                        uint _2813;
                        vec4 _2838;
                        float _2839;
                        vec4 _2854;
                        vec3 _2866;
                        vec4 _2882;
                        vec4 _2898;
                        float _2945;
                        bool _2946;
                        for (;;)
                        {
                            uint _2823 = ((_2588 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2812));
                            _2813 = (_2812 + 4294967295u) & _2812;
                            uint _2825 = _2823 * 40u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            _2839 = _2838.w;
                            uint _2841 = (_2823 * 40u) + 4u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2823 * 40u) + 8u;
                            _2866 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x));
                            uint _2869 = (_2823 * 40u) + 16u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2885 = (_2823 * 40u) + 20u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2901 = (_2823 * 40u) + 24u;
                            vec4 _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2920 = (_2823 * 40u) + 28u;
                            vec4 _2933 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2920)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2920 + 3u)).x));
                            _2945 = fma(_2155, _2933.z, fma(_2154, _2933.y, _2933.x * _2153)) + _2933.w;
                            _2946 = !((fma(_2155, _2914.z, fma(_2154, _2914.y, _2914.x * _2153)) + _2914.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_2946)
                            {
                                float _2973 = _2838.x - _2153;
                                float _2974 = _2838.y - _2154;
                                float _2975 = _2838.z - _2155;
                                float _2976 = dot(vec3(_2973, _2974, _2975), vec3(_2973, _2974, _2975));
                                float _2979 = inversesqrt(_2976);
                                float _2980 = _2979 * _2973;
                                float _2981 = _2979 * _2974;
                                float _2982 = _2979 * _2975;
                                float _2986 = 1.0 - (_2976 / (_2839 * _2839));
                                float _4056 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2987 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _2991 = sqrt(_2976) * _2854.w;
                                float _2993 = 1.39999997615814208984375 / (_2991 + 1.39999997615814208984375);
                                float _2994 = _2993 * _2993;
                                float _2997 = ((1.0 - _2994) * dot(vec3(_2980, _2981, _2982), vec3(_410, _413, _416))) + _2994;
                                float _3000 = _2991 * _2991;
                                float _3004 = (fma(_2155, _2882.z, fma(_2154, _2882.y, _2882.x * _2153)) + _2882.w) / _2945;
                                float _3005 = (fma(_2155, _2898.z, fma(_2154, _2898.y, _2898.x * _2153)) + _2898.w) / _2945;
                                float _3009 = 1.0 - dot(vec2(_3004, _3005), vec2(_3004, _3005));
                                float _4072 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                                float _3010 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3011 = _3010 * (((isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0))) * _2987) / ((_3000 * 0.699999988079071044921875) + 1.0));
                                float _3023 = exp2(log2(1.0 / ((_3000 * 3.5) + 5.0)) * 0.25);
                                float _3024 = 1.0 - _486;
                                float _3031 = sqrt(1.0 - ((1.0 - (_3024 * _3024)) * (1.0 - (_3023 * _3023))));
                                float _3032 = _3031 * _3031;
                                float _3033 = _3032 * _3032;
                                float _3034 = _2980 - _2447;
                                float _3035 = _2981 - _2448;
                                float _3036 = _2982 - _2449;
                                float _3040 = inversesqrt(dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036)));
                                float _3044 = dot(vec3(_410, _413, _416), vec3((-0.0) - _2447, (-0.0) - _2448, (-0.0) - _2449));
                                float _4083 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3047 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3048 = dot(vec3(_410, _413, _416), vec3(_3040 * _3034, _3040 * _3035, _3040 * _3036));
                                float _4094 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3051 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3055 = ((_3051 * _3051) * (_3033 + (-1.0))) + 1.0;
                                float _3056 = _2993 * _3032;
                                float _3057 = _3056 * _3056;
                                float _3063 = ((1.0 - _3057) * dot(vec3(_410, _413, _416), vec3(_2980, _2981, _2982))) + _3057;
                                float _4105 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
                                float _3064 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3065 = 1.0 - _3032;
                                float _3075 = (0.5 / (((_3064 * ((_3047 * _3065) + _3032)) + 9.9999999392252902907785028219223e-09) + (((_3064 * _3065) + _3032) * _3047))) * _3064;
                                float _4116 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3085 = (_3010 * _2987) * (((_3033 * 3.1415927410125732421875) * (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0)))) / ((_3055 * _3055) * ((_3000 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3011 * _2854.z;
                                frontier_phi_82_pred_1 = _3011 * _2854.y;
                                frontier_phi_82_pred_2 = _3011 * _2854.x;
                                frontier_phi_82_pred_3 = _3085 * _2866.z;
                                frontier_phi_82_pred_4 = _3085 * _2866.y;
                                frontier_phi_82_pred_5 = _3085 * _2866.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3094 = frontier_phi_82_pred;
                            _3093 = frontier_phi_82_pred_1;
                            _3092 = frontier_phi_82_pred_2;
                            _3091 = frontier_phi_82_pred_3;
                            _3090 = frontier_phi_82_pred_4;
                            _3089 = frontier_phi_82_pred_5;
                            _2796 = _3092 + _2809;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            _2793 = _3089 + _2806;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            if (_2813 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2813;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2798;
                        frontier_phi_76_pred_1 = _2797;
                        frontier_phi_76_pred_2 = _2796;
                        frontier_phi_76_pred_3 = _2795;
                        frontier_phi_76_pred_4 = _2794;
                        frontier_phi_76_pred_5 = _2793;
                    }
                    _2432 = frontier_phi_76_pred;
                    _2430 = frontier_phi_76_pred_1;
                    _2428 = frontier_phi_76_pred_2;
                    _2426 = frontier_phi_76_pred_3;
                    _2424 = frontier_phi_76_pred_4;
                    _2422 = frontier_phi_76_pred_5;
                    uint _2589 = _2588 + 1u;
                    if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2582 = _2422;
                        _2583 = _2424;
                        _2584 = _2426;
                        _2585 = _2428;
                        _2586 = _2430;
                        _2587 = _2432;
                        _2588 = _2589;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2428;
                frontier_phi_57_58_ladder_1 = _2432;
                frontier_phi_57_58_ladder_2 = _2430;
                frontier_phi_57_58_ladder_3 = _2426;
                frontier_phi_57_58_ladder_4 = _2424;
                frontier_phi_57_58_ladder_5 = _2422;
            }
            else
            {
                frontier_phi_57_58_ladder = _2307;
                frontier_phi_57_58_ladder_1 = _2311;
                frontier_phi_57_58_ladder_2 = _2309;
                frontier_phi_57_58_ladder_3 = _2305;
                frontier_phi_57_58_ladder_4 = _2303;
                frontier_phi_57_58_ladder_5 = _2301;
            }
            _2421 = frontier_phi_57_58_ladder_5;
            _2423 = frontier_phi_57_58_ladder_4;
            _2425 = frontier_phi_57_58_ladder_3;
            _2427 = frontier_phi_57_58_ladder;
            _2429 = frontier_phi_57_58_ladder_2;
            _2431 = frontier_phi_57_58_ladder_1;
        }
        float _2436 = isnan(1.0) ? _470 : (isnan(_470) ? 1.0 : min(_470, 1.0));
        _2211 = (_2436 * _2427) + _1648;
        _2213 = (_2436 * _2429) + _1650;
        _2215 = (_2436 * _2431) + _1652;
        _2217 = ((_2421 * _455) * _2436) + _1993;
        _2219 = ((_2423 * _457) * _2436) + _1995;
        _2221 = ((_2425 * _458) * _2436) + _1997;
    }
    else
    {
        _2211 = _1648;
        _2213 = _1650;
        _2215 = _1652;
        _2217 = _1993;
        _2219 = _1995;
        _2221 = _1997;
    }
    float _4132 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4143 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4154 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4165 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _2239 = ((isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2211 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _470))) + ((_2217 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2240 = ((isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_2213 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _470))) + ((_2219 + ((isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2241 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2215 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _470))) + ((_2221 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1280)) * cbPerFrame._m0[3u].x);
    float _2246 = cbInstanceData._m0[_429 + 6u].w * (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0)));
    float _2251 = _388 / cbSceneParam._m0[86u].x;
    float _2252 = _389 / cbSceneParam._m0[86u].y;
    vec4 _2266 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2251, _2252, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2268 = _2266.x;
    float _2269 = _2266.y;
    float _2270 = _2266.z;
    float _2271 = _2266.w;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2326 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2327 = _2326 / _315;
        float _2338 = _2327 * _366;
        float _2339 = _367 * _2327;
        float _2340 = (-0.0) - _2339;
        float _2341 = _2327 * _368;
        float _2343 = (cbSceneParam._m0[77u].w * _2340) / _2326;
        float _2344 = _2343 + cbSceneParam._m0[79u].w;
        float _2345 = cbSceneParam._m0[79u].w - _2339;
        float _2351 = sqrt(((_2338 * _2338) + (_2339 * _2339)) + (_2341 * _2341));
        float _2354 = (1.0 - (cbSceneParam._m0[77u].w / _2326)) * _2351;
        float _2359 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2361 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2538;
        if (abs((_2340 - _2343) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2538 = ((((_2344 > 0.0) ? exp2(_2359 * _2344) : (2.0 - exp2(_2361 * _2344))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2354;
        }
        else
        {
            float _2482 = 1.0 / cbSceneParam._m0[80u].x;
            float _2483 = isnan(_2345) ? _2344 : (isnan(_2344) ? _2345 : max(_2344, _2345));
            float _2484 = isnan(_2345) ? _2344 : (isnan(_2344) ? _2345 : min(_2344, _2345));
            float _2493 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : min(_2483, 0.0));
            float _2494 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : min(_2484, 0.0));
            _2538 = ((abs(_2351 / _2340) * cbSceneParam._m0[80u].y) * ((((_2493 - _2494) * 2.0) - ((exp2(_2359 * (isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0)))) - exp2(_2359 * (isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0))))) * _2482)) - ((exp2(_2361 * _2493) - exp2(_2361 * _2494)) * _2482))) + (_2354 * cbSceneParam._m0[80u].z);
        }
        vec4 _2540 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2251, _2252, 1.0), 0.0);
        float _2549 = exp2((_2538 * (-1.44269502162933349609375)) * (1.0 - _2540.w));
        float _2550 = log2(_2549);
        float _2566 = log2(_2271);
        _2363 = (exp2(_2566 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].x)) * _2540.x) / cbSceneParam._m0[78u].x)) + _2268;
        _2365 = (exp2(_2566 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].y)) * _2540.y) / cbSceneParam._m0[78u].y)) + _2269;
        _2367 = (exp2(_2566 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].z)) * _2540.z) / cbSceneParam._m0[78u].z)) + _2270;
        _2369 = _2549 * _2271;
    }
    else
    {
        _2363 = _2268;
        _2365 = _2269;
        _2367 = _2270;
        _2369 = _2271;
    }
    bool _2576;
    vec4 _2379;
    vec4 _2401;
    float _2403;
    float _2407;
    float _2408;
    float _2409;
    float _2410;
    bool _2420;
    for (;;)
    {
        _2379 = cbMatDynParam._m0[0u];
        float _2381 = roundEven(_2379.y);
        bool _2382 = _2381 == 3.0;
        float _2383 = log2(_2369);
        float _2390 = exp2(_2383 * cbSceneParam._m0[78u].x) * _2239;
        float _2391 = exp2(_2383 * cbSceneParam._m0[78u].y) * _2240;
        float _2392 = exp2(_2383 * cbSceneParam._m0[78u].z) * _2241;
        float _2399 = _382 + (-0.5);
        _2401 = cbMtdParam._m0[1u];
        _2403 = _2401.y * _2399;
        float _2406 = (_2381 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2407 = _2406 * (_2382 ? _2390 : (_2390 + (cbSceneParam._m0[72u].w * _2363)));
        _2408 = _2406 * (_2382 ? _2391 : (_2391 + (cbSceneParam._m0[72u].w * _2365)));
        _2409 = _2406 * (_2382 ? _2392 : (_2392 + (cbSceneParam._m0[72u].w * _2367)));
        _2410 = _2399 * 0.999000012874603271484375;
        _2420 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2420)
        {
            if ((cbInstanceData._m0[_429 + 7u].x + _2410) < 0.5)
            {
                _2576 = true;
                break;
            }
        }
        uint _2517 = _431 + uint(_2379.w);
        if ((cbInstanceData._m0[_2517].w < 1.0) && ((cbInstanceData._m0[_2517].w + _2410) < 0.5))
        {
            _2576 = true;
            break;
        }
        if ((_2403 + _240) < _2401.x)
        {
            _2576 = true;
            break;
        }
        _2576 = false;
        break;
    }
    float _2784;
    if (_2576)
    {
        discard_state = true;
        _2784 = 0.0;
    }
    else
    {
        _2784 = _2246;
    }
    SV_Target.x = _2407;
    SV_Target.y = _2408;
    SV_Target.z = _2409;
    SV_Target.w = _2784;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2246;
    discard_exit();
}


