#version 460

out float gl_ClipDistance[2];

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[24];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbvModelParamUBO
{
    vec4 _m0[10];
} cbvModelParam;

layout(set = 0, binding = 5, std140) uniform cbObjMatrixUBO
{
    vec4 _m0[6];
} cbObjMatrix;

layout(set = 0, binding = 10, std140) uniform cbInstanceIdxParamUBO
{
    vec4 _m0[1];
} cbInstanceIdxParam;

layout(set = 0, binding = 11, std140) uniform cbTexScrollUBO
{
    vec4 _m0[4];
} cbTexScroll;

layout(set = 0, binding = 25) uniform usamplerBuffer g_InstanceIndexBuffer;

layout(location = 0) in vec3 POSITION;
layout(location = 1) in uvec4 NORMAL;
layout(location = 2) in uvec4 TANGENT;
layout(location = 3) in uint BINORMAL;
layout(location = 4) in uvec4 BLENDINDICES;
layout(location = 5) in vec4 BLENDWEIGHT;
layout(location = 6) in vec4 COLOR;
layout(location = 7) in vec4 COLOR_1;
layout(location = 8) in ivec4 TEXCOORD;
layout(location = 1) out vec4 NORMAL_1;
layout(location = 2) out vec4 TANGENT_1;
layout(location = 3) out vec4 TEXCOORD_1;
layout(location = 4) out vec4 TEXCOORD_4;
layout(location = 5) out float TEXCOORD_8;
layout(location = 5, component = 1) out vec2 TEXCOORD_10;
layout(location = 5, component = 3) out float TEXCOORD_14;

void main()
{
    uint _85 = uint(gl_InstanceIndex) - uint(gl_BaseInstance);
    gl_Position.x = 0.0;
    gl_Position.y = 0.0;
    gl_Position.z = 0.0;
    gl_Position.w = 0.0;
    NORMAL_1.x = 0.0;
    NORMAL_1.y = 0.0;
    NORMAL_1.z = 0.0;
    NORMAL_1.w = 0.0;
    TANGENT_1.x = 0.0;
    TANGENT_1.y = 0.0;
    TANGENT_1.z = 0.0;
    TANGENT_1.w = 0.0;
    TEXCOORD_1.x = 0.0;
    TEXCOORD_1.y = 0.0;
    TEXCOORD_1.z = 0.0;
    TEXCOORD_1.w = 0.0;
    TEXCOORD_4.x = 0.0;
    TEXCOORD_4.y = 0.0;
    TEXCOORD_4.z = 0.0;
    TEXCOORD_4.w = 0.0;
    TEXCOORD_8 = 0.0;
    TEXCOORD_10.x = 0.0;
    TEXCOORD_10.y = 0.0;
    TEXCOORD_14 = 0.0;
    gl_ClipDistance[0u] = 0.0;
    gl_ClipDistance[1u] = 0.0;
    float _201 = (float(NORMAL.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _203 = (float(NORMAL.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _204 = (float(NORMAL.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _211 = (float(TANGENT.x) + (-127.0)) * 0.0078740157186985015869140625;
    float _212 = (float(TANGENT.y) + (-127.0)) * 0.0078740157186985015869140625;
    float _213 = (float(TANGENT.z) + (-127.0)) * 0.0078740157186985015869140625;
    float _453;
    float _454;
    float _455;
    float _456;
    float _457;
    float _458;
    float _459;
    float _460;
    float _461;
    float _462;
    float _463;
    float _464;
    if (floatBitsToUint(cbMatDynParam._m0[1u]).x == 0u)
    {
        uint _237 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _85;
        precise float _241 = dot(vec4(1.0), vec4(BLENDWEIGHT.x, BLENDWEIGHT.y, BLENDWEIGHT.z, BLENDWEIGHT.w));
        float _246 = isnan(_241) ? 0.001000000047497451305389404296875 : (isnan(0.001000000047497451305389404296875) ? _241 : max(0.001000000047497451305389404296875, _241));
        precise float _248 = BLENDWEIGHT.x / _246;
        precise float _249 = BLENDWEIGHT.y / _246;
        precise float _250 = BLENDWEIGHT.z / _246;
        precise float _251 = BLENDWEIGHT.w / _246;
        uvec4 _258 = floatBitsToUint(cbInstanceData._m0[(texelFetch(g_InstanceIndexBuffer, int(_237)).x * 13u) + 4u]);
        uint _259 = _258.x;
        uint _261 = (_259 + uint(float(BLENDINDICES.x))) * 3u;
        uint _268 = _261 + 1u;
        uint _275 = _261 + 2u;
        precise float _282 = _248 * cbObjMatrix._m0[_261].x;
        precise float _283 = _248 * cbObjMatrix._m0[_268].x;
        precise float _284 = _248 * cbObjMatrix._m0[_275].x;
        precise float _285 = _248 * cbObjMatrix._m0[_261].y;
        precise float _286 = _248 * cbObjMatrix._m0[_268].y;
        precise float _287 = _248 * cbObjMatrix._m0[_275].y;
        precise float _288 = _248 * cbObjMatrix._m0[_261].z;
        precise float _289 = _248 * cbObjMatrix._m0[_268].z;
        precise float _290 = _248 * cbObjMatrix._m0[_275].z;
        precise float _291 = _248 * cbObjMatrix._m0[_261].w;
        precise float _292 = _248 * cbObjMatrix._m0[_268].w;
        precise float _293 = _248 * cbObjMatrix._m0[_275].w;
        uint _296 = (_259 + uint(float(BLENDINDICES.y))) * 3u;
        uint _303 = _296 + 1u;
        uint _310 = _296 + 2u;
        precise float _317 = _249 * cbObjMatrix._m0[_296].x;
        precise float _318 = _249 * cbObjMatrix._m0[_303].x;
        precise float _319 = _249 * cbObjMatrix._m0[_310].x;
        precise float _320 = _249 * cbObjMatrix._m0[_296].y;
        precise float _321 = _249 * cbObjMatrix._m0[_303].y;
        precise float _322 = _249 * cbObjMatrix._m0[_310].y;
        precise float _323 = _249 * cbObjMatrix._m0[_296].z;
        precise float _324 = _249 * cbObjMatrix._m0[_303].z;
        precise float _325 = _249 * cbObjMatrix._m0[_310].z;
        precise float _326 = _249 * cbObjMatrix._m0[_296].w;
        precise float _327 = _249 * cbObjMatrix._m0[_303].w;
        precise float _328 = _249 * cbObjMatrix._m0[_310].w;
        precise float _329 = _282 + _317;
        precise float _330 = _283 + _318;
        precise float _331 = _284 + _319;
        precise float _332 = _285 + _320;
        precise float _333 = _286 + _321;
        precise float _334 = _287 + _322;
        precise float _335 = _288 + _323;
        precise float _336 = _289 + _324;
        precise float _337 = _290 + _325;
        precise float _338 = _291 + _326;
        precise float _339 = _292 + _327;
        precise float _340 = _293 + _328;
        uint _343 = (_259 + uint(float(BLENDINDICES.z))) * 3u;
        uint _350 = _343 + 1u;
        uint _357 = _343 + 2u;
        precise float _364 = _250 * cbObjMatrix._m0[_343].x;
        precise float _365 = _250 * cbObjMatrix._m0[_350].x;
        precise float _366 = _250 * cbObjMatrix._m0[_357].x;
        precise float _367 = _250 * cbObjMatrix._m0[_343].y;
        precise float _368 = _250 * cbObjMatrix._m0[_350].y;
        precise float _369 = _250 * cbObjMatrix._m0[_357].y;
        precise float _370 = _250 * cbObjMatrix._m0[_343].z;
        precise float _371 = _250 * cbObjMatrix._m0[_350].z;
        precise float _372 = _250 * cbObjMatrix._m0[_357].z;
        precise float _373 = _250 * cbObjMatrix._m0[_343].w;
        precise float _374 = _250 * cbObjMatrix._m0[_350].w;
        precise float _375 = _250 * cbObjMatrix._m0[_357].w;
        precise float _376 = _329 + _364;
        precise float _377 = _330 + _365;
        precise float _378 = _331 + _366;
        precise float _379 = _332 + _367;
        precise float _380 = _333 + _368;
        precise float _381 = _334 + _369;
        precise float _382 = _335 + _370;
        precise float _383 = _336 + _371;
        precise float _384 = _337 + _372;
        precise float _385 = _338 + _373;
        precise float _386 = _339 + _374;
        precise float _387 = _340 + _375;
        uint _390 = (_259 + uint(float(BLENDINDICES.w))) * 3u;
        uint _397 = _390 + 1u;
        uint _404 = _390 + 2u;
        precise float _411 = _251 * cbObjMatrix._m0[_390].x;
        precise float _412 = _251 * cbObjMatrix._m0[_397].x;
        precise float _413 = _251 * cbObjMatrix._m0[_404].x;
        precise float _414 = _251 * cbObjMatrix._m0[_390].y;
        precise float _415 = _251 * cbObjMatrix._m0[_397].y;
        precise float _416 = _251 * cbObjMatrix._m0[_404].y;
        precise float _417 = _251 * cbObjMatrix._m0[_390].z;
        precise float _418 = _251 * cbObjMatrix._m0[_397].z;
        precise float _419 = _251 * cbObjMatrix._m0[_404].z;
        precise float _420 = _251 * cbObjMatrix._m0[_390].w;
        precise float _421 = _251 * cbObjMatrix._m0[_397].w;
        precise float _422 = _251 * cbObjMatrix._m0[_404].w;
        precise float _423 = _376 + _411;
        precise float _424 = _377 + _412;
        precise float _425 = _378 + _413;
        precise float _426 = _379 + _414;
        precise float _427 = _380 + _415;
        precise float _428 = _381 + _416;
        precise float _429 = _382 + _417;
        precise float _430 = _383 + _418;
        precise float _431 = _384 + _419;
        precise float _432 = _385 + _420;
        precise float _433 = _386 + _421;
        precise float _434 = _387 + _422;
        _453 = _423;
        _454 = _426;
        _455 = _429;
        _456 = _432;
        _457 = _424;
        _458 = _427;
        _459 = _430;
        _460 = _433;
        _461 = _425;
        _462 = _428;
        _463 = _431;
        _464 = _434;
    }
    else
    {
        _453 = cbvModelParam._m0[0u].x;
        _454 = cbvModelParam._m0[0u].y;
        _455 = cbvModelParam._m0[0u].z;
        _456 = cbvModelParam._m0[0u].w;
        _457 = cbvModelParam._m0[1u].x;
        _458 = cbvModelParam._m0[1u].y;
        _459 = cbvModelParam._m0[1u].z;
        _460 = cbvModelParam._m0[1u].w;
        _461 = cbvModelParam._m0[2u].x;
        _462 = cbvModelParam._m0[2u].y;
        _463 = cbvModelParam._m0[2u].z;
        _464 = cbvModelParam._m0[2u].w;
    }
    precise float _465 = POSITION.x * _453;
    precise float _466 = POSITION.y * _454;
    precise float _467 = _466 + _465;
    precise float _468 = POSITION.z * _455;
    precise float _469 = _468 + _467;
    precise float _470 = 1.0 * _456;
    precise float _471 = _470 + _469;
    precise float _472 = POSITION.x * _457;
    precise float _473 = POSITION.y * _458;
    precise float _474 = _473 + _472;
    precise float _475 = POSITION.z * _459;
    precise float _476 = _475 + _474;
    precise float _477 = 1.0 * _460;
    precise float _478 = _477 + _476;
    precise float _479 = POSITION.x * _461;
    precise float _480 = POSITION.y * _462;
    precise float _481 = _480 + _479;
    precise float _482 = POSITION.z * _463;
    precise float _483 = _482 + _481;
    precise float _484 = 1.0 * _464;
    precise float _485 = _484 + _483;
    float _491 = cbSceneParam._m0[3u].x - _471;
    float _492 = cbSceneParam._m0[3u].y - _478;
    float _493 = cbSceneParam._m0[3u].z - _485;
    uint _513 = floatBitsToUint(cbInstanceIdxParam._m0[0u]).x + _85;
    uvec4 _515 = texelFetch(g_InstanceIndexBuffer, int(_513));
    uint _516 = _515.x;
    precise float _527 = _471 - cbSceneParam._m0[3u].x;
    precise float _528 = _478 - cbSceneParam._m0[3u].y;
    precise float _529 = _485 - cbSceneParam._m0[3u].z;
    precise float _556 = _527 * cbSceneParam._m0[24u].x;
    precise float _557 = _528 * cbSceneParam._m0[24u].y;
    precise float _558 = _557 + _556;
    precise float _559 = _529 * cbSceneParam._m0[24u].z;
    precise float _560 = _559 + _558;
    precise float _561 = 1.0 * cbSceneParam._m0[24u].w;
    precise float _562 = _561 + _560;
    precise float _563 = _527 * cbSceneParam._m0[25u].x;
    precise float _564 = _528 * cbSceneParam._m0[25u].y;
    precise float _565 = _564 + _563;
    precise float _566 = _529 * cbSceneParam._m0[25u].z;
    precise float _567 = _566 + _565;
    precise float _568 = 1.0 * cbSceneParam._m0[25u].w;
    precise float _569 = _568 + _567;
    precise float _570 = _527 * cbSceneParam._m0[26u].x;
    precise float _571 = _528 * cbSceneParam._m0[26u].y;
    precise float _572 = _571 + _570;
    precise float _573 = _529 * cbSceneParam._m0[26u].z;
    precise float _574 = _573 + _572;
    precise float _575 = 1.0 * cbSceneParam._m0[26u].w;
    precise float _576 = _575 + _574;
    precise float _577 = _527 * cbSceneParam._m0[27u].x;
    precise float _578 = _528 * cbSceneParam._m0[27u].y;
    precise float _579 = _578 + _577;
    precise float _580 = _529 * cbSceneParam._m0[27u].z;
    precise float _581 = _580 + _579;
    precise float _582 = 1.0 * cbSceneParam._m0[27u].w;
    precise float _583 = _582 + _581;
    gl_Position.x = _562;
    gl_Position.y = _569;
    gl_Position.z = _576;
    gl_Position.w = _583;
    NORMAL_1.x = fma(_204, _455, fma(_203, _454, _453 * _201));
    NORMAL_1.y = fma(_204, _459, fma(_203, _458, _457 * _201));
    NORMAL_1.z = fma(_204, _463, fma(_203, _462, _461 * _201));
    NORMAL_1.w = float(_516);
    TANGENT_1.x = fma(_213, _455, fma(_212, _454, _453 * _211));
    TANGENT_1.y = fma(_213, _459, fma(_212, _458, _457 * _211));
    TANGENT_1.z = fma(_213, _463, fma(_212, _462, _461 * _211));
    TANGENT_1.w = (float(BINORMAL) + (-127.0)) * 0.0078740157186985015869140625;
    TEXCOORD_1.x = COLOR.x;
    TEXCOORD_1.y = COLOR.y;
    TEXCOORD_1.z = COLOR.z;
    TEXCOORD_1.w = COLOR.w;
    TEXCOORD_4.x = ((float(int(uint(TEXCOORD.x))) * 0.00048828125) * cbTexScroll._m0[0u].x) + cbTexScroll._m0[0u].z;
    TEXCOORD_4.y = ((float(int(uint(TEXCOORD.y))) * 0.00048828125) * cbTexScroll._m0[0u].y) + cbTexScroll._m0[0u].w;
    TEXCOORD_4.z = ((float(int(uint(TEXCOORD.z))) * 0.00048828125) * cbTexScroll._m0[2u].x) + cbTexScroll._m0[2u].z;
    TEXCOORD_4.w = ((float(int(uint(TEXCOORD.w))) * 0.00048828125) * cbTexScroll._m0[2u].y) + cbTexScroll._m0[2u].w;
    TEXCOORD_8 = COLOR_1.x;
    TEXCOORD_10.x = _576;
    TEXCOORD_10.y = _583;
    TEXCOORD_14 = sqrt(((_491 * _491) + (_492 * _492)) + (_493 * _493));
    gl_ClipDistance[0u] = dot(vec4(_562, _569, _576, _583), vec4(cbSceneParam._m0[4u]));
    gl_ClipDistance[1u] = dot(vec4(_562, _569, _576, _583), vec4(cbInstanceData._m0[(_516 * 13u) + 3u]));
}


