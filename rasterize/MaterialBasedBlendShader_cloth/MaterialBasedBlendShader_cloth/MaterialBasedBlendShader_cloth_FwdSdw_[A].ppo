#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[9];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[24];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_1;
layout(set = 0, binding = 1) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_12;
layout(set = 0, binding = 10) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_5;
layout(set = 0, binding = 11) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_6;
layout(set = 0, binding = 12) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_7;
layout(set = 0, binding = 13) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_8;
layout(set = 0, binding = 14) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_0;
layout(set = 0, binding = 3) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_15;
layout(set = 0, binding = 6) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_16;
layout(set = 0, binding = 7) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D MaterialBasedBlendShader_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_4;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1368;
float _4031;
float _4032;
float _4033;
float _4034;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = _238 * NORMAL.x;
    float _240 = _238 * NORMAL.y;
    float _241 = _238 * NORMAL.z;
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253;
    float _254;
    float _255;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _253 = (-0.0) - _239;
        _254 = (-0.0) - _240;
        _255 = (-0.0) - _241;
    }
    else
    {
        _253 = _239;
        _254 = _240;
        _255 = _241;
    }
    vec4 _285 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[4u].w));
    vec4 _313 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[13u].w));
    vec4 _339 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[0u].w));
    float _345 = _339.x * cbMatDynParam._m0[17u].x;
    float _346 = _339.y * cbMatDynParam._m0[17u].y;
    float _347 = _339.z * cbMatDynParam._m0[17u].z;
    vec4 _366 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[7u].w));
    vec4 _385 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[2u].w));
    float _396 = (cbMatDynParam._m0[21u].y * TEXCOORD.w) + 1.0;
    float _398 = (0.5 - ((cbMatDynParam._m0[21u].x * 0.5) * (_385.x + 0.00999999977648258209228515625))) * _396;
    float _4043 = isnan(0.0) ? _398 : (isnan(_398) ? 0.0 : max(_398, 0.0));
    float _399 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _406 = (_399 * ((_366.x * cbMatDynParam._m0[18u].x) - _345)) + _345;
    float _407 = (_399 * ((_366.y * cbMatDynParam._m0[18u].y) - _346)) + _346;
    float _408 = (_399 * ((_366.z * cbMatDynParam._m0[18u].z) - _347)) + _347;
    float _413 = (0.5 - ((cbMatDynParam._m0[22u].z * 0.5) * (_385.y + 0.00999999977648258209228515625))) * _396;
    float _4054 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _414 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _421 = (((_313.x * cbMatDynParam._m0[19u].x) - _406) * _414) + _406;
    float _422 = (((_313.y * cbMatDynParam._m0[19u].y) - _407) * _414) + _407;
    float _423 = (((_313.z * cbMatDynParam._m0[19u].z) - _408) * _414) + _408;
    float _428 = (0.5 - ((cbMatDynParam._m0[22u].w * 0.5) * (_385.z + 0.00999999977648258209228515625))) * _396;
    float _4065 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _429 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _436 = (((_285.x * cbMatDynParam._m0[20u].x) - _421) * _429) + _421;
    float _437 = (((_285.y * cbMatDynParam._m0[20u].y) - _422) * _429) + _422;
    float _438 = (((_285.z * cbMatDynParam._m0[20u].z) - _423) * _429) + _423;
    vec4 _450 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[1u].w));
    float _453 = _450.x * _339.w;
    vec4 _465 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_4, SS_SpecularMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[9u].w));
    float _467 = _465.x;
    float _468 = _465.y;
    float _469 = _465.z;
    vec4 _482 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_9, SS_SpecularMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[14u].w));
    float _493 = ((_482.x - _467) * _399) + _467;
    float _494 = ((_482.y - _468) * _399) + _468;
    float _495 = ((_482.z - _469) * _399) + _469;
    vec4 _508 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_3, SS_SpecularMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[8u].w));
    float _519 = ((_508.x - _493) * _414) + _493;
    float _520 = ((_508.y - _494) * _414) + _494;
    float _521 = ((_508.z - _495) * _414) + _495;
    vec4 _533 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_10, SS_SpecularMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w));
    float _544 = ((_533.x - _519) * _429) + _519;
    float _545 = ((_533.y - _520) * _429) + _520;
    float _546 = ((_533.z - _521) * _429) + _521;
    vec4 _562 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _581 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[5u].w));
    vec4 _600 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[10u].w));
    float _602 = _600.x;
    float _603 = _600.y;
    float _605 = _600.z * cbMatDynParam._m0[22u].x;
    vec4 _619 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[11u].w));
    float _627 = (((_619.z * cbMatDynParam._m0[21u].w) - _605) * _399) + _605;
    float _630 = (((_581.z * cbMatDynParam._m0[21u].z) - _627) * _414) + _627;
    float _633 = (((_562.z * cbMatDynParam._m0[23u].x) - _630) * _429) + _630;
    vec4 _646 = texture(sampler2D(MaterialBasedBlendShader_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[12u].w));
    float _660 = (_399 * (_619.x - _602)) + _602;
    float _661 = (_399 * (_619.y - _603)) + _603;
    float _666 = ((_581.x - _660) * _414) + _660;
    float _667 = ((_581.y - _661) * _414) + _661;
    float _676 = ((((_562.x - _666) * _429) + _666) * 2.0) + (-1.0);
    float _677 = ((((_562.y - _667) * _429) + _667) * 2.0) + (-1.0);
    float _678 = dot(vec2(_676, _677), vec2(_676, _677));
    float _4076 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _683 = sqrt(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0))));
    float _687 = _676 + (cbMatDynParam._m0[22u].y * ((_646.x * 2.0) + (-1.0)));
    float _688 = _677 + (cbMatDynParam._m0[22u].y * ((_646.y * 2.0) + (-1.0)));
    float _691 = fma(_683, _253, fma(_688, _245 * TANGENT.x, (_231 * _223) * _687));
    float _694 = fma(_683, _254, fma(_688, _245 * TANGENT.y, (_231 * _224) * _687));
    float _697 = fma(_683, _255, fma(_688, _245 * TANGENT.z, (_231 * _225) * _687));
    float _701 = inversesqrt(dot(vec3(_691, _694, _697), vec3(_691, _694, _697)));
    float _702 = _701 * _691;
    float _703 = _701 * _694;
    float _704 = _701 * _697;
    float _4087 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4098 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4109 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _4120 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _708 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _709 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _4142 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _710 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
    float _4153 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _711 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
    float _727 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _767 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _777 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _767);
    float _778 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _767);
    float _779 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _767);
    float _783 = inversesqrt(dot(vec3(_777, _778, _779), vec3(_777, _778, _779)));
    float _784 = _777 * _783;
    float _785 = _778 * _783;
    float _786 = _779 * _783;
    vec4 _791 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _793 = _791.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1049 = sqrt(((_777 * _777) + (_778 * _778)) + (_779 * _779));
        float _1055 = (cbMatDynParam._m0[5u].x * _1049) + cbMatDynParam._m0[5u].y;
        float _4164 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1060 = (cbMatDynParam._m0[5u].z * _1049) + cbMatDynParam._m0[5u].w;
        float _4175 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) - _1056)) + _1056) < ((_793 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _804 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _805 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _807 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _809 = _807.w;
    float _827 = fma(_704, cbSceneParam._m0[5u].z, fma(_703, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _702));
    float _830 = fma(_704, cbSceneParam._m0[6u].z, fma(_703, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _702));
    float _833 = fma(_704, cbSceneParam._m0[7u].z, fma(_703, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _702));
    vec4 _835 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _837 = _835.x;
    float _839 = _835.w;
    float _840 = _837 * _837;
    float _860 = (((_840 - _708) + (_839 * _708)) * cbMtdParam._m0[3u].x) + _708;
    float _861 = (((_840 - _709) + (_839 * _709)) * cbMtdParam._m0[3u].x) + _709;
    float _862 = (((_840 - _710) + (_839 * _710)) * cbMtdParam._m0[3u].x) + _710;
    float _863 = (((_835.y - _711) + (_839 * _711)) * cbMtdParam._m0[3u].x) + _711;
    vec4 _864 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _880 = (((cbMatDynParam._m0[14u].y - cbMatDynParam._m0[14u].x) * dot(vec3(_860, _861, _862), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375))) + cbMatDynParam._m0[14u].x) * _864.z;
    float _889 = (((cbMatDynParam._m0[16u].x - _863) * cbMatDynParam._m0[16u].z) * _880) + _863;
    uint _902 = uint(roundEven(NORMAL.w)) * 13u;
    uint _903 = _902 + 9u;
    uint _904 = _903 + uint(cbMatDynParam._m0[0u].w);
    float _910 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0)))) * cbInstanceData._m0[_904].x;
    float _911 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * cbInstanceData._m0[_904].y;
    float _912 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) * cbInstanceData._m0[_904].z;
    float _4186 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _913 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
    float _914 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _4208 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    vec4 _922 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD_4.z, TEXCOORD_4.w));
    float _936 = ((((_913 * _809) - _913) + _922.x) * cbMtdParam._m0[3u].x) + _913;
    float _937 = ((((_914 * _809) - _914) + _922.y) * cbMtdParam._m0[3u].x) + _914;
    float _938 = ((((_915 * _809) - _915) + _922.z) * cbMtdParam._m0[3u].x) + _915;
    float _942 = cbMatDynParam._m0[13u].w * _880;
    vec4 _963 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _804, cbSceneParam._m0[86u].y * _805));
    float _966 = _963.x * TEXCOORD_8;
    float _967 = dot(vec3(_702, _703, _704), vec3(_784, _785, _786));
    float _970 = _967 * 2.0;
    float _974 = (_970 * _702) - _784;
    float _975 = (_970 * _703) - _785;
    float _976 = (_970 * _704) - _786;
    float _980 = abs(dot(vec3(_784, _785, _786), vec3(_702, _703, _704)));
    float _4219 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
    float _982 = sqrt(_889);
    float _995 = exp2((_982 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_982 * 3.0));
    float _1001 = (1.0 - _995) * ((_982 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1002 = _995 * _982;
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1038 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1367;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1093 = fma(_1038, cbModelParam._m0[26u].z, fma(_1034, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1030));
        float _1097 = fma(_1038, cbModelParam._m0[27u].z, fma(_1034, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1030));
        float _1101 = fma(_1038, cbModelParam._m0[28u].z, fma(_1034, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1030));
        float _1125 = _1030 + _702;
        float _1126 = _1034 + _703;
        float _1127 = _1038 + _704;
        float _1137 = fma(_1127, cbModelParam._m0[26u].z, fma(_1126, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1125)) - _1093;
        float _1138 = fma(_1127, cbModelParam._m0[27u].z, fma(_1126, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1125)) - _1097;
        float _1139 = fma(_1127, cbModelParam._m0[28u].z, fma(_1126, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1125)) - _1101;
        float _1143 = inversesqrt(dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139)));
        float _1156 = ((_1143 * _1137) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1093 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1143 * _1138) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1097 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1158 = ((_1143 * _1139) / cbModelParam._m0[34u].z) + ((((((_1101 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1156, _1157, _1158), 0.0);
        float _1195 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1161.x + (-0.5));
        float _1197 = _1195 * (_1161.y + (-0.5));
        float _1198 = _1195 * (_1161.z + (-0.5));
        float _1205 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1168.x + (-0.5));
        float _1207 = _1205 * (_1168.y + (-0.5));
        float _1208 = _1205 * (_1168.z + (-0.5));
        float _1215 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1216 = _1215 * (_1175.x + (-0.5));
        float _1217 = _1215 * (_1175.y + (-0.5));
        float _1218 = _1215 * (_1175.z + (-0.5));
        float _1225 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1226 = _1225 * (_1182.x + (-0.5));
        float _1227 = _1225 * (_1182.y + (-0.5));
        float _1228 = _1225 * (_1182.z + (-0.5));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1232 = _1196 * 0.5;
        float _1233 = _1206 * 0.5;
        float _1234 = _1216 * 0.5;
        float _1235 = dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234));
        float _1240 = (_1235 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1235);
        float _1249 = (dot(vec3(_702, _703, _704), vec3(_1240 * _1232, _1240 * _1233, _1240 * _1234)) + 1.0) * 0.5;
        float _4245 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1259 = sqrt(((_1233 * _1233) + (_1232 * _1232)) + (_1234 * _1234)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4256 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1261 = _1260 * 2.0;
        float _1265 = (1.0 - _1260) / (_1260 + 1.0);
        float _4267 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
        float _1275 = ((((1.0 - _1266) * (_1261 + 2.0)) * exp2(log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))) * (_1261 + 1.0))) + _1266) * _1229;
        float _1276 = _1197 * 0.5;
        float _1277 = _1207 * 0.5;
        float _1278 = _1217 * 0.5;
        float _1279 = dot(vec3(_1276, _1277, _1278), vec3(_1276, _1277, _1278));
        float _1284 = (_1279 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1279);
        float _1292 = (dot(vec3(_702, _703, _704), vec3(_1284 * _1276, _1284 * _1277, _1284 * _1278)) + 1.0) * 0.5;
        float _4278 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1301 = sqrt(((_1277 * _1277) + (_1276 * _1276)) + (_1278 * _1278)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4289 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1303 = _1302 * 2.0;
        float _1307 = (1.0 - _1302) / (_1302 + 1.0);
        float _4300 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0));
        float _1317 = ((((1.0 - _1308) * (_1303 + 2.0)) * exp2(log2(isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * (_1303 + 1.0))) + _1308) * _1230;
        float _1318 = _1198 * 0.5;
        float _1319 = _1208 * 0.5;
        float _1320 = _1218 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_702, _703, _704), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _4311 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1231 + 9.9999997473787516355514526367188e-06);
        float _4322 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _4333 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))) * (_1345 + 1.0))) + _1350) * _1231;
        _1367 = _1198;
        _1369 = _1197;
        _1370 = _1196;
        _1371 = _1208;
        _1372 = _1207;
        _1373 = _1206;
        _1374 = _1218;
        _1375 = _1217;
        _1376 = _1216;
        _1377 = _1231;
        _1378 = _1230;
        _1379 = _1229;
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0)));
        _1382 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    }
    else
    {
        _1367 = _1368;
        _1369 = _1368;
        _1370 = _1368;
        _1371 = _1368;
        _1372 = _1368;
        _1373 = _1368;
        _1374 = _1368;
        _1375 = _1368;
        _1376 = _1368;
        _1377 = _1368;
        _1378 = _1368;
        _1379 = _1368;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1411 = fma(_1038, cbModelParam._m0[30u].z, fma(_1034, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1030));
        float _1415 = fma(_1038, cbModelParam._m0[31u].z, fma(_1034, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1030));
        float _1419 = fma(_1038, cbModelParam._m0[32u].z, fma(_1034, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1030));
        float _1442 = _1030 + _702;
        float _1443 = _1034 + _703;
        float _1444 = _1038 + _704;
        float _1454 = fma(_1444, cbModelParam._m0[30u].z, fma(_1443, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1442)) - _1411;
        float _1455 = fma(_1444, cbModelParam._m0[31u].z, fma(_1443, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1442)) - _1415;
        float _1456 = fma(_1444, cbModelParam._m0[32u].z, fma(_1443, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1442)) - _1419;
        float _1460 = inversesqrt(dot(vec3(_1454, _1455, _1456), vec3(_1454, _1455, _1456)));
        float _1473 = ((_1460 * _1454) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1411 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1460 * _1455) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1415 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1475 = ((_1460 * _1456) / cbModelParam._m0[35u].z) + ((((((_1419 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1473, _1474, _1475), 0.0);
        float _1510 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1477.x + (-0.5));
        float _1512 = _1510 * (_1477.y + (-0.5));
        float _1513 = _1510 * (_1477.z + (-0.5));
        float _1520 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1484.x + (-0.5));
        float _1522 = _1520 * (_1484.y + (-0.5));
        float _1523 = _1520 * (_1484.z + (-0.5));
        float _1530 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1531 = _1530 * (_1491.x + (-0.5));
        float _1532 = _1530 * (_1491.y + (-0.5));
        float _1533 = _1530 * (_1491.z + (-0.5));
        float _1540 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1541 = _1540 * (_1498.x + (-0.5));
        float _1542 = _1540 * (_1498.y + (-0.5));
        float _1543 = _1540 * (_1498.z + (-0.5));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1547 = _1511 * 0.5;
        float _1548 = _1521 * 0.5;
        float _1549 = _1531 * 0.5;
        float _1550 = dot(vec3(_1547, _1548, _1549), vec3(_1547, _1548, _1549));
        float _1555 = (_1550 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1550);
        float _1563 = (dot(vec3(_702, _703, _704), vec3(_1555 * _1547, _1555 * _1548, _1555 * _1549)) + 1.0) * 0.5;
        float _4374 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1572 = sqrt(((_1548 * _1548) + (_1547 * _1547)) + (_1549 * _1549)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4385 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1574 = _1573 * 2.0;
        float _1578 = (1.0 - _1573) / (_1573 + 1.0);
        float _4396 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _1588 = ((((1.0 - _1579) * (_1574 + 2.0)) * exp2(log2(isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_1574 + 1.0))) + _1579) * _1544;
        float _1589 = _1512 * 0.5;
        float _1590 = _1522 * 0.5;
        float _1591 = _1532 * 0.5;
        float _1592 = dot(vec3(_1589, _1590, _1591), vec3(_1589, _1590, _1591));
        float _1597 = (_1592 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1592);
        float _1605 = (dot(vec3(_702, _703, _704), vec3(_1597 * _1589, _1597 * _1590, _1597 * _1591)) + 1.0) * 0.5;
        float _4407 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1614 = sqrt(((_1590 * _1590) + (_1589 * _1589)) + (_1591 * _1591)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4418 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1616 = _1615 * 2.0;
        float _1620 = (1.0 - _1615) / (_1615 + 1.0);
        float _4429 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _1630 = ((((1.0 - _1621) * (_1616 + 2.0)) * exp2(log2(isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_1616 + 1.0))) + _1621) * _1545;
        float _1631 = _1513 * 0.5;
        float _1632 = _1523 * 0.5;
        float _1633 = _1533 * 0.5;
        float _1634 = dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633));
        float _1639 = (_1634 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1634);
        float _1647 = (dot(vec3(_702, _703, _704), vec3(_1639 * _1631, _1639 * _1632, _1639 * _1633)) + 1.0) * 0.5;
        float _4440 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1656 = sqrt(((_1632 * _1632) + (_1631 * _1631)) + (_1633 * _1633)) / (_1546 + 9.9999997473787516355514526367188e-06);
        float _4451 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1657 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
        float _1658 = _1657 * 2.0;
        float _1662 = (1.0 - _1657) / (_1657 + 1.0);
        float _4462 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
        float _1672 = ((((1.0 - _1663) * (_1658 + 2.0)) * exp2(log2(isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0))) * (_1658 + 1.0))) + _1663) * _1546;
        _1680 = _1513;
        _1681 = _1512;
        _1682 = _1511;
        _1683 = _1523;
        _1684 = _1522;
        _1685 = _1521;
        _1686 = _1533;
        _1687 = _1532;
        _1688 = _1531;
        _1689 = _1546;
        _1690 = _1545;
        _1691 = _1544;
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)));
        _1694 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)));
    }
    else
    {
        _1680 = _1368;
        _1681 = _1368;
        _1682 = _1368;
        _1683 = _1368;
        _1684 = _1368;
        _1685 = _1368;
        _1686 = _1368;
        _1687 = _1368;
        _1688 = _1368;
        _1689 = _1368;
        _1690 = _1368;
        _1691 = _1368;
        _1692 = 0.0;
        _1693 = 0.0;
        _1694 = 0.0;
    }
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1380)) + _1380;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1381)) + _1381;
    float _1706 = (cbModelParam._m0[1u].x * (_1694 - _1382)) + _1382;
    float _1727 = fma(_1706, cbSceneParam._m0[89u].z, fma(_1705, cbSceneParam._m0[89u].y, _1704 * cbSceneParam._m0[89u].x));
    float _1730 = fma(_1706, cbSceneParam._m0[90u].z, fma(_1705, cbSceneParam._m0[90u].y, _1704 * cbSceneParam._m0[90u].x));
    float _1733 = fma(_1706, cbSceneParam._m0[91u].z, fma(_1705, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1704));
    float _1748 = _974 * 0.5;
    float _1749 = _975 * 0.5;
    float _1750 = _976 * 0.5;
    float _1751 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1682, _1685, _1688, _1691));
    float _1754 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1757 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1788;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1764 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1367, _1371, _1374, _1377));
        float _1768 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1772 = dot(vec4(_1748, _1749, _1750, 1.0), vec4(_1370, _1373, _1376, _1379));
        float _1779 = dot(vec4(cbModelParam._m0[39u]), vec4(_1748, _1749, _1750, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)), isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1799;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1790 = dot(vec4(cbModelParam._m0[40u]), vec4(_1748, _1749, _1750, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1803 = (_1799 * cbModelParam._m0[1u].x) + (_1788 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _889);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1895;
    float _1897;
    float _1899;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1862 = fma(_1038, cbModelParam._m0[13u].z, fma(_1034, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1030)) + cbModelParam._m0[13u].w;
        float _1866 = fma(_1038, cbModelParam._m0[14u].z, fma(_1034, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1030)) + cbModelParam._m0[14u].w;
        float _1870 = fma(_1038, cbModelParam._m0[15u].z, fma(_1034, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1030)) + cbModelParam._m0[15u].w;
        float _1873 = fma(_976, cbModelParam._m0[13u].z, fma(_975, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _974));
        float _1876 = fma(_976, cbModelParam._m0[14u].z, fma(_975, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _974));
        float _1879 = fma(_976, cbModelParam._m0[15u].z, fma(_975, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _974));
        float _1907;
        if (_1873 > 0.0)
        {
            _1907 = abs((1.0 - _1862) / _1873);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1862 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1907 = frontier_phi_19_17_ladder;
        }
        float _2078;
        if (_1876 > 0.0)
        {
            _2078 = abs((1.0 - _1866) / _1876);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1866 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2078 = frontier_phi_28_24_ladder;
        }
        float _2373;
        if (_1879 > 0.0)
        {
            _2373 = abs((1.0 - _1870) / _1879);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1879 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1870 + 1.0) / _1879);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2373 = frontier_phi_40_35_ladder;
        }
        float _2375 = isnan(_2078) ? _1907 : (isnan(_1907) ? _2078 : min(_1907, _2078));
        float _2376 = isnan(_2373) ? _2375 : (isnan(_2375) ? _2373 : min(_2375, _2373));
        float _2380 = (_2376 * _1873) + _1862;
        float _2381 = (_2376 * _1876) + _1866;
        float _2382 = (_2376 * _1879) + _1870;
        float _2383 = _2376 * 9.9999997473787516355514526367188e-05;
        float _2385 = (-1.0) - _2383;
        float _2387 = _2383 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2382 > _2387) || ((_2382 < _2385) || ((_2381 > _2387) || ((_2381 < _2385) || ((_2380 < _2385) || (_2380 > _2387))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2382, cbModelParam._m0[9u].z, fma(_2381, cbModelParam._m0[9u].y, _2380 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2382, cbModelParam._m0[10u].z, fma(_2381, cbModelParam._m0[10u].y, _2380 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2382, cbModelParam._m0[11u].z, fma(_2381, cbModelParam._m0[11u].y, _2380 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_18_40_ladder = _2527.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2527.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2527.x * cbModelParam._m0[1u].y;
        }
        _1895 = frontier_phi_18_40_ladder_2;
        _1897 = frontier_phi_18_40_ladder_1;
        _1899 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1883 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_974, _975, _976), _1814);
        _1895 = _1883.x * cbModelParam._m0[1u].y;
        _1897 = _1883.y * cbModelParam._m0[1u].y;
        _1899 = _1883.z * cbModelParam._m0[1u].y;
    }
    float _1903 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _889);
    float _1904 = isnan(_1903) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1903 : min(cbModelParam._m0[25u].w, _1903));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1957 = fma(_1038, cbModelParam._m0[21u].z, fma(_1034, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1030)) + cbModelParam._m0[21u].w;
        float _1961 = fma(_1038, cbModelParam._m0[22u].z, fma(_1034, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1030)) + cbModelParam._m0[22u].w;
        float _1965 = fma(_1038, cbModelParam._m0[23u].z, fma(_1034, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1030)) + cbModelParam._m0[23u].w;
        float _1968 = fma(_976, cbModelParam._m0[21u].z, fma(_975, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _974));
        float _1971 = fma(_976, cbModelParam._m0[22u].z, fma(_975, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _974));
        float _1974 = fma(_976, cbModelParam._m0[23u].z, fma(_975, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _974));
        float _2083;
        if (_1968 > 0.0)
        {
            _2083 = abs((1.0 - _1957) / _1968);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1968 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1957 + 1.0) / _1968);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2083 = frontier_phi_30_26_ladder;
        }
        float _2400;
        if (_1971 > 0.0)
        {
            _2400 = abs((1.0 - _1961) / _1971);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1961 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2400 = frontier_phi_42_37_ladder;
        }
        float _2737;
        if (_1974 > 0.0)
        {
            _2737 = abs((1.0 - _1965) / _1974);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1965 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2737 = frontier_phi_52_49_ladder;
        }
        float _2739 = isnan(_2400) ? _2083 : (isnan(_2083) ? _2400 : min(_2083, _2400));
        float _2740 = isnan(_2737) ? _2739 : (isnan(_2739) ? _2737 : min(_2739, _2737));
        float _2744 = (_2740 * _1968) + _1957;
        float _2745 = (_2740 * _1971) + _1961;
        float _2746 = (_2740 * _1974) + _1965;
        float _2747 = _2740 * 9.9999997473787516355514526367188e-05;
        float _2748 = (-1.0) - _2747;
        float _2750 = _2747 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2746 > _2750) || ((_2746 < _2748) || ((_2745 > _2750) || ((_2745 < _2748) || ((_2744 < _2748) || (_2744 > _2750))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2868 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2746, cbModelParam._m0[17u].z, fma(_2745, cbModelParam._m0[17u].y, _2744 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2746, cbModelParam._m0[18u].z, fma(_2745, cbModelParam._m0[18u].y, _2744 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2746, cbModelParam._m0[19u].z, fma(_2745, cbModelParam._m0[19u].y, _2744 * cbModelParam._m0[19u].x))), _1904);
            frontier_phi_27_52_ladder = _2868.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2868.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2868.x * cbModelParam._m0[1u].z;
        }
        _1993 = frontier_phi_27_52_ladder_2;
        _1995 = frontier_phi_27_52_ladder_1;
        _1997 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_974, _975, _976), _1904);
        _1993 = _1977.x * cbModelParam._m0[1u].z;
        _1995 = _1977.y * cbModelParam._m0[1u].z;
        _1997 = _1977.z * cbModelParam._m0[1u].z;
    }
    float _2010 = (((_1001 * _860) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1993 - _1895)) + _1895);
    float _2012 = (((_1001 * _861) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1995 - _1897)) + _1897);
    float _2014 = (((_1001 * _862) + _1002) * _966) * ((cbModelParam._m0[1u].w * (_1997 - _1899)) + _1899);
    float _2017 = fma(_2014, cbSceneParam._m0[89u].z, fma(_2012, cbSceneParam._m0[89u].y, _2010 * cbSceneParam._m0[89u].x));
    float _2020 = fma(_2014, cbSceneParam._m0[90u].z, fma(_2012, cbSceneParam._m0[90u].y, _2010 * cbSceneParam._m0[90u].x));
    float _2023 = fma(_2014, cbSceneParam._m0[91u].z, fma(_2012, cbSceneParam._m0[91u].y, _2010 * cbSceneParam._m0[91u].x));
    float _2057 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2061 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2065 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2069 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2070 = _2057 / _2069;
    float _2071 = _2061 / _2069;
    float _2072 = _2065 / _2069;
    float _2219;
    float _2220;
    float _2221;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2099 = ((uint(_2072 > cbSceneParam._m0[59u].y) + uint(_2072 > cbSceneParam._m0[59u].x)) + uint(_2072 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2100 = _2099 + 43u;
        uint _2108 = _2099 + 44u;
        uint _2116 = _2099 + 45u;
        uint _2124 = _2099 + 46u;
        float _2135 = fma(_2069, cbSceneParam._m0[_2100].w, fma(_2065, cbSceneParam._m0[_2100].z, fma(_2061, cbSceneParam._m0[_2100].y, _2057 * cbSceneParam._m0[_2100].x)));
        float _2139 = fma(_2069, cbSceneParam._m0[_2108].w, fma(_2065, cbSceneParam._m0[_2108].z, fma(_2061, cbSceneParam._m0[_2108].y, _2057 * cbSceneParam._m0[_2108].x)));
        float _2147 = fma(_2069, cbSceneParam._m0[_2124].w, fma(_2065, cbSceneParam._m0[_2124].z, fma(_2061, cbSceneParam._m0[_2124].y, _2057 * cbSceneParam._m0[_2124].x)));
        float _2152 = cbSceneParam._m0[33u].z * _2147;
        float _2154 = cbSceneParam._m0[33u].w * _2147;
        float _2157 = fma(_2069, cbSceneParam._m0[_2116].w, fma(_2065, cbSceneParam._m0[_2116].z, fma(_2061, cbSceneParam._m0[_2116].y, _2057 * cbSceneParam._m0[_2116].x))) / _2147;
        float _2205 = (cbSceneParam._m0[33u].x - sqrt(((_2071 * _2071) + (_2070 * _2070)) + (_2072 * _2072))) * cbSceneParam._m0[33u].y;
        float _4588 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        float _2212 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2152 + _2135) / _2147, (_2154 + _2139) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2154 + _2135) / _2147, (_2139 - _2152) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 - _2152) / _2147, (_2139 - _2154) / _2147), _2157), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2135 - _2154) / _2147, (_2152 + _2139) / _2147), _2157), 0.0)).x), vec4(0.25)));
        _2219 = 1.0 - (_2212 * cbSceneParam._m0[34u].x);
        _2220 = 1.0 - (_2212 * cbSceneParam._m0[34u].y);
        _2221 = 1.0 - (_2212 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2219 = 1.0;
        _2220 = 1.0;
        _2221 = 1.0;
    }
    float _2285;
    float _2287;
    float _2289;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2273 = fma(_2069, cbSceneParam._m0[63u].w, fma(_2065, cbSceneParam._m0[63u].z, fma(_2061, cbSceneParam._m0[63u].y, _2057 * cbSceneParam._m0[63u].x)));
        float _2274 = fma(_2069, cbSceneParam._m0[60u].w, fma(_2065, cbSceneParam._m0[60u].z, fma(_2061, cbSceneParam._m0[60u].y, _2057 * cbSceneParam._m0[60u].x))) / _2273;
        float _2275 = fma(_2069, cbSceneParam._m0[61u].w, fma(_2065, cbSceneParam._m0[61u].z, fma(_2061, cbSceneParam._m0[61u].y, _2057 * cbSceneParam._m0[61u].x))) / _2273;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2274 >= cbSceneParam._m0[64u].x) && (_2275 >= cbSceneParam._m0[64u].y)) && (_2274 <= cbSceneParam._m0[64u].z)) && (_2275 <= cbSceneParam._m0[64u].w))
        {
            float _2413 = fma(_2069, cbSceneParam._m0[62u].w, fma(_2065, cbSceneParam._m0[62u].z, fma(_2061, cbSceneParam._m0[62u].y, _2057 * cbSceneParam._m0[62u].x))) / _2273;
            float _2417 = isnan(cbSceneParam._m0[41u].w) ? _2413 : (isnan(_2413) ? cbSceneParam._m0[41u].w : max(_2413, cbSceneParam._m0[41u].w));
            float _2460 = (cbSceneParam._m0[33u].x - sqrt(((_2071 * _2071) + (_2070 * _2070)) + (_2072 * _2072))) * cbSceneParam._m0[33u].y;
            float _4604 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
            float _2467 = (isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2274, cbSceneParam._m0[33u].w + _2275), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2274, _2275 - cbSceneParam._m0[33u].z), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2274 - cbSceneParam._m0[33u].z, _2275 - cbSceneParam._m0[33u].w), _2417), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2274 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2275), _2417), 0.0)).x), vec4(0.25)));
            float _2471 = 1.0 - (_2467 * cbSceneParam._m0[34u].x);
            float _2472 = 1.0 - (_2467 * cbSceneParam._m0[34u].y);
            float _2473 = 1.0 - (_2467 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2472) ? _2220 : (isnan(_2220) ? _2472 : min(_2220, _2472));
            frontier_phi_39_38_ladder_1 = isnan(_2471) ? _2219 : (isnan(_2219) ? _2471 : min(_2219, _2471));
            frontier_phi_39_38_ladder_2 = isnan(_2473) ? _2221 : (isnan(_2221) ? _2473 : min(_2221, _2473));
        }
        else
        {
            frontier_phi_39_38_ladder = _2220;
            frontier_phi_39_38_ladder_1 = _2219;
            frontier_phi_39_38_ladder_2 = _2221;
        }
        _2285 = frontier_phi_39_38_ladder_1;
        _2287 = frontier_phi_39_38_ladder;
        _2289 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2285 = _2219;
        _2287 = _2220;
        _2289 = _2221;
    }
    uvec4 _2294 = floatBitsToUint(cbInstanceData._m0[_902 + 5u]);
    uint _2296 = _2294.x * 14u;
    uint _2297 = _2296 + 13u;
    float _2304 = _966 + (-1.0);
    float _2309 = (cbLight._m0[_2297].x * _2304) + 1.0;
    float _2310 = (cbLight._m0[_2297].y * _2304) + 1.0;
    float _2311 = (cbLight._m0[_2297].z * _2304) + 1.0;
    float _2312 = (cbLight._m0[_2297].w * _2304) + 1.0;
    uint _2313 = _2296 + 5u;
    float _2319 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
    uint _2323 = _2296 + 4u;
    float _2332 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
    uint _2336 = _2296 | 1u;
    float _2347 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_702, _703, _704));
    float _2350 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_702, _703, _704));
    float _4640 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _4651 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2355 = (isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * 0.3183098733425140380859375;
    float _2357 = (isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * 0.3183098733425140380859375;
    float _2364 = ((cbLight._m0[_2313].x * _2319) * _2357) + (((cbLight._m0[_2323].x * _2285) * _2332) * _2355);
    float _2365 = ((_2319 * cbLight._m0[_2313].y) * _2357) + (((cbLight._m0[_2323].y * _2287) * _2332) * _2355);
    float _2366 = ((_2319 * cbLight._m0[_2313].z) * _2357) + (((cbLight._m0[_2323].z * _2289) * _2332) * _2355);
    uvec4 _2370 = floatBitsToUint(cbLight._m0[_2296 + 12u]);
    bool _2372 = _2370.x == 0u;
    float _2474;
    float _2476;
    float _2478;
    if (_2372)
    {
        _2474 = _2364;
        _2476 = _2365;
        _2478 = _2366;
    }
    else
    {
        uint _2482 = _2296 + 6u;
        float _2498 = (dot(vec3(cbLight._m0[_2296 + 2u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2499 = _2498 * _2498;
        float _4662 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
        float _2500 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
        float _2501 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2474 = (((cbLight._m0[_2482].x * 0.3183098733425140380859375) * _2500) * _2501) + _2364;
        _2476 = (((cbLight._m0[_2482].y * 0.3183098733425140380859375) * _2500) * _2501) + _2365;
        _2478 = (((cbLight._m0[_2482].z * 0.3183098733425140380859375) * _2500) * _2501) + _2366;
    }
    bool _2481 = _2370.y == 0u;
    float _2536;
    float _2538;
    float _2540;
    if (_2481)
    {
        _2536 = _2474;
        _2538 = _2476;
        _2540 = _2478;
    }
    else
    {
        uint _2708 = _2296 + 7u;
        float _2724 = (dot(vec3(cbLight._m0[_2296 + 3u].xyz), vec3(_702, _703, _704)) * 0.5) + 0.5;
        float _2725 = _2724 * _2724;
        float _4678 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2726 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2727 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2536 = (((cbLight._m0[_2708].x * 0.3183098733425140380859375) * _2726) * _2727) + _2474;
        _2538 = (((cbLight._m0[_2708].y * 0.3183098733425140380859375) * _2726) * _2727) + _2476;
        _2540 = (((cbLight._m0[_2708].z * 0.3183098733425140380859375) * _2726) * _2727) + _2478;
    }
    uint _2543 = _2296 + 8u;
    float _2556 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2296].w)) * _889) * 0.949999988079071044921875);
    float _2557 = _2556 * _2556;
    float _2558 = cbLight._m0[_2296].x + _784;
    float _2559 = cbLight._m0[_2296].y + _785;
    float _2560 = cbLight._m0[_2296].z + _786;
    float _2564 = inversesqrt(dot(vec3(_2558, _2559, _2560), vec3(_2558, _2559, _2560)));
    float _2565 = _2564 * _2558;
    float _2566 = _2564 * _2559;
    float _2567 = _2564 * _2560;
    float _2568 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2296].xyz));
    float _4694 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
    float _2571 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
    float _4705 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _2572 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2573 = dot(vec3(_702, _703, _704), vec3(_2565, _2566, _2567));
    float _4716 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2576 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2577 = dot(vec3(cbLight._m0[_2296].xyz), vec3(_2565, _2566, _2567));
    float _4727 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2581 = _2557 * _2557;
    float _2585 = ((_2576 * _2576) * (_2581 + (-1.0))) + 1.0;
    float _2593 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
    float _2594 = 1.0 - _860;
    float _2595 = 1.0 - _861;
    float _2596 = 1.0 - _862;
    float _2603 = 1.0 - _2557;
    float _2614 = (0.5 / (((_2572 * ((_2571 * _2603) + _2557)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2603) + _2557) * _2571))) * _2571;
    float _4738 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2616 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2581 / ((_2585 * _2585) * 3.141590118408203125));
    uint _2630 = _2296 + 9u;
    float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2336].w)) * _889) * 0.949999988079071044921875);
    float _2642 = _2641 * _2641;
    float _2643 = cbLight._m0[_2336].x + _784;
    float _2644 = cbLight._m0[_2336].y + _785;
    float _2645 = cbLight._m0[_2336].z + _786;
    float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
    float _2650 = _2649 * _2643;
    float _2651 = _2649 * _2644;
    float _2652 = _2649 * _2645;
    float _2653 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2336].xyz));
    float _4749 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2656 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
    float _2657 = dot(vec3(_702, _703, _704), vec3(_2650, _2651, _2652));
    float _4760 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2660 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
    float _2661 = dot(vec3(cbLight._m0[_2336].xyz), vec3(_2650, _2651, _2652));
    float _4771 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
    float _2665 = _2642 * _2642;
    float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
    float _2676 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
    float _2683 = 1.0 - _2642;
    float _2693 = (0.5 / (((_2572 * ((_2656 * _2683) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2683) + _2642) * _2656))) * _2656;
    float _4782 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
    float _2695 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
    float _2705 = (((((_2676 * _2594) + _860) * cbLight._m0[_2630].x) * _2695) * _2319) + ((((cbLight._m0[_2543].x * _2285) * ((_2593 * _2594) + _860)) * _2616) * _2332);
    float _2706 = (((((_2676 * _2595) + _861) * cbLight._m0[_2630].y) * _2695) * _2319) + ((((cbLight._m0[_2543].y * _2287) * ((_2593 * _2595) + _861)) * _2616) * _2332);
    float _2707 = (((((_2676 * _2596) + _862) * cbLight._m0[_2630].z) * _2695) * _2319) + ((((cbLight._m0[_2543].z * _2289) * ((_2593 * _2596) + _862)) * _2616) * _2332);
    float _2763;
    float _2765;
    float _2767;
    if (_2372)
    {
        _2763 = _2705;
        _2765 = _2706;
        _2767 = _2707;
    }
    else
    {
        uint _2769 = _2296 + 2u;
        uint _2773 = _2296 + 10u;
        float _2787 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2769].w)) * _889) * 0.949999988079071044921875);
        float _2788 = _2787 * _2787;
        float _2789 = cbLight._m0[_2769].x + _784;
        float _2790 = cbLight._m0[_2769].y + _785;
        float _2791 = cbLight._m0[_2769].z + _786;
        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
        float _2796 = _2795 * _2789;
        float _2797 = _2795 * _2790;
        float _2798 = _2795 * _2791;
        float _2799 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2769].xyz));
        float _4793 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2802 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _2803 = dot(vec3(_702, _703, _704), vec3(_2796, _2797, _2798));
        float _4804 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
        float _2806 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _2807 = dot(vec3(cbLight._m0[_2769].xyz), vec3(_2796, _2797, _2798));
        float _4815 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
        float _2811 = _2788 * _2788;
        float _2815 = ((_2806 * _2806) * (_2811 + (-1.0))) + 1.0;
        float _2822 = exp2(log2(1.0 - (isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0)))) * 5.0);
        float _2829 = 1.0 - _2788;
        float _2839 = (0.5 / (((_2572 * ((_2802 * _2829) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2829) + _2788) * _2802))) * _2802;
        float _4826 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
        float _2841 = (isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0))) * (_2811 / ((_2815 * _2815) * 3.141590118408203125));
        float _2842 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2763 = (((((_2822 * _2594) + _860) * cbLight._m0[_2773].x) * _2841) * _2842) + _2705;
        _2765 = (((((_2822 * _2595) + _861) * cbLight._m0[_2773].y) * _2841) * _2842) + _2706;
        _2767 = (((((_2822 * _2596) + _862) * cbLight._m0[_2773].z) * _2841) * _2842) + _2707;
    }
    float _2873;
    float _2875;
    float _2877;
    if (_2481)
    {
        _2873 = _2763;
        _2875 = _2765;
        _2877 = _2767;
    }
    else
    {
        uint _2884 = _2296 + 3u;
        uint _2888 = _2296 + 11u;
        float _2902 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2884].w)) * _889) * 0.949999988079071044921875);
        float _2903 = _2902 * _2902;
        float _2904 = cbLight._m0[_2884].x + _784;
        float _2905 = cbLight._m0[_2884].y + _785;
        float _2906 = cbLight._m0[_2884].z + _786;
        float _2910 = inversesqrt(dot(vec3(_2904, _2905, _2906), vec3(_2904, _2905, _2906)));
        float _2911 = _2910 * _2904;
        float _2912 = _2910 * _2905;
        float _2913 = _2910 * _2906;
        float _2914 = dot(vec3(_702, _703, _704), vec3(cbLight._m0[_2884].xyz));
        float _4842 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2917 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
        float _2918 = dot(vec3(_702, _703, _704), vec3(_2911, _2912, _2913));
        float _4853 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2921 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
        float _2922 = dot(vec3(cbLight._m0[_2884].xyz), vec3(_2911, _2912, _2913));
        float _4864 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
        float _2926 = _2903 * _2903;
        float _2930 = ((_2921 * _2921) * (_2926 + (-1.0))) + 1.0;
        float _2937 = exp2(log2(1.0 - (isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0)))) * 5.0);
        float _2944 = 1.0 - _2903;
        float _2954 = (0.5 / (((_2572 * ((_2917 * _2944) + _2903)) + 9.9999999392252902907785028219223e-09) + (((_2572 * _2944) + _2903) * _2917))) * _2917;
        float _4875 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
        float _2956 = (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0))) * (_2926 / ((_2930 * _2930) * 3.141590118408203125));
        float _2957 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
        _2873 = (((((_2937 * _2594) + _860) * cbLight._m0[_2888].x) * _2956) * _2957) + _2763;
        _2875 = (((((_2937 * _2595) + _861) * cbLight._m0[_2888].y) * _2956) * _2957) + _2765;
        _2877 = (((((_2937 * _2596) + _862) * cbLight._m0[_2888].z) * _2956) * _2957) + _2767;
    }
    float _3022;
    float _3024;
    float _3026;
    float _3028;
    float _3030;
    float _3032;
    if (_2294.y == 0u)
    {
        uvec4 _2978 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2979 = _2978.x;
        uint _2990 = uint((float(_2978.y) * floor(float(uint(cbSceneParam._m0[85u].y * _805) / _2979))) + floor(float(uint(cbSceneParam._m0[85u].x * _804) / _2979)));
        float _3000 = (log2(_2072 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3001 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
        uint _3004 = uint(isnan(14.0) ? _3001 : (isnan(_3001) ? 14.0 : min(_3001, 14.0)));
        uvec4 _3009 = texelFetch(g_lightClusterGridBuffer, int(((_3004 << 2u) + (_2990 << 6u)) >> 2u));
        uint _3010 = _3009.x;
        uint _3011 = _2978.z;
        float _3092;
        float _3094;
        float _3096;
        float _3098;
        float _3100;
        float _3102;
        if (((((1u << ((_3011 >> 4u) & 15u)) + 4294967295u) & _3010) == 0u) || ((_3011 & 240u) == 0u))
        {
            _3092 = 0.0;
            _3094 = 0.0;
            _3096 = 0.0;
            _3098 = 0.0;
            _3100 = 0.0;
            _3102 = 0.0;
        }
        else
        {
            float _3093;
            float _3095;
            float _3097;
            float _3099;
            float _3101;
            float _3103;
            float _3244 = 0.0;
            float _3245 = 0.0;
            float _3246 = 0.0;
            float _3247 = 0.0;
            float _3248 = 0.0;
            float _3249 = 0.0;
            uint _3250 = 0u;
            uint _3259;
            bool _3260;
            for (;;)
            {
                _3259 = texelFetch(g_lightClassification, int((((_3004 << 5u) + (_2990 << 9u)) + (_3250 << 2u)) >> 2u)).x;
                _3260 = _3259 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3260)
                {
                    frontier_phi_73_pred = _3249;
                    frontier_phi_73_pred_1 = _3248;
                    frontier_phi_73_pred_2 = _3247;
                    frontier_phi_73_pred_3 = _3246;
                    frontier_phi_73_pred_4 = _3245;
                    frontier_phi_73_pred_5 = _3244;
                }
                else
                {
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    float _3394;
                    uint _3395;
                    _3389 = _3244;
                    _3390 = _3245;
                    _3391 = _3246;
                    _3392 = _3247;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3259;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    for (;;)
                    {
                        uint _3399 = uint(findLSB(_3395)) + (_3250 << 5u);
                        uint _3396 = (_3395 + 4294967295u) & _3395;
                        uint _3401 = _3399 * 48u;
                        vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 3u)).x));
                        uint _3421 = (_3399 * 48u) + 4u;
                        vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 3u)).x));
                        uint _3440 = (_3399 * 48u) + 8u;
                        vec3 _3451 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3440)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3440 + 2u)).x));
                        float _3455 = _3415.x - _2070;
                        float _3456 = _3415.y - _2071;
                        float _3457 = _3415.z - _2072;
                        float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                        float _3461 = inversesqrt(_3458);
                        float _3462 = _3461 * _3455;
                        float _3463 = _3461 * _3456;
                        float _3464 = _3461 * _3457;
                        float _3465 = dot(vec3(_827, _830, _833), vec3(_3462, _3463, _3464));
                        float _3470 = 1.0 - (_3458 * _3415.w);
                        float _4901 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                        float _3471 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
                        float _3472 = sqrt(_3458) * _3434.w;
                        float _3475 = 1.39999997615814208984375 / (_3472 + 1.39999997615814208984375);
                        float _3476 = _3475 * _3475;
                        float _3479 = ((1.0 - _3476) * _3465) + _3476;
                        float _3482 = _3472 * _3472;
                        float _3486 = ((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3471) / ((_3482 * 0.699999988079071044921875) + 1.0);
                        float _3490 = (-0.0) - _2070;
                        float _3491 = (-0.0) - _2071;
                        float _3492 = (-0.0) - _2072;
                        float _3496 = inversesqrt(dot(vec3(_3490, _3491, _3492), vec3(_3490, _3491, _3492)));
                        float _3497 = _3496 * _3490;
                        float _3498 = _3496 * _3491;
                        float _3499 = _3496 * _3492;
                        float _3506 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                        float _3507 = 1.0 - _982;
                        float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                        float _3515 = _3514 * _3514;
                        float _3516 = _3515 * _3515;
                        float _3517 = _3497 + _3462;
                        float _3518 = _3498 + _3463;
                        float _3519 = _3499 + _3464;
                        float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                        float _3527 = dot(vec3(_827, _830, _833), vec3(_3497, _3498, _3499));
                        float _4917 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3531 = dot(vec3(_827, _830, _833), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                        float _4928 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0));
                        float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                        float _3539 = _3475 * _3515;
                        float _3540 = _3539 * _3539;
                        float _3543 = ((1.0 - _3540) * _3465) + _3540;
                        float _4939 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
                        float _3545 = 1.0 - _3515;
                        float _3555 = (0.5 / (((_3544 * ((_3530 * _3545) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3515) * _3530))) * _3544;
                        float _4950 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3566 = (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0)))) / ((_3538 * _3538) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125))) * _3471;
                        _3319 = (_3486 * _3434.x) + _3392;
                        _3320 = (_3486 * _3434.y) + _3393;
                        _3321 = (_3486 * _3434.z) + _3394;
                        _3316 = (_3566 * _3451.x) + _3389;
                        _3317 = (_3566 * _3451.y) + _3390;
                        _3318 = (_3566 * _3451.z) + _3391;
                        if (_3396 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3389 = _3316;
                            _3390 = _3317;
                            _3391 = _3318;
                            _3392 = _3319;
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3396;
                        }
                    }
                    frontier_phi_73_pred = _3321;
                    frontier_phi_73_pred_1 = _3320;
                    frontier_phi_73_pred_2 = _3319;
                    frontier_phi_73_pred_3 = _3318;
                    frontier_phi_73_pred_4 = _3317;
                    frontier_phi_73_pred_5 = _3316;
                }
                _3103 = frontier_phi_73_pred;
                _3101 = frontier_phi_73_pred_1;
                _3099 = frontier_phi_73_pred_2;
                _3097 = frontier_phi_73_pred_3;
                _3095 = frontier_phi_73_pred_4;
                _3093 = frontier_phi_73_pred_5;
                uint _3251 = _3250 + 1u;
                if (_3251 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3244 = _3093;
                    _3245 = _3095;
                    _3246 = _3097;
                    _3247 = _3099;
                    _3248 = _3101;
                    _3249 = _3103;
                    _3250 = _3251;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3092 = _3093;
            _3094 = _3095;
            _3096 = _3097;
            _3098 = _3099;
            _3100 = _3101;
            _3102 = _3103;
        }
        uvec4 _3106 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3107 = _3106.z;
        uint _3109 = (_3107 >> 8u) & 15u;
        float _3212;
        float _3214;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        if (((4294967295u << _3109) & _3010) == 0u)
        {
            _3212 = _3092;
            _3214 = _3094;
            _3216 = _3096;
            _3218 = _3098;
            _3220 = _3100;
            _3222 = _3102;
        }
        else
        {
            float _3237 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
            float _3238 = _3237 * _2070;
            float _3239 = _3237 * _2071;
            float _3240 = _3237 * _2072;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_3109 < ((_3107 >> 12u) & 15u))
            {
                float _3213;
                float _3215;
                float _3217;
                float _3219;
                float _3221;
                float _3223;
                float _3372 = _3092;
                float _3373 = _3094;
                float _3374 = _3096;
                float _3375 = _3098;
                float _3376 = _3100;
                float _3377 = _3102;
                uint _3378 = _3109;
                uint _3387;
                bool _3388;
                for (;;)
                {
                    _3387 = texelFetch(g_lightClassification, int((((_3004 << 5u) + (_2990 << 9u)) + (_3378 << 2u)) >> 2u)).x;
                    _3388 = _3387 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3388)
                    {
                        frontier_phi_84_pred = _3376;
                        frontier_phi_84_pred_1 = _3375;
                        frontier_phi_84_pred_2 = _3374;
                        frontier_phi_84_pred_3 = _3373;
                        frontier_phi_84_pred_4 = _3372;
                        frontier_phi_84_pred_5 = _3377;
                    }
                    else
                    {
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3584;
                        float _3585;
                        float _3873;
                        float _3874;
                        float _3875;
                        float _3876;
                        float _3877;
                        float _3878;
                        float _3593 = _3372;
                        float _3594 = _3373;
                        float _3595 = _3374;
                        float _3596 = _3375;
                        float _3597 = _3376;
                        float _3598 = _3377;
                        uint _3599 = _3387;
                        uint _3600;
                        vec4 _3625;
                        float _3626;
                        vec4 _3641;
                        vec3 _3653;
                        vec4 _3668;
                        vec4 _3683;
                        float _3729;
                        bool _3730;
                        for (;;)
                        {
                            uint _3610 = ((_3378 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3599));
                            _3600 = (_3599 + 4294967295u) & _3599;
                            uint _3612 = _3610 * 40u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            _3626 = _3625.w;
                            uint _3628 = (_3610 * 40u) + 4u;
                            _3641 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3628)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3628 + 3u)).x));
                            uint _3643 = (_3610 * 40u) + 8u;
                            _3653 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3643)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3643 + 2u)).x));
                            uint _3655 = (_3610 * 40u) + 16u;
                            _3668 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3655)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3655 + 3u)).x));
                            uint _3670 = (_3610 * 40u) + 20u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            uint _3685 = (_3610 * 40u) + 24u;
                            vec4 _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3704 = (_3610 * 40u) + 28u;
                            vec4 _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            _3729 = fma(_2072, _3717.z, fma(_2071, _3717.y, _3717.x * _2070)) + _3717.w;
                            _3730 = !((fma(_2072, _3698.z, fma(_2071, _3698.y, _3698.x * _2070)) + _3698.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3730)
                            {
                                float _3757 = _3625.x - _2070;
                                float _3758 = _3625.y - _2071;
                                float _3759 = _3625.z - _2072;
                                float _3760 = dot(vec3(_3757, _3758, _3759), vec3(_3757, _3758, _3759));
                                float _3763 = inversesqrt(_3760);
                                float _3764 = _3763 * _3757;
                                float _3765 = _3763 * _3758;
                                float _3766 = _3763 * _3759;
                                float _3770 = 1.0 - (_3760 / (_3626 * _3626));
                                float _4961 = isnan(0.0) ? _3770 : (isnan(_3770) ? 0.0 : max(_3770, 0.0));
                                float _3771 = isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0));
                                float _3775 = sqrt(_3760) * _3641.w;
                                float _3777 = 1.39999997615814208984375 / (_3775 + 1.39999997615814208984375);
                                float _3778 = _3777 * _3777;
                                float _3781 = ((1.0 - _3778) * dot(vec3(_3764, _3765, _3766), vec3(_827, _830, _833))) + _3778;
                                float _3784 = _3775 * _3775;
                                float _3788 = (fma(_2072, _3668.z, fma(_2071, _3668.y, _3668.x * _2070)) + _3668.w) / _3729;
                                float _3789 = (fma(_2072, _3683.z, fma(_2071, _3683.y, _3683.x * _2070)) + _3683.w) / _3729;
                                float _3793 = 1.0 - dot(vec2(_3788, _3789), vec2(_3788, _3789));
                                float _4977 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3794 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3795 = _3794 * (((isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0))) * _3771) / ((_3784 * 0.699999988079071044921875) + 1.0));
                                float _3807 = exp2(log2(1.0 / ((_3784 * 3.5) + 5.0)) * 0.25);
                                float _3808 = 1.0 - _982;
                                float _3815 = sqrt(1.0 - ((1.0 - (_3808 * _3808)) * (1.0 - (_3807 * _3807))));
                                float _3816 = _3815 * _3815;
                                float _3817 = _3816 * _3816;
                                float _3818 = _3764 - _3238;
                                float _3819 = _3765 - _3239;
                                float _3820 = _3766 - _3240;
                                float _3824 = inversesqrt(dot(vec3(_3818, _3819, _3820), vec3(_3818, _3819, _3820)));
                                float _3828 = dot(vec3(_827, _830, _833), vec3((-0.0) - _3238, (-0.0) - _3239, (-0.0) - _3240));
                                float _4988 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3831 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
                                float _3832 = dot(vec3(_827, _830, _833), vec3(_3824 * _3818, _3824 * _3819, _3824 * _3820));
                                float _4999 = isnan(0.0) ? _3832 : (isnan(_3832) ? 0.0 : max(_3832, 0.0));
                                float _3835 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
                                float _3839 = ((_3835 * _3835) * (_3817 + (-1.0))) + 1.0;
                                float _3840 = _3777 * _3816;
                                float _3841 = _3840 * _3840;
                                float _3847 = ((1.0 - _3841) * dot(vec3(_827, _830, _833), vec3(_3764, _3765, _3766))) + _3841;
                                float _5010 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0));
                                float _3849 = 1.0 - _3816;
                                float _3859 = (0.5 / (((_3848 * ((_3831 * _3849) + _3816)) + 9.9999999392252902907785028219223e-09) + (((_3848 * _3849) + _3816) * _3831))) * _3848;
                                float _5021 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3869 = (_3794 * _3771) * (((_3817 * 3.1415927410125732421875) * (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0)))) / ((_3839 * _3839) * ((_3784 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3795 * _3641.y;
                                frontier_phi_90_pred_1 = _3795 * _3641.x;
                                frontier_phi_90_pred_2 = _3869 * _3653.z;
                                frontier_phi_90_pred_3 = _3869 * _3653.y;
                                frontier_phi_90_pred_4 = _3869 * _3653.x;
                                frontier_phi_90_pred_5 = _3795 * _3641.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3877 = frontier_phi_90_pred;
                            _3876 = frontier_phi_90_pred_1;
                            _3875 = frontier_phi_90_pred_2;
                            _3874 = frontier_phi_90_pred_3;
                            _3873 = frontier_phi_90_pred_4;
                            _3878 = frontier_phi_90_pred_5;
                            _3583 = _3876 + _3596;
                            _3584 = _3877 + _3597;
                            _3585 = _3878 + _3598;
                            _3580 = _3873 + _3593;
                            _3581 = _3874 + _3594;
                            _3582 = _3875 + _3595;
                            if (_3600 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3593 = _3580;
                                _3594 = _3581;
                                _3595 = _3582;
                                _3596 = _3583;
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3600;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3584;
                        frontier_phi_84_pred_1 = _3583;
                        frontier_phi_84_pred_2 = _3582;
                        frontier_phi_84_pred_3 = _3581;
                        frontier_phi_84_pred_4 = _3580;
                        frontier_phi_84_pred_5 = _3585;
                    }
                    _3221 = frontier_phi_84_pred;
                    _3219 = frontier_phi_84_pred_1;
                    _3217 = frontier_phi_84_pred_2;
                    _3215 = frontier_phi_84_pred_3;
                    _3213 = frontier_phi_84_pred_4;
                    _3223 = frontier_phi_84_pred_5;
                    uint _3379 = _3378 + 1u;
                    if (_3379 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3372 = _3213;
                        _3373 = _3215;
                        _3374 = _3217;
                        _3375 = _3219;
                        _3376 = _3221;
                        _3377 = _3223;
                        _3378 = _3379;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3223;
                frontier_phi_65_66_ladder_1 = _3219;
                frontier_phi_65_66_ladder_2 = _3221;
                frontier_phi_65_66_ladder_3 = _3215;
                frontier_phi_65_66_ladder_4 = _3213;
                frontier_phi_65_66_ladder_5 = _3217;
            }
            else
            {
                frontier_phi_65_66_ladder = _3102;
                frontier_phi_65_66_ladder_1 = _3098;
                frontier_phi_65_66_ladder_2 = _3100;
                frontier_phi_65_66_ladder_3 = _3094;
                frontier_phi_65_66_ladder_4 = _3092;
                frontier_phi_65_66_ladder_5 = _3096;
            }
            _3212 = frontier_phi_65_66_ladder_4;
            _3214 = frontier_phi_65_66_ladder_3;
            _3216 = frontier_phi_65_66_ladder_5;
            _3218 = frontier_phi_65_66_ladder_1;
            _3220 = frontier_phi_65_66_ladder_2;
            _3222 = frontier_phi_65_66_ladder;
        }
        float _3227 = isnan(1.0) ? _966 : (isnan(_966) ? 1.0 : min(_966, 1.0));
        _3022 = (_3227 * _3218) + _2536;
        _3024 = (_3227 * _3220) + _2538;
        _3026 = (_3227 * _3222) + _2540;
        _3028 = ((_3212 * _860) * _3227) + _2873;
        _3030 = ((_3214 * _861) * _3227) + _2875;
        _3032 = ((_3216 * _862) * _3227) + _2877;
    }
    else
    {
        _3022 = _2536;
        _3024 = _2538;
        _3026 = _2540;
        _3028 = _2873;
        _3030 = _2875;
        _3032 = _2877;
    }
    float _3034 = (((cbMatDynParam._m0[13u].x - _936) * _942) + _936) * _2594;
    float _3035 = (((cbMatDynParam._m0[13u].y - _937) * _942) + _937) * _2595;
    float _3036 = (((cbMatDynParam._m0[13u].z - _938) * _942) + _938) * _2596;
    float _5037 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
    float _5048 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
    float _5059 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
    float _3052 = ((isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0))) * (_3022 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _966))) + ((_3028 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _3053 = ((isnan(1.0) ? _5048 : (isnan(_5048) ? 1.0 : min(_5048, 1.0))) * (_3024 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _966))) + ((_3030 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _3054 = ((isnan(1.0) ? _5059 : (isnan(_5059) ? 1.0 : min(_5059, 1.0))) * (_3026 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _966))) + ((_3032 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    uint _3055 = _902 + 6u;
    float _3063 = _804 / cbSceneParam._m0[86u].x;
    float _3064 = _805 / cbSceneParam._m0[86u].y;
    vec4 _3078 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3063, _3064, (log2((isnan(cbSceneParam._m0[77u].w) ? _727 : (isnan(_727) ? cbSceneParam._m0[77u].w : min(_727, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3080 = _3078.x;
    float _3081 = _3078.y;
    float _3082 = _3078.z;
    float _3083 = _3078.w;
    float _3154;
    float _3156;
    float _3158;
    float _3160;
    if (_727 > cbSceneParam._m0[78u].w)
    {
        float _3117 = isnan(_727) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _727 : min(cbSceneParam._m0[80u].w, _727));
        float _3118 = _3117 / _727;
        float _3129 = _3118 * _777;
        float _3130 = _778 * _3118;
        float _3131 = (-0.0) - _3130;
        float _3132 = _3118 * _779;
        float _3134 = (cbSceneParam._m0[77u].w * _3131) / _3117;
        float _3135 = _3134 + cbSceneParam._m0[79u].w;
        float _3136 = cbSceneParam._m0[79u].w - _3130;
        float _3142 = sqrt(((_3129 * _3129) + (_3130 * _3130)) + (_3132 * _3132));
        float _3145 = (1.0 - (cbSceneParam._m0[77u].w / _3117)) * _3142;
        float _3150 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3152 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3329;
        if (abs((_3131 - _3134) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3329 = ((((_3135 > 0.0) ? exp2(_3150 * _3135) : (2.0 - exp2(_3152 * _3135))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3145;
        }
        else
        {
            float _3273 = 1.0 / cbSceneParam._m0[80u].x;
            float _3274 = isnan(_3136) ? _3135 : (isnan(_3135) ? _3136 : max(_3135, _3136));
            float _3275 = isnan(_3136) ? _3135 : (isnan(_3135) ? _3136 : min(_3135, _3136));
            float _3284 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : min(_3274, 0.0));
            float _3285 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : min(_3275, 0.0));
            _3329 = ((abs(_3142 / _3131) * cbSceneParam._m0[80u].y) * ((((_3284 - _3285) * 2.0) - ((exp2(_3150 * (isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0)))) - exp2(_3150 * (isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0))))) * _3273)) - ((exp2(_3152 * _3284) - exp2(_3152 * _3285)) * _3273))) + (_3145 * cbSceneParam._m0[80u].z);
        }
        vec4 _3331 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3063, _3064, 1.0), 0.0);
        float _3340 = exp2((_3329 * (-1.44269502162933349609375)) * (1.0 - _3331.w));
        float _3341 = log2(_3340);
        float _3357 = log2(_3083);
        _3154 = (exp2(_3357 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].x)) * _3331.x) / cbSceneParam._m0[78u].x)) + _3080;
        _3156 = (exp2(_3357 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].y)) * _3331.y) / cbSceneParam._m0[78u].y)) + _3081;
        _3158 = (exp2(_3357 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].z)) * _3331.z) / cbSceneParam._m0[78u].z)) + _3082;
        _3160 = _3340 * _3083;
    }
    else
    {
        _3154 = _3080;
        _3156 = _3081;
        _3158 = _3082;
        _3160 = _3083;
    }
    bool _3367;
    vec4 _3170;
    vec4 _3192;
    float _3194;
    float _3198;
    float _3199;
    float _3200;
    float _3201;
    bool _3211;
    for (;;)
    {
        _3170 = cbMatDynParam._m0[0u];
        float _3172 = roundEven(_3170.y);
        bool _3173 = _3172 == 3.0;
        float _3174 = log2(_3160);
        float _3181 = exp2(_3174 * cbSceneParam._m0[78u].x) * _3052;
        float _3182 = exp2(_3174 * cbSceneParam._m0[78u].y) * _3053;
        float _3183 = exp2(_3174 * cbSceneParam._m0[78u].z) * _3054;
        float _3190 = _793 + (-0.5);
        _3192 = cbMtdParam._m0[1u];
        _3194 = _3192.y * _3190;
        float _3197 = (_3172 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3198 = _3197 * (_3173 ? _3181 : (_3181 + (cbSceneParam._m0[72u].w * _3154)));
        _3199 = _3197 * (_3173 ? _3182 : (_3182 + (cbSceneParam._m0[72u].w * _3156)));
        _3200 = _3197 * (_3173 ? _3183 : (_3183 + (cbSceneParam._m0[72u].w * _3158)));
        _3201 = _3190 * 0.999000012874603271484375;
        _3211 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3211)
        {
            if ((cbInstanceData._m0[_902 + 7u].x + _3201) < 0.5)
            {
                _3367 = true;
                break;
            }
        }
        uint _3308 = _903 + uint(_3170.w);
        if ((cbInstanceData._m0[_3308].w < 1.0) && ((cbInstanceData._m0[_3308].w + _3201) < 0.5))
        {
            _3367 = true;
            break;
        }
        if ((_3194 + _453) < _3192.x)
        {
            _3367 = true;
            break;
        }
        _3367 = false;
        break;
    }
    float _3571;
    if (_3367)
    {
        discard_state = true;
        _3571 = 0.0;
    }
    else
    {
        _3571 = cbInstanceData._m0[_3055].w;
    }
    SV_Target.x = _3198;
    SV_Target.y = _3199;
    SV_Target.z = _3200;
    SV_Target.w = _3571;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3055].w;
    discard_exit();
}


