#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MN_Material_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _809;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _174 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _175 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _176 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _181 = inversesqrt(dot(vec3(_174, _175, _176), vec3(_174, _175, _176)));
    float _188 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _189 = _188 * NORMAL.x;
    float _190 = _188 * NORMAL.y;
    float _191 = _188 * NORMAL.z;
    float _195 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _203;
    float _204;
    float _205;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _203 = (-0.0) - _189;
        _204 = (-0.0) - _190;
        _205 = (-0.0) - _191;
    }
    else
    {
        _203 = _189;
        _204 = _190;
        _205 = _191;
    }
    vec4 _229 = texture(sampler2D(MN_Material_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _238 = (_229.x * 2.0) + (-1.0);
    float _240 = (_229.y * 2.0) + (-1.0);
    float _241 = dot(vec2(_238, _240), vec2(_238, _240));
    float _3146 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _247 = sqrt(1.0 - (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0))));
    float _249 = cbMtdParam._m0[10u].y + _229.z;
    float _252 = fma(_247, _203, fma(_240, _195 * TANGENT.x, (_181 * _174) * _238));
    float _255 = fma(_247, _204, fma(_240, _195 * TANGENT.y, (_181 * _175) * _238));
    float _258 = fma(_247, _205, fma(_240, _195 * TANGENT.z, (_181 * _176) * _238));
    float _262 = inversesqrt(dot(vec3(_252, _255, _258), vec3(_252, _255, _258)));
    float _263 = _262 * _252;
    float _264 = _262 * _255;
    float _265 = _262 * _258;
    float _3157 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _266 = isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0));
    float _3168 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3179 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3190 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3201 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _270 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _286 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _327 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _337 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _327);
    float _338 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _327);
    float _339 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _327);
    float _343 = inversesqrt(dot(vec3(_337, _338, _339), vec3(_337, _338, _339)));
    float _344 = _337 * _343;
    float _345 = _338 * _343;
    float _346 = _339 * _343;
    float _352 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _353 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _374 = fma(_265, cbSceneParam._m0[5u].z, fma(_264, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _263));
    float _377 = fma(_265, cbSceneParam._m0[6u].z, fma(_264, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _263));
    float _380 = fma(_265, cbSceneParam._m0[7u].z, fma(_264, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _263));
    uint _393 = uint(roundEven(NORMAL.w)) * 13u;
    uint _396 = (_393 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _402 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0)))) * cbInstanceData._m0[_396].x;
    float _403 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0)))) * cbInstanceData._m0[_396].y;
    float _404 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0)))) * cbInstanceData._m0[_396].z;
    float _3212 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _405 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _3223 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _406 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    float _3234 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _408 = 1.0 - _270;
    float _409 = _405 * _408;
    float _410 = _406 * _408;
    float _411 = _407 * _408;
    float _416 = (_405 + (-0.039999999105930328369140625)) * _270;
    float _417 = (_406 + (-0.039999999105930328369140625)) * _270;
    float _418 = (_407 + (-0.039999999105930328369140625)) * _270;
    float _419 = _416 + 0.039999999105930328369140625;
    float _421 = _417 + 0.039999999105930328369140625;
    float _422 = _418 + 0.039999999105930328369140625;
    vec4 _431 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _352, cbSceneParam._m0[86u].y * _353));
    float _434 = _431.x * TEXCOORD.z;
    float _435 = dot(vec3(_263, _264, _265), vec3(_344, _345, _346));
    float _438 = _435 * 2.0;
    float _442 = (_438 * _263) - _344;
    float _443 = (_438 * _264) - _345;
    float _444 = (_438 * _265) - _346;
    float _448 = abs(dot(vec3(_344, _345, _346), vec3(_263, _264, _265)));
    float _3245 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _450 = sqrt(_266);
    float _463 = exp2((_450 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_450 * 3.0));
    float _469 = (1.0 - _463) * ((_450 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _470 = _463 * _450;
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _808;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _533 = fma(_506, cbModelParam._m0[26u].z, fma(_502, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _498));
        float _537 = fma(_506, cbModelParam._m0[27u].z, fma(_502, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _498));
        float _541 = fma(_506, cbModelParam._m0[28u].z, fma(_502, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _498));
        float _566 = _498 + _263;
        float _567 = _502 + _264;
        float _568 = _506 + _265;
        float _578 = fma(_568, cbModelParam._m0[26u].z, fma(_567, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566)) - _533;
        float _579 = fma(_568, cbModelParam._m0[27u].z, fma(_567, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566)) - _537;
        float _580 = fma(_568, cbModelParam._m0[28u].z, fma(_567, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566)) - _541;
        float _584 = inversesqrt(dot(vec3(_578, _579, _580), vec3(_578, _579, _580)));
        float _597 = ((_584 * _578) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_533 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _598 = ((_584 * _579) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_537 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _599 = ((_584 * _580) / cbModelParam._m0[34u].z) + ((((((_541 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _609 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _616 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        vec4 _623 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_597, _598, _599), 0.0);
        float _636 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _637 = _636 * (_602.x + (-0.5));
        float _638 = _636 * (_602.y + (-0.5));
        float _639 = _636 * (_602.z + (-0.5));
        float _646 = exp2((_609.w + (-0.5)) * 20.0) * 2.0;
        float _647 = _646 * (_609.x + (-0.5));
        float _648 = _646 * (_609.y + (-0.5));
        float _649 = _646 * (_609.z + (-0.5));
        float _656 = exp2((_616.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_616.x + (-0.5));
        float _658 = _656 * (_616.y + (-0.5));
        float _659 = _656 * (_616.z + (-0.5));
        float _666 = exp2((_623.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_623.x + (-0.5));
        float _668 = _666 * (_623.y + (-0.5));
        float _669 = _666 * (_623.z + (-0.5));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _673 = _637 * 0.5;
        float _674 = _647 * 0.5;
        float _675 = _657 * 0.5;
        float _676 = dot(vec3(_673, _674, _675), vec3(_673, _674, _675));
        float _681 = (_676 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_676);
        float _690 = (dot(vec3(_263, _264, _265), vec3(_681 * _673, _681 * _674, _681 * _675)) + 1.0) * 0.5;
        float _3271 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _700 = sqrt(((_674 * _674) + (_673 * _673)) + (_675 * _675)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3282 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _702 = _701 * 2.0;
        float _706 = (1.0 - _701) / (_701 + 1.0);
        float _3293 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _716 = ((((1.0 - _707) * (_702 + 2.0)) * exp2(log2(isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * (_702 + 1.0))) + _707) * _670;
        float _717 = _638 * 0.5;
        float _718 = _648 * 0.5;
        float _719 = _658 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _733 = (dot(vec3(_263, _264, _265), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3304 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _742 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3315 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3326 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) * (_744 + 1.0))) + _749) * _671;
        float _759 = _639 * 0.5;
        float _760 = _649 * 0.5;
        float _761 = _659 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_263, _264, _265), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3337 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3348 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3359 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0))) * (_786 + 1.0))) + _791) * _672;
        _808 = _639;
        _810 = _638;
        _811 = _637;
        _812 = _649;
        _813 = _648;
        _814 = _647;
        _815 = _659;
        _816 = _658;
        _817 = _657;
        _818 = _672;
        _819 = _671;
        _820 = _670;
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0)));
        _822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
        _823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
    }
    else
    {
        _808 = _809;
        _810 = _809;
        _811 = _809;
        _812 = _809;
        _813 = _809;
        _814 = _809;
        _815 = _809;
        _816 = _809;
        _817 = _809;
        _818 = _809;
        _819 = _809;
        _820 = _809;
        _821 = 0.0;
        _822 = 0.0;
        _823 = 0.0;
    }
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _849 = fma(_506, cbModelParam._m0[30u].z, fma(_502, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _498));
        float _853 = fma(_506, cbModelParam._m0[31u].z, fma(_502, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _498));
        float _857 = fma(_506, cbModelParam._m0[32u].z, fma(_502, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _498));
        float _880 = _498 + _263;
        float _881 = _502 + _264;
        float _882 = _506 + _265;
        float _892 = fma(_882, cbModelParam._m0[30u].z, fma(_881, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _880)) - _849;
        float _893 = fma(_882, cbModelParam._m0[31u].z, fma(_881, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _880)) - _853;
        float _894 = fma(_882, cbModelParam._m0[32u].z, fma(_881, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _880)) - _857;
        float _898 = inversesqrt(dot(vec3(_892, _893, _894), vec3(_892, _893, _894)));
        float _911 = ((_898 * _892) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_849 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_898 * _893) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_853 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_898 * _894) / cbModelParam._m0[35u].z) + ((((((_857 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_911, _912, _913), 0.0);
        float _948 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _949 = _948 * (_915.x + (-0.5));
        float _950 = _948 * (_915.y + (-0.5));
        float _951 = _948 * (_915.z + (-0.5));
        float _958 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _959 = _958 * (_922.x + (-0.5));
        float _960 = _958 * (_922.y + (-0.5));
        float _961 = _958 * (_922.z + (-0.5));
        float _968 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _969 = _968 * (_929.x + (-0.5));
        float _970 = _968 * (_929.y + (-0.5));
        float _971 = _968 * (_929.z + (-0.5));
        float _978 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _979 = _978 * (_936.x + (-0.5));
        float _980 = _978 * (_936.y + (-0.5));
        float _981 = _978 * (_936.z + (-0.5));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = _949 * 0.5;
        float _986 = _959 * 0.5;
        float _987 = _969 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_263, _264, _265), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3422 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_1012 + 1.0))) + _1017) * _982;
        float _1027 = _950 * 0.5;
        float _1028 = _960 * 0.5;
        float _1029 = _970 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_263, _264, _265), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3433 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3444 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3455 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * (_1054 + 1.0))) + _1059) * _983;
        float _1069 = _951 * 0.5;
        float _1070 = _961 * 0.5;
        float _1071 = _971 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_263, _264, _265), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3466 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3477 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3488 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) * (_1096 + 1.0))) + _1101) * _984;
        _1118 = _951;
        _1119 = _950;
        _1120 = _949;
        _1121 = _961;
        _1122 = _960;
        _1123 = _959;
        _1124 = _971;
        _1125 = _970;
        _1126 = _969;
        _1127 = _984;
        _1128 = _983;
        _1129 = _982;
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
        _1131 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
    }
    else
    {
        _1118 = _809;
        _1119 = _809;
        _1120 = _809;
        _1121 = _809;
        _1122 = _809;
        _1123 = _809;
        _1124 = _809;
        _1125 = _809;
        _1126 = _809;
        _1127 = _809;
        _1128 = _809;
        _1129 = _809;
        _1130 = 0.0;
        _1131 = 0.0;
        _1132 = 0.0;
    }
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _821)) + _821;
    float _1143 = (cbModelParam._m0[1u].x * (_1131 - _822)) + _822;
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _823)) + _823;
    float _1165 = fma(_1144, cbSceneParam._m0[89u].z, fma(_1143, cbSceneParam._m0[89u].y, _1142 * cbSceneParam._m0[89u].x));
    float _1168 = fma(_1144, cbSceneParam._m0[90u].z, fma(_1143, cbSceneParam._m0[90u].y, _1142 * cbSceneParam._m0[90u].x));
    float _1171 = fma(_1144, cbSceneParam._m0[91u].z, fma(_1143, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1142));
    float _1186 = _442 * 0.5;
    float _1187 = _443 * 0.5;
    float _1188 = _444 * 0.5;
    float _1189 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1192 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1119, _1122, _1125, _1128));
    float _1195 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1229;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1202 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_808, _812, _815, _818));
        float _1206 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_810, _813, _816, _819));
        float _1210 = dot(vec4(_1186, _1187, _1188, 1.0), vec4(_811, _814, _817, _820));
        float _1217 = dot(vec4(cbModelParam._m0[39u]), vec4(_1186, _1187, _1188, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0)), isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1217) ? 0.0 : (isnan(0.0) ? _1217 : max(0.0, _1217))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1240;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1231 = dot(vec4(cbModelParam._m0[40u]), vec4(_1186, _1187, _1188, 1.0));
        _1240 = dot(vec3(isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)), isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1231) ? 0.0 : (isnan(0.0) ? _1231 : max(0.0, _1231))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1240 = 1.0;
    }
    float _1244 = (_1240 * cbModelParam._m0[1u].x) + (_1229 * (1.0 - cbModelParam._m0[1u].x));
    float _1254 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _266);
    float _1255 = isnan(_1254) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1254 : min(cbModelParam._m0[25u].z, _1254));
    float _1337;
    float _1339;
    float _1341;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1304 = fma(_506, cbModelParam._m0[13u].z, fma(_502, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _498)) + cbModelParam._m0[13u].w;
        float _1308 = fma(_506, cbModelParam._m0[14u].z, fma(_502, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _498)) + cbModelParam._m0[14u].w;
        float _1312 = fma(_506, cbModelParam._m0[15u].z, fma(_502, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _498)) + cbModelParam._m0[15u].w;
        float _1315 = fma(_444, cbModelParam._m0[13u].z, fma(_443, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _442));
        float _1318 = fma(_444, cbModelParam._m0[14u].z, fma(_443, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _442));
        float _1321 = fma(_444, cbModelParam._m0[15u].z, fma(_443, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _442));
        float _1349;
        if (_1315 > 0.0)
        {
            _1349 = abs((1.0 - _1304) / _1315);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1315 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1304 + 1.0) / _1315);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1349 = frontier_phi_16_14_ladder;
        }
        float _1557;
        if (_1318 > 0.0)
        {
            _1557 = abs((1.0 - _1308) / _1318);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1318 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1308 + 1.0) / _1318);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1557 = frontier_phi_25_21_ladder;
        }
        float _1811;
        if (_1321 > 0.0)
        {
            _1811 = abs((1.0 - _1312) / _1321);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1321 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1312 + 1.0) / _1321);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1811 = frontier_phi_37_32_ladder;
        }
        float _1813 = isnan(_1557) ? _1349 : (isnan(_1349) ? _1557 : min(_1349, _1557));
        float _1814 = isnan(_1811) ? _1813 : (isnan(_1813) ? _1811 : min(_1813, _1811));
        float _1818 = (_1814 * _1315) + _1304;
        float _1819 = (_1814 * _1318) + _1308;
        float _1820 = (_1814 * _1321) + _1312;
        float _1821 = _1814 * 9.9999997473787516355514526367188e-05;
        float _1823 = (-1.0) - _1821;
        float _1825 = _1821 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1820 > _1825) || ((_1820 < _1823) || ((_1819 > _1825) || ((_1819 < _1823) || ((_1818 < _1823) || (_1818 > _1825))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1948 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1820, cbModelParam._m0[9u].z, fma(_1819, cbModelParam._m0[9u].y, _1818 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1820, cbModelParam._m0[10u].z, fma(_1819, cbModelParam._m0[10u].y, _1818 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1820, cbModelParam._m0[11u].z, fma(_1819, cbModelParam._m0[11u].y, _1818 * cbModelParam._m0[11u].x))), _1255);
            frontier_phi_15_37_ladder = _1948.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1948.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1948.x * cbModelParam._m0[1u].y;
        }
        _1337 = frontier_phi_15_37_ladder_2;
        _1339 = frontier_phi_15_37_ladder_1;
        _1341 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1325 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_442, _443, _444), _1255);
        _1337 = _1325.x * cbModelParam._m0[1u].y;
        _1339 = _1325.y * cbModelParam._m0[1u].y;
        _1341 = _1325.z * cbModelParam._m0[1u].y;
    }
    float _1345 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _266);
    float _1346 = isnan(_1345) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1345 : min(cbModelParam._m0[25u].w, _1345));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1403 = fma(_506, cbModelParam._m0[21u].z, fma(_502, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _498)) + cbModelParam._m0[21u].w;
        float _1407 = fma(_506, cbModelParam._m0[22u].z, fma(_502, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _498)) + cbModelParam._m0[22u].w;
        float _1411 = fma(_506, cbModelParam._m0[23u].z, fma(_502, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _498)) + cbModelParam._m0[23u].w;
        float _1414 = fma(_444, cbModelParam._m0[21u].z, fma(_443, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _442));
        float _1417 = fma(_444, cbModelParam._m0[22u].z, fma(_443, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _442));
        float _1420 = fma(_444, cbModelParam._m0[23u].z, fma(_443, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _442));
        float _1562;
        if (_1414 > 0.0)
        {
            _1562 = abs((1.0 - _1403) / _1414);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1414 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1403 + 1.0) / _1414);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1562 = frontier_phi_27_23_ladder;
        }
        float _1838;
        if (_1417 > 0.0)
        {
            _1838 = abs((1.0 - _1407) / _1417);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1407 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1838 = frontier_phi_39_34_ladder;
        }
        float _2051;
        if (_1420 > 0.0)
        {
            _2051 = abs((1.0 - _1411) / _1420);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1411 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2051 = frontier_phi_48_45_ladder;
        }
        float _2053 = isnan(_1838) ? _1562 : (isnan(_1562) ? _1838 : min(_1562, _1838));
        float _2054 = isnan(_2051) ? _2053 : (isnan(_2053) ? _2051 : min(_2053, _2051));
        float _2058 = (_2054 * _1414) + _1403;
        float _2059 = (_2054 * _1417) + _1407;
        float _2060 = (_2054 * _1420) + _1411;
        float _2061 = _2054 * 9.9999997473787516355514526367188e-05;
        float _2062 = (-1.0) - _2061;
        float _2064 = _2061 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2060 > _2064) || ((_2060 < _2062) || ((_2059 > _2064) || ((_2059 < _2062) || ((_2058 < _2062) || (_2058 > _2064))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2258 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2060, cbModelParam._m0[17u].z, fma(_2059, cbModelParam._m0[17u].y, _2058 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2060, cbModelParam._m0[18u].z, fma(_2059, cbModelParam._m0[18u].y, _2058 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2060, cbModelParam._m0[19u].z, fma(_2059, cbModelParam._m0[19u].y, _2058 * cbModelParam._m0[19u].x))), _1346);
            frontier_phi_24_48_ladder = _2258.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2258.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2258.x * cbModelParam._m0[1u].z;
        }
        _1439 = frontier_phi_24_48_ladder_2;
        _1441 = frontier_phi_24_48_ladder_1;
        _1443 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_442, _443, _444), _1346);
        _1439 = _1423.x * cbModelParam._m0[1u].z;
        _1441 = _1423.y * cbModelParam._m0[1u].z;
        _1443 = _1423.z * cbModelParam._m0[1u].z;
    }
    float _1456 = (((_469 * _419) + _470) * _434) * ((cbModelParam._m0[1u].w * (_1439 - _1337)) + _1337);
    float _1458 = (((_469 * _421) + _470) * _434) * ((cbModelParam._m0[1u].w * (_1441 - _1339)) + _1339);
    float _1460 = (((_469 * _422) + _470) * _434) * ((cbModelParam._m0[1u].w * (_1443 - _1341)) + _1341);
    float _1463 = fma(_1460, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1456 * cbSceneParam._m0[89u].x));
    float _1466 = fma(_1460, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1456 * cbSceneParam._m0[90u].x));
    float _1469 = fma(_1460, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, _1456 * cbSceneParam._m0[91u].x));
    uvec4 _1479 = floatBitsToUint(cbInstanceData._m0[_393 + 5u]);
    uint _1481 = _1479.x * 14u;
    uint _1482 = _1481 + 13u;
    float _1489 = _434 + (-1.0);
    float _1494 = (cbLight._m0[_1482].x * _1489) + 1.0;
    float _1495 = (cbLight._m0[_1482].y * _1489) + 1.0;
    float _1496 = (cbLight._m0[_1482].z * _1489) + 1.0;
    float _1497 = (cbLight._m0[_1482].w * _1489) + 1.0;
    uint _1498 = _1481 + 5u;
    float _1504 = isnan(1.0) ? _1495 : (isnan(_1495) ? 1.0 : min(_1495, 1.0));
    uint _1508 = _1481 + 4u;
    float _1515 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
    uint _1519 = _1481 | 1u;
    float _1530 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_263, _264, _265));
    float _1533 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_263, _264, _265));
    float _3624 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
    float _3635 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
    float _1538 = (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.3183098733425140380859375;
    float _1540 = (isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * 0.3183098733425140380859375;
    float _1547 = ((cbLight._m0[_1498].x * _1504) * _1540) + ((cbLight._m0[_1508].x * _1515) * _1538);
    float _1548 = ((_1504 * cbLight._m0[_1498].y) * _1540) + ((_1515 * cbLight._m0[_1508].y) * _1538);
    float _1549 = ((_1504 * cbLight._m0[_1498].z) * _1540) + ((_1515 * cbLight._m0[_1508].z) * _1538);
    uvec4 _1554 = floatBitsToUint(cbLight._m0[_1481 + 12u]);
    bool _1556 = _1554.x == 0u;
    float _1567;
    float _1569;
    float _1571;
    if (_1556)
    {
        _1567 = _1547;
        _1569 = _1548;
        _1571 = _1549;
    }
    else
    {
        uint _1575 = _1481 + 6u;
        float _1591 = (dot(vec3(cbLight._m0[_1481 + 2u].xyz), vec3(_263, _264, _265)) * 0.5) + 0.5;
        float _1592 = _1591 * _1591;
        float _3646 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1594 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
        _1567 = (((cbLight._m0[_1575].x * 0.3183098733425140380859375) * _1593) * _1594) + _1547;
        _1569 = (((cbLight._m0[_1575].y * 0.3183098733425140380859375) * _1593) * _1594) + _1548;
        _1571 = (((cbLight._m0[_1575].z * 0.3183098733425140380859375) * _1593) * _1594) + _1549;
    }
    bool _1574 = _1554.y == 0u;
    float _1612;
    float _1614;
    float _1616;
    if (_1574)
    {
        _1612 = _1567;
        _1614 = _1569;
        _1616 = _1571;
    }
    else
    {
        uint _1782 = _1481 + 7u;
        float _1798 = (dot(vec3(cbLight._m0[_1481 + 3u].xyz), vec3(_263, _264, _265)) * 0.5) + 0.5;
        float _1799 = _1798 * _1798;
        float _3662 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1800 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1801 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1612 = (((cbLight._m0[_1782].x * 0.3183098733425140380859375) * _1800) * _1801) + _1567;
        _1614 = (((cbLight._m0[_1782].y * 0.3183098733425140380859375) * _1800) * _1801) + _1569;
        _1616 = (((cbLight._m0[_1782].z * 0.3183098733425140380859375) * _1800) * _1801) + _1571;
    }
    uint _1619 = _1481 + 8u;
    float _1632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1481].w)) * _266) * 0.949999988079071044921875);
    float _1633 = _1632 * _1632;
    float _1634 = cbLight._m0[_1481].x + _344;
    float _1635 = cbLight._m0[_1481].y + _345;
    float _1636 = cbLight._m0[_1481].z + _346;
    float _1640 = inversesqrt(dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636)));
    float _1641 = _1640 * _1634;
    float _1642 = _1640 * _1635;
    float _1643 = _1640 * _1636;
    float _1644 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1481].xyz));
    float _3678 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
    float _1647 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _3689 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _1648 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _1649 = dot(vec3(_263, _264, _265), vec3(_1641, _1642, _1643));
    float _3700 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1652 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _1653 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_1641, _1642, _1643));
    float _3711 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _1657 = _1633 * _1633;
    float _1661 = ((_1652 * _1652) * (_1657 + (-1.0))) + 1.0;
    float _1669 = exp2(log2(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0)))) * 5.0);
    float _1670 = 0.959999978542327880859375 - _416;
    float _1672 = 0.959999978542327880859375 - _417;
    float _1673 = 0.959999978542327880859375 - _418;
    float _1680 = 1.0 - _1633;
    float _1691 = (0.5 / (((_1648 * ((_1647 * _1680) + _1633)) + 9.9999999392252902907785028219223e-09) + (((_1648 * _1680) + _1633) * _1647))) * _1647;
    float _3722 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
    float _1693 = (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0))) * (_1657 / ((_1661 * _1661) * 3.141590118408203125));
    uint _1704 = _1481 + 9u;
    float _1715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1519].w)) * _266) * 0.949999988079071044921875);
    float _1716 = _1715 * _1715;
    float _1717 = cbLight._m0[_1519].x + _344;
    float _1718 = cbLight._m0[_1519].y + _345;
    float _1719 = cbLight._m0[_1519].z + _346;
    float _1723 = inversesqrt(dot(vec3(_1717, _1718, _1719), vec3(_1717, _1718, _1719)));
    float _1724 = _1723 * _1717;
    float _1725 = _1723 * _1718;
    float _1726 = _1723 * _1719;
    float _1727 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1519].xyz));
    float _3733 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1730 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _1731 = dot(vec3(_263, _264, _265), vec3(_1724, _1725, _1726));
    float _3744 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _1735 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1724, _1725, _1726));
    float _3755 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1739 = _1716 * _1716;
    float _1743 = ((_1734 * _1734) * (_1739 + (-1.0))) + 1.0;
    float _1750 = exp2(log2(1.0 - (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * 5.0);
    float _1757 = 1.0 - _1716;
    float _1767 = (0.5 / (((_1648 * ((_1730 * _1757) + _1716)) + 9.9999999392252902907785028219223e-09) + (((_1648 * _1757) + _1716) * _1730))) * _1730;
    float _3766 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1769 = (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * (_1739 / ((_1743 * _1743) * 3.141590118408203125));
    float _1779 = (((((_1750 * _1670) + _419) * cbLight._m0[_1704].x) * _1769) * _1504) + (((((_1669 * _1670) + _419) * cbLight._m0[_1619].x) * _1693) * _1515);
    float _1780 = (((((_1750 * _1672) + _421) * cbLight._m0[_1704].y) * _1769) * _1504) + (((((_1669 * _1672) + _421) * cbLight._m0[_1619].y) * _1693) * _1515);
    float _1781 = (((((_1750 * _1673) + _422) * cbLight._m0[_1704].z) * _1769) * _1504) + (((((_1669 * _1673) + _422) * cbLight._m0[_1619].z) * _1693) * _1515);
    float _1843;
    float _1845;
    float _1847;
    if (_1556)
    {
        _1843 = _1779;
        _1845 = _1780;
        _1847 = _1781;
    }
    else
    {
        uint _1849 = _1481 + 2u;
        uint _1853 = _1481 + 10u;
        float _1867 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1849].w)) * _266) * 0.949999988079071044921875);
        float _1868 = _1867 * _1867;
        float _1869 = cbLight._m0[_1849].x + _344;
        float _1870 = cbLight._m0[_1849].y + _345;
        float _1871 = cbLight._m0[_1849].z + _346;
        float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
        float _1876 = _1875 * _1869;
        float _1877 = _1875 * _1870;
        float _1878 = _1875 * _1871;
        float _1879 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1849].xyz));
        float _3777 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1882 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1883 = dot(vec3(_263, _264, _265), vec3(_1876, _1877, _1878));
        float _3788 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1886 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1887 = dot(vec3(cbLight._m0[_1849].xyz), vec3(_1876, _1877, _1878));
        float _3799 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1891 = _1868 * _1868;
        float _1895 = ((_1886 * _1886) * (_1891 + (-1.0))) + 1.0;
        float _1902 = exp2(log2(1.0 - (isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0)))) * 5.0);
        float _1909 = 1.0 - _1868;
        float _1919 = (0.5 / (((_1648 * ((_1882 * _1909) + _1868)) + 9.9999999392252902907785028219223e-09) + (((_1648 * _1909) + _1868) * _1882))) * _1882;
        float _3810 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1921 = (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1891 / ((_1895 * _1895) * 3.141590118408203125));
        float _1922 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
        _1843 = (((((_1902 * _1670) + _419) * cbLight._m0[_1853].x) * _1921) * _1922) + _1779;
        _1845 = (((((_1902 * _1672) + _421) * cbLight._m0[_1853].y) * _1921) * _1922) + _1780;
        _1847 = (((((_1902 * _1673) + _422) * cbLight._m0[_1853].z) * _1921) * _1922) + _1781;
    }
    float _1957;
    float _1959;
    float _1961;
    if (_1574)
    {
        _1957 = _1843;
        _1959 = _1845;
        _1961 = _1847;
    }
    else
    {
        uint _1968 = _1481 + 3u;
        uint _1972 = _1481 + 11u;
        float _1986 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1968].w)) * _266) * 0.949999988079071044921875);
        float _1987 = _1986 * _1986;
        float _1988 = cbLight._m0[_1968].x + _344;
        float _1989 = cbLight._m0[_1968].y + _345;
        float _1990 = cbLight._m0[_1968].z + _346;
        float _1994 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
        float _1995 = _1994 * _1988;
        float _1996 = _1994 * _1989;
        float _1997 = _1994 * _1990;
        float _1998 = dot(vec3(_263, _264, _265), vec3(cbLight._m0[_1968].xyz));
        float _3826 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2001 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _2002 = dot(vec3(_263, _264, _265), vec3(_1995, _1996, _1997));
        float _3837 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
        float _2005 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
        float _2006 = dot(vec3(cbLight._m0[_1968].xyz), vec3(_1995, _1996, _1997));
        float _3848 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2010 = _1987 * _1987;
        float _2014 = ((_2005 * _2005) * (_2010 + (-1.0))) + 1.0;
        float _2021 = exp2(log2(1.0 - (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) * 5.0);
        float _2028 = 1.0 - _1987;
        float _2038 = (0.5 / (((_1648 * ((_2001 * _2028) + _1987)) + 9.9999999392252902907785028219223e-09) + (((_1648 * _2028) + _1987) * _2001))) * _2001;
        float _3859 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
        float _2040 = (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_2010 / ((_2014 * _2014) * 3.141590118408203125));
        float _2041 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
        _1957 = (((((_2021 * _1670) + _419) * cbLight._m0[_1972].x) * _2040) * _2041) + _1843;
        _1959 = (((((_2021 * _1672) + _421) * cbLight._m0[_1972].y) * _2040) * _2041) + _1845;
        _1961 = (((((_2021 * _1673) + _422) * cbLight._m0[_1972].z) * _2040) * _2041) + _1847;
    }
    float _2175;
    float _2177;
    float _2179;
    float _2181;
    float _2183;
    float _2185;
    if (_1479.y == 0u)
    {
        float _2116 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2117 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2116;
        float _2118 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2116;
        float _2119 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2116;
        uvec4 _2131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2132 = _2131.x;
        uint _2143 = uint((float(_2131.y) * floor(float(uint(cbSceneParam._m0[85u].y * _353) / _2132))) + floor(float(uint(cbSceneParam._m0[85u].x * _352) / _2132)));
        float _2153 = (log2(_2119 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2154 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        uint _2157 = uint(isnan(14.0) ? _2154 : (isnan(_2154) ? 14.0 : min(_2154, 14.0)));
        uvec4 _2162 = texelFetch(g_lightClusterGridBuffer, int(((_2157 << 2u) + (_2143 << 6u)) >> 2u));
        uint _2163 = _2162.x;
        uint _2164 = _2131.z;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        if (((((1u << ((_2164 >> 4u) & 15u)) + 4294967295u) & _2163) == 0u) || ((_2164 & 240u) == 0u))
        {
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
            _2271 = 0.0;
            _2273 = 0.0;
        }
        else
        {
            float _2264;
            float _2266;
            float _2268;
            float _2270;
            float _2272;
            float _2274;
            float _2407 = 0.0;
            float _2408 = 0.0;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            uint _2413 = 0u;
            uint _2422;
            bool _2423;
            for (;;)
            {
                _2422 = texelFetch(g_lightClassification, int((((_2157 << 5u) + (_2143 << 9u)) + (_2413 << 2u)) >> 2u)).x;
                _2423 = _2422 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2423)
                {
                    frontier_phi_63_pred = _2412;
                    frontier_phi_63_pred_1 = _2411;
                    frontier_phi_63_pred_2 = _2410;
                    frontier_phi_63_pred_3 = _2409;
                    frontier_phi_63_pred_4 = _2408;
                    frontier_phi_63_pred_5 = _2407;
                }
                else
                {
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    float _2536;
                    uint _2537;
                    _2531 = _2407;
                    _2532 = _2408;
                    _2533 = _2409;
                    _2534 = _2410;
                    _2535 = _2411;
                    _2536 = _2412;
                    _2537 = _2422;
                    float _2463;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    for (;;)
                    {
                        uint _2541 = uint(findLSB(_2537)) + (_2413 << 5u);
                        uint _2538 = (_2537 + 4294967295u) & _2537;
                        uint _2543 = _2541 * 48u;
                        vec4 _2557 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2543)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2543 + 3u)).x));
                        uint _2563 = (_2541 * 48u) + 4u;
                        vec4 _2576 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2563)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2563 + 3u)).x));
                        uint _2582 = (_2541 * 48u) + 8u;
                        vec3 _2593 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2582)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2582 + 2u)).x));
                        float _2597 = _2557.x - _2117;
                        float _2598 = _2557.y - _2118;
                        float _2599 = _2557.z - _2119;
                        float _2600 = dot(vec3(_2597, _2598, _2599), vec3(_2597, _2598, _2599));
                        float _2603 = inversesqrt(_2600);
                        float _2604 = _2603 * _2597;
                        float _2605 = _2603 * _2598;
                        float _2606 = _2603 * _2599;
                        float _2607 = dot(vec3(_374, _377, _380), vec3(_2604, _2605, _2606));
                        float _2612 = 1.0 - (_2600 * _2557.w);
                        float _3885 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _2613 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                        float _2614 = sqrt(_2600) * _2576.w;
                        float _2617 = 1.39999997615814208984375 / (_2614 + 1.39999997615814208984375);
                        float _2618 = _2617 * _2617;
                        float _2621 = ((1.0 - _2618) * _2607) + _2618;
                        float _2624 = _2614 * _2614;
                        float _2628 = ((isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0))) * _2613) / ((_2624 * 0.699999988079071044921875) + 1.0);
                        float _2632 = (-0.0) - _2117;
                        float _2633 = (-0.0) - _2118;
                        float _2634 = (-0.0) - _2119;
                        float _2638 = inversesqrt(dot(vec3(_2632, _2633, _2634), vec3(_2632, _2633, _2634)));
                        float _2639 = _2638 * _2632;
                        float _2640 = _2638 * _2633;
                        float _2641 = _2638 * _2634;
                        float _2649 = exp2(log2(1.0 / ((_2624 * 3.5) + 5.0)) * 0.25);
                        float _2650 = 1.0 - _450;
                        float _2657 = sqrt(1.0 - ((1.0 - (_2650 * _2650)) * (1.0 - (_2649 * _2649))));
                        float _2658 = _2657 * _2657;
                        float _2659 = _2658 * _2658;
                        float _2660 = _2639 + _2604;
                        float _2661 = _2640 + _2605;
                        float _2662 = _2641 + _2606;
                        float _2666 = inversesqrt(dot(vec3(_2660, _2661, _2662), vec3(_2660, _2661, _2662)));
                        float _2670 = dot(vec3(_374, _377, _380), vec3(_2639, _2640, _2641));
                        float _3901 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                        float _2673 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                        float _2674 = dot(vec3(_374, _377, _380), vec3(_2666 * _2660, _2666 * _2661, _2666 * _2662));
                        float _3912 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2677 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                        float _2681 = ((_2677 * _2677) * (_2659 + (-1.0))) + 1.0;
                        float _2682 = _2617 * _2658;
                        float _2683 = _2682 * _2682;
                        float _2686 = ((1.0 - _2683) * _2607) + _2683;
                        float _3923 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
                        float _2687 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                        float _2688 = 1.0 - _2658;
                        float _2698 = (0.5 / (((_2687 * ((_2673 * _2688) + _2658)) + 9.9999999392252902907785028219223e-09) + (((_2687 * _2688) + _2658) * _2673))) * _2687;
                        float _3934 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
                        float _2709 = (((_2659 * 3.1415927410125732421875) * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) / ((_2681 * _2681) * ((_2624 * 2.1991131305694580078125) + 3.141590118408203125))) * _2613;
                        _2466 = (_2628 * _2576.x) + _2534;
                        _2467 = (_2628 * _2576.y) + _2535;
                        _2468 = (_2628 * _2576.z) + _2536;
                        _2463 = (_2709 * _2593.x) + _2531;
                        _2464 = (_2709 * _2593.y) + _2532;
                        _2465 = (_2709 * _2593.z) + _2533;
                        if (_2538 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2531 = _2463;
                            _2532 = _2464;
                            _2533 = _2465;
                            _2534 = _2466;
                            _2535 = _2467;
                            _2536 = _2468;
                            _2537 = _2538;
                        }
                    }
                    frontier_phi_63_pred = _2468;
                    frontier_phi_63_pred_1 = _2467;
                    frontier_phi_63_pred_2 = _2466;
                    frontier_phi_63_pred_3 = _2465;
                    frontier_phi_63_pred_4 = _2464;
                    frontier_phi_63_pred_5 = _2463;
                }
                _2274 = frontier_phi_63_pred;
                _2272 = frontier_phi_63_pred_1;
                _2270 = frontier_phi_63_pred_2;
                _2268 = frontier_phi_63_pred_3;
                _2266 = frontier_phi_63_pred_4;
                _2264 = frontier_phi_63_pred_5;
                uint _2414 = _2413 + 1u;
                if (_2414 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2407 = _2264;
                    _2408 = _2266;
                    _2409 = _2268;
                    _2410 = _2270;
                    _2411 = _2272;
                    _2412 = _2274;
                    _2413 = _2414;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
            _2271 = _2272;
            _2273 = _2274;
        }
        uvec4 _2277 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2278 = _2277.z;
        uint _2280 = (_2278 >> 8u) & 15u;
        float _2375;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        if (((4294967295u << _2280) & _2163) == 0u)
        {
            _2375 = _2263;
            _2377 = _2265;
            _2379 = _2267;
            _2381 = _2269;
            _2383 = _2271;
            _2385 = _2273;
        }
        else
        {
            float _2400 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
            float _2401 = _2400 * _2117;
            float _2402 = _2400 * _2118;
            float _2403 = _2400 * _2119;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2280 < ((_2278 >> 12u) & 15u))
            {
                float _2376;
                float _2378;
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2514 = _2263;
                float _2515 = _2265;
                float _2516 = _2267;
                float _2517 = _2269;
                float _2518 = _2271;
                float _2519 = _2273;
                uint _2520 = _2280;
                uint _2529;
                bool _2530;
                for (;;)
                {
                    _2529 = texelFetch(g_lightClassification, int((((_2157 << 5u) + (_2143 << 9u)) + (_2520 << 2u)) >> 2u)).x;
                    _2530 = _2529 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2530)
                    {
                        frontier_phi_69_pred = _2519;
                        frontier_phi_69_pred_1 = _2518;
                        frontier_phi_69_pred_2 = _2517;
                        frontier_phi_69_pred_3 = _2516;
                        frontier_phi_69_pred_4 = _2515;
                        frontier_phi_69_pred_5 = _2514;
                    }
                    else
                    {
                        float _2714;
                        float _2715;
                        float _2716;
                        float _2717;
                        float _2718;
                        float _2719;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _2727 = _2514;
                        float _2728 = _2515;
                        float _2729 = _2516;
                        float _2730 = _2517;
                        float _2731 = _2518;
                        float _2732 = _2519;
                        uint _2733 = _2529;
                        uint _2734;
                        vec4 _2759;
                        float _2760;
                        vec4 _2775;
                        vec3 _2787;
                        vec4 _2803;
                        vec4 _2819;
                        float _2866;
                        bool _2867;
                        for (;;)
                        {
                            uint _2744 = ((_2520 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2733));
                            _2734 = (_2733 + 4294967295u) & _2733;
                            uint _2746 = _2744 * 40u;
                            _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            _2760 = _2759.w;
                            uint _2762 = (_2744 * 40u) + 4u;
                            _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2777 = (_2744 * 40u) + 8u;
                            _2787 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 2u)).x));
                            uint _2790 = (_2744 * 40u) + 16u;
                            _2803 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2790)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2790 + 3u)).x));
                            uint _2806 = (_2744 * 40u) + 20u;
                            _2819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 3u)).x));
                            uint _2822 = (_2744 * 40u) + 24u;
                            vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2841 = (_2744 * 40u) + 28u;
                            vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            _2866 = fma(_2119, _2854.z, fma(_2118, _2854.y, _2854.x * _2117)) + _2854.w;
                            _2867 = !((fma(_2119, _2835.z, fma(_2118, _2835.y, _2835.x * _2117)) + _2835.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2867)
                            {
                                float _2894 = _2759.x - _2117;
                                float _2895 = _2759.y - _2118;
                                float _2896 = _2759.z - _2119;
                                float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                                float _2900 = inversesqrt(_2897);
                                float _2901 = _2900 * _2894;
                                float _2902 = _2900 * _2895;
                                float _2903 = _2900 * _2896;
                                float _2907 = 1.0 - (_2897 / (_2760 * _2760));
                                float _3945 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                                float _2908 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
                                float _2912 = sqrt(_2897) * _2775.w;
                                float _2914 = 1.39999997615814208984375 / (_2912 + 1.39999997615814208984375);
                                float _2915 = _2914 * _2914;
                                float _2918 = ((1.0 - _2915) * dot(vec3(_2901, _2902, _2903), vec3(_374, _377, _380))) + _2915;
                                float _2921 = _2912 * _2912;
                                float _2925 = (fma(_2119, _2803.z, fma(_2118, _2803.y, _2803.x * _2117)) + _2803.w) / _2866;
                                float _2926 = (fma(_2119, _2819.z, fma(_2118, _2819.y, _2819.x * _2117)) + _2819.w) / _2866;
                                float _2930 = 1.0 - dot(vec2(_2925, _2926), vec2(_2925, _2926));
                                float _3961 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                                float _2931 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                                float _2932 = _2931 * (((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2908) / ((_2921 * 0.699999988079071044921875) + 1.0));
                                float _2944 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                                float _2945 = 1.0 - _450;
                                float _2952 = sqrt(1.0 - ((1.0 - (_2945 * _2945)) * (1.0 - (_2944 * _2944))));
                                float _2953 = _2952 * _2952;
                                float _2954 = _2953 * _2953;
                                float _2955 = _2901 - _2401;
                                float _2956 = _2902 - _2402;
                                float _2957 = _2903 - _2403;
                                float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                                float _2965 = dot(vec3(_374, _377, _380), vec3((-0.0) - _2401, (-0.0) - _2402, (-0.0) - _2403));
                                float _3972 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2968 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                                float _2969 = dot(vec3(_374, _377, _380), vec3(_2961 * _2955, _2961 * _2956, _2961 * _2957));
                                float _3983 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2972 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                                float _2976 = ((_2972 * _2972) * (_2954 + (-1.0))) + 1.0;
                                float _2977 = _2914 * _2953;
                                float _2978 = _2977 * _2977;
                                float _2984 = ((1.0 - _2978) * dot(vec3(_374, _377, _380), vec3(_2901, _2902, _2903))) + _2978;
                                float _3994 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2985 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                                float _2986 = 1.0 - _2953;
                                float _2996 = (0.5 / (((_2985 * ((_2968 * _2986) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2985 * _2986) + _2953) * _2968))) * _2985;
                                float _4005 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _3006 = (_2931 * _2908) * (((_2954 * 3.1415927410125732421875) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) / ((_2976 * _2976) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2932 * _2775.z;
                                frontier_phi_75_pred_1 = _2932 * _2775.y;
                                frontier_phi_75_pred_2 = _2932 * _2775.x;
                                frontier_phi_75_pred_3 = _3006 * _2787.z;
                                frontier_phi_75_pred_4 = _3006 * _2787.y;
                                frontier_phi_75_pred_5 = _3006 * _2787.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3015 = frontier_phi_75_pred;
                            _3014 = frontier_phi_75_pred_1;
                            _3013 = frontier_phi_75_pred_2;
                            _3012 = frontier_phi_75_pred_3;
                            _3011 = frontier_phi_75_pred_4;
                            _3010 = frontier_phi_75_pred_5;
                            _2717 = _3013 + _2730;
                            _2718 = _3014 + _2731;
                            _2719 = _3015 + _2732;
                            _2714 = _3010 + _2727;
                            _2715 = _3011 + _2728;
                            _2716 = _3012 + _2729;
                            if (_2734 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2727 = _2714;
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2734;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2719;
                        frontier_phi_69_pred_1 = _2718;
                        frontier_phi_69_pred_2 = _2717;
                        frontier_phi_69_pred_3 = _2716;
                        frontier_phi_69_pred_4 = _2715;
                        frontier_phi_69_pred_5 = _2714;
                    }
                    _2386 = frontier_phi_69_pred;
                    _2384 = frontier_phi_69_pred_1;
                    _2382 = frontier_phi_69_pred_2;
                    _2380 = frontier_phi_69_pred_3;
                    _2378 = frontier_phi_69_pred_4;
                    _2376 = frontier_phi_69_pred_5;
                    uint _2521 = _2520 + 1u;
                    if (_2521 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2514 = _2376;
                        _2515 = _2378;
                        _2516 = _2380;
                        _2517 = _2382;
                        _2518 = _2384;
                        _2519 = _2386;
                        _2520 = _2521;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2386;
                frontier_phi_57_58_ladder_1 = _2384;
                frontier_phi_57_58_ladder_2 = _2382;
                frontier_phi_57_58_ladder_3 = _2380;
                frontier_phi_57_58_ladder_4 = _2378;
                frontier_phi_57_58_ladder_5 = _2376;
            }
            else
            {
                frontier_phi_57_58_ladder = _2273;
                frontier_phi_57_58_ladder_1 = _2271;
                frontier_phi_57_58_ladder_2 = _2269;
                frontier_phi_57_58_ladder_3 = _2267;
                frontier_phi_57_58_ladder_4 = _2265;
                frontier_phi_57_58_ladder_5 = _2263;
            }
            _2375 = frontier_phi_57_58_ladder_5;
            _2377 = frontier_phi_57_58_ladder_4;
            _2379 = frontier_phi_57_58_ladder_3;
            _2381 = frontier_phi_57_58_ladder_2;
            _2383 = frontier_phi_57_58_ladder_1;
            _2385 = frontier_phi_57_58_ladder;
        }
        float _2390 = isnan(1.0) ? _434 : (isnan(_434) ? 1.0 : min(_434, 1.0));
        _2175 = (_2390 * _2381) + _1612;
        _2177 = (_2390 * _2383) + _1614;
        _2179 = (_2390 * _2385) + _1616;
        _2181 = ((_2375 * _419) * _2390) + _1957;
        _2183 = ((_2377 * _421) * _2390) + _1959;
        _2185 = ((_2379 * _422) * _2390) + _1961;
    }
    else
    {
        _2175 = _1612;
        _2177 = _1614;
        _2179 = _1616;
        _2181 = _1957;
        _2183 = _1959;
        _2185 = _1961;
    }
    float _4021 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _4032 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _4043 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    uint _2205 = _393 + 6u;
    float _2213 = _352 / cbSceneParam._m0[86u].x;
    float _2214 = _353 / cbSceneParam._m0[86u].y;
    vec4 _2228 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2213, _2214, (log2((isnan(cbSceneParam._m0[77u].w) ? _286 : (isnan(_286) ? cbSceneParam._m0[77u].w : min(_286, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2230 = _2228.x;
    float _2231 = _2228.y;
    float _2232 = _2228.z;
    float _2233 = _2228.w;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_286 > cbSceneParam._m0[78u].w)
    {
        float _2288 = isnan(_286) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _286 : min(cbSceneParam._m0[80u].w, _286));
        float _2289 = _2288 / _286;
        float _2300 = _2289 * _337;
        float _2301 = _338 * _2289;
        float _2302 = (-0.0) - _2301;
        float _2303 = _2289 * _339;
        float _2305 = (cbSceneParam._m0[77u].w * _2302) / _2288;
        float _2306 = _2305 + cbSceneParam._m0[79u].w;
        float _2307 = cbSceneParam._m0[79u].w - _2301;
        float _2313 = sqrt(((_2300 * _2300) + (_2301 * _2301)) + (_2303 * _2303));
        float _2316 = (1.0 - (cbSceneParam._m0[77u].w / _2288)) * _2313;
        float _2321 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2323 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2476;
        if (abs((_2302 - _2305) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2476 = ((((_2306 > 0.0) ? exp2(_2321 * _2306) : (2.0 - exp2(_2323 * _2306))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2316;
        }
        else
        {
            float _2436 = 1.0 / cbSceneParam._m0[80u].x;
            float _2437 = isnan(_2307) ? _2306 : (isnan(_2306) ? _2307 : max(_2306, _2307));
            float _2438 = isnan(_2307) ? _2306 : (isnan(_2306) ? _2307 : min(_2306, _2307));
            float _2447 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : min(_2437, 0.0));
            float _2448 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : min(_2438, 0.0));
            _2476 = ((abs(_2313 / _2302) * cbSceneParam._m0[80u].y) * ((((_2447 - _2448) * 2.0) - ((exp2(_2321 * (isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0)))) - exp2(_2321 * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0))))) * _2436)) - ((exp2(_2323 * _2447) - exp2(_2323 * _2448)) * _2436))) + (_2316 * cbSceneParam._m0[80u].z);
        }
        vec4 _2478 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2213, _2214, 1.0), 0.0);
        float _2487 = exp2((_2476 * (-1.44269502162933349609375)) * (1.0 - _2478.w));
        float _2488 = log2(_2487);
        float _2504 = log2(_2233);
        _2325 = (exp2(_2504 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].x)) * _2478.x) / cbSceneParam._m0[78u].x)) + _2230;
        _2327 = (exp2(_2504 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].y)) * _2478.y) / cbSceneParam._m0[78u].y)) + _2231;
        _2329 = (exp2(_2504 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2488 * cbSceneParam._m0[78u].z)) * _2478.z) / cbSceneParam._m0[78u].z)) + _2232;
        _2331 = _2487 * _2233;
    }
    else
    {
        _2325 = _2230;
        _2327 = _2231;
        _2329 = _2232;
        _2331 = _2233;
    }
    float _2343 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2344 = _2343 == 3.0;
    float _2345 = log2(_2331);
    float _2352 = exp2(_2345 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_2175 + ((isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0))) * _434))) + ((_2181 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2353 = exp2(_2345 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_2177 + ((isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0))) * _434))) + ((_2183 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2354 = exp2(_2345 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * (_2179 + ((isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))) * _434))) + ((_2185 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _1244)) * cbPerFrame._m0[3u].x));
    float _2363 = (_2343 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2363 * (_2344 ? _2352 : (_2352 + (cbSceneParam._m0[72u].w * _2325)));
    SV_Target.y = _2363 * (_2344 ? _2353 : (_2353 + (cbSceneParam._m0[72u].w * _2327)));
    SV_Target.z = _2363 * (_2344 ? _2354 : (_2354 + (cbSceneParam._m0[72u].w * _2329)));
    SV_Target.w = cbInstanceData._m0[_2205].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2205].w;
}


