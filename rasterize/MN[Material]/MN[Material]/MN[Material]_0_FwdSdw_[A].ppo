#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MN_Material_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _858;
float _3532;
float _3533;
float _3534;
float _3535;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _237 = texture(sampler2D(MN_Material_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _246 = (_237.x * 2.0) + (-1.0);
    float _248 = (_237.y * 2.0) + (-1.0);
    float _249 = dot(vec2(_246, _248), vec2(_246, _248));
    float _3544 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _255 = sqrt(1.0 - (isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))));
    float _257 = cbMtdParam._m0[10u].y + _237.z;
    float _260 = fma(_255, _211, fma(_248, _203 * TANGENT.x, (_189 * _182) * _246));
    float _263 = fma(_255, _212, fma(_248, _203 * TANGENT.y, (_189 * _183) * _246));
    float _266 = fma(_255, _213, fma(_248, _203 * TANGENT.z, (_189 * _184) * _246));
    float _270 = inversesqrt(dot(vec3(_260, _263, _266), vec3(_260, _263, _266)));
    float _271 = _270 * _260;
    float _272 = _270 * _263;
    float _273 = _270 * _266;
    float _3555 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _274 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _3566 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3577 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3588 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3599 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _278 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
    float _294 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _335 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _345 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _335);
    float _346 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _335);
    float _347 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _335);
    float _351 = inversesqrt(dot(vec3(_345, _346, _347), vec3(_345, _346, _347)));
    float _352 = _345 * _351;
    float _353 = _346 * _351;
    float _354 = _347 * _351;
    vec4 _359 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _361 = _359.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _537 = sqrt(((_345 * _345) + (_346 * _346)) + (_347 * _347));
        float _543 = (cbMatDynParam._m0[5u].x * _537) + cbMatDynParam._m0[5u].y;
        float _3610 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
        float _544 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _548 = (cbMatDynParam._m0[5u].z * _537) + cbMatDynParam._m0[5u].w;
        float _3621 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) - _544)) + _544) < ((_361 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _373 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _374 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _394 = fma(_273, cbSceneParam._m0[5u].z, fma(_272, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _271));
    float _397 = fma(_273, cbSceneParam._m0[6u].z, fma(_272, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _271));
    float _400 = fma(_273, cbSceneParam._m0[7u].z, fma(_272, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _271));
    uint _413 = uint(roundEven(NORMAL.w)) * 13u;
    uint _415 = _413 + 9u;
    uint _416 = _415 + uint(cbMatDynParam._m0[0u].w);
    float _422 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0)))) * cbInstanceData._m0[_416].x;
    float _423 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_416].y;
    float _424 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_416].z;
    float _3632 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
    float _3643 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _427 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _428 = 1.0 - _278;
    float _429 = _425 * _428;
    float _430 = _426 * _428;
    float _431 = _427 * _428;
    float _436 = (_425 + (-0.039999999105930328369140625)) * _278;
    float _437 = (_426 + (-0.039999999105930328369140625)) * _278;
    float _438 = (_427 + (-0.039999999105930328369140625)) * _278;
    float _439 = _436 + 0.039999999105930328369140625;
    float _441 = _437 + 0.039999999105930328369140625;
    float _442 = _438 + 0.039999999105930328369140625;
    vec4 _451 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _373, cbSceneParam._m0[86u].y * _374));
    float _454 = _451.x * TEXCOORD.z;
    float _455 = dot(vec3(_271, _272, _273), vec3(_352, _353, _354));
    float _458 = _455 * 2.0;
    float _462 = (_458 * _271) - _352;
    float _463 = (_458 * _272) - _353;
    float _464 = (_458 * _273) - _354;
    float _468 = abs(dot(vec3(_352, _353, _354), vec3(_271, _272, _273)));
    float _3665 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _470 = sqrt(_274);
    float _483 = exp2((_470 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_470 * 3.0));
    float _489 = (1.0 - _483) * ((_470 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _490 = _483 * _470;
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _857;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _582 = fma(_526, cbModelParam._m0[26u].z, fma(_522, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _518));
        float _586 = fma(_526, cbModelParam._m0[27u].z, fma(_522, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _518));
        float _590 = fma(_526, cbModelParam._m0[28u].z, fma(_522, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _518));
        float _615 = _518 + _271;
        float _616 = _522 + _272;
        float _617 = _526 + _273;
        float _627 = fma(_617, cbModelParam._m0[26u].z, fma(_616, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615)) - _582;
        float _628 = fma(_617, cbModelParam._m0[27u].z, fma(_616, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615)) - _586;
        float _629 = fma(_617, cbModelParam._m0[28u].z, fma(_616, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615)) - _590;
        float _633 = inversesqrt(dot(vec3(_627, _628, _629), vec3(_627, _628, _629)));
        float _646 = ((_633 * _627) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_582 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_633 * _628) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_586 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _648 = ((_633 * _629) / cbModelParam._m0[34u].z) + ((((((_590 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_646, _647, _648), 0.0);
        float _685 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _686 = _685 * (_651.x + (-0.5));
        float _687 = _685 * (_651.y + (-0.5));
        float _688 = _685 * (_651.z + (-0.5));
        float _695 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_658.x + (-0.5));
        float _697 = _695 * (_658.y + (-0.5));
        float _698 = _695 * (_658.z + (-0.5));
        float _705 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_665.x + (-0.5));
        float _707 = _705 * (_665.y + (-0.5));
        float _708 = _705 * (_665.z + (-0.5));
        float _715 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_672.x + (-0.5));
        float _717 = _715 * (_672.y + (-0.5));
        float _718 = _715 * (_672.z + (-0.5));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _722 = _686 * 0.5;
        float _723 = _696 * 0.5;
        float _724 = _706 * 0.5;
        float _725 = dot(vec3(_722, _723, _724), vec3(_722, _723, _724));
        float _730 = (_725 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_725);
        float _739 = (dot(vec3(_271, _272, _273), vec3(_730 * _722, _730 * _723, _730 * _724)) + 1.0) * 0.5;
        float _3691 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _749 = sqrt(((_723 * _723) + (_722 * _722)) + (_724 * _724)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3702 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
        float _751 = _750 * 2.0;
        float _755 = (1.0 - _750) / (_750 + 1.0);
        float _3713 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _765 = ((((1.0 - _756) * (_751 + 2.0)) * exp2(log2(isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (_751 + 1.0))) + _756) * _719;
        float _766 = _687 * 0.5;
        float _767 = _697 * 0.5;
        float _768 = _707 * 0.5;
        float _769 = dot(vec3(_766, _767, _768), vec3(_766, _767, _768));
        float _774 = (_769 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_769);
        float _782 = (dot(vec3(_271, _272, _273), vec3(_774 * _766, _774 * _767, _774 * _768)) + 1.0) * 0.5;
        float _3724 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _791 = sqrt(((_767 * _767) + (_766 * _766)) + (_768 * _768)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3735 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
        float _793 = _792 * 2.0;
        float _797 = (1.0 - _792) / (_792 + 1.0);
        float _3746 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _807 = ((((1.0 - _798) * (_793 + 2.0)) * exp2(log2(isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * (_793 + 1.0))) + _798) * _720;
        float _808 = _688 * 0.5;
        float _809 = _698 * 0.5;
        float _810 = _708 * 0.5;
        float _811 = dot(vec3(_808, _809, _810), vec3(_808, _809, _810));
        float _816 = (_811 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_811);
        float _824 = (dot(vec3(_271, _272, _273), vec3(_816 * _808, _816 * _809, _816 * _810)) + 1.0) * 0.5;
        float _3757 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _833 = sqrt(((_809 * _809) + (_808 * _808)) + (_810 * _810)) / (_721 + 9.9999997473787516355514526367188e-06);
        float _3768 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _834 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
        float _835 = _834 * 2.0;
        float _839 = (1.0 - _834) / (_834 + 1.0);
        float _3779 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _849 = ((((1.0 - _840) * (_835 + 2.0)) * exp2(log2(isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * (_835 + 1.0))) + _840) * _721;
        _857 = _688;
        _859 = _687;
        _860 = _686;
        _861 = _698;
        _862 = _697;
        _863 = _696;
        _864 = _708;
        _865 = _707;
        _866 = _706;
        _867 = _721;
        _868 = _720;
        _869 = _719;
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0)));
        _872 = cbModelParam._m0[36u].z * (isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0)));
    }
    else
    {
        _857 = _858;
        _859 = _858;
        _860 = _858;
        _861 = _858;
        _862 = _858;
        _863 = _858;
        _864 = _858;
        _865 = _858;
        _866 = _858;
        _867 = _858;
        _868 = _858;
        _869 = _858;
        _870 = 0.0;
        _871 = 0.0;
        _872 = 0.0;
    }
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = fma(_526, cbModelParam._m0[30u].z, fma(_522, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _518));
        float _905 = fma(_526, cbModelParam._m0[31u].z, fma(_522, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _518));
        float _909 = fma(_526, cbModelParam._m0[32u].z, fma(_522, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _518));
        float _932 = _518 + _271;
        float _933 = _522 + _272;
        float _934 = _526 + _273;
        float _944 = fma(_934, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932)) - _901;
        float _945 = fma(_934, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932)) - _905;
        float _946 = fma(_934, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932)) - _909;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_901 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_905 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[35u].z) + ((((((_909 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1000 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_967.x + (-0.5));
        float _1002 = _1000 * (_967.y + (-0.5));
        float _1003 = _1000 * (_967.z + (-0.5));
        float _1010 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_974.x + (-0.5));
        float _1012 = _1010 * (_974.y + (-0.5));
        float _1013 = _1010 * (_974.z + (-0.5));
        float _1020 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_981.x + (-0.5));
        float _1022 = _1020 * (_981.y + (-0.5));
        float _1023 = _1020 * (_981.z + (-0.5));
        float _1030 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_988.x + (-0.5));
        float _1032 = _1030 * (_988.y + (-0.5));
        float _1033 = _1030 * (_988.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_271, _272, _273), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3842 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1064 + 1.0))) + _1069) * _1034;
        float _1079 = _1002 * 0.5;
        float _1080 = _1012 * 0.5;
        float _1081 = _1022 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_271, _272, _273), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3853 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3864 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3875 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0))) * (_1106 + 1.0))) + _1111) * _1035;
        float _1121 = _1003 * 0.5;
        float _1122 = _1013 * 0.5;
        float _1123 = _1023 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_271, _272, _273), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3886 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3897 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3908 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1148 + 1.0))) + _1153) * _1036;
        _1170 = _1003;
        _1171 = _1002;
        _1172 = _1001;
        _1173 = _1013;
        _1174 = _1012;
        _1175 = _1011;
        _1176 = _1023;
        _1177 = _1022;
        _1178 = _1021;
        _1179 = _1036;
        _1180 = _1035;
        _1181 = _1034;
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _858;
        _1171 = _858;
        _1172 = _858;
        _1173 = _858;
        _1174 = _858;
        _1175 = _858;
        _1176 = _858;
        _1177 = _858;
        _1178 = _858;
        _1179 = _858;
        _1180 = _858;
        _1181 = _858;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _870)) + _870;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _871)) + _871;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _872)) + _872;
    float _1217 = fma(_1196, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1194 * cbSceneParam._m0[89u].x));
    float _1220 = fma(_1196, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1194 * cbSceneParam._m0[90u].x));
    float _1223 = fma(_1196, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1194));
    float _1238 = _462 * 0.5;
    float _1239 = _463 * 0.5;
    float _1240 = _464 * 0.5;
    float _1241 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1244 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1247 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1281;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1254 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_857, _861, _864, _867));
        float _1258 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_859, _862, _865, _868));
        float _1262 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_860, _863, _866, _869));
        float _1269 = dot(vec4(cbModelParam._m0[39u]), vec4(_1238, _1239, _1240, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1292;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1283 = dot(vec4(cbModelParam._m0[40u]), vec4(_1238, _1239, _1240, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1296 = (_1292 * cbModelParam._m0[1u].x) + (_1281 * (1.0 - cbModelParam._m0[1u].x));
    float _1306 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _274);
    float _1307 = isnan(_1306) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1306 : min(cbModelParam._m0[25u].z, _1306));
    float _1389;
    float _1391;
    float _1393;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1356 = fma(_526, cbModelParam._m0[13u].z, fma(_522, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _518)) + cbModelParam._m0[13u].w;
        float _1360 = fma(_526, cbModelParam._m0[14u].z, fma(_522, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _518)) + cbModelParam._m0[14u].w;
        float _1364 = fma(_526, cbModelParam._m0[15u].z, fma(_522, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _518)) + cbModelParam._m0[15u].w;
        float _1367 = fma(_464, cbModelParam._m0[13u].z, fma(_463, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _462));
        float _1370 = fma(_464, cbModelParam._m0[14u].z, fma(_463, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _462));
        float _1373 = fma(_464, cbModelParam._m0[15u].z, fma(_463, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _462));
        float _1401;
        if (_1367 > 0.0)
        {
            _1401 = abs((1.0 - _1356) / _1367);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1356 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1401 = frontier_phi_19_17_ladder;
        }
        float _1577;
        if (_1370 > 0.0)
        {
            _1577 = abs((1.0 - _1360) / _1370);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1360 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1577 = frontier_phi_28_24_ladder;
        }
        float _1873;
        if (_1373 > 0.0)
        {
            _1873 = abs((1.0 - _1364) / _1373);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1364 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1873 = frontier_phi_40_35_ladder;
        }
        float _1875 = isnan(_1577) ? _1401 : (isnan(_1401) ? _1577 : min(_1401, _1577));
        float _1876 = isnan(_1873) ? _1875 : (isnan(_1875) ? _1873 : min(_1875, _1873));
        float _1880 = (_1876 * _1367) + _1356;
        float _1881 = (_1876 * _1370) + _1360;
        float _1882 = (_1876 * _1373) + _1364;
        float _1883 = _1876 * 9.9999997473787516355514526367188e-05;
        float _1885 = (-1.0) - _1883;
        float _1887 = _1883 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1882 > _1887) || ((_1882 < _1885) || ((_1881 > _1887) || ((_1881 < _1885) || ((_1880 < _1885) || (_1880 > _1887))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1882, cbModelParam._m0[9u].z, fma(_1881, cbModelParam._m0[9u].y, _1880 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1882, cbModelParam._m0[10u].z, fma(_1881, cbModelParam._m0[10u].y, _1880 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1882, cbModelParam._m0[11u].z, fma(_1881, cbModelParam._m0[11u].y, _1880 * cbModelParam._m0[11u].x))), _1307);
            frontier_phi_18_40_ladder = _2027.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2027.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2027.x * cbModelParam._m0[1u].y;
        }
        _1389 = frontier_phi_18_40_ladder_2;
        _1391 = frontier_phi_18_40_ladder_1;
        _1393 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_462, _463, _464), _1307);
        _1389 = _1377.x * cbModelParam._m0[1u].y;
        _1391 = _1377.y * cbModelParam._m0[1u].y;
        _1393 = _1377.z * cbModelParam._m0[1u].y;
    }
    float _1397 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _274);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1397 : min(cbModelParam._m0[25u].w, _1397));
    float _1491;
    float _1493;
    float _1495;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1455 = fma(_526, cbModelParam._m0[21u].z, fma(_522, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _518)) + cbModelParam._m0[21u].w;
        float _1459 = fma(_526, cbModelParam._m0[22u].z, fma(_522, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _518)) + cbModelParam._m0[22u].w;
        float _1463 = fma(_526, cbModelParam._m0[23u].z, fma(_522, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _518)) + cbModelParam._m0[23u].w;
        float _1466 = fma(_464, cbModelParam._m0[21u].z, fma(_463, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _462));
        float _1469 = fma(_464, cbModelParam._m0[22u].z, fma(_463, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _462));
        float _1472 = fma(_464, cbModelParam._m0[23u].z, fma(_463, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _462));
        float _1582;
        if (_1466 > 0.0)
        {
            _1582 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1582 = frontier_phi_30_26_ladder;
        }
        float _1900;
        if (_1469 > 0.0)
        {
            _1900 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1900 = frontier_phi_42_37_ladder;
        }
        float _2238;
        if (_1472 > 0.0)
        {
            _2238 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2238 = frontier_phi_52_49_ladder;
        }
        float _2240 = isnan(_1900) ? _1582 : (isnan(_1582) ? _1900 : min(_1582, _1900));
        float _2241 = isnan(_2238) ? _2240 : (isnan(_2240) ? _2238 : min(_2240, _2238));
        float _2245 = (_2241 * _1466) + _1455;
        float _2246 = (_2241 * _1469) + _1459;
        float _2247 = (_2241 * _1472) + _1463;
        float _2248 = _2241 * 9.9999997473787516355514526367188e-05;
        float _2249 = (-1.0) - _2248;
        float _2251 = _2248 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2247 > _2251) || ((_2247 < _2249) || ((_2246 > _2251) || ((_2246 < _2249) || ((_2245 < _2249) || (_2245 > _2251))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2247, cbModelParam._m0[17u].z, fma(_2246, cbModelParam._m0[17u].y, _2245 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2247, cbModelParam._m0[18u].z, fma(_2246, cbModelParam._m0[18u].y, _2245 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2247, cbModelParam._m0[19u].z, fma(_2246, cbModelParam._m0[19u].y, _2245 * cbModelParam._m0[19u].x))), _1398);
            frontier_phi_27_52_ladder = _2369.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2369.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2369.x * cbModelParam._m0[1u].z;
        }
        _1491 = frontier_phi_27_52_ladder_2;
        _1493 = frontier_phi_27_52_ladder_1;
        _1495 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_462, _463, _464), _1398);
        _1491 = _1475.x * cbModelParam._m0[1u].z;
        _1493 = _1475.y * cbModelParam._m0[1u].z;
        _1495 = _1475.z * cbModelParam._m0[1u].z;
    }
    float _1508 = (((_489 * _439) + _490) * _454) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_489 * _441) + _490) * _454) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_489 * _442) + _490) * _454) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1515 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, _1508 * cbSceneParam._m0[91u].x));
    float _1556 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1560 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1569 = _1556 / _1568;
    float _1570 = _1560 / _1568;
    float _1571 = _1564 / _1568;
    float _1718;
    float _1719;
    float _1720;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1598 = ((uint(_1571 > cbSceneParam._m0[59u].y) + uint(_1571 > cbSceneParam._m0[59u].x)) + uint(_1571 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1599 = _1598 + 43u;
        uint _1607 = _1598 + 44u;
        uint _1615 = _1598 + 45u;
        uint _1623 = _1598 + 46u;
        float _1634 = fma(_1568, cbSceneParam._m0[_1599].w, fma(_1564, cbSceneParam._m0[_1599].z, fma(_1560, cbSceneParam._m0[_1599].y, _1556 * cbSceneParam._m0[_1599].x)));
        float _1638 = fma(_1568, cbSceneParam._m0[_1607].w, fma(_1564, cbSceneParam._m0[_1607].z, fma(_1560, cbSceneParam._m0[_1607].y, _1556 * cbSceneParam._m0[_1607].x)));
        float _1646 = fma(_1568, cbSceneParam._m0[_1623].w, fma(_1564, cbSceneParam._m0[_1623].z, fma(_1560, cbSceneParam._m0[_1623].y, _1556 * cbSceneParam._m0[_1623].x)));
        float _1651 = cbSceneParam._m0[33u].z * _1646;
        float _1653 = cbSceneParam._m0[33u].w * _1646;
        float _1656 = fma(_1568, cbSceneParam._m0[_1615].w, fma(_1564, cbSceneParam._m0[_1615].z, fma(_1560, cbSceneParam._m0[_1615].y, _1556 * cbSceneParam._m0[_1615].x))) / _1646;
        float _1704 = (cbSceneParam._m0[33u].x - sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571))) * cbSceneParam._m0[33u].y;
        float _4034 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1711 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 + _1634) / _1646, (_1653 + _1638) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1653 + _1634) / _1646, (_1638 - _1651) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1634 - _1651) / _1646, (_1638 - _1653) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1634 - _1653) / _1646, (_1651 + _1638) / _1646), _1656), 0.0)).x), vec4(0.25)));
        _1718 = 1.0 - (_1711 * cbSceneParam._m0[34u].x);
        _1719 = 1.0 - (_1711 * cbSceneParam._m0[34u].y);
        _1720 = 1.0 - (_1711 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1718 = 1.0;
        _1719 = 1.0;
        _1720 = 1.0;
    }
    float _1784;
    float _1786;
    float _1788;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1772 = fma(_1568, cbSceneParam._m0[63u].w, fma(_1564, cbSceneParam._m0[63u].z, fma(_1560, cbSceneParam._m0[63u].y, _1556 * cbSceneParam._m0[63u].x)));
        float _1773 = fma(_1568, cbSceneParam._m0[60u].w, fma(_1564, cbSceneParam._m0[60u].z, fma(_1560, cbSceneParam._m0[60u].y, _1556 * cbSceneParam._m0[60u].x))) / _1772;
        float _1774 = fma(_1568, cbSceneParam._m0[61u].w, fma(_1564, cbSceneParam._m0[61u].z, fma(_1560, cbSceneParam._m0[61u].y, _1556 * cbSceneParam._m0[61u].x))) / _1772;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1773 >= cbSceneParam._m0[64u].x) && (_1774 >= cbSceneParam._m0[64u].y)) && (_1773 <= cbSceneParam._m0[64u].z)) && (_1774 <= cbSceneParam._m0[64u].w))
        {
            float _1913 = fma(_1568, cbSceneParam._m0[62u].w, fma(_1564, cbSceneParam._m0[62u].z, fma(_1560, cbSceneParam._m0[62u].y, _1556 * cbSceneParam._m0[62u].x))) / _1772;
            float _1917 = isnan(cbSceneParam._m0[41u].w) ? _1913 : (isnan(_1913) ? cbSceneParam._m0[41u].w : max(_1913, cbSceneParam._m0[41u].w));
            float _1960 = (cbSceneParam._m0[33u].x - sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571))) * cbSceneParam._m0[33u].y;
            float _4050 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
            float _1967 = (isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1773, cbSceneParam._m0[33u].w + _1774), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1773, _1774 - cbSceneParam._m0[33u].z), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1773 - cbSceneParam._m0[33u].z, _1774 - cbSceneParam._m0[33u].w), _1917), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1773 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1774), _1917), 0.0)).x), vec4(0.25)));
            float _1971 = 1.0 - (_1967 * cbSceneParam._m0[34u].x);
            float _1972 = 1.0 - (_1967 * cbSceneParam._m0[34u].y);
            float _1973 = 1.0 - (_1967 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1972) ? _1719 : (isnan(_1719) ? _1972 : min(_1719, _1972));
            frontier_phi_39_38_ladder_1 = isnan(_1971) ? _1718 : (isnan(_1718) ? _1971 : min(_1718, _1971));
            frontier_phi_39_38_ladder_2 = isnan(_1973) ? _1720 : (isnan(_1720) ? _1973 : min(_1720, _1973));
        }
        else
        {
            frontier_phi_39_38_ladder = _1719;
            frontier_phi_39_38_ladder_1 = _1718;
            frontier_phi_39_38_ladder_2 = _1720;
        }
        _1784 = frontier_phi_39_38_ladder_1;
        _1786 = frontier_phi_39_38_ladder;
        _1788 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1784 = _1718;
        _1786 = _1719;
        _1788 = _1720;
    }
    uvec4 _1793 = floatBitsToUint(cbInstanceData._m0[_413 + 5u]);
    uint _1795 = _1793.x * 14u;
    uint _1796 = _1795 + 13u;
    float _1803 = _454 + (-1.0);
    float _1808 = (cbLight._m0[_1796].x * _1803) + 1.0;
    float _1809 = (cbLight._m0[_1796].y * _1803) + 1.0;
    float _1810 = (cbLight._m0[_1796].z * _1803) + 1.0;
    float _1811 = (cbLight._m0[_1796].w * _1803) + 1.0;
    uint _1812 = _1795 + 5u;
    float _1818 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1822 = _1795 + 4u;
    float _1832 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
    uint _1836 = _1795 | 1u;
    float _1847 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_271, _272, _273));
    float _1850 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_271, _272, _273));
    float _4086 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _4097 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1855 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * 0.3183098733425140380859375;
    float _1857 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * 0.3183098733425140380859375;
    float _1864 = ((cbLight._m0[_1812].x * _1818) * _1857) + (((cbLight._m0[_1822].x * _1784) * _1832) * _1855);
    float _1865 = ((_1818 * cbLight._m0[_1812].y) * _1857) + (((cbLight._m0[_1822].y * _1786) * _1832) * _1855);
    float _1866 = ((_1818 * cbLight._m0[_1812].z) * _1857) + (((cbLight._m0[_1822].z * _1788) * _1832) * _1855);
    uvec4 _1870 = floatBitsToUint(cbLight._m0[_1795 + 12u]);
    bool _1872 = _1870.x == 0u;
    float _1974;
    float _1976;
    float _1978;
    if (_1872)
    {
        _1974 = _1864;
        _1976 = _1865;
        _1978 = _1866;
    }
    else
    {
        uint _1982 = _1795 + 6u;
        float _1998 = (dot(vec3(cbLight._m0[_1795 + 2u].xyz), vec3(_271, _272, _273)) * 0.5) + 0.5;
        float _1999 = _1998 * _1998;
        float _4108 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _2001 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _1974 = (((cbLight._m0[_1982].x * 0.3183098733425140380859375) * _2000) * _2001) + _1864;
        _1976 = (((cbLight._m0[_1982].y * 0.3183098733425140380859375) * _2000) * _2001) + _1865;
        _1978 = (((cbLight._m0[_1982].z * 0.3183098733425140380859375) * _2000) * _2001) + _1866;
    }
    bool _1981 = _1870.y == 0u;
    float _2036;
    float _2038;
    float _2040;
    if (_1981)
    {
        _2036 = _1974;
        _2038 = _1976;
        _2040 = _1978;
    }
    else
    {
        uint _2209 = _1795 + 7u;
        float _2225 = (dot(vec3(cbLight._m0[_1795 + 3u].xyz), vec3(_271, _272, _273)) * 0.5) + 0.5;
        float _2226 = _2225 * _2225;
        float _4124 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2227 = isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0));
        float _2228 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2036 = (((cbLight._m0[_2209].x * 0.3183098733425140380859375) * _2227) * _2228) + _1974;
        _2038 = (((cbLight._m0[_2209].y * 0.3183098733425140380859375) * _2227) * _2228) + _1976;
        _2040 = (((cbLight._m0[_2209].z * 0.3183098733425140380859375) * _2227) * _2228) + _1978;
    }
    uint _2043 = _1795 + 8u;
    float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _274) * 0.949999988079071044921875);
    float _2057 = _2056 * _2056;
    float _2058 = cbLight._m0[_1795].x + _352;
    float _2059 = cbLight._m0[_1795].y + _353;
    float _2060 = cbLight._m0[_1795].z + _354;
    float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
    float _2065 = _2064 * _2058;
    float _2066 = _2064 * _2059;
    float _2067 = _2064 * _2060;
    float _2068 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1795].xyz));
    float _4140 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _2072 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _2073 = dot(vec3(_271, _272, _273), vec3(_2065, _2066, _2067));
    float _4162 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_2065, _2066, _2067));
    float _4173 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2057 * _2057;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2093 = exp2(log2(1.0 - (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)))) * 5.0);
    float _2094 = 0.959999978542327880859375 - _436;
    float _2096 = 0.959999978542327880859375 - _437;
    float _2097 = 0.959999978542327880859375 - _438;
    float _2104 = 1.0 - _2057;
    float _2115 = (0.5 / (((_2072 * ((_2071 * _2104) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2104) + _2057) * _2071))) * _2071;
    float _4184 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2117 = (isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    uint _2131 = _1795 + 9u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1836].w)) * _274) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_1836].x + _352;
    float _2145 = cbLight._m0[_1836].y + _353;
    float _2146 = cbLight._m0[_1836].z + _354;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_1836].xyz));
    float _4195 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _2158 = dot(vec3(_271, _272, _273), vec3(_2151, _2152, _2153));
    float _4206 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1836].xyz), vec3(_2151, _2152, _2153));
    float _4217 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2143 * _2143;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2177 = exp2(log2(1.0 - (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0)))) * 5.0);
    float _2184 = 1.0 - _2143;
    float _2194 = (0.5 / (((_2072 * ((_2157 * _2184) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2184) + _2143) * _2157))) * _2157;
    float _4228 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2196 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    float _2206 = (((((_2177 * _2094) + _439) * cbLight._m0[_2131].x) * _2196) * _1818) + ((((cbLight._m0[_2043].x * _1784) * ((_2093 * _2094) + _439)) * _2117) * _1832);
    float _2207 = (((((_2177 * _2096) + _441) * cbLight._m0[_2131].y) * _2196) * _1818) + ((((cbLight._m0[_2043].y * _1786) * ((_2093 * _2096) + _441)) * _2117) * _1832);
    float _2208 = (((((_2177 * _2097) + _442) * cbLight._m0[_2131].z) * _2196) * _1818) + ((((cbLight._m0[_2043].z * _1788) * ((_2093 * _2097) + _442)) * _2117) * _1832);
    float _2264;
    float _2266;
    float _2268;
    if (_1872)
    {
        _2264 = _2206;
        _2266 = _2207;
        _2268 = _2208;
    }
    else
    {
        uint _2270 = _1795 + 2u;
        uint _2274 = _1795 + 10u;
        float _2288 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _274) * 0.949999988079071044921875);
        float _2289 = _2288 * _2288;
        float _2290 = cbLight._m0[_2270].x + _352;
        float _2291 = cbLight._m0[_2270].y + _353;
        float _2292 = cbLight._m0[_2270].z + _354;
        float _2296 = inversesqrt(dot(vec3(_2290, _2291, _2292), vec3(_2290, _2291, _2292)));
        float _2297 = _2296 * _2290;
        float _2298 = _2296 * _2291;
        float _2299 = _2296 * _2292;
        float _2300 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_2270].xyz));
        float _4239 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
        float _2303 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2304 = dot(vec3(_271, _272, _273), vec3(_2297, _2298, _2299));
        float _4250 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2307 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _2308 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2297, _2298, _2299));
        float _4261 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
        float _2312 = _2289 * _2289;
        float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
        float _2323 = exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0);
        float _2330 = 1.0 - _2289;
        float _2340 = (0.5 / (((_2072 * ((_2303 * _2330) + _2289)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2330) + _2289) * _2303))) * _2303;
        float _4272 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2342 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
        float _2343 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
        _2264 = (((((_2323 * _2094) + _439) * cbLight._m0[_2274].x) * _2342) * _2343) + _2206;
        _2266 = (((((_2323 * _2096) + _441) * cbLight._m0[_2274].y) * _2342) * _2343) + _2207;
        _2268 = (((((_2323 * _2097) + _442) * cbLight._m0[_2274].z) * _2342) * _2343) + _2208;
    }
    float _2374;
    float _2376;
    float _2378;
    if (_1981)
    {
        _2374 = _2264;
        _2376 = _2266;
        _2378 = _2268;
    }
    else
    {
        uint _2385 = _1795 + 3u;
        uint _2389 = _1795 + 11u;
        float _2403 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _274) * 0.949999988079071044921875);
        float _2404 = _2403 * _2403;
        float _2405 = cbLight._m0[_2385].x + _352;
        float _2406 = cbLight._m0[_2385].y + _353;
        float _2407 = cbLight._m0[_2385].z + _354;
        float _2411 = inversesqrt(dot(vec3(_2405, _2406, _2407), vec3(_2405, _2406, _2407)));
        float _2412 = _2411 * _2405;
        float _2413 = _2411 * _2406;
        float _2414 = _2411 * _2407;
        float _2415 = dot(vec3(_271, _272, _273), vec3(cbLight._m0[_2385].xyz));
        float _4288 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2418 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _2419 = dot(vec3(_271, _272, _273), vec3(_2412, _2413, _2414));
        float _4299 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
        float _2422 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _2423 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2412, _2413, _2414));
        float _4310 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2427 = _2404 * _2404;
        float _2431 = ((_2422 * _2422) * (_2427 + (-1.0))) + 1.0;
        float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0);
        float _2445 = 1.0 - _2404;
        float _2455 = (0.5 / (((_2072 * ((_2418 * _2445) + _2404)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2445) + _2404) * _2418))) * _2418;
        float _4321 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2457 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2427 / ((_2431 * _2431) * 3.141590118408203125));
        float _2458 = isnan(1.0) ? _1811 : (isnan(_1811) ? 1.0 : min(_1811, 1.0));
        _2374 = (((((_2438 * _2094) + _439) * cbLight._m0[_2389].x) * _2457) * _2458) + _2264;
        _2376 = (((((_2438 * _2096) + _441) * cbLight._m0[_2389].y) * _2457) * _2458) + _2266;
        _2378 = (((((_2438 * _2097) + _442) * cbLight._m0[_2389].z) * _2457) * _2458) + _2268;
    }
    float _2523;
    float _2525;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_1793.y == 0u)
    {
        uvec4 _2479 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2480 = _2479.x;
        uint _2491 = uint((float(_2479.y) * floor(float(uint(cbSceneParam._m0[85u].y * _374) / _2480))) + floor(float(uint(cbSceneParam._m0[85u].x * _373) / _2480)));
        float _2501 = (log2(_1571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2502 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        uint _2505 = uint(isnan(14.0) ? _2502 : (isnan(_2502) ? 14.0 : min(_2502, 14.0)));
        uvec4 _2510 = texelFetch(g_lightClusterGridBuffer, int(((_2505 << 2u) + (_2491 << 6u)) >> 2u));
        uint _2511 = _2510.x;
        uint _2512 = _2479.z;
        float _2590;
        float _2592;
        float _2594;
        float _2596;
        float _2598;
        float _2600;
        if (((((1u << ((_2512 >> 4u) & 15u)) + 4294967295u) & _2511) == 0u) || ((_2512 & 240u) == 0u))
        {
            _2590 = 0.0;
            _2592 = 0.0;
            _2594 = 0.0;
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
        }
        else
        {
            float _2591;
            float _2593;
            float _2595;
            float _2597;
            float _2599;
            float _2601;
            float _2742 = 0.0;
            float _2743 = 0.0;
            float _2744 = 0.0;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            uint _2748 = 0u;
            uint _2757;
            bool _2758;
            for (;;)
            {
                _2757 = texelFetch(g_lightClassification, int((((_2505 << 5u) + (_2491 << 9u)) + (_2748 << 2u)) >> 2u)).x;
                _2758 = _2757 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2758)
                {
                    frontier_phi_73_pred = _2747;
                    frontier_phi_73_pred_1 = _2746;
                    frontier_phi_73_pred_2 = _2745;
                    frontier_phi_73_pred_3 = _2744;
                    frontier_phi_73_pred_4 = _2743;
                    frontier_phi_73_pred_5 = _2742;
                }
                else
                {
                    float _2887;
                    float _2888;
                    float _2889;
                    float _2890;
                    float _2891;
                    float _2892;
                    uint _2893;
                    _2887 = _2742;
                    _2888 = _2743;
                    _2889 = _2744;
                    _2890 = _2745;
                    _2891 = _2746;
                    _2892 = _2747;
                    _2893 = _2757;
                    float _2814;
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    for (;;)
                    {
                        uint _2897 = uint(findLSB(_2893)) + (_2748 << 5u);
                        uint _2894 = (_2893 + 4294967295u) & _2893;
                        uint _2899 = _2897 * 48u;
                        vec4 _2913 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 3u)).x));
                        uint _2919 = (_2897 * 48u) + 4u;
                        vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2919)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2919 + 3u)).x));
                        uint _2938 = (_2897 * 48u) + 8u;
                        vec3 _2949 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2938)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2938 + 2u)).x));
                        float _2953 = _2913.x - _1569;
                        float _2954 = _2913.y - _1570;
                        float _2955 = _2913.z - _1571;
                        float _2956 = dot(vec3(_2953, _2954, _2955), vec3(_2953, _2954, _2955));
                        float _2959 = inversesqrt(_2956);
                        float _2960 = _2959 * _2953;
                        float _2961 = _2959 * _2954;
                        float _2962 = _2959 * _2955;
                        float _2963 = dot(vec3(_394, _397, _400), vec3(_2960, _2961, _2962));
                        float _2968 = 1.0 - (_2956 * _2913.w);
                        float _4347 = isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0));
                        float _2969 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
                        float _2970 = sqrt(_2956) * _2932.w;
                        float _2973 = 1.39999997615814208984375 / (_2970 + 1.39999997615814208984375);
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2963) + _2974;
                        float _2980 = _2970 * _2970;
                        float _2984 = ((isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0))) * _2969) / ((_2980 * 0.699999988079071044921875) + 1.0);
                        float _2988 = (-0.0) - _1569;
                        float _2989 = (-0.0) - _1570;
                        float _2990 = (-0.0) - _1571;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2995 = _2994 * _2988;
                        float _2996 = _2994 * _2989;
                        float _2997 = _2994 * _2990;
                        float _3004 = exp2(log2(1.0 / ((_2980 * 3.5) + 5.0)) * 0.25);
                        float _3005 = 1.0 - _470;
                        float _3012 = sqrt(1.0 - ((1.0 - (_3005 * _3005)) * (1.0 - (_3004 * _3004))));
                        float _3013 = _3012 * _3012;
                        float _3014 = _3013 * _3013;
                        float _3015 = _2995 + _2960;
                        float _3016 = _2996 + _2961;
                        float _3017 = _2997 + _2962;
                        float _3021 = inversesqrt(dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017)));
                        float _3025 = dot(vec3(_394, _397, _400), vec3(_2995, _2996, _2997));
                        float _4363 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                        float _3028 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
                        float _3029 = dot(vec3(_394, _397, _400), vec3(_3021 * _3015, _3021 * _3016, _3021 * _3017));
                        float _4374 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                        float _3032 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
                        float _3036 = ((_3032 * _3032) * (_3014 + (-1.0))) + 1.0;
                        float _3037 = _2973 * _3013;
                        float _3038 = _3037 * _3037;
                        float _3041 = ((1.0 - _3038) * _2963) + _3038;
                        float _4385 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                        float _3042 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
                        float _3043 = 1.0 - _3013;
                        float _3053 = (0.5 / (((_3042 * ((_3028 * _3043) + _3013)) + 9.9999999392252902907785028219223e-09) + (((_3042 * _3043) + _3013) * _3028))) * _3042;
                        float _4396 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3064 = (((_3014 * 3.1415927410125732421875) * (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) / ((_3036 * _3036) * ((_2980 * 2.1991131305694580078125) + 3.141590118408203125))) * _2969;
                        _2817 = (_2984 * _2932.x) + _2890;
                        _2818 = (_2984 * _2932.y) + _2891;
                        _2819 = (_2984 * _2932.z) + _2892;
                        _2814 = (_3064 * _2949.x) + _2887;
                        _2815 = (_3064 * _2949.y) + _2888;
                        _2816 = (_3064 * _2949.z) + _2889;
                        if (_2894 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2887 = _2814;
                            _2888 = _2815;
                            _2889 = _2816;
                            _2890 = _2817;
                            _2891 = _2818;
                            _2892 = _2819;
                            _2893 = _2894;
                        }
                    }
                    frontier_phi_73_pred = _2819;
                    frontier_phi_73_pred_1 = _2818;
                    frontier_phi_73_pred_2 = _2817;
                    frontier_phi_73_pred_3 = _2816;
                    frontier_phi_73_pred_4 = _2815;
                    frontier_phi_73_pred_5 = _2814;
                }
                _2601 = frontier_phi_73_pred;
                _2599 = frontier_phi_73_pred_1;
                _2597 = frontier_phi_73_pred_2;
                _2595 = frontier_phi_73_pred_3;
                _2593 = frontier_phi_73_pred_4;
                _2591 = frontier_phi_73_pred_5;
                uint _2749 = _2748 + 1u;
                if (_2749 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2742 = _2591;
                    _2743 = _2593;
                    _2744 = _2595;
                    _2745 = _2597;
                    _2746 = _2599;
                    _2747 = _2601;
                    _2748 = _2749;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2590 = _2591;
            _2592 = _2593;
            _2594 = _2595;
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
        }
        uvec4 _2604 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2605 = _2604.z;
        uint _2607 = (_2605 >> 8u) & 15u;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        float _2720;
        if (((4294967295u << _2607) & _2511) == 0u)
        {
            _2710 = _2590;
            _2712 = _2592;
            _2714 = _2594;
            _2716 = _2596;
            _2718 = _2598;
            _2720 = _2600;
        }
        else
        {
            float _2735 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
            float _2736 = _2735 * _1569;
            float _2737 = _2735 * _1570;
            float _2738 = _2735 * _1571;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2607 < ((_2605 >> 12u) & 15u))
            {
                float _2711;
                float _2713;
                float _2715;
                float _2717;
                float _2719;
                float _2721;
                float _2870 = _2590;
                float _2871 = _2592;
                float _2872 = _2594;
                float _2873 = _2596;
                float _2874 = _2598;
                float _2875 = _2600;
                uint _2876 = _2607;
                uint _2885;
                bool _2886;
                for (;;)
                {
                    _2885 = texelFetch(g_lightClassification, int((((_2505 << 5u) + (_2491 << 9u)) + (_2876 << 2u)) >> 2u)).x;
                    _2886 = _2885 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2886)
                    {
                        frontier_phi_84_pred = _2874;
                        frontier_phi_84_pred_1 = _2873;
                        frontier_phi_84_pred_2 = _2872;
                        frontier_phi_84_pred_3 = _2871;
                        frontier_phi_84_pred_4 = _2870;
                        frontier_phi_84_pred_5 = _2875;
                    }
                    else
                    {
                        float _3078;
                        float _3079;
                        float _3080;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3378;
                        float _3379;
                        float _3091 = _2870;
                        float _3092 = _2871;
                        float _3093 = _2872;
                        float _3094 = _2873;
                        float _3095 = _2874;
                        float _3096 = _2875;
                        uint _3097 = _2885;
                        uint _3098;
                        vec4 _3123;
                        float _3124;
                        vec4 _3139;
                        vec3 _3151;
                        vec4 _3167;
                        vec4 _3183;
                        float _3230;
                        bool _3231;
                        for (;;)
                        {
                            uint _3108 = ((_2876 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3097));
                            _3098 = (_3097 + 4294967295u) & _3097;
                            uint _3110 = _3108 * 40u;
                            _3123 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3110)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3110 + 3u)).x));
                            _3124 = _3123.w;
                            uint _3126 = (_3108 * 40u) + 4u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            uint _3141 = (_3108 * 40u) + 8u;
                            _3151 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3141)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3141 + 2u)).x));
                            uint _3154 = (_3108 * 40u) + 16u;
                            _3167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 3u)).x));
                            uint _3170 = (_3108 * 40u) + 20u;
                            _3183 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3170)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3170 + 3u)).x));
                            uint _3186 = (_3108 * 40u) + 24u;
                            vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3205 = (_3108 * 40u) + 28u;
                            vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3230 = fma(_1571, _3218.z, fma(_1570, _3218.y, _3218.x * _1569)) + _3218.w;
                            _3231 = !((fma(_1571, _3199.z, fma(_1570, _3199.y, _3199.x * _1569)) + _3199.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3231)
                            {
                                float _3258 = _3123.x - _1569;
                                float _3259 = _3123.y - _1570;
                                float _3260 = _3123.z - _1571;
                                float _3261 = dot(vec3(_3258, _3259, _3260), vec3(_3258, _3259, _3260));
                                float _3264 = inversesqrt(_3261);
                                float _3265 = _3264 * _3258;
                                float _3266 = _3264 * _3259;
                                float _3267 = _3264 * _3260;
                                float _3271 = 1.0 - (_3261 / (_3124 * _3124));
                                float _4407 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
                                float _3276 = sqrt(_3261) * _3139.w;
                                float _3278 = 1.39999997615814208984375 / (_3276 + 1.39999997615814208984375);
                                float _3279 = _3278 * _3278;
                                float _3282 = ((1.0 - _3279) * dot(vec3(_3265, _3266, _3267), vec3(_394, _397, _400))) + _3279;
                                float _3285 = _3276 * _3276;
                                float _3289 = (fma(_1571, _3167.z, fma(_1570, _3167.y, _3167.x * _1569)) + _3167.w) / _3230;
                                float _3290 = (fma(_1571, _3183.z, fma(_1570, _3183.y, _3183.x * _1569)) + _3183.w) / _3230;
                                float _3294 = 1.0 - dot(vec2(_3289, _3290), vec2(_3289, _3290));
                                float _4423 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
                                float _3296 = _3295 * (((isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0))) * _3272) / ((_3285 * 0.699999988079071044921875) + 1.0));
                                float _3308 = exp2(log2(1.0 / ((_3285 * 3.5) + 5.0)) * 0.25);
                                float _3309 = 1.0 - _470;
                                float _3316 = sqrt(1.0 - ((1.0 - (_3309 * _3309)) * (1.0 - (_3308 * _3308))));
                                float _3317 = _3316 * _3316;
                                float _3318 = _3317 * _3317;
                                float _3319 = _3265 - _2736;
                                float _3320 = _3266 - _2737;
                                float _3321 = _3267 - _2738;
                                float _3325 = inversesqrt(dot(vec3(_3319, _3320, _3321), vec3(_3319, _3320, _3321)));
                                float _3329 = dot(vec3(_394, _397, _400), vec3((-0.0) - _2736, (-0.0) - _2737, (-0.0) - _2738));
                                float _4434 = isnan(0.0) ? _3329 : (isnan(_3329) ? 0.0 : max(_3329, 0.0));
                                float _3332 = isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0));
                                float _3333 = dot(vec3(_394, _397, _400), vec3(_3325 * _3319, _3325 * _3320, _3325 * _3321));
                                float _4445 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3336 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                                float _3340 = ((_3336 * _3336) * (_3318 + (-1.0))) + 1.0;
                                float _3341 = _3278 * _3317;
                                float _3342 = _3341 * _3341;
                                float _3348 = ((1.0 - _3342) * dot(vec3(_394, _397, _400), vec3(_3265, _3266, _3267))) + _3342;
                                float _4456 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3349 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
                                float _3350 = 1.0 - _3317;
                                float _3360 = (0.5 / (((_3349 * ((_3332 * _3350) + _3317)) + 9.9999999392252902907785028219223e-09) + (((_3349 * _3350) + _3317) * _3332))) * _3349;
                                float _4467 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3370 = (_3295 * _3272) * (((_3318 * 3.1415927410125732421875) * (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) / ((_3340 * _3340) * ((_3285 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3296 * _3139.y;
                                frontier_phi_90_pred_1 = _3296 * _3139.x;
                                frontier_phi_90_pred_2 = _3370 * _3151.z;
                                frontier_phi_90_pred_3 = _3370 * _3151.y;
                                frontier_phi_90_pred_4 = _3370 * _3151.x;
                                frontier_phi_90_pred_5 = _3296 * _3139.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3378 = frontier_phi_90_pred;
                            _3377 = frontier_phi_90_pred_1;
                            _3376 = frontier_phi_90_pred_2;
                            _3375 = frontier_phi_90_pred_3;
                            _3374 = frontier_phi_90_pred_4;
                            _3379 = frontier_phi_90_pred_5;
                            _3081 = _3377 + _3094;
                            _3082 = _3378 + _3095;
                            _3083 = _3379 + _3096;
                            _3078 = _3374 + _3091;
                            _3079 = _3375 + _3092;
                            _3080 = _3376 + _3093;
                            if (_3098 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3091 = _3078;
                                _3092 = _3079;
                                _3093 = _3080;
                                _3094 = _3081;
                                _3095 = _3082;
                                _3096 = _3083;
                                _3097 = _3098;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3082;
                        frontier_phi_84_pred_1 = _3081;
                        frontier_phi_84_pred_2 = _3080;
                        frontier_phi_84_pred_3 = _3079;
                        frontier_phi_84_pred_4 = _3078;
                        frontier_phi_84_pred_5 = _3083;
                    }
                    _2719 = frontier_phi_84_pred;
                    _2717 = frontier_phi_84_pred_1;
                    _2715 = frontier_phi_84_pred_2;
                    _2713 = frontier_phi_84_pred_3;
                    _2711 = frontier_phi_84_pred_4;
                    _2721 = frontier_phi_84_pred_5;
                    uint _2877 = _2876 + 1u;
                    if (_2877 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2870 = _2711;
                        _2871 = _2713;
                        _2872 = _2715;
                        _2873 = _2717;
                        _2874 = _2719;
                        _2875 = _2721;
                        _2876 = _2877;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2721;
                frontier_phi_65_66_ladder_1 = _2717;
                frontier_phi_65_66_ladder_2 = _2719;
                frontier_phi_65_66_ladder_3 = _2713;
                frontier_phi_65_66_ladder_4 = _2711;
                frontier_phi_65_66_ladder_5 = _2715;
            }
            else
            {
                frontier_phi_65_66_ladder = _2600;
                frontier_phi_65_66_ladder_1 = _2596;
                frontier_phi_65_66_ladder_2 = _2598;
                frontier_phi_65_66_ladder_3 = _2592;
                frontier_phi_65_66_ladder_4 = _2590;
                frontier_phi_65_66_ladder_5 = _2594;
            }
            _2710 = frontier_phi_65_66_ladder_4;
            _2712 = frontier_phi_65_66_ladder_3;
            _2714 = frontier_phi_65_66_ladder_5;
            _2716 = frontier_phi_65_66_ladder_1;
            _2718 = frontier_phi_65_66_ladder_2;
            _2720 = frontier_phi_65_66_ladder;
        }
        float _2725 = isnan(1.0) ? _454 : (isnan(_454) ? 1.0 : min(_454, 1.0));
        _2523 = (_2725 * _2716) + _2036;
        _2525 = (_2725 * _2718) + _2038;
        _2527 = (_2725 * _2720) + _2040;
        _2529 = ((_2710 * _439) * _2725) + _2374;
        _2531 = ((_2712 * _441) * _2725) + _2376;
        _2533 = ((_2714 * _442) * _2725) + _2378;
    }
    else
    {
        _2523 = _2036;
        _2525 = _2038;
        _2527 = _2040;
        _2529 = _2374;
        _2531 = _2376;
        _2533 = _2378;
    }
    float _4483 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _4494 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _4505 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _2550 = ((isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0))) * (_2523 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _454))) + ((_2529 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1296)) * cbPerFrame._m0[3u].x);
    float _2551 = ((isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_2525 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _454))) + ((_2531 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1296)) * cbPerFrame._m0[3u].x);
    float _2552 = ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * (_2527 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _454))) + ((_2533 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1296)) * cbPerFrame._m0[3u].x);
    uint _2553 = _413 + 6u;
    float _2561 = _373 / cbSceneParam._m0[86u].x;
    float _2562 = _374 / cbSceneParam._m0[86u].y;
    vec4 _2576 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, (log2((isnan(cbSceneParam._m0[77u].w) ? _294 : (isnan(_294) ? cbSceneParam._m0[77u].w : min(_294, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2578 = _2576.x;
    float _2579 = _2576.y;
    float _2580 = _2576.z;
    float _2581 = _2576.w;
    float _2652;
    float _2654;
    float _2656;
    float _2658;
    if (_294 > cbSceneParam._m0[78u].w)
    {
        float _2615 = isnan(_294) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _294 : min(cbSceneParam._m0[80u].w, _294));
        float _2616 = _2615 / _294;
        float _2627 = _2616 * _345;
        float _2628 = _346 * _2616;
        float _2629 = (-0.0) - _2628;
        float _2630 = _2616 * _347;
        float _2632 = (cbSceneParam._m0[77u].w * _2629) / _2615;
        float _2633 = _2632 + cbSceneParam._m0[79u].w;
        float _2634 = cbSceneParam._m0[79u].w - _2628;
        float _2640 = sqrt(((_2627 * _2627) + (_2628 * _2628)) + (_2630 * _2630));
        float _2643 = (1.0 - (cbSceneParam._m0[77u].w / _2615)) * _2640;
        float _2648 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2650 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2827;
        if (abs((_2629 - _2632) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2827 = ((((_2633 > 0.0) ? exp2(_2648 * _2633) : (2.0 - exp2(_2650 * _2633))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2643;
        }
        else
        {
            float _2771 = 1.0 / cbSceneParam._m0[80u].x;
            float _2772 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : max(_2633, _2634));
            float _2773 = isnan(_2634) ? _2633 : (isnan(_2633) ? _2634 : min(_2633, _2634));
            float _2782 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : min(_2772, 0.0));
            float _2783 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : min(_2773, 0.0));
            _2827 = ((abs(_2640 / _2629) * cbSceneParam._m0[80u].y) * ((((_2782 - _2783) * 2.0) - ((exp2(_2648 * (isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0)))) - exp2(_2648 * (isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0))))) * _2771)) - ((exp2(_2650 * _2782) - exp2(_2650 * _2783)) * _2771))) + (_2643 * cbSceneParam._m0[80u].z);
        }
        vec4 _2829 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2561, _2562, 1.0), 0.0);
        float _2838 = exp2((_2827 * (-1.44269502162933349609375)) * (1.0 - _2829.w));
        float _2839 = log2(_2838);
        float _2855 = log2(_2581);
        _2652 = (exp2(_2855 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].x)) * _2829.x) / cbSceneParam._m0[78u].x)) + _2578;
        _2654 = (exp2(_2855 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].y)) * _2829.y) / cbSceneParam._m0[78u].y)) + _2579;
        _2656 = (exp2(_2855 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2839 * cbSceneParam._m0[78u].z)) * _2829.z) / cbSceneParam._m0[78u].z)) + _2580;
        _2658 = _2838 * _2581;
    }
    else
    {
        _2652 = _2578;
        _2654 = _2579;
        _2656 = _2580;
        _2658 = _2581;
    }
    bool _2865;
    vec4 _2668;
    vec4 _2690;
    float _2692;
    float _2696;
    float _2697;
    float _2698;
    float _2699;
    bool _2709;
    for (;;)
    {
        _2668 = cbMatDynParam._m0[0u];
        float _2670 = roundEven(_2668.y);
        bool _2671 = _2670 == 3.0;
        float _2672 = log2(_2658);
        float _2679 = exp2(_2672 * cbSceneParam._m0[78u].x) * _2550;
        float _2680 = exp2(_2672 * cbSceneParam._m0[78u].y) * _2551;
        float _2681 = exp2(_2672 * cbSceneParam._m0[78u].z) * _2552;
        float _2688 = _361 + (-0.5);
        _2690 = cbMtdParam._m0[1u];
        _2692 = _2690.y * _2688;
        float _2695 = (_2670 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2696 = _2695 * (_2671 ? _2679 : (_2679 + (cbSceneParam._m0[72u].w * _2652)));
        _2697 = _2695 * (_2671 ? _2680 : (_2680 + (cbSceneParam._m0[72u].w * _2654)));
        _2698 = _2695 * (_2671 ? _2681 : (_2681 + (cbSceneParam._m0[72u].w * _2656)));
        _2699 = _2688 * 0.999000012874603271484375;
        _2709 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2709)
        {
            if ((cbInstanceData._m0[_413 + 7u].x + _2699) < 0.5)
            {
                _2865 = true;
                break;
            }
        }
        uint _2806 = _415 + uint(_2668.w);
        if ((cbInstanceData._m0[_2806].w < 1.0) && ((cbInstanceData._m0[_2806].w + _2699) < 0.5))
        {
            _2865 = true;
            break;
        }
        if ((_2692 + 1.0) < _2690.x)
        {
            _2865 = true;
            break;
        }
        _2865 = false;
        break;
    }
    float _3069;
    if (_2865)
    {
        discard_state = true;
        _3069 = 0.0;
    }
    else
    {
        _3069 = cbInstanceData._m0[_2553].w;
    }
    SV_Target.x = _2696;
    SV_Target.y = _2697;
    SV_Target.z = _2698;
    SV_Target.w = _3069;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2553].w;
    discard_exit();
}


