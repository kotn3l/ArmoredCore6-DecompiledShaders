#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MN_Material_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _811;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _191 = _190 * NORMAL.x;
    float _192 = _190 * NORMAL.y;
    float _193 = _190 * NORMAL.z;
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _205;
    float _206;
    float _207;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _205 = (-0.0) - _191;
        _206 = (-0.0) - _192;
        _207 = (-0.0) - _193;
    }
    else
    {
        _205 = _191;
        _206 = _192;
        _207 = _193;
    }
    vec4 _231 = texture(sampler2D(MN_Material_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _240 = (_231.x * 2.0) + (-1.0);
    float _242 = (_231.y * 2.0) + (-1.0);
    float _243 = dot(vec2(_240, _242), vec2(_240, _242));
    float _3172 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _249 = sqrt(1.0 - (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))));
    float _251 = cbMtdParam._m0[10u].y + _231.z;
    float _254 = fma(_249, _205, fma(_242, _197 * TANGENT.x, (_183 * _176) * _240));
    float _257 = fma(_249, _206, fma(_242, _197 * TANGENT.y, (_183 * _177) * _240));
    float _260 = fma(_249, _207, fma(_242, _197 * TANGENT.z, (_183 * _178) * _240));
    float _264 = inversesqrt(dot(vec3(_254, _257, _260), vec3(_254, _257, _260)));
    float _265 = _264 * _254;
    float _266 = _264 * _257;
    float _267 = _264 * _260;
    float _3183 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _268 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _3194 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3205 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3216 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3227 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _272 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    float _288 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _329 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _339 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _329);
    float _340 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _329);
    float _341 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _329);
    float _345 = inversesqrt(dot(vec3(_339, _340, _341), vec3(_339, _340, _341)));
    float _346 = _339 * _345;
    float _347 = _340 * _345;
    float _348 = _341 * _345;
    float _354 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _355 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _376 = fma(_267, cbSceneParam._m0[5u].z, fma(_266, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _265));
    float _379 = fma(_267, cbSceneParam._m0[6u].z, fma(_266, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _265));
    float _382 = fma(_267, cbSceneParam._m0[7u].z, fma(_266, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _265));
    uint _395 = uint(roundEven(NORMAL.w)) * 13u;
    uint _398 = (_395 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _404 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0)))) * cbInstanceData._m0[_398].x;
    float _405 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * cbInstanceData._m0[_398].y;
    float _406 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_398].z;
    float _3238 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _407 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _3249 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _408 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
    float _3260 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _409 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _410 = 1.0 - _272;
    float _411 = _407 * _410;
    float _412 = _408 * _410;
    float _413 = _409 * _410;
    float _418 = (_407 + (-0.039999999105930328369140625)) * _272;
    float _419 = (_408 + (-0.039999999105930328369140625)) * _272;
    float _420 = (_409 + (-0.039999999105930328369140625)) * _272;
    float _421 = _418 + 0.039999999105930328369140625;
    float _423 = _419 + 0.039999999105930328369140625;
    float _424 = _420 + 0.039999999105930328369140625;
    vec4 _433 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _354, cbSceneParam._m0[86u].y * _355));
    float _436 = _433.x * TEXCOORD.z;
    float _437 = dot(vec3(_265, _266, _267), vec3(_346, _347, _348));
    float _440 = _437 * 2.0;
    float _444 = (_440 * _265) - _346;
    float _445 = (_440 * _266) - _347;
    float _446 = (_440 * _267) - _348;
    float _450 = abs(dot(vec3(_346, _347, _348), vec3(_265, _266, _267)));
    float _3271 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _452 = sqrt(_268);
    float _465 = exp2((_452 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_452 * 3.0));
    float _471 = (1.0 - _465) * ((_452 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _472 = _465 * _452;
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _508 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _810;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _535 = fma(_508, cbModelParam._m0[26u].z, fma(_504, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _500));
        float _539 = fma(_508, cbModelParam._m0[27u].z, fma(_504, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _500));
        float _543 = fma(_508, cbModelParam._m0[28u].z, fma(_504, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _500));
        float _568 = _500 + _265;
        float _569 = _504 + _266;
        float _570 = _508 + _267;
        float _580 = fma(_570, cbModelParam._m0[26u].z, fma(_569, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568)) - _535;
        float _581 = fma(_570, cbModelParam._m0[27u].z, fma(_569, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568)) - _539;
        float _582 = fma(_570, cbModelParam._m0[28u].z, fma(_569, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568)) - _543;
        float _586 = inversesqrt(dot(vec3(_580, _581, _582), vec3(_580, _581, _582)));
        float _599 = ((_586 * _580) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_535 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _600 = ((_586 * _581) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_539 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _601 = ((_586 * _582) / cbModelParam._m0[34u].z) + ((((((_543 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _604 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_599, _600, _601), 0.0);
        float _638 = exp2((_604.w + (-0.5)) * 20.0) * 2.0;
        float _639 = _638 * (_604.x + (-0.5));
        float _640 = _638 * (_604.y + (-0.5));
        float _641 = _638 * (_604.z + (-0.5));
        float _648 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _649 = _648 * (_611.x + (-0.5));
        float _650 = _648 * (_611.y + (-0.5));
        float _651 = _648 * (_611.z + (-0.5));
        float _658 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_618.x + (-0.5));
        float _660 = _658 * (_618.y + (-0.5));
        float _661 = _658 * (_618.z + (-0.5));
        float _668 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_625.x + (-0.5));
        float _670 = _668 * (_625.y + (-0.5));
        float _671 = _668 * (_625.z + (-0.5));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = _639 * 0.5;
        float _676 = _649 * 0.5;
        float _677 = _659 * 0.5;
        float _678 = dot(vec3(_675, _676, _677), vec3(_675, _676, _677));
        float _683 = (_678 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_678);
        float _692 = (dot(vec3(_265, _266, _267), vec3(_683 * _675, _683 * _676, _683 * _677)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _702 = sqrt(((_676 * _676) + (_675 * _675)) + (_677 * _677)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _703 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _704 = _703 * 2.0;
        float _708 = (1.0 - _703) / (_703 + 1.0);
        float _3319 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _718 = ((((1.0 - _709) * (_704 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_704 + 1.0))) + _709) * _672;
        float _719 = _640 * 0.5;
        float _720 = _650 * 0.5;
        float _721 = _660 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _735 = (dot(vec3(_265, _266, _267), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _744 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_673 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3352 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_746 + 1.0))) + _751) * _673;
        float _761 = _641 * 0.5;
        float _762 = _651 * 0.5;
        float _763 = _661 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_265, _266, _267), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3385 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_788 + 1.0))) + _793) * _674;
        _810 = _641;
        _812 = _640;
        _813 = _639;
        _814 = _651;
        _815 = _650;
        _816 = _649;
        _817 = _661;
        _818 = _660;
        _819 = _659;
        _820 = _674;
        _821 = _673;
        _822 = _672;
        _823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0)));
        _824 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
    }
    else
    {
        _810 = _811;
        _812 = _811;
        _813 = _811;
        _814 = _811;
        _815 = _811;
        _816 = _811;
        _817 = _811;
        _818 = _811;
        _819 = _811;
        _820 = _811;
        _821 = _811;
        _822 = _811;
        _823 = 0.0;
        _824 = 0.0;
        _825 = 0.0;
    }
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _851 = fma(_508, cbModelParam._m0[30u].z, fma(_504, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _500));
        float _855 = fma(_508, cbModelParam._m0[31u].z, fma(_504, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _500));
        float _859 = fma(_508, cbModelParam._m0[32u].z, fma(_504, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _500));
        float _882 = _500 + _265;
        float _883 = _504 + _266;
        float _884 = _508 + _267;
        float _894 = fma(_884, cbModelParam._m0[30u].z, fma(_883, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _882)) - _851;
        float _895 = fma(_884, cbModelParam._m0[31u].z, fma(_883, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _882)) - _855;
        float _896 = fma(_884, cbModelParam._m0[32u].z, fma(_883, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _882)) - _859;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_851 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_855 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[35u].z) + ((((((_859 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _950 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_917.x + (-0.5));
        float _952 = _950 * (_917.y + (-0.5));
        float _953 = _950 * (_917.z + (-0.5));
        float _960 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_924.x + (-0.5));
        float _962 = _960 * (_924.y + (-0.5));
        float _963 = _960 * (_924.z + (-0.5));
        float _970 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_931.x + (-0.5));
        float _972 = _970 * (_931.y + (-0.5));
        float _973 = _970 * (_931.z + (-0.5));
        float _980 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _981 = _980 * (_938.x + (-0.5));
        float _982 = _980 * (_938.y + (-0.5));
        float _983 = _980 * (_938.z + (-0.5));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = _951 * 0.5;
        float _988 = _961 * 0.5;
        float _989 = _971 * 0.5;
        float _990 = dot(vec3(_987, _988, _989), vec3(_987, _988, _989));
        float _995 = (_990 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_990);
        float _1003 = (dot(vec3(_265, _266, _267), vec3(_995 * _987, _995 * _988, _995 * _989)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1012 = sqrt(((_988 * _988) + (_987 * _987)) + (_989 * _989)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1014 = _1013 * 2.0;
        float _1018 = (1.0 - _1013) / (_1013 + 1.0);
        float _3448 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1028 = ((((1.0 - _1019) * (_1014 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1014 + 1.0))) + _1019) * _984;
        float _1029 = _952 * 0.5;
        float _1030 = _962 * 0.5;
        float _1031 = _972 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_265, _266, _267), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3481 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1056 + 1.0))) + _1061) * _985;
        float _1071 = _953 * 0.5;
        float _1072 = _963 * 0.5;
        float _1073 = _973 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_265, _266, _267), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3492 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3503 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3514 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0))) * (_1098 + 1.0))) + _1103) * _986;
        _1120 = _953;
        _1121 = _952;
        _1122 = _951;
        _1123 = _963;
        _1124 = _962;
        _1125 = _961;
        _1126 = _973;
        _1127 = _972;
        _1128 = _971;
        _1129 = _986;
        _1130 = _985;
        _1131 = _984;
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0)));
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
    }
    else
    {
        _1120 = _811;
        _1121 = _811;
        _1122 = _811;
        _1123 = _811;
        _1124 = _811;
        _1125 = _811;
        _1126 = _811;
        _1127 = _811;
        _1128 = _811;
        _1129 = _811;
        _1130 = _811;
        _1131 = _811;
        _1132 = 0.0;
        _1133 = 0.0;
        _1134 = 0.0;
    }
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _823)) + _823;
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _824)) + _824;
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _825)) + _825;
    float _1167 = fma(_1146, cbSceneParam._m0[89u].z, fma(_1145, cbSceneParam._m0[89u].y, _1144 * cbSceneParam._m0[89u].x));
    float _1170 = fma(_1146, cbSceneParam._m0[90u].z, fma(_1145, cbSceneParam._m0[90u].y, _1144 * cbSceneParam._m0[90u].x));
    float _1173 = fma(_1146, cbSceneParam._m0[91u].z, fma(_1145, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1144));
    float _1188 = _444 * 0.5;
    float _1189 = _445 * 0.5;
    float _1190 = _446 * 0.5;
    float _1191 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1194 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1197 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1231;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1204 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_810, _814, _817, _820));
        float _1208 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_812, _815, _818, _821));
        float _1212 = dot(vec4(_1188, _1189, _1190, 1.0), vec4(_813, _816, _819, _822));
        float _1219 = dot(vec4(cbModelParam._m0[39u]), vec4(_1188, _1189, _1190, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1219) ? 0.0 : (isnan(0.0) ? _1219 : max(0.0, _1219))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1242;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1233 = dot(vec4(cbModelParam._m0[40u]), vec4(_1188, _1189, _1190, 1.0));
        _1242 = dot(vec3(isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1233) ? 0.0 : (isnan(0.0) ? _1233 : max(0.0, _1233))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1242 = 1.0;
    }
    float _1246 = (_1242 * cbModelParam._m0[1u].x) + (_1231 * (1.0 - cbModelParam._m0[1u].x));
    float _1256 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _268);
    float _1257 = isnan(_1256) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1256 : min(cbModelParam._m0[25u].z, _1256));
    float _1339;
    float _1341;
    float _1343;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1306 = fma(_508, cbModelParam._m0[13u].z, fma(_504, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500)) + cbModelParam._m0[13u].w;
        float _1310 = fma(_508, cbModelParam._m0[14u].z, fma(_504, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500)) + cbModelParam._m0[14u].w;
        float _1314 = fma(_508, cbModelParam._m0[15u].z, fma(_504, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500)) + cbModelParam._m0[15u].w;
        float _1317 = fma(_446, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _444));
        float _1320 = fma(_446, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _444));
        float _1323 = fma(_446, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _444));
        float _1351;
        if (_1317 > 0.0)
        {
            _1351 = abs((1.0 - _1306) / _1317);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1306 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1351 = frontier_phi_16_14_ladder;
        }
        float _1580;
        if (_1320 > 0.0)
        {
            _1580 = abs((1.0 - _1310) / _1320);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1310 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1580 = frontier_phi_25_21_ladder;
        }
        float _1837;
        if (_1323 > 0.0)
        {
            _1837 = abs((1.0 - _1314) / _1323);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1323 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1314 + 1.0) / _1323);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1837 = frontier_phi_37_32_ladder;
        }
        float _1839 = isnan(_1580) ? _1351 : (isnan(_1351) ? _1580 : min(_1351, _1580));
        float _1840 = isnan(_1837) ? _1839 : (isnan(_1839) ? _1837 : min(_1839, _1837));
        float _1844 = (_1840 * _1317) + _1306;
        float _1845 = (_1840 * _1320) + _1310;
        float _1846 = (_1840 * _1323) + _1314;
        float _1847 = _1840 * 9.9999997473787516355514526367188e-05;
        float _1849 = (-1.0) - _1847;
        float _1851 = _1847 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1846 > _1851) || ((_1846 < _1849) || ((_1845 > _1851) || ((_1845 < _1849) || ((_1844 < _1849) || (_1844 > _1851))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1974 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1846, cbModelParam._m0[9u].z, fma(_1845, cbModelParam._m0[9u].y, _1844 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1846, cbModelParam._m0[10u].z, fma(_1845, cbModelParam._m0[10u].y, _1844 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1846, cbModelParam._m0[11u].z, fma(_1845, cbModelParam._m0[11u].y, _1844 * cbModelParam._m0[11u].x))), _1257);
            frontier_phi_15_37_ladder = _1974.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1974.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1974.x * cbModelParam._m0[1u].y;
        }
        _1339 = frontier_phi_15_37_ladder_2;
        _1341 = frontier_phi_15_37_ladder_1;
        _1343 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1327 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_444, _445, _446), _1257);
        _1339 = _1327.x * cbModelParam._m0[1u].y;
        _1341 = _1327.y * cbModelParam._m0[1u].y;
        _1343 = _1327.z * cbModelParam._m0[1u].y;
    }
    float _1347 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _268);
    float _1348 = isnan(_1347) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1347 : min(cbModelParam._m0[25u].w, _1347));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1405 = fma(_508, cbModelParam._m0[21u].z, fma(_504, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500)) + cbModelParam._m0[21u].w;
        float _1409 = fma(_508, cbModelParam._m0[22u].z, fma(_504, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500)) + cbModelParam._m0[22u].w;
        float _1413 = fma(_508, cbModelParam._m0[23u].z, fma(_504, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500)) + cbModelParam._m0[23u].w;
        float _1416 = fma(_446, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _444));
        float _1419 = fma(_446, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _444));
        float _1422 = fma(_446, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _444));
        float _1585;
        if (_1416 > 0.0)
        {
            _1585 = abs((1.0 - _1405) / _1416);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1405 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1585 = frontier_phi_27_23_ladder;
        }
        float _1864;
        if (_1419 > 0.0)
        {
            _1864 = abs((1.0 - _1409) / _1419);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1409 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1864 = frontier_phi_39_34_ladder;
        }
        float _2077;
        if (_1422 > 0.0)
        {
            _2077 = abs((1.0 - _1413) / _1422);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1413 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2077 = frontier_phi_48_45_ladder;
        }
        float _2079 = isnan(_1864) ? _1585 : (isnan(_1585) ? _1864 : min(_1585, _1864));
        float _2080 = isnan(_2077) ? _2079 : (isnan(_2079) ? _2077 : min(_2079, _2077));
        float _2084 = (_2080 * _1416) + _1405;
        float _2085 = (_2080 * _1419) + _1409;
        float _2086 = (_2080 * _1422) + _1413;
        float _2087 = _2080 * 9.9999997473787516355514526367188e-05;
        float _2088 = (-1.0) - _2087;
        float _2090 = _2087 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2086 > _2090) || ((_2086 < _2088) || ((_2085 > _2090) || ((_2085 < _2088) || ((_2084 < _2088) || (_2084 > _2090))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2284 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2086, cbModelParam._m0[17u].z, fma(_2085, cbModelParam._m0[17u].y, _2084 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2086, cbModelParam._m0[18u].z, fma(_2085, cbModelParam._m0[18u].y, _2084 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2086, cbModelParam._m0[19u].z, fma(_2085, cbModelParam._m0[19u].y, _2084 * cbModelParam._m0[19u].x))), _1348);
            frontier_phi_24_48_ladder = _2284.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2284.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2284.x * cbModelParam._m0[1u].z;
        }
        _1441 = frontier_phi_24_48_ladder_2;
        _1443 = frontier_phi_24_48_ladder_1;
        _1445 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_444, _445, _446), _1348);
        _1441 = _1425.x * cbModelParam._m0[1u].z;
        _1443 = _1425.y * cbModelParam._m0[1u].z;
        _1445 = _1425.z * cbModelParam._m0[1u].z;
    }
    float _1458 = (((_471 * _421) + _472) * _436) * ((cbModelParam._m0[1u].w * (_1441 - _1339)) + _1339);
    float _1460 = (((_471 * _423) + _472) * _436) * ((cbModelParam._m0[1u].w * (_1443 - _1341)) + _1341);
    float _1462 = (((_471 * _424) + _472) * _436) * ((cbModelParam._m0[1u].w * (_1445 - _1343)) + _1343);
    float _1465 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1458 * cbSceneParam._m0[89u].x));
    float _1468 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1458 * cbSceneParam._m0[90u].x));
    float _1471 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, _1458 * cbSceneParam._m0[91u].x));
    vec4 _1479 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_354, _355));
    float _1481 = _1479.w;
    float _1493 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1481);
    float _1494 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1481);
    float _1495 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1481);
    uvec4 _1499 = floatBitsToUint(cbInstanceData._m0[_395 + 5u]);
    uint _1501 = _1499.x * 14u;
    uint _1502 = _1501 + 13u;
    float _1509 = _436 + (-1.0);
    float _1514 = (cbLight._m0[_1502].x * _1509) + 1.0;
    float _1515 = (cbLight._m0[_1502].y * _1509) + 1.0;
    float _1516 = (cbLight._m0[_1502].z * _1509) + 1.0;
    float _1517 = (cbLight._m0[_1502].w * _1509) + 1.0;
    uint _1518 = _1501 + 5u;
    float _1524 = isnan(1.0) ? _1515 : (isnan(_1515) ? 1.0 : min(_1515, 1.0));
    uint _1528 = _1501 + 4u;
    float _1538 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
    uint _1542 = _1501 | 1u;
    float _1553 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_265, _266, _267));
    float _1556 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_265, _266, _267));
    float _3650 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
    float _3661 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _1561 = (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))) * 0.3183098733425140380859375;
    float _1563 = (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * 0.3183098733425140380859375;
    float _1570 = ((cbLight._m0[_1518].x * _1524) * _1563) + (((cbLight._m0[_1528].x * _1493) * _1538) * _1561);
    float _1571 = ((_1524 * cbLight._m0[_1518].y) * _1563) + (((cbLight._m0[_1528].y * _1494) * _1538) * _1561);
    float _1572 = ((_1524 * cbLight._m0[_1518].z) * _1563) + (((cbLight._m0[_1528].z * _1495) * _1538) * _1561);
    uvec4 _1577 = floatBitsToUint(cbLight._m0[_1501 + 12u]);
    bool _1579 = _1577.x == 0u;
    float _1590;
    float _1592;
    float _1594;
    if (_1579)
    {
        _1590 = _1570;
        _1592 = _1571;
        _1594 = _1572;
    }
    else
    {
        uint _1598 = _1501 + 6u;
        float _1614 = (dot(vec3(cbLight._m0[_1501 + 2u].xyz), vec3(_265, _266, _267)) * 0.5) + 0.5;
        float _1615 = _1614 * _1614;
        float _3672 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1617 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
        _1590 = (((cbLight._m0[_1598].x * 0.3183098733425140380859375) * _1616) * _1617) + _1570;
        _1592 = (((cbLight._m0[_1598].y * 0.3183098733425140380859375) * _1616) * _1617) + _1571;
        _1594 = (((cbLight._m0[_1598].z * 0.3183098733425140380859375) * _1616) * _1617) + _1572;
    }
    bool _1597 = _1577.y == 0u;
    float _1635;
    float _1637;
    float _1639;
    if (_1597)
    {
        _1635 = _1590;
        _1637 = _1592;
        _1639 = _1594;
    }
    else
    {
        uint _1808 = _1501 + 7u;
        float _1824 = (dot(vec3(cbLight._m0[_1501 + 3u].xyz), vec3(_265, _266, _267)) * 0.5) + 0.5;
        float _1825 = _1824 * _1824;
        float _3688 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1826 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1827 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1635 = (((cbLight._m0[_1808].x * 0.3183098733425140380859375) * _1826) * _1827) + _1590;
        _1637 = (((cbLight._m0[_1808].y * 0.3183098733425140380859375) * _1826) * _1827) + _1592;
        _1639 = (((cbLight._m0[_1808].z * 0.3183098733425140380859375) * _1826) * _1827) + _1594;
    }
    uint _1642 = _1501 + 8u;
    float _1655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1501].w)) * _268) * 0.949999988079071044921875);
    float _1656 = _1655 * _1655;
    float _1657 = cbLight._m0[_1501].x + _346;
    float _1658 = cbLight._m0[_1501].y + _347;
    float _1659 = cbLight._m0[_1501].z + _348;
    float _1663 = inversesqrt(dot(vec3(_1657, _1658, _1659), vec3(_1657, _1658, _1659)));
    float _1664 = _1663 * _1657;
    float _1665 = _1663 * _1658;
    float _1666 = _1663 * _1659;
    float _1667 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1501].xyz));
    float _3704 = isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0));
    float _1670 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _1671 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _1672 = dot(vec3(_265, _266, _267), vec3(_1664, _1665, _1666));
    float _3726 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1675 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1676 = dot(vec3(cbLight._m0[_1501].xyz), vec3(_1664, _1665, _1666));
    float _3737 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1680 = _1656 * _1656;
    float _1684 = ((_1675 * _1675) * (_1680 + (-1.0))) + 1.0;
    float _1692 = exp2(log2(1.0 - (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * 5.0);
    float _1693 = 0.959999978542327880859375 - _418;
    float _1695 = 0.959999978542327880859375 - _419;
    float _1696 = 0.959999978542327880859375 - _420;
    float _1703 = 1.0 - _1656;
    float _1714 = (0.5 / (((_1671 * ((_1670 * _1703) + _1656)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1703) + _1656) * _1670))) * _1670;
    float _3748 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
    float _1716 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (_1680 / ((_1684 * _1684) * 3.141590118408203125));
    uint _1730 = _1501 + 9u;
    float _1741 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1542].w)) * _268) * 0.949999988079071044921875);
    float _1742 = _1741 * _1741;
    float _1743 = cbLight._m0[_1542].x + _346;
    float _1744 = cbLight._m0[_1542].y + _347;
    float _1745 = cbLight._m0[_1542].z + _348;
    float _1749 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
    float _1750 = _1749 * _1743;
    float _1751 = _1749 * _1744;
    float _1752 = _1749 * _1745;
    float _1753 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1542].xyz));
    float _3759 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _1757 = dot(vec3(_265, _266, _267), vec3(_1750, _1751, _1752));
    float _3770 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1542].xyz), vec3(_1750, _1751, _1752));
    float _3781 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1765 = _1742 * _1742;
    float _1769 = ((_1760 * _1760) * (_1765 + (-1.0))) + 1.0;
    float _1776 = exp2(log2(1.0 - (isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0)))) * 5.0);
    float _1783 = 1.0 - _1742;
    float _1793 = (0.5 / (((_1671 * ((_1756 * _1783) + _1742)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1783) + _1742) * _1756))) * _1756;
    float _3792 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
    float _1795 = (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1765 / ((_1769 * _1769) * 3.141590118408203125));
    float _1805 = (((((_1776 * _1693) + _421) * cbLight._m0[_1730].x) * _1795) * _1524) + ((((cbLight._m0[_1642].x * _1493) * ((_1692 * _1693) + _421)) * _1716) * _1538);
    float _1806 = (((((_1776 * _1695) + _423) * cbLight._m0[_1730].y) * _1795) * _1524) + ((((cbLight._m0[_1642].y * _1494) * ((_1692 * _1695) + _423)) * _1716) * _1538);
    float _1807 = (((((_1776 * _1696) + _424) * cbLight._m0[_1730].z) * _1795) * _1524) + ((((cbLight._m0[_1642].z * _1495) * ((_1692 * _1696) + _424)) * _1716) * _1538);
    float _1869;
    float _1871;
    float _1873;
    if (_1579)
    {
        _1869 = _1805;
        _1871 = _1806;
        _1873 = _1807;
    }
    else
    {
        uint _1875 = _1501 + 2u;
        uint _1879 = _1501 + 10u;
        float _1893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1875].w)) * _268) * 0.949999988079071044921875);
        float _1894 = _1893 * _1893;
        float _1895 = cbLight._m0[_1875].x + _346;
        float _1896 = cbLight._m0[_1875].y + _347;
        float _1897 = cbLight._m0[_1875].z + _348;
        float _1901 = inversesqrt(dot(vec3(_1895, _1896, _1897), vec3(_1895, _1896, _1897)));
        float _1902 = _1901 * _1895;
        float _1903 = _1901 * _1896;
        float _1904 = _1901 * _1897;
        float _1905 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1875].xyz));
        float _3803 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1908 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1909 = dot(vec3(_265, _266, _267), vec3(_1902, _1903, _1904));
        float _3814 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
        float _1912 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1913 = dot(vec3(cbLight._m0[_1875].xyz), vec3(_1902, _1903, _1904));
        float _3825 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1917 = _1894 * _1894;
        float _1921 = ((_1912 * _1912) * (_1917 + (-1.0))) + 1.0;
        float _1928 = exp2(log2(1.0 - (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * 5.0);
        float _1935 = 1.0 - _1894;
        float _1945 = (0.5 / (((_1671 * ((_1908 * _1935) + _1894)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _1935) + _1894) * _1908))) * _1908;
        float _3836 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
        float _1947 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_1917 / ((_1921 * _1921) * 3.141590118408203125));
        float _1948 = isnan(1.0) ? _1516 : (isnan(_1516) ? 1.0 : min(_1516, 1.0));
        _1869 = (((((_1928 * _1693) + _421) * cbLight._m0[_1879].x) * _1947) * _1948) + _1805;
        _1871 = (((((_1928 * _1695) + _423) * cbLight._m0[_1879].y) * _1947) * _1948) + _1806;
        _1873 = (((((_1928 * _1696) + _424) * cbLight._m0[_1879].z) * _1947) * _1948) + _1807;
    }
    float _1983;
    float _1985;
    float _1987;
    if (_1597)
    {
        _1983 = _1869;
        _1985 = _1871;
        _1987 = _1873;
    }
    else
    {
        uint _1994 = _1501 + 3u;
        uint _1998 = _1501 + 11u;
        float _2012 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1994].w)) * _268) * 0.949999988079071044921875);
        float _2013 = _2012 * _2012;
        float _2014 = cbLight._m0[_1994].x + _346;
        float _2015 = cbLight._m0[_1994].y + _347;
        float _2016 = cbLight._m0[_1994].z + _348;
        float _2020 = inversesqrt(dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016)));
        float _2021 = _2020 * _2014;
        float _2022 = _2020 * _2015;
        float _2023 = _2020 * _2016;
        float _2024 = dot(vec3(_265, _266, _267), vec3(cbLight._m0[_1994].xyz));
        float _3852 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2027 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _2028 = dot(vec3(_265, _266, _267), vec3(_2021, _2022, _2023));
        float _3863 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2031 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _2032 = dot(vec3(cbLight._m0[_1994].xyz), vec3(_2021, _2022, _2023));
        float _3874 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2036 = _2013 * _2013;
        float _2040 = ((_2031 * _2031) * (_2036 + (-1.0))) + 1.0;
        float _2047 = exp2(log2(1.0 - (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0)))) * 5.0);
        float _2054 = 1.0 - _2013;
        float _2064 = (0.5 / (((_1671 * ((_2027 * _2054) + _2013)) + 9.9999999392252902907785028219223e-09) + (((_1671 * _2054) + _2013) * _2027))) * _2027;
        float _3885 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
        float _2066 = (isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * (_2036 / ((_2040 * _2040) * 3.141590118408203125));
        float _2067 = isnan(1.0) ? _1517 : (isnan(_1517) ? 1.0 : min(_1517, 1.0));
        _1983 = (((((_2047 * _1693) + _421) * cbLight._m0[_1998].x) * _2066) * _2067) + _1869;
        _1985 = (((((_2047 * _1695) + _423) * cbLight._m0[_1998].y) * _2066) * _2067) + _1871;
        _1987 = (((((_2047 * _1696) + _424) * cbLight._m0[_1998].z) * _2066) * _2067) + _1873;
    }
    float _2201;
    float _2203;
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    if (_1499.y == 0u)
    {
        float _2142 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2142;
        float _2144 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2142;
        float _2145 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2142;
        uvec4 _2157 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2158 = _2157.x;
        uint _2169 = uint((float(_2157.y) * floor(float(uint(cbSceneParam._m0[85u].y * _355) / _2158))) + floor(float(uint(cbSceneParam._m0[85u].x * _354) / _2158)));
        float _2179 = (log2(_2145 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2180 = isnan(0.0) ? _2179 : (isnan(_2179) ? 0.0 : max(_2179, 0.0));
        uint _2183 = uint(isnan(14.0) ? _2180 : (isnan(_2180) ? 14.0 : min(_2180, 14.0)));
        uvec4 _2188 = texelFetch(g_lightClusterGridBuffer, int(((_2183 << 2u) + (_2169 << 6u)) >> 2u));
        uint _2189 = _2188.x;
        uint _2190 = _2157.z;
        float _2289;
        float _2291;
        float _2293;
        float _2295;
        float _2297;
        float _2299;
        if (((((1u << ((_2190 >> 4u) & 15u)) + 4294967295u) & _2189) == 0u) || ((_2190 & 240u) == 0u))
        {
            _2289 = 0.0;
            _2291 = 0.0;
            _2293 = 0.0;
            _2295 = 0.0;
            _2297 = 0.0;
            _2299 = 0.0;
        }
        else
        {
            float _2290;
            float _2292;
            float _2294;
            float _2296;
            float _2298;
            float _2300;
            float _2433 = 0.0;
            float _2434 = 0.0;
            float _2435 = 0.0;
            float _2436 = 0.0;
            float _2437 = 0.0;
            float _2438 = 0.0;
            uint _2439 = 0u;
            uint _2448;
            bool _2449;
            for (;;)
            {
                _2448 = texelFetch(g_lightClassification, int((((_2183 << 5u) + (_2169 << 9u)) + (_2439 << 2u)) >> 2u)).x;
                _2449 = _2448 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2449)
                {
                    frontier_phi_63_pred = _2438;
                    frontier_phi_63_pred_1 = _2437;
                    frontier_phi_63_pred_2 = _2436;
                    frontier_phi_63_pred_3 = _2435;
                    frontier_phi_63_pred_4 = _2434;
                    frontier_phi_63_pred_5 = _2433;
                }
                else
                {
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    uint _2563;
                    _2557 = _2433;
                    _2558 = _2434;
                    _2559 = _2435;
                    _2560 = _2436;
                    _2561 = _2437;
                    _2562 = _2438;
                    _2563 = _2448;
                    float _2489;
                    float _2490;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    for (;;)
                    {
                        uint _2567 = uint(findLSB(_2563)) + (_2439 << 5u);
                        uint _2564 = (_2563 + 4294967295u) & _2563;
                        uint _2569 = _2567 * 48u;
                        vec4 _2583 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2569)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 3u)).x));
                        uint _2589 = (_2567 * 48u) + 4u;
                        vec4 _2602 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2589)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2589 + 3u)).x));
                        uint _2608 = (_2567 * 48u) + 8u;
                        vec3 _2619 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2608)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2608 + 2u)).x));
                        float _2623 = _2583.x - _2143;
                        float _2624 = _2583.y - _2144;
                        float _2625 = _2583.z - _2145;
                        float _2626 = dot(vec3(_2623, _2624, _2625), vec3(_2623, _2624, _2625));
                        float _2629 = inversesqrt(_2626);
                        float _2630 = _2629 * _2623;
                        float _2631 = _2629 * _2624;
                        float _2632 = _2629 * _2625;
                        float _2633 = dot(vec3(_376, _379, _382), vec3(_2630, _2631, _2632));
                        float _2638 = 1.0 - (_2626 * _2583.w);
                        float _3911 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                        float _2639 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                        float _2640 = sqrt(_2626) * _2602.w;
                        float _2643 = 1.39999997615814208984375 / (_2640 + 1.39999997615814208984375);
                        float _2644 = _2643 * _2643;
                        float _2647 = ((1.0 - _2644) * _2633) + _2644;
                        float _2650 = _2640 * _2640;
                        float _2654 = ((isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0))) * _2639) / ((_2650 * 0.699999988079071044921875) + 1.0);
                        float _2658 = (-0.0) - _2143;
                        float _2659 = (-0.0) - _2144;
                        float _2660 = (-0.0) - _2145;
                        float _2664 = inversesqrt(dot(vec3(_2658, _2659, _2660), vec3(_2658, _2659, _2660)));
                        float _2665 = _2664 * _2658;
                        float _2666 = _2664 * _2659;
                        float _2667 = _2664 * _2660;
                        float _2675 = exp2(log2(1.0 / ((_2650 * 3.5) + 5.0)) * 0.25);
                        float _2676 = 1.0 - _452;
                        float _2683 = sqrt(1.0 - ((1.0 - (_2676 * _2676)) * (1.0 - (_2675 * _2675))));
                        float _2684 = _2683 * _2683;
                        float _2685 = _2684 * _2684;
                        float _2686 = _2665 + _2630;
                        float _2687 = _2666 + _2631;
                        float _2688 = _2667 + _2632;
                        float _2692 = inversesqrt(dot(vec3(_2686, _2687, _2688), vec3(_2686, _2687, _2688)));
                        float _2696 = dot(vec3(_376, _379, _382), vec3(_2665, _2666, _2667));
                        float _3927 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2699 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                        float _2700 = dot(vec3(_376, _379, _382), vec3(_2692 * _2686, _2692 * _2687, _2692 * _2688));
                        float _3938 = isnan(0.0) ? _2700 : (isnan(_2700) ? 0.0 : max(_2700, 0.0));
                        float _2703 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                        float _2707 = ((_2703 * _2703) * (_2685 + (-1.0))) + 1.0;
                        float _2708 = _2643 * _2684;
                        float _2709 = _2708 * _2708;
                        float _2712 = ((1.0 - _2709) * _2633) + _2709;
                        float _3949 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2713 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
                        float _2714 = 1.0 - _2684;
                        float _2724 = (0.5 / (((_2713 * ((_2699 * _2714) + _2684)) + 9.9999999392252902907785028219223e-09) + (((_2713 * _2714) + _2684) * _2699))) * _2713;
                        float _3960 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                        float _2735 = (((_2685 * 3.1415927410125732421875) * (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0)))) / ((_2707 * _2707) * ((_2650 * 2.1991131305694580078125) + 3.141590118408203125))) * _2639;
                        _2492 = (_2654 * _2602.x) + _2560;
                        _2493 = (_2654 * _2602.y) + _2561;
                        _2494 = (_2654 * _2602.z) + _2562;
                        _2489 = (_2735 * _2619.x) + _2557;
                        _2490 = (_2735 * _2619.y) + _2558;
                        _2491 = (_2735 * _2619.z) + _2559;
                        if (_2564 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2557 = _2489;
                            _2558 = _2490;
                            _2559 = _2491;
                            _2560 = _2492;
                            _2561 = _2493;
                            _2562 = _2494;
                            _2563 = _2564;
                        }
                    }
                    frontier_phi_63_pred = _2494;
                    frontier_phi_63_pred_1 = _2493;
                    frontier_phi_63_pred_2 = _2492;
                    frontier_phi_63_pred_3 = _2491;
                    frontier_phi_63_pred_4 = _2490;
                    frontier_phi_63_pred_5 = _2489;
                }
                _2300 = frontier_phi_63_pred;
                _2298 = frontier_phi_63_pred_1;
                _2296 = frontier_phi_63_pred_2;
                _2294 = frontier_phi_63_pred_3;
                _2292 = frontier_phi_63_pred_4;
                _2290 = frontier_phi_63_pred_5;
                uint _2440 = _2439 + 1u;
                if (_2440 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2433 = _2290;
                    _2434 = _2292;
                    _2435 = _2294;
                    _2436 = _2296;
                    _2437 = _2298;
                    _2438 = _2300;
                    _2439 = _2440;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2289 = _2290;
            _2291 = _2292;
            _2293 = _2294;
            _2295 = _2296;
            _2297 = _2298;
            _2299 = _2300;
        }
        uvec4 _2303 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2304 = _2303.z;
        uint _2306 = (_2304 >> 8u) & 15u;
        float _2401;
        float _2403;
        float _2405;
        float _2407;
        float _2409;
        float _2411;
        if (((4294967295u << _2306) & _2189) == 0u)
        {
            _2401 = _2289;
            _2403 = _2291;
            _2405 = _2293;
            _2407 = _2295;
            _2409 = _2297;
            _2411 = _2299;
        }
        else
        {
            float _2426 = inversesqrt(dot(vec3(_2143, _2144, _2145), vec3(_2143, _2144, _2145)));
            float _2427 = _2426 * _2143;
            float _2428 = _2426 * _2144;
            float _2429 = _2426 * _2145;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2306 < ((_2304 >> 12u) & 15u))
            {
                float _2402;
                float _2404;
                float _2406;
                float _2408;
                float _2410;
                float _2412;
                float _2540 = _2289;
                float _2541 = _2291;
                float _2542 = _2293;
                float _2543 = _2295;
                float _2544 = _2297;
                float _2545 = _2299;
                uint _2546 = _2306;
                uint _2555;
                bool _2556;
                for (;;)
                {
                    _2555 = texelFetch(g_lightClassification, int((((_2183 << 5u) + (_2169 << 9u)) + (_2546 << 2u)) >> 2u)).x;
                    _2556 = _2555 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2556)
                    {
                        frontier_phi_69_pred = _2545;
                        frontier_phi_69_pred_1 = _2544;
                        frontier_phi_69_pred_2 = _2543;
                        frontier_phi_69_pred_3 = _2542;
                        frontier_phi_69_pred_4 = _2541;
                        frontier_phi_69_pred_5 = _2540;
                    }
                    else
                    {
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _2753 = _2540;
                        float _2754 = _2541;
                        float _2755 = _2542;
                        float _2756 = _2543;
                        float _2757 = _2544;
                        float _2758 = _2545;
                        uint _2759 = _2555;
                        uint _2760;
                        vec4 _2785;
                        float _2786;
                        vec4 _2801;
                        vec3 _2813;
                        vec4 _2829;
                        vec4 _2845;
                        float _2892;
                        bool _2893;
                        for (;;)
                        {
                            uint _2770 = ((_2546 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2759));
                            _2760 = (_2759 + 4294967295u) & _2759;
                            uint _2772 = _2770 * 40u;
                            _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            _2786 = _2785.w;
                            uint _2788 = (_2770 * 40u) + 4u;
                            _2801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2788 + 3u)).x));
                            uint _2803 = (_2770 * 40u) + 8u;
                            _2813 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2803)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2803 + 2u)).x));
                            uint _2816 = (_2770 * 40u) + 16u;
                            _2829 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2816)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2816 + 3u)).x));
                            uint _2832 = (_2770 * 40u) + 20u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            uint _2848 = (_2770 * 40u) + 24u;
                            vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2867 = (_2770 * 40u) + 28u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2892 = fma(_2145, _2880.z, fma(_2144, _2880.y, _2880.x * _2143)) + _2880.w;
                            _2893 = !((fma(_2145, _2861.z, fma(_2144, _2861.y, _2861.x * _2143)) + _2861.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2893)
                            {
                                float _2920 = _2785.x - _2143;
                                float _2921 = _2785.y - _2144;
                                float _2922 = _2785.z - _2145;
                                float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                                float _2926 = inversesqrt(_2923);
                                float _2927 = _2926 * _2920;
                                float _2928 = _2926 * _2921;
                                float _2929 = _2926 * _2922;
                                float _2933 = 1.0 - (_2923 / (_2786 * _2786));
                                float _3971 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2934 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                                float _2938 = sqrt(_2923) * _2801.w;
                                float _2940 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                                float _2941 = _2940 * _2940;
                                float _2944 = ((1.0 - _2941) * dot(vec3(_2927, _2928, _2929), vec3(_376, _379, _382))) + _2941;
                                float _2947 = _2938 * _2938;
                                float _2951 = (fma(_2145, _2829.z, fma(_2144, _2829.y, _2829.x * _2143)) + _2829.w) / _2892;
                                float _2952 = (fma(_2145, _2845.z, fma(_2144, _2845.y, _2845.x * _2143)) + _2845.w) / _2892;
                                float _2956 = 1.0 - dot(vec2(_2951, _2952), vec2(_2951, _2952));
                                float _3987 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                                float _2958 = _2957 * (((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2934) / ((_2947 * 0.699999988079071044921875) + 1.0));
                                float _2970 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                                float _2971 = 1.0 - _452;
                                float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                                float _2979 = _2978 * _2978;
                                float _2980 = _2979 * _2979;
                                float _2981 = _2927 - _2427;
                                float _2982 = _2928 - _2428;
                                float _2983 = _2929 - _2429;
                                float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                                float _2991 = dot(vec3(_376, _379, _382), vec3((-0.0) - _2427, (-0.0) - _2428, (-0.0) - _2429));
                                float _3998 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2994 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                                float _2995 = dot(vec3(_376, _379, _382), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                                float _4009 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2998 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                                float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                                float _3003 = _2940 * _2979;
                                float _3004 = _3003 * _3003;
                                float _3010 = ((1.0 - _3004) * dot(vec3(_376, _379, _382), vec3(_2927, _2928, _2929))) + _3004;
                                float _4020 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                                float _3012 = 1.0 - _2979;
                                float _3022 = (0.5 / (((_3011 * ((_2994 * _3012) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3011 * _3012) + _2979) * _2994))) * _3011;
                                float _4031 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3032 = (_2957 * _2934) * (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) / ((_3002 * _3002) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2958 * _2801.z;
                                frontier_phi_75_pred_1 = _2958 * _2801.y;
                                frontier_phi_75_pred_2 = _2958 * _2801.x;
                                frontier_phi_75_pred_3 = _3032 * _2813.z;
                                frontier_phi_75_pred_4 = _3032 * _2813.y;
                                frontier_phi_75_pred_5 = _3032 * _2813.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3041 = frontier_phi_75_pred;
                            _3040 = frontier_phi_75_pred_1;
                            _3039 = frontier_phi_75_pred_2;
                            _3038 = frontier_phi_75_pred_3;
                            _3037 = frontier_phi_75_pred_4;
                            _3036 = frontier_phi_75_pred_5;
                            _2743 = _3039 + _2756;
                            _2744 = _3040 + _2757;
                            _2745 = _3041 + _2758;
                            _2740 = _3036 + _2753;
                            _2741 = _3037 + _2754;
                            _2742 = _3038 + _2755;
                            if (_2760 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2760;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2745;
                        frontier_phi_69_pred_1 = _2744;
                        frontier_phi_69_pred_2 = _2743;
                        frontier_phi_69_pred_3 = _2742;
                        frontier_phi_69_pred_4 = _2741;
                        frontier_phi_69_pred_5 = _2740;
                    }
                    _2412 = frontier_phi_69_pred;
                    _2410 = frontier_phi_69_pred_1;
                    _2408 = frontier_phi_69_pred_2;
                    _2406 = frontier_phi_69_pred_3;
                    _2404 = frontier_phi_69_pred_4;
                    _2402 = frontier_phi_69_pred_5;
                    uint _2547 = _2546 + 1u;
                    if (_2547 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2540 = _2402;
                        _2541 = _2404;
                        _2542 = _2406;
                        _2543 = _2408;
                        _2544 = _2410;
                        _2545 = _2412;
                        _2546 = _2547;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2412;
                frontier_phi_57_58_ladder_1 = _2410;
                frontier_phi_57_58_ladder_2 = _2408;
                frontier_phi_57_58_ladder_3 = _2406;
                frontier_phi_57_58_ladder_4 = _2404;
                frontier_phi_57_58_ladder_5 = _2402;
            }
            else
            {
                frontier_phi_57_58_ladder = _2299;
                frontier_phi_57_58_ladder_1 = _2297;
                frontier_phi_57_58_ladder_2 = _2295;
                frontier_phi_57_58_ladder_3 = _2293;
                frontier_phi_57_58_ladder_4 = _2291;
                frontier_phi_57_58_ladder_5 = _2289;
            }
            _2401 = frontier_phi_57_58_ladder_5;
            _2403 = frontier_phi_57_58_ladder_4;
            _2405 = frontier_phi_57_58_ladder_3;
            _2407 = frontier_phi_57_58_ladder_2;
            _2409 = frontier_phi_57_58_ladder_1;
            _2411 = frontier_phi_57_58_ladder;
        }
        float _2416 = isnan(1.0) ? _436 : (isnan(_436) ? 1.0 : min(_436, 1.0));
        _2201 = (_2416 * _2407) + _1635;
        _2203 = (_2416 * _2409) + _1637;
        _2205 = (_2416 * _2411) + _1639;
        _2207 = ((_2401 * _421) * _2416) + _1983;
        _2209 = ((_2403 * _423) * _2416) + _1985;
        _2211 = ((_2405 * _424) * _2416) + _1987;
    }
    else
    {
        _2201 = _1635;
        _2203 = _1637;
        _2205 = _1639;
        _2207 = _1983;
        _2209 = _1985;
        _2211 = _1987;
    }
    float _4047 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _4058 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _4069 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    uint _2231 = _395 + 6u;
    float _2239 = _354 / cbSceneParam._m0[86u].x;
    float _2240 = _355 / cbSceneParam._m0[86u].y;
    vec4 _2254 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, (log2((isnan(cbSceneParam._m0[77u].w) ? _288 : (isnan(_288) ? cbSceneParam._m0[77u].w : min(_288, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2256 = _2254.x;
    float _2257 = _2254.y;
    float _2258 = _2254.z;
    float _2259 = _2254.w;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    if (_288 > cbSceneParam._m0[78u].w)
    {
        float _2314 = isnan(_288) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _288 : min(cbSceneParam._m0[80u].w, _288));
        float _2315 = _2314 / _288;
        float _2326 = _2315 * _339;
        float _2327 = _340 * _2315;
        float _2328 = (-0.0) - _2327;
        float _2329 = _2315 * _341;
        float _2331 = (cbSceneParam._m0[77u].w * _2328) / _2314;
        float _2332 = _2331 + cbSceneParam._m0[79u].w;
        float _2333 = cbSceneParam._m0[79u].w - _2327;
        float _2339 = sqrt(((_2326 * _2326) + (_2327 * _2327)) + (_2329 * _2329));
        float _2342 = (1.0 - (cbSceneParam._m0[77u].w / _2314)) * _2339;
        float _2347 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2349 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2502;
        if (abs((_2328 - _2331) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2502 = ((((_2332 > 0.0) ? exp2(_2347 * _2332) : (2.0 - exp2(_2349 * _2332))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2342;
        }
        else
        {
            float _2462 = 1.0 / cbSceneParam._m0[80u].x;
            float _2463 = isnan(_2333) ? _2332 : (isnan(_2332) ? _2333 : max(_2332, _2333));
            float _2464 = isnan(_2333) ? _2332 : (isnan(_2332) ? _2333 : min(_2332, _2333));
            float _2473 = isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : min(_2463, 0.0));
            float _2474 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : min(_2464, 0.0));
            _2502 = ((abs(_2339 / _2328) * cbSceneParam._m0[80u].y) * ((((_2473 - _2474) * 2.0) - ((exp2(_2347 * (isnan(0.0) ? _2463 : (isnan(_2463) ? 0.0 : max(_2463, 0.0)))) - exp2(_2347 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0))))) * _2462)) - ((exp2(_2349 * _2473) - exp2(_2349 * _2474)) * _2462))) + (_2342 * cbSceneParam._m0[80u].z);
        }
        vec4 _2504 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2239, _2240, 1.0), 0.0);
        float _2513 = exp2((_2502 * (-1.44269502162933349609375)) * (1.0 - _2504.w));
        float _2514 = log2(_2513);
        float _2530 = log2(_2259);
        _2351 = (exp2(_2530 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].x)) * _2504.x) / cbSceneParam._m0[78u].x)) + _2256;
        _2353 = (exp2(_2530 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].y)) * _2504.y) / cbSceneParam._m0[78u].y)) + _2257;
        _2355 = (exp2(_2530 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2514 * cbSceneParam._m0[78u].z)) * _2504.z) / cbSceneParam._m0[78u].z)) + _2258;
        _2357 = _2513 * _2259;
    }
    else
    {
        _2351 = _2256;
        _2353 = _2257;
        _2355 = _2258;
        _2357 = _2259;
    }
    float _2369 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2370 = _2369 == 3.0;
    float _2371 = log2(_2357);
    float _2378 = exp2(_2371 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_2201 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _436))) + ((_2207 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2379 = exp2(_2371 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_2203 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _436))) + ((_2209 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2380 = exp2(_2371 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_2205 + ((isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0))) * _436))) + ((_2211 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _1246)) * cbPerFrame._m0[3u].x));
    float _2389 = (_2369 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2389 * (_2370 ? _2378 : (_2378 + (cbSceneParam._m0[72u].w * _2351)));
    SV_Target.y = _2389 * (_2370 ? _2379 : (_2379 + (cbSceneParam._m0[72u].w * _2353)));
    SV_Target.z = _2389 * (_2370 ? _2380 : (_2380 + (cbSceneParam._m0[72u].w * _2355)));
    SV_Target.w = cbInstanceData._m0[_2231].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2231].w;
}


