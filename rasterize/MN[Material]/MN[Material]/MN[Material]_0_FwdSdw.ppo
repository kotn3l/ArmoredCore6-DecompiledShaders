#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MN_Material_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _813;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _233 = texture(sampler2D(MN_Material_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _242 = (_233.x * 2.0) + (-1.0);
    float _244 = (_233.y * 2.0) + (-1.0);
    float _245 = dot(vec2(_242, _244), vec2(_242, _244));
    float _3433 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _251 = sqrt(1.0 - (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))));
    float _253 = cbMtdParam._m0[10u].y + _233.z;
    float _256 = fma(_251, _207, fma(_244, _199 * TANGENT.x, (_185 * _178) * _242));
    float _259 = fma(_251, _208, fma(_244, _199 * TANGENT.y, (_185 * _179) * _242));
    float _262 = fma(_251, _209, fma(_244, _199 * TANGENT.z, (_185 * _180) * _242));
    float _266 = inversesqrt(dot(vec3(_256, _259, _262), vec3(_256, _259, _262)));
    float _267 = _266 * _256;
    float _268 = _266 * _259;
    float _269 = _266 * _262;
    float _3444 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _270 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
    float _3455 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3466 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3477 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3488 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _274 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _290 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _331 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _341 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _331);
    float _342 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _331);
    float _343 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _331);
    float _347 = inversesqrt(dot(vec3(_341, _342, _343), vec3(_341, _342, _343)));
    float _348 = _341 * _347;
    float _349 = _342 * _347;
    float _350 = _343 * _347;
    float _356 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _357 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _378 = fma(_269, cbSceneParam._m0[5u].z, fma(_268, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _267));
    float _381 = fma(_269, cbSceneParam._m0[6u].z, fma(_268, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _267));
    float _384 = fma(_269, cbSceneParam._m0[7u].z, fma(_268, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _267));
    uint _397 = uint(roundEven(NORMAL.w)) * 13u;
    uint _400 = (_397 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _406 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0)))) * cbInstanceData._m0[_400].x;
    float _407 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0)))) * cbInstanceData._m0[_400].y;
    float _408 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0)))) * cbInstanceData._m0[_400].z;
    float _3499 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _409 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
    float _3510 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _410 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
    float _3521 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _411 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
    float _412 = 1.0 - _274;
    float _413 = _409 * _412;
    float _414 = _410 * _412;
    float _415 = _411 * _412;
    float _420 = (_409 + (-0.039999999105930328369140625)) * _274;
    float _421 = (_410 + (-0.039999999105930328369140625)) * _274;
    float _422 = (_411 + (-0.039999999105930328369140625)) * _274;
    float _423 = _420 + 0.039999999105930328369140625;
    float _425 = _421 + 0.039999999105930328369140625;
    float _426 = _422 + 0.039999999105930328369140625;
    vec4 _435 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _356, cbSceneParam._m0[86u].y * _357));
    float _438 = _435.x * TEXCOORD.z;
    float _439 = dot(vec3(_267, _268, _269), vec3(_348, _349, _350));
    float _442 = _439 * 2.0;
    float _446 = (_442 * _267) - _348;
    float _447 = (_442 * _268) - _349;
    float _448 = (_442 * _269) - _350;
    float _452 = abs(dot(vec3(_348, _349, _350), vec3(_267, _268, _269)));
    float _3532 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _454 = sqrt(_270);
    float _467 = exp2((_454 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_454 * 3.0));
    float _473 = (1.0 - _467) * ((_454 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _474 = _467 * _454;
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _506 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _510 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _812;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _537 = fma(_510, cbModelParam._m0[26u].z, fma(_506, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _502));
        float _541 = fma(_510, cbModelParam._m0[27u].z, fma(_506, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _502));
        float _545 = fma(_510, cbModelParam._m0[28u].z, fma(_506, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _502));
        float _570 = _502 + _267;
        float _571 = _506 + _268;
        float _572 = _510 + _269;
        float _582 = fma(_572, cbModelParam._m0[26u].z, fma(_571, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _570)) - _537;
        float _583 = fma(_572, cbModelParam._m0[27u].z, fma(_571, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _570)) - _541;
        float _584 = fma(_572, cbModelParam._m0[28u].z, fma(_571, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _570)) - _545;
        float _588 = inversesqrt(dot(vec3(_582, _583, _584), vec3(_582, _583, _584)));
        float _601 = ((_588 * _582) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_537 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _602 = ((_588 * _583) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_541 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _603 = ((_588 * _584) / cbModelParam._m0[34u].z) + ((((((_545 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_601, _602, _603), 0.0);
        float _640 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _641 = _640 * (_606.x + (-0.5));
        float _642 = _640 * (_606.y + (-0.5));
        float _643 = _640 * (_606.z + (-0.5));
        float _650 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _651 = _650 * (_613.x + (-0.5));
        float _652 = _650 * (_613.y + (-0.5));
        float _653 = _650 * (_613.z + (-0.5));
        float _660 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_620.x + (-0.5));
        float _662 = _660 * (_620.y + (-0.5));
        float _663 = _660 * (_620.z + (-0.5));
        float _670 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_627.x + (-0.5));
        float _672 = _670 * (_627.y + (-0.5));
        float _673 = _670 * (_627.z + (-0.5));
        float _674 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        float _675 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _676 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        float _677 = _641 * 0.5;
        float _678 = _651 * 0.5;
        float _679 = _661 * 0.5;
        float _680 = dot(vec3(_677, _678, _679), vec3(_677, _678, _679));
        float _685 = (_680 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_680);
        float _694 = (dot(vec3(_267, _268, _269), vec3(_685 * _677, _685 * _678, _685 * _679)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
        float _704 = sqrt(((_678 * _678) + (_677 * _677)) + (_679 * _679)) / (_674 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3580 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_706 + 1.0))) + _711) * _674;
        float _721 = _642 * 0.5;
        float _722 = _652 * 0.5;
        float _723 = _662 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_267, _268, _269), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_675 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3613 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_748 + 1.0))) + _753) * _675;
        float _763 = _643 * 0.5;
        float _764 = _653 * 0.5;
        float _765 = _663 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_267, _268, _269), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3624 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_676 + 9.9999997473787516355514526367188e-06);
        float _3635 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3646 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * (_790 + 1.0))) + _795) * _676;
        _812 = _643;
        _814 = _642;
        _815 = _641;
        _816 = _653;
        _817 = _652;
        _818 = _651;
        _819 = _663;
        _820 = _662;
        _821 = _661;
        _822 = _676;
        _823 = _675;
        _824 = _674;
        _825 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _826 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _827 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
    }
    else
    {
        _812 = _813;
        _814 = _813;
        _815 = _813;
        _816 = _813;
        _817 = _813;
        _818 = _813;
        _819 = _813;
        _820 = _813;
        _821 = _813;
        _822 = _813;
        _823 = _813;
        _824 = _813;
        _825 = 0.0;
        _826 = 0.0;
        _827 = 0.0;
    }
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _853 = fma(_510, cbModelParam._m0[30u].z, fma(_506, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _502));
        float _857 = fma(_510, cbModelParam._m0[31u].z, fma(_506, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _502));
        float _861 = fma(_510, cbModelParam._m0[32u].z, fma(_506, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _502));
        float _884 = _502 + _267;
        float _885 = _506 + _268;
        float _886 = _510 + _269;
        float _896 = fma(_886, cbModelParam._m0[30u].z, fma(_885, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _884)) - _853;
        float _897 = fma(_886, cbModelParam._m0[31u].z, fma(_885, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _884)) - _857;
        float _898 = fma(_886, cbModelParam._m0[32u].z, fma(_885, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _884)) - _861;
        float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
        float _915 = ((_902 * _896) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_853 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_902 * _897) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_857 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_902 * _898) / cbModelParam._m0[35u].z) + ((((((_861 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        float _952 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_919.x + (-0.5));
        float _954 = _952 * (_919.y + (-0.5));
        float _955 = _952 * (_919.z + (-0.5));
        float _962 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_926.x + (-0.5));
        float _964 = _962 * (_926.y + (-0.5));
        float _965 = _962 * (_926.z + (-0.5));
        float _972 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_933.x + (-0.5));
        float _974 = _972 * (_933.y + (-0.5));
        float _975 = _972 * (_933.z + (-0.5));
        float _982 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_940.x + (-0.5));
        float _984 = _982 * (_940.y + (-0.5));
        float _985 = _982 * (_940.z + (-0.5));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = _953 * 0.5;
        float _990 = _963 * 0.5;
        float _991 = _973 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1005 = (dot(vec3(_267, _268, _269), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1014 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1016 = _1015 * 2.0;
        float _1020 = (1.0 - _1015) / (_1015 + 1.0);
        float _3709 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1030 = ((((1.0 - _1021) * (_1016 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1016 + 1.0))) + _1021) * _986;
        float _1031 = _954 * 0.5;
        float _1032 = _964 * 0.5;
        float _1033 = _974 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_267, _268, _269), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3742 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1058 + 1.0))) + _1063) * _987;
        float _1073 = _955 * 0.5;
        float _1074 = _965 * 0.5;
        float _1075 = _975 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_267, _268, _269), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3775 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1100 + 1.0))) + _1105) * _988;
        _1122 = _955;
        _1123 = _954;
        _1124 = _953;
        _1125 = _965;
        _1126 = _964;
        _1127 = _963;
        _1128 = _975;
        _1129 = _974;
        _1130 = _973;
        _1131 = _988;
        _1132 = _987;
        _1133 = _986;
        _1134 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0)));
        _1135 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1136 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
    }
    else
    {
        _1122 = _813;
        _1123 = _813;
        _1124 = _813;
        _1125 = _813;
        _1126 = _813;
        _1127 = _813;
        _1128 = _813;
        _1129 = _813;
        _1130 = _813;
        _1131 = _813;
        _1132 = _813;
        _1133 = _813;
        _1134 = 0.0;
        _1135 = 0.0;
        _1136 = 0.0;
    }
    float _1146 = (cbModelParam._m0[1u].x * (_1134 - _825)) + _825;
    float _1147 = (cbModelParam._m0[1u].x * (_1135 - _826)) + _826;
    float _1148 = (cbModelParam._m0[1u].x * (_1136 - _827)) + _827;
    float _1169 = fma(_1148, cbSceneParam._m0[89u].z, fma(_1147, cbSceneParam._m0[89u].y, _1146 * cbSceneParam._m0[89u].x));
    float _1172 = fma(_1148, cbSceneParam._m0[90u].z, fma(_1147, cbSceneParam._m0[90u].y, _1146 * cbSceneParam._m0[90u].x));
    float _1175 = fma(_1148, cbSceneParam._m0[91u].z, fma(_1147, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1146));
    float _1190 = _446 * 0.5;
    float _1191 = _447 * 0.5;
    float _1192 = _448 * 0.5;
    float _1193 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_1124, _1127, _1130, _1133));
    float _1196 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_1123, _1126, _1129, _1132));
    float _1199 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_1122, _1125, _1128, _1131));
    float _1233;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1206 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_812, _816, _819, _822));
        float _1210 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_814, _817, _820, _823));
        float _1214 = dot(vec4(_1190, _1191, _1192, 1.0), vec4(_815, _818, _821, _824));
        float _1221 = dot(vec4(cbModelParam._m0[39u]), vec4(_1190, _1191, _1192, 1.0));
        _1233 = dot(vec3(isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)), isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1221) ? 0.0 : (isnan(0.0) ? _1221 : max(0.0, _1221))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1233 = 1.0;
    }
    float _1244;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1235 = dot(vec4(cbModelParam._m0[40u]), vec4(_1190, _1191, _1192, 1.0));
        _1244 = dot(vec3(isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1235) ? 0.0 : (isnan(0.0) ? _1235 : max(0.0, _1235))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1244 = 1.0;
    }
    float _1248 = (_1244 * cbModelParam._m0[1u].x) + (_1233 * (1.0 - cbModelParam._m0[1u].x));
    float _1258 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _270);
    float _1259 = isnan(_1258) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1258 : min(cbModelParam._m0[25u].z, _1258));
    float _1341;
    float _1343;
    float _1345;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1308 = fma(_510, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502)) + cbModelParam._m0[13u].w;
        float _1312 = fma(_510, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502)) + cbModelParam._m0[14u].w;
        float _1316 = fma(_510, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502)) + cbModelParam._m0[15u].w;
        float _1319 = fma(_448, cbModelParam._m0[13u].z, fma(_447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _446));
        float _1322 = fma(_448, cbModelParam._m0[14u].z, fma(_447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _446));
        float _1325 = fma(_448, cbModelParam._m0[15u].z, fma(_447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _446));
        float _1353;
        if (_1319 > 0.0)
        {
            _1353 = abs((1.0 - _1308) / _1319);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1308 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1353 = frontier_phi_16_14_ladder;
        }
        float _1529;
        if (_1322 > 0.0)
        {
            _1529 = abs((1.0 - _1312) / _1322);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1322 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1312 + 1.0) / _1322);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1529 = frontier_phi_25_21_ladder;
        }
        float _1825;
        if (_1325 > 0.0)
        {
            _1825 = abs((1.0 - _1316) / _1325);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1325 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1316 + 1.0) / _1325);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1825 = frontier_phi_37_32_ladder;
        }
        float _1827 = isnan(_1529) ? _1353 : (isnan(_1353) ? _1529 : min(_1353, _1529));
        float _1828 = isnan(_1825) ? _1827 : (isnan(_1827) ? _1825 : min(_1827, _1825));
        float _1832 = (_1828 * _1319) + _1308;
        float _1833 = (_1828 * _1322) + _1312;
        float _1834 = (_1828 * _1325) + _1316;
        float _1835 = _1828 * 9.9999997473787516355514526367188e-05;
        float _1837 = (-1.0) - _1835;
        float _1839 = _1835 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1834 > _1839) || ((_1834 < _1837) || ((_1833 > _1839) || ((_1833 < _1837) || ((_1832 < _1837) || (_1832 > _1839))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1979 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1834, cbModelParam._m0[9u].z, fma(_1833, cbModelParam._m0[9u].y, _1832 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1834, cbModelParam._m0[10u].z, fma(_1833, cbModelParam._m0[10u].y, _1832 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1834, cbModelParam._m0[11u].z, fma(_1833, cbModelParam._m0[11u].y, _1832 * cbModelParam._m0[11u].x))), _1259);
            frontier_phi_15_37_ladder = _1979.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1979.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1979.z * cbModelParam._m0[1u].y;
        }
        _1341 = frontier_phi_15_37_ladder_1;
        _1343 = frontier_phi_15_37_ladder;
        _1345 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1329 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_446, _447, _448), _1259);
        _1341 = _1329.x * cbModelParam._m0[1u].y;
        _1343 = _1329.y * cbModelParam._m0[1u].y;
        _1345 = _1329.z * cbModelParam._m0[1u].y;
    }
    float _1349 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _270);
    float _1350 = isnan(_1349) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1349 : min(cbModelParam._m0[25u].w, _1349));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1407 = fma(_510, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502)) + cbModelParam._m0[21u].w;
        float _1411 = fma(_510, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502)) + cbModelParam._m0[22u].w;
        float _1415 = fma(_510, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502)) + cbModelParam._m0[23u].w;
        float _1418 = fma(_448, cbModelParam._m0[21u].z, fma(_447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _446));
        float _1421 = fma(_448, cbModelParam._m0[22u].z, fma(_447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _446));
        float _1424 = fma(_448, cbModelParam._m0[23u].z, fma(_447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _446));
        float _1534;
        if (_1418 > 0.0)
        {
            _1534 = abs((1.0 - _1407) / _1418);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1407 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1534 = frontier_phi_27_23_ladder;
        }
        float _1852;
        if (_1421 > 0.0)
        {
            _1852 = abs((1.0 - _1411) / _1421);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1411 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1852 = frontier_phi_39_34_ladder;
        }
        float _2190;
        if (_1424 > 0.0)
        {
            _2190 = abs((1.0 - _1415) / _1424);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1415 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2190 = frontier_phi_49_46_ladder;
        }
        float _2192 = isnan(_1852) ? _1534 : (isnan(_1534) ? _1852 : min(_1534, _1852));
        float _2193 = isnan(_2190) ? _2192 : (isnan(_2192) ? _2190 : min(_2192, _2190));
        float _2197 = (_2193 * _1418) + _1407;
        float _2198 = (_2193 * _1421) + _1411;
        float _2199 = (_2193 * _1424) + _1415;
        float _2200 = _2193 * 9.9999997473787516355514526367188e-05;
        float _2201 = (-1.0) - _2200;
        float _2203 = _2200 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2199 > _2203) || ((_2199 < _2201) || ((_2198 > _2203) || ((_2198 < _2201) || ((_2197 < _2201) || (_2197 > _2203))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2321 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2199, cbModelParam._m0[17u].z, fma(_2198, cbModelParam._m0[17u].y, _2197 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2199, cbModelParam._m0[18u].z, fma(_2198, cbModelParam._m0[18u].y, _2197 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2199, cbModelParam._m0[19u].z, fma(_2198, cbModelParam._m0[19u].y, _2197 * cbModelParam._m0[19u].x))), _1350);
            frontier_phi_24_49_ladder = _2321.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2321.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2321.x * cbModelParam._m0[1u].z;
        }
        _1443 = frontier_phi_24_49_ladder_2;
        _1445 = frontier_phi_24_49_ladder_1;
        _1447 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_446, _447, _448), _1350);
        _1443 = _1427.x * cbModelParam._m0[1u].z;
        _1445 = _1427.y * cbModelParam._m0[1u].z;
        _1447 = _1427.z * cbModelParam._m0[1u].z;
    }
    float _1460 = (((_473 * _423) + _474) * _438) * ((cbModelParam._m0[1u].w * (_1443 - _1341)) + _1341);
    float _1462 = (((_473 * _425) + _474) * _438) * ((cbModelParam._m0[1u].w * (_1445 - _1343)) + _1343);
    float _1464 = (((_473 * _426) + _474) * _438) * ((cbModelParam._m0[1u].w * (_1447 - _1345)) + _1345);
    float _1467 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1462, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1470 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1462, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1473 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1462, cbSceneParam._m0[91u].y, _1460 * cbSceneParam._m0[91u].x));
    float _1508 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1512 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1516 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1520 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1521 = _1508 / _1520;
    float _1522 = _1512 / _1520;
    float _1523 = _1516 / _1520;
    float _1670;
    float _1671;
    float _1672;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1550 = ((uint(_1523 > cbSceneParam._m0[59u].y) + uint(_1523 > cbSceneParam._m0[59u].x)) + uint(_1523 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1551 = _1550 + 43u;
        uint _1559 = _1550 + 44u;
        uint _1567 = _1550 + 45u;
        uint _1575 = _1550 + 46u;
        float _1586 = fma(_1520, cbSceneParam._m0[_1551].w, fma(_1516, cbSceneParam._m0[_1551].z, fma(_1512, cbSceneParam._m0[_1551].y, _1508 * cbSceneParam._m0[_1551].x)));
        float _1590 = fma(_1520, cbSceneParam._m0[_1559].w, fma(_1516, cbSceneParam._m0[_1559].z, fma(_1512, cbSceneParam._m0[_1559].y, _1508 * cbSceneParam._m0[_1559].x)));
        float _1598 = fma(_1520, cbSceneParam._m0[_1575].w, fma(_1516, cbSceneParam._m0[_1575].z, fma(_1512, cbSceneParam._m0[_1575].y, _1508 * cbSceneParam._m0[_1575].x)));
        float _1603 = cbSceneParam._m0[33u].z * _1598;
        float _1605 = cbSceneParam._m0[33u].w * _1598;
        float _1608 = fma(_1520, cbSceneParam._m0[_1567].w, fma(_1516, cbSceneParam._m0[_1567].z, fma(_1512, cbSceneParam._m0[_1567].y, _1508 * cbSceneParam._m0[_1567].x))) / _1598;
        float _1656 = (cbSceneParam._m0[33u].x - sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523))) * cbSceneParam._m0[33u].y;
        float _3901 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
        float _1663 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1603 + _1586) / _1598, (_1605 + _1590) / _1598), _1608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1605 + _1586) / _1598, (_1590 - _1603) / _1598), _1608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1586 - _1603) / _1598, (_1590 - _1605) / _1598), _1608), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1586 - _1605) / _1598, (_1603 + _1590) / _1598), _1608), 0.0)).x), vec4(0.25)));
        _1670 = 1.0 - (_1663 * cbSceneParam._m0[34u].x);
        _1671 = 1.0 - (_1663 * cbSceneParam._m0[34u].y);
        _1672 = 1.0 - (_1663 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1670 = 1.0;
        _1671 = 1.0;
        _1672 = 1.0;
    }
    float _1736;
    float _1738;
    float _1740;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1724 = fma(_1520, cbSceneParam._m0[63u].w, fma(_1516, cbSceneParam._m0[63u].z, fma(_1512, cbSceneParam._m0[63u].y, _1508 * cbSceneParam._m0[63u].x)));
        float _1725 = fma(_1520, cbSceneParam._m0[60u].w, fma(_1516, cbSceneParam._m0[60u].z, fma(_1512, cbSceneParam._m0[60u].y, _1508 * cbSceneParam._m0[60u].x))) / _1724;
        float _1726 = fma(_1520, cbSceneParam._m0[61u].w, fma(_1516, cbSceneParam._m0[61u].z, fma(_1512, cbSceneParam._m0[61u].y, _1508 * cbSceneParam._m0[61u].x))) / _1724;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1725 >= cbSceneParam._m0[64u].x) && (_1726 >= cbSceneParam._m0[64u].y)) && (_1725 <= cbSceneParam._m0[64u].z)) && (_1726 <= cbSceneParam._m0[64u].w))
        {
            float _1865 = fma(_1520, cbSceneParam._m0[62u].w, fma(_1516, cbSceneParam._m0[62u].z, fma(_1512, cbSceneParam._m0[62u].y, _1508 * cbSceneParam._m0[62u].x))) / _1724;
            float _1869 = isnan(cbSceneParam._m0[41u].w) ? _1865 : (isnan(_1865) ? cbSceneParam._m0[41u].w : max(_1865, cbSceneParam._m0[41u].w));
            float _1912 = (cbSceneParam._m0[33u].x - sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523))) * cbSceneParam._m0[33u].y;
            float _3917 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
            float _1919 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1725, cbSceneParam._m0[33u].w + _1726), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1725, _1726 - cbSceneParam._m0[33u].z), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1725 - cbSceneParam._m0[33u].z, _1726 - cbSceneParam._m0[33u].w), _1869), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1725 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1726), _1869), 0.0)).x), vec4(0.25)));
            float _1923 = 1.0 - (_1919 * cbSceneParam._m0[34u].x);
            float _1924 = 1.0 - (_1919 * cbSceneParam._m0[34u].y);
            float _1925 = 1.0 - (_1919 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1924) ? _1671 : (isnan(_1671) ? _1924 : min(_1671, _1924));
            frontier_phi_36_35_ladder_1 = isnan(_1925) ? _1672 : (isnan(_1672) ? _1925 : min(_1672, _1925));
            frontier_phi_36_35_ladder_2 = isnan(_1923) ? _1670 : (isnan(_1670) ? _1923 : min(_1670, _1923));
        }
        else
        {
            frontier_phi_36_35_ladder = _1671;
            frontier_phi_36_35_ladder_1 = _1672;
            frontier_phi_36_35_ladder_2 = _1670;
        }
        _1736 = frontier_phi_36_35_ladder_2;
        _1738 = frontier_phi_36_35_ladder;
        _1740 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1736 = _1670;
        _1738 = _1671;
        _1740 = _1672;
    }
    uvec4 _1745 = floatBitsToUint(cbInstanceData._m0[_397 + 5u]);
    uint _1747 = _1745.x * 14u;
    uint _1748 = _1747 + 13u;
    float _1755 = _438 + (-1.0);
    float _1760 = (cbLight._m0[_1748].x * _1755) + 1.0;
    float _1761 = (cbLight._m0[_1748].y * _1755) + 1.0;
    float _1762 = (cbLight._m0[_1748].z * _1755) + 1.0;
    float _1763 = (cbLight._m0[_1748].w * _1755) + 1.0;
    uint _1764 = _1747 + 5u;
    float _1770 = isnan(1.0) ? _1761 : (isnan(_1761) ? 1.0 : min(_1761, 1.0));
    uint _1774 = _1747 + 4u;
    float _1784 = isnan(1.0) ? _1760 : (isnan(_1760) ? 1.0 : min(_1760, 1.0));
    uint _1788 = _1747 | 1u;
    float _1799 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_267, _268, _269));
    float _1802 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_267, _268, _269));
    float _3953 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    float _3964 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _1807 = (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * 0.3183098733425140380859375;
    float _1809 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1816 = ((cbLight._m0[_1764].x * _1770) * _1809) + (((cbLight._m0[_1774].x * _1736) * _1784) * _1807);
    float _1817 = ((_1770 * cbLight._m0[_1764].y) * _1809) + (((cbLight._m0[_1774].y * _1738) * _1784) * _1807);
    float _1818 = ((_1770 * cbLight._m0[_1764].z) * _1809) + (((cbLight._m0[_1774].z * _1740) * _1784) * _1807);
    uvec4 _1822 = floatBitsToUint(cbLight._m0[_1747 + 12u]);
    bool _1824 = _1822.x == 0u;
    float _1926;
    float _1928;
    float _1930;
    if (_1824)
    {
        _1926 = _1816;
        _1928 = _1817;
        _1930 = _1818;
    }
    else
    {
        uint _1934 = _1747 + 6u;
        float _1950 = (dot(vec3(cbLight._m0[_1747 + 2u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _1951 = _1950 * _1950;
        float _3975 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1953 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _1926 = (((cbLight._m0[_1934].x * 0.3183098733425140380859375) * _1952) * _1953) + _1816;
        _1928 = (((cbLight._m0[_1934].y * 0.3183098733425140380859375) * _1952) * _1953) + _1817;
        _1930 = (((cbLight._m0[_1934].z * 0.3183098733425140380859375) * _1952) * _1953) + _1818;
    }
    bool _1933 = _1822.y == 0u;
    float _1988;
    float _1990;
    float _1992;
    if (_1933)
    {
        _1988 = _1926;
        _1990 = _1928;
        _1992 = _1930;
    }
    else
    {
        uint _2161 = _1747 + 7u;
        float _2177 = (dot(vec3(cbLight._m0[_1747 + 3u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _2178 = _2177 * _2177;
        float _3991 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2179 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2180 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _1988 = (((cbLight._m0[_2161].x * 0.3183098733425140380859375) * _2179) * _2180) + _1926;
        _1990 = (((cbLight._m0[_2161].y * 0.3183098733425140380859375) * _2179) * _2180) + _1928;
        _1992 = (((cbLight._m0[_2161].z * 0.3183098733425140380859375) * _2179) * _2180) + _1930;
    }
    uint _1995 = _1747 + 8u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1747].w)) * _270) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1747].x + _348;
    float _2011 = cbLight._m0[_1747].y + _349;
    float _2012 = cbLight._m0[_1747].z + _350;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1747].xyz));
    float _4007 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
    float _4018 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _2024 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _2025 = dot(vec3(_267, _268, _269), vec3(_2017, _2018, _2019));
    float _4029 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1747].xyz), vec3(_2017, _2018, _2019));
    float _4040 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = _2009 * _2009;
    float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
    float _2045 = exp2(log2(1.0 - (isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0)))) * 5.0);
    float _2046 = 0.959999978542327880859375 - _420;
    float _2048 = 0.959999978542327880859375 - _421;
    float _2049 = 0.959999978542327880859375 - _422;
    float _2056 = 1.0 - _2009;
    float _2067 = (0.5 / (((_2024 * ((_2023 * _2056) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2056) + _2009) * _2023))) * _2023;
    float _4051 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2069 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
    uint _2083 = _1747 + 9u;
    float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1788].w)) * _270) * 0.949999988079071044921875);
    float _2095 = _2094 * _2094;
    float _2096 = cbLight._m0[_1788].x + _348;
    float _2097 = cbLight._m0[_1788].y + _349;
    float _2098 = cbLight._m0[_1788].z + _350;
    float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
    float _2103 = _2102 * _2096;
    float _2104 = _2102 * _2097;
    float _2105 = _2102 * _2098;
    float _2106 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1788].xyz));
    float _4062 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2109 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
    float _2110 = dot(vec3(_267, _268, _269), vec3(_2103, _2104, _2105));
    float _4073 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2113 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2114 = dot(vec3(cbLight._m0[_1788].xyz), vec3(_2103, _2104, _2105));
    float _4084 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2118 = _2095 * _2095;
    float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
    float _2129 = exp2(log2(1.0 - (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0)))) * 5.0);
    float _2136 = 1.0 - _2095;
    float _2146 = (0.5 / (((_2024 * ((_2109 * _2136) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2136) + _2095) * _2109))) * _2109;
    float _4095 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2148 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
    float _2158 = (((((_2129 * _2046) + _423) * cbLight._m0[_2083].x) * _2148) * _1770) + ((((cbLight._m0[_1995].x * _1736) * ((_2045 * _2046) + _423)) * _2069) * _1784);
    float _2159 = (((((_2129 * _2048) + _425) * cbLight._m0[_2083].y) * _2148) * _1770) + ((((cbLight._m0[_1995].y * _1738) * ((_2045 * _2048) + _425)) * _2069) * _1784);
    float _2160 = (((((_2129 * _2049) + _426) * cbLight._m0[_2083].z) * _2148) * _1770) + ((((cbLight._m0[_1995].z * _1740) * ((_2045 * _2049) + _426)) * _2069) * _1784);
    float _2216;
    float _2218;
    float _2220;
    if (_1824)
    {
        _2216 = _2158;
        _2218 = _2159;
        _2220 = _2160;
    }
    else
    {
        uint _2222 = _1747 + 2u;
        uint _2226 = _1747 + 10u;
        float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _270) * 0.949999988079071044921875);
        float _2241 = _2240 * _2240;
        float _2242 = cbLight._m0[_2222].x + _348;
        float _2243 = cbLight._m0[_2222].y + _349;
        float _2244 = cbLight._m0[_2222].z + _350;
        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
        float _2249 = _2248 * _2242;
        float _2250 = _2248 * _2243;
        float _2251 = _2248 * _2244;
        float _2252 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_2222].xyz));
        float _4106 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
        float _2256 = dot(vec3(_267, _268, _269), vec3(_2249, _2250, _2251));
        float _4117 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2260 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2249, _2250, _2251));
        float _4128 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _2241 * _2241;
        float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
        float _2275 = exp2(log2(1.0 - (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * 5.0);
        float _2282 = 1.0 - _2241;
        float _2292 = (0.5 / (((_2024 * ((_2255 * _2282) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2282) + _2241) * _2255))) * _2255;
        float _4139 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2294 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
        float _2295 = isnan(1.0) ? _1762 : (isnan(_1762) ? 1.0 : min(_1762, 1.0));
        _2216 = (((((_2275 * _2046) + _423) * cbLight._m0[_2226].x) * _2294) * _2295) + _2158;
        _2218 = (((((_2275 * _2048) + _425) * cbLight._m0[_2226].y) * _2294) * _2295) + _2159;
        _2220 = (((((_2275 * _2049) + _426) * cbLight._m0[_2226].z) * _2294) * _2295) + _2160;
    }
    float _2326;
    float _2328;
    float _2330;
    if (_1933)
    {
        _2326 = _2216;
        _2328 = _2218;
        _2330 = _2220;
    }
    else
    {
        uint _2337 = _1747 + 3u;
        uint _2341 = _1747 + 11u;
        float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _270) * 0.949999988079071044921875);
        float _2356 = _2355 * _2355;
        float _2357 = cbLight._m0[_2337].x + _348;
        float _2358 = cbLight._m0[_2337].y + _349;
        float _2359 = cbLight._m0[_2337].z + _350;
        float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
        float _2364 = _2363 * _2357;
        float _2365 = _2363 * _2358;
        float _2366 = _2363 * _2359;
        float _2367 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_2337].xyz));
        float _4155 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2371 = dot(vec3(_267, _268, _269), vec3(_2364, _2365, _2366));
        float _4166 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2375 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2364, _2365, _2366));
        float _4177 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2379 = _2356 * _2356;
        float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
        float _2390 = exp2(log2(1.0 - (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0)))) * 5.0);
        float _2397 = 1.0 - _2356;
        float _2407 = (0.5 / (((_2024 * ((_2370 * _2397) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2397) + _2356) * _2370))) * _2370;
        float _4188 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2409 = (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
        float _2410 = isnan(1.0) ? _1763 : (isnan(_1763) ? 1.0 : min(_1763, 1.0));
        _2326 = (((((_2390 * _2046) + _423) * cbLight._m0[_2341].x) * _2409) * _2410) + _2216;
        _2328 = (((((_2390 * _2048) + _425) * cbLight._m0[_2341].y) * _2409) * _2410) + _2218;
        _2330 = (((((_2390 * _2049) + _426) * cbLight._m0[_2341].z) * _2409) * _2410) + _2220;
    }
    float _2475;
    float _2477;
    float _2479;
    float _2481;
    float _2483;
    float _2485;
    if (_1745.y == 0u)
    {
        uvec4 _2431 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2432 = _2431.x;
        uint _2443 = uint((float(_2431.y) * floor(float(uint(cbSceneParam._m0[85u].y * _357) / _2432))) + floor(float(uint(cbSceneParam._m0[85u].x * _356) / _2432)));
        float _2453 = (log2(_1523 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2454 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        uint _2457 = uint(isnan(14.0) ? _2454 : (isnan(_2454) ? 14.0 : min(_2454, 14.0)));
        uvec4 _2462 = texelFetch(g_lightClusterGridBuffer, int(((_2457 << 2u) + (_2443 << 6u)) >> 2u));
        uint _2463 = _2462.x;
        uint _2464 = _2431.z;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        float _2550;
        float _2552;
        if (((((1u << ((_2464 >> 4u) & 15u)) + 4294967295u) & _2463) == 0u) || ((_2464 & 240u) == 0u))
        {
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
            _2550 = 0.0;
            _2552 = 0.0;
        }
        else
        {
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2551;
            float _2553;
            float _2686 = 0.0;
            float _2687 = 0.0;
            float _2688 = 0.0;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            uint _2692 = 0u;
            uint _2701;
            bool _2702;
            for (;;)
            {
                _2701 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2692 << 2u)) >> 2u)).x;
                _2702 = _2701 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2702)
                {
                    frontier_phi_68_pred = _2691;
                    frontier_phi_68_pred_1 = _2690;
                    frontier_phi_68_pred_2 = _2689;
                    frontier_phi_68_pred_3 = _2687;
                    frontier_phi_68_pred_4 = _2686;
                    frontier_phi_68_pred_5 = _2688;
                }
                else
                {
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    uint _2816;
                    _2810 = _2686;
                    _2811 = _2687;
                    _2812 = _2688;
                    _2813 = _2689;
                    _2814 = _2690;
                    _2815 = _2691;
                    _2816 = _2701;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    float _2746;
                    float _2747;
                    for (;;)
                    {
                        uint _2820 = uint(findLSB(_2816)) + (_2692 << 5u);
                        uint _2817 = (_2816 + 4294967295u) & _2816;
                        uint _2822 = _2820 * 48u;
                        vec4 _2836 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 3u)).x));
                        uint _2842 = (_2820 * 48u) + 4u;
                        vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2842)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2842 + 3u)).x));
                        uint _2861 = (_2820 * 48u) + 8u;
                        vec3 _2872 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x));
                        float _2876 = _2836.x - _1521;
                        float _2877 = _2836.y - _1522;
                        float _2878 = _2836.z - _1523;
                        float _2879 = dot(vec3(_2876, _2877, _2878), vec3(_2876, _2877, _2878));
                        float _2882 = inversesqrt(_2879);
                        float _2883 = _2882 * _2876;
                        float _2884 = _2882 * _2877;
                        float _2885 = _2882 * _2878;
                        float _2886 = dot(vec3(_378, _381, _384), vec3(_2883, _2884, _2885));
                        float _2891 = 1.0 - (_2879 * _2836.w);
                        float _4214 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2892 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2893 = sqrt(_2879) * _2855.w;
                        float _2896 = 1.39999997615814208984375 / (_2893 + 1.39999997615814208984375);
                        float _2897 = _2896 * _2896;
                        float _2900 = ((1.0 - _2897) * _2886) + _2897;
                        float _2903 = _2893 * _2893;
                        float _2907 = ((isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0))) * _2892) / ((_2903 * 0.699999988079071044921875) + 1.0);
                        float _2911 = (-0.0) - _1521;
                        float _2912 = (-0.0) - _1522;
                        float _2913 = (-0.0) - _1523;
                        float _2917 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
                        float _2918 = _2917 * _2911;
                        float _2919 = _2917 * _2912;
                        float _2920 = _2917 * _2913;
                        float _2927 = exp2(log2(1.0 / ((_2903 * 3.5) + 5.0)) * 0.25);
                        float _2928 = 1.0 - _454;
                        float _2935 = sqrt(1.0 - ((1.0 - (_2928 * _2928)) * (1.0 - (_2927 * _2927))));
                        float _2936 = _2935 * _2935;
                        float _2937 = _2936 * _2936;
                        float _2938 = _2918 + _2883;
                        float _2939 = _2919 + _2884;
                        float _2940 = _2920 + _2885;
                        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
                        float _2948 = dot(vec3(_378, _381, _384), vec3(_2918, _2919, _2920));
                        float _4230 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
                        float _2951 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                        float _2952 = dot(vec3(_378, _381, _384), vec3(_2944 * _2938, _2944 * _2939, _2944 * _2940));
                        float _4241 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                        float _2955 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2959 = ((_2955 * _2955) * (_2937 + (-1.0))) + 1.0;
                        float _2960 = _2896 * _2936;
                        float _2961 = _2960 * _2960;
                        float _2964 = ((1.0 - _2961) * _2886) + _2961;
                        float _4252 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                        float _2965 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2966 = 1.0 - _2936;
                        float _2976 = (0.5 / (((_2965 * ((_2951 * _2966) + _2936)) + 9.9999999392252902907785028219223e-09) + (((_2965 * _2966) + _2936) * _2951))) * _2965;
                        float _4263 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2987 = (((_2937 * 3.1415927410125732421875) * (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) / ((_2959 * _2959) * ((_2903 * 2.1991131305694580078125) + 3.141590118408203125))) * _2892;
                        _2745 = (_2907 * _2855.x) + _2813;
                        _2746 = (_2907 * _2855.y) + _2814;
                        _2747 = (_2907 * _2855.z) + _2815;
                        _2742 = (_2987 * _2872.x) + _2810;
                        _2743 = (_2987 * _2872.y) + _2811;
                        _2744 = (_2987 * _2872.z) + _2812;
                        if (_2817 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2810 = _2742;
                            _2811 = _2743;
                            _2812 = _2744;
                            _2813 = _2745;
                            _2814 = _2746;
                            _2815 = _2747;
                            _2816 = _2817;
                        }
                    }
                    frontier_phi_68_pred = _2747;
                    frontier_phi_68_pred_1 = _2746;
                    frontier_phi_68_pred_2 = _2745;
                    frontier_phi_68_pred_3 = _2743;
                    frontier_phi_68_pred_4 = _2742;
                    frontier_phi_68_pred_5 = _2744;
                }
                _2553 = frontier_phi_68_pred;
                _2551 = frontier_phi_68_pred_1;
                _2549 = frontier_phi_68_pred_2;
                _2545 = frontier_phi_68_pred_3;
                _2543 = frontier_phi_68_pred_4;
                _2547 = frontier_phi_68_pred_5;
                uint _2693 = _2692 + 1u;
                if (_2693 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2686 = _2543;
                    _2687 = _2545;
                    _2688 = _2547;
                    _2689 = _2549;
                    _2690 = _2551;
                    _2691 = _2553;
                    _2692 = _2693;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
            _2550 = _2551;
            _2552 = _2553;
        }
        uvec4 _2556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2557 = _2556.z;
        uint _2559 = (_2557 >> 8u) & 15u;
        float _2654;
        float _2656;
        float _2658;
        float _2660;
        float _2662;
        float _2664;
        if (((4294967295u << _2559) & _2463) == 0u)
        {
            _2654 = _2542;
            _2656 = _2544;
            _2658 = _2546;
            _2660 = _2548;
            _2662 = _2550;
            _2664 = _2552;
        }
        else
        {
            float _2679 = inversesqrt(dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523)));
            float _2680 = _2679 * _1521;
            float _2681 = _2679 * _1522;
            float _2682 = _2679 * _1523;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2559 < ((_2557 >> 12u) & 15u))
            {
                float _2655;
                float _2657;
                float _2659;
                float _2661;
                float _2663;
                float _2665;
                float _2793 = _2542;
                float _2794 = _2544;
                float _2795 = _2546;
                float _2796 = _2548;
                float _2797 = _2550;
                float _2798 = _2552;
                uint _2799 = _2559;
                uint _2808;
                bool _2809;
                for (;;)
                {
                    _2808 = texelFetch(g_lightClassification, int((((_2457 << 5u) + (_2443 << 9u)) + (_2799 << 2u)) >> 2u)).x;
                    _2809 = _2808 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2809)
                    {
                        frontier_phi_74_pred = _2795;
                        frontier_phi_74_pred_1 = _2794;
                        frontier_phi_74_pred_2 = _2793;
                        frontier_phi_74_pred_3 = _2798;
                        frontier_phi_74_pred_4 = _2797;
                        frontier_phi_74_pred_5 = _2796;
                    }
                    else
                    {
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3005 = _2793;
                        float _3006 = _2794;
                        float _3007 = _2795;
                        float _3008 = _2796;
                        float _3009 = _2797;
                        float _3010 = _2798;
                        uint _3011 = _2808;
                        uint _3012;
                        vec4 _3037;
                        float _3038;
                        vec4 _3053;
                        vec3 _3065;
                        vec4 _3081;
                        vec4 _3097;
                        float _3144;
                        bool _3145;
                        for (;;)
                        {
                            uint _3022 = ((_2799 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3011));
                            _3012 = (_3011 + 4294967295u) & _3011;
                            uint _3024 = _3022 * 40u;
                            _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            _3038 = _3037.w;
                            uint _3040 = (_3022 * 40u) + 4u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            uint _3055 = (_3022 * 40u) + 8u;
                            _3065 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3055 + 2u)).x));
                            uint _3068 = (_3022 * 40u) + 16u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3084 = (_3022 * 40u) + 20u;
                            _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3100 = (_3022 * 40u) + 24u;
                            vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3119 = (_3022 * 40u) + 28u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3144 = fma(_1523, _3132.z, fma(_1522, _3132.y, _3132.x * _1521)) + _3132.w;
                            _3145 = !((fma(_1523, _3113.z, fma(_1522, _3113.y, _3113.x * _1521)) + _3113.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3145)
                            {
                                float _3172 = _3037.x - _1521;
                                float _3173 = _3037.y - _1522;
                                float _3174 = _3037.z - _1523;
                                float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                                float _3178 = inversesqrt(_3175);
                                float _3179 = _3178 * _3172;
                                float _3180 = _3178 * _3173;
                                float _3181 = _3178 * _3174;
                                float _3185 = 1.0 - (_3175 / (_3038 * _3038));
                                float _4274 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3190 = sqrt(_3175) * _3053.w;
                                float _3192 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                                float _3193 = _3192 * _3192;
                                float _3196 = ((1.0 - _3193) * dot(vec3(_3179, _3180, _3181), vec3(_378, _381, _384))) + _3193;
                                float _3199 = _3190 * _3190;
                                float _3203 = (fma(_1523, _3081.z, fma(_1522, _3081.y, _3081.x * _1521)) + _3081.w) / _3144;
                                float _3204 = (fma(_1523, _3097.z, fma(_1522, _3097.y, _3097.x * _1521)) + _3097.w) / _3144;
                                float _3208 = 1.0 - dot(vec2(_3203, _3204), vec2(_3203, _3204));
                                float _4290 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                                float _3210 = _3209 * (((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3186) / ((_3199 * 0.699999988079071044921875) + 1.0));
                                float _3222 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                                float _3223 = 1.0 - _454;
                                float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                                float _3231 = _3230 * _3230;
                                float _3232 = _3231 * _3231;
                                float _3233 = _3179 - _2680;
                                float _3234 = _3180 - _2681;
                                float _3235 = _3181 - _2682;
                                float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                                float _3243 = dot(vec3(_378, _381, _384), vec3((-0.0) - _2680, (-0.0) - _2681, (-0.0) - _2682));
                                float _4301 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3247 = dot(vec3(_378, _381, _384), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                                float _4312 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                                float _3255 = _3192 * _3231;
                                float _3256 = _3255 * _3255;
                                float _3262 = ((1.0 - _3256) * dot(vec3(_378, _381, _384), vec3(_3179, _3180, _3181))) + _3256;
                                float _4323 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3264 = 1.0 - _3231;
                                float _3274 = (0.5 / (((_3263 * ((_3246 * _3264) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3231) * _3246))) * _3263;
                                float _4334 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3284 = (_3209 * _3186) * (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) / ((_3254 * _3254) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3284 * _3065.z;
                                frontier_phi_80_pred_1 = _3284 * _3065.y;
                                frontier_phi_80_pred_2 = _3284 * _3065.x;
                                frontier_phi_80_pred_3 = _3210 * _3053.z;
                                frontier_phi_80_pred_4 = _3210 * _3053.y;
                                frontier_phi_80_pred_5 = _3210 * _3053.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3290 = frontier_phi_80_pred;
                            _3289 = frontier_phi_80_pred_1;
                            _3288 = frontier_phi_80_pred_2;
                            _3293 = frontier_phi_80_pred_3;
                            _3292 = frontier_phi_80_pred_4;
                            _3291 = frontier_phi_80_pred_5;
                            _2995 = _3291 + _3008;
                            _2996 = _3292 + _3009;
                            _2997 = _3293 + _3010;
                            _2992 = _3288 + _3005;
                            _2993 = _3289 + _3006;
                            _2994 = _3290 + _3007;
                            if (_3012 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _3012;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2994;
                        frontier_phi_74_pred_1 = _2993;
                        frontier_phi_74_pred_2 = _2992;
                        frontier_phi_74_pred_3 = _2997;
                        frontier_phi_74_pred_4 = _2996;
                        frontier_phi_74_pred_5 = _2995;
                    }
                    _2659 = frontier_phi_74_pred;
                    _2657 = frontier_phi_74_pred_1;
                    _2655 = frontier_phi_74_pred_2;
                    _2665 = frontier_phi_74_pred_3;
                    _2663 = frontier_phi_74_pred_4;
                    _2661 = frontier_phi_74_pred_5;
                    uint _2800 = _2799 + 1u;
                    if (_2800 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2793 = _2655;
                        _2794 = _2657;
                        _2795 = _2659;
                        _2796 = _2661;
                        _2797 = _2663;
                        _2798 = _2665;
                        _2799 = _2800;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2663;
                frontier_phi_62_63_ladder_1 = _2661;
                frontier_phi_62_63_ladder_2 = _2659;
                frontier_phi_62_63_ladder_3 = _2665;
                frontier_phi_62_63_ladder_4 = _2657;
                frontier_phi_62_63_ladder_5 = _2655;
            }
            else
            {
                frontier_phi_62_63_ladder = _2550;
                frontier_phi_62_63_ladder_1 = _2548;
                frontier_phi_62_63_ladder_2 = _2546;
                frontier_phi_62_63_ladder_3 = _2552;
                frontier_phi_62_63_ladder_4 = _2544;
                frontier_phi_62_63_ladder_5 = _2542;
            }
            _2654 = frontier_phi_62_63_ladder_5;
            _2656 = frontier_phi_62_63_ladder_4;
            _2658 = frontier_phi_62_63_ladder_2;
            _2660 = frontier_phi_62_63_ladder_1;
            _2662 = frontier_phi_62_63_ladder;
            _2664 = frontier_phi_62_63_ladder_3;
        }
        float _2669 = isnan(1.0) ? _438 : (isnan(_438) ? 1.0 : min(_438, 1.0));
        _2475 = (_2669 * _2660) + _1988;
        _2477 = (_2669 * _2662) + _1990;
        _2479 = (_2669 * _2664) + _1992;
        _2481 = ((_2654 * _423) * _2669) + _2326;
        _2483 = ((_2656 * _425) * _2669) + _2328;
        _2485 = ((_2658 * _426) * _2669) + _2330;
    }
    else
    {
        _2475 = _1988;
        _2477 = _1990;
        _2479 = _1992;
        _2481 = _2326;
        _2483 = _2328;
        _2485 = _2330;
    }
    float _4350 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _4361 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _4372 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    uint _2505 = _397 + 6u;
    float _2513 = _356 / cbSceneParam._m0[86u].x;
    float _2514 = _357 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _290 : (isnan(_290) ? cbSceneParam._m0[77u].w : min(_290, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2604;
    float _2606;
    float _2608;
    float _2610;
    if (_290 > cbSceneParam._m0[78u].w)
    {
        float _2567 = isnan(_290) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _290 : min(cbSceneParam._m0[80u].w, _290));
        float _2568 = _2567 / _290;
        float _2579 = _2568 * _341;
        float _2580 = _342 * _2568;
        float _2581 = (-0.0) - _2580;
        float _2582 = _2568 * _343;
        float _2584 = (cbSceneParam._m0[77u].w * _2581) / _2567;
        float _2585 = _2584 + cbSceneParam._m0[79u].w;
        float _2586 = cbSceneParam._m0[79u].w - _2580;
        float _2592 = sqrt(((_2579 * _2579) + (_2580 * _2580)) + (_2582 * _2582));
        float _2595 = (1.0 - (cbSceneParam._m0[77u].w / _2567)) * _2592;
        float _2600 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2602 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2755;
        if (abs((_2581 - _2584) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2755 = ((((_2585 > 0.0) ? exp2(_2600 * _2585) : (2.0 - exp2(_2602 * _2585))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2595;
        }
        else
        {
            float _2715 = 1.0 / cbSceneParam._m0[80u].x;
            float _2716 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : max(_2585, _2586));
            float _2717 = isnan(_2586) ? _2585 : (isnan(_2585) ? _2586 : min(_2585, _2586));
            float _2726 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : min(_2716, 0.0));
            float _2727 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : min(_2717, 0.0));
            _2755 = ((abs(_2592 / _2581) * cbSceneParam._m0[80u].y) * ((((_2726 - _2727) * 2.0) - ((exp2(_2600 * (isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0)))) - exp2(_2600 * (isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0))))) * _2715)) - ((exp2(_2602 * _2726) - exp2(_2602 * _2727)) * _2715))) + (_2595 * cbSceneParam._m0[80u].z);
        }
        vec4 _2757 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2766 = exp2((_2755 * (-1.44269502162933349609375)) * (1.0 - _2757.w));
        float _2767 = log2(_2766);
        float _2783 = log2(_2533);
        _2604 = (exp2(_2783 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].x)) * _2757.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2606 = (exp2(_2783 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].y)) * _2757.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2608 = (exp2(_2783 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2767 * cbSceneParam._m0[78u].z)) * _2757.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2610 = _2766 * _2533;
    }
    else
    {
        _2604 = _2530;
        _2606 = _2531;
        _2608 = _2532;
        _2610 = _2533;
    }
    float _2622 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2623 = _2622 == 3.0;
    float _2624 = log2(_2610);
    float _2631 = exp2(_2624 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2475 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _438))) + ((_2481 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _1248)) * cbPerFrame._m0[3u].x));
    float _2632 = exp2(_2624 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2477 + ((isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))) * _438))) + ((_2483 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _1248)) * cbPerFrame._m0[3u].x));
    float _2633 = exp2(_2624 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2479 + ((isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0))) * _438))) + ((_2485 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _1248)) * cbPerFrame._m0[3u].x));
    float _2642 = (_2622 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2642 * (_2623 ? _2631 : (_2631 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.y = _2642 * (_2623 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2606)));
    SV_Target.z = _2642 * (_2623 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2608)));
    SV_Target.w = cbInstanceData._m0[_2505].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
}


