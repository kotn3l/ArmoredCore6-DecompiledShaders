#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MN_Material_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _856;
float _3271;
float _3272;
float _3273;
float _3274;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _235 = texture(sampler2D(MN_Material_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _244 = (_235.x * 2.0) + (-1.0);
    float _246 = (_235.y * 2.0) + (-1.0);
    float _247 = dot(vec2(_244, _246), vec2(_244, _246));
    float _3283 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _253 = sqrt(1.0 - (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))));
    float _255 = cbMtdParam._m0[10u].y + _235.z;
    float _258 = fma(_253, _209, fma(_246, _201 * TANGENT.x, (_187 * _180) * _244));
    float _261 = fma(_253, _210, fma(_246, _201 * TANGENT.y, (_187 * _181) * _244));
    float _264 = fma(_253, _211, fma(_246, _201 * TANGENT.z, (_187 * _182) * _244));
    float _268 = inversesqrt(dot(vec3(_258, _261, _264), vec3(_258, _261, _264)));
    float _269 = _268 * _258;
    float _270 = _268 * _261;
    float _271 = _268 * _264;
    float _3294 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _272 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
    float _3305 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3316 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3327 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3338 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _276 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _292 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _333 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _343 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _333);
    float _344 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _333);
    float _345 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _333);
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _350 = _343 * _349;
    float _351 = _344 * _349;
    float _352 = _345 * _349;
    vec4 _357 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _359 = _357.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _535 = sqrt(((_343 * _343) + (_344 * _344)) + (_345 * _345));
        float _541 = (cbMatDynParam._m0[5u].x * _535) + cbMatDynParam._m0[5u].y;
        float _3349 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
        float _542 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _546 = (cbMatDynParam._m0[5u].z * _535) + cbMatDynParam._m0[5u].w;
        float _3360 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) - _542)) + _542) < ((_359 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _371 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _372 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _392 = fma(_271, cbSceneParam._m0[5u].z, fma(_270, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _269));
    float _395 = fma(_271, cbSceneParam._m0[6u].z, fma(_270, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _269));
    float _398 = fma(_271, cbSceneParam._m0[7u].z, fma(_270, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _269));
    uint _411 = uint(roundEven(NORMAL.w)) * 13u;
    uint _413 = _411 + 9u;
    uint _414 = _413 + uint(cbMatDynParam._m0[0u].w);
    float _420 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0)))) * cbInstanceData._m0[_414].x;
    float _421 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0)))) * cbInstanceData._m0[_414].y;
    float _422 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0)))) * cbInstanceData._m0[_414].z;
    float _3371 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _3382 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
    float _3393 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _426 = 1.0 - _276;
    float _427 = _423 * _426;
    float _428 = _424 * _426;
    float _429 = _425 * _426;
    float _434 = (_423 + (-0.039999999105930328369140625)) * _276;
    float _435 = (_424 + (-0.039999999105930328369140625)) * _276;
    float _436 = (_425 + (-0.039999999105930328369140625)) * _276;
    float _437 = _434 + 0.039999999105930328369140625;
    float _439 = _435 + 0.039999999105930328369140625;
    float _440 = _436 + 0.039999999105930328369140625;
    vec4 _449 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _371, cbSceneParam._m0[86u].y * _372));
    float _452 = _449.x * TEXCOORD.z;
    float _453 = dot(vec3(_269, _270, _271), vec3(_350, _351, _352));
    float _456 = _453 * 2.0;
    float _460 = (_456 * _269) - _350;
    float _461 = (_456 * _270) - _351;
    float _462 = (_456 * _271) - _352;
    float _466 = abs(dot(vec3(_350, _351, _352), vec3(_269, _270, _271)));
    float _3404 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _468 = sqrt(_272);
    float _481 = exp2((_468 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_468 * 3.0));
    float _487 = (1.0 - _481) * ((_468 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _488 = _481 * _468;
    float _516 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _520 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _855;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _580 = fma(_524, cbModelParam._m0[26u].z, fma(_520, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _516));
        float _584 = fma(_524, cbModelParam._m0[27u].z, fma(_520, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _516));
        float _588 = fma(_524, cbModelParam._m0[28u].z, fma(_520, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _516));
        float _613 = _516 + _269;
        float _614 = _520 + _270;
        float _615 = _524 + _271;
        float _625 = fma(_615, cbModelParam._m0[26u].z, fma(_614, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613)) - _580;
        float _626 = fma(_615, cbModelParam._m0[27u].z, fma(_614, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613)) - _584;
        float _627 = fma(_615, cbModelParam._m0[28u].z, fma(_614, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613)) - _588;
        float _631 = inversesqrt(dot(vec3(_625, _626, _627), vec3(_625, _626, _627)));
        float _644 = ((_631 * _625) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_580 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_631 * _626) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_584 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_631 * _627) / cbModelParam._m0[34u].z) + ((((((_588 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _649 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_644, _645, _646), 0.0);
        float _683 = exp2((_649.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_649.x + (-0.5));
        float _685 = _683 * (_649.y + (-0.5));
        float _686 = _683 * (_649.z + (-0.5));
        float _693 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_656.x + (-0.5));
        float _695 = _693 * (_656.y + (-0.5));
        float _696 = _693 * (_656.z + (-0.5));
        float _703 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_663.x + (-0.5));
        float _705 = _703 * (_663.y + (-0.5));
        float _706 = _703 * (_663.z + (-0.5));
        float _713 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _714 = _713 * (_670.x + (-0.5));
        float _715 = _713 * (_670.y + (-0.5));
        float _716 = _713 * (_670.z + (-0.5));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = _684 * 0.5;
        float _721 = _694 * 0.5;
        float _722 = _704 * 0.5;
        float _723 = dot(vec3(_720, _721, _722), vec3(_720, _721, _722));
        float _728 = (_723 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_723);
        float _737 = (dot(vec3(_269, _270, _271), vec3(_728 * _720, _728 * _721, _728 * _722)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _747 = sqrt(((_721 * _721) + (_720 * _720)) + (_722 * _722)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _749 = _748 * 2.0;
        float _753 = (1.0 - _748) / (_748 + 1.0);
        float _3452 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _763 = ((((1.0 - _754) * (_749 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_749 + 1.0))) + _754) * _717;
        float _764 = _685 * 0.5;
        float _765 = _695 * 0.5;
        float _766 = _705 * 0.5;
        float _767 = dot(vec3(_764, _765, _766), vec3(_764, _765, _766));
        float _772 = (_767 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_767);
        float _780 = (dot(vec3(_269, _270, _271), vec3(_772 * _764, _772 * _765, _772 * _766)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _789 = sqrt(((_765 * _765) + (_764 * _764)) + (_766 * _766)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _791 = _790 * 2.0;
        float _795 = (1.0 - _790) / (_790 + 1.0);
        float _3485 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _805 = ((((1.0 - _796) * (_791 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_791 + 1.0))) + _796) * _718;
        float _806 = _686 * 0.5;
        float _807 = _696 * 0.5;
        float _808 = _706 * 0.5;
        float _809 = dot(vec3(_806, _807, _808), vec3(_806, _807, _808));
        float _814 = (_809 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_809);
        float _822 = (dot(vec3(_269, _270, _271), vec3(_814 * _806, _814 * _807, _814 * _808)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _831 = sqrt(((_807 * _807) + (_806 * _806)) + (_808 * _808)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _833 = _832 * 2.0;
        float _837 = (1.0 - _832) / (_832 + 1.0);
        float _3518 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _838 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _847 = ((((1.0 - _838) * (_833 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_833 + 1.0))) + _838) * _719;
        _855 = _686;
        _857 = _685;
        _858 = _684;
        _859 = _696;
        _860 = _695;
        _861 = _694;
        _862 = _706;
        _863 = _705;
        _864 = _704;
        _865 = _719;
        _866 = _718;
        _867 = _717;
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0)));
    }
    else
    {
        _855 = _856;
        _857 = _856;
        _858 = _856;
        _859 = _856;
        _860 = _856;
        _861 = _856;
        _862 = _856;
        _863 = _856;
        _864 = _856;
        _865 = _856;
        _866 = _856;
        _867 = _856;
        _868 = 0.0;
        _869 = 0.0;
        _870 = 0.0;
    }
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _899 = fma(_524, cbModelParam._m0[30u].z, fma(_520, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _516));
        float _903 = fma(_524, cbModelParam._m0[31u].z, fma(_520, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _516));
        float _907 = fma(_524, cbModelParam._m0[32u].z, fma(_520, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _516));
        float _930 = _516 + _269;
        float _931 = _520 + _270;
        float _932 = _524 + _271;
        float _942 = fma(_932, cbModelParam._m0[30u].z, fma(_931, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _930)) - _899;
        float _943 = fma(_932, cbModelParam._m0[31u].z, fma(_931, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _930)) - _903;
        float _944 = fma(_932, cbModelParam._m0[32u].z, fma(_931, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _930)) - _907;
        float _948 = inversesqrt(dot(vec3(_942, _943, _944), vec3(_942, _943, _944)));
        float _961 = ((_948 * _942) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_899 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_948 * _943) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_903 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_948 * _944) / cbModelParam._m0[35u].z) + ((((((_907 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_961, _962, _963), 0.0);
        float _998 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_965.x + (-0.5));
        float _1000 = _998 * (_965.y + (-0.5));
        float _1001 = _998 * (_965.z + (-0.5));
        float _1008 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_972.x + (-0.5));
        float _1010 = _1008 * (_972.y + (-0.5));
        float _1011 = _1008 * (_972.z + (-0.5));
        float _1018 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_979.x + (-0.5));
        float _1020 = _1018 * (_979.y + (-0.5));
        float _1021 = _1018 * (_979.z + (-0.5));
        float _1028 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_986.x + (-0.5));
        float _1030 = _1028 * (_986.y + (-0.5));
        float _1031 = _1028 * (_986.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_269, _270, _271), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3581 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1062 + 1.0))) + _1067) * _1032;
        float _1077 = _1000 * 0.5;
        float _1078 = _1010 * 0.5;
        float _1079 = _1020 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_269, _270, _271), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3592 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3603 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3614 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0))) * (_1104 + 1.0))) + _1109) * _1033;
        float _1119 = _1001 * 0.5;
        float _1120 = _1011 * 0.5;
        float _1121 = _1021 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_269, _270, _271), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3625 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3636 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3647 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * (_1146 + 1.0))) + _1151) * _1034;
        _1168 = _1001;
        _1169 = _1000;
        _1170 = _999;
        _1171 = _1011;
        _1172 = _1010;
        _1173 = _1009;
        _1174 = _1021;
        _1175 = _1020;
        _1176 = _1019;
        _1177 = _1034;
        _1178 = _1033;
        _1179 = _1032;
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1181 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _856;
        _1169 = _856;
        _1170 = _856;
        _1171 = _856;
        _1172 = _856;
        _1173 = _856;
        _1174 = _856;
        _1175 = _856;
        _1176 = _856;
        _1177 = _856;
        _1178 = _856;
        _1179 = _856;
        _1180 = 0.0;
        _1181 = 0.0;
        _1182 = 0.0;
    }
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1193 = (cbModelParam._m0[1u].x * (_1181 - _869)) + _869;
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _870)) + _870;
    float _1215 = fma(_1194, cbSceneParam._m0[89u].z, fma(_1193, cbSceneParam._m0[89u].y, _1192 * cbSceneParam._m0[89u].x));
    float _1218 = fma(_1194, cbSceneParam._m0[90u].z, fma(_1193, cbSceneParam._m0[90u].y, _1192 * cbSceneParam._m0[90u].x));
    float _1221 = fma(_1194, cbSceneParam._m0[91u].z, fma(_1193, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1192));
    float _1236 = _460 * 0.5;
    float _1237 = _461 * 0.5;
    float _1238 = _462 * 0.5;
    float _1239 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1242 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1169, _1172, _1175, _1178));
    float _1245 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1279;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1252 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_855, _859, _862, _865));
        float _1256 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_857, _860, _863, _866));
        float _1260 = dot(vec4(_1236, _1237, _1238, 1.0), vec4(_858, _861, _864, _867));
        float _1267 = dot(vec4(cbModelParam._m0[39u]), vec4(_1236, _1237, _1238, 1.0));
        _1279 = dot(vec3(isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1267) ? 0.0 : (isnan(0.0) ? _1267 : max(0.0, _1267))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1279 = 1.0;
    }
    float _1290;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1281 = dot(vec4(cbModelParam._m0[40u]), vec4(_1236, _1237, _1238, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)), isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0)), isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1281) ? 0.0 : (isnan(0.0) ? _1281 : max(0.0, _1281))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1294 = (_1290 * cbModelParam._m0[1u].x) + (_1279 * (1.0 - cbModelParam._m0[1u].x));
    float _1304 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _272);
    float _1305 = isnan(_1304) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1304 : min(cbModelParam._m0[25u].z, _1304));
    float _1387;
    float _1389;
    float _1391;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1354 = fma(_524, cbModelParam._m0[13u].z, fma(_520, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _516)) + cbModelParam._m0[13u].w;
        float _1358 = fma(_524, cbModelParam._m0[14u].z, fma(_520, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _516)) + cbModelParam._m0[14u].w;
        float _1362 = fma(_524, cbModelParam._m0[15u].z, fma(_520, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _516)) + cbModelParam._m0[15u].w;
        float _1365 = fma(_462, cbModelParam._m0[13u].z, fma(_461, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _460));
        float _1368 = fma(_462, cbModelParam._m0[14u].z, fma(_461, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _460));
        float _1371 = fma(_462, cbModelParam._m0[15u].z, fma(_461, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _460));
        float _1399;
        if (_1365 > 0.0)
        {
            _1399 = abs((1.0 - _1354) / _1365);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1354 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1399 = frontier_phi_19_17_ladder;
        }
        float _1628;
        if (_1368 > 0.0)
        {
            _1628 = abs((1.0 - _1358) / _1368);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1368 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1358 + 1.0) / _1368);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1628 = frontier_phi_28_24_ladder;
        }
        float _1885;
        if (_1371 > 0.0)
        {
            _1885 = abs((1.0 - _1362) / _1371);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1371 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1362 + 1.0) / _1371);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1885 = frontier_phi_40_35_ladder;
        }
        float _1887 = isnan(_1628) ? _1399 : (isnan(_1399) ? _1628 : min(_1399, _1628));
        float _1888 = isnan(_1885) ? _1887 : (isnan(_1887) ? _1885 : min(_1887, _1885));
        float _1892 = (_1888 * _1365) + _1354;
        float _1893 = (_1888 * _1368) + _1358;
        float _1894 = (_1888 * _1371) + _1362;
        float _1895 = _1888 * 9.9999997473787516355514526367188e-05;
        float _1897 = (-1.0) - _1895;
        float _1899 = _1895 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1894 > _1899) || ((_1894 < _1897) || ((_1893 > _1899) || ((_1893 < _1897) || ((_1892 < _1897) || (_1892 > _1899))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2022 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1894, cbModelParam._m0[9u].z, fma(_1893, cbModelParam._m0[9u].y, _1892 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1894, cbModelParam._m0[10u].z, fma(_1893, cbModelParam._m0[10u].y, _1892 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1894, cbModelParam._m0[11u].z, fma(_1893, cbModelParam._m0[11u].y, _1892 * cbModelParam._m0[11u].x))), _1305);
            frontier_phi_18_40_ladder = _2022.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2022.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2022.x * cbModelParam._m0[1u].y;
        }
        _1387 = frontier_phi_18_40_ladder_2;
        _1389 = frontier_phi_18_40_ladder_1;
        _1391 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1375 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_460, _461, _462), _1305);
        _1387 = _1375.x * cbModelParam._m0[1u].y;
        _1389 = _1375.y * cbModelParam._m0[1u].y;
        _1391 = _1375.z * cbModelParam._m0[1u].y;
    }
    float _1395 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _272);
    float _1396 = isnan(_1395) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1395 : min(cbModelParam._m0[25u].w, _1395));
    float _1489;
    float _1491;
    float _1493;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1453 = fma(_524, cbModelParam._m0[21u].z, fma(_520, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _516)) + cbModelParam._m0[21u].w;
        float _1457 = fma(_524, cbModelParam._m0[22u].z, fma(_520, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _516)) + cbModelParam._m0[22u].w;
        float _1461 = fma(_524, cbModelParam._m0[23u].z, fma(_520, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _516)) + cbModelParam._m0[23u].w;
        float _1464 = fma(_462, cbModelParam._m0[21u].z, fma(_461, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _460));
        float _1467 = fma(_462, cbModelParam._m0[22u].z, fma(_461, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _460));
        float _1470 = fma(_462, cbModelParam._m0[23u].z, fma(_461, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _460));
        float _1633;
        if (_1464 > 0.0)
        {
            _1633 = abs((1.0 - _1453) / _1464);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1453 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1633 = frontier_phi_30_26_ladder;
        }
        float _1912;
        if (_1467 > 0.0)
        {
            _1912 = abs((1.0 - _1457) / _1467);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1457 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1912 = frontier_phi_42_37_ladder;
        }
        float _2125;
        if (_1470 > 0.0)
        {
            _2125 = abs((1.0 - _1461) / _1470);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1461 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2125 = frontier_phi_51_48_ladder;
        }
        float _2127 = isnan(_1912) ? _1633 : (isnan(_1633) ? _1912 : min(_1633, _1912));
        float _2128 = isnan(_2125) ? _2127 : (isnan(_2127) ? _2125 : min(_2127, _2125));
        float _2132 = (_2128 * _1464) + _1453;
        float _2133 = (_2128 * _1467) + _1457;
        float _2134 = (_2128 * _1470) + _1461;
        float _2135 = _2128 * 9.9999997473787516355514526367188e-05;
        float _2136 = (-1.0) - _2135;
        float _2138 = _2135 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2134 > _2138) || ((_2134 < _2136) || ((_2133 > _2138) || ((_2133 < _2136) || ((_2132 < _2136) || (_2132 > _2138))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2134, cbModelParam._m0[17u].z, fma(_2133, cbModelParam._m0[17u].y, _2132 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2134, cbModelParam._m0[18u].z, fma(_2133, cbModelParam._m0[18u].y, _2132 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2134, cbModelParam._m0[19u].z, fma(_2133, cbModelParam._m0[19u].y, _2132 * cbModelParam._m0[19u].x))), _1396);
            frontier_phi_27_51_ladder = _2332.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2332.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2332.x * cbModelParam._m0[1u].z;
        }
        _1489 = frontier_phi_27_51_ladder_2;
        _1491 = frontier_phi_27_51_ladder_1;
        _1493 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1473 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_460, _461, _462), _1396);
        _1489 = _1473.x * cbModelParam._m0[1u].z;
        _1491 = _1473.y * cbModelParam._m0[1u].z;
        _1493 = _1473.z * cbModelParam._m0[1u].z;
    }
    float _1506 = (((_487 * _437) + _488) * _452) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_487 * _439) + _488) * _452) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_487 * _440) + _488) * _452) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1513 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, _1506 * cbSceneParam._m0[91u].x));
    vec4 _1527 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_371, _372));
    float _1529 = _1527.w;
    float _1541 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1529);
    float _1542 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1529);
    float _1543 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1529);
    uvec4 _1547 = floatBitsToUint(cbInstanceData._m0[_411 + 5u]);
    uint _1549 = _1547.x * 14u;
    uint _1550 = _1549 + 13u;
    float _1557 = _452 + (-1.0);
    float _1562 = (cbLight._m0[_1550].x * _1557) + 1.0;
    float _1563 = (cbLight._m0[_1550].y * _1557) + 1.0;
    float _1564 = (cbLight._m0[_1550].z * _1557) + 1.0;
    float _1565 = (cbLight._m0[_1550].w * _1557) + 1.0;
    uint _1566 = _1549 + 5u;
    float _1572 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
    uint _1576 = _1549 + 4u;
    float _1586 = isnan(1.0) ? _1562 : (isnan(_1562) ? 1.0 : min(_1562, 1.0));
    uint _1590 = _1549 | 1u;
    float _1601 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_269, _270, _271));
    float _1604 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_269, _270, _271));
    float _3783 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
    float _3794 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
    float _1609 = (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * 0.3183098733425140380859375;
    float _1611 = (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 0.3183098733425140380859375;
    float _1618 = ((cbLight._m0[_1566].x * _1572) * _1611) + (((cbLight._m0[_1576].x * _1541) * _1586) * _1609);
    float _1619 = ((_1572 * cbLight._m0[_1566].y) * _1611) + (((cbLight._m0[_1576].y * _1542) * _1586) * _1609);
    float _1620 = ((_1572 * cbLight._m0[_1566].z) * _1611) + (((cbLight._m0[_1576].z * _1543) * _1586) * _1609);
    uvec4 _1625 = floatBitsToUint(cbLight._m0[_1549 + 12u]);
    bool _1627 = _1625.x == 0u;
    float _1638;
    float _1640;
    float _1642;
    if (_1627)
    {
        _1638 = _1618;
        _1640 = _1619;
        _1642 = _1620;
    }
    else
    {
        uint _1646 = _1549 + 6u;
        float _1662 = (dot(vec3(cbLight._m0[_1549 + 2u].xyz), vec3(_269, _270, _271)) * 0.5) + 0.5;
        float _1663 = _1662 * _1662;
        float _3805 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1665 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
        _1638 = (((cbLight._m0[_1646].x * 0.3183098733425140380859375) * _1664) * _1665) + _1618;
        _1640 = (((cbLight._m0[_1646].y * 0.3183098733425140380859375) * _1664) * _1665) + _1619;
        _1642 = (((cbLight._m0[_1646].z * 0.3183098733425140380859375) * _1664) * _1665) + _1620;
    }
    bool _1645 = _1625.y == 0u;
    float _1683;
    float _1685;
    float _1687;
    if (_1645)
    {
        _1683 = _1638;
        _1685 = _1640;
        _1687 = _1642;
    }
    else
    {
        uint _1856 = _1549 + 7u;
        float _1872 = (dot(vec3(cbLight._m0[_1549 + 3u].xyz), vec3(_269, _270, _271)) * 0.5) + 0.5;
        float _1873 = _1872 * _1872;
        float _3821 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1874 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1875 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1683 = (((cbLight._m0[_1856].x * 0.3183098733425140380859375) * _1874) * _1875) + _1638;
        _1685 = (((cbLight._m0[_1856].y * 0.3183098733425140380859375) * _1874) * _1875) + _1640;
        _1687 = (((cbLight._m0[_1856].z * 0.3183098733425140380859375) * _1874) * _1875) + _1642;
    }
    uint _1690 = _1549 + 8u;
    float _1703 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1549].w)) * _272) * 0.949999988079071044921875);
    float _1704 = _1703 * _1703;
    float _1705 = cbLight._m0[_1549].x + _350;
    float _1706 = cbLight._m0[_1549].y + _351;
    float _1707 = cbLight._m0[_1549].z + _352;
    float _1711 = inversesqrt(dot(vec3(_1705, _1706, _1707), vec3(_1705, _1706, _1707)));
    float _1712 = _1711 * _1705;
    float _1713 = _1711 * _1706;
    float _1714 = _1711 * _1707;
    float _1715 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1549].xyz));
    float _3837 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1718 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _1719 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1720 = dot(vec3(_269, _270, _271), vec3(_1712, _1713, _1714));
    float _3859 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
    float _1723 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _1724 = dot(vec3(cbLight._m0[_1549].xyz), vec3(_1712, _1713, _1714));
    float _3870 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
    float _1728 = _1704 * _1704;
    float _1732 = ((_1723 * _1723) * (_1728 + (-1.0))) + 1.0;
    float _1740 = exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0);
    float _1741 = 0.959999978542327880859375 - _434;
    float _1743 = 0.959999978542327880859375 - _435;
    float _1744 = 0.959999978542327880859375 - _436;
    float _1751 = 1.0 - _1704;
    float _1762 = (0.5 / (((_1719 * ((_1718 * _1751) + _1704)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1751) + _1704) * _1718))) * _1718;
    float _3881 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1764 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_1728 / ((_1732 * _1732) * 3.141590118408203125));
    uint _1778 = _1549 + 9u;
    float _1789 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1590].w)) * _272) * 0.949999988079071044921875);
    float _1790 = _1789 * _1789;
    float _1791 = cbLight._m0[_1590].x + _350;
    float _1792 = cbLight._m0[_1590].y + _351;
    float _1793 = cbLight._m0[_1590].z + _352;
    float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
    float _1798 = _1797 * _1791;
    float _1799 = _1797 * _1792;
    float _1800 = _1797 * _1793;
    float _1801 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1590].xyz));
    float _3892 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1804 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _1805 = dot(vec3(_269, _270, _271), vec3(_1798, _1799, _1800));
    float _3903 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _1809 = dot(vec3(cbLight._m0[_1590].xyz), vec3(_1798, _1799, _1800));
    float _3914 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1813 = _1790 * _1790;
    float _1817 = ((_1808 * _1808) * (_1813 + (-1.0))) + 1.0;
    float _1824 = exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0);
    float _1831 = 1.0 - _1790;
    float _1841 = (0.5 / (((_1719 * ((_1804 * _1831) + _1790)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1831) + _1790) * _1804))) * _1804;
    float _3925 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _1843 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_1813 / ((_1817 * _1817) * 3.141590118408203125));
    float _1853 = (((((_1824 * _1741) + _437) * cbLight._m0[_1778].x) * _1843) * _1572) + ((((cbLight._m0[_1690].x * _1541) * ((_1740 * _1741) + _437)) * _1764) * _1586);
    float _1854 = (((((_1824 * _1743) + _439) * cbLight._m0[_1778].y) * _1843) * _1572) + ((((cbLight._m0[_1690].y * _1542) * ((_1740 * _1743) + _439)) * _1764) * _1586);
    float _1855 = (((((_1824 * _1744) + _440) * cbLight._m0[_1778].z) * _1843) * _1572) + ((((cbLight._m0[_1690].z * _1543) * ((_1740 * _1744) + _440)) * _1764) * _1586);
    float _1917;
    float _1919;
    float _1921;
    if (_1627)
    {
        _1917 = _1853;
        _1919 = _1854;
        _1921 = _1855;
    }
    else
    {
        uint _1923 = _1549 + 2u;
        uint _1927 = _1549 + 10u;
        float _1941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _272) * 0.949999988079071044921875);
        float _1942 = _1941 * _1941;
        float _1943 = cbLight._m0[_1923].x + _350;
        float _1944 = cbLight._m0[_1923].y + _351;
        float _1945 = cbLight._m0[_1923].z + _352;
        float _1949 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
        float _1950 = _1949 * _1943;
        float _1951 = _1949 * _1944;
        float _1952 = _1949 * _1945;
        float _1953 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_1923].xyz));
        float _3936 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1956 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
        float _1957 = dot(vec3(_269, _270, _271), vec3(_1950, _1951, _1952));
        float _3947 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1960 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1961 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_1950, _1951, _1952));
        float _3958 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1965 = _1942 * _1942;
        float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
        float _1976 = exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0);
        float _1983 = 1.0 - _1942;
        float _1993 = (0.5 / (((_1719 * ((_1956 * _1983) + _1942)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _1983) + _1942) * _1956))) * _1956;
        float _3969 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1995 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
        float _1996 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
        _1917 = (((((_1976 * _1741) + _437) * cbLight._m0[_1927].x) * _1995) * _1996) + _1853;
        _1919 = (((((_1976 * _1743) + _439) * cbLight._m0[_1927].y) * _1995) * _1996) + _1854;
        _1921 = (((((_1976 * _1744) + _440) * cbLight._m0[_1927].z) * _1995) * _1996) + _1855;
    }
    float _2031;
    float _2033;
    float _2035;
    if (_1645)
    {
        _2031 = _1917;
        _2033 = _1919;
        _2035 = _1921;
    }
    else
    {
        uint _2042 = _1549 + 3u;
        uint _2046 = _1549 + 11u;
        float _2060 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _272) * 0.949999988079071044921875);
        float _2061 = _2060 * _2060;
        float _2062 = cbLight._m0[_2042].x + _350;
        float _2063 = cbLight._m0[_2042].y + _351;
        float _2064 = cbLight._m0[_2042].z + _352;
        float _2068 = inversesqrt(dot(vec3(_2062, _2063, _2064), vec3(_2062, _2063, _2064)));
        float _2069 = _2068 * _2062;
        float _2070 = _2068 * _2063;
        float _2071 = _2068 * _2064;
        float _2072 = dot(vec3(_269, _270, _271), vec3(cbLight._m0[_2042].xyz));
        float _3985 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2075 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _2076 = dot(vec3(_269, _270, _271), vec3(_2069, _2070, _2071));
        float _3996 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2079 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _2080 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2069, _2070, _2071));
        float _4007 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2084 = _2061 * _2061;
        float _2088 = ((_2079 * _2079) * (_2084 + (-1.0))) + 1.0;
        float _2095 = exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0);
        float _2102 = 1.0 - _2061;
        float _2112 = (0.5 / (((_1719 * ((_2075 * _2102) + _2061)) + 9.9999999392252902907785028219223e-09) + (((_1719 * _2102) + _2061) * _2075))) * _2075;
        float _4018 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
        float _2114 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2084 / ((_2088 * _2088) * 3.141590118408203125));
        float _2115 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _2031 = (((((_2095 * _1741) + _437) * cbLight._m0[_2046].x) * _2114) * _2115) + _1917;
        _2033 = (((((_2095 * _1743) + _439) * cbLight._m0[_2046].y) * _2114) * _2115) + _1919;
        _2035 = (((((_2095 * _1744) + _440) * cbLight._m0[_2046].z) * _2114) * _2115) + _1921;
    }
    float _2249;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    if (_1547.y == 0u)
    {
        float _2190 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2191 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2190;
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2190;
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2190;
        uvec4 _2205 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2206 = _2205.x;
        uint _2217 = uint((float(_2205.y) * floor(float(uint(cbSceneParam._m0[85u].y * _372) / _2206))) + floor(float(uint(cbSceneParam._m0[85u].x * _371) / _2206)));
        float _2227 = (log2(_2193 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2228 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
        uint _2231 = uint(isnan(14.0) ? _2228 : (isnan(_2228) ? 14.0 : min(_2228, 14.0)));
        uvec4 _2236 = texelFetch(g_lightClusterGridBuffer, int(((_2231 << 2u) + (_2217 << 6u)) >> 2u));
        uint _2237 = _2236.x;
        uint _2238 = _2205.z;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        if (((((1u << ((_2238 >> 4u) & 15u)) + 4294967295u) & _2237) == 0u) || ((_2238 & 240u) == 0u))
        {
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
        }
        else
        {
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            uint _2495 = 0u;
            uint _2504;
            bool _2505;
            for (;;)
            {
                _2504 = texelFetch(g_lightClassification, int((((_2231 << 5u) + (_2217 << 9u)) + (_2495 << 2u)) >> 2u)).x;
                _2505 = _2504 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2505)
                {
                    frontier_phi_68_pred = _2491;
                    frontier_phi_68_pred_1 = _2494;
                    frontier_phi_68_pred_2 = _2493;
                    frontier_phi_68_pred_3 = _2492;
                    frontier_phi_68_pred_4 = _2490;
                    frontier_phi_68_pred_5 = _2489;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2489;
                    _2635 = _2490;
                    _2636 = _2491;
                    _2637 = _2492;
                    _2638 = _2493;
                    _2639 = _2494;
                    _2640 = _2504;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2495 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        float _2700 = _2660.x - _2191;
                        float _2701 = _2660.y - _2192;
                        float _2702 = _2660.z - _2193;
                        float _2703 = dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702));
                        float _2706 = inversesqrt(_2703);
                        float _2707 = _2706 * _2700;
                        float _2708 = _2706 * _2701;
                        float _2709 = _2706 * _2702;
                        float _2710 = dot(vec3(_392, _395, _398), vec3(_2707, _2708, _2709));
                        float _2715 = 1.0 - (_2703 * _2660.w);
                        float _4044 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2717 = sqrt(_2703) * _2679.w;
                        float _2720 = 1.39999997615814208984375 / (_2717 + 1.39999997615814208984375);
                        float _2721 = _2720 * _2720;
                        float _2724 = ((1.0 - _2721) * _2710) + _2721;
                        float _2727 = _2717 * _2717;
                        float _2731 = ((isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0))) * _2716) / ((_2727 * 0.699999988079071044921875) + 1.0);
                        float _2735 = (-0.0) - _2191;
                        float _2736 = (-0.0) - _2192;
                        float _2737 = (-0.0) - _2193;
                        float _2741 = inversesqrt(dot(vec3(_2735, _2736, _2737), vec3(_2735, _2736, _2737)));
                        float _2742 = _2741 * _2735;
                        float _2743 = _2741 * _2736;
                        float _2744 = _2741 * _2737;
                        float _2752 = exp2(log2(1.0 / ((_2727 * 3.5) + 5.0)) * 0.25);
                        float _2753 = 1.0 - _468;
                        float _2760 = sqrt(1.0 - ((1.0 - (_2753 * _2753)) * (1.0 - (_2752 * _2752))));
                        float _2761 = _2760 * _2760;
                        float _2762 = _2761 * _2761;
                        float _2763 = _2742 + _2707;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2769 = inversesqrt(dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765)));
                        float _2773 = dot(vec3(_392, _395, _398), vec3(_2742, _2743, _2744));
                        float _4060 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2776 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                        float _2777 = dot(vec3(_392, _395, _398), vec3(_2769 * _2763, _2769 * _2764, _2769 * _2765));
                        float _4071 = isnan(0.0) ? _2777 : (isnan(_2777) ? 0.0 : max(_2777, 0.0));
                        float _2780 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
                        float _2784 = ((_2780 * _2780) * (_2762 + (-1.0))) + 1.0;
                        float _2785 = _2720 * _2761;
                        float _2786 = _2785 * _2785;
                        float _2789 = ((1.0 - _2786) * _2710) + _2786;
                        float _4082 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2790 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                        float _2791 = 1.0 - _2761;
                        float _2801 = (0.5 / (((_2790 * ((_2776 * _2791) + _2761)) + 9.9999999392252902907785028219223e-09) + (((_2790 * _2791) + _2761) * _2776))) * _2790;
                        float _4093 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2812 = (((_2762 * 3.1415927410125732421875) * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) / ((_2784 * _2784) * ((_2727 * 2.1991131305694580078125) + 3.141590118408203125))) * _2716;
                        _2564 = (_2731 * _2679.x) + _2637;
                        _2565 = (_2731 * _2679.y) + _2638;
                        _2566 = (_2731 * _2679.z) + _2639;
                        _2561 = (_2812 * _2696.x) + _2634;
                        _2562 = (_2812 * _2696.y) + _2635;
                        _2563 = (_2812 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2561;
                            _2635 = _2562;
                            _2636 = _2563;
                            _2637 = _2564;
                            _2638 = _2565;
                            _2639 = _2566;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_68_pred = _2563;
                    frontier_phi_68_pred_1 = _2566;
                    frontier_phi_68_pred_2 = _2565;
                    frontier_phi_68_pred_3 = _2564;
                    frontier_phi_68_pred_4 = _2562;
                    frontier_phi_68_pred_5 = _2561;
                }
                _2342 = frontier_phi_68_pred;
                _2348 = frontier_phi_68_pred_1;
                _2346 = frontier_phi_68_pred_2;
                _2344 = frontier_phi_68_pred_3;
                _2340 = frontier_phi_68_pred_4;
                _2338 = frontier_phi_68_pred_5;
                uint _2496 = _2495 + 1u;
                if (_2496 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2489 = _2338;
                    _2490 = _2340;
                    _2491 = _2342;
                    _2492 = _2344;
                    _2493 = _2346;
                    _2494 = _2348;
                    _2495 = _2496;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
        }
        uvec4 _2351 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2352 = _2351.z;
        uint _2354 = (_2352 >> 8u) & 15u;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        float _2467;
        if (((4294967295u << _2354) & _2237) == 0u)
        {
            _2457 = _2337;
            _2459 = _2339;
            _2461 = _2341;
            _2463 = _2343;
            _2465 = _2345;
            _2467 = _2347;
        }
        else
        {
            float _2482 = inversesqrt(dot(vec3(_2191, _2192, _2193), vec3(_2191, _2192, _2193)));
            float _2483 = _2482 * _2191;
            float _2484 = _2482 * _2192;
            float _2485 = _2482 * _2193;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2354 < ((_2352 >> 12u) & 15u))
            {
                float _2458;
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2468;
                float _2617 = _2337;
                float _2618 = _2339;
                float _2619 = _2341;
                float _2620 = _2343;
                float _2621 = _2345;
                float _2622 = _2347;
                uint _2623 = _2354;
                uint _2632;
                bool _2633;
                for (;;)
                {
                    _2632 = texelFetch(g_lightClassification, int((((_2231 << 5u) + (_2217 << 9u)) + (_2623 << 2u)) >> 2u)).x;
                    _2633 = _2632 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2633)
                    {
                        frontier_phi_79_pred = _2622;
                        frontier_phi_79_pred_1 = _2621;
                        frontier_phi_79_pred_2 = _2620;
                        frontier_phi_79_pred_3 = _2619;
                        frontier_phi_79_pred_4 = _2618;
                        frontier_phi_79_pred_5 = _2617;
                    }
                    else
                    {
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _2830;
                        float _2831;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _2839 = _2617;
                        float _2840 = _2618;
                        float _2841 = _2619;
                        float _2842 = _2620;
                        float _2843 = _2621;
                        float _2844 = _2622;
                        uint _2845 = _2632;
                        uint _2846;
                        vec4 _2871;
                        float _2872;
                        vec4 _2887;
                        vec3 _2899;
                        vec4 _2915;
                        vec4 _2931;
                        float _2978;
                        bool _2979;
                        for (;;)
                        {
                            uint _2856 = ((_2623 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2845));
                            _2846 = (_2845 + 4294967295u) & _2845;
                            uint _2858 = _2856 * 40u;
                            _2871 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2858)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2858 + 3u)).x));
                            _2872 = _2871.w;
                            uint _2874 = (_2856 * 40u) + 4u;
                            _2887 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 3u)).x));
                            uint _2889 = (_2856 * 40u) + 8u;
                            _2899 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x));
                            uint _2902 = (_2856 * 40u) + 16u;
                            _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2918 = (_2856 * 40u) + 20u;
                            _2931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 3u)).x));
                            uint _2934 = (_2856 * 40u) + 24u;
                            vec4 _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2953 = (_2856 * 40u) + 28u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            _2978 = fma(_2193, _2966.z, fma(_2192, _2966.y, _2966.x * _2191)) + _2966.w;
                            _2979 = !((fma(_2193, _2947.z, fma(_2192, _2947.y, _2947.x * _2191)) + _2947.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2979)
                            {
                                float _3006 = _2871.x - _2191;
                                float _3007 = _2871.y - _2192;
                                float _3008 = _2871.z - _2193;
                                float _3009 = dot(vec3(_3006, _3007, _3008), vec3(_3006, _3007, _3008));
                                float _3012 = inversesqrt(_3009);
                                float _3013 = _3012 * _3006;
                                float _3014 = _3012 * _3007;
                                float _3015 = _3012 * _3008;
                                float _3019 = 1.0 - (_3009 / (_2872 * _2872));
                                float _4104 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3020 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3024 = sqrt(_3009) * _2887.w;
                                float _3026 = 1.39999997615814208984375 / (_3024 + 1.39999997615814208984375);
                                float _3027 = _3026 * _3026;
                                float _3030 = ((1.0 - _3027) * dot(vec3(_3013, _3014, _3015), vec3(_392, _395, _398))) + _3027;
                                float _3033 = _3024 * _3024;
                                float _3037 = (fma(_2193, _2915.z, fma(_2192, _2915.y, _2915.x * _2191)) + _2915.w) / _2978;
                                float _3038 = (fma(_2193, _2931.z, fma(_2192, _2931.y, _2931.x * _2191)) + _2931.w) / _2978;
                                float _3042 = 1.0 - dot(vec2(_3037, _3038), vec2(_3037, _3038));
                                float _4120 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
                                float _3044 = _3043 * (((isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0))) * _3020) / ((_3033 * 0.699999988079071044921875) + 1.0));
                                float _3056 = exp2(log2(1.0 / ((_3033 * 3.5) + 5.0)) * 0.25);
                                float _3057 = 1.0 - _468;
                                float _3064 = sqrt(1.0 - ((1.0 - (_3057 * _3057)) * (1.0 - (_3056 * _3056))));
                                float _3065 = _3064 * _3064;
                                float _3066 = _3065 * _3065;
                                float _3067 = _3013 - _2483;
                                float _3068 = _3014 - _2484;
                                float _3069 = _3015 - _2485;
                                float _3073 = inversesqrt(dot(vec3(_3067, _3068, _3069), vec3(_3067, _3068, _3069)));
                                float _3077 = dot(vec3(_392, _395, _398), vec3((-0.0) - _2483, (-0.0) - _2484, (-0.0) - _2485));
                                float _4131 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                                float _3080 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
                                float _3081 = dot(vec3(_392, _395, _398), vec3(_3073 * _3067, _3073 * _3068, _3073 * _3069));
                                float _4142 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3084 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                                float _3088 = ((_3084 * _3084) * (_3066 + (-1.0))) + 1.0;
                                float _3089 = _3026 * _3065;
                                float _3090 = _3089 * _3089;
                                float _3096 = ((1.0 - _3090) * dot(vec3(_392, _395, _398), vec3(_3013, _3014, _3015))) + _3090;
                                float _4153 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
                                float _3098 = 1.0 - _3065;
                                float _3108 = (0.5 / (((_3097 * ((_3080 * _3098) + _3065)) + 9.9999999392252902907785028219223e-09) + (((_3097 * _3098) + _3065) * _3080))) * _3097;
                                float _4164 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3118 = (_3043 * _3020) * (((_3066 * 3.1415927410125732421875) * (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0)))) / ((_3088 * _3088) * ((_3033 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3044 * _2887.z;
                                frontier_phi_85_pred_1 = _3044 * _2887.y;
                                frontier_phi_85_pred_2 = _3044 * _2887.x;
                                frontier_phi_85_pred_3 = _3118 * _2899.z;
                                frontier_phi_85_pred_4 = _3118 * _2899.y;
                                frontier_phi_85_pred_5 = _3118 * _2899.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3127 = frontier_phi_85_pred;
                            _3126 = frontier_phi_85_pred_1;
                            _3125 = frontier_phi_85_pred_2;
                            _3124 = frontier_phi_85_pred_3;
                            _3123 = frontier_phi_85_pred_4;
                            _3122 = frontier_phi_85_pred_5;
                            _2829 = _3125 + _2842;
                            _2830 = _3126 + _2843;
                            _2831 = _3127 + _2844;
                            _2826 = _3122 + _2839;
                            _2827 = _3123 + _2840;
                            _2828 = _3124 + _2841;
                            if (_2846 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2846;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2831;
                        frontier_phi_79_pred_1 = _2830;
                        frontier_phi_79_pred_2 = _2829;
                        frontier_phi_79_pred_3 = _2828;
                        frontier_phi_79_pred_4 = _2827;
                        frontier_phi_79_pred_5 = _2826;
                    }
                    _2468 = frontier_phi_79_pred;
                    _2466 = frontier_phi_79_pred_1;
                    _2464 = frontier_phi_79_pred_2;
                    _2462 = frontier_phi_79_pred_3;
                    _2460 = frontier_phi_79_pred_4;
                    _2458 = frontier_phi_79_pred_5;
                    uint _2624 = _2623 + 1u;
                    if (_2624 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2617 = _2458;
                        _2618 = _2460;
                        _2619 = _2462;
                        _2620 = _2464;
                        _2621 = _2466;
                        _2622 = _2468;
                        _2623 = _2624;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2464;
                frontier_phi_60_61_ladder_1 = _2468;
                frontier_phi_60_61_ladder_2 = _2466;
                frontier_phi_60_61_ladder_3 = _2462;
                frontier_phi_60_61_ladder_4 = _2460;
                frontier_phi_60_61_ladder_5 = _2458;
            }
            else
            {
                frontier_phi_60_61_ladder = _2343;
                frontier_phi_60_61_ladder_1 = _2347;
                frontier_phi_60_61_ladder_2 = _2345;
                frontier_phi_60_61_ladder_3 = _2341;
                frontier_phi_60_61_ladder_4 = _2339;
                frontier_phi_60_61_ladder_5 = _2337;
            }
            _2457 = frontier_phi_60_61_ladder_5;
            _2459 = frontier_phi_60_61_ladder_4;
            _2461 = frontier_phi_60_61_ladder_3;
            _2463 = frontier_phi_60_61_ladder;
            _2465 = frontier_phi_60_61_ladder_2;
            _2467 = frontier_phi_60_61_ladder_1;
        }
        float _2472 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
        _2249 = (_2472 * _2463) + _1683;
        _2251 = (_2472 * _2465) + _1685;
        _2253 = (_2472 * _2467) + _1687;
        _2255 = ((_2457 * _437) * _2472) + _2031;
        _2257 = ((_2459 * _439) * _2472) + _2033;
        _2259 = ((_2461 * _440) * _2472) + _2035;
    }
    else
    {
        _2249 = _1683;
        _2251 = _1685;
        _2253 = _1687;
        _2255 = _2031;
        _2257 = _2033;
        _2259 = _2035;
    }
    float _4180 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _4191 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _4202 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _2276 = ((isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0))) * (_2249 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _452))) + ((_2255 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1294)) * cbPerFrame._m0[3u].x);
    float _2277 = ((isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2251 + ((isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0))) * _452))) + ((_2257 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1294)) * cbPerFrame._m0[3u].x);
    float _2278 = ((isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_2253 + ((isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0))) * _452))) + ((_2259 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1294)) * cbPerFrame._m0[3u].x);
    uint _2279 = _411 + 6u;
    float _2287 = _371 / cbSceneParam._m0[86u].x;
    float _2288 = _372 / cbSceneParam._m0[86u].y;
    vec4 _2302 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, (log2((isnan(cbSceneParam._m0[77u].w) ? _292 : (isnan(_292) ? cbSceneParam._m0[77u].w : min(_292, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2304 = _2302.x;
    float _2305 = _2302.y;
    float _2306 = _2302.z;
    float _2307 = _2302.w;
    float _2399;
    float _2401;
    float _2403;
    float _2405;
    if (_292 > cbSceneParam._m0[78u].w)
    {
        float _2362 = isnan(_292) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _292 : min(cbSceneParam._m0[80u].w, _292));
        float _2363 = _2362 / _292;
        float _2374 = _2363 * _343;
        float _2375 = _344 * _2363;
        float _2376 = (-0.0) - _2375;
        float _2377 = _2363 * _345;
        float _2379 = (cbSceneParam._m0[77u].w * _2376) / _2362;
        float _2380 = _2379 + cbSceneParam._m0[79u].w;
        float _2381 = cbSceneParam._m0[79u].w - _2375;
        float _2387 = sqrt(((_2374 * _2374) + (_2375 * _2375)) + (_2377 * _2377));
        float _2390 = (1.0 - (cbSceneParam._m0[77u].w / _2362)) * _2387;
        float _2395 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2397 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2574;
        if (abs((_2376 - _2379) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2574 = ((((_2380 > 0.0) ? exp2(_2395 * _2380) : (2.0 - exp2(_2397 * _2380))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2390;
        }
        else
        {
            float _2518 = 1.0 / cbSceneParam._m0[80u].x;
            float _2519 = isnan(_2381) ? _2380 : (isnan(_2380) ? _2381 : max(_2380, _2381));
            float _2520 = isnan(_2381) ? _2380 : (isnan(_2380) ? _2381 : min(_2380, _2381));
            float _2529 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : min(_2519, 0.0));
            float _2530 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : min(_2520, 0.0));
            _2574 = ((abs(_2387 / _2376) * cbSceneParam._m0[80u].y) * ((((_2529 - _2530) * 2.0) - ((exp2(_2395 * (isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0)))) - exp2(_2395 * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0))))) * _2518)) - ((exp2(_2397 * _2529) - exp2(_2397 * _2530)) * _2518))) + (_2390 * cbSceneParam._m0[80u].z);
        }
        vec4 _2576 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2287, _2288, 1.0), 0.0);
        float _2585 = exp2((_2574 * (-1.44269502162933349609375)) * (1.0 - _2576.w));
        float _2586 = log2(_2585);
        float _2602 = log2(_2307);
        _2399 = (exp2(_2602 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].x)) * _2576.x) / cbSceneParam._m0[78u].x)) + _2304;
        _2401 = (exp2(_2602 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].y)) * _2576.y) / cbSceneParam._m0[78u].y)) + _2305;
        _2403 = (exp2(_2602 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2586 * cbSceneParam._m0[78u].z)) * _2576.z) / cbSceneParam._m0[78u].z)) + _2306;
        _2405 = _2585 * _2307;
    }
    else
    {
        _2399 = _2304;
        _2401 = _2305;
        _2403 = _2306;
        _2405 = _2307;
    }
    bool _2612;
    vec4 _2415;
    vec4 _2437;
    float _2439;
    float _2443;
    float _2444;
    float _2445;
    float _2446;
    bool _2456;
    for (;;)
    {
        _2415 = cbMatDynParam._m0[0u];
        float _2417 = roundEven(_2415.y);
        bool _2418 = _2417 == 3.0;
        float _2419 = log2(_2405);
        float _2426 = exp2(_2419 * cbSceneParam._m0[78u].x) * _2276;
        float _2427 = exp2(_2419 * cbSceneParam._m0[78u].y) * _2277;
        float _2428 = exp2(_2419 * cbSceneParam._m0[78u].z) * _2278;
        float _2435 = _359 + (-0.5);
        _2437 = cbMtdParam._m0[1u];
        _2439 = _2437.y * _2435;
        float _2442 = (_2417 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2443 = _2442 * (_2418 ? _2426 : (_2426 + (cbSceneParam._m0[72u].w * _2399)));
        _2444 = _2442 * (_2418 ? _2427 : (_2427 + (cbSceneParam._m0[72u].w * _2401)));
        _2445 = _2442 * (_2418 ? _2428 : (_2428 + (cbSceneParam._m0[72u].w * _2403)));
        _2446 = _2435 * 0.999000012874603271484375;
        _2456 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2456)
        {
            if ((cbInstanceData._m0[_411 + 7u].x + _2446) < 0.5)
            {
                _2612 = true;
                break;
            }
        }
        uint _2553 = _413 + uint(_2415.w);
        if ((cbInstanceData._m0[_2553].w < 1.0) && ((cbInstanceData._m0[_2553].w + _2446) < 0.5))
        {
            _2612 = true;
            break;
        }
        if ((_2439 + 1.0) < _2437.x)
        {
            _2612 = true;
            break;
        }
        _2612 = false;
        break;
    }
    float _2817;
    if (_2612)
    {
        discard_state = true;
        _2817 = 0.0;
    }
    else
    {
        _2817 = cbInstanceData._m0[_2279].w;
    }
    SV_Target.x = _2443;
    SV_Target.y = _2444;
    SV_Target.z = _2445;
    SV_Target.w = _2817;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2279].w;
    discard_exit();
}


