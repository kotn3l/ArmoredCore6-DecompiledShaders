#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D MN_Material_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _854;
float _3245;
float _3246;
float _3247;
float _3248;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _233 = texture(sampler2D(MN_Material_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _242 = (_233.x * 2.0) + (-1.0);
    float _244 = (_233.y * 2.0) + (-1.0);
    float _245 = dot(vec2(_242, _244), vec2(_242, _244));
    float _3257 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _251 = sqrt(1.0 - (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))));
    float _253 = cbMtdParam._m0[10u].y + _233.z;
    float _256 = fma(_251, _207, fma(_244, _199 * TANGENT.x, (_185 * _178) * _242));
    float _259 = fma(_251, _208, fma(_244, _199 * TANGENT.y, (_185 * _179) * _242));
    float _262 = fma(_251, _209, fma(_244, _199 * TANGENT.z, (_185 * _180) * _242));
    float _266 = inversesqrt(dot(vec3(_256, _259, _262), vec3(_256, _259, _262)));
    float _267 = _266 * _256;
    float _268 = _266 * _259;
    float _269 = _266 * _262;
    float _3268 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _270 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? cbMtdParam._m0[9u].x : (isnan(cbMtdParam._m0[9u].x) ? 0.0 : max(cbMtdParam._m0[9u].x, 0.0));
    float _3290 = isnan(0.0) ? cbMtdParam._m0[9u].y : (isnan(cbMtdParam._m0[9u].y) ? 0.0 : max(cbMtdParam._m0[9u].y, 0.0));
    float _3301 = isnan(0.0) ? cbMtdParam._m0[9u].z : (isnan(cbMtdParam._m0[9u].z) ? 0.0 : max(cbMtdParam._m0[9u].z, 0.0));
    float _3312 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _274 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _290 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _331 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _341 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _331);
    float _342 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _331);
    float _343 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _331);
    float _347 = inversesqrt(dot(vec3(_341, _342, _343), vec3(_341, _342, _343)));
    float _348 = _341 * _347;
    float _349 = _342 * _347;
    float _350 = _343 * _347;
    vec4 _355 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _357 = _355.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _533 = sqrt(((_341 * _341) + (_342 * _342)) + (_343 * _343));
        float _539 = (cbMatDynParam._m0[5u].x * _533) + cbMatDynParam._m0[5u].y;
        float _3323 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
        float _540 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _544 = (cbMatDynParam._m0[5u].z * _533) + cbMatDynParam._m0[5u].w;
        float _3334 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) - _540)) + _540) < ((_357 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _369 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _370 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _390 = fma(_269, cbSceneParam._m0[5u].z, fma(_268, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _267));
    float _393 = fma(_269, cbSceneParam._m0[6u].z, fma(_268, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _267));
    float _396 = fma(_269, cbSceneParam._m0[7u].z, fma(_268, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _267));
    uint _409 = uint(roundEven(NORMAL.w)) * 13u;
    uint _411 = _409 + 9u;
    uint _412 = _411 + uint(cbMatDynParam._m0[0u].w);
    float _418 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_412].x;
    float _419 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_412].y;
    float _420 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0)))) * cbInstanceData._m0[_412].z;
    float _3345 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _421 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
    float _3356 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
    float _3367 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _424 = 1.0 - _274;
    float _425 = _421 * _424;
    float _426 = _422 * _424;
    float _427 = _423 * _424;
    float _432 = (_421 + (-0.039999999105930328369140625)) * _274;
    float _433 = (_422 + (-0.039999999105930328369140625)) * _274;
    float _434 = (_423 + (-0.039999999105930328369140625)) * _274;
    float _435 = _432 + 0.039999999105930328369140625;
    float _437 = _433 + 0.039999999105930328369140625;
    float _438 = _434 + 0.039999999105930328369140625;
    vec4 _447 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _369, cbSceneParam._m0[86u].y * _370));
    float _450 = _447.x * TEXCOORD.z;
    float _451 = dot(vec3(_267, _268, _269), vec3(_348, _349, _350));
    float _454 = _451 * 2.0;
    float _458 = (_454 * _267) - _348;
    float _459 = (_454 * _268) - _349;
    float _460 = (_454 * _269) - _350;
    float _464 = abs(dot(vec3(_348, _349, _350), vec3(_267, _268, _269)));
    float _3378 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _466 = sqrt(_270);
    float _479 = exp2((_466 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_466 * 3.0));
    float _485 = (1.0 - _479) * ((_466 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _486 = _479 * _466;
    float _514 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _518 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _522 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _853;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _578 = fma(_522, cbModelParam._m0[26u].z, fma(_518, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _514));
        float _582 = fma(_522, cbModelParam._m0[27u].z, fma(_518, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _514));
        float _586 = fma(_522, cbModelParam._m0[28u].z, fma(_518, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _514));
        float _611 = _514 + _267;
        float _612 = _518 + _268;
        float _613 = _522 + _269;
        float _623 = fma(_613, cbModelParam._m0[26u].z, fma(_612, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) - _578;
        float _624 = fma(_613, cbModelParam._m0[27u].z, fma(_612, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) - _582;
        float _625 = fma(_613, cbModelParam._m0[28u].z, fma(_612, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) - _586;
        float _629 = inversesqrt(dot(vec3(_623, _624, _625), vec3(_623, _624, _625)));
        float _642 = ((_629 * _623) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_578 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_629 * _624) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_582 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_629 * _625) / cbModelParam._m0[34u].z) + ((((((_586 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_642, _643, _644), 0.0);
        float _681 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_647.x + (-0.5));
        float _683 = _681 * (_647.y + (-0.5));
        float _684 = _681 * (_647.z + (-0.5));
        float _691 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_654.x + (-0.5));
        float _693 = _691 * (_654.y + (-0.5));
        float _694 = _691 * (_654.z + (-0.5));
        float _701 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_661.x + (-0.5));
        float _703 = _701 * (_661.y + (-0.5));
        float _704 = _701 * (_661.z + (-0.5));
        float _711 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_668.x + (-0.5));
        float _713 = _711 * (_668.y + (-0.5));
        float _714 = _711 * (_668.z + (-0.5));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = _682 * 0.5;
        float _719 = _692 * 0.5;
        float _720 = _702 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _735 = (dot(vec3(_267, _268, _269), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3404 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _745 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3415 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _746 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _747 = _746 * 2.0;
        float _751 = (1.0 - _746) / (_746 + 1.0);
        float _3426 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _761 = ((((1.0 - _752) * (_747 + 2.0)) * exp2(log2(isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0))) * (_747 + 1.0))) + _752) * _715;
        float _762 = _683 * 0.5;
        float _763 = _693 * 0.5;
        float _764 = _703 * 0.5;
        float _765 = dot(vec3(_762, _763, _764), vec3(_762, _763, _764));
        float _770 = (_765 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_765);
        float _778 = (dot(vec3(_267, _268, _269), vec3(_770 * _762, _770 * _763, _770 * _764)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _787 = sqrt(((_763 * _763) + (_762 * _762)) + (_764 * _764)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _788 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _789 = _788 * 2.0;
        float _793 = (1.0 - _788) / (_788 + 1.0);
        float _3459 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _803 = ((((1.0 - _794) * (_789 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_789 + 1.0))) + _794) * _716;
        float _804 = _684 * 0.5;
        float _805 = _694 * 0.5;
        float _806 = _704 * 0.5;
        float _807 = dot(vec3(_804, _805, _806), vec3(_804, _805, _806));
        float _812 = (_807 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_807);
        float _820 = (dot(vec3(_267, _268, _269), vec3(_812 * _804, _812 * _805, _812 * _806)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _829 = sqrt(((_805 * _805) + (_804 * _804)) + (_806 * _806)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _831 = _830 * 2.0;
        float _835 = (1.0 - _830) / (_830 + 1.0);
        float _3492 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _836 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _845 = ((((1.0 - _836) * (_831 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_831 + 1.0))) + _836) * _717;
        _853 = _684;
        _855 = _683;
        _856 = _682;
        _857 = _694;
        _858 = _693;
        _859 = _692;
        _860 = _704;
        _861 = _703;
        _862 = _702;
        _863 = _717;
        _864 = _716;
        _865 = _715;
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0)));
    }
    else
    {
        _853 = _854;
        _855 = _854;
        _856 = _854;
        _857 = _854;
        _858 = _854;
        _859 = _854;
        _860 = _854;
        _861 = _854;
        _862 = _854;
        _863 = _854;
        _864 = _854;
        _865 = _854;
        _866 = 0.0;
        _867 = 0.0;
        _868 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_522, cbModelParam._m0[30u].z, fma(_518, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _514));
        float _901 = fma(_522, cbModelParam._m0[31u].z, fma(_518, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _514));
        float _905 = fma(_522, cbModelParam._m0[32u].z, fma(_518, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _514));
        float _928 = _514 + _267;
        float _929 = _518 + _268;
        float _930 = _522 + _269;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_267, _268, _269), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3555 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_267, _268, _269), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3588 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_267, _268, _269), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _3621 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _854;
        _1167 = _854;
        _1168 = _854;
        _1169 = _854;
        _1170 = _854;
        _1171 = _854;
        _1172 = _854;
        _1173 = _854;
        _1174 = _854;
        _1175 = _854;
        _1176 = _854;
        _1177 = _854;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _866)) + _866;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _867)) + _867;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _868)) + _868;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _458 * 0.5;
    float _1235 = _459 * 0.5;
    float _1236 = _460 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_853, _857, _860, _863));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_855, _858, _861, _864));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _859, _862, _865));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _270);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_522, cbModelParam._m0[13u].z, fma(_518, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _514)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_522, cbModelParam._m0[14u].z, fma(_518, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _514)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_522, cbModelParam._m0[15u].z, fma(_518, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _514)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_460, cbModelParam._m0[13u].z, fma(_459, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _458));
        float _1366 = fma(_460, cbModelParam._m0[14u].z, fma(_459, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _458));
        float _1369 = fma(_460, cbModelParam._m0[15u].z, fma(_459, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _458));
        float _1397;
        if (_1363 > 0.0)
        {
            _1397 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1397 = frontier_phi_19_17_ladder;
        }
        float _1605;
        if (_1366 > 0.0)
        {
            _1605 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1605 = frontier_phi_28_24_ladder;
        }
        float _1859;
        if (_1369 > 0.0)
        {
            _1859 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1859 = frontier_phi_40_35_ladder;
        }
        float _1861 = isnan(_1605) ? _1397 : (isnan(_1397) ? _1605 : min(_1397, _1605));
        float _1862 = isnan(_1859) ? _1861 : (isnan(_1861) ? _1859 : min(_1861, _1859));
        float _1866 = (_1862 * _1363) + _1352;
        float _1867 = (_1862 * _1366) + _1356;
        float _1868 = (_1862 * _1369) + _1360;
        float _1869 = _1862 * 9.9999997473787516355514526367188e-05;
        float _1871 = (-1.0) - _1869;
        float _1873 = _1869 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1868 > _1873) || ((_1868 < _1871) || ((_1867 > _1873) || ((_1867 < _1871) || ((_1866 < _1871) || (_1866 > _1873))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1996 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1868, cbModelParam._m0[9u].z, fma(_1867, cbModelParam._m0[9u].y, _1866 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1868, cbModelParam._m0[10u].z, fma(_1867, cbModelParam._m0[10u].y, _1866 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1868, cbModelParam._m0[11u].z, fma(_1867, cbModelParam._m0[11u].y, _1866 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_18_40_ladder = _1996.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1996.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1996.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_18_40_ladder_2;
        _1387 = frontier_phi_18_40_ladder_1;
        _1389 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_458, _459, _460), _1303);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1393 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _270);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1393 : min(cbModelParam._m0[25u].w, _1393));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1451 = fma(_522, cbModelParam._m0[21u].z, fma(_518, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _514)) + cbModelParam._m0[21u].w;
        float _1455 = fma(_522, cbModelParam._m0[22u].z, fma(_518, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _514)) + cbModelParam._m0[22u].w;
        float _1459 = fma(_522, cbModelParam._m0[23u].z, fma(_518, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _514)) + cbModelParam._m0[23u].w;
        float _1462 = fma(_460, cbModelParam._m0[21u].z, fma(_459, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _458));
        float _1465 = fma(_460, cbModelParam._m0[22u].z, fma(_459, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _458));
        float _1468 = fma(_460, cbModelParam._m0[23u].z, fma(_459, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _458));
        float _1610;
        if (_1462 > 0.0)
        {
            _1610 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1610 = frontier_phi_30_26_ladder;
        }
        float _1886;
        if (_1465 > 0.0)
        {
            _1886 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1886 = frontier_phi_42_37_ladder;
        }
        float _2099;
        if (_1468 > 0.0)
        {
            _2099 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2099 = frontier_phi_51_48_ladder;
        }
        float _2101 = isnan(_1886) ? _1610 : (isnan(_1610) ? _1886 : min(_1610, _1886));
        float _2102 = isnan(_2099) ? _2101 : (isnan(_2101) ? _2099 : min(_2101, _2099));
        float _2106 = (_2102 * _1462) + _1451;
        float _2107 = (_2102 * _1465) + _1455;
        float _2108 = (_2102 * _1468) + _1459;
        float _2109 = _2102 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2109;
        float _2112 = _2109 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2108 > _2112) || ((_2108 < _2110) || ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 < _2110) || (_2106 > _2112))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2306 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2108, cbModelParam._m0[17u].z, fma(_2107, cbModelParam._m0[17u].y, _2106 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2108, cbModelParam._m0[18u].z, fma(_2107, cbModelParam._m0[18u].y, _2106 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2108, cbModelParam._m0[19u].z, fma(_2107, cbModelParam._m0[19u].y, _2106 * cbModelParam._m0[19u].x))), _1394);
            frontier_phi_27_51_ladder = _2306.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2306.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2306.x * cbModelParam._m0[1u].z;
        }
        _1487 = frontier_phi_27_51_ladder_2;
        _1489 = frontier_phi_27_51_ladder_1;
        _1491 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_458, _459, _460), _1394);
        _1487 = _1471.x * cbModelParam._m0[1u].z;
        _1489 = _1471.y * cbModelParam._m0[1u].z;
        _1491 = _1471.z * cbModelParam._m0[1u].z;
    }
    float _1504 = (((_485 * _435) + _486) * _450) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_485 * _437) + _486) * _450) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_485 * _438) + _486) * _450) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1511 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    uvec4 _1527 = floatBitsToUint(cbInstanceData._m0[_409 + 5u]);
    uint _1529 = _1527.x * 14u;
    uint _1530 = _1529 + 13u;
    float _1537 = _450 + (-1.0);
    float _1542 = (cbLight._m0[_1530].x * _1537) + 1.0;
    float _1543 = (cbLight._m0[_1530].y * _1537) + 1.0;
    float _1544 = (cbLight._m0[_1530].z * _1537) + 1.0;
    float _1545 = (cbLight._m0[_1530].w * _1537) + 1.0;
    uint _1546 = _1529 + 5u;
    float _1552 = isnan(1.0) ? _1543 : (isnan(_1543) ? 1.0 : min(_1543, 1.0));
    uint _1556 = _1529 + 4u;
    float _1563 = isnan(1.0) ? _1542 : (isnan(_1542) ? 1.0 : min(_1542, 1.0));
    uint _1567 = _1529 | 1u;
    float _1578 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_267, _268, _269));
    float _1581 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_267, _268, _269));
    float _3757 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
    float _3768 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
    float _1586 = (isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) * 0.3183098733425140380859375;
    float _1588 = (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * 0.3183098733425140380859375;
    float _1595 = ((cbLight._m0[_1546].x * _1552) * _1588) + ((cbLight._m0[_1556].x * _1563) * _1586);
    float _1596 = ((_1552 * cbLight._m0[_1546].y) * _1588) + ((_1563 * cbLight._m0[_1556].y) * _1586);
    float _1597 = ((_1552 * cbLight._m0[_1546].z) * _1588) + ((_1563 * cbLight._m0[_1556].z) * _1586);
    uvec4 _1602 = floatBitsToUint(cbLight._m0[_1529 + 12u]);
    bool _1604 = _1602.x == 0u;
    float _1615;
    float _1617;
    float _1619;
    if (_1604)
    {
        _1615 = _1595;
        _1617 = _1596;
        _1619 = _1597;
    }
    else
    {
        uint _1623 = _1529 + 6u;
        float _1639 = (dot(vec3(cbLight._m0[_1529 + 2u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _1640 = _1639 * _1639;
        float _3779 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1642 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _1615 = (((cbLight._m0[_1623].x * 0.3183098733425140380859375) * _1641) * _1642) + _1595;
        _1617 = (((cbLight._m0[_1623].y * 0.3183098733425140380859375) * _1641) * _1642) + _1596;
        _1619 = (((cbLight._m0[_1623].z * 0.3183098733425140380859375) * _1641) * _1642) + _1597;
    }
    bool _1622 = _1602.y == 0u;
    float _1660;
    float _1662;
    float _1664;
    if (_1622)
    {
        _1660 = _1615;
        _1662 = _1617;
        _1664 = _1619;
    }
    else
    {
        uint _1830 = _1529 + 7u;
        float _1846 = (dot(vec3(cbLight._m0[_1529 + 3u].xyz), vec3(_267, _268, _269)) * 0.5) + 0.5;
        float _1847 = _1846 * _1846;
        float _3795 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1849 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _1660 = (((cbLight._m0[_1830].x * 0.3183098733425140380859375) * _1848) * _1849) + _1615;
        _1662 = (((cbLight._m0[_1830].y * 0.3183098733425140380859375) * _1848) * _1849) + _1617;
        _1664 = (((cbLight._m0[_1830].z * 0.3183098733425140380859375) * _1848) * _1849) + _1619;
    }
    uint _1667 = _1529 + 8u;
    float _1680 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1529].w)) * _270) * 0.949999988079071044921875);
    float _1681 = _1680 * _1680;
    float _1682 = cbLight._m0[_1529].x + _348;
    float _1683 = cbLight._m0[_1529].y + _349;
    float _1684 = cbLight._m0[_1529].z + _350;
    float _1688 = inversesqrt(dot(vec3(_1682, _1683, _1684), vec3(_1682, _1683, _1684)));
    float _1689 = _1688 * _1682;
    float _1690 = _1688 * _1683;
    float _1691 = _1688 * _1684;
    float _1692 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1529].xyz));
    float _3811 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
    float _1695 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _1696 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1697 = dot(vec3(_267, _268, _269), vec3(_1689, _1690, _1691));
    float _3833 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1700 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1701 = dot(vec3(cbLight._m0[_1529].xyz), vec3(_1689, _1690, _1691));
    float _3844 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1705 = _1681 * _1681;
    float _1709 = ((_1700 * _1700) * (_1705 + (-1.0))) + 1.0;
    float _1717 = exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0);
    float _1718 = 0.959999978542327880859375 - _432;
    float _1720 = 0.959999978542327880859375 - _433;
    float _1721 = 0.959999978542327880859375 - _434;
    float _1728 = 1.0 - _1681;
    float _1739 = (0.5 / (((_1696 * ((_1695 * _1728) + _1681)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1728) + _1681) * _1695))) * _1695;
    float _3855 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1741 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1705 / ((_1709 * _1709) * 3.141590118408203125));
    uint _1752 = _1529 + 9u;
    float _1763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1567].w)) * _270) * 0.949999988079071044921875);
    float _1764 = _1763 * _1763;
    float _1765 = cbLight._m0[_1567].x + _348;
    float _1766 = cbLight._m0[_1567].y + _349;
    float _1767 = cbLight._m0[_1567].z + _350;
    float _1771 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
    float _1772 = _1771 * _1765;
    float _1773 = _1771 * _1766;
    float _1774 = _1771 * _1767;
    float _1775 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1567].xyz));
    float _3866 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1779 = dot(vec3(_267, _268, _269), vec3(_1772, _1773, _1774));
    float _3877 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1782 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
    float _1783 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1772, _1773, _1774));
    float _3888 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1787 = _1764 * _1764;
    float _1791 = ((_1782 * _1782) * (_1787 + (-1.0))) + 1.0;
    float _1798 = exp2(log2(1.0 - (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0)))) * 5.0);
    float _1805 = 1.0 - _1764;
    float _1815 = (0.5 / (((_1696 * ((_1778 * _1805) + _1764)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1805) + _1764) * _1778))) * _1778;
    float _3899 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * (_1787 / ((_1791 * _1791) * 3.141590118408203125));
    float _1827 = (((((_1798 * _1718) + _435) * cbLight._m0[_1752].x) * _1817) * _1552) + (((((_1717 * _1718) + _435) * cbLight._m0[_1667].x) * _1741) * _1563);
    float _1828 = (((((_1798 * _1720) + _437) * cbLight._m0[_1752].y) * _1817) * _1552) + (((((_1717 * _1720) + _437) * cbLight._m0[_1667].y) * _1741) * _1563);
    float _1829 = (((((_1798 * _1721) + _438) * cbLight._m0[_1752].z) * _1817) * _1552) + (((((_1717 * _1721) + _438) * cbLight._m0[_1667].z) * _1741) * _1563);
    float _1891;
    float _1893;
    float _1895;
    if (_1604)
    {
        _1891 = _1827;
        _1893 = _1828;
        _1895 = _1829;
    }
    else
    {
        uint _1897 = _1529 + 2u;
        uint _1901 = _1529 + 10u;
        float _1915 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1897].w)) * _270) * 0.949999988079071044921875);
        float _1916 = _1915 * _1915;
        float _1917 = cbLight._m0[_1897].x + _348;
        float _1918 = cbLight._m0[_1897].y + _349;
        float _1919 = cbLight._m0[_1897].z + _350;
        float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
        float _1924 = _1923 * _1917;
        float _1925 = _1923 * _1918;
        float _1926 = _1923 * _1919;
        float _1927 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_1897].xyz));
        float _3910 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1930 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1931 = dot(vec3(_267, _268, _269), vec3(_1924, _1925, _1926));
        float _3921 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1934 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1935 = dot(vec3(cbLight._m0[_1897].xyz), vec3(_1924, _1925, _1926));
        float _3932 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1939 = _1916 * _1916;
        float _1943 = ((_1934 * _1934) * (_1939 + (-1.0))) + 1.0;
        float _1950 = exp2(log2(1.0 - (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * 5.0);
        float _1957 = 1.0 - _1916;
        float _1967 = (0.5 / (((_1696 * ((_1930 * _1957) + _1916)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _1957) + _1916) * _1930))) * _1930;
        float _3943 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1969 = (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1939 / ((_1943 * _1943) * 3.141590118408203125));
        float _1970 = isnan(1.0) ? _1544 : (isnan(_1544) ? 1.0 : min(_1544, 1.0));
        _1891 = (((((_1950 * _1718) + _435) * cbLight._m0[_1901].x) * _1969) * _1970) + _1827;
        _1893 = (((((_1950 * _1720) + _437) * cbLight._m0[_1901].y) * _1969) * _1970) + _1828;
        _1895 = (((((_1950 * _1721) + _438) * cbLight._m0[_1901].z) * _1969) * _1970) + _1829;
    }
    float _2005;
    float _2007;
    float _2009;
    if (_1622)
    {
        _2005 = _1891;
        _2007 = _1893;
        _2009 = _1895;
    }
    else
    {
        uint _2016 = _1529 + 3u;
        uint _2020 = _1529 + 11u;
        float _2034 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2016].w)) * _270) * 0.949999988079071044921875);
        float _2035 = _2034 * _2034;
        float _2036 = cbLight._m0[_2016].x + _348;
        float _2037 = cbLight._m0[_2016].y + _349;
        float _2038 = cbLight._m0[_2016].z + _350;
        float _2042 = inversesqrt(dot(vec3(_2036, _2037, _2038), vec3(_2036, _2037, _2038)));
        float _2043 = _2042 * _2036;
        float _2044 = _2042 * _2037;
        float _2045 = _2042 * _2038;
        float _2046 = dot(vec3(_267, _268, _269), vec3(cbLight._m0[_2016].xyz));
        float _3959 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
        float _2049 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _2050 = dot(vec3(_267, _268, _269), vec3(_2043, _2044, _2045));
        float _3970 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
        float _2053 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _2054 = dot(vec3(cbLight._m0[_2016].xyz), vec3(_2043, _2044, _2045));
        float _3981 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2058 = _2035 * _2035;
        float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
        float _2069 = exp2(log2(1.0 - (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0)))) * 5.0);
        float _2076 = 1.0 - _2035;
        float _2086 = (0.5 / (((_1696 * ((_2049 * _2076) + _2035)) + 9.9999999392252902907785028219223e-09) + (((_1696 * _2076) + _2035) * _2049))) * _2049;
        float _3992 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2088 = (isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
        float _2089 = isnan(1.0) ? _1545 : (isnan(_1545) ? 1.0 : min(_1545, 1.0));
        _2005 = (((((_2069 * _1718) + _435) * cbLight._m0[_2020].x) * _2088) * _2089) + _1891;
        _2007 = (((((_2069 * _1720) + _437) * cbLight._m0[_2020].y) * _2088) * _2089) + _1893;
        _2009 = (((((_2069 * _1721) + _438) * cbLight._m0[_2020].z) * _2088) * _2089) + _1895;
    }
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    if (_1527.y == 0u)
    {
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2164;
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2164;
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2164;
        uvec4 _2179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2180 = _2179.x;
        uint _2191 = uint((float(_2179.y) * floor(float(uint(cbSceneParam._m0[85u].y * _370) / _2180))) + floor(float(uint(cbSceneParam._m0[85u].x * _369) / _2180)));
        float _2201 = (log2(_2167 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2202 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        uint _2205 = uint(isnan(14.0) ? _2202 : (isnan(_2202) ? 14.0 : min(_2202, 14.0)));
        uvec4 _2210 = texelFetch(g_lightClusterGridBuffer, int(((_2205 << 2u) + (_2191 << 6u)) >> 2u));
        uint _2211 = _2210.x;
        uint _2212 = _2179.z;
        float _2311;
        float _2313;
        float _2315;
        float _2317;
        float _2319;
        float _2321;
        if (((((1u << ((_2212 >> 4u) & 15u)) + 4294967295u) & _2211) == 0u) || ((_2212 & 240u) == 0u))
        {
            _2311 = 0.0;
            _2313 = 0.0;
            _2315 = 0.0;
            _2317 = 0.0;
            _2319 = 0.0;
            _2321 = 0.0;
        }
        else
        {
            float _2312;
            float _2314;
            float _2316;
            float _2318;
            float _2320;
            float _2322;
            float _2463 = 0.0;
            float _2464 = 0.0;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            uint _2469 = 0u;
            uint _2478;
            bool _2479;
            for (;;)
            {
                _2478 = texelFetch(g_lightClassification, int((((_2205 << 5u) + (_2191 << 9u)) + (_2469 << 2u)) >> 2u)).x;
                _2479 = _2478 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2479)
                {
                    frontier_phi_68_pred = _2465;
                    frontier_phi_68_pred_1 = _2468;
                    frontier_phi_68_pred_2 = _2467;
                    frontier_phi_68_pred_3 = _2466;
                    frontier_phi_68_pred_4 = _2464;
                    frontier_phi_68_pred_5 = _2463;
                }
                else
                {
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    float _2613;
                    uint _2614;
                    _2608 = _2463;
                    _2609 = _2464;
                    _2610 = _2465;
                    _2611 = _2466;
                    _2612 = _2467;
                    _2613 = _2468;
                    _2614 = _2478;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    for (;;)
                    {
                        uint _2618 = uint(findLSB(_2614)) + (_2469 << 5u);
                        uint _2615 = (_2614 + 4294967295u) & _2614;
                        uint _2620 = _2618 * 48u;
                        vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2620)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2620 + 3u)).x));
                        uint _2640 = (_2618 * 48u) + 4u;
                        vec4 _2653 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        uint _2659 = (_2618 * 48u) + 8u;
                        vec3 _2670 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2659)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2659 + 2u)).x));
                        float _2674 = _2634.x - _2165;
                        float _2675 = _2634.y - _2166;
                        float _2676 = _2634.z - _2167;
                        float _2677 = dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676));
                        float _2680 = inversesqrt(_2677);
                        float _2681 = _2680 * _2674;
                        float _2682 = _2680 * _2675;
                        float _2683 = _2680 * _2676;
                        float _2684 = dot(vec3(_390, _393, _396), vec3(_2681, _2682, _2683));
                        float _2689 = 1.0 - (_2677 * _2634.w);
                        float _4018 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2690 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2691 = sqrt(_2677) * _2653.w;
                        float _2694 = 1.39999997615814208984375 / (_2691 + 1.39999997615814208984375);
                        float _2695 = _2694 * _2694;
                        float _2698 = ((1.0 - _2695) * _2684) + _2695;
                        float _2701 = _2691 * _2691;
                        float _2705 = ((isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0))) * _2690) / ((_2701 * 0.699999988079071044921875) + 1.0);
                        float _2709 = (-0.0) - _2165;
                        float _2710 = (-0.0) - _2166;
                        float _2711 = (-0.0) - _2167;
                        float _2715 = inversesqrt(dot(vec3(_2709, _2710, _2711), vec3(_2709, _2710, _2711)));
                        float _2716 = _2715 * _2709;
                        float _2717 = _2715 * _2710;
                        float _2718 = _2715 * _2711;
                        float _2726 = exp2(log2(1.0 / ((_2701 * 3.5) + 5.0)) * 0.25);
                        float _2727 = 1.0 - _466;
                        float _2734 = sqrt(1.0 - ((1.0 - (_2727 * _2727)) * (1.0 - (_2726 * _2726))));
                        float _2735 = _2734 * _2734;
                        float _2736 = _2735 * _2735;
                        float _2737 = _2716 + _2681;
                        float _2738 = _2717 + _2682;
                        float _2739 = _2718 + _2683;
                        float _2743 = inversesqrt(dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739)));
                        float _2747 = dot(vec3(_390, _393, _396), vec3(_2716, _2717, _2718));
                        float _4034 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2750 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
                        float _2751 = dot(vec3(_390, _393, _396), vec3(_2743 * _2737, _2743 * _2738, _2743 * _2739));
                        float _4045 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2754 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
                        float _2758 = ((_2754 * _2754) * (_2736 + (-1.0))) + 1.0;
                        float _2759 = _2694 * _2735;
                        float _2760 = _2759 * _2759;
                        float _2763 = ((1.0 - _2760) * _2684) + _2760;
                        float _4056 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2765 = 1.0 - _2735;
                        float _2775 = (0.5 / (((_2764 * ((_2750 * _2765) + _2735)) + 9.9999999392252902907785028219223e-09) + (((_2764 * _2765) + _2735) * _2750))) * _2764;
                        float _4067 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                        float _2786 = (((_2736 * 3.1415927410125732421875) * (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) / ((_2758 * _2758) * ((_2701 * 2.1991131305694580078125) + 3.141590118408203125))) * _2690;
                        _2538 = (_2705 * _2653.x) + _2611;
                        _2539 = (_2705 * _2653.y) + _2612;
                        _2540 = (_2705 * _2653.z) + _2613;
                        _2535 = (_2786 * _2670.x) + _2608;
                        _2536 = (_2786 * _2670.y) + _2609;
                        _2537 = (_2786 * _2670.z) + _2610;
                        if (_2615 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2608 = _2535;
                            _2609 = _2536;
                            _2610 = _2537;
                            _2611 = _2538;
                            _2612 = _2539;
                            _2613 = _2540;
                            _2614 = _2615;
                        }
                    }
                    frontier_phi_68_pred = _2537;
                    frontier_phi_68_pred_1 = _2540;
                    frontier_phi_68_pred_2 = _2539;
                    frontier_phi_68_pred_3 = _2538;
                    frontier_phi_68_pred_4 = _2536;
                    frontier_phi_68_pred_5 = _2535;
                }
                _2316 = frontier_phi_68_pred;
                _2322 = frontier_phi_68_pred_1;
                _2320 = frontier_phi_68_pred_2;
                _2318 = frontier_phi_68_pred_3;
                _2314 = frontier_phi_68_pred_4;
                _2312 = frontier_phi_68_pred_5;
                uint _2470 = _2469 + 1u;
                if (_2470 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2463 = _2312;
                    _2464 = _2314;
                    _2465 = _2316;
                    _2466 = _2318;
                    _2467 = _2320;
                    _2468 = _2322;
                    _2469 = _2470;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2311 = _2312;
            _2313 = _2314;
            _2315 = _2316;
            _2317 = _2318;
            _2319 = _2320;
            _2321 = _2322;
        }
        uvec4 _2325 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2326 = _2325.z;
        uint _2328 = (_2326 >> 8u) & 15u;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        if (((4294967295u << _2328) & _2211) == 0u)
        {
            _2431 = _2311;
            _2433 = _2313;
            _2435 = _2315;
            _2437 = _2317;
            _2439 = _2319;
            _2441 = _2321;
        }
        else
        {
            float _2456 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
            float _2457 = _2456 * _2165;
            float _2458 = _2456 * _2166;
            float _2459 = _2456 * _2167;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2328 < ((_2326 >> 12u) & 15u))
            {
                float _2432;
                float _2434;
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2591 = _2311;
                float _2592 = _2313;
                float _2593 = _2315;
                float _2594 = _2317;
                float _2595 = _2319;
                float _2596 = _2321;
                uint _2597 = _2328;
                uint _2606;
                bool _2607;
                for (;;)
                {
                    _2606 = texelFetch(g_lightClassification, int((((_2205 << 5u) + (_2191 << 9u)) + (_2597 << 2u)) >> 2u)).x;
                    _2607 = _2606 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2607)
                    {
                        frontier_phi_79_pred = _2596;
                        frontier_phi_79_pred_1 = _2595;
                        frontier_phi_79_pred_2 = _2594;
                        frontier_phi_79_pred_3 = _2593;
                        frontier_phi_79_pred_4 = _2592;
                        frontier_phi_79_pred_5 = _2591;
                    }
                    else
                    {
                        float _2800;
                        float _2801;
                        float _2802;
                        float _2803;
                        float _2804;
                        float _2805;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3100;
                        float _3101;
                        float _2813 = _2591;
                        float _2814 = _2592;
                        float _2815 = _2593;
                        float _2816 = _2594;
                        float _2817 = _2595;
                        float _2818 = _2596;
                        uint _2819 = _2606;
                        uint _2820;
                        vec4 _2845;
                        float _2846;
                        vec4 _2861;
                        vec3 _2873;
                        vec4 _2889;
                        vec4 _2905;
                        float _2952;
                        bool _2953;
                        for (;;)
                        {
                            uint _2830 = ((_2597 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2819));
                            _2820 = (_2819 + 4294967295u) & _2819;
                            uint _2832 = _2830 * 40u;
                            _2845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2832 + 3u)).x));
                            _2846 = _2845.w;
                            uint _2848 = (_2830 * 40u) + 4u;
                            _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2863 = (_2830 * 40u) + 8u;
                            _2873 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x));
                            uint _2876 = (_2830 * 40u) + 16u;
                            _2889 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 3u)).x));
                            uint _2892 = (_2830 * 40u) + 20u;
                            _2905 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 3u)).x));
                            uint _2908 = (_2830 * 40u) + 24u;
                            vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2927 = (_2830 * 40u) + 28u;
                            vec4 _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            _2952 = fma(_2167, _2940.z, fma(_2166, _2940.y, _2940.x * _2165)) + _2940.w;
                            _2953 = !((fma(_2167, _2921.z, fma(_2166, _2921.y, _2921.x * _2165)) + _2921.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2953)
                            {
                                float _2980 = _2845.x - _2165;
                                float _2981 = _2845.y - _2166;
                                float _2982 = _2845.z - _2167;
                                float _2983 = dot(vec3(_2980, _2981, _2982), vec3(_2980, _2981, _2982));
                                float _2986 = inversesqrt(_2983);
                                float _2987 = _2986 * _2980;
                                float _2988 = _2986 * _2981;
                                float _2989 = _2986 * _2982;
                                float _2993 = 1.0 - (_2983 / (_2846 * _2846));
                                float _4078 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2994 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _2998 = sqrt(_2983) * _2861.w;
                                float _3000 = 1.39999997615814208984375 / (_2998 + 1.39999997615814208984375);
                                float _3001 = _3000 * _3000;
                                float _3004 = ((1.0 - _3001) * dot(vec3(_2987, _2988, _2989), vec3(_390, _393, _396))) + _3001;
                                float _3007 = _2998 * _2998;
                                float _3011 = (fma(_2167, _2889.z, fma(_2166, _2889.y, _2889.x * _2165)) + _2889.w) / _2952;
                                float _3012 = (fma(_2167, _2905.z, fma(_2166, _2905.y, _2905.x * _2165)) + _2905.w) / _2952;
                                float _3016 = 1.0 - dot(vec2(_3011, _3012), vec2(_3011, _3012));
                                float _4094 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3017 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                                float _3018 = _3017 * (((isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))) * _2994) / ((_3007 * 0.699999988079071044921875) + 1.0));
                                float _3030 = exp2(log2(1.0 / ((_3007 * 3.5) + 5.0)) * 0.25);
                                float _3031 = 1.0 - _466;
                                float _3038 = sqrt(1.0 - ((1.0 - (_3031 * _3031)) * (1.0 - (_3030 * _3030))));
                                float _3039 = _3038 * _3038;
                                float _3040 = _3039 * _3039;
                                float _3041 = _2987 - _2457;
                                float _3042 = _2988 - _2458;
                                float _3043 = _2989 - _2459;
                                float _3047 = inversesqrt(dot(vec3(_3041, _3042, _3043), vec3(_3041, _3042, _3043)));
                                float _3051 = dot(vec3(_390, _393, _396), vec3((-0.0) - _2457, (-0.0) - _2458, (-0.0) - _2459));
                                float _4105 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3054 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
                                float _3055 = dot(vec3(_390, _393, _396), vec3(_3047 * _3041, _3047 * _3042, _3047 * _3043));
                                float _4116 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3058 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3062 = ((_3058 * _3058) * (_3040 + (-1.0))) + 1.0;
                                float _3063 = _3000 * _3039;
                                float _3064 = _3063 * _3063;
                                float _3070 = ((1.0 - _3064) * dot(vec3(_390, _393, _396), vec3(_2987, _2988, _2989))) + _3064;
                                float _4127 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3072 = 1.0 - _3039;
                                float _3082 = (0.5 / (((_3071 * ((_3054 * _3072) + _3039)) + 9.9999999392252902907785028219223e-09) + (((_3071 * _3072) + _3039) * _3054))) * _3071;
                                float _4138 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                                float _3092 = (_3017 * _2994) * (((_3040 * 3.1415927410125732421875) * (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) / ((_3062 * _3062) * ((_3007 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3018 * _2861.z;
                                frontier_phi_85_pred_1 = _3018 * _2861.y;
                                frontier_phi_85_pred_2 = _3018 * _2861.x;
                                frontier_phi_85_pred_3 = _3092 * _2873.z;
                                frontier_phi_85_pred_4 = _3092 * _2873.y;
                                frontier_phi_85_pred_5 = _3092 * _2873.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3101 = frontier_phi_85_pred;
                            _3100 = frontier_phi_85_pred_1;
                            _3099 = frontier_phi_85_pred_2;
                            _3098 = frontier_phi_85_pred_3;
                            _3097 = frontier_phi_85_pred_4;
                            _3096 = frontier_phi_85_pred_5;
                            _2803 = _3099 + _2816;
                            _2804 = _3100 + _2817;
                            _2805 = _3101 + _2818;
                            _2800 = _3096 + _2813;
                            _2801 = _3097 + _2814;
                            _2802 = _3098 + _2815;
                            if (_2820 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2813 = _2800;
                                _2814 = _2801;
                                _2815 = _2802;
                                _2816 = _2803;
                                _2817 = _2804;
                                _2818 = _2805;
                                _2819 = _2820;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2805;
                        frontier_phi_79_pred_1 = _2804;
                        frontier_phi_79_pred_2 = _2803;
                        frontier_phi_79_pred_3 = _2802;
                        frontier_phi_79_pred_4 = _2801;
                        frontier_phi_79_pred_5 = _2800;
                    }
                    _2442 = frontier_phi_79_pred;
                    _2440 = frontier_phi_79_pred_1;
                    _2438 = frontier_phi_79_pred_2;
                    _2436 = frontier_phi_79_pred_3;
                    _2434 = frontier_phi_79_pred_4;
                    _2432 = frontier_phi_79_pred_5;
                    uint _2598 = _2597 + 1u;
                    if (_2598 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2591 = _2432;
                        _2592 = _2434;
                        _2593 = _2436;
                        _2594 = _2438;
                        _2595 = _2440;
                        _2596 = _2442;
                        _2597 = _2598;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2438;
                frontier_phi_60_61_ladder_1 = _2442;
                frontier_phi_60_61_ladder_2 = _2440;
                frontier_phi_60_61_ladder_3 = _2436;
                frontier_phi_60_61_ladder_4 = _2434;
                frontier_phi_60_61_ladder_5 = _2432;
            }
            else
            {
                frontier_phi_60_61_ladder = _2317;
                frontier_phi_60_61_ladder_1 = _2321;
                frontier_phi_60_61_ladder_2 = _2319;
                frontier_phi_60_61_ladder_3 = _2315;
                frontier_phi_60_61_ladder_4 = _2313;
                frontier_phi_60_61_ladder_5 = _2311;
            }
            _2431 = frontier_phi_60_61_ladder_5;
            _2433 = frontier_phi_60_61_ladder_4;
            _2435 = frontier_phi_60_61_ladder_3;
            _2437 = frontier_phi_60_61_ladder;
            _2439 = frontier_phi_60_61_ladder_2;
            _2441 = frontier_phi_60_61_ladder_1;
        }
        float _2446 = isnan(1.0) ? _450 : (isnan(_450) ? 1.0 : min(_450, 1.0));
        _2223 = (_2446 * _2437) + _1660;
        _2225 = (_2446 * _2439) + _1662;
        _2227 = (_2446 * _2441) + _1664;
        _2229 = ((_2431 * _435) * _2446) + _2005;
        _2231 = ((_2433 * _437) * _2446) + _2007;
        _2233 = ((_2435 * _438) * _2446) + _2009;
    }
    else
    {
        _2223 = _1660;
        _2225 = _1662;
        _2227 = _1664;
        _2229 = _2005;
        _2231 = _2007;
        _2233 = _2009;
    }
    float _4154 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _4165 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _4176 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _2250 = ((isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2223 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _450))) + ((_2229 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _2251 = ((isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_2225 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _450))) + ((_2231 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    float _2252 = ((isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_2227 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _450))) + ((_2233 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1292)) * cbPerFrame._m0[3u].x);
    uint _2253 = _409 + 6u;
    float _2261 = _369 / cbSceneParam._m0[86u].x;
    float _2262 = _370 / cbSceneParam._m0[86u].y;
    vec4 _2276 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2261, _2262, (log2((isnan(cbSceneParam._m0[77u].w) ? _290 : (isnan(_290) ? cbSceneParam._m0[77u].w : min(_290, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2278 = _2276.x;
    float _2279 = _2276.y;
    float _2280 = _2276.z;
    float _2281 = _2276.w;
    float _2373;
    float _2375;
    float _2377;
    float _2379;
    if (_290 > cbSceneParam._m0[78u].w)
    {
        float _2336 = isnan(_290) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _290 : min(cbSceneParam._m0[80u].w, _290));
        float _2337 = _2336 / _290;
        float _2348 = _2337 * _341;
        float _2349 = _342 * _2337;
        float _2350 = (-0.0) - _2349;
        float _2351 = _2337 * _343;
        float _2353 = (cbSceneParam._m0[77u].w * _2350) / _2336;
        float _2354 = _2353 + cbSceneParam._m0[79u].w;
        float _2355 = cbSceneParam._m0[79u].w - _2349;
        float _2361 = sqrt(((_2348 * _2348) + (_2349 * _2349)) + (_2351 * _2351));
        float _2364 = (1.0 - (cbSceneParam._m0[77u].w / _2336)) * _2361;
        float _2369 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2371 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2548;
        if (abs((_2350 - _2353) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2548 = ((((_2354 > 0.0) ? exp2(_2369 * _2354) : (2.0 - exp2(_2371 * _2354))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2364;
        }
        else
        {
            float _2492 = 1.0 / cbSceneParam._m0[80u].x;
            float _2493 = isnan(_2355) ? _2354 : (isnan(_2354) ? _2355 : max(_2354, _2355));
            float _2494 = isnan(_2355) ? _2354 : (isnan(_2354) ? _2355 : min(_2354, _2355));
            float _2503 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : min(_2493, 0.0));
            float _2504 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : min(_2494, 0.0));
            _2548 = ((abs(_2361 / _2350) * cbSceneParam._m0[80u].y) * ((((_2503 - _2504) * 2.0) - ((exp2(_2369 * (isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0)))) - exp2(_2369 * (isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0))))) * _2492)) - ((exp2(_2371 * _2503) - exp2(_2371 * _2504)) * _2492))) + (_2364 * cbSceneParam._m0[80u].z);
        }
        vec4 _2550 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2261, _2262, 1.0), 0.0);
        float _2559 = exp2((_2548 * (-1.44269502162933349609375)) * (1.0 - _2550.w));
        float _2560 = log2(_2559);
        float _2576 = log2(_2281);
        _2373 = (exp2(_2576 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].x)) * _2550.x) / cbSceneParam._m0[78u].x)) + _2278;
        _2375 = (exp2(_2576 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].y)) * _2550.y) / cbSceneParam._m0[78u].y)) + _2279;
        _2377 = (exp2(_2576 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2560 * cbSceneParam._m0[78u].z)) * _2550.z) / cbSceneParam._m0[78u].z)) + _2280;
        _2379 = _2559 * _2281;
    }
    else
    {
        _2373 = _2278;
        _2375 = _2279;
        _2377 = _2280;
        _2379 = _2281;
    }
    bool _2586;
    vec4 _2389;
    vec4 _2411;
    float _2413;
    float _2417;
    float _2418;
    float _2419;
    float _2420;
    bool _2430;
    for (;;)
    {
        _2389 = cbMatDynParam._m0[0u];
        float _2391 = roundEven(_2389.y);
        bool _2392 = _2391 == 3.0;
        float _2393 = log2(_2379);
        float _2400 = exp2(_2393 * cbSceneParam._m0[78u].x) * _2250;
        float _2401 = exp2(_2393 * cbSceneParam._m0[78u].y) * _2251;
        float _2402 = exp2(_2393 * cbSceneParam._m0[78u].z) * _2252;
        float _2409 = _357 + (-0.5);
        _2411 = cbMtdParam._m0[1u];
        _2413 = _2411.y * _2409;
        float _2416 = (_2391 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2417 = _2416 * (_2392 ? _2400 : (_2400 + (cbSceneParam._m0[72u].w * _2373)));
        _2418 = _2416 * (_2392 ? _2401 : (_2401 + (cbSceneParam._m0[72u].w * _2375)));
        _2419 = _2416 * (_2392 ? _2402 : (_2402 + (cbSceneParam._m0[72u].w * _2377)));
        _2420 = _2409 * 0.999000012874603271484375;
        _2430 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2430)
        {
            if ((cbInstanceData._m0[_409 + 7u].x + _2420) < 0.5)
            {
                _2586 = true;
                break;
            }
        }
        uint _2527 = _411 + uint(_2389.w);
        if ((cbInstanceData._m0[_2527].w < 1.0) && ((cbInstanceData._m0[_2527].w + _2420) < 0.5))
        {
            _2586 = true;
            break;
        }
        if ((_2413 + 1.0) < _2411.x)
        {
            _2586 = true;
            break;
        }
        _2586 = false;
        break;
    }
    float _2791;
    if (_2586)
    {
        discard_state = true;
        _2791 = 0.0;
    }
    else
    {
        _2791 = cbInstanceData._m0[_2253].w;
    }
    SV_Target.x = _2417;
    SV_Target.y = _2418;
    SV_Target.z = _2419;
    SV_Target.w = _2791;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2253].w;
    discard_exit();
}


