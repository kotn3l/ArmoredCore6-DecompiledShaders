#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _730;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _156 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _157 = _156 * NORMAL.x;
    float _158 = _156 * NORMAL.y;
    float _159 = _156 * NORMAL.z;
    float _164;
    float _165;
    float _166;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _164 = (-0.0) - _157;
        _165 = (-0.0) - _158;
        _166 = (-0.0) - _159;
    }
    else
    {
        _164 = _157;
        _165 = _158;
        _166 = _159;
    }
    vec4 _189 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _192 = _189.x;
    bool _199 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _219 = ((_199 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _192)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _192))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _3123 = isnan(0.0) ? _219 : (isnan(_219) ? 0.0 : max(_219, 0.0));
    float _222 = 1.0 - (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0)));
    float _3134 = isnan(0.0) ? _222 : (isnan(_222) ? 0.0 : max(_222, 0.0));
    float _223 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
    float _226 = 3.0 - (_223 * 2.0);
    float _231 = _223 * _223;
    float _238 = ((_231 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[10u].x)) * _226) + cbMtdParam._m0[10u].x;
    float _239 = ((_231 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[10u].y)) * _226) + cbMtdParam._m0[10u].y;
    float _240 = ((_231 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[10u].z)) * _226) + cbMtdParam._m0[10u].z;
    float _244 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _245 = _244 * _164;
    float _246 = _244 * _165;
    float _247 = _244 * _166;
    float _3145 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3156 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3167 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _255 = _199 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _296 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _306 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _296);
    float _307 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _296);
    float _308 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _296);
    float _312 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _313 = _306 * _312;
    float _314 = _307 * _312;
    float _315 = _308 * _312;
    float _320 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _321 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _342 = fma(_247, cbSceneParam._m0[5u].z, fma(_246, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _245));
    float _345 = fma(_247, cbSceneParam._m0[6u].z, fma(_246, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _245));
    float _348 = fma(_247, cbSceneParam._m0[7u].z, fma(_246, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _245));
    uint _361 = uint(roundEven(NORMAL.w)) * 13u;
    uint _364 = (_361 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _370 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0)))) * cbInstanceData._m0[_364].x;
    float _371 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3156 : (isnan(_3156) ? 1.0 : min(_3156, 1.0)))) * cbInstanceData._m0[_364].y;
    float _372 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3167 : (isnan(_3167) ? 1.0 : min(_3167, 1.0)))) * cbInstanceData._m0[_364].z;
    float _3178 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _373 = isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0));
    float _3189 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _374 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
    float _3200 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _375 = isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0));
    vec4 _384 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _320, cbSceneParam._m0[86u].y * _321));
    float _387 = _384.x * TEXCOORD.z;
    float _388 = dot(vec3(_245, _246, _247), vec3(_313, _314, _315));
    float _391 = _388 * 2.0;
    float _395 = (_391 * _245) - _313;
    float _396 = (_391 * _246) - _314;
    float _397 = (_391 * _247) - _315;
    float _419 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _423 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _427 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _729;
    float _731;
    float _732;
    float _733;
    float _734;
    float _735;
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _454 = fma(_427, cbModelParam._m0[26u].z, fma(_423, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _419));
        float _458 = fma(_427, cbModelParam._m0[27u].z, fma(_423, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _419));
        float _462 = fma(_427, cbModelParam._m0[28u].z, fma(_423, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _419));
        float _487 = _419 + _245;
        float _488 = _423 + _246;
        float _489 = _427 + _247;
        float _499 = fma(_489, cbModelParam._m0[26u].z, fma(_488, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _487)) - _454;
        float _500 = fma(_489, cbModelParam._m0[27u].z, fma(_488, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _487)) - _458;
        float _501 = fma(_489, cbModelParam._m0[28u].z, fma(_488, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _487)) - _462;
        float _505 = inversesqrt(dot(vec3(_499, _500, _501), vec3(_499, _500, _501)));
        float _518 = ((_505 * _499) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_454 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _519 = ((_505 * _500) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_458 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _520 = ((_505 * _501) / cbModelParam._m0[34u].z) + ((((((_462 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _523 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _530 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _537 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        vec4 _544 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_518, _519, _520), 0.0);
        float _557 = exp2((_523.w + (-0.5)) * 20.0) * 2.0;
        float _558 = _557 * (_523.x + (-0.5));
        float _559 = _557 * (_523.y + (-0.5));
        float _560 = _557 * (_523.z + (-0.5));
        float _567 = exp2((_530.w + (-0.5)) * 20.0) * 2.0;
        float _568 = _567 * (_530.x + (-0.5));
        float _569 = _567 * (_530.y + (-0.5));
        float _570 = _567 * (_530.z + (-0.5));
        float _577 = exp2((_537.w + (-0.5)) * 20.0) * 2.0;
        float _578 = _577 * (_537.x + (-0.5));
        float _579 = _577 * (_537.y + (-0.5));
        float _580 = _577 * (_537.z + (-0.5));
        float _587 = exp2((_544.w + (-0.5)) * 20.0) * 2.0;
        float _588 = _587 * (_544.x + (-0.5));
        float _589 = _587 * (_544.y + (-0.5));
        float _590 = _587 * (_544.z + (-0.5));
        float _591 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _592 = isnan(0.0) ? _589 : (isnan(_589) ? 0.0 : max(_589, 0.0));
        float _593 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
        float _594 = _558 * 0.5;
        float _595 = _568 * 0.5;
        float _596 = _578 * 0.5;
        float _597 = dot(vec3(_594, _595, _596), vec3(_594, _595, _596));
        float _602 = (_597 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_597);
        float _611 = (dot(vec3(_245, _246, _247), vec3(_602 * _594, _602 * _595, _602 * _596)) + 1.0) * 0.5;
        float _3226 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
        float _621 = sqrt(((_595 * _595) + (_594 * _594)) + (_596 * _596)) / (_591 + 9.9999997473787516355514526367188e-06);
        float _3237 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
        float _622 = isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0));
        float _623 = _622 * 2.0;
        float _627 = (1.0 - _622) / (_622 + 1.0);
        float _3248 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
        float _628 = isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0));
        float _637 = ((((1.0 - _628) * (_623 + 2.0)) * exp2(log2(isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0))) * (_623 + 1.0))) + _628) * _591;
        float _638 = _559 * 0.5;
        float _639 = _569 * 0.5;
        float _640 = _579 * 0.5;
        float _641 = dot(vec3(_638, _639, _640), vec3(_638, _639, _640));
        float _646 = (_641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_641);
        float _654 = (dot(vec3(_245, _246, _247), vec3(_646 * _638, _646 * _639, _646 * _640)) + 1.0) * 0.5;
        float _3259 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _663 = sqrt(((_639 * _639) + (_638 * _638)) + (_640 * _640)) / (_592 + 9.9999997473787516355514526367188e-06);
        float _3270 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        float _664 = isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0));
        float _665 = _664 * 2.0;
        float _669 = (1.0 - _664) / (_664 + 1.0);
        float _3281 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _670 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
        float _679 = ((((1.0 - _670) * (_665 + 2.0)) * exp2(log2(isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0))) * (_665 + 1.0))) + _670) * _592;
        float _680 = _560 * 0.5;
        float _681 = _570 * 0.5;
        float _682 = _580 * 0.5;
        float _683 = dot(vec3(_680, _681, _682), vec3(_680, _681, _682));
        float _688 = (_683 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_683);
        float _696 = (dot(vec3(_245, _246, _247), vec3(_688 * _680, _688 * _681, _688 * _682)) + 1.0) * 0.5;
        float _3292 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
        float _705 = sqrt(((_681 * _681) + (_680 * _680)) + (_682 * _682)) / (_593 + 9.9999997473787516355514526367188e-06);
        float _3303 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
        float _707 = _706 * 2.0;
        float _711 = (1.0 - _706) / (_706 + 1.0);
        float _3314 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
        float _721 = ((((1.0 - _712) * (_707 + 2.0)) * exp2(log2(isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * (_707 + 1.0))) + _712) * _593;
        _729 = _560;
        _731 = _559;
        _732 = _558;
        _733 = _570;
        _734 = _569;
        _735 = _568;
        _736 = _580;
        _737 = _579;
        _738 = _578;
        _739 = _593;
        _740 = _592;
        _741 = _591;
        _742 = cbModelParam._m0[36u].z * (isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0)));
        _743 = cbModelParam._m0[36u].z * (isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0)));
        _744 = cbModelParam._m0[36u].z * (isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0)));
    }
    else
    {
        _729 = _730;
        _731 = _730;
        _732 = _730;
        _733 = _730;
        _734 = _730;
        _735 = _730;
        _736 = _730;
        _737 = _730;
        _738 = _730;
        _739 = _730;
        _740 = _730;
        _741 = _730;
        _742 = 0.0;
        _743 = 0.0;
        _744 = 0.0;
    }
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _770 = fma(_427, cbModelParam._m0[30u].z, fma(_423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _419));
        float _774 = fma(_427, cbModelParam._m0[31u].z, fma(_423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _419));
        float _778 = fma(_427, cbModelParam._m0[32u].z, fma(_423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _419));
        float _801 = _419 + _245;
        float _802 = _423 + _246;
        float _803 = _427 + _247;
        float _813 = fma(_803, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801)) - _770;
        float _814 = fma(_803, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801)) - _774;
        float _815 = fma(_803, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801)) - _778;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_770 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_774 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[35u].z) + ((((((_778 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _850 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _857 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _869 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_836.x + (-0.5));
        float _871 = _869 * (_836.y + (-0.5));
        float _872 = _869 * (_836.z + (-0.5));
        float _879 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_843.x + (-0.5));
        float _881 = _879 * (_843.y + (-0.5));
        float _882 = _879 * (_843.z + (-0.5));
        float _889 = exp2((_850.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_850.x + (-0.5));
        float _891 = _889 * (_850.y + (-0.5));
        float _892 = _889 * (_850.z + (-0.5));
        float _899 = exp2((_857.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_857.x + (-0.5));
        float _901 = _899 * (_857.y + (-0.5));
        float _902 = _899 * (_857.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _922 = (dot(vec3(_245, _246, _247), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3355 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _931 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3366 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
        float _932 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _933 = _932 * 2.0;
        float _937 = (1.0 - _932) / (_932 + 1.0);
        float _3377 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _947 = ((((1.0 - _938) * (_933 + 2.0)) * exp2(log2(isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * (_933 + 1.0))) + _938) * _903;
        float _948 = _871 * 0.5;
        float _949 = _881 * 0.5;
        float _950 = _891 * 0.5;
        float _951 = dot(vec3(_948, _949, _950), vec3(_948, _949, _950));
        float _956 = (_951 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_951);
        float _964 = (dot(vec3(_245, _246, _247), vec3(_956 * _948, _956 * _949, _956 * _950)) + 1.0) * 0.5;
        float _3388 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _973 = sqrt(((_949 * _949) + (_948 * _948)) + (_950 * _950)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3399 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _974 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
        float _975 = _974 * 2.0;
        float _979 = (1.0 - _974) / (_974 + 1.0);
        float _3410 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _989 = ((((1.0 - _980) * (_975 + 2.0)) * exp2(log2(isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * (_975 + 1.0))) + _980) * _904;
        float _990 = _872 * 0.5;
        float _991 = _882 * 0.5;
        float _992 = _892 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1006 = (dot(vec3(_245, _246, _247), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3421 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1015 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3432 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3443 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0))) * (_1017 + 1.0))) + _1022) * _905;
        _1039 = _872;
        _1040 = _871;
        _1041 = _870;
        _1042 = _882;
        _1043 = _881;
        _1044 = _880;
        _1045 = _892;
        _1046 = _891;
        _1047 = _890;
        _1048 = _905;
        _1049 = _904;
        _1050 = _903;
        _1051 = cbModelParam._m0[36u].w * (isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0)));
        _1052 = cbModelParam._m0[36u].w * (isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0)));
        _1053 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
    }
    else
    {
        _1039 = _730;
        _1040 = _730;
        _1041 = _730;
        _1042 = _730;
        _1043 = _730;
        _1044 = _730;
        _1045 = _730;
        _1046 = _730;
        _1047 = _730;
        _1048 = _730;
        _1049 = _730;
        _1050 = _730;
        _1051 = 0.0;
        _1052 = 0.0;
        _1053 = 0.0;
    }
    float _1063 = (cbModelParam._m0[1u].x * (_1051 - _742)) + _742;
    float _1064 = (cbModelParam._m0[1u].x * (_1052 - _743)) + _743;
    float _1065 = (cbModelParam._m0[1u].x * (_1053 - _744)) + _744;
    float _1086 = fma(_1065, cbSceneParam._m0[89u].z, fma(_1064, cbSceneParam._m0[89u].y, _1063 * cbSceneParam._m0[89u].x));
    float _1089 = fma(_1065, cbSceneParam._m0[90u].z, fma(_1064, cbSceneParam._m0[90u].y, _1063 * cbSceneParam._m0[90u].x));
    float _1092 = fma(_1065, cbSceneParam._m0[91u].z, fma(_1064, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1063));
    float _1107 = _395 * 0.5;
    float _1108 = _396 * 0.5;
    float _1109 = _397 * 0.5;
    float _1110 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1041, _1044, _1047, _1050));
    float _1113 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1040, _1043, _1046, _1049));
    float _1116 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_1039, _1042, _1045, _1048));
    float _1150;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1123 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_729, _733, _736, _739));
        float _1127 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_731, _734, _737, _740));
        float _1131 = dot(vec4(_1107, _1108, _1109, 1.0), vec4(_732, _735, _738, _741));
        float _1138 = dot(vec4(cbModelParam._m0[39u]), vec4(_1107, _1108, _1109, 1.0));
        _1150 = dot(vec3(isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)), isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)), isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1138) ? 0.0 : (isnan(0.0) ? _1138 : max(0.0, _1138))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1150 = 1.0;
    }
    float _1161;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1152 = dot(vec4(cbModelParam._m0[40u]), vec4(_1107, _1108, _1109, 1.0));
        _1161 = dot(vec3(isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)), isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1152) ? 0.0 : (isnan(0.0) ? _1152 : max(0.0, _1152))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1161 = 1.0;
    }
    float _1165 = (_1161 * cbModelParam._m0[1u].x) + (_1150 * (1.0 - cbModelParam._m0[1u].x));
    float _1175 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1257;
    float _1259;
    float _1261;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1224 = fma(_427, cbModelParam._m0[13u].z, fma(_423, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _419)) + cbModelParam._m0[13u].w;
        float _1228 = fma(_427, cbModelParam._m0[14u].z, fma(_423, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _419)) + cbModelParam._m0[14u].w;
        float _1232 = fma(_427, cbModelParam._m0[15u].z, fma(_423, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _419)) + cbModelParam._m0[15u].w;
        float _1235 = fma(_397, cbModelParam._m0[13u].z, fma(_396, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _395));
        float _1238 = fma(_397, cbModelParam._m0[14u].z, fma(_396, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _395));
        float _1241 = fma(_397, cbModelParam._m0[15u].z, fma(_396, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _395));
        float _1267;
        if (_1235 > 0.0)
        {
            _1267 = abs((1.0 - _1224) / _1235);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1235 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1224 + 1.0) / _1235);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1267 = frontier_phi_16_14_ladder;
        }
        float _1441;
        if (_1238 > 0.0)
        {
            _1441 = abs((1.0 - _1228) / _1238);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1238 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1228 + 1.0) / _1238);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1441 = frontier_phi_25_21_ladder;
        }
        float _1738;
        if (_1241 > 0.0)
        {
            _1738 = abs((1.0 - _1232) / _1241);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1241 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1232 + 1.0) / _1241);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1738 = frontier_phi_37_32_ladder;
        }
        float _1740 = isnan(_1441) ? _1267 : (isnan(_1267) ? _1441 : min(_1267, _1441));
        float _1741 = isnan(_1738) ? _1740 : (isnan(_1740) ? _1738 : min(_1740, _1738));
        float _1745 = (_1741 * _1235) + _1224;
        float _1746 = (_1741 * _1238) + _1228;
        float _1747 = (_1741 * _1241) + _1232;
        float _1748 = _1741 * 9.9999997473787516355514526367188e-05;
        float _1750 = (-1.0) - _1748;
        float _1752 = _1748 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1747 > _1752) || ((_1747 < _1750) || ((_1746 > _1752) || ((_1746 < _1750) || ((_1745 < _1750) || (_1745 > _1752))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1892 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1747, cbModelParam._m0[9u].z, fma(_1746, cbModelParam._m0[9u].y, _1745 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1747, cbModelParam._m0[10u].z, fma(_1746, cbModelParam._m0[10u].y, _1745 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1747, cbModelParam._m0[11u].z, fma(_1746, cbModelParam._m0[11u].y, _1745 * cbModelParam._m0[11u].x))), _1175);
            frontier_phi_15_37_ladder = _1892.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1892.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1892.z * cbModelParam._m0[1u].y;
        }
        _1257 = frontier_phi_15_37_ladder_1;
        _1259 = frontier_phi_15_37_ladder;
        _1261 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1245 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_395, _396, _397), _1175);
        _1257 = _1245.x * cbModelParam._m0[1u].y;
        _1259 = _1245.y * cbModelParam._m0[1u].y;
        _1261 = _1245.z * cbModelParam._m0[1u].y;
    }
    float _1264 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1357;
    float _1359;
    float _1361;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1321 = fma(_427, cbModelParam._m0[21u].z, fma(_423, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _419)) + cbModelParam._m0[21u].w;
        float _1325 = fma(_427, cbModelParam._m0[22u].z, fma(_423, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _419)) + cbModelParam._m0[22u].w;
        float _1329 = fma(_427, cbModelParam._m0[23u].z, fma(_423, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _419)) + cbModelParam._m0[23u].w;
        float _1332 = fma(_397, cbModelParam._m0[21u].z, fma(_396, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _395));
        float _1335 = fma(_397, cbModelParam._m0[22u].z, fma(_396, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _395));
        float _1338 = fma(_397, cbModelParam._m0[23u].z, fma(_396, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _395));
        float _1446;
        if (_1332 > 0.0)
        {
            _1446 = abs((1.0 - _1321) / _1332);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1321 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1446 = frontier_phi_27_23_ladder;
        }
        float _1765;
        if (_1335 > 0.0)
        {
            _1765 = abs((1.0 - _1325) / _1335);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1335 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1325 + 1.0) / _1335);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1765 = frontier_phi_39_34_ladder;
        }
        float _2038;
        if (_1338 > 0.0)
        {
            _2038 = abs((1.0 - _1329) / _1338);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1338 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1329 + 1.0) / _1338);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2038 = frontier_phi_49_46_ladder;
        }
        float _2040 = isnan(_1765) ? _1446 : (isnan(_1446) ? _1765 : min(_1446, _1765));
        float _2041 = isnan(_2038) ? _2040 : (isnan(_2040) ? _2038 : min(_2040, _2038));
        float _2045 = (_2041 * _1332) + _1321;
        float _2046 = (_2041 * _1335) + _1325;
        float _2047 = (_2041 * _1338) + _1329;
        float _2048 = _2041 * 9.9999997473787516355514526367188e-05;
        float _2049 = (-1.0) - _2048;
        float _2051 = _2048 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2047 > _2051) || ((_2047 < _2049) || ((_2046 > _2051) || ((_2046 < _2049) || ((_2045 < _2049) || (_2045 > _2051))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2138 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2047, cbModelParam._m0[17u].z, fma(_2046, cbModelParam._m0[17u].y, _2045 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2047, cbModelParam._m0[18u].z, fma(_2046, cbModelParam._m0[18u].y, _2045 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2047, cbModelParam._m0[19u].z, fma(_2046, cbModelParam._m0[19u].y, _2045 * cbModelParam._m0[19u].x))), _1264);
            frontier_phi_24_49_ladder = _2138.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2138.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2138.x * cbModelParam._m0[1u].z;
        }
        _1357 = frontier_phi_24_49_ladder_2;
        _1359 = frontier_phi_24_49_ladder_1;
        _1361 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1341 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_395, _396, _397), _1264);
        _1357 = _1341.x * cbModelParam._m0[1u].z;
        _1359 = _1341.y * cbModelParam._m0[1u].z;
        _1361 = _1341.z * cbModelParam._m0[1u].z;
    }
    float _1373 = _387 * 0.01200000010430812835693359375;
    float _1375 = _1373 * ((cbModelParam._m0[1u].w * (_1357 - _1257)) + _1257);
    float _1376 = _1373 * ((cbModelParam._m0[1u].w * (_1359 - _1259)) + _1259);
    float _1377 = _1373 * ((cbModelParam._m0[1u].w * (_1361 - _1261)) + _1261);
    float _1380 = fma(_1377, cbSceneParam._m0[89u].z, fma(_1376, cbSceneParam._m0[89u].y, _1375 * cbSceneParam._m0[89u].x));
    float _1383 = fma(_1377, cbSceneParam._m0[90u].z, fma(_1376, cbSceneParam._m0[90u].y, _1375 * cbSceneParam._m0[90u].x));
    float _1386 = fma(_1377, cbSceneParam._m0[91u].z, fma(_1376, cbSceneParam._m0[91u].y, _1375 * cbSceneParam._m0[91u].x));
    float _1420 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1424 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1428 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1432 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1433 = _1420 / _1432;
    float _1434 = _1424 / _1432;
    float _1435 = _1428 / _1432;
    float _1582;
    float _1583;
    float _1584;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1462 = ((uint(_1435 > cbSceneParam._m0[59u].y) + uint(_1435 > cbSceneParam._m0[59u].x)) + uint(_1435 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1463 = _1462 + 43u;
        uint _1471 = _1462 + 44u;
        uint _1479 = _1462 + 45u;
        uint _1487 = _1462 + 46u;
        float _1498 = fma(_1432, cbSceneParam._m0[_1463].w, fma(_1428, cbSceneParam._m0[_1463].z, fma(_1424, cbSceneParam._m0[_1463].y, _1420 * cbSceneParam._m0[_1463].x)));
        float _1502 = fma(_1432, cbSceneParam._m0[_1471].w, fma(_1428, cbSceneParam._m0[_1471].z, fma(_1424, cbSceneParam._m0[_1471].y, _1420 * cbSceneParam._m0[_1471].x)));
        float _1510 = fma(_1432, cbSceneParam._m0[_1487].w, fma(_1428, cbSceneParam._m0[_1487].z, fma(_1424, cbSceneParam._m0[_1487].y, _1420 * cbSceneParam._m0[_1487].x)));
        float _1515 = cbSceneParam._m0[33u].z * _1510;
        float _1517 = cbSceneParam._m0[33u].w * _1510;
        float _1520 = fma(_1432, cbSceneParam._m0[_1479].w, fma(_1428, cbSceneParam._m0[_1479].z, fma(_1424, cbSceneParam._m0[_1479].y, _1420 * cbSceneParam._m0[_1479].x))) / _1510;
        float _1568 = (cbSceneParam._m0[33u].x - sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435))) * cbSceneParam._m0[33u].y;
        float _3569 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1575 = (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1515 + _1498) / _1510, (_1517 + _1502) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1517 + _1498) / _1510, (_1502 - _1515) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1498 - _1515) / _1510, (_1502 - _1517) / _1510), _1520), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1498 - _1517) / _1510, (_1515 + _1502) / _1510), _1520), 0.0)).x), vec4(0.25)));
        _1582 = 1.0 - (_1575 * cbSceneParam._m0[34u].x);
        _1583 = 1.0 - (_1575 * cbSceneParam._m0[34u].y);
        _1584 = 1.0 - (_1575 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1582 = 1.0;
        _1583 = 1.0;
        _1584 = 1.0;
    }
    float _1648;
    float _1650;
    float _1652;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1636 = fma(_1432, cbSceneParam._m0[63u].w, fma(_1428, cbSceneParam._m0[63u].z, fma(_1424, cbSceneParam._m0[63u].y, _1420 * cbSceneParam._m0[63u].x)));
        float _1637 = fma(_1432, cbSceneParam._m0[60u].w, fma(_1428, cbSceneParam._m0[60u].z, fma(_1424, cbSceneParam._m0[60u].y, _1420 * cbSceneParam._m0[60u].x))) / _1636;
        float _1638 = fma(_1432, cbSceneParam._m0[61u].w, fma(_1428, cbSceneParam._m0[61u].z, fma(_1424, cbSceneParam._m0[61u].y, _1420 * cbSceneParam._m0[61u].x))) / _1636;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1637 >= cbSceneParam._m0[64u].x) && (_1638 >= cbSceneParam._m0[64u].y)) && (_1637 <= cbSceneParam._m0[64u].z)) && (_1638 <= cbSceneParam._m0[64u].w))
        {
            float _1778 = fma(_1432, cbSceneParam._m0[62u].w, fma(_1428, cbSceneParam._m0[62u].z, fma(_1424, cbSceneParam._m0[62u].y, _1420 * cbSceneParam._m0[62u].x))) / _1636;
            float _1782 = isnan(cbSceneParam._m0[41u].w) ? _1778 : (isnan(_1778) ? cbSceneParam._m0[41u].w : max(_1778, cbSceneParam._m0[41u].w));
            float _1825 = (cbSceneParam._m0[33u].x - sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435))) * cbSceneParam._m0[33u].y;
            float _3585 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
            float _1832 = (isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1637, cbSceneParam._m0[33u].w + _1638), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1637, _1638 - cbSceneParam._m0[33u].z), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1637 - cbSceneParam._m0[33u].z, _1638 - cbSceneParam._m0[33u].w), _1782), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1637 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1638), _1782), 0.0)).x), vec4(0.25)));
            float _1836 = 1.0 - (_1832 * cbSceneParam._m0[34u].x);
            float _1837 = 1.0 - (_1832 * cbSceneParam._m0[34u].y);
            float _1838 = 1.0 - (_1832 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1837) ? _1583 : (isnan(_1583) ? _1837 : min(_1583, _1837));
            frontier_phi_36_35_ladder_1 = isnan(_1838) ? _1584 : (isnan(_1584) ? _1838 : min(_1584, _1838));
            frontier_phi_36_35_ladder_2 = isnan(_1836) ? _1582 : (isnan(_1582) ? _1836 : min(_1582, _1836));
        }
        else
        {
            frontier_phi_36_35_ladder = _1583;
            frontier_phi_36_35_ladder_1 = _1584;
            frontier_phi_36_35_ladder_2 = _1582;
        }
        _1648 = frontier_phi_36_35_ladder_2;
        _1650 = frontier_phi_36_35_ladder;
        _1652 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1648 = _1582;
        _1650 = _1583;
        _1652 = _1584;
    }
    uvec4 _1657 = floatBitsToUint(cbInstanceData._m0[_361 + 5u]);
    uint _1659 = _1657.x * 14u;
    uint _1660 = _1659 + 13u;
    float _1667 = _387 + (-1.0);
    float _1673 = (cbLight._m0[_1660].x * _1667) + 1.0;
    float _1674 = (cbLight._m0[_1660].y * _1667) + 1.0;
    float _1675 = (cbLight._m0[_1660].z * _1667) + 1.0;
    float _1676 = (cbLight._m0[_1660].w * _1667) + 1.0;
    uint _1677 = _1659 + 5u;
    float _1683 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
    uint _1687 = _1659 + 4u;
    float _1697 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    uint _1701 = _1659 | 1u;
    float _1712 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_245, _246, _247));
    float _1715 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_245, _246, _247));
    float _3621 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
    float _3632 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1720 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.3183098733425140380859375;
    float _1722 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.3183098733425140380859375;
    float _1729 = ((cbLight._m0[_1677].x * _1683) * _1722) + (((cbLight._m0[_1687].x * _1648) * _1697) * _1720);
    float _1730 = ((_1683 * cbLight._m0[_1677].y) * _1722) + (((cbLight._m0[_1687].y * _1650) * _1697) * _1720);
    float _1731 = ((_1683 * cbLight._m0[_1677].z) * _1722) + (((cbLight._m0[_1687].z * _1652) * _1697) * _1720);
    uvec4 _1735 = floatBitsToUint(cbLight._m0[_1659 + 12u]);
    bool _1737 = _1735.x == 0u;
    float _1839;
    float _1841;
    float _1843;
    if (_1737)
    {
        _1839 = _1729;
        _1841 = _1730;
        _1843 = _1731;
    }
    else
    {
        uint _1847 = _1659 + 6u;
        float _1863 = (dot(vec3(cbLight._m0[_1659 + 2u].xyz), vec3(_245, _246, _247)) * 0.5) + 0.5;
        float _1864 = _1863 * _1863;
        float _3643 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1866 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _1839 = (((cbLight._m0[_1847].x * 0.3183098733425140380859375) * _1865) * _1866) + _1729;
        _1841 = (((cbLight._m0[_1847].y * 0.3183098733425140380859375) * _1865) * _1866) + _1730;
        _1843 = (((cbLight._m0[_1847].z * 0.3183098733425140380859375) * _1865) * _1866) + _1731;
    }
    bool _1846 = _1735.y == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1846)
    {
        _1901 = _1839;
        _1903 = _1841;
        _1905 = _1843;
    }
    else
    {
        uint _2009 = _1659 + 7u;
        float _2025 = (dot(vec3(cbLight._m0[_1659 + 3u].xyz), vec3(_245, _246, _247)) * 0.5) + 0.5;
        float _2026 = _2025 * _2025;
        float _3659 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2027 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _2028 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _1901 = (((cbLight._m0[_2009].x * 0.3183098733425140380859375) * _2027) * _2028) + _1839;
        _1903 = (((cbLight._m0[_2009].y * 0.3183098733425140380859375) * _2027) * _2028) + _1841;
        _1905 = (((cbLight._m0[_2009].z * 0.3183098733425140380859375) * _2027) * _2028) + _1843;
    }
    uint _1907 = _1659 + 8u;
    float _1913 = cbLight._m0[_1659].x + _313;
    float _1914 = cbLight._m0[_1659].y + _314;
    float _1915 = cbLight._m0[_1659].z + _315;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1923 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_1659].xyz));
    float _3675 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _3686 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _1927 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _1928 = dot(vec3(cbLight._m0[_1659].xyz), vec3(_1913 * _1919, _1914 * _1919, _1915 * _1919));
    float _3697 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1939 = (exp2(log2(1.0 - (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1945 = (0.5 / ((_1926 + 9.9999999392252902907785028219223e-09) + _1927)) * _1926;
    float _3708 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1947 = (isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * 0.31831014156341552734375;
    uint _1961 = _1659 + 9u;
    float _1967 = cbLight._m0[_1701].x + _313;
    float _1968 = cbLight._m0[_1701].y + _314;
    float _1969 = cbLight._m0[_1701].z + _315;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1977 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_1701].xyz));
    float _3719 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _1981 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1967 * _1973, _1968 * _1973, _1969 * _1973));
    float _3730 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
    float _1990 = (exp2(log2(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1994 = (0.5 / ((_1980 + 9.9999999392252902907785028219223e-09) + _1927)) * _1980;
    float _3741 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * 0.31831014156341552734375;
    float _2006 = (((_1990 * cbLight._m0[_1961].x) * _1996) * _1683) + ((((cbLight._m0[_1907].x * _1648) * _1939) * _1947) * _1697);
    float _2007 = (((_1990 * cbLight._m0[_1961].y) * _1996) * _1683) + ((((cbLight._m0[_1907].y * _1650) * _1939) * _1947) * _1697);
    float _2008 = (((_1990 * cbLight._m0[_1961].z) * _1996) * _1683) + ((((cbLight._m0[_1907].z * _1652) * _1939) * _1947) * _1697);
    float _2064;
    float _2066;
    float _2068;
    if (_1737)
    {
        _2064 = _2006;
        _2066 = _2007;
        _2068 = _2008;
    }
    else
    {
        uint _2070 = _1659 + 10u;
        uint _2076 = _1659 + 2u;
        float _2082 = cbLight._m0[_2076].x + _313;
        float _2083 = cbLight._m0[_2076].y + _314;
        float _2084 = cbLight._m0[_2076].z + _315;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2092 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_2076].xyz));
        float _3752 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _2096 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2082 * _2088, _2083 * _2088, _2084 * _2088));
        float _3763 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2109 = (0.5 / ((_2095 + 9.9999999392252902907785028219223e-09) + _1927)) * _2095;
        float _3774 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2111 = (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0))) * 0.31831014156341552734375;
        float _2112 = isnan(1.0) ? _1675 : (isnan(_1675) ? 1.0 : min(_1675, 1.0));
        _2064 = (((_2105 * cbLight._m0[_2070].x) * _2111) * _2112) + _2006;
        _2066 = (((_2105 * cbLight._m0[_2070].y) * _2111) * _2112) + _2007;
        _2068 = (((_2105 * cbLight._m0[_2070].z) * _2111) * _2112) + _2008;
    }
    float _2143;
    float _2145;
    float _2147;
    if (_1846)
    {
        _2143 = _2064;
        _2145 = _2066;
        _2147 = _2068;
    }
    else
    {
        uint _2154 = _1659 + 11u;
        uint _2160 = _1659 + 3u;
        float _2166 = cbLight._m0[_2160].x + _313;
        float _2167 = cbLight._m0[_2160].y + _314;
        float _2168 = cbLight._m0[_2160].z + _315;
        float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
        float _2176 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_2160].xyz));
        float _3790 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
        float _2179 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _2180 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2166 * _2172, _2167 * _2172, _2168 * _2172));
        float _3801 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2189 = (exp2(log2(1.0 - (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2193 = (0.5 / ((_2179 + 9.9999999392252902907785028219223e-09) + _1927)) * _2179;
        float _3812 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
        float _2195 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.31831014156341552734375;
        float _2196 = isnan(1.0) ? _1676 : (isnan(_1676) ? 1.0 : min(_1676, 1.0));
        _2143 = (((_2189 * cbLight._m0[_2154].x) * _2195) * _2196) + _2064;
        _2145 = (((_2189 * cbLight._m0[_2154].y) * _2195) * _2196) + _2066;
        _2147 = (((_2189 * cbLight._m0[_2154].z) * _2195) * _2196) + _2068;
    }
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    if (_1657.y == 0u)
    {
        uvec4 _2217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2218 = _2217.x;
        uint _2229 = uint((float(_2217.y) * floor(float(uint(cbSceneParam._m0[85u].y * _321) / _2218))) + floor(float(uint(cbSceneParam._m0[85u].x * _320) / _2218)));
        float _2239 = (log2(_1435 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2240 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        uint _2243 = uint(isnan(14.0) ? _2240 : (isnan(_2240) ? 14.0 : min(_2240, 14.0)));
        uvec4 _2248 = texelFetch(g_lightClusterGridBuffer, int(((_2243 << 2u) + (_2229 << 6u)) >> 2u));
        uint _2249 = _2248.x;
        uint _2250 = _2217.z;
        float _2328;
        float _2330;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        if (((((1u << ((_2250 >> 4u) & 15u)) + 4294967295u) & _2249) == 0u) || ((_2250 & 240u) == 0u))
        {
            _2328 = 0.0;
            _2330 = 0.0;
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
        }
        else
        {
            float _2329;
            float _2331;
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            uint _2475 = 0u;
            uint _2484;
            bool _2485;
            for (;;)
            {
                _2484 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                _2485 = _2484 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2485)
                {
                    frontier_phi_68_pred = _2474;
                    frontier_phi_68_pred_1 = _2473;
                    frontier_phi_68_pred_2 = _2472;
                    frontier_phi_68_pred_3 = _2470;
                    frontier_phi_68_pred_4 = _2469;
                    frontier_phi_68_pred_5 = _2471;
                }
                else
                {
                    float _2593;
                    float _2594;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    uint _2599;
                    _2593 = _2469;
                    _2594 = _2470;
                    _2595 = _2471;
                    _2596 = _2472;
                    _2597 = _2473;
                    _2598 = _2474;
                    _2599 = _2484;
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    for (;;)
                    {
                        uint _2603 = uint(findLSB(_2599)) + (_2475 << 5u);
                        uint _2600 = (_2599 + 4294967295u) & _2599;
                        uint _2605 = _2603 * 48u;
                        vec4 _2619 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2605)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2605 + 3u)).x));
                        uint _2625 = (_2603 * 48u) + 4u;
                        vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2625)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2625 + 3u)).x));
                        uint _2644 = (_2603 * 48u) + 8u;
                        vec3 _2655 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2644)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2644 + 2u)).x));
                        float _2659 = _2619.x - _1433;
                        float _2660 = _2619.y - _1434;
                        float _2661 = _2619.z - _1435;
                        float _2662 = dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661));
                        float _2665 = inversesqrt(_2662);
                        float _2674 = 1.0 - (_2662 * _2619.w);
                        float _3838 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2675 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
                        float _2676 = sqrt(_2662) * _2638.w;
                        float _2679 = 1.39999997615814208984375 / (_2676 + 1.39999997615814208984375);
                        float _2680 = _2679 * _2679;
                        float _2683 = ((1.0 - _2680) * dot(vec3(_342, _345, _348), vec3(_2665 * _2659, _2665 * _2660, _2665 * _2661))) + _2680;
                        float _2686 = _2676 * _2676;
                        float _2690 = ((isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0))) * _2675) / ((_2686 * 0.699999988079071044921875) + 1.0);
                        float _2694 = (-0.0) - _1433;
                        float _2695 = (-0.0) - _1434;
                        float _2696 = (-0.0) - _1435;
                        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
                        float _2704 = dot(vec3(_342, _345, _348), vec3(_2700 * _2694, _2700 * _2695, _2700 * _2696));
                        float _3854 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                        float _3865 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                        float _2708 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
                        float _2712 = (0.5 / (((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) + 9.9999999392252902907785028219223e-09) + _2708)) * _2708;
                        float _3876 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                        float _2721 = (((isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * 3.1415927410125732421875) / ((_2686 * 2.1991131305694580078125) + 3.141590118408203125)) * _2675;
                        _2528 = (_2690 * _2638.x) + _2596;
                        _2529 = (_2690 * _2638.y) + _2597;
                        _2530 = (_2690 * _2638.z) + _2598;
                        _2525 = (_2721 * _2655.x) + _2593;
                        _2526 = (_2721 * _2655.y) + _2594;
                        _2527 = (_2721 * _2655.z) + _2595;
                        if (_2600 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2593 = _2525;
                            _2594 = _2526;
                            _2595 = _2527;
                            _2596 = _2528;
                            _2597 = _2529;
                            _2598 = _2530;
                            _2599 = _2600;
                        }
                    }
                    frontier_phi_68_pred = _2530;
                    frontier_phi_68_pred_1 = _2529;
                    frontier_phi_68_pred_2 = _2528;
                    frontier_phi_68_pred_3 = _2526;
                    frontier_phi_68_pred_4 = _2525;
                    frontier_phi_68_pred_5 = _2527;
                }
                _2339 = frontier_phi_68_pred;
                _2337 = frontier_phi_68_pred_1;
                _2335 = frontier_phi_68_pred_2;
                _2331 = frontier_phi_68_pred_3;
                _2329 = frontier_phi_68_pred_4;
                _2333 = frontier_phi_68_pred_5;
                uint _2476 = _2475 + 1u;
                if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2469 = _2329;
                    _2470 = _2331;
                    _2471 = _2333;
                    _2472 = _2335;
                    _2473 = _2337;
                    _2474 = _2339;
                    _2475 = _2476;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2328 = _2329;
            _2330 = _2331;
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
        }
        uvec4 _2342 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2343 = _2342.z;
        uint _2345 = (_2343 >> 8u) & 15u;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        if (((4294967295u << _2345) & _2249) == 0u)
        {
            _2440 = _2328;
            _2442 = _2330;
            _2444 = _2332;
            _2446 = _2334;
            _2448 = _2336;
            _2450 = _2338;
        }
        else
        {
            float _2465 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2345 < ((_2343 >> 12u) & 15u))
            {
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2576 = _2328;
                float _2577 = _2330;
                float _2578 = _2332;
                float _2579 = _2334;
                float _2580 = _2336;
                float _2581 = _2338;
                uint _2582 = _2345;
                uint _2591;
                bool _2592;
                for (;;)
                {
                    _2591 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2582 << 2u)) >> 2u)).x;
                    _2592 = _2591 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2592)
                    {
                        frontier_phi_74_pred = _2578;
                        frontier_phi_74_pred_1 = _2577;
                        frontier_phi_74_pred_2 = _2576;
                        frontier_phi_74_pred_3 = _2581;
                        frontier_phi_74_pred_4 = _2580;
                        frontier_phi_74_pred_5 = _2579;
                    }
                    else
                    {
                        float _2726;
                        float _2727;
                        float _2728;
                        float _2729;
                        float _2730;
                        float _2731;
                        float _2978;
                        float _2979;
                        float _2980;
                        float _2981;
                        float _2982;
                        float _2983;
                        float _2739 = _2576;
                        float _2740 = _2577;
                        float _2741 = _2578;
                        float _2742 = _2579;
                        float _2743 = _2580;
                        float _2744 = _2581;
                        uint _2745 = _2591;
                        uint _2746;
                        vec4 _2771;
                        float _2772;
                        vec4 _2787;
                        vec3 _2799;
                        vec4 _2815;
                        vec4 _2831;
                        float _2878;
                        bool _2879;
                        for (;;)
                        {
                            uint _2756 = ((_2582 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2745));
                            _2746 = (_2745 + 4294967295u) & _2745;
                            uint _2758 = _2756 * 40u;
                            _2771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2758 + 3u)).x));
                            _2772 = _2771.w;
                            uint _2774 = (_2756 * 40u) + 4u;
                            _2787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2774 + 3u)).x));
                            uint _2789 = (_2756 * 40u) + 8u;
                            _2799 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x));
                            uint _2802 = (_2756 * 40u) + 16u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            uint _2818 = (_2756 * 40u) + 20u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2834 = (_2756 * 40u) + 24u;
                            vec4 _2847 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2834)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2834 + 3u)).x));
                            uint _2853 = (_2756 * 40u) + 28u;
                            vec4 _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            _2878 = fma(_1435, _2866.z, fma(_1434, _2866.y, _2866.x * _1433)) + _2866.w;
                            _2879 = !((fma(_1435, _2847.z, fma(_1434, _2847.y, _2847.x * _1433)) + _2847.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_2879)
                            {
                                float _2906 = _2771.x - _1433;
                                float _2907 = _2771.y - _1434;
                                float _2908 = _2771.z - _1435;
                                float _2909 = dot(vec3(_2906, _2907, _2908), vec3(_2906, _2907, _2908));
                                float _2912 = inversesqrt(_2909);
                                float _2913 = _2912 * _2906;
                                float _2914 = _2912 * _2907;
                                float _2915 = _2912 * _2908;
                                float _2919 = 1.0 - (_2909 / (_2772 * _2772));
                                float _3887 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                                float _2920 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                                float _2924 = sqrt(_2909) * _2787.w;
                                float _2926 = 1.39999997615814208984375 / (_2924 + 1.39999997615814208984375);
                                float _2927 = _2926 * _2926;
                                float _2928 = 1.0 - _2927;
                                float _2930 = (_2928 * dot(vec3(_2913, _2914, _2915), vec3(_342, _345, _348))) + _2927;
                                float _2933 = _2924 * _2924;
                                float _2937 = (fma(_1435, _2815.z, fma(_1434, _2815.y, _2815.x * _1433)) + _2815.w) / _2878;
                                float _2938 = (fma(_1435, _2831.z, fma(_1434, _2831.y, _2831.x * _1433)) + _2831.w) / _2878;
                                float _2942 = 1.0 - dot(vec2(_2937, _2938), vec2(_2937, _2938));
                                float _3903 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                                float _2943 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                                float _2944 = _2943 * (((isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0))) * _2920) / ((_2933 * 0.699999988079071044921875) + 1.0));
                                float _2954 = dot(vec3(_342, _345, _348), vec3((-0.0) - (_1433 * _2465), (-0.0) - (_1434 * _2465), (-0.0) - (_1435 * _2465)));
                                float _3914 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                                float _2962 = (_2928 * dot(vec3(_342, _345, _348), vec3(_2913, _2914, _2915))) + _2927;
                                float _3925 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
                                float _2967 = (0.5 / (((isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) + 9.9999999392252902907785028219223e-09) + _2963)) * _2963;
                                float _3936 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                                float _2974 = (_2943 * _2920) * (((isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 3.1415927410125732421875) / ((_2933 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_80_pred = _2974 * _2799.z;
                                frontier_phi_80_pred_1 = _2974 * _2799.y;
                                frontier_phi_80_pred_2 = _2974 * _2799.x;
                                frontier_phi_80_pred_3 = _2944 * _2787.z;
                                frontier_phi_80_pred_4 = _2944 * _2787.y;
                                frontier_phi_80_pred_5 = _2944 * _2787.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _2980 = frontier_phi_80_pred;
                            _2979 = frontier_phi_80_pred_1;
                            _2978 = frontier_phi_80_pred_2;
                            _2983 = frontier_phi_80_pred_3;
                            _2982 = frontier_phi_80_pred_4;
                            _2981 = frontier_phi_80_pred_5;
                            _2729 = _2981 + _2742;
                            _2730 = _2982 + _2743;
                            _2731 = _2983 + _2744;
                            _2726 = _2978 + _2739;
                            _2727 = _2979 + _2740;
                            _2728 = _2980 + _2741;
                            if (_2746 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2739 = _2726;
                                _2740 = _2727;
                                _2741 = _2728;
                                _2742 = _2729;
                                _2743 = _2730;
                                _2744 = _2731;
                                _2745 = _2746;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _2728;
                        frontier_phi_74_pred_1 = _2727;
                        frontier_phi_74_pred_2 = _2726;
                        frontier_phi_74_pred_3 = _2731;
                        frontier_phi_74_pred_4 = _2730;
                        frontier_phi_74_pred_5 = _2729;
                    }
                    _2445 = frontier_phi_74_pred;
                    _2443 = frontier_phi_74_pred_1;
                    _2441 = frontier_phi_74_pred_2;
                    _2451 = frontier_phi_74_pred_3;
                    _2449 = frontier_phi_74_pred_4;
                    _2447 = frontier_phi_74_pred_5;
                    uint _2583 = _2582 + 1u;
                    if (_2583 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2576 = _2441;
                        _2577 = _2443;
                        _2578 = _2445;
                        _2579 = _2447;
                        _2580 = _2449;
                        _2581 = _2451;
                        _2582 = _2583;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2449;
                frontier_phi_62_63_ladder_1 = _2447;
                frontier_phi_62_63_ladder_2 = _2445;
                frontier_phi_62_63_ladder_3 = _2451;
                frontier_phi_62_63_ladder_4 = _2443;
                frontier_phi_62_63_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_62_63_ladder = _2336;
                frontier_phi_62_63_ladder_1 = _2334;
                frontier_phi_62_63_ladder_2 = _2332;
                frontier_phi_62_63_ladder_3 = _2338;
                frontier_phi_62_63_ladder_4 = _2330;
                frontier_phi_62_63_ladder_5 = _2328;
            }
            _2440 = frontier_phi_62_63_ladder_5;
            _2442 = frontier_phi_62_63_ladder_4;
            _2444 = frontier_phi_62_63_ladder_2;
            _2446 = frontier_phi_62_63_ladder_1;
            _2448 = frontier_phi_62_63_ladder;
            _2450 = frontier_phi_62_63_ladder_3;
        }
        float _2455 = isnan(1.0) ? _387 : (isnan(_387) ? 1.0 : min(_387, 1.0));
        _2261 = (_2455 * _2446) + _1901;
        _2263 = (_2455 * _2448) + _1903;
        _2265 = (_2455 * _2450) + _1905;
        _2267 = ((_2440 * 0.039999999105930328369140625) * _2455) + _2143;
        _2269 = ((_2442 * 0.039999999105930328369140625) * _2455) + _2145;
        _2271 = ((_2444 * 0.039999999105930328369140625) * _2455) + _2147;
    }
    else
    {
        _2261 = _1901;
        _2263 = _1903;
        _2265 = _1905;
        _2267 = _2143;
        _2269 = _2145;
        _2271 = _2147;
    }
    float _3952 = isnan(0.0) ? _373 : (isnan(_373) ? 0.0 : max(_373, 0.0));
    float _3963 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _3974 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    uint _2291 = _361 + 6u;
    float _2299 = _320 / cbSceneParam._m0[86u].x;
    float _2300 = _321 / cbSceneParam._m0[86u].y;
    vec4 _2314 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, (log2((isnan(cbSceneParam._m0[77u].w) ? _255 : (isnan(_255) ? cbSceneParam._m0[77u].w : min(_255, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2316 = _2314.x;
    float _2317 = _2314.y;
    float _2318 = _2314.z;
    float _2319 = _2314.w;
    float _2390;
    float _2392;
    float _2394;
    float _2396;
    if (_255 > cbSceneParam._m0[78u].w)
    {
        float _2353 = isnan(_255) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _255 : min(cbSceneParam._m0[80u].w, _255));
        float _2354 = _2353 / _255;
        float _2365 = _2354 * _306;
        float _2366 = _307 * _2354;
        float _2367 = (-0.0) - _2366;
        float _2368 = _2354 * _308;
        float _2370 = (cbSceneParam._m0[77u].w * _2367) / _2353;
        float _2371 = _2370 + cbSceneParam._m0[79u].w;
        float _2372 = cbSceneParam._m0[79u].w - _2366;
        float _2378 = sqrt(((_2365 * _2365) + (_2366 * _2366)) + (_2368 * _2368));
        float _2381 = (1.0 - (cbSceneParam._m0[77u].w / _2353)) * _2378;
        float _2386 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2388 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2538;
        if (abs((_2367 - _2370) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2538 = ((((_2371 > 0.0) ? exp2(_2386 * _2371) : (2.0 - exp2(_2388 * _2371))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2381;
        }
        else
        {
            float _2498 = 1.0 / cbSceneParam._m0[80u].x;
            float _2499 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : max(_2371, _2372));
            float _2500 = isnan(_2372) ? _2371 : (isnan(_2371) ? _2372 : min(_2371, _2372));
            float _2509 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : min(_2499, 0.0));
            float _2510 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : min(_2500, 0.0));
            _2538 = ((abs(_2378 / _2367) * cbSceneParam._m0[80u].y) * ((((_2509 - _2510) * 2.0) - ((exp2(_2386 * (isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0)))) - exp2(_2386 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0))))) * _2498)) - ((exp2(_2388 * _2509) - exp2(_2388 * _2510)) * _2498))) + (_2381 * cbSceneParam._m0[80u].z);
        }
        vec4 _2540 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, 1.0), 0.0);
        float _2549 = exp2((_2538 * (-1.44269502162933349609375)) * (1.0 - _2540.w));
        float _2550 = log2(_2549);
        float _2566 = log2(_2319);
        _2390 = (exp2(_2566 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].x)) * _2540.x) / cbSceneParam._m0[78u].x)) + _2316;
        _2392 = (exp2(_2566 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].y)) * _2540.y) / cbSceneParam._m0[78u].y)) + _2317;
        _2394 = (exp2(_2566 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2550 * cbSceneParam._m0[78u].z)) * _2540.z) / cbSceneParam._m0[78u].z)) + _2318;
        _2396 = _2549 * _2319;
    }
    else
    {
        _2390 = _2316;
        _2392 = _2317;
        _2394 = _2318;
        _2396 = _2319;
    }
    float _2408 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2409 = _2408 == 3.0;
    float _2410 = log2(_2396);
    float _2417 = exp2(_2410 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0))) * (_2261 + ((isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0))) * _387))) + ((_2267 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1165)) * cbPerFrame._m0[3u].x));
    float _2418 = exp2(_2410 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2263 + ((isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0))) * _387))) + ((_2269 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1165)) * cbPerFrame._m0[3u].x));
    float _2419 = exp2(_2410 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_2265 + ((isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0))) * _387))) + ((_2271 + ((isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0))) * _1165)) * cbPerFrame._m0[3u].x));
    float _2428 = (_2408 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2428 * (_2409 ? _2417 : (_2417 + (cbSceneParam._m0[72u].w * _2390)));
    SV_Target.y = _2428 * (_2409 ? _2418 : (_2418 + (cbSceneParam._m0[72u].w * _2392)));
    SV_Target.z = _2428 * (_2409 ? _2419 : (_2419 + (cbSceneParam._m0[72u].w * _2394)));
    SV_Target.w = cbInstanceData._m0[_2291].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2291].w;
}


