#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _775;
float _3223;
float _3224;
float _3225;
float _3226;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _160 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _161 = _160 * NORMAL.x;
    float _162 = _160 * NORMAL.y;
    float _163 = _160 * NORMAL.z;
    float _168;
    float _169;
    float _170;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _168 = (-0.0) - _161;
        _169 = (-0.0) - _162;
        _170 = (-0.0) - _163;
    }
    else
    {
        _168 = _161;
        _169 = _162;
        _170 = _163;
    }
    vec4 _193 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _196 = _193.x;
    bool _203 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _223 = ((_203 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _196)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _196))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _3235 = isnan(0.0) ? _223 : (isnan(_223) ? 0.0 : max(_223, 0.0));
    float _226 = 1.0 - (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)));
    float _3246 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _227 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
    float _230 = 3.0 - (_227 * 2.0);
    float _235 = _227 * _227;
    float _242 = ((_235 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[10u].x)) * _230) + cbMtdParam._m0[10u].x;
    float _243 = ((_235 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[10u].y)) * _230) + cbMtdParam._m0[10u].y;
    float _244 = ((_235 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[10u].z)) * _230) + cbMtdParam._m0[10u].z;
    float _248 = inversesqrt(dot(vec3(_168, _169, _170), vec3(_168, _169, _170)));
    float _249 = _248 * _168;
    float _250 = _248 * _169;
    float _251 = _248 * _170;
    float _3257 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3268 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3279 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _259 = _203 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _300 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _310 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _300);
    float _311 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _300);
    float _312 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _300);
    float _316 = inversesqrt(dot(vec3(_310, _311, _312), vec3(_310, _311, _312)));
    float _317 = _310 * _316;
    float _318 = _311 * _316;
    float _319 = _312 * _316;
    vec4 _324 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _326 = _324.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _454 = sqrt(((_310 * _310) + (_311 * _311)) + (_312 * _312));
        float _460 = (cbMatDynParam._m0[5u].x * _454) + cbMatDynParam._m0[5u].y;
        float _3290 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
        float _461 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _465 = (cbMatDynParam._m0[5u].z * _454) + cbMatDynParam._m0[5u].w;
        float _3301 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) - _461)) + _461) < ((_326 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _337 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _338 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _358 = fma(_251, cbSceneParam._m0[5u].z, fma(_250, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _249));
    float _361 = fma(_251, cbSceneParam._m0[6u].z, fma(_250, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _249));
    float _364 = fma(_251, cbSceneParam._m0[7u].z, fma(_250, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _249));
    uint _377 = uint(roundEven(NORMAL.w)) * 13u;
    uint _379 = _377 + 9u;
    uint _380 = _379 + uint(cbMatDynParam._m0[0u].w);
    float _386 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_380].x;
    float _387 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_380].y;
    float _388 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_380].z;
    float _3312 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _390 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _391 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    vec4 _400 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _337, cbSceneParam._m0[86u].y * _338));
    float _403 = _400.x * TEXCOORD.z;
    float _404 = dot(vec3(_249, _250, _251), vec3(_317, _318, _319));
    float _407 = _404 * 2.0;
    float _411 = (_407 * _249) - _317;
    float _412 = (_407 * _250) - _318;
    float _413 = (_407 * _251) - _319;
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _443 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _774;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    float _788;
    float _789;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _499 = fma(_443, cbModelParam._m0[26u].z, fma(_439, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _435));
        float _503 = fma(_443, cbModelParam._m0[27u].z, fma(_439, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _435));
        float _507 = fma(_443, cbModelParam._m0[28u].z, fma(_439, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _435));
        float _532 = _435 + _249;
        float _533 = _439 + _250;
        float _534 = _443 + _251;
        float _544 = fma(_534, cbModelParam._m0[26u].z, fma(_533, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _532)) - _499;
        float _545 = fma(_534, cbModelParam._m0[27u].z, fma(_533, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _532)) - _503;
        float _546 = fma(_534, cbModelParam._m0[28u].z, fma(_533, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _532)) - _507;
        float _550 = inversesqrt(dot(vec3(_544, _545, _546), vec3(_544, _545, _546)));
        float _563 = ((_550 * _544) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_499 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _564 = ((_550 * _545) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_503 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _565 = ((_550 * _546) / cbModelParam._m0[34u].z) + ((((((_507 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _575 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _582 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        vec4 _589 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_563, _564, _565), 0.0);
        float _602 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _603 = _602 * (_568.x + (-0.5));
        float _604 = _602 * (_568.y + (-0.5));
        float _605 = _602 * (_568.z + (-0.5));
        float _612 = exp2((_575.w + (-0.5)) * 20.0) * 2.0;
        float _613 = _612 * (_575.x + (-0.5));
        float _614 = _612 * (_575.y + (-0.5));
        float _615 = _612 * (_575.z + (-0.5));
        float _622 = exp2((_582.w + (-0.5)) * 20.0) * 2.0;
        float _623 = _622 * (_582.x + (-0.5));
        float _624 = _622 * (_582.y + (-0.5));
        float _625 = _622 * (_582.z + (-0.5));
        float _632 = exp2((_589.w + (-0.5)) * 20.0) * 2.0;
        float _633 = _632 * (_589.x + (-0.5));
        float _634 = _632 * (_589.y + (-0.5));
        float _635 = _632 * (_589.z + (-0.5));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
        float _638 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
        float _639 = _603 * 0.5;
        float _640 = _613 * 0.5;
        float _641 = _623 * 0.5;
        float _642 = dot(vec3(_639, _640, _641), vec3(_639, _640, _641));
        float _647 = (_642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_642);
        float _656 = (dot(vec3(_249, _250, _251), vec3(_647 * _639, _647 * _640, _647 * _641)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        float _666 = sqrt(((_640 * _640) + (_639 * _639)) + (_641 * _641)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _668 = _667 * 2.0;
        float _672 = (1.0 - _667) / (_667 + 1.0);
        float _3382 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
        float _673 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _682 = ((((1.0 - _673) * (_668 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_668 + 1.0))) + _673) * _636;
        float _683 = _604 * 0.5;
        float _684 = _614 * 0.5;
        float _685 = _624 * 0.5;
        float _686 = dot(vec3(_683, _684, _685), vec3(_683, _684, _685));
        float _691 = (_686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_686);
        float _699 = (dot(vec3(_249, _250, _251), vec3(_691 * _683, _691 * _684, _691 * _685)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _708 = sqrt(((_684 * _684) + (_683 * _683)) + (_685 * _685)) / (_637 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
        float _709 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _710 = _709 * 2.0;
        float _714 = (1.0 - _709) / (_709 + 1.0);
        float _3415 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _715 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _724 = ((((1.0 - _715) * (_710 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_710 + 1.0))) + _715) * _637;
        float _725 = _605 * 0.5;
        float _726 = _615 * 0.5;
        float _727 = _625 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _741 = (dot(vec3(_249, _250, _251), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _750 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_638 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _752 = _751 * 2.0;
        float _756 = (1.0 - _751) / (_751 + 1.0);
        float _3448 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _757 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _766 = ((((1.0 - _757) * (_752 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_752 + 1.0))) + _757) * _638;
        _774 = _605;
        _776 = _604;
        _777 = _603;
        _778 = _615;
        _779 = _614;
        _780 = _613;
        _781 = _625;
        _782 = _624;
        _783 = _623;
        _784 = _638;
        _785 = _637;
        _786 = _636;
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0)));
        _788 = cbModelParam._m0[36u].z * (isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0)));
        _789 = cbModelParam._m0[36u].z * (isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0)));
    }
    else
    {
        _774 = _775;
        _776 = _775;
        _777 = _775;
        _778 = _775;
        _779 = _775;
        _780 = _775;
        _781 = _775;
        _782 = _775;
        _783 = _775;
        _784 = _775;
        _785 = _775;
        _786 = _775;
        _787 = 0.0;
        _788 = 0.0;
        _789 = 0.0;
    }
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _818 = fma(_443, cbModelParam._m0[30u].z, fma(_439, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _435));
        float _822 = fma(_443, cbModelParam._m0[31u].z, fma(_439, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _435));
        float _826 = fma(_443, cbModelParam._m0[32u].z, fma(_439, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _435));
        float _849 = _435 + _249;
        float _850 = _439 + _250;
        float _851 = _443 + _251;
        float _861 = fma(_851, cbModelParam._m0[30u].z, fma(_850, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _849)) - _818;
        float _862 = fma(_851, cbModelParam._m0[31u].z, fma(_850, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _849)) - _822;
        float _863 = fma(_851, cbModelParam._m0[32u].z, fma(_850, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _849)) - _826;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_818 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_822 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[35u].z) + ((((((_826 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _898 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _917 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_884.x + (-0.5));
        float _919 = _917 * (_884.y + (-0.5));
        float _920 = _917 * (_884.z + (-0.5));
        float _927 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_891.x + (-0.5));
        float _929 = _927 * (_891.y + (-0.5));
        float _930 = _927 * (_891.z + (-0.5));
        float _937 = exp2((_898.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_898.x + (-0.5));
        float _939 = _937 * (_898.y + (-0.5));
        float _940 = _937 * (_898.z + (-0.5));
        float _947 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_905.x + (-0.5));
        float _949 = _947 * (_905.y + (-0.5));
        float _950 = _947 * (_905.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_249, _250, _251), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3511 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_981 + 1.0))) + _986) * _951;
        float _996 = _919 * 0.5;
        float _997 = _929 * 0.5;
        float _998 = _939 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_249, _250, _251), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3544 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1023 + 1.0))) + _1028) * _952;
        float _1038 = _920 * 0.5;
        float _1039 = _930 * 0.5;
        float _1040 = _940 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_249, _250, _251), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3577 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1065 + 1.0))) + _1070) * _953;
        _1087 = _920;
        _1088 = _919;
        _1089 = _918;
        _1090 = _930;
        _1091 = _929;
        _1092 = _928;
        _1093 = _940;
        _1094 = _939;
        _1095 = _938;
        _1096 = _953;
        _1097 = _952;
        _1098 = _951;
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1100 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1101 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
    }
    else
    {
        _1087 = _775;
        _1088 = _775;
        _1089 = _775;
        _1090 = _775;
        _1091 = _775;
        _1092 = _775;
        _1093 = _775;
        _1094 = _775;
        _1095 = _775;
        _1096 = _775;
        _1097 = _775;
        _1098 = _775;
        _1099 = 0.0;
        _1100 = 0.0;
        _1101 = 0.0;
    }
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1112 = (cbModelParam._m0[1u].x * (_1100 - _788)) + _788;
    float _1113 = (cbModelParam._m0[1u].x * (_1101 - _789)) + _789;
    float _1134 = fma(_1113, cbSceneParam._m0[89u].z, fma(_1112, cbSceneParam._m0[89u].y, _1111 * cbSceneParam._m0[89u].x));
    float _1137 = fma(_1113, cbSceneParam._m0[90u].z, fma(_1112, cbSceneParam._m0[90u].y, _1111 * cbSceneParam._m0[90u].x));
    float _1140 = fma(_1113, cbSceneParam._m0[91u].z, fma(_1112, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1111));
    float _1155 = _411 * 0.5;
    float _1156 = _412 * 0.5;
    float _1157 = _413 * 0.5;
    float _1158 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1089, _1092, _1095, _1098));
    float _1161 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1088, _1091, _1094, _1097));
    float _1164 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1198;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1171 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_774, _778, _781, _784));
        float _1175 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_776, _779, _782, _785));
        float _1179 = dot(vec4(_1155, _1156, _1157, 1.0), vec4(_777, _780, _783, _786));
        float _1186 = dot(vec4(cbModelParam._m0[39u]), vec4(_1155, _1156, _1157, 1.0));
        _1198 = dot(vec3(isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)), isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1186) ? 0.0 : (isnan(0.0) ? _1186 : max(0.0, _1186))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1198 = 1.0;
    }
    float _1209;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1200 = dot(vec4(cbModelParam._m0[40u]), vec4(_1155, _1156, _1157, 1.0));
        _1209 = dot(vec3(isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)), isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)), isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1200) ? 0.0 : (isnan(0.0) ? _1200 : max(0.0, _1200))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1209 = 1.0;
    }
    float _1213 = (_1209 * cbModelParam._m0[1u].x) + (_1198 * (1.0 - cbModelParam._m0[1u].x));
    float _1223 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1305;
    float _1307;
    float _1309;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1272 = fma(_443, cbModelParam._m0[13u].z, fma(_439, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _435)) + cbModelParam._m0[13u].w;
        float _1276 = fma(_443, cbModelParam._m0[14u].z, fma(_439, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _435)) + cbModelParam._m0[14u].w;
        float _1280 = fma(_443, cbModelParam._m0[15u].z, fma(_439, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _435)) + cbModelParam._m0[15u].w;
        float _1283 = fma(_413, cbModelParam._m0[13u].z, fma(_412, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _411));
        float _1286 = fma(_413, cbModelParam._m0[14u].z, fma(_412, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _411));
        float _1289 = fma(_413, cbModelParam._m0[15u].z, fma(_412, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _411));
        float _1315;
        if (_1283 > 0.0)
        {
            _1315 = abs((1.0 - _1272) / _1283);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1283 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1272 + 1.0) / _1283);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1315 = frontier_phi_19_17_ladder;
        }
        float _1489;
        if (_1286 > 0.0)
        {
            _1489 = abs((1.0 - _1276) / _1286);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1286 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1276 + 1.0) / _1286);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1489 = frontier_phi_28_24_ladder;
        }
        float _1786;
        if (_1289 > 0.0)
        {
            _1786 = abs((1.0 - _1280) / _1289);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1289 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1280 + 1.0) / _1289);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1786 = frontier_phi_40_35_ladder;
        }
        float _1788 = isnan(_1489) ? _1315 : (isnan(_1315) ? _1489 : min(_1315, _1489));
        float _1789 = isnan(_1786) ? _1788 : (isnan(_1788) ? _1786 : min(_1788, _1786));
        float _1793 = (_1789 * _1283) + _1272;
        float _1794 = (_1789 * _1286) + _1276;
        float _1795 = (_1789 * _1289) + _1280;
        float _1796 = _1789 * 9.9999997473787516355514526367188e-05;
        float _1798 = (-1.0) - _1796;
        float _1800 = _1796 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1795 > _1800) || ((_1795 < _1798) || ((_1794 > _1800) || ((_1794 < _1798) || ((_1793 < _1798) || (_1793 > _1800))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1940 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1795, cbModelParam._m0[9u].z, fma(_1794, cbModelParam._m0[9u].y, _1793 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1795, cbModelParam._m0[10u].z, fma(_1794, cbModelParam._m0[10u].y, _1793 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1795, cbModelParam._m0[11u].z, fma(_1794, cbModelParam._m0[11u].y, _1793 * cbModelParam._m0[11u].x))), _1223);
            frontier_phi_18_40_ladder = _1940.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1940.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1940.x * cbModelParam._m0[1u].y;
        }
        _1305 = frontier_phi_18_40_ladder_2;
        _1307 = frontier_phi_18_40_ladder_1;
        _1309 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1293 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_411, _412, _413), _1223);
        _1305 = _1293.x * cbModelParam._m0[1u].y;
        _1307 = _1293.y * cbModelParam._m0[1u].y;
        _1309 = _1293.z * cbModelParam._m0[1u].y;
    }
    float _1312 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1405;
    float _1407;
    float _1409;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1369 = fma(_443, cbModelParam._m0[21u].z, fma(_439, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _435)) + cbModelParam._m0[21u].w;
        float _1373 = fma(_443, cbModelParam._m0[22u].z, fma(_439, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _435)) + cbModelParam._m0[22u].w;
        float _1377 = fma(_443, cbModelParam._m0[23u].z, fma(_439, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _435)) + cbModelParam._m0[23u].w;
        float _1380 = fma(_413, cbModelParam._m0[21u].z, fma(_412, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _411));
        float _1383 = fma(_413, cbModelParam._m0[22u].z, fma(_412, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _411));
        float _1386 = fma(_413, cbModelParam._m0[23u].z, fma(_412, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _411));
        float _1494;
        if (_1380 > 0.0)
        {
            _1494 = abs((1.0 - _1369) / _1380);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1369 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1494 = frontier_phi_30_26_ladder;
        }
        float _1813;
        if (_1383 > 0.0)
        {
            _1813 = abs((1.0 - _1373) / _1383);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1373 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1813 = frontier_phi_42_37_ladder;
        }
        float _2086;
        if (_1386 > 0.0)
        {
            _2086 = abs((1.0 - _1377) / _1386);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1386 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1377 + 1.0) / _1386);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2086 = frontier_phi_52_49_ladder;
        }
        float _2088 = isnan(_1813) ? _1494 : (isnan(_1494) ? _1813 : min(_1494, _1813));
        float _2089 = isnan(_2086) ? _2088 : (isnan(_2088) ? _2086 : min(_2088, _2086));
        float _2093 = (_2089 * _1380) + _1369;
        float _2094 = (_2089 * _1383) + _1373;
        float _2095 = (_2089 * _1386) + _1377;
        float _2096 = _2089 * 9.9999997473787516355514526367188e-05;
        float _2097 = (-1.0) - _2096;
        float _2099 = _2096 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2095 > _2099) || ((_2095 < _2097) || ((_2094 > _2099) || ((_2094 < _2097) || ((_2093 < _2097) || (_2093 > _2099))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2186 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2095, cbModelParam._m0[17u].z, fma(_2094, cbModelParam._m0[17u].y, _2093 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2095, cbModelParam._m0[18u].z, fma(_2094, cbModelParam._m0[18u].y, _2093 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2095, cbModelParam._m0[19u].z, fma(_2094, cbModelParam._m0[19u].y, _2093 * cbModelParam._m0[19u].x))), _1312);
            frontier_phi_27_52_ladder = _2186.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2186.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2186.x * cbModelParam._m0[1u].z;
        }
        _1405 = frontier_phi_27_52_ladder_2;
        _1407 = frontier_phi_27_52_ladder_1;
        _1409 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1389 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_411, _412, _413), _1312);
        _1405 = _1389.x * cbModelParam._m0[1u].z;
        _1407 = _1389.y * cbModelParam._m0[1u].z;
        _1409 = _1389.z * cbModelParam._m0[1u].z;
    }
    float _1421 = _403 * 0.01200000010430812835693359375;
    float _1423 = _1421 * ((cbModelParam._m0[1u].w * (_1405 - _1305)) + _1305);
    float _1424 = _1421 * ((cbModelParam._m0[1u].w * (_1407 - _1307)) + _1307);
    float _1425 = _1421 * ((cbModelParam._m0[1u].w * (_1409 - _1309)) + _1309);
    float _1428 = fma(_1425, cbSceneParam._m0[89u].z, fma(_1424, cbSceneParam._m0[89u].y, _1423 * cbSceneParam._m0[89u].x));
    float _1431 = fma(_1425, cbSceneParam._m0[90u].z, fma(_1424, cbSceneParam._m0[90u].y, _1423 * cbSceneParam._m0[90u].x));
    float _1434 = fma(_1425, cbSceneParam._m0[91u].z, fma(_1424, cbSceneParam._m0[91u].y, _1423 * cbSceneParam._m0[91u].x));
    float _1468 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1472 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1480 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1481 = _1468 / _1480;
    float _1482 = _1472 / _1480;
    float _1483 = _1476 / _1480;
    float _1630;
    float _1631;
    float _1632;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1510 = ((uint(_1483 > cbSceneParam._m0[59u].y) + uint(_1483 > cbSceneParam._m0[59u].x)) + uint(_1483 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1511 = _1510 + 43u;
        uint _1519 = _1510 + 44u;
        uint _1527 = _1510 + 45u;
        uint _1535 = _1510 + 46u;
        float _1546 = fma(_1480, cbSceneParam._m0[_1511].w, fma(_1476, cbSceneParam._m0[_1511].z, fma(_1472, cbSceneParam._m0[_1511].y, _1468 * cbSceneParam._m0[_1511].x)));
        float _1550 = fma(_1480, cbSceneParam._m0[_1519].w, fma(_1476, cbSceneParam._m0[_1519].z, fma(_1472, cbSceneParam._m0[_1519].y, _1468 * cbSceneParam._m0[_1519].x)));
        float _1558 = fma(_1480, cbSceneParam._m0[_1535].w, fma(_1476, cbSceneParam._m0[_1535].z, fma(_1472, cbSceneParam._m0[_1535].y, _1468 * cbSceneParam._m0[_1535].x)));
        float _1563 = cbSceneParam._m0[33u].z * _1558;
        float _1565 = cbSceneParam._m0[33u].w * _1558;
        float _1568 = fma(_1480, cbSceneParam._m0[_1527].w, fma(_1476, cbSceneParam._m0[_1527].z, fma(_1472, cbSceneParam._m0[_1527].y, _1468 * cbSceneParam._m0[_1527].x))) / _1558;
        float _1616 = (cbSceneParam._m0[33u].x - sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483))) * cbSceneParam._m0[33u].y;
        float _3703 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1623 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1563 + _1546) / _1558, (_1565 + _1550) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1565 + _1546) / _1558, (_1550 - _1563) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1546 - _1563) / _1558, (_1550 - _1565) / _1558), _1568), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1546 - _1565) / _1558, (_1563 + _1550) / _1558), _1568), 0.0)).x), vec4(0.25)));
        _1630 = 1.0 - (_1623 * cbSceneParam._m0[34u].x);
        _1631 = 1.0 - (_1623 * cbSceneParam._m0[34u].y);
        _1632 = 1.0 - (_1623 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1630 = 1.0;
        _1631 = 1.0;
        _1632 = 1.0;
    }
    float _1696;
    float _1698;
    float _1700;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1684 = fma(_1480, cbSceneParam._m0[63u].w, fma(_1476, cbSceneParam._m0[63u].z, fma(_1472, cbSceneParam._m0[63u].y, _1468 * cbSceneParam._m0[63u].x)));
        float _1685 = fma(_1480, cbSceneParam._m0[60u].w, fma(_1476, cbSceneParam._m0[60u].z, fma(_1472, cbSceneParam._m0[60u].y, _1468 * cbSceneParam._m0[60u].x))) / _1684;
        float _1686 = fma(_1480, cbSceneParam._m0[61u].w, fma(_1476, cbSceneParam._m0[61u].z, fma(_1472, cbSceneParam._m0[61u].y, _1468 * cbSceneParam._m0[61u].x))) / _1684;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1685 >= cbSceneParam._m0[64u].x) && (_1686 >= cbSceneParam._m0[64u].y)) && (_1685 <= cbSceneParam._m0[64u].z)) && (_1686 <= cbSceneParam._m0[64u].w))
        {
            float _1826 = fma(_1480, cbSceneParam._m0[62u].w, fma(_1476, cbSceneParam._m0[62u].z, fma(_1472, cbSceneParam._m0[62u].y, _1468 * cbSceneParam._m0[62u].x))) / _1684;
            float _1830 = isnan(cbSceneParam._m0[41u].w) ? _1826 : (isnan(_1826) ? cbSceneParam._m0[41u].w : max(_1826, cbSceneParam._m0[41u].w));
            float _1873 = (cbSceneParam._m0[33u].x - sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483))) * cbSceneParam._m0[33u].y;
            float _3719 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
            float _1880 = (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1685, cbSceneParam._m0[33u].w + _1686), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1685, _1686 - cbSceneParam._m0[33u].z), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1685 - cbSceneParam._m0[33u].z, _1686 - cbSceneParam._m0[33u].w), _1830), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1685 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1686), _1830), 0.0)).x), vec4(0.25)));
            float _1884 = 1.0 - (_1880 * cbSceneParam._m0[34u].x);
            float _1885 = 1.0 - (_1880 * cbSceneParam._m0[34u].y);
            float _1886 = 1.0 - (_1880 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_1885) ? _1631 : (isnan(_1631) ? _1885 : min(_1631, _1885));
            frontier_phi_39_38_ladder_1 = isnan(_1884) ? _1630 : (isnan(_1630) ? _1884 : min(_1630, _1884));
            frontier_phi_39_38_ladder_2 = isnan(_1886) ? _1632 : (isnan(_1632) ? _1886 : min(_1632, _1886));
        }
        else
        {
            frontier_phi_39_38_ladder = _1631;
            frontier_phi_39_38_ladder_1 = _1630;
            frontier_phi_39_38_ladder_2 = _1632;
        }
        _1696 = frontier_phi_39_38_ladder_1;
        _1698 = frontier_phi_39_38_ladder;
        _1700 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1696 = _1630;
        _1698 = _1631;
        _1700 = _1632;
    }
    uvec4 _1705 = floatBitsToUint(cbInstanceData._m0[_377 + 5u]);
    uint _1707 = _1705.x * 14u;
    uint _1708 = _1707 + 13u;
    float _1715 = _403 + (-1.0);
    float _1721 = (cbLight._m0[_1708].x * _1715) + 1.0;
    float _1722 = (cbLight._m0[_1708].y * _1715) + 1.0;
    float _1723 = (cbLight._m0[_1708].z * _1715) + 1.0;
    float _1724 = (cbLight._m0[_1708].w * _1715) + 1.0;
    uint _1725 = _1707 + 5u;
    float _1731 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1735 = _1707 + 4u;
    float _1745 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1749 = _1707 | 1u;
    float _1760 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_249, _250, _251));
    float _1763 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_249, _250, _251));
    float _3755 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _3766 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
    float _1768 = (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * 0.3183098733425140380859375;
    float _1770 = (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 0.3183098733425140380859375;
    float _1777 = ((cbLight._m0[_1725].x * _1731) * _1770) + (((cbLight._m0[_1735].x * _1696) * _1745) * _1768);
    float _1778 = ((_1731 * cbLight._m0[_1725].y) * _1770) + (((cbLight._m0[_1735].y * _1698) * _1745) * _1768);
    float _1779 = ((_1731 * cbLight._m0[_1725].z) * _1770) + (((cbLight._m0[_1735].z * _1700) * _1745) * _1768);
    uvec4 _1783 = floatBitsToUint(cbLight._m0[_1707 + 12u]);
    bool _1785 = _1783.x == 0u;
    float _1887;
    float _1889;
    float _1891;
    if (_1785)
    {
        _1887 = _1777;
        _1889 = _1778;
        _1891 = _1779;
    }
    else
    {
        uint _1895 = _1707 + 6u;
        float _1911 = (dot(vec3(cbLight._m0[_1707 + 2u].xyz), vec3(_249, _250, _251)) * 0.5) + 0.5;
        float _1912 = _1911 * _1911;
        float _3777 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1914 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _1887 = (((cbLight._m0[_1895].x * 0.3183098733425140380859375) * _1913) * _1914) + _1777;
        _1889 = (((cbLight._m0[_1895].y * 0.3183098733425140380859375) * _1913) * _1914) + _1778;
        _1891 = (((cbLight._m0[_1895].z * 0.3183098733425140380859375) * _1913) * _1914) + _1779;
    }
    bool _1894 = _1783.y == 0u;
    float _1949;
    float _1951;
    float _1953;
    if (_1894)
    {
        _1949 = _1887;
        _1951 = _1889;
        _1953 = _1891;
    }
    else
    {
        uint _2057 = _1707 + 7u;
        float _2073 = (dot(vec3(cbLight._m0[_1707 + 3u].xyz), vec3(_249, _250, _251)) * 0.5) + 0.5;
        float _2074 = _2073 * _2073;
        float _3793 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
        float _2075 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _2076 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _1949 = (((cbLight._m0[_2057].x * 0.3183098733425140380859375) * _2075) * _2076) + _1887;
        _1951 = (((cbLight._m0[_2057].y * 0.3183098733425140380859375) * _2075) * _2076) + _1889;
        _1953 = (((cbLight._m0[_2057].z * 0.3183098733425140380859375) * _2075) * _2076) + _1891;
    }
    uint _1955 = _1707 + 8u;
    float _1961 = cbLight._m0[_1707].x + _317;
    float _1962 = cbLight._m0[_1707].y + _318;
    float _1963 = cbLight._m0[_1707].z + _319;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1971 = dot(vec3(_249, _250, _251), vec3(cbLight._m0[_1707].xyz));
    float _3809 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
    float _3820 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _1975 = isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1961 * _1967, _1962 * _1967, _1963 * _1967));
    float _3831 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1993 = (0.5 / ((_1974 + 9.9999999392252902907785028219223e-09) + _1975)) * _1974;
    float _3842 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
    float _1995 = (isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0))) * 0.31831014156341552734375;
    uint _2009 = _1707 + 9u;
    float _2015 = cbLight._m0[_1749].x + _317;
    float _2016 = cbLight._m0[_1749].y + _318;
    float _2017 = cbLight._m0[_1749].z + _319;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2025 = dot(vec3(_249, _250, _251), vec3(cbLight._m0[_1749].xyz));
    float _3853 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1749].xyz), vec3(_2015 * _2021, _2016 * _2021, _2017 * _2021));
    float _3864 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2038 = (exp2(log2(1.0 - (isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2042 = (0.5 / ((_2028 + 9.9999999392252902907785028219223e-09) + _1975)) * _2028;
    float _3875 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 0.31831014156341552734375;
    float _2054 = (((_2038 * cbLight._m0[_2009].x) * _2044) * _1731) + ((((cbLight._m0[_1955].x * _1696) * _1987) * _1995) * _1745);
    float _2055 = (((_2038 * cbLight._m0[_2009].y) * _2044) * _1731) + ((((cbLight._m0[_1955].y * _1698) * _1987) * _1995) * _1745);
    float _2056 = (((_2038 * cbLight._m0[_2009].z) * _2044) * _1731) + ((((cbLight._m0[_1955].z * _1700) * _1987) * _1995) * _1745);
    float _2112;
    float _2114;
    float _2116;
    if (_1785)
    {
        _2112 = _2054;
        _2114 = _2055;
        _2116 = _2056;
    }
    else
    {
        uint _2118 = _1707 + 10u;
        uint _2124 = _1707 + 2u;
        float _2130 = cbLight._m0[_2124].x + _317;
        float _2131 = cbLight._m0[_2124].y + _318;
        float _2132 = cbLight._m0[_2124].z + _319;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2140 = dot(vec3(_249, _250, _251), vec3(cbLight._m0[_2124].xyz));
        float _3886 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _2144 = dot(vec3(cbLight._m0[_2124].xyz), vec3(_2130 * _2136, _2131 * _2136, _2132 * _2136));
        float _3897 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2153 = (exp2(log2(1.0 - (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2157 = (0.5 / ((_2143 + 9.9999999392252902907785028219223e-09) + _1975)) * _2143;
        float _3908 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        float _2159 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.31831014156341552734375;
        float _2160 = isnan(1.0) ? _1723 : (isnan(_1723) ? 1.0 : min(_1723, 1.0));
        _2112 = (((_2153 * cbLight._m0[_2118].x) * _2159) * _2160) + _2054;
        _2114 = (((_2153 * cbLight._m0[_2118].y) * _2159) * _2160) + _2055;
        _2116 = (((_2153 * cbLight._m0[_2118].z) * _2159) * _2160) + _2056;
    }
    float _2191;
    float _2193;
    float _2195;
    if (_1894)
    {
        _2191 = _2112;
        _2193 = _2114;
        _2195 = _2116;
    }
    else
    {
        uint _2202 = _1707 + 11u;
        uint _2208 = _1707 + 3u;
        float _2214 = cbLight._m0[_2208].x + _317;
        float _2215 = cbLight._m0[_2208].y + _318;
        float _2216 = cbLight._m0[_2208].z + _319;
        float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
        float _2224 = dot(vec3(_249, _250, _251), vec3(cbLight._m0[_2208].xyz));
        float _3924 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
        float _2227 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _2228 = dot(vec3(cbLight._m0[_2208].xyz), vec3(_2214 * _2220, _2215 * _2220, _2216 * _2220));
        float _3935 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
        float _2237 = (exp2(log2(1.0 - (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2241 = (0.5 / ((_2227 + 9.9999999392252902907785028219223e-09) + _1975)) * _2227;
        float _3946 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
        float _2243 = (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))) * 0.31831014156341552734375;
        float _2244 = isnan(1.0) ? _1724 : (isnan(_1724) ? 1.0 : min(_1724, 1.0));
        _2191 = (((_2237 * cbLight._m0[_2202].x) * _2243) * _2244) + _2112;
        _2193 = (((_2237 * cbLight._m0[_2202].y) * _2243) * _2244) + _2114;
        _2195 = (((_2237 * cbLight._m0[_2202].z) * _2243) * _2244) + _2116;
    }
    float _2309;
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    if (_1705.y == 0u)
    {
        uvec4 _2265 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2266 = _2265.x;
        uint _2277 = uint((float(_2265.y) * floor(float(uint(cbSceneParam._m0[85u].y * _338) / _2266))) + floor(float(uint(cbSceneParam._m0[85u].x * _337) / _2266)));
        float _2287 = (log2(_1483 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2288 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        uint _2291 = uint(isnan(14.0) ? _2288 : (isnan(_2288) ? 14.0 : min(_2288, 14.0)));
        uvec4 _2296 = texelFetch(g_lightClusterGridBuffer, int(((_2291 << 2u) + (_2277 << 6u)) >> 2u));
        uint _2297 = _2296.x;
        uint _2298 = _2265.z;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((((1u << ((_2298 >> 4u) & 15u)) + 4294967295u) & _2297) == 0u) || ((_2298 & 240u) == 0u))
        {
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
        }
        else
        {
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            uint _2532 = 0u;
            uint _2541;
            bool _2542;
            for (;;)
            {
                _2541 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2532 << 2u)) >> 2u)).x;
                _2542 = _2541 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2542)
                {
                    frontier_phi_73_pred = _2531;
                    frontier_phi_73_pred_1 = _2530;
                    frontier_phi_73_pred_2 = _2529;
                    frontier_phi_73_pred_3 = _2528;
                    frontier_phi_73_pred_4 = _2527;
                    frontier_phi_73_pred_5 = _2526;
                }
                else
                {
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    float _2676;
                    uint _2677;
                    _2671 = _2526;
                    _2672 = _2527;
                    _2673 = _2528;
                    _2674 = _2529;
                    _2675 = _2530;
                    _2676 = _2531;
                    _2677 = _2541;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    for (;;)
                    {
                        uint _2681 = uint(findLSB(_2677)) + (_2532 << 5u);
                        uint _2678 = (_2677 + 4294967295u) & _2677;
                        uint _2683 = _2681 * 48u;
                        vec4 _2697 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2683)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2683 + 3u)).x));
                        uint _2703 = (_2681 * 48u) + 4u;
                        vec4 _2716 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2703)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2703 + 3u)).x));
                        uint _2722 = (_2681 * 48u) + 8u;
                        vec3 _2733 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2722)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2722 + 2u)).x));
                        float _2737 = _2697.x - _1481;
                        float _2738 = _2697.y - _1482;
                        float _2739 = _2697.z - _1483;
                        float _2740 = dot(vec3(_2737, _2738, _2739), vec3(_2737, _2738, _2739));
                        float _2743 = inversesqrt(_2740);
                        float _2752 = 1.0 - (_2740 * _2697.w);
                        float _3972 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2753 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2754 = sqrt(_2740) * _2716.w;
                        float _2757 = 1.39999997615814208984375 / (_2754 + 1.39999997615814208984375);
                        float _2758 = _2757 * _2757;
                        float _2761 = ((1.0 - _2758) * dot(vec3(_358, _361, _364), vec3(_2743 * _2737, _2743 * _2738, _2743 * _2739))) + _2758;
                        float _2764 = _2754 * _2754;
                        float _2768 = ((isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0))) * _2753) / ((_2764 * 0.699999988079071044921875) + 1.0);
                        float _2772 = (-0.0) - _1481;
                        float _2773 = (-0.0) - _1482;
                        float _2774 = (-0.0) - _1483;
                        float _2778 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
                        float _2782 = dot(vec3(_358, _361, _364), vec3(_2778 * _2772, _2778 * _2773, _2778 * _2774));
                        float _3988 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _3999 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
                        float _2786 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2790 = (0.5 / (((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) + 9.9999999392252902907785028219223e-09) + _2786)) * _2786;
                        float _4010 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2799 = (((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * 3.1415927410125732421875) / ((_2764 * 2.1991131305694580078125) + 3.141590118408203125)) * _2753;
                        _2601 = (_2768 * _2716.x) + _2674;
                        _2602 = (_2768 * _2716.y) + _2675;
                        _2603 = (_2768 * _2716.z) + _2676;
                        _2598 = (_2799 * _2733.x) + _2671;
                        _2599 = (_2799 * _2733.y) + _2672;
                        _2600 = (_2799 * _2733.z) + _2673;
                        if (_2678 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2671 = _2598;
                            _2672 = _2599;
                            _2673 = _2600;
                            _2674 = _2601;
                            _2675 = _2602;
                            _2676 = _2603;
                            _2677 = _2678;
                        }
                    }
                    frontier_phi_73_pred = _2603;
                    frontier_phi_73_pred_1 = _2602;
                    frontier_phi_73_pred_2 = _2601;
                    frontier_phi_73_pred_3 = _2600;
                    frontier_phi_73_pred_4 = _2599;
                    frontier_phi_73_pred_5 = _2598;
                }
                _2387 = frontier_phi_73_pred;
                _2385 = frontier_phi_73_pred_1;
                _2383 = frontier_phi_73_pred_2;
                _2381 = frontier_phi_73_pred_3;
                _2379 = frontier_phi_73_pred_4;
                _2377 = frontier_phi_73_pred_5;
                uint _2533 = _2532 + 1u;
                if (_2533 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2526 = _2377;
                    _2527 = _2379;
                    _2528 = _2381;
                    _2529 = _2383;
                    _2530 = _2385;
                    _2531 = _2387;
                    _2532 = _2533;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
        }
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.z;
        uint _2393 = (_2391 >> 8u) & 15u;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        float _2505;
        float _2507;
        if (((4294967295u << _2393) & _2297) == 0u)
        {
            _2497 = _2376;
            _2499 = _2378;
            _2501 = _2380;
            _2503 = _2382;
            _2505 = _2384;
            _2507 = _2386;
        }
        else
        {
            float _2522 = inversesqrt(dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2393 < ((_2391 >> 12u) & 15u))
            {
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2506;
                float _2508;
                float _2654 = _2376;
                float _2655 = _2378;
                float _2656 = _2380;
                float _2657 = _2382;
                float _2658 = _2384;
                float _2659 = _2386;
                uint _2660 = _2393;
                uint _2669;
                bool _2670;
                for (;;)
                {
                    _2669 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2660 << 2u)) >> 2u)).x;
                    _2670 = _2669 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2670)
                    {
                        frontier_phi_84_pred = _2658;
                        frontier_phi_84_pred_1 = _2657;
                        frontier_phi_84_pred_2 = _2656;
                        frontier_phi_84_pred_3 = _2655;
                        frontier_phi_84_pred_4 = _2654;
                        frontier_phi_84_pred_5 = _2659;
                    }
                    else
                    {
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _3069;
                        float _3070;
                        float _2826 = _2654;
                        float _2827 = _2655;
                        float _2828 = _2656;
                        float _2829 = _2657;
                        float _2830 = _2658;
                        float _2831 = _2659;
                        uint _2832 = _2669;
                        uint _2833;
                        vec4 _2858;
                        float _2859;
                        vec4 _2874;
                        vec3 _2886;
                        vec4 _2902;
                        vec4 _2918;
                        float _2965;
                        bool _2966;
                        for (;;)
                        {
                            uint _2843 = ((_2660 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2832));
                            _2833 = (_2832 + 4294967295u) & _2832;
                            uint _2845 = _2843 * 40u;
                            _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            _2859 = _2858.w;
                            uint _2861 = (_2843 * 40u) + 4u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            uint _2876 = (_2843 * 40u) + 8u;
                            _2886 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2876)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2876 + 2u)).x));
                            uint _2889 = (_2843 * 40u) + 16u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2905 = (_2843 * 40u) + 20u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2921 = (_2843 * 40u) + 24u;
                            vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2940 = (_2843 * 40u) + 28u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            _2965 = fma(_1483, _2953.z, fma(_1482, _2953.y, _2953.x * _1481)) + _2953.w;
                            _2966 = !((fma(_1483, _2934.z, fma(_1482, _2934.y, _2934.x * _1481)) + _2934.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_2966)
                            {
                                float _2993 = _2858.x - _1481;
                                float _2994 = _2858.y - _1482;
                                float _2995 = _2858.z - _1483;
                                float _2996 = dot(vec3(_2993, _2994, _2995), vec3(_2993, _2994, _2995));
                                float _2999 = inversesqrt(_2996);
                                float _3000 = _2999 * _2993;
                                float _3001 = _2999 * _2994;
                                float _3002 = _2999 * _2995;
                                float _3006 = 1.0 - (_2996 / (_2859 * _2859));
                                float _4021 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                                float _3011 = sqrt(_2996) * _2874.w;
                                float _3013 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                                float _3014 = _3013 * _3013;
                                float _3015 = 1.0 - _3014;
                                float _3017 = (_3015 * dot(vec3(_3000, _3001, _3002), vec3(_358, _361, _364))) + _3014;
                                float _3020 = _3011 * _3011;
                                float _3024 = (fma(_1483, _2902.z, fma(_1482, _2902.y, _2902.x * _1481)) + _2902.w) / _2965;
                                float _3025 = (fma(_1483, _2918.z, fma(_1482, _2918.y, _2918.x * _1481)) + _2918.w) / _2965;
                                float _3029 = 1.0 - dot(vec2(_3024, _3025), vec2(_3024, _3025));
                                float _4037 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _3031 = _3030 * (((isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0))) * _3007) / ((_3020 * 0.699999988079071044921875) + 1.0));
                                float _3041 = dot(vec3(_358, _361, _364), vec3((-0.0) - (_1481 * _2522), (-0.0) - (_1482 * _2522), (-0.0) - (_1483 * _2522)));
                                float _4048 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3049 = (_3015 * dot(vec3(_358, _361, _364), vec3(_3000, _3001, _3002))) + _3014;
                                float _4059 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3050 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3054 = (0.5 / (((isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) + 9.9999999392252902907785028219223e-09) + _3050)) * _3050;
                                float _4070 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3061 = (_3030 * _3007) * (((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * 3.1415927410125732421875) / ((_3020 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_90_pred = _3031 * _2874.y;
                                frontier_phi_90_pred_1 = _3031 * _2874.x;
                                frontier_phi_90_pred_2 = _3061 * _2886.z;
                                frontier_phi_90_pred_3 = _3061 * _2886.y;
                                frontier_phi_90_pred_4 = _3061 * _2886.x;
                                frontier_phi_90_pred_5 = _3031 * _2874.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3069 = frontier_phi_90_pred;
                            _3068 = frontier_phi_90_pred_1;
                            _3067 = frontier_phi_90_pred_2;
                            _3066 = frontier_phi_90_pred_3;
                            _3065 = frontier_phi_90_pred_4;
                            _3070 = frontier_phi_90_pred_5;
                            _2816 = _3068 + _2829;
                            _2817 = _3069 + _2830;
                            _2818 = _3070 + _2831;
                            _2813 = _3065 + _2826;
                            _2814 = _3066 + _2827;
                            _2815 = _3067 + _2828;
                            if (_2833 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2833;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _2817;
                        frontier_phi_84_pred_1 = _2816;
                        frontier_phi_84_pred_2 = _2815;
                        frontier_phi_84_pred_3 = _2814;
                        frontier_phi_84_pred_4 = _2813;
                        frontier_phi_84_pred_5 = _2818;
                    }
                    _2506 = frontier_phi_84_pred;
                    _2504 = frontier_phi_84_pred_1;
                    _2502 = frontier_phi_84_pred_2;
                    _2500 = frontier_phi_84_pred_3;
                    _2498 = frontier_phi_84_pred_4;
                    _2508 = frontier_phi_84_pred_5;
                    uint _2661 = _2660 + 1u;
                    if (_2661 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2654 = _2498;
                        _2655 = _2500;
                        _2656 = _2502;
                        _2657 = _2504;
                        _2658 = _2506;
                        _2659 = _2508;
                        _2660 = _2661;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2508;
                frontier_phi_65_66_ladder_1 = _2504;
                frontier_phi_65_66_ladder_2 = _2506;
                frontier_phi_65_66_ladder_3 = _2500;
                frontier_phi_65_66_ladder_4 = _2498;
                frontier_phi_65_66_ladder_5 = _2502;
            }
            else
            {
                frontier_phi_65_66_ladder = _2386;
                frontier_phi_65_66_ladder_1 = _2382;
                frontier_phi_65_66_ladder_2 = _2384;
                frontier_phi_65_66_ladder_3 = _2378;
                frontier_phi_65_66_ladder_4 = _2376;
                frontier_phi_65_66_ladder_5 = _2380;
            }
            _2497 = frontier_phi_65_66_ladder_4;
            _2499 = frontier_phi_65_66_ladder_3;
            _2501 = frontier_phi_65_66_ladder_5;
            _2503 = frontier_phi_65_66_ladder_1;
            _2505 = frontier_phi_65_66_ladder_2;
            _2507 = frontier_phi_65_66_ladder;
        }
        float _2512 = isnan(1.0) ? _403 : (isnan(_403) ? 1.0 : min(_403, 1.0));
        _2309 = (_2512 * _2503) + _1949;
        _2311 = (_2512 * _2505) + _1951;
        _2313 = (_2512 * _2507) + _1953;
        _2315 = ((_2497 * 0.039999999105930328369140625) * _2512) + _2191;
        _2317 = ((_2499 * 0.039999999105930328369140625) * _2512) + _2193;
        _2319 = ((_2501 * 0.039999999105930328369140625) * _2512) + _2195;
    }
    else
    {
        _2309 = _1949;
        _2311 = _1951;
        _2313 = _1953;
        _2315 = _2191;
        _2317 = _2193;
        _2319 = _2195;
    }
    float _4086 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _4097 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _4108 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    float _2336 = ((isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_2309 + ((isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0))) * _403))) + ((_2315 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    float _2337 = ((isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (_2311 + ((isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0))) * _403))) + ((_2317 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    float _2338 = ((isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0))) * (_2313 + ((isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))) * _403))) + ((_2319 + ((isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0))) * _1213)) * cbPerFrame._m0[3u].x);
    uint _2339 = _377 + 6u;
    float _2347 = _337 / cbSceneParam._m0[86u].x;
    float _2348 = _338 / cbSceneParam._m0[86u].y;
    vec4 _2362 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, (log2((isnan(cbSceneParam._m0[77u].w) ? _259 : (isnan(_259) ? cbSceneParam._m0[77u].w : min(_259, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2364 = _2362.x;
    float _2365 = _2362.y;
    float _2366 = _2362.z;
    float _2367 = _2362.w;
    float _2438;
    float _2440;
    float _2442;
    float _2444;
    if (_259 > cbSceneParam._m0[78u].w)
    {
        float _2401 = isnan(_259) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _259 : min(cbSceneParam._m0[80u].w, _259));
        float _2402 = _2401 / _259;
        float _2413 = _2402 * _310;
        float _2414 = _311 * _2402;
        float _2415 = (-0.0) - _2414;
        float _2416 = _2402 * _312;
        float _2418 = (cbSceneParam._m0[77u].w * _2415) / _2401;
        float _2419 = _2418 + cbSceneParam._m0[79u].w;
        float _2420 = cbSceneParam._m0[79u].w - _2414;
        float _2426 = sqrt(((_2413 * _2413) + (_2414 * _2414)) + (_2416 * _2416));
        float _2429 = (1.0 - (cbSceneParam._m0[77u].w / _2401)) * _2426;
        float _2434 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2436 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2611;
        if (abs((_2415 - _2418) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2611 = ((((_2419 > 0.0) ? exp2(_2434 * _2419) : (2.0 - exp2(_2436 * _2419))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2429;
        }
        else
        {
            float _2555 = 1.0 / cbSceneParam._m0[80u].x;
            float _2556 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : max(_2419, _2420));
            float _2557 = isnan(_2420) ? _2419 : (isnan(_2419) ? _2420 : min(_2419, _2420));
            float _2566 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : min(_2556, 0.0));
            float _2567 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : min(_2557, 0.0));
            _2611 = ((abs(_2426 / _2415) * cbSceneParam._m0[80u].y) * ((((_2566 - _2567) * 2.0) - ((exp2(_2434 * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0)))) - exp2(_2434 * (isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0))))) * _2555)) - ((exp2(_2436 * _2566) - exp2(_2436 * _2567)) * _2555))) + (_2429 * cbSceneParam._m0[80u].z);
        }
        vec4 _2613 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2347, _2348, 1.0), 0.0);
        float _2622 = exp2((_2611 * (-1.44269502162933349609375)) * (1.0 - _2613.w));
        float _2623 = log2(_2622);
        float _2639 = log2(_2367);
        _2438 = (exp2(_2639 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].x)) * _2613.x) / cbSceneParam._m0[78u].x)) + _2364;
        _2440 = (exp2(_2639 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].y)) * _2613.y) / cbSceneParam._m0[78u].y)) + _2365;
        _2442 = (exp2(_2639 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].z)) * _2613.z) / cbSceneParam._m0[78u].z)) + _2366;
        _2444 = _2622 * _2367;
    }
    else
    {
        _2438 = _2364;
        _2440 = _2365;
        _2442 = _2366;
        _2444 = _2367;
    }
    bool _2649;
    vec4 _2454;
    vec4 _2476;
    float _2478;
    float _2482;
    float _2483;
    float _2484;
    float _2485;
    bool _2496;
    for (;;)
    {
        _2454 = cbMatDynParam._m0[0u];
        float _2456 = roundEven(_2454.y);
        bool _2457 = _2456 == 3.0;
        float _2458 = log2(_2444);
        float _2465 = exp2(_2458 * cbSceneParam._m0[78u].x) * _2336;
        float _2466 = exp2(_2458 * cbSceneParam._m0[78u].y) * _2337;
        float _2467 = exp2(_2458 * cbSceneParam._m0[78u].z) * _2338;
        float _2474 = _326 + (-0.5);
        _2476 = cbMtdParam._m0[1u];
        _2478 = _2476.y * _2474;
        float _2481 = (_2456 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2482 = _2481 * (_2457 ? _2465 : (_2465 + (cbSceneParam._m0[72u].w * _2438)));
        _2483 = _2481 * (_2457 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2440)));
        _2484 = _2481 * (_2457 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2442)));
        _2485 = _2474 * 0.999000012874603271484375;
        _2496 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2496)
        {
            if ((cbInstanceData._m0[_377 + 7u].x + _2485) < 0.5)
            {
                _2649 = true;
                break;
            }
        }
        uint _2590 = _379 + uint(_2454.w);
        if ((cbInstanceData._m0[_2590].w < 1.0) && ((cbInstanceData._m0[_2590].w + _2485) < 0.5))
        {
            _2649 = true;
            break;
        }
        if ((_2478 + 1.0) < _2476.x)
        {
            _2649 = true;
            break;
        }
        _2649 = false;
        break;
    }
    float _2804;
    if (_2649)
    {
        discard_state = true;
        _2804 = 0.0;
    }
    else
    {
        _2804 = cbInstanceData._m0[_2339].w;
    }
    SV_Target.x = _2482;
    SV_Target.y = _2483;
    SV_Target.z = _2484;
    SV_Target.w = _2804;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2339].w;
    discard_exit();
}


