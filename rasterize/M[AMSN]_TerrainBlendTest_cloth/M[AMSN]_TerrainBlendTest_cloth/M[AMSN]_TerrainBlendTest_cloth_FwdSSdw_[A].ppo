#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _773;
float _2961;
float _2962;
float _2963;
float _2964;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _158 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _159 = _158 * NORMAL.x;
    float _160 = _158 * NORMAL.y;
    float _161 = _158 * NORMAL.z;
    float _166;
    float _167;
    float _168;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _166 = (-0.0) - _159;
        _167 = (-0.0) - _160;
        _168 = (-0.0) - _161;
    }
    else
    {
        _166 = _159;
        _167 = _160;
        _168 = _161;
    }
    vec4 _191 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _194 = _191.x;
    bool _201 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _221 = ((_201 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _194)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _194))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2973 = isnan(0.0) ? _221 : (isnan(_221) ? 0.0 : max(_221, 0.0));
    float _224 = 1.0 - (isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0)));
    float _2984 = isnan(0.0) ? _224 : (isnan(_224) ? 0.0 : max(_224, 0.0));
    float _225 = isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0));
    float _228 = 3.0 - (_225 * 2.0);
    float _233 = _225 * _225;
    float _240 = ((_233 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[10u].x)) * _228) + cbMtdParam._m0[10u].x;
    float _241 = ((_233 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[10u].y)) * _228) + cbMtdParam._m0[10u].y;
    float _242 = ((_233 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[10u].z)) * _228) + cbMtdParam._m0[10u].z;
    float _246 = inversesqrt(dot(vec3(_166, _167, _168), vec3(_166, _167, _168)));
    float _247 = _246 * _166;
    float _248 = _246 * _167;
    float _249 = _246 * _168;
    float _2995 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3006 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3017 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _257 = _201 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _298 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _308 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _298);
    float _309 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _298);
    float _310 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _298);
    float _314 = inversesqrt(dot(vec3(_308, _309, _310), vec3(_308, _309, _310)));
    float _315 = _308 * _314;
    float _316 = _309 * _314;
    float _317 = _310 * _314;
    vec4 _322 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _324 = _322.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _452 = sqrt(((_308 * _308) + (_309 * _309)) + (_310 * _310));
        float _458 = (cbMatDynParam._m0[5u].x * _452) + cbMatDynParam._m0[5u].y;
        float _3028 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
        float _459 = isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0));
        float _463 = (cbMatDynParam._m0[5u].z * _452) + cbMatDynParam._m0[5u].w;
        float _3039 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0))) - _459)) + _459) < ((_324 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _335 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _336 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _356 = fma(_249, cbSceneParam._m0[5u].z, fma(_248, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _247));
    float _359 = fma(_249, cbSceneParam._m0[6u].z, fma(_248, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _247));
    float _362 = fma(_249, cbSceneParam._m0[7u].z, fma(_248, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _247));
    uint _375 = uint(roundEven(NORMAL.w)) * 13u;
    uint _377 = _375 + 9u;
    uint _378 = _377 + uint(cbMatDynParam._m0[0u].w);
    float _384 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0)))) * cbInstanceData._m0[_378].x;
    float _385 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0)))) * cbInstanceData._m0[_378].y;
    float _386 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0)))) * cbInstanceData._m0[_378].z;
    float _3050 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0));
    float _3061 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _388 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
    float _3072 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _389 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
    vec4 _398 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _335, cbSceneParam._m0[86u].y * _336));
    float _401 = _398.x * TEXCOORD.z;
    float _402 = dot(vec3(_247, _248, _249), vec3(_315, _316, _317));
    float _405 = _402 * 2.0;
    float _409 = (_405 * _247) - _315;
    float _410 = (_405 * _248) - _316;
    float _411 = (_405 * _249) - _317;
    float _433 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _437 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _441 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _772;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    float _786;
    float _787;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _497 = fma(_441, cbModelParam._m0[26u].z, fma(_437, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _433));
        float _501 = fma(_441, cbModelParam._m0[27u].z, fma(_437, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _433));
        float _505 = fma(_441, cbModelParam._m0[28u].z, fma(_437, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _433));
        float _530 = _433 + _247;
        float _531 = _437 + _248;
        float _532 = _441 + _249;
        float _542 = fma(_532, cbModelParam._m0[26u].z, fma(_531, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _530)) - _497;
        float _543 = fma(_532, cbModelParam._m0[27u].z, fma(_531, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _530)) - _501;
        float _544 = fma(_532, cbModelParam._m0[28u].z, fma(_531, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _530)) - _505;
        float _548 = inversesqrt(dot(vec3(_542, _543, _544), vec3(_542, _543, _544)));
        float _561 = ((_548 * _542) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_497 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _562 = ((_548 * _543) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_501 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _563 = ((_548 * _544) / cbModelParam._m0[34u].z) + ((((((_505 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _566 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _573 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _580 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        vec4 _587 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_561, _562, _563), 0.0);
        float _600 = exp2((_566.w + (-0.5)) * 20.0) * 2.0;
        float _601 = _600 * (_566.x + (-0.5));
        float _602 = _600 * (_566.y + (-0.5));
        float _603 = _600 * (_566.z + (-0.5));
        float _610 = exp2((_573.w + (-0.5)) * 20.0) * 2.0;
        float _611 = _610 * (_573.x + (-0.5));
        float _612 = _610 * (_573.y + (-0.5));
        float _613 = _610 * (_573.z + (-0.5));
        float _620 = exp2((_580.w + (-0.5)) * 20.0) * 2.0;
        float _621 = _620 * (_580.x + (-0.5));
        float _622 = _620 * (_580.y + (-0.5));
        float _623 = _620 * (_580.z + (-0.5));
        float _630 = exp2((_587.w + (-0.5)) * 20.0) * 2.0;
        float _631 = _630 * (_587.x + (-0.5));
        float _632 = _630 * (_587.y + (-0.5));
        float _633 = _630 * (_587.z + (-0.5));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
        float _636 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
        float _637 = _601 * 0.5;
        float _638 = _611 * 0.5;
        float _639 = _621 * 0.5;
        float _640 = dot(vec3(_637, _638, _639), vec3(_637, _638, _639));
        float _645 = (_640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_640);
        float _654 = (dot(vec3(_247, _248, _249), vec3(_645 * _637, _645 * _638, _645 * _639)) + 1.0) * 0.5;
        float _3098 = isnan(0.0) ? _654 : (isnan(_654) ? 0.0 : max(_654, 0.0));
        float _664 = sqrt(((_638 * _638) + (_637 * _637)) + (_639 * _639)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3109 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
        float _665 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
        float _666 = _665 * 2.0;
        float _670 = (1.0 - _665) / (_665 + 1.0);
        float _3120 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _680 = ((((1.0 - _671) * (_666 + 2.0)) * exp2(log2(isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))) * (_666 + 1.0))) + _671) * _634;
        float _681 = _602 * 0.5;
        float _682 = _612 * 0.5;
        float _683 = _622 * 0.5;
        float _684 = dot(vec3(_681, _682, _683), vec3(_681, _682, _683));
        float _689 = (_684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_684);
        float _697 = (dot(vec3(_247, _248, _249), vec3(_689 * _681, _689 * _682, _689 * _683)) + 1.0) * 0.5;
        float _3131 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
        float _706 = sqrt(((_682 * _682) + (_681 * _681)) + (_683 * _683)) / (_635 + 9.9999997473787516355514526367188e-06);
        float _3142 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _707 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _708 = _707 * 2.0;
        float _712 = (1.0 - _707) / (_707 + 1.0);
        float _3153 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _713 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
        float _722 = ((((1.0 - _713) * (_708 + 2.0)) * exp2(log2(isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0))) * (_708 + 1.0))) + _713) * _635;
        float _723 = _603 * 0.5;
        float _724 = _613 * 0.5;
        float _725 = _623 * 0.5;
        float _726 = dot(vec3(_723, _724, _725), vec3(_723, _724, _725));
        float _731 = (_726 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_726);
        float _739 = (dot(vec3(_247, _248, _249), vec3(_731 * _723, _731 * _724, _731 * _725)) + 1.0) * 0.5;
        float _3164 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
        float _748 = sqrt(((_724 * _724) + (_723 * _723)) + (_725 * _725)) / (_636 + 9.9999997473787516355514526367188e-06);
        float _3175 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3186 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0))) * (_750 + 1.0))) + _755) * _636;
        _772 = _603;
        _774 = _602;
        _775 = _601;
        _776 = _613;
        _777 = _612;
        _778 = _611;
        _779 = _623;
        _780 = _622;
        _781 = _621;
        _782 = _636;
        _783 = _635;
        _784 = _634;
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0)));
        _786 = cbModelParam._m0[36u].z * (isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0)));
        _787 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
    }
    else
    {
        _772 = _773;
        _774 = _773;
        _775 = _773;
        _776 = _773;
        _777 = _773;
        _778 = _773;
        _779 = _773;
        _780 = _773;
        _781 = _773;
        _782 = _773;
        _783 = _773;
        _784 = _773;
        _785 = 0.0;
        _786 = 0.0;
        _787 = 0.0;
    }
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _816 = fma(_441, cbModelParam._m0[30u].z, fma(_437, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _433));
        float _820 = fma(_441, cbModelParam._m0[31u].z, fma(_437, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _433));
        float _824 = fma(_441, cbModelParam._m0[32u].z, fma(_437, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _433));
        float _847 = _433 + _247;
        float _848 = _437 + _248;
        float _849 = _441 + _249;
        float _859 = fma(_849, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _847)) - _816;
        float _860 = fma(_849, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _847)) - _820;
        float _861 = fma(_849, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _847)) - _824;
        float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
        float _878 = ((_865 * _859) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_816 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _879 = ((_865 * _860) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_820 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _880 = ((_865 * _861) / cbModelParam._m0[35u].z) + ((((((_824 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _896 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        vec4 _903 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_878, _879, _880), 0.0);
        float _915 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _916 = _915 * (_882.x + (-0.5));
        float _917 = _915 * (_882.y + (-0.5));
        float _918 = _915 * (_882.z + (-0.5));
        float _925 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _926 = _925 * (_889.x + (-0.5));
        float _927 = _925 * (_889.y + (-0.5));
        float _928 = _925 * (_889.z + (-0.5));
        float _935 = exp2((_896.w + (-0.5)) * 20.0) * 2.0;
        float _936 = _935 * (_896.x + (-0.5));
        float _937 = _935 * (_896.y + (-0.5));
        float _938 = _935 * (_896.z + (-0.5));
        float _945 = exp2((_903.w + (-0.5)) * 20.0) * 2.0;
        float _946 = _945 * (_903.x + (-0.5));
        float _947 = _945 * (_903.y + (-0.5));
        float _948 = _945 * (_903.z + (-0.5));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = _916 * 0.5;
        float _953 = _926 * 0.5;
        float _954 = _936 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_247, _248, _249), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3227 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3238 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3249 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0))) * (_979 + 1.0))) + _984) * _949;
        float _994 = _917 * 0.5;
        float _995 = _927 * 0.5;
        float _996 = _937 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_247, _248, _249), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3260 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_950 + 9.9999997473787516355514526367188e-06);
        float _3271 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3282 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) * (_1021 + 1.0))) + _1026) * _950;
        float _1036 = _918 * 0.5;
        float _1037 = _928 * 0.5;
        float _1038 = _938 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_247, _248, _249), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3293 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3304 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3315 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * (_1063 + 1.0))) + _1068) * _951;
        _1085 = _918;
        _1086 = _917;
        _1087 = _916;
        _1088 = _928;
        _1089 = _927;
        _1090 = _926;
        _1091 = _938;
        _1092 = _937;
        _1093 = _936;
        _1094 = _951;
        _1095 = _950;
        _1096 = _949;
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1098 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1099 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
    }
    else
    {
        _1085 = _773;
        _1086 = _773;
        _1087 = _773;
        _1088 = _773;
        _1089 = _773;
        _1090 = _773;
        _1091 = _773;
        _1092 = _773;
        _1093 = _773;
        _1094 = _773;
        _1095 = _773;
        _1096 = _773;
        _1097 = 0.0;
        _1098 = 0.0;
        _1099 = 0.0;
    }
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1110 = (cbModelParam._m0[1u].x * (_1098 - _786)) + _786;
    float _1111 = (cbModelParam._m0[1u].x * (_1099 - _787)) + _787;
    float _1132 = fma(_1111, cbSceneParam._m0[89u].z, fma(_1110, cbSceneParam._m0[89u].y, _1109 * cbSceneParam._m0[89u].x));
    float _1135 = fma(_1111, cbSceneParam._m0[90u].z, fma(_1110, cbSceneParam._m0[90u].y, _1109 * cbSceneParam._m0[90u].x));
    float _1138 = fma(_1111, cbSceneParam._m0[91u].z, fma(_1110, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1109));
    float _1153 = _409 * 0.5;
    float _1154 = _410 * 0.5;
    float _1155 = _411 * 0.5;
    float _1156 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1087, _1090, _1093, _1096));
    float _1159 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1086, _1089, _1092, _1095));
    float _1162 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1196;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1169 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_772, _776, _779, _782));
        float _1173 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_774, _777, _780, _783));
        float _1177 = dot(vec4(_1153, _1154, _1155, 1.0), vec4(_775, _778, _781, _784));
        float _1184 = dot(vec4(cbModelParam._m0[39u]), vec4(_1153, _1154, _1155, 1.0));
        _1196 = dot(vec3(isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)), isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)), isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1184) ? 0.0 : (isnan(0.0) ? _1184 : max(0.0, _1184))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1196 = 1.0;
    }
    float _1207;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1198 = dot(vec4(cbModelParam._m0[40u]), vec4(_1153, _1154, _1155, 1.0));
        _1207 = dot(vec3(isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)), isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0)), isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1198) ? 0.0 : (isnan(0.0) ? _1198 : max(0.0, _1198))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1207 = 1.0;
    }
    float _1211 = (_1207 * cbModelParam._m0[1u].x) + (_1196 * (1.0 - cbModelParam._m0[1u].x));
    float _1221 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1303;
    float _1305;
    float _1307;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1270 = fma(_441, cbModelParam._m0[13u].z, fma(_437, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _433)) + cbModelParam._m0[13u].w;
        float _1274 = fma(_441, cbModelParam._m0[14u].z, fma(_437, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _433)) + cbModelParam._m0[14u].w;
        float _1278 = fma(_441, cbModelParam._m0[15u].z, fma(_437, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _433)) + cbModelParam._m0[15u].w;
        float _1281 = fma(_411, cbModelParam._m0[13u].z, fma(_410, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _409));
        float _1284 = fma(_411, cbModelParam._m0[14u].z, fma(_410, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _409));
        float _1287 = fma(_411, cbModelParam._m0[15u].z, fma(_410, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _409));
        float _1313;
        if (_1281 > 0.0)
        {
            _1313 = abs((1.0 - _1270) / _1281);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1281 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1270 + 1.0) / _1281);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1313 = frontier_phi_19_17_ladder;
        }
        float _1541;
        if (_1284 > 0.0)
        {
            _1541 = abs((1.0 - _1274) / _1284);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1284 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1274 + 1.0) / _1284);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1541 = frontier_phi_28_24_ladder;
        }
        float _1733;
        if (_1287 > 0.0)
        {
            _1733 = abs((1.0 - _1278) / _1287);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1287 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1278 + 1.0) / _1287);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1733 = frontier_phi_40_35_ladder;
        }
        float _1735 = isnan(_1541) ? _1313 : (isnan(_1313) ? _1541 : min(_1313, _1541));
        float _1736 = isnan(_1733) ? _1735 : (isnan(_1735) ? _1733 : min(_1735, _1733));
        float _1740 = (_1736 * _1281) + _1270;
        float _1741 = (_1736 * _1284) + _1274;
        float _1742 = (_1736 * _1287) + _1278;
        float _1743 = _1736 * 9.9999997473787516355514526367188e-05;
        float _1745 = (-1.0) - _1743;
        float _1747 = _1743 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1742 > _1747) || ((_1742 < _1745) || ((_1741 > _1747) || ((_1741 < _1745) || ((_1740 < _1745) || (_1740 > _1747))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1839 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1742, cbModelParam._m0[9u].z, fma(_1741, cbModelParam._m0[9u].y, _1740 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1742, cbModelParam._m0[10u].z, fma(_1741, cbModelParam._m0[10u].y, _1740 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1742, cbModelParam._m0[11u].z, fma(_1741, cbModelParam._m0[11u].y, _1740 * cbModelParam._m0[11u].x))), _1221);
            frontier_phi_18_40_ladder = _1839.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1839.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1839.x * cbModelParam._m0[1u].y;
        }
        _1303 = frontier_phi_18_40_ladder_2;
        _1305 = frontier_phi_18_40_ladder_1;
        _1307 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_409, _410, _411), _1221);
        _1303 = _1291.x * cbModelParam._m0[1u].y;
        _1305 = _1291.y * cbModelParam._m0[1u].y;
        _1307 = _1291.z * cbModelParam._m0[1u].y;
    }
    float _1310 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1403;
    float _1405;
    float _1407;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1367 = fma(_441, cbModelParam._m0[21u].z, fma(_437, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _433)) + cbModelParam._m0[21u].w;
        float _1371 = fma(_441, cbModelParam._m0[22u].z, fma(_437, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _433)) + cbModelParam._m0[22u].w;
        float _1375 = fma(_441, cbModelParam._m0[23u].z, fma(_437, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _433)) + cbModelParam._m0[23u].w;
        float _1378 = fma(_411, cbModelParam._m0[21u].z, fma(_410, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _409));
        float _1381 = fma(_411, cbModelParam._m0[22u].z, fma(_410, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _409));
        float _1384 = fma(_411, cbModelParam._m0[23u].z, fma(_410, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _409));
        float _1546;
        if (_1378 > 0.0)
        {
            _1546 = abs((1.0 - _1367) / _1378);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1367 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1546 = frontier_phi_30_26_ladder;
        }
        float _1760;
        if (_1381 > 0.0)
        {
            _1760 = abs((1.0 - _1371) / _1381);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1381 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1371 + 1.0) / _1381);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1760 = frontier_phi_42_37_ladder;
        }
        float _1911;
        if (_1384 > 0.0)
        {
            _1911 = abs((1.0 - _1375) / _1384);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1375 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1911 = frontier_phi_51_48_ladder;
        }
        float _1913 = isnan(_1760) ? _1546 : (isnan(_1546) ? _1760 : min(_1546, _1760));
        float _1914 = isnan(_1911) ? _1913 : (isnan(_1913) ? _1911 : min(_1913, _1911));
        float _1918 = (_1914 * _1378) + _1367;
        float _1919 = (_1914 * _1381) + _1371;
        float _1920 = (_1914 * _1384) + _1375;
        float _1921 = _1914 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1921;
        float _1924 = _1921 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1920 > _1924) || ((_1920 < _1922) || ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 < _1922) || (_1918 > _1924))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2118 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1920, cbModelParam._m0[17u].z, fma(_1919, cbModelParam._m0[17u].y, _1918 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1920, cbModelParam._m0[18u].z, fma(_1919, cbModelParam._m0[18u].y, _1918 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1920, cbModelParam._m0[19u].z, fma(_1919, cbModelParam._m0[19u].y, _1918 * cbModelParam._m0[19u].x))), _1310);
            frontier_phi_27_51_ladder = _2118.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2118.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2118.x * cbModelParam._m0[1u].z;
        }
        _1403 = frontier_phi_27_51_ladder_2;
        _1405 = frontier_phi_27_51_ladder_1;
        _1407 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1387 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_409, _410, _411), _1310);
        _1403 = _1387.x * cbModelParam._m0[1u].z;
        _1405 = _1387.y * cbModelParam._m0[1u].z;
        _1407 = _1387.z * cbModelParam._m0[1u].z;
    }
    float _1419 = _401 * 0.01200000010430812835693359375;
    float _1421 = _1419 * ((cbModelParam._m0[1u].w * (_1403 - _1303)) + _1303);
    float _1422 = _1419 * ((cbModelParam._m0[1u].w * (_1405 - _1305)) + _1305);
    float _1423 = _1419 * ((cbModelParam._m0[1u].w * (_1407 - _1307)) + _1307);
    float _1426 = fma(_1423, cbSceneParam._m0[89u].z, fma(_1422, cbSceneParam._m0[89u].y, _1421 * cbSceneParam._m0[89u].x));
    float _1429 = fma(_1423, cbSceneParam._m0[90u].z, fma(_1422, cbSceneParam._m0[90u].y, _1421 * cbSceneParam._m0[90u].x));
    float _1432 = fma(_1423, cbSceneParam._m0[91u].z, fma(_1422, cbSceneParam._m0[91u].y, _1421 * cbSceneParam._m0[91u].x));
    vec4 _1440 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_335, _336));
    float _1442 = _1440.w;
    float _1454 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1442);
    float _1455 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1442);
    float _1456 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1442);
    uvec4 _1460 = floatBitsToUint(cbInstanceData._m0[_375 + 5u]);
    uint _1462 = _1460.x * 14u;
    uint _1463 = _1462 + 13u;
    float _1470 = _401 + (-1.0);
    float _1476 = (cbLight._m0[_1463].x * _1470) + 1.0;
    float _1477 = (cbLight._m0[_1463].y * _1470) + 1.0;
    float _1478 = (cbLight._m0[_1463].z * _1470) + 1.0;
    float _1479 = (cbLight._m0[_1463].w * _1470) + 1.0;
    uint _1480 = _1462 + 5u;
    float _1486 = isnan(1.0) ? _1477 : (isnan(_1477) ? 1.0 : min(_1477, 1.0));
    uint _1490 = _1462 + 4u;
    float _1500 = isnan(1.0) ? _1476 : (isnan(_1476) ? 1.0 : min(_1476, 1.0));
    uint _1504 = _1462 | 1u;
    float _1515 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_247, _248, _249));
    float _1518 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_247, _248, _249));
    float _3451 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
    float _3462 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
    float _1523 = (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * 0.3183098733425140380859375;
    float _1525 = (isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * 0.3183098733425140380859375;
    float _1532 = ((cbLight._m0[_1480].x * _1486) * _1525) + (((cbLight._m0[_1490].x * _1454) * _1500) * _1523);
    float _1533 = ((_1486 * cbLight._m0[_1480].y) * _1525) + (((cbLight._m0[_1490].y * _1455) * _1500) * _1523);
    float _1534 = ((_1486 * cbLight._m0[_1480].z) * _1525) + (((cbLight._m0[_1490].z * _1456) * _1500) * _1523);
    uvec4 _1538 = floatBitsToUint(cbLight._m0[_1462 + 12u]);
    bool _1540 = _1538.x == 0u;
    float _1551;
    float _1553;
    float _1555;
    if (_1540)
    {
        _1551 = _1532;
        _1553 = _1533;
        _1555 = _1534;
    }
    else
    {
        uint _1559 = _1462 + 6u;
        float _1575 = (dot(vec3(cbLight._m0[_1462 + 2u].xyz), vec3(_247, _248, _249)) * 0.5) + 0.5;
        float _1576 = _1575 * _1575;
        float _3473 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1577 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1578 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1551 = (((cbLight._m0[_1559].x * 0.3183098733425140380859375) * _1577) * _1578) + _1532;
        _1553 = (((cbLight._m0[_1559].y * 0.3183098733425140380859375) * _1577) * _1578) + _1533;
        _1555 = (((cbLight._m0[_1559].z * 0.3183098733425140380859375) * _1577) * _1578) + _1534;
    }
    bool _1558 = _1538.y == 0u;
    float _1596;
    float _1598;
    float _1600;
    if (_1558)
    {
        _1596 = _1551;
        _1598 = _1553;
        _1600 = _1555;
    }
    else
    {
        uint _1704 = _1462 + 7u;
        float _1720 = (dot(vec3(cbLight._m0[_1462 + 3u].xyz), vec3(_247, _248, _249)) * 0.5) + 0.5;
        float _1721 = _1720 * _1720;
        float _3489 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
        float _1722 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1723 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
        _1596 = (((cbLight._m0[_1704].x * 0.3183098733425140380859375) * _1722) * _1723) + _1551;
        _1598 = (((cbLight._m0[_1704].y * 0.3183098733425140380859375) * _1722) * _1723) + _1553;
        _1600 = (((cbLight._m0[_1704].z * 0.3183098733425140380859375) * _1722) * _1723) + _1555;
    }
    uint _1602 = _1462 + 8u;
    float _1608 = cbLight._m0[_1462].x + _315;
    float _1609 = cbLight._m0[_1462].y + _316;
    float _1610 = cbLight._m0[_1462].z + _317;
    float _1614 = inversesqrt(dot(vec3(_1608, _1609, _1610), vec3(_1608, _1609, _1610)));
    float _1618 = dot(vec3(_247, _248, _249), vec3(cbLight._m0[_1462].xyz));
    float _3505 = isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0));
    float _1621 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _3516 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _1622 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _1623 = dot(vec3(cbLight._m0[_1462].xyz), vec3(_1608 * _1614, _1609 * _1614, _1610 * _1614));
    float _3527 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1634 = (exp2(log2(1.0 - (isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1640 = (0.5 / ((_1621 + 9.9999999392252902907785028219223e-09) + _1622)) * _1621;
    float _3538 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1642 = (isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * 0.31831014156341552734375;
    uint _1656 = _1462 + 9u;
    float _1662 = cbLight._m0[_1504].x + _315;
    float _1663 = cbLight._m0[_1504].y + _316;
    float _1664 = cbLight._m0[_1504].z + _317;
    float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
    float _1672 = dot(vec3(_247, _248, _249), vec3(cbLight._m0[_1504].xyz));
    float _3549 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1675 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _1676 = dot(vec3(cbLight._m0[_1504].xyz), vec3(_1662 * _1668, _1663 * _1668, _1664 * _1668));
    float _3560 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1685 = (exp2(log2(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1689 = (0.5 / ((_1675 + 9.9999999392252902907785028219223e-09) + _1622)) * _1675;
    float _3571 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1691 = (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.31831014156341552734375;
    float _1701 = (((_1685 * cbLight._m0[_1656].x) * _1691) * _1486) + ((((cbLight._m0[_1602].x * _1454) * _1634) * _1642) * _1500);
    float _1702 = (((_1685 * cbLight._m0[_1656].y) * _1691) * _1486) + ((((cbLight._m0[_1602].y * _1455) * _1634) * _1642) * _1500);
    float _1703 = (((_1685 * cbLight._m0[_1656].z) * _1691) * _1486) + ((((cbLight._m0[_1602].z * _1456) * _1634) * _1642) * _1500);
    float _1765;
    float _1767;
    float _1769;
    if (_1540)
    {
        _1765 = _1701;
        _1767 = _1702;
        _1769 = _1703;
    }
    else
    {
        uint _1771 = _1462 + 10u;
        uint _1777 = _1462 + 2u;
        float _1783 = cbLight._m0[_1777].x + _315;
        float _1784 = cbLight._m0[_1777].y + _316;
        float _1785 = cbLight._m0[_1777].z + _317;
        float _1789 = inversesqrt(dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785)));
        float _1793 = dot(vec3(_247, _248, _249), vec3(cbLight._m0[_1777].xyz));
        float _3582 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1796 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1797 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1783 * _1789, _1784 * _1789, _1785 * _1789));
        float _3593 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = (exp2(log2(1.0 - (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1810 = (0.5 / ((_1796 + 9.9999999392252902907785028219223e-09) + _1622)) * _1796;
        float _3604 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1812 = (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * 0.31831014156341552734375;
        float _1813 = isnan(1.0) ? _1478 : (isnan(_1478) ? 1.0 : min(_1478, 1.0));
        _1765 = (((_1806 * cbLight._m0[_1771].x) * _1812) * _1813) + _1701;
        _1767 = (((_1806 * cbLight._m0[_1771].y) * _1812) * _1813) + _1702;
        _1769 = (((_1806 * cbLight._m0[_1771].z) * _1812) * _1813) + _1703;
    }
    float _1848;
    float _1850;
    float _1852;
    if (_1558)
    {
        _1848 = _1765;
        _1850 = _1767;
        _1852 = _1769;
    }
    else
    {
        uint _1859 = _1462 + 11u;
        uint _1865 = _1462 + 3u;
        float _1871 = cbLight._m0[_1865].x + _315;
        float _1872 = cbLight._m0[_1865].y + _316;
        float _1873 = cbLight._m0[_1865].z + _317;
        float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
        float _1881 = dot(vec3(_247, _248, _249), vec3(cbLight._m0[_1865].xyz));
        float _3620 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1884 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1885 = dot(vec3(cbLight._m0[_1865].xyz), vec3(_1871 * _1877, _1872 * _1877, _1873 * _1877));
        float _3631 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = (exp2(log2(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1898 = (0.5 / ((_1884 + 9.9999999392252902907785028219223e-09) + _1622)) * _1884;
        float _3642 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1900 = (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.31831014156341552734375;
        float _1901 = isnan(1.0) ? _1479 : (isnan(_1479) ? 1.0 : min(_1479, 1.0));
        _1848 = (((_1894 * cbLight._m0[_1859].x) * _1900) * _1901) + _1765;
        _1850 = (((_1894 * cbLight._m0[_1859].y) * _1900) * _1901) + _1767;
        _1852 = (((_1894 * cbLight._m0[_1859].z) * _1900) * _1901) + _1769;
    }
    float _2035;
    float _2037;
    float _2039;
    float _2041;
    float _2043;
    float _2045;
    if (_1460.y == 0u)
    {
        float _1976 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1976;
        float _1978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1976;
        float _1979 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1976;
        uvec4 _1991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1992 = _1991.x;
        uint _2003 = uint((float(_1991.y) * floor(float(uint(cbSceneParam._m0[85u].y * _336) / _1992))) + floor(float(uint(cbSceneParam._m0[85u].x * _335) / _1992)));
        float _2013 = (log2(_1979 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2014 = isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0));
        uint _2017 = uint(isnan(14.0) ? _2014 : (isnan(_2014) ? 14.0 : min(_2014, 14.0)));
        uvec4 _2022 = texelFetch(g_lightClusterGridBuffer, int(((_2017 << 2u) + (_2003 << 6u)) >> 2u));
        uint _2023 = _2022.x;
        uint _2024 = _1991.z;
        float _2123;
        float _2125;
        float _2127;
        float _2129;
        float _2131;
        float _2133;
        if (((((1u << ((_2024 >> 4u) & 15u)) + 4294967295u) & _2023) == 0u) || ((_2024 & 240u) == 0u))
        {
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
            _2131 = 0.0;
            _2133 = 0.0;
        }
        else
        {
            float _2124;
            float _2126;
            float _2128;
            float _2130;
            float _2132;
            float _2134;
            float _2273 = 0.0;
            float _2274 = 0.0;
            float _2275 = 0.0;
            float _2276 = 0.0;
            float _2277 = 0.0;
            float _2278 = 0.0;
            uint _2279 = 0u;
            uint _2288;
            bool _2289;
            for (;;)
            {
                _2288 = texelFetch(g_lightClassification, int((((_2017 << 5u) + (_2003 << 9u)) + (_2279 << 2u)) >> 2u)).x;
                _2289 = _2288 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2289)
                {
                    frontier_phi_68_pred = _2275;
                    frontier_phi_68_pred_1 = _2278;
                    frontier_phi_68_pred_2 = _2277;
                    frontier_phi_68_pred_3 = _2276;
                    frontier_phi_68_pred_4 = _2274;
                    frontier_phi_68_pred_5 = _2273;
                }
                else
                {
                    float _2418;
                    float _2419;
                    float _2420;
                    float _2421;
                    float _2422;
                    float _2423;
                    uint _2424;
                    _2418 = _2273;
                    _2419 = _2274;
                    _2420 = _2275;
                    _2421 = _2276;
                    _2422 = _2277;
                    _2423 = _2278;
                    _2424 = _2288;
                    float _2345;
                    float _2346;
                    float _2347;
                    float _2348;
                    float _2349;
                    float _2350;
                    for (;;)
                    {
                        uint _2428 = uint(findLSB(_2424)) + (_2279 << 5u);
                        uint _2425 = (_2424 + 4294967295u) & _2424;
                        uint _2430 = _2428 * 48u;
                        vec4 _2444 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2430)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2430 + 3u)).x));
                        uint _2450 = (_2428 * 48u) + 4u;
                        vec4 _2463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2450)).x, texelFetch(g_PointLightRenderingBuffer, int(_2450 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2450 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2450 + 3u)).x));
                        uint _2469 = (_2428 * 48u) + 8u;
                        vec3 _2480 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2469)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2469 + 2u)).x));
                        float _2484 = _2444.x - _1977;
                        float _2485 = _2444.y - _1978;
                        float _2486 = _2444.z - _1979;
                        float _2487 = dot(vec3(_2484, _2485, _2486), vec3(_2484, _2485, _2486));
                        float _2490 = inversesqrt(_2487);
                        float _2499 = 1.0 - (_2487 * _2444.w);
                        float _3668 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _2500 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
                        float _2501 = sqrt(_2487) * _2463.w;
                        float _2504 = 1.39999997615814208984375 / (_2501 + 1.39999997615814208984375);
                        float _2505 = _2504 * _2504;
                        float _2508 = ((1.0 - _2505) * dot(vec3(_356, _359, _362), vec3(_2490 * _2484, _2490 * _2485, _2490 * _2486))) + _2505;
                        float _2511 = _2501 * _2501;
                        float _2515 = ((isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0))) * _2500) / ((_2511 * 0.699999988079071044921875) + 1.0);
                        float _2519 = (-0.0) - _1977;
                        float _2520 = (-0.0) - _1978;
                        float _2521 = (-0.0) - _1979;
                        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
                        float _2529 = dot(vec3(_356, _359, _362), vec3(_2525 * _2519, _2525 * _2520, _2525 * _2521));
                        float _3684 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
                        float _3695 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
                        float _2533 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
                        float _2537 = (0.5 / (((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) + 9.9999999392252902907785028219223e-09) + _2533)) * _2533;
                        float _3706 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
                        float _2546 = (((isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * 3.1415927410125732421875) / ((_2511 * 2.1991131305694580078125) + 3.141590118408203125)) * _2500;
                        _2348 = (_2515 * _2463.x) + _2421;
                        _2349 = (_2515 * _2463.y) + _2422;
                        _2350 = (_2515 * _2463.z) + _2423;
                        _2345 = (_2546 * _2480.x) + _2418;
                        _2346 = (_2546 * _2480.y) + _2419;
                        _2347 = (_2546 * _2480.z) + _2420;
                        if (_2425 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2418 = _2345;
                            _2419 = _2346;
                            _2420 = _2347;
                            _2421 = _2348;
                            _2422 = _2349;
                            _2423 = _2350;
                            _2424 = _2425;
                        }
                    }
                    frontier_phi_68_pred = _2347;
                    frontier_phi_68_pred_1 = _2350;
                    frontier_phi_68_pred_2 = _2349;
                    frontier_phi_68_pred_3 = _2348;
                    frontier_phi_68_pred_4 = _2346;
                    frontier_phi_68_pred_5 = _2345;
                }
                _2128 = frontier_phi_68_pred;
                _2134 = frontier_phi_68_pred_1;
                _2132 = frontier_phi_68_pred_2;
                _2130 = frontier_phi_68_pred_3;
                _2126 = frontier_phi_68_pred_4;
                _2124 = frontier_phi_68_pred_5;
                uint _2280 = _2279 + 1u;
                if (_2280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2273 = _2124;
                    _2274 = _2126;
                    _2275 = _2128;
                    _2276 = _2130;
                    _2277 = _2132;
                    _2278 = _2134;
                    _2279 = _2280;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
            _2131 = _2132;
            _2133 = _2134;
        }
        uvec4 _2137 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2138 = _2137.z;
        uint _2140 = (_2138 >> 8u) & 15u;
        float _2244;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        float _2254;
        if (((4294967295u << _2140) & _2023) == 0u)
        {
            _2244 = _2123;
            _2246 = _2125;
            _2248 = _2127;
            _2250 = _2129;
            _2252 = _2131;
            _2254 = _2133;
        }
        else
        {
            float _2269 = inversesqrt(dot(vec3(_1977, _1978, _1979), vec3(_1977, _1978, _1979)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2140 < ((_2138 >> 12u) & 15u))
            {
                float _2245;
                float _2247;
                float _2249;
                float _2251;
                float _2253;
                float _2255;
                float _2401 = _2123;
                float _2402 = _2125;
                float _2403 = _2127;
                float _2404 = _2129;
                float _2405 = _2131;
                float _2406 = _2133;
                uint _2407 = _2140;
                uint _2416;
                bool _2417;
                for (;;)
                {
                    _2416 = texelFetch(g_lightClassification, int((((_2017 << 5u) + (_2003 << 9u)) + (_2407 << 2u)) >> 2u)).x;
                    _2417 = _2416 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2417)
                    {
                        frontier_phi_79_pred = _2406;
                        frontier_phi_79_pred_1 = _2405;
                        frontier_phi_79_pred_2 = _2404;
                        frontier_phi_79_pred_3 = _2403;
                        frontier_phi_79_pred_4 = _2402;
                        frontier_phi_79_pred_5 = _2401;
                    }
                    else
                    {
                        float _2560;
                        float _2561;
                        float _2562;
                        float _2563;
                        float _2564;
                        float _2565;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2573 = _2401;
                        float _2574 = _2402;
                        float _2575 = _2403;
                        float _2576 = _2404;
                        float _2577 = _2405;
                        float _2578 = _2406;
                        uint _2579 = _2416;
                        uint _2580;
                        vec4 _2605;
                        float _2606;
                        vec4 _2621;
                        vec3 _2633;
                        vec4 _2649;
                        vec4 _2665;
                        float _2712;
                        bool _2713;
                        for (;;)
                        {
                            uint _2590 = ((_2407 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2579));
                            _2580 = (_2579 + 4294967295u) & _2579;
                            uint _2592 = _2590 * 40u;
                            _2605 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2592)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2592 + 3u)).x));
                            _2606 = _2605.w;
                            uint _2608 = (_2590 * 40u) + 4u;
                            _2621 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2608 + 3u)).x));
                            uint _2623 = (_2590 * 40u) + 8u;
                            _2633 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2623 + 2u)).x));
                            uint _2636 = (_2590 * 40u) + 16u;
                            _2649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 3u)).x));
                            uint _2652 = (_2590 * 40u) + 20u;
                            _2665 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2652)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2652 + 3u)).x));
                            uint _2668 = (_2590 * 40u) + 24u;
                            vec4 _2681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2668 + 3u)).x));
                            uint _2687 = (_2590 * 40u) + 28u;
                            vec4 _2700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2687 + 3u)).x));
                            _2712 = fma(_1979, _2700.z, fma(_1978, _2700.y, _2700.x * _1977)) + _2700.w;
                            _2713 = !((fma(_1979, _2681.z, fma(_1978, _2681.y, _2681.x * _1977)) + _2681.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2713)
                            {
                                float _2740 = _2605.x - _1977;
                                float _2741 = _2605.y - _1978;
                                float _2742 = _2605.z - _1979;
                                float _2743 = dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742));
                                float _2746 = inversesqrt(_2743);
                                float _2747 = _2746 * _2740;
                                float _2748 = _2746 * _2741;
                                float _2749 = _2746 * _2742;
                                float _2753 = 1.0 - (_2743 / (_2606 * _2606));
                                float _3717 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                                float _2754 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
                                float _2758 = sqrt(_2743) * _2621.w;
                                float _2760 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                                float _2761 = _2760 * _2760;
                                float _2762 = 1.0 - _2761;
                                float _2764 = (_2762 * dot(vec3(_2747, _2748, _2749), vec3(_356, _359, _362))) + _2761;
                                float _2767 = _2758 * _2758;
                                float _2771 = (fma(_1979, _2649.z, fma(_1978, _2649.y, _2649.x * _1977)) + _2649.w) / _2712;
                                float _2772 = (fma(_1979, _2665.z, fma(_1978, _2665.y, _2665.x * _1977)) + _2665.w) / _2712;
                                float _2776 = 1.0 - dot(vec2(_2771, _2772), vec2(_2771, _2772));
                                float _3733 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                                float _2777 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
                                float _2778 = _2777 * (((isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0))) * _2754) / ((_2767 * 0.699999988079071044921875) + 1.0));
                                float _2788 = dot(vec3(_356, _359, _362), vec3((-0.0) - (_1977 * _2269), (-0.0) - (_1978 * _2269), (-0.0) - (_1979 * _2269)));
                                float _3744 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                                float _2796 = (_2762 * dot(vec3(_356, _359, _362), vec3(_2747, _2748, _2749))) + _2761;
                                float _3755 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                                float _2797 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
                                float _2801 = (0.5 / (((isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))) + 9.9999999392252902907785028219223e-09) + _2797)) * _2797;
                                float _3766 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                                float _2808 = (_2777 * _2754) * (((isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0))) * 3.1415927410125732421875) / ((_2767 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2778 * _2621.z;
                                frontier_phi_85_pred_1 = _2778 * _2621.y;
                                frontier_phi_85_pred_2 = _2778 * _2621.x;
                                frontier_phi_85_pred_3 = _2808 * _2633.z;
                                frontier_phi_85_pred_4 = _2808 * _2633.y;
                                frontier_phi_85_pred_5 = _2808 * _2633.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2817 = frontier_phi_85_pred;
                            _2816 = frontier_phi_85_pred_1;
                            _2815 = frontier_phi_85_pred_2;
                            _2814 = frontier_phi_85_pred_3;
                            _2813 = frontier_phi_85_pred_4;
                            _2812 = frontier_phi_85_pred_5;
                            _2563 = _2815 + _2576;
                            _2564 = _2816 + _2577;
                            _2565 = _2817 + _2578;
                            _2560 = _2812 + _2573;
                            _2561 = _2813 + _2574;
                            _2562 = _2814 + _2575;
                            if (_2580 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2573 = _2560;
                                _2574 = _2561;
                                _2575 = _2562;
                                _2576 = _2563;
                                _2577 = _2564;
                                _2578 = _2565;
                                _2579 = _2580;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2565;
                        frontier_phi_79_pred_1 = _2564;
                        frontier_phi_79_pred_2 = _2563;
                        frontier_phi_79_pred_3 = _2562;
                        frontier_phi_79_pred_4 = _2561;
                        frontier_phi_79_pred_5 = _2560;
                    }
                    _2255 = frontier_phi_79_pred;
                    _2253 = frontier_phi_79_pred_1;
                    _2251 = frontier_phi_79_pred_2;
                    _2249 = frontier_phi_79_pred_3;
                    _2247 = frontier_phi_79_pred_4;
                    _2245 = frontier_phi_79_pred_5;
                    uint _2408 = _2407 + 1u;
                    if (_2408 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2401 = _2245;
                        _2402 = _2247;
                        _2403 = _2249;
                        _2404 = _2251;
                        _2405 = _2253;
                        _2406 = _2255;
                        _2407 = _2408;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2251;
                frontier_phi_60_61_ladder_1 = _2255;
                frontier_phi_60_61_ladder_2 = _2253;
                frontier_phi_60_61_ladder_3 = _2249;
                frontier_phi_60_61_ladder_4 = _2247;
                frontier_phi_60_61_ladder_5 = _2245;
            }
            else
            {
                frontier_phi_60_61_ladder = _2129;
                frontier_phi_60_61_ladder_1 = _2133;
                frontier_phi_60_61_ladder_2 = _2131;
                frontier_phi_60_61_ladder_3 = _2127;
                frontier_phi_60_61_ladder_4 = _2125;
                frontier_phi_60_61_ladder_5 = _2123;
            }
            _2244 = frontier_phi_60_61_ladder_5;
            _2246 = frontier_phi_60_61_ladder_4;
            _2248 = frontier_phi_60_61_ladder_3;
            _2250 = frontier_phi_60_61_ladder;
            _2252 = frontier_phi_60_61_ladder_2;
            _2254 = frontier_phi_60_61_ladder_1;
        }
        float _2259 = isnan(1.0) ? _401 : (isnan(_401) ? 1.0 : min(_401, 1.0));
        _2035 = (_2259 * _2250) + _1596;
        _2037 = (_2259 * _2252) + _1598;
        _2039 = (_2259 * _2254) + _1600;
        _2041 = ((_2244 * 0.039999999105930328369140625) * _2259) + _1848;
        _2043 = ((_2246 * 0.039999999105930328369140625) * _2259) + _1850;
        _2045 = ((_2248 * 0.039999999105930328369140625) * _2259) + _1852;
    }
    else
    {
        _2035 = _1596;
        _2037 = _1598;
        _2039 = _1600;
        _2041 = _1848;
        _2043 = _1850;
        _2045 = _1852;
    }
    float _3782 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _3793 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _3804 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    float _2062 = ((isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_2035 + ((isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0))) * _401))) + ((_2041 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    float _2063 = ((isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0))) * (_2037 + ((isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0))) * _401))) + ((_2043 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    float _2064 = ((isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_2039 + ((isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0))) * _401))) + ((_2045 + ((isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0))) * _1211)) * cbPerFrame._m0[3u].x);
    uint _2065 = _375 + 6u;
    float _2073 = _335 / cbSceneParam._m0[86u].x;
    float _2074 = _336 / cbSceneParam._m0[86u].y;
    vec4 _2088 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2073, _2074, (log2((isnan(cbSceneParam._m0[77u].w) ? _257 : (isnan(_257) ? cbSceneParam._m0[77u].w : min(_257, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2090 = _2088.x;
    float _2091 = _2088.y;
    float _2092 = _2088.z;
    float _2093 = _2088.w;
    float _2185;
    float _2187;
    float _2189;
    float _2191;
    if (_257 > cbSceneParam._m0[78u].w)
    {
        float _2148 = isnan(_257) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _257 : min(cbSceneParam._m0[80u].w, _257));
        float _2149 = _2148 / _257;
        float _2160 = _2149 * _308;
        float _2161 = _309 * _2149;
        float _2162 = (-0.0) - _2161;
        float _2163 = _2149 * _310;
        float _2165 = (cbSceneParam._m0[77u].w * _2162) / _2148;
        float _2166 = _2165 + cbSceneParam._m0[79u].w;
        float _2167 = cbSceneParam._m0[79u].w - _2161;
        float _2173 = sqrt(((_2160 * _2160) + (_2161 * _2161)) + (_2163 * _2163));
        float _2176 = (1.0 - (cbSceneParam._m0[77u].w / _2148)) * _2173;
        float _2181 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2183 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2358;
        if (abs((_2162 - _2165) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2358 = ((((_2166 > 0.0) ? exp2(_2181 * _2166) : (2.0 - exp2(_2183 * _2166))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2176;
        }
        else
        {
            float _2302 = 1.0 / cbSceneParam._m0[80u].x;
            float _2303 = isnan(_2167) ? _2166 : (isnan(_2166) ? _2167 : max(_2166, _2167));
            float _2304 = isnan(_2167) ? _2166 : (isnan(_2166) ? _2167 : min(_2166, _2167));
            float _2313 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : min(_2303, 0.0));
            float _2314 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : min(_2304, 0.0));
            _2358 = ((abs(_2173 / _2162) * cbSceneParam._m0[80u].y) * ((((_2313 - _2314) * 2.0) - ((exp2(_2181 * (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0)))) - exp2(_2181 * (isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0))))) * _2302)) - ((exp2(_2183 * _2313) - exp2(_2183 * _2314)) * _2302))) + (_2176 * cbSceneParam._m0[80u].z);
        }
        vec4 _2360 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2073, _2074, 1.0), 0.0);
        float _2369 = exp2((_2358 * (-1.44269502162933349609375)) * (1.0 - _2360.w));
        float _2370 = log2(_2369);
        float _2386 = log2(_2093);
        _2185 = (exp2(_2386 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2370 * cbSceneParam._m0[78u].x)) * _2360.x) / cbSceneParam._m0[78u].x)) + _2090;
        _2187 = (exp2(_2386 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2370 * cbSceneParam._m0[78u].y)) * _2360.y) / cbSceneParam._m0[78u].y)) + _2091;
        _2189 = (exp2(_2386 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2370 * cbSceneParam._m0[78u].z)) * _2360.z) / cbSceneParam._m0[78u].z)) + _2092;
        _2191 = _2369 * _2093;
    }
    else
    {
        _2185 = _2090;
        _2187 = _2091;
        _2189 = _2092;
        _2191 = _2093;
    }
    bool _2396;
    vec4 _2201;
    vec4 _2223;
    float _2225;
    float _2229;
    float _2230;
    float _2231;
    float _2232;
    bool _2243;
    for (;;)
    {
        _2201 = cbMatDynParam._m0[0u];
        float _2203 = roundEven(_2201.y);
        bool _2204 = _2203 == 3.0;
        float _2205 = log2(_2191);
        float _2212 = exp2(_2205 * cbSceneParam._m0[78u].x) * _2062;
        float _2213 = exp2(_2205 * cbSceneParam._m0[78u].y) * _2063;
        float _2214 = exp2(_2205 * cbSceneParam._m0[78u].z) * _2064;
        float _2221 = _324 + (-0.5);
        _2223 = cbMtdParam._m0[1u];
        _2225 = _2223.y * _2221;
        float _2228 = (_2203 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2229 = _2228 * (_2204 ? _2212 : (_2212 + (cbSceneParam._m0[72u].w * _2185)));
        _2230 = _2228 * (_2204 ? _2213 : (_2213 + (cbSceneParam._m0[72u].w * _2187)));
        _2231 = _2228 * (_2204 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2189)));
        _2232 = _2221 * 0.999000012874603271484375;
        _2243 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2243)
        {
            if ((cbInstanceData._m0[_375 + 7u].x + _2232) < 0.5)
            {
                _2396 = true;
                break;
            }
        }
        uint _2337 = _377 + uint(_2201.w);
        if ((cbInstanceData._m0[_2337].w < 1.0) && ((cbInstanceData._m0[_2337].w + _2232) < 0.5))
        {
            _2396 = true;
            break;
        }
        if ((_2225 + 1.0) < _2223.x)
        {
            _2396 = true;
            break;
        }
        _2396 = false;
        break;
    }
    float _2551;
    if (_2396)
    {
        discard_state = true;
        _2551 = 0.0;
    }
    else
    {
        _2551 = cbInstanceData._m0[_2065].w;
    }
    SV_Target.x = _2229;
    SV_Target.y = _2230;
    SV_Target.z = _2231;
    SV_Target.w = _2551;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2065].w;
    discard_exit();
}


