#version 460

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _771;
float _2935;
float _2936;
float _2937;
float _2938;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _156 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _157 = _156 * NORMAL.x;
    float _158 = _156 * NORMAL.y;
    float _159 = _156 * NORMAL.z;
    float _164;
    float _165;
    float _166;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _164 = (-0.0) - _157;
        _165 = (-0.0) - _158;
        _166 = (-0.0) - _159;
    }
    else
    {
        _164 = _157;
        _165 = _158;
        _166 = _159;
    }
    vec4 _189 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(cbSceneParam._m0[85u].z * gl_FragCoord.x, cbSceneParam._m0[85u].w * gl_FragCoord.y));
    float _192 = _189.x;
    bool _199 = floatBitsToUint(cbSceneParam._m0[88u]).x != 0u;
    float _219 = ((_199 ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _192)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _192))) - POSITION_1.w) / cbMtdParam._m0[11u].x;
    float _2947 = isnan(0.0) ? _219 : (isnan(_219) ? 0.0 : max(_219, 0.0));
    float _222 = 1.0 - (isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0)));
    float _2958 = isnan(0.0) ? _222 : (isnan(_222) ? 0.0 : max(_222, 0.0));
    float _223 = isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0));
    float _226 = 3.0 - (_223 * 2.0);
    float _231 = _223 * _223;
    float _238 = ((_231 * (cbMtdParam._m0[9u].x - cbMtdParam._m0[10u].x)) * _226) + cbMtdParam._m0[10u].x;
    float _239 = ((_231 * (cbMtdParam._m0[9u].y - cbMtdParam._m0[10u].y)) * _226) + cbMtdParam._m0[10u].y;
    float _240 = ((_231 * (cbMtdParam._m0[9u].z - cbMtdParam._m0[10u].z)) * _226) + cbMtdParam._m0[10u].z;
    float _244 = inversesqrt(dot(vec3(_164, _165, _166), vec3(_164, _165, _166)));
    float _245 = _244 * _164;
    float _246 = _244 * _165;
    float _247 = _244 * _166;
    float _2969 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _2980 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _2991 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _255 = _199 ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _296 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _306 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _296);
    float _307 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _296);
    float _308 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _296);
    float _312 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _313 = _306 * _312;
    float _314 = _307 * _312;
    float _315 = _308 * _312;
    vec4 _320 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _322 = _320.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _450 = sqrt(((_306 * _306) + (_307 * _307)) + (_308 * _308));
        float _456 = (cbMatDynParam._m0[5u].x * _450) + cbMatDynParam._m0[5u].y;
        float _3002 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
        float _457 = isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0));
        float _461 = (cbMatDynParam._m0[5u].z * _450) + cbMatDynParam._m0[5u].w;
        float _3013 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0))) - _457)) + _457) < ((_322 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _333 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _334 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _354 = fma(_247, cbSceneParam._m0[5u].z, fma(_246, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _245));
    float _357 = fma(_247, cbSceneParam._m0[6u].z, fma(_246, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _245));
    float _360 = fma(_247, cbSceneParam._m0[7u].z, fma(_246, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _245));
    uint _373 = uint(roundEven(NORMAL.w)) * 13u;
    uint _375 = _373 + 9u;
    uint _376 = _375 + uint(cbMatDynParam._m0[0u].w);
    float _382 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0)))) * cbInstanceData._m0[_376].x;
    float _383 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0)))) * cbInstanceData._m0[_376].y;
    float _384 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0)))) * cbInstanceData._m0[_376].z;
    float _3024 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    float _385 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
    float _3035 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _386 = isnan(1.0) ? _3035 : (isnan(_3035) ? 1.0 : min(_3035, 1.0));
    float _3046 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _387 = isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0));
    vec4 _396 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _333, cbSceneParam._m0[86u].y * _334));
    float _399 = _396.x * TEXCOORD.z;
    float _400 = dot(vec3(_245, _246, _247), vec3(_313, _314, _315));
    float _403 = _400 * 2.0;
    float _407 = (_403 * _245) - _313;
    float _408 = (_403 * _246) - _314;
    float _409 = (_403 * _247) - _315;
    float _431 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _435 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _439 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _770;
    float _772;
    float _773;
    float _774;
    float _775;
    float _776;
    float _777;
    float _778;
    float _779;
    float _780;
    float _781;
    float _782;
    float _783;
    float _784;
    float _785;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _495 = fma(_439, cbModelParam._m0[26u].z, fma(_435, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _431));
        float _499 = fma(_439, cbModelParam._m0[27u].z, fma(_435, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _431));
        float _503 = fma(_439, cbModelParam._m0[28u].z, fma(_435, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _431));
        float _528 = _431 + _245;
        float _529 = _435 + _246;
        float _530 = _439 + _247;
        float _540 = fma(_530, cbModelParam._m0[26u].z, fma(_529, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) - _495;
        float _541 = fma(_530, cbModelParam._m0[27u].z, fma(_529, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) - _499;
        float _542 = fma(_530, cbModelParam._m0[28u].z, fma(_529, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) - _503;
        float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
        float _559 = ((_546 * _540) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_495 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _560 = ((_546 * _541) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_499 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _561 = ((_546 * _542) / cbModelParam._m0[34u].z) + ((((((_503 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _564 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _571 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _578 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        vec4 _585 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_559, _560, _561), 0.0);
        float _598 = exp2((_564.w + (-0.5)) * 20.0) * 2.0;
        float _599 = _598 * (_564.x + (-0.5));
        float _600 = _598 * (_564.y + (-0.5));
        float _601 = _598 * (_564.z + (-0.5));
        float _608 = exp2((_571.w + (-0.5)) * 20.0) * 2.0;
        float _609 = _608 * (_571.x + (-0.5));
        float _610 = _608 * (_571.y + (-0.5));
        float _611 = _608 * (_571.z + (-0.5));
        float _618 = exp2((_578.w + (-0.5)) * 20.0) * 2.0;
        float _619 = _618 * (_578.x + (-0.5));
        float _620 = _618 * (_578.y + (-0.5));
        float _621 = _618 * (_578.z + (-0.5));
        float _628 = exp2((_585.w + (-0.5)) * 20.0) * 2.0;
        float _629 = _628 * (_585.x + (-0.5));
        float _630 = _628 * (_585.y + (-0.5));
        float _631 = _628 * (_585.z + (-0.5));
        float _632 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
        float _633 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
        float _634 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
        float _635 = _599 * 0.5;
        float _636 = _609 * 0.5;
        float _637 = _619 * 0.5;
        float _638 = dot(vec3(_635, _636, _637), vec3(_635, _636, _637));
        float _643 = (_638 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_638);
        float _652 = (dot(vec3(_245, _246, _247), vec3(_643 * _635, _643 * _636, _643 * _637)) + 1.0) * 0.5;
        float _3072 = isnan(0.0) ? _652 : (isnan(_652) ? 0.0 : max(_652, 0.0));
        float _662 = sqrt(((_636 * _636) + (_635 * _635)) + (_637 * _637)) / (_632 + 9.9999997473787516355514526367188e-06);
        float _3083 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
        float _664 = _663 * 2.0;
        float _668 = (1.0 - _663) / (_663 + 1.0);
        float _3094 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _678 = ((((1.0 - _669) * (_664 + 2.0)) * exp2(log2(isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0))) * (_664 + 1.0))) + _669) * _632;
        float _679 = _600 * 0.5;
        float _680 = _610 * 0.5;
        float _681 = _620 * 0.5;
        float _682 = dot(vec3(_679, _680, _681), vec3(_679, _680, _681));
        float _687 = (_682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_682);
        float _695 = (dot(vec3(_245, _246, _247), vec3(_687 * _679, _687 * _680, _687 * _681)) + 1.0) * 0.5;
        float _3105 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
        float _704 = sqrt(((_680 * _680) + (_679 * _679)) + (_681 * _681)) / (_633 + 9.9999997473787516355514526367188e-06);
        float _3116 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _705 = isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0));
        float _706 = _705 * 2.0;
        float _710 = (1.0 - _705) / (_705 + 1.0);
        float _3127 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _711 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
        float _720 = ((((1.0 - _711) * (_706 + 2.0)) * exp2(log2(isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0))) * (_706 + 1.0))) + _711) * _633;
        float _721 = _601 * 0.5;
        float _722 = _611 * 0.5;
        float _723 = _621 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _737 = (dot(vec3(_245, _246, _247), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3138 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _746 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_634 + 9.9999997473787516355514526367188e-06);
        float _3149 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3160 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0))) * (_748 + 1.0))) + _753) * _634;
        _770 = _601;
        _772 = _600;
        _773 = _599;
        _774 = _611;
        _775 = _610;
        _776 = _609;
        _777 = _621;
        _778 = _620;
        _779 = _619;
        _780 = _634;
        _781 = _633;
        _782 = _632;
        _783 = cbModelParam._m0[36u].z * (isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0)));
        _784 = cbModelParam._m0[36u].z * (isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0)));
        _785 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
    }
    else
    {
        _770 = _771;
        _772 = _771;
        _773 = _771;
        _774 = _771;
        _775 = _771;
        _776 = _771;
        _777 = _771;
        _778 = _771;
        _779 = _771;
        _780 = _771;
        _781 = _771;
        _782 = _771;
        _783 = 0.0;
        _784 = 0.0;
        _785 = 0.0;
    }
    float _1083;
    float _1084;
    float _1085;
    float _1086;
    float _1087;
    float _1088;
    float _1089;
    float _1090;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _814 = fma(_439, cbModelParam._m0[30u].z, fma(_435, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _431));
        float _818 = fma(_439, cbModelParam._m0[31u].z, fma(_435, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _431));
        float _822 = fma(_439, cbModelParam._m0[32u].z, fma(_435, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _431));
        float _845 = _431 + _245;
        float _846 = _435 + _246;
        float _847 = _439 + _247;
        float _857 = fma(_847, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _845)) - _814;
        float _858 = fma(_847, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _845)) - _818;
        float _859 = fma(_847, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _845)) - _822;
        float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
        float _876 = ((_863 * _857) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_814 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _877 = ((_863 * _858) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_818 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _878 = ((_863 * _859) / cbModelParam._m0[35u].z) + ((((((_822 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _880 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_876, _877, _878), 0.0);
        float _913 = exp2((_880.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_880.x + (-0.5));
        float _915 = _913 * (_880.y + (-0.5));
        float _916 = _913 * (_880.z + (-0.5));
        float _923 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_887.x + (-0.5));
        float _925 = _923 * (_887.y + (-0.5));
        float _926 = _923 * (_887.z + (-0.5));
        float _933 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_894.x + (-0.5));
        float _935 = _933 * (_894.y + (-0.5));
        float _936 = _933 * (_894.z + (-0.5));
        float _943 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_901.x + (-0.5));
        float _945 = _943 * (_901.y + (-0.5));
        float _946 = _943 * (_901.z + (-0.5));
        float _947 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _948 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _949 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _950 = _914 * 0.5;
        float _951 = _924 * 0.5;
        float _952 = _934 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_245, _246, _247), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3201 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_947 + 9.9999997473787516355514526367188e-06);
        float _3212 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3223 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0))) * (_977 + 1.0))) + _982) * _947;
        float _992 = _915 * 0.5;
        float _993 = _925 * 0.5;
        float _994 = _935 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_245, _246, _247), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3234 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_948 + 9.9999997473787516355514526367188e-06);
        float _3245 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3256 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_1019 + 1.0))) + _1024) * _948;
        float _1034 = _916 * 0.5;
        float _1035 = _926 * 0.5;
        float _1036 = _936 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_245, _246, _247), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3267 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_949 + 9.9999997473787516355514526367188e-06);
        float _3278 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3289 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (_1061 + 1.0))) + _1066) * _949;
        _1083 = _916;
        _1084 = _915;
        _1085 = _914;
        _1086 = _926;
        _1087 = _925;
        _1088 = _924;
        _1089 = _936;
        _1090 = _935;
        _1091 = _934;
        _1092 = _949;
        _1093 = _948;
        _1094 = _947;
        _1095 = cbModelParam._m0[36u].w * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1096 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1097 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
    }
    else
    {
        _1083 = _771;
        _1084 = _771;
        _1085 = _771;
        _1086 = _771;
        _1087 = _771;
        _1088 = _771;
        _1089 = _771;
        _1090 = _771;
        _1091 = _771;
        _1092 = _771;
        _1093 = _771;
        _1094 = _771;
        _1095 = 0.0;
        _1096 = 0.0;
        _1097 = 0.0;
    }
    float _1107 = (cbModelParam._m0[1u].x * (_1095 - _783)) + _783;
    float _1108 = (cbModelParam._m0[1u].x * (_1096 - _784)) + _784;
    float _1109 = (cbModelParam._m0[1u].x * (_1097 - _785)) + _785;
    float _1130 = fma(_1109, cbSceneParam._m0[89u].z, fma(_1108, cbSceneParam._m0[89u].y, _1107 * cbSceneParam._m0[89u].x));
    float _1133 = fma(_1109, cbSceneParam._m0[90u].z, fma(_1108, cbSceneParam._m0[90u].y, _1107 * cbSceneParam._m0[90u].x));
    float _1136 = fma(_1109, cbSceneParam._m0[91u].z, fma(_1108, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1107));
    float _1151 = _407 * 0.5;
    float _1152 = _408 * 0.5;
    float _1153 = _409 * 0.5;
    float _1154 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1085, _1088, _1091, _1094));
    float _1157 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1084, _1087, _1090, _1093));
    float _1160 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_1083, _1086, _1089, _1092));
    float _1194;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1167 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_770, _774, _777, _780));
        float _1171 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_772, _775, _778, _781));
        float _1175 = dot(vec4(_1151, _1152, _1153, 1.0), vec4(_773, _776, _779, _782));
        float _1182 = dot(vec4(cbModelParam._m0[39u]), vec4(_1151, _1152, _1153, 1.0));
        _1194 = dot(vec3(isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)), isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)), isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1182) ? 0.0 : (isnan(0.0) ? _1182 : max(0.0, _1182))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1194 = 1.0;
    }
    float _1205;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1196 = dot(vec4(cbModelParam._m0[40u]), vec4(_1151, _1152, _1153, 1.0));
        _1205 = dot(vec3(isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)), isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)), isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1196) ? 0.0 : (isnan(0.0) ? _1196 : max(0.0, _1196))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1205 = 1.0;
    }
    float _1209 = (_1205 * cbModelParam._m0[1u].x) + (_1194 * (1.0 - cbModelParam._m0[1u].x));
    float _1219 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1301;
    float _1303;
    float _1305;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1268 = fma(_439, cbModelParam._m0[13u].z, fma(_435, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _431)) + cbModelParam._m0[13u].w;
        float _1272 = fma(_439, cbModelParam._m0[14u].z, fma(_435, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _431)) + cbModelParam._m0[14u].w;
        float _1276 = fma(_439, cbModelParam._m0[15u].z, fma(_435, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _431)) + cbModelParam._m0[15u].w;
        float _1279 = fma(_409, cbModelParam._m0[13u].z, fma(_408, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _407));
        float _1282 = fma(_409, cbModelParam._m0[14u].z, fma(_408, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _407));
        float _1285 = fma(_409, cbModelParam._m0[15u].z, fma(_408, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _407));
        float _1311;
        if (_1279 > 0.0)
        {
            _1311 = abs((1.0 - _1268) / _1279);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1279 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1268 + 1.0) / _1279);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1311 = frontier_phi_19_17_ladder;
        }
        float _1518;
        if (_1282 > 0.0)
        {
            _1518 = abs((1.0 - _1272) / _1282);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1282 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1272 + 1.0) / _1282);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1518 = frontier_phi_28_24_ladder;
        }
        float _1707;
        if (_1285 > 0.0)
        {
            _1707 = abs((1.0 - _1276) / _1285);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1285 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1276 + 1.0) / _1285);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1707 = frontier_phi_40_35_ladder;
        }
        float _1709 = isnan(_1518) ? _1311 : (isnan(_1311) ? _1518 : min(_1311, _1518));
        float _1710 = isnan(_1707) ? _1709 : (isnan(_1709) ? _1707 : min(_1709, _1707));
        float _1714 = (_1710 * _1279) + _1268;
        float _1715 = (_1710 * _1282) + _1272;
        float _1716 = (_1710 * _1285) + _1276;
        float _1717 = _1710 * 9.9999997473787516355514526367188e-05;
        float _1719 = (-1.0) - _1717;
        float _1721 = _1717 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1716 > _1721) || ((_1716 < _1719) || ((_1715 > _1721) || ((_1715 < _1719) || ((_1714 < _1719) || (_1714 > _1721))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1813 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1716, cbModelParam._m0[9u].z, fma(_1715, cbModelParam._m0[9u].y, _1714 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1716, cbModelParam._m0[10u].z, fma(_1715, cbModelParam._m0[10u].y, _1714 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1716, cbModelParam._m0[11u].z, fma(_1715, cbModelParam._m0[11u].y, _1714 * cbModelParam._m0[11u].x))), _1219);
            frontier_phi_18_40_ladder = _1813.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _1813.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _1813.x * cbModelParam._m0[1u].y;
        }
        _1301 = frontier_phi_18_40_ladder_2;
        _1303 = frontier_phi_18_40_ladder_1;
        _1305 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_407, _408, _409), _1219);
        _1301 = _1289.x * cbModelParam._m0[1u].y;
        _1303 = _1289.y * cbModelParam._m0[1u].y;
        _1305 = _1289.z * cbModelParam._m0[1u].y;
    }
    float _1308 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1401;
    float _1403;
    float _1405;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1365 = fma(_439, cbModelParam._m0[21u].z, fma(_435, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _431)) + cbModelParam._m0[21u].w;
        float _1369 = fma(_439, cbModelParam._m0[22u].z, fma(_435, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _431)) + cbModelParam._m0[22u].w;
        float _1373 = fma(_439, cbModelParam._m0[23u].z, fma(_435, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _431)) + cbModelParam._m0[23u].w;
        float _1376 = fma(_409, cbModelParam._m0[21u].z, fma(_408, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _407));
        float _1379 = fma(_409, cbModelParam._m0[22u].z, fma(_408, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _407));
        float _1382 = fma(_409, cbModelParam._m0[23u].z, fma(_408, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _407));
        float _1523;
        if (_1376 > 0.0)
        {
            _1523 = abs((1.0 - _1365) / _1376);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1365 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1523 = frontier_phi_30_26_ladder;
        }
        float _1734;
        if (_1379 > 0.0)
        {
            _1734 = abs((1.0 - _1369) / _1379);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1369 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1734 = frontier_phi_42_37_ladder;
        }
        float _1885;
        if (_1382 > 0.0)
        {
            _1885 = abs((1.0 - _1373) / _1382);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1382 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1373 + 1.0) / _1382);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _1885 = frontier_phi_51_48_ladder;
        }
        float _1887 = isnan(_1734) ? _1523 : (isnan(_1523) ? _1734 : min(_1523, _1734));
        float _1888 = isnan(_1885) ? _1887 : (isnan(_1887) ? _1885 : min(_1887, _1885));
        float _1892 = (_1888 * _1376) + _1365;
        float _1893 = (_1888 * _1379) + _1369;
        float _1894 = (_1888 * _1382) + _1373;
        float _1895 = _1888 * 9.9999997473787516355514526367188e-05;
        float _1896 = (-1.0) - _1895;
        float _1898 = _1895 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_1894 > _1898) || ((_1894 < _1896) || ((_1893 > _1898) || ((_1893 < _1896) || ((_1892 < _1896) || (_1892 > _1898))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1894, cbModelParam._m0[17u].z, fma(_1893, cbModelParam._m0[17u].y, _1892 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1894, cbModelParam._m0[18u].z, fma(_1893, cbModelParam._m0[18u].y, _1892 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1894, cbModelParam._m0[19u].z, fma(_1893, cbModelParam._m0[19u].y, _1892 * cbModelParam._m0[19u].x))), _1308);
            frontier_phi_27_51_ladder = _2092.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2092.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2092.x * cbModelParam._m0[1u].z;
        }
        _1401 = frontier_phi_27_51_ladder_2;
        _1403 = frontier_phi_27_51_ladder_1;
        _1405 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_407, _408, _409), _1308);
        _1401 = _1385.x * cbModelParam._m0[1u].z;
        _1403 = _1385.y * cbModelParam._m0[1u].z;
        _1405 = _1385.z * cbModelParam._m0[1u].z;
    }
    float _1417 = _399 * 0.01200000010430812835693359375;
    float _1419 = _1417 * ((cbModelParam._m0[1u].w * (_1401 - _1301)) + _1301);
    float _1420 = _1417 * ((cbModelParam._m0[1u].w * (_1403 - _1303)) + _1303);
    float _1421 = _1417 * ((cbModelParam._m0[1u].w * (_1405 - _1305)) + _1305);
    float _1424 = fma(_1421, cbSceneParam._m0[89u].z, fma(_1420, cbSceneParam._m0[89u].y, _1419 * cbSceneParam._m0[89u].x));
    float _1427 = fma(_1421, cbSceneParam._m0[90u].z, fma(_1420, cbSceneParam._m0[90u].y, _1419 * cbSceneParam._m0[90u].x));
    float _1430 = fma(_1421, cbSceneParam._m0[91u].z, fma(_1420, cbSceneParam._m0[91u].y, _1419 * cbSceneParam._m0[91u].x));
    uvec4 _1440 = floatBitsToUint(cbInstanceData._m0[_373 + 5u]);
    uint _1442 = _1440.x * 14u;
    uint _1443 = _1442 + 13u;
    float _1450 = _399 + (-1.0);
    float _1456 = (cbLight._m0[_1443].x * _1450) + 1.0;
    float _1457 = (cbLight._m0[_1443].y * _1450) + 1.0;
    float _1458 = (cbLight._m0[_1443].z * _1450) + 1.0;
    float _1459 = (cbLight._m0[_1443].w * _1450) + 1.0;
    uint _1460 = _1442 + 5u;
    float _1466 = isnan(1.0) ? _1457 : (isnan(_1457) ? 1.0 : min(_1457, 1.0));
    uint _1470 = _1442 + 4u;
    float _1477 = isnan(1.0) ? _1456 : (isnan(_1456) ? 1.0 : min(_1456, 1.0));
    uint _1481 = _1442 | 1u;
    float _1492 = dot(vec3(cbLight._m0[_1442].xyz), vec3(_245, _246, _247));
    float _1495 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_245, _246, _247));
    float _3425 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
    float _3436 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
    float _1500 = (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * 0.3183098733425140380859375;
    float _1502 = (isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 0.3183098733425140380859375;
    float _1509 = ((cbLight._m0[_1460].x * _1466) * _1502) + ((cbLight._m0[_1470].x * _1477) * _1500);
    float _1510 = ((_1466 * cbLight._m0[_1460].y) * _1502) + ((_1477 * cbLight._m0[_1470].y) * _1500);
    float _1511 = ((_1466 * cbLight._m0[_1460].z) * _1502) + ((_1477 * cbLight._m0[_1470].z) * _1500);
    uvec4 _1515 = floatBitsToUint(cbLight._m0[_1442 + 12u]);
    bool _1517 = _1515.x == 0u;
    float _1528;
    float _1530;
    float _1532;
    if (_1517)
    {
        _1528 = _1509;
        _1530 = _1510;
        _1532 = _1511;
    }
    else
    {
        uint _1536 = _1442 + 6u;
        float _1552 = (dot(vec3(cbLight._m0[_1442 + 2u].xyz), vec3(_245, _246, _247)) * 0.5) + 0.5;
        float _1553 = _1552 * _1552;
        float _3447 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1555 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        _1528 = (((cbLight._m0[_1536].x * 0.3183098733425140380859375) * _1554) * _1555) + _1509;
        _1530 = (((cbLight._m0[_1536].y * 0.3183098733425140380859375) * _1554) * _1555) + _1510;
        _1532 = (((cbLight._m0[_1536].z * 0.3183098733425140380859375) * _1554) * _1555) + _1511;
    }
    bool _1535 = _1515.y == 0u;
    float _1573;
    float _1575;
    float _1577;
    if (_1535)
    {
        _1573 = _1528;
        _1575 = _1530;
        _1577 = _1532;
    }
    else
    {
        uint _1678 = _1442 + 7u;
        float _1694 = (dot(vec3(cbLight._m0[_1442 + 3u].xyz), vec3(_245, _246, _247)) * 0.5) + 0.5;
        float _1695 = _1694 * _1694;
        float _3463 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1697 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
        _1573 = (((cbLight._m0[_1678].x * 0.3183098733425140380859375) * _1696) * _1697) + _1528;
        _1575 = (((cbLight._m0[_1678].y * 0.3183098733425140380859375) * _1696) * _1697) + _1530;
        _1577 = (((cbLight._m0[_1678].z * 0.3183098733425140380859375) * _1696) * _1697) + _1532;
    }
    uint _1579 = _1442 + 8u;
    float _1585 = cbLight._m0[_1442].x + _313;
    float _1586 = cbLight._m0[_1442].y + _314;
    float _1587 = cbLight._m0[_1442].z + _315;
    float _1591 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
    float _1595 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_1442].xyz));
    float _3479 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
    float _1598 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _1599 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
    float _1600 = dot(vec3(cbLight._m0[_1442].xyz), vec3(_1585 * _1591, _1586 * _1591, _1587 * _1591));
    float _3501 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1611 = (exp2(log2(1.0 - (isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1617 = (0.5 / ((_1598 + 9.9999999392252902907785028219223e-09) + _1599)) * _1598;
    float _3512 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
    float _1619 = (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * 0.31831014156341552734375;
    uint _1630 = _1442 + 9u;
    float _1636 = cbLight._m0[_1481].x + _313;
    float _1637 = cbLight._m0[_1481].y + _314;
    float _1638 = cbLight._m0[_1481].z + _315;
    float _1642 = inversesqrt(dot(vec3(_1636, _1637, _1638), vec3(_1636, _1637, _1638)));
    float _1646 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_1481].xyz));
    float _3523 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1649 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _1650 = dot(vec3(cbLight._m0[_1481].xyz), vec3(_1636 * _1642, _1637 * _1642, _1638 * _1642));
    float _3534 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1659 = (exp2(log2(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1663 = (0.5 / ((_1649 + 9.9999999392252902907785028219223e-09) + _1599)) * _1649;
    float _3545 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1665 = (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 0.31831014156341552734375;
    float _1675 = (((_1659 * cbLight._m0[_1630].x) * _1665) * _1466) + (((_1611 * cbLight._m0[_1579].x) * _1619) * _1477);
    float _1676 = (((_1659 * cbLight._m0[_1630].y) * _1665) * _1466) + (((_1611 * cbLight._m0[_1579].y) * _1619) * _1477);
    float _1677 = (((_1659 * cbLight._m0[_1630].z) * _1665) * _1466) + (((_1611 * cbLight._m0[_1579].z) * _1619) * _1477);
    float _1739;
    float _1741;
    float _1743;
    if (_1517)
    {
        _1739 = _1675;
        _1741 = _1676;
        _1743 = _1677;
    }
    else
    {
        uint _1745 = _1442 + 10u;
        uint _1751 = _1442 + 2u;
        float _1757 = cbLight._m0[_1751].x + _313;
        float _1758 = cbLight._m0[_1751].y + _314;
        float _1759 = cbLight._m0[_1751].z + _315;
        float _1763 = inversesqrt(dot(vec3(_1757, _1758, _1759), vec3(_1757, _1758, _1759)));
        float _1767 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_1751].xyz));
        float _3556 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1770 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1771 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1757 * _1763, _1758 * _1763, _1759 * _1763));
        float _3567 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1784 = (0.5 / ((_1770 + 9.9999999392252902907785028219223e-09) + _1599)) * _1770;
        float _3578 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1786 = (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) * 0.31831014156341552734375;
        float _1787 = isnan(1.0) ? _1458 : (isnan(_1458) ? 1.0 : min(_1458, 1.0));
        _1739 = (((_1780 * cbLight._m0[_1745].x) * _1786) * _1787) + _1675;
        _1741 = (((_1780 * cbLight._m0[_1745].y) * _1786) * _1787) + _1676;
        _1743 = (((_1780 * cbLight._m0[_1745].z) * _1786) * _1787) + _1677;
    }
    float _1822;
    float _1824;
    float _1826;
    if (_1535)
    {
        _1822 = _1739;
        _1824 = _1741;
        _1826 = _1743;
    }
    else
    {
        uint _1833 = _1442 + 11u;
        uint _1839 = _1442 + 3u;
        float _1845 = cbLight._m0[_1839].x + _313;
        float _1846 = cbLight._m0[_1839].y + _314;
        float _1847 = cbLight._m0[_1839].z + _315;
        float _1851 = inversesqrt(dot(vec3(_1845, _1846, _1847), vec3(_1845, _1846, _1847)));
        float _1855 = dot(vec3(_245, _246, _247), vec3(cbLight._m0[_1839].xyz));
        float _3594 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1858 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1859 = dot(vec3(cbLight._m0[_1839].xyz), vec3(_1845 * _1851, _1846 * _1851, _1847 * _1851));
        float _3605 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1868 = (exp2(log2(1.0 - (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1872 = (0.5 / ((_1858 + 9.9999999392252902907785028219223e-09) + _1599)) * _1858;
        float _3616 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1874 = (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * 0.31831014156341552734375;
        float _1875 = isnan(1.0) ? _1459 : (isnan(_1459) ? 1.0 : min(_1459, 1.0));
        _1822 = (((_1868 * cbLight._m0[_1833].x) * _1874) * _1875) + _1739;
        _1824 = (((_1868 * cbLight._m0[_1833].y) * _1874) * _1875) + _1741;
        _1826 = (((_1868 * cbLight._m0[_1833].z) * _1874) * _1875) + _1743;
    }
    float _2009;
    float _2011;
    float _2013;
    float _2015;
    float _2017;
    float _2019;
    if (_1440.y == 0u)
    {
        float _1950 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1951 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1950;
        float _1952 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1950;
        float _1953 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1950;
        uvec4 _1965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1966 = _1965.x;
        uint _1977 = uint((float(_1965.y) * floor(float(uint(cbSceneParam._m0[85u].y * _334) / _1966))) + floor(float(uint(cbSceneParam._m0[85u].x * _333) / _1966)));
        float _1987 = (log2(_1953 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1988 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
        uint _1991 = uint(isnan(14.0) ? _1988 : (isnan(_1988) ? 14.0 : min(_1988, 14.0)));
        uvec4 _1996 = texelFetch(g_lightClusterGridBuffer, int(((_1991 << 2u) + (_1977 << 6u)) >> 2u));
        uint _1997 = _1996.x;
        uint _1998 = _1965.z;
        float _2097;
        float _2099;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        if (((((1u << ((_1998 >> 4u) & 15u)) + 4294967295u) & _1997) == 0u) || ((_1998 & 240u) == 0u))
        {
            _2097 = 0.0;
            _2099 = 0.0;
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
        }
        else
        {
            float _2098;
            float _2100;
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            float _2251 = 0.0;
            float _2252 = 0.0;
            uint _2253 = 0u;
            uint _2262;
            bool _2263;
            for (;;)
            {
                _2262 = texelFetch(g_lightClassification, int((((_1991 << 5u) + (_1977 << 9u)) + (_2253 << 2u)) >> 2u)).x;
                _2263 = _2262 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2263)
                {
                    frontier_phi_68_pred = _2249;
                    frontier_phi_68_pred_1 = _2252;
                    frontier_phi_68_pred_2 = _2251;
                    frontier_phi_68_pred_3 = _2250;
                    frontier_phi_68_pred_4 = _2248;
                    frontier_phi_68_pred_5 = _2247;
                }
                else
                {
                    float _2392;
                    float _2393;
                    float _2394;
                    float _2395;
                    float _2396;
                    float _2397;
                    uint _2398;
                    _2392 = _2247;
                    _2393 = _2248;
                    _2394 = _2249;
                    _2395 = _2250;
                    _2396 = _2251;
                    _2397 = _2252;
                    _2398 = _2262;
                    float _2319;
                    float _2320;
                    float _2321;
                    float _2322;
                    float _2323;
                    float _2324;
                    for (;;)
                    {
                        uint _2402 = uint(findLSB(_2398)) + (_2253 << 5u);
                        uint _2399 = (_2398 + 4294967295u) & _2398;
                        uint _2404 = _2402 * 48u;
                        vec4 _2418 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2404)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2404 + 3u)).x));
                        uint _2424 = (_2402 * 48u) + 4u;
                        vec4 _2437 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2424)).x, texelFetch(g_PointLightRenderingBuffer, int(_2424 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2424 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2424 + 3u)).x));
                        uint _2443 = (_2402 * 48u) + 8u;
                        vec3 _2454 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2443)).x, texelFetch(g_PointLightRenderingBuffer, int(_2443 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2443 + 2u)).x));
                        float _2458 = _2418.x - _1951;
                        float _2459 = _2418.y - _1952;
                        float _2460 = _2418.z - _1953;
                        float _2461 = dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460));
                        float _2464 = inversesqrt(_2461);
                        float _2473 = 1.0 - (_2461 * _2418.w);
                        float _3642 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
                        float _2474 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
                        float _2475 = sqrt(_2461) * _2437.w;
                        float _2478 = 1.39999997615814208984375 / (_2475 + 1.39999997615814208984375);
                        float _2479 = _2478 * _2478;
                        float _2482 = ((1.0 - _2479) * dot(vec3(_354, _357, _360), vec3(_2464 * _2458, _2464 * _2459, _2464 * _2460))) + _2479;
                        float _2485 = _2475 * _2475;
                        float _2489 = ((isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0))) * _2474) / ((_2485 * 0.699999988079071044921875) + 1.0);
                        float _2493 = (-0.0) - _1951;
                        float _2494 = (-0.0) - _1952;
                        float _2495 = (-0.0) - _1953;
                        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
                        float _2503 = dot(vec3(_354, _357, _360), vec3(_2499 * _2493, _2499 * _2494, _2499 * _2495));
                        float _3658 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
                        float _3669 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
                        float _2507 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
                        float _2511 = (0.5 / (((isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0))) + 9.9999999392252902907785028219223e-09) + _2507)) * _2507;
                        float _3680 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
                        float _2520 = (((isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 3.1415927410125732421875) / ((_2485 * 2.1991131305694580078125) + 3.141590118408203125)) * _2474;
                        _2322 = (_2489 * _2437.x) + _2395;
                        _2323 = (_2489 * _2437.y) + _2396;
                        _2324 = (_2489 * _2437.z) + _2397;
                        _2319 = (_2520 * _2454.x) + _2392;
                        _2320 = (_2520 * _2454.y) + _2393;
                        _2321 = (_2520 * _2454.z) + _2394;
                        if (_2399 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2392 = _2319;
                            _2393 = _2320;
                            _2394 = _2321;
                            _2395 = _2322;
                            _2396 = _2323;
                            _2397 = _2324;
                            _2398 = _2399;
                        }
                    }
                    frontier_phi_68_pred = _2321;
                    frontier_phi_68_pred_1 = _2324;
                    frontier_phi_68_pred_2 = _2323;
                    frontier_phi_68_pred_3 = _2322;
                    frontier_phi_68_pred_4 = _2320;
                    frontier_phi_68_pred_5 = _2319;
                }
                _2102 = frontier_phi_68_pred;
                _2108 = frontier_phi_68_pred_1;
                _2106 = frontier_phi_68_pred_2;
                _2104 = frontier_phi_68_pred_3;
                _2100 = frontier_phi_68_pred_4;
                _2098 = frontier_phi_68_pred_5;
                uint _2254 = _2253 + 1u;
                if (_2254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2247 = _2098;
                    _2248 = _2100;
                    _2249 = _2102;
                    _2250 = _2104;
                    _2251 = _2106;
                    _2252 = _2108;
                    _2253 = _2254;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2097 = _2098;
            _2099 = _2100;
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
        }
        uvec4 _2111 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2112 = _2111.z;
        uint _2114 = (_2112 >> 8u) & 15u;
        float _2218;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        float _2228;
        if (((4294967295u << _2114) & _1997) == 0u)
        {
            _2218 = _2097;
            _2220 = _2099;
            _2222 = _2101;
            _2224 = _2103;
            _2226 = _2105;
            _2228 = _2107;
        }
        else
        {
            float _2243 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2114 < ((_2112 >> 12u) & 15u))
            {
                float _2219;
                float _2221;
                float _2223;
                float _2225;
                float _2227;
                float _2229;
                float _2375 = _2097;
                float _2376 = _2099;
                float _2377 = _2101;
                float _2378 = _2103;
                float _2379 = _2105;
                float _2380 = _2107;
                uint _2381 = _2114;
                uint _2390;
                bool _2391;
                for (;;)
                {
                    _2390 = texelFetch(g_lightClassification, int((((_1991 << 5u) + (_1977 << 9u)) + (_2381 << 2u)) >> 2u)).x;
                    _2391 = _2390 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2391)
                    {
                        frontier_phi_79_pred = _2380;
                        frontier_phi_79_pred_1 = _2379;
                        frontier_phi_79_pred_2 = _2378;
                        frontier_phi_79_pred_3 = _2377;
                        frontier_phi_79_pred_4 = _2376;
                        frontier_phi_79_pred_5 = _2375;
                    }
                    else
                    {
                        float _2534;
                        float _2535;
                        float _2536;
                        float _2537;
                        float _2538;
                        float _2539;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2547 = _2375;
                        float _2548 = _2376;
                        float _2549 = _2377;
                        float _2550 = _2378;
                        float _2551 = _2379;
                        float _2552 = _2380;
                        uint _2553 = _2390;
                        uint _2554;
                        vec4 _2579;
                        float _2580;
                        vec4 _2595;
                        vec3 _2607;
                        vec4 _2623;
                        vec4 _2639;
                        float _2686;
                        bool _2687;
                        for (;;)
                        {
                            uint _2564 = ((_2381 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2553));
                            _2554 = (_2553 + 4294967295u) & _2553;
                            uint _2566 = _2564 * 40u;
                            _2579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 3u)).x));
                            _2580 = _2579.w;
                            uint _2582 = (_2564 * 40u) + 4u;
                            _2595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 3u)).x));
                            uint _2597 = (_2564 * 40u) + 8u;
                            _2607 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x));
                            uint _2610 = (_2564 * 40u) + 16u;
                            _2623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 3u)).x));
                            uint _2626 = (_2564 * 40u) + 20u;
                            _2639 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2626)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2626 + 3u)).x));
                            uint _2642 = (_2564 * 40u) + 24u;
                            vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2642 + 3u)).x));
                            uint _2661 = (_2564 * 40u) + 28u;
                            vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            _2686 = fma(_1953, _2674.z, fma(_1952, _2674.y, _2674.x * _1951)) + _2674.w;
                            _2687 = !((fma(_1953, _2655.z, fma(_1952, _2655.y, _2655.x * _1951)) + _2655.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2687)
                            {
                                float _2714 = _2579.x - _1951;
                                float _2715 = _2579.y - _1952;
                                float _2716 = _2579.z - _1953;
                                float _2717 = dot(vec3(_2714, _2715, _2716), vec3(_2714, _2715, _2716));
                                float _2720 = inversesqrt(_2717);
                                float _2721 = _2720 * _2714;
                                float _2722 = _2720 * _2715;
                                float _2723 = _2720 * _2716;
                                float _2727 = 1.0 - (_2717 / (_2580 * _2580));
                                float _3691 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                                float _2728 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
                                float _2732 = sqrt(_2717) * _2595.w;
                                float _2734 = 1.39999997615814208984375 / (_2732 + 1.39999997615814208984375);
                                float _2735 = _2734 * _2734;
                                float _2736 = 1.0 - _2735;
                                float _2738 = (_2736 * dot(vec3(_2721, _2722, _2723), vec3(_354, _357, _360))) + _2735;
                                float _2741 = _2732 * _2732;
                                float _2745 = (fma(_1953, _2623.z, fma(_1952, _2623.y, _2623.x * _1951)) + _2623.w) / _2686;
                                float _2746 = (fma(_1953, _2639.z, fma(_1952, _2639.y, _2639.x * _1951)) + _2639.w) / _2686;
                                float _2750 = 1.0 - dot(vec2(_2745, _2746), vec2(_2745, _2746));
                                float _3707 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                                float _2751 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                                float _2752 = _2751 * (((isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))) * _2728) / ((_2741 * 0.699999988079071044921875) + 1.0));
                                float _2762 = dot(vec3(_354, _357, _360), vec3((-0.0) - (_1951 * _2243), (-0.0) - (_1952 * _2243), (-0.0) - (_1953 * _2243)));
                                float _3718 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                                float _2770 = (_2736 * dot(vec3(_354, _357, _360), vec3(_2721, _2722, _2723))) + _2735;
                                float _3729 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                                float _2771 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                                float _2775 = (0.5 / (((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) + 9.9999999392252902907785028219223e-09) + _2771)) * _2771;
                                float _3740 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0));
                                float _2782 = (_2751 * _2728) * (((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 3.1415927410125732421875) / ((_2741 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_85_pred = _2752 * _2595.z;
                                frontier_phi_85_pred_1 = _2752 * _2595.y;
                                frontier_phi_85_pred_2 = _2752 * _2595.x;
                                frontier_phi_85_pred_3 = _2782 * _2607.z;
                                frontier_phi_85_pred_4 = _2782 * _2607.y;
                                frontier_phi_85_pred_5 = _2782 * _2607.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _2791 = frontier_phi_85_pred;
                            _2790 = frontier_phi_85_pred_1;
                            _2789 = frontier_phi_85_pred_2;
                            _2788 = frontier_phi_85_pred_3;
                            _2787 = frontier_phi_85_pred_4;
                            _2786 = frontier_phi_85_pred_5;
                            _2537 = _2789 + _2550;
                            _2538 = _2790 + _2551;
                            _2539 = _2791 + _2552;
                            _2534 = _2786 + _2547;
                            _2535 = _2787 + _2548;
                            _2536 = _2788 + _2549;
                            if (_2554 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2547 = _2534;
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2537;
                                _2551 = _2538;
                                _2552 = _2539;
                                _2553 = _2554;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2539;
                        frontier_phi_79_pred_1 = _2538;
                        frontier_phi_79_pred_2 = _2537;
                        frontier_phi_79_pred_3 = _2536;
                        frontier_phi_79_pred_4 = _2535;
                        frontier_phi_79_pred_5 = _2534;
                    }
                    _2229 = frontier_phi_79_pred;
                    _2227 = frontier_phi_79_pred_1;
                    _2225 = frontier_phi_79_pred_2;
                    _2223 = frontier_phi_79_pred_3;
                    _2221 = frontier_phi_79_pred_4;
                    _2219 = frontier_phi_79_pred_5;
                    uint _2382 = _2381 + 1u;
                    if (_2382 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2375 = _2219;
                        _2376 = _2221;
                        _2377 = _2223;
                        _2378 = _2225;
                        _2379 = _2227;
                        _2380 = _2229;
                        _2381 = _2382;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2225;
                frontier_phi_60_61_ladder_1 = _2229;
                frontier_phi_60_61_ladder_2 = _2227;
                frontier_phi_60_61_ladder_3 = _2223;
                frontier_phi_60_61_ladder_4 = _2221;
                frontier_phi_60_61_ladder_5 = _2219;
            }
            else
            {
                frontier_phi_60_61_ladder = _2103;
                frontier_phi_60_61_ladder_1 = _2107;
                frontier_phi_60_61_ladder_2 = _2105;
                frontier_phi_60_61_ladder_3 = _2101;
                frontier_phi_60_61_ladder_4 = _2099;
                frontier_phi_60_61_ladder_5 = _2097;
            }
            _2218 = frontier_phi_60_61_ladder_5;
            _2220 = frontier_phi_60_61_ladder_4;
            _2222 = frontier_phi_60_61_ladder_3;
            _2224 = frontier_phi_60_61_ladder;
            _2226 = frontier_phi_60_61_ladder_2;
            _2228 = frontier_phi_60_61_ladder_1;
        }
        float _2233 = isnan(1.0) ? _399 : (isnan(_399) ? 1.0 : min(_399, 1.0));
        _2009 = (_2233 * _2224) + _1573;
        _2011 = (_2233 * _2226) + _1575;
        _2013 = (_2233 * _2228) + _1577;
        _2015 = ((_2218 * 0.039999999105930328369140625) * _2233) + _1822;
        _2017 = ((_2220 * 0.039999999105930328369140625) * _2233) + _1824;
        _2019 = ((_2222 * 0.039999999105930328369140625) * _2233) + _1826;
    }
    else
    {
        _2009 = _1573;
        _2011 = _1575;
        _2013 = _1577;
        _2015 = _1822;
        _2017 = _1824;
        _2019 = _1826;
    }
    float _3756 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _3767 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _3778 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _2036 = ((isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_2009 + ((isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0))) * _399))) + ((_2015 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    float _2037 = ((isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0))) * (_2011 + ((isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0))) * _399))) + ((_2017 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    float _2038 = ((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_2013 + ((isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0))) * _399))) + ((_2019 + ((isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0))) * _1209)) * cbPerFrame._m0[3u].x);
    uint _2039 = _373 + 6u;
    float _2047 = _333 / cbSceneParam._m0[86u].x;
    float _2048 = _334 / cbSceneParam._m0[86u].y;
    vec4 _2062 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2047, _2048, (log2((isnan(cbSceneParam._m0[77u].w) ? _255 : (isnan(_255) ? cbSceneParam._m0[77u].w : min(_255, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2064 = _2062.x;
    float _2065 = _2062.y;
    float _2066 = _2062.z;
    float _2067 = _2062.w;
    float _2159;
    float _2161;
    float _2163;
    float _2165;
    if (_255 > cbSceneParam._m0[78u].w)
    {
        float _2122 = isnan(_255) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _255 : min(cbSceneParam._m0[80u].w, _255));
        float _2123 = _2122 / _255;
        float _2134 = _2123 * _306;
        float _2135 = _307 * _2123;
        float _2136 = (-0.0) - _2135;
        float _2137 = _2123 * _308;
        float _2139 = (cbSceneParam._m0[77u].w * _2136) / _2122;
        float _2140 = _2139 + cbSceneParam._m0[79u].w;
        float _2141 = cbSceneParam._m0[79u].w - _2135;
        float _2147 = sqrt(((_2134 * _2134) + (_2135 * _2135)) + (_2137 * _2137));
        float _2150 = (1.0 - (cbSceneParam._m0[77u].w / _2122)) * _2147;
        float _2155 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2157 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2332;
        if (abs((_2136 - _2139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2332 = ((((_2140 > 0.0) ? exp2(_2155 * _2140) : (2.0 - exp2(_2157 * _2140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2150;
        }
        else
        {
            float _2276 = 1.0 / cbSceneParam._m0[80u].x;
            float _2277 = isnan(_2141) ? _2140 : (isnan(_2140) ? _2141 : max(_2140, _2141));
            float _2278 = isnan(_2141) ? _2140 : (isnan(_2140) ? _2141 : min(_2140, _2141));
            float _2287 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : min(_2277, 0.0));
            float _2288 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : min(_2278, 0.0));
            _2332 = ((abs(_2147 / _2136) * cbSceneParam._m0[80u].y) * ((((_2287 - _2288) * 2.0) - ((exp2(_2155 * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)))) - exp2(_2155 * (isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))))) * _2276)) - ((exp2(_2157 * _2287) - exp2(_2157 * _2288)) * _2276))) + (_2150 * cbSceneParam._m0[80u].z);
        }
        vec4 _2334 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2047, _2048, 1.0), 0.0);
        float _2343 = exp2((_2332 * (-1.44269502162933349609375)) * (1.0 - _2334.w));
        float _2344 = log2(_2343);
        float _2360 = log2(_2067);
        _2159 = (exp2(_2360 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2344 * cbSceneParam._m0[78u].x)) * _2334.x) / cbSceneParam._m0[78u].x)) + _2064;
        _2161 = (exp2(_2360 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2344 * cbSceneParam._m0[78u].y)) * _2334.y) / cbSceneParam._m0[78u].y)) + _2065;
        _2163 = (exp2(_2360 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2344 * cbSceneParam._m0[78u].z)) * _2334.z) / cbSceneParam._m0[78u].z)) + _2066;
        _2165 = _2343 * _2067;
    }
    else
    {
        _2159 = _2064;
        _2161 = _2065;
        _2163 = _2066;
        _2165 = _2067;
    }
    bool _2370;
    vec4 _2175;
    vec4 _2197;
    float _2199;
    float _2203;
    float _2204;
    float _2205;
    float _2206;
    bool _2217;
    for (;;)
    {
        _2175 = cbMatDynParam._m0[0u];
        float _2177 = roundEven(_2175.y);
        bool _2178 = _2177 == 3.0;
        float _2179 = log2(_2165);
        float _2186 = exp2(_2179 * cbSceneParam._m0[78u].x) * _2036;
        float _2187 = exp2(_2179 * cbSceneParam._m0[78u].y) * _2037;
        float _2188 = exp2(_2179 * cbSceneParam._m0[78u].z) * _2038;
        float _2195 = _322 + (-0.5);
        _2197 = cbMtdParam._m0[1u];
        _2199 = _2197.y * _2195;
        float _2202 = (_2177 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2203 = _2202 * (_2178 ? _2186 : (_2186 + (cbSceneParam._m0[72u].w * _2159)));
        _2204 = _2202 * (_2178 ? _2187 : (_2187 + (cbSceneParam._m0[72u].w * _2161)));
        _2205 = _2202 * (_2178 ? _2188 : (_2188 + (cbSceneParam._m0[72u].w * _2163)));
        _2206 = _2195 * 0.999000012874603271484375;
        _2217 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2217)
        {
            if ((cbInstanceData._m0[_373 + 7u].x + _2206) < 0.5)
            {
                _2370 = true;
                break;
            }
        }
        uint _2311 = _375 + uint(_2175.w);
        if ((cbInstanceData._m0[_2311].w < 1.0) && ((cbInstanceData._m0[_2311].w + _2206) < 0.5))
        {
            _2370 = true;
            break;
        }
        if ((_2199 + 1.0) < _2197.x)
        {
            _2370 = true;
            break;
        }
        _2370 = false;
        break;
    }
    float _2525;
    if (_2370)
    {
        discard_state = true;
        _2525 = 0.0;
    }
    else
    {
        _2525 = cbInstanceData._m0[_2039].w;
    }
    SV_Target.x = _2203;
    SV_Target.y = _2204;
    SV_Target.z = _2205;
    SV_Target.w = _2525;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2039].w;
    discard_exit();
}


