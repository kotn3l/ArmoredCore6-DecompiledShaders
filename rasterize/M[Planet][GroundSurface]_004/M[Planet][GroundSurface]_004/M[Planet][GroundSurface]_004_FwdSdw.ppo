#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1314;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _276 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _286 = cbSceneParam._m0[71u].x - (_264 / _276);
    float _287 = cbSceneParam._m0[71u].y - (_268 / _276);
    float _288 = cbSceneParam._m0[71u].z - (_272 / _276);
    uvec4 _292 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _294 = _292.z != 0u;
    vec4 _315 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _315.x;
    float _319 = _315.y;
    float _320 = _315.z;
    bool _341 = _292.x != 0u;
    vec4 _360 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _362 = _360.x;
    float _363 = _360.y;
    float _364 = _360.z;
    float _380 = _341 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[9u].w - _362)) + _362) : (_362 * cbMtdParam._m0[9u].w);
    float _381 = _341 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[10u].x - _363)) + _363) : (_363 * cbMtdParam._m0[10u].x);
    float _382 = _341 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[10u].y - _364)) + _364) : (_364 * cbMtdParam._m0[10u].y);
    bool _384 = _292.y != 0u;
    vec4 _400 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _402 = _400.x;
    float _403 = _400.y;
    float _404 = _400.z;
    vec4 _432 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _434 = _432.x;
    float _435 = _432.y;
    float _443 = ((cbMtdParam._m0[17u].y * (-1.39999997615814208984375)) * (1.0 - _434)) + 1.0;
    float _3933 = isnan(0.0) ? _443 : (isnan(_443) ? 0.0 : max(_443, 0.0));
    float _451 = (cbMtdParam._m0[16u].z * ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) - _434)) + _434;
    float _458 = (_451 * ((_384 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[10u].w - _402)) + _402) : (_402 * cbMtdParam._m0[10u].w)) - _380)) + _380;
    float _459 = (_451 * ((_384 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[11u].x - _403)) + _403) : (_403 * cbMtdParam._m0[11u].x)) - _381)) + _381;
    float _460 = (_451 * ((_384 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[11u].y - _404)) + _404) : (_404 * cbMtdParam._m0[11u].y)) - _382)) + _382;
    float _464 = (((1.0 - _435) * (-1.39999997615814208984375)) * cbMtdParam._m0[17u].x) + 1.0;
    float _3944 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _472 = (cbMtdParam._m0[13u].w * ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) - _435)) + _435;
    float _479 = (_472 * ((_294 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].w - _318)) + _318) : (_318 * cbMtdParam._m0[11u].w)) - _458)) + _458;
    float _480 = (_472 * ((_294 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[12u].x - _319)) + _319) : (_319 * cbMtdParam._m0[12u].x)) - _459)) + _459;
    float _481 = (_472 * ((_294 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[12u].y - _320)) + _320) : (_320 * cbMtdParam._m0[12u].y)) - _460)) + _460;
    vec4 _493 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _510 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _517 = cbMtdParam._m0[15u].x * _510.x;
    float _524 = (_517 * (_493.x - _479)) + _479;
    float _525 = (_517 * (_493.y - _480)) + _480;
    float _526 = (_517 * (_493.z - _481)) + _481;
    float _537 = inversesqrt(dot(vec3(_286, _287, _288), vec3(_286, _287, _288)));
    float _541 = dot(vec4(_537 * _286, _537 * _287, _537 * _288, 0.0), vec4(_229, _230, _231, 0.0));
    float _544 = _541 - cbMtdParam._m0[14u].w;
    float _3955 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _554 = (exp2(log2(1.0 - (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].z : (isnan(cbMtdParam._m0[14u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[15u].z - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _564 = (((_554 * cbMtdParam._m0[12u].w) - _524) * _554) + _524;
    float _565 = (((_554 * cbMtdParam._m0[13u].x) - _525) * _554) + _525;
    float _566 = (((_554 * cbMtdParam._m0[13u].y) - _526) * _554) + _526;
    float _570 = _541 - cbMtdParam._m0[16u].y;
    float _3971 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _579 = exp2(log2((1.0 - exp2(log2(1.0 - (isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0)))))) * cbMtdParam._m0[16u].w) * cbMtdParam._m0[16u].x);
    float _3982 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _580 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    vec4 _592 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _609 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _611 = _609.x;
    float _612 = _609.y;
    float _613 = _609.z;
    float _620 = ((_592.x - _611) * _451) + _611;
    float _621 = ((_592.y - _612) * _451) + _612;
    float _622 = ((_592.z - _613) * _451) + _613;
    vec4 _634 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _660 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _672 = (((_634.x - _620) * _472) + _620) + ((_660.x + (-0.5)) * cbMtdParam._m0[17u].z);
    float _673 = (((_634.y - _621) * _472) + _621) + ((_660.y + (-0.5)) * cbMtdParam._m0[17u].z);
    float _674 = (((_634.z - _622) * _472) + _622) + ((_660.z + (-0.5)) * cbMtdParam._m0[17u].z);
    vec4 _687 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _698 = ((_687.x - _672) * _517) + _672;
    float _699 = ((_687.y - _673) * _517) + _673;
    float _700 = ((_687.z - _674) * _517) + _674;
    float _710 = ((1.0 - _700) * _554) + _700;
    float _714 = ((((0.502016007900238037109375 - _698) * _554) + _698) * 2.0) + (-1.0);
    float _716 = ((((0.502016007900238037109375 - _699) * _554) + _699) * 2.0) + (-1.0);
    float _717 = dot(vec2(_714, _716), vec2(_714, _716));
    float _3993 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _722 = sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))));
    float _727 = inversesqrt(dot(vec3(_264, _268, _272), vec3(_264, _268, _272)));
    float _740 = inversesqrt(dot(vec3(cbMtdParam._m0[18u].xyz), vec3(cbMtdParam._m0[18u].xyz)));
    float _741 = _740 * cbMtdParam._m0[18u].x;
    float _742 = _740 * cbMtdParam._m0[18u].y;
    float _743 = _740 * cbMtdParam._m0[18u].z;
    float _747 = inversesqrt(dot(vec3(_741, _742, _743), vec3(_741, _742, _743)));
    float _748 = _747 * _741;
    float _749 = _747 * _742;
    float _750 = _747 * _743;
    float _754 = inversesqrt(dot(vec3(_748, _749, _750), vec3(_748, _749, _750)));
    float _770 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_727 * _264, _727 * _268, _727 * _272, 0.0), vec4(_754 * _748, _754 * _749, _754 * _750, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _4004 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _772 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _778 = exp2(log2(_772 * 6.5) * 7.0);
    float _4015 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _780 = (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0))) + _772;
    float _4026 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _781 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
    float _784 = fma(_722, _229, fma(_716, _221 * TANGENT.x, (_207 * _200) * _714));
    float _787 = fma(_722, _230, fma(_716, _221 * TANGENT.y, (_207 * _201) * _714));
    float _790 = fma(_722, _231, fma(_716, _221 * TANGENT.z, (_207 * _202) * _714));
    float _794 = inversesqrt(dot(vec3(_784, _787, _790), vec3(_784, _787, _790)));
    float _795 = _794 * _784;
    float _796 = _794 * _787;
    float _797 = _794 * _790;
    float _4037 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _798 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
    float _4048 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _799 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _4059 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4070 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _4081 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _817 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _866 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _867 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _872 = inversesqrt(dot(vec3(_866, _867, _868), vec3(_866, _867, _868)));
    float _873 = _866 * _872;
    float _874 = _867 * _872;
    float _875 = _868 * _872;
    float _881 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _882 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _900 = fma(_797, cbSceneParam._m0[5u].z, fma(_796, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _795));
    float _903 = fma(_797, cbSceneParam._m0[6u].z, fma(_796, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _795));
    float _906 = fma(_797, cbSceneParam._m0[7u].z, fma(_796, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _795));
    uint _919 = uint(roundEven(NORMAL.w)) * 13u;
    uint _920 = _919 + 9u;
    uint _921 = _920 + uint(cbMatDynParam._m0[0u].w);
    float _927 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * cbInstanceData._m0[_921].x;
    float _928 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0)))) * cbInstanceData._m0[_921].y;
    float _929 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0)))) * cbInstanceData._m0[_921].z;
    float _4092 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    float _4114 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _881, cbSceneParam._m0[86u].y * _882));
    float _944 = _941.x * TEXCOORD.z;
    float _945 = dot(vec3(_795, _796, _797), vec3(_873, _874, _875));
    float _948 = _945 * 2.0;
    float _952 = (_948 * _795) - _873;
    float _953 = (_948 * _796) - _874;
    float _954 = (_948 * _797) - _875;
    float _958 = abs(dot(vec3(_873, _874, _875), vec3(_795, _796, _797)));
    float _4125 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _960 = sqrt(_799);
    float _973 = exp2((_960 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_960 * 3.0));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1013 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1313;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1040 = fma(_1013, cbModelParam._m0[26u].z, fma(_1009, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1005));
        float _1044 = fma(_1013, cbModelParam._m0[27u].z, fma(_1009, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1005));
        float _1048 = fma(_1013, cbModelParam._m0[28u].z, fma(_1009, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1005));
        float _1071 = _1005 + _795;
        float _1072 = _1009 + _796;
        float _1073 = _1013 + _797;
        float _1083 = fma(_1073, cbModelParam._m0[26u].z, fma(_1072, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1071)) - _1040;
        float _1084 = fma(_1073, cbModelParam._m0[27u].z, fma(_1072, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1071)) - _1044;
        float _1085 = fma(_1073, cbModelParam._m0[28u].z, fma(_1072, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1071)) - _1048;
        float _1089 = inversesqrt(dot(vec3(_1083, _1084, _1085), vec3(_1083, _1084, _1085)));
        float _1102 = ((_1089 * _1083) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1040 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1089 * _1084) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1044 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1089 * _1085) / cbModelParam._m0[34u].z) + ((((((_1048 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1102, _1103, _1104), 0.0);
        float _1141 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1107.x + (-0.5));
        float _1143 = _1141 * (_1107.y + (-0.5));
        float _1144 = _1141 * (_1107.z + (-0.5));
        float _1151 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1114.x + (-0.5));
        float _1153 = _1151 * (_1114.y + (-0.5));
        float _1154 = _1151 * (_1114.z + (-0.5));
        float _1161 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1162 = _1161 * (_1121.x + (-0.5));
        float _1163 = _1161 * (_1121.y + (-0.5));
        float _1164 = _1161 * (_1121.z + (-0.5));
        float _1171 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1172 = _1171 * (_1128.x + (-0.5));
        float _1173 = _1171 * (_1128.y + (-0.5));
        float _1174 = _1171 * (_1128.z + (-0.5));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = _1142 * 0.5;
        float _1179 = _1152 * 0.5;
        float _1180 = _1162 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1195 = (dot(vec3(_795, _796, _797), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _4151 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1205 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _4162 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _4173 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_1207 + 1.0))) + _1212) * _1175;
        float _1222 = _1143 * 0.5;
        float _1223 = _1153 * 0.5;
        float _1224 = _1163 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_795, _796, _797), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _4184 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _4195 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _4206 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0))) * (_1249 + 1.0))) + _1254) * _1176;
        float _1264 = _1144 * 0.5;
        float _1265 = _1154 * 0.5;
        float _1266 = _1164 * 0.5;
        float _1267 = dot(vec3(_1264, _1265, _1266), vec3(_1264, _1265, _1266));
        float _1272 = (_1267 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1267);
        float _1280 = (dot(vec3(_795, _796, _797), vec3(_1272 * _1264, _1272 * _1265, _1272 * _1266)) + 1.0) * 0.5;
        float _4217 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1289 = sqrt(((_1265 * _1265) + (_1264 * _1264)) + (_1266 * _1266)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _4228 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1291 = _1290 * 2.0;
        float _1295 = (1.0 - _1290) / (_1290 + 1.0);
        float _4239 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1305 = ((((1.0 - _1296) * (_1291 + 2.0)) * exp2(log2(isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * (_1291 + 1.0))) + _1296) * _1177;
        _1313 = _1144;
        _1315 = _1143;
        _1316 = _1142;
        _1317 = _1154;
        _1318 = _1153;
        _1319 = _1152;
        _1320 = _1164;
        _1321 = _1163;
        _1322 = _1162;
        _1323 = _1177;
        _1324 = _1176;
        _1325 = _1175;
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)));
    }
    else
    {
        _1313 = _1314;
        _1315 = _1314;
        _1316 = _1314;
        _1317 = _1314;
        _1318 = _1314;
        _1319 = _1314;
        _1320 = _1314;
        _1321 = _1314;
        _1322 = _1314;
        _1323 = _1314;
        _1324 = _1314;
        _1325 = _1314;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1354 = fma(_1013, cbModelParam._m0[30u].z, fma(_1009, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1005));
        float _1358 = fma(_1013, cbModelParam._m0[31u].z, fma(_1009, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1005));
        float _1362 = fma(_1013, cbModelParam._m0[32u].z, fma(_1009, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1005));
        float _1385 = _1005 + _795;
        float _1386 = _1009 + _796;
        float _1387 = _1013 + _797;
        float _1397 = fma(_1387, cbModelParam._m0[30u].z, fma(_1386, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1385)) - _1354;
        float _1398 = fma(_1387, cbModelParam._m0[31u].z, fma(_1386, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1385)) - _1358;
        float _1399 = fma(_1387, cbModelParam._m0[32u].z, fma(_1386, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1385)) - _1362;
        float _1403 = inversesqrt(dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399)));
        float _1416 = ((_1403 * _1397) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1354 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1417 = ((_1403 * _1398) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1358 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1418 = ((_1403 * _1399) / cbModelParam._m0[35u].z) + ((((((_1362 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1416, _1417, _1418), 0.0);
        float _1453 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1420.x + (-0.5));
        float _1455 = _1453 * (_1420.y + (-0.5));
        float _1456 = _1453 * (_1420.z + (-0.5));
        float _1463 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1427.x + (-0.5));
        float _1465 = _1463 * (_1427.y + (-0.5));
        float _1466 = _1463 * (_1427.z + (-0.5));
        float _1473 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1434.x + (-0.5));
        float _1475 = _1473 * (_1434.y + (-0.5));
        float _1476 = _1473 * (_1434.z + (-0.5));
        float _1483 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1441.x + (-0.5));
        float _1485 = _1483 * (_1441.y + (-0.5));
        float _1486 = _1483 * (_1441.z + (-0.5));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1489 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1490 = _1454 * 0.5;
        float _1491 = _1464 * 0.5;
        float _1492 = _1474 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_795, _796, _797), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _4302 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1517 + 1.0))) + _1522) * _1487;
        float _1532 = _1455 * 0.5;
        float _1533 = _1465 * 0.5;
        float _1534 = _1475 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_795, _796, _797), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1488 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _4335 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1559 + 1.0))) + _1564) * _1488;
        float _1574 = _1456 * 0.5;
        float _1575 = _1466 * 0.5;
        float _1576 = _1476 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1590 = (dot(vec3(_795, _796, _797), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4346 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1599 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1489 + 9.9999997473787516355514526367188e-06);
        float _4357 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4368 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_1601 + 1.0))) + _1606) * _1489;
        _1623 = _1456;
        _1624 = _1455;
        _1625 = _1454;
        _1626 = _1466;
        _1627 = _1465;
        _1628 = _1464;
        _1629 = _1476;
        _1630 = _1475;
        _1631 = _1474;
        _1632 = _1489;
        _1633 = _1488;
        _1634 = _1487;
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1636 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
        _1637 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
    }
    else
    {
        _1623 = _1314;
        _1624 = _1314;
        _1625 = _1314;
        _1626 = _1314;
        _1627 = _1314;
        _1628 = _1314;
        _1629 = _1314;
        _1630 = _1314;
        _1631 = _1314;
        _1632 = _1314;
        _1633 = _1314;
        _1634 = _1314;
        _1635 = 0.0;
        _1636 = 0.0;
        _1637 = 0.0;
    }
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1326)) + _1326;
    float _1648 = (cbModelParam._m0[1u].x * (_1636 - _1327)) + _1327;
    float _1649 = (cbModelParam._m0[1u].x * (_1637 - _1328)) + _1328;
    float _1670 = fma(_1649, cbSceneParam._m0[89u].z, fma(_1648, cbSceneParam._m0[89u].y, _1647 * cbSceneParam._m0[89u].x));
    float _1673 = fma(_1649, cbSceneParam._m0[90u].z, fma(_1648, cbSceneParam._m0[90u].y, _1647 * cbSceneParam._m0[90u].x));
    float _1676 = fma(_1649, cbSceneParam._m0[91u].z, fma(_1648, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1647));
    float _1691 = _952 * 0.5;
    float _1692 = _953 * 0.5;
    float _1693 = _954 * 0.5;
    float _1694 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1625, _1628, _1631, _1634));
    float _1697 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1624, _1627, _1630, _1633));
    float _1700 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1734;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1707 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1313, _1317, _1320, _1323));
        float _1711 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1315, _1318, _1321, _1324));
        float _1715 = dot(vec4(_1691, _1692, _1693, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1722 = dot(vec4(cbModelParam._m0[39u]), vec4(_1691, _1692, _1693, 1.0));
        _1734 = dot(vec3(isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1722) ? 0.0 : (isnan(0.0) ? _1722 : max(0.0, _1722))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1734 = 1.0;
    }
    float _1745;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1736 = dot(vec4(cbModelParam._m0[40u]), vec4(_1691, _1692, _1693, 1.0));
        _1745 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)), isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1736) ? 0.0 : (isnan(0.0) ? _1736 : max(0.0, _1736))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1745 = 1.0;
    }
    float _1749 = (_1745 * cbModelParam._m0[1u].x) + (_1734 * (1.0 - cbModelParam._m0[1u].x));
    float _1759 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1759 : min(cbModelParam._m0[25u].z, _1759));
    float _1840;
    float _1842;
    float _1844;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1807 = fma(_1013, cbModelParam._m0[13u].z, fma(_1009, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1005)) + cbModelParam._m0[13u].w;
        float _1811 = fma(_1013, cbModelParam._m0[14u].z, fma(_1009, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1005)) + cbModelParam._m0[14u].w;
        float _1815 = fma(_1013, cbModelParam._m0[15u].z, fma(_1009, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1005)) + cbModelParam._m0[15u].w;
        float _1818 = fma(_954, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952));
        float _1821 = fma(_954, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952));
        float _1824 = fma(_954, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952));
        float _1852;
        if (_1818 > 0.0)
        {
            _1852 = abs((1.0 - _1807) / _1818);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1807 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1852 = frontier_phi_16_14_ladder;
        }
        float _2023;
        if (_1821 > 0.0)
        {
            _2023 = abs((1.0 - _1811) / _1821);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1811 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2023 = frontier_phi_25_21_ladder;
        }
        float _2318;
        if (_1824 > 0.0)
        {
            _2318 = abs((1.0 - _1815) / _1824);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1815 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2318 = frontier_phi_37_32_ladder;
        }
        float _2320 = isnan(_2023) ? _1852 : (isnan(_1852) ? _2023 : min(_1852, _2023));
        float _2321 = isnan(_2318) ? _2320 : (isnan(_2320) ? _2318 : min(_2320, _2318));
        float _2325 = (_2321 * _1818) + _1807;
        float _2326 = (_2321 * _1821) + _1811;
        float _2327 = (_2321 * _1824) + _1815;
        float _2328 = _2321 * 9.9999997473787516355514526367188e-05;
        float _2330 = (-1.0) - _2328;
        float _2332 = _2328 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2327 > _2332) || ((_2327 < _2330) || ((_2326 > _2332) || ((_2326 < _2330) || ((_2325 < _2330) || (_2325 > _2332))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2472 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2327, cbModelParam._m0[9u].z, fma(_2326, cbModelParam._m0[9u].y, _2325 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2327, cbModelParam._m0[10u].z, fma(_2326, cbModelParam._m0[10u].y, _2325 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2327, cbModelParam._m0[11u].z, fma(_2326, cbModelParam._m0[11u].y, _2325 * cbModelParam._m0[11u].x))), _1760);
            frontier_phi_15_37_ladder = _2472.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2472.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2472.z * cbModelParam._m0[1u].y;
        }
        _1840 = frontier_phi_15_37_ladder_1;
        _1842 = frontier_phi_15_37_ladder;
        _1844 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_952, _953, _954), _1760);
        _1840 = _1828.x * cbModelParam._m0[1u].y;
        _1842 = _1828.y * cbModelParam._m0[1u].y;
        _1844 = _1828.z * cbModelParam._m0[1u].y;
    }
    float _1848 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1849 = isnan(_1848) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1848 : min(cbModelParam._m0[25u].w, _1848));
    float _1940;
    float _1942;
    float _1944;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1904 = fma(_1013, cbModelParam._m0[21u].z, fma(_1009, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1005)) + cbModelParam._m0[21u].w;
        float _1908 = fma(_1013, cbModelParam._m0[22u].z, fma(_1009, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1005)) + cbModelParam._m0[22u].w;
        float _1912 = fma(_1013, cbModelParam._m0[23u].z, fma(_1009, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1005)) + cbModelParam._m0[23u].w;
        float _1915 = fma(_954, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952));
        float _1918 = fma(_954, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952));
        float _1921 = fma(_954, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952));
        float _2028;
        if (_1915 > 0.0)
        {
            _2028 = abs((1.0 - _1904) / _1915);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1915 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1904 + 1.0) / _1915);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2028 = frontier_phi_27_23_ladder;
        }
        float _2345;
        if (_1918 > 0.0)
        {
            _2345 = abs((1.0 - _1908) / _1918);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1918 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1908 + 1.0) / _1918);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2345 = frontier_phi_39_34_ladder;
        }
        float _2672;
        if (_1921 > 0.0)
        {
            _2672 = abs((1.0 - _1912) / _1921);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1912 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2672 = frontier_phi_49_46_ladder;
        }
        float _2674 = isnan(_2345) ? _2028 : (isnan(_2028) ? _2345 : min(_2028, _2345));
        float _2675 = isnan(_2672) ? _2674 : (isnan(_2674) ? _2672 : min(_2674, _2672));
        float _2679 = (_2675 * _1915) + _1904;
        float _2680 = (_2675 * _1918) + _1908;
        float _2681 = (_2675 * _1921) + _1912;
        float _2682 = _2675 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2682;
        float _2685 = _2682 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2681 > _2685) || ((_2681 < _2683) || ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 < _2683) || (_2679 > _2685))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2681, cbModelParam._m0[17u].z, fma(_2680, cbModelParam._m0[17u].y, _2679 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2681, cbModelParam._m0[18u].z, fma(_2680, cbModelParam._m0[18u].y, _2679 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2681, cbModelParam._m0[19u].z, fma(_2680, cbModelParam._m0[19u].y, _2679 * cbModelParam._m0[19u].x))), _1849);
            frontier_phi_24_49_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1940 = frontier_phi_24_49_ladder_2;
        _1942 = frontier_phi_24_49_ladder_1;
        _1944 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_952, _953, _954), _1849);
        _1940 = _1924.x * cbModelParam._m0[1u].z;
        _1942 = _1924.y * cbModelParam._m0[1u].z;
        _1944 = _1924.z * cbModelParam._m0[1u].z;
    }
    float _1956 = ((((1.0 - _973) * ((_960 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_973 * _960)) * _944;
    float _1957 = _1956 * ((cbModelParam._m0[1u].w * (_1940 - _1840)) + _1840);
    float _1958 = _1956 * ((cbModelParam._m0[1u].w * (_1942 - _1842)) + _1842);
    float _1959 = _1956 * ((cbModelParam._m0[1u].w * (_1944 - _1844)) + _1844);
    float _1962 = fma(_1959, cbSceneParam._m0[89u].z, fma(_1958, cbSceneParam._m0[89u].y, _1957 * cbSceneParam._m0[89u].x));
    float _1965 = fma(_1959, cbSceneParam._m0[90u].z, fma(_1958, cbSceneParam._m0[90u].y, _1957 * cbSceneParam._m0[90u].x));
    float _1968 = fma(_1959, cbSceneParam._m0[91u].z, fma(_1958, cbSceneParam._m0[91u].y, _1957 * cbSceneParam._m0[91u].x));
    float _2002 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2006 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2010 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2014 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2015 = _2002 / _2014;
    float _2016 = _2006 / _2014;
    float _2017 = _2010 / _2014;
    float _2164;
    float _2165;
    float _2166;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2044 = ((uint(_2017 > cbSceneParam._m0[59u].y) + uint(_2017 > cbSceneParam._m0[59u].x)) + uint(_2017 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2045 = _2044 + 43u;
        uint _2053 = _2044 + 44u;
        uint _2061 = _2044 + 45u;
        uint _2069 = _2044 + 46u;
        float _2080 = fma(_2014, cbSceneParam._m0[_2045].w, fma(_2010, cbSceneParam._m0[_2045].z, fma(_2006, cbSceneParam._m0[_2045].y, _2002 * cbSceneParam._m0[_2045].x)));
        float _2084 = fma(_2014, cbSceneParam._m0[_2053].w, fma(_2010, cbSceneParam._m0[_2053].z, fma(_2006, cbSceneParam._m0[_2053].y, _2002 * cbSceneParam._m0[_2053].x)));
        float _2092 = fma(_2014, cbSceneParam._m0[_2069].w, fma(_2010, cbSceneParam._m0[_2069].z, fma(_2006, cbSceneParam._m0[_2069].y, _2002 * cbSceneParam._m0[_2069].x)));
        float _2097 = cbSceneParam._m0[33u].z * _2092;
        float _2099 = cbSceneParam._m0[33u].w * _2092;
        float _2102 = fma(_2014, cbSceneParam._m0[_2061].w, fma(_2010, cbSceneParam._m0[_2061].z, fma(_2006, cbSceneParam._m0[_2061].y, _2002 * cbSceneParam._m0[_2061].x))) / _2092;
        float _2150 = (cbSceneParam._m0[33u].x - sqrt(((_2016 * _2016) + (_2015 * _2015)) + (_2017 * _2017))) * cbSceneParam._m0[33u].y;
        float _4494 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2157 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2097 + _2080) / _2092, (_2099 + _2084) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2099 + _2080) / _2092, (_2084 - _2097) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 - _2097) / _2092, (_2084 - _2099) / _2092), _2102), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2080 - _2099) / _2092, (_2097 + _2084) / _2092), _2102), 0.0)).x), vec4(0.25)));
        _2164 = 1.0 - (_2157 * cbSceneParam._m0[34u].x);
        _2165 = 1.0 - (_2157 * cbSceneParam._m0[34u].y);
        _2166 = 1.0 - (_2157 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2164 = 1.0;
        _2165 = 1.0;
        _2166 = 1.0;
    }
    float _2230;
    float _2232;
    float _2234;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2218 = fma(_2014, cbSceneParam._m0[63u].w, fma(_2010, cbSceneParam._m0[63u].z, fma(_2006, cbSceneParam._m0[63u].y, _2002 * cbSceneParam._m0[63u].x)));
        float _2219 = fma(_2014, cbSceneParam._m0[60u].w, fma(_2010, cbSceneParam._m0[60u].z, fma(_2006, cbSceneParam._m0[60u].y, _2002 * cbSceneParam._m0[60u].x))) / _2218;
        float _2220 = fma(_2014, cbSceneParam._m0[61u].w, fma(_2010, cbSceneParam._m0[61u].z, fma(_2006, cbSceneParam._m0[61u].y, _2002 * cbSceneParam._m0[61u].x))) / _2218;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2219 >= cbSceneParam._m0[64u].x) && (_2220 >= cbSceneParam._m0[64u].y)) && (_2219 <= cbSceneParam._m0[64u].z)) && (_2220 <= cbSceneParam._m0[64u].w))
        {
            float _2358 = fma(_2014, cbSceneParam._m0[62u].w, fma(_2010, cbSceneParam._m0[62u].z, fma(_2006, cbSceneParam._m0[62u].y, _2002 * cbSceneParam._m0[62u].x))) / _2218;
            float _2362 = isnan(cbSceneParam._m0[41u].w) ? _2358 : (isnan(_2358) ? cbSceneParam._m0[41u].w : max(_2358, cbSceneParam._m0[41u].w));
            float _2405 = (cbSceneParam._m0[33u].x - sqrt(((_2016 * _2016) + (_2015 * _2015)) + (_2017 * _2017))) * cbSceneParam._m0[33u].y;
            float _4510 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
            float _2412 = (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2219, cbSceneParam._m0[33u].w + _2220), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2219, _2220 - cbSceneParam._m0[33u].z), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2219 - cbSceneParam._m0[33u].z, _2220 - cbSceneParam._m0[33u].w), _2362), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2219 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2220), _2362), 0.0)).x), vec4(0.25)));
            float _2416 = 1.0 - (_2412 * cbSceneParam._m0[34u].x);
            float _2417 = 1.0 - (_2412 * cbSceneParam._m0[34u].y);
            float _2418 = 1.0 - (_2412 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2417) ? _2165 : (isnan(_2165) ? _2417 : min(_2165, _2417));
            frontier_phi_36_35_ladder_1 = isnan(_2418) ? _2166 : (isnan(_2166) ? _2418 : min(_2166, _2418));
            frontier_phi_36_35_ladder_2 = isnan(_2416) ? _2164 : (isnan(_2164) ? _2416 : min(_2164, _2416));
        }
        else
        {
            frontier_phi_36_35_ladder = _2165;
            frontier_phi_36_35_ladder_1 = _2166;
            frontier_phi_36_35_ladder_2 = _2164;
        }
        _2230 = frontier_phi_36_35_ladder_2;
        _2232 = frontier_phi_36_35_ladder;
        _2234 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2230 = _2164;
        _2232 = _2165;
        _2234 = _2166;
    }
    uvec4 _2239 = floatBitsToUint(cbInstanceData._m0[_919 + 5u]);
    uint _2241 = _2239.x * 14u;
    uint _2242 = _2241 + 13u;
    float _2249 = _944 + (-1.0);
    float _2254 = (cbLight._m0[_2242].x * _2249) + 1.0;
    float _2255 = (cbLight._m0[_2242].y * _2249) + 1.0;
    float _2256 = (cbLight._m0[_2242].z * _2249) + 1.0;
    float _2257 = (cbLight._m0[_2242].w * _2249) + 1.0;
    uint _2258 = _2241 + 5u;
    float _2264 = isnan(1.0) ? _2255 : (isnan(_2255) ? 1.0 : min(_2255, 1.0));
    uint _2268 = _2241 + 4u;
    float _2277 = isnan(1.0) ? _2254 : (isnan(_2254) ? 1.0 : min(_2254, 1.0));
    uint _2281 = _2241 | 1u;
    float _2292 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_795, _796, _797));
    float _2295 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_795, _796, _797));
    float _4546 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _4557 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2300 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * 0.3183098733425140380859375;
    float _2302 = (isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * 0.3183098733425140380859375;
    float _2309 = ((cbLight._m0[_2258].x * _2264) * _2302) + (((cbLight._m0[_2268].x * _2230) * _2277) * _2300);
    float _2310 = ((_2264 * cbLight._m0[_2258].y) * _2302) + (((cbLight._m0[_2268].y * _2232) * _2277) * _2300);
    float _2311 = ((_2264 * cbLight._m0[_2258].z) * _2302) + (((cbLight._m0[_2268].z * _2234) * _2277) * _2300);
    uvec4 _2315 = floatBitsToUint(cbLight._m0[_2241 + 12u]);
    bool _2317 = _2315.x == 0u;
    float _2419;
    float _2421;
    float _2423;
    if (_2317)
    {
        _2419 = _2309;
        _2421 = _2310;
        _2423 = _2311;
    }
    else
    {
        uint _2427 = _2241 + 6u;
        float _2443 = (dot(vec3(cbLight._m0[_2241 + 2u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2444 = _2443 * _2443;
        float _4568 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2445 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2446 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2419 = (((cbLight._m0[_2427].x * 0.3183098733425140380859375) * _2445) * _2446) + _2309;
        _2421 = (((cbLight._m0[_2427].y * 0.3183098733425140380859375) * _2445) * _2446) + _2310;
        _2423 = (((cbLight._m0[_2427].z * 0.3183098733425140380859375) * _2445) * _2446) + _2311;
    }
    bool _2426 = _2315.y == 0u;
    float _2481;
    float _2483;
    float _2485;
    if (_2426)
    {
        _2481 = _2419;
        _2483 = _2421;
        _2485 = _2423;
    }
    else
    {
        uint _2643 = _2241 + 7u;
        float _2659 = (dot(vec3(cbLight._m0[_2241 + 3u].xyz), vec3(_795, _796, _797)) * 0.5) + 0.5;
        float _2660 = _2659 * _2659;
        float _4584 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
        float _2661 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _2662 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2481 = (((cbLight._m0[_2643].x * 0.3183098733425140380859375) * _2661) * _2662) + _2419;
        _2483 = (((cbLight._m0[_2643].y * 0.3183098733425140380859375) * _2661) * _2662) + _2421;
        _2485 = (((cbLight._m0[_2643].z * 0.3183098733425140380859375) * _2661) * _2662) + _2423;
    }
    uint _2488 = _2241 + 8u;
    float _2501 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2241].w)) * _799) * 0.949999988079071044921875);
    float _2502 = _2501 * _2501;
    float _2503 = cbLight._m0[_2241].x + _873;
    float _2504 = cbLight._m0[_2241].y + _874;
    float _2505 = cbLight._m0[_2241].z + _875;
    float _2509 = inversesqrt(dot(vec3(_2503, _2504, _2505), vec3(_2503, _2504, _2505)));
    float _2510 = _2509 * _2503;
    float _2511 = _2509 * _2504;
    float _2512 = _2509 * _2505;
    float _2513 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2241].xyz));
    float _4600 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2516 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
    float _4611 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2517 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
    float _2518 = dot(vec3(_795, _796, _797), vec3(_2510, _2511, _2512));
    float _4622 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
    float _2521 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
    float _2522 = dot(vec3(cbLight._m0[_2241].xyz), vec3(_2510, _2511, _2512));
    float _4633 = isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0));
    float _2526 = _2502 * _2502;
    float _2530 = ((_2521 * _2521) * (_2526 + (-1.0))) + 1.0;
    float _2541 = (exp2(log2(1.0 - (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2542 = 1.0 - _2502;
    float _2553 = (0.5 / (((_2517 * ((_2516 * _2542) + _2502)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2542) + _2502) * _2516))) * _2516;
    float _4644 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2555 = (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0))) * (_2526 / ((_2530 * _2530) * 3.141590118408203125));
    uint _2569 = _2241 + 9u;
    float _2580 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _799) * 0.949999988079071044921875);
    float _2581 = _2580 * _2580;
    float _2582 = cbLight._m0[_2281].x + _873;
    float _2583 = cbLight._m0[_2281].y + _874;
    float _2584 = cbLight._m0[_2281].z + _875;
    float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
    float _2589 = _2588 * _2582;
    float _2590 = _2588 * _2583;
    float _2591 = _2588 * _2584;
    float _2592 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2281].xyz));
    float _4655 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2595 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
    float _2596 = dot(vec3(_795, _796, _797), vec3(_2589, _2590, _2591));
    float _4666 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2599 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
    float _2600 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2589, _2590, _2591));
    float _4677 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2604 = _2581 * _2581;
    float _2608 = ((_2599 * _2599) * (_2604 + (-1.0))) + 1.0;
    float _2617 = (exp2(log2(1.0 - (isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2618 = 1.0 - _2581;
    float _2628 = (0.5 / (((_2517 * ((_2595 * _2618) + _2581)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2618) + _2581) * _2595))) * _2595;
    float _4688 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
    float _2630 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2604 / ((_2608 * _2608) * 3.141590118408203125));
    float _2640 = (((_2617 * cbLight._m0[_2569].x) * _2630) * _2264) + ((((cbLight._m0[_2488].x * _2230) * _2541) * _2555) * _2277);
    float _2641 = (((_2617 * cbLight._m0[_2569].y) * _2630) * _2264) + ((((cbLight._m0[_2488].y * _2232) * _2541) * _2555) * _2277);
    float _2642 = (((_2617 * cbLight._m0[_2569].z) * _2630) * _2264) + ((((cbLight._m0[_2488].z * _2234) * _2541) * _2555) * _2277);
    float _2698;
    float _2700;
    float _2702;
    if (_2317)
    {
        _2698 = _2640;
        _2700 = _2641;
        _2702 = _2642;
    }
    else
    {
        uint _2704 = _2241 + 2u;
        uint _2708 = _2241 + 10u;
        float _2722 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2704].w)) * _799) * 0.949999988079071044921875);
        float _2723 = _2722 * _2722;
        float _2724 = cbLight._m0[_2704].x + _873;
        float _2725 = cbLight._m0[_2704].y + _874;
        float _2726 = cbLight._m0[_2704].z + _875;
        float _2730 = inversesqrt(dot(vec3(_2724, _2725, _2726), vec3(_2724, _2725, _2726)));
        float _2731 = _2730 * _2724;
        float _2732 = _2730 * _2725;
        float _2733 = _2730 * _2726;
        float _2734 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2704].xyz));
        float _4699 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
        float _2738 = dot(vec3(_795, _796, _797), vec3(_2731, _2732, _2733));
        float _4710 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2742 = dot(vec3(cbLight._m0[_2704].xyz), vec3(_2731, _2732, _2733));
        float _4721 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2746 = _2723 * _2723;
        float _2750 = ((_2741 * _2741) * (_2746 + (-1.0))) + 1.0;
        float _2759 = (exp2(log2(1.0 - (isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2760 = 1.0 - _2723;
        float _2770 = (0.5 / (((_2517 * ((_2737 * _2760) + _2723)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2760) + _2723) * _2737))) * _2737;
        float _4732 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2772 = (isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0))) * (_2746 / ((_2750 * _2750) * 3.141590118408203125));
        float _2773 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
        _2698 = (((_2759 * cbLight._m0[_2708].x) * _2772) * _2773) + _2640;
        _2700 = (((_2759 * cbLight._m0[_2708].y) * _2772) * _2773) + _2641;
        _2702 = (((_2759 * cbLight._m0[_2708].z) * _2772) * _2773) + _2642;
    }
    float _2804;
    float _2806;
    float _2808;
    if (_2426)
    {
        _2804 = _2698;
        _2806 = _2700;
        _2808 = _2702;
    }
    else
    {
        uint _2815 = _2241 + 3u;
        uint _2819 = _2241 + 11u;
        float _2833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2815].w)) * _799) * 0.949999988079071044921875);
        float _2834 = _2833 * _2833;
        float _2835 = cbLight._m0[_2815].x + _873;
        float _2836 = cbLight._m0[_2815].y + _874;
        float _2837 = cbLight._m0[_2815].z + _875;
        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
        float _2842 = _2841 * _2835;
        float _2843 = _2841 * _2836;
        float _2844 = _2841 * _2837;
        float _2845 = dot(vec3(_795, _796, _797), vec3(cbLight._m0[_2815].xyz));
        float _4748 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2849 = dot(vec3(_795, _796, _797), vec3(_2842, _2843, _2844));
        float _4759 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2853 = dot(vec3(cbLight._m0[_2815].xyz), vec3(_2842, _2843, _2844));
        float _4770 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2857 = _2834 * _2834;
        float _2861 = ((_2852 * _2852) * (_2857 + (-1.0))) + 1.0;
        float _2870 = (exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2871 = 1.0 - _2834;
        float _2881 = (0.5 / (((_2517 * ((_2848 * _2871) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2517 * _2871) + _2834) * _2848))) * _2848;
        float _4781 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
        float _2883 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2857 / ((_2861 * _2861) * 3.141590118408203125));
        float _2884 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
        _2804 = (((_2870 * cbLight._m0[_2819].x) * _2883) * _2884) + _2698;
        _2806 = (((_2870 * cbLight._m0[_2819].y) * _2883) * _2884) + _2700;
        _2808 = (((_2870 * cbLight._m0[_2819].z) * _2883) * _2884) + _2702;
    }
    float _2949;
    float _2951;
    float _2953;
    float _2955;
    float _2957;
    float _2959;
    if (_2239.y == 0u)
    {
        uvec4 _2905 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2906 = _2905.x;
        uint _2917 = uint((float(_2905.y) * floor(float(uint(cbSceneParam._m0[85u].y * _882) / _2906))) + floor(float(uint(cbSceneParam._m0[85u].x * _881) / _2906)));
        float _2927 = (log2(_2017 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2928 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        uint _2931 = uint(isnan(14.0) ? _2928 : (isnan(_2928) ? 14.0 : min(_2928, 14.0)));
        uvec4 _2936 = texelFetch(g_lightClusterGridBuffer, int(((_2931 << 2u) + (_2917 << 6u)) >> 2u));
        uint _2937 = _2936.x;
        uint _2938 = _2905.z;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((((1u << ((_2938 >> 4u) & 15u)) + 4294967295u) & _2937) == 0u) || ((_2938 & 240u) == 0u))
        {
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
        }
        else
        {
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3054;
            float _3187 = 0.0;
            float _3188 = 0.0;
            float _3189 = 0.0;
            float _3190 = 0.0;
            float _3191 = 0.0;
            float _3192 = 0.0;
            uint _3193 = 0u;
            uint _3202;
            bool _3203;
            for (;;)
            {
                _3202 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3193 << 2u)) >> 2u)).x;
                _3203 = _3202 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3203)
                {
                    frontier_phi_68_pred = _3192;
                    frontier_phi_68_pred_1 = _3191;
                    frontier_phi_68_pred_2 = _3190;
                    frontier_phi_68_pred_3 = _3188;
                    frontier_phi_68_pred_4 = _3187;
                    frontier_phi_68_pred_5 = _3189;
                }
                else
                {
                    float _3311;
                    float _3312;
                    float _3313;
                    float _3314;
                    float _3315;
                    float _3316;
                    uint _3317;
                    _3311 = _3187;
                    _3312 = _3188;
                    _3313 = _3189;
                    _3314 = _3190;
                    _3315 = _3191;
                    _3316 = _3192;
                    _3317 = _3202;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    float _3248;
                    for (;;)
                    {
                        uint _3321 = uint(findLSB(_3317)) + (_3193 << 5u);
                        uint _3318 = (_3317 + 4294967295u) & _3317;
                        uint _3323 = _3321 * 48u;
                        vec4 _3337 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3343 = (_3321 * 48u) + 4u;
                        vec4 _3356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3343)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3343 + 3u)).x));
                        uint _3362 = (_3321 * 48u) + 8u;
                        vec3 _3373 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x));
                        float _3377 = _3337.x - _2015;
                        float _3378 = _3337.y - _2016;
                        float _3379 = _3337.z - _2017;
                        float _3380 = dot(vec3(_3377, _3378, _3379), vec3(_3377, _3378, _3379));
                        float _3383 = inversesqrt(_3380);
                        float _3384 = _3383 * _3377;
                        float _3385 = _3383 * _3378;
                        float _3386 = _3383 * _3379;
                        float _3387 = dot(vec3(_900, _903, _906), vec3(_3384, _3385, _3386));
                        float _3392 = 1.0 - (_3380 * _3337.w);
                        float _4807 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                        float _3393 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3394 = sqrt(_3380) * _3356.w;
                        float _3397 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                        float _3398 = _3397 * _3397;
                        float _3401 = ((1.0 - _3398) * _3387) + _3398;
                        float _3404 = _3394 * _3394;
                        float _3408 = ((isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0))) * _3393) / ((_3404 * 0.699999988079071044921875) + 1.0);
                        float _3412 = (-0.0) - _2015;
                        float _3413 = (-0.0) - _2016;
                        float _3414 = (-0.0) - _2017;
                        float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                        float _3419 = _3418 * _3412;
                        float _3420 = _3418 * _3413;
                        float _3421 = _3418 * _3414;
                        float _3428 = exp2(log2(1.0 / ((_3404 * 3.5) + 5.0)) * 0.25);
                        float _3429 = 1.0 - _960;
                        float _3436 = sqrt(1.0 - ((1.0 - (_3429 * _3429)) * (1.0 - (_3428 * _3428))));
                        float _3437 = _3436 * _3436;
                        float _3438 = _3437 * _3437;
                        float _3439 = _3419 + _3384;
                        float _3440 = _3420 + _3385;
                        float _3441 = _3421 + _3386;
                        float _3445 = inversesqrt(dot(vec3(_3439, _3440, _3441), vec3(_3439, _3440, _3441)));
                        float _3449 = dot(vec3(_900, _903, _906), vec3(_3419, _3420, _3421));
                        float _4823 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3452 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                        float _3453 = dot(vec3(_900, _903, _906), vec3(_3445 * _3439, _3445 * _3440, _3445 * _3441));
                        float _4834 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3456 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                        float _3460 = ((_3456 * _3456) * (_3438 + (-1.0))) + 1.0;
                        float _3461 = _3397 * _3437;
                        float _3462 = _3461 * _3461;
                        float _3465 = ((1.0 - _3462) * _3387) + _3462;
                        float _4845 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
                        float _3467 = 1.0 - _3437;
                        float _3477 = (0.5 / (((_3466 * ((_3452 * _3467) + _3437)) + 9.9999999392252902907785028219223e-09) + (((_3466 * _3467) + _3437) * _3452))) * _3466;
                        float _4856 = isnan(0.0) ? _3477 : (isnan(_3477) ? 0.0 : max(_3477, 0.0));
                        float _3488 = (((_3438 * 3.1415927410125732421875) * (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) / ((_3460 * _3460) * ((_3404 * 2.1991131305694580078125) + 3.141590118408203125))) * _3393;
                        _3246 = (_3408 * _3356.x) + _3314;
                        _3247 = (_3408 * _3356.y) + _3315;
                        _3248 = (_3408 * _3356.z) + _3316;
                        _3243 = (_3488 * _3373.x) + _3311;
                        _3244 = (_3488 * _3373.y) + _3312;
                        _3245 = (_3488 * _3373.z) + _3313;
                        if (_3318 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3311 = _3243;
                            _3312 = _3244;
                            _3313 = _3245;
                            _3314 = _3246;
                            _3315 = _3247;
                            _3316 = _3248;
                            _3317 = _3318;
                        }
                    }
                    frontier_phi_68_pred = _3248;
                    frontier_phi_68_pred_1 = _3247;
                    frontier_phi_68_pred_2 = _3246;
                    frontier_phi_68_pred_3 = _3244;
                    frontier_phi_68_pred_4 = _3243;
                    frontier_phi_68_pred_5 = _3245;
                }
                _3054 = frontier_phi_68_pred;
                _3052 = frontier_phi_68_pred_1;
                _3050 = frontier_phi_68_pred_2;
                _3046 = frontier_phi_68_pred_3;
                _3044 = frontier_phi_68_pred_4;
                _3048 = frontier_phi_68_pred_5;
                uint _3194 = _3193 + 1u;
                if (_3194 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3187 = _3044;
                    _3188 = _3046;
                    _3189 = _3048;
                    _3190 = _3050;
                    _3191 = _3052;
                    _3192 = _3054;
                    _3193 = _3194;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
        }
        uvec4 _3057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3058 = _3057.z;
        uint _3060 = (_3058 >> 8u) & 15u;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        float _3165;
        if (((4294967295u << _3060) & _2937) == 0u)
        {
            _3155 = _3043;
            _3157 = _3045;
            _3159 = _3047;
            _3161 = _3049;
            _3163 = _3051;
            _3165 = _3053;
        }
        else
        {
            float _3180 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
            float _3181 = _3180 * _2015;
            float _3182 = _3180 * _2016;
            float _3183 = _3180 * _2017;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_3060 < ((_3058 >> 12u) & 15u))
            {
                float _3156;
                float _3158;
                float _3160;
                float _3162;
                float _3164;
                float _3166;
                float _3294 = _3043;
                float _3295 = _3045;
                float _3296 = _3047;
                float _3297 = _3049;
                float _3298 = _3051;
                float _3299 = _3053;
                uint _3300 = _3060;
                uint _3309;
                bool _3310;
                for (;;)
                {
                    _3309 = texelFetch(g_lightClassification, int((((_2931 << 5u) + (_2917 << 9u)) + (_3300 << 2u)) >> 2u)).x;
                    _3310 = _3309 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3310)
                    {
                        frontier_phi_74_pred = _3296;
                        frontier_phi_74_pred_1 = _3295;
                        frontier_phi_74_pred_2 = _3294;
                        frontier_phi_74_pred_3 = _3299;
                        frontier_phi_74_pred_4 = _3298;
                        frontier_phi_74_pred_5 = _3297;
                    }
                    else
                    {
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3498;
                        float _3788;
                        float _3789;
                        float _3790;
                        float _3791;
                        float _3792;
                        float _3793;
                        float _3506 = _3294;
                        float _3507 = _3295;
                        float _3508 = _3296;
                        float _3509 = _3297;
                        float _3510 = _3298;
                        float _3511 = _3299;
                        uint _3512 = _3309;
                        uint _3513;
                        vec4 _3538;
                        float _3539;
                        vec4 _3554;
                        vec3 _3566;
                        vec4 _3581;
                        vec4 _3597;
                        float _3644;
                        bool _3645;
                        for (;;)
                        {
                            uint _3523 = ((_3300 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3512));
                            _3513 = (_3512 + 4294967295u) & _3512;
                            uint _3525 = _3523 * 40u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            _3539 = _3538.w;
                            uint _3541 = (_3523 * 40u) + 4u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3556 = (_3523 * 40u) + 8u;
                            _3566 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3556 + 2u)).x));
                            uint _3568 = (_3523 * 40u) + 16u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3584 = (_3523 * 40u) + 20u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3600 = (_3523 * 40u) + 24u;
                            vec4 _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3619 = (_3523 * 40u) + 28u;
                            vec4 _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            _3644 = fma(_2017, _3632.z, fma(_2016, _3632.y, _3632.x * _2015)) + _3632.w;
                            _3645 = !((fma(_2017, _3613.z, fma(_2016, _3613.y, _3613.x * _2015)) + _3613.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3645)
                            {
                                float _3672 = _3538.x - _2015;
                                float _3673 = _3538.y - _2016;
                                float _3674 = _3538.z - _2017;
                                float _3675 = dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674));
                                float _3678 = inversesqrt(_3675);
                                float _3679 = _3678 * _3672;
                                float _3680 = _3678 * _3673;
                                float _3681 = _3678 * _3674;
                                float _3685 = 1.0 - (_3675 / (_3539 * _3539));
                                float _4867 = isnan(0.0) ? _3685 : (isnan(_3685) ? 0.0 : max(_3685, 0.0));
                                float _3686 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3690 = sqrt(_3675) * _3554.w;
                                float _3692 = 1.39999997615814208984375 / (_3690 + 1.39999997615814208984375);
                                float _3693 = _3692 * _3692;
                                float _3696 = ((1.0 - _3693) * dot(vec3(_3679, _3680, _3681), vec3(_900, _903, _906))) + _3693;
                                float _3699 = _3690 * _3690;
                                float _3703 = (fma(_2017, _3581.z, fma(_2016, _3581.y, _3581.x * _2015)) + _3581.w) / _3644;
                                float _3704 = (fma(_2017, _3597.z, fma(_2016, _3597.y, _3597.x * _2015)) + _3597.w) / _3644;
                                float _3708 = 1.0 - dot(vec2(_3703, _3704), vec2(_3703, _3704));
                                float _4883 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3709 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                                float _3710 = _3709 * (((isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0))) * _3686) / ((_3699 * 0.699999988079071044921875) + 1.0));
                                float _3722 = exp2(log2(1.0 / ((_3699 * 3.5) + 5.0)) * 0.25);
                                float _3723 = 1.0 - _960;
                                float _3730 = sqrt(1.0 - ((1.0 - (_3723 * _3723)) * (1.0 - (_3722 * _3722))));
                                float _3731 = _3730 * _3730;
                                float _3732 = _3731 * _3731;
                                float _3733 = _3679 - _3181;
                                float _3734 = _3680 - _3182;
                                float _3735 = _3681 - _3183;
                                float _3739 = inversesqrt(dot(vec3(_3733, _3734, _3735), vec3(_3733, _3734, _3735)));
                                float _3743 = dot(vec3(_900, _903, _906), vec3((-0.0) - _3181, (-0.0) - _3182, (-0.0) - _3183));
                                float _4894 = isnan(0.0) ? _3743 : (isnan(_3743) ? 0.0 : max(_3743, 0.0));
                                float _3746 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                                float _3747 = dot(vec3(_900, _903, _906), vec3(_3739 * _3733, _3739 * _3734, _3739 * _3735));
                                float _4905 = isnan(0.0) ? _3747 : (isnan(_3747) ? 0.0 : max(_3747, 0.0));
                                float _3750 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                                float _3754 = ((_3750 * _3750) * (_3732 + (-1.0))) + 1.0;
                                float _3755 = _3692 * _3731;
                                float _3756 = _3755 * _3755;
                                float _3762 = ((1.0 - _3756) * dot(vec3(_900, _903, _906), vec3(_3679, _3680, _3681))) + _3756;
                                float _4916 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                                float _3763 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3764 = 1.0 - _3731;
                                float _3774 = (0.5 / (((_3763 * ((_3746 * _3764) + _3731)) + 9.9999999392252902907785028219223e-09) + (((_3763 * _3764) + _3731) * _3746))) * _3763;
                                float _4927 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                                float _3784 = (_3709 * _3686) * (((_3732 * 3.1415927410125732421875) * (isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0)))) / ((_3754 * _3754) * ((_3699 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3784 * _3566.z;
                                frontier_phi_80_pred_1 = _3784 * _3566.y;
                                frontier_phi_80_pred_2 = _3784 * _3566.x;
                                frontier_phi_80_pred_3 = _3710 * _3554.z;
                                frontier_phi_80_pred_4 = _3710 * _3554.y;
                                frontier_phi_80_pred_5 = _3710 * _3554.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3790 = frontier_phi_80_pred;
                            _3789 = frontier_phi_80_pred_1;
                            _3788 = frontier_phi_80_pred_2;
                            _3793 = frontier_phi_80_pred_3;
                            _3792 = frontier_phi_80_pred_4;
                            _3791 = frontier_phi_80_pred_5;
                            _3496 = _3791 + _3509;
                            _3497 = _3792 + _3510;
                            _3498 = _3793 + _3511;
                            _3493 = _3788 + _3506;
                            _3494 = _3789 + _3507;
                            _3495 = _3790 + _3508;
                            if (_3513 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3506 = _3493;
                                _3507 = _3494;
                                _3508 = _3495;
                                _3509 = _3496;
                                _3510 = _3497;
                                _3511 = _3498;
                                _3512 = _3513;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3495;
                        frontier_phi_74_pred_1 = _3494;
                        frontier_phi_74_pred_2 = _3493;
                        frontier_phi_74_pred_3 = _3498;
                        frontier_phi_74_pred_4 = _3497;
                        frontier_phi_74_pred_5 = _3496;
                    }
                    _3160 = frontier_phi_74_pred;
                    _3158 = frontier_phi_74_pred_1;
                    _3156 = frontier_phi_74_pred_2;
                    _3166 = frontier_phi_74_pred_3;
                    _3164 = frontier_phi_74_pred_4;
                    _3162 = frontier_phi_74_pred_5;
                    uint _3301 = _3300 + 1u;
                    if (_3301 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3294 = _3156;
                        _3295 = _3158;
                        _3296 = _3160;
                        _3297 = _3162;
                        _3298 = _3164;
                        _3299 = _3166;
                        _3300 = _3301;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3164;
                frontier_phi_62_63_ladder_1 = _3162;
                frontier_phi_62_63_ladder_2 = _3160;
                frontier_phi_62_63_ladder_3 = _3166;
                frontier_phi_62_63_ladder_4 = _3158;
                frontier_phi_62_63_ladder_5 = _3156;
            }
            else
            {
                frontier_phi_62_63_ladder = _3051;
                frontier_phi_62_63_ladder_1 = _3049;
                frontier_phi_62_63_ladder_2 = _3047;
                frontier_phi_62_63_ladder_3 = _3053;
                frontier_phi_62_63_ladder_4 = _3045;
                frontier_phi_62_63_ladder_5 = _3043;
            }
            _3155 = frontier_phi_62_63_ladder_5;
            _3157 = frontier_phi_62_63_ladder_4;
            _3159 = frontier_phi_62_63_ladder_2;
            _3161 = frontier_phi_62_63_ladder_1;
            _3163 = frontier_phi_62_63_ladder;
            _3165 = frontier_phi_62_63_ladder_3;
        }
        float _3170 = isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0));
        _2949 = (_3170 * _3161) + _2481;
        _2951 = (_3170 * _3163) + _2483;
        _2953 = (_3170 * _3165) + _2485;
        _2955 = ((_3155 * 0.039999999105930328369140625) * _3170) + _2804;
        _2957 = ((_3157 * 0.039999999105930328369140625) * _3170) + _2806;
        _2959 = ((_3159 * 0.039999999105930328369140625) * _3170) + _2808;
    }
    else
    {
        _2949 = _2481;
        _2951 = _2483;
        _2953 = _2485;
        _2955 = _2804;
        _2957 = _2806;
        _2959 = _2808;
    }
    uint _2965 = _920 + uint(cbMatDynParam._m0[0u].w);
    float _4943 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4954 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _4965 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _4976 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _2997 = (((isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0))) * (_2949 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _944))) + ((_2955 + ((isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0))) * _1749)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[15u].w * _564) * _781) * cbInstanceData._m0[_2965].x);
    float _2999 = ((((cbMtdParam._m0[15u].w * _565) * _781) * cbInstanceData._m0[_2965].y) + ((_2957 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1749)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2951 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _944)));
    float _3001 = ((((cbMtdParam._m0[15u].w * _566) * _781) * cbInstanceData._m0[_2965].z) + ((_2959 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1749)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2953 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _944)));
    float _3009 = cbInstanceData._m0[_919 + 6u].w * (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0)));
    float _3014 = _881 / cbSceneParam._m0[86u].x;
    float _3015 = _882 / cbSceneParam._m0[86u].y;
    vec4 _3029 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, (log2((isnan(cbSceneParam._m0[77u].w) ? _817 : (isnan(_817) ? cbSceneParam._m0[77u].w : min(_817, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3031 = _3029.x;
    float _3032 = _3029.y;
    float _3033 = _3029.z;
    float _3034 = _3029.w;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_817 > cbSceneParam._m0[78u].w)
    {
        float _3068 = isnan(_817) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _817 : min(cbSceneParam._m0[80u].w, _817));
        float _3069 = _3068 / _817;
        float _3080 = _3069 * _866;
        float _3081 = _867 * _3069;
        float _3082 = (-0.0) - _3081;
        float _3083 = _3069 * _868;
        float _3085 = (cbSceneParam._m0[77u].w * _3082) / _3068;
        float _3086 = _3085 + cbSceneParam._m0[79u].w;
        float _3087 = cbSceneParam._m0[79u].w - _3081;
        float _3093 = sqrt(((_3080 * _3080) + (_3081 * _3081)) + (_3083 * _3083));
        float _3096 = (1.0 - (cbSceneParam._m0[77u].w / _3068)) * _3093;
        float _3101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3256;
        if (abs((_3082 - _3085) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3256 = ((((_3086 > 0.0) ? exp2(_3101 * _3086) : (2.0 - exp2(_3103 * _3086))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3096;
        }
        else
        {
            float _3216 = 1.0 / cbSceneParam._m0[80u].x;
            float _3217 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : max(_3086, _3087));
            float _3218 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : min(_3086, _3087));
            float _3227 = isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : min(_3217, 0.0));
            float _3228 = isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : min(_3218, 0.0));
            _3256 = ((abs(_3093 / _3082) * cbSceneParam._m0[80u].y) * ((((_3227 - _3228) * 2.0) - ((exp2(_3101 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0)))) - exp2(_3101 * (isnan(0.0) ? _3218 : (isnan(_3218) ? 0.0 : max(_3218, 0.0))))) * _3216)) - ((exp2(_3103 * _3227) - exp2(_3103 * _3228)) * _3216))) + (_3096 * cbSceneParam._m0[80u].z);
        }
        vec4 _3258 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3014, _3015, 1.0), 0.0);
        float _3267 = exp2((_3256 * (-1.44269502162933349609375)) * (1.0 - _3258.w));
        float _3268 = log2(_3267);
        float _3284 = log2(_3034);
        _3105 = (exp2(_3284 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].x)) * _3258.x) / cbSceneParam._m0[78u].x)) + _3031;
        _3107 = (exp2(_3284 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].y)) * _3258.y) / cbSceneParam._m0[78u].y)) + _3032;
        _3109 = (exp2(_3284 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3268 * cbSceneParam._m0[78u].z)) * _3258.z) / cbSceneParam._m0[78u].z)) + _3033;
        _3111 = _3267 * _3034;
    }
    else
    {
        _3105 = _3031;
        _3107 = _3032;
        _3109 = _3033;
        _3111 = _3034;
    }
    float _3123 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3124 = _3123 == 3.0;
    float _3125 = log2(_3111);
    float _3132 = exp2(_3125 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0)));
    float _3133 = exp2(_3125 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0)));
    float _3134 = exp2(_3125 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0)));
    float _3143 = (_3123 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3143 * (_3124 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3105)));
    SV_Target.y = _3143 * (_3124 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3107)));
    SV_Target.z = _3143 * (_3124 ? _3134 : (_3134 + (cbSceneParam._m0[72u].w * _3109)));
    SV_Target.w = _3009;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3009;
}


