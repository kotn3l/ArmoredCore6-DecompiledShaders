#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1312;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _227;
    float _228;
    float _229;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
    }
    else
    {
        _227 = _213;
        _228 = _214;
        _229 = _215;
    }
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _266 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _270 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _274 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _284 = cbSceneParam._m0[71u].x - (_262 / _274);
    float _285 = cbSceneParam._m0[71u].y - (_266 / _274);
    float _286 = cbSceneParam._m0[71u].z - (_270 / _274);
    uvec4 _290 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _292 = _290.z != 0u;
    vec4 _313 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _313.x;
    float _317 = _313.y;
    float _318 = _313.z;
    bool _339 = _290.x != 0u;
    vec4 _358 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _360 = _358.x;
    float _361 = _358.y;
    float _362 = _358.z;
    float _378 = _339 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[9u].w - _360)) + _360) : (_360 * cbMtdParam._m0[9u].w);
    float _379 = _339 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[10u].x - _361)) + _361) : (_361 * cbMtdParam._m0[10u].x);
    float _380 = _339 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[10u].y - _362)) + _362) : (_362 * cbMtdParam._m0[10u].y);
    bool _382 = _290.y != 0u;
    vec4 _398 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _400 = _398.x;
    float _401 = _398.y;
    float _402 = _398.z;
    vec4 _430 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _432 = _430.x;
    float _433 = _430.y;
    float _441 = ((cbMtdParam._m0[17u].y * (-1.39999997615814208984375)) * (1.0 - _432)) + 1.0;
    float _3672 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _449 = (cbMtdParam._m0[16u].z * ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) - _432)) + _432;
    float _456 = (_449 * ((_382 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[10u].w - _400)) + _400) : (_400 * cbMtdParam._m0[10u].w)) - _378)) + _378;
    float _457 = (_449 * ((_382 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[11u].x - _401)) + _401) : (_401 * cbMtdParam._m0[11u].x)) - _379)) + _379;
    float _458 = (_449 * ((_382 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[11u].y - _402)) + _402) : (_402 * cbMtdParam._m0[11u].y)) - _380)) + _380;
    float _462 = (((1.0 - _433) * (-1.39999997615814208984375)) * cbMtdParam._m0[17u].x) + 1.0;
    float _3683 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _470 = (cbMtdParam._m0[13u].w * ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) - _433)) + _433;
    float _477 = (_470 * ((_292 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].w - _316)) + _316) : (_316 * cbMtdParam._m0[11u].w)) - _456)) + _456;
    float _478 = (_470 * ((_292 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[12u].x - _317)) + _317) : (_317 * cbMtdParam._m0[12u].x)) - _457)) + _457;
    float _479 = (_470 * ((_292 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[12u].y - _318)) + _318) : (_318 * cbMtdParam._m0[12u].y)) - _458)) + _458;
    vec4 _491 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _508 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _515 = cbMtdParam._m0[15u].x * _508.x;
    float _522 = (_515 * (_491.x - _477)) + _477;
    float _523 = (_515 * (_491.y - _478)) + _478;
    float _524 = (_515 * (_491.z - _479)) + _479;
    float _535 = inversesqrt(dot(vec3(_284, _285, _286), vec3(_284, _285, _286)));
    float _539 = dot(vec4(_535 * _284, _535 * _285, _535 * _286, 0.0), vec4(_227, _228, _229, 0.0));
    float _542 = _539 - cbMtdParam._m0[14u].w;
    float _3694 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _552 = (exp2(log2(1.0 - (isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].z : (isnan(cbMtdParam._m0[14u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[15u].z - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _562 = (((_552 * cbMtdParam._m0[12u].w) - _522) * _552) + _522;
    float _563 = (((_552 * cbMtdParam._m0[13u].x) - _523) * _552) + _523;
    float _564 = (((_552 * cbMtdParam._m0[13u].y) - _524) * _552) + _524;
    float _568 = _539 - cbMtdParam._m0[16u].y;
    float _3710 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _577 = exp2(log2((1.0 - exp2(log2(1.0 - (isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0)))))) * cbMtdParam._m0[16u].w) * cbMtdParam._m0[16u].x);
    float _3721 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _578 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    vec4 _590 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _607 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _609 = _607.x;
    float _610 = _607.y;
    float _611 = _607.z;
    float _618 = ((_590.x - _609) * _449) + _609;
    float _619 = ((_590.y - _610) * _449) + _610;
    float _620 = ((_590.z - _611) * _449) + _611;
    vec4 _632 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _658 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _670 = (((_632.x - _618) * _470) + _618) + ((_658.x + (-0.5)) * cbMtdParam._m0[17u].z);
    float _671 = (((_632.y - _619) * _470) + _619) + ((_658.y + (-0.5)) * cbMtdParam._m0[17u].z);
    float _672 = (((_632.z - _620) * _470) + _620) + ((_658.z + (-0.5)) * cbMtdParam._m0[17u].z);
    vec4 _685 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _696 = ((_685.x - _670) * _515) + _670;
    float _697 = ((_685.y - _671) * _515) + _671;
    float _698 = ((_685.z - _672) * _515) + _672;
    float _708 = ((1.0 - _698) * _552) + _698;
    float _712 = ((((0.502016007900238037109375 - _696) * _552) + _696) * 2.0) + (-1.0);
    float _714 = ((((0.502016007900238037109375 - _697) * _552) + _697) * 2.0) + (-1.0);
    float _715 = dot(vec2(_712, _714), vec2(_712, _714));
    float _3732 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _720 = sqrt(1.0 - (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))));
    float _725 = inversesqrt(dot(vec3(_262, _266, _270), vec3(_262, _266, _270)));
    float _738 = inversesqrt(dot(vec3(cbMtdParam._m0[18u].xyz), vec3(cbMtdParam._m0[18u].xyz)));
    float _739 = _738 * cbMtdParam._m0[18u].x;
    float _740 = _738 * cbMtdParam._m0[18u].y;
    float _741 = _738 * cbMtdParam._m0[18u].z;
    float _745 = inversesqrt(dot(vec3(_739, _740, _741), vec3(_739, _740, _741)));
    float _746 = _745 * _739;
    float _747 = _745 * _740;
    float _748 = _745 * _741;
    float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
    float _768 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_725 * _262, _725 * _266, _725 * _270, 0.0), vec4(_752 * _746, _752 * _747, _752 * _748, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _3743 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _770 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
    float _776 = exp2(log2(_770 * 6.5) * 7.0);
    float _3754 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _778 = (isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) + _770;
    float _3765 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _779 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
    float _782 = fma(_720, _227, fma(_714, _219 * TANGENT.x, (_205 * _198) * _712));
    float _785 = fma(_720, _228, fma(_714, _219 * TANGENT.y, (_205 * _199) * _712));
    float _788 = fma(_720, _229, fma(_714, _219 * TANGENT.z, (_205 * _200) * _712));
    float _792 = inversesqrt(dot(vec3(_782, _785, _788), vec3(_782, _785, _788)));
    float _793 = _792 * _782;
    float _794 = _792 * _785;
    float _795 = _792 * _788;
    float _3776 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _796 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
    float _3787 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _797 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
    float _3798 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3809 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3820 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _815 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _864 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _855);
    float _865 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _855);
    float _866 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _855);
    float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
    float _871 = _864 * _870;
    float _872 = _865 * _870;
    float _873 = _866 * _870;
    float _879 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _880 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _898 = fma(_795, cbSceneParam._m0[5u].z, fma(_794, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _793));
    float _901 = fma(_795, cbSceneParam._m0[6u].z, fma(_794, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _793));
    float _904 = fma(_795, cbSceneParam._m0[7u].z, fma(_794, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _793));
    uint _917 = uint(roundEven(NORMAL.w)) * 13u;
    uint _918 = _917 + 9u;
    uint _919 = _918 + uint(cbMatDynParam._m0[0u].w);
    float _925 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0)))) * cbInstanceData._m0[_919].x;
    float _926 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0)))) * cbInstanceData._m0[_919].y;
    float _927 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0)))) * cbInstanceData._m0[_919].z;
    float _3831 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
    float _3842 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _929 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _930 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    vec4 _939 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _879, cbSceneParam._m0[86u].y * _880));
    float _942 = _939.x * TEXCOORD.z;
    float _943 = dot(vec3(_793, _794, _795), vec3(_871, _872, _873));
    float _946 = _943 * 2.0;
    float _950 = (_946 * _793) - _871;
    float _951 = (_946 * _794) - _872;
    float _952 = (_946 * _795) - _873;
    float _956 = abs(dot(vec3(_871, _872, _873), vec3(_793, _794, _795)));
    float _3864 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _958 = sqrt(_797);
    float _971 = exp2((_958 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_958 * 3.0));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1011 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1311;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1038 = fma(_1011, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1003));
        float _1042 = fma(_1011, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1003));
        float _1046 = fma(_1011, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1003));
        float _1069 = _1003 + _793;
        float _1070 = _1007 + _794;
        float _1071 = _1011 + _795;
        float _1081 = fma(_1071, cbModelParam._m0[26u].z, fma(_1070, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1069)) - _1038;
        float _1082 = fma(_1071, cbModelParam._m0[27u].z, fma(_1070, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1069)) - _1042;
        float _1083 = fma(_1071, cbModelParam._m0[28u].z, fma(_1070, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1069)) - _1046;
        float _1087 = inversesqrt(dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083)));
        float _1100 = ((_1087 * _1081) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1038 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1087 * _1082) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1042 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1087 * _1083) / cbModelParam._m0[34u].z) + ((((((_1046 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1100, _1101, _1102), 0.0);
        float _1139 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1105.x + (-0.5));
        float _1141 = _1139 * (_1105.y + (-0.5));
        float _1142 = _1139 * (_1105.z + (-0.5));
        float _1149 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1112.x + (-0.5));
        float _1151 = _1149 * (_1112.y + (-0.5));
        float _1152 = _1149 * (_1112.z + (-0.5));
        float _1159 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1119.x + (-0.5));
        float _1161 = _1159 * (_1119.y + (-0.5));
        float _1162 = _1159 * (_1119.z + (-0.5));
        float _1169 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1170 = _1169 * (_1126.x + (-0.5));
        float _1171 = _1169 * (_1126.y + (-0.5));
        float _1172 = _1169 * (_1126.z + (-0.5));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = _1140 * 0.5;
        float _1177 = _1150 * 0.5;
        float _1178 = _1160 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1193 = (dot(vec3(_793, _794, _795), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _3890 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1203 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3901 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3912 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0))) * (_1205 + 1.0))) + _1210) * _1173;
        float _1220 = _1141 * 0.5;
        float _1221 = _1151 * 0.5;
        float _1222 = _1161 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_793, _794, _795), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3923 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3934 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3945 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * (_1247 + 1.0))) + _1252) * _1174;
        float _1262 = _1142 * 0.5;
        float _1263 = _1152 * 0.5;
        float _1264 = _1162 * 0.5;
        float _1265 = dot(vec3(_1262, _1263, _1264), vec3(_1262, _1263, _1264));
        float _1270 = (_1265 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1265);
        float _1278 = (dot(vec3(_793, _794, _795), vec3(_1270 * _1262, _1270 * _1263, _1270 * _1264)) + 1.0) * 0.5;
        float _3956 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1287 = sqrt(((_1263 * _1263) + (_1262 * _1262)) + (_1264 * _1264)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3967 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
        float _1289 = _1288 * 2.0;
        float _1293 = (1.0 - _1288) / (_1288 + 1.0);
        float _3978 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
        float _1303 = ((((1.0 - _1294) * (_1289 + 2.0)) * exp2(log2(isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_1289 + 1.0))) + _1294) * _1175;
        _1311 = _1142;
        _1313 = _1141;
        _1314 = _1140;
        _1315 = _1152;
        _1316 = _1151;
        _1317 = _1150;
        _1318 = _1162;
        _1319 = _1161;
        _1320 = _1160;
        _1321 = _1175;
        _1322 = _1174;
        _1323 = _1173;
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1325 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
        _1326 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)));
    }
    else
    {
        _1311 = _1312;
        _1313 = _1312;
        _1314 = _1312;
        _1315 = _1312;
        _1316 = _1312;
        _1317 = _1312;
        _1318 = _1312;
        _1319 = _1312;
        _1320 = _1312;
        _1321 = _1312;
        _1322 = _1312;
        _1323 = _1312;
        _1324 = 0.0;
        _1325 = 0.0;
        _1326 = 0.0;
    }
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1352 = fma(_1011, cbModelParam._m0[30u].z, fma(_1007, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003));
        float _1356 = fma(_1011, cbModelParam._m0[31u].z, fma(_1007, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003));
        float _1360 = fma(_1011, cbModelParam._m0[32u].z, fma(_1007, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003));
        float _1383 = _1003 + _793;
        float _1384 = _1007 + _794;
        float _1385 = _1011 + _795;
        float _1395 = fma(_1385, cbModelParam._m0[30u].z, fma(_1384, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1383)) - _1352;
        float _1396 = fma(_1385, cbModelParam._m0[31u].z, fma(_1384, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1383)) - _1356;
        float _1397 = fma(_1385, cbModelParam._m0[32u].z, fma(_1384, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1383)) - _1360;
        float _1401 = inversesqrt(dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397)));
        float _1414 = ((_1401 * _1395) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1352 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1401 * _1396) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1356 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1416 = ((_1401 * _1397) / cbModelParam._m0[35u].z) + ((((((_1360 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1414, _1415, _1416), 0.0);
        float _1451 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1418.x + (-0.5));
        float _1453 = _1451 * (_1418.y + (-0.5));
        float _1454 = _1451 * (_1418.z + (-0.5));
        float _1461 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1425.x + (-0.5));
        float _1463 = _1461 * (_1425.y + (-0.5));
        float _1464 = _1461 * (_1425.z + (-0.5));
        float _1471 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1432.x + (-0.5));
        float _1473 = _1471 * (_1432.y + (-0.5));
        float _1474 = _1471 * (_1432.z + (-0.5));
        float _1481 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1439.x + (-0.5));
        float _1483 = _1481 * (_1439.y + (-0.5));
        float _1484 = _1481 * (_1439.z + (-0.5));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1488 = _1452 * 0.5;
        float _1489 = _1462 * 0.5;
        float _1490 = _1472 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_793, _794, _795), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _4041 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1515 + 1.0))) + _1520) * _1485;
        float _1530 = _1453 * 0.5;
        float _1531 = _1463 * 0.5;
        float _1532 = _1473 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_793, _794, _795), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _4074 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1557 + 1.0))) + _1562) * _1486;
        float _1572 = _1454 * 0.5;
        float _1573 = _1464 * 0.5;
        float _1574 = _1474 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1588 = (dot(vec3(_793, _794, _795), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1597 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1487 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4107 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1599 + 1.0))) + _1604) * _1487;
        _1621 = _1454;
        _1622 = _1453;
        _1623 = _1452;
        _1624 = _1464;
        _1625 = _1463;
        _1626 = _1462;
        _1627 = _1474;
        _1628 = _1473;
        _1629 = _1472;
        _1630 = _1487;
        _1631 = _1486;
        _1632 = _1485;
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
        _1635 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
    }
    else
    {
        _1621 = _1312;
        _1622 = _1312;
        _1623 = _1312;
        _1624 = _1312;
        _1625 = _1312;
        _1626 = _1312;
        _1627 = _1312;
        _1628 = _1312;
        _1629 = _1312;
        _1630 = _1312;
        _1631 = _1312;
        _1632 = _1312;
        _1633 = 0.0;
        _1634 = 0.0;
        _1635 = 0.0;
    }
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1324)) + _1324;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1325)) + _1325;
    float _1647 = (cbModelParam._m0[1u].x * (_1635 - _1326)) + _1326;
    float _1668 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1671 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1674 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1645));
    float _1689 = _950 * 0.5;
    float _1690 = _951 * 0.5;
    float _1691 = _952 * 0.5;
    float _1692 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1623, _1626, _1629, _1632));
    float _1695 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1698 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1732;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1705 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1311, _1315, _1318, _1321));
        float _1709 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1313, _1316, _1319, _1322));
        float _1713 = dot(vec4(_1689, _1690, _1691, 1.0), vec4(_1314, _1317, _1320, _1323));
        float _1720 = dot(vec4(cbModelParam._m0[39u]), vec4(_1689, _1690, _1691, 1.0));
        _1732 = dot(vec3(isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1720) ? 0.0 : (isnan(0.0) ? _1720 : max(0.0, _1720))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1732 = 1.0;
    }
    float _1743;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1734 = dot(vec4(cbModelParam._m0[40u]), vec4(_1689, _1690, _1691, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0)), isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1734) ? 0.0 : (isnan(0.0) ? _1734 : max(0.0, _1734))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1747 = (_1743 * cbModelParam._m0[1u].x) + (_1732 * (1.0 - cbModelParam._m0[1u].x));
    float _1757 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1758 = isnan(_1757) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1757 : min(cbModelParam._m0[25u].z, _1757));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1805 = fma(_1011, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1003)) + cbModelParam._m0[13u].w;
        float _1809 = fma(_1011, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1003)) + cbModelParam._m0[14u].w;
        float _1813 = fma(_1011, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1003)) + cbModelParam._m0[15u].w;
        float _1816 = fma(_952, cbModelParam._m0[13u].z, fma(_951, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950));
        float _1819 = fma(_952, cbModelParam._m0[14u].z, fma(_951, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950));
        float _1822 = fma(_952, cbModelParam._m0[15u].z, fma(_951, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950));
        float _1850;
        if (_1816 > 0.0)
        {
            _1850 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1850 = frontier_phi_16_14_ladder;
        }
        float _2073;
        if (_1819 > 0.0)
        {
            _2073 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2073 = frontier_phi_25_21_ladder;
        }
        float _2319;
        if (_1822 > 0.0)
        {
            _2319 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2319 = frontier_phi_37_32_ladder;
        }
        float _2321 = isnan(_2073) ? _1850 : (isnan(_1850) ? _2073 : min(_1850, _2073));
        float _2322 = isnan(_2319) ? _2321 : (isnan(_2321) ? _2319 : min(_2321, _2319));
        float _2326 = (_2322 * _1816) + _1805;
        float _2327 = (_2322 * _1819) + _1809;
        float _2328 = (_2322 * _1822) + _1813;
        float _2329 = _2322 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2329;
        float _2333 = _2329 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 > _2333) || ((_2327 < _2331) || ((_2326 < _2331) || (_2326 > _2333))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2328, cbModelParam._m0[9u].z, fma(_2327, cbModelParam._m0[9u].y, _2326 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2328, cbModelParam._m0[10u].z, fma(_2327, cbModelParam._m0[10u].y, _2326 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2328, cbModelParam._m0[11u].z, fma(_2327, cbModelParam._m0[11u].y, _2326 * cbModelParam._m0[11u].x))), _1758);
            frontier_phi_15_37_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1838 = frontier_phi_15_37_ladder_2;
        _1840 = frontier_phi_15_37_ladder_1;
        _1842 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_950, _951, _952), _1758);
        _1838 = _1826.x * cbModelParam._m0[1u].y;
        _1840 = _1826.y * cbModelParam._m0[1u].y;
        _1842 = _1826.z * cbModelParam._m0[1u].y;
    }
    float _1846 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1846 : min(cbModelParam._m0[25u].w, _1846));
    float _1938;
    float _1940;
    float _1942;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1902 = fma(_1011, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1003)) + cbModelParam._m0[21u].w;
        float _1906 = fma(_1011, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1003)) + cbModelParam._m0[22u].w;
        float _1910 = fma(_1011, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1003)) + cbModelParam._m0[23u].w;
        float _1913 = fma(_952, cbModelParam._m0[21u].z, fma(_951, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950));
        float _1916 = fma(_952, cbModelParam._m0[22u].z, fma(_951, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950));
        float _1919 = fma(_952, cbModelParam._m0[23u].z, fma(_951, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950));
        float _2078;
        if (_1913 > 0.0)
        {
            _2078 = abs((1.0 - _1902) / _1913);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1902 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2078 = frontier_phi_27_23_ladder;
        }
        float _2346;
        if (_1916 > 0.0)
        {
            _2346 = abs((1.0 - _1906) / _1916);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1906 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2346 = frontier_phi_39_34_ladder;
        }
        float _2551;
        if (_1919 > 0.0)
        {
            _2551 = abs((1.0 - _1910) / _1919);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1910 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2551 = frontier_phi_48_45_ladder;
        }
        float _2553 = isnan(_2346) ? _2078 : (isnan(_2078) ? _2346 : min(_2078, _2346));
        float _2554 = isnan(_2551) ? _2553 : (isnan(_2553) ? _2551 : min(_2553, _2551));
        float _2558 = (_2554 * _1913) + _1902;
        float _2559 = (_2554 * _1916) + _1906;
        float _2560 = (_2554 * _1919) + _1910;
        float _2561 = _2554 * 9.9999997473787516355514526367188e-05;
        float _2562 = (-1.0) - _2561;
        float _2564 = _2561 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2560 > _2564) || ((_2560 < _2562) || ((_2559 > _2564) || ((_2559 < _2562) || ((_2558 < _2562) || (_2558 > _2564))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2560, cbModelParam._m0[17u].z, fma(_2559, cbModelParam._m0[17u].y, _2558 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2560, cbModelParam._m0[18u].z, fma(_2559, cbModelParam._m0[18u].y, _2558 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2560, cbModelParam._m0[19u].z, fma(_2559, cbModelParam._m0[19u].y, _2558 * cbModelParam._m0[19u].x))), _1847);
            frontier_phi_24_48_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1938 = frontier_phi_24_48_ladder_2;
        _1940 = frontier_phi_24_48_ladder_1;
        _1942 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1922 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_950, _951, _952), _1847);
        _1938 = _1922.x * cbModelParam._m0[1u].z;
        _1940 = _1922.y * cbModelParam._m0[1u].z;
        _1942 = _1922.z * cbModelParam._m0[1u].z;
    }
    float _1954 = ((((1.0 - _971) * ((_958 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_971 * _958)) * _942;
    float _1955 = _1954 * ((cbModelParam._m0[1u].w * (_1938 - _1838)) + _1838);
    float _1956 = _1954 * ((cbModelParam._m0[1u].w * (_1940 - _1840)) + _1840);
    float _1957 = _1954 * ((cbModelParam._m0[1u].w * (_1942 - _1842)) + _1842);
    float _1960 = fma(_1957, cbSceneParam._m0[89u].z, fma(_1956, cbSceneParam._m0[89u].y, _1955 * cbSceneParam._m0[89u].x));
    float _1963 = fma(_1957, cbSceneParam._m0[90u].z, fma(_1956, cbSceneParam._m0[90u].y, _1955 * cbSceneParam._m0[90u].x));
    float _1966 = fma(_1957, cbSceneParam._m0[91u].z, fma(_1956, cbSceneParam._m0[91u].y, _1955 * cbSceneParam._m0[91u].x));
    vec4 _1974 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_879, _880));
    float _1976 = _1974.w;
    float _1988 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1976);
    float _1989 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1976);
    float _1990 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1976);
    uvec4 _1994 = floatBitsToUint(cbInstanceData._m0[_917 + 5u]);
    uint _1996 = _1994.x * 14u;
    uint _1997 = _1996 + 13u;
    float _2004 = _942 + (-1.0);
    float _2009 = (cbLight._m0[_1997].x * _2004) + 1.0;
    float _2010 = (cbLight._m0[_1997].y * _2004) + 1.0;
    float _2011 = (cbLight._m0[_1997].z * _2004) + 1.0;
    float _2012 = (cbLight._m0[_1997].w * _2004) + 1.0;
    uint _2013 = _1996 + 5u;
    float _2019 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2023 = _1996 + 4u;
    float _2032 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2036 = _1996 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_793, _794, _795));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_793, _794, _795));
    float _4243 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4254 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2013].x * _2019) * _2057) + (((cbLight._m0[_2023].x * _1988) * _2032) * _2055);
    float _2065 = ((_2019 * cbLight._m0[_2013].y) * _2057) + (((cbLight._m0[_2023].y * _1989) * _2032) * _2055);
    float _2066 = ((_2019 * cbLight._m0[_2013].z) * _2057) + (((cbLight._m0[_2023].z * _1990) * _2032) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1996 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2083;
    float _2085;
    float _2087;
    if (_2072)
    {
        _2083 = _2064;
        _2085 = _2065;
        _2087 = _2066;
    }
    else
    {
        uint _2091 = _1996 + 6u;
        float _2107 = (dot(vec3(cbLight._m0[_1996 + 2u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2108 = _2107 * _2107;
        float _4265 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        float _2109 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2110 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2083 = (((cbLight._m0[_2091].x * 0.3183098733425140380859375) * _2109) * _2110) + _2064;
        _2085 = (((cbLight._m0[_2091].y * 0.3183098733425140380859375) * _2109) * _2110) + _2065;
        _2087 = (((cbLight._m0[_2091].z * 0.3183098733425140380859375) * _2109) * _2110) + _2066;
    }
    bool _2090 = _2070.y == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2090)
    {
        _2128 = _2083;
        _2130 = _2085;
        _2132 = _2087;
    }
    else
    {
        uint _2290 = _1996 + 7u;
        float _2306 = (dot(vec3(cbLight._m0[_1996 + 3u].xyz), vec3(_793, _794, _795)) * 0.5) + 0.5;
        float _2307 = _2306 * _2306;
        float _4281 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
        float _2308 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _2309 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2128 = (((cbLight._m0[_2290].x * 0.3183098733425140380859375) * _2308) * _2309) + _2083;
        _2130 = (((cbLight._m0[_2290].y * 0.3183098733425140380859375) * _2308) * _2309) + _2085;
        _2132 = (((cbLight._m0[_2290].z * 0.3183098733425140380859375) * _2308) * _2309) + _2087;
    }
    uint _2135 = _1996 + 8u;
    float _2148 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _797) * 0.949999988079071044921875);
    float _2149 = _2148 * _2148;
    float _2150 = cbLight._m0[_1996].x + _871;
    float _2151 = cbLight._m0[_1996].y + _872;
    float _2152 = cbLight._m0[_1996].z + _873;
    float _2156 = inversesqrt(dot(vec3(_2150, _2151, _2152), vec3(_2150, _2151, _2152)));
    float _2157 = _2156 * _2150;
    float _2158 = _2156 * _2151;
    float _2159 = _2156 * _2152;
    float _2160 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_1996].xyz));
    float _4297 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2163 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _2164 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _2165 = dot(vec3(_793, _794, _795), vec3(_2157, _2158, _2159));
    float _4319 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2157, _2158, _2159));
    float _4330 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2149 * _2149;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2188 = (exp2(log2(1.0 - (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2189 = 1.0 - _2149;
    float _2200 = (0.5 / (((_2164 * ((_2163 * _2189) + _2149)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2189) + _2149) * _2163))) * _2163;
    float _4341 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2202 = (isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    uint _2216 = _1996 + 9u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _797) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2036].x + _871;
    float _2230 = cbLight._m0[_2036].y + _872;
    float _2231 = cbLight._m0[_2036].z + _873;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2036].xyz));
    float _4352 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
    float _2243 = dot(vec3(_793, _794, _795), vec3(_2236, _2237, _2238));
    float _4363 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2236, _2237, _2238));
    float _4374 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2228 * _2228;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2264 = (exp2(log2(1.0 - (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2265 = 1.0 - _2228;
    float _2275 = (0.5 / (((_2164 * ((_2242 * _2265) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2265) + _2228) * _2242))) * _2242;
    float _4385 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
    float _2277 = (isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    float _2287 = (((_2264 * cbLight._m0[_2216].x) * _2277) * _2019) + ((((cbLight._m0[_2135].x * _1988) * _2188) * _2202) * _2032);
    float _2288 = (((_2264 * cbLight._m0[_2216].y) * _2277) * _2019) + ((((cbLight._m0[_2135].y * _1989) * _2188) * _2202) * _2032);
    float _2289 = (((_2264 * cbLight._m0[_2216].z) * _2277) * _2019) + ((((cbLight._m0[_2135].z * _1990) * _2188) * _2202) * _2032);
    float _2351;
    float _2353;
    float _2355;
    if (_2072)
    {
        _2351 = _2287;
        _2353 = _2288;
        _2355 = _2289;
    }
    else
    {
        uint _2357 = _1996 + 2u;
        uint _2361 = _1996 + 10u;
        float _2375 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2357].w)) * _797) * 0.949999988079071044921875);
        float _2376 = _2375 * _2375;
        float _2377 = cbLight._m0[_2357].x + _871;
        float _2378 = cbLight._m0[_2357].y + _872;
        float _2379 = cbLight._m0[_2357].z + _873;
        float _2383 = inversesqrt(dot(vec3(_2377, _2378, _2379), vec3(_2377, _2378, _2379)));
        float _2384 = _2383 * _2377;
        float _2385 = _2383 * _2378;
        float _2386 = _2383 * _2379;
        float _2387 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2357].xyz));
        float _4396 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
        float _2391 = dot(vec3(_793, _794, _795), vec3(_2384, _2385, _2386));
        float _4407 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2394 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _2395 = dot(vec3(cbLight._m0[_2357].xyz), vec3(_2384, _2385, _2386));
        float _4418 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2399 = _2376 * _2376;
        float _2403 = ((_2394 * _2394) * (_2399 + (-1.0))) + 1.0;
        float _2412 = (exp2(log2(1.0 - (isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2413 = 1.0 - _2376;
        float _2423 = (0.5 / (((_2164 * ((_2390 * _2413) + _2376)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2413) + _2376) * _2390))) * _2390;
        float _4429 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0))) * (_2399 / ((_2403 * _2403) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2351 = (((_2412 * cbLight._m0[_2361].x) * _2425) * _2426) + _2287;
        _2353 = (((_2412 * cbLight._m0[_2361].y) * _2425) * _2426) + _2288;
        _2355 = (((_2412 * cbLight._m0[_2361].z) * _2425) * _2426) + _2289;
    }
    float _2461;
    float _2463;
    float _2465;
    if (_2090)
    {
        _2461 = _2351;
        _2463 = _2353;
        _2465 = _2355;
    }
    else
    {
        uint _2472 = _1996 + 3u;
        uint _2476 = _1996 + 11u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _797) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _871;
        float _2493 = cbLight._m0[_2472].y + _872;
        float _2494 = cbLight._m0[_2472].z + _873;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_793, _794, _795), vec3(cbLight._m0[_2472].xyz));
        float _4445 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
        float _2506 = dot(vec3(_793, _794, _795), vec3(_2499, _2500, _2501));
        float _4456 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4467 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2527 = (exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2528 = 1.0 - _2491;
        float _2538 = (0.5 / (((_2164 * ((_2505 * _2528) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2164 * _2528) + _2491) * _2505))) * _2505;
        float _4478 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2540 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2541 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2461 = (((_2527 * cbLight._m0[_2476].x) * _2540) * _2541) + _2351;
        _2463 = (((_2527 * cbLight._m0[_2476].y) * _2540) * _2541) + _2353;
        _2465 = (((_2527 * cbLight._m0[_2476].z) * _2540) * _2541) + _2355;
    }
    float _2675;
    float _2677;
    float _2679;
    float _2681;
    float _2683;
    float _2685;
    if (_1994.y == 0u)
    {
        float _2616 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2617 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2616;
        float _2618 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2616;
        float _2619 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2616;
        uvec4 _2631 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2632 = _2631.x;
        uint _2643 = uint((float(_2631.y) * floor(float(uint(cbSceneParam._m0[85u].y * _880) / _2632))) + floor(float(uint(cbSceneParam._m0[85u].x * _879) / _2632)));
        float _2653 = (log2(_2619 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2654 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        uint _2657 = uint(isnan(14.0) ? _2654 : (isnan(_2654) ? 14.0 : min(_2654, 14.0)));
        uvec4 _2662 = texelFetch(g_lightClusterGridBuffer, int(((_2657 << 2u) + (_2643 << 6u)) >> 2u));
        uint _2663 = _2662.x;
        uint _2664 = _2631.z;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((((1u << ((_2664 >> 4u) & 15u)) + 4294967295u) & _2663) == 0u) || ((_2664 & 240u) == 0u))
        {
            _2790 = 0.0;
            _2792 = 0.0;
            _2794 = 0.0;
            _2796 = 0.0;
            _2798 = 0.0;
            _2800 = 0.0;
        }
        else
        {
            float _2791;
            float _2793;
            float _2795;
            float _2797;
            float _2799;
            float _2801;
            float _2934 = 0.0;
            float _2935 = 0.0;
            float _2936 = 0.0;
            float _2937 = 0.0;
            float _2938 = 0.0;
            float _2939 = 0.0;
            uint _2940 = 0u;
            uint _2949;
            bool _2950;
            for (;;)
            {
                _2949 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_2940 << 2u)) >> 2u)).x;
                _2950 = _2949 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2950)
                {
                    frontier_phi_63_pred = _2939;
                    frontier_phi_63_pred_1 = _2938;
                    frontier_phi_63_pred_2 = _2937;
                    frontier_phi_63_pred_3 = _2936;
                    frontier_phi_63_pred_4 = _2935;
                    frontier_phi_63_pred_5 = _2934;
                }
                else
                {
                    float _3058;
                    float _3059;
                    float _3060;
                    float _3061;
                    float _3062;
                    float _3063;
                    uint _3064;
                    _3058 = _2934;
                    _3059 = _2935;
                    _3060 = _2936;
                    _3061 = _2937;
                    _3062 = _2938;
                    _3063 = _2939;
                    _3064 = _2949;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    float _2995;
                    for (;;)
                    {
                        uint _3068 = uint(findLSB(_3064)) + (_2940 << 5u);
                        uint _3065 = (_3064 + 4294967295u) & _3064;
                        uint _3070 = _3068 * 48u;
                        vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3090 = (_3068 * 48u) + 4u;
                        vec4 _3103 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3090)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3090 + 3u)).x));
                        uint _3109 = (_3068 * 48u) + 8u;
                        vec3 _3120 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x));
                        float _3124 = _3084.x - _2617;
                        float _3125 = _3084.y - _2618;
                        float _3126 = _3084.z - _2619;
                        float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                        float _3130 = inversesqrt(_3127);
                        float _3131 = _3130 * _3124;
                        float _3132 = _3130 * _3125;
                        float _3133 = _3130 * _3126;
                        float _3134 = dot(vec3(_898, _901, _904), vec3(_3131, _3132, _3133));
                        float _3139 = 1.0 - (_3127 * _3084.w);
                        float _4504 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3140 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
                        float _3141 = sqrt(_3127) * _3103.w;
                        float _3144 = 1.39999997615814208984375 / (_3141 + 1.39999997615814208984375);
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3134) + _3145;
                        float _3151 = _3141 * _3141;
                        float _3155 = ((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3140) / ((_3151 * 0.699999988079071044921875) + 1.0);
                        float _3159 = (-0.0) - _2617;
                        float _3160 = (-0.0) - _2618;
                        float _3161 = (-0.0) - _2619;
                        float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                        float _3166 = _3165 * _3159;
                        float _3167 = _3165 * _3160;
                        float _3168 = _3165 * _3161;
                        float _3176 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                        float _3177 = 1.0 - _958;
                        float _3184 = sqrt(1.0 - ((1.0 - (_3177 * _3177)) * (1.0 - (_3176 * _3176))));
                        float _3185 = _3184 * _3184;
                        float _3186 = _3185 * _3185;
                        float _3187 = _3166 + _3131;
                        float _3188 = _3167 + _3132;
                        float _3189 = _3168 + _3133;
                        float _3193 = inversesqrt(dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189)));
                        float _3197 = dot(vec3(_898, _901, _904), vec3(_3166, _3167, _3168));
                        float _4520 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                        float _3200 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
                        float _3201 = dot(vec3(_898, _901, _904), vec3(_3193 * _3187, _3193 * _3188, _3193 * _3189));
                        float _4531 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                        float _3204 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
                        float _3208 = ((_3204 * _3204) * (_3186 + (-1.0))) + 1.0;
                        float _3209 = _3144 * _3185;
                        float _3210 = _3209 * _3209;
                        float _3213 = ((1.0 - _3210) * _3134) + _3210;
                        float _4542 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                        float _3214 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3215 = 1.0 - _3185;
                        float _3225 = (0.5 / (((_3214 * ((_3200 * _3215) + _3185)) + 9.9999999392252902907785028219223e-09) + (((_3214 * _3215) + _3185) * _3200))) * _3214;
                        float _4553 = isnan(0.0) ? _3225 : (isnan(_3225) ? 0.0 : max(_3225, 0.0));
                        float _3236 = (((_3186 * 3.1415927410125732421875) * (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) / ((_3208 * _3208) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125))) * _3140;
                        _2993 = (_3155 * _3103.x) + _3061;
                        _2994 = (_3155 * _3103.y) + _3062;
                        _2995 = (_3155 * _3103.z) + _3063;
                        _2990 = (_3236 * _3120.x) + _3058;
                        _2991 = (_3236 * _3120.y) + _3059;
                        _2992 = (_3236 * _3120.z) + _3060;
                        if (_3065 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3058 = _2990;
                            _3059 = _2991;
                            _3060 = _2992;
                            _3061 = _2993;
                            _3062 = _2994;
                            _3063 = _2995;
                            _3064 = _3065;
                        }
                    }
                    frontier_phi_63_pred = _2995;
                    frontier_phi_63_pred_1 = _2994;
                    frontier_phi_63_pred_2 = _2993;
                    frontier_phi_63_pred_3 = _2992;
                    frontier_phi_63_pred_4 = _2991;
                    frontier_phi_63_pred_5 = _2990;
                }
                _2801 = frontier_phi_63_pred;
                _2799 = frontier_phi_63_pred_1;
                _2797 = frontier_phi_63_pred_2;
                _2795 = frontier_phi_63_pred_3;
                _2793 = frontier_phi_63_pred_4;
                _2791 = frontier_phi_63_pred_5;
                uint _2941 = _2940 + 1u;
                if (_2941 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2934 = _2791;
                    _2935 = _2793;
                    _2936 = _2795;
                    _2937 = _2797;
                    _2938 = _2799;
                    _2939 = _2801;
                    _2940 = _2941;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2790 = _2791;
            _2792 = _2793;
            _2794 = _2795;
            _2796 = _2797;
            _2798 = _2799;
            _2800 = _2801;
        }
        uvec4 _2804 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2805 = _2804.z;
        uint _2807 = (_2805 >> 8u) & 15u;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        float _2910;
        float _2912;
        if (((4294967295u << _2807) & _2663) == 0u)
        {
            _2902 = _2790;
            _2904 = _2792;
            _2906 = _2794;
            _2908 = _2796;
            _2910 = _2798;
            _2912 = _2800;
        }
        else
        {
            float _2927 = inversesqrt(dot(vec3(_2617, _2618, _2619), vec3(_2617, _2618, _2619)));
            float _2928 = _2927 * _2617;
            float _2929 = _2927 * _2618;
            float _2930 = _2927 * _2619;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2807 < ((_2805 >> 12u) & 15u))
            {
                float _2903;
                float _2905;
                float _2907;
                float _2909;
                float _2911;
                float _2913;
                float _3041 = _2790;
                float _3042 = _2792;
                float _3043 = _2794;
                float _3044 = _2796;
                float _3045 = _2798;
                float _3046 = _2800;
                uint _3047 = _2807;
                uint _3056;
                bool _3057;
                for (;;)
                {
                    _3056 = texelFetch(g_lightClassification, int((((_2657 << 5u) + (_2643 << 9u)) + (_3047 << 2u)) >> 2u)).x;
                    _3057 = _3056 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3057)
                    {
                        frontier_phi_69_pred = _3046;
                        frontier_phi_69_pred_1 = _3045;
                        frontier_phi_69_pred_2 = _3044;
                        frontier_phi_69_pred_3 = _3043;
                        frontier_phi_69_pred_4 = _3042;
                        frontier_phi_69_pred_5 = _3041;
                    }
                    else
                    {
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _3246;
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3254 = _3041;
                        float _3255 = _3042;
                        float _3256 = _3043;
                        float _3257 = _3044;
                        float _3258 = _3045;
                        float _3259 = _3046;
                        uint _3260 = _3056;
                        uint _3261;
                        vec4 _3286;
                        float _3287;
                        vec4 _3302;
                        vec3 _3314;
                        vec4 _3329;
                        vec4 _3345;
                        float _3392;
                        bool _3393;
                        for (;;)
                        {
                            uint _3271 = ((_3047 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3260));
                            _3261 = (_3260 + 4294967295u) & _3260;
                            uint _3273 = _3271 * 40u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            _3287 = _3286.w;
                            uint _3289 = (_3271 * 40u) + 4u;
                            _3302 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3289)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3289 + 3u)).x));
                            uint _3304 = (_3271 * 40u) + 8u;
                            _3314 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x));
                            uint _3316 = (_3271 * 40u) + 16u;
                            _3329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3316 + 3u)).x));
                            uint _3332 = (_3271 * 40u) + 20u;
                            _3345 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3332)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3332 + 3u)).x));
                            uint _3348 = (_3271 * 40u) + 24u;
                            vec4 _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3367 = (_3271 * 40u) + 28u;
                            vec4 _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            _3392 = fma(_2619, _3380.z, fma(_2618, _3380.y, _3380.x * _2617)) + _3380.w;
                            _3393 = !((fma(_2619, _3361.z, fma(_2618, _3361.y, _3361.x * _2617)) + _3361.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3393)
                            {
                                float _3420 = _3286.x - _2617;
                                float _3421 = _3286.y - _2618;
                                float _3422 = _3286.z - _2619;
                                float _3423 = dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422));
                                float _3426 = inversesqrt(_3423);
                                float _3427 = _3426 * _3420;
                                float _3428 = _3426 * _3421;
                                float _3429 = _3426 * _3422;
                                float _3433 = 1.0 - (_3423 / (_3287 * _3287));
                                float _4564 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                                float _3434 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3438 = sqrt(_3423) * _3302.w;
                                float _3440 = 1.39999997615814208984375 / (_3438 + 1.39999997615814208984375);
                                float _3441 = _3440 * _3440;
                                float _3444 = ((1.0 - _3441) * dot(vec3(_3427, _3428, _3429), vec3(_898, _901, _904))) + _3441;
                                float _3447 = _3438 * _3438;
                                float _3451 = (fma(_2619, _3329.z, fma(_2618, _3329.y, _3329.x * _2617)) + _3329.w) / _3392;
                                float _3452 = (fma(_2619, _3345.z, fma(_2618, _3345.y, _3345.x * _2617)) + _3345.w) / _3392;
                                float _3456 = 1.0 - dot(vec2(_3451, _3452), vec2(_3451, _3452));
                                float _4580 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                                float _3458 = _3457 * (((isnan(0.0) ? _3444 : (isnan(_3444) ? 0.0 : max(_3444, 0.0))) * _3434) / ((_3447 * 0.699999988079071044921875) + 1.0));
                                float _3470 = exp2(log2(1.0 / ((_3447 * 3.5) + 5.0)) * 0.25);
                                float _3471 = 1.0 - _958;
                                float _3478 = sqrt(1.0 - ((1.0 - (_3471 * _3471)) * (1.0 - (_3470 * _3470))));
                                float _3479 = _3478 * _3478;
                                float _3480 = _3479 * _3479;
                                float _3481 = _3427 - _2928;
                                float _3482 = _3428 - _2929;
                                float _3483 = _3429 - _2930;
                                float _3487 = inversesqrt(dot(vec3(_3481, _3482, _3483), vec3(_3481, _3482, _3483)));
                                float _3491 = dot(vec3(_898, _901, _904), vec3((-0.0) - _2928, (-0.0) - _2929, (-0.0) - _2930));
                                float _4591 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3494 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                                float _3495 = dot(vec3(_898, _901, _904), vec3(_3487 * _3481, _3487 * _3482, _3487 * _3483));
                                float _4602 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                                float _3498 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3502 = ((_3498 * _3498) * (_3480 + (-1.0))) + 1.0;
                                float _3503 = _3440 * _3479;
                                float _3504 = _3503 * _3503;
                                float _3510 = ((1.0 - _3504) * dot(vec3(_898, _901, _904), vec3(_3427, _3428, _3429))) + _3504;
                                float _4613 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0));
                                float _3511 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3512 = 1.0 - _3479;
                                float _3522 = (0.5 / (((_3511 * ((_3494 * _3512) + _3479)) + 9.9999999392252902907785028219223e-09) + (((_3511 * _3512) + _3479) * _3494))) * _3511;
                                float _4624 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3532 = (_3457 * _3434) * (((_3480 * 3.1415927410125732421875) * (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) / ((_3502 * _3502) * ((_3447 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3458 * _3302.z;
                                frontier_phi_75_pred_1 = _3458 * _3302.y;
                                frontier_phi_75_pred_2 = _3458 * _3302.x;
                                frontier_phi_75_pred_3 = _3532 * _3314.z;
                                frontier_phi_75_pred_4 = _3532 * _3314.y;
                                frontier_phi_75_pred_5 = _3532 * _3314.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_75_pred;
                            _3540 = frontier_phi_75_pred_1;
                            _3539 = frontier_phi_75_pred_2;
                            _3538 = frontier_phi_75_pred_3;
                            _3537 = frontier_phi_75_pred_4;
                            _3536 = frontier_phi_75_pred_5;
                            _3244 = _3539 + _3257;
                            _3245 = _3540 + _3258;
                            _3246 = _3541 + _3259;
                            _3241 = _3536 + _3254;
                            _3242 = _3537 + _3255;
                            _3243 = _3538 + _3256;
                            if (_3261 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3254 = _3241;
                                _3255 = _3242;
                                _3256 = _3243;
                                _3257 = _3244;
                                _3258 = _3245;
                                _3259 = _3246;
                                _3260 = _3261;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3246;
                        frontier_phi_69_pred_1 = _3245;
                        frontier_phi_69_pred_2 = _3244;
                        frontier_phi_69_pred_3 = _3243;
                        frontier_phi_69_pred_4 = _3242;
                        frontier_phi_69_pred_5 = _3241;
                    }
                    _2913 = frontier_phi_69_pred;
                    _2911 = frontier_phi_69_pred_1;
                    _2909 = frontier_phi_69_pred_2;
                    _2907 = frontier_phi_69_pred_3;
                    _2905 = frontier_phi_69_pred_4;
                    _2903 = frontier_phi_69_pred_5;
                    uint _3048 = _3047 + 1u;
                    if (_3048 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3041 = _2903;
                        _3042 = _2905;
                        _3043 = _2907;
                        _3044 = _2909;
                        _3045 = _2911;
                        _3046 = _2913;
                        _3047 = _3048;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2913;
                frontier_phi_57_58_ladder_1 = _2911;
                frontier_phi_57_58_ladder_2 = _2909;
                frontier_phi_57_58_ladder_3 = _2907;
                frontier_phi_57_58_ladder_4 = _2905;
                frontier_phi_57_58_ladder_5 = _2903;
            }
            else
            {
                frontier_phi_57_58_ladder = _2800;
                frontier_phi_57_58_ladder_1 = _2798;
                frontier_phi_57_58_ladder_2 = _2796;
                frontier_phi_57_58_ladder_3 = _2794;
                frontier_phi_57_58_ladder_4 = _2792;
                frontier_phi_57_58_ladder_5 = _2790;
            }
            _2902 = frontier_phi_57_58_ladder_5;
            _2904 = frontier_phi_57_58_ladder_4;
            _2906 = frontier_phi_57_58_ladder_3;
            _2908 = frontier_phi_57_58_ladder_2;
            _2910 = frontier_phi_57_58_ladder_1;
            _2912 = frontier_phi_57_58_ladder;
        }
        float _2917 = isnan(1.0) ? _942 : (isnan(_942) ? 1.0 : min(_942, 1.0));
        _2675 = (_2917 * _2908) + _2128;
        _2677 = (_2917 * _2910) + _2130;
        _2679 = (_2917 * _2912) + _2132;
        _2681 = ((_2902 * 0.039999999105930328369140625) * _2917) + _2461;
        _2683 = ((_2904 * 0.039999999105930328369140625) * _2917) + _2463;
        _2685 = ((_2906 * 0.039999999105930328369140625) * _2917) + _2465;
    }
    else
    {
        _2675 = _2128;
        _2677 = _2130;
        _2679 = _2132;
        _2681 = _2461;
        _2683 = _2463;
        _2685 = _2465;
    }
    uint _2691 = _918 + uint(cbMatDynParam._m0[0u].w);
    float _4640 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4651 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _4662 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _4673 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _2723 = (((isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0))) * (_2675 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _942))) + ((_2681 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[15u].w * _562) * _779) * cbInstanceData._m0[_2691].x);
    float _2725 = ((((cbMtdParam._m0[15u].w * _563) * _779) * cbInstanceData._m0[_2691].y) + ((_2683 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) * (_2677 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _942)));
    float _2727 = ((((cbMtdParam._m0[15u].w * _564) * _779) * cbInstanceData._m0[_2691].z) + ((_2685 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1747)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2679 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _942)));
    float _2735 = cbInstanceData._m0[_917 + 6u].w * (isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0)));
    float _2740 = _879 / cbSceneParam._m0[86u].x;
    float _2741 = _880 / cbSceneParam._m0[86u].y;
    vec4 _2755 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, (log2((isnan(cbSceneParam._m0[77u].w) ? _815 : (isnan(_815) ? cbSceneParam._m0[77u].w : min(_815, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2757 = _2755.x;
    float _2758 = _2755.y;
    float _2759 = _2755.z;
    float _2760 = _2755.w;
    float _2852;
    float _2854;
    float _2856;
    float _2858;
    if (_815 > cbSceneParam._m0[78u].w)
    {
        float _2815 = isnan(_815) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _815 : min(cbSceneParam._m0[80u].w, _815));
        float _2816 = _2815 / _815;
        float _2827 = _2816 * _864;
        float _2828 = _865 * _2816;
        float _2829 = (-0.0) - _2828;
        float _2830 = _2816 * _866;
        float _2832 = (cbSceneParam._m0[77u].w * _2829) / _2815;
        float _2833 = _2832 + cbSceneParam._m0[79u].w;
        float _2834 = cbSceneParam._m0[79u].w - _2828;
        float _2840 = sqrt(((_2827 * _2827) + (_2828 * _2828)) + (_2830 * _2830));
        float _2843 = (1.0 - (cbSceneParam._m0[77u].w / _2815)) * _2840;
        float _2848 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2850 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3003;
        if (abs((_2829 - _2832) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3003 = ((((_2833 > 0.0) ? exp2(_2848 * _2833) : (2.0 - exp2(_2850 * _2833))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2843;
        }
        else
        {
            float _2963 = 1.0 / cbSceneParam._m0[80u].x;
            float _2964 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : max(_2833, _2834));
            float _2965 = isnan(_2834) ? _2833 : (isnan(_2833) ? _2834 : min(_2833, _2834));
            float _2974 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : min(_2964, 0.0));
            float _2975 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : min(_2965, 0.0));
            _3003 = ((abs(_2840 / _2829) * cbSceneParam._m0[80u].y) * ((((_2974 - _2975) * 2.0) - ((exp2(_2848 * (isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0)))) - exp2(_2848 * (isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0))))) * _2963)) - ((exp2(_2850 * _2974) - exp2(_2850 * _2975)) * _2963))) + (_2843 * cbSceneParam._m0[80u].z);
        }
        vec4 _3005 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2740, _2741, 1.0), 0.0);
        float _3014 = exp2((_3003 * (-1.44269502162933349609375)) * (1.0 - _3005.w));
        float _3015 = log2(_3014);
        float _3031 = log2(_2760);
        _2852 = (exp2(_3031 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].x)) * _3005.x) / cbSceneParam._m0[78u].x)) + _2757;
        _2854 = (exp2(_3031 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].y)) * _3005.y) / cbSceneParam._m0[78u].y)) + _2758;
        _2856 = (exp2(_3031 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3015 * cbSceneParam._m0[78u].z)) * _3005.z) / cbSceneParam._m0[78u].z)) + _2759;
        _2858 = _3014 * _2760;
    }
    else
    {
        _2852 = _2757;
        _2854 = _2758;
        _2856 = _2759;
        _2858 = _2760;
    }
    float _2870 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2871 = _2870 == 3.0;
    float _2872 = log2(_2858);
    float _2879 = exp2(_2872 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)));
    float _2880 = exp2(_2872 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0)));
    float _2881 = exp2(_2872 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0)));
    float _2890 = (_2870 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2890 * (_2871 ? _2879 : (_2879 + (cbSceneParam._m0[72u].w * _2852)));
    SV_Target.y = _2890 * (_2871 ? _2880 : (_2880 + (cbSceneParam._m0[72u].w * _2854)));
    SV_Target.z = _2890 * (_2871 ? _2881 : (_2881 + (cbSceneParam._m0[72u].w * _2856)));
    SV_Target.w = _2735;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2735;
}


