#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[19];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_10;
layout(set = 0, binding = 3) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Planet_GroundSurface_004_snp_0_Texture2D_8;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1310;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225;
    float _226;
    float _227;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _225 = (-0.0) - _211;
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
    }
    else
    {
        _225 = _211;
        _226 = _212;
        _227 = _213;
    }
    float _260 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _264 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _268 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _272 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _282 = cbSceneParam._m0[71u].x - (_260 / _272);
    float _283 = cbSceneParam._m0[71u].y - (_264 / _272);
    float _284 = cbSceneParam._m0[71u].z - (_268 / _272);
    uvec4 _288 = floatBitsToUint(cbMtdParam._m0[9u]);
    bool _290 = _288.z != 0u;
    vec4 _311 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _311.x;
    float _315 = _311.y;
    float _316 = _311.z;
    bool _337 = _288.x != 0u;
    vec4 _356 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _358 = _356.x;
    float _359 = _356.y;
    float _360 = _356.z;
    float _376 = _337 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[9u].w - _358)) + _358) : (_358 * cbMtdParam._m0[9u].w);
    float _377 = _337 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[10u].x - _359)) + _359) : (_359 * cbMtdParam._m0[10u].x);
    float _378 = _337 ? ((cbMtdParam._m0[17u].w * (cbMtdParam._m0[10u].y - _360)) + _360) : (_360 * cbMtdParam._m0[10u].y);
    bool _380 = _288.y != 0u;
    vec4 _396 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _398 = _396.x;
    float _399 = _396.y;
    float _400 = _396.z;
    vec4 _428 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _430 = _428.x;
    float _431 = _428.y;
    float _439 = ((cbMtdParam._m0[17u].y * (-1.39999997615814208984375)) * (1.0 - _430)) + 1.0;
    float _3646 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _447 = (cbMtdParam._m0[16u].z * ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) - _430)) + _430;
    float _454 = (_447 * ((_380 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[10u].w - _398)) + _398) : (_398 * cbMtdParam._m0[10u].w)) - _376)) + _376;
    float _455 = (_447 * ((_380 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[11u].x - _399)) + _399) : (_399 * cbMtdParam._m0[11u].x)) - _377)) + _377;
    float _456 = (_447 * ((_380 ? ((cbMtdParam._m0[14u].x * (cbMtdParam._m0[11u].y - _400)) + _400) : (_400 * cbMtdParam._m0[11u].y)) - _378)) + _378;
    float _460 = (((1.0 - _431) * (-1.39999997615814208984375)) * cbMtdParam._m0[17u].x) + 1.0;
    float _3657 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _468 = (cbMtdParam._m0[13u].w * ((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) - _431)) + _431;
    float _475 = (_468 * ((_290 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[11u].w - _314)) + _314) : (_314 * cbMtdParam._m0[11u].w)) - _454)) + _454;
    float _476 = (_468 * ((_290 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[12u].x - _315)) + _315) : (_315 * cbMtdParam._m0[12u].x)) - _455)) + _455;
    float _477 = (_468 * ((_290 ? ((cbMtdParam._m0[14u].y * (cbMtdParam._m0[12u].y - _316)) + _316) : (_316 * cbMtdParam._m0[12u].y)) - _456)) + _456;
    vec4 _489 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    vec4 _506 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _513 = cbMtdParam._m0[15u].x * _506.x;
    float _520 = (_513 * (_489.x - _475)) + _475;
    float _521 = (_513 * (_489.y - _476)) + _476;
    float _522 = (_513 * (_489.z - _477)) + _477;
    float _533 = inversesqrt(dot(vec3(_282, _283, _284), vec3(_282, _283, _284)));
    float _537 = dot(vec4(_533 * _282, _533 * _283, _533 * _284, 0.0), vec4(_225, _226, _227, 0.0));
    float _540 = _537 - cbMtdParam._m0[14u].w;
    float _3668 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _550 = (exp2(log2(1.0 - (isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].z : (isnan(cbMtdParam._m0[14u].z) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].z, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[15u].z - cbMtdParam._m0[15u].y)) + cbMtdParam._m0[15u].y;
    float _560 = (((_550 * cbMtdParam._m0[12u].w) - _520) * _550) + _520;
    float _561 = (((_550 * cbMtdParam._m0[13u].x) - _521) * _550) + _521;
    float _562 = (((_550 * cbMtdParam._m0[13u].y) - _522) * _550) + _522;
    float _566 = _537 - cbMtdParam._m0[16u].y;
    float _3684 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _575 = exp2(log2((1.0 - exp2(log2(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))))) * cbMtdParam._m0[16u].w) * cbMtdParam._m0[16u].x);
    float _3695 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _576 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    vec4 _588 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    vec4 _605 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _607 = _605.x;
    float _608 = _605.y;
    float _609 = _605.z;
    float _616 = ((_588.x - _607) * _447) + _607;
    float _617 = ((_588.y - _608) * _447) + _608;
    float _618 = ((_588.z - _609) * _447) + _609;
    vec4 _630 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    vec4 _656 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_10, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _668 = (((_630.x - _616) * _468) + _616) + ((_656.x + (-0.5)) * cbMtdParam._m0[17u].z);
    float _669 = (((_630.y - _617) * _468) + _617) + ((_656.y + (-0.5)) * cbMtdParam._m0[17u].z);
    float _670 = (((_630.z - _618) * _468) + _618) + ((_656.z + (-0.5)) * cbMtdParam._m0[17u].z);
    vec4 _683 = texture(sampler2D(M_Planet_GroundSurface_004_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _694 = ((_683.x - _668) * _513) + _668;
    float _695 = ((_683.y - _669) * _513) + _669;
    float _696 = ((_683.z - _670) * _513) + _670;
    float _706 = ((1.0 - _696) * _550) + _696;
    float _710 = ((((0.502016007900238037109375 - _694) * _550) + _694) * 2.0) + (-1.0);
    float _712 = ((((0.502016007900238037109375 - _695) * _550) + _695) * 2.0) + (-1.0);
    float _713 = dot(vec2(_710, _712), vec2(_710, _712));
    float _3706 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _718 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    float _723 = inversesqrt(dot(vec3(_260, _264, _268), vec3(_260, _264, _268)));
    float _736 = inversesqrt(dot(vec3(cbMtdParam._m0[18u].xyz), vec3(cbMtdParam._m0[18u].xyz)));
    float _737 = _736 * cbMtdParam._m0[18u].x;
    float _738 = _736 * cbMtdParam._m0[18u].y;
    float _739 = _736 * cbMtdParam._m0[18u].z;
    float _743 = inversesqrt(dot(vec3(_737, _738, _739), vec3(_737, _738, _739)));
    float _744 = _743 * _737;
    float _745 = _743 * _738;
    float _746 = _743 * _739;
    float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
    float _766 = (0.9700000286102294921875 - exp2(log2((dot(vec4(_723 * _260, _723 * _264, _723 * _268, 0.0), vec4(_750 * _744, _750 * _745, _750 * _746, 0.0)) + 1.0) * 0.5) * 0.017999999225139617919921875)) * (-5.0);
    float _3717 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _768 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _774 = exp2(log2(_768 * 6.5) * 7.0);
    float _3728 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _776 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) + _768;
    float _3739 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _777 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _780 = fma(_718, _225, fma(_712, _217 * TANGENT.x, (_203 * _196) * _710));
    float _783 = fma(_718, _226, fma(_712, _217 * TANGENT.y, (_203 * _197) * _710));
    float _786 = fma(_718, _227, fma(_712, _217 * TANGENT.z, (_203 * _198) * _710));
    float _790 = inversesqrt(dot(vec3(_780, _783, _786), vec3(_780, _783, _786)));
    float _791 = _790 * _780;
    float _792 = _790 * _783;
    float _793 = _790 * _786;
    float _3750 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _794 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
    float _3761 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _795 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _3772 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3783 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3794 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _813 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _862 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _863 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _868 = inversesqrt(dot(vec3(_862, _863, _864), vec3(_862, _863, _864)));
    float _869 = _862 * _868;
    float _870 = _863 * _868;
    float _871 = _864 * _868;
    float _877 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _878 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _896 = fma(_793, cbSceneParam._m0[5u].z, fma(_792, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _791));
    float _899 = fma(_793, cbSceneParam._m0[6u].z, fma(_792, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _791));
    float _902 = fma(_793, cbSceneParam._m0[7u].z, fma(_792, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _791));
    uint _915 = uint(roundEven(NORMAL.w)) * 13u;
    uint _916 = _915 + 9u;
    uint _917 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _923 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0)))) * cbInstanceData._m0[_917].x;
    float _924 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0)))) * cbInstanceData._m0[_917].y;
    float _925 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0)))) * cbInstanceData._m0[_917].z;
    float _3805 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _926 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _3816 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _927 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _3827 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    float _928 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    vec4 _937 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _877, cbSceneParam._m0[86u].y * _878));
    float _940 = _937.x * TEXCOORD.z;
    float _941 = dot(vec3(_791, _792, _793), vec3(_869, _870, _871));
    float _944 = _941 * 2.0;
    float _948 = (_944 * _791) - _869;
    float _949 = (_944 * _792) - _870;
    float _950 = (_944 * _793) - _871;
    float _954 = abs(dot(vec3(_869, _870, _871), vec3(_791, _792, _793)));
    float _3838 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _956 = sqrt(_795);
    float _969 = exp2((_956 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_956 * 3.0));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1309;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1036 = fma(_1009, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1001));
        float _1040 = fma(_1009, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1001));
        float _1044 = fma(_1009, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1001));
        float _1067 = _1001 + _791;
        float _1068 = _1005 + _792;
        float _1069 = _1009 + _793;
        float _1079 = fma(_1069, cbModelParam._m0[26u].z, fma(_1068, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1067)) - _1036;
        float _1080 = fma(_1069, cbModelParam._m0[27u].z, fma(_1068, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1067)) - _1040;
        float _1081 = fma(_1069, cbModelParam._m0[28u].z, fma(_1068, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1067)) - _1044;
        float _1085 = inversesqrt(dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081)));
        float _1098 = ((_1085 * _1079) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1036 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1099 = ((_1085 * _1080) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1040 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1085 * _1081) / cbModelParam._m0[34u].z) + ((((((_1044 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1098, _1099, _1100), 0.0);
        float _1137 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1103.x + (-0.5));
        float _1139 = _1137 * (_1103.y + (-0.5));
        float _1140 = _1137 * (_1103.z + (-0.5));
        float _1147 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1110.x + (-0.5));
        float _1149 = _1147 * (_1110.y + (-0.5));
        float _1150 = _1147 * (_1110.z + (-0.5));
        float _1157 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1117.x + (-0.5));
        float _1159 = _1157 * (_1117.y + (-0.5));
        float _1160 = _1157 * (_1117.z + (-0.5));
        float _1167 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1168 = _1167 * (_1124.x + (-0.5));
        float _1169 = _1167 * (_1124.y + (-0.5));
        float _1170 = _1167 * (_1124.z + (-0.5));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = _1138 * 0.5;
        float _1175 = _1148 * 0.5;
        float _1176 = _1158 * 0.5;
        float _1177 = dot(vec3(_1174, _1175, _1176), vec3(_1174, _1175, _1176));
        float _1182 = (_1177 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1177);
        float _1191 = (dot(vec3(_791, _792, _793), vec3(_1182 * _1174, _1182 * _1175, _1182 * _1176)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1201 = sqrt(((_1175 * _1175) + (_1174 * _1174)) + (_1176 * _1176)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _3886 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1203 + 1.0))) + _1208) * _1171;
        float _1218 = _1139 * 0.5;
        float _1219 = _1149 * 0.5;
        float _1220 = _1159 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_791, _792, _793), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _3919 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1245 + 1.0))) + _1250) * _1172;
        float _1260 = _1140 * 0.5;
        float _1261 = _1150 * 0.5;
        float _1262 = _1160 * 0.5;
        float _1263 = dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262));
        float _1268 = (_1263 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1263);
        float _1276 = (dot(vec3(_791, _792, _793), vec3(_1268 * _1260, _1268 * _1261, _1268 * _1262)) + 1.0) * 0.5;
        float _3930 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1285 = sqrt(((_1261 * _1261) + (_1260 * _1260)) + (_1262 * _1262)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3941 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _1287 = _1286 * 2.0;
        float _1291 = (1.0 - _1286) / (_1286 + 1.0);
        float _3952 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1292 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _1301 = ((((1.0 - _1292) * (_1287 + 2.0)) * exp2(log2(isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_1287 + 1.0))) + _1292) * _1173;
        _1309 = _1140;
        _1311 = _1139;
        _1312 = _1138;
        _1313 = _1150;
        _1314 = _1149;
        _1315 = _1148;
        _1316 = _1160;
        _1317 = _1159;
        _1318 = _1158;
        _1319 = _1173;
        _1320 = _1172;
        _1321 = _1171;
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1323 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
        _1324 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)));
    }
    else
    {
        _1309 = _1310;
        _1311 = _1310;
        _1312 = _1310;
        _1313 = _1310;
        _1314 = _1310;
        _1315 = _1310;
        _1316 = _1310;
        _1317 = _1310;
        _1318 = _1310;
        _1319 = _1310;
        _1320 = _1310;
        _1321 = _1310;
        _1322 = 0.0;
        _1323 = 0.0;
        _1324 = 0.0;
    }
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1350 = fma(_1009, cbModelParam._m0[30u].z, fma(_1005, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1001));
        float _1354 = fma(_1009, cbModelParam._m0[31u].z, fma(_1005, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1001));
        float _1358 = fma(_1009, cbModelParam._m0[32u].z, fma(_1005, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1001));
        float _1381 = _1001 + _791;
        float _1382 = _1005 + _792;
        float _1383 = _1009 + _793;
        float _1393 = fma(_1383, cbModelParam._m0[30u].z, fma(_1382, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1381)) - _1350;
        float _1394 = fma(_1383, cbModelParam._m0[31u].z, fma(_1382, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1381)) - _1354;
        float _1395 = fma(_1383, cbModelParam._m0[32u].z, fma(_1382, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1381)) - _1358;
        float _1399 = inversesqrt(dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395)));
        float _1412 = ((_1399 * _1393) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1350 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1399 * _1394) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1354 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1399 * _1395) / cbModelParam._m0[35u].z) + ((((((_1358 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        vec4 _1437 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1412, _1413, _1414), 0.0);
        float _1449 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1416.x + (-0.5));
        float _1451 = _1449 * (_1416.y + (-0.5));
        float _1452 = _1449 * (_1416.z + (-0.5));
        float _1459 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1423.x + (-0.5));
        float _1461 = _1459 * (_1423.y + (-0.5));
        float _1462 = _1459 * (_1423.z + (-0.5));
        float _1469 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1430.x + (-0.5));
        float _1471 = _1469 * (_1430.y + (-0.5));
        float _1472 = _1469 * (_1430.z + (-0.5));
        float _1479 = exp2((_1437.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1437.x + (-0.5));
        float _1481 = _1479 * (_1437.y + (-0.5));
        float _1482 = _1479 * (_1437.z + (-0.5));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = _1450 * 0.5;
        float _1487 = _1460 * 0.5;
        float _1488 = _1470 * 0.5;
        float _1489 = dot(vec3(_1486, _1487, _1488), vec3(_1486, _1487, _1488));
        float _1494 = (_1489 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1489);
        float _1502 = (dot(vec3(_791, _792, _793), vec3(_1494 * _1486, _1494 * _1487, _1494 * _1488)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1511 = sqrt(((_1487 * _1487) + (_1486 * _1486)) + (_1488 * _1488)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1513 = _1512 * 2.0;
        float _1517 = (1.0 - _1512) / (_1512 + 1.0);
        float _4015 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1518 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1527 = ((((1.0 - _1518) * (_1513 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1513 + 1.0))) + _1518) * _1483;
        float _1528 = _1451 * 0.5;
        float _1529 = _1461 * 0.5;
        float _1530 = _1471 * 0.5;
        float _1531 = dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530));
        float _1536 = (_1531 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1531);
        float _1544 = (dot(vec3(_791, _792, _793), vec3(_1536 * _1528, _1536 * _1529, _1536 * _1530)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1553 = sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1555 = _1554 * 2.0;
        float _1559 = (1.0 - _1554) / (_1554 + 1.0);
        float _4048 = isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0));
        float _1560 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1569 = ((((1.0 - _1560) * (_1555 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1555 + 1.0))) + _1560) * _1484;
        float _1570 = _1452 * 0.5;
        float _1571 = _1462 * 0.5;
        float _1572 = _1472 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1586 = (dot(vec3(_791, _792, _793), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4059 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1595 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4070 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
        float _1597 = _1596 * 2.0;
        float _1601 = (1.0 - _1596) / (_1596 + 1.0);
        float _4081 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1611 = ((((1.0 - _1602) * (_1597 + 2.0)) * exp2(log2(isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0))) * (_1597 + 1.0))) + _1602) * _1485;
        _1619 = _1452;
        _1620 = _1451;
        _1621 = _1450;
        _1622 = _1462;
        _1623 = _1461;
        _1624 = _1460;
        _1625 = _1472;
        _1626 = _1471;
        _1627 = _1470;
        _1628 = _1485;
        _1629 = _1484;
        _1630 = _1483;
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)));
    }
    else
    {
        _1619 = _1310;
        _1620 = _1310;
        _1621 = _1310;
        _1622 = _1310;
        _1623 = _1310;
        _1624 = _1310;
        _1625 = _1310;
        _1626 = _1310;
        _1627 = _1310;
        _1628 = _1310;
        _1629 = _1310;
        _1630 = _1310;
        _1631 = 0.0;
        _1632 = 0.0;
        _1633 = 0.0;
    }
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1322)) + _1322;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1323)) + _1323;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1324)) + _1324;
    float _1666 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1669 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1672 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1643));
    float _1687 = _948 * 0.5;
    float _1688 = _949 * 0.5;
    float _1689 = _950 * 0.5;
    float _1690 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1693 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1696 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1730;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1703 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1309, _1313, _1316, _1319));
        float _1707 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1311, _1314, _1317, _1320));
        float _1711 = dot(vec4(_1687, _1688, _1689, 1.0), vec4(_1312, _1315, _1318, _1321));
        float _1718 = dot(vec4(cbModelParam._m0[39u]), vec4(_1687, _1688, _1689, 1.0));
        _1730 = dot(vec3(isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1718) ? 0.0 : (isnan(0.0) ? _1718 : max(0.0, _1718))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1730 = 1.0;
    }
    float _1741;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1732 = dot(vec4(cbModelParam._m0[40u]), vec4(_1687, _1688, _1689, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0)), isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1732) ? 0.0 : (isnan(0.0) ? _1732 : max(0.0, _1732))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1745 = (_1741 * cbModelParam._m0[1u].x) + (_1730 * (1.0 - cbModelParam._m0[1u].x));
    float _1755 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1756 = isnan(_1755) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1755 : min(cbModelParam._m0[25u].z, _1755));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1803 = fma(_1009, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1001)) + cbModelParam._m0[13u].w;
        float _1807 = fma(_1009, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1001)) + cbModelParam._m0[14u].w;
        float _1811 = fma(_1009, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1001)) + cbModelParam._m0[15u].w;
        float _1814 = fma(_950, cbModelParam._m0[13u].z, fma(_949, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _948));
        float _1817 = fma(_950, cbModelParam._m0[14u].z, fma(_949, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _948));
        float _1820 = fma(_950, cbModelParam._m0[15u].z, fma(_949, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _948));
        float _1848;
        if (_1814 > 0.0)
        {
            _1848 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1848 = frontier_phi_16_14_ladder;
        }
        float _2050;
        if (_1817 > 0.0)
        {
            _2050 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2050 = frontier_phi_25_21_ladder;
        }
        float _2293;
        if (_1820 > 0.0)
        {
            _2293 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2293 = frontier_phi_37_32_ladder;
        }
        float _2295 = isnan(_2050) ? _1848 : (isnan(_1848) ? _2050 : min(_1848, _2050));
        float _2296 = isnan(_2293) ? _2295 : (isnan(_2295) ? _2293 : min(_2295, _2293));
        float _2300 = (_2296 * _1814) + _1803;
        float _2301 = (_2296 * _1817) + _1807;
        float _2302 = (_2296 * _1820) + _1811;
        float _2303 = _2296 * 9.9999997473787516355514526367188e-05;
        float _2305 = (-1.0) - _2303;
        float _2307 = _2303 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2302 > _2307) || ((_2302 < _2305) || ((_2301 > _2307) || ((_2301 < _2305) || ((_2300 < _2305) || (_2300 > _2307))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2302, cbModelParam._m0[9u].z, fma(_2301, cbModelParam._m0[9u].y, _2300 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2302, cbModelParam._m0[10u].z, fma(_2301, cbModelParam._m0[10u].y, _2300 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2302, cbModelParam._m0[11u].z, fma(_2301, cbModelParam._m0[11u].y, _2300 * cbModelParam._m0[11u].x))), _1756);
            frontier_phi_15_37_ladder = _2426.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2426.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2426.x * cbModelParam._m0[1u].y;
        }
        _1836 = frontier_phi_15_37_ladder_2;
        _1838 = frontier_phi_15_37_ladder_1;
        _1840 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_948, _949, _950), _1756);
        _1836 = _1824.x * cbModelParam._m0[1u].y;
        _1838 = _1824.y * cbModelParam._m0[1u].y;
        _1840 = _1824.z * cbModelParam._m0[1u].y;
    }
    float _1844 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1844 : min(cbModelParam._m0[25u].w, _1844));
    float _1936;
    float _1938;
    float _1940;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1900 = fma(_1009, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1001)) + cbModelParam._m0[21u].w;
        float _1904 = fma(_1009, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1001)) + cbModelParam._m0[22u].w;
        float _1908 = fma(_1009, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1001)) + cbModelParam._m0[23u].w;
        float _1911 = fma(_950, cbModelParam._m0[21u].z, fma(_949, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _948));
        float _1914 = fma(_950, cbModelParam._m0[22u].z, fma(_949, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _948));
        float _1917 = fma(_950, cbModelParam._m0[23u].z, fma(_949, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _948));
        float _2055;
        if (_1911 > 0.0)
        {
            _2055 = abs((1.0 - _1900) / _1911);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1900 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _2055 = frontier_phi_27_23_ladder;
        }
        float _2320;
        if (_1914 > 0.0)
        {
            _2320 = abs((1.0 - _1904) / _1914);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1904 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2320 = frontier_phi_39_34_ladder;
        }
        float _2525;
        if (_1917 > 0.0)
        {
            _2525 = abs((1.0 - _1908) / _1917);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1908 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2525 = frontier_phi_48_45_ladder;
        }
        float _2527 = isnan(_2320) ? _2055 : (isnan(_2055) ? _2320 : min(_2055, _2320));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _1911) + _1900;
        float _2533 = (_2528 * _1914) + _1904;
        float _2534 = (_2528 * _1917) + _1908;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2536 = (-1.0) - _2535;
        float _2538 = _2535 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2534 > _2538) || ((_2534 < _2536) || ((_2533 > _2538) || ((_2533 < _2536) || ((_2532 < _2536) || (_2532 > _2538))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2534, cbModelParam._m0[17u].z, fma(_2533, cbModelParam._m0[17u].y, _2532 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2534, cbModelParam._m0[18u].z, fma(_2533, cbModelParam._m0[18u].y, _2532 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2534, cbModelParam._m0[19u].z, fma(_2533, cbModelParam._m0[19u].y, _2532 * cbModelParam._m0[19u].x))), _1845);
            frontier_phi_24_48_ladder = _2759.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2759.x * cbModelParam._m0[1u].z;
        }
        _1936 = frontier_phi_24_48_ladder_2;
        _1938 = frontier_phi_24_48_ladder_1;
        _1940 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1920 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_948, _949, _950), _1845);
        _1936 = _1920.x * cbModelParam._m0[1u].z;
        _1938 = _1920.y * cbModelParam._m0[1u].z;
        _1940 = _1920.z * cbModelParam._m0[1u].z;
    }
    float _1952 = ((((1.0 - _969) * ((_956 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_969 * _956)) * _940;
    float _1953 = _1952 * ((cbModelParam._m0[1u].w * (_1936 - _1836)) + _1836);
    float _1954 = _1952 * ((cbModelParam._m0[1u].w * (_1938 - _1838)) + _1838);
    float _1955 = _1952 * ((cbModelParam._m0[1u].w * (_1940 - _1840)) + _1840);
    float _1958 = fma(_1955, cbSceneParam._m0[89u].z, fma(_1954, cbSceneParam._m0[89u].y, _1953 * cbSceneParam._m0[89u].x));
    float _1961 = fma(_1955, cbSceneParam._m0[90u].z, fma(_1954, cbSceneParam._m0[90u].y, _1953 * cbSceneParam._m0[90u].x));
    float _1964 = fma(_1955, cbSceneParam._m0[91u].z, fma(_1954, cbSceneParam._m0[91u].y, _1953 * cbSceneParam._m0[91u].x));
    uvec4 _1974 = floatBitsToUint(cbInstanceData._m0[_915 + 5u]);
    uint _1976 = _1974.x * 14u;
    uint _1977 = _1976 + 13u;
    float _1984 = _940 + (-1.0);
    float _1989 = (cbLight._m0[_1977].x * _1984) + 1.0;
    float _1990 = (cbLight._m0[_1977].y * _1984) + 1.0;
    float _1991 = (cbLight._m0[_1977].z * _1984) + 1.0;
    float _1992 = (cbLight._m0[_1977].w * _1984) + 1.0;
    uint _1993 = _1976 + 5u;
    float _1999 = isnan(1.0) ? _1990 : (isnan(_1990) ? 1.0 : min(_1990, 1.0));
    uint _2003 = _1976 + 4u;
    float _2009 = isnan(1.0) ? _1989 : (isnan(_1989) ? 1.0 : min(_1989, 1.0));
    uint _2013 = _1976 | 1u;
    float _2024 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_791, _792, _793));
    float _2027 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_791, _792, _793));
    float _4217 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _4228 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2032 = (isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.3183098733425140380859375;
    float _2034 = (isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * 0.3183098733425140380859375;
    float _2041 = ((cbLight._m0[_1993].x * _1999) * _2034) + ((cbLight._m0[_2003].x * _2009) * _2032);
    float _2042 = ((_1999 * cbLight._m0[_1993].y) * _2034) + ((_2009 * cbLight._m0[_2003].y) * _2032);
    float _2043 = ((_1999 * cbLight._m0[_1993].z) * _2034) + ((_2009 * cbLight._m0[_2003].z) * _2032);
    uvec4 _2047 = floatBitsToUint(cbLight._m0[_1976 + 12u]);
    bool _2049 = _2047.x == 0u;
    float _2060;
    float _2062;
    float _2064;
    if (_2049)
    {
        _2060 = _2041;
        _2062 = _2042;
        _2064 = _2043;
    }
    else
    {
        uint _2068 = _1976 + 6u;
        float _2084 = (dot(vec3(cbLight._m0[_1976 + 2u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2085 = _2084 * _2084;
        float _4239 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2086 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _2087 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2060 = (((cbLight._m0[_2068].x * 0.3183098733425140380859375) * _2086) * _2087) + _2041;
        _2062 = (((cbLight._m0[_2068].y * 0.3183098733425140380859375) * _2086) * _2087) + _2042;
        _2064 = (((cbLight._m0[_2068].z * 0.3183098733425140380859375) * _2086) * _2087) + _2043;
    }
    bool _2067 = _2047.y == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2067)
    {
        _2105 = _2060;
        _2107 = _2062;
        _2109 = _2064;
    }
    else
    {
        uint _2264 = _1976 + 7u;
        float _2280 = (dot(vec3(cbLight._m0[_1976 + 3u].xyz), vec3(_791, _792, _793)) * 0.5) + 0.5;
        float _2281 = _2280 * _2280;
        float _4255 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
        float _2282 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _2283 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2105 = (((cbLight._m0[_2264].x * 0.3183098733425140380859375) * _2282) * _2283) + _2060;
        _2107 = (((cbLight._m0[_2264].y * 0.3183098733425140380859375) * _2282) * _2283) + _2062;
        _2109 = (((cbLight._m0[_2264].z * 0.3183098733425140380859375) * _2282) * _2283) + _2064;
    }
    uint _2112 = _1976 + 8u;
    float _2125 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _795) * 0.949999988079071044921875);
    float _2126 = _2125 * _2125;
    float _2127 = cbLight._m0[_1976].x + _869;
    float _2128 = cbLight._m0[_1976].y + _870;
    float _2129 = cbLight._m0[_1976].z + _871;
    float _2133 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
    float _2134 = _2133 * _2127;
    float _2135 = _2133 * _2128;
    float _2136 = _2133 * _2129;
    float _2137 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_1976].xyz));
    float _4271 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _2141 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _2142 = dot(vec3(_791, _792, _793), vec3(_2134, _2135, _2136));
    float _4293 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2145 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    float _2146 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2134, _2135, _2136));
    float _4304 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2150 = _2126 * _2126;
    float _2154 = ((_2145 * _2145) * (_2150 + (-1.0))) + 1.0;
    float _2165 = (exp2(log2(1.0 - (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2166 = 1.0 - _2126;
    float _2177 = (0.5 / (((_2141 * ((_2140 * _2166) + _2126)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2166) + _2126) * _2140))) * _2140;
    float _4315 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2179 = (isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0))) * (_2150 / ((_2154 * _2154) * 3.141590118408203125));
    uint _2190 = _1976 + 9u;
    float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _795) * 0.949999988079071044921875);
    float _2202 = _2201 * _2201;
    float _2203 = cbLight._m0[_2013].x + _869;
    float _2204 = cbLight._m0[_2013].y + _870;
    float _2205 = cbLight._m0[_2013].z + _871;
    float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
    float _2210 = _2209 * _2203;
    float _2211 = _2209 * _2204;
    float _2212 = _2209 * _2205;
    float _2213 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2013].xyz));
    float _4326 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
    float _2217 = dot(vec3(_791, _792, _793), vec3(_2210, _2211, _2212));
    float _4337 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2220 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
    float _2221 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2210, _2211, _2212));
    float _4348 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2225 = _2202 * _2202;
    float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
    float _2238 = (exp2(log2(1.0 - (isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2239 = 1.0 - _2202;
    float _2249 = (0.5 / (((_2141 * ((_2216 * _2239) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2239) + _2202) * _2216))) * _2216;
    float _4359 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2251 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
    float _2261 = (((_2238 * cbLight._m0[_2190].x) * _2251) * _1999) + (((_2165 * cbLight._m0[_2112].x) * _2179) * _2009);
    float _2262 = (((_2238 * cbLight._m0[_2190].y) * _2251) * _1999) + (((_2165 * cbLight._m0[_2112].y) * _2179) * _2009);
    float _2263 = (((_2238 * cbLight._m0[_2190].z) * _2251) * _1999) + (((_2165 * cbLight._m0[_2112].z) * _2179) * _2009);
    float _2325;
    float _2327;
    float _2329;
    if (_2049)
    {
        _2325 = _2261;
        _2327 = _2262;
        _2329 = _2263;
    }
    else
    {
        uint _2331 = _1976 + 2u;
        uint _2335 = _1976 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _795) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _869;
        float _2352 = cbLight._m0[_2331].y + _870;
        float _2353 = cbLight._m0[_2331].z + _871;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2331].xyz));
        float _4370 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _2365 = dot(vec3(_791, _792, _793), vec3(_2358, _2359, _2360));
        float _4381 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4392 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2387 = 1.0 - _2350;
        float _2397 = (0.5 / (((_2141 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2387) + _2350) * _2364))) * _2364;
        float _4403 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
        _2325 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2400) + _2261;
        _2327 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2400) + _2262;
        _2329 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2400) + _2263;
    }
    float _2435;
    float _2437;
    float _2439;
    if (_2067)
    {
        _2435 = _2325;
        _2437 = _2327;
        _2439 = _2329;
    }
    else
    {
        uint _2446 = _1976 + 3u;
        uint _2450 = _1976 + 11u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _795) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _869;
        float _2467 = cbLight._m0[_2446].y + _870;
        float _2468 = cbLight._m0[_2446].z + _871;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_791, _792, _793), vec3(cbLight._m0[_2446].xyz));
        float _4419 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
        float _2480 = dot(vec3(_791, _792, _793), vec3(_2473, _2474, _2475));
        float _4430 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4441 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2501 = (exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2502 = 1.0 - _2465;
        float _2512 = (0.5 / (((_2141 * ((_2479 * _2502) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2141 * _2502) + _2465) * _2479))) * _2479;
        float _4452 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2514 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2515 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
        _2435 = (((_2501 * cbLight._m0[_2450].x) * _2514) * _2515) + _2325;
        _2437 = (((_2501 * cbLight._m0[_2450].y) * _2514) * _2515) + _2327;
        _2439 = (((_2501 * cbLight._m0[_2450].z) * _2514) * _2515) + _2329;
    }
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    float _2659;
    if (_1974.y == 0u)
    {
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2591 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2590;
        float _2592 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2590;
        float _2593 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2590;
        uvec4 _2605 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2606 = _2605.x;
        uint _2617 = uint((float(_2605.y) * floor(float(uint(cbSceneParam._m0[85u].y * _878) / _2606))) + floor(float(uint(cbSceneParam._m0[85u].x * _877) / _2606)));
        float _2627 = (log2(_2593 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2628 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        uint _2631 = uint(isnan(14.0) ? _2628 : (isnan(_2628) ? 14.0 : min(_2628, 14.0)));
        uvec4 _2636 = texelFetch(g_lightClusterGridBuffer, int(((_2631 << 2u) + (_2617 << 6u)) >> 2u));
        uint _2637 = _2636.x;
        uint _2638 = _2605.z;
        float _2764;
        float _2766;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        if (((((1u << ((_2638 >> 4u) & 15u)) + 4294967295u) & _2637) == 0u) || ((_2638 & 240u) == 0u))
        {
            _2764 = 0.0;
            _2766 = 0.0;
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
        }
        else
        {
            float _2765;
            float _2767;
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            uint _2914 = 0u;
            uint _2923;
            bool _2924;
            for (;;)
            {
                _2923 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                _2924 = _2923 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2924)
                {
                    frontier_phi_63_pred = _2913;
                    frontier_phi_63_pred_1 = _2912;
                    frontier_phi_63_pred_2 = _2911;
                    frontier_phi_63_pred_3 = _2910;
                    frontier_phi_63_pred_4 = _2909;
                    frontier_phi_63_pred_5 = _2908;
                }
                else
                {
                    float _3032;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    uint _3038;
                    _3032 = _2908;
                    _3033 = _2909;
                    _3034 = _2910;
                    _3035 = _2911;
                    _3036 = _2912;
                    _3037 = _2913;
                    _3038 = _2923;
                    float _2964;
                    float _2965;
                    float _2966;
                    float _2967;
                    float _2968;
                    float _2969;
                    for (;;)
                    {
                        uint _3042 = uint(findLSB(_3038)) + (_2914 << 5u);
                        uint _3039 = (_3038 + 4294967295u) & _3038;
                        uint _3044 = _3042 * 48u;
                        vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3044)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3044 + 3u)).x));
                        uint _3064 = (_3042 * 48u) + 4u;
                        vec4 _3077 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3064)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3064 + 3u)).x));
                        uint _3083 = (_3042 * 48u) + 8u;
                        vec3 _3094 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x));
                        float _3098 = _3058.x - _2591;
                        float _3099 = _3058.y - _2592;
                        float _3100 = _3058.z - _2593;
                        float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                        float _3104 = inversesqrt(_3101);
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3108 = dot(vec3(_896, _899, _902), vec3(_3105, _3106, _3107));
                        float _3113 = 1.0 - (_3101 * _3058.w);
                        float _4478 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                        float _3114 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
                        float _3115 = sqrt(_3101) * _3077.w;
                        float _3118 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                        float _3119 = _3118 * _3118;
                        float _3122 = ((1.0 - _3119) * _3108) + _3119;
                        float _3125 = _3115 * _3115;
                        float _3129 = ((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3114) / ((_3125 * 0.699999988079071044921875) + 1.0);
                        float _3133 = (-0.0) - _2591;
                        float _3134 = (-0.0) - _2592;
                        float _3135 = (-0.0) - _2593;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3140 = _3139 * _3133;
                        float _3141 = _3139 * _3134;
                        float _3142 = _3139 * _3135;
                        float _3150 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                        float _3151 = 1.0 - _956;
                        float _3158 = sqrt(1.0 - ((1.0 - (_3151 * _3151)) * (1.0 - (_3150 * _3150))));
                        float _3159 = _3158 * _3158;
                        float _3160 = _3159 * _3159;
                        float _3161 = _3140 + _3105;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3167 = inversesqrt(dot(vec3(_3161, _3162, _3163), vec3(_3161, _3162, _3163)));
                        float _3171 = dot(vec3(_896, _899, _902), vec3(_3140, _3141, _3142));
                        float _4494 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3174 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
                        float _3175 = dot(vec3(_896, _899, _902), vec3(_3167 * _3161, _3167 * _3162, _3167 * _3163));
                        float _4505 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3178 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3182 = ((_3178 * _3178) * (_3160 + (-1.0))) + 1.0;
                        float _3183 = _3118 * _3159;
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3108) + _3184;
                        float _4516 = isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0));
                        float _3188 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
                        float _3189 = 1.0 - _3159;
                        float _3199 = (0.5 / (((_3188 * ((_3174 * _3189) + _3159)) + 9.9999999392252902907785028219223e-09) + (((_3188 * _3189) + _3159) * _3174))) * _3188;
                        float _4527 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                        float _3210 = (((_3160 * 3.1415927410125732421875) * (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) / ((_3182 * _3182) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125))) * _3114;
                        _2967 = (_3129 * _3077.x) + _3035;
                        _2968 = (_3129 * _3077.y) + _3036;
                        _2969 = (_3129 * _3077.z) + _3037;
                        _2964 = (_3210 * _3094.x) + _3032;
                        _2965 = (_3210 * _3094.y) + _3033;
                        _2966 = (_3210 * _3094.z) + _3034;
                        if (_3039 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3032 = _2964;
                            _3033 = _2965;
                            _3034 = _2966;
                            _3035 = _2967;
                            _3036 = _2968;
                            _3037 = _2969;
                            _3038 = _3039;
                        }
                    }
                    frontier_phi_63_pred = _2969;
                    frontier_phi_63_pred_1 = _2968;
                    frontier_phi_63_pred_2 = _2967;
                    frontier_phi_63_pred_3 = _2966;
                    frontier_phi_63_pred_4 = _2965;
                    frontier_phi_63_pred_5 = _2964;
                }
                _2775 = frontier_phi_63_pred;
                _2773 = frontier_phi_63_pred_1;
                _2771 = frontier_phi_63_pred_2;
                _2769 = frontier_phi_63_pred_3;
                _2767 = frontier_phi_63_pred_4;
                _2765 = frontier_phi_63_pred_5;
                uint _2915 = _2914 + 1u;
                if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2908 = _2765;
                    _2909 = _2767;
                    _2910 = _2769;
                    _2911 = _2771;
                    _2912 = _2773;
                    _2913 = _2775;
                    _2914 = _2915;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2764 = _2765;
            _2766 = _2767;
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
        }
        uvec4 _2778 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2779 = _2778.z;
        uint _2781 = (_2779 >> 8u) & 15u;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((4294967295u << _2781) & _2637) == 0u)
        {
            _2876 = _2764;
            _2878 = _2766;
            _2880 = _2768;
            _2882 = _2770;
            _2884 = _2772;
            _2886 = _2774;
        }
        else
        {
            float _2901 = inversesqrt(dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593)));
            float _2902 = _2901 * _2591;
            float _2903 = _2901 * _2592;
            float _2904 = _2901 * _2593;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2781 < ((_2779 >> 12u) & 15u))
            {
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _3015 = _2764;
                float _3016 = _2766;
                float _3017 = _2768;
                float _3018 = _2770;
                float _3019 = _2772;
                float _3020 = _2774;
                uint _3021 = _2781;
                uint _3030;
                bool _3031;
                for (;;)
                {
                    _3030 = texelFetch(g_lightClassification, int((((_2631 << 5u) + (_2617 << 9u)) + (_3021 << 2u)) >> 2u)).x;
                    _3031 = _3030 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_3031)
                    {
                        frontier_phi_69_pred = _3020;
                        frontier_phi_69_pred_1 = _3019;
                        frontier_phi_69_pred_2 = _3018;
                        frontier_phi_69_pred_3 = _3017;
                        frontier_phi_69_pred_4 = _3016;
                        frontier_phi_69_pred_5 = _3015;
                    }
                    else
                    {
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3228 = _3015;
                        float _3229 = _3016;
                        float _3230 = _3017;
                        float _3231 = _3018;
                        float _3232 = _3019;
                        float _3233 = _3020;
                        uint _3234 = _3030;
                        uint _3235;
                        vec4 _3260;
                        float _3261;
                        vec4 _3276;
                        vec3 _3288;
                        vec4 _3303;
                        vec4 _3319;
                        float _3366;
                        bool _3367;
                        for (;;)
                        {
                            uint _3245 = ((_3021 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3234));
                            _3235 = (_3234 + 4294967295u) & _3234;
                            uint _3247 = _3245 * 40u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            _3261 = _3260.w;
                            uint _3263 = (_3245 * 40u) + 4u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3278 = (_3245 * 40u) + 8u;
                            _3288 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x));
                            uint _3290 = (_3245 * 40u) + 16u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            uint _3306 = (_3245 * 40u) + 20u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3322 = (_3245 * 40u) + 24u;
                            vec4 _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3341 = (_3245 * 40u) + 28u;
                            vec4 _3354 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3341)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3341 + 3u)).x));
                            _3366 = fma(_2593, _3354.z, fma(_2592, _3354.y, _3354.x * _2591)) + _3354.w;
                            _3367 = !((fma(_2593, _3335.z, fma(_2592, _3335.y, _3335.x * _2591)) + _3335.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3367)
                            {
                                float _3394 = _3260.x - _2591;
                                float _3395 = _3260.y - _2592;
                                float _3396 = _3260.z - _2593;
                                float _3397 = dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396));
                                float _3400 = inversesqrt(_3397);
                                float _3401 = _3400 * _3394;
                                float _3402 = _3400 * _3395;
                                float _3403 = _3400 * _3396;
                                float _3407 = 1.0 - (_3397 / (_3261 * _3261));
                                float _4538 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                                float _3408 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
                                float _3412 = sqrt(_3397) * _3276.w;
                                float _3414 = 1.39999997615814208984375 / (_3412 + 1.39999997615814208984375);
                                float _3415 = _3414 * _3414;
                                float _3418 = ((1.0 - _3415) * dot(vec3(_3401, _3402, _3403), vec3(_896, _899, _902))) + _3415;
                                float _3421 = _3412 * _3412;
                                float _3425 = (fma(_2593, _3303.z, fma(_2592, _3303.y, _3303.x * _2591)) + _3303.w) / _3366;
                                float _3426 = (fma(_2593, _3319.z, fma(_2592, _3319.y, _3319.x * _2591)) + _3319.w) / _3366;
                                float _3430 = 1.0 - dot(vec2(_3425, _3426), vec2(_3425, _3426));
                                float _4554 = isnan(0.0) ? _3430 : (isnan(_3430) ? 0.0 : max(_3430, 0.0));
                                float _3431 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
                                float _3432 = _3431 * (((isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))) * _3408) / ((_3421 * 0.699999988079071044921875) + 1.0));
                                float _3444 = exp2(log2(1.0 / ((_3421 * 3.5) + 5.0)) * 0.25);
                                float _3445 = 1.0 - _956;
                                float _3452 = sqrt(1.0 - ((1.0 - (_3445 * _3445)) * (1.0 - (_3444 * _3444))));
                                float _3453 = _3452 * _3452;
                                float _3454 = _3453 * _3453;
                                float _3455 = _3401 - _2902;
                                float _3456 = _3402 - _2903;
                                float _3457 = _3403 - _2904;
                                float _3461 = inversesqrt(dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457)));
                                float _3465 = dot(vec3(_896, _899, _902), vec3((-0.0) - _2902, (-0.0) - _2903, (-0.0) - _2904));
                                float _4565 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                                float _3468 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3469 = dot(vec3(_896, _899, _902), vec3(_3461 * _3455, _3461 * _3456, _3461 * _3457));
                                float _4576 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                                float _3472 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
                                float _3476 = ((_3472 * _3472) * (_3454 + (-1.0))) + 1.0;
                                float _3477 = _3414 * _3453;
                                float _3478 = _3477 * _3477;
                                float _3484 = ((1.0 - _3478) * dot(vec3(_896, _899, _902), vec3(_3401, _3402, _3403))) + _3478;
                                float _4587 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3485 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                                float _3486 = 1.0 - _3453;
                                float _3496 = (0.5 / (((_3485 * ((_3468 * _3486) + _3453)) + 9.9999999392252902907785028219223e-09) + (((_3485 * _3486) + _3453) * _3468))) * _3485;
                                float _4598 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3506 = (_3431 * _3408) * (((_3454 * 3.1415927410125732421875) * (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0)))) / ((_3476 * _3476) * ((_3421 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3432 * _3276.z;
                                frontier_phi_75_pred_1 = _3432 * _3276.y;
                                frontier_phi_75_pred_2 = _3432 * _3276.x;
                                frontier_phi_75_pred_3 = _3506 * _3288.z;
                                frontier_phi_75_pred_4 = _3506 * _3288.y;
                                frontier_phi_75_pred_5 = _3506 * _3288.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_75_pred;
                            _3514 = frontier_phi_75_pred_1;
                            _3513 = frontier_phi_75_pred_2;
                            _3512 = frontier_phi_75_pred_3;
                            _3511 = frontier_phi_75_pred_4;
                            _3510 = frontier_phi_75_pred_5;
                            _3218 = _3513 + _3231;
                            _3219 = _3514 + _3232;
                            _3220 = _3515 + _3233;
                            _3215 = _3510 + _3228;
                            _3216 = _3511 + _3229;
                            _3217 = _3512 + _3230;
                            if (_3235 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3220;
                                _3234 = _3235;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3220;
                        frontier_phi_69_pred_1 = _3219;
                        frontier_phi_69_pred_2 = _3218;
                        frontier_phi_69_pred_3 = _3217;
                        frontier_phi_69_pred_4 = _3216;
                        frontier_phi_69_pred_5 = _3215;
                    }
                    _2887 = frontier_phi_69_pred;
                    _2885 = frontier_phi_69_pred_1;
                    _2883 = frontier_phi_69_pred_2;
                    _2881 = frontier_phi_69_pred_3;
                    _2879 = frontier_phi_69_pred_4;
                    _2877 = frontier_phi_69_pred_5;
                    uint _3022 = _3021 + 1u;
                    if (_3022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3015 = _2877;
                        _3016 = _2879;
                        _3017 = _2881;
                        _3018 = _2883;
                        _3019 = _2885;
                        _3020 = _2887;
                        _3021 = _3022;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2887;
                frontier_phi_57_58_ladder_1 = _2885;
                frontier_phi_57_58_ladder_2 = _2883;
                frontier_phi_57_58_ladder_3 = _2881;
                frontier_phi_57_58_ladder_4 = _2879;
                frontier_phi_57_58_ladder_5 = _2877;
            }
            else
            {
                frontier_phi_57_58_ladder = _2774;
                frontier_phi_57_58_ladder_1 = _2772;
                frontier_phi_57_58_ladder_2 = _2770;
                frontier_phi_57_58_ladder_3 = _2768;
                frontier_phi_57_58_ladder_4 = _2766;
                frontier_phi_57_58_ladder_5 = _2764;
            }
            _2876 = frontier_phi_57_58_ladder_5;
            _2878 = frontier_phi_57_58_ladder_4;
            _2880 = frontier_phi_57_58_ladder_3;
            _2882 = frontier_phi_57_58_ladder_2;
            _2884 = frontier_phi_57_58_ladder_1;
            _2886 = frontier_phi_57_58_ladder;
        }
        float _2891 = isnan(1.0) ? _940 : (isnan(_940) ? 1.0 : min(_940, 1.0));
        _2649 = (_2891 * _2882) + _2105;
        _2651 = (_2891 * _2884) + _2107;
        _2653 = (_2891 * _2886) + _2109;
        _2655 = ((_2876 * 0.039999999105930328369140625) * _2891) + _2435;
        _2657 = ((_2878 * 0.039999999105930328369140625) * _2891) + _2437;
        _2659 = ((_2880 * 0.039999999105930328369140625) * _2891) + _2439;
    }
    else
    {
        _2649 = _2105;
        _2651 = _2107;
        _2653 = _2109;
        _2655 = _2435;
        _2657 = _2437;
        _2659 = _2439;
    }
    uint _2665 = _916 + uint(cbMatDynParam._m0[0u].w);
    float _4614 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
    float _4625 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
    float _4636 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _4647 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _2697 = (((isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0))) * (_2649 + ((isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0))) * _940))) + ((_2655 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1745)) * cbPerFrame._m0[3u].x)) + (((cbMtdParam._m0[15u].w * _560) * _777) * cbInstanceData._m0[_2665].x);
    float _2699 = ((((cbMtdParam._m0[15u].w * _561) * _777) * cbInstanceData._m0[_2665].y) + ((_2657 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1745)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_2651 + ((isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0))) * _940)));
    float _2701 = ((((cbMtdParam._m0[15u].w * _562) * _777) * cbInstanceData._m0[_2665].z) + ((_2659 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1745)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2653 + ((isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))) * _940)));
    float _2709 = cbInstanceData._m0[_915 + 6u].w * (isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0)));
    float _2714 = _877 / cbSceneParam._m0[86u].x;
    float _2715 = _878 / cbSceneParam._m0[86u].y;
    vec4 _2729 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, (log2((isnan(cbSceneParam._m0[77u].w) ? _813 : (isnan(_813) ? cbSceneParam._m0[77u].w : min(_813, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2731 = _2729.x;
    float _2732 = _2729.y;
    float _2733 = _2729.z;
    float _2734 = _2729.w;
    float _2826;
    float _2828;
    float _2830;
    float _2832;
    if (_813 > cbSceneParam._m0[78u].w)
    {
        float _2789 = isnan(_813) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _813 : min(cbSceneParam._m0[80u].w, _813));
        float _2790 = _2789 / _813;
        float _2801 = _2790 * _862;
        float _2802 = _863 * _2790;
        float _2803 = (-0.0) - _2802;
        float _2804 = _2790 * _864;
        float _2806 = (cbSceneParam._m0[77u].w * _2803) / _2789;
        float _2807 = _2806 + cbSceneParam._m0[79u].w;
        float _2808 = cbSceneParam._m0[79u].w - _2802;
        float _2814 = sqrt(((_2801 * _2801) + (_2802 * _2802)) + (_2804 * _2804));
        float _2817 = (1.0 - (cbSceneParam._m0[77u].w / _2789)) * _2814;
        float _2822 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2824 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2977;
        if (abs((_2803 - _2806) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2977 = ((((_2807 > 0.0) ? exp2(_2822 * _2807) : (2.0 - exp2(_2824 * _2807))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2817;
        }
        else
        {
            float _2937 = 1.0 / cbSceneParam._m0[80u].x;
            float _2938 = isnan(_2808) ? _2807 : (isnan(_2807) ? _2808 : max(_2807, _2808));
            float _2939 = isnan(_2808) ? _2807 : (isnan(_2807) ? _2808 : min(_2807, _2808));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            float _2949 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : min(_2939, 0.0));
            _2977 = ((abs(_2814 / _2803) * cbSceneParam._m0[80u].y) * ((((_2948 - _2949) * 2.0) - ((exp2(_2822 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0)))) - exp2(_2822 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))))) * _2937)) - ((exp2(_2824 * _2948) - exp2(_2824 * _2949)) * _2937))) + (_2817 * cbSceneParam._m0[80u].z);
        }
        vec4 _2979 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2714, _2715, 1.0), 0.0);
        float _2988 = exp2((_2977 * (-1.44269502162933349609375)) * (1.0 - _2979.w));
        float _2989 = log2(_2988);
        float _3005 = log2(_2734);
        _2826 = (exp2(_3005 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].x)) * _2979.x) / cbSceneParam._m0[78u].x)) + _2731;
        _2828 = (exp2(_3005 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].y)) * _2979.y) / cbSceneParam._m0[78u].y)) + _2732;
        _2830 = (exp2(_3005 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2989 * cbSceneParam._m0[78u].z)) * _2979.z) / cbSceneParam._m0[78u].z)) + _2733;
        _2832 = _2988 * _2734;
    }
    else
    {
        _2826 = _2731;
        _2828 = _2732;
        _2830 = _2733;
        _2832 = _2734;
    }
    float _2844 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2845 = _2844 == 3.0;
    float _2846 = log2(_2832);
    float _2853 = exp2(_2846 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0)));
    float _2854 = exp2(_2846 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0)));
    float _2855 = exp2(_2846 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0)));
    float _2864 = (_2844 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2864 * (_2845 ? _2853 : (_2853 + (cbSceneParam._m0[72u].w * _2826)));
    SV_Target.y = _2864 * (_2845 ? _2854 : (_2854 + (cbSceneParam._m0[72u].w * _2828)));
    SV_Target.z = _2864 * (_2845 ? _2855 : (_2855 + (cbSceneParam._m0[72u].w * _2830)));
    SV_Target.w = _2709;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2709;
}


