#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1172;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    float _281 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _291 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _281);
    float _292 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _281);
    float _293 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _281);
    uint _299 = uint(roundEven(NORMAL.w)) * 13u;
    uint _304 = _299 + 1u;
    uint _308 = _299 + 2u;
    float _317 = sqrt(((cbInstanceData._m0[_304].x * cbInstanceData._m0[_304].x) + (cbInstanceData._m0[_299].x * cbInstanceData._m0[_299].x)) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x));
    float _318 = _317 * TEXCOORD.z;
    float _319 = _317 * TEXCOORD.w;
    vec4 _339 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _348 = (_339.x * 2.0) + (-1.0);
    float _350 = (_339.y * 2.0) + (-1.0);
    float _351 = dot(vec2(_348, _350), vec2(_348, _350));
    float _3085 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _357 = sqrt(1.0 - (isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0))));
    float _360 = fma(_357, _232, fma(_350, _225, _348 * _211));
    float _363 = fma(_357, _233, fma(_350, _226, _348 * _212));
    float _366 = fma(_357, _234, fma(_350, _227, _348 * _213));
    float _370 = inversesqrt(dot(vec3(_360, _363, _366), vec3(_360, _363, _366)));
    float _371 = _370 * _360;
    float _372 = _370 * _363;
    float _401 = (cbMtdParam._m0[17u].w + dot(vec4(_371, _372, _370 * _366, 0.0), vec4(cbMtdParam._m0[19u].xyz, 0.0))) - (texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _318) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _319) + cbTextureTilingScale._m0[6u].w)).x * cbMtdParam._m0[18u].z);
    float _3096 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _402 = isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0));
    vec4 _414 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _419 = _414.w;
    float _431 = dot(vec3(_291, _292, _293), vec3(_211, _212, _213));
    float _434 = dot(vec3(_291, _292, _293), vec3(_225, _226, _227));
    float _437 = dot(vec3(_291, _292, _293), vec3(_232, _233, _234));
    float _443 = inversesqrt(dot(vec3(_431, _434, _437), vec3(_431, _434, _437)));
    float _465 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _485 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_431 * cbMtdParam._m0[14u].x) * _443) * _465) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_434 * cbMtdParam._m0[14u].x) * _443) * _465) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _508 = inversesqrt(dot(vec3(_291, _292, _293), vec3(_291, _292, _293)));
    float _509 = _508 * _291;
    float _510 = _508 * _292;
    float _511 = _508 * _293;
    float _512 = dot(vec4(_509, _510, _511, 0.0), vec4(_232, _233, _234, 0.0));
    float _515 = _512 - cbMtdParam._m0[15u].z;
    float _3107 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _522 = exp2(log2(1.0 - (isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _537 = ((((_414.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _485.x) * cbMtdParam._m0[9u].x) * ((_522 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _542 = ((((_414.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _485.y) * cbMtdParam._m0[9u].y) * ((_522 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _547 = ((((_414.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _485.z) * cbMtdParam._m0[9u].z) * ((_522 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _554 = ((cbMtdParam._m0[11u].x - _537) * _402) + _537;
    float _555 = ((cbMtdParam._m0[11u].y - _542) * _402) + _542;
    float _556 = ((cbMtdParam._m0[11u].z - _547) * _402) + _547;
    vec4 _568 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _318) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _319) + cbTextureTilingScale._m0[9u].w));
    float _575 = (_568.x * 2.0) + (-1.0);
    float _576 = (_568.y * 2.0) + (-1.0);
    float _577 = dot(vec2(_575, _576), vec2(_575, _576));
    float _3123 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _589 = (cbMtdParam._m0[16u].y + _339.z) + cbMtdParam._m0[17u].z;
    float _592 = ((_568.z - _589) * _402) + _589;
    float _602 = ((sqrt(1.0 - (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0)))) - _357) * _402) + _357;
    float _605 = (((_575 - _348) * _402) + _348) + (cbMtdParam._m0[14u].z * _348);
    float _606 = (((_576 - _350) * _402) + _350) + (cbMtdParam._m0[14u].z * _350);
    vec4 _618 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _622 = cbMtdParam._m0[16u].w * _618.x;
    float _624 = _622 - (_622 * _402);
    float _633 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _634 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _644 = cbSceneParam._m0[86u].x * ((_633 / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[18u].y * _371));
    float _645 = cbSceneParam._m0[86u].y * ((_634 / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[18u].y * _372));
    float _652 = isnan(cbInstanceData._m0[8u].x) ? _644 : (isnan(_644) ? cbInstanceData._m0[8u].x : max(_644, cbInstanceData._m0[8u].x));
    float _653 = isnan(cbInstanceData._m0[8u].y) ? _645 : (isnan(_645) ? cbInstanceData._m0[8u].y : max(_645, cbInstanceData._m0[8u].y));
    vec4 _657 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _652 : (isnan(_652) ? cbInstanceData._m0[8u].z : min(_652, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _653 : (isnan(_653) ? cbInstanceData._m0[8u].w : min(_653, cbInstanceData._m0[8u].w))));
    float _690 = _512 - cbMtdParam._m0[15u].x;
    float _3154 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _700 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3154 : (isnan(_3154) ? 1.0 : min(_3154, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3170 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _701 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
    float _703 = _701 - (_701 * _402);
    float _707 = fma(_602, _232, fma(_606, _225, _605 * _211));
    float _710 = fma(_602, _233, fma(_606, _226, _605 * _212));
    float _713 = fma(_602, _234, fma(_606, _227, _605 * _213));
    float _717 = inversesqrt(dot(vec3(_707, _710, _713), vec3(_707, _710, _713)));
    float _718 = _717 * _707;
    float _719 = _717 * _710;
    float _720 = _717 * _713;
    float _3181 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _721 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
    float _3192 = isnan(0.0) ? _592 : (isnan(_592) ? 0.0 : max(_592, 0.0));
    float _722 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
    float _723 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3208 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3219 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3230 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _740 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(_720, cbSceneParam._m0[5u].z, fma(_719, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _718));
    float _761 = fma(_720, cbSceneParam._m0[6u].z, fma(_719, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _718));
    float _764 = fma(_720, cbSceneParam._m0[7u].z, fma(_719, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _718));
    uint _778 = (_299 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _784 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0)))) * cbInstanceData._m0[_778].x;
    float _785 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0)))) * cbInstanceData._m0[_778].y;
    float _786 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0)))) * cbInstanceData._m0[_778].z;
    float _3241 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    float _3252 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _788 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _3263 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _789 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    vec4 _793 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _633, cbSceneParam._m0[86u].y * _634));
    float _796 = _793.x * TEXCOORD_5.w;
    float _797 = dot(vec3(_718, _719, _720), vec3(_509, _510, _511));
    float _800 = _797 * 2.0;
    float _804 = (_800 * _718) - _509;
    float _805 = (_800 * _719) - _510;
    float _806 = (_800 * _720) - _511;
    float _807 = dot(vec3(_509, _510, _511), vec3(_718, _719, _720));
    float _810 = abs(_807);
    float _3274 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
    float _811 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _817 = sqrt(_722);
    float _829 = exp2((_817 * 5.0) * log2(1.0 - (_811 * 0.999000012874603271484375))) / (4.0 - (_817 * 3.0));
    float _861 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _865 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _869 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_869, cbModelParam._m0[26u].z, fma(_865, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _861));
        float _900 = fma(_869, cbModelParam._m0[27u].z, fma(_865, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _861));
        float _904 = fma(_869, cbModelParam._m0[28u].z, fma(_865, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _861));
        float _929 = _861 + _718;
        float _930 = _865 + _719;
        float _931 = _869 + _720;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_718, _719, _720), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3300 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3311 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3322 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_718, _719, _720), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3333 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3344 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3355 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_718, _719, _720), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3388 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_869, cbModelParam._m0[30u].z, fma(_865, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _861));
        float _1216 = fma(_869, cbModelParam._m0[31u].z, fma(_865, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _861));
        float _1220 = fma(_869, cbModelParam._m0[32u].z, fma(_865, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _861));
        float _1243 = _861 + _718;
        float _1244 = _865 + _719;
        float _1245 = _869 + _720;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_718, _719, _720), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3451 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_718, _719, _720), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3462 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3473 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3484 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_718, _719, _720), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3517 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1172;
        _1482 = _1172;
        _1483 = _1172;
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = _1172;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1184)) + _1184;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1185)) + _1185;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1186)) + _1186;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _804 * 0.5;
    float _1550 = _805 * 0.5;
    float _1551 = _806 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _722);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1698;
    float _1700;
    float _1702;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1665 = fma(_869, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _861)) + cbModelParam._m0[13u].w;
        float _1669 = fma(_869, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _861)) + cbModelParam._m0[14u].w;
        float _1673 = fma(_869, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _861)) + cbModelParam._m0[15u].w;
        float _1676 = fma(_806, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _804));
        float _1679 = fma(_806, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _804));
        float _1682 = fma(_806, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _804));
        float _1710;
        if (_1676 > 0.0)
        {
            _1710 = abs((1.0 - _1665) / _1676);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1665 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1710 = frontier_phi_16_14_ladder;
        }
        float _1902;
        if (_1679 > 0.0)
        {
            _1902 = abs((1.0 - _1669) / _1679);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1669 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1902 = frontier_phi_25_21_ladder;
        }
        float _2140;
        if (_1682 > 0.0)
        {
            _2140 = abs((1.0 - _1673) / _1682);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1673 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2140 = frontier_phi_36_32_ladder;
        }
        float _2142 = isnan(_1902) ? _1710 : (isnan(_1710) ? _1902 : min(_1710, _1902));
        float _2143 = isnan(_2140) ? _2142 : (isnan(_2142) ? _2140 : min(_2142, _2140));
        float _2147 = (_2143 * _1676) + _1665;
        float _2148 = (_2143 * _1679) + _1669;
        float _2149 = (_2143 * _1682) + _1673;
        float _2150 = _2143 * 9.9999997473787516355514526367188e-05;
        float _2152 = (-1.0) - _2150;
        float _2154 = _2150 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_2149 > _2154) || ((_2149 < _2152) || ((_2148 > _2154) || ((_2148 < _2152) || ((_2147 < _2152) || (_2147 > _2154))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2299 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2149, cbModelParam._m0[9u].z, fma(_2148, cbModelParam._m0[9u].y, _2147 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2149, cbModelParam._m0[10u].z, fma(_2148, cbModelParam._m0[10u].y, _2147 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2149, cbModelParam._m0[11u].z, fma(_2148, cbModelParam._m0[11u].y, _2147 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_15_36_ladder = _2299.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _2299.x * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _2299.y * cbModelParam._m0[1u].y;
        }
        _1698 = frontier_phi_15_36_ladder_1;
        _1700 = frontier_phi_15_36_ladder_2;
        _1702 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1686 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_804, _805, _806), _1618);
        _1698 = _1686.x * cbModelParam._m0[1u].y;
        _1700 = _1686.y * cbModelParam._m0[1u].y;
        _1702 = _1686.z * cbModelParam._m0[1u].y;
    }
    float _1706 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _722);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1706 : min(cbModelParam._m0[25u].w, _1706));
    float _1798;
    float _1800;
    float _1802;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1762 = fma(_869, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _861)) + cbModelParam._m0[21u].w;
        float _1766 = fma(_869, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _861)) + cbModelParam._m0[22u].w;
        float _1770 = fma(_869, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _861)) + cbModelParam._m0[23u].w;
        float _1773 = fma(_806, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _804));
        float _1776 = fma(_806, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _804));
        float _1779 = fma(_806, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _804));
        float _1907;
        if (_1773 > 0.0)
        {
            _1907 = abs((1.0 - _1762) / _1773);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1762 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1907 = frontier_phi_27_23_ladder;
        }
        float _2167;
        if (_1776 > 0.0)
        {
            _2167 = abs((1.0 - _1766) / _1776);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1766 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2167 = frontier_phi_38_34_ladder;
        }
        float _2474;
        if (_1779 > 0.0)
        {
            _2474 = abs((1.0 - _1770) / _1779);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1770 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2474 = frontier_phi_49_44_ladder;
        }
        float _2476 = isnan(_2167) ? _1907 : (isnan(_1907) ? _2167 : min(_1907, _2167));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1773) + _1762;
        float _2482 = (_2477 * _1776) + _1766;
        float _2483 = (_2477 * _1779) + _1770;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2484;
        float _2487 = _2484 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2483 > _2487) || ((_2483 < _2485) || ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 < _2485) || (_2481 > _2487))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2483, cbModelParam._m0[17u].z, fma(_2482, cbModelParam._m0[17u].y, _2481 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2483, cbModelParam._m0[18u].z, fma(_2482, cbModelParam._m0[18u].y, _2481 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2483, cbModelParam._m0[19u].z, fma(_2482, cbModelParam._m0[19u].y, _2481 * cbModelParam._m0[19u].x))), _1707);
            frontier_phi_24_49_ladder = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1798 = frontier_phi_24_49_ladder_2;
        _1800 = frontier_phi_24_49_ladder;
        _1802 = frontier_phi_24_49_ladder_1;
    }
    else
    {
        vec4 _1782 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_804, _805, _806), _1707);
        _1798 = _1782.x * cbModelParam._m0[1u].z;
        _1800 = _1782.y * cbModelParam._m0[1u].z;
        _1802 = _1782.z * cbModelParam._m0[1u].z;
    }
    float _1814 = ((((1.0 - _829) * ((_817 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_829 * _817)) * _796;
    float _1815 = _1814 * ((cbModelParam._m0[1u].w * (_1798 - _1698)) + _1698);
    float _1816 = _1814 * ((cbModelParam._m0[1u].w * (_1800 - _1700)) + _1700);
    float _1817 = _1814 * ((cbModelParam._m0[1u].w * (_1802 - _1702)) + _1702);
    float _1820 = fma(_1817, cbSceneParam._m0[89u].z, fma(_1816, cbSceneParam._m0[89u].y, _1815 * cbSceneParam._m0[89u].x));
    float _1823 = fma(_1817, cbSceneParam._m0[90u].z, fma(_1816, cbSceneParam._m0[90u].y, _1815 * cbSceneParam._m0[90u].x));
    float _1826 = fma(_1817, cbSceneParam._m0[91u].z, fma(_1816, cbSceneParam._m0[91u].y, _1815 * cbSceneParam._m0[91u].x));
    vec4 _1834 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_633, _634));
    float _1836 = _1834.w;
    float _1848 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1836);
    float _1849 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1836);
    float _1850 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1836);
    uvec4 _1854 = floatBitsToUint(cbInstanceData._m0[_299 + 5u]);
    uint _1856 = _1854.x * 14u;
    uint _1857 = _1856 + 13u;
    float _1862 = _796 + (-1.0);
    float _1865 = (cbLight._m0[_1857].x * _1862) + 1.0;
    float _1866 = (cbLight._m0[_1857].y * _1862) + 1.0;
    uint _1868 = _1856 + 4u;
    float _1879 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_718, _719, _720));
    float _1882 = isnan(1.0) ? _1865 : (isnan(_1865) ? 1.0 : min(_1865, 1.0));
    float _1883 = cbLight._m0[_1868].x * _1848;
    float _1884 = cbLight._m0[_1868].y * _1849;
    float _1885 = cbLight._m0[_1868].z * _1850;
    uint _1886 = _1856 + 5u;
    uint _1892 = _1856 | 1u;
    float _1898 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_718, _719, _720));
    float _1901 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    float _1966;
    float _1967;
    float _1968;
    if (_723 == 0.0)
    {
        float _3653 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _3664 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1920 = (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.3183098733425140380859375;
        float _1922 = (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0))) * 0.3183098733425140380859375;
        _1966 = ((cbLight._m0[_1886].x * _1901) * _1922) + ((_1883 * _1882) * _1920);
        _1967 = ((_1901 * cbLight._m0[_1886].y) * _1922) + ((_1884 * _1882) * _1920);
        _1968 = ((_1901 * cbLight._m0[_1886].z) * _1922) + ((_1885 * _1882) * _1920);
    }
    else
    {
        float _1932 = _1879 + _723;
        float _1935 = (_723 * 2.0) + 1.0;
        float _1936 = (isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0))) / _1935;
        float _1943 = _1898 + _723;
        float _1945 = (isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) / _1935;
        _1966 = (((_1945 * cbLight._m0[_1886].x) * _1901) + ((_1883 * _1936) * _1882)) * 0.3183098733425140380859375;
        _1967 = (((_1945 * cbLight._m0[_1886].y) * _1901) + ((_1884 * _1936) * _1882)) * 0.3183098733425140380859375;
        _1968 = (((_1945 * cbLight._m0[_1886].z) * _1901) + ((_1885 * _1936) * _1882)) * 0.3183098733425140380859375;
    }
    uint _1972 = _1856 + 8u;
    float _1988 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1856].w)) * _722) * 0.949999988079071044921875);
    float _1989 = _1988 * _1988;
    float _1990 = cbLight._m0[_1856].x + _509;
    float _1991 = cbLight._m0[_1856].y + _510;
    float _1992 = cbLight._m0[_1856].z + _511;
    float _1996 = inversesqrt(dot(vec3(_1990, _1991, _1992), vec3(_1990, _1991, _1992)));
    float _1997 = _1996 * _1990;
    float _1998 = _1996 * _1991;
    float _1999 = _1996 * _1992;
    float _2000 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_1856].xyz));
    float _3685 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _3696 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _2004 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _2005 = dot(vec3(_718, _719, _720), vec3(_1997, _1998, _1999));
    float _3707 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_1997, _1998, _1999));
    float _3718 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1989 * _1989;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2028 = (exp2(log2(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2029 = 1.0 - _1989;
    float _2040 = (0.5 / (((_2004 * ((_2003 * _2029) + _1989)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2029) + _1989) * _2003))) * _2003;
    float _3729 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
    float _2042 = (isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    uint _2058 = _1856 + 9u;
    float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _722) * 0.949999988079071044921875);
    float _2073 = _2072 * _2072;
    float _2074 = cbLight._m0[_1892].x + _509;
    float _2075 = cbLight._m0[_1892].y + _510;
    float _2076 = cbLight._m0[_1892].z + _511;
    float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
    float _2081 = _2080 * _2074;
    float _2082 = _2080 * _2075;
    float _2083 = _2080 * _2076;
    float _2084 = dot(vec3(_718, _719, _720), vec3(cbLight._m0[_1892].xyz));
    float _3740 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2087 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _2088 = dot(vec3(_718, _719, _720), vec3(_2081, _2082, _2083));
    float _3751 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
    float _2092 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2081, _2082, _2083));
    float _3762 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2096 = _2073 * _2073;
    float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
    float _2109 = (exp2(log2(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2110 = 1.0 - _2073;
    float _2120 = (0.5 / (((_2004 * ((_2087 * _2110) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_2004 * _2110) + _2073) * _2087))) * _2087;
    float _3773 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2122 = (isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
    float _2132 = (((_2109 * cbLight._m0[_2058].x) * _2122) * _1901) + ((((cbLight._m0[_1972].x * _1848) * _2028) * _2042) * _1882);
    float _2133 = (((_2109 * cbLight._m0[_2058].y) * _2122) * _1901) + ((((cbLight._m0[_1972].y * _1849) * _2028) * _2042) * _1882);
    float _2134 = (((_2109 * cbLight._m0[_2058].z) * _2122) * _1901) + ((((cbLight._m0[_1972].z * _1850) * _2028) * _2042) * _1882);
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    float _2280;
    if (_1854.y == 0u)
    {
        float _2211 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2212 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2211;
        float _2213 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2211;
        float _2214 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2211;
        uvec4 _2226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2227 = _2226.x;
        uint _2238 = uint((float(_2226.y) * floor(float(uint(cbSceneParam._m0[85u].y * _634) / _2227))) + floor(float(uint(cbSceneParam._m0[85u].x * _633) / _2227)));
        float _2248 = (log2(_2214 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2249 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
        uint _2252 = uint(isnan(14.0) ? _2249 : (isnan(_2249) ? 14.0 : min(_2249, 14.0)));
        uint _2259 = _2226.z;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        float _2318;
        if (((((1u << ((_2259 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2252 << 2u) + (_2238 << 6u)) >> 2u)).x) == 0u) || ((_2259 & 240u) == 0u))
        {
            _2308 = 0.0;
            _2310 = 0.0;
            _2312 = 0.0;
            _2314 = 0.0;
            _2316 = 0.0;
            _2318 = 0.0;
        }
        else
        {
            float _2309;
            float _2311;
            float _2313;
            float _2315;
            float _2317;
            float _2319;
            float _2500 = 0.0;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            uint _2506 = 0u;
            uint _2515;
            bool _2516;
            for (;;)
            {
                _2515 = texelFetch(g_lightClassification, int((((_2252 << 5u) + (_2238 << 9u)) + (_2506 << 2u)) >> 2u)).x;
                _2516 = _2515 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2516)
                {
                    frontier_phi_55_pred = _2505;
                    frontier_phi_55_pred_1 = _2504;
                    frontier_phi_55_pred_2 = _2503;
                    frontier_phi_55_pred_3 = _2501;
                    frontier_phi_55_pred_4 = _2500;
                    frontier_phi_55_pred_5 = _2502;
                }
                else
                {
                    float _2713;
                    float _2714;
                    float _2715;
                    float _2716;
                    float _2717;
                    float _2718;
                    uint _2719;
                    _2713 = _2500;
                    _2714 = _2501;
                    _2715 = _2502;
                    _2716 = _2503;
                    _2717 = _2504;
                    _2718 = _2505;
                    _2719 = _2515;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    for (;;)
                    {
                        uint _2723 = uint(findLSB(_2719)) + (_2506 << 5u);
                        uint _2720 = (_2719 + 4294967295u) & _2719;
                        uint _2725 = _2723 * 48u;
                        vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2725)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2725 + 3u)).x));
                        uint _2745 = (_2723 * 48u) + 4u;
                        vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2745)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2745 + 3u)).x));
                        float _2759 = _2758.x;
                        float _2760 = _2758.y;
                        float _2761 = _2758.z;
                        uint _2764 = (_2723 * 48u) + 8u;
                        vec3 _2775 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x));
                        uint _2780 = (_2723 * 48u) + 12u;
                        vec2 _2788 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2780)).x, texelFetch(g_PointLightRenderingBuffer, int(_2780 + 1u)).x));
                        float _2794 = inversesqrt(dot(vec3(_2212, _2213, _2214), vec3(_2212, _2213, _2214)));
                        float _2795 = _2794 * _2212;
                        float _2796 = _2794 * _2213;
                        float _2797 = _2794 * _2214;
                        float _2798 = _2739.x - _2212;
                        float _2799 = _2739.y - _2213;
                        float _2800 = _2739.z - _2214;
                        float _2801 = dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800));
                        float _2804 = inversesqrt(_2801);
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2808 = dot(vec3(_758, _761, _764), vec3(_2805, _2806, _2807));
                        float _2813 = 1.0 - (_2801 * _2739.w);
                        float _3794 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2814 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
                        float _2815 = sqrt(_2801) * _2758.w;
                        float _2818 = 1.39999997615814208984375 / (_2815 + 1.39999997615814208984375);
                        float _2819 = _2818 * _2818;
                        float _2820 = 1.0 - _2819;
                        float _2822 = (_2820 * _2820) * _723;
                        float _2825 = ((_2820 * _2808) + _2819) + _2822;
                        float _2830 = _2815 * _2815;
                        float _2835 = ((isnan(0.0) ? _2825 : (isnan(_2825) ? 0.0 : max(_2825, 0.0))) * _2814) / (((_2822 * 2.0) + 1.0) * ((_2830 * 0.699999988079071044921875) + 1.0));
                        float _2839 = dot(vec3(_2805, _2806, _2807), vec3(_2795, _2796, _2797));
                        float _3810 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                        float _2846 = dot(vec3((-0.0) - _2795, (-0.0) - _2796, (-0.0) - _2797), vec3(_758, _761, _764)) + 1.0;
                        float _2848 = (isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0))) * 0.5;
                        float _2855 = ((_2848 * _2848) * _2788.x) * exp2((_2788.y * 32.0) * log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))));
                        float _2857 = _723 / (_723 + 1.0);
                        float _2873 = (-0.0) - _2212;
                        float _2874 = (-0.0) - _2213;
                        float _2875 = (-0.0) - _2214;
                        float _2879 = inversesqrt(dot(vec3(_2873, _2874, _2875), vec3(_2873, _2874, _2875)));
                        float _2880 = _2879 * _2873;
                        float _2881 = _2879 * _2874;
                        float _2882 = _2879 * _2875;
                        float _2890 = exp2(log2(1.0 / ((_2830 * 3.5) + 5.0)) * 0.25);
                        float _2891 = 1.0 - _817;
                        float _2898 = sqrt(1.0 - ((1.0 - (_2891 * _2891)) * (1.0 - (_2890 * _2890))));
                        float _2899 = _2898 * _2898;
                        float _2900 = _2899 * _2899;
                        float _2901 = _2880 + _2805;
                        float _2902 = _2881 + _2806;
                        float _2903 = _2882 + _2807;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2911 = dot(vec3(_758, _761, _764), vec3(_2880, _2881, _2882));
                        float _3826 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                        float _2914 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
                        float _2915 = dot(vec3(_758, _761, _764), vec3(_2907 * _2901, _2907 * _2902, _2907 * _2903));
                        float _3837 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2918 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
                        float _2922 = ((_2918 * _2918) * (_2900 + (-1.0))) + 1.0;
                        float _2923 = _2818 * _2899;
                        float _2924 = _2923 * _2923;
                        float _2927 = ((1.0 - _2924) * _2808) + _2924;
                        float _3848 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
                        float _2928 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
                        float _2929 = 1.0 - _2899;
                        float _2939 = (0.5 / (((_2928 * ((_2914 * _2929) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2928 * _2929) + _2899) * _2914))) * _2928;
                        float _3859 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2950 = (((_2900 * 3.1415927410125732421875) * (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) / ((_2922 * _2922) * ((_2830 * 2.1991131305694580078125) + 3.141590118408203125))) * _2814;
                        _2664 = (((((_2759 * 0.3183098733425140380859375) * _2857) * _2855) + _2759) * _2835) + _2716;
                        _2665 = (((((_2760 * 0.3183098733425140380859375) * _2857) * _2855) + _2760) * _2835) + _2717;
                        _2666 = (((((_2761 * 0.3183098733425140380859375) * _2857) * _2855) + _2761) * _2835) + _2718;
                        _2661 = (_2950 * _2775.x) + _2713;
                        _2662 = (_2950 * _2775.y) + _2714;
                        _2663 = (_2950 * _2775.z) + _2715;
                        if (_2720 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2713 = _2661;
                            _2714 = _2662;
                            _2715 = _2663;
                            _2716 = _2664;
                            _2717 = _2665;
                            _2718 = _2666;
                            _2719 = _2720;
                        }
                    }
                    frontier_phi_55_pred = _2666;
                    frontier_phi_55_pred_1 = _2665;
                    frontier_phi_55_pred_2 = _2664;
                    frontier_phi_55_pred_3 = _2662;
                    frontier_phi_55_pred_4 = _2661;
                    frontier_phi_55_pred_5 = _2663;
                }
                _2319 = frontier_phi_55_pred;
                _2317 = frontier_phi_55_pred_1;
                _2315 = frontier_phi_55_pred_2;
                _2311 = frontier_phi_55_pred_3;
                _2309 = frontier_phi_55_pred_4;
                _2313 = frontier_phi_55_pred_5;
                uint _2507 = _2506 + 1u;
                if (_2507 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2500 = _2309;
                    _2501 = _2311;
                    _2502 = _2313;
                    _2503 = _2315;
                    _2504 = _2317;
                    _2505 = _2319;
                    _2506 = _2507;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2308 = _2309;
            _2310 = _2311;
            _2312 = _2313;
            _2314 = _2315;
            _2316 = _2317;
            _2318 = _2319;
        }
        float _2323 = isnan(1.0) ? _796 : (isnan(_796) ? 1.0 : min(_796, 1.0));
        _2270 = (_2323 * _2314) + _1966;
        _2272 = (_2323 * _2316) + _1967;
        _2274 = (_2323 * _2318) + _1968;
        _2276 = ((_2308 * 0.039999999105930328369140625) * _2323) + _2132;
        _2278 = ((_2310 * 0.039999999105930328369140625) * _2323) + _2133;
        _2280 = ((_2312 * 0.039999999105930328369140625) * _2323) + _2134;
    }
    else
    {
        _2270 = _1966;
        _2272 = _1967;
        _2274 = _1968;
        _2276 = _2132;
        _2278 = _2133;
        _2280 = _2134;
    }
    float _2397;
    float _2398;
    float _2399;
    if (_723 > 0.0)
    {
        uint _2330 = _1856 + 4u;
        float _2336 = (-0.0) - _509;
        float _2337 = (-0.0) - _510;
        float _2338 = (-0.0) - _511;
        float _2339 = dot(vec3(cbLight._m0[_1856].xyz), vec3(_2336, _2337, _2338));
        float _3875 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2343 = _807 + 1.0;
        float _2345 = (isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0))) * 0.5;
        float _2350 = _2345 * _2345;
        float _2351 = _2350 * exp2(log2(isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0))) * 32.0);
        float _2353 = _723 / (_723 + 1.0);
        float _2354 = isnan(_1865) ? 1.0 : (isnan(1.0) ? _1865 : min(1.0, _1865));
        uint _2367 = _1856 + 5u;
        float _2373 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2336, _2337, _2338));
        float _3896 = isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0));
        float _2380 = _2350 * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * 32.0);
        float _2381 = isnan(_1866) ? 1.0 : (isnan(1.0) ? _1866 : min(1.0, _1866));
        _2397 = ((((_2380 * cbLight._m0[_2367].x) * _2353) * _2381) + ((((cbLight._m0[_2330].x * _1848) * _2351) * _2353) * _2354)) * 0.3183098733425140380859375;
        _2398 = ((((_2380 * cbLight._m0[_2367].y) * _2353) * _2381) + ((((cbLight._m0[_2330].y * _1849) * _2351) * _2353) * _2354)) * 0.3183098733425140380859375;
        _2399 = ((((_2380 * cbLight._m0[_2367].z) * _2353) * _2381) + ((((cbLight._m0[_2330].z * _1850) * _2351) * _2353) * _2354)) * 0.3183098733425140380859375;
    }
    else
    {
        _2397 = 0.0;
        _2398 = 0.0;
        _2399 = 0.0;
    }
    float _3912 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _3923 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _3934 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _3945 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _2414 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * ((_2270 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _796)) + _2397);
    float _2415 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * ((_2272 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _796)) + _2398);
    float _2416 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * ((_2274 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _796)) + _2399);
    float _2420 = 0.959999978542327880859375 - (exp2(log2(1.0 - _811) * 5.0) * 0.959999978542327880859375);
    float _2445 = _633 / cbSceneParam._m0[86u].x;
    float _2446 = _634 / cbSceneParam._m0[86u].y;
    vec4 _2460 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, (log2((isnan(cbSceneParam._m0[77u].w) ? _740 : (isnan(_740) ? cbSceneParam._m0[77u].w : min(_740, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2462 = _2460.x;
    float _2463 = _2460.y;
    float _2464 = _2460.z;
    float _2465 = _2460.w;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    if (_740 > cbSceneParam._m0[78u].w)
    {
        float _2521 = isnan(_740) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _740 : min(cbSceneParam._m0[80u].w, _740));
        float _2522 = _2521 / _740;
        float _2533 = _2522 * _291;
        float _2534 = _292 * _2522;
        float _2535 = (-0.0) - _2534;
        float _2536 = _2522 * _293;
        float _2538 = (cbSceneParam._m0[77u].w * _2535) / _2521;
        float _2539 = _2538 + cbSceneParam._m0[79u].w;
        float _2540 = cbSceneParam._m0[79u].w - _2534;
        float _2546 = sqrt(((_2533 * _2533) + (_2534 * _2534)) + (_2536 * _2536));
        float _2549 = (1.0 - (cbSceneParam._m0[77u].w / _2521)) * _2546;
        float _2554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2955;
        if (abs((_2535 - _2538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2955 = ((((_2539 > 0.0) ? exp2(_2554 * _2539) : (2.0 - exp2(_2556 * _2539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2549;
        }
        else
        {
            float _2686 = 1.0 / cbSceneParam._m0[80u].x;
            float _2687 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : max(_2539, _2540));
            float _2688 = isnan(_2540) ? _2539 : (isnan(_2539) ? _2540 : min(_2539, _2540));
            float _2697 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : min(_2687, 0.0));
            float _2698 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : min(_2688, 0.0));
            _2955 = ((abs(_2546 / _2535) * cbSceneParam._m0[80u].y) * ((((_2697 - _2698) * 2.0) - ((exp2(_2554 * (isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0)))) - exp2(_2554 * (isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0))))) * _2686)) - ((exp2(_2556 * _2697) - exp2(_2556 * _2698)) * _2686))) + (_2549 * cbSceneParam._m0[80u].z);
        }
        vec4 _2957 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2445, _2446, 1.0), 0.0);
        float _2966 = exp2((_2955 * (-1.44269502162933349609375)) * (1.0 - _2957.w));
        float _2967 = log2(_2966);
        float _2983 = log2(_2465);
        _2558 = (exp2(_2983 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].x)) * _2957.x) / cbSceneParam._m0[78u].x)) + _2462;
        _2560 = (exp2(_2983 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].y)) * _2957.y) / cbSceneParam._m0[78u].y)) + _2463;
        _2562 = (exp2(_2983 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2967 * cbSceneParam._m0[78u].z)) * _2957.z) / cbSceneParam._m0[78u].z)) + _2464;
        _2564 = _2966 * _2465;
    }
    else
    {
        _2558 = _2462;
        _2560 = _2463;
        _2562 = _2464;
        _2564 = _2465;
    }
    bool _2576 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2577 = log2(_2564);
    float _2584 = exp2(_2577 * cbSceneParam._m0[78u].x) * ((_2414 + ((_2276 + ((isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _657.x) * _2420) - _2414) * _703));
    float _2585 = exp2(_2577 * cbSceneParam._m0[78u].y) * ((_2415 + ((_2278 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _657.y) * _2420) - _2415) * _703));
    float _2586 = exp2(_2577 * cbSceneParam._m0[78u].z) * ((_2416 + ((_2280 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _657.z) * _2420) - _2416) * _703));
    vec4 _2594 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_633, _634));
    float _2596 = _2594.x;
    float _2617 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2596)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2596))) - _740) * cbMtdParam._m0[17u].y;
    float _3996 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2619 = (cbInstanceData._m0[_299 + 6u].w * (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)));
    float _2628 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2628 * (_2576 ? _2584 : (_2584 + (cbSceneParam._m0[72u].w * _2558)));
    SV_Target.y = _2628 * (_2576 ? _2585 : (_2585 + (cbSceneParam._m0[72u].w * _2560)));
    SV_Target.z = _2628 * (_2576 ? _2586 : (_2586 + (cbSceneParam._m0[72u].w * _2562)));
    SV_Target.w = _2619;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2619;
}


