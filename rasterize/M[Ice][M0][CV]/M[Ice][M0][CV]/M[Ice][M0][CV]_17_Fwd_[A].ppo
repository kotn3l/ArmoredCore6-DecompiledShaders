#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1263;
float _3203;
float _3204;
float _3205;
float _3206;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _210 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _211 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _212 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _218 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _219 = _218 * _210;
    float _220 = _218 * _211;
    float _221 = _218 * _212;
    float _225 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = _225 * NORMAL.x;
    float _227 = _225 * NORMAL.y;
    float _228 = _225 * NORMAL.z;
    float _232 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233 = _232 * TANGENT.x;
    float _234 = _232 * TANGENT.y;
    float _235 = _232 * TANGENT.z;
    float _240;
    float _241;
    float _242;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
    }
    else
    {
        _240 = _226;
        _241 = _227;
        _242 = _228;
    }
    float _289 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _299 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _289);
    float _300 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _289);
    float _301 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _289);
    uint _307 = uint(roundEven(NORMAL.w)) * 13u;
    uint _312 = _307 + 1u;
    uint _316 = _307 + 2u;
    float _325 = sqrt(((cbInstanceData._m0[_312].x * cbInstanceData._m0[_312].x) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x)) + (cbInstanceData._m0[_316].x * cbInstanceData._m0[_316].x));
    float _326 = _325 * TEXCOORD.z;
    float _327 = _325 * TEXCOORD.w;
    vec4 _347 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _356 = (_347.x * 2.0) + (-1.0);
    float _358 = (_347.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_356, _358), vec2(_356, _358));
    float _3215 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _365 = sqrt(1.0 - (isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0))));
    float _368 = fma(_365, _240, fma(_358, _233, _356 * _219));
    float _371 = fma(_365, _241, fma(_358, _234, _356 * _220));
    float _374 = fma(_365, _242, fma(_358, _235, _356 * _221));
    float _378 = inversesqrt(dot(vec3(_368, _371, _374), vec3(_368, _371, _374)));
    float _379 = _378 * _368;
    float _380 = _378 * _371;
    float _409 = (cbMtdParam._m0[17u].w + dot(vec4(_379, _380, _378 * _374, 0.0), vec4(cbMtdParam._m0[19u].xyz, 0.0))) - (texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _326) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _327) + cbTextureTilingScale._m0[6u].w)).x * cbMtdParam._m0[18u].z);
    float _3226 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _410 = isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0));
    vec4 _422 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _427 = _422.w;
    float _439 = dot(vec3(_299, _300, _301), vec3(_219, _220, _221));
    float _442 = dot(vec3(_299, _300, _301), vec3(_233, _234, _235));
    float _445 = dot(vec3(_299, _300, _301), vec3(_240, _241, _242));
    float _451 = inversesqrt(dot(vec3(_439, _442, _445), vec3(_439, _442, _445)));
    float _473 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _493 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_439 * cbMtdParam._m0[14u].x) * _451) * _473) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_442 * cbMtdParam._m0[14u].x) * _451) * _473) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _516 = inversesqrt(dot(vec3(_299, _300, _301), vec3(_299, _300, _301)));
    float _517 = _516 * _299;
    float _518 = _516 * _300;
    float _519 = _516 * _301;
    float _520 = dot(vec4(_517, _518, _519, 0.0), vec4(_240, _241, _242, 0.0));
    float _523 = _520 - cbMtdParam._m0[15u].z;
    float _3237 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _530 = exp2(log2(1.0 - (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _545 = ((((_422.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _493.x) * cbMtdParam._m0[9u].x) * ((_530 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _550 = ((((_422.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _493.y) * cbMtdParam._m0[9u].y) * ((_530 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _555 = ((((_422.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _493.z) * cbMtdParam._m0[9u].z) * ((_530 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _562 = ((cbMtdParam._m0[11u].x - _545) * _410) + _545;
    float _563 = ((cbMtdParam._m0[11u].y - _550) * _410) + _550;
    float _564 = ((cbMtdParam._m0[11u].z - _555) * _410) + _555;
    vec4 _576 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _326) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _327) + cbTextureTilingScale._m0[9u].w));
    float _583 = (_576.x * 2.0) + (-1.0);
    float _584 = (_576.y * 2.0) + (-1.0);
    float _585 = dot(vec2(_583, _584), vec2(_583, _584));
    float _3253 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    vec4 _606 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _616 = cbMtdParam._m0[17u].z + _347.z;
    float _622 = (_616 + cbMtdParam._m0[16u].y) + ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * (_606.z - _616));
    float _625 = ((_576.z - _622) * _410) + _622;
    float _631 = ((((_606.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _356;
    float _632 = ((((_606.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _358;
    float _640 = ((sqrt(1.0 - (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) - _365) * _410) + _365;
    float _644 = ((_631 * cbMtdParam._m0[14u].z) + _631) + ((_583 - _631) * _410);
    float _646 = ((_632 * cbMtdParam._m0[14u].z) + _632) + ((_584 - _632) * _410);
    vec4 _658 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _662 = cbMtdParam._m0[16u].w * _658.x;
    float _664 = _662 - (_662 * _410);
    float _684 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (cbMtdParam._m0[18u].y * _379));
    float _685 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (cbMtdParam._m0[18u].y * _380));
    float _692 = isnan(cbInstanceData._m0[8u].x) ? _684 : (isnan(_684) ? cbInstanceData._m0[8u].x : max(_684, cbInstanceData._m0[8u].x));
    float _693 = isnan(cbInstanceData._m0[8u].y) ? _685 : (isnan(_685) ? cbInstanceData._m0[8u].y : max(_685, cbInstanceData._m0[8u].y));
    vec4 _697 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _692 : (isnan(_692) ? cbInstanceData._m0[8u].z : min(_692, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _693 : (isnan(_693) ? cbInstanceData._m0[8u].w : min(_693, cbInstanceData._m0[8u].w))));
    float _730 = _520 - cbMtdParam._m0[15u].x;
    float _3284 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _740 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3300 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _741 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
    float _743 = _741 - (_741 * _410);
    float _747 = fma(_640, _240, fma(_646, _233, _644 * _219));
    float _750 = fma(_640, _241, fma(_646, _234, _644 * _220));
    float _753 = fma(_640, _242, fma(_646, _235, _644 * _221));
    float _757 = inversesqrt(dot(vec3(_747, _750, _753), vec3(_747, _750, _753)));
    float _758 = _757 * _747;
    float _759 = _757 * _750;
    float _760 = _757 * _753;
    float _3311 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _761 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _3322 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _762 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _763 = isnan(0.0) ? _664 : (isnan(_664) ? 0.0 : max(_664, 0.0));
    float _3338 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3349 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3360 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _780 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _785 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _787 = _785.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _942 = sqrt(((_299 * _299) + (_300 * _300)) + (_301 * _301));
        float _948 = (cbMatDynParam._m0[5u].x * _942) + cbMatDynParam._m0[5u].y;
        float _3371 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _953 = (cbMatDynParam._m0[5u].z * _942) + cbMatDynParam._m0[5u].w;
        float _3382 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) - _949)) + _949) < ((_787 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _797 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _798 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _816 = fma(_760, cbSceneParam._m0[5u].z, fma(_759, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _758));
    float _819 = fma(_760, cbSceneParam._m0[6u].z, fma(_759, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _758));
    float _822 = fma(_760, cbSceneParam._m0[7u].z, fma(_759, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _758));
    uint _835 = _307 + 9u;
    uint _836 = _835 + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3393 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
    float _3404 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
    float _3415 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
    vec4 _855 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _797, cbSceneParam._m0[86u].y * _798));
    float _858 = _855.x * TEXCOORD_5.w;
    float _859 = dot(vec3(_758, _759, _760), vec3(_517, _518, _519));
    float _862 = _859 * 2.0;
    float _866 = (_862 * _758) - _517;
    float _867 = (_862 * _759) - _518;
    float _868 = (_862 * _760) - _519;
    float _869 = dot(vec3(_517, _518, _519), vec3(_758, _759, _760));
    float _872 = abs(_869);
    float _3426 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _873 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
    float _879 = sqrt(_762);
    float _891 = exp2((_879 * 5.0) * log2(1.0 - (_873 * 0.999000012874603271484375))) / (4.0 - (_879 * 3.0));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _931 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _987 = fma(_931, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923));
        float _991 = fma(_931, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923));
        float _995 = fma(_931, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923));
        float _1020 = _923 + _758;
        float _1021 = _927 + _759;
        float _1022 = _931 + _760;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _987;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _991;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _995;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_987 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_991 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_995 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_758, _759, _760), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3452 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3463 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3474 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_758, _759, _760), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3485 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3496 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3507 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_758, _759, _760), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3540 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1306 = fma(_931, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _923));
        float _1310 = fma(_931, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _923));
        float _1314 = fma(_931, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _923));
        float _1337 = _923 + _758;
        float _1338 = _927 + _759;
        float _1339 = _931 + _760;
        float _1349 = fma(_1339, cbModelParam._m0[30u].z, fma(_1338, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1337)) - _1306;
        float _1350 = fma(_1339, cbModelParam._m0[31u].z, fma(_1338, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1337)) - _1310;
        float _1351 = fma(_1339, cbModelParam._m0[32u].z, fma(_1338, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1337)) - _1314;
        float _1355 = inversesqrt(dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351)));
        float _1368 = ((_1355 * _1349) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1306 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1369 = ((_1355 * _1350) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1310 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1370 = ((_1355 * _1351) / cbModelParam._m0[35u].z) + ((((((_1314 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        vec4 _1393 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1368, _1369, _1370), 0.0);
        float _1405 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1372.x + (-0.5));
        float _1407 = _1405 * (_1372.y + (-0.5));
        float _1408 = _1405 * (_1372.z + (-0.5));
        float _1415 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1379.x + (-0.5));
        float _1417 = _1415 * (_1379.y + (-0.5));
        float _1418 = _1415 * (_1379.z + (-0.5));
        float _1425 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1386.x + (-0.5));
        float _1427 = _1425 * (_1386.y + (-0.5));
        float _1428 = _1425 * (_1386.z + (-0.5));
        float _1435 = exp2((_1393.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1393.x + (-0.5));
        float _1437 = _1435 * (_1393.y + (-0.5));
        float _1438 = _1435 * (_1393.z + (-0.5));
        float _1439 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1440 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1441 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1442 = _1406 * 0.5;
        float _1443 = _1416 * 0.5;
        float _1444 = _1426 * 0.5;
        float _1445 = dot(vec3(_1442, _1443, _1444), vec3(_1442, _1443, _1444));
        float _1450 = (_1445 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1445);
        float _1458 = (dot(vec3(_758, _759, _760), vec3(_1450 * _1442, _1450 * _1443, _1450 * _1444)) + 1.0) * 0.5;
        float _3581 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1467 = sqrt(((_1443 * _1443) + (_1442 * _1442)) + (_1444 * _1444)) / (_1439 + 9.9999997473787516355514526367188e-06);
        float _3592 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1469 = _1468 * 2.0;
        float _1473 = (1.0 - _1468) / (_1468 + 1.0);
        float _3603 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0));
        float _1483 = ((((1.0 - _1474) * (_1469 + 2.0)) * exp2(log2(isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) * (_1469 + 1.0))) + _1474) * _1439;
        float _1484 = _1407 * 0.5;
        float _1485 = _1417 * 0.5;
        float _1486 = _1427 * 0.5;
        float _1487 = dot(vec3(_1484, _1485, _1486), vec3(_1484, _1485, _1486));
        float _1492 = (_1487 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1487);
        float _1500 = (dot(vec3(_758, _759, _760), vec3(_1492 * _1484, _1492 * _1485, _1492 * _1486)) + 1.0) * 0.5;
        float _3614 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1509 = sqrt(((_1485 * _1485) + (_1484 * _1484)) + (_1486 * _1486)) / (_1440 + 9.9999997473787516355514526367188e-06);
        float _3625 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _3636 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * (_1511 + 1.0))) + _1516) * _1440;
        float _1526 = _1408 * 0.5;
        float _1527 = _1418 * 0.5;
        float _1528 = _1428 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_758, _759, _760), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _3647 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1441 + 9.9999997473787516355514526367188e-06);
        float _3658 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _3669 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0))) * (_1553 + 1.0))) + _1558) * _1441;
        _1575 = _1408;
        _1576 = _1407;
        _1577 = _1406;
        _1578 = _1418;
        _1579 = _1417;
        _1580 = _1416;
        _1581 = _1428;
        _1582 = _1427;
        _1583 = _1426;
        _1584 = _1441;
        _1585 = _1440;
        _1586 = _1439;
        _1587 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0)));
        _1588 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1589 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
    }
    else
    {
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = _1263;
        _1584 = _1263;
        _1585 = _1263;
        _1586 = _1263;
        _1587 = 0.0;
        _1588 = 0.0;
        _1589 = 0.0;
    }
    float _1599 = (cbModelParam._m0[1u].x * (_1587 - _1275)) + _1275;
    float _1600 = (cbModelParam._m0[1u].x * (_1588 - _1276)) + _1276;
    float _1601 = (cbModelParam._m0[1u].x * (_1589 - _1277)) + _1277;
    float _1622 = fma(_1601, cbSceneParam._m0[89u].z, fma(_1600, cbSceneParam._m0[89u].y, _1599 * cbSceneParam._m0[89u].x));
    float _1625 = fma(_1601, cbSceneParam._m0[90u].z, fma(_1600, cbSceneParam._m0[90u].y, _1599 * cbSceneParam._m0[90u].x));
    float _1628 = fma(_1601, cbSceneParam._m0[91u].z, fma(_1600, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1599));
    float _1643 = _866 * 0.5;
    float _1644 = _867 * 0.5;
    float _1645 = _868 * 0.5;
    float _1646 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1577, _1580, _1583, _1586));
    float _1649 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1576, _1579, _1582, _1585));
    float _1652 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1575, _1578, _1581, _1584));
    float _1686;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1659 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1663 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1667 = dot(vec4(_1643, _1644, _1645, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1674 = dot(vec4(cbModelParam._m0[39u]), vec4(_1643, _1644, _1645, 1.0));
        _1686 = dot(vec3(isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)), isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1674) ? 0.0 : (isnan(0.0) ? _1674 : max(0.0, _1674))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1686 = 1.0;
    }
    float _1697;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1688 = dot(vec4(cbModelParam._m0[40u]), vec4(_1643, _1644, _1645, 1.0));
        _1697 = dot(vec3(isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1688) ? 0.0 : (isnan(0.0) ? _1688 : max(0.0, _1688))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1697 = 1.0;
    }
    float _1701 = (_1697 * cbModelParam._m0[1u].x) + (_1686 * (1.0 - cbModelParam._m0[1u].x));
    float _1711 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _762);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1711 : min(cbModelParam._m0[25u].z, _1711));
    float _1792;
    float _1794;
    float _1796;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1759 = fma(_931, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _923)) + cbModelParam._m0[13u].w;
        float _1763 = fma(_931, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _923)) + cbModelParam._m0[14u].w;
        float _1767 = fma(_931, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _923)) + cbModelParam._m0[15u].w;
        float _1770 = fma(_868, cbModelParam._m0[13u].z, fma(_867, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _866));
        float _1773 = fma(_868, cbModelParam._m0[14u].z, fma(_867, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _866));
        float _1776 = fma(_868, cbModelParam._m0[15u].z, fma(_867, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _866));
        float _1804;
        if (_1770 > 0.0)
        {
            _1804 = abs((1.0 - _1759) / _1770);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1759 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1804 = frontier_phi_19_17_ladder;
        }
        float _1975;
        if (_1773 > 0.0)
        {
            _1975 = abs((1.0 - _1763) / _1773);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1763 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1975 = frontier_phi_28_24_ladder;
        }
        float _2210;
        if (_1776 > 0.0)
        {
            _2210 = abs((1.0 - _1767) / _1776);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1767 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2210 = frontier_phi_39_35_ladder;
        }
        float _2212 = isnan(_1975) ? _1804 : (isnan(_1804) ? _1975 : min(_1804, _1975));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1770) + _1759;
        float _2218 = (_2213 * _1773) + _1763;
        float _2219 = (_2213 * _1776) + _1767;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2222 = (-1.0) - _2220;
        float _2224 = _2220 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2219 > _2224) || ((_2219 < _2222) || ((_2218 > _2224) || ((_2218 < _2222) || ((_2217 < _2222) || (_2217 > _2224))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2219, cbModelParam._m0[9u].z, fma(_2218, cbModelParam._m0[9u].y, _2217 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2219, cbModelParam._m0[10u].z, fma(_2218, cbModelParam._m0[10u].y, _2217 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2219, cbModelParam._m0[11u].z, fma(_2218, cbModelParam._m0[11u].y, _2217 * cbModelParam._m0[11u].x))), _1712);
            frontier_phi_18_39_ladder = _2369.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2369.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2369.x * cbModelParam._m0[1u].y;
        }
        _1792 = frontier_phi_18_39_ladder_2;
        _1794 = frontier_phi_18_39_ladder_1;
        _1796 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1780 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_866, _867, _868), _1712);
        _1792 = _1780.x * cbModelParam._m0[1u].y;
        _1794 = _1780.y * cbModelParam._m0[1u].y;
        _1796 = _1780.z * cbModelParam._m0[1u].y;
    }
    float _1800 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _762);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1800 : min(cbModelParam._m0[25u].w, _1800));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1856 = fma(_931, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _923)) + cbModelParam._m0[21u].w;
        float _1860 = fma(_931, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _923)) + cbModelParam._m0[22u].w;
        float _1864 = fma(_931, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _923)) + cbModelParam._m0[23u].w;
        float _1867 = fma(_868, cbModelParam._m0[21u].z, fma(_867, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _866));
        float _1870 = fma(_868, cbModelParam._m0[22u].z, fma(_867, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _866));
        float _1873 = fma(_868, cbModelParam._m0[23u].z, fma(_867, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _866));
        float _1980;
        if (_1867 > 0.0)
        {
            _1980 = abs((1.0 - _1856) / _1867);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1856 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1980 = frontier_phi_30_26_ladder;
        }
        float _2237;
        if (_1870 > 0.0)
        {
            _2237 = abs((1.0 - _1860) / _1870);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1860 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2237 = frontier_phi_41_37_ladder;
        }
        float _2541;
        if (_1873 > 0.0)
        {
            _2541 = abs((1.0 - _1864) / _1873);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1864 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2541 = frontier_phi_52_47_ladder;
        }
        float _2543 = isnan(_2237) ? _1980 : (isnan(_1980) ? _2237 : min(_1980, _2237));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1867) + _1856;
        float _2549 = (_2544 * _1870) + _1860;
        float _2550 = (_2544 * _1873) + _1864;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2731 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2550, cbModelParam._m0[17u].z, fma(_2549, cbModelParam._m0[17u].y, _2548 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2550, cbModelParam._m0[18u].z, fma(_2549, cbModelParam._m0[18u].y, _2548 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2550, cbModelParam._m0[19u].z, fma(_2549, cbModelParam._m0[19u].y, _2548 * cbModelParam._m0[19u].x))), _1801);
            frontier_phi_27_52_ladder = _2731.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2731.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2731.y * cbModelParam._m0[1u].z;
        }
        _1892 = frontier_phi_27_52_ladder_1;
        _1894 = frontier_phi_27_52_ladder_2;
        _1896 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1876 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_866, _867, _868), _1801);
        _1892 = _1876.x * cbModelParam._m0[1u].z;
        _1894 = _1876.y * cbModelParam._m0[1u].z;
        _1896 = _1876.z * cbModelParam._m0[1u].z;
    }
    float _1908 = ((((1.0 - _891) * ((_879 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_891 * _879)) * _858;
    float _1909 = _1908 * ((cbModelParam._m0[1u].w * (_1892 - _1792)) + _1792);
    float _1910 = _1908 * ((cbModelParam._m0[1u].w * (_1894 - _1794)) + _1794);
    float _1911 = _1908 * ((cbModelParam._m0[1u].w * (_1896 - _1796)) + _1796);
    float _1914 = fma(_1911, cbSceneParam._m0[89u].z, fma(_1910, cbSceneParam._m0[89u].y, _1909 * cbSceneParam._m0[89u].x));
    float _1917 = fma(_1911, cbSceneParam._m0[90u].z, fma(_1910, cbSceneParam._m0[90u].y, _1909 * cbSceneParam._m0[90u].x));
    float _1920 = fma(_1911, cbSceneParam._m0[91u].z, fma(_1910, cbSceneParam._m0[91u].y, _1909 * cbSceneParam._m0[91u].x));
    uvec4 _1930 = floatBitsToUint(cbInstanceData._m0[_307 + 5u]);
    uint _1932 = _1930.x * 14u;
    uint _1933 = _1932 + 13u;
    float _1938 = _858 + (-1.0);
    float _1941 = (cbLight._m0[_1933].x * _1938) + 1.0;
    float _1942 = (cbLight._m0[_1933].y * _1938) + 1.0;
    uint _1944 = _1932 + 4u;
    float _1955 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_758, _759, _760));
    float _1958 = isnan(1.0) ? _1941 : (isnan(_1941) ? 1.0 : min(_1941, 1.0));
    uint _1959 = _1932 + 5u;
    uint _1965 = _1932 | 1u;
    float _1971 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_758, _759, _760));
    float _1974 = isnan(1.0) ? _1942 : (isnan(_1942) ? 1.0 : min(_1942, 1.0));
    float _2039;
    float _2040;
    float _2041;
    if (_763 == 0.0)
    {
        float _3805 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _3816 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _1993 = (isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.3183098733425140380859375;
        float _1995 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * 0.3183098733425140380859375;
        _2039 = ((cbLight._m0[_1959].x * _1974) * _1995) + ((cbLight._m0[_1944].x * _1958) * _1993);
        _2040 = ((_1974 * cbLight._m0[_1959].y) * _1995) + ((_1958 * cbLight._m0[_1944].y) * _1993);
        _2041 = ((_1974 * cbLight._m0[_1959].z) * _1995) + ((_1958 * cbLight._m0[_1944].z) * _1993);
    }
    else
    {
        float _2005 = _1955 + _763;
        float _2008 = (_763 * 2.0) + 1.0;
        float _2009 = (isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) / _2008;
        float _2016 = _1971 + _763;
        float _2018 = (isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) / _2008;
        _2039 = (((_2018 * cbLight._m0[_1959].x) * _1974) + ((_2009 * cbLight._m0[_1944].x) * _1958)) * 0.3183098733425140380859375;
        _2040 = (((_2018 * cbLight._m0[_1959].y) * _1974) + ((_2009 * cbLight._m0[_1944].y) * _1958)) * 0.3183098733425140380859375;
        _2041 = (((_2018 * cbLight._m0[_1959].z) * _1974) + ((_2009 * cbLight._m0[_1944].z) * _1958)) * 0.3183098733425140380859375;
    }
    uint _2045 = _1932 + 8u;
    float _2061 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1932].w)) * _762) * 0.949999988079071044921875);
    float _2062 = _2061 * _2061;
    float _2063 = cbLight._m0[_1932].x + _517;
    float _2064 = cbLight._m0[_1932].y + _518;
    float _2065 = cbLight._m0[_1932].z + _519;
    float _2069 = inversesqrt(dot(vec3(_2063, _2064, _2065), vec3(_2063, _2064, _2065)));
    float _2070 = _2069 * _2063;
    float _2071 = _2069 * _2064;
    float _2072 = _2069 * _2065;
    float _2073 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_1932].xyz));
    float _3837 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _2077 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _2078 = dot(vec3(_758, _759, _760), vec3(_2070, _2071, _2072));
    float _3859 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    float _2082 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2070, _2071, _2072));
    float _3870 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2086 = _2062 * _2062;
    float _2090 = ((_2081 * _2081) * (_2086 + (-1.0))) + 1.0;
    float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2102 = 1.0 - _2062;
    float _2113 = (0.5 / (((_2077 * ((_2076 * _2102) + _2062)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2102) + _2062) * _2076))) * _2076;
    float _3881 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2115 = (isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0))) * (_2086 / ((_2090 * _2090) * 3.141590118408203125));
    uint _2128 = _1932 + 9u;
    float _2142 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _762) * 0.949999988079071044921875);
    float _2143 = _2142 * _2142;
    float _2144 = cbLight._m0[_1965].x + _517;
    float _2145 = cbLight._m0[_1965].y + _518;
    float _2146 = cbLight._m0[_1965].z + _519;
    float _2150 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
    float _2151 = _2150 * _2144;
    float _2152 = _2150 * _2145;
    float _2153 = _2150 * _2146;
    float _2154 = dot(vec3(_758, _759, _760), vec3(cbLight._m0[_1965].xyz));
    float _3892 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
    float _2158 = dot(vec3(_758, _759, _760), vec3(_2151, _2152, _2153));
    float _3903 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
    float _2162 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2151, _2152, _2153));
    float _3914 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2166 = _2143 * _2143;
    float _2170 = ((_2161 * _2161) * (_2166 + (-1.0))) + 1.0;
    float _2179 = (exp2(log2(1.0 - (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2180 = 1.0 - _2143;
    float _2190 = (0.5 / (((_2077 * ((_2157 * _2180) + _2143)) + 9.9999999392252902907785028219223e-09) + (((_2077 * _2180) + _2143) * _2157))) * _2157;
    float _3925 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
    float _2192 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * (_2166 / ((_2170 * _2170) * 3.141590118408203125));
    float _2202 = (((_2179 * cbLight._m0[_2128].x) * _2192) * _1974) + (((_2101 * cbLight._m0[_2045].x) * _2115) * _1958);
    float _2203 = (((_2179 * cbLight._m0[_2128].y) * _2192) * _1974) + (((_2101 * cbLight._m0[_2045].y) * _2115) * _1958);
    float _2204 = (((_2179 * cbLight._m0[_2128].z) * _2192) * _1974) + (((_2101 * cbLight._m0[_2045].z) * _2115) * _1958);
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    if (_1930.y == 0u)
    {
        float _2281 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2281;
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2281;
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2281;
        uvec4 _2296 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2297 = _2296.x;
        uint _2308 = uint((float(_2296.y) * floor(float(uint(cbSceneParam._m0[85u].y * _798) / _2297))) + floor(float(uint(cbSceneParam._m0[85u].x * _797) / _2297)));
        float _2318 = (log2(_2284 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2319 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        uint _2322 = uint(isnan(14.0) ? _2319 : (isnan(_2319) ? 14.0 : min(_2319, 14.0)));
        uint _2329 = _2296.z;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        if (((((1u << ((_2329 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2322 << 2u) + (_2308 << 6u)) >> 2u)).x) == 0u) || ((_2329 & 240u) == 0u))
        {
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
            _2388 = 0.0;
        }
        else
        {
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2389;
            float _2567 = 0.0;
            float _2568 = 0.0;
            float _2569 = 0.0;
            float _2570 = 0.0;
            float _2571 = 0.0;
            float _2572 = 0.0;
            uint _2573 = 0u;
            uint _2582;
            bool _2583;
            for (;;)
            {
                _2582 = texelFetch(g_lightClassification, int((((_2322 << 5u) + (_2308 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                _2583 = _2582 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2583)
                {
                    frontier_phi_58_pred = _2567;
                    frontier_phi_58_pred_1 = _2572;
                    frontier_phi_58_pred_2 = _2571;
                    frontier_phi_58_pred_3 = _2570;
                    frontier_phi_58_pred_4 = _2569;
                    frontier_phi_58_pred_5 = _2568;
                }
                else
                {
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    uint _2810;
                    _2804 = _2567;
                    _2805 = _2568;
                    _2806 = _2569;
                    _2807 = _2570;
                    _2808 = _2571;
                    _2809 = _2572;
                    _2810 = _2582;
                    float _2736;
                    float _2737;
                    float _2738;
                    float _2739;
                    float _2740;
                    float _2741;
                    for (;;)
                    {
                        uint _2814 = uint(findLSB(_2810)) + (_2573 << 5u);
                        uint _2811 = (_2810 + 4294967295u) & _2810;
                        uint _2816 = _2814 * 48u;
                        vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2836 = (_2814 * 48u) + 4u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 3u)).x));
                        float _2850 = _2849.x;
                        float _2851 = _2849.y;
                        float _2852 = _2849.z;
                        uint _2855 = (_2814 * 48u) + 8u;
                        vec3 _2866 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x));
                        uint _2871 = (_2814 * 48u) + 12u;
                        vec2 _2879 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x));
                        float _2885 = inversesqrt(dot(vec3(_2282, _2283, _2284), vec3(_2282, _2283, _2284)));
                        float _2886 = _2885 * _2282;
                        float _2887 = _2885 * _2283;
                        float _2888 = _2885 * _2284;
                        float _2889 = _2830.x - _2282;
                        float _2890 = _2830.y - _2283;
                        float _2891 = _2830.z - _2284;
                        float _2892 = dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891));
                        float _2895 = inversesqrt(_2892);
                        float _2896 = _2895 * _2889;
                        float _2897 = _2895 * _2890;
                        float _2898 = _2895 * _2891;
                        float _2899 = dot(vec3(_816, _819, _822), vec3(_2896, _2897, _2898));
                        float _2904 = 1.0 - (_2892 * _2830.w);
                        float _3946 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2905 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
                        float _2906 = sqrt(_2892) * _2849.w;
                        float _2909 = 1.39999997615814208984375 / (_2906 + 1.39999997615814208984375);
                        float _2910 = _2909 * _2909;
                        float _2911 = 1.0 - _2910;
                        float _2913 = (_2911 * _2911) * _763;
                        float _2916 = ((_2911 * _2899) + _2910) + _2913;
                        float _2921 = _2906 * _2906;
                        float _2926 = ((isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0))) * _2905) / (((_2913 * 2.0) + 1.0) * ((_2921 * 0.699999988079071044921875) + 1.0));
                        float _2930 = dot(vec3(_2896, _2897, _2898), vec3(_2886, _2887, _2888));
                        float _3962 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                        float _2937 = dot(vec3((-0.0) - _2886, (-0.0) - _2887, (-0.0) - _2888), vec3(_816, _819, _822)) + 1.0;
                        float _2939 = (isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0))) * 0.5;
                        float _2946 = ((_2939 * _2939) * _2879.x) * exp2((_2879.y * 32.0) * log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))));
                        float _2948 = _763 / (_763 + 1.0);
                        float _2964 = (-0.0) - _2282;
                        float _2965 = (-0.0) - _2283;
                        float _2966 = (-0.0) - _2284;
                        float _2970 = inversesqrt(dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966)));
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2981 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                        float _2982 = 1.0 - _879;
                        float _2989 = sqrt(1.0 - ((1.0 - (_2982 * _2982)) * (1.0 - (_2981 * _2981))));
                        float _2990 = _2989 * _2989;
                        float _2991 = _2990 * _2990;
                        float _2992 = _2971 + _2896;
                        float _2993 = _2972 + _2897;
                        float _2994 = _2973 + _2898;
                        float _2998 = inversesqrt(dot(vec3(_2992, _2993, _2994), vec3(_2992, _2993, _2994)));
                        float _3002 = dot(vec3(_816, _819, _822), vec3(_2971, _2972, _2973));
                        float _3978 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _3006 = dot(vec3(_816, _819, _822), vec3(_2998 * _2992, _2998 * _2993, _2998 * _2994));
                        float _3989 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3009 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _3013 = ((_3009 * _3009) * (_2991 + (-1.0))) + 1.0;
                        float _3014 = _2909 * _2990;
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _2899) + _3015;
                        float _4000 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
                        float _3020 = 1.0 - _2990;
                        float _3030 = (0.5 / (((_3019 * ((_3005 * _3020) + _2990)) + 9.9999999392252902907785028219223e-09) + (((_3019 * _3020) + _2990) * _3005))) * _3019;
                        float _4011 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3041 = (((_2991 * 3.1415927410125732421875) * (isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0)))) / ((_3013 * _3013) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125))) * _2905;
                        _2739 = (((((_2850 * 0.3183098733425140380859375) * _2948) * _2946) + _2850) * _2926) + _2807;
                        _2740 = (((((_2851 * 0.3183098733425140380859375) * _2948) * _2946) + _2851) * _2926) + _2808;
                        _2741 = (((((_2852 * 0.3183098733425140380859375) * _2948) * _2946) + _2852) * _2926) + _2809;
                        _2736 = (_3041 * _2866.x) + _2804;
                        _2737 = (_3041 * _2866.y) + _2805;
                        _2738 = (_3041 * _2866.z) + _2806;
                        if (_2811 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2738;
                            _2807 = _2739;
                            _2808 = _2740;
                            _2809 = _2741;
                            _2810 = _2811;
                        }
                    }
                    frontier_phi_58_pred = _2736;
                    frontier_phi_58_pred_1 = _2741;
                    frontier_phi_58_pred_2 = _2740;
                    frontier_phi_58_pred_3 = _2739;
                    frontier_phi_58_pred_4 = _2738;
                    frontier_phi_58_pred_5 = _2737;
                }
                _2379 = frontier_phi_58_pred;
                _2389 = frontier_phi_58_pred_1;
                _2387 = frontier_phi_58_pred_2;
                _2385 = frontier_phi_58_pred_3;
                _2383 = frontier_phi_58_pred_4;
                _2381 = frontier_phi_58_pred_5;
                uint _2574 = _2573 + 1u;
                if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2567 = _2379;
                    _2568 = _2381;
                    _2569 = _2383;
                    _2570 = _2385;
                    _2571 = _2387;
                    _2572 = _2389;
                    _2573 = _2574;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
            _2388 = _2389;
        }
        float _2393 = isnan(1.0) ? _858 : (isnan(_858) ? 1.0 : min(_858, 1.0));
        _2340 = (_2393 * _2384) + _2039;
        _2342 = (_2393 * _2386) + _2040;
        _2344 = (_2393 * _2388) + _2041;
        _2346 = ((_2378 * 0.039999999105930328369140625) * _2393) + _2202;
        _2348 = ((_2380 * 0.039999999105930328369140625) * _2393) + _2203;
        _2350 = ((_2382 * 0.039999999105930328369140625) * _2393) + _2204;
    }
    else
    {
        _2340 = _2039;
        _2342 = _2040;
        _2344 = _2041;
        _2346 = _2202;
        _2348 = _2203;
        _2350 = _2204;
    }
    float _2464;
    float _2465;
    float _2466;
    if (_763 > 0.0)
    {
        uint _2400 = _1932 + 4u;
        float _2406 = (-0.0) - _517;
        float _2407 = (-0.0) - _518;
        float _2408 = (-0.0) - _519;
        float _2409 = dot(vec3(cbLight._m0[_1932].xyz), vec3(_2406, _2407, _2408));
        float _4027 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2413 = _869 + 1.0;
        float _2415 = (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0))) * 0.5;
        float _2420 = _2415 * _2415;
        float _2421 = _2420 * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 32.0);
        float _2423 = _763 / (_763 + 1.0);
        float _2424 = isnan(_1941) ? 1.0 : (isnan(1.0) ? _1941 : min(1.0, _1941));
        uint _2434 = _1932 + 5u;
        float _2440 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2406, _2407, _2408));
        float _4048 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2447 = _2420 * exp2(log2(isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0))) * 32.0);
        float _2448 = isnan(_1942) ? 1.0 : (isnan(1.0) ? _1942 : min(1.0, _1942));
        _2464 = ((((_2447 * cbLight._m0[_2434].x) * _2423) * _2448) + (((_2421 * cbLight._m0[_2400].x) * _2423) * _2424)) * 0.3183098733425140380859375;
        _2465 = ((((_2447 * cbLight._m0[_2434].y) * _2423) * _2448) + (((_2421 * cbLight._m0[_2400].y) * _2423) * _2424)) * 0.3183098733425140380859375;
        _2466 = ((((_2447 * cbLight._m0[_2434].z) * _2423) * _2448) + (((_2421 * cbLight._m0[_2400].z) * _2423) * _2424)) * 0.3183098733425140380859375;
    }
    else
    {
        _2464 = 0.0;
        _2465 = 0.0;
        _2466 = 0.0;
    }
    float _4064 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4075 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _4086 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4097 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _2481 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * ((_2340 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _858)) + _2464);
    float _2482 = (isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * ((_2342 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _858)) + _2465);
    float _2483 = (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * ((_2344 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _858)) + _2466);
    float _2487 = 0.959999978542327880859375 - (exp2(log2(1.0 - _873) * 5.0) * 0.959999978542327880859375);
    float _2498 = (_2481 + ((_2346 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _697.x) * _2487) - _2481) * _743);
    float _2500 = (_2482 + ((_2348 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _697.y) * _2487) - _2482) * _743);
    float _2502 = (_2483 + ((_2350 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1701)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _697.z) * _2487) - _2483) * _743);
    float _2507 = cbInstanceData._m0[_307 + 6u].w * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)));
    float _2512 = _797 / cbSceneParam._m0[86u].x;
    float _2513 = _798 / cbSceneParam._m0[86u].y;
    vec4 _2527 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, (log2((isnan(cbSceneParam._m0[77u].w) ? _780 : (isnan(_780) ? cbSceneParam._m0[77u].w : min(_780, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2529 = _2527.x;
    float _2530 = _2527.y;
    float _2531 = _2527.z;
    float _2532 = _2527.w;
    float _2625;
    float _2627;
    float _2629;
    float _2631;
    if (_780 > cbSceneParam._m0[78u].w)
    {
        float _2588 = isnan(_780) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _780 : min(cbSceneParam._m0[80u].w, _780));
        float _2589 = _2588 / _780;
        float _2600 = _2589 * _299;
        float _2601 = _300 * _2589;
        float _2602 = (-0.0) - _2601;
        float _2603 = _2589 * _301;
        float _2605 = (cbSceneParam._m0[77u].w * _2602) / _2588;
        float _2606 = _2605 + cbSceneParam._m0[79u].w;
        float _2607 = cbSceneParam._m0[79u].w - _2601;
        float _2613 = sqrt(((_2600 * _2600) + (_2601 * _2601)) + (_2603 * _2603));
        float _2616 = (1.0 - (cbSceneParam._m0[77u].w / _2588)) * _2613;
        float _2621 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2623 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2602 - _2605) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2606 > 0.0) ? exp2(_2621 * _2606) : (2.0 - exp2(_2623 * _2606))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2616;
        }
        else
        {
            float _2761 = 1.0 / cbSceneParam._m0[80u].x;
            float _2762 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : max(_2606, _2607));
            float _2763 = isnan(_2607) ? _2606 : (isnan(_2606) ? _2607 : min(_2606, _2607));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            float _2773 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : min(_2763, 0.0));
            _3046 = ((abs(_2613 / _2602) * cbSceneParam._m0[80u].y) * ((((_2772 - _2773) * 2.0) - ((exp2(_2621 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0)))) - exp2(_2621 * (isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0))))) * _2761)) - ((exp2(_2623 * _2772) - exp2(_2623 * _2773)) * _2761))) + (_2616 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2512, _2513, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2532);
        _2625 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2529;
        _2627 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2530;
        _2629 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2531;
        _2631 = _3057 * _2532;
    }
    else
    {
        _2625 = _2529;
        _2627 = _2530;
        _2629 = _2531;
        _2631 = _2532;
    }
    bool _3084;
    float _2686;
    vec4 _2689;
    float _2691;
    vec4 _2693;
    float _2701;
    float _2702;
    float _2703;
    float _2704;
    bool _2714;
    for (;;)
    {
        bool _2643 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2644 = log2(_2631);
        float _2651 = exp2(_2644 * cbSceneParam._m0[78u].x) * _2498;
        float _2652 = exp2(_2644 * cbSceneParam._m0[78u].y) * _2500;
        float _2653 = exp2(_2644 * cbSceneParam._m0[78u].z) * _2502;
        vec4 _2661 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_797, _798));
        float _2663 = _2661.x;
        float _2684 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2663)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2663))) - _780) * cbMtdParam._m0[17u].y;
        float _4148 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        _2686 = _2507 * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)));
        float _2687 = _787 + (-0.5);
        _2689 = cbMtdParam._m0[1u];
        _2691 = _2689.y * _2687;
        _2693 = cbMatDynParam._m0[0u];
        float _2700 = (roundEven(_2693.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2701 = _2700 * (_2643 ? _2651 : (_2651 + (cbSceneParam._m0[72u].w * _2625)));
        _2702 = _2700 * (_2643 ? _2652 : (_2652 + (cbSceneParam._m0[72u].w * _2627)));
        _2703 = _2700 * (_2643 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2629)));
        _2704 = _2687 * 0.999000012874603271484375;
        _2714 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2714)
        {
            if ((cbInstanceData._m0[_307 + 7u].x + _2704) < 0.5)
            {
                _3084 = true;
                break;
            }
        }
        uint _2796 = _835 + uint(_2693.w);
        if ((cbInstanceData._m0[_2796].w < 1.0) && ((cbInstanceData._m0[_2796].w + _2704) < 0.5))
        {
            _3084 = true;
            break;
        }
        if ((_2691 + _427) < _2689.x)
        {
            _3084 = true;
            break;
        }
        _3084 = false;
        break;
    }
    float _3089;
    if (_3084)
    {
        discard_state = true;
        _3089 = 0.0;
    }
    else
    {
        _3089 = _2686;
    }
    SV_Target.x = _2701;
    SV_Target.y = _2702;
    SV_Target.z = _2703;
    SV_Target.w = _3089;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2686;
    discard_exit();
}


