#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1258;
float _3199;
float _3200;
float _3201;
float _3202;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _211 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _212 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _213 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _219 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _220 = _219 * _211;
    float _221 = _219 * _212;
    float _222 = _219 * _213;
    float _226 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = _226 * NORMAL.x;
    float _228 = _226 * NORMAL.y;
    float _229 = _226 * NORMAL.z;
    float _233 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _234 = _233 * TANGENT.x;
    float _235 = _233 * TANGENT.y;
    float _236 = _233 * TANGENT.z;
    float _241;
    float _242;
    float _243;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _241 = (-0.0) - _227;
        _242 = (-0.0) - _228;
        _243 = (-0.0) - _229;
    }
    else
    {
        _241 = _227;
        _242 = _228;
        _243 = _229;
    }
    float _290 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _300 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _290);
    float _301 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _290);
    float _302 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _290);
    uint _308 = uint(roundEven(NORMAL.w)) * 13u;
    uint _313 = _308 + 1u;
    uint _317 = _308 + 2u;
    float _326 = sqrt(((cbInstanceData._m0[_313].x * cbInstanceData._m0[_313].x) + (cbInstanceData._m0[_308].x * cbInstanceData._m0[_308].x)) + (cbInstanceData._m0[_317].x * cbInstanceData._m0[_317].x));
    float _327 = _326 * TEXCOORD.z;
    float _328 = _326 * TEXCOORD.w;
    vec4 _342 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _351 = (_342.x * 2.0) + (-1.0);
    float _353 = (_342.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_351, _353), vec2(_351, _353));
    float _3211 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _360 = sqrt(1.0 - (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0))));
    float _363 = fma(_360, _241, fma(_353, _234, _351 * _220));
    float _366 = fma(_360, _242, fma(_353, _235, _351 * _221));
    float _369 = fma(_360, _243, fma(_353, _236, _351 * _222));
    float _373 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    vec4 _406 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _411 = _406.w;
    float _423 = dot(vec3(_300, _301, _302), vec3(_220, _221, _222));
    float _426 = dot(vec3(_300, _301, _302), vec3(_234, _235, _236));
    float _429 = dot(vec3(_300, _301, _302), vec3(_241, _242, _243));
    float _435 = inversesqrt(dot(vec3(_423, _426, _429), vec3(_423, _426, _429)));
    float _457 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _477 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_423 * cbMtdParam._m0[14u].x) * _435) * _457) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_426 * cbMtdParam._m0[14u].x) * _435) * _457) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _500 = inversesqrt(dot(vec3(_300, _301, _302), vec3(_300, _301, _302)));
    float _501 = _500 * _300;
    float _502 = _500 * _301;
    float _503 = _500 * _302;
    float _504 = dot(vec4(_501, _502, _503, 0.0), vec4(_241, _242, _243, 0.0));
    float _507 = _504 - cbMtdParam._m0[15u].z;
    float _3222 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _514 = exp2(log2(1.0 - (isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _529 = ((((_406.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _477.x) * cbMtdParam._m0[9u].x) * ((_514 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _534 = ((((_406.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _477.y) * cbMtdParam._m0[9u].y) * ((_514 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _539 = ((((_406.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _477.z) * cbMtdParam._m0[9u].z) * ((_514 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _548 = (cbMtdParam._m0[18u].w + 1.0) * (TEXCOORD_8 - ((cbMtdParam._m0[18u].z * (1.0 - TEXCOORD_8)) * (texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _327) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _328) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625)));
    float _3238 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
    float _556 = (_549 * (cbMtdParam._m0[11u].x - _529)) + _529;
    float _557 = ((cbMtdParam._m0[11u].y - _534) * _549) + _534;
    float _558 = ((cbMtdParam._m0[11u].z - _539) * _549) + _539;
    vec4 _570 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _327) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _328) + cbTextureTilingScale._m0[9u].w));
    float _577 = (_570.x * 2.0) + (-1.0);
    float _578 = (_570.y * 2.0) + (-1.0);
    float _579 = dot(vec2(_577, _578), vec2(_577, _578));
    float _3249 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    vec4 _600 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _612 = cbMtdParam._m0[17u].z + _342.z;
    float _618 = (_612 + cbMtdParam._m0[16u].y) + ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * (_600.z - _612));
    float _621 = ((_570.z - _618) * _549) + _618;
    float _627 = ((((_600.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _351;
    float _628 = ((((_600.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _353;
    float _640 = (((_577 - _627) + (_627 * cbMtdParam._m0[14u].z)) * _549) + _627;
    float _641 = (((_578 - _628) + (_628 * cbMtdParam._m0[14u].z)) * _549) + _628;
    float _642 = (_549 * (sqrt(1.0 - (isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0)))) - _360)) + _360;
    float _658 = cbMtdParam._m0[16u].w * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x;
    float _660 = _658 - (_658 * _549);
    float _680 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + ((_373 * _363) * cbMtdParam._m0[18u].y));
    float _681 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + ((_373 * _366) * cbMtdParam._m0[18u].y));
    float _688 = isnan(cbInstanceData._m0[8u].x) ? _680 : (isnan(_680) ? cbInstanceData._m0[8u].x : max(_680, cbInstanceData._m0[8u].x));
    float _689 = isnan(cbInstanceData._m0[8u].y) ? _681 : (isnan(_681) ? cbInstanceData._m0[8u].y : max(_681, cbInstanceData._m0[8u].y));
    vec4 _693 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _688 : (isnan(_688) ? cbInstanceData._m0[8u].z : min(_688, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _689 : (isnan(_689) ? cbInstanceData._m0[8u].w : min(_689, cbInstanceData._m0[8u].w))));
    float _726 = _504 - cbMtdParam._m0[15u].x;
    float _3280 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _736 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3296 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _737 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _739 = _737 - (_549 * _737);
    float _743 = fma(_642, _241, fma(_641, _234, _640 * _220));
    float _746 = fma(_642, _242, fma(_641, _235, _640 * _221));
    float _749 = fma(_642, _243, fma(_641, _236, _640 * _222));
    float _753 = inversesqrt(dot(vec3(_743, _746, _749), vec3(_743, _746, _749)));
    float _754 = _753 * _743;
    float _755 = _753 * _746;
    float _756 = _753 * _749;
    float _3307 = isnan(0.0) ? _411 : (isnan(_411) ? 0.0 : max(_411, 0.0));
    float _757 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _3318 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _758 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _759 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
    float _3334 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3345 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3356 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _776 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _781 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _783 = _781.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _938 = sqrt(((_300 * _300) + (_301 * _301)) + (_302 * _302));
        float _944 = (cbMatDynParam._m0[5u].x * _938) + cbMatDynParam._m0[5u].y;
        float _3367 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _949 = (cbMatDynParam._m0[5u].z * _938) + cbMatDynParam._m0[5u].w;
        float _3378 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) - _945)) + _945) < ((_783 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _793 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _794 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _812 = fma(_756, cbSceneParam._m0[5u].z, fma(_755, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _754));
    float _815 = fma(_756, cbSceneParam._m0[6u].z, fma(_755, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _754));
    float _818 = fma(_756, cbSceneParam._m0[7u].z, fma(_755, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _754));
    uint _831 = _308 + 9u;
    uint _832 = _831 + uint(cbMatDynParam._m0[0u].w);
    float _838 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_832].x;
    float _839 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_832].y;
    float _840 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_832].z;
    float _3389 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
    vec4 _851 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _793, cbSceneParam._m0[86u].y * _794));
    float _854 = _851.x * TEXCOORD_5.w;
    float _855 = dot(vec3(_754, _755, _756), vec3(_501, _502, _503));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _754) - _501;
    float _863 = (_858 * _755) - _502;
    float _864 = (_858 * _756) - _503;
    float _865 = dot(vec3(_501, _502, _503), vec3(_754, _755, _756));
    float _868 = abs(_865);
    float _3422 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _869 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
    float _875 = sqrt(_758);
    float _887 = exp2((_875 * 5.0) * log2(1.0 - (_869 * 0.999000012874603271484375))) / (4.0 - (_875 * 3.0));
    float _919 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _923 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _927 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_927, cbModelParam._m0[26u].z, fma(_923, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _919));
        float _986 = fma(_927, cbModelParam._m0[27u].z, fma(_923, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _919));
        float _990 = fma(_927, cbModelParam._m0[28u].z, fma(_923, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _919));
        float _1015 = _919 + _754;
        float _1016 = _923 + _755;
        float _1017 = _927 + _756;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _982;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _986;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _990;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_754, _755, _756), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3470 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_754, _755, _756), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3503 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_754, _755, _756), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3536 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1301 = fma(_927, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _919));
        float _1305 = fma(_927, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _919));
        float _1309 = fma(_927, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _919));
        float _1332 = _919 + _754;
        float _1333 = _923 + _755;
        float _1334 = _927 + _756;
        float _1344 = fma(_1334, cbModelParam._m0[30u].z, fma(_1333, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1332)) - _1301;
        float _1345 = fma(_1334, cbModelParam._m0[31u].z, fma(_1333, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1332)) - _1305;
        float _1346 = fma(_1334, cbModelParam._m0[32u].z, fma(_1333, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1332)) - _1309;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1301 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1305 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[35u].z) + ((((((_1309 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1400 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1367.x + (-0.5));
        float _1402 = _1400 * (_1367.y + (-0.5));
        float _1403 = _1400 * (_1367.z + (-0.5));
        float _1410 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1374.x + (-0.5));
        float _1412 = _1410 * (_1374.y + (-0.5));
        float _1413 = _1410 * (_1374.z + (-0.5));
        float _1420 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1381.x + (-0.5));
        float _1422 = _1420 * (_1381.y + (-0.5));
        float _1423 = _1420 * (_1381.z + (-0.5));
        float _1430 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1388.x + (-0.5));
        float _1432 = _1430 * (_1388.y + (-0.5));
        float _1433 = _1430 * (_1388.z + (-0.5));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = _1401 * 0.5;
        float _1438 = _1411 * 0.5;
        float _1439 = _1421 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_754, _755, _756), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _3599 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1464 + 1.0))) + _1469) * _1434;
        float _1479 = _1402 * 0.5;
        float _1480 = _1412 * 0.5;
        float _1481 = _1422 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_754, _755, _756), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _3632 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1506 + 1.0))) + _1511) * _1435;
        float _1521 = _1403 * 0.5;
        float _1522 = _1413 * 0.5;
        float _1523 = _1423 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_754, _755, _756), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _3643 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3654 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _3665 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0))) * (_1548 + 1.0))) + _1553) * _1436;
        _1570 = _1403;
        _1571 = _1402;
        _1572 = _1401;
        _1573 = _1413;
        _1574 = _1412;
        _1575 = _1411;
        _1576 = _1423;
        _1577 = _1422;
        _1578 = _1421;
        _1579 = _1436;
        _1580 = _1435;
        _1581 = _1434;
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
    }
    else
    {
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = _1258;
        _1579 = _1258;
        _1580 = _1258;
        _1581 = _1258;
        _1582 = 0.0;
        _1583 = 0.0;
        _1584 = 0.0;
    }
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1270)) + _1270;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1271)) + _1271;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1272)) + _1272;
    float _1617 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1594));
    float _1638 = _862 * 0.5;
    float _1639 = _863 * 0.5;
    float _1640 = _864 * 0.5;
    float _1641 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1644 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1647 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1681;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1654 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1658 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1662 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1669 = dot(vec4(cbModelParam._m0[39u]), vec4(_1638, _1639, _1640, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1692;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1683 = dot(vec4(cbModelParam._m0[40u]), vec4(_1638, _1639, _1640, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1696 = (_1692 * cbModelParam._m0[1u].x) + (_1681 * (1.0 - cbModelParam._m0[1u].x));
    float _1706 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _758);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1706 : min(cbModelParam._m0[25u].z, _1706));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1754 = fma(_927, cbModelParam._m0[13u].z, fma(_923, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _919)) + cbModelParam._m0[13u].w;
        float _1758 = fma(_927, cbModelParam._m0[14u].z, fma(_923, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _919)) + cbModelParam._m0[14u].w;
        float _1762 = fma(_927, cbModelParam._m0[15u].z, fma(_923, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _919)) + cbModelParam._m0[15u].w;
        float _1765 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1768 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1771 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1799;
        if (_1765 > 0.0)
        {
            _1799 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1799 = frontier_phi_19_17_ladder;
        }
        float _1971;
        if (_1768 > 0.0)
        {
            _1971 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1971 = frontier_phi_28_24_ladder;
        }
        float _2206;
        if (_1771 > 0.0)
        {
            _2206 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2206 = frontier_phi_39_35_ladder;
        }
        float _2208 = isnan(_1971) ? _1799 : (isnan(_1799) ? _1971 : min(_1799, _1971));
        float _2209 = isnan(_2206) ? _2208 : (isnan(_2208) ? _2206 : min(_2208, _2206));
        float _2213 = (_2209 * _1765) + _1754;
        float _2214 = (_2209 * _1768) + _1758;
        float _2215 = (_2209 * _1771) + _1762;
        float _2216 = _2209 * 9.9999997473787516355514526367188e-05;
        float _2218 = (-1.0) - _2216;
        float _2220 = _2216 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2215 > _2220) || ((_2215 < _2218) || ((_2214 > _2220) || ((_2214 < _2218) || ((_2213 < _2218) || (_2213 > _2220))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2365 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2215, cbModelParam._m0[9u].z, fma(_2214, cbModelParam._m0[9u].y, _2213 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2215, cbModelParam._m0[10u].z, fma(_2214, cbModelParam._m0[10u].y, _2213 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2215, cbModelParam._m0[11u].z, fma(_2214, cbModelParam._m0[11u].y, _2213 * cbModelParam._m0[11u].x))), _1707);
            frontier_phi_18_39_ladder = _2365.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2365.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2365.x * cbModelParam._m0[1u].y;
        }
        _1787 = frontier_phi_18_39_ladder_2;
        _1789 = frontier_phi_18_39_ladder_1;
        _1791 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1707);
        _1787 = _1775.x * cbModelParam._m0[1u].y;
        _1789 = _1775.y * cbModelParam._m0[1u].y;
        _1791 = _1775.z * cbModelParam._m0[1u].y;
    }
    float _1795 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _758);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1795 : min(cbModelParam._m0[25u].w, _1795));
    float _1888;
    float _1890;
    float _1892;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1852 = fma(_927, cbModelParam._m0[21u].z, fma(_923, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _919)) + cbModelParam._m0[21u].w;
        float _1856 = fma(_927, cbModelParam._m0[22u].z, fma(_923, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _919)) + cbModelParam._m0[22u].w;
        float _1860 = fma(_927, cbModelParam._m0[23u].z, fma(_923, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _919)) + cbModelParam._m0[23u].w;
        float _1863 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1866 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1869 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _1976;
        if (_1863 > 0.0)
        {
            _1976 = abs((1.0 - _1852) / _1863);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1852 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1976 = frontier_phi_30_26_ladder;
        }
        float _2233;
        if (_1866 > 0.0)
        {
            _2233 = abs((1.0 - _1856) / _1866);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1866 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1856 + 1.0) / _1866);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2233 = frontier_phi_41_37_ladder;
        }
        float _2537;
        if (_1869 > 0.0)
        {
            _2537 = abs((1.0 - _1860) / _1869);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1860 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2537 = frontier_phi_52_47_ladder;
        }
        float _2539 = isnan(_2233) ? _1976 : (isnan(_1976) ? _2233 : min(_1976, _2233));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _1863) + _1852;
        float _2545 = (_2540 * _1866) + _1856;
        float _2546 = (_2540 * _1869) + _1860;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2547;
        float _2550 = _2547 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2546 > _2550) || ((_2546 < _2548) || ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 < _2548) || (_2544 > _2550))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2727 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2546, cbModelParam._m0[17u].z, fma(_2545, cbModelParam._m0[17u].y, _2544 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2546, cbModelParam._m0[18u].z, fma(_2545, cbModelParam._m0[18u].y, _2544 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2546, cbModelParam._m0[19u].z, fma(_2545, cbModelParam._m0[19u].y, _2544 * cbModelParam._m0[19u].x))), _1796);
            frontier_phi_27_52_ladder = _2727.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2727.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2727.y * cbModelParam._m0[1u].z;
        }
        _1888 = frontier_phi_27_52_ladder_1;
        _1890 = frontier_phi_27_52_ladder_2;
        _1892 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1872 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1796);
        _1888 = _1872.x * cbModelParam._m0[1u].z;
        _1890 = _1872.y * cbModelParam._m0[1u].z;
        _1892 = _1872.z * cbModelParam._m0[1u].z;
    }
    float _1904 = ((((1.0 - _887) * ((_875 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_887 * _875)) * _854;
    float _1905 = _1904 * ((cbModelParam._m0[1u].w * (_1888 - _1787)) + _1787);
    float _1906 = _1904 * ((cbModelParam._m0[1u].w * (_1890 - _1789)) + _1789);
    float _1907 = _1904 * ((cbModelParam._m0[1u].w * (_1892 - _1791)) + _1791);
    float _1910 = fma(_1907, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1905 * cbSceneParam._m0[89u].x));
    float _1913 = fma(_1907, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1905 * cbSceneParam._m0[90u].x));
    float _1916 = fma(_1907, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1905 * cbSceneParam._m0[91u].x));
    uvec4 _1926 = floatBitsToUint(cbInstanceData._m0[_308 + 5u]);
    uint _1928 = _1926.x * 14u;
    uint _1929 = _1928 + 13u;
    float _1934 = _854 + (-1.0);
    float _1937 = (cbLight._m0[_1929].x * _1934) + 1.0;
    float _1938 = (cbLight._m0[_1929].y * _1934) + 1.0;
    uint _1940 = _1928 + 4u;
    float _1951 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_754, _755, _756));
    float _1954 = isnan(1.0) ? _1937 : (isnan(_1937) ? 1.0 : min(_1937, 1.0));
    uint _1955 = _1928 + 5u;
    uint _1961 = _1928 | 1u;
    float _1967 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_754, _755, _756));
    float _1970 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    float _2035;
    float _2036;
    float _2037;
    if (_759 == 0.0)
    {
        float _3801 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _3812 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1989 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.3183098733425140380859375;
        float _1991 = (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * 0.3183098733425140380859375;
        _2035 = ((cbLight._m0[_1955].x * _1970) * _1991) + ((cbLight._m0[_1940].x * _1954) * _1989);
        _2036 = ((_1970 * cbLight._m0[_1955].y) * _1991) + ((_1954 * cbLight._m0[_1940].y) * _1989);
        _2037 = ((_1970 * cbLight._m0[_1955].z) * _1991) + ((_1954 * cbLight._m0[_1940].z) * _1989);
    }
    else
    {
        float _2001 = _1951 + _759;
        float _2004 = (_759 * 2.0) + 1.0;
        float _2005 = (isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0))) / _2004;
        float _2012 = _1967 + _759;
        float _2014 = (isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) / _2004;
        _2035 = (((_2014 * cbLight._m0[_1955].x) * _1970) + ((_2005 * cbLight._m0[_1940].x) * _1954)) * 0.3183098733425140380859375;
        _2036 = (((_2014 * cbLight._m0[_1955].y) * _1970) + ((_2005 * cbLight._m0[_1940].y) * _1954)) * 0.3183098733425140380859375;
        _2037 = (((_2014 * cbLight._m0[_1955].z) * _1970) + ((_2005 * cbLight._m0[_1940].z) * _1954)) * 0.3183098733425140380859375;
    }
    uint _2041 = _1928 + 8u;
    float _2057 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1928].w)) * _758) * 0.949999988079071044921875);
    float _2058 = _2057 * _2057;
    float _2059 = cbLight._m0[_1928].x + _501;
    float _2060 = cbLight._m0[_1928].y + _502;
    float _2061 = cbLight._m0[_1928].z + _503;
    float _2065 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
    float _2066 = _2065 * _2059;
    float _2067 = _2065 * _2060;
    float _2068 = _2065 * _2061;
    float _2069 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_1928].xyz));
    float _3833 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2072 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _3844 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2073 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _2074 = dot(vec3(_754, _755, _756), vec3(_2066, _2067, _2068));
    float _3855 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2066, _2067, _2068));
    float _3866 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2082 = _2058 * _2058;
    float _2086 = ((_2077 * _2077) * (_2082 + (-1.0))) + 1.0;
    float _2097 = (exp2(log2(1.0 - (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2098 = 1.0 - _2058;
    float _2109 = (0.5 / (((_2073 * ((_2072 * _2098) + _2058)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2098) + _2058) * _2072))) * _2072;
    float _3877 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2111 = (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_2082 / ((_2086 * _2086) * 3.141590118408203125));
    uint _2124 = _1928 + 9u;
    float _2138 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _758) * 0.949999988079071044921875);
    float _2139 = _2138 * _2138;
    float _2140 = cbLight._m0[_1961].x + _501;
    float _2141 = cbLight._m0[_1961].y + _502;
    float _2142 = cbLight._m0[_1961].z + _503;
    float _2146 = inversesqrt(dot(vec3(_2140, _2141, _2142), vec3(_2140, _2141, _2142)));
    float _2147 = _2146 * _2140;
    float _2148 = _2146 * _2141;
    float _2149 = _2146 * _2142;
    float _2150 = dot(vec3(_754, _755, _756), vec3(cbLight._m0[_1961].xyz));
    float _3888 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
    float _2154 = dot(vec3(_754, _755, _756), vec3(_2147, _2148, _2149));
    float _3899 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2147, _2148, _2149));
    float _3910 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2139 * _2139;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2175 = (exp2(log2(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2176 = 1.0 - _2139;
    float _2186 = (0.5 / (((_2073 * ((_2153 * _2176) + _2139)) + 9.9999999392252902907785028219223e-09) + (((_2073 * _2176) + _2139) * _2153))) * _2153;
    float _3921 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    float _2198 = (((_2175 * cbLight._m0[_2124].x) * _2188) * _1970) + (((_2097 * cbLight._m0[_2041].x) * _2111) * _1954);
    float _2199 = (((_2175 * cbLight._m0[_2124].y) * _2188) * _1970) + (((_2097 * cbLight._m0[_2041].y) * _2111) * _1954);
    float _2200 = (((_2175 * cbLight._m0[_2124].z) * _2188) * _1970) + (((_2097 * cbLight._m0[_2041].z) * _2111) * _1954);
    float _2336;
    float _2338;
    float _2340;
    float _2342;
    float _2344;
    float _2346;
    if (_1926.y == 0u)
    {
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2277;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2277;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2277;
        uvec4 _2292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2293 = _2292.x;
        uint _2304 = uint((float(_2292.y) * floor(float(uint(cbSceneParam._m0[85u].y * _794) / _2293))) + floor(float(uint(cbSceneParam._m0[85u].x * _793) / _2293)));
        float _2314 = (log2(_2280 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2315 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        uint _2318 = uint(isnan(14.0) ? _2315 : (isnan(_2315) ? 14.0 : min(_2315, 14.0)));
        uint _2325 = _2292.z;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        if (((((1u << ((_2325 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2318 << 2u) + (_2304 << 6u)) >> 2u)).x) == 0u) || ((_2325 & 240u) == 0u))
        {
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
        }
        else
        {
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            float _2566 = 0.0;
            float _2567 = 0.0;
            float _2568 = 0.0;
            uint _2569 = 0u;
            uint _2578;
            bool _2579;
            for (;;)
            {
                _2578 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2569 << 2u)) >> 2u)).x;
                _2579 = _2578 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2579)
                {
                    frontier_phi_58_pred = _2563;
                    frontier_phi_58_pred_1 = _2568;
                    frontier_phi_58_pred_2 = _2567;
                    frontier_phi_58_pred_3 = _2566;
                    frontier_phi_58_pred_4 = _2565;
                    frontier_phi_58_pred_5 = _2564;
                }
                else
                {
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    uint _2806;
                    _2800 = _2563;
                    _2801 = _2564;
                    _2802 = _2565;
                    _2803 = _2566;
                    _2804 = _2567;
                    _2805 = _2568;
                    _2806 = _2578;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    float _2737;
                    for (;;)
                    {
                        uint _2810 = uint(findLSB(_2806)) + (_2569 << 5u);
                        uint _2807 = (_2806 + 4294967295u) & _2806;
                        uint _2812 = _2810 * 48u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2832 = (_2810 * 48u) + 4u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        float _2846 = _2845.x;
                        float _2847 = _2845.y;
                        float _2848 = _2845.z;
                        uint _2851 = (_2810 * 48u) + 8u;
                        vec3 _2862 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x));
                        uint _2867 = (_2810 * 48u) + 12u;
                        vec2 _2875 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2867)).x, texelFetch(g_PointLightRenderingBuffer, int(_2867 + 1u)).x));
                        float _2881 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
                        float _2882 = _2881 * _2278;
                        float _2883 = _2881 * _2279;
                        float _2884 = _2881 * _2280;
                        float _2885 = _2826.x - _2278;
                        float _2886 = _2826.y - _2279;
                        float _2887 = _2826.z - _2280;
                        float _2888 = dot(vec3(_2885, _2886, _2887), vec3(_2885, _2886, _2887));
                        float _2891 = inversesqrt(_2888);
                        float _2892 = _2891 * _2885;
                        float _2893 = _2891 * _2886;
                        float _2894 = _2891 * _2887;
                        float _2895 = dot(vec3(_812, _815, _818), vec3(_2892, _2893, _2894));
                        float _2900 = 1.0 - (_2888 * _2826.w);
                        float _3942 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2901 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                        float _2902 = sqrt(_2888) * _2845.w;
                        float _2905 = 1.39999997615814208984375 / (_2902 + 1.39999997615814208984375);
                        float _2906 = _2905 * _2905;
                        float _2907 = 1.0 - _2906;
                        float _2909 = (_2907 * _2907) * _759;
                        float _2912 = ((_2907 * _2895) + _2906) + _2909;
                        float _2917 = _2902 * _2902;
                        float _2922 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2901) / (((_2909 * 2.0) + 1.0) * ((_2917 * 0.699999988079071044921875) + 1.0));
                        float _2926 = dot(vec3(_2892, _2893, _2894), vec3(_2882, _2883, _2884));
                        float _3958 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
                        float _2933 = dot(vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884), vec3(_812, _815, _818)) + 1.0;
                        float _2935 = (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0))) * 0.5;
                        float _2942 = ((_2935 * _2935) * _2875.x) * exp2((_2875.y * 32.0) * log2(isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))));
                        float _2944 = _759 / (_759 + 1.0);
                        float _2960 = (-0.0) - _2278;
                        float _2961 = (-0.0) - _2279;
                        float _2962 = (-0.0) - _2280;
                        float _2966 = inversesqrt(dot(vec3(_2960, _2961, _2962), vec3(_2960, _2961, _2962)));
                        float _2967 = _2966 * _2960;
                        float _2968 = _2966 * _2961;
                        float _2969 = _2966 * _2962;
                        float _2977 = exp2(log2(1.0 / ((_2917 * 3.5) + 5.0)) * 0.25);
                        float _2978 = 1.0 - _875;
                        float _2985 = sqrt(1.0 - ((1.0 - (_2978 * _2978)) * (1.0 - (_2977 * _2977))));
                        float _2986 = _2985 * _2985;
                        float _2987 = _2986 * _2986;
                        float _2988 = _2967 + _2892;
                        float _2989 = _2968 + _2893;
                        float _2990 = _2969 + _2894;
                        float _2994 = inversesqrt(dot(vec3(_2988, _2989, _2990), vec3(_2988, _2989, _2990)));
                        float _2998 = dot(vec3(_812, _815, _818), vec3(_2967, _2968, _2969));
                        float _3974 = isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0));
                        float _3001 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                        float _3002 = dot(vec3(_812, _815, _818), vec3(_2994 * _2988, _2994 * _2989, _2994 * _2990));
                        float _3985 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3005 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                        float _3009 = ((_3005 * _3005) * (_2987 + (-1.0))) + 1.0;
                        float _3010 = _2905 * _2986;
                        float _3011 = _3010 * _3010;
                        float _3014 = ((1.0 - _3011) * _2895) + _3011;
                        float _3996 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3015 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _3016 = 1.0 - _2986;
                        float _3026 = (0.5 / (((_3015 * ((_3001 * _3016) + _2986)) + 9.9999999392252902907785028219223e-09) + (((_3015 * _3016) + _2986) * _3001))) * _3015;
                        float _4007 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0));
                        float _3037 = (((_2987 * 3.1415927410125732421875) * (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) / ((_3009 * _3009) * ((_2917 * 2.1991131305694580078125) + 3.141590118408203125))) * _2901;
                        _2735 = (((((_2846 * 0.3183098733425140380859375) * _2944) * _2942) + _2846) * _2922) + _2803;
                        _2736 = (((((_2847 * 0.3183098733425140380859375) * _2944) * _2942) + _2847) * _2922) + _2804;
                        _2737 = (((((_2848 * 0.3183098733425140380859375) * _2944) * _2942) + _2848) * _2922) + _2805;
                        _2732 = (_3037 * _2862.x) + _2800;
                        _2733 = (_3037 * _2862.y) + _2801;
                        _2734 = (_3037 * _2862.z) + _2802;
                        if (_2807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2800 = _2732;
                            _2801 = _2733;
                            _2802 = _2734;
                            _2803 = _2735;
                            _2804 = _2736;
                            _2805 = _2737;
                            _2806 = _2807;
                        }
                    }
                    frontier_phi_58_pred = _2732;
                    frontier_phi_58_pred_1 = _2737;
                    frontier_phi_58_pred_2 = _2736;
                    frontier_phi_58_pred_3 = _2735;
                    frontier_phi_58_pred_4 = _2734;
                    frontier_phi_58_pred_5 = _2733;
                }
                _2375 = frontier_phi_58_pred;
                _2385 = frontier_phi_58_pred_1;
                _2383 = frontier_phi_58_pred_2;
                _2381 = frontier_phi_58_pred_3;
                _2379 = frontier_phi_58_pred_4;
                _2377 = frontier_phi_58_pred_5;
                uint _2570 = _2569 + 1u;
                if (_2570 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2563 = _2375;
                    _2564 = _2377;
                    _2565 = _2379;
                    _2566 = _2381;
                    _2567 = _2383;
                    _2568 = _2385;
                    _2569 = _2570;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
        }
        float _2389 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2336 = (_2389 * _2380) + _2035;
        _2338 = (_2389 * _2382) + _2036;
        _2340 = (_2389 * _2384) + _2037;
        _2342 = ((_2374 * 0.039999999105930328369140625) * _2389) + _2198;
        _2344 = ((_2376 * 0.039999999105930328369140625) * _2389) + _2199;
        _2346 = ((_2378 * 0.039999999105930328369140625) * _2389) + _2200;
    }
    else
    {
        _2336 = _2035;
        _2338 = _2036;
        _2340 = _2037;
        _2342 = _2198;
        _2344 = _2199;
        _2346 = _2200;
    }
    float _2460;
    float _2461;
    float _2462;
    if (_759 > 0.0)
    {
        uint _2396 = _1928 + 4u;
        float _2402 = (-0.0) - _501;
        float _2403 = (-0.0) - _502;
        float _2404 = (-0.0) - _503;
        float _2405 = dot(vec3(cbLight._m0[_1928].xyz), vec3(_2402, _2403, _2404));
        float _4023 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2409 = _865 + 1.0;
        float _2411 = (isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0))) * 0.5;
        float _2416 = _2411 * _2411;
        float _2417 = _2416 * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * 32.0);
        float _2419 = _759 / (_759 + 1.0);
        float _2420 = isnan(_1937) ? 1.0 : (isnan(1.0) ? _1937 : min(1.0, _1937));
        uint _2430 = _1928 + 5u;
        float _2436 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2402, _2403, _2404));
        float _4044 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
        float _2443 = _2416 * exp2(log2(isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0))) * 32.0);
        float _2444 = isnan(_1938) ? 1.0 : (isnan(1.0) ? _1938 : min(1.0, _1938));
        _2460 = ((((_2443 * cbLight._m0[_2430].x) * _2419) * _2444) + (((_2417 * cbLight._m0[_2396].x) * _2419) * _2420)) * 0.3183098733425140380859375;
        _2461 = ((((_2443 * cbLight._m0[_2430].y) * _2419) * _2444) + (((_2417 * cbLight._m0[_2396].y) * _2419) * _2420)) * 0.3183098733425140380859375;
        _2462 = ((((_2443 * cbLight._m0[_2430].z) * _2419) * _2444) + (((_2417 * cbLight._m0[_2396].z) * _2419) * _2420)) * 0.3183098733425140380859375;
    }
    else
    {
        _2460 = 0.0;
        _2461 = 0.0;
        _2462 = 0.0;
    }
    float _4060 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _4071 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _4082 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4093 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _2477 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * ((_2336 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _854)) + _2460);
    float _2478 = (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0))) * ((_2338 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _854)) + _2461);
    float _2479 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * ((_2340 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _854)) + _2462);
    float _2483 = 0.959999978542327880859375 - (exp2(log2(1.0 - _869) * 5.0) * 0.959999978542327880859375);
    float _2494 = (_2477 + ((_2342 + ((isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))) * _1696)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _693.x) * _2483) - _2477) * _739);
    float _2496 = (_2478 + ((_2344 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1696)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _693.y) * _2483) - _2478) * _739);
    float _2498 = (_2479 + ((_2346 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1696)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _693.z) * _2483) - _2479) * _739);
    float _2503 = cbInstanceData._m0[_308 + 6u].w * (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)));
    float _2508 = _793 / cbSceneParam._m0[86u].x;
    float _2509 = _794 / cbSceneParam._m0[86u].y;
    vec4 _2523 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, (log2((isnan(cbSceneParam._m0[77u].w) ? _776 : (isnan(_776) ? cbSceneParam._m0[77u].w : min(_776, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2525 = _2523.x;
    float _2526 = _2523.y;
    float _2527 = _2523.z;
    float _2528 = _2523.w;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    if (_776 > cbSceneParam._m0[78u].w)
    {
        float _2584 = isnan(_776) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _776 : min(cbSceneParam._m0[80u].w, _776));
        float _2585 = _2584 / _776;
        float _2596 = _2585 * _300;
        float _2597 = _301 * _2585;
        float _2598 = (-0.0) - _2597;
        float _2599 = _2585 * _302;
        float _2601 = (cbSceneParam._m0[77u].w * _2598) / _2584;
        float _2602 = _2601 + cbSceneParam._m0[79u].w;
        float _2603 = cbSceneParam._m0[79u].w - _2597;
        float _2609 = sqrt(((_2596 * _2596) + (_2597 * _2597)) + (_2599 * _2599));
        float _2612 = (1.0 - (cbSceneParam._m0[77u].w / _2584)) * _2609;
        float _2617 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2619 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3042;
        if (abs((_2598 - _2601) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3042 = ((((_2602 > 0.0) ? exp2(_2617 * _2602) : (2.0 - exp2(_2619 * _2602))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2612;
        }
        else
        {
            float _2757 = 1.0 / cbSceneParam._m0[80u].x;
            float _2758 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : max(_2602, _2603));
            float _2759 = isnan(_2603) ? _2602 : (isnan(_2602) ? _2603 : min(_2602, _2603));
            float _2768 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : min(_2758, 0.0));
            float _2769 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : min(_2759, 0.0));
            _3042 = ((abs(_2609 / _2598) * cbSceneParam._m0[80u].y) * ((((_2768 - _2769) * 2.0) - ((exp2(_2617 * (isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0)))) - exp2(_2617 * (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))))) * _2757)) - ((exp2(_2619 * _2768) - exp2(_2619 * _2769)) * _2757))) + (_2612 * cbSceneParam._m0[80u].z);
        }
        vec4 _3044 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2508, _2509, 1.0), 0.0);
        float _3053 = exp2((_3042 * (-1.44269502162933349609375)) * (1.0 - _3044.w));
        float _3054 = log2(_3053);
        float _3070 = log2(_2528);
        _2621 = (exp2(_3070 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].x)) * _3044.x) / cbSceneParam._m0[78u].x)) + _2525;
        _2623 = (exp2(_3070 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].y)) * _3044.y) / cbSceneParam._m0[78u].y)) + _2526;
        _2625 = (exp2(_3070 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].z)) * _3044.z) / cbSceneParam._m0[78u].z)) + _2527;
        _2627 = _3053 * _2528;
    }
    else
    {
        _2621 = _2525;
        _2623 = _2526;
        _2625 = _2527;
        _2627 = _2528;
    }
    bool _3080;
    float _2682;
    vec4 _2685;
    float _2687;
    vec4 _2689;
    float _2697;
    float _2698;
    float _2699;
    float _2700;
    bool _2710;
    for (;;)
    {
        bool _2639 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2640 = log2(_2627);
        float _2647 = exp2(_2640 * cbSceneParam._m0[78u].x) * _2494;
        float _2648 = exp2(_2640 * cbSceneParam._m0[78u].y) * _2496;
        float _2649 = exp2(_2640 * cbSceneParam._m0[78u].z) * _2498;
        vec4 _2657 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_793, _794));
        float _2659 = _2657.x;
        float _2680 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2659)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2659))) - _776) * cbMtdParam._m0[17u].y;
        float _4144 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
        _2682 = _2503 * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)));
        float _2683 = _783 + (-0.5);
        _2685 = cbMtdParam._m0[1u];
        _2687 = _2685.y * _2683;
        _2689 = cbMatDynParam._m0[0u];
        float _2696 = (roundEven(_2689.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2697 = _2696 * (_2639 ? _2647 : (_2647 + (cbSceneParam._m0[72u].w * _2621)));
        _2698 = _2696 * (_2639 ? _2648 : (_2648 + (cbSceneParam._m0[72u].w * _2623)));
        _2699 = _2696 * (_2639 ? _2649 : (_2649 + (cbSceneParam._m0[72u].w * _2625)));
        _2700 = _2683 * 0.999000012874603271484375;
        _2710 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2710)
        {
            if ((cbInstanceData._m0[_308 + 7u].x + _2700) < 0.5)
            {
                _3080 = true;
                break;
            }
        }
        uint _2792 = _831 + uint(_2689.w);
        if ((cbInstanceData._m0[_2792].w < 1.0) && ((cbInstanceData._m0[_2792].w + _2700) < 0.5))
        {
            _3080 = true;
            break;
        }
        if ((_2687 + _411) < _2685.x)
        {
            _3080 = true;
            break;
        }
        _3080 = false;
        break;
    }
    float _3085;
    if (_3080)
    {
        discard_state = true;
        _3085 = 0.0;
    }
    else
    {
        _3085 = _2682;
    }
    SV_Target.x = _2697;
    SV_Target.y = _2698;
    SV_Target.z = _2699;
    SV_Target.w = _3085;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2682;
    discard_exit();
}


