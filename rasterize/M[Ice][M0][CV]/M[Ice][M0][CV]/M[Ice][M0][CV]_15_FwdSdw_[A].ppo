#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1283;
float _3510;
float _3511;
float _3512;
float _3513;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _226 = _225 * _217;
    float _227 = _225 * _218;
    float _228 = _225 * _219;
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _233 = _232 * NORMAL.x;
    float _234 = _232 * NORMAL.y;
    float _235 = _232 * NORMAL.z;
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _240 = _239 * TANGENT.x;
    float _241 = _239 * TANGENT.y;
    float _242 = _239 * TANGENT.z;
    float _247;
    float _248;
    float _249;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _247 = (-0.0) - _233;
        _248 = (-0.0) - _234;
        _249 = (-0.0) - _235;
    }
    else
    {
        _247 = _233;
        _248 = _234;
        _249 = _235;
    }
    float _296 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _306 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _296);
    float _307 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _296);
    float _308 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _296);
    uint _314 = uint(roundEven(NORMAL.w)) * 13u;
    uint _319 = _314 + 1u;
    uint _323 = _314 + 2u;
    float _332 = sqrt(((cbInstanceData._m0[_319].x * cbInstanceData._m0[_319].x) + (cbInstanceData._m0[_314].x * cbInstanceData._m0[_314].x)) + (cbInstanceData._m0[_323].x * cbInstanceData._m0[_323].x));
    float _333 = _332 * TEXCOORD.z;
    float _334 = _332 * TEXCOORD.w;
    vec4 _347 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * _333) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _334) + cbTextureTilingScale._m0[8u].w));
    vec4 _368 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _376 = (_368.x * 2.0) + (-1.0);
    float _378 = (_368.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_376, _378), vec2(_376, _378));
    float _3522 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _385 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    float _388 = fma(_385, _247, fma(_378, _240, _376 * _226));
    float _391 = fma(_385, _248, fma(_378, _241, _376 * _227));
    float _394 = fma(_385, _249, fma(_378, _242, _376 * _228));
    float _398 = inversesqrt(dot(vec3(_388, _391, _394), vec3(_388, _391, _394)));
    vec4 _431 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _436 = _431.w;
    float _448 = dot(vec3(_306, _307, _308), vec3(_226, _227, _228));
    float _451 = dot(vec3(_306, _307, _308), vec3(_240, _241, _242));
    float _454 = dot(vec3(_306, _307, _308), vec3(_247, _248, _249));
    float _460 = inversesqrt(dot(vec3(_448, _451, _454), vec3(_448, _451, _454)));
    float _482 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _502 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_448 * cbMtdParam._m0[14u].x) * _460) * _482) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_451 * cbMtdParam._m0[14u].x) * _460) * _482) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _525 = inversesqrt(dot(vec3(_306, _307, _308), vec3(_306, _307, _308)));
    float _526 = _525 * _306;
    float _527 = _525 * _307;
    float _528 = _525 * _308;
    float _529 = dot(vec4(_526, _527, _528, 0.0), vec4(_247, _248, _249, 0.0));
    float _532 = _529 - cbMtdParam._m0[15u].z;
    float _3533 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _539 = exp2(log2(1.0 - (isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _554 = ((((_431.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _502.x) * cbMtdParam._m0[9u].x) * ((_539 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _559 = ((((_431.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _502.y) * cbMtdParam._m0[9u].y) * ((_539 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _564 = ((((_431.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _502.z) * cbMtdParam._m0[9u].z) * ((_539 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _573 = (cbMtdParam._m0[18u].w + 1.0) * (TEXCOORD_8 - ((cbMtdParam._m0[18u].z * (1.0 - TEXCOORD_8)) * (texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _333) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _334) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625)));
    float _3549 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _574 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
    float _581 = (_574 * ((_347.x * cbMtdParam._m0[10u].x) - _554)) + _554;
    float _582 = (((_347.y * cbMtdParam._m0[10u].y) - _559) * _574) + _559;
    float _583 = (((_347.z * cbMtdParam._m0[10u].z) - _564) * _574) + _564;
    vec4 _595 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _333) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _334) + cbTextureTilingScale._m0[9u].w));
    float _602 = (_595.x * 2.0) + (-1.0);
    float _603 = (_595.y * 2.0) + (-1.0);
    float _604 = dot(vec2(_602, _603), vec2(_602, _603));
    float _3560 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    vec4 _625 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _637 = cbMtdParam._m0[17u].z + _368.z;
    float _643 = (_637 + cbMtdParam._m0[16u].y) + ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * (_625.z - _637));
    float _646 = ((_595.z - _643) * _574) + _643;
    float _652 = ((((_625.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _376;
    float _653 = ((((_625.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _378;
    float _665 = (((_602 - _652) + (_652 * cbMtdParam._m0[14u].z)) * _574) + _652;
    float _666 = (((_603 - _653) + (_653 * cbMtdParam._m0[14u].z)) * _574) + _653;
    float _667 = (_574 * (sqrt(1.0 - (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0)))) - _385)) + _385;
    float _683 = cbMtdParam._m0[16u].w * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x;
    float _685 = _683 - (_683 * _574);
    float _705 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + ((_398 * _388) * cbMtdParam._m0[18u].y));
    float _706 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + ((_398 * _391) * cbMtdParam._m0[18u].y));
    float _713 = isnan(cbInstanceData._m0[8u].x) ? _705 : (isnan(_705) ? cbInstanceData._m0[8u].x : max(_705, cbInstanceData._m0[8u].x));
    float _714 = isnan(cbInstanceData._m0[8u].y) ? _706 : (isnan(_706) ? cbInstanceData._m0[8u].y : max(_706, cbInstanceData._m0[8u].y));
    vec4 _718 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _713 : (isnan(_713) ? cbInstanceData._m0[8u].z : min(_713, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _714 : (isnan(_714) ? cbInstanceData._m0[8u].w : min(_714, cbInstanceData._m0[8u].w))));
    float _751 = _529 - cbMtdParam._m0[15u].x;
    float _3591 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _761 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3607 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _762 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _764 = _762 - (_574 * _762);
    float _768 = fma(_667, _247, fma(_666, _240, _665 * _226));
    float _771 = fma(_667, _248, fma(_666, _241, _665 * _227));
    float _774 = fma(_667, _249, fma(_666, _242, _665 * _228));
    float _778 = inversesqrt(dot(vec3(_768, _771, _774), vec3(_768, _771, _774)));
    float _779 = _778 * _768;
    float _780 = _778 * _771;
    float _781 = _778 * _774;
    float _3618 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _782 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
    float _3629 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _783 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _784 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _3645 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3656 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3667 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _806 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _808 = _806.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _963 = sqrt(((_306 * _306) + (_307 * _307)) + (_308 * _308));
        float _969 = (cbMatDynParam._m0[5u].x * _963) + cbMatDynParam._m0[5u].y;
        float _3678 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _974 = (cbMatDynParam._m0[5u].z * _963) + cbMatDynParam._m0[5u].w;
        float _3689 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) - _970)) + _970) < ((_808 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _818 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _819 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _837 = fma(_781, cbSceneParam._m0[5u].z, fma(_780, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _779));
    float _840 = fma(_781, cbSceneParam._m0[6u].z, fma(_780, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _779));
    float _843 = fma(_781, cbSceneParam._m0[7u].z, fma(_780, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _779));
    uint _856 = _314 + 9u;
    uint _857 = _856 + uint(cbMatDynParam._m0[0u].w);
    float _863 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0)))) * cbInstanceData._m0[_857].x;
    float _864 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * cbInstanceData._m0[_857].y;
    float _865 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0)))) * cbInstanceData._m0[_857].z;
    float _3700 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _866 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _3711 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _867 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _3722 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _868 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    vec4 _876 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _818, cbSceneParam._m0[86u].y * _819));
    float _879 = _876.x * TEXCOORD_5.w;
    float _880 = dot(vec3(_779, _780, _781), vec3(_526, _527, _528));
    float _883 = _880 * 2.0;
    float _887 = (_883 * _779) - _526;
    float _888 = (_883 * _780) - _527;
    float _889 = (_883 * _781) - _528;
    float _890 = dot(vec3(_526, _527, _528), vec3(_779, _780, _781));
    float _893 = abs(_890);
    float _3733 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _894 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    float _900 = sqrt(_783);
    float _912 = exp2((_900 * 5.0) * log2(1.0 - (_894 * 0.999000012874603271484375))) / (4.0 - (_900 * 3.0));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _948 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1282;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1007 = fma(_952, cbModelParam._m0[26u].z, fma(_948, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944));
        float _1011 = fma(_952, cbModelParam._m0[27u].z, fma(_948, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944));
        float _1015 = fma(_952, cbModelParam._m0[28u].z, fma(_948, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944));
        float _1040 = _944 + _779;
        float _1041 = _948 + _780;
        float _1042 = _952 + _781;
        float _1052 = fma(_1042, cbModelParam._m0[26u].z, fma(_1041, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1040)) - _1007;
        float _1053 = fma(_1042, cbModelParam._m0[27u].z, fma(_1041, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1040)) - _1011;
        float _1054 = fma(_1042, cbModelParam._m0[28u].z, fma(_1041, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1040)) - _1015;
        float _1058 = inversesqrt(dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054)));
        float _1071 = ((_1058 * _1052) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1007 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1072 = ((_1058 * _1053) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1011 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1073 = ((_1058 * _1054) / cbModelParam._m0[34u].z) + ((((((_1015 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1076 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1071, _1072, _1073), 0.0);
        float _1110 = exp2((_1076.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1076.x + (-0.5));
        float _1112 = _1110 * (_1076.y + (-0.5));
        float _1113 = _1110 * (_1076.z + (-0.5));
        float _1120 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1083.x + (-0.5));
        float _1122 = _1120 * (_1083.y + (-0.5));
        float _1123 = _1120 * (_1083.z + (-0.5));
        float _1130 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1131 = _1130 * (_1090.x + (-0.5));
        float _1132 = _1130 * (_1090.y + (-0.5));
        float _1133 = _1130 * (_1090.z + (-0.5));
        float _1140 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1097.x + (-0.5));
        float _1142 = _1140 * (_1097.y + (-0.5));
        float _1143 = _1140 * (_1097.z + (-0.5));
        float _1144 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1145 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1146 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1147 = _1111 * 0.5;
        float _1148 = _1121 * 0.5;
        float _1149 = _1131 * 0.5;
        float _1150 = dot(vec3(_1147, _1148, _1149), vec3(_1147, _1148, _1149));
        float _1155 = (_1150 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1150);
        float _1164 = (dot(vec3(_779, _780, _781), vec3(_1155 * _1147, _1155 * _1148, _1155 * _1149)) + 1.0) * 0.5;
        float _3759 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1174 = sqrt(((_1148 * _1148) + (_1147 * _1147)) + (_1149 * _1149)) / (_1144 + 9.9999997473787516355514526367188e-06);
        float _3770 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1175 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1176 = _1175 * 2.0;
        float _1180 = (1.0 - _1175) / (_1175 + 1.0);
        float _3781 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1190 = ((((1.0 - _1181) * (_1176 + 2.0)) * exp2(log2(isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1176 + 1.0))) + _1181) * _1144;
        float _1191 = _1112 * 0.5;
        float _1192 = _1122 * 0.5;
        float _1193 = _1132 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(_779, _780, _781), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3792 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1145 + 9.9999997473787516355514526367188e-06);
        float _3803 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3814 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * (_1218 + 1.0))) + _1223) * _1145;
        float _1233 = _1113 * 0.5;
        float _1234 = _1123 * 0.5;
        float _1235 = _1133 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(_779, _780, _781), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3825 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1146 + 9.9999997473787516355514526367188e-06);
        float _3836 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3847 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * (_1260 + 1.0))) + _1265) * _1146;
        _1282 = _1113;
        _1284 = _1112;
        _1285 = _1111;
        _1286 = _1123;
        _1287 = _1122;
        _1288 = _1121;
        _1289 = _1133;
        _1290 = _1132;
        _1291 = _1131;
        _1292 = _1146;
        _1293 = _1145;
        _1294 = _1144;
        _1295 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)));
        _1296 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1297 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
    }
    else
    {
        _1282 = _1283;
        _1284 = _1283;
        _1285 = _1283;
        _1286 = _1283;
        _1287 = _1283;
        _1288 = _1283;
        _1289 = _1283;
        _1290 = _1283;
        _1291 = _1283;
        _1292 = _1283;
        _1293 = _1283;
        _1294 = _1283;
        _1295 = 0.0;
        _1296 = 0.0;
        _1297 = 0.0;
    }
    float _1595;
    float _1596;
    float _1597;
    float _1598;
    float _1599;
    float _1600;
    float _1601;
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1326 = fma(_952, cbModelParam._m0[30u].z, fma(_948, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _944));
        float _1330 = fma(_952, cbModelParam._m0[31u].z, fma(_948, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _944));
        float _1334 = fma(_952, cbModelParam._m0[32u].z, fma(_948, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _944));
        float _1357 = _944 + _779;
        float _1358 = _948 + _780;
        float _1359 = _952 + _781;
        float _1369 = fma(_1359, cbModelParam._m0[30u].z, fma(_1358, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1357)) - _1326;
        float _1370 = fma(_1359, cbModelParam._m0[31u].z, fma(_1358, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1357)) - _1330;
        float _1371 = fma(_1359, cbModelParam._m0[32u].z, fma(_1358, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1357)) - _1334;
        float _1375 = inversesqrt(dot(vec3(_1369, _1370, _1371), vec3(_1369, _1370, _1371)));
        float _1388 = ((_1375 * _1369) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1326 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1389 = ((_1375 * _1370) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1330 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1390 = ((_1375 * _1371) / cbModelParam._m0[35u].z) + ((((((_1334 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1388, _1389, _1390), 0.0);
        float _1425 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1392.x + (-0.5));
        float _1427 = _1425 * (_1392.y + (-0.5));
        float _1428 = _1425 * (_1392.z + (-0.5));
        float _1435 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1436 = _1435 * (_1399.x + (-0.5));
        float _1437 = _1435 * (_1399.y + (-0.5));
        float _1438 = _1435 * (_1399.z + (-0.5));
        float _1445 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1406.x + (-0.5));
        float _1447 = _1445 * (_1406.y + (-0.5));
        float _1448 = _1445 * (_1406.z + (-0.5));
        float _1455 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1413.x + (-0.5));
        float _1457 = _1455 * (_1413.y + (-0.5));
        float _1458 = _1455 * (_1413.z + (-0.5));
        float _1459 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1460 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1461 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1462 = _1426 * 0.5;
        float _1463 = _1436 * 0.5;
        float _1464 = _1446 * 0.5;
        float _1465 = dot(vec3(_1462, _1463, _1464), vec3(_1462, _1463, _1464));
        float _1470 = (_1465 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1465);
        float _1478 = (dot(vec3(_779, _780, _781), vec3(_1470 * _1462, _1470 * _1463, _1470 * _1464)) + 1.0) * 0.5;
        float _3888 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1487 = sqrt(((_1463 * _1463) + (_1462 * _1462)) + (_1464 * _1464)) / (_1459 + 9.9999997473787516355514526367188e-06);
        float _3899 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1488 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1489 = _1488 * 2.0;
        float _1493 = (1.0 - _1488) / (_1488 + 1.0);
        float _3910 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
        float _1503 = ((((1.0 - _1494) * (_1489 + 2.0)) * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1489 + 1.0))) + _1494) * _1459;
        float _1504 = _1427 * 0.5;
        float _1505 = _1437 * 0.5;
        float _1506 = _1447 * 0.5;
        float _1507 = dot(vec3(_1504, _1505, _1506), vec3(_1504, _1505, _1506));
        float _1512 = (_1507 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1507);
        float _1520 = (dot(vec3(_779, _780, _781), vec3(_1512 * _1504, _1512 * _1505, _1512 * _1506)) + 1.0) * 0.5;
        float _3921 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1529 = sqrt(((_1505 * _1505) + (_1504 * _1504)) + (_1506 * _1506)) / (_1460 + 9.9999997473787516355514526367188e-06);
        float _3932 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1531 = _1530 * 2.0;
        float _1535 = (1.0 - _1530) / (_1530 + 1.0);
        float _3943 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1536 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _1545 = ((((1.0 - _1536) * (_1531 + 2.0)) * exp2(log2(isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0))) * (_1531 + 1.0))) + _1536) * _1460;
        float _1546 = _1428 * 0.5;
        float _1547 = _1438 * 0.5;
        float _1548 = _1448 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_779, _780, _781), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _3954 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1461 + 9.9999997473787516355514526367188e-06);
        float _3965 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _3976 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_1573 + 1.0))) + _1578) * _1461;
        _1595 = _1428;
        _1596 = _1427;
        _1597 = _1426;
        _1598 = _1438;
        _1599 = _1437;
        _1600 = _1436;
        _1601 = _1448;
        _1602 = _1447;
        _1603 = _1446;
        _1604 = _1461;
        _1605 = _1460;
        _1606 = _1459;
        _1607 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)));
        _1608 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)));
        _1609 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
    }
    else
    {
        _1595 = _1283;
        _1596 = _1283;
        _1597 = _1283;
        _1598 = _1283;
        _1599 = _1283;
        _1600 = _1283;
        _1601 = _1283;
        _1602 = _1283;
        _1603 = _1283;
        _1604 = _1283;
        _1605 = _1283;
        _1606 = _1283;
        _1607 = 0.0;
        _1608 = 0.0;
        _1609 = 0.0;
    }
    float _1619 = (cbModelParam._m0[1u].x * (_1607 - _1295)) + _1295;
    float _1620 = (cbModelParam._m0[1u].x * (_1608 - _1296)) + _1296;
    float _1621 = (cbModelParam._m0[1u].x * (_1609 - _1297)) + _1297;
    float _1642 = fma(_1621, cbSceneParam._m0[89u].z, fma(_1620, cbSceneParam._m0[89u].y, _1619 * cbSceneParam._m0[89u].x));
    float _1645 = fma(_1621, cbSceneParam._m0[90u].z, fma(_1620, cbSceneParam._m0[90u].y, _1619 * cbSceneParam._m0[90u].x));
    float _1648 = fma(_1621, cbSceneParam._m0[91u].z, fma(_1620, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1619));
    float _1663 = _887 * 0.5;
    float _1664 = _888 * 0.5;
    float _1665 = _889 * 0.5;
    float _1666 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1597, _1600, _1603, _1606));
    float _1669 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1596, _1599, _1602, _1605));
    float _1672 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1595, _1598, _1601, _1604));
    float _1706;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1679 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1282, _1286, _1289, _1292));
        float _1683 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1284, _1287, _1290, _1293));
        float _1687 = dot(vec4(_1663, _1664, _1665, 1.0), vec4(_1285, _1288, _1291, _1294));
        float _1694 = dot(vec4(cbModelParam._m0[39u]), vec4(_1663, _1664, _1665, 1.0));
        _1706 = dot(vec3(isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1706 = 1.0;
    }
    float _1717;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1708 = dot(vec4(cbModelParam._m0[40u]), vec4(_1663, _1664, _1665, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1708) ? 0.0 : (isnan(0.0) ? _1708 : max(0.0, _1708))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1721 = (_1717 * cbModelParam._m0[1u].x) + (_1706 * (1.0 - cbModelParam._m0[1u].x));
    float _1731 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _783);
    float _1732 = isnan(_1731) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1731 : min(cbModelParam._m0[25u].z, _1731));
    float _1812;
    float _1814;
    float _1816;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1779 = fma(_952, cbModelParam._m0[13u].z, fma(_948, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _944)) + cbModelParam._m0[13u].w;
        float _1783 = fma(_952, cbModelParam._m0[14u].z, fma(_948, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _944)) + cbModelParam._m0[14u].w;
        float _1787 = fma(_952, cbModelParam._m0[15u].z, fma(_948, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _944)) + cbModelParam._m0[15u].w;
        float _1790 = fma(_889, cbModelParam._m0[13u].z, fma(_888, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _887));
        float _1793 = fma(_889, cbModelParam._m0[14u].z, fma(_888, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _887));
        float _1796 = fma(_889, cbModelParam._m0[15u].z, fma(_888, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _887));
        float _1824;
        if (_1790 > 0.0)
        {
            _1824 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1824 = frontier_phi_19_17_ladder;
        }
        float _1996;
        if (_1793 > 0.0)
        {
            _1996 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1996 = frontier_phi_28_24_ladder;
        }
        float _2260;
        if (_1796 > 0.0)
        {
            _2260 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2260 = frontier_phi_40_35_ladder;
        }
        float _2262 = isnan(_1996) ? _1824 : (isnan(_1824) ? _1996 : min(_1824, _1996));
        float _2263 = isnan(_2260) ? _2262 : (isnan(_2262) ? _2260 : min(_2262, _2260));
        float _2267 = (_2263 * _1790) + _1779;
        float _2268 = (_2263 * _1793) + _1783;
        float _2269 = (_2263 * _1796) + _1787;
        float _2270 = _2263 * 9.9999997473787516355514526367188e-05;
        float _2272 = (-1.0) - _2270;
        float _2274 = _2270 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2269 > _2274) || ((_2269 < _2272) || ((_2268 > _2274) || ((_2268 < _2272) || ((_2267 < _2272) || (_2267 > _2274))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2269, cbModelParam._m0[9u].z, fma(_2268, cbModelParam._m0[9u].y, _2267 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2269, cbModelParam._m0[10u].z, fma(_2268, cbModelParam._m0[10u].y, _2267 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2269, cbModelParam._m0[11u].z, fma(_2268, cbModelParam._m0[11u].y, _2267 * cbModelParam._m0[11u].x))), _1732);
            frontier_phi_18_40_ladder = _2423.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2423.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2423.x * cbModelParam._m0[1u].y;
        }
        _1812 = frontier_phi_18_40_ladder_2;
        _1814 = frontier_phi_18_40_ladder_1;
        _1816 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1800 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_887, _888, _889), _1732);
        _1812 = _1800.x * cbModelParam._m0[1u].y;
        _1814 = _1800.y * cbModelParam._m0[1u].y;
        _1816 = _1800.z * cbModelParam._m0[1u].y;
    }
    float _1820 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _783);
    float _1821 = isnan(_1820) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1820 : min(cbModelParam._m0[25u].w, _1820));
    float _1913;
    float _1915;
    float _1917;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1877 = fma(_952, cbModelParam._m0[21u].z, fma(_948, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _944)) + cbModelParam._m0[21u].w;
        float _1881 = fma(_952, cbModelParam._m0[22u].z, fma(_948, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _944)) + cbModelParam._m0[22u].w;
        float _1885 = fma(_952, cbModelParam._m0[23u].z, fma(_948, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _944)) + cbModelParam._m0[23u].w;
        float _1888 = fma(_889, cbModelParam._m0[21u].z, fma(_888, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _887));
        float _1891 = fma(_889, cbModelParam._m0[22u].z, fma(_888, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _887));
        float _1894 = fma(_889, cbModelParam._m0[23u].z, fma(_888, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _887));
        float _2001;
        if (_1888 > 0.0)
        {
            _2001 = abs((1.0 - _1877) / _1888);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1877 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2001 = frontier_phi_30_26_ladder;
        }
        float _2287;
        if (_1891 > 0.0)
        {
            _2287 = abs((1.0 - _1881) / _1891);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1891 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1881 + 1.0) / _1891);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2287 = frontier_phi_42_37_ladder;
        }
        float _2606;
        if (_1894 > 0.0)
        {
            _2606 = abs((1.0 - _1885) / _1894);
        }
        else
        {
            float frontier_phi_51_49_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_51_49_ladder = abs((_1885 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_51_49_ladder = 5000.0;
            }
            _2606 = frontier_phi_51_49_ladder;
        }
        float _2608 = isnan(_2287) ? _2001 : (isnan(_2001) ? _2287 : min(_2001, _2287));
        float _2609 = isnan(_2606) ? _2608 : (isnan(_2608) ? _2606 : min(_2608, _2606));
        float _2613 = (_2609 * _1888) + _1877;
        float _2614 = (_2609 * _1891) + _1881;
        float _2615 = (_2609 * _1894) + _1885;
        float _2616 = _2609 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2616;
        float _2619 = _2616 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2615 > _2619) || ((_2615 < _2617) || ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 < _2617) || (_2613 > _2619))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2615, cbModelParam._m0[17u].z, fma(_2614, cbModelParam._m0[17u].y, _2613 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2615, cbModelParam._m0[18u].z, fma(_2614, cbModelParam._m0[18u].y, _2613 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2615, cbModelParam._m0[19u].z, fma(_2614, cbModelParam._m0[19u].y, _2613 * cbModelParam._m0[19u].x))), _1821);
            frontier_phi_27_51_ladder = _2716.x * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2716.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2716.y * cbModelParam._m0[1u].z;
        }
        _1913 = frontier_phi_27_51_ladder;
        _1915 = frontier_phi_27_51_ladder_2;
        _1917 = frontier_phi_27_51_ladder_1;
    }
    else
    {
        vec4 _1897 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_887, _888, _889), _1821);
        _1913 = _1897.x * cbModelParam._m0[1u].z;
        _1915 = _1897.y * cbModelParam._m0[1u].z;
        _1917 = _1897.z * cbModelParam._m0[1u].z;
    }
    float _1929 = ((((1.0 - _912) * ((_900 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_912 * _900)) * _879;
    float _1930 = _1929 * ((cbModelParam._m0[1u].w * (_1913 - _1812)) + _1812);
    float _1931 = _1929 * ((cbModelParam._m0[1u].w * (_1915 - _1814)) + _1814);
    float _1932 = _1929 * ((cbModelParam._m0[1u].w * (_1917 - _1816)) + _1816);
    float _1935 = fma(_1932, cbSceneParam._m0[89u].z, fma(_1931, cbSceneParam._m0[89u].y, _1930 * cbSceneParam._m0[89u].x));
    float _1938 = fma(_1932, cbSceneParam._m0[90u].z, fma(_1931, cbSceneParam._m0[90u].y, _1930 * cbSceneParam._m0[90u].x));
    float _1941 = fma(_1932, cbSceneParam._m0[91u].z, fma(_1931, cbSceneParam._m0[91u].y, _1930 * cbSceneParam._m0[91u].x));
    float _1975 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1979 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1983 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1988 = _1975 / _1987;
    float _1989 = _1979 / _1987;
    float _1990 = _1983 / _1987;
    float _2137;
    float _2138;
    float _2139;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2017 = ((uint(_1990 > cbSceneParam._m0[59u].y) + uint(_1990 > cbSceneParam._m0[59u].x)) + uint(_1990 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2018 = _2017 + 43u;
        uint _2026 = _2017 + 44u;
        uint _2034 = _2017 + 45u;
        uint _2042 = _2017 + 46u;
        float _2053 = fma(_1987, cbSceneParam._m0[_2018].w, fma(_1983, cbSceneParam._m0[_2018].z, fma(_1979, cbSceneParam._m0[_2018].y, _1975 * cbSceneParam._m0[_2018].x)));
        float _2057 = fma(_1987, cbSceneParam._m0[_2026].w, fma(_1983, cbSceneParam._m0[_2026].z, fma(_1979, cbSceneParam._m0[_2026].y, _1975 * cbSceneParam._m0[_2026].x)));
        float _2065 = fma(_1987, cbSceneParam._m0[_2042].w, fma(_1983, cbSceneParam._m0[_2042].z, fma(_1979, cbSceneParam._m0[_2042].y, _1975 * cbSceneParam._m0[_2042].x)));
        float _2070 = cbSceneParam._m0[33u].z * _2065;
        float _2072 = cbSceneParam._m0[33u].w * _2065;
        float _2075 = fma(_1987, cbSceneParam._m0[_2034].w, fma(_1983, cbSceneParam._m0[_2034].z, fma(_1979, cbSceneParam._m0[_2034].y, _1975 * cbSceneParam._m0[_2034].x))) / _2065;
        float _2123 = (cbSceneParam._m0[33u].x - sqrt(((_1989 * _1989) + (_1988 * _1988)) + (_1990 * _1990))) * cbSceneParam._m0[33u].y;
        float _4102 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2130 = (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2070 + _2053) / _2065, (_2072 + _2057) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2072 + _2053) / _2065, (_2057 - _2070) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 - _2070) / _2065, (_2057 - _2072) / _2065), _2075), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2053 - _2072) / _2065, (_2070 + _2057) / _2065), _2075), 0.0)).x), vec4(0.25)));
        _2137 = 1.0 - (_2130 * cbSceneParam._m0[34u].x);
        _2138 = 1.0 - (_2130 * cbSceneParam._m0[34u].y);
        _2139 = 1.0 - (_2130 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2137 = 1.0;
        _2138 = 1.0;
        _2139 = 1.0;
    }
    float _2203;
    float _2205;
    float _2207;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2191 = fma(_1987, cbSceneParam._m0[63u].w, fma(_1983, cbSceneParam._m0[63u].z, fma(_1979, cbSceneParam._m0[63u].y, _1975 * cbSceneParam._m0[63u].x)));
        float _2192 = fma(_1987, cbSceneParam._m0[60u].w, fma(_1983, cbSceneParam._m0[60u].z, fma(_1979, cbSceneParam._m0[60u].y, _1975 * cbSceneParam._m0[60u].x))) / _2191;
        float _2193 = fma(_1987, cbSceneParam._m0[61u].w, fma(_1983, cbSceneParam._m0[61u].z, fma(_1979, cbSceneParam._m0[61u].y, _1975 * cbSceneParam._m0[61u].x))) / _2191;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2192 >= cbSceneParam._m0[64u].x) && (_2193 >= cbSceneParam._m0[64u].y)) && (_2192 <= cbSceneParam._m0[64u].z)) && (_2193 <= cbSceneParam._m0[64u].w))
        {
            float _2300 = fma(_1987, cbSceneParam._m0[62u].w, fma(_1983, cbSceneParam._m0[62u].z, fma(_1979, cbSceneParam._m0[62u].y, _1975 * cbSceneParam._m0[62u].x))) / _2191;
            float _2304 = isnan(cbSceneParam._m0[41u].w) ? _2300 : (isnan(_2300) ? cbSceneParam._m0[41u].w : max(_2300, cbSceneParam._m0[41u].w));
            float _2347 = (cbSceneParam._m0[33u].x - sqrt(((_1989 * _1989) + (_1988 * _1988)) + (_1990 * _1990))) * cbSceneParam._m0[33u].y;
            float _4118 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
            float _2354 = (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2192, cbSceneParam._m0[33u].w + _2193), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2192, _2193 - cbSceneParam._m0[33u].z), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2192 - cbSceneParam._m0[33u].z, _2193 - cbSceneParam._m0[33u].w), _2304), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2192 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2193), _2304), 0.0)).x), vec4(0.25)));
            float _2358 = 1.0 - (_2354 * cbSceneParam._m0[34u].x);
            float _2359 = 1.0 - (_2354 * cbSceneParam._m0[34u].y);
            float _2360 = 1.0 - (_2354 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2360) ? _2139 : (isnan(_2139) ? _2360 : min(_2139, _2360));
            frontier_phi_39_38_ladder_1 = isnan(_2359) ? _2138 : (isnan(_2138) ? _2359 : min(_2138, _2359));
            frontier_phi_39_38_ladder_2 = isnan(_2358) ? _2137 : (isnan(_2137) ? _2358 : min(_2137, _2358));
        }
        else
        {
            frontier_phi_39_38_ladder = _2139;
            frontier_phi_39_38_ladder_1 = _2138;
            frontier_phi_39_38_ladder_2 = _2137;
        }
        _2203 = frontier_phi_39_38_ladder_2;
        _2205 = frontier_phi_39_38_ladder_1;
        _2207 = frontier_phi_39_38_ladder;
    }
    else
    {
        _2203 = _2137;
        _2205 = _2138;
        _2207 = _2139;
    }
    uvec4 _2212 = floatBitsToUint(cbInstanceData._m0[_314 + 5u]);
    uint _2214 = _2212.x * 14u;
    uint _2215 = _2214 + 13u;
    float _2220 = _879 + (-1.0);
    float _2223 = (cbLight._m0[_2215].x * _2220) + 1.0;
    float _2224 = (cbLight._m0[_2215].y * _2220) + 1.0;
    uint _2226 = _2214 + 4u;
    float _2237 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_779, _780, _781));
    float _2240 = isnan(1.0) ? _2223 : (isnan(_2223) ? 1.0 : min(_2223, 1.0));
    float _2241 = cbLight._m0[_2226].x * _2203;
    float _2242 = cbLight._m0[_2226].y * _2205;
    float _2243 = cbLight._m0[_2226].z * _2207;
    uint _2244 = _2214 + 5u;
    uint _2250 = _2214 | 1u;
    float _2256 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_779, _780, _781));
    float _2259 = isnan(1.0) ? _2224 : (isnan(_2224) ? 1.0 : min(_2224, 1.0));
    float _2432;
    float _2433;
    float _2434;
    if (_784 == 0.0)
    {
        float _4154 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
        float _4165 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2369 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * 0.3183098733425140380859375;
        float _2371 = (isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * 0.3183098733425140380859375;
        _2432 = ((cbLight._m0[_2244].x * _2259) * _2371) + ((_2241 * _2240) * _2369);
        _2433 = ((_2259 * cbLight._m0[_2244].y) * _2371) + ((_2242 * _2240) * _2369);
        _2434 = ((_2259 * cbLight._m0[_2244].z) * _2371) + ((_2243 * _2240) * _2369);
    }
    else
    {
        float _2381 = _2237 + _784;
        float _2384 = (_784 * 2.0) + 1.0;
        float _2385 = (isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0))) / _2384;
        float _2392 = _2256 + _784;
        float _2394 = (isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0))) / _2384;
        _2432 = (((_2394 * cbLight._m0[_2244].x) * _2259) + ((_2241 * _2385) * _2240)) * 0.3183098733425140380859375;
        _2433 = (((_2394 * cbLight._m0[_2244].y) * _2259) + ((_2242 * _2385) * _2240)) * 0.3183098733425140380859375;
        _2434 = (((_2394 * cbLight._m0[_2244].z) * _2259) + ((_2243 * _2385) * _2240)) * 0.3183098733425140380859375;
    }
    uint _2438 = _2214 + 8u;
    float _2454 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _783) * 0.949999988079071044921875);
    float _2455 = _2454 * _2454;
    float _2456 = cbLight._m0[_2214].x + _526;
    float _2457 = cbLight._m0[_2214].y + _527;
    float _2458 = cbLight._m0[_2214].z + _528;
    float _2462 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
    float _2463 = _2462 * _2456;
    float _2464 = _2462 * _2457;
    float _2465 = _2462 * _2458;
    float _2466 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2214].xyz));
    float _4186 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2469 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _4197 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2470 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _2471 = dot(vec3(_779, _780, _781), vec3(_2463, _2464, _2465));
    float _4208 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
    float _2474 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
    float _2475 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2463, _2464, _2465));
    float _4219 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
    float _2479 = _2455 * _2455;
    float _2483 = ((_2474 * _2474) * (_2479 + (-1.0))) + 1.0;
    float _2494 = (exp2(log2(1.0 - (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2495 = 1.0 - _2455;
    float _2506 = (0.5 / (((_2470 * ((_2469 * _2495) + _2455)) + 9.9999999392252902907785028219223e-09) + (((_2470 * _2495) + _2455) * _2469))) * _2469;
    float _4230 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2508 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_2479 / ((_2483 * _2483) * 3.141590118408203125));
    uint _2524 = _2214 + 9u;
    float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2250].w)) * _783) * 0.949999988079071044921875);
    float _2539 = _2538 * _2538;
    float _2540 = cbLight._m0[_2250].x + _526;
    float _2541 = cbLight._m0[_2250].y + _527;
    float _2542 = cbLight._m0[_2250].z + _528;
    float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
    float _2547 = _2546 * _2540;
    float _2548 = _2546 * _2541;
    float _2549 = _2546 * _2542;
    float _2550 = dot(vec3(_779, _780, _781), vec3(cbLight._m0[_2250].xyz));
    float _4241 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
    float _2553 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
    float _2554 = dot(vec3(_779, _780, _781), vec3(_2547, _2548, _2549));
    float _4252 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
    float _2558 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2547, _2548, _2549));
    float _4263 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2562 = _2539 * _2539;
    float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
    float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2576 = 1.0 - _2539;
    float _2586 = (0.5 / (((_2470 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2470 * _2576) + _2539) * _2553))) * _2553;
    float _4274 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
    float _2588 = (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
    float _2598 = (((_2575 * cbLight._m0[_2524].x) * _2588) * _2259) + ((((cbLight._m0[_2438].x * _2203) * _2494) * _2508) * _2240);
    float _2599 = (((_2575 * cbLight._m0[_2524].y) * _2588) * _2259) + ((((cbLight._m0[_2438].y * _2205) * _2494) * _2508) * _2240);
    float _2600 = (((_2575 * cbLight._m0[_2524].z) * _2588) * _2259) + ((((cbLight._m0[_2438].z * _2207) * _2494) * _2508) * _2240);
    float _2687;
    float _2689;
    float _2691;
    float _2693;
    float _2695;
    float _2697;
    if (_2212.y == 0u)
    {
        uvec4 _2643 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2644 = _2643.x;
        uint _2655 = uint((float(_2643.y) * floor(float(uint(cbSceneParam._m0[85u].y * _819) / _2644))) + floor(float(uint(cbSceneParam._m0[85u].x * _818) / _2644)));
        float _2665 = (log2(_1990 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2666 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        uint _2669 = uint(isnan(14.0) ? _2666 : (isnan(_2666) ? 14.0 : min(_2666, 14.0)));
        uint _2676 = _2643.z;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        if (((((1u << ((_2676 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2669 << 2u) + (_2655 << 6u)) >> 2u)).x) == 0u) || ((_2676 & 240u) == 0u))
        {
            _2721 = 0.0;
            _2723 = 0.0;
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
        }
        else
        {
            float _2722;
            float _2724;
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2887 = 0.0;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            uint _2893 = 0u;
            uint _2902;
            bool _2903;
            for (;;)
            {
                _2902 = texelFetch(g_lightClassification, int((((_2669 << 5u) + (_2655 << 9u)) + (_2893 << 2u)) >> 2u)).x;
                _2903 = _2902 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2903)
                {
                    frontier_phi_63_pred = _2889;
                    frontier_phi_63_pred_1 = _2892;
                    frontier_phi_63_pred_2 = _2891;
                    frontier_phi_63_pred_3 = _2890;
                    frontier_phi_63_pred_4 = _2888;
                    frontier_phi_63_pred_5 = _2887;
                }
                else
                {
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    uint _3109;
                    _3103 = _2887;
                    _3104 = _2888;
                    _3105 = _2889;
                    _3106 = _2890;
                    _3107 = _2891;
                    _3108 = _2892;
                    _3109 = _2902;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    float _3039;
                    float _3040;
                    for (;;)
                    {
                        uint _3113 = uint(findLSB(_3109)) + (_2893 << 5u);
                        uint _3110 = (_3109 + 4294967295u) & _3109;
                        uint _3115 = _3113 * 48u;
                        vec4 _3129 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 3u)).x));
                        uint _3135 = (_3113 * 48u) + 4u;
                        vec4 _3148 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3135)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3135 + 3u)).x));
                        float _3149 = _3148.x;
                        float _3150 = _3148.y;
                        float _3151 = _3148.z;
                        uint _3154 = (_3113 * 48u) + 8u;
                        vec3 _3165 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3154)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3154 + 2u)).x));
                        uint _3170 = (_3113 * 48u) + 12u;
                        vec2 _3178 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3170)).x, texelFetch(g_PointLightRenderingBuffer, int(_3170 + 1u)).x));
                        float _3184 = inversesqrt(dot(vec3(_1988, _1989, _1990), vec3(_1988, _1989, _1990)));
                        float _3185 = _3184 * _1988;
                        float _3186 = _3184 * _1989;
                        float _3187 = _3184 * _1990;
                        float _3188 = _3129.x - _1988;
                        float _3189 = _3129.y - _1989;
                        float _3190 = _3129.z - _1990;
                        float _3191 = dot(vec3(_3188, _3189, _3190), vec3(_3188, _3189, _3190));
                        float _3194 = inversesqrt(_3191);
                        float _3195 = _3194 * _3188;
                        float _3196 = _3194 * _3189;
                        float _3197 = _3194 * _3190;
                        float _3198 = dot(vec3(_837, _840, _843), vec3(_3195, _3196, _3197));
                        float _3203 = 1.0 - (_3191 * _3129.w);
                        float _4295 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3204 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _3205 = sqrt(_3191) * _3148.w;
                        float _3208 = 1.39999997615814208984375 / (_3205 + 1.39999997615814208984375);
                        float _3209 = _3208 * _3208;
                        float _3210 = 1.0 - _3209;
                        float _3212 = (_3210 * _3210) * _784;
                        float _3215 = ((_3210 * _3198) + _3209) + _3212;
                        float _3220 = _3205 * _3205;
                        float _3225 = ((isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0))) * _3204) / (((_3212 * 2.0) + 1.0) * ((_3220 * 0.699999988079071044921875) + 1.0));
                        float _3229 = dot(vec3(_3195, _3196, _3197), vec3(_3185, _3186, _3187));
                        float _4311 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0));
                        float _3236 = dot(vec3((-0.0) - _3185, (-0.0) - _3186, (-0.0) - _3187), vec3(_837, _840, _843)) + 1.0;
                        float _3238 = (isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0))) * 0.5;
                        float _3245 = ((_3238 * _3238) * _3178.x) * exp2((_3178.y * 32.0) * log2(isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0))));
                        float _3247 = _784 / (_784 + 1.0);
                        float _3263 = (-0.0) - _1988;
                        float _3264 = (-0.0) - _1989;
                        float _3265 = (-0.0) - _1990;
                        float _3269 = inversesqrt(dot(vec3(_3263, _3264, _3265), vec3(_3263, _3264, _3265)));
                        float _3270 = _3269 * _3263;
                        float _3271 = _3269 * _3264;
                        float _3272 = _3269 * _3265;
                        float _3279 = exp2(log2(1.0 / ((_3220 * 3.5) + 5.0)) * 0.25);
                        float _3280 = 1.0 - _900;
                        float _3287 = sqrt(1.0 - ((1.0 - (_3280 * _3280)) * (1.0 - (_3279 * _3279))));
                        float _3288 = _3287 * _3287;
                        float _3289 = _3288 * _3288;
                        float _3290 = _3270 + _3195;
                        float _3291 = _3271 + _3196;
                        float _3292 = _3272 + _3197;
                        float _3296 = inversesqrt(dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292)));
                        float _3300 = dot(vec3(_837, _840, _843), vec3(_3270, _3271, _3272));
                        float _4327 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                        float _3303 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
                        float _3304 = dot(vec3(_837, _840, _843), vec3(_3296 * _3290, _3296 * _3291, _3296 * _3292));
                        float _4338 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                        float _3307 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
                        float _3311 = ((_3307 * _3307) * (_3289 + (-1.0))) + 1.0;
                        float _3312 = _3208 * _3288;
                        float _3313 = _3312 * _3312;
                        float _3316 = ((1.0 - _3313) * _3198) + _3313;
                        float _4349 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3317 = isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0));
                        float _3318 = 1.0 - _3288;
                        float _3328 = (0.5 / (((_3317 * ((_3303 * _3318) + _3288)) + 9.9999999392252902907785028219223e-09) + (((_3317 * _3318) + _3288) * _3303))) * _3317;
                        float _4360 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3339 = (((_3289 * 3.1415927410125732421875) * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) / ((_3311 * _3311) * ((_3220 * 2.1991131305694580078125) + 3.141590118408203125))) * _3204;
                        _3038 = (((((_3149 * 0.3183098733425140380859375) * _3247) * _3245) + _3149) * _3225) + _3106;
                        _3039 = (((((_3150 * 0.3183098733425140380859375) * _3247) * _3245) + _3150) * _3225) + _3107;
                        _3040 = (((((_3151 * 0.3183098733425140380859375) * _3247) * _3245) + _3151) * _3225) + _3108;
                        _3035 = (_3339 * _3165.x) + _3103;
                        _3036 = (_3339 * _3165.y) + _3104;
                        _3037 = (_3339 * _3165.z) + _3105;
                        if (_3110 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3039;
                            _3108 = _3040;
                            _3109 = _3110;
                        }
                    }
                    frontier_phi_63_pred = _3037;
                    frontier_phi_63_pred_1 = _3040;
                    frontier_phi_63_pred_2 = _3039;
                    frontier_phi_63_pred_3 = _3038;
                    frontier_phi_63_pred_4 = _3036;
                    frontier_phi_63_pred_5 = _3035;
                }
                _2726 = frontier_phi_63_pred;
                _2732 = frontier_phi_63_pred_1;
                _2730 = frontier_phi_63_pred_2;
                _2728 = frontier_phi_63_pred_3;
                _2724 = frontier_phi_63_pred_4;
                _2722 = frontier_phi_63_pred_5;
                uint _2894 = _2893 + 1u;
                if (_2894 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2887 = _2722;
                    _2888 = _2724;
                    _2889 = _2726;
                    _2890 = _2728;
                    _2891 = _2730;
                    _2892 = _2732;
                    _2893 = _2894;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2721 = _2722;
            _2723 = _2724;
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
        }
        float _2736 = isnan(1.0) ? _879 : (isnan(_879) ? 1.0 : min(_879, 1.0));
        _2687 = (_2736 * _2727) + _2432;
        _2689 = (_2736 * _2729) + _2433;
        _2691 = (_2736 * _2731) + _2434;
        _2693 = ((_2721 * 0.039999999105930328369140625) * _2736) + _2598;
        _2695 = ((_2723 * 0.039999999105930328369140625) * _2736) + _2599;
        _2697 = ((_2725 * 0.039999999105930328369140625) * _2736) + _2600;
    }
    else
    {
        _2687 = _2432;
        _2689 = _2433;
        _2691 = _2434;
        _2693 = _2598;
        _2695 = _2599;
        _2697 = _2600;
    }
    float _2810;
    float _2811;
    float _2812;
    if (_784 > 0.0)
    {
        uint _2743 = _2214 + 4u;
        float _2749 = (-0.0) - _526;
        float _2750 = (-0.0) - _527;
        float _2751 = (-0.0) - _528;
        float _2752 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2749, _2750, _2751));
        float _4376 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2756 = _890 + 1.0;
        float _2758 = (isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))) * 0.5;
        float _2763 = _2758 * _2758;
        float _2764 = _2763 * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 32.0);
        float _2766 = _784 / (_784 + 1.0);
        float _2767 = isnan(_2223) ? 1.0 : (isnan(1.0) ? _2223 : min(1.0, _2223));
        uint _2780 = _2214 + 5u;
        float _2786 = dot(vec3(cbLight._m0[_2250].xyz), vec3(_2749, _2750, _2751));
        float _4397 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2793 = _2763 * exp2(log2(isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 32.0);
        float _2794 = isnan(_2224) ? 1.0 : (isnan(1.0) ? _2224 : min(1.0, _2224));
        _2810 = ((((_2793 * cbLight._m0[_2780].x) * _2766) * _2794) + ((((cbLight._m0[_2743].x * _2203) * _2764) * _2766) * _2767)) * 0.3183098733425140380859375;
        _2811 = ((((_2793 * cbLight._m0[_2780].y) * _2766) * _2794) + ((((cbLight._m0[_2743].y * _2205) * _2764) * _2766) * _2767)) * 0.3183098733425140380859375;
        _2812 = ((((_2793 * cbLight._m0[_2780].z) * _2766) * _2794) + ((((cbLight._m0[_2743].z * _2207) * _2764) * _2766) * _2767)) * 0.3183098733425140380859375;
    }
    else
    {
        _2810 = 0.0;
        _2811 = 0.0;
        _2812 = 0.0;
    }
    float _4413 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4424 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _4435 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _4446 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _2827 = (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0))) * ((_2687 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _879)) + _2810);
    float _2828 = (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * ((_2689 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _879)) + _2811);
    float _2829 = (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * ((_2691 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _879)) + _2812);
    float _2833 = 0.959999978542327880859375 - (exp2(log2(1.0 - _894) * 5.0) * 0.959999978542327880859375);
    float _2844 = (_2827 + ((_2693 + ((isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0))) * _1721)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _718.x) * _2833) - _2827) * _764);
    float _2846 = (_2828 + ((_2695 + ((isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) * _1721)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _718.y) * _2833) - _2828) * _764);
    float _2848 = (_2829 + ((_2697 + ((isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0))) * _1721)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _718.z) * _2833) - _2829) * _764);
    float _2853 = cbInstanceData._m0[_314 + 6u].w * (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0)));
    float _2858 = _818 / cbSceneParam._m0[86u].x;
    float _2859 = _819 / cbSceneParam._m0[86u].y;
    vec4 _2873 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2875 = _2873.x;
    float _2876 = _2873.y;
    float _2877 = _2873.z;
    float _2878 = _2873.w;
    float _2945;
    float _2947;
    float _2949;
    float _2951;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _2908 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _2909 = _2908 / _801;
        float _2920 = _2909 * _306;
        float _2921 = _307 * _2909;
        float _2922 = (-0.0) - _2921;
        float _2923 = _2909 * _308;
        float _2925 = (cbSceneParam._m0[77u].w * _2922) / _2908;
        float _2926 = _2925 + cbSceneParam._m0[79u].w;
        float _2927 = cbSceneParam._m0[79u].w - _2921;
        float _2933 = sqrt(((_2920 * _2920) + (_2921 * _2921)) + (_2923 * _2923));
        float _2936 = (1.0 - (cbSceneParam._m0[77u].w / _2908)) * _2933;
        float _2941 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2943 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3344;
        if (abs((_2922 - _2925) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3344 = ((((_2926 > 0.0) ? exp2(_2941 * _2926) : (2.0 - exp2(_2943 * _2926))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2936;
        }
        else
        {
            float _3060 = 1.0 / cbSceneParam._m0[80u].x;
            float _3061 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : max(_2926, _2927));
            float _3062 = isnan(_2927) ? _2926 : (isnan(_2926) ? _2927 : min(_2926, _2927));
            float _3071 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : min(_3061, 0.0));
            float _3072 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : min(_3062, 0.0));
            _3344 = ((abs(_2933 / _2922) * cbSceneParam._m0[80u].y) * ((((_3071 - _3072) * 2.0) - ((exp2(_2941 * (isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0)))) - exp2(_2941 * (isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))))) * _3060)) - ((exp2(_2943 * _3071) - exp2(_2943 * _3072)) * _3060))) + (_2936 * cbSceneParam._m0[80u].z);
        }
        vec4 _3346 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2858, _2859, 1.0), 0.0);
        float _3355 = exp2((_3344 * (-1.44269502162933349609375)) * (1.0 - _3346.w));
        float _3356 = log2(_3355);
        float _3372 = log2(_2878);
        _2945 = (exp2(_3372 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].x)) * _3346.x) / cbSceneParam._m0[78u].x)) + _2875;
        _2947 = (exp2(_3372 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].y)) * _3346.y) / cbSceneParam._m0[78u].y)) + _2876;
        _2949 = (exp2(_3372 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3356 * cbSceneParam._m0[78u].z)) * _3346.z) / cbSceneParam._m0[78u].z)) + _2877;
        _2951 = _3355 * _2878;
    }
    else
    {
        _2945 = _2875;
        _2947 = _2876;
        _2949 = _2877;
        _2951 = _2878;
    }
    bool _3382;
    float _3006;
    vec4 _3009;
    float _3011;
    vec4 _3013;
    float _3021;
    float _3022;
    float _3023;
    float _3024;
    bool _3034;
    for (;;)
    {
        bool _2963 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2964 = log2(_2951);
        float _2971 = exp2(_2964 * cbSceneParam._m0[78u].x) * _2844;
        float _2972 = exp2(_2964 * cbSceneParam._m0[78u].y) * _2846;
        float _2973 = exp2(_2964 * cbSceneParam._m0[78u].z) * _2848;
        vec4 _2981 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_818, _819));
        float _2983 = _2981.x;
        float _3004 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2983)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2983))) - _801) * cbMtdParam._m0[17u].y;
        float _4497 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
        _3006 = _2853 * (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0)));
        float _3007 = _808 + (-0.5);
        _3009 = cbMtdParam._m0[1u];
        _3011 = _3009.y * _3007;
        _3013 = cbMatDynParam._m0[0u];
        float _3020 = (roundEven(_3013.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3021 = _3020 * (_2963 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2945)));
        _3022 = _3020 * (_2963 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2947)));
        _3023 = _3020 * (_2963 ? _2973 : (_2973 + (cbSceneParam._m0[72u].w * _2949)));
        _3024 = _3007 * 0.999000012874603271484375;
        _3034 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3034)
        {
            if ((cbInstanceData._m0[_314 + 7u].x + _3024) < 0.5)
            {
                _3382 = true;
                break;
            }
        }
        uint _3095 = _856 + uint(_3013.w);
        if ((cbInstanceData._m0[_3095].w < 1.0) && ((cbInstanceData._m0[_3095].w + _3024) < 0.5))
        {
            _3382 = true;
            break;
        }
        if ((_3011 + _436) < _3009.x)
        {
            _3382 = true;
            break;
        }
        _3382 = false;
        break;
    }
    float _3387;
    if (_3382)
    {
        discard_state = true;
        _3387 = 0.0;
    }
    else
    {
        _3387 = _3006;
    }
    SV_Target.x = _3021;
    SV_Target.y = _3022;
    SV_Target.z = _3023;
    SV_Target.w = _3387;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _3006;
    discard_exit();
}


