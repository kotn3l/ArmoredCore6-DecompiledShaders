#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1092;
float _3033;
float _3034;
float _3035;
float _3036;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _205 = _204 * _196;
    float _206 = _204 * _197;
    float _207 = _204 * _198;
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = _211 * NORMAL.x;
    float _213 = _211 * NORMAL.y;
    float _214 = _211 * NORMAL.z;
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _219 = _218 * TANGENT.x;
    float _220 = _218 * TANGENT.y;
    float _221 = _218 * TANGENT.z;
    float _226;
    float _227;
    float _228;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _226 = (-0.0) - _212;
        _227 = (-0.0) - _213;
        _228 = (-0.0) - _214;
    }
    else
    {
        _226 = _212;
        _227 = _213;
        _228 = _214;
    }
    float _273 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _283 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _273);
    float _284 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _273);
    float _285 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _273);
    vec4 _299 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _308 = (_299.x * 2.0) + (-1.0);
    float _310 = (_299.y * 2.0) + (-1.0);
    float _311 = dot(vec2(_308, _310), vec2(_308, _310));
    float _3045 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _317 = sqrt(1.0 - (isnan(1.0) ? _3045 : (isnan(_3045) ? 1.0 : min(_3045, 1.0))));
    float _320 = fma(_317, _226, fma(_310, _219, _308 * _205));
    float _323 = fma(_317, _227, fma(_310, _220, _308 * _206));
    float _326 = fma(_317, _228, fma(_310, _221, _308 * _207));
    float _330 = inversesqrt(dot(vec3(_320, _323, _326), vec3(_320, _323, _326)));
    float _331 = _330 * _320;
    float _332 = _330 * _323;
    vec4 _344 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _349 = _344.w;
    float _361 = dot(vec3(_283, _284, _285), vec3(_205, _206, _207));
    float _364 = dot(vec3(_283, _284, _285), vec3(_219, _220, _221));
    float _367 = dot(vec3(_283, _284, _285), vec3(_226, _227, _228));
    float _373 = inversesqrt(dot(vec3(_361, _364, _367), vec3(_361, _364, _367)));
    float _395 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _415 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_361 * cbMtdParam._m0[14u].x) * _373) * _395) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_364 * cbMtdParam._m0[14u].x) * _373) * _395) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _439 = inversesqrt(dot(vec3(_283, _284, _285), vec3(_283, _284, _285)));
    float _440 = _439 * _283;
    float _441 = _439 * _284;
    float _442 = _439 * _285;
    float _443 = dot(vec4(_440, _441, _442, 0.0), vec4(_226, _227, _228, 0.0));
    float _446 = _443 - cbMtdParam._m0[15u].z;
    float _3056 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _453 = exp2(log2(1.0 - (isnan(1.0) ? _3056 : (isnan(_3056) ? 1.0 : min(_3056, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _468 = ((((_344.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _415.x) * cbMtdParam._m0[9u].x) * ((_453 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _473 = ((((_344.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _415.y) * cbMtdParam._m0[9u].y) * ((_453 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _478 = ((((_344.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _415.z) * cbMtdParam._m0[9u].z) * ((_453 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _487 = (cbMtdParam._m0[16u].y + _299.z) + cbMtdParam._m0[17u].z;
    vec4 _499 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _503 = cbMtdParam._m0[16u].w * _499.x;
    float _526 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (_331 * cbMtdParam._m0[18u].y));
    float _527 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (_332 * cbMtdParam._m0[18u].y));
    float _534 = isnan(cbInstanceData._m0[8u].x) ? _526 : (isnan(_526) ? cbInstanceData._m0[8u].x : max(_526, cbInstanceData._m0[8u].x));
    float _535 = isnan(cbInstanceData._m0[8u].y) ? _527 : (isnan(_527) ? cbInstanceData._m0[8u].y : max(_527, cbInstanceData._m0[8u].y));
    vec4 _539 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _534 : (isnan(_534) ? cbInstanceData._m0[8u].z : min(_534, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _535 : (isnan(_535) ? cbInstanceData._m0[8u].w : min(_535, cbInstanceData._m0[8u].w))));
    float _572 = _443 - cbMtdParam._m0[15u].x;
    float _3092 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _582 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3108 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _583 = isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0));
    float _585 = _330 * _326;
    float _3119 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _586 = isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0));
    float _3130 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _587 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
    float _588 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _3146 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _3157 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3168 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _607 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _612 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _614 = _612.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _771 = sqrt(((_283 * _283) + (_284 * _284)) + (_285 * _285));
        float _777 = (cbMatDynParam._m0[5u].x * _771) + cbMatDynParam._m0[5u].y;
        float _3179 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
        float _782 = (cbMatDynParam._m0[5u].z * _771) + cbMatDynParam._m0[5u].w;
        float _3190 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0))) - _778)) + _778) < ((_614 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _625 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _626 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _644 = fma(_585, cbSceneParam._m0[5u].z, fma(_332, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _331));
    float _647 = fma(_585, cbSceneParam._m0[6u].z, fma(_332, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _331));
    float _650 = fma(_585, cbSceneParam._m0[7u].z, fma(_332, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _331));
    uint _663 = uint(roundEven(NORMAL.w)) * 13u;
    uint _664 = _663 + 9u;
    uint _665 = _664 + uint(cbMatDynParam._m0[0u].w);
    float _671 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0)))) * cbInstanceData._m0[_665].x;
    float _672 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0)))) * cbInstanceData._m0[_665].y;
    float _673 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0)))) * cbInstanceData._m0[_665].z;
    float _3201 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _674 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    float _3212 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _675 = isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0));
    float _3223 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
    vec4 _684 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _625, cbSceneParam._m0[86u].y * _626));
    float _687 = _684.x * TEXCOORD_5.w;
    float _688 = dot(vec3(_331, _332, _585), vec3(_440, _441, _442));
    float _691 = _688 * 2.0;
    float _695 = (_691 * _331) - _440;
    float _696 = (_691 * _332) - _441;
    float _697 = (_691 * _585) - _442;
    float _698 = dot(vec3(_440, _441, _442), vec3(_331, _332, _585));
    float _701 = abs(_698);
    float _3234 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _702 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
    float _708 = sqrt(_587);
    float _720 = exp2((_708 * 5.0) * log2(1.0 - (_702 * 0.999000012874603271484375))) / (4.0 - (_708 * 3.0));
    float _752 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _816 = fma(_760, cbModelParam._m0[26u].z, fma(_756, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _752));
        float _820 = fma(_760, cbModelParam._m0[27u].z, fma(_756, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _752));
        float _824 = fma(_760, cbModelParam._m0[28u].z, fma(_756, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _752));
        float _849 = _752 + _331;
        float _850 = _756 + _332;
        float _851 = _760 + _585;
        float _861 = fma(_851, cbModelParam._m0[26u].z, fma(_850, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _849)) - _816;
        float _862 = fma(_851, cbModelParam._m0[27u].z, fma(_850, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _849)) - _820;
        float _863 = fma(_851, cbModelParam._m0[28u].z, fma(_850, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _849)) - _824;
        float _867 = inversesqrt(dot(vec3(_861, _862, _863), vec3(_861, _862, _863)));
        float _880 = ((_867 * _861) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_816 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _881 = ((_867 * _862) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_820 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _882 = ((_867 * _863) / cbModelParam._m0[34u].z) + ((((((_824 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_880, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(_331, _332, _585), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3260 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3271 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3282 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(_331, _332, _585), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3293 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3304 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3315 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(_331, _332, _585), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3326 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3337 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3348 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1135 = fma(_760, cbModelParam._m0[30u].z, fma(_756, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _752));
        float _1139 = fma(_760, cbModelParam._m0[31u].z, fma(_756, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _752));
        float _1143 = fma(_760, cbModelParam._m0[32u].z, fma(_756, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _752));
        float _1166 = _752 + _331;
        float _1167 = _756 + _332;
        float _1168 = _760 + _585;
        float _1178 = fma(_1168, cbModelParam._m0[30u].z, fma(_1167, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1166)) - _1135;
        float _1179 = fma(_1168, cbModelParam._m0[31u].z, fma(_1167, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1166)) - _1139;
        float _1180 = fma(_1168, cbModelParam._m0[32u].z, fma(_1167, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1166)) - _1143;
        float _1184 = inversesqrt(dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180)));
        float _1197 = ((_1184 * _1178) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1135 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1184 * _1179) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1139 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1199 = ((_1184 * _1180) / cbModelParam._m0[35u].z) + ((((((_1143 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1197, _1198, _1199), 0.0);
        float _1234 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1201.x + (-0.5));
        float _1236 = _1234 * (_1201.y + (-0.5));
        float _1237 = _1234 * (_1201.z + (-0.5));
        float _1244 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1208.x + (-0.5));
        float _1246 = _1244 * (_1208.y + (-0.5));
        float _1247 = _1244 * (_1208.z + (-0.5));
        float _1254 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1215.x + (-0.5));
        float _1256 = _1254 * (_1215.y + (-0.5));
        float _1257 = _1254 * (_1215.z + (-0.5));
        float _1264 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1222.x + (-0.5));
        float _1266 = _1264 * (_1222.y + (-0.5));
        float _1267 = _1264 * (_1222.z + (-0.5));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = _1235 * 0.5;
        float _1272 = _1245 * 0.5;
        float _1273 = _1255 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_331, _332, _585), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3411 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_1298 + 1.0))) + _1303) * _1268;
        float _1313 = _1236 * 0.5;
        float _1314 = _1246 * 0.5;
        float _1315 = _1256 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_331, _332, _585), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3444 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_1340 + 1.0))) + _1345) * _1269;
        float _1355 = _1237 * 0.5;
        float _1356 = _1247 * 0.5;
        float _1357 = _1257 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_331, _332, _585), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3477 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_1382 + 1.0))) + _1387) * _1270;
        _1404 = _1237;
        _1405 = _1236;
        _1406 = _1235;
        _1407 = _1247;
        _1408 = _1246;
        _1409 = _1245;
        _1410 = _1257;
        _1411 = _1256;
        _1412 = _1255;
        _1413 = _1270;
        _1414 = _1269;
        _1415 = _1268;
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
    }
    else
    {
        _1404 = _1092;
        _1405 = _1092;
        _1406 = _1092;
        _1407 = _1092;
        _1408 = _1092;
        _1409 = _1092;
        _1410 = _1092;
        _1411 = _1092;
        _1412 = _1092;
        _1413 = _1092;
        _1414 = _1092;
        _1415 = _1092;
        _1416 = 0.0;
        _1417 = 0.0;
        _1418 = 0.0;
    }
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1104)) + _1104;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1105)) + _1105;
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1451 = fma(_1430, cbSceneParam._m0[89u].z, fma(_1429, cbSceneParam._m0[89u].y, _1428 * cbSceneParam._m0[89u].x));
    float _1454 = fma(_1430, cbSceneParam._m0[90u].z, fma(_1429, cbSceneParam._m0[90u].y, _1428 * cbSceneParam._m0[90u].x));
    float _1457 = fma(_1430, cbSceneParam._m0[91u].z, fma(_1429, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1428));
    float _1472 = _695 * 0.5;
    float _1473 = _696 * 0.5;
    float _1474 = _697 * 0.5;
    float _1475 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1478 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1481 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1515;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1488 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1492 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1496 = dot(vec4(_1472, _1473, _1474, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1503 = dot(vec4(cbModelParam._m0[39u]), vec4(_1472, _1473, _1474, 1.0));
        _1515 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1503) ? 0.0 : (isnan(0.0) ? _1503 : max(0.0, _1503))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1515 = 1.0;
    }
    float _1526;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1517 = dot(vec4(cbModelParam._m0[40u]), vec4(_1472, _1473, _1474, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)), isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1517) ? 0.0 : (isnan(0.0) ? _1517 : max(0.0, _1517))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1530 = (_1526 * cbModelParam._m0[1u].x) + (_1515 * (1.0 - cbModelParam._m0[1u].x));
    float _1540 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _587);
    float _1541 = isnan(_1540) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1540 : min(cbModelParam._m0[25u].z, _1540));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_760, cbModelParam._m0[13u].z, fma(_756, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_760, cbModelParam._m0[14u].z, fma(_756, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_760, cbModelParam._m0[15u].z, fma(_756, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_697, cbModelParam._m0[13u].z, fma(_696, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695));
        float _1602 = fma(_697, cbModelParam._m0[14u].z, fma(_696, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695));
        float _1605 = fma(_697, cbModelParam._m0[15u].z, fma(_696, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1633 = frontier_phi_19_17_ladder;
        }
        float _1805;
        if (_1602 > 0.0)
        {
            _1805 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1805 = frontier_phi_28_24_ladder;
        }
        float _2040;
        if (_1605 > 0.0)
        {
            _2040 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2040 = frontier_phi_39_35_ladder;
        }
        float _2042 = isnan(_1805) ? _1633 : (isnan(_1633) ? _1805 : min(_1633, _1805));
        float _2043 = isnan(_2040) ? _2042 : (isnan(_2042) ? _2040 : min(_2042, _2040));
        float _2047 = (_2043 * _1599) + _1588;
        float _2048 = (_2043 * _1602) + _1592;
        float _2049 = (_2043 * _1605) + _1596;
        float _2050 = _2043 * 9.9999997473787516355514526367188e-05;
        float _2052 = (-1.0) - _2050;
        float _2054 = _2050 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2049 > _2054) || ((_2049 < _2052) || ((_2048 > _2054) || ((_2048 < _2052) || ((_2047 < _2052) || (_2047 > _2054))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2199 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2049, cbModelParam._m0[9u].z, fma(_2048, cbModelParam._m0[9u].y, _2047 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2049, cbModelParam._m0[10u].z, fma(_2048, cbModelParam._m0[10u].y, _2047 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2049, cbModelParam._m0[11u].z, fma(_2048, cbModelParam._m0[11u].y, _2047 * cbModelParam._m0[11u].x))), _1541);
            frontier_phi_18_39_ladder = _2199.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2199.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2199.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_18_39_ladder_2;
        _1623 = frontier_phi_18_39_ladder_1;
        _1625 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_695, _696, _697), _1541);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _587);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1722;
    float _1724;
    float _1726;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1686 = fma(_760, cbModelParam._m0[21u].z, fma(_756, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752)) + cbModelParam._m0[21u].w;
        float _1690 = fma(_760, cbModelParam._m0[22u].z, fma(_756, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752)) + cbModelParam._m0[22u].w;
        float _1694 = fma(_760, cbModelParam._m0[23u].z, fma(_756, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752)) + cbModelParam._m0[23u].w;
        float _1697 = fma(_697, cbModelParam._m0[21u].z, fma(_696, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695));
        float _1700 = fma(_697, cbModelParam._m0[22u].z, fma(_696, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695));
        float _1703 = fma(_697, cbModelParam._m0[23u].z, fma(_696, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695));
        float _1810;
        if (_1697 > 0.0)
        {
            _1810 = abs((1.0 - _1686) / _1697);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1686 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1810 = frontier_phi_30_26_ladder;
        }
        float _2067;
        if (_1700 > 0.0)
        {
            _2067 = abs((1.0 - _1690) / _1700);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1690 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2067 = frontier_phi_41_37_ladder;
        }
        float _2371;
        if (_1703 > 0.0)
        {
            _2371 = abs((1.0 - _1694) / _1703);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1694 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2371 = frontier_phi_52_47_ladder;
        }
        float _2373 = isnan(_2067) ? _1810 : (isnan(_1810) ? _2067 : min(_1810, _2067));
        float _2374 = isnan(_2371) ? _2373 : (isnan(_2373) ? _2371 : min(_2373, _2371));
        float _2378 = (_2374 * _1697) + _1686;
        float _2379 = (_2374 * _1700) + _1690;
        float _2380 = (_2374 * _1703) + _1694;
        float _2381 = _2374 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2381;
        float _2384 = _2381 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2380 > _2384) || ((_2380 < _2382) || ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 < _2382) || (_2378 > _2384))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2561 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2380, cbModelParam._m0[17u].z, fma(_2379, cbModelParam._m0[17u].y, _2378 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2380, cbModelParam._m0[18u].z, fma(_2379, cbModelParam._m0[18u].y, _2378 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2380, cbModelParam._m0[19u].z, fma(_2379, cbModelParam._m0[19u].y, _2378 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_27_52_ladder = _2561.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2561.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2561.y * cbModelParam._m0[1u].z;
        }
        _1722 = frontier_phi_27_52_ladder_1;
        _1724 = frontier_phi_27_52_ladder_2;
        _1726 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1706 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_695, _696, _697), _1630);
        _1722 = _1706.x * cbModelParam._m0[1u].z;
        _1724 = _1706.y * cbModelParam._m0[1u].z;
        _1726 = _1706.z * cbModelParam._m0[1u].z;
    }
    float _1738 = ((((1.0 - _720) * ((_708 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_720 * _708)) * _687;
    float _1739 = _1738 * ((cbModelParam._m0[1u].w * (_1722 - _1621)) + _1621);
    float _1740 = _1738 * ((cbModelParam._m0[1u].w * (_1724 - _1623)) + _1623);
    float _1741 = _1738 * ((cbModelParam._m0[1u].w * (_1726 - _1625)) + _1625);
    float _1744 = fma(_1741, cbSceneParam._m0[89u].z, fma(_1740, cbSceneParam._m0[89u].y, _1739 * cbSceneParam._m0[89u].x));
    float _1747 = fma(_1741, cbSceneParam._m0[90u].z, fma(_1740, cbSceneParam._m0[90u].y, _1739 * cbSceneParam._m0[90u].x));
    float _1750 = fma(_1741, cbSceneParam._m0[91u].z, fma(_1740, cbSceneParam._m0[91u].y, _1739 * cbSceneParam._m0[91u].x));
    uvec4 _1760 = floatBitsToUint(cbInstanceData._m0[_663 + 5u]);
    uint _1762 = _1760.x * 14u;
    uint _1763 = _1762 + 13u;
    float _1768 = _687 + (-1.0);
    float _1771 = (cbLight._m0[_1763].x * _1768) + 1.0;
    float _1772 = (cbLight._m0[_1763].y * _1768) + 1.0;
    uint _1774 = _1762 + 4u;
    float _1785 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_331, _332, _585));
    float _1788 = isnan(1.0) ? _1771 : (isnan(_1771) ? 1.0 : min(_1771, 1.0));
    uint _1789 = _1762 + 5u;
    uint _1795 = _1762 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_331, _332, _585));
    float _1804 = isnan(1.0) ? _1772 : (isnan(_1772) ? 1.0 : min(_1772, 1.0));
    float _1869;
    float _1870;
    float _1871;
    if (_588 == 0.0)
    {
        float _3613 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _3624 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1823 = (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * 0.3183098733425140380859375;
        float _1825 = (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0))) * 0.3183098733425140380859375;
        _1869 = ((cbLight._m0[_1789].x * _1804) * _1825) + ((cbLight._m0[_1774].x * _1788) * _1823);
        _1870 = ((_1804 * cbLight._m0[_1789].y) * _1825) + ((_1788 * cbLight._m0[_1774].y) * _1823);
        _1871 = ((_1804 * cbLight._m0[_1789].z) * _1825) + ((_1788 * cbLight._m0[_1774].z) * _1823);
    }
    else
    {
        float _1835 = _1785 + _588;
        float _1838 = (_588 * 2.0) + 1.0;
        float _1839 = (isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) / _1838;
        float _1846 = _1801 + _588;
        float _1848 = (isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0))) / _1838;
        _1869 = (((_1848 * cbLight._m0[_1789].x) * _1804) + ((_1839 * cbLight._m0[_1774].x) * _1788)) * 0.3183098733425140380859375;
        _1870 = (((_1848 * cbLight._m0[_1789].y) * _1804) + ((_1839 * cbLight._m0[_1774].y) * _1788)) * 0.3183098733425140380859375;
        _1871 = (((_1848 * cbLight._m0[_1789].z) * _1804) + ((_1839 * cbLight._m0[_1774].z) * _1788)) * 0.3183098733425140380859375;
    }
    uint _1875 = _1762 + 8u;
    float _1891 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1762].w)) * _587) * 0.949999988079071044921875);
    float _1892 = _1891 * _1891;
    float _1893 = cbLight._m0[_1762].x + _440;
    float _1894 = cbLight._m0[_1762].y + _441;
    float _1895 = cbLight._m0[_1762].z + _442;
    float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
    float _1900 = _1899 * _1893;
    float _1901 = _1899 * _1894;
    float _1902 = _1899 * _1895;
    float _1903 = dot(vec3(_331, _332, _585), vec3(cbLight._m0[_1762].xyz));
    float _3645 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
    float _1906 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
    float _1907 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _1908 = dot(vec3(_331, _332, _585), vec3(_1900, _1901, _1902));
    float _3667 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
    float _1911 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _1912 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_1900, _1901, _1902));
    float _3678 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1916 = _1892 * _1892;
    float _1920 = ((_1911 * _1911) * (_1916 + (-1.0))) + 1.0;
    float _1931 = (exp2(log2(1.0 - (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1932 = 1.0 - _1892;
    float _1943 = (0.5 / (((_1907 * ((_1906 * _1932) + _1892)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _1932) + _1892) * _1906))) * _1906;
    float _3689 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
    float _1945 = (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1916 / ((_1920 * _1920) * 3.141590118408203125));
    uint _1958 = _1762 + 9u;
    float _1972 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1795].w)) * _587) * 0.949999988079071044921875);
    float _1973 = _1972 * _1972;
    float _1974 = cbLight._m0[_1795].x + _440;
    float _1975 = cbLight._m0[_1795].y + _441;
    float _1976 = cbLight._m0[_1795].z + _442;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1981 = _1980 * _1974;
    float _1982 = _1980 * _1975;
    float _1983 = _1980 * _1976;
    float _1984 = dot(vec3(_331, _332, _585), vec3(cbLight._m0[_1795].xyz));
    float _3700 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _1988 = dot(vec3(_331, _332, _585), vec3(_1981, _1982, _1983));
    float _3711 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _1992 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_1981, _1982, _1983));
    float _3722 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1996 = _1973 * _1973;
    float _2000 = ((_1991 * _1991) * (_1996 + (-1.0))) + 1.0;
    float _2009 = (exp2(log2(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2010 = 1.0 - _1973;
    float _2020 = (0.5 / (((_1907 * ((_1987 * _2010) + _1973)) + 9.9999999392252902907785028219223e-09) + (((_1907 * _2010) + _1973) * _1987))) * _1987;
    float _3733 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2022 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1996 / ((_2000 * _2000) * 3.141590118408203125));
    float _2032 = (((_2009 * cbLight._m0[_1958].x) * _2022) * _1804) + (((_1931 * cbLight._m0[_1875].x) * _1945) * _1788);
    float _2033 = (((_2009 * cbLight._m0[_1958].y) * _2022) * _1804) + (((_1931 * cbLight._m0[_1875].y) * _1945) * _1788);
    float _2034 = (((_2009 * cbLight._m0[_1958].z) * _2022) * _1804) + (((_1931 * cbLight._m0[_1875].z) * _1945) * _1788);
    float _2170;
    float _2172;
    float _2174;
    float _2176;
    float _2178;
    float _2180;
    if (_1760.y == 0u)
    {
        float _2111 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2112 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2111;
        float _2113 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2111;
        float _2114 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2111;
        uvec4 _2126 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2127 = _2126.x;
        uint _2138 = uint((float(_2126.y) * floor(float(uint(cbSceneParam._m0[85u].y * _626) / _2127))) + floor(float(uint(cbSceneParam._m0[85u].x * _625) / _2127)));
        float _2148 = (log2(_2114 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2149 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        uint _2152 = uint(isnan(14.0) ? _2149 : (isnan(_2149) ? 14.0 : min(_2149, 14.0)));
        uint _2159 = _2126.z;
        float _2208;
        float _2210;
        float _2212;
        float _2214;
        float _2216;
        float _2218;
        if (((((1u << ((_2159 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2152 << 2u) + (_2138 << 6u)) >> 2u)).x) == 0u) || ((_2159 & 240u) == 0u))
        {
            _2208 = 0.0;
            _2210 = 0.0;
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
            _2218 = 0.0;
        }
        else
        {
            float _2209;
            float _2211;
            float _2213;
            float _2215;
            float _2217;
            float _2219;
            float _2397 = 0.0;
            float _2398 = 0.0;
            float _2399 = 0.0;
            float _2400 = 0.0;
            float _2401 = 0.0;
            float _2402 = 0.0;
            uint _2403 = 0u;
            uint _2412;
            bool _2413;
            for (;;)
            {
                _2412 = texelFetch(g_lightClassification, int((((_2152 << 5u) + (_2138 << 9u)) + (_2403 << 2u)) >> 2u)).x;
                _2413 = _2412 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2413)
                {
                    frontier_phi_58_pred = _2397;
                    frontier_phi_58_pred_1 = _2402;
                    frontier_phi_58_pred_2 = _2401;
                    frontier_phi_58_pred_3 = _2400;
                    frontier_phi_58_pred_4 = _2399;
                    frontier_phi_58_pred_5 = _2398;
                }
                else
                {
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    uint _2640;
                    _2634 = _2397;
                    _2635 = _2398;
                    _2636 = _2399;
                    _2637 = _2400;
                    _2638 = _2401;
                    _2639 = _2402;
                    _2640 = _2412;
                    float _2566;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    for (;;)
                    {
                        uint _2644 = uint(findLSB(_2640)) + (_2403 << 5u);
                        uint _2641 = (_2640 + 4294967295u) & _2640;
                        uint _2646 = _2644 * 48u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2646)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2646 + 3u)).x));
                        uint _2666 = (_2644 * 48u) + 4u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        float _2680 = _2679.x;
                        float _2681 = _2679.y;
                        float _2682 = _2679.z;
                        uint _2685 = (_2644 * 48u) + 8u;
                        vec3 _2696 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x));
                        uint _2701 = (_2644 * 48u) + 12u;
                        vec2 _2709 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2701)).x, texelFetch(g_PointLightRenderingBuffer, int(_2701 + 1u)).x));
                        float _2715 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
                        float _2716 = _2715 * _2112;
                        float _2717 = _2715 * _2113;
                        float _2718 = _2715 * _2114;
                        float _2719 = _2660.x - _2112;
                        float _2720 = _2660.y - _2113;
                        float _2721 = _2660.z - _2114;
                        float _2722 = dot(vec3(_2719, _2720, _2721), vec3(_2719, _2720, _2721));
                        float _2725 = inversesqrt(_2722);
                        float _2726 = _2725 * _2719;
                        float _2727 = _2725 * _2720;
                        float _2728 = _2725 * _2721;
                        float _2729 = dot(vec3(_644, _647, _650), vec3(_2726, _2727, _2728));
                        float _2734 = 1.0 - (_2722 * _2660.w);
                        float _3754 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2735 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
                        float _2736 = sqrt(_2722) * _2679.w;
                        float _2739 = 1.39999997615814208984375 / (_2736 + 1.39999997615814208984375);
                        float _2740 = _2739 * _2739;
                        float _2741 = 1.0 - _2740;
                        float _2743 = (_2741 * _2741) * _588;
                        float _2746 = ((_2741 * _2729) + _2740) + _2743;
                        float _2751 = _2736 * _2736;
                        float _2756 = ((isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0))) * _2735) / (((_2743 * 2.0) + 1.0) * ((_2751 * 0.699999988079071044921875) + 1.0));
                        float _2760 = dot(vec3(_2726, _2727, _2728), vec3(_2716, _2717, _2718));
                        float _3770 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
                        float _2767 = dot(vec3((-0.0) - _2716, (-0.0) - _2717, (-0.0) - _2718), vec3(_644, _647, _650)) + 1.0;
                        float _2769 = (isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0))) * 0.5;
                        float _2776 = ((_2769 * _2769) * _2709.x) * exp2((_2709.y * 32.0) * log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))));
                        float _2778 = _588 / (_588 + 1.0);
                        float _2794 = (-0.0) - _2112;
                        float _2795 = (-0.0) - _2113;
                        float _2796 = (-0.0) - _2114;
                        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
                        float _2801 = _2800 * _2794;
                        float _2802 = _2800 * _2795;
                        float _2803 = _2800 * _2796;
                        float _2811 = exp2(log2(1.0 / ((_2751 * 3.5) + 5.0)) * 0.25);
                        float _2812 = 1.0 - _708;
                        float _2819 = sqrt(1.0 - ((1.0 - (_2812 * _2812)) * (1.0 - (_2811 * _2811))));
                        float _2820 = _2819 * _2819;
                        float _2821 = _2820 * _2820;
                        float _2822 = _2801 + _2726;
                        float _2823 = _2802 + _2727;
                        float _2824 = _2803 + _2728;
                        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
                        float _2832 = dot(vec3(_644, _647, _650), vec3(_2801, _2802, _2803));
                        float _3786 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
                        float _2835 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
                        float _2836 = dot(vec3(_644, _647, _650), vec3(_2828 * _2822, _2828 * _2823, _2828 * _2824));
                        float _3797 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2839 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
                        float _2843 = ((_2839 * _2839) * (_2821 + (-1.0))) + 1.0;
                        float _2844 = _2739 * _2820;
                        float _2845 = _2844 * _2844;
                        float _2848 = ((1.0 - _2845) * _2729) + _2845;
                        float _3808 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2849 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
                        float _2850 = 1.0 - _2820;
                        float _2860 = (0.5 / (((_2849 * ((_2835 * _2850) + _2820)) + 9.9999999392252902907785028219223e-09) + (((_2849 * _2850) + _2820) * _2835))) * _2849;
                        float _3819 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2871 = (((_2821 * 3.1415927410125732421875) * (isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0)))) / ((_2843 * _2843) * ((_2751 * 2.1991131305694580078125) + 3.141590118408203125))) * _2735;
                        _2569 = (((((_2680 * 0.3183098733425140380859375) * _2778) * _2776) + _2680) * _2756) + _2637;
                        _2570 = (((((_2681 * 0.3183098733425140380859375) * _2778) * _2776) + _2681) * _2756) + _2638;
                        _2571 = (((((_2682 * 0.3183098733425140380859375) * _2778) * _2776) + _2682) * _2756) + _2639;
                        _2566 = (_2871 * _2696.x) + _2634;
                        _2567 = (_2871 * _2696.y) + _2635;
                        _2568 = (_2871 * _2696.z) + _2636;
                        if (_2641 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2634 = _2566;
                            _2635 = _2567;
                            _2636 = _2568;
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2641;
                        }
                    }
                    frontier_phi_58_pred = _2566;
                    frontier_phi_58_pred_1 = _2571;
                    frontier_phi_58_pred_2 = _2570;
                    frontier_phi_58_pred_3 = _2569;
                    frontier_phi_58_pred_4 = _2568;
                    frontier_phi_58_pred_5 = _2567;
                }
                _2209 = frontier_phi_58_pred;
                _2219 = frontier_phi_58_pred_1;
                _2217 = frontier_phi_58_pred_2;
                _2215 = frontier_phi_58_pred_3;
                _2213 = frontier_phi_58_pred_4;
                _2211 = frontier_phi_58_pred_5;
                uint _2404 = _2403 + 1u;
                if (_2404 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2397 = _2209;
                    _2398 = _2211;
                    _2399 = _2213;
                    _2400 = _2215;
                    _2401 = _2217;
                    _2402 = _2219;
                    _2403 = _2404;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2208 = _2209;
            _2210 = _2211;
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
            _2218 = _2219;
        }
        float _2223 = isnan(1.0) ? _687 : (isnan(_687) ? 1.0 : min(_687, 1.0));
        _2170 = (_2223 * _2214) + _1869;
        _2172 = (_2223 * _2216) + _1870;
        _2174 = (_2223 * _2218) + _1871;
        _2176 = ((_2208 * 0.039999999105930328369140625) * _2223) + _2032;
        _2178 = ((_2210 * 0.039999999105930328369140625) * _2223) + _2033;
        _2180 = ((_2212 * 0.039999999105930328369140625) * _2223) + _2034;
    }
    else
    {
        _2170 = _1869;
        _2172 = _1870;
        _2174 = _1871;
        _2176 = _2032;
        _2178 = _2033;
        _2180 = _2034;
    }
    float _2294;
    float _2295;
    float _2296;
    if (_588 > 0.0)
    {
        uint _2230 = _1762 + 4u;
        float _2236 = (-0.0) - _440;
        float _2237 = (-0.0) - _441;
        float _2238 = (-0.0) - _442;
        float _2239 = dot(vec3(cbLight._m0[_1762].xyz), vec3(_2236, _2237, _2238));
        float _3835 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _698 + 1.0;
        float _2245 = (isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0))) * 0.5;
        float _2250 = _2245 * _2245;
        float _2251 = _2250 * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 32.0);
        float _2253 = _588 / (_588 + 1.0);
        float _2254 = isnan(_1771) ? 1.0 : (isnan(1.0) ? _1771 : min(1.0, _1771));
        uint _2264 = _1762 + 5u;
        float _2270 = dot(vec3(cbLight._m0[_1795].xyz), vec3(_2236, _2237, _2238));
        float _3856 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2277 = _2250 * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * 32.0);
        float _2278 = isnan(_1772) ? 1.0 : (isnan(1.0) ? _1772 : min(1.0, _1772));
        _2294 = ((((_2277 * cbLight._m0[_2264].x) * _2253) * _2278) + (((_2251 * cbLight._m0[_2230].x) * _2253) * _2254)) * 0.3183098733425140380859375;
        _2295 = ((((_2277 * cbLight._m0[_2264].y) * _2253) * _2278) + (((_2251 * cbLight._m0[_2230].y) * _2253) * _2254)) * 0.3183098733425140380859375;
        _2296 = ((((_2277 * cbLight._m0[_2264].z) * _2253) * _2278) + (((_2251 * cbLight._m0[_2230].z) * _2253) * _2254)) * 0.3183098733425140380859375;
    }
    else
    {
        _2294 = 0.0;
        _2295 = 0.0;
        _2296 = 0.0;
    }
    float _3872 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3883 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3894 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3905 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _2311 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * ((_2170 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _687)) + _2294);
    float _2312 = (isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * ((_2172 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _687)) + _2295);
    float _2313 = (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * ((_2174 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _687)) + _2296);
    float _2317 = 0.959999978542327880859375 - (exp2(log2(1.0 - _702) * 5.0) * 0.959999978542327880859375);
    float _2328 = (_2311 + ((_2176 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _539.x) * _2317) - _2311) * _583);
    float _2330 = (_2312 + ((_2178 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _539.y) * _2317) - _2312) * _583);
    float _2332 = (_2313 + ((_2180 + ((isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))) * _1530)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _539.z) * _2317) - _2313) * _583);
    float _2337 = cbInstanceData._m0[_663 + 6u].w * (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0)));
    float _2342 = _625 / cbSceneParam._m0[86u].x;
    float _2343 = _626 / cbSceneParam._m0[86u].y;
    vec4 _2357 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2342, _2343, (log2((isnan(cbSceneParam._m0[77u].w) ? _607 : (isnan(_607) ? cbSceneParam._m0[77u].w : min(_607, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2359 = _2357.x;
    float _2360 = _2357.y;
    float _2361 = _2357.z;
    float _2362 = _2357.w;
    float _2455;
    float _2457;
    float _2459;
    float _2461;
    if (_607 > cbSceneParam._m0[78u].w)
    {
        float _2418 = isnan(_607) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _607 : min(cbSceneParam._m0[80u].w, _607));
        float _2419 = _2418 / _607;
        float _2430 = _2419 * _283;
        float _2431 = _284 * _2419;
        float _2432 = (-0.0) - _2431;
        float _2433 = _2419 * _285;
        float _2435 = (cbSceneParam._m0[77u].w * _2432) / _2418;
        float _2436 = _2435 + cbSceneParam._m0[79u].w;
        float _2437 = cbSceneParam._m0[79u].w - _2431;
        float _2443 = sqrt(((_2430 * _2430) + (_2431 * _2431)) + (_2433 * _2433));
        float _2446 = (1.0 - (cbSceneParam._m0[77u].w / _2418)) * _2443;
        float _2451 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2453 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2876;
        if (abs((_2432 - _2435) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2876 = ((((_2436 > 0.0) ? exp2(_2451 * _2436) : (2.0 - exp2(_2453 * _2436))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2446;
        }
        else
        {
            float _2591 = 1.0 / cbSceneParam._m0[80u].x;
            float _2592 = isnan(_2437) ? _2436 : (isnan(_2436) ? _2437 : max(_2436, _2437));
            float _2593 = isnan(_2437) ? _2436 : (isnan(_2436) ? _2437 : min(_2436, _2437));
            float _2602 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : min(_2592, 0.0));
            float _2603 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : min(_2593, 0.0));
            _2876 = ((abs(_2443 / _2432) * cbSceneParam._m0[80u].y) * ((((_2602 - _2603) * 2.0) - ((exp2(_2451 * (isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0)))) - exp2(_2451 * (isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0))))) * _2591)) - ((exp2(_2453 * _2602) - exp2(_2453 * _2603)) * _2591))) + (_2446 * cbSceneParam._m0[80u].z);
        }
        vec4 _2878 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2342, _2343, 1.0), 0.0);
        float _2887 = exp2((_2876 * (-1.44269502162933349609375)) * (1.0 - _2878.w));
        float _2888 = log2(_2887);
        float _2904 = log2(_2362);
        _2455 = (exp2(_2904 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].x)) * _2878.x) / cbSceneParam._m0[78u].x)) + _2359;
        _2457 = (exp2(_2904 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].y)) * _2878.y) / cbSceneParam._m0[78u].y)) + _2360;
        _2459 = (exp2(_2904 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2888 * cbSceneParam._m0[78u].z)) * _2878.z) / cbSceneParam._m0[78u].z)) + _2361;
        _2461 = _2887 * _2362;
    }
    else
    {
        _2455 = _2359;
        _2457 = _2360;
        _2459 = _2361;
        _2461 = _2362;
    }
    bool _2914;
    float _2516;
    vec4 _2519;
    float _2521;
    vec4 _2523;
    float _2531;
    float _2532;
    float _2533;
    float _2534;
    bool _2544;
    for (;;)
    {
        bool _2473 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2474 = log2(_2461);
        float _2481 = exp2(_2474 * cbSceneParam._m0[78u].x) * _2328;
        float _2482 = exp2(_2474 * cbSceneParam._m0[78u].y) * _2330;
        float _2483 = exp2(_2474 * cbSceneParam._m0[78u].z) * _2332;
        vec4 _2491 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_625, _626));
        float _2493 = _2491.x;
        float _2514 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2493)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2493))) - _607) * cbMtdParam._m0[17u].y;
        float _3956 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        _2516 = _2337 * (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0)));
        float _2517 = _614 + (-0.5);
        _2519 = cbMtdParam._m0[1u];
        _2521 = _2519.y * _2517;
        _2523 = cbMatDynParam._m0[0u];
        float _2530 = (roundEven(_2523.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2531 = _2530 * (_2473 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2455)));
        _2532 = _2530 * (_2473 ? _2482 : (_2482 + (cbSceneParam._m0[72u].w * _2457)));
        _2533 = _2530 * (_2473 ? _2483 : (_2483 + (cbSceneParam._m0[72u].w * _2459)));
        _2534 = _2517 * 0.999000012874603271484375;
        _2544 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2544)
        {
            if ((cbInstanceData._m0[_663 + 7u].x + _2534) < 0.5)
            {
                _2914 = true;
                break;
            }
        }
        uint _2626 = _664 + uint(_2523.w);
        if ((cbInstanceData._m0[_2626].w < 1.0) && ((cbInstanceData._m0[_2626].w + _2534) < 0.5))
        {
            _2914 = true;
            break;
        }
        if ((_2521 + _349) < _2519.x)
        {
            _2914 = true;
            break;
        }
        _2914 = false;
        break;
    }
    float _2919;
    if (_2914)
    {
        discard_state = true;
        _2919 = 0.0;
    }
    else
    {
        _2919 = _2516;
    }
    SV_Target.x = _2531;
    SV_Target.y = _2532;
    SV_Target.z = _2533;
    SV_Target.w = _2919;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2516;
    discard_exit();
}


