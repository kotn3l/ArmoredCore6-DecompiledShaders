#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1094;
float _3062;
float _3063;
float _3064;
float _3065;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _207 = _206 * _198;
    float _208 = _206 * _199;
    float _209 = _206 * _200;
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = _213 * NORMAL.x;
    float _215 = _213 * NORMAL.y;
    float _216 = _213 * NORMAL.z;
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _221 = _220 * TANGENT.x;
    float _222 = _220 * TANGENT.y;
    float _223 = _220 * TANGENT.z;
    float _228;
    float _229;
    float _230;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _228 = (-0.0) - _214;
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
    }
    else
    {
        _228 = _214;
        _229 = _215;
        _230 = _216;
    }
    float _275 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _285 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _275);
    float _286 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _275);
    float _287 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _275);
    vec4 _301 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _310 = (_301.x * 2.0) + (-1.0);
    float _312 = (_301.y * 2.0) + (-1.0);
    float _313 = dot(vec2(_310, _312), vec2(_310, _312));
    float _3074 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _319 = sqrt(1.0 - (isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0))));
    float _322 = fma(_319, _228, fma(_312, _221, _310 * _207));
    float _325 = fma(_319, _229, fma(_312, _222, _310 * _208));
    float _328 = fma(_319, _230, fma(_312, _223, _310 * _209));
    float _332 = inversesqrt(dot(vec3(_322, _325, _328), vec3(_322, _325, _328)));
    float _333 = _332 * _322;
    float _334 = _332 * _325;
    vec4 _346 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _351 = _346.w;
    float _363 = dot(vec3(_285, _286, _287), vec3(_207, _208, _209));
    float _366 = dot(vec3(_285, _286, _287), vec3(_221, _222, _223));
    float _369 = dot(vec3(_285, _286, _287), vec3(_228, _229, _230));
    float _375 = inversesqrt(dot(vec3(_363, _366, _369), vec3(_363, _366, _369)));
    float _397 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _417 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_363 * cbMtdParam._m0[14u].x) * _375) * _397) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_366 * cbMtdParam._m0[14u].x) * _375) * _397) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _441 = inversesqrt(dot(vec3(_285, _286, _287), vec3(_285, _286, _287)));
    float _442 = _441 * _285;
    float _443 = _441 * _286;
    float _444 = _441 * _287;
    float _445 = dot(vec4(_442, _443, _444, 0.0), vec4(_228, _229, _230, 0.0));
    float _448 = _445 - cbMtdParam._m0[15u].z;
    float _3085 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _455 = exp2(log2(1.0 - (isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _470 = ((((_346.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _417.x) * cbMtdParam._m0[9u].x) * ((_455 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _475 = ((((_346.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _417.y) * cbMtdParam._m0[9u].y) * ((_455 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _480 = ((((_346.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _417.z) * cbMtdParam._m0[9u].z) * ((_455 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _489 = (cbMtdParam._m0[16u].y + _301.z) + cbMtdParam._m0[17u].z;
    vec4 _501 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _505 = cbMtdParam._m0[16u].w * _501.x;
    float _528 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + (_333 * cbMtdParam._m0[18u].y));
    float _529 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + (_334 * cbMtdParam._m0[18u].y));
    float _536 = isnan(cbInstanceData._m0[8u].x) ? _528 : (isnan(_528) ? cbInstanceData._m0[8u].x : max(_528, cbInstanceData._m0[8u].x));
    float _537 = isnan(cbInstanceData._m0[8u].y) ? _529 : (isnan(_529) ? cbInstanceData._m0[8u].y : max(_529, cbInstanceData._m0[8u].y));
    vec4 _541 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _536 : (isnan(_536) ? cbInstanceData._m0[8u].z : min(_536, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _537 : (isnan(_537) ? cbInstanceData._m0[8u].w : min(_537, cbInstanceData._m0[8u].w))));
    float _574 = _445 - cbMtdParam._m0[15u].x;
    float _3121 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _584 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3137 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _585 = isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0));
    float _587 = _332 * _328;
    float _3148 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _588 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
    float _3159 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _589 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
    float _590 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _3175 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _3186 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _3197 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _609 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _614 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _616 = _614.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _773 = sqrt(((_285 * _285) + (_286 * _286)) + (_287 * _287));
        float _779 = (cbMatDynParam._m0[5u].x * _773) + cbMatDynParam._m0[5u].y;
        float _3208 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _784 = (cbMatDynParam._m0[5u].z * _773) + cbMatDynParam._m0[5u].w;
        float _3219 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0))) - _780)) + _780) < ((_616 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _627 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _628 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _646 = fma(_587, cbSceneParam._m0[5u].z, fma(_334, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _333));
    float _649 = fma(_587, cbSceneParam._m0[6u].z, fma(_334, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _333));
    float _652 = fma(_587, cbSceneParam._m0[7u].z, fma(_334, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _333));
    uint _665 = uint(roundEven(NORMAL.w)) * 13u;
    uint _666 = _665 + 9u;
    uint _667 = _666 + uint(cbMatDynParam._m0[0u].w);
    float _673 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0)))) * cbInstanceData._m0[_667].x;
    float _674 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0)))) * cbInstanceData._m0[_667].y;
    float _675 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0)))) * cbInstanceData._m0[_667].z;
    float _3230 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _676 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _677 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    float _3252 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _678 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    vec4 _686 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _627, cbSceneParam._m0[86u].y * _628));
    float _689 = _686.x * TEXCOORD_5.w;
    float _690 = dot(vec3(_333, _334, _587), vec3(_442, _443, _444));
    float _693 = _690 * 2.0;
    float _697 = (_693 * _333) - _442;
    float _698 = (_693 * _334) - _443;
    float _699 = (_693 * _587) - _444;
    float _700 = dot(vec3(_442, _443, _444), vec3(_333, _334, _587));
    float _703 = abs(_700);
    float _3263 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _704 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _710 = sqrt(_589);
    float _722 = exp2((_710 * 5.0) * log2(1.0 - (_704 * 0.999000012874603271484375))) / (4.0 - (_710 * 3.0));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _818 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _822 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _826 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _851 = _754 + _333;
        float _852 = _758 + _334;
        float _853 = _762 + _587;
        float _863 = fma(_853, cbModelParam._m0[26u].z, fma(_852, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _851)) - _818;
        float _864 = fma(_853, cbModelParam._m0[27u].z, fma(_852, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _851)) - _822;
        float _865 = fma(_853, cbModelParam._m0[28u].z, fma(_852, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _851)) - _826;
        float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
        float _882 = ((_869 * _863) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_818 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _883 = ((_869 * _864) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_822 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_869 * _865) / cbModelParam._m0[34u].z) + ((((((_826 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_882, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(_333, _334, _587), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3289 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3300 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3311 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(_333, _334, _587), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3322 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3333 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3344 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(_333, _334, _587), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3355 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3366 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3377 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1137 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1141 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1145 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1168 = _754 + _333;
        float _1169 = _758 + _334;
        float _1170 = _762 + _587;
        float _1180 = fma(_1170, cbModelParam._m0[30u].z, fma(_1169, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1168)) - _1137;
        float _1181 = fma(_1170, cbModelParam._m0[31u].z, fma(_1169, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1168)) - _1141;
        float _1182 = fma(_1170, cbModelParam._m0[32u].z, fma(_1169, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1168)) - _1145;
        float _1186 = inversesqrt(dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182)));
        float _1199 = ((_1186 * _1180) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1137 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1200 = ((_1186 * _1181) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1141 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1186 * _1182) / cbModelParam._m0[35u].z) + ((((((_1145 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1203 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1210 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1199, _1200, _1201), 0.0);
        float _1236 = exp2((_1203.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1203.x + (-0.5));
        float _1238 = _1236 * (_1203.y + (-0.5));
        float _1239 = _1236 * (_1203.z + (-0.5));
        float _1246 = exp2((_1210.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1210.x + (-0.5));
        float _1248 = _1246 * (_1210.y + (-0.5));
        float _1249 = _1246 * (_1210.z + (-0.5));
        float _1256 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1217.x + (-0.5));
        float _1258 = _1256 * (_1217.y + (-0.5));
        float _1259 = _1256 * (_1217.z + (-0.5));
        float _1266 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1224.x + (-0.5));
        float _1268 = _1266 * (_1224.y + (-0.5));
        float _1269 = _1266 * (_1224.z + (-0.5));
        float _1270 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = _1237 * 0.5;
        float _1274 = _1247 * 0.5;
        float _1275 = _1257 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_333, _334, _587), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1270 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3440 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1300 + 1.0))) + _1305) * _1270;
        float _1315 = _1238 * 0.5;
        float _1316 = _1248 * 0.5;
        float _1317 = _1258 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_333, _334, _587), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3473 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_1342 + 1.0))) + _1347) * _1271;
        float _1357 = _1239 * 0.5;
        float _1358 = _1249 * 0.5;
        float _1359 = _1259 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_333, _334, _587), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3506 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_1384 + 1.0))) + _1389) * _1272;
        _1406 = _1239;
        _1407 = _1238;
        _1408 = _1237;
        _1409 = _1249;
        _1410 = _1248;
        _1411 = _1247;
        _1412 = _1259;
        _1413 = _1258;
        _1414 = _1257;
        _1415 = _1272;
        _1416 = _1271;
        _1417 = _1270;
        _1418 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
    }
    else
    {
        _1406 = _1094;
        _1407 = _1094;
        _1408 = _1094;
        _1409 = _1094;
        _1410 = _1094;
        _1411 = _1094;
        _1412 = _1094;
        _1413 = _1094;
        _1414 = _1094;
        _1415 = _1094;
        _1416 = _1094;
        _1417 = _1094;
        _1418 = 0.0;
        _1419 = 0.0;
        _1420 = 0.0;
    }
    float _1430 = (cbModelParam._m0[1u].x * (_1418 - _1106)) + _1106;
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1107)) + _1107;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1108)) + _1108;
    float _1453 = fma(_1432, cbSceneParam._m0[89u].z, fma(_1431, cbSceneParam._m0[89u].y, _1430 * cbSceneParam._m0[89u].x));
    float _1456 = fma(_1432, cbSceneParam._m0[90u].z, fma(_1431, cbSceneParam._m0[90u].y, _1430 * cbSceneParam._m0[90u].x));
    float _1459 = fma(_1432, cbSceneParam._m0[91u].z, fma(_1431, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1430));
    float _1474 = _697 * 0.5;
    float _1475 = _698 * 0.5;
    float _1476 = _699 * 0.5;
    float _1477 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1480 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1483 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1406, _1409, _1412, _1415));
    float _1517;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1490 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1494 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1498 = dot(vec4(_1474, _1475, _1476, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1505 = dot(vec4(cbModelParam._m0[39u]), vec4(_1474, _1475, _1476, 1.0));
        _1517 = dot(vec3(isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1505) ? 0.0 : (isnan(0.0) ? _1505 : max(0.0, _1505))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1517 = 1.0;
    }
    float _1528;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1519 = dot(vec4(cbModelParam._m0[40u]), vec4(_1474, _1475, _1476, 1.0));
        _1528 = dot(vec3(isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)), isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1528 = 1.0;
    }
    float _1532 = (_1528 * cbModelParam._m0[1u].x) + (_1517 * (1.0 - cbModelParam._m0[1u].x));
    float _1542 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _589);
    float _1543 = isnan(_1542) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1542 : min(cbModelParam._m0[25u].z, _1542));
    float _1623;
    float _1625;
    float _1627;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1590 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1594 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1598 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1601 = fma(_699, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697));
        float _1604 = fma(_699, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697));
        float _1607 = fma(_699, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697));
        float _1635;
        if (_1601 > 0.0)
        {
            _1635 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1635 = frontier_phi_19_17_ladder;
        }
        float _1828;
        if (_1604 > 0.0)
        {
            _1828 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1828 = frontier_phi_28_24_ladder;
        }
        float _2066;
        if (_1607 > 0.0)
        {
            _2066 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2066 = frontier_phi_39_35_ladder;
        }
        float _2068 = isnan(_1828) ? _1635 : (isnan(_1635) ? _1828 : min(_1635, _1828));
        float _2069 = isnan(_2066) ? _2068 : (isnan(_2068) ? _2066 : min(_2068, _2066));
        float _2073 = (_2069 * _1601) + _1590;
        float _2074 = (_2069 * _1604) + _1594;
        float _2075 = (_2069 * _1607) + _1598;
        float _2076 = _2069 * 9.9999997473787516355514526367188e-05;
        float _2078 = (-1.0) - _2076;
        float _2080 = _2076 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2075 > _2080) || ((_2075 < _2078) || ((_2074 > _2080) || ((_2074 < _2078) || ((_2073 < _2078) || (_2073 > _2080))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2225 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2075, cbModelParam._m0[9u].z, fma(_2074, cbModelParam._m0[9u].y, _2073 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2075, cbModelParam._m0[10u].z, fma(_2074, cbModelParam._m0[10u].y, _2073 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2075, cbModelParam._m0[11u].z, fma(_2074, cbModelParam._m0[11u].y, _2073 * cbModelParam._m0[11u].x))), _1543);
            frontier_phi_18_39_ladder = _2225.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2225.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2225.x * cbModelParam._m0[1u].y;
        }
        _1623 = frontier_phi_18_39_ladder_2;
        _1625 = frontier_phi_18_39_ladder_1;
        _1627 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1611 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_697, _698, _699), _1543);
        _1623 = _1611.x * cbModelParam._m0[1u].y;
        _1625 = _1611.y * cbModelParam._m0[1u].y;
        _1627 = _1611.z * cbModelParam._m0[1u].y;
    }
    float _1631 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _589);
    float _1632 = isnan(_1631) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1631 : min(cbModelParam._m0[25u].w, _1631));
    float _1724;
    float _1726;
    float _1728;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1688 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1692 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1696 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1699 = fma(_699, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697));
        float _1702 = fma(_699, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697));
        float _1705 = fma(_699, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697));
        float _1833;
        if (_1699 > 0.0)
        {
            _1833 = abs((1.0 - _1688) / _1699);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1688 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1833 = frontier_phi_30_26_ladder;
        }
        float _2093;
        if (_1702 > 0.0)
        {
            _2093 = abs((1.0 - _1692) / _1702);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1702 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1692 + 1.0) / _1702);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2093 = frontier_phi_41_37_ladder;
        }
        float _2400;
        if (_1705 > 0.0)
        {
            _2400 = abs((1.0 - _1696) / _1705);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1705 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1696 + 1.0) / _1705);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2400 = frontier_phi_52_47_ladder;
        }
        float _2402 = isnan(_2093) ? _1833 : (isnan(_1833) ? _2093 : min(_1833, _2093));
        float _2403 = isnan(_2400) ? _2402 : (isnan(_2402) ? _2400 : min(_2402, _2400));
        float _2407 = (_2403 * _1699) + _1688;
        float _2408 = (_2403 * _1702) + _1692;
        float _2409 = (_2403 * _1705) + _1696;
        float _2410 = _2403 * 9.9999997473787516355514526367188e-05;
        float _2411 = (-1.0) - _2410;
        float _2413 = _2410 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2409 > _2413) || ((_2409 < _2411) || ((_2408 > _2413) || ((_2408 < _2411) || ((_2407 < _2411) || (_2407 > _2413))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2409, cbModelParam._m0[17u].z, fma(_2408, cbModelParam._m0[17u].y, _2407 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2409, cbModelParam._m0[18u].z, fma(_2408, cbModelParam._m0[18u].y, _2407 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2409, cbModelParam._m0[19u].z, fma(_2408, cbModelParam._m0[19u].y, _2407 * cbModelParam._m0[19u].x))), _1632);
            frontier_phi_27_52_ladder = _2590.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2590.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2590.y * cbModelParam._m0[1u].z;
        }
        _1724 = frontier_phi_27_52_ladder_1;
        _1726 = frontier_phi_27_52_ladder_2;
        _1728 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1708 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_697, _698, _699), _1632);
        _1724 = _1708.x * cbModelParam._m0[1u].z;
        _1726 = _1708.y * cbModelParam._m0[1u].z;
        _1728 = _1708.z * cbModelParam._m0[1u].z;
    }
    float _1740 = ((((1.0 - _722) * ((_710 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_722 * _710)) * _689;
    float _1741 = _1740 * ((cbModelParam._m0[1u].w * (_1724 - _1623)) + _1623);
    float _1742 = _1740 * ((cbModelParam._m0[1u].w * (_1726 - _1625)) + _1625);
    float _1743 = _1740 * ((cbModelParam._m0[1u].w * (_1728 - _1627)) + _1627);
    float _1746 = fma(_1743, cbSceneParam._m0[89u].z, fma(_1742, cbSceneParam._m0[89u].y, _1741 * cbSceneParam._m0[89u].x));
    float _1749 = fma(_1743, cbSceneParam._m0[90u].z, fma(_1742, cbSceneParam._m0[90u].y, _1741 * cbSceneParam._m0[90u].x));
    float _1752 = fma(_1743, cbSceneParam._m0[91u].z, fma(_1742, cbSceneParam._m0[91u].y, _1741 * cbSceneParam._m0[91u].x));
    vec4 _1760 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_627, _628));
    float _1762 = _1760.w;
    float _1774 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1762);
    float _1775 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1762);
    float _1776 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1762);
    uvec4 _1780 = floatBitsToUint(cbInstanceData._m0[_665 + 5u]);
    uint _1782 = _1780.x * 14u;
    uint _1783 = _1782 + 13u;
    float _1788 = _689 + (-1.0);
    float _1791 = (cbLight._m0[_1783].x * _1788) + 1.0;
    float _1792 = (cbLight._m0[_1783].y * _1788) + 1.0;
    uint _1794 = _1782 + 4u;
    float _1805 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_333, _334, _587));
    float _1808 = isnan(1.0) ? _1791 : (isnan(_1791) ? 1.0 : min(_1791, 1.0));
    float _1809 = cbLight._m0[_1794].x * _1774;
    float _1810 = cbLight._m0[_1794].y * _1775;
    float _1811 = cbLight._m0[_1794].z * _1776;
    uint _1812 = _1782 + 5u;
    uint _1818 = _1782 | 1u;
    float _1824 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_333, _334, _587));
    float _1827 = isnan(1.0) ? _1792 : (isnan(_1792) ? 1.0 : min(_1792, 1.0));
    float _1892;
    float _1893;
    float _1894;
    if (_590 == 0.0)
    {
        float _3642 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _3653 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1846 = (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.3183098733425140380859375;
        float _1848 = (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.3183098733425140380859375;
        _1892 = ((cbLight._m0[_1812].x * _1827) * _1848) + ((_1809 * _1808) * _1846);
        _1893 = ((_1827 * cbLight._m0[_1812].y) * _1848) + ((_1810 * _1808) * _1846);
        _1894 = ((_1827 * cbLight._m0[_1812].z) * _1848) + ((_1811 * _1808) * _1846);
    }
    else
    {
        float _1858 = _1805 + _590;
        float _1861 = (_590 * 2.0) + 1.0;
        float _1862 = (isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))) / _1861;
        float _1869 = _1824 + _590;
        float _1871 = (isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) / _1861;
        _1892 = (((_1871 * cbLight._m0[_1812].x) * _1827) + ((_1809 * _1862) * _1808)) * 0.3183098733425140380859375;
        _1893 = (((_1871 * cbLight._m0[_1812].y) * _1827) + ((_1810 * _1862) * _1808)) * 0.3183098733425140380859375;
        _1894 = (((_1871 * cbLight._m0[_1812].z) * _1827) + ((_1811 * _1862) * _1808)) * 0.3183098733425140380859375;
    }
    uint _1898 = _1782 + 8u;
    float _1914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1782].w)) * _589) * 0.949999988079071044921875);
    float _1915 = _1914 * _1914;
    float _1916 = cbLight._m0[_1782].x + _442;
    float _1917 = cbLight._m0[_1782].y + _443;
    float _1918 = cbLight._m0[_1782].z + _444;
    float _1922 = inversesqrt(dot(vec3(_1916, _1917, _1918), vec3(_1916, _1917, _1918)));
    float _1923 = _1922 * _1916;
    float _1924 = _1922 * _1917;
    float _1925 = _1922 * _1918;
    float _1926 = dot(vec3(_333, _334, _587), vec3(cbLight._m0[_1782].xyz));
    float _3674 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
    float _1929 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
    float _1930 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _1931 = dot(vec3(_333, _334, _587), vec3(_1923, _1924, _1925));
    float _3696 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _1935 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_1923, _1924, _1925));
    float _3707 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1939 = _1915 * _1915;
    float _1943 = ((_1934 * _1934) * (_1939 + (-1.0))) + 1.0;
    float _1954 = (exp2(log2(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1955 = 1.0 - _1915;
    float _1966 = (0.5 / (((_1930 * ((_1929 * _1955) + _1915)) + 9.9999999392252902907785028219223e-09) + (((_1930 * _1955) + _1915) * _1929))) * _1929;
    float _3718 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1968 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1939 / ((_1943 * _1943) * 3.141590118408203125));
    uint _1984 = _1782 + 9u;
    float _1998 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1818].w)) * _589) * 0.949999988079071044921875);
    float _1999 = _1998 * _1998;
    float _2000 = cbLight._m0[_1818].x + _442;
    float _2001 = cbLight._m0[_1818].y + _443;
    float _2002 = cbLight._m0[_1818].z + _444;
    float _2006 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
    float _2007 = _2006 * _2000;
    float _2008 = _2006 * _2001;
    float _2009 = _2006 * _2002;
    float _2010 = dot(vec3(_333, _334, _587), vec3(cbLight._m0[_1818].xyz));
    float _3729 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
    float _2013 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _2014 = dot(vec3(_333, _334, _587), vec3(_2007, _2008, _2009));
    float _3740 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_2007, _2008, _2009));
    float _3751 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1999 * _1999;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2035 = (exp2(log2(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2036 = 1.0 - _1999;
    float _2046 = (0.5 / (((_1930 * ((_2013 * _2036) + _1999)) + 9.9999999392252902907785028219223e-09) + (((_1930 * _2036) + _1999) * _2013))) * _2013;
    float _3762 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2048 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    float _2058 = (((_2035 * cbLight._m0[_1984].x) * _2048) * _1827) + ((((cbLight._m0[_1898].x * _1774) * _1954) * _1968) * _1808);
    float _2059 = (((_2035 * cbLight._m0[_1984].y) * _2048) * _1827) + ((((cbLight._m0[_1898].y * _1775) * _1954) * _1968) * _1808);
    float _2060 = (((_2035 * cbLight._m0[_1984].z) * _2048) * _1827) + ((((cbLight._m0[_1898].z * _1776) * _1954) * _1968) * _1808);
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    float _2204;
    float _2206;
    if (_1780.y == 0u)
    {
        float _2137 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2138 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2137;
        float _2139 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2137;
        float _2140 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2137;
        uvec4 _2152 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2153 = _2152.x;
        uint _2164 = uint((float(_2152.y) * floor(float(uint(cbSceneParam._m0[85u].y * _628) / _2153))) + floor(float(uint(cbSceneParam._m0[85u].x * _627) / _2153)));
        float _2174 = (log2(_2140 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2175 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        uint _2178 = uint(isnan(14.0) ? _2175 : (isnan(_2175) ? 14.0 : min(_2175, 14.0)));
        uint _2185 = _2152.z;
        float _2234;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        if (((((1u << ((_2185 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2178 << 2u) + (_2164 << 6u)) >> 2u)).x) == 0u) || ((_2185 & 240u) == 0u))
        {
            _2234 = 0.0;
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
            _2244 = 0.0;
        }
        else
        {
            float _2235;
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2245;
            float _2426 = 0.0;
            float _2427 = 0.0;
            float _2428 = 0.0;
            float _2429 = 0.0;
            float _2430 = 0.0;
            float _2431 = 0.0;
            uint _2432 = 0u;
            uint _2441;
            bool _2442;
            for (;;)
            {
                _2441 = texelFetch(g_lightClassification, int((((_2178 << 5u) + (_2164 << 9u)) + (_2432 << 2u)) >> 2u)).x;
                _2442 = _2441 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2442)
                {
                    frontier_phi_58_pred = _2426;
                    frontier_phi_58_pred_1 = _2431;
                    frontier_phi_58_pred_2 = _2430;
                    frontier_phi_58_pred_3 = _2429;
                    frontier_phi_58_pred_4 = _2428;
                    frontier_phi_58_pred_5 = _2427;
                }
                else
                {
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    float _2667;
                    float _2668;
                    uint _2669;
                    _2663 = _2426;
                    _2664 = _2427;
                    _2665 = _2428;
                    _2666 = _2429;
                    _2667 = _2430;
                    _2668 = _2431;
                    _2669 = _2441;
                    float _2595;
                    float _2596;
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    for (;;)
                    {
                        uint _2673 = uint(findLSB(_2669)) + (_2432 << 5u);
                        uint _2670 = (_2669 + 4294967295u) & _2669;
                        uint _2675 = _2673 * 48u;
                        vec4 _2689 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2675)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2675 + 3u)).x));
                        uint _2695 = (_2673 * 48u) + 4u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2695)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2695 + 3u)).x));
                        float _2709 = _2708.x;
                        float _2710 = _2708.y;
                        float _2711 = _2708.z;
                        uint _2714 = (_2673 * 48u) + 8u;
                        vec3 _2725 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x));
                        uint _2730 = (_2673 * 48u) + 12u;
                        vec2 _2738 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x));
                        float _2744 = inversesqrt(dot(vec3(_2138, _2139, _2140), vec3(_2138, _2139, _2140)));
                        float _2745 = _2744 * _2138;
                        float _2746 = _2744 * _2139;
                        float _2747 = _2744 * _2140;
                        float _2748 = _2689.x - _2138;
                        float _2749 = _2689.y - _2139;
                        float _2750 = _2689.z - _2140;
                        float _2751 = dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750));
                        float _2754 = inversesqrt(_2751);
                        float _2755 = _2754 * _2748;
                        float _2756 = _2754 * _2749;
                        float _2757 = _2754 * _2750;
                        float _2758 = dot(vec3(_646, _649, _652), vec3(_2755, _2756, _2757));
                        float _2763 = 1.0 - (_2751 * _2689.w);
                        float _3783 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
                        float _2764 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                        float _2765 = sqrt(_2751) * _2708.w;
                        float _2768 = 1.39999997615814208984375 / (_2765 + 1.39999997615814208984375);
                        float _2769 = _2768 * _2768;
                        float _2770 = 1.0 - _2769;
                        float _2772 = (_2770 * _2770) * _590;
                        float _2775 = ((_2770 * _2758) + _2769) + _2772;
                        float _2780 = _2765 * _2765;
                        float _2785 = ((isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0))) * _2764) / (((_2772 * 2.0) + 1.0) * ((_2780 * 0.699999988079071044921875) + 1.0));
                        float _2789 = dot(vec3(_2755, _2756, _2757), vec3(_2745, _2746, _2747));
                        float _3799 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2796 = dot(vec3((-0.0) - _2745, (-0.0) - _2746, (-0.0) - _2747), vec3(_646, _649, _652)) + 1.0;
                        float _2798 = (isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0))) * 0.5;
                        float _2805 = ((_2798 * _2798) * _2738.x) * exp2((_2738.y * 32.0) * log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))));
                        float _2807 = _590 / (_590 + 1.0);
                        float _2823 = (-0.0) - _2138;
                        float _2824 = (-0.0) - _2139;
                        float _2825 = (-0.0) - _2140;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2840 = exp2(log2(1.0 / ((_2780 * 3.5) + 5.0)) * 0.25);
                        float _2841 = 1.0 - _710;
                        float _2848 = sqrt(1.0 - ((1.0 - (_2841 * _2841)) * (1.0 - (_2840 * _2840))));
                        float _2849 = _2848 * _2848;
                        float _2850 = _2849 * _2849;
                        float _2851 = _2830 + _2755;
                        float _2852 = _2831 + _2756;
                        float _2853 = _2832 + _2757;
                        float _2857 = inversesqrt(dot(vec3(_2851, _2852, _2853), vec3(_2851, _2852, _2853)));
                        float _2861 = dot(vec3(_646, _649, _652), vec3(_2830, _2831, _2832));
                        float _3815 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
                        float _2865 = dot(vec3(_646, _649, _652), vec3(_2857 * _2851, _2857 * _2852, _2857 * _2853));
                        float _3826 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
                        float _2872 = ((_2868 * _2868) * (_2850 + (-1.0))) + 1.0;
                        float _2873 = _2768 * _2849;
                        float _2874 = _2873 * _2873;
                        float _2877 = ((1.0 - _2874) * _2758) + _2874;
                        float _3837 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
                        float _2878 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
                        float _2879 = 1.0 - _2849;
                        float _2889 = (0.5 / (((_2878 * ((_2864 * _2879) + _2849)) + 9.9999999392252902907785028219223e-09) + (((_2878 * _2879) + _2849) * _2864))) * _2878;
                        float _3848 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2900 = (((_2850 * 3.1415927410125732421875) * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) / ((_2872 * _2872) * ((_2780 * 2.1991131305694580078125) + 3.141590118408203125))) * _2764;
                        _2598 = (((((_2709 * 0.3183098733425140380859375) * _2807) * _2805) + _2709) * _2785) + _2666;
                        _2599 = (((((_2710 * 0.3183098733425140380859375) * _2807) * _2805) + _2710) * _2785) + _2667;
                        _2600 = (((((_2711 * 0.3183098733425140380859375) * _2807) * _2805) + _2711) * _2785) + _2668;
                        _2595 = (_2900 * _2725.x) + _2663;
                        _2596 = (_2900 * _2725.y) + _2664;
                        _2597 = (_2900 * _2725.z) + _2665;
                        if (_2670 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2663 = _2595;
                            _2664 = _2596;
                            _2665 = _2597;
                            _2666 = _2598;
                            _2667 = _2599;
                            _2668 = _2600;
                            _2669 = _2670;
                        }
                    }
                    frontier_phi_58_pred = _2595;
                    frontier_phi_58_pred_1 = _2600;
                    frontier_phi_58_pred_2 = _2599;
                    frontier_phi_58_pred_3 = _2598;
                    frontier_phi_58_pred_4 = _2597;
                    frontier_phi_58_pred_5 = _2596;
                }
                _2235 = frontier_phi_58_pred;
                _2245 = frontier_phi_58_pred_1;
                _2243 = frontier_phi_58_pred_2;
                _2241 = frontier_phi_58_pred_3;
                _2239 = frontier_phi_58_pred_4;
                _2237 = frontier_phi_58_pred_5;
                uint _2433 = _2432 + 1u;
                if (_2433 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2426 = _2235;
                    _2427 = _2237;
                    _2428 = _2239;
                    _2429 = _2241;
                    _2430 = _2243;
                    _2431 = _2245;
                    _2432 = _2433;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2234 = _2235;
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
            _2244 = _2245;
        }
        float _2249 = isnan(1.0) ? _689 : (isnan(_689) ? 1.0 : min(_689, 1.0));
        _2196 = (_2249 * _2240) + _1892;
        _2198 = (_2249 * _2242) + _1893;
        _2200 = (_2249 * _2244) + _1894;
        _2202 = ((_2234 * 0.039999999105930328369140625) * _2249) + _2058;
        _2204 = ((_2236 * 0.039999999105930328369140625) * _2249) + _2059;
        _2206 = ((_2238 * 0.039999999105930328369140625) * _2249) + _2060;
    }
    else
    {
        _2196 = _1892;
        _2198 = _1893;
        _2200 = _1894;
        _2202 = _2058;
        _2204 = _2059;
        _2206 = _2060;
    }
    float _2323;
    float _2324;
    float _2325;
    if (_590 > 0.0)
    {
        uint _2256 = _1782 + 4u;
        float _2262 = (-0.0) - _442;
        float _2263 = (-0.0) - _443;
        float _2264 = (-0.0) - _444;
        float _2265 = dot(vec3(cbLight._m0[_1782].xyz), vec3(_2262, _2263, _2264));
        float _3864 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _700 + 1.0;
        float _2271 = (isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0))) * 0.5;
        float _2276 = _2271 * _2271;
        float _2277 = _2276 * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 32.0);
        float _2279 = _590 / (_590 + 1.0);
        float _2280 = isnan(_1791) ? 1.0 : (isnan(1.0) ? _1791 : min(1.0, _1791));
        uint _2293 = _1782 + 5u;
        float _2299 = dot(vec3(cbLight._m0[_1818].xyz), vec3(_2262, _2263, _2264));
        float _3885 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2306 = _2276 * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 32.0);
        float _2307 = isnan(_1792) ? 1.0 : (isnan(1.0) ? _1792 : min(1.0, _1792));
        _2323 = ((((_2306 * cbLight._m0[_2293].x) * _2279) * _2307) + ((((cbLight._m0[_2256].x * _1774) * _2277) * _2279) * _2280)) * 0.3183098733425140380859375;
        _2324 = ((((_2306 * cbLight._m0[_2293].y) * _2279) * _2307) + ((((cbLight._m0[_2256].y * _1775) * _2277) * _2279) * _2280)) * 0.3183098733425140380859375;
        _2325 = ((((_2306 * cbLight._m0[_2293].z) * _2279) * _2307) + ((((cbLight._m0[_2256].z * _1776) * _2277) * _2279) * _2280)) * 0.3183098733425140380859375;
    }
    else
    {
        _2323 = 0.0;
        _2324 = 0.0;
        _2325 = 0.0;
    }
    float _3901 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3912 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3923 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3934 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
    float _2340 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * ((_2196 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _689)) + _2323);
    float _2341 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * ((_2198 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _689)) + _2324);
    float _2342 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * ((_2200 + ((isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0))) * _689)) + _2325);
    float _2346 = 0.959999978542327880859375 - (exp2(log2(1.0 - _704) * 5.0) * 0.959999978542327880859375);
    float _2357 = (_2340 + ((_2202 + ((isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _541.x) * _2346) - _2340) * _585);
    float _2359 = (_2341 + ((_2204 + ((isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _541.y) * _2346) - _2341) * _585);
    float _2361 = (_2342 + ((_2206 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1532)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _541.z) * _2346) - _2342) * _585);
    float _2366 = cbInstanceData._m0[_665 + 6u].w * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)));
    float _2371 = _627 / cbSceneParam._m0[86u].x;
    float _2372 = _628 / cbSceneParam._m0[86u].y;
    vec4 _2386 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2371, _2372, (log2((isnan(cbSceneParam._m0[77u].w) ? _609 : (isnan(_609) ? cbSceneParam._m0[77u].w : min(_609, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2388 = _2386.x;
    float _2389 = _2386.y;
    float _2390 = _2386.z;
    float _2391 = _2386.w;
    float _2484;
    float _2486;
    float _2488;
    float _2490;
    if (_609 > cbSceneParam._m0[78u].w)
    {
        float _2447 = isnan(_609) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _609 : min(cbSceneParam._m0[80u].w, _609));
        float _2448 = _2447 / _609;
        float _2459 = _2448 * _285;
        float _2460 = _286 * _2448;
        float _2461 = (-0.0) - _2460;
        float _2462 = _2448 * _287;
        float _2464 = (cbSceneParam._m0[77u].w * _2461) / _2447;
        float _2465 = _2464 + cbSceneParam._m0[79u].w;
        float _2466 = cbSceneParam._m0[79u].w - _2460;
        float _2472 = sqrt(((_2459 * _2459) + (_2460 * _2460)) + (_2462 * _2462));
        float _2475 = (1.0 - (cbSceneParam._m0[77u].w / _2447)) * _2472;
        float _2480 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2482 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2905;
        if (abs((_2461 - _2464) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2905 = ((((_2465 > 0.0) ? exp2(_2480 * _2465) : (2.0 - exp2(_2482 * _2465))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2475;
        }
        else
        {
            float _2620 = 1.0 / cbSceneParam._m0[80u].x;
            float _2621 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : max(_2465, _2466));
            float _2622 = isnan(_2466) ? _2465 : (isnan(_2465) ? _2466 : min(_2465, _2466));
            float _2631 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : min(_2621, 0.0));
            float _2632 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : min(_2622, 0.0));
            _2905 = ((abs(_2472 / _2461) * cbSceneParam._m0[80u].y) * ((((_2631 - _2632) * 2.0) - ((exp2(_2480 * (isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0)))) - exp2(_2480 * (isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0))))) * _2620)) - ((exp2(_2482 * _2631) - exp2(_2482 * _2632)) * _2620))) + (_2475 * cbSceneParam._m0[80u].z);
        }
        vec4 _2907 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2371, _2372, 1.0), 0.0);
        float _2916 = exp2((_2905 * (-1.44269502162933349609375)) * (1.0 - _2907.w));
        float _2917 = log2(_2916);
        float _2933 = log2(_2391);
        _2484 = (exp2(_2933 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].x)) * _2907.x) / cbSceneParam._m0[78u].x)) + _2388;
        _2486 = (exp2(_2933 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].y)) * _2907.y) / cbSceneParam._m0[78u].y)) + _2389;
        _2488 = (exp2(_2933 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2917 * cbSceneParam._m0[78u].z)) * _2907.z) / cbSceneParam._m0[78u].z)) + _2390;
        _2490 = _2916 * _2391;
    }
    else
    {
        _2484 = _2388;
        _2486 = _2389;
        _2488 = _2390;
        _2490 = _2391;
    }
    bool _2943;
    float _2545;
    vec4 _2548;
    float _2550;
    vec4 _2552;
    float _2560;
    float _2561;
    float _2562;
    float _2563;
    bool _2573;
    for (;;)
    {
        bool _2502 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2503 = log2(_2490);
        float _2510 = exp2(_2503 * cbSceneParam._m0[78u].x) * _2357;
        float _2511 = exp2(_2503 * cbSceneParam._m0[78u].y) * _2359;
        float _2512 = exp2(_2503 * cbSceneParam._m0[78u].z) * _2361;
        vec4 _2520 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_627, _628));
        float _2522 = _2520.x;
        float _2543 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2522)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2522))) - _609) * cbMtdParam._m0[17u].y;
        float _3985 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        _2545 = _2366 * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)));
        float _2546 = _616 + (-0.5);
        _2548 = cbMtdParam._m0[1u];
        _2550 = _2548.y * _2546;
        _2552 = cbMatDynParam._m0[0u];
        float _2559 = (roundEven(_2552.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2560 = _2559 * (_2502 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2484)));
        _2561 = _2559 * (_2502 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2486)));
        _2562 = _2559 * (_2502 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2488)));
        _2563 = _2546 * 0.999000012874603271484375;
        _2573 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2573)
        {
            if ((cbInstanceData._m0[_665 + 7u].x + _2563) < 0.5)
            {
                _2943 = true;
                break;
            }
        }
        uint _2655 = _666 + uint(_2552.w);
        if ((cbInstanceData._m0[_2655].w < 1.0) && ((cbInstanceData._m0[_2655].w + _2563) < 0.5))
        {
            _2943 = true;
            break;
        }
        if ((_2550 + _351) < _2548.x)
        {
            _2943 = true;
            break;
        }
        _2943 = false;
        break;
    }
    float _2948;
    if (_2943)
    {
        discard_state = true;
        _2948 = 0.0;
    }
    else
    {
        _2948 = _2545;
    }
    SV_Target.x = _2560;
    SV_Target.y = _2561;
    SV_Target.z = _2562;
    SV_Target.w = _2948;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2545;
    discard_exit();
}


