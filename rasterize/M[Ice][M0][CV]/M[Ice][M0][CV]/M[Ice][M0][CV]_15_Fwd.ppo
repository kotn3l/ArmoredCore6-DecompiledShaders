#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1225;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _218 = _217 * _209;
    float _219 = _217 * _210;
    float _220 = _217 * _211;
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = _224 * NORMAL.x;
    float _226 = _224 * NORMAL.y;
    float _227 = _224 * NORMAL.z;
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _232 = _231 * TANGENT.x;
    float _233 = _231 * TANGENT.y;
    float _234 = _231 * TANGENT.z;
    float _239;
    float _240;
    float _241;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _239 = (-0.0) - _225;
        _240 = (-0.0) - _226;
        _241 = (-0.0) - _227;
    }
    else
    {
        _239 = _225;
        _240 = _226;
        _241 = _227;
    }
    float _288 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _298 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _288);
    float _299 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _288);
    float _300 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _288);
    uint _306 = uint(roundEven(NORMAL.w)) * 13u;
    uint _311 = _306 + 1u;
    uint _315 = _306 + 2u;
    float _324 = sqrt(((cbInstanceData._m0[_311].x * cbInstanceData._m0[_311].x) + (cbInstanceData._m0[_306].x * cbInstanceData._m0[_306].x)) + (cbInstanceData._m0[_315].x * cbInstanceData._m0[_315].x));
    float _325 = _324 * TEXCOORD.z;
    float _326 = _324 * TEXCOORD.w;
    vec4 _339 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * _325) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _326) + cbTextureTilingScale._m0[8u].w));
    vec4 _360 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _368 = (_360.x * 2.0) + (-1.0);
    float _370 = (_360.y * 2.0) + (-1.0);
    float _371 = dot(vec2(_368, _370), vec2(_368, _370));
    float _3112 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _377 = sqrt(1.0 - (isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0))));
    float _380 = fma(_377, _239, fma(_370, _232, _368 * _218));
    float _383 = fma(_377, _240, fma(_370, _233, _368 * _219));
    float _386 = fma(_377, _241, fma(_370, _234, _368 * _220));
    float _390 = inversesqrt(dot(vec3(_380, _383, _386), vec3(_380, _383, _386)));
    vec4 _423 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _428 = _423.w;
    float _440 = dot(vec3(_298, _299, _300), vec3(_218, _219, _220));
    float _443 = dot(vec3(_298, _299, _300), vec3(_232, _233, _234));
    float _446 = dot(vec3(_298, _299, _300), vec3(_239, _240, _241));
    float _452 = inversesqrt(dot(vec3(_440, _443, _446), vec3(_440, _443, _446)));
    float _474 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _494 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_440 * cbMtdParam._m0[14u].x) * _452) * _474) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_443 * cbMtdParam._m0[14u].x) * _452) * _474) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _517 = inversesqrt(dot(vec3(_298, _299, _300), vec3(_298, _299, _300)));
    float _518 = _517 * _298;
    float _519 = _517 * _299;
    float _520 = _517 * _300;
    float _521 = dot(vec4(_518, _519, _520, 0.0), vec4(_239, _240, _241, 0.0));
    float _524 = _521 - cbMtdParam._m0[15u].z;
    float _3123 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _531 = exp2(log2(1.0 - (isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _546 = ((((_423.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _494.x) * cbMtdParam._m0[9u].x) * ((_531 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _551 = ((((_423.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _494.y) * cbMtdParam._m0[9u].y) * ((_531 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _556 = ((((_423.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _494.z) * cbMtdParam._m0[9u].z) * ((_531 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _565 = (cbMtdParam._m0[18u].w + 1.0) * (TEXCOORD_8 - ((cbMtdParam._m0[18u].z * (1.0 - TEXCOORD_8)) * (texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _325) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _326) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625)));
    float _3139 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
    float _573 = (_566 * ((_339.x * cbMtdParam._m0[10u].x) - _546)) + _546;
    float _574 = (((_339.y * cbMtdParam._m0[10u].y) - _551) * _566) + _551;
    float _575 = (((_339.z * cbMtdParam._m0[10u].z) - _556) * _566) + _556;
    vec4 _587 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _325) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _326) + cbTextureTilingScale._m0[9u].w));
    float _594 = (_587.x * 2.0) + (-1.0);
    float _595 = (_587.y * 2.0) + (-1.0);
    float _596 = dot(vec2(_594, _595), vec2(_594, _595));
    float _3150 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    vec4 _617 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _629 = cbMtdParam._m0[17u].z + _360.z;
    float _635 = (_629 + cbMtdParam._m0[16u].y) + ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * (_617.z - _629));
    float _638 = ((_587.z - _635) * _566) + _635;
    float _644 = ((((_617.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _368;
    float _645 = ((((_617.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _370;
    float _657 = (((_594 - _644) + (_644 * cbMtdParam._m0[14u].z)) * _566) + _644;
    float _658 = (((_595 - _645) + (_645 * cbMtdParam._m0[14u].z)) * _566) + _645;
    float _659 = (_566 * (sqrt(1.0 - (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0)))) - _377)) + _377;
    float _675 = cbMtdParam._m0[16u].w * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x;
    float _677 = _675 - (_675 * _566);
    float _686 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _687 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _697 = cbSceneParam._m0[86u].x * ((_686 / cbSceneParam._m0[86u].x) + ((_390 * _380) * cbMtdParam._m0[18u].y));
    float _698 = cbSceneParam._m0[86u].y * ((_687 / cbSceneParam._m0[86u].y) + ((_390 * _383) * cbMtdParam._m0[18u].y));
    float _705 = isnan(cbInstanceData._m0[8u].x) ? _697 : (isnan(_697) ? cbInstanceData._m0[8u].x : max(_697, cbInstanceData._m0[8u].x));
    float _706 = isnan(cbInstanceData._m0[8u].y) ? _698 : (isnan(_698) ? cbInstanceData._m0[8u].y : max(_698, cbInstanceData._m0[8u].y));
    vec4 _710 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _705 : (isnan(_705) ? cbInstanceData._m0[8u].z : min(_705, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _706 : (isnan(_706) ? cbInstanceData._m0[8u].w : min(_706, cbInstanceData._m0[8u].w))));
    float _743 = _521 - cbMtdParam._m0[15u].x;
    float _3181 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _753 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3197 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _754 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _756 = _754 - (_566 * _754);
    float _760 = fma(_659, _239, fma(_658, _232, _657 * _218));
    float _763 = fma(_659, _240, fma(_658, _233, _657 * _219));
    float _766 = fma(_659, _241, fma(_658, _234, _657 * _220));
    float _770 = inversesqrt(dot(vec3(_760, _763, _766), vec3(_760, _763, _766)));
    float _771 = _770 * _760;
    float _772 = _770 * _763;
    float _773 = _770 * _766;
    float _3208 = isnan(0.0) ? _428 : (isnan(_428) ? 0.0 : max(_428, 0.0));
    float _774 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    float _3219 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _775 = isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0));
    float _776 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3235 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _3246 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _3257 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _793 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _811 = fma(_773, cbSceneParam._m0[5u].z, fma(_772, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _771));
    float _814 = fma(_773, cbSceneParam._m0[6u].z, fma(_772, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _771));
    float _817 = fma(_773, cbSceneParam._m0[7u].z, fma(_772, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _771));
    uint _831 = (_306 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _837 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0)))) * cbInstanceData._m0[_831].x;
    float _838 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_831].y;
    float _839 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_831].z;
    float _3268 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _840 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
    float _3279 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _841 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _3290 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _842 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    vec4 _846 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _686, cbSceneParam._m0[86u].y * _687));
    float _849 = _846.x * TEXCOORD_5.w;
    float _850 = dot(vec3(_771, _772, _773), vec3(_518, _519, _520));
    float _853 = _850 * 2.0;
    float _857 = (_853 * _771) - _518;
    float _858 = (_853 * _772) - _519;
    float _859 = (_853 * _773) - _520;
    float _860 = dot(vec3(_518, _519, _520), vec3(_771, _772, _773));
    float _863 = abs(_860);
    float _3301 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _864 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _870 = sqrt(_775);
    float _882 = exp2((_870 * 5.0) * log2(1.0 - (_864 * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _914 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1224;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _949 = fma(_922, cbModelParam._m0[26u].z, fma(_918, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914));
        float _953 = fma(_922, cbModelParam._m0[27u].z, fma(_918, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914));
        float _957 = fma(_922, cbModelParam._m0[28u].z, fma(_918, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914));
        float _982 = _914 + _771;
        float _983 = _918 + _772;
        float _984 = _922 + _773;
        float _994 = fma(_984, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _982)) - _949;
        float _995 = fma(_984, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _982)) - _953;
        float _996 = fma(_984, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _982)) - _957;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_949 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_953 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[34u].z) + ((((((_957 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1052 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1053 = _1052 * (_1018.x + (-0.5));
        float _1054 = _1052 * (_1018.y + (-0.5));
        float _1055 = _1052 * (_1018.z + (-0.5));
        float _1062 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1063 = _1062 * (_1025.x + (-0.5));
        float _1064 = _1062 * (_1025.y + (-0.5));
        float _1065 = _1062 * (_1025.z + (-0.5));
        float _1072 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1073 = _1072 * (_1032.x + (-0.5));
        float _1074 = _1072 * (_1032.y + (-0.5));
        float _1075 = _1072 * (_1032.z + (-0.5));
        float _1082 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1083 = _1082 * (_1039.x + (-0.5));
        float _1084 = _1082 * (_1039.y + (-0.5));
        float _1085 = _1082 * (_1039.z + (-0.5));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = _1053 * 0.5;
        float _1090 = _1063 * 0.5;
        float _1091 = _1073 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1106 = (dot(vec3(_771, _772, _773), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1116 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3349 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_1118 + 1.0))) + _1123) * _1086;
        float _1133 = _1054 * 0.5;
        float _1134 = _1064 * 0.5;
        float _1135 = _1074 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(_771, _772, _773), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1087 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3382 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1160 + 1.0))) + _1165) * _1087;
        float _1175 = _1055 * 0.5;
        float _1176 = _1065 * 0.5;
        float _1177 = _1075 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_771, _772, _773), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3415 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1202 + 1.0))) + _1207) * _1088;
        _1224 = _1055;
        _1226 = _1054;
        _1227 = _1053;
        _1228 = _1065;
        _1229 = _1064;
        _1230 = _1063;
        _1231 = _1075;
        _1232 = _1074;
        _1233 = _1073;
        _1234 = _1088;
        _1235 = _1087;
        _1236 = _1086;
        _1237 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1238 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1239 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _1225;
        _1226 = _1225;
        _1227 = _1225;
        _1228 = _1225;
        _1229 = _1225;
        _1230 = _1225;
        _1231 = _1225;
        _1232 = _1225;
        _1233 = _1225;
        _1234 = _1225;
        _1235 = _1225;
        _1236 = _1225;
        _1237 = 0.0;
        _1238 = 0.0;
        _1239 = 0.0;
    }
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1265 = fma(_922, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _914));
        float _1269 = fma(_922, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _914));
        float _1273 = fma(_922, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _914));
        float _1296 = _914 + _771;
        float _1297 = _918 + _772;
        float _1298 = _922 + _773;
        float _1308 = fma(_1298, cbModelParam._m0[30u].z, fma(_1297, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1296)) - _1265;
        float _1309 = fma(_1298, cbModelParam._m0[31u].z, fma(_1297, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1296)) - _1269;
        float _1310 = fma(_1298, cbModelParam._m0[32u].z, fma(_1297, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1296)) - _1273;
        float _1314 = inversesqrt(dot(vec3(_1308, _1309, _1310), vec3(_1308, _1309, _1310)));
        float _1327 = ((_1314 * _1308) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1265 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1328 = ((_1314 * _1309) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1269 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1329 = ((_1314 * _1310) / cbModelParam._m0[35u].z) + ((((((_1273 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        vec4 _1352 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1327, _1328, _1329), 0.0);
        float _1364 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1365 = _1364 * (_1331.x + (-0.5));
        float _1366 = _1364 * (_1331.y + (-0.5));
        float _1367 = _1364 * (_1331.z + (-0.5));
        float _1374 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1375 = _1374 * (_1338.x + (-0.5));
        float _1376 = _1374 * (_1338.y + (-0.5));
        float _1377 = _1374 * (_1338.z + (-0.5));
        float _1384 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1385 = _1384 * (_1345.x + (-0.5));
        float _1386 = _1384 * (_1345.y + (-0.5));
        float _1387 = _1384 * (_1345.z + (-0.5));
        float _1394 = exp2((_1352.w + (-0.5)) * 20.0) * 2.0;
        float _1395 = _1394 * (_1352.x + (-0.5));
        float _1396 = _1394 * (_1352.y + (-0.5));
        float _1397 = _1394 * (_1352.z + (-0.5));
        float _1398 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1399 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1400 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1401 = _1365 * 0.5;
        float _1402 = _1375 * 0.5;
        float _1403 = _1385 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_771, _772, _773), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1398 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3478 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1428 + 1.0))) + _1433) * _1398;
        float _1443 = _1366 * 0.5;
        float _1444 = _1376 * 0.5;
        float _1445 = _1386 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_771, _772, _773), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1399 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3511 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1470 + 1.0))) + _1475) * _1399;
        float _1485 = _1367 * 0.5;
        float _1486 = _1377 * 0.5;
        float _1487 = _1387 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_771, _772, _773), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1400 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _3544 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1512 + 1.0))) + _1517) * _1400;
        _1534 = _1367;
        _1535 = _1366;
        _1536 = _1365;
        _1537 = _1377;
        _1538 = _1376;
        _1539 = _1375;
        _1540 = _1387;
        _1541 = _1386;
        _1542 = _1385;
        _1543 = _1400;
        _1544 = _1399;
        _1545 = _1398;
        _1546 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1547 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
        _1548 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
    }
    else
    {
        _1534 = _1225;
        _1535 = _1225;
        _1536 = _1225;
        _1537 = _1225;
        _1538 = _1225;
        _1539 = _1225;
        _1540 = _1225;
        _1541 = _1225;
        _1542 = _1225;
        _1543 = _1225;
        _1544 = _1225;
        _1545 = _1225;
        _1546 = 0.0;
        _1547 = 0.0;
        _1548 = 0.0;
    }
    float _1558 = (cbModelParam._m0[1u].x * (_1546 - _1237)) + _1237;
    float _1559 = (cbModelParam._m0[1u].x * (_1547 - _1238)) + _1238;
    float _1560 = (cbModelParam._m0[1u].x * (_1548 - _1239)) + _1239;
    float _1581 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1559, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1584 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1559, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1587 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1559, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1558));
    float _1602 = _857 * 0.5;
    float _1603 = _858 * 0.5;
    float _1604 = _859 * 0.5;
    float _1605 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1536, _1539, _1542, _1545));
    float _1608 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1535, _1538, _1541, _1544));
    float _1611 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1534, _1537, _1540, _1543));
    float _1645;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1618 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1224, _1228, _1231, _1234));
        float _1622 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1226, _1229, _1232, _1235));
        float _1626 = dot(vec4(_1602, _1603, _1604, 1.0), vec4(_1227, _1230, _1233, _1236));
        float _1633 = dot(vec4(cbModelParam._m0[39u]), vec4(_1602, _1603, _1604, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0)), isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)), isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1633) ? 0.0 : (isnan(0.0) ? _1633 : max(0.0, _1633))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1656;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1647 = dot(vec4(cbModelParam._m0[40u]), vec4(_1602, _1603, _1604, 1.0));
        _1656 = dot(vec3(isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1647) ? 0.0 : (isnan(0.0) ? _1647 : max(0.0, _1647))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1656 = 1.0;
    }
    float _1660 = (_1656 * cbModelParam._m0[1u].x) + (_1645 * (1.0 - cbModelParam._m0[1u].x));
    float _1670 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _775);
    float _1671 = isnan(_1670) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1670 : min(cbModelParam._m0[25u].z, _1670));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1718 = fma(_922, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _914)) + cbModelParam._m0[13u].w;
        float _1722 = fma(_922, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _914)) + cbModelParam._m0[14u].w;
        float _1726 = fma(_922, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _914)) + cbModelParam._m0[15u].w;
        float _1729 = fma(_859, cbModelParam._m0[13u].z, fma(_858, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _857));
        float _1732 = fma(_859, cbModelParam._m0[14u].z, fma(_858, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _857));
        float _1735 = fma(_859, cbModelParam._m0[15u].z, fma(_858, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _857));
        float _1763;
        if (_1729 > 0.0)
        {
            _1763 = abs((1.0 - _1718) / _1729);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1718 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1763 = frontier_phi_16_14_ladder;
        }
        float _1935;
        if (_1732 > 0.0)
        {
            _1935 = abs((1.0 - _1722) / _1732);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1722 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1935 = frontier_phi_25_21_ladder;
        }
        float _2170;
        if (_1735 > 0.0)
        {
            _2170 = abs((1.0 - _1726) / _1735);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1726 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2170 = frontier_phi_36_32_ladder;
        }
        float _2172 = isnan(_1935) ? _1763 : (isnan(_1763) ? _1935 : min(_1763, _1935));
        float _2173 = isnan(_2170) ? _2172 : (isnan(_2172) ? _2170 : min(_2172, _2170));
        float _2177 = (_2173 * _1729) + _1718;
        float _2178 = (_2173 * _1732) + _1722;
        float _2179 = (_2173 * _1735) + _1726;
        float _2180 = _2173 * 9.9999997473787516355514526367188e-05;
        float _2182 = (-1.0) - _2180;
        float _2184 = _2180 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_2179 > _2184) || ((_2179 < _2182) || ((_2178 > _2184) || ((_2178 < _2182) || ((_2177 < _2182) || (_2177 > _2184))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2329 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2179, cbModelParam._m0[9u].z, fma(_2178, cbModelParam._m0[9u].y, _2177 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2179, cbModelParam._m0[10u].z, fma(_2178, cbModelParam._m0[10u].y, _2177 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2179, cbModelParam._m0[11u].z, fma(_2178, cbModelParam._m0[11u].y, _2177 * cbModelParam._m0[11u].x))), _1671);
            frontier_phi_15_36_ladder = _2329.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _2329.x * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _2329.y * cbModelParam._m0[1u].y;
        }
        _1751 = frontier_phi_15_36_ladder_1;
        _1753 = frontier_phi_15_36_ladder_2;
        _1755 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_857, _858, _859), _1671);
        _1751 = _1739.x * cbModelParam._m0[1u].y;
        _1753 = _1739.y * cbModelParam._m0[1u].y;
        _1755 = _1739.z * cbModelParam._m0[1u].y;
    }
    float _1759 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _775);
    float _1760 = isnan(_1759) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1759 : min(cbModelParam._m0[25u].w, _1759));
    float _1852;
    float _1854;
    float _1856;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1816 = fma(_922, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _914)) + cbModelParam._m0[21u].w;
        float _1820 = fma(_922, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _914)) + cbModelParam._m0[22u].w;
        float _1824 = fma(_922, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _914)) + cbModelParam._m0[23u].w;
        float _1827 = fma(_859, cbModelParam._m0[21u].z, fma(_858, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _857));
        float _1830 = fma(_859, cbModelParam._m0[22u].z, fma(_858, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _857));
        float _1833 = fma(_859, cbModelParam._m0[23u].z, fma(_858, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _857));
        float _1940;
        if (_1827 > 0.0)
        {
            _1940 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1940 = frontier_phi_27_23_ladder;
        }
        float _2197;
        if (_1830 > 0.0)
        {
            _2197 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2197 = frontier_phi_38_34_ladder;
        }
        float _2501;
        if (_1833 > 0.0)
        {
            _2501 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2501 = frontier_phi_49_44_ladder;
        }
        float _2503 = isnan(_2197) ? _1940 : (isnan(_1940) ? _2197 : min(_1940, _2197));
        float _2504 = isnan(_2501) ? _2503 : (isnan(_2503) ? _2501 : min(_2503, _2501));
        float _2508 = (_2504 * _1827) + _1816;
        float _2509 = (_2504 * _1830) + _1820;
        float _2510 = (_2504 * _1833) + _1824;
        float _2511 = _2504 * 9.9999997473787516355514526367188e-05;
        float _2512 = (-1.0) - _2511;
        float _2514 = _2511 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2510 > _2514) || ((_2510 < _2512) || ((_2509 > _2514) || ((_2509 < _2512) || ((_2508 < _2512) || (_2508 > _2514))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2683 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2510, cbModelParam._m0[17u].z, fma(_2509, cbModelParam._m0[17u].y, _2508 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2510, cbModelParam._m0[18u].z, fma(_2509, cbModelParam._m0[18u].y, _2508 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2510, cbModelParam._m0[19u].z, fma(_2509, cbModelParam._m0[19u].y, _2508 * cbModelParam._m0[19u].x))), _1760);
            frontier_phi_24_49_ladder = _2683.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2683.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2683.x * cbModelParam._m0[1u].z;
        }
        _1852 = frontier_phi_24_49_ladder_2;
        _1854 = frontier_phi_24_49_ladder;
        _1856 = frontier_phi_24_49_ladder_1;
    }
    else
    {
        vec4 _1836 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_857, _858, _859), _1760);
        _1852 = _1836.x * cbModelParam._m0[1u].z;
        _1854 = _1836.y * cbModelParam._m0[1u].z;
        _1856 = _1836.z * cbModelParam._m0[1u].z;
    }
    float _1868 = ((((1.0 - _882) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_882 * _870)) * _849;
    float _1869 = _1868 * ((cbModelParam._m0[1u].w * (_1852 - _1751)) + _1751);
    float _1870 = _1868 * ((cbModelParam._m0[1u].w * (_1854 - _1753)) + _1753);
    float _1871 = _1868 * ((cbModelParam._m0[1u].w * (_1856 - _1755)) + _1755);
    float _1874 = fma(_1871, cbSceneParam._m0[89u].z, fma(_1870, cbSceneParam._m0[89u].y, _1869 * cbSceneParam._m0[89u].x));
    float _1877 = fma(_1871, cbSceneParam._m0[90u].z, fma(_1870, cbSceneParam._m0[90u].y, _1869 * cbSceneParam._m0[90u].x));
    float _1880 = fma(_1871, cbSceneParam._m0[91u].z, fma(_1870, cbSceneParam._m0[91u].y, _1869 * cbSceneParam._m0[91u].x));
    uvec4 _1890 = floatBitsToUint(cbInstanceData._m0[_306 + 5u]);
    uint _1892 = _1890.x * 14u;
    uint _1893 = _1892 + 13u;
    float _1898 = _849 + (-1.0);
    float _1901 = (cbLight._m0[_1893].x * _1898) + 1.0;
    float _1902 = (cbLight._m0[_1893].y * _1898) + 1.0;
    uint _1904 = _1892 + 4u;
    float _1915 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_771, _772, _773));
    float _1918 = isnan(1.0) ? _1901 : (isnan(_1901) ? 1.0 : min(_1901, 1.0));
    uint _1919 = _1892 + 5u;
    uint _1925 = _1892 | 1u;
    float _1931 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_771, _772, _773));
    float _1934 = isnan(1.0) ? _1902 : (isnan(_1902) ? 1.0 : min(_1902, 1.0));
    float _1999;
    float _2000;
    float _2001;
    if (_776 == 0.0)
    {
        float _3680 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
        float _3691 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1953 = (isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0))) * 0.3183098733425140380859375;
        float _1955 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * 0.3183098733425140380859375;
        _1999 = ((cbLight._m0[_1919].x * _1934) * _1955) + ((cbLight._m0[_1904].x * _1918) * _1953);
        _2000 = ((_1934 * cbLight._m0[_1919].y) * _1955) + ((_1918 * cbLight._m0[_1904].y) * _1953);
        _2001 = ((_1934 * cbLight._m0[_1919].z) * _1955) + ((_1918 * cbLight._m0[_1904].z) * _1953);
    }
    else
    {
        float _1965 = _1915 + _776;
        float _1968 = (_776 * 2.0) + 1.0;
        float _1969 = (isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) / _1968;
        float _1976 = _1931 + _776;
        float _1978 = (isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) / _1968;
        _1999 = (((_1978 * cbLight._m0[_1919].x) * _1934) + ((_1969 * cbLight._m0[_1904].x) * _1918)) * 0.3183098733425140380859375;
        _2000 = (((_1978 * cbLight._m0[_1919].y) * _1934) + ((_1969 * cbLight._m0[_1904].y) * _1918)) * 0.3183098733425140380859375;
        _2001 = (((_1978 * cbLight._m0[_1919].z) * _1934) + ((_1969 * cbLight._m0[_1904].z) * _1918)) * 0.3183098733425140380859375;
    }
    uint _2005 = _1892 + 8u;
    float _2021 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1892].w)) * _775) * 0.949999988079071044921875);
    float _2022 = _2021 * _2021;
    float _2023 = cbLight._m0[_1892].x + _518;
    float _2024 = cbLight._m0[_1892].y + _519;
    float _2025 = cbLight._m0[_1892].z + _520;
    float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
    float _2030 = _2029 * _2023;
    float _2031 = _2029 * _2024;
    float _2032 = _2029 * _2025;
    float _2033 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_1892].xyz));
    float _3712 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2036 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
    float _3723 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _2037 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _2038 = dot(vec3(_771, _772, _773), vec3(_2030, _2031, _2032));
    float _3734 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _2042 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2030, _2031, _2032));
    float _3745 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2046 = _2022 * _2022;
    float _2050 = ((_2041 * _2041) * (_2046 + (-1.0))) + 1.0;
    float _2061 = (exp2(log2(1.0 - (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2062 = 1.0 - _2022;
    float _2073 = (0.5 / (((_2037 * ((_2036 * _2062) + _2022)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2062) + _2022) * _2036))) * _2036;
    float _3756 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * (_2046 / ((_2050 * _2050) * 3.141590118408203125));
    uint _2088 = _1892 + 9u;
    float _2102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1925].w)) * _775) * 0.949999988079071044921875);
    float _2103 = _2102 * _2102;
    float _2104 = cbLight._m0[_1925].x + _518;
    float _2105 = cbLight._m0[_1925].y + _519;
    float _2106 = cbLight._m0[_1925].z + _520;
    float _2110 = inversesqrt(dot(vec3(_2104, _2105, _2106), vec3(_2104, _2105, _2106)));
    float _2111 = _2110 * _2104;
    float _2112 = _2110 * _2105;
    float _2113 = _2110 * _2106;
    float _2114 = dot(vec3(_771, _772, _773), vec3(cbLight._m0[_1925].xyz));
    float _3767 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _2118 = dot(vec3(_771, _772, _773), vec3(_2111, _2112, _2113));
    float _3778 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2121 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _2122 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2111, _2112, _2113));
    float _3789 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2126 = _2103 * _2103;
    float _2130 = ((_2121 * _2121) * (_2126 + (-1.0))) + 1.0;
    float _2139 = (exp2(log2(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2140 = 1.0 - _2103;
    float _2150 = (0.5 / (((_2037 * ((_2117 * _2140) + _2103)) + 9.9999999392252902907785028219223e-09) + (((_2037 * _2140) + _2103) * _2117))) * _2117;
    float _3800 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2152 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_2126 / ((_2130 * _2130) * 3.141590118408203125));
    float _2162 = (((_2139 * cbLight._m0[_2088].x) * _2152) * _1934) + (((_2061 * cbLight._m0[_2005].x) * _2075) * _1918);
    float _2163 = (((_2139 * cbLight._m0[_2088].y) * _2152) * _1934) + (((_2061 * cbLight._m0[_2005].y) * _2075) * _1918);
    float _2164 = (((_2139 * cbLight._m0[_2088].z) * _2152) * _1934) + (((_2061 * cbLight._m0[_2005].z) * _2075) * _1918);
    float _2300;
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    float _2310;
    if (_1890.y == 0u)
    {
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2241;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2241;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2241;
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.x;
        uint _2268 = uint((float(_2256.y) * floor(float(uint(cbSceneParam._m0[85u].y * _687) / _2257))) + floor(float(uint(cbSceneParam._m0[85u].x * _686) / _2257)));
        float _2278 = (log2(_2244 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2279 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        uint _2282 = uint(isnan(14.0) ? _2279 : (isnan(_2279) ? 14.0 : min(_2279, 14.0)));
        uint _2289 = _2256.z;
        float _2338;
        float _2340;
        float _2342;
        float _2344;
        float _2346;
        float _2348;
        if (((((1u << ((_2289 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2282 << 2u) + (_2268 << 6u)) >> 2u)).x) == 0u) || ((_2289 & 240u) == 0u))
        {
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
            _2344 = 0.0;
            _2346 = 0.0;
            _2348 = 0.0;
        }
        else
        {
            float _2339;
            float _2341;
            float _2343;
            float _2345;
            float _2347;
            float _2349;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            uint _2533 = 0u;
            uint _2542;
            bool _2543;
            for (;;)
            {
                _2542 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2533 << 2u)) >> 2u)).x;
                _2543 = _2542 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2543)
                {
                    frontier_phi_55_pred = _2532;
                    frontier_phi_55_pred_1 = _2531;
                    frontier_phi_55_pred_2 = _2530;
                    frontier_phi_55_pred_3 = _2528;
                    frontier_phi_55_pred_4 = _2527;
                    frontier_phi_55_pred_5 = _2529;
                }
                else
                {
                    float _2740;
                    float _2741;
                    float _2742;
                    float _2743;
                    float _2744;
                    float _2745;
                    uint _2746;
                    _2740 = _2527;
                    _2741 = _2528;
                    _2742 = _2529;
                    _2743 = _2530;
                    _2744 = _2531;
                    _2745 = _2532;
                    _2746 = _2542;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    for (;;)
                    {
                        uint _2750 = uint(findLSB(_2746)) + (_2533 << 5u);
                        uint _2747 = (_2746 + 4294967295u) & _2746;
                        uint _2752 = _2750 * 48u;
                        vec4 _2766 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2752)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2752 + 3u)).x));
                        uint _2772 = (_2750 * 48u) + 4u;
                        vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2772)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2772 + 3u)).x));
                        float _2786 = _2785.x;
                        float _2787 = _2785.y;
                        float _2788 = _2785.z;
                        uint _2791 = (_2750 * 48u) + 8u;
                        vec3 _2802 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x));
                        uint _2807 = (_2750 * 48u) + 12u;
                        vec2 _2815 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x));
                        float _2821 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
                        float _2822 = _2821 * _2242;
                        float _2823 = _2821 * _2243;
                        float _2824 = _2821 * _2244;
                        float _2825 = _2766.x - _2242;
                        float _2826 = _2766.y - _2243;
                        float _2827 = _2766.z - _2244;
                        float _2828 = dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827));
                        float _2831 = inversesqrt(_2828);
                        float _2832 = _2831 * _2825;
                        float _2833 = _2831 * _2826;
                        float _2834 = _2831 * _2827;
                        float _2835 = dot(vec3(_811, _814, _817), vec3(_2832, _2833, _2834));
                        float _2840 = 1.0 - (_2828 * _2766.w);
                        float _3821 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2841 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
                        float _2842 = sqrt(_2828) * _2785.w;
                        float _2845 = 1.39999997615814208984375 / (_2842 + 1.39999997615814208984375);
                        float _2846 = _2845 * _2845;
                        float _2847 = 1.0 - _2846;
                        float _2849 = (_2847 * _2847) * _776;
                        float _2852 = ((_2847 * _2835) + _2846) + _2849;
                        float _2857 = _2842 * _2842;
                        float _2862 = ((isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0))) * _2841) / (((_2849 * 2.0) + 1.0) * ((_2857 * 0.699999988079071044921875) + 1.0));
                        float _2866 = dot(vec3(_2832, _2833, _2834), vec3(_2822, _2823, _2824));
                        float _3837 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
                        float _2873 = dot(vec3((-0.0) - _2822, (-0.0) - _2823, (-0.0) - _2824), vec3(_811, _814, _817)) + 1.0;
                        float _2875 = (isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))) * 0.5;
                        float _2882 = ((_2875 * _2875) * _2815.x) * exp2((_2815.y * 32.0) * log2(isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))));
                        float _2884 = _776 / (_776 + 1.0);
                        float _2900 = (-0.0) - _2242;
                        float _2901 = (-0.0) - _2243;
                        float _2902 = (-0.0) - _2244;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2917 = exp2(log2(1.0 / ((_2857 * 3.5) + 5.0)) * 0.25);
                        float _2918 = 1.0 - _870;
                        float _2925 = sqrt(1.0 - ((1.0 - (_2918 * _2918)) * (1.0 - (_2917 * _2917))));
                        float _2926 = _2925 * _2925;
                        float _2927 = _2926 * _2926;
                        float _2928 = _2907 + _2832;
                        float _2929 = _2908 + _2833;
                        float _2930 = _2909 + _2834;
                        float _2934 = inversesqrt(dot(vec3(_2928, _2929, _2930), vec3(_2928, _2929, _2930)));
                        float _2938 = dot(vec3(_811, _814, _817), vec3(_2907, _2908, _2909));
                        float _3853 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
                        float _2942 = dot(vec3(_811, _814, _817), vec3(_2934 * _2928, _2934 * _2929, _2934 * _2930));
                        float _3864 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
                        float _2949 = ((_2945 * _2945) * (_2927 + (-1.0))) + 1.0;
                        float _2950 = _2845 * _2926;
                        float _2951 = _2950 * _2950;
                        float _2954 = ((1.0 - _2951) * _2835) + _2951;
                        float _3875 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
                        float _2956 = 1.0 - _2926;
                        float _2966 = (0.5 / (((_2955 * ((_2941 * _2956) + _2926)) + 9.9999999392252902907785028219223e-09) + (((_2955 * _2956) + _2926) * _2941))) * _2955;
                        float _3886 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
                        float _2977 = (((_2927 * 3.1415927410125732421875) * (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0)))) / ((_2949 * _2949) * ((_2857 * 2.1991131305694580078125) + 3.141590118408203125))) * _2841;
                        _2691 = (((((_2786 * 0.3183098733425140380859375) * _2884) * _2882) + _2786) * _2862) + _2743;
                        _2692 = (((((_2787 * 0.3183098733425140380859375) * _2884) * _2882) + _2787) * _2862) + _2744;
                        _2693 = (((((_2788 * 0.3183098733425140380859375) * _2884) * _2882) + _2788) * _2862) + _2745;
                        _2688 = (_2977 * _2802.x) + _2740;
                        _2689 = (_2977 * _2802.y) + _2741;
                        _2690 = (_2977 * _2802.z) + _2742;
                        if (_2747 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2740 = _2688;
                            _2741 = _2689;
                            _2742 = _2690;
                            _2743 = _2691;
                            _2744 = _2692;
                            _2745 = _2693;
                            _2746 = _2747;
                        }
                    }
                    frontier_phi_55_pred = _2693;
                    frontier_phi_55_pred_1 = _2692;
                    frontier_phi_55_pred_2 = _2691;
                    frontier_phi_55_pred_3 = _2689;
                    frontier_phi_55_pred_4 = _2688;
                    frontier_phi_55_pred_5 = _2690;
                }
                _2349 = frontier_phi_55_pred;
                _2347 = frontier_phi_55_pred_1;
                _2345 = frontier_phi_55_pred_2;
                _2341 = frontier_phi_55_pred_3;
                _2339 = frontier_phi_55_pred_4;
                _2343 = frontier_phi_55_pred_5;
                uint _2534 = _2533 + 1u;
                if (_2534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2527 = _2339;
                    _2528 = _2341;
                    _2529 = _2343;
                    _2530 = _2345;
                    _2531 = _2347;
                    _2532 = _2349;
                    _2533 = _2534;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
            _2344 = _2345;
            _2346 = _2347;
            _2348 = _2349;
        }
        float _2353 = isnan(1.0) ? _849 : (isnan(_849) ? 1.0 : min(_849, 1.0));
        _2300 = (_2353 * _2344) + _1999;
        _2302 = (_2353 * _2346) + _2000;
        _2304 = (_2353 * _2348) + _2001;
        _2306 = ((_2338 * 0.039999999105930328369140625) * _2353) + _2162;
        _2308 = ((_2340 * 0.039999999105930328369140625) * _2353) + _2163;
        _2310 = ((_2342 * 0.039999999105930328369140625) * _2353) + _2164;
    }
    else
    {
        _2300 = _1999;
        _2302 = _2000;
        _2304 = _2001;
        _2306 = _2162;
        _2308 = _2163;
        _2310 = _2164;
    }
    float _2424;
    float _2425;
    float _2426;
    if (_776 > 0.0)
    {
        uint _2360 = _1892 + 4u;
        float _2366 = (-0.0) - _518;
        float _2367 = (-0.0) - _519;
        float _2368 = (-0.0) - _520;
        float _2369 = dot(vec3(cbLight._m0[_1892].xyz), vec3(_2366, _2367, _2368));
        float _3902 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _860 + 1.0;
        float _2375 = (isnan(0.0) ? _2373 : (isnan(_2373) ? 0.0 : max(_2373, 0.0))) * 0.5;
        float _2380 = _2375 * _2375;
        float _2381 = _2380 * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * 32.0);
        float _2383 = _776 / (_776 + 1.0);
        float _2384 = isnan(_1901) ? 1.0 : (isnan(1.0) ? _1901 : min(1.0, _1901));
        uint _2394 = _1892 + 5u;
        float _2400 = dot(vec3(cbLight._m0[_1925].xyz), vec3(_2366, _2367, _2368));
        float _3923 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2407 = _2380 * exp2(log2(isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 32.0);
        float _2408 = isnan(_1902) ? 1.0 : (isnan(1.0) ? _1902 : min(1.0, _1902));
        _2424 = ((((_2407 * cbLight._m0[_2394].x) * _2383) * _2408) + (((_2381 * cbLight._m0[_2360].x) * _2383) * _2384)) * 0.3183098733425140380859375;
        _2425 = ((((_2407 * cbLight._m0[_2394].y) * _2383) * _2408) + (((_2381 * cbLight._m0[_2360].y) * _2383) * _2384)) * 0.3183098733425140380859375;
        _2426 = ((((_2407 * cbLight._m0[_2394].z) * _2383) * _2408) + (((_2381 * cbLight._m0[_2360].z) * _2383) * _2384)) * 0.3183098733425140380859375;
    }
    else
    {
        _2424 = 0.0;
        _2425 = 0.0;
        _2426 = 0.0;
    }
    float _3939 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _3950 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _3961 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _3972 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2441 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * ((_2300 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _849)) + _2424);
    float _2442 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * ((_2302 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _849)) + _2425);
    float _2443 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * ((_2304 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _849)) + _2426);
    float _2447 = 0.959999978542327880859375 - (exp2(log2(1.0 - _864) * 5.0) * 0.959999978542327880859375);
    float _2472 = _686 / cbSceneParam._m0[86u].x;
    float _2473 = _687 / cbSceneParam._m0[86u].y;
    vec4 _2487 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2472, _2473, (log2((isnan(cbSceneParam._m0[77u].w) ? _793 : (isnan(_793) ? cbSceneParam._m0[77u].w : min(_793, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2489 = _2487.x;
    float _2490 = _2487.y;
    float _2491 = _2487.z;
    float _2492 = _2487.w;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    if (_793 > cbSceneParam._m0[78u].w)
    {
        float _2548 = isnan(_793) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _793 : min(cbSceneParam._m0[80u].w, _793));
        float _2549 = _2548 / _793;
        float _2560 = _2549 * _298;
        float _2561 = _299 * _2549;
        float _2562 = (-0.0) - _2561;
        float _2563 = _2549 * _300;
        float _2565 = (cbSceneParam._m0[77u].w * _2562) / _2548;
        float _2566 = _2565 + cbSceneParam._m0[79u].w;
        float _2567 = cbSceneParam._m0[79u].w - _2561;
        float _2573 = sqrt(((_2560 * _2560) + (_2561 * _2561)) + (_2563 * _2563));
        float _2576 = (1.0 - (cbSceneParam._m0[77u].w / _2548)) * _2573;
        float _2581 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2583 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2982;
        if (abs((_2562 - _2565) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2982 = ((((_2566 > 0.0) ? exp2(_2581 * _2566) : (2.0 - exp2(_2583 * _2566))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2576;
        }
        else
        {
            float _2713 = 1.0 / cbSceneParam._m0[80u].x;
            float _2714 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : max(_2566, _2567));
            float _2715 = isnan(_2567) ? _2566 : (isnan(_2566) ? _2567 : min(_2566, _2567));
            float _2724 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : min(_2714, 0.0));
            float _2725 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : min(_2715, 0.0));
            _2982 = ((abs(_2573 / _2562) * cbSceneParam._m0[80u].y) * ((((_2724 - _2725) * 2.0) - ((exp2(_2581 * (isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0)))) - exp2(_2581 * (isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0))))) * _2713)) - ((exp2(_2583 * _2724) - exp2(_2583 * _2725)) * _2713))) + (_2576 * cbSceneParam._m0[80u].z);
        }
        vec4 _2984 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2472, _2473, 1.0), 0.0);
        float _2993 = exp2((_2982 * (-1.44269502162933349609375)) * (1.0 - _2984.w));
        float _2994 = log2(_2993);
        float _3010 = log2(_2492);
        _2585 = (exp2(_3010 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2994 * cbSceneParam._m0[78u].x)) * _2984.x) / cbSceneParam._m0[78u].x)) + _2489;
        _2587 = (exp2(_3010 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2994 * cbSceneParam._m0[78u].y)) * _2984.y) / cbSceneParam._m0[78u].y)) + _2490;
        _2589 = (exp2(_3010 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2994 * cbSceneParam._m0[78u].z)) * _2984.z) / cbSceneParam._m0[78u].z)) + _2491;
        _2591 = _2993 * _2492;
    }
    else
    {
        _2585 = _2489;
        _2587 = _2490;
        _2589 = _2491;
        _2591 = _2492;
    }
    bool _2603 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2604 = log2(_2591);
    float _2611 = exp2(_2604 * cbSceneParam._m0[78u].x) * ((_2441 + ((_2306 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1660)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _710.x) * _2447) - _2441) * _756));
    float _2612 = exp2(_2604 * cbSceneParam._m0[78u].y) * ((_2442 + ((_2308 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1660)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _710.y) * _2447) - _2442) * _756));
    float _2613 = exp2(_2604 * cbSceneParam._m0[78u].z) * ((_2443 + ((_2310 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1660)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _710.z) * _2447) - _2443) * _756));
    vec4 _2621 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_686, _687));
    float _2623 = _2621.x;
    float _2644 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2623)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2623))) - _793) * cbMtdParam._m0[17u].y;
    float _4023 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2646 = (cbInstanceData._m0[_306 + 6u].w * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)));
    float _2655 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2655 * (_2603 ? _2611 : (_2611 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.y = _2655 * (_2603 ? _2612 : (_2612 + (cbSceneParam._m0[72u].w * _2587)));
    SV_Target.z = _2655 * (_2603 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2589)));
    SV_Target.w = _2646;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2646;
}


