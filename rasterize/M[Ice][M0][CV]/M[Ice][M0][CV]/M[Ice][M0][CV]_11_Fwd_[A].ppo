#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1145;
float _3086;
float _3087;
float _3088;
float _3089;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _211 = _210 * _202;
    float _212 = _210 * _203;
    float _213 = _210 * _204;
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = _217 * NORMAL.x;
    float _219 = _217 * NORMAL.y;
    float _220 = _217 * NORMAL.z;
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _225 = _224 * TANGENT.x;
    float _226 = _224 * TANGENT.y;
    float _227 = _224 * TANGENT.z;
    float _232;
    float _233;
    float _234;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
    }
    else
    {
        _232 = _218;
        _233 = _219;
        _234 = _220;
    }
    float _279 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _289 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _279);
    float _290 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _279);
    float _291 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _279);
    vec4 _305 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _314 = (_305.x * 2.0) + (-1.0);
    float _316 = (_305.y * 2.0) + (-1.0);
    float _317 = dot(vec2(_314, _316), vec2(_314, _316));
    float _3098 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _323 = sqrt(1.0 - (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))));
    float _326 = fma(_323, _232, fma(_316, _225, _314 * _211));
    float _329 = fma(_323, _233, fma(_316, _226, _314 * _212));
    float _332 = fma(_323, _234, fma(_316, _227, _314 * _213));
    float _336 = inversesqrt(dot(vec3(_326, _329, _332), vec3(_326, _329, _332)));
    vec4 _350 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _355 = _350.w;
    float _367 = dot(vec3(_289, _290, _291), vec3(_211, _212, _213));
    float _370 = dot(vec3(_289, _290, _291), vec3(_225, _226, _227));
    float _373 = dot(vec3(_289, _290, _291), vec3(_232, _233, _234));
    float _379 = inversesqrt(dot(vec3(_367, _370, _373), vec3(_367, _370, _373)));
    float _401 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _421 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_367 * cbMtdParam._m0[14u].x) * _379) * _401) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_370 * cbMtdParam._m0[14u].x) * _379) * _401) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _445 = inversesqrt(dot(vec3(_289, _290, _291), vec3(_289, _290, _291)));
    float _446 = _445 * _289;
    float _447 = _445 * _290;
    float _448 = _445 * _291;
    float _449 = dot(vec4(_446, _447, _448, 0.0), vec4(_232, _233, _234, 0.0));
    float _452 = _449 - cbMtdParam._m0[15u].z;
    float _3109 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _459 = exp2(log2(1.0 - (isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _474 = ((((_350.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _421.x) * cbMtdParam._m0[9u].x) * ((_459 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _479 = ((((_350.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _421.y) * cbMtdParam._m0[9u].y) * ((_459 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _484 = ((((_350.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _421.z) * cbMtdParam._m0[9u].z) * ((_459 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    vec4 _500 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _512 = cbMtdParam._m0[17u].z + _305.z;
    float _518 = (_512 + cbMtdParam._m0[16u].y) + ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * (_500.z - _512));
    float _524 = ((((_500.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _314;
    float _525 = ((((_500.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _316;
    vec4 _537 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _541 = cbMtdParam._m0[16u].w * _537.x;
    float _564 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + ((_336 * _326) * cbMtdParam._m0[18u].y));
    float _565 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + ((_336 * _329) * cbMtdParam._m0[18u].y));
    float _572 = isnan(cbInstanceData._m0[8u].x) ? _564 : (isnan(_564) ? cbInstanceData._m0[8u].x : max(_564, cbInstanceData._m0[8u].x));
    float _573 = isnan(cbInstanceData._m0[8u].y) ? _565 : (isnan(_565) ? cbInstanceData._m0[8u].y : max(_565, cbInstanceData._m0[8u].y));
    vec4 _577 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _572 : (isnan(_572) ? cbInstanceData._m0[8u].z : min(_572, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _573 : (isnan(_573) ? cbInstanceData._m0[8u].w : min(_573, cbInstanceData._m0[8u].w))));
    float _610 = _449 - cbMtdParam._m0[15u].x;
    float _3145 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _620 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3161 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _621 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    float _625 = fma(_323, _232, fma(_525, _225, _524 * _211));
    float _628 = fma(_323, _233, fma(_525, _226, _524 * _212));
    float _631 = fma(_323, _234, fma(_525, _227, _524 * _213));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    float _636 = _635 * _625;
    float _637 = _635 * _628;
    float _638 = _635 * _631;
    float _3172 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _639 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    float _3183 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _640 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
    float _641 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _3199 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _3210 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3221 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _660 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _665 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _667 = _665.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _824 = sqrt(((_289 * _289) + (_290 * _290)) + (_291 * _291));
        float _830 = (cbMatDynParam._m0[5u].x * _824) + cbMatDynParam._m0[5u].y;
        float _3232 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _835 = (cbMatDynParam._m0[5u].z * _824) + cbMatDynParam._m0[5u].w;
        float _3243 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) - _831)) + _831) < ((_667 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _678 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _679 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _697 = fma(_638, cbSceneParam._m0[5u].z, fma(_637, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _636));
    float _700 = fma(_638, cbSceneParam._m0[6u].z, fma(_637, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _636));
    float _703 = fma(_638, cbSceneParam._m0[7u].z, fma(_637, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _636));
    uint _716 = uint(roundEven(NORMAL.w)) * 13u;
    uint _717 = _716 + 9u;
    uint _718 = _717 + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3254 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
    float _3265 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
    float _3276 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
    vec4 _737 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _678, cbSceneParam._m0[86u].y * _679));
    float _740 = _737.x * TEXCOORD_5.w;
    float _741 = dot(vec3(_636, _637, _638), vec3(_446, _447, _448));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _636) - _446;
    float _749 = (_744 * _637) - _447;
    float _750 = (_744 * _638) - _448;
    float _751 = dot(vec3(_446, _447, _448), vec3(_636, _637, _638));
    float _754 = abs(_751);
    float _3287 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _755 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
    float _761 = sqrt(_640);
    float _773 = exp2((_761 * 5.0) * log2(1.0 - (_755 * 0.999000012874603271484375))) / (4.0 - (_761 * 3.0));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _813 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1144;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _869 = fma(_813, cbModelParam._m0[26u].z, fma(_809, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _805));
        float _873 = fma(_813, cbModelParam._m0[27u].z, fma(_809, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _805));
        float _877 = fma(_813, cbModelParam._m0[28u].z, fma(_809, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _805));
        float _902 = _805 + _636;
        float _903 = _809 + _637;
        float _904 = _813 + _638;
        float _914 = fma(_904, cbModelParam._m0[26u].z, fma(_903, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _902)) - _869;
        float _915 = fma(_904, cbModelParam._m0[27u].z, fma(_903, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _902)) - _873;
        float _916 = fma(_904, cbModelParam._m0[28u].z, fma(_903, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _902)) - _877;
        float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
        float _933 = ((_920 * _914) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_869 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _934 = ((_920 * _915) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_873 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_920 * _916) / cbModelParam._m0[34u].z) + ((((((_877 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_933, _934, _935), 0.0);
        float _972 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_938.x + (-0.5));
        float _974 = _972 * (_938.y + (-0.5));
        float _975 = _972 * (_938.z + (-0.5));
        float _982 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_945.x + (-0.5));
        float _984 = _982 * (_945.y + (-0.5));
        float _985 = _982 * (_945.z + (-0.5));
        float _992 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_952.x + (-0.5));
        float _994 = _992 * (_952.y + (-0.5));
        float _995 = _992 * (_952.z + (-0.5));
        float _1002 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_959.x + (-0.5));
        float _1004 = _1002 * (_959.y + (-0.5));
        float _1005 = _1002 * (_959.z + (-0.5));
        float _1006 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = _973 * 0.5;
        float _1010 = _983 * 0.5;
        float _1011 = _993 * 0.5;
        float _1012 = dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011));
        float _1017 = (_1012 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1012);
        float _1026 = (dot(vec3(_636, _637, _638), vec3(_1017 * _1009, _1017 * _1010, _1017 * _1011)) + 1.0) * 0.5;
        float _3313 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1036 = sqrt(((_1010 * _1010) + (_1009 * _1009)) + (_1011 * _1011)) / (_1006 + 9.9999997473787516355514526367188e-06);
        float _3324 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
        float _1038 = _1037 * 2.0;
        float _1042 = (1.0 - _1037) / (_1037 + 1.0);
        float _3335 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0));
        float _1052 = ((((1.0 - _1043) * (_1038 + 2.0)) * exp2(log2(isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * (_1038 + 1.0))) + _1043) * _1006;
        float _1053 = _974 * 0.5;
        float _1054 = _984 * 0.5;
        float _1055 = _994 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1069 = (dot(vec3(_636, _637, _638), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1078 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3368 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_1080 + 1.0))) + _1085) * _1007;
        float _1095 = _975 * 0.5;
        float _1096 = _985 * 0.5;
        float _1097 = _995 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_636, _637, _638), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3401 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_1122 + 1.0))) + _1127) * _1008;
        _1144 = _975;
        _1146 = _974;
        _1147 = _973;
        _1148 = _985;
        _1149 = _984;
        _1150 = _983;
        _1151 = _995;
        _1152 = _994;
        _1153 = _993;
        _1154 = _1008;
        _1155 = _1007;
        _1156 = _1006;
        _1157 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)));
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
    }
    else
    {
        _1144 = _1145;
        _1146 = _1145;
        _1147 = _1145;
        _1148 = _1145;
        _1149 = _1145;
        _1150 = _1145;
        _1151 = _1145;
        _1152 = _1145;
        _1153 = _1145;
        _1154 = _1145;
        _1155 = _1145;
        _1156 = _1145;
        _1157 = 0.0;
        _1158 = 0.0;
        _1159 = 0.0;
    }
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1188 = fma(_813, cbModelParam._m0[30u].z, fma(_809, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _805));
        float _1192 = fma(_813, cbModelParam._m0[31u].z, fma(_809, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _805));
        float _1196 = fma(_813, cbModelParam._m0[32u].z, fma(_809, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _805));
        float _1219 = _805 + _636;
        float _1220 = _809 + _637;
        float _1221 = _813 + _638;
        float _1231 = fma(_1221, cbModelParam._m0[30u].z, fma(_1220, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219)) - _1188;
        float _1232 = fma(_1221, cbModelParam._m0[31u].z, fma(_1220, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219)) - _1192;
        float _1233 = fma(_1221, cbModelParam._m0[32u].z, fma(_1220, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219)) - _1196;
        float _1237 = inversesqrt(dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233)));
        float _1250 = ((_1237 * _1231) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1188 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1251 = ((_1237 * _1232) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1192 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1237 * _1233) / cbModelParam._m0[35u].z) + ((((((_1196 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1261 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1250, _1251, _1252), 0.0);
        float _1287 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1254.x + (-0.5));
        float _1289 = _1287 * (_1254.y + (-0.5));
        float _1290 = _1287 * (_1254.z + (-0.5));
        float _1297 = exp2((_1261.w + (-0.5)) * 20.0) * 2.0;
        float _1298 = _1297 * (_1261.x + (-0.5));
        float _1299 = _1297 * (_1261.y + (-0.5));
        float _1300 = _1297 * (_1261.z + (-0.5));
        float _1307 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1308 = _1307 * (_1268.x + (-0.5));
        float _1309 = _1307 * (_1268.y + (-0.5));
        float _1310 = _1307 * (_1268.z + (-0.5));
        float _1317 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1318 = _1317 * (_1275.x + (-0.5));
        float _1319 = _1317 * (_1275.y + (-0.5));
        float _1320 = _1317 * (_1275.z + (-0.5));
        float _1321 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = _1288 * 0.5;
        float _1325 = _1298 * 0.5;
        float _1326 = _1308 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_636, _637, _638), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1321 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _3464 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_1351 + 1.0))) + _1356) * _1321;
        float _1366 = _1289 * 0.5;
        float _1367 = _1299 * 0.5;
        float _1368 = _1309 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_636, _637, _638), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _3497 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1393 + 1.0))) + _1398) * _1322;
        float _1408 = _1290 * 0.5;
        float _1409 = _1300 * 0.5;
        float _1410 = _1310 * 0.5;
        float _1411 = dot(vec3(_1408, _1409, _1410), vec3(_1408, _1409, _1410));
        float _1416 = (_1411 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1411);
        float _1424 = (dot(vec3(_636, _637, _638), vec3(_1416 * _1408, _1416 * _1409, _1416 * _1410)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1433 = sqrt(((_1409 * _1409) + (_1408 * _1408)) + (_1410 * _1410)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _1435 = _1434 * 2.0;
        float _1439 = (1.0 - _1434) / (_1434 + 1.0);
        float _3530 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _1449 = ((((1.0 - _1440) * (_1435 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_1435 + 1.0))) + _1440) * _1323;
        _1457 = _1290;
        _1458 = _1289;
        _1459 = _1288;
        _1460 = _1300;
        _1461 = _1299;
        _1462 = _1298;
        _1463 = _1310;
        _1464 = _1309;
        _1465 = _1308;
        _1466 = _1323;
        _1467 = _1322;
        _1468 = _1321;
        _1469 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)));
    }
    else
    {
        _1457 = _1145;
        _1458 = _1145;
        _1459 = _1145;
        _1460 = _1145;
        _1461 = _1145;
        _1462 = _1145;
        _1463 = _1145;
        _1464 = _1145;
        _1465 = _1145;
        _1466 = _1145;
        _1467 = _1145;
        _1468 = _1145;
        _1469 = 0.0;
        _1470 = 0.0;
        _1471 = 0.0;
    }
    float _1481 = (cbModelParam._m0[1u].x * (_1469 - _1157)) + _1157;
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1158)) + _1158;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1159)) + _1159;
    float _1504 = fma(_1483, cbSceneParam._m0[89u].z, fma(_1482, cbSceneParam._m0[89u].y, _1481 * cbSceneParam._m0[89u].x));
    float _1507 = fma(_1483, cbSceneParam._m0[90u].z, fma(_1482, cbSceneParam._m0[90u].y, _1481 * cbSceneParam._m0[90u].x));
    float _1510 = fma(_1483, cbSceneParam._m0[91u].z, fma(_1482, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1481));
    float _1525 = _748 * 0.5;
    float _1526 = _749 * 0.5;
    float _1527 = _750 * 0.5;
    float _1528 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1531 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1534 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1457, _1460, _1463, _1466));
    float _1568;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1541 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1144, _1148, _1151, _1154));
        float _1545 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1146, _1149, _1152, _1155));
        float _1549 = dot(vec4(_1525, _1526, _1527, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1556 = dot(vec4(cbModelParam._m0[39u]), vec4(_1525, _1526, _1527, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1556) ? 0.0 : (isnan(0.0) ? _1556 : max(0.0, _1556))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1579;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1570 = dot(vec4(cbModelParam._m0[40u]), vec4(_1525, _1526, _1527, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1570) ? 0.0 : (isnan(0.0) ? _1570 : max(0.0, _1570))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1583 = (_1579 * cbModelParam._m0[1u].x) + (_1568 * (1.0 - cbModelParam._m0[1u].x));
    float _1593 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _640);
    float _1594 = isnan(_1593) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1593 : min(cbModelParam._m0[25u].z, _1593));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1641 = fma(_813, cbModelParam._m0[13u].z, fma(_809, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _805)) + cbModelParam._m0[13u].w;
        float _1645 = fma(_813, cbModelParam._m0[14u].z, fma(_809, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _805)) + cbModelParam._m0[14u].w;
        float _1649 = fma(_813, cbModelParam._m0[15u].z, fma(_809, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _805)) + cbModelParam._m0[15u].w;
        float _1652 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1655 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1658 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1686;
        if (_1652 > 0.0)
        {
            _1686 = abs((1.0 - _1641) / _1652);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1641 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1686 = frontier_phi_19_17_ladder;
        }
        float _1858;
        if (_1655 > 0.0)
        {
            _1858 = abs((1.0 - _1645) / _1655);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1645 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1858 = frontier_phi_28_24_ladder;
        }
        float _2093;
        if (_1658 > 0.0)
        {
            _2093 = abs((1.0 - _1649) / _1658);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1649 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2093 = frontier_phi_39_35_ladder;
        }
        float _2095 = isnan(_1858) ? _1686 : (isnan(_1686) ? _1858 : min(_1686, _1858));
        float _2096 = isnan(_2093) ? _2095 : (isnan(_2095) ? _2093 : min(_2095, _2093));
        float _2100 = (_2096 * _1652) + _1641;
        float _2101 = (_2096 * _1655) + _1645;
        float _2102 = (_2096 * _1658) + _1649;
        float _2103 = _2096 * 9.9999997473787516355514526367188e-05;
        float _2105 = (-1.0) - _2103;
        float _2107 = _2103 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2102 > _2107) || ((_2102 < _2105) || ((_2101 > _2107) || ((_2101 < _2105) || ((_2100 < _2105) || (_2100 > _2107))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2252 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2102, cbModelParam._m0[9u].z, fma(_2101, cbModelParam._m0[9u].y, _2100 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2102, cbModelParam._m0[10u].z, fma(_2101, cbModelParam._m0[10u].y, _2100 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2102, cbModelParam._m0[11u].z, fma(_2101, cbModelParam._m0[11u].y, _2100 * cbModelParam._m0[11u].x))), _1594);
            frontier_phi_18_39_ladder = _2252.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2252.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2252.x * cbModelParam._m0[1u].y;
        }
        _1674 = frontier_phi_18_39_ladder_2;
        _1676 = frontier_phi_18_39_ladder_1;
        _1678 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1662 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1594);
        _1674 = _1662.x * cbModelParam._m0[1u].y;
        _1676 = _1662.y * cbModelParam._m0[1u].y;
        _1678 = _1662.z * cbModelParam._m0[1u].y;
    }
    float _1682 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _640);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1682 : min(cbModelParam._m0[25u].w, _1682));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1739 = fma(_813, cbModelParam._m0[21u].z, fma(_809, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _805)) + cbModelParam._m0[21u].w;
        float _1743 = fma(_813, cbModelParam._m0[22u].z, fma(_809, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _805)) + cbModelParam._m0[22u].w;
        float _1747 = fma(_813, cbModelParam._m0[23u].z, fma(_809, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _805)) + cbModelParam._m0[23u].w;
        float _1750 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1753 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1756 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1863;
        if (_1750 > 0.0)
        {
            _1863 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1863 = frontier_phi_30_26_ladder;
        }
        float _2120;
        if (_1753 > 0.0)
        {
            _2120 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2120 = frontier_phi_41_37_ladder;
        }
        float _2424;
        if (_1756 > 0.0)
        {
            _2424 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2424 = frontier_phi_52_47_ladder;
        }
        float _2426 = isnan(_2120) ? _1863 : (isnan(_1863) ? _2120 : min(_1863, _2120));
        float _2427 = isnan(_2424) ? _2426 : (isnan(_2426) ? _2424 : min(_2426, _2424));
        float _2431 = (_2427 * _1750) + _1739;
        float _2432 = (_2427 * _1753) + _1743;
        float _2433 = (_2427 * _1756) + _1747;
        float _2434 = _2427 * 9.9999997473787516355514526367188e-05;
        float _2435 = (-1.0) - _2434;
        float _2437 = _2434 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2433 > _2437) || ((_2433 < _2435) || ((_2432 > _2437) || ((_2432 < _2435) || ((_2431 < _2435) || (_2431 > _2437))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2614 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2433, cbModelParam._m0[17u].z, fma(_2432, cbModelParam._m0[17u].y, _2431 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2433, cbModelParam._m0[18u].z, fma(_2432, cbModelParam._m0[18u].y, _2431 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2433, cbModelParam._m0[19u].z, fma(_2432, cbModelParam._m0[19u].y, _2431 * cbModelParam._m0[19u].x))), _1683);
            frontier_phi_27_52_ladder = _2614.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2614.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2614.y * cbModelParam._m0[1u].z;
        }
        _1775 = frontier_phi_27_52_ladder_1;
        _1777 = frontier_phi_27_52_ladder_2;
        _1779 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1683);
        _1775 = _1759.x * cbModelParam._m0[1u].z;
        _1777 = _1759.y * cbModelParam._m0[1u].z;
        _1779 = _1759.z * cbModelParam._m0[1u].z;
    }
    float _1791 = ((((1.0 - _773) * ((_761 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_773 * _761)) * _740;
    float _1792 = _1791 * ((cbModelParam._m0[1u].w * (_1775 - _1674)) + _1674);
    float _1793 = _1791 * ((cbModelParam._m0[1u].w * (_1777 - _1676)) + _1676);
    float _1794 = _1791 * ((cbModelParam._m0[1u].w * (_1779 - _1678)) + _1678);
    float _1797 = fma(_1794, cbSceneParam._m0[89u].z, fma(_1793, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1800 = fma(_1794, cbSceneParam._m0[90u].z, fma(_1793, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1803 = fma(_1794, cbSceneParam._m0[91u].z, fma(_1793, cbSceneParam._m0[91u].y, _1792 * cbSceneParam._m0[91u].x));
    uvec4 _1813 = floatBitsToUint(cbInstanceData._m0[_716 + 5u]);
    uint _1815 = _1813.x * 14u;
    uint _1816 = _1815 + 13u;
    float _1821 = _740 + (-1.0);
    float _1824 = (cbLight._m0[_1816].x * _1821) + 1.0;
    float _1825 = (cbLight._m0[_1816].y * _1821) + 1.0;
    uint _1827 = _1815 + 4u;
    float _1838 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_636, _637, _638));
    float _1841 = isnan(1.0) ? _1824 : (isnan(_1824) ? 1.0 : min(_1824, 1.0));
    uint _1842 = _1815 + 5u;
    uint _1848 = _1815 | 1u;
    float _1854 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_636, _637, _638));
    float _1857 = isnan(1.0) ? _1825 : (isnan(_1825) ? 1.0 : min(_1825, 1.0));
    float _1922;
    float _1923;
    float _1924;
    if (_641 == 0.0)
    {
        float _3666 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _3677 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1876 = (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0))) * 0.3183098733425140380859375;
        float _1878 = (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.3183098733425140380859375;
        _1922 = ((cbLight._m0[_1842].x * _1857) * _1878) + ((cbLight._m0[_1827].x * _1841) * _1876);
        _1923 = ((_1857 * cbLight._m0[_1842].y) * _1878) + ((_1841 * cbLight._m0[_1827].y) * _1876);
        _1924 = ((_1857 * cbLight._m0[_1842].z) * _1878) + ((_1841 * cbLight._m0[_1827].z) * _1876);
    }
    else
    {
        float _1888 = _1838 + _641;
        float _1891 = (_641 * 2.0) + 1.0;
        float _1892 = (isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0))) / _1891;
        float _1899 = _1854 + _641;
        float _1901 = (isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) / _1891;
        _1922 = (((_1901 * cbLight._m0[_1842].x) * _1857) + ((_1892 * cbLight._m0[_1827].x) * _1841)) * 0.3183098733425140380859375;
        _1923 = (((_1901 * cbLight._m0[_1842].y) * _1857) + ((_1892 * cbLight._m0[_1827].y) * _1841)) * 0.3183098733425140380859375;
        _1924 = (((_1901 * cbLight._m0[_1842].z) * _1857) + ((_1892 * cbLight._m0[_1827].z) * _1841)) * 0.3183098733425140380859375;
    }
    uint _1928 = _1815 + 8u;
    float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1815].w)) * _640) * 0.949999988079071044921875);
    float _1945 = _1944 * _1944;
    float _1946 = cbLight._m0[_1815].x + _446;
    float _1947 = cbLight._m0[_1815].y + _447;
    float _1948 = cbLight._m0[_1815].z + _448;
    float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
    float _1953 = _1952 * _1946;
    float _1954 = _1952 * _1947;
    float _1955 = _1952 * _1948;
    float _1956 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_1815].xyz));
    float _3698 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1959 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
    float _3709 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _1960 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _1961 = dot(vec3(_636, _637, _638), vec3(_1953, _1954, _1955));
    float _3720 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1964 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _1965 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_1953, _1954, _1955));
    float _3731 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1969 = _1945 * _1945;
    float _1973 = ((_1964 * _1964) * (_1969 + (-1.0))) + 1.0;
    float _1984 = (exp2(log2(1.0 - (isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1985 = 1.0 - _1945;
    float _1996 = (0.5 / (((_1960 * ((_1959 * _1985) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _1985) + _1945) * _1959))) * _1959;
    float _3742 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _1998 = (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1969 / ((_1973 * _1973) * 3.141590118408203125));
    uint _2011 = _1815 + 9u;
    float _2025 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _640) * 0.949999988079071044921875);
    float _2026 = _2025 * _2025;
    float _2027 = cbLight._m0[_1848].x + _446;
    float _2028 = cbLight._m0[_1848].y + _447;
    float _2029 = cbLight._m0[_1848].z + _448;
    float _2033 = inversesqrt(dot(vec3(_2027, _2028, _2029), vec3(_2027, _2028, _2029)));
    float _2034 = _2033 * _2027;
    float _2035 = _2033 * _2028;
    float _2036 = _2033 * _2029;
    float _2037 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_1848].xyz));
    float _3753 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2040 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
    float _2041 = dot(vec3(_636, _637, _638), vec3(_2034, _2035, _2036));
    float _3764 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _2045 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2034, _2035, _2036));
    float _3775 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2049 = _2026 * _2026;
    float _2053 = ((_2044 * _2044) * (_2049 + (-1.0))) + 1.0;
    float _2062 = (exp2(log2(1.0 - (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2063 = 1.0 - _2026;
    float _2073 = (0.5 / (((_1960 * ((_2040 * _2063) + _2026)) + 9.9999999392252902907785028219223e-09) + (((_1960 * _2063) + _2026) * _2040))) * _2040;
    float _3786 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2075 = (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_2049 / ((_2053 * _2053) * 3.141590118408203125));
    float _2085 = (((_2062 * cbLight._m0[_2011].x) * _2075) * _1857) + (((_1984 * cbLight._m0[_1928].x) * _1998) * _1841);
    float _2086 = (((_2062 * cbLight._m0[_2011].y) * _2075) * _1857) + (((_1984 * cbLight._m0[_1928].y) * _1998) * _1841);
    float _2087 = (((_2062 * cbLight._m0[_2011].z) * _2075) * _1857) + (((_1984 * cbLight._m0[_1928].z) * _1998) * _1841);
    float _2223;
    float _2225;
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    if (_1813.y == 0u)
    {
        float _2164 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2165 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2164;
        float _2166 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2164;
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2164;
        uvec4 _2179 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2180 = _2179.x;
        uint _2191 = uint((float(_2179.y) * floor(float(uint(cbSceneParam._m0[85u].y * _679) / _2180))) + floor(float(uint(cbSceneParam._m0[85u].x * _678) / _2180)));
        float _2201 = (log2(_2167 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2202 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
        uint _2205 = uint(isnan(14.0) ? _2202 : (isnan(_2202) ? 14.0 : min(_2202, 14.0)));
        uint _2212 = _2179.z;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        float _2269;
        float _2271;
        if (((((1u << ((_2212 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2205 << 2u) + (_2191 << 6u)) >> 2u)).x) == 0u) || ((_2212 & 240u) == 0u))
        {
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
            _2269 = 0.0;
            _2271 = 0.0;
        }
        else
        {
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2270;
            float _2272;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            float _2455 = 0.0;
            uint _2456 = 0u;
            uint _2465;
            bool _2466;
            for (;;)
            {
                _2465 = texelFetch(g_lightClassification, int((((_2205 << 5u) + (_2191 << 9u)) + (_2456 << 2u)) >> 2u)).x;
                _2466 = _2465 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2466)
                {
                    frontier_phi_58_pred = _2450;
                    frontier_phi_58_pred_1 = _2455;
                    frontier_phi_58_pred_2 = _2454;
                    frontier_phi_58_pred_3 = _2453;
                    frontier_phi_58_pred_4 = _2452;
                    frontier_phi_58_pred_5 = _2451;
                }
                else
                {
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    uint _2693;
                    _2687 = _2450;
                    _2688 = _2451;
                    _2689 = _2452;
                    _2690 = _2453;
                    _2691 = _2454;
                    _2692 = _2455;
                    _2693 = _2465;
                    float _2619;
                    float _2620;
                    float _2621;
                    float _2622;
                    float _2623;
                    float _2624;
                    for (;;)
                    {
                        uint _2697 = uint(findLSB(_2693)) + (_2456 << 5u);
                        uint _2694 = (_2693 + 4294967295u) & _2693;
                        uint _2699 = _2697 * 48u;
                        vec4 _2713 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2699)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2699 + 3u)).x));
                        uint _2719 = (_2697 * 48u) + 4u;
                        vec4 _2732 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2719)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2719 + 3u)).x));
                        float _2733 = _2732.x;
                        float _2734 = _2732.y;
                        float _2735 = _2732.z;
                        uint _2738 = (_2697 * 48u) + 8u;
                        vec3 _2749 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x));
                        uint _2754 = (_2697 * 48u) + 12u;
                        vec2 _2762 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x));
                        float _2768 = inversesqrt(dot(vec3(_2165, _2166, _2167), vec3(_2165, _2166, _2167)));
                        float _2769 = _2768 * _2165;
                        float _2770 = _2768 * _2166;
                        float _2771 = _2768 * _2167;
                        float _2772 = _2713.x - _2165;
                        float _2773 = _2713.y - _2166;
                        float _2774 = _2713.z - _2167;
                        float _2775 = dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774));
                        float _2778 = inversesqrt(_2775);
                        float _2779 = _2778 * _2772;
                        float _2780 = _2778 * _2773;
                        float _2781 = _2778 * _2774;
                        float _2782 = dot(vec3(_697, _700, _703), vec3(_2779, _2780, _2781));
                        float _2787 = 1.0 - (_2775 * _2713.w);
                        float _3807 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
                        float _2788 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
                        float _2789 = sqrt(_2775) * _2732.w;
                        float _2792 = 1.39999997615814208984375 / (_2789 + 1.39999997615814208984375);
                        float _2793 = _2792 * _2792;
                        float _2794 = 1.0 - _2793;
                        float _2796 = (_2794 * _2794) * _641;
                        float _2799 = ((_2794 * _2782) + _2793) + _2796;
                        float _2804 = _2789 * _2789;
                        float _2809 = ((isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0))) * _2788) / (((_2796 * 2.0) + 1.0) * ((_2804 * 0.699999988079071044921875) + 1.0));
                        float _2813 = dot(vec3(_2779, _2780, _2781), vec3(_2769, _2770, _2771));
                        float _3823 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2820 = dot(vec3((-0.0) - _2769, (-0.0) - _2770, (-0.0) - _2771), vec3(_697, _700, _703)) + 1.0;
                        float _2822 = (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0))) * 0.5;
                        float _2829 = ((_2822 * _2822) * _2762.x) * exp2((_2762.y * 32.0) * log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
                        float _2831 = _641 / (_641 + 1.0);
                        float _2847 = (-0.0) - _2165;
                        float _2848 = (-0.0) - _2166;
                        float _2849 = (-0.0) - _2167;
                        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                        float _2854 = _2853 * _2847;
                        float _2855 = _2853 * _2848;
                        float _2856 = _2853 * _2849;
                        float _2864 = exp2(log2(1.0 / ((_2804 * 3.5) + 5.0)) * 0.25);
                        float _2865 = 1.0 - _761;
                        float _2872 = sqrt(1.0 - ((1.0 - (_2865 * _2865)) * (1.0 - (_2864 * _2864))));
                        float _2873 = _2872 * _2872;
                        float _2874 = _2873 * _2873;
                        float _2875 = _2854 + _2779;
                        float _2876 = _2855 + _2780;
                        float _2877 = _2856 + _2781;
                        float _2881 = inversesqrt(dot(vec3(_2875, _2876, _2877), vec3(_2875, _2876, _2877)));
                        float _2885 = dot(vec3(_697, _700, _703), vec3(_2854, _2855, _2856));
                        float _3839 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2888 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
                        float _2889 = dot(vec3(_697, _700, _703), vec3(_2881 * _2875, _2881 * _2876, _2881 * _2877));
                        float _3850 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
                        float _2892 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                        float _2896 = ((_2892 * _2892) * (_2874 + (-1.0))) + 1.0;
                        float _2897 = _2792 * _2873;
                        float _2898 = _2897 * _2897;
                        float _2901 = ((1.0 - _2898) * _2782) + _2898;
                        float _3861 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
                        float _2902 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2903 = 1.0 - _2873;
                        float _2913 = (0.5 / (((_2902 * ((_2888 * _2903) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2902 * _2903) + _2873) * _2888))) * _2902;
                        float _3872 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
                        float _2924 = (((_2874 * 3.1415927410125732421875) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) / ((_2896 * _2896) * ((_2804 * 2.1991131305694580078125) + 3.141590118408203125))) * _2788;
                        _2622 = (((((_2733 * 0.3183098733425140380859375) * _2831) * _2829) + _2733) * _2809) + _2690;
                        _2623 = (((((_2734 * 0.3183098733425140380859375) * _2831) * _2829) + _2734) * _2809) + _2691;
                        _2624 = (((((_2735 * 0.3183098733425140380859375) * _2831) * _2829) + _2735) * _2809) + _2692;
                        _2619 = (_2924 * _2749.x) + _2687;
                        _2620 = (_2924 * _2749.y) + _2688;
                        _2621 = (_2924 * _2749.z) + _2689;
                        if (_2694 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2687 = _2619;
                            _2688 = _2620;
                            _2689 = _2621;
                            _2690 = _2622;
                            _2691 = _2623;
                            _2692 = _2624;
                            _2693 = _2694;
                        }
                    }
                    frontier_phi_58_pred = _2619;
                    frontier_phi_58_pred_1 = _2624;
                    frontier_phi_58_pred_2 = _2623;
                    frontier_phi_58_pred_3 = _2622;
                    frontier_phi_58_pred_4 = _2621;
                    frontier_phi_58_pred_5 = _2620;
                }
                _2262 = frontier_phi_58_pred;
                _2272 = frontier_phi_58_pred_1;
                _2270 = frontier_phi_58_pred_2;
                _2268 = frontier_phi_58_pred_3;
                _2266 = frontier_phi_58_pred_4;
                _2264 = frontier_phi_58_pred_5;
                uint _2457 = _2456 + 1u;
                if (_2457 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2450 = _2262;
                    _2451 = _2264;
                    _2452 = _2266;
                    _2453 = _2268;
                    _2454 = _2270;
                    _2455 = _2272;
                    _2456 = _2457;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
            _2269 = _2270;
            _2271 = _2272;
        }
        float _2276 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2223 = (_2276 * _2267) + _1922;
        _2225 = (_2276 * _2269) + _1923;
        _2227 = (_2276 * _2271) + _1924;
        _2229 = ((_2261 * 0.039999999105930328369140625) * _2276) + _2085;
        _2231 = ((_2263 * 0.039999999105930328369140625) * _2276) + _2086;
        _2233 = ((_2265 * 0.039999999105930328369140625) * _2276) + _2087;
    }
    else
    {
        _2223 = _1922;
        _2225 = _1923;
        _2227 = _1924;
        _2229 = _2085;
        _2231 = _2086;
        _2233 = _2087;
    }
    float _2347;
    float _2348;
    float _2349;
    if (_641 > 0.0)
    {
        uint _2283 = _1815 + 4u;
        float _2289 = (-0.0) - _446;
        float _2290 = (-0.0) - _447;
        float _2291 = (-0.0) - _448;
        float _2292 = dot(vec3(cbLight._m0[_1815].xyz), vec3(_2289, _2290, _2291));
        float _3888 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
        float _2296 = _751 + 1.0;
        float _2298 = (isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0))) * 0.5;
        float _2303 = _2298 * _2298;
        float _2304 = _2303 * exp2(log2(isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * 32.0);
        float _2306 = _641 / (_641 + 1.0);
        float _2307 = isnan(_1824) ? 1.0 : (isnan(1.0) ? _1824 : min(1.0, _1824));
        uint _2317 = _1815 + 5u;
        float _2323 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_2289, _2290, _2291));
        float _3909 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2330 = _2303 * exp2(log2(isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) * 32.0);
        float _2331 = isnan(_1825) ? 1.0 : (isnan(1.0) ? _1825 : min(1.0, _1825));
        _2347 = ((((_2330 * cbLight._m0[_2317].x) * _2306) * _2331) + (((_2304 * cbLight._m0[_2283].x) * _2306) * _2307)) * 0.3183098733425140380859375;
        _2348 = ((((_2330 * cbLight._m0[_2317].y) * _2306) * _2331) + (((_2304 * cbLight._m0[_2283].y) * _2306) * _2307)) * 0.3183098733425140380859375;
        _2349 = ((((_2330 * cbLight._m0[_2317].z) * _2306) * _2331) + (((_2304 * cbLight._m0[_2283].z) * _2306) * _2307)) * 0.3183098733425140380859375;
    }
    else
    {
        _2347 = 0.0;
        _2348 = 0.0;
        _2349 = 0.0;
    }
    float _3925 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _3936 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _3947 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3958 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _2364 = (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0))) * ((_2223 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _740)) + _2347);
    float _2365 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * ((_2225 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _740)) + _2348);
    float _2366 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * ((_2227 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _740)) + _2349);
    float _2370 = 0.959999978542327880859375 - (exp2(log2(1.0 - _755) * 5.0) * 0.959999978542327880859375);
    float _2381 = (_2364 + ((_2229 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1583)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _577.x) * _2370) - _2364) * _621);
    float _2383 = (_2365 + ((_2231 + ((isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0))) * _1583)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _577.y) * _2370) - _2365) * _621);
    float _2385 = (_2366 + ((_2233 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1583)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _577.z) * _2370) - _2366) * _621);
    float _2390 = cbInstanceData._m0[_716 + 6u].w * (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)));
    float _2395 = _678 / cbSceneParam._m0[86u].x;
    float _2396 = _679 / cbSceneParam._m0[86u].y;
    vec4 _2410 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2395, _2396, (log2((isnan(cbSceneParam._m0[77u].w) ? _660 : (isnan(_660) ? cbSceneParam._m0[77u].w : min(_660, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2412 = _2410.x;
    float _2413 = _2410.y;
    float _2414 = _2410.z;
    float _2415 = _2410.w;
    float _2508;
    float _2510;
    float _2512;
    float _2514;
    if (_660 > cbSceneParam._m0[78u].w)
    {
        float _2471 = isnan(_660) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _660 : min(cbSceneParam._m0[80u].w, _660));
        float _2472 = _2471 / _660;
        float _2483 = _2472 * _289;
        float _2484 = _290 * _2472;
        float _2485 = (-0.0) - _2484;
        float _2486 = _2472 * _291;
        float _2488 = (cbSceneParam._m0[77u].w * _2485) / _2471;
        float _2489 = _2488 + cbSceneParam._m0[79u].w;
        float _2490 = cbSceneParam._m0[79u].w - _2484;
        float _2496 = sqrt(((_2483 * _2483) + (_2484 * _2484)) + (_2486 * _2486));
        float _2499 = (1.0 - (cbSceneParam._m0[77u].w / _2471)) * _2496;
        float _2504 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2506 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2929;
        if (abs((_2485 - _2488) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2929 = ((((_2489 > 0.0) ? exp2(_2504 * _2489) : (2.0 - exp2(_2506 * _2489))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2499;
        }
        else
        {
            float _2644 = 1.0 / cbSceneParam._m0[80u].x;
            float _2645 = isnan(_2490) ? _2489 : (isnan(_2489) ? _2490 : max(_2489, _2490));
            float _2646 = isnan(_2490) ? _2489 : (isnan(_2489) ? _2490 : min(_2489, _2490));
            float _2655 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : min(_2645, 0.0));
            float _2656 = isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : min(_2646, 0.0));
            _2929 = ((abs(_2496 / _2485) * cbSceneParam._m0[80u].y) * ((((_2655 - _2656) * 2.0) - ((exp2(_2504 * (isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0)))) - exp2(_2504 * (isnan(0.0) ? _2646 : (isnan(_2646) ? 0.0 : max(_2646, 0.0))))) * _2644)) - ((exp2(_2506 * _2655) - exp2(_2506 * _2656)) * _2644))) + (_2499 * cbSceneParam._m0[80u].z);
        }
        vec4 _2931 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2395, _2396, 1.0), 0.0);
        float _2940 = exp2((_2929 * (-1.44269502162933349609375)) * (1.0 - _2931.w));
        float _2941 = log2(_2940);
        float _2957 = log2(_2415);
        _2508 = (exp2(_2957 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].x)) * _2931.x) / cbSceneParam._m0[78u].x)) + _2412;
        _2510 = (exp2(_2957 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].y)) * _2931.y) / cbSceneParam._m0[78u].y)) + _2413;
        _2512 = (exp2(_2957 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2941 * cbSceneParam._m0[78u].z)) * _2931.z) / cbSceneParam._m0[78u].z)) + _2414;
        _2514 = _2940 * _2415;
    }
    else
    {
        _2508 = _2412;
        _2510 = _2413;
        _2512 = _2414;
        _2514 = _2415;
    }
    bool _2967;
    float _2569;
    vec4 _2572;
    float _2574;
    vec4 _2576;
    float _2584;
    float _2585;
    float _2586;
    float _2587;
    bool _2597;
    for (;;)
    {
        bool _2526 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2527 = log2(_2514);
        float _2534 = exp2(_2527 * cbSceneParam._m0[78u].x) * _2381;
        float _2535 = exp2(_2527 * cbSceneParam._m0[78u].y) * _2383;
        float _2536 = exp2(_2527 * cbSceneParam._m0[78u].z) * _2385;
        vec4 _2544 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_678, _679));
        float _2546 = _2544.x;
        float _2567 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2546)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2546))) - _660) * cbMtdParam._m0[17u].y;
        float _4009 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
        _2569 = _2390 * (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)));
        float _2570 = _667 + (-0.5);
        _2572 = cbMtdParam._m0[1u];
        _2574 = _2572.y * _2570;
        _2576 = cbMatDynParam._m0[0u];
        float _2583 = (roundEven(_2576.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2584 = _2583 * (_2526 ? _2534 : (_2534 + (cbSceneParam._m0[72u].w * _2508)));
        _2585 = _2583 * (_2526 ? _2535 : (_2535 + (cbSceneParam._m0[72u].w * _2510)));
        _2586 = _2583 * (_2526 ? _2536 : (_2536 + (cbSceneParam._m0[72u].w * _2512)));
        _2587 = _2570 * 0.999000012874603271484375;
        _2597 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2597)
        {
            if ((cbInstanceData._m0[_716 + 7u].x + _2587) < 0.5)
            {
                _2967 = true;
                break;
            }
        }
        uint _2679 = _717 + uint(_2576.w);
        if ((cbInstanceData._m0[_2679].w < 1.0) && ((cbInstanceData._m0[_2679].w + _2587) < 0.5))
        {
            _2967 = true;
            break;
        }
        if ((_2574 + _355) < _2572.x)
        {
            _2967 = true;
            break;
        }
        _2967 = false;
        break;
    }
    float _2972;
    if (_2967)
    {
        discard_state = true;
        _2972 = 0.0;
    }
    else
    {
        _2972 = _2569;
    }
    SV_Target.x = _2584;
    SV_Target.y = _2585;
    SV_Target.z = _2586;
    SV_Target.w = _2972;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2569;
    discard_exit();
}


