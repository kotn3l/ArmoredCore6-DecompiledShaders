#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 7) in vec2 TEXCOORD_12;
bool discard_state;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    vec4 _103 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _105 = _103.w;
    uint _108 = uint(roundEven(NORMAL.w));
    float _152 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _162 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _152);
    float _163 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _152);
    float _164 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _152);
    vec4 _169 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _171 = _169.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _204 = sqrt(((_162 * _162) + (_163 * _163)) + (_164 * _164));
        float _211 = (cbMatDynParam._m0[5u].x * _204) + cbMatDynParam._m0[5u].y;
        float _282 = isnan(0.0) ? _211 : (isnan(_211) ? 0.0 : max(_211, 0.0));
        float _213 = isnan(1.0) ? _282 : (isnan(_282) ? 1.0 : min(_282, 1.0));
        float _217 = (cbMatDynParam._m0[5u].z * _204) + cbMatDynParam._m0[5u].w;
        float _293 = isnan(0.0) ? _217 : (isnan(_217) ? 0.0 : max(_217, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0))) - _213)) + _213) < ((_171 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    bool _254;
    vec4 _182;
    float _184;
    float _185;
    bool _196;
    uint _197;
    for (;;)
    {
        float _179 = _171 + (-0.5);
        _182 = cbMtdParam._m0[1u];
        _184 = _182.y * _179;
        _185 = _179 * 0.999000012874603271484375;
        _196 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        _197 = _108 * 13u;
        if (_196)
        {
            if ((cbInstanceData._m0[_197 + 7u].x + _185) < 0.5)
            {
                _254 = true;
                break;
            }
        }
        uint _243 = (_197 + 9u) + uint(cbMatDynParam._m0[0u].w);
        if ((cbInstanceData._m0[_243].w < 1.0) && ((cbInstanceData._m0[_243].w + _185) < 0.5))
        {
            _254 = true;
            break;
        }
        if ((_184 + _105) < _182.x)
        {
            _254 = true;
            break;
        }
        _254 = false;
        break;
    }
    if (_254)
    {
        discard_state = true;
    }
    discard_exit();
}


