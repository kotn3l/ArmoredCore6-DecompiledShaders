#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_8;
layout(set = 0, binding = 9) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1187;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _212 = _211 * _203;
    float _213 = _211 * _204;
    float _214 = _211 * _205;
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _226 = _225 * TANGENT.x;
    float _227 = _225 * TANGENT.y;
    float _228 = _225 * TANGENT.z;
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    float _282 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _292 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _282);
    float _293 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _282);
    float _294 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _282);
    uint _300 = uint(roundEven(NORMAL.w)) * 13u;
    uint _305 = _300 + 1u;
    uint _309 = _300 + 2u;
    float _318 = sqrt(((cbInstanceData._m0[_305].x * cbInstanceData._m0[_305].x) + (cbInstanceData._m0[_300].x * cbInstanceData._m0[_300].x)) + (cbInstanceData._m0[_309].x * cbInstanceData._m0[_309].x));
    float _319 = _318 * TEXCOORD.z;
    float _320 = _318 * TEXCOORD.w;
    vec4 _333 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[8u].x * _319) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _320) + cbTextureTilingScale._m0[8u].w));
    vec4 _354 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _362 = (_354.x * 2.0) + (-1.0);
    float _364 = (_354.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_362, _364), vec2(_362, _364));
    float _3074 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _371 = sqrt(1.0 - (isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0))));
    float _374 = fma(_371, _233, fma(_364, _226, _362 * _212));
    float _377 = fma(_371, _234, fma(_364, _227, _362 * _213));
    float _380 = fma(_371, _235, fma(_364, _228, _362 * _214));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    vec4 _417 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _422 = _417.w;
    float _434 = dot(vec3(_292, _293, _294), vec3(_212, _213, _214));
    float _437 = dot(vec3(_292, _293, _294), vec3(_226, _227, _228));
    float _440 = dot(vec3(_292, _293, _294), vec3(_233, _234, _235));
    float _446 = inversesqrt(dot(vec3(_434, _437, _440), vec3(_434, _437, _440)));
    float _468 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _488 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_434 * cbMtdParam._m0[14u].x) * _446) * _468) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_437 * cbMtdParam._m0[14u].x) * _446) * _468) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _511 = inversesqrt(dot(vec3(_292, _293, _294), vec3(_292, _293, _294)));
    float _512 = _511 * _292;
    float _513 = _511 * _293;
    float _514 = _511 * _294;
    float _515 = dot(vec4(_512, _513, _514, 0.0), vec4(_233, _234, _235, 0.0));
    float _518 = _515 - cbMtdParam._m0[15u].z;
    float _3085 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _525 = exp2(log2(1.0 - (isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _540 = ((((_417.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _488.x) * cbMtdParam._m0[9u].x) * ((_525 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _545 = ((((_417.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _488.y) * cbMtdParam._m0[9u].y) * ((_525 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _550 = ((((_417.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _488.z) * cbMtdParam._m0[9u].z) * ((_525 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _559 = (cbMtdParam._m0[18u].w + 1.0) * (TEXCOORD_8 - ((cbMtdParam._m0[18u].z * (1.0 - TEXCOORD_8)) * (texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _319) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _320) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625)));
    float _3101 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _560 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
    float _567 = (_560 * ((_333.x * cbMtdParam._m0[10u].x) - _540)) + _540;
    float _568 = (((_333.y * cbMtdParam._m0[10u].y) - _545) * _560) + _545;
    float _569 = (((_333.z * cbMtdParam._m0[10u].z) - _550) * _560) + _550;
    vec4 _581 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _319) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _320) + cbTextureTilingScale._m0[9u].w));
    float _588 = (_581.x * 2.0) + (-1.0);
    float _589 = (_581.y * 2.0) + (-1.0);
    float _590 = dot(vec2(_588, _589), vec2(_588, _589));
    float _3112 = isnan(0.0) ? _590 : (isnan(_590) ? 0.0 : max(_590, 0.0));
    float _604 = (cbMtdParam._m0[16u].y + _354.z) + cbMtdParam._m0[17u].z;
    float _607 = ((_581.z - _604) * _560) + _604;
    float _619 = (((_588 - _362) + (cbMtdParam._m0[14u].z * _362)) * _560) + _362;
    float _620 = (((_589 - _364) + (cbMtdParam._m0[14u].z * _364)) * _560) + _364;
    float _621 = (_560 * (sqrt(1.0 - (isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0)))) - _371)) + _371;
    float _637 = cbMtdParam._m0[16u].w * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x;
    float _639 = _637 - (_637 * _560);
    float _648 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _649 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _659 = cbSceneParam._m0[86u].x * ((_648 / cbSceneParam._m0[86u].x) + ((_384 * _374) * cbMtdParam._m0[18u].y));
    float _660 = cbSceneParam._m0[86u].y * ((_649 / cbSceneParam._m0[86u].y) + ((_384 * _377) * cbMtdParam._m0[18u].y));
    float _667 = isnan(cbInstanceData._m0[8u].x) ? _659 : (isnan(_659) ? cbInstanceData._m0[8u].x : max(_659, cbInstanceData._m0[8u].x));
    float _668 = isnan(cbInstanceData._m0[8u].y) ? _660 : (isnan(_660) ? cbInstanceData._m0[8u].y : max(_660, cbInstanceData._m0[8u].y));
    vec4 _672 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _667 : (isnan(_667) ? cbInstanceData._m0[8u].z : min(_667, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _668 : (isnan(_668) ? cbInstanceData._m0[8u].w : min(_668, cbInstanceData._m0[8u].w))));
    float _705 = _515 - cbMtdParam._m0[15u].x;
    float _3143 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _715 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3143 : (isnan(_3143) ? 1.0 : min(_3143, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3159 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _716 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
    float _718 = _716 - (_560 * _716);
    float _722 = fma(_621, _233, fma(_620, _226, _619 * _212));
    float _725 = fma(_621, _234, fma(_620, _227, _619 * _213));
    float _728 = fma(_621, _235, fma(_620, _228, _619 * _214));
    float _732 = inversesqrt(dot(vec3(_722, _725, _728), vec3(_722, _725, _728)));
    float _733 = _732 * _722;
    float _734 = _732 * _725;
    float _735 = _732 * _728;
    float _3170 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _736 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
    float _3181 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _737 = isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0));
    float _738 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _3197 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _3208 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _3219 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _755 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _773 = fma(_735, cbSceneParam._m0[5u].z, fma(_734, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _733));
    float _776 = fma(_735, cbSceneParam._m0[6u].z, fma(_734, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _733));
    float _779 = fma(_735, cbSceneParam._m0[7u].z, fma(_734, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _733));
    uint _793 = (_300 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _799 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0)))) * cbInstanceData._m0[_793].x;
    float _800 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0)))) * cbInstanceData._m0[_793].y;
    float _801 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0)))) * cbInstanceData._m0[_793].z;
    float _3230 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
    float _3241 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
    float _3252 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _804 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    vec4 _808 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _648, cbSceneParam._m0[86u].y * _649));
    float _811 = _808.x * TEXCOORD_5.w;
    float _812 = dot(vec3(_733, _734, _735), vec3(_512, _513, _514));
    float _815 = _812 * 2.0;
    float _819 = (_815 * _733) - _512;
    float _820 = (_815 * _734) - _513;
    float _821 = (_815 * _735) - _514;
    float _822 = dot(vec3(_512, _513, _514), vec3(_733, _734, _735));
    float _825 = abs(_822);
    float _3263 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _826 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _832 = sqrt(_737);
    float _844 = exp2((_832 * 5.0) * log2(1.0 - (_826 * 0.999000012874603271484375))) / (4.0 - (_832 * 3.0));
    float _876 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _880 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _884 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1186;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _911 = fma(_884, cbModelParam._m0[26u].z, fma(_880, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _876));
        float _915 = fma(_884, cbModelParam._m0[27u].z, fma(_880, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _876));
        float _919 = fma(_884, cbModelParam._m0[28u].z, fma(_880, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _876));
        float _944 = _876 + _733;
        float _945 = _880 + _734;
        float _946 = _884 + _735;
        float _956 = fma(_946, cbModelParam._m0[26u].z, fma(_945, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _944)) - _911;
        float _957 = fma(_946, cbModelParam._m0[27u].z, fma(_945, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _944)) - _915;
        float _958 = fma(_946, cbModelParam._m0[28u].z, fma(_945, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _944)) - _919;
        float _962 = inversesqrt(dot(vec3(_956, _957, _958), vec3(_956, _957, _958)));
        float _975 = ((_962 * _956) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_911 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _976 = ((_962 * _957) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_915 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _977 = ((_962 * _958) / cbModelParam._m0[34u].z) + ((((((_919 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_975, _976, _977), 0.0);
        float _1014 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_980.x + (-0.5));
        float _1016 = _1014 * (_980.y + (-0.5));
        float _1017 = _1014 * (_980.z + (-0.5));
        float _1024 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_987.x + (-0.5));
        float _1026 = _1024 * (_987.y + (-0.5));
        float _1027 = _1024 * (_987.z + (-0.5));
        float _1034 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_994.x + (-0.5));
        float _1036 = _1034 * (_994.y + (-0.5));
        float _1037 = _1034 * (_994.z + (-0.5));
        float _1044 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1001.x + (-0.5));
        float _1046 = _1044 * (_1001.y + (-0.5));
        float _1047 = _1044 * (_1001.z + (-0.5));
        float _1048 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1049 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = _1015 * 0.5;
        float _1052 = _1025 * 0.5;
        float _1053 = _1035 * 0.5;
        float _1054 = dot(vec3(_1051, _1052, _1053), vec3(_1051, _1052, _1053));
        float _1059 = (_1054 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1054);
        float _1068 = (dot(vec3(_733, _734, _735), vec3(_1059 * _1051, _1059 * _1052, _1059 * _1053)) + 1.0) * 0.5;
        float _3289 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1078 = sqrt(((_1052 * _1052) + (_1051 * _1051)) + (_1053 * _1053)) / (_1048 + 9.9999997473787516355514526367188e-06);
        float _3300 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _1080 = _1079 * 2.0;
        float _1084 = (1.0 - _1079) / (_1079 + 1.0);
        float _3311 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1085 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1094 = ((((1.0 - _1085) * (_1080 + 2.0)) * exp2(log2(isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * (_1080 + 1.0))) + _1085) * _1048;
        float _1095 = _1016 * 0.5;
        float _1096 = _1026 * 0.5;
        float _1097 = _1036 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(_733, _734, _735), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3322 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1049 + 9.9999997473787516355514526367188e-06);
        float _3333 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3344 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * (_1122 + 1.0))) + _1127) * _1049;
        float _1137 = _1017 * 0.5;
        float _1138 = _1027 * 0.5;
        float _1139 = _1037 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(_733, _734, _735), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3355 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3366 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3377 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) * (_1164 + 1.0))) + _1169) * _1050;
        _1186 = _1017;
        _1188 = _1016;
        _1189 = _1015;
        _1190 = _1027;
        _1191 = _1026;
        _1192 = _1025;
        _1193 = _1037;
        _1194 = _1036;
        _1195 = _1035;
        _1196 = _1050;
        _1197 = _1049;
        _1198 = _1048;
        _1199 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0)));
        _1200 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
    }
    else
    {
        _1186 = _1187;
        _1188 = _1187;
        _1189 = _1187;
        _1190 = _1187;
        _1191 = _1187;
        _1192 = _1187;
        _1193 = _1187;
        _1194 = _1187;
        _1195 = _1187;
        _1196 = _1187;
        _1197 = _1187;
        _1198 = _1187;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1227 = fma(_884, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _876));
        float _1231 = fma(_884, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _876));
        float _1235 = fma(_884, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _876));
        float _1258 = _876 + _733;
        float _1259 = _880 + _734;
        float _1260 = _884 + _735;
        float _1270 = fma(_1260, cbModelParam._m0[30u].z, fma(_1259, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1258)) - _1227;
        float _1271 = fma(_1260, cbModelParam._m0[31u].z, fma(_1259, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1258)) - _1231;
        float _1272 = fma(_1260, cbModelParam._m0[32u].z, fma(_1259, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1258)) - _1235;
        float _1276 = inversesqrt(dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272)));
        float _1289 = ((_1276 * _1270) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1227 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1290 = ((_1276 * _1271) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1231 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1291 = ((_1276 * _1272) / cbModelParam._m0[35u].z) + ((((((_1235 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1307 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        vec4 _1314 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1289, _1290, _1291), 0.0);
        float _1326 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1293.x + (-0.5));
        float _1328 = _1326 * (_1293.y + (-0.5));
        float _1329 = _1326 * (_1293.z + (-0.5));
        float _1336 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1300.x + (-0.5));
        float _1338 = _1336 * (_1300.y + (-0.5));
        float _1339 = _1336 * (_1300.z + (-0.5));
        float _1346 = exp2((_1307.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1307.x + (-0.5));
        float _1348 = _1346 * (_1307.y + (-0.5));
        float _1349 = _1346 * (_1307.z + (-0.5));
        float _1356 = exp2((_1314.w + (-0.5)) * 20.0) * 2.0;
        float _1357 = _1356 * (_1314.x + (-0.5));
        float _1358 = _1356 * (_1314.y + (-0.5));
        float _1359 = _1356 * (_1314.z + (-0.5));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = _1327 * 0.5;
        float _1364 = _1337 * 0.5;
        float _1365 = _1347 * 0.5;
        float _1366 = dot(vec3(_1363, _1364, _1365), vec3(_1363, _1364, _1365));
        float _1371 = (_1366 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1366);
        float _1379 = (dot(vec3(_733, _734, _735), vec3(_1371 * _1363, _1371 * _1364, _1371 * _1365)) + 1.0) * 0.5;
        float _3418 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1388 = sqrt(((_1364 * _1364) + (_1363 * _1363)) + (_1365 * _1365)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3429 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1390 = _1389 * 2.0;
        float _1394 = (1.0 - _1389) / (_1389 + 1.0);
        float _3440 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1395 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1404 = ((((1.0 - _1395) * (_1390 + 2.0)) * exp2(log2(isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0))) * (_1390 + 1.0))) + _1395) * _1360;
        float _1405 = _1328 * 0.5;
        float _1406 = _1338 * 0.5;
        float _1407 = _1348 * 0.5;
        float _1408 = dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407));
        float _1413 = (_1408 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1408);
        float _1421 = (dot(vec3(_733, _734, _735), vec3(_1413 * _1405, _1413 * _1406, _1413 * _1407)) + 1.0) * 0.5;
        float _3451 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1430 = sqrt(((_1406 * _1406) + (_1405 * _1405)) + (_1407 * _1407)) / (_1361 + 9.9999997473787516355514526367188e-06);
        float _3462 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
        float _1432 = _1431 * 2.0;
        float _1436 = (1.0 - _1431) / (_1431 + 1.0);
        float _3473 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
        float _1437 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
        float _1446 = ((((1.0 - _1437) * (_1432 + 2.0)) * exp2(log2(isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * (_1432 + 1.0))) + _1437) * _1361;
        float _1447 = _1329 * 0.5;
        float _1448 = _1339 * 0.5;
        float _1449 = _1349 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_733, _734, _735), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _3484 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _3495 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _3506 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * (_1474 + 1.0))) + _1479) * _1362;
        _1496 = _1329;
        _1497 = _1328;
        _1498 = _1327;
        _1499 = _1339;
        _1500 = _1338;
        _1501 = _1337;
        _1502 = _1349;
        _1503 = _1348;
        _1504 = _1347;
        _1505 = _1362;
        _1506 = _1361;
        _1507 = _1360;
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0)));
        _1509 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)));
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    }
    else
    {
        _1496 = _1187;
        _1497 = _1187;
        _1498 = _1187;
        _1499 = _1187;
        _1500 = _1187;
        _1501 = _1187;
        _1502 = _1187;
        _1503 = _1187;
        _1504 = _1187;
        _1505 = _1187;
        _1506 = _1187;
        _1507 = _1187;
        _1508 = 0.0;
        _1509 = 0.0;
        _1510 = 0.0;
    }
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1199)) + _1199;
    float _1521 = (cbModelParam._m0[1u].x * (_1509 - _1200)) + _1200;
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1201)) + _1201;
    float _1543 = fma(_1522, cbSceneParam._m0[89u].z, fma(_1521, cbSceneParam._m0[89u].y, _1520 * cbSceneParam._m0[89u].x));
    float _1546 = fma(_1522, cbSceneParam._m0[90u].z, fma(_1521, cbSceneParam._m0[90u].y, _1520 * cbSceneParam._m0[90u].x));
    float _1549 = fma(_1522, cbSceneParam._m0[91u].z, fma(_1521, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1520));
    float _1564 = _819 * 0.5;
    float _1565 = _820 * 0.5;
    float _1566 = _821 * 0.5;
    float _1567 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1570 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1497, _1500, _1503, _1506));
    float _1573 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1607;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1580 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1186, _1190, _1193, _1196));
        float _1584 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1188, _1191, _1194, _1197));
        float _1588 = dot(vec4(_1564, _1565, _1566, 1.0), vec4(_1189, _1192, _1195, _1198));
        float _1595 = dot(vec4(cbModelParam._m0[39u]), vec4(_1564, _1565, _1566, 1.0));
        _1607 = dot(vec3(isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0)), isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1607 = 1.0;
    }
    float _1618;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1609 = dot(vec4(cbModelParam._m0[40u]), vec4(_1564, _1565, _1566, 1.0));
        _1618 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1609) ? 0.0 : (isnan(0.0) ? _1609 : max(0.0, _1609))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1618 = 1.0;
    }
    float _1622 = (_1618 * cbModelParam._m0[1u].x) + (_1607 * (1.0 - cbModelParam._m0[1u].x));
    float _1632 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _737);
    float _1633 = isnan(_1632) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1632 : min(cbModelParam._m0[25u].z, _1632));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1680 = fma(_884, cbModelParam._m0[13u].z, fma(_880, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _876)) + cbModelParam._m0[13u].w;
        float _1684 = fma(_884, cbModelParam._m0[14u].z, fma(_880, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _876)) + cbModelParam._m0[14u].w;
        float _1688 = fma(_884, cbModelParam._m0[15u].z, fma(_880, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _876)) + cbModelParam._m0[15u].w;
        float _1691 = fma(_821, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _819));
        float _1694 = fma(_821, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _819));
        float _1697 = fma(_821, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _819));
        float _1725;
        if (_1691 > 0.0)
        {
            _1725 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1725 = frontier_phi_16_14_ladder;
        }
        float _1897;
        if (_1694 > 0.0)
        {
            _1897 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1897 = frontier_phi_25_21_ladder;
        }
        float _2132;
        if (_1697 > 0.0)
        {
            _2132 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2132 = frontier_phi_36_32_ladder;
        }
        float _2134 = isnan(_1897) ? _1725 : (isnan(_1725) ? _1897 : min(_1725, _1897));
        float _2135 = isnan(_2132) ? _2134 : (isnan(_2134) ? _2132 : min(_2134, _2132));
        float _2139 = (_2135 * _1691) + _1680;
        float _2140 = (_2135 * _1694) + _1684;
        float _2141 = (_2135 * _1697) + _1688;
        float _2142 = _2135 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2142;
        float _2146 = _2142 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 > _2146) || ((_2140 < _2144) || ((_2139 < _2144) || (_2139 > _2146))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2141, cbModelParam._m0[9u].z, fma(_2140, cbModelParam._m0[9u].y, _2139 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2141, cbModelParam._m0[10u].z, fma(_2140, cbModelParam._m0[10u].y, _2139 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2141, cbModelParam._m0[11u].z, fma(_2140, cbModelParam._m0[11u].y, _2139 * cbModelParam._m0[11u].x))), _1633);
            frontier_phi_15_36_ladder = _2291.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _2291.x * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _2291.y * cbModelParam._m0[1u].y;
        }
        _1713 = frontier_phi_15_36_ladder_1;
        _1715 = frontier_phi_15_36_ladder_2;
        _1717 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_819, _820, _821), _1633);
        _1713 = _1701.x * cbModelParam._m0[1u].y;
        _1715 = _1701.y * cbModelParam._m0[1u].y;
        _1717 = _1701.z * cbModelParam._m0[1u].y;
    }
    float _1721 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _737);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1721 : min(cbModelParam._m0[25u].w, _1721));
    float _1814;
    float _1816;
    float _1818;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1778 = fma(_884, cbModelParam._m0[21u].z, fma(_880, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _876)) + cbModelParam._m0[21u].w;
        float _1782 = fma(_884, cbModelParam._m0[22u].z, fma(_880, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _876)) + cbModelParam._m0[22u].w;
        float _1786 = fma(_884, cbModelParam._m0[23u].z, fma(_880, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _876)) + cbModelParam._m0[23u].w;
        float _1789 = fma(_821, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _819));
        float _1792 = fma(_821, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _819));
        float _1795 = fma(_821, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _819));
        float _1902;
        if (_1789 > 0.0)
        {
            _1902 = abs((1.0 - _1778) / _1789);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1778 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1902 = frontier_phi_27_23_ladder;
        }
        float _2159;
        if (_1792 > 0.0)
        {
            _2159 = abs((1.0 - _1782) / _1792);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1792 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1782 + 1.0) / _1792);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2159 = frontier_phi_38_34_ladder;
        }
        float _2463;
        if (_1795 > 0.0)
        {
            _2463 = abs((1.0 - _1786) / _1795);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1795 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1786 + 1.0) / _1795);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2463 = frontier_phi_49_44_ladder;
        }
        float _2465 = isnan(_2159) ? _1902 : (isnan(_1902) ? _2159 : min(_1902, _2159));
        float _2466 = isnan(_2463) ? _2465 : (isnan(_2465) ? _2463 : min(_2465, _2463));
        float _2470 = (_2466 * _1789) + _1778;
        float _2471 = (_2466 * _1792) + _1782;
        float _2472 = (_2466 * _1795) + _1786;
        float _2473 = _2466 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2473;
        float _2476 = _2473 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2472 > _2476) || ((_2472 < _2474) || ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 < _2474) || (_2470 > _2476))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2472, cbModelParam._m0[17u].z, fma(_2471, cbModelParam._m0[17u].y, _2470 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2472, cbModelParam._m0[18u].z, fma(_2471, cbModelParam._m0[18u].y, _2470 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2472, cbModelParam._m0[19u].z, fma(_2471, cbModelParam._m0[19u].y, _2470 * cbModelParam._m0[19u].x))), _1722);
            frontier_phi_24_49_ladder = _2645.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2645.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2645.x * cbModelParam._m0[1u].z;
        }
        _1814 = frontier_phi_24_49_ladder_2;
        _1816 = frontier_phi_24_49_ladder;
        _1818 = frontier_phi_24_49_ladder_1;
    }
    else
    {
        vec4 _1798 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_819, _820, _821), _1722);
        _1814 = _1798.x * cbModelParam._m0[1u].z;
        _1816 = _1798.y * cbModelParam._m0[1u].z;
        _1818 = _1798.z * cbModelParam._m0[1u].z;
    }
    float _1830 = ((((1.0 - _844) * ((_832 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_844 * _832)) * _811;
    float _1831 = _1830 * ((cbModelParam._m0[1u].w * (_1814 - _1713)) + _1713);
    float _1832 = _1830 * ((cbModelParam._m0[1u].w * (_1816 - _1715)) + _1715);
    float _1833 = _1830 * ((cbModelParam._m0[1u].w * (_1818 - _1717)) + _1717);
    float _1836 = fma(_1833, cbSceneParam._m0[89u].z, fma(_1832, cbSceneParam._m0[89u].y, _1831 * cbSceneParam._m0[89u].x));
    float _1839 = fma(_1833, cbSceneParam._m0[90u].z, fma(_1832, cbSceneParam._m0[90u].y, _1831 * cbSceneParam._m0[90u].x));
    float _1842 = fma(_1833, cbSceneParam._m0[91u].z, fma(_1832, cbSceneParam._m0[91u].y, _1831 * cbSceneParam._m0[91u].x));
    uvec4 _1852 = floatBitsToUint(cbInstanceData._m0[_300 + 5u]);
    uint _1854 = _1852.x * 14u;
    uint _1855 = _1854 + 13u;
    float _1860 = _811 + (-1.0);
    float _1863 = (cbLight._m0[_1855].x * _1860) + 1.0;
    float _1864 = (cbLight._m0[_1855].y * _1860) + 1.0;
    uint _1866 = _1854 + 4u;
    float _1877 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_733, _734, _735));
    float _1880 = isnan(1.0) ? _1863 : (isnan(_1863) ? 1.0 : min(_1863, 1.0));
    uint _1881 = _1854 + 5u;
    uint _1887 = _1854 | 1u;
    float _1893 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_733, _734, _735));
    float _1896 = isnan(1.0) ? _1864 : (isnan(_1864) ? 1.0 : min(_1864, 1.0));
    float _1961;
    float _1962;
    float _1963;
    if (_738 == 0.0)
    {
        float _3642 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _3653 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1915 = (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.3183098733425140380859375;
        float _1917 = (isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0))) * 0.3183098733425140380859375;
        _1961 = ((cbLight._m0[_1881].x * _1896) * _1917) + ((cbLight._m0[_1866].x * _1880) * _1915);
        _1962 = ((_1896 * cbLight._m0[_1881].y) * _1917) + ((_1880 * cbLight._m0[_1866].y) * _1915);
        _1963 = ((_1896 * cbLight._m0[_1881].z) * _1917) + ((_1880 * cbLight._m0[_1866].z) * _1915);
    }
    else
    {
        float _1927 = _1877 + _738;
        float _1930 = (_738 * 2.0) + 1.0;
        float _1931 = (isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) / _1930;
        float _1938 = _1893 + _738;
        float _1940 = (isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0))) / _1930;
        _1961 = (((_1940 * cbLight._m0[_1881].x) * _1896) + ((_1931 * cbLight._m0[_1866].x) * _1880)) * 0.3183098733425140380859375;
        _1962 = (((_1940 * cbLight._m0[_1881].y) * _1896) + ((_1931 * cbLight._m0[_1866].y) * _1880)) * 0.3183098733425140380859375;
        _1963 = (((_1940 * cbLight._m0[_1881].z) * _1896) + ((_1931 * cbLight._m0[_1866].z) * _1880)) * 0.3183098733425140380859375;
    }
    uint _1967 = _1854 + 8u;
    float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _737) * 0.949999988079071044921875);
    float _1984 = _1983 * _1983;
    float _1985 = cbLight._m0[_1854].x + _512;
    float _1986 = cbLight._m0[_1854].y + _513;
    float _1987 = cbLight._m0[_1854].z + _514;
    float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
    float _1992 = _1991 * _1985;
    float _1993 = _1991 * _1986;
    float _1994 = _1991 * _1987;
    float _1995 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1854].xyz));
    float _3674 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
    float _1998 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
    float _3685 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _1999 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _2000 = dot(vec3(_733, _734, _735), vec3(_1992, _1993, _1994));
    float _3696 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2003 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _2004 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_1992, _1993, _1994));
    float _3707 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2008 = _1984 * _1984;
    float _2012 = ((_2003 * _2003) * (_2008 + (-1.0))) + 1.0;
    float _2023 = (exp2(log2(1.0 - (isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2024 = 1.0 - _1984;
    float _2035 = (0.5 / (((_1999 * ((_1998 * _2024) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2024) + _1984) * _1998))) * _1998;
    float _3718 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2037 = (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_2008 / ((_2012 * _2012) * 3.141590118408203125));
    uint _2050 = _1854 + 9u;
    float _2064 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1887].w)) * _737) * 0.949999988079071044921875);
    float _2065 = _2064 * _2064;
    float _2066 = cbLight._m0[_1887].x + _512;
    float _2067 = cbLight._m0[_1887].y + _513;
    float _2068 = cbLight._m0[_1887].z + _514;
    float _2072 = inversesqrt(dot(vec3(_2066, _2067, _2068), vec3(_2066, _2067, _2068)));
    float _2073 = _2072 * _2066;
    float _2074 = _2072 * _2067;
    float _2075 = _2072 * _2068;
    float _2076 = dot(vec3(_733, _734, _735), vec3(cbLight._m0[_1887].xyz));
    float _3729 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
    float _2079 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _2080 = dot(vec3(_733, _734, _735), vec3(_2073, _2074, _2075));
    float _3740 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
    float _2083 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
    float _2084 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2073, _2074, _2075));
    float _3751 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
    float _2088 = _2065 * _2065;
    float _2092 = ((_2083 * _2083) * (_2088 + (-1.0))) + 1.0;
    float _2101 = (exp2(log2(1.0 - (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2102 = 1.0 - _2065;
    float _2112 = (0.5 / (((_1999 * ((_2079 * _2102) + _2065)) + 9.9999999392252902907785028219223e-09) + (((_1999 * _2102) + _2065) * _2079))) * _2079;
    float _3762 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2114 = (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))) * (_2088 / ((_2092 * _2092) * 3.141590118408203125));
    float _2124 = (((_2101 * cbLight._m0[_2050].x) * _2114) * _1896) + (((_2023 * cbLight._m0[_1967].x) * _2037) * _1880);
    float _2125 = (((_2101 * cbLight._m0[_2050].y) * _2114) * _1896) + (((_2023 * cbLight._m0[_1967].y) * _2037) * _1880);
    float _2126 = (((_2101 * cbLight._m0[_2050].z) * _2114) * _1896) + (((_2023 * cbLight._m0[_1967].z) * _2037) * _1880);
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    float _2270;
    float _2272;
    if (_1852.y == 0u)
    {
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2203;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2203;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2203;
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.x;
        uint _2230 = uint((float(_2218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _649) / _2219))) + floor(float(uint(cbSceneParam._m0[85u].x * _648) / _2219)));
        float _2240 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        uint _2244 = uint(isnan(14.0) ? _2241 : (isnan(_2241) ? 14.0 : min(_2241, 14.0)));
        uint _2251 = _2218.z;
        float _2300;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        if (((((1u << ((_2251 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2244 << 2u) + (_2230 << 6u)) >> 2u)).x) == 0u) || ((_2251 & 240u) == 0u))
        {
            _2300 = 0.0;
            _2302 = 0.0;
            _2304 = 0.0;
            _2306 = 0.0;
            _2308 = 0.0;
            _2310 = 0.0;
        }
        else
        {
            float _2301;
            float _2303;
            float _2305;
            float _2307;
            float _2309;
            float _2311;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            float _2493 = 0.0;
            float _2494 = 0.0;
            uint _2495 = 0u;
            uint _2504;
            bool _2505;
            for (;;)
            {
                _2504 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2495 << 2u)) >> 2u)).x;
                _2505 = _2504 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2505)
                {
                    frontier_phi_55_pred = _2494;
                    frontier_phi_55_pred_1 = _2493;
                    frontier_phi_55_pred_2 = _2492;
                    frontier_phi_55_pred_3 = _2490;
                    frontier_phi_55_pred_4 = _2489;
                    frontier_phi_55_pred_5 = _2491;
                }
                else
                {
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    float _2707;
                    uint _2708;
                    _2702 = _2489;
                    _2703 = _2490;
                    _2704 = _2491;
                    _2705 = _2492;
                    _2706 = _2493;
                    _2707 = _2494;
                    _2708 = _2504;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    for (;;)
                    {
                        uint _2712 = uint(findLSB(_2708)) + (_2495 << 5u);
                        uint _2709 = (_2708 + 4294967295u) & _2708;
                        uint _2714 = _2712 * 48u;
                        vec4 _2728 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        uint _2734 = (_2712 * 48u) + 4u;
                        vec4 _2747 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        float _2748 = _2747.x;
                        float _2749 = _2747.y;
                        float _2750 = _2747.z;
                        uint _2753 = (_2712 * 48u) + 8u;
                        vec3 _2764 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2753)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2753 + 2u)).x));
                        uint _2769 = (_2712 * 48u) + 12u;
                        vec2 _2777 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x));
                        float _2783 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
                        float _2784 = _2783 * _2204;
                        float _2785 = _2783 * _2205;
                        float _2786 = _2783 * _2206;
                        float _2787 = _2728.x - _2204;
                        float _2788 = _2728.y - _2205;
                        float _2789 = _2728.z - _2206;
                        float _2790 = dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789));
                        float _2793 = inversesqrt(_2790);
                        float _2794 = _2793 * _2787;
                        float _2795 = _2793 * _2788;
                        float _2796 = _2793 * _2789;
                        float _2797 = dot(vec3(_773, _776, _779), vec3(_2794, _2795, _2796));
                        float _2802 = 1.0 - (_2790 * _2728.w);
                        float _3783 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2803 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                        float _2804 = sqrt(_2790) * _2747.w;
                        float _2807 = 1.39999997615814208984375 / (_2804 + 1.39999997615814208984375);
                        float _2808 = _2807 * _2807;
                        float _2809 = 1.0 - _2808;
                        float _2811 = (_2809 * _2809) * _738;
                        float _2814 = ((_2809 * _2797) + _2808) + _2811;
                        float _2819 = _2804 * _2804;
                        float _2824 = ((isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))) * _2803) / (((_2811 * 2.0) + 1.0) * ((_2819 * 0.699999988079071044921875) + 1.0));
                        float _2828 = dot(vec3(_2794, _2795, _2796), vec3(_2784, _2785, _2786));
                        float _3799 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2835 = dot(vec3((-0.0) - _2784, (-0.0) - _2785, (-0.0) - _2786), vec3(_773, _776, _779)) + 1.0;
                        float _2837 = (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))) * 0.5;
                        float _2844 = ((_2837 * _2837) * _2777.x) * exp2((_2777.y * 32.0) * log2(isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))));
                        float _2846 = _738 / (_738 + 1.0);
                        float _2862 = (-0.0) - _2204;
                        float _2863 = (-0.0) - _2205;
                        float _2864 = (-0.0) - _2206;
                        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
                        float _2869 = _2868 * _2862;
                        float _2870 = _2868 * _2863;
                        float _2871 = _2868 * _2864;
                        float _2879 = exp2(log2(1.0 / ((_2819 * 3.5) + 5.0)) * 0.25);
                        float _2880 = 1.0 - _832;
                        float _2887 = sqrt(1.0 - ((1.0 - (_2880 * _2880)) * (1.0 - (_2879 * _2879))));
                        float _2888 = _2887 * _2887;
                        float _2889 = _2888 * _2888;
                        float _2890 = _2869 + _2794;
                        float _2891 = _2870 + _2795;
                        float _2892 = _2871 + _2796;
                        float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                        float _2900 = dot(vec3(_773, _776, _779), vec3(_2869, _2870, _2871));
                        float _3815 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                        float _2903 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
                        float _2904 = dot(vec3(_773, _776, _779), vec3(_2896 * _2890, _2896 * _2891, _2896 * _2892));
                        float _3826 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                        float _2907 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
                        float _2911 = ((_2907 * _2907) * (_2889 + (-1.0))) + 1.0;
                        float _2912 = _2807 * _2888;
                        float _2913 = _2912 * _2912;
                        float _2916 = ((1.0 - _2913) * _2797) + _2913;
                        float _3837 = isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0));
                        float _2917 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
                        float _2918 = 1.0 - _2888;
                        float _2928 = (0.5 / (((_2917 * ((_2903 * _2918) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2917 * _2918) + _2888) * _2903))) * _2917;
                        float _3848 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                        float _2939 = (((_2889 * 3.1415927410125732421875) * (isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0)))) / ((_2911 * _2911) * ((_2819 * 2.1991131305694580078125) + 3.141590118408203125))) * _2803;
                        _2653 = (((((_2748 * 0.3183098733425140380859375) * _2846) * _2844) + _2748) * _2824) + _2705;
                        _2654 = (((((_2749 * 0.3183098733425140380859375) * _2846) * _2844) + _2749) * _2824) + _2706;
                        _2655 = (((((_2750 * 0.3183098733425140380859375) * _2846) * _2844) + _2750) * _2824) + _2707;
                        _2650 = (_2939 * _2764.x) + _2702;
                        _2651 = (_2939 * _2764.y) + _2703;
                        _2652 = (_2939 * _2764.z) + _2704;
                        if (_2709 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2702 = _2650;
                            _2703 = _2651;
                            _2704 = _2652;
                            _2705 = _2653;
                            _2706 = _2654;
                            _2707 = _2655;
                            _2708 = _2709;
                        }
                    }
                    frontier_phi_55_pred = _2655;
                    frontier_phi_55_pred_1 = _2654;
                    frontier_phi_55_pred_2 = _2653;
                    frontier_phi_55_pred_3 = _2651;
                    frontier_phi_55_pred_4 = _2650;
                    frontier_phi_55_pred_5 = _2652;
                }
                _2311 = frontier_phi_55_pred;
                _2309 = frontier_phi_55_pred_1;
                _2307 = frontier_phi_55_pred_2;
                _2303 = frontier_phi_55_pred_3;
                _2301 = frontier_phi_55_pred_4;
                _2305 = frontier_phi_55_pred_5;
                uint _2496 = _2495 + 1u;
                if (_2496 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2489 = _2301;
                    _2490 = _2303;
                    _2491 = _2305;
                    _2492 = _2307;
                    _2493 = _2309;
                    _2494 = _2311;
                    _2495 = _2496;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2300 = _2301;
            _2302 = _2303;
            _2304 = _2305;
            _2306 = _2307;
            _2308 = _2309;
            _2310 = _2311;
        }
        float _2315 = isnan(1.0) ? _811 : (isnan(_811) ? 1.0 : min(_811, 1.0));
        _2262 = (_2315 * _2306) + _1961;
        _2264 = (_2315 * _2308) + _1962;
        _2266 = (_2315 * _2310) + _1963;
        _2268 = ((_2300 * 0.039999999105930328369140625) * _2315) + _2124;
        _2270 = ((_2302 * 0.039999999105930328369140625) * _2315) + _2125;
        _2272 = ((_2304 * 0.039999999105930328369140625) * _2315) + _2126;
    }
    else
    {
        _2262 = _1961;
        _2264 = _1962;
        _2266 = _1963;
        _2268 = _2124;
        _2270 = _2125;
        _2272 = _2126;
    }
    float _2386;
    float _2387;
    float _2388;
    if (_738 > 0.0)
    {
        uint _2322 = _1854 + 4u;
        float _2328 = (-0.0) - _512;
        float _2329 = (-0.0) - _513;
        float _2330 = (-0.0) - _514;
        float _2331 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2328, _2329, _2330));
        float _3864 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
        float _2335 = _822 + 1.0;
        float _2337 = (isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0))) * 0.5;
        float _2342 = _2337 * _2337;
        float _2343 = _2342 * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 32.0);
        float _2345 = _738 / (_738 + 1.0);
        float _2346 = isnan(_1863) ? 1.0 : (isnan(1.0) ? _1863 : min(1.0, _1863));
        uint _2356 = _1854 + 5u;
        float _2362 = dot(vec3(cbLight._m0[_1887].xyz), vec3(_2328, _2329, _2330));
        float _3885 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
        float _2369 = _2342 * exp2(log2(isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0))) * 32.0);
        float _2370 = isnan(_1864) ? 1.0 : (isnan(1.0) ? _1864 : min(1.0, _1864));
        _2386 = ((((_2369 * cbLight._m0[_2356].x) * _2345) * _2370) + (((_2343 * cbLight._m0[_2322].x) * _2345) * _2346)) * 0.3183098733425140380859375;
        _2387 = ((((_2369 * cbLight._m0[_2356].y) * _2345) * _2370) + (((_2343 * cbLight._m0[_2322].y) * _2345) * _2346)) * 0.3183098733425140380859375;
        _2388 = ((((_2369 * cbLight._m0[_2356].z) * _2345) * _2370) + (((_2343 * cbLight._m0[_2322].z) * _2345) * _2346)) * 0.3183098733425140380859375;
    }
    else
    {
        _2386 = 0.0;
        _2387 = 0.0;
        _2388 = 0.0;
    }
    float _3901 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _3912 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _3923 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _3934 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _2403 = (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0))) * ((_2262 + ((isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0))) * _811)) + _2386);
    float _2404 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * ((_2264 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _811)) + _2387);
    float _2405 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * ((_2266 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _811)) + _2388);
    float _2409 = 0.959999978542327880859375 - (exp2(log2(1.0 - _826) * 5.0) * 0.959999978542327880859375);
    float _2434 = _648 / cbSceneParam._m0[86u].x;
    float _2435 = _649 / cbSceneParam._m0[86u].y;
    vec4 _2449 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2434, _2435, (log2((isnan(cbSceneParam._m0[77u].w) ? _755 : (isnan(_755) ? cbSceneParam._m0[77u].w : min(_755, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2451 = _2449.x;
    float _2452 = _2449.y;
    float _2453 = _2449.z;
    float _2454 = _2449.w;
    float _2547;
    float _2549;
    float _2551;
    float _2553;
    if (_755 > cbSceneParam._m0[78u].w)
    {
        float _2510 = isnan(_755) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _755 : min(cbSceneParam._m0[80u].w, _755));
        float _2511 = _2510 / _755;
        float _2522 = _2511 * _292;
        float _2523 = _293 * _2511;
        float _2524 = (-0.0) - _2523;
        float _2525 = _2511 * _294;
        float _2527 = (cbSceneParam._m0[77u].w * _2524) / _2510;
        float _2528 = _2527 + cbSceneParam._m0[79u].w;
        float _2529 = cbSceneParam._m0[79u].w - _2523;
        float _2535 = sqrt(((_2522 * _2522) + (_2523 * _2523)) + (_2525 * _2525));
        float _2538 = (1.0 - (cbSceneParam._m0[77u].w / _2510)) * _2535;
        float _2543 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2545 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2944;
        if (abs((_2524 - _2527) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2944 = ((((_2528 > 0.0) ? exp2(_2543 * _2528) : (2.0 - exp2(_2545 * _2528))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2538;
        }
        else
        {
            float _2675 = 1.0 / cbSceneParam._m0[80u].x;
            float _2676 = isnan(_2529) ? _2528 : (isnan(_2528) ? _2529 : max(_2528, _2529));
            float _2677 = isnan(_2529) ? _2528 : (isnan(_2528) ? _2529 : min(_2528, _2529));
            float _2686 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : min(_2676, 0.0));
            float _2687 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : min(_2677, 0.0));
            _2944 = ((abs(_2535 / _2524) * cbSceneParam._m0[80u].y) * ((((_2686 - _2687) * 2.0) - ((exp2(_2543 * (isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0)))) - exp2(_2543 * (isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0))))) * _2675)) - ((exp2(_2545 * _2686) - exp2(_2545 * _2687)) * _2675))) + (_2538 * cbSceneParam._m0[80u].z);
        }
        vec4 _2946 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2434, _2435, 1.0), 0.0);
        float _2955 = exp2((_2944 * (-1.44269502162933349609375)) * (1.0 - _2946.w));
        float _2956 = log2(_2955);
        float _2972 = log2(_2454);
        _2547 = (exp2(_2972 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].x)) * _2946.x) / cbSceneParam._m0[78u].x)) + _2451;
        _2549 = (exp2(_2972 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].y)) * _2946.y) / cbSceneParam._m0[78u].y)) + _2452;
        _2551 = (exp2(_2972 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2956 * cbSceneParam._m0[78u].z)) * _2946.z) / cbSceneParam._m0[78u].z)) + _2453;
        _2553 = _2955 * _2454;
    }
    else
    {
        _2547 = _2451;
        _2549 = _2452;
        _2551 = _2453;
        _2553 = _2454;
    }
    bool _2565 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2566 = log2(_2553);
    float _2573 = exp2(_2566 * cbSceneParam._m0[78u].x) * ((_2403 + ((_2268 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _672.x) * _2409) - _2403) * _718));
    float _2574 = exp2(_2566 * cbSceneParam._m0[78u].y) * ((_2404 + ((_2270 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _672.y) * _2409) - _2404) * _718));
    float _2575 = exp2(_2566 * cbSceneParam._m0[78u].z) * ((_2405 + ((_2272 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1622)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _672.z) * _2409) - _2405) * _718));
    vec4 _2583 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_648, _649));
    float _2585 = _2583.x;
    float _2606 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2585)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2585))) - _755) * cbMtdParam._m0[17u].y;
    float _3985 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
    float _2608 = (cbInstanceData._m0[_300 + 6u].w * (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0)))) * (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0)));
    float _2617 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2617 * (_2565 ? _2573 : (_2573 + (cbSceneParam._m0[72u].w * _2547)));
    SV_Target.y = _2617 * (_2565 ? _2574 : (_2574 + (cbSceneParam._m0[72u].w * _2549)));
    SV_Target.z = _2617 * (_2565 ? _2575 : (_2575 + (cbSceneParam._m0[72u].w * _2551)));
    SV_Target.w = _2608;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2608;
}


