#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1166;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _210 = _209 * _201;
    float _211 = _209 * _202;
    float _212 = _209 * _203;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    float _280 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _290 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _280);
    float _291 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _280);
    float _292 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _280);
    uint _298 = uint(roundEven(NORMAL.w)) * 13u;
    uint _303 = _298 + 1u;
    uint _307 = _298 + 2u;
    float _316 = sqrt(((cbInstanceData._m0[_303].x * cbInstanceData._m0[_303].x) + (cbInstanceData._m0[_298].x * cbInstanceData._m0[_298].x)) + (cbInstanceData._m0[_307].x * cbInstanceData._m0[_307].x));
    float _317 = _316 * TEXCOORD.z;
    float _318 = _316 * TEXCOORD.w;
    vec4 _332 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _341 = (_332.x * 2.0) + (-1.0);
    float _343 = (_332.y * 2.0) + (-1.0);
    float _344 = dot(vec2(_341, _343), vec2(_341, _343));
    float _3053 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _350 = sqrt(1.0 - (isnan(1.0) ? _3053 : (isnan(_3053) ? 1.0 : min(_3053, 1.0))));
    float _353 = fma(_350, _231, fma(_343, _224, _341 * _210));
    float _356 = fma(_350, _232, fma(_343, _225, _341 * _211));
    float _359 = fma(_350, _233, fma(_343, _226, _341 * _212));
    float _363 = inversesqrt(dot(vec3(_353, _356, _359), vec3(_353, _356, _359)));
    vec4 _396 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _401 = _396.w;
    float _413 = dot(vec3(_290, _291, _292), vec3(_210, _211, _212));
    float _416 = dot(vec3(_290, _291, _292), vec3(_224, _225, _226));
    float _419 = dot(vec3(_290, _291, _292), vec3(_231, _232, _233));
    float _425 = inversesqrt(dot(vec3(_413, _416, _419), vec3(_413, _416, _419)));
    float _447 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _467 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_413 * cbMtdParam._m0[14u].x) * _425) * _447) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_416 * cbMtdParam._m0[14u].x) * _425) * _447) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _490 = inversesqrt(dot(vec3(_290, _291, _292), vec3(_290, _291, _292)));
    float _491 = _490 * _290;
    float _492 = _490 * _291;
    float _493 = _490 * _292;
    float _494 = dot(vec4(_491, _492, _493, 0.0), vec4(_231, _232, _233, 0.0));
    float _497 = _494 - cbMtdParam._m0[15u].z;
    float _3064 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _504 = exp2(log2(1.0 - (isnan(1.0) ? _3064 : (isnan(_3064) ? 1.0 : min(_3064, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _519 = ((((_396.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _467.x) * cbMtdParam._m0[9u].x) * ((_504 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _524 = ((((_396.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _467.y) * cbMtdParam._m0[9u].y) * ((_504 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _529 = ((((_396.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _467.z) * cbMtdParam._m0[9u].z) * ((_504 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _538 = (cbMtdParam._m0[18u].w + 1.0) * (TEXCOORD_8 - ((cbMtdParam._m0[18u].z * (1.0 - TEXCOORD_8)) * (texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _317) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _318) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625)));
    float _3080 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _539 = isnan(1.0) ? _3080 : (isnan(_3080) ? 1.0 : min(_3080, 1.0));
    float _546 = (_539 * (cbMtdParam._m0[11u].x - _519)) + _519;
    float _547 = ((cbMtdParam._m0[11u].y - _524) * _539) + _524;
    float _548 = ((cbMtdParam._m0[11u].z - _529) * _539) + _529;
    vec4 _560 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _317) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _318) + cbTextureTilingScale._m0[9u].w));
    float _567 = (_560.x * 2.0) + (-1.0);
    float _568 = (_560.y * 2.0) + (-1.0);
    float _569 = dot(vec2(_567, _568), vec2(_567, _568));
    float _3091 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _583 = (cbMtdParam._m0[16u].y + _332.z) + cbMtdParam._m0[17u].z;
    float _586 = ((_560.z - _583) * _539) + _583;
    float _598 = (((_567 - _341) + (cbMtdParam._m0[14u].z * _341)) * _539) + _341;
    float _599 = (((_568 - _343) + (cbMtdParam._m0[14u].z * _343)) * _539) + _343;
    float _600 = (_539 * (sqrt(1.0 - (isnan(1.0) ? _3091 : (isnan(_3091) ? 1.0 : min(_3091, 1.0)))) - _350)) + _350;
    float _616 = cbMtdParam._m0[16u].w * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x;
    float _618 = _616 - (_616 * _539);
    float _627 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _628 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _638 = cbSceneParam._m0[86u].x * ((_627 / cbSceneParam._m0[86u].x) + ((_363 * _353) * cbMtdParam._m0[18u].y));
    float _639 = cbSceneParam._m0[86u].y * ((_628 / cbSceneParam._m0[86u].y) + ((_363 * _356) * cbMtdParam._m0[18u].y));
    float _646 = isnan(cbInstanceData._m0[8u].x) ? _638 : (isnan(_638) ? cbInstanceData._m0[8u].x : max(_638, cbInstanceData._m0[8u].x));
    float _647 = isnan(cbInstanceData._m0[8u].y) ? _639 : (isnan(_639) ? cbInstanceData._m0[8u].y : max(_639, cbInstanceData._m0[8u].y));
    vec4 _651 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _646 : (isnan(_646) ? cbInstanceData._m0[8u].z : min(_646, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _647 : (isnan(_647) ? cbInstanceData._m0[8u].w : min(_647, cbInstanceData._m0[8u].w))));
    float _684 = _494 - cbMtdParam._m0[15u].x;
    float _3122 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _694 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3138 = isnan(0.0) ? _694 : (isnan(_694) ? 0.0 : max(_694, 0.0));
    float _695 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
    float _697 = _695 - (_539 * _695);
    float _701 = fma(_600, _231, fma(_599, _224, _598 * _210));
    float _704 = fma(_600, _232, fma(_599, _225, _598 * _211));
    float _707 = fma(_600, _233, fma(_599, _226, _598 * _212));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    float _712 = _711 * _701;
    float _713 = _711 * _704;
    float _714 = _711 * _707;
    float _3149 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _715 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
    float _3160 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
    float _716 = isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0));
    float _717 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3176 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _3187 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3198 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _734 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _752 = fma(_714, cbSceneParam._m0[5u].z, fma(_713, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _712));
    float _755 = fma(_714, cbSceneParam._m0[6u].z, fma(_713, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _712));
    float _758 = fma(_714, cbSceneParam._m0[7u].z, fma(_713, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _712));
    uint _772 = (_298 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _778 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3176 : (isnan(_3176) ? 1.0 : min(_3176, 1.0)))) * cbInstanceData._m0[_772].x;
    float _779 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0)))) * cbInstanceData._m0[_772].y;
    float _780 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0)))) * cbInstanceData._m0[_772].z;
    float _3209 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _781 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _3220 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _782 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _783 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    vec4 _787 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _627, cbSceneParam._m0[86u].y * _628));
    float _790 = _787.x * TEXCOORD_5.w;
    float _791 = dot(vec3(_712, _713, _714), vec3(_491, _492, _493));
    float _794 = _791 * 2.0;
    float _798 = (_794 * _712) - _491;
    float _799 = (_794 * _713) - _492;
    float _800 = (_794 * _714) - _493;
    float _801 = dot(vec3(_491, _492, _493), vec3(_712, _713, _714));
    float _804 = abs(_801);
    float _3242 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _805 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
    float _811 = sqrt(_716);
    float _823 = exp2((_811 * 5.0) * log2(1.0 - (_805 * 0.999000012874603271484375))) / (4.0 - (_811 * 3.0));
    float _855 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _859 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _863 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1165;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _890 = fma(_863, cbModelParam._m0[26u].z, fma(_859, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _855));
        float _894 = fma(_863, cbModelParam._m0[27u].z, fma(_859, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _855));
        float _898 = fma(_863, cbModelParam._m0[28u].z, fma(_859, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _855));
        float _923 = _855 + _712;
        float _924 = _859 + _713;
        float _925 = _863 + _714;
        float _935 = fma(_925, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _923)) - _890;
        float _936 = fma(_925, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _923)) - _894;
        float _937 = fma(_925, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _923)) - _898;
        float _941 = inversesqrt(dot(vec3(_935, _936, _937), vec3(_935, _936, _937)));
        float _954 = ((_941 * _935) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_890 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_941 * _936) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_894 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_941 * _937) / cbModelParam._m0[34u].z) + ((((((_898 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_954, _955, _956), 0.0);
        float _993 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_959.x + (-0.5));
        float _995 = _993 * (_959.y + (-0.5));
        float _996 = _993 * (_959.z + (-0.5));
        float _1003 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_966.x + (-0.5));
        float _1005 = _1003 * (_966.y + (-0.5));
        float _1006 = _1003 * (_966.z + (-0.5));
        float _1013 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_973.x + (-0.5));
        float _1015 = _1013 * (_973.y + (-0.5));
        float _1016 = _1013 * (_973.z + (-0.5));
        float _1023 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1024 = _1023 * (_980.x + (-0.5));
        float _1025 = _1023 * (_980.y + (-0.5));
        float _1026 = _1023 * (_980.z + (-0.5));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = _994 * 0.5;
        float _1031 = _1004 * 0.5;
        float _1032 = _1014 * 0.5;
        float _1033 = dot(vec3(_1030, _1031, _1032), vec3(_1030, _1031, _1032));
        float _1038 = (_1033 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1033);
        float _1047 = (dot(vec3(_712, _713, _714), vec3(_1038 * _1030, _1038 * _1031, _1038 * _1032)) + 1.0) * 0.5;
        float _3268 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1057 = sqrt(((_1031 * _1031) + (_1030 * _1030)) + (_1032 * _1032)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3279 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3290 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * (_1059 + 1.0))) + _1064) * _1027;
        float _1074 = _995 * 0.5;
        float _1075 = _1005 * 0.5;
        float _1076 = _1015 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_712, _713, _714), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3301 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3312 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3323 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0))) * (_1101 + 1.0))) + _1106) * _1028;
        float _1116 = _996 * 0.5;
        float _1117 = _1006 * 0.5;
        float _1118 = _1016 * 0.5;
        float _1119 = dot(vec3(_1116, _1117, _1118), vec3(_1116, _1117, _1118));
        float _1124 = (_1119 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1119);
        float _1132 = (dot(vec3(_712, _713, _714), vec3(_1124 * _1116, _1124 * _1117, _1124 * _1118)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1141 = sqrt(((_1117 * _1117) + (_1116 * _1116)) + (_1118 * _1118)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1143 = _1142 * 2.0;
        float _1147 = (1.0 - _1142) / (_1142 + 1.0);
        float _3356 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1157 = ((((1.0 - _1148) * (_1143 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_1143 + 1.0))) + _1148) * _1029;
        _1165 = _996;
        _1167 = _995;
        _1168 = _994;
        _1169 = _1006;
        _1170 = _1005;
        _1171 = _1004;
        _1172 = _1016;
        _1173 = _1015;
        _1174 = _1014;
        _1175 = _1029;
        _1176 = _1028;
        _1177 = _1027;
        _1178 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1179 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
        _1180 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0)));
    }
    else
    {
        _1165 = _1166;
        _1167 = _1166;
        _1168 = _1166;
        _1169 = _1166;
        _1170 = _1166;
        _1171 = _1166;
        _1172 = _1166;
        _1173 = _1166;
        _1174 = _1166;
        _1175 = _1166;
        _1176 = _1166;
        _1177 = _1166;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1206 = fma(_863, cbModelParam._m0[30u].z, fma(_859, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _855));
        float _1210 = fma(_863, cbModelParam._m0[31u].z, fma(_859, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _855));
        float _1214 = fma(_863, cbModelParam._m0[32u].z, fma(_859, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _855));
        float _1237 = _855 + _712;
        float _1238 = _859 + _713;
        float _1239 = _863 + _714;
        float _1249 = fma(_1239, cbModelParam._m0[30u].z, fma(_1238, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1237)) - _1206;
        float _1250 = fma(_1239, cbModelParam._m0[31u].z, fma(_1238, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1237)) - _1210;
        float _1251 = fma(_1239, cbModelParam._m0[32u].z, fma(_1238, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1237)) - _1214;
        float _1255 = inversesqrt(dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251)));
        float _1268 = ((_1255 * _1249) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1206 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1269 = ((_1255 * _1250) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1210 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1270 = ((_1255 * _1251) / cbModelParam._m0[35u].z) + ((((((_1214 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1268, _1269, _1270), 0.0);
        float _1305 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1306 = _1305 * (_1272.x + (-0.5));
        float _1307 = _1305 * (_1272.y + (-0.5));
        float _1308 = _1305 * (_1272.z + (-0.5));
        float _1315 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1316 = _1315 * (_1279.x + (-0.5));
        float _1317 = _1315 * (_1279.y + (-0.5));
        float _1318 = _1315 * (_1279.z + (-0.5));
        float _1325 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1326 = _1325 * (_1286.x + (-0.5));
        float _1327 = _1325 * (_1286.y + (-0.5));
        float _1328 = _1325 * (_1286.z + (-0.5));
        float _1335 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1336 = _1335 * (_1293.x + (-0.5));
        float _1337 = _1335 * (_1293.y + (-0.5));
        float _1338 = _1335 * (_1293.z + (-0.5));
        float _1339 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1340 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1341 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1342 = _1306 * 0.5;
        float _1343 = _1316 * 0.5;
        float _1344 = _1326 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_712, _713, _714), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3397 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1339 + 9.9999997473787516355514526367188e-06);
        float _3408 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3419 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) * (_1369 + 1.0))) + _1374) * _1339;
        float _1384 = _1307 * 0.5;
        float _1385 = _1317 * 0.5;
        float _1386 = _1327 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_712, _713, _714), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3430 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1340 + 9.9999997473787516355514526367188e-06);
        float _3441 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3452 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))) * (_1411 + 1.0))) + _1416) * _1340;
        float _1426 = _1308 * 0.5;
        float _1427 = _1318 * 0.5;
        float _1428 = _1328 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_712, _713, _714), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1341 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _3485 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1453 + 1.0))) + _1458) * _1341;
        _1475 = _1308;
        _1476 = _1307;
        _1477 = _1306;
        _1478 = _1318;
        _1479 = _1317;
        _1480 = _1316;
        _1481 = _1328;
        _1482 = _1327;
        _1483 = _1326;
        _1484 = _1341;
        _1485 = _1340;
        _1486 = _1339;
        _1487 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1488 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1489 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
    }
    else
    {
        _1475 = _1166;
        _1476 = _1166;
        _1477 = _1166;
        _1478 = _1166;
        _1479 = _1166;
        _1480 = _1166;
        _1481 = _1166;
        _1482 = _1166;
        _1483 = _1166;
        _1484 = _1166;
        _1485 = _1166;
        _1486 = _1166;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1499 = (cbModelParam._m0[1u].x * (_1487 - _1178)) + _1178;
    float _1500 = (cbModelParam._m0[1u].x * (_1488 - _1179)) + _1179;
    float _1501 = (cbModelParam._m0[1u].x * (_1489 - _1180)) + _1180;
    float _1522 = fma(_1501, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1499 * cbSceneParam._m0[89u].x));
    float _1525 = fma(_1501, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1499 * cbSceneParam._m0[90u].x));
    float _1528 = fma(_1501, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1499));
    float _1543 = _798 * 0.5;
    float _1544 = _799 * 0.5;
    float _1545 = _800 * 0.5;
    float _1546 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1477, _1480, _1483, _1486));
    float _1549 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1476, _1479, _1482, _1485));
    float _1552 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1475, _1478, _1481, _1484));
    float _1586;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1559 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1165, _1169, _1172, _1175));
        float _1563 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1167, _1170, _1173, _1176));
        float _1567 = dot(vec4(_1543, _1544, _1545, 1.0), vec4(_1168, _1171, _1174, _1177));
        float _1574 = dot(vec4(cbModelParam._m0[39u]), vec4(_1543, _1544, _1545, 1.0));
        _1586 = dot(vec3(isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1574) ? 0.0 : (isnan(0.0) ? _1574 : max(0.0, _1574))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1586 = 1.0;
    }
    float _1597;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1588 = dot(vec4(cbModelParam._m0[40u]), vec4(_1543, _1544, _1545, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1588) ? 0.0 : (isnan(0.0) ? _1588 : max(0.0, _1588))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1601 = (_1597 * cbModelParam._m0[1u].x) + (_1586 * (1.0 - cbModelParam._m0[1u].x));
    float _1611 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _716);
    float _1612 = isnan(_1611) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1611 : min(cbModelParam._m0[25u].z, _1611));
    float _1692;
    float _1694;
    float _1696;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1659 = fma(_863, cbModelParam._m0[13u].z, fma(_859, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _855)) + cbModelParam._m0[13u].w;
        float _1663 = fma(_863, cbModelParam._m0[14u].z, fma(_859, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _855)) + cbModelParam._m0[14u].w;
        float _1667 = fma(_863, cbModelParam._m0[15u].z, fma(_859, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _855)) + cbModelParam._m0[15u].w;
        float _1670 = fma(_800, cbModelParam._m0[13u].z, fma(_799, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798));
        float _1673 = fma(_800, cbModelParam._m0[14u].z, fma(_799, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798));
        float _1676 = fma(_800, cbModelParam._m0[15u].z, fma(_799, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798));
        float _1704;
        if (_1670 > 0.0)
        {
            _1704 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1704 = frontier_phi_16_14_ladder;
        }
        float _1876;
        if (_1673 > 0.0)
        {
            _1876 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1876 = frontier_phi_25_21_ladder;
        }
        float _2111;
        if (_1676 > 0.0)
        {
            _2111 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _2111 = frontier_phi_36_32_ladder;
        }
        float _2113 = isnan(_1876) ? _1704 : (isnan(_1704) ? _1876 : min(_1704, _1876));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1670) + _1659;
        float _2119 = (_2114 * _1673) + _1663;
        float _2120 = (_2114 * _1676) + _1667;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2123 = (-1.0) - _2121;
        float _2125 = _2121 + 1.0;
        float frontier_phi_15_36_ladder;
        float frontier_phi_15_36_ladder_1;
        float frontier_phi_15_36_ladder_2;
        if ((_2120 > _2125) || ((_2120 < _2123) || ((_2119 > _2125) || ((_2119 < _2123) || ((_2118 < _2123) || (_2118 > _2125))))))
        {
            frontier_phi_15_36_ladder = 0.0;
            frontier_phi_15_36_ladder_1 = 0.0;
            frontier_phi_15_36_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2270 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2120, cbModelParam._m0[9u].z, fma(_2119, cbModelParam._m0[9u].y, _2118 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2120, cbModelParam._m0[10u].z, fma(_2119, cbModelParam._m0[10u].y, _2118 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2120, cbModelParam._m0[11u].z, fma(_2119, cbModelParam._m0[11u].y, _2118 * cbModelParam._m0[11u].x))), _1612);
            frontier_phi_15_36_ladder = _2270.z * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_1 = _2270.x * cbModelParam._m0[1u].y;
            frontier_phi_15_36_ladder_2 = _2270.y * cbModelParam._m0[1u].y;
        }
        _1692 = frontier_phi_15_36_ladder_1;
        _1694 = frontier_phi_15_36_ladder_2;
        _1696 = frontier_phi_15_36_ladder;
    }
    else
    {
        vec4 _1680 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_798, _799, _800), _1612);
        _1692 = _1680.x * cbModelParam._m0[1u].y;
        _1694 = _1680.y * cbModelParam._m0[1u].y;
        _1696 = _1680.z * cbModelParam._m0[1u].y;
    }
    float _1700 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _716);
    float _1701 = isnan(_1700) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1700 : min(cbModelParam._m0[25u].w, _1700));
    float _1793;
    float _1795;
    float _1797;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1757 = fma(_863, cbModelParam._m0[21u].z, fma(_859, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _855)) + cbModelParam._m0[21u].w;
        float _1761 = fma(_863, cbModelParam._m0[22u].z, fma(_859, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _855)) + cbModelParam._m0[22u].w;
        float _1765 = fma(_863, cbModelParam._m0[23u].z, fma(_859, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _855)) + cbModelParam._m0[23u].w;
        float _1768 = fma(_800, cbModelParam._m0[21u].z, fma(_799, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798));
        float _1771 = fma(_800, cbModelParam._m0[22u].z, fma(_799, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798));
        float _1774 = fma(_800, cbModelParam._m0[23u].z, fma(_799, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798));
        float _1881;
        if (_1768 > 0.0)
        {
            _1881 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1881 = frontier_phi_27_23_ladder;
        }
        float _2138;
        if (_1771 > 0.0)
        {
            _2138 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2138 = frontier_phi_38_34_ladder;
        }
        float _2442;
        if (_1774 > 0.0)
        {
            _2442 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2442 = frontier_phi_49_44_ladder;
        }
        float _2444 = isnan(_2138) ? _1881 : (isnan(_1881) ? _2138 : min(_1881, _2138));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1768) + _1757;
        float _2450 = (_2445 * _1771) + _1761;
        float _2451 = (_2445 * _1774) + _1765;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2624 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1701);
            frontier_phi_24_49_ladder = _2624.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2624.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2624.x * cbModelParam._m0[1u].z;
        }
        _1793 = frontier_phi_24_49_ladder_2;
        _1795 = frontier_phi_24_49_ladder;
        _1797 = frontier_phi_24_49_ladder_1;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_798, _799, _800), _1701);
        _1793 = _1777.x * cbModelParam._m0[1u].z;
        _1795 = _1777.y * cbModelParam._m0[1u].z;
        _1797 = _1777.z * cbModelParam._m0[1u].z;
    }
    float _1809 = ((((1.0 - _823) * ((_811 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_823 * _811)) * _790;
    float _1810 = _1809 * ((cbModelParam._m0[1u].w * (_1793 - _1692)) + _1692);
    float _1811 = _1809 * ((cbModelParam._m0[1u].w * (_1795 - _1694)) + _1694);
    float _1812 = _1809 * ((cbModelParam._m0[1u].w * (_1797 - _1696)) + _1696);
    float _1815 = fma(_1812, cbSceneParam._m0[89u].z, fma(_1811, cbSceneParam._m0[89u].y, _1810 * cbSceneParam._m0[89u].x));
    float _1818 = fma(_1812, cbSceneParam._m0[90u].z, fma(_1811, cbSceneParam._m0[90u].y, _1810 * cbSceneParam._m0[90u].x));
    float _1821 = fma(_1812, cbSceneParam._m0[91u].z, fma(_1811, cbSceneParam._m0[91u].y, _1810 * cbSceneParam._m0[91u].x));
    uvec4 _1831 = floatBitsToUint(cbInstanceData._m0[_298 + 5u]);
    uint _1833 = _1831.x * 14u;
    uint _1834 = _1833 + 13u;
    float _1839 = _790 + (-1.0);
    float _1842 = (cbLight._m0[_1834].x * _1839) + 1.0;
    float _1843 = (cbLight._m0[_1834].y * _1839) + 1.0;
    uint _1845 = _1833 + 4u;
    float _1856 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_712, _713, _714));
    float _1859 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1860 = _1833 + 5u;
    uint _1866 = _1833 | 1u;
    float _1872 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_712, _713, _714));
    float _1875 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    float _1940;
    float _1941;
    float _1942;
    if (_717 == 0.0)
    {
        float _3621 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _3632 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1894 = (isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * 0.3183098733425140380859375;
        float _1896 = (isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * 0.3183098733425140380859375;
        _1940 = ((cbLight._m0[_1860].x * _1875) * _1896) + ((cbLight._m0[_1845].x * _1859) * _1894);
        _1941 = ((_1875 * cbLight._m0[_1860].y) * _1896) + ((_1859 * cbLight._m0[_1845].y) * _1894);
        _1942 = ((_1875 * cbLight._m0[_1860].z) * _1896) + ((_1859 * cbLight._m0[_1845].z) * _1894);
    }
    else
    {
        float _1906 = _1856 + _717;
        float _1909 = (_717 * 2.0) + 1.0;
        float _1910 = (isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))) / _1909;
        float _1917 = _1872 + _717;
        float _1919 = (isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) / _1909;
        _1940 = (((_1919 * cbLight._m0[_1860].x) * _1875) + ((_1910 * cbLight._m0[_1845].x) * _1859)) * 0.3183098733425140380859375;
        _1941 = (((_1919 * cbLight._m0[_1860].y) * _1875) + ((_1910 * cbLight._m0[_1845].y) * _1859)) * 0.3183098733425140380859375;
        _1942 = (((_1919 * cbLight._m0[_1860].z) * _1875) + ((_1910 * cbLight._m0[_1845].z) * _1859)) * 0.3183098733425140380859375;
    }
    uint _1946 = _1833 + 8u;
    float _1962 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1833].w)) * _716) * 0.949999988079071044921875);
    float _1963 = _1962 * _1962;
    float _1964 = cbLight._m0[_1833].x + _491;
    float _1965 = cbLight._m0[_1833].y + _492;
    float _1966 = cbLight._m0[_1833].z + _493;
    float _1970 = inversesqrt(dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966)));
    float _1971 = _1970 * _1964;
    float _1972 = _1970 * _1965;
    float _1973 = _1970 * _1966;
    float _1974 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_1833].xyz));
    float _3653 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1977 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _3664 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    float _1978 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
    float _1979 = dot(vec3(_712, _713, _714), vec3(_1971, _1972, _1973));
    float _3675 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _1983 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_1971, _1972, _1973));
    float _3686 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1987 = _1963 * _1963;
    float _1991 = ((_1982 * _1982) * (_1987 + (-1.0))) + 1.0;
    float _2002 = (exp2(log2(1.0 - (isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2003 = 1.0 - _1963;
    float _2014 = (0.5 / (((_1978 * ((_1977 * _2003) + _1963)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2003) + _1963) * _1977))) * _1977;
    float _3697 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2016 = (isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) * (_1987 / ((_1991 * _1991) * 3.141590118408203125));
    uint _2029 = _1833 + 9u;
    float _2043 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _716) * 0.949999988079071044921875);
    float _2044 = _2043 * _2043;
    float _2045 = cbLight._m0[_1866].x + _491;
    float _2046 = cbLight._m0[_1866].y + _492;
    float _2047 = cbLight._m0[_1866].z + _493;
    float _2051 = inversesqrt(dot(vec3(_2045, _2046, _2047), vec3(_2045, _2046, _2047)));
    float _2052 = _2051 * _2045;
    float _2053 = _2051 * _2046;
    float _2054 = _2051 * _2047;
    float _2055 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_1866].xyz));
    float _3708 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2058 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _2059 = dot(vec3(_712, _713, _714), vec3(_2052, _2053, _2054));
    float _3719 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _2062 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _2063 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2052, _2053, _2054));
    float _3730 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2067 = _2044 * _2044;
    float _2071 = ((_2062 * _2062) * (_2067 + (-1.0))) + 1.0;
    float _2080 = (exp2(log2(1.0 - (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2081 = 1.0 - _2044;
    float _2091 = (0.5 / (((_1978 * ((_2058 * _2081) + _2044)) + 9.9999999392252902907785028219223e-09) + (((_1978 * _2081) + _2044) * _2058))) * _2058;
    float _3741 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2093 = (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_2067 / ((_2071 * _2071) * 3.141590118408203125));
    float _2103 = (((_2080 * cbLight._m0[_2029].x) * _2093) * _1875) + (((_2002 * cbLight._m0[_1946].x) * _2016) * _1859);
    float _2104 = (((_2080 * cbLight._m0[_2029].y) * _2093) * _1875) + (((_2002 * cbLight._m0[_1946].y) * _2016) * _1859);
    float _2105 = (((_2080 * cbLight._m0[_2029].z) * _2093) * _1875) + (((_2002 * cbLight._m0[_1946].z) * _2016) * _1859);
    float _2241;
    float _2243;
    float _2245;
    float _2247;
    float _2249;
    float _2251;
    if (_1831.y == 0u)
    {
        float _2182 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2183 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2182;
        float _2184 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2182;
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2182;
        uvec4 _2197 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2198 = _2197.x;
        uint _2209 = uint((float(_2197.y) * floor(float(uint(cbSceneParam._m0[85u].y * _628) / _2198))) + floor(float(uint(cbSceneParam._m0[85u].x * _627) / _2198)));
        float _2219 = (log2(_2185 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2220 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
        uint _2223 = uint(isnan(14.0) ? _2220 : (isnan(_2220) ? 14.0 : min(_2220, 14.0)));
        uint _2230 = _2197.z;
        float _2279;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        if (((((1u << ((_2230 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2223 << 2u) + (_2209 << 6u)) >> 2u)).x) == 0u) || ((_2230 & 240u) == 0u))
        {
            _2279 = 0.0;
            _2281 = 0.0;
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
        }
        else
        {
            float _2280;
            float _2282;
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            uint _2474 = 0u;
            uint _2483;
            bool _2484;
            for (;;)
            {
                _2483 = texelFetch(g_lightClassification, int((((_2223 << 5u) + (_2209 << 9u)) + (_2474 << 2u)) >> 2u)).x;
                _2484 = _2483 == 0u;
                float frontier_phi_55_pred;
                float frontier_phi_55_pred_1;
                float frontier_phi_55_pred_2;
                float frontier_phi_55_pred_3;
                float frontier_phi_55_pred_4;
                float frontier_phi_55_pred_5;
                if (_2484)
                {
                    frontier_phi_55_pred = _2473;
                    frontier_phi_55_pred_1 = _2472;
                    frontier_phi_55_pred_2 = _2471;
                    frontier_phi_55_pred_3 = _2469;
                    frontier_phi_55_pred_4 = _2468;
                    frontier_phi_55_pred_5 = _2470;
                }
                else
                {
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    uint _2687;
                    _2681 = _2468;
                    _2682 = _2469;
                    _2683 = _2470;
                    _2684 = _2471;
                    _2685 = _2472;
                    _2686 = _2473;
                    _2687 = _2483;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    for (;;)
                    {
                        uint _2691 = uint(findLSB(_2687)) + (_2474 << 5u);
                        uint _2688 = (_2687 + 4294967295u) & _2687;
                        uint _2693 = _2691 * 48u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2713 = (_2691 * 48u) + 4u;
                        vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        float _2727 = _2726.x;
                        float _2728 = _2726.y;
                        float _2729 = _2726.z;
                        uint _2732 = (_2691 * 48u) + 8u;
                        vec3 _2743 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x));
                        uint _2748 = (_2691 * 48u) + 12u;
                        vec2 _2756 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x));
                        float _2762 = inversesqrt(dot(vec3(_2183, _2184, _2185), vec3(_2183, _2184, _2185)));
                        float _2763 = _2762 * _2183;
                        float _2764 = _2762 * _2184;
                        float _2765 = _2762 * _2185;
                        float _2766 = _2707.x - _2183;
                        float _2767 = _2707.y - _2184;
                        float _2768 = _2707.z - _2185;
                        float _2769 = dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768));
                        float _2772 = inversesqrt(_2769);
                        float _2773 = _2772 * _2766;
                        float _2774 = _2772 * _2767;
                        float _2775 = _2772 * _2768;
                        float _2776 = dot(vec3(_752, _755, _758), vec3(_2773, _2774, _2775));
                        float _2781 = 1.0 - (_2769 * _2707.w);
                        float _3762 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2782 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
                        float _2783 = sqrt(_2769) * _2726.w;
                        float _2786 = 1.39999997615814208984375 / (_2783 + 1.39999997615814208984375);
                        float _2787 = _2786 * _2786;
                        float _2788 = 1.0 - _2787;
                        float _2790 = (_2788 * _2788) * _717;
                        float _2793 = ((_2788 * _2776) + _2787) + _2790;
                        float _2798 = _2783 * _2783;
                        float _2803 = ((isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0))) * _2782) / (((_2790 * 2.0) + 1.0) * ((_2798 * 0.699999988079071044921875) + 1.0));
                        float _2807 = dot(vec3(_2773, _2774, _2775), vec3(_2763, _2764, _2765));
                        float _3778 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2814 = dot(vec3((-0.0) - _2763, (-0.0) - _2764, (-0.0) - _2765), vec3(_752, _755, _758)) + 1.0;
                        float _2816 = (isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0))) * 0.5;
                        float _2823 = ((_2816 * _2816) * _2756.x) * exp2((_2756.y * 32.0) * log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))));
                        float _2825 = _717 / (_717 + 1.0);
                        float _2841 = (-0.0) - _2183;
                        float _2842 = (-0.0) - _2184;
                        float _2843 = (-0.0) - _2185;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2848 = _2847 * _2841;
                        float _2849 = _2847 * _2842;
                        float _2850 = _2847 * _2843;
                        float _2858 = exp2(log2(1.0 / ((_2798 * 3.5) + 5.0)) * 0.25);
                        float _2859 = 1.0 - _811;
                        float _2866 = sqrt(1.0 - ((1.0 - (_2859 * _2859)) * (1.0 - (_2858 * _2858))));
                        float _2867 = _2866 * _2866;
                        float _2868 = _2867 * _2867;
                        float _2869 = _2848 + _2773;
                        float _2870 = _2849 + _2774;
                        float _2871 = _2850 + _2775;
                        float _2875 = inversesqrt(dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871)));
                        float _2879 = dot(vec3(_752, _755, _758), vec3(_2848, _2849, _2850));
                        float _3794 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2882 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
                        float _2883 = dot(vec3(_752, _755, _758), vec3(_2875 * _2869, _2875 * _2870, _2875 * _2871));
                        float _3805 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                        float _2886 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                        float _2890 = ((_2886 * _2886) * (_2868 + (-1.0))) + 1.0;
                        float _2891 = _2786 * _2867;
                        float _2892 = _2891 * _2891;
                        float _2895 = ((1.0 - _2892) * _2776) + _2892;
                        float _3816 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2896 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
                        float _2897 = 1.0 - _2867;
                        float _2907 = (0.5 / (((_2896 * ((_2882 * _2897) + _2867)) + 9.9999999392252902907785028219223e-09) + (((_2896 * _2897) + _2867) * _2882))) * _2896;
                        float _3827 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2918 = (((_2868 * 3.1415927410125732421875) * (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0)))) / ((_2890 * _2890) * ((_2798 * 2.1991131305694580078125) + 3.141590118408203125))) * _2782;
                        _2632 = (((((_2727 * 0.3183098733425140380859375) * _2825) * _2823) + _2727) * _2803) + _2684;
                        _2633 = (((((_2728 * 0.3183098733425140380859375) * _2825) * _2823) + _2728) * _2803) + _2685;
                        _2634 = (((((_2729 * 0.3183098733425140380859375) * _2825) * _2823) + _2729) * _2803) + _2686;
                        _2629 = (_2918 * _2743.x) + _2681;
                        _2630 = (_2918 * _2743.y) + _2682;
                        _2631 = (_2918 * _2743.z) + _2683;
                        if (_2688 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2681 = _2629;
                            _2682 = _2630;
                            _2683 = _2631;
                            _2684 = _2632;
                            _2685 = _2633;
                            _2686 = _2634;
                            _2687 = _2688;
                        }
                    }
                    frontier_phi_55_pred = _2634;
                    frontier_phi_55_pred_1 = _2633;
                    frontier_phi_55_pred_2 = _2632;
                    frontier_phi_55_pred_3 = _2630;
                    frontier_phi_55_pred_4 = _2629;
                    frontier_phi_55_pred_5 = _2631;
                }
                _2290 = frontier_phi_55_pred;
                _2288 = frontier_phi_55_pred_1;
                _2286 = frontier_phi_55_pred_2;
                _2282 = frontier_phi_55_pred_3;
                _2280 = frontier_phi_55_pred_4;
                _2284 = frontier_phi_55_pred_5;
                uint _2475 = _2474 + 1u;
                if (_2475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2468 = _2280;
                    _2469 = _2282;
                    _2470 = _2284;
                    _2471 = _2286;
                    _2472 = _2288;
                    _2473 = _2290;
                    _2474 = _2475;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2279 = _2280;
            _2281 = _2282;
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
        }
        float _2294 = isnan(1.0) ? _790 : (isnan(_790) ? 1.0 : min(_790, 1.0));
        _2241 = (_2294 * _2285) + _1940;
        _2243 = (_2294 * _2287) + _1941;
        _2245 = (_2294 * _2289) + _1942;
        _2247 = ((_2279 * 0.039999999105930328369140625) * _2294) + _2103;
        _2249 = ((_2281 * 0.039999999105930328369140625) * _2294) + _2104;
        _2251 = ((_2283 * 0.039999999105930328369140625) * _2294) + _2105;
    }
    else
    {
        _2241 = _1940;
        _2243 = _1941;
        _2245 = _1942;
        _2247 = _2103;
        _2249 = _2104;
        _2251 = _2105;
    }
    float _2365;
    float _2366;
    float _2367;
    if (_717 > 0.0)
    {
        uint _2301 = _1833 + 4u;
        float _2307 = (-0.0) - _491;
        float _2308 = (-0.0) - _492;
        float _2309 = (-0.0) - _493;
        float _2310 = dot(vec3(cbLight._m0[_1833].xyz), vec3(_2307, _2308, _2309));
        float _3843 = isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0));
        float _2314 = _801 + 1.0;
        float _2316 = (isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0))) * 0.5;
        float _2321 = _2316 * _2316;
        float _2322 = _2321 * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * 32.0);
        float _2324 = _717 / (_717 + 1.0);
        float _2325 = isnan(_1842) ? 1.0 : (isnan(1.0) ? _1842 : min(1.0, _1842));
        uint _2335 = _1833 + 5u;
        float _2341 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2307, _2308, _2309));
        float _3864 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2348 = _2321 * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * 32.0);
        float _2349 = isnan(_1843) ? 1.0 : (isnan(1.0) ? _1843 : min(1.0, _1843));
        _2365 = ((((_2348 * cbLight._m0[_2335].x) * _2324) * _2349) + (((_2322 * cbLight._m0[_2301].x) * _2324) * _2325)) * 0.3183098733425140380859375;
        _2366 = ((((_2348 * cbLight._m0[_2335].y) * _2324) * _2349) + (((_2322 * cbLight._m0[_2301].y) * _2324) * _2325)) * 0.3183098733425140380859375;
        _2367 = ((((_2348 * cbLight._m0[_2335].z) * _2324) * _2349) + (((_2322 * cbLight._m0[_2301].z) * _2324) * _2325)) * 0.3183098733425140380859375;
    }
    else
    {
        _2365 = 0.0;
        _2366 = 0.0;
        _2367 = 0.0;
    }
    float _3880 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _3891 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _3902 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _3913 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _2382 = (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) * ((_2241 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _790)) + _2365);
    float _2383 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * ((_2243 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _790)) + _2366);
    float _2384 = (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * ((_2245 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _790)) + _2367);
    float _2388 = 0.959999978542327880859375 - (exp2(log2(1.0 - _805) * 5.0) * 0.959999978542327880859375);
    float _2413 = _627 / cbSceneParam._m0[86u].x;
    float _2414 = _628 / cbSceneParam._m0[86u].y;
    vec4 _2428 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2413, _2414, (log2((isnan(cbSceneParam._m0[77u].w) ? _734 : (isnan(_734) ? cbSceneParam._m0[77u].w : min(_734, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2430 = _2428.x;
    float _2431 = _2428.y;
    float _2432 = _2428.z;
    float _2433 = _2428.w;
    float _2526;
    float _2528;
    float _2530;
    float _2532;
    if (_734 > cbSceneParam._m0[78u].w)
    {
        float _2489 = isnan(_734) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _734 : min(cbSceneParam._m0[80u].w, _734));
        float _2490 = _2489 / _734;
        float _2501 = _2490 * _290;
        float _2502 = _291 * _2490;
        float _2503 = (-0.0) - _2502;
        float _2504 = _2490 * _292;
        float _2506 = (cbSceneParam._m0[77u].w * _2503) / _2489;
        float _2507 = _2506 + cbSceneParam._m0[79u].w;
        float _2508 = cbSceneParam._m0[79u].w - _2502;
        float _2514 = sqrt(((_2501 * _2501) + (_2502 * _2502)) + (_2504 * _2504));
        float _2517 = (1.0 - (cbSceneParam._m0[77u].w / _2489)) * _2514;
        float _2522 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2524 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2923;
        if (abs((_2503 - _2506) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2923 = ((((_2507 > 0.0) ? exp2(_2522 * _2507) : (2.0 - exp2(_2524 * _2507))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2517;
        }
        else
        {
            float _2654 = 1.0 / cbSceneParam._m0[80u].x;
            float _2655 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : max(_2507, _2508));
            float _2656 = isnan(_2508) ? _2507 : (isnan(_2507) ? _2508 : min(_2507, _2508));
            float _2665 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : min(_2655, 0.0));
            float _2666 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : min(_2656, 0.0));
            _2923 = ((abs(_2514 / _2503) * cbSceneParam._m0[80u].y) * ((((_2665 - _2666) * 2.0) - ((exp2(_2522 * (isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0)))) - exp2(_2522 * (isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0))))) * _2654)) - ((exp2(_2524 * _2665) - exp2(_2524 * _2666)) * _2654))) + (_2517 * cbSceneParam._m0[80u].z);
        }
        vec4 _2925 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2413, _2414, 1.0), 0.0);
        float _2934 = exp2((_2923 * (-1.44269502162933349609375)) * (1.0 - _2925.w));
        float _2935 = log2(_2934);
        float _2951 = log2(_2433);
        _2526 = (exp2(_2951 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].x)) * _2925.x) / cbSceneParam._m0[78u].x)) + _2430;
        _2528 = (exp2(_2951 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].y)) * _2925.y) / cbSceneParam._m0[78u].y)) + _2431;
        _2530 = (exp2(_2951 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2935 * cbSceneParam._m0[78u].z)) * _2925.z) / cbSceneParam._m0[78u].z)) + _2432;
        _2532 = _2934 * _2433;
    }
    else
    {
        _2526 = _2430;
        _2528 = _2431;
        _2530 = _2432;
        _2532 = _2433;
    }
    bool _2544 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
    float _2545 = log2(_2532);
    float _2552 = exp2(_2545 * cbSceneParam._m0[78u].x) * ((_2382 + ((_2247 + ((isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _651.x) * _2388) - _2382) * _697));
    float _2553 = exp2(_2545 * cbSceneParam._m0[78u].y) * ((_2383 + ((_2249 + ((isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _651.y) * _2388) - _2383) * _697));
    float _2554 = exp2(_2545 * cbSceneParam._m0[78u].z) * ((_2384 + ((_2251 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1601)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _651.z) * _2388) - _2384) * _697));
    vec4 _2562 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_627, _628));
    float _2564 = _2562.x;
    float _2585 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2564)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2564))) - _734) * cbMtdParam._m0[17u].y;
    float _3964 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2587 = (cbInstanceData._m0[_298 + 6u].w * (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0)))) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)));
    float _2596 = (roundEven(cbMatDynParam._m0[0u].y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2596 * (_2544 ? _2552 : (_2552 + (cbSceneParam._m0[72u].w * _2526)));
    SV_Target.y = _2596 * (_2544 ? _2553 : (_2553 + (cbSceneParam._m0[72u].w * _2528)));
    SV_Target.z = _2596 * (_2544 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2530)));
    SV_Target.w = _2587;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2587;
}


