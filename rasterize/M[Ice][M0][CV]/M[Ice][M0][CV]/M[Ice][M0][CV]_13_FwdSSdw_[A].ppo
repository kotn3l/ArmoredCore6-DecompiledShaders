#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 56) uniform texture2D g_DepthTexture;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 45) uniform texture2D SceneColor_0_Screen_0;
layout(set = 0, binding = 0) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_5;
layout(set = 0, binding = 1) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_0;
layout(set = 0, binding = 2) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_10;
layout(set = 0, binding = 4) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_7;
layout(set = 0, binding = 9) uniform texture2D M_Ice_M0_CV_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 7) uniform sampler SS_ClampPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 6) in float TEXCOORD_8;
layout(location = 6, component = 1) in float TEXCOORD_9;
layout(location = 6, component = 2) in float TEXCOORD_10;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1260;
float _3228;
float _3229;
float _3230;
float _3231;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _222 = _221 * _213;
    float _223 = _221 * _214;
    float _224 = _221 * _215;
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = _228 * NORMAL.x;
    float _230 = _228 * NORMAL.y;
    float _231 = _228 * NORMAL.z;
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _236 = _235 * TANGENT.x;
    float _237 = _235 * TANGENT.y;
    float _238 = _235 * TANGENT.z;
    float _243;
    float _244;
    float _245;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _243 = (-0.0) - _229;
        _244 = (-0.0) - _230;
        _245 = (-0.0) - _231;
    }
    else
    {
        _243 = _229;
        _244 = _230;
        _245 = _231;
    }
    float _292 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _302 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _292);
    float _303 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _292);
    float _304 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _292);
    uint _310 = uint(roundEven(NORMAL.w)) * 13u;
    uint _315 = _310 + 1u;
    uint _319 = _310 + 2u;
    float _328 = sqrt(((cbInstanceData._m0[_315].x * cbInstanceData._m0[_315].x) + (cbInstanceData._m0[_310].x * cbInstanceData._m0[_310].x)) + (cbInstanceData._m0[_319].x * cbInstanceData._m0[_319].x));
    float _329 = _328 * TEXCOORD.z;
    float _330 = _328 * TEXCOORD.w;
    vec4 _344 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _353 = (_344.x * 2.0) + (-1.0);
    float _355 = (_344.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_353, _355), vec2(_353, _355));
    float _3240 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _362 = sqrt(1.0 - (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))));
    float _365 = fma(_362, _243, fma(_355, _236, _353 * _222));
    float _368 = fma(_362, _244, fma(_355, _237, _353 * _223));
    float _371 = fma(_362, _245, fma(_355, _238, _353 * _224));
    float _375 = inversesqrt(dot(vec3(_365, _368, _371), vec3(_365, _368, _371)));
    vec4 _408 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _413 = _408.w;
    float _425 = dot(vec3(_302, _303, _304), vec3(_222, _223, _224));
    float _428 = dot(vec3(_302, _303, _304), vec3(_236, _237, _238));
    float _431 = dot(vec3(_302, _303, _304), vec3(_243, _244, _245));
    float _437 = inversesqrt(dot(vec3(_425, _428, _431), vec3(_425, _428, _431)));
    float _459 = dot(vec4(texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w))), vec4(1.0, 0.0, 0.0, 0.0)) - cbMtdParam._m0[14u].y;
    vec4 _479 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_1, SS_DiffuseMap), vec2((((((_425 * cbMtdParam._m0[14u].x) * _437) * _459) + TEXCOORD.x) * cbTextureTilingScale._m0[2u].x) + cbTextureTilingScale._m0[2u].z, (((((_428 * cbMtdParam._m0[14u].x) * _437) * _459) + TEXCOORD.y) * cbTextureTilingScale._m0[2u].y) + cbTextureTilingScale._m0[2u].w));
    float _502 = inversesqrt(dot(vec3(_302, _303, _304), vec3(_302, _303, _304)));
    float _503 = _502 * _302;
    float _504 = _502 * _303;
    float _505 = _502 * _304;
    float _506 = dot(vec4(_503, _504, _505, 0.0), vec4(_243, _244, _245, 0.0));
    float _509 = _506 - cbMtdParam._m0[15u].z;
    float _3251 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _516 = exp2(log2(1.0 - (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[15u].w : (isnan(cbMtdParam._m0[15u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[15u].w, 0.001000000047497451305389404296875))));
    float _531 = ((((_408.x * 4.55000019073486328125) * cbMtdParam._m0[12u].x) * _479.x) * cbMtdParam._m0[9u].x) * ((_516 * (cbMtdParam._m0[13u].x + (-1.0))) + 1.0);
    float _536 = ((((_408.y * 4.55000019073486328125) * cbMtdParam._m0[12u].y) * _479.y) * cbMtdParam._m0[9u].y) * ((_516 * (cbMtdParam._m0[13u].y + (-1.0))) + 1.0);
    float _541 = ((((_408.z * 4.55000019073486328125) * cbMtdParam._m0[12u].z) * _479.z) * cbMtdParam._m0[9u].z) * ((_516 * (cbMtdParam._m0[13u].z + (-1.0))) + 1.0);
    float _550 = (cbMtdParam._m0[18u].w + 1.0) * (TEXCOORD_8 - ((cbMtdParam._m0[18u].z * (1.0 - TEXCOORD_8)) * (texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[6u].x * _329) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _330) + cbTextureTilingScale._m0[6u].w)).x + 0.00999999977648258209228515625)));
    float _3267 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
    float _558 = (_551 * (cbMtdParam._m0[11u].x - _531)) + _531;
    float _559 = ((cbMtdParam._m0[11u].y - _536) * _551) + _536;
    float _560 = ((cbMtdParam._m0[11u].z - _541) * _551) + _541;
    vec4 _572 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * _329) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _330) + cbTextureTilingScale._m0[9u].w));
    float _579 = (_572.x * 2.0) + (-1.0);
    float _580 = (_572.y * 2.0) + (-1.0);
    float _581 = dot(vec2(_579, _580), vec2(_579, _580));
    float _3278 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    vec4 _602 = texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _614 = cbMtdParam._m0[17u].z + _344.z;
    float _620 = (_614 + cbMtdParam._m0[16u].y) + ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * (_602.z - _614));
    float _623 = ((_572.z - _620) * _551) + _620;
    float _629 = ((((_602.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _353;
    float _630 = ((((_602.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _355;
    float _642 = (((_579 - _629) + (_629 * cbMtdParam._m0[14u].z)) * _551) + _629;
    float _643 = (((_580 - _630) + (_630 * cbMtdParam._m0[14u].z)) * _551) + _630;
    float _644 = (_551 * (sqrt(1.0 - (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0)))) - _362)) + _362;
    float _660 = cbMtdParam._m0[16u].w * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_0, SS_WrapLinear), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w)).x;
    float _662 = _660 - (_660 * _551);
    float _682 = cbSceneParam._m0[86u].x * (((cbSceneParam._m0[85u].z * gl_FragCoord.x) / cbSceneParam._m0[86u].x) + ((_375 * _365) * cbMtdParam._m0[18u].y));
    float _683 = cbSceneParam._m0[86u].y * (((cbSceneParam._m0[85u].w * gl_FragCoord.y) / cbSceneParam._m0[86u].y) + ((_375 * _368) * cbMtdParam._m0[18u].y));
    float _690 = isnan(cbInstanceData._m0[8u].x) ? _682 : (isnan(_682) ? cbInstanceData._m0[8u].x : max(_682, cbInstanceData._m0[8u].x));
    float _691 = isnan(cbInstanceData._m0[8u].y) ? _683 : (isnan(_683) ? cbInstanceData._m0[8u].y : max(_683, cbInstanceData._m0[8u].y));
    vec4 _695 = texture(sampler2D(SceneColor_0_Screen_0, SS_ClampLinear), vec2(isnan(cbInstanceData._m0[8u].z) ? _690 : (isnan(_690) ? cbInstanceData._m0[8u].z : min(_690, cbInstanceData._m0[8u].z)), isnan(cbInstanceData._m0[8u].w) ? _691 : (isnan(_691) ? cbInstanceData._m0[8u].w : min(_691, cbInstanceData._m0[8u].w))));
    float _728 = _506 - cbMtdParam._m0[15u].x;
    float _3309 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _738 = ((cbMtdParam._m0[18u].x * texture(sampler2D(M_Ice_M0_CV_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w)).x) + cbMtdParam._m0[17u].x) + (exp2(log2(1.0 - (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * (isnan(0.001000000047497451305389404296875) ? cbMtdParam._m0[14u].w : (isnan(cbMtdParam._m0[14u].w) ? 0.001000000047497451305389404296875 : max(cbMtdParam._m0[14u].w, 0.001000000047497451305389404296875)))) * (cbMtdParam._m0[16u].z - cbMtdParam._m0[17u].x));
    float _3325 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _739 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _741 = _739 - (_551 * _739);
    float _745 = fma(_644, _243, fma(_643, _236, _642 * _222));
    float _748 = fma(_644, _244, fma(_643, _237, _642 * _223));
    float _751 = fma(_644, _245, fma(_643, _238, _642 * _224));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3336 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _759 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
    float _3347 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _760 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _761 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
    float _3363 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3374 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3385 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _778 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    vec4 _783 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _785 = _783.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _940 = sqrt(((_302 * _302) + (_303 * _303)) + (_304 * _304));
        float _946 = (cbMatDynParam._m0[5u].x * _940) + cbMatDynParam._m0[5u].y;
        float _3396 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _951 = (cbMatDynParam._m0[5u].z * _940) + cbMatDynParam._m0[5u].w;
        float _3407 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) - _947)) + _947) < ((_785 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _795 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _796 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _814 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _817 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _820 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _833 = _310 + 9u;
    uint _834 = _833 + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0)))) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_834].z;
    float _3418 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    vec4 _853 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _795, cbSceneParam._m0[86u].y * _796));
    float _856 = _853.x * TEXCOORD_5.w;
    float _857 = dot(vec3(_756, _757, _758), vec3(_503, _504, _505));
    float _860 = _857 * 2.0;
    float _864 = (_860 * _756) - _503;
    float _865 = (_860 * _757) - _504;
    float _866 = (_860 * _758) - _505;
    float _867 = dot(vec3(_503, _504, _505), vec3(_756, _757, _758));
    float _870 = abs(_867);
    float _3451 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _871 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _877 = sqrt(_760);
    float _889 = exp2((_877 * 5.0) * log2(1.0 - (_871 * 0.999000012874603271484375))) / (4.0 - (_877 * 3.0));
    float _921 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _925 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _929 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_929, cbModelParam._m0[26u].z, fma(_925, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _921));
        float _988 = fma(_929, cbModelParam._m0[27u].z, fma(_925, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _921));
        float _992 = fma(_929, cbModelParam._m0[28u].z, fma(_925, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _921));
        float _1017 = _921 + _756;
        float _1018 = _925 + _757;
        float _1019 = _929 + _758;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_756, _757, _758), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _3499 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_756, _757, _758), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _3532 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_756, _757, _758), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3565 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1303 = fma(_929, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _921));
        float _1307 = fma(_929, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _921));
        float _1311 = fma(_929, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _921));
        float _1334 = _921 + _756;
        float _1335 = _925 + _757;
        float _1336 = _929 + _758;
        float _1346 = fma(_1336, cbModelParam._m0[30u].z, fma(_1335, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1334)) - _1303;
        float _1347 = fma(_1336, cbModelParam._m0[31u].z, fma(_1335, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1334)) - _1307;
        float _1348 = fma(_1336, cbModelParam._m0[32u].z, fma(_1335, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1334)) - _1311;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1303 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1307 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[35u].z) + ((((((_1311 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1402 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1369.x + (-0.5));
        float _1404 = _1402 * (_1369.y + (-0.5));
        float _1405 = _1402 * (_1369.z + (-0.5));
        float _1412 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1376.x + (-0.5));
        float _1414 = _1412 * (_1376.y + (-0.5));
        float _1415 = _1412 * (_1376.z + (-0.5));
        float _1422 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1383.x + (-0.5));
        float _1424 = _1422 * (_1383.y + (-0.5));
        float _1425 = _1422 * (_1383.z + (-0.5));
        float _1432 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1390.x + (-0.5));
        float _1434 = _1432 * (_1390.y + (-0.5));
        float _1435 = _1432 * (_1390.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_756, _757, _758), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3628 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1466 + 1.0))) + _1471) * _1436;
        float _1481 = _1404 * 0.5;
        float _1482 = _1414 * 0.5;
        float _1483 = _1424 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_756, _757, _758), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _3661 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1508 + 1.0))) + _1513) * _1437;
        float _1523 = _1405 * 0.5;
        float _1524 = _1415 * 0.5;
        float _1525 = _1425 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_756, _757, _758), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _3694 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1550 + 1.0))) + _1555) * _1438;
        _1572 = _1405;
        _1573 = _1404;
        _1574 = _1403;
        _1575 = _1415;
        _1576 = _1414;
        _1577 = _1413;
        _1578 = _1425;
        _1579 = _1424;
        _1580 = _1423;
        _1581 = _1438;
        _1582 = _1437;
        _1583 = _1436;
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
    }
    else
    {
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = _1260;
        _1582 = _1260;
        _1583 = _1260;
        _1584 = 0.0;
        _1585 = 0.0;
        _1586 = 0.0;
    }
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1272)) + _1272;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1273)) + _1273;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1274)) + _1274;
    float _1619 = fma(_1598, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1596 * cbSceneParam._m0[89u].x));
    float _1622 = fma(_1598, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1596 * cbSceneParam._m0[90u].x));
    float _1625 = fma(_1598, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1596));
    float _1640 = _864 * 0.5;
    float _1641 = _865 * 0.5;
    float _1642 = _866 * 0.5;
    float _1643 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1646 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1649 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1683;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1656 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1660 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1664 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1671 = dot(vec4(cbModelParam._m0[39u]), vec4(_1640, _1641, _1642, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1694;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1685 = dot(vec4(cbModelParam._m0[40u]), vec4(_1640, _1641, _1642, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1698 = (_1694 * cbModelParam._m0[1u].x) + (_1683 * (1.0 - cbModelParam._m0[1u].x));
    float _1708 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _760);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1708 : min(cbModelParam._m0[25u].z, _1708));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1756 = fma(_929, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _921)) + cbModelParam._m0[13u].w;
        float _1760 = fma(_929, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _921)) + cbModelParam._m0[14u].w;
        float _1764 = fma(_929, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _921)) + cbModelParam._m0[15u].w;
        float _1767 = fma(_866, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864));
        float _1770 = fma(_866, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864));
        float _1773 = fma(_866, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864));
        float _1801;
        if (_1767 > 0.0)
        {
            _1801 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1801 = frontier_phi_19_17_ladder;
        }
        float _1994;
        if (_1770 > 0.0)
        {
            _1994 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1994 = frontier_phi_28_24_ladder;
        }
        float _2232;
        if (_1773 > 0.0)
        {
            _2232 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _2232 = frontier_phi_39_35_ladder;
        }
        float _2234 = isnan(_1994) ? _1801 : (isnan(_1801) ? _1994 : min(_1801, _1994));
        float _2235 = isnan(_2232) ? _2234 : (isnan(_2234) ? _2232 : min(_2234, _2232));
        float _2239 = (_2235 * _1767) + _1756;
        float _2240 = (_2235 * _1770) + _1760;
        float _2241 = (_2235 * _1773) + _1764;
        float _2242 = _2235 * 9.9999997473787516355514526367188e-05;
        float _2244 = (-1.0) - _2242;
        float _2246 = _2242 + 1.0;
        float frontier_phi_18_39_ladder;
        float frontier_phi_18_39_ladder_1;
        float frontier_phi_18_39_ladder_2;
        if ((_2241 > _2246) || ((_2241 < _2244) || ((_2240 > _2246) || ((_2240 < _2244) || ((_2239 < _2244) || (_2239 > _2246))))))
        {
            frontier_phi_18_39_ladder = 0.0;
            frontier_phi_18_39_ladder_1 = 0.0;
            frontier_phi_18_39_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2241, cbModelParam._m0[9u].z, fma(_2240, cbModelParam._m0[9u].y, _2239 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2241, cbModelParam._m0[10u].z, fma(_2240, cbModelParam._m0[10u].y, _2239 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2241, cbModelParam._m0[11u].z, fma(_2240, cbModelParam._m0[11u].y, _2239 * cbModelParam._m0[11u].x))), _1709);
            frontier_phi_18_39_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_18_39_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1789 = frontier_phi_18_39_ladder_2;
        _1791 = frontier_phi_18_39_ladder_1;
        _1793 = frontier_phi_18_39_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_864, _865, _866), _1709);
        _1789 = _1777.x * cbModelParam._m0[1u].y;
        _1791 = _1777.y * cbModelParam._m0[1u].y;
        _1793 = _1777.z * cbModelParam._m0[1u].y;
    }
    float _1797 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _760);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1797 : min(cbModelParam._m0[25u].w, _1797));
    float _1890;
    float _1892;
    float _1894;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1854 = fma(_929, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _921)) + cbModelParam._m0[21u].w;
        float _1858 = fma(_929, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _921)) + cbModelParam._m0[22u].w;
        float _1862 = fma(_929, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _921)) + cbModelParam._m0[23u].w;
        float _1865 = fma(_866, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864));
        float _1868 = fma(_866, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864));
        float _1871 = fma(_866, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864));
        float _1999;
        if (_1865 > 0.0)
        {
            _1999 = abs((1.0 - _1854) / _1865);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1854 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1999 = frontier_phi_30_26_ladder;
        }
        float _2259;
        if (_1868 > 0.0)
        {
            _2259 = abs((1.0 - _1858) / _1868);
        }
        else
        {
            float frontier_phi_41_37_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_41_37_ladder = abs((_1858 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_41_37_ladder = 5000.0;
            }
            _2259 = frontier_phi_41_37_ladder;
        }
        float _2566;
        if (_1871 > 0.0)
        {
            _2566 = abs((1.0 - _1862) / _1871);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1862 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2566 = frontier_phi_52_47_ladder;
        }
        float _2568 = isnan(_2259) ? _1999 : (isnan(_1999) ? _2259 : min(_1999, _2259));
        float _2569 = isnan(_2566) ? _2568 : (isnan(_2568) ? _2566 : min(_2568, _2566));
        float _2573 = (_2569 * _1865) + _1854;
        float _2574 = (_2569 * _1868) + _1858;
        float _2575 = (_2569 * _1871) + _1862;
        float _2576 = _2569 * 9.9999997473787516355514526367188e-05;
        float _2577 = (-1.0) - _2576;
        float _2579 = _2576 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2575 > _2579) || ((_2575 < _2577) || ((_2574 > _2579) || ((_2574 < _2577) || ((_2573 < _2577) || (_2573 > _2579))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2756 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2575, cbModelParam._m0[17u].z, fma(_2574, cbModelParam._m0[17u].y, _2573 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2575, cbModelParam._m0[18u].z, fma(_2574, cbModelParam._m0[18u].y, _2573 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2575, cbModelParam._m0[19u].z, fma(_2574, cbModelParam._m0[19u].y, _2573 * cbModelParam._m0[19u].x))), _1798);
            frontier_phi_27_52_ladder = _2756.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2756.x * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2756.y * cbModelParam._m0[1u].z;
        }
        _1890 = frontier_phi_27_52_ladder_1;
        _1892 = frontier_phi_27_52_ladder_2;
        _1894 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_864, _865, _866), _1798);
        _1890 = _1874.x * cbModelParam._m0[1u].z;
        _1892 = _1874.y * cbModelParam._m0[1u].z;
        _1894 = _1874.z * cbModelParam._m0[1u].z;
    }
    float _1906 = ((((1.0 - _889) * ((_877 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_889 * _877)) * _856;
    float _1907 = _1906 * ((cbModelParam._m0[1u].w * (_1890 - _1789)) + _1789);
    float _1908 = _1906 * ((cbModelParam._m0[1u].w * (_1892 - _1791)) + _1791);
    float _1909 = _1906 * ((cbModelParam._m0[1u].w * (_1894 - _1793)) + _1793);
    float _1912 = fma(_1909, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1907 * cbSceneParam._m0[89u].x));
    float _1915 = fma(_1909, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1907 * cbSceneParam._m0[90u].x));
    float _1918 = fma(_1909, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, _1907 * cbSceneParam._m0[91u].x));
    vec4 _1926 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_795, _796));
    float _1928 = _1926.w;
    float _1940 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1928);
    float _1941 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1928);
    float _1942 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1928);
    uvec4 _1946 = floatBitsToUint(cbInstanceData._m0[_310 + 5u]);
    uint _1948 = _1946.x * 14u;
    uint _1949 = _1948 + 13u;
    float _1954 = _856 + (-1.0);
    float _1957 = (cbLight._m0[_1949].x * _1954) + 1.0;
    float _1958 = (cbLight._m0[_1949].y * _1954) + 1.0;
    uint _1960 = _1948 + 4u;
    float _1971 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_756, _757, _758));
    float _1974 = isnan(1.0) ? _1957 : (isnan(_1957) ? 1.0 : min(_1957, 1.0));
    float _1975 = cbLight._m0[_1960].x * _1940;
    float _1976 = cbLight._m0[_1960].y * _1941;
    float _1977 = cbLight._m0[_1960].z * _1942;
    uint _1978 = _1948 + 5u;
    uint _1984 = _1948 | 1u;
    float _1990 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_756, _757, _758));
    float _1993 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    float _2058;
    float _2059;
    float _2060;
    if (_761 == 0.0)
    {
        float _3830 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
        float _3841 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _2012 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
        float _2014 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
        _2058 = ((cbLight._m0[_1978].x * _1993) * _2014) + ((_1975 * _1974) * _2012);
        _2059 = ((_1993 * cbLight._m0[_1978].y) * _2014) + ((_1976 * _1974) * _2012);
        _2060 = ((_1993 * cbLight._m0[_1978].z) * _2014) + ((_1977 * _1974) * _2012);
    }
    else
    {
        float _2024 = _1971 + _761;
        float _2027 = (_761 * 2.0) + 1.0;
        float _2028 = (isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) / _2027;
        float _2035 = _1990 + _761;
        float _2037 = (isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))) / _2027;
        _2058 = (((_2037 * cbLight._m0[_1978].x) * _1993) + ((_1975 * _2028) * _1974)) * 0.3183098733425140380859375;
        _2059 = (((_2037 * cbLight._m0[_1978].y) * _1993) + ((_1976 * _2028) * _1974)) * 0.3183098733425140380859375;
        _2060 = (((_2037 * cbLight._m0[_1978].z) * _1993) + ((_1977 * _2028) * _1974)) * 0.3183098733425140380859375;
    }
    uint _2064 = _1948 + 8u;
    float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _760) * 0.949999988079071044921875);
    float _2081 = _2080 * _2080;
    float _2082 = cbLight._m0[_1948].x + _503;
    float _2083 = cbLight._m0[_1948].y + _504;
    float _2084 = cbLight._m0[_1948].z + _505;
    float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
    float _2089 = _2088 * _2082;
    float _2090 = _2088 * _2083;
    float _2091 = _2088 * _2084;
    float _2092 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_1948].xyz));
    float _3862 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
    float _3873 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2096 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _2097 = dot(vec3(_756, _757, _758), vec3(_2089, _2090, _2091));
    float _3884 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _2101 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2089, _2090, _2091));
    float _3895 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2105 = _2081 * _2081;
    float _2109 = ((_2100 * _2100) * (_2105 + (-1.0))) + 1.0;
    float _2120 = (exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2121 = 1.0 - _2081;
    float _2132 = (0.5 / (((_2096 * ((_2095 * _2121) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2121) + _2081) * _2095))) * _2095;
    float _3906 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2134 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_2105 / ((_2109 * _2109) * 3.141590118408203125));
    uint _2150 = _1948 + 9u;
    float _2164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1984].w)) * _760) * 0.949999988079071044921875);
    float _2165 = _2164 * _2164;
    float _2166 = cbLight._m0[_1984].x + _503;
    float _2167 = cbLight._m0[_1984].y + _504;
    float _2168 = cbLight._m0[_1984].z + _505;
    float _2172 = inversesqrt(dot(vec3(_2166, _2167, _2168), vec3(_2166, _2167, _2168)));
    float _2173 = _2172 * _2166;
    float _2174 = _2172 * _2167;
    float _2175 = _2172 * _2168;
    float _2176 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_1984].xyz));
    float _3917 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _2180 = dot(vec3(_756, _757, _758), vec3(_2173, _2174, _2175));
    float _3928 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _2184 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2173, _2174, _2175));
    float _3939 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2188 = _2165 * _2165;
    float _2192 = ((_2183 * _2183) * (_2188 + (-1.0))) + 1.0;
    float _2201 = (exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2202 = 1.0 - _2165;
    float _2212 = (0.5 / (((_2096 * ((_2179 * _2202) + _2165)) + 9.9999999392252902907785028219223e-09) + (((_2096 * _2202) + _2165) * _2179))) * _2179;
    float _3950 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2214 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2188 / ((_2192 * _2192) * 3.141590118408203125));
    float _2224 = (((_2201 * cbLight._m0[_2150].x) * _2214) * _1993) + ((((cbLight._m0[_2064].x * _1940) * _2120) * _2134) * _1974);
    float _2225 = (((_2201 * cbLight._m0[_2150].y) * _2214) * _1993) + ((((cbLight._m0[_2064].y * _1941) * _2120) * _2134) * _1974);
    float _2226 = (((_2201 * cbLight._m0[_2150].z) * _2214) * _1993) + ((((cbLight._m0[_2064].z * _1942) * _2120) * _2134) * _1974);
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    float _2372;
    if (_1946.y == 0u)
    {
        float _2303 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2304 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2303;
        float _2305 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2303;
        float _2306 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2303;
        uvec4 _2318 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2319 = _2318.x;
        uint _2330 = uint((float(_2318.y) * floor(float(uint(cbSceneParam._m0[85u].y * _796) / _2319))) + floor(float(uint(cbSceneParam._m0[85u].x * _795) / _2319)));
        float _2340 = (log2(_2306 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2341 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        uint _2344 = uint(isnan(14.0) ? _2341 : (isnan(_2341) ? 14.0 : min(_2341, 14.0)));
        uint _2351 = _2318.z;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        float _2410;
        if (((((1u << ((_2351 >> 4u) & 15u)) + 4294967295u) & texelFetch(g_lightClusterGridBuffer, int(((_2344 << 2u) + (_2330 << 6u)) >> 2u)).x) == 0u) || ((_2351 & 240u) == 0u))
        {
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
            _2410 = 0.0;
        }
        else
        {
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2411;
            float _2592 = 0.0;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            uint _2598 = 0u;
            uint _2607;
            bool _2608;
            for (;;)
            {
                _2607 = texelFetch(g_lightClassification, int((((_2344 << 5u) + (_2330 << 9u)) + (_2598 << 2u)) >> 2u)).x;
                _2608 = _2607 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2608)
                {
                    frontier_phi_58_pred = _2592;
                    frontier_phi_58_pred_1 = _2597;
                    frontier_phi_58_pred_2 = _2596;
                    frontier_phi_58_pred_3 = _2595;
                    frontier_phi_58_pred_4 = _2594;
                    frontier_phi_58_pred_5 = _2593;
                }
                else
                {
                    float _2829;
                    float _2830;
                    float _2831;
                    float _2832;
                    float _2833;
                    float _2834;
                    uint _2835;
                    _2829 = _2592;
                    _2830 = _2593;
                    _2831 = _2594;
                    _2832 = _2595;
                    _2833 = _2596;
                    _2834 = _2597;
                    _2835 = _2607;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    float _2765;
                    float _2766;
                    for (;;)
                    {
                        uint _2839 = uint(findLSB(_2835)) + (_2598 << 5u);
                        uint _2836 = (_2835 + 4294967295u) & _2835;
                        uint _2841 = _2839 * 48u;
                        vec4 _2855 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2841)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2841 + 3u)).x));
                        uint _2861 = (_2839 * 48u) + 4u;
                        vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2861)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2861 + 3u)).x));
                        float _2875 = _2874.x;
                        float _2876 = _2874.y;
                        float _2877 = _2874.z;
                        uint _2880 = (_2839 * 48u) + 8u;
                        vec3 _2891 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x));
                        uint _2896 = (_2839 * 48u) + 12u;
                        vec2 _2904 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2896)).x, texelFetch(g_PointLightRenderingBuffer, int(_2896 + 1u)).x));
                        float _2910 = inversesqrt(dot(vec3(_2304, _2305, _2306), vec3(_2304, _2305, _2306)));
                        float _2911 = _2910 * _2304;
                        float _2912 = _2910 * _2305;
                        float _2913 = _2910 * _2306;
                        float _2914 = _2855.x - _2304;
                        float _2915 = _2855.y - _2305;
                        float _2916 = _2855.z - _2306;
                        float _2917 = dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916));
                        float _2920 = inversesqrt(_2917);
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2924 = dot(vec3(_814, _817, _820), vec3(_2921, _2922, _2923));
                        float _2929 = 1.0 - (_2917 * _2855.w);
                        float _3971 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
                        float _2931 = sqrt(_2917) * _2874.w;
                        float _2934 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                        float _2935 = _2934 * _2934;
                        float _2936 = 1.0 - _2935;
                        float _2938 = (_2936 * _2936) * _761;
                        float _2941 = ((_2936 * _2924) + _2935) + _2938;
                        float _2946 = _2931 * _2931;
                        float _2951 = ((isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))) * _2930) / (((_2938 * 2.0) + 1.0) * ((_2946 * 0.699999988079071044921875) + 1.0));
                        float _2955 = dot(vec3(_2921, _2922, _2923), vec3(_2911, _2912, _2913));
                        float _3987 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2962 = dot(vec3((-0.0) - _2911, (-0.0) - _2912, (-0.0) - _2913), vec3(_814, _817, _820)) + 1.0;
                        float _2964 = (isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0))) * 0.5;
                        float _2971 = ((_2964 * _2964) * _2904.x) * exp2((_2904.y * 32.0) * log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))));
                        float _2973 = _761 / (_761 + 1.0);
                        float _2989 = (-0.0) - _2304;
                        float _2990 = (-0.0) - _2305;
                        float _2991 = (-0.0) - _2306;
                        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
                        float _2996 = _2995 * _2989;
                        float _2997 = _2995 * _2990;
                        float _2998 = _2995 * _2991;
                        float _3006 = exp2(log2(1.0 / ((_2946 * 3.5) + 5.0)) * 0.25);
                        float _3007 = 1.0 - _877;
                        float _3014 = sqrt(1.0 - ((1.0 - (_3007 * _3007)) * (1.0 - (_3006 * _3006))));
                        float _3015 = _3014 * _3014;
                        float _3016 = _3015 * _3015;
                        float _3017 = _2996 + _2921;
                        float _3018 = _2997 + _2922;
                        float _3019 = _2998 + _2923;
                        float _3023 = inversesqrt(dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019)));
                        float _3027 = dot(vec3(_814, _817, _820), vec3(_2996, _2997, _2998));
                        float _4003 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                        float _3030 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
                        float _3031 = dot(vec3(_814, _817, _820), vec3(_3023 * _3017, _3023 * _3018, _3023 * _3019));
                        float _4014 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3034 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
                        float _3038 = ((_3034 * _3034) * (_3016 + (-1.0))) + 1.0;
                        float _3039 = _2934 * _3015;
                        float _3040 = _3039 * _3039;
                        float _3043 = ((1.0 - _3040) * _2924) + _3040;
                        float _4025 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3044 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _3045 = 1.0 - _3015;
                        float _3055 = (0.5 / (((_3044 * ((_3030 * _3045) + _3015)) + 9.9999999392252902907785028219223e-09) + (((_3044 * _3045) + _3015) * _3030))) * _3044;
                        float _4036 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                        float _3066 = (((_3016 * 3.1415927410125732421875) * (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0)))) / ((_3038 * _3038) * ((_2946 * 2.1991131305694580078125) + 3.141590118408203125))) * _2930;
                        _2764 = (((((_2875 * 0.3183098733425140380859375) * _2973) * _2971) + _2875) * _2951) + _2832;
                        _2765 = (((((_2876 * 0.3183098733425140380859375) * _2973) * _2971) + _2876) * _2951) + _2833;
                        _2766 = (((((_2877 * 0.3183098733425140380859375) * _2973) * _2971) + _2877) * _2951) + _2834;
                        _2761 = (_3066 * _2891.x) + _2829;
                        _2762 = (_3066 * _2891.y) + _2830;
                        _2763 = (_3066 * _2891.z) + _2831;
                        if (_2836 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2829 = _2761;
                            _2830 = _2762;
                            _2831 = _2763;
                            _2832 = _2764;
                            _2833 = _2765;
                            _2834 = _2766;
                            _2835 = _2836;
                        }
                    }
                    frontier_phi_58_pred = _2761;
                    frontier_phi_58_pred_1 = _2766;
                    frontier_phi_58_pred_2 = _2765;
                    frontier_phi_58_pred_3 = _2764;
                    frontier_phi_58_pred_4 = _2763;
                    frontier_phi_58_pred_5 = _2762;
                }
                _2401 = frontier_phi_58_pred;
                _2411 = frontier_phi_58_pred_1;
                _2409 = frontier_phi_58_pred_2;
                _2407 = frontier_phi_58_pred_3;
                _2405 = frontier_phi_58_pred_4;
                _2403 = frontier_phi_58_pred_5;
                uint _2599 = _2598 + 1u;
                if (_2599 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2592 = _2401;
                    _2593 = _2403;
                    _2594 = _2405;
                    _2595 = _2407;
                    _2596 = _2409;
                    _2597 = _2411;
                    _2598 = _2599;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
            _2410 = _2411;
        }
        float _2415 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
        _2362 = (_2415 * _2406) + _2058;
        _2364 = (_2415 * _2408) + _2059;
        _2366 = (_2415 * _2410) + _2060;
        _2368 = ((_2400 * 0.039999999105930328369140625) * _2415) + _2224;
        _2370 = ((_2402 * 0.039999999105930328369140625) * _2415) + _2225;
        _2372 = ((_2404 * 0.039999999105930328369140625) * _2415) + _2226;
    }
    else
    {
        _2362 = _2058;
        _2364 = _2059;
        _2366 = _2060;
        _2368 = _2224;
        _2370 = _2225;
        _2372 = _2226;
    }
    float _2489;
    float _2490;
    float _2491;
    if (_761 > 0.0)
    {
        uint _2422 = _1948 + 4u;
        float _2428 = (-0.0) - _503;
        float _2429 = (-0.0) - _504;
        float _2430 = (-0.0) - _505;
        float _2431 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_2428, _2429, _2430));
        float _4052 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2435 = _867 + 1.0;
        float _2437 = (isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0))) * 0.5;
        float _2442 = _2437 * _2437;
        float _2443 = _2442 * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 32.0);
        float _2445 = _761 / (_761 + 1.0);
        float _2446 = isnan(_1957) ? 1.0 : (isnan(1.0) ? _1957 : min(1.0, _1957));
        uint _2459 = _1948 + 5u;
        float _2465 = dot(vec3(cbLight._m0[_1984].xyz), vec3(_2428, _2429, _2430));
        float _4073 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2472 = _2442 * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 32.0);
        float _2473 = isnan(_1958) ? 1.0 : (isnan(1.0) ? _1958 : min(1.0, _1958));
        _2489 = ((((_2472 * cbLight._m0[_2459].x) * _2445) * _2473) + ((((cbLight._m0[_2422].x * _1940) * _2443) * _2445) * _2446)) * 0.3183098733425140380859375;
        _2490 = ((((_2472 * cbLight._m0[_2459].y) * _2445) * _2473) + ((((cbLight._m0[_2422].y * _1941) * _2443) * _2445) * _2446)) * 0.3183098733425140380859375;
        _2491 = ((((_2472 * cbLight._m0[_2459].z) * _2445) * _2473) + ((((cbLight._m0[_2422].z * _1942) * _2443) * _2445) * _2446)) * 0.3183098733425140380859375;
    }
    else
    {
        _2489 = 0.0;
        _2490 = 0.0;
        _2491 = 0.0;
    }
    float _4089 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _4100 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _4111 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _4122 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _2506 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * ((_2362 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _856)) + _2489);
    float _2507 = (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * ((_2364 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _856)) + _2490);
    float _2508 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * ((_2366 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _856)) + _2491);
    float _2512 = 0.959999978542327880859375 - (exp2(log2(1.0 - _871) * 5.0) * 0.959999978542327880859375);
    float _2523 = (_2506 + ((_2368 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1698)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _695.x) * _2512) - _2506) * _741);
    float _2525 = (_2507 + ((_2370 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1698)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _695.y) * _2512) - _2507) * _741);
    float _2527 = (_2508 + ((_2372 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1698)) * cbPerFrame._m0[3u].x)) + ((((cbSceneParam._m0[72u].w * _695.z) * _2512) - _2508) * _741);
    float _2532 = cbInstanceData._m0[_310 + 6u].w * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)));
    float _2537 = _795 / cbSceneParam._m0[86u].x;
    float _2538 = _796 / cbSceneParam._m0[86u].y;
    vec4 _2552 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, (log2((isnan(cbSceneParam._m0[77u].w) ? _778 : (isnan(_778) ? cbSceneParam._m0[77u].w : min(_778, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2554 = _2552.x;
    float _2555 = _2552.y;
    float _2556 = _2552.z;
    float _2557 = _2552.w;
    float _2650;
    float _2652;
    float _2654;
    float _2656;
    if (_778 > cbSceneParam._m0[78u].w)
    {
        float _2613 = isnan(_778) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _778 : min(cbSceneParam._m0[80u].w, _778));
        float _2614 = _2613 / _778;
        float _2625 = _2614 * _302;
        float _2626 = _303 * _2614;
        float _2627 = (-0.0) - _2626;
        float _2628 = _2614 * _304;
        float _2630 = (cbSceneParam._m0[77u].w * _2627) / _2613;
        float _2631 = _2630 + cbSceneParam._m0[79u].w;
        float _2632 = cbSceneParam._m0[79u].w - _2626;
        float _2638 = sqrt(((_2625 * _2625) + (_2626 * _2626)) + (_2628 * _2628));
        float _2641 = (1.0 - (cbSceneParam._m0[77u].w / _2613)) * _2638;
        float _2646 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2648 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3071;
        if (abs((_2627 - _2630) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3071 = ((((_2631 > 0.0) ? exp2(_2646 * _2631) : (2.0 - exp2(_2648 * _2631))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2641;
        }
        else
        {
            float _2786 = 1.0 / cbSceneParam._m0[80u].x;
            float _2787 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : max(_2631, _2632));
            float _2788 = isnan(_2632) ? _2631 : (isnan(_2631) ? _2632 : min(_2631, _2632));
            float _2797 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : min(_2787, 0.0));
            float _2798 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : min(_2788, 0.0));
            _3071 = ((abs(_2638 / _2627) * cbSceneParam._m0[80u].y) * ((((_2797 - _2798) * 2.0) - ((exp2(_2646 * (isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0)))) - exp2(_2646 * (isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0))))) * _2786)) - ((exp2(_2648 * _2797) - exp2(_2648 * _2798)) * _2786))) + (_2641 * cbSceneParam._m0[80u].z);
        }
        vec4 _3073 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2537, _2538, 1.0), 0.0);
        float _3082 = exp2((_3071 * (-1.44269502162933349609375)) * (1.0 - _3073.w));
        float _3083 = log2(_3082);
        float _3099 = log2(_2557);
        _2650 = (exp2(_3099 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].x)) * _3073.x) / cbSceneParam._m0[78u].x)) + _2554;
        _2652 = (exp2(_3099 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].y)) * _3073.y) / cbSceneParam._m0[78u].y)) + _2555;
        _2654 = (exp2(_3099 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3083 * cbSceneParam._m0[78u].z)) * _3073.z) / cbSceneParam._m0[78u].z)) + _2556;
        _2656 = _3082 * _2557;
    }
    else
    {
        _2650 = _2554;
        _2652 = _2555;
        _2654 = _2556;
        _2656 = _2557;
    }
    bool _3109;
    float _2711;
    vec4 _2714;
    float _2716;
    vec4 _2718;
    float _2726;
    float _2727;
    float _2728;
    float _2729;
    bool _2739;
    for (;;)
    {
        bool _2668 = roundEven(cbMatDynParam._m0[0u].y) == 3.0;
        float _2669 = log2(_2656);
        float _2676 = exp2(_2669 * cbSceneParam._m0[78u].x) * _2523;
        float _2677 = exp2(_2669 * cbSceneParam._m0[78u].y) * _2525;
        float _2678 = exp2(_2669 * cbSceneParam._m0[78u].z) * _2527;
        vec4 _2686 = texture(sampler2D(g_DepthTexture, SS_ClampPoint), vec2(_795, _796));
        float _2688 = _2686.x;
        float _2709 = (((floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? (((-0.0) - cbSceneParam._m0[2u].z) / (cbSceneParam._m0[2u].x - _2688)) : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * _2688))) - _778) * cbMtdParam._m0[17u].y;
        float _4173 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        _2711 = _2532 * (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0)));
        float _2712 = _785 + (-0.5);
        _2714 = cbMtdParam._m0[1u];
        _2716 = _2714.y * _2712;
        _2718 = cbMatDynParam._m0[0u];
        float _2725 = (roundEven(_2718.y) != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2726 = _2725 * (_2668 ? _2676 : (_2676 + (cbSceneParam._m0[72u].w * _2650)));
        _2727 = _2725 * (_2668 ? _2677 : (_2677 + (cbSceneParam._m0[72u].w * _2652)));
        _2728 = _2725 * (_2668 ? _2678 : (_2678 + (cbSceneParam._m0[72u].w * _2654)));
        _2729 = _2712 * 0.999000012874603271484375;
        _2739 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2739)
        {
            if ((cbInstanceData._m0[_310 + 7u].x + _2729) < 0.5)
            {
                _3109 = true;
                break;
            }
        }
        uint _2821 = _833 + uint(_2718.w);
        if ((cbInstanceData._m0[_2821].w < 1.0) && ((cbInstanceData._m0[_2821].w + _2729) < 0.5))
        {
            _3109 = true;
            break;
        }
        if ((_2716 + _413) < _2714.x)
        {
            _3109 = true;
            break;
        }
        _3109 = false;
        break;
    }
    float _3114;
    if (_3109)
    {
        discard_state = true;
        _3114 = 0.0;
    }
    else
    {
        _3114 = _2711;
    }
    SV_Target.x = _2726;
    SV_Target.y = _2727;
    SV_Target.z = _2728;
    SV_Target.w = _3114;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = _2711;
    discard_exit();
}


