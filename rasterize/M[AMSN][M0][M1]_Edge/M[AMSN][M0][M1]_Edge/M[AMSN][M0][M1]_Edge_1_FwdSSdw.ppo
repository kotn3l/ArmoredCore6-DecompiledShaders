#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _810;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _195 = _194 * NORMAL.x;
    float _196 = _194 * NORMAL.y;
    float _197 = _194 * NORMAL.z;
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209;
    float _210;
    float _211;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _209 = (-0.0) - _195;
        _210 = (-0.0) - _196;
        _211 = (-0.0) - _197;
    }
    else
    {
        _209 = _195;
        _210 = _196;
        _211 = _197;
    }
    vec4 _231 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _237 = _231.x * cbMtdParam._m0[9u].x;
    float _238 = _231.y * cbMtdParam._m0[9u].y;
    float _239 = _231.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _255 = _251.z;
    float _259 = (_251.x * 2.0) + (-1.0);
    float _261 = (_251.y * 2.0) + (-1.0);
    float _262 = dot(vec2(_259, _261), vec2(_259, _261));
    float _3150 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _268 = sqrt(1.0 - (isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0))));
    float _271 = fma(_268, _209, fma(_261, _201 * TANGENT.x, (_187 * _180) * _259));
    float _274 = fma(_268, _210, fma(_261, _201 * TANGENT.y, (_187 * _181) * _259));
    float _277 = fma(_268, _211, fma(_261, _201 * TANGENT.z, (_187 * _182) * _259));
    float _281 = inversesqrt(dot(vec3(_271, _274, _277), vec3(_271, _274, _277)));
    float _282 = _281 * _271;
    float _283 = _281 * _274;
    float _284 = _281 * _277;
    float _3161 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _285 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    float _3172 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3183 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3194 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _304 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _346 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _356 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _346);
    float _357 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _346);
    float _358 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _346);
    float _362 = inversesqrt(dot(vec3(_356, _357, _358), vec3(_356, _357, _358)));
    float _363 = _356 * _362;
    float _364 = _357 * _362;
    float _365 = _358 * _362;
    float _371 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _372 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _393 = fma(_284, cbSceneParam._m0[5u].z, fma(_283, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _282));
    float _396 = fma(_284, cbSceneParam._m0[6u].z, fma(_283, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _282));
    float _399 = fma(_284, cbSceneParam._m0[7u].z, fma(_283, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _282));
    uint _412 = uint(roundEven(NORMAL.w)) * 13u;
    uint _415 = (_412 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _421 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0)))) * cbInstanceData._m0[_415].x;
    float _422 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0)))) * cbInstanceData._m0[_415].y;
    float _423 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0)))) * cbInstanceData._m0[_415].z;
    float _3205 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0));
    float _3216 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _425 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
    float _3227 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _426 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
    vec4 _435 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _371, cbSceneParam._m0[86u].y * _372));
    float _438 = _435.x * TEXCOORD.z;
    float _439 = dot(vec3(_282, _283, _284), vec3(_363, _364, _365));
    float _442 = _439 * 2.0;
    float _446 = (_442 * _282) - _363;
    float _447 = (_442 * _283) - _364;
    float _448 = (_442 * _284) - _365;
    float _452 = abs(dot(vec3(_363, _364, _365), vec3(_282, _283, _284)));
    float _3238 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _454 = sqrt(_285);
    float _467 = exp2((_454 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_454 * 3.0));
    float _499 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _503 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _809;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _534 = fma(_507, cbModelParam._m0[26u].z, fma(_503, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _499));
        float _538 = fma(_507, cbModelParam._m0[27u].z, fma(_503, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _499));
        float _542 = fma(_507, cbModelParam._m0[28u].z, fma(_503, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _499));
        float _567 = _499 + _282;
        float _568 = _503 + _283;
        float _569 = _507 + _284;
        float _579 = fma(_569, cbModelParam._m0[26u].z, fma(_568, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _567)) - _534;
        float _580 = fma(_569, cbModelParam._m0[27u].z, fma(_568, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _567)) - _538;
        float _581 = fma(_569, cbModelParam._m0[28u].z, fma(_568, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _567)) - _542;
        float _585 = inversesqrt(dot(vec3(_579, _580, _581), vec3(_579, _580, _581)));
        float _598 = ((_585 * _579) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_534 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _599 = ((_585 * _580) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_538 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _600 = ((_585 * _581) / cbModelParam._m0[34u].z) + ((((((_542 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _603 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_598, _599, _600), 0.0);
        vec4 _610 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_598, _599, _600), 0.0);
        vec4 _617 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_598, _599, _600), 0.0);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_598, _599, _600), 0.0);
        float _637 = exp2((_603.w + (-0.5)) * 20.0) * 2.0;
        float _638 = _637 * (_603.x + (-0.5));
        float _639 = _637 * (_603.y + (-0.5));
        float _640 = _637 * (_603.z + (-0.5));
        float _647 = exp2((_610.w + (-0.5)) * 20.0) * 2.0;
        float _648 = _647 * (_610.x + (-0.5));
        float _649 = _647 * (_610.y + (-0.5));
        float _650 = _647 * (_610.z + (-0.5));
        float _657 = exp2((_617.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_617.x + (-0.5));
        float _659 = _657 * (_617.y + (-0.5));
        float _660 = _657 * (_617.z + (-0.5));
        float _667 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_624.x + (-0.5));
        float _669 = _667 * (_624.y + (-0.5));
        float _670 = _667 * (_624.z + (-0.5));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _673 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _674 = _638 * 0.5;
        float _675 = _648 * 0.5;
        float _676 = _658 * 0.5;
        float _677 = dot(vec3(_674, _675, _676), vec3(_674, _675, _676));
        float _682 = (_677 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_677);
        float _691 = (dot(vec3(_282, _283, _284), vec3(_682 * _674, _682 * _675, _682 * _676)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _701 = sqrt(((_675 * _675) + (_674 * _674)) + (_676 * _676)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _702 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _703 = _702 * 2.0;
        float _707 = (1.0 - _702) / (_702 + 1.0);
        float _3286 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
        float _708 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _717 = ((((1.0 - _708) * (_703 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_703 + 1.0))) + _708) * _671;
        float _718 = _639 * 0.5;
        float _719 = _649 * 0.5;
        float _720 = _659 * 0.5;
        float _721 = dot(vec3(_718, _719, _720), vec3(_718, _719, _720));
        float _726 = (_721 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_721);
        float _734 = (dot(vec3(_282, _283, _284), vec3(_726 * _718, _726 * _719, _726 * _720)) + 1.0) * 0.5;
        float _3297 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _743 = sqrt(((_719 * _719) + (_718 * _718)) + (_720 * _720)) / (_672 + 9.9999997473787516355514526367188e-06);
        float _3308 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
        float _745 = _744 * 2.0;
        float _749 = (1.0 - _744) / (_744 + 1.0);
        float _3319 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _750 = isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0));
        float _759 = ((((1.0 - _750) * (_745 + 2.0)) * exp2(log2(isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0))) * (_745 + 1.0))) + _750) * _672;
        float _760 = _640 * 0.5;
        float _761 = _650 * 0.5;
        float _762 = _660 * 0.5;
        float _763 = dot(vec3(_760, _761, _762), vec3(_760, _761, _762));
        float _768 = (_763 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_763);
        float _776 = (dot(vec3(_282, _283, _284), vec3(_768 * _760, _768 * _761, _768 * _762)) + 1.0) * 0.5;
        float _3330 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _785 = sqrt(((_761 * _761) + (_760 * _760)) + (_762 * _762)) / (_673 + 9.9999997473787516355514526367188e-06);
        float _3341 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _787 = _786 * 2.0;
        float _791 = (1.0 - _786) / (_786 + 1.0);
        float _3352 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _792 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _801 = ((((1.0 - _792) * (_787 + 2.0)) * exp2(log2(isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))) * (_787 + 1.0))) + _792) * _673;
        _809 = _640;
        _811 = _639;
        _812 = _638;
        _813 = _650;
        _814 = _649;
        _815 = _648;
        _816 = _660;
        _817 = _659;
        _818 = _658;
        _819 = _673;
        _820 = _672;
        _821 = _671;
        _822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0)));
        _823 = cbModelParam._m0[36u].z * (isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0)));
        _824 = cbModelParam._m0[36u].z * (isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0)));
    }
    else
    {
        _809 = _810;
        _811 = _810;
        _812 = _810;
        _813 = _810;
        _814 = _810;
        _815 = _810;
        _816 = _810;
        _817 = _810;
        _818 = _810;
        _819 = _810;
        _820 = _810;
        _821 = _810;
        _822 = 0.0;
        _823 = 0.0;
        _824 = 0.0;
    }
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _850 = fma(_507, cbModelParam._m0[30u].z, fma(_503, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _499));
        float _854 = fma(_507, cbModelParam._m0[31u].z, fma(_503, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _499));
        float _858 = fma(_507, cbModelParam._m0[32u].z, fma(_503, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _499));
        float _881 = _499 + _282;
        float _882 = _503 + _283;
        float _883 = _507 + _284;
        float _893 = fma(_883, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _881)) - _850;
        float _894 = fma(_883, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _881)) - _854;
        float _895 = fma(_883, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _881)) - _858;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_850 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_854 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[35u].z) + ((((((_858 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _949 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_916.x + (-0.5));
        float _951 = _949 * (_916.y + (-0.5));
        float _952 = _949 * (_916.z + (-0.5));
        float _959 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_923.x + (-0.5));
        float _961 = _959 * (_923.y + (-0.5));
        float _962 = _959 * (_923.z + (-0.5));
        float _969 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_930.x + (-0.5));
        float _971 = _969 * (_930.y + (-0.5));
        float _972 = _969 * (_930.z + (-0.5));
        float _979 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_937.x + (-0.5));
        float _981 = _979 * (_937.y + (-0.5));
        float _982 = _979 * (_937.z + (-0.5));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = _950 * 0.5;
        float _987 = _960 * 0.5;
        float _988 = _970 * 0.5;
        float _989 = dot(vec3(_986, _987, _988), vec3(_986, _987, _988));
        float _994 = (_989 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_989);
        float _1002 = (dot(vec3(_282, _283, _284), vec3(_994 * _986, _994 * _987, _994 * _988)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1011 = sqrt(((_987 * _987) + (_986 * _986)) + (_988 * _988)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1013 = _1012 * 2.0;
        float _1017 = (1.0 - _1012) / (_1012 + 1.0);
        float _3415 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1027 = ((((1.0 - _1018) * (_1013 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1013 + 1.0))) + _1018) * _983;
        float _1028 = _951 * 0.5;
        float _1029 = _961 * 0.5;
        float _1030 = _971 * 0.5;
        float _1031 = dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030));
        float _1036 = (_1031 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1031);
        float _1044 = (dot(vec3(_282, _283, _284), vec3(_1036 * _1028, _1036 * _1029, _1036 * _1030)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1053 = sqrt(((_1029 * _1029) + (_1028 * _1028)) + (_1030 * _1030)) / (_984 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1055 = _1054 * 2.0;
        float _1059 = (1.0 - _1054) / (_1054 + 1.0);
        float _3448 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1069 = ((((1.0 - _1060) * (_1055 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1055 + 1.0))) + _1060) * _984;
        float _1070 = _952 * 0.5;
        float _1071 = _962 * 0.5;
        float _1072 = _972 * 0.5;
        float _1073 = dot(vec3(_1070, _1071, _1072), vec3(_1070, _1071, _1072));
        float _1078 = (_1073 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1073);
        float _1086 = (dot(vec3(_282, _283, _284), vec3(_1078 * _1070, _1078 * _1071, _1078 * _1072)) + 1.0) * 0.5;
        float _3459 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1095 = sqrt(((_1071 * _1071) + (_1070 * _1070)) + (_1072 * _1072)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3470 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1097 = _1096 * 2.0;
        float _1101 = (1.0 - _1096) / (_1096 + 1.0);
        float _3481 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _1111 = ((((1.0 - _1102) * (_1097 + 2.0)) * exp2(log2(isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0))) * (_1097 + 1.0))) + _1102) * _985;
        _1119 = _952;
        _1120 = _951;
        _1121 = _950;
        _1122 = _962;
        _1123 = _961;
        _1124 = _960;
        _1125 = _972;
        _1126 = _971;
        _1127 = _970;
        _1128 = _985;
        _1129 = _984;
        _1130 = _983;
        _1131 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0)));
        _1132 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)));
        _1133 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0)));
    }
    else
    {
        _1119 = _810;
        _1120 = _810;
        _1121 = _810;
        _1122 = _810;
        _1123 = _810;
        _1124 = _810;
        _1125 = _810;
        _1126 = _810;
        _1127 = _810;
        _1128 = _810;
        _1129 = _810;
        _1130 = _810;
        _1131 = 0.0;
        _1132 = 0.0;
        _1133 = 0.0;
    }
    float _1143 = (cbModelParam._m0[1u].x * (_1131 - _822)) + _822;
    float _1144 = (cbModelParam._m0[1u].x * (_1132 - _823)) + _823;
    float _1145 = (cbModelParam._m0[1u].x * (_1133 - _824)) + _824;
    float _1166 = fma(_1145, cbSceneParam._m0[89u].z, fma(_1144, cbSceneParam._m0[89u].y, _1143 * cbSceneParam._m0[89u].x));
    float _1169 = fma(_1145, cbSceneParam._m0[90u].z, fma(_1144, cbSceneParam._m0[90u].y, _1143 * cbSceneParam._m0[90u].x));
    float _1172 = fma(_1145, cbSceneParam._m0[91u].z, fma(_1144, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1143));
    float _1187 = _446 * 0.5;
    float _1188 = _447 * 0.5;
    float _1189 = _448 * 0.5;
    float _1190 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_1121, _1124, _1127, _1130));
    float _1193 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_1120, _1123, _1126, _1129));
    float _1196 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_1119, _1122, _1125, _1128));
    float _1230;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1203 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_809, _813, _816, _819));
        float _1207 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_811, _814, _817, _820));
        float _1211 = dot(vec4(_1187, _1188, _1189, 1.0), vec4(_812, _815, _818, _821));
        float _1218 = dot(vec4(cbModelParam._m0[39u]), vec4(_1187, _1188, _1189, 1.0));
        _1230 = dot(vec3(isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0)), isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)), isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1218) ? 0.0 : (isnan(0.0) ? _1218 : max(0.0, _1218))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1230 = 1.0;
    }
    float _1241;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1232 = dot(vec4(cbModelParam._m0[40u]), vec4(_1187, _1188, _1189, 1.0));
        _1241 = dot(vec3(isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)), isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1232) ? 0.0 : (isnan(0.0) ? _1232 : max(0.0, _1232))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1241 = 1.0;
    }
    float _1245 = (_1241 * cbModelParam._m0[1u].x) + (_1230 * (1.0 - cbModelParam._m0[1u].x));
    float _1255 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _285);
    float _1256 = isnan(_1255) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1255 : min(cbModelParam._m0[25u].z, _1255));
    float _1338;
    float _1340;
    float _1342;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1305 = fma(_507, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _499)) + cbModelParam._m0[13u].w;
        float _1309 = fma(_507, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _499)) + cbModelParam._m0[14u].w;
        float _1313 = fma(_507, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _499)) + cbModelParam._m0[15u].w;
        float _1316 = fma(_448, cbModelParam._m0[13u].z, fma(_447, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _446));
        float _1319 = fma(_448, cbModelParam._m0[14u].z, fma(_447, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _446));
        float _1322 = fma(_448, cbModelParam._m0[15u].z, fma(_447, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _446));
        float _1350;
        if (_1316 > 0.0)
        {
            _1350 = abs((1.0 - _1305) / _1316);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1316 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1305 + 1.0) / _1316);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1350 = frontier_phi_16_14_ladder;
        }
        float _1577;
        if (_1319 > 0.0)
        {
            _1577 = abs((1.0 - _1309) / _1319);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1319 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1309 + 1.0) / _1319);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1577 = frontier_phi_25_21_ladder;
        }
        float _1823;
        if (_1322 > 0.0)
        {
            _1823 = abs((1.0 - _1313) / _1322);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1322 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1313 + 1.0) / _1322);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1823 = frontier_phi_37_32_ladder;
        }
        float _1825 = isnan(_1577) ? _1350 : (isnan(_1350) ? _1577 : min(_1350, _1577));
        float _1826 = isnan(_1823) ? _1825 : (isnan(_1825) ? _1823 : min(_1825, _1823));
        float _1830 = (_1826 * _1316) + _1305;
        float _1831 = (_1826 * _1319) + _1309;
        float _1832 = (_1826 * _1322) + _1313;
        float _1833 = _1826 * 9.9999997473787516355514526367188e-05;
        float _1835 = (-1.0) - _1833;
        float _1837 = _1833 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1832 > _1837) || ((_1832 < _1835) || ((_1831 > _1837) || ((_1831 < _1835) || ((_1830 < _1835) || (_1830 > _1837))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1956 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1832, cbModelParam._m0[9u].z, fma(_1831, cbModelParam._m0[9u].y, _1830 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1832, cbModelParam._m0[10u].z, fma(_1831, cbModelParam._m0[10u].y, _1830 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1832, cbModelParam._m0[11u].z, fma(_1831, cbModelParam._m0[11u].y, _1830 * cbModelParam._m0[11u].x))), _1256);
            frontier_phi_15_37_ladder = _1956.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1956.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1956.x * cbModelParam._m0[1u].y;
        }
        _1338 = frontier_phi_15_37_ladder_2;
        _1340 = frontier_phi_15_37_ladder_1;
        _1342 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1326 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_446, _447, _448), _1256);
        _1338 = _1326.x * cbModelParam._m0[1u].y;
        _1340 = _1326.y * cbModelParam._m0[1u].y;
        _1342 = _1326.z * cbModelParam._m0[1u].y;
    }
    float _1346 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _285);
    float _1347 = isnan(_1346) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1346 : min(cbModelParam._m0[25u].w, _1346));
    float _1440;
    float _1442;
    float _1444;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1404 = fma(_507, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _499)) + cbModelParam._m0[21u].w;
        float _1408 = fma(_507, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _499)) + cbModelParam._m0[22u].w;
        float _1412 = fma(_507, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _499)) + cbModelParam._m0[23u].w;
        float _1415 = fma(_448, cbModelParam._m0[21u].z, fma(_447, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _446));
        float _1418 = fma(_448, cbModelParam._m0[22u].z, fma(_447, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _446));
        float _1421 = fma(_448, cbModelParam._m0[23u].z, fma(_447, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _446));
        float _1582;
        if (_1415 > 0.0)
        {
            _1582 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1582 = frontier_phi_27_23_ladder;
        }
        float _1850;
        if (_1418 > 0.0)
        {
            _1850 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1850 = frontier_phi_39_34_ladder;
        }
        float _2055;
        if (_1421 > 0.0)
        {
            _2055 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2055 = frontier_phi_48_45_ladder;
        }
        float _2057 = isnan(_1850) ? _1582 : (isnan(_1582) ? _1850 : min(_1582, _1850));
        float _2058 = isnan(_2055) ? _2057 : (isnan(_2057) ? _2055 : min(_2057, _2055));
        float _2062 = (_2058 * _1415) + _1404;
        float _2063 = (_2058 * _1418) + _1408;
        float _2064 = (_2058 * _1421) + _1412;
        float _2065 = _2058 * 9.9999997473787516355514526367188e-05;
        float _2066 = (-1.0) - _2065;
        float _2068 = _2065 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2064 > _2068) || ((_2064 < _2066) || ((_2063 > _2068) || ((_2063 < _2066) || ((_2062 < _2066) || (_2062 > _2068))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2262 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2064, cbModelParam._m0[17u].z, fma(_2063, cbModelParam._m0[17u].y, _2062 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2064, cbModelParam._m0[18u].z, fma(_2063, cbModelParam._m0[18u].y, _2062 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2064, cbModelParam._m0[19u].z, fma(_2063, cbModelParam._m0[19u].y, _2062 * cbModelParam._m0[19u].x))), _1347);
            frontier_phi_24_48_ladder = _2262.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2262.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2262.x * cbModelParam._m0[1u].z;
        }
        _1440 = frontier_phi_24_48_ladder_2;
        _1442 = frontier_phi_24_48_ladder_1;
        _1444 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1424 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_446, _447, _448), _1347);
        _1440 = _1424.x * cbModelParam._m0[1u].z;
        _1442 = _1424.y * cbModelParam._m0[1u].z;
        _1444 = _1424.z * cbModelParam._m0[1u].z;
    }
    float _1456 = ((((1.0 - _467) * ((_454 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_467 * _454)) * _438;
    float _1457 = _1456 * ((cbModelParam._m0[1u].w * (_1440 - _1338)) + _1338);
    float _1458 = _1456 * ((cbModelParam._m0[1u].w * (_1442 - _1340)) + _1340);
    float _1459 = _1456 * ((cbModelParam._m0[1u].w * (_1444 - _1342)) + _1342);
    float _1462 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1457 * cbSceneParam._m0[89u].x));
    float _1465 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1457 * cbSceneParam._m0[90u].x));
    float _1468 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, _1457 * cbSceneParam._m0[91u].x));
    vec4 _1476 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_371, _372));
    float _1478 = _1476.w;
    float _1490 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1478);
    float _1491 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1478);
    float _1492 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1478);
    uvec4 _1496 = floatBitsToUint(cbInstanceData._m0[_412 + 5u]);
    uint _1498 = _1496.x * 14u;
    uint _1499 = _1498 + 13u;
    float _1506 = _438 + (-1.0);
    float _1511 = (cbLight._m0[_1499].x * _1506) + 1.0;
    float _1512 = (cbLight._m0[_1499].y * _1506) + 1.0;
    float _1513 = (cbLight._m0[_1499].z * _1506) + 1.0;
    float _1514 = (cbLight._m0[_1499].w * _1506) + 1.0;
    uint _1515 = _1498 + 5u;
    float _1521 = isnan(1.0) ? _1512 : (isnan(_1512) ? 1.0 : min(_1512, 1.0));
    uint _1525 = _1498 + 4u;
    float _1535 = isnan(1.0) ? _1511 : (isnan(_1511) ? 1.0 : min(_1511, 1.0));
    uint _1539 = _1498 | 1u;
    float _1550 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_282, _283, _284));
    float _1553 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_282, _283, _284));
    float _3617 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _3628 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
    float _1558 = (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0))) * 0.3183098733425140380859375;
    float _1560 = (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.3183098733425140380859375;
    float _1567 = ((cbLight._m0[_1515].x * _1521) * _1560) + (((cbLight._m0[_1525].x * _1490) * _1535) * _1558);
    float _1568 = ((_1521 * cbLight._m0[_1515].y) * _1560) + (((cbLight._m0[_1525].y * _1491) * _1535) * _1558);
    float _1569 = ((_1521 * cbLight._m0[_1515].z) * _1560) + (((cbLight._m0[_1525].z * _1492) * _1535) * _1558);
    uvec4 _1574 = floatBitsToUint(cbLight._m0[_1498 + 12u]);
    bool _1576 = _1574.x == 0u;
    float _1587;
    float _1589;
    float _1591;
    if (_1576)
    {
        _1587 = _1567;
        _1589 = _1568;
        _1591 = _1569;
    }
    else
    {
        uint _1595 = _1498 + 6u;
        float _1611 = (dot(vec3(cbLight._m0[_1498 + 2u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1612 = _1611 * _1611;
        float _3639 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1614 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
        _1587 = (((cbLight._m0[_1595].x * 0.3183098733425140380859375) * _1613) * _1614) + _1567;
        _1589 = (((cbLight._m0[_1595].y * 0.3183098733425140380859375) * _1613) * _1614) + _1568;
        _1591 = (((cbLight._m0[_1595].z * 0.3183098733425140380859375) * _1613) * _1614) + _1569;
    }
    bool _1594 = _1574.y == 0u;
    float _1632;
    float _1634;
    float _1636;
    if (_1594)
    {
        _1632 = _1587;
        _1634 = _1589;
        _1636 = _1591;
    }
    else
    {
        uint _1794 = _1498 + 7u;
        float _1810 = (dot(vec3(cbLight._m0[_1498 + 3u].xyz), vec3(_282, _283, _284)) * 0.5) + 0.5;
        float _1811 = _1810 * _1810;
        float _3655 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1813 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
        _1632 = (((cbLight._m0[_1794].x * 0.3183098733425140380859375) * _1812) * _1813) + _1587;
        _1634 = (((cbLight._m0[_1794].y * 0.3183098733425140380859375) * _1812) * _1813) + _1589;
        _1636 = (((cbLight._m0[_1794].z * 0.3183098733425140380859375) * _1812) * _1813) + _1591;
    }
    uint _1639 = _1498 + 8u;
    float _1652 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1498].w)) * _285) * 0.949999988079071044921875);
    float _1653 = _1652 * _1652;
    float _1654 = cbLight._m0[_1498].x + _363;
    float _1655 = cbLight._m0[_1498].y + _364;
    float _1656 = cbLight._m0[_1498].z + _365;
    float _1660 = inversesqrt(dot(vec3(_1654, _1655, _1656), vec3(_1654, _1655, _1656)));
    float _1661 = _1660 * _1654;
    float _1662 = _1660 * _1655;
    float _1663 = _1660 * _1656;
    float _1664 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1498].xyz));
    float _3671 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1667 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _3682 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _1668 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _1669 = dot(vec3(_282, _283, _284), vec3(_1661, _1662, _1663));
    float _3693 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
    float _1672 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _1673 = dot(vec3(cbLight._m0[_1498].xyz), vec3(_1661, _1662, _1663));
    float _3704 = isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0));
    float _1677 = _1653 * _1653;
    float _1681 = ((_1672 * _1672) * (_1677 + (-1.0))) + 1.0;
    float _1692 = (exp2(log2(1.0 - (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1693 = 1.0 - _1653;
    float _1704 = (0.5 / (((_1668 * ((_1667 * _1693) + _1653)) + 9.9999999392252902907785028219223e-09) + (((_1668 * _1693) + _1653) * _1667))) * _1667;
    float _3715 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1706 = (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1677 / ((_1681 * _1681) * 3.141590118408203125));
    uint _1720 = _1498 + 9u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1539].w)) * _285) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1539].x + _363;
    float _1734 = cbLight._m0[_1539].y + _364;
    float _1735 = cbLight._m0[_1539].z + _365;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1539].xyz));
    float _3726 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1747 = dot(vec3(_282, _283, _284), vec3(_1740, _1741, _1742));
    float _3737 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
    float _1750 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1751 = dot(vec3(cbLight._m0[_1539].xyz), vec3(_1740, _1741, _1742));
    float _3748 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
    float _1755 = _1732 * _1732;
    float _1759 = ((_1750 * _1750) * (_1755 + (-1.0))) + 1.0;
    float _1768 = (exp2(log2(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1769 = 1.0 - _1732;
    float _1779 = (0.5 / (((_1668 * ((_1746 * _1769) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1668 * _1769) + _1732) * _1746))) * _1746;
    float _3759 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1781 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1755 / ((_1759 * _1759) * 3.141590118408203125));
    float _1791 = (((_1768 * cbLight._m0[_1720].x) * _1781) * _1521) + ((((cbLight._m0[_1639].x * _1490) * _1692) * _1706) * _1535);
    float _1792 = (((_1768 * cbLight._m0[_1720].y) * _1781) * _1521) + ((((cbLight._m0[_1639].y * _1491) * _1692) * _1706) * _1535);
    float _1793 = (((_1768 * cbLight._m0[_1720].z) * _1781) * _1521) + ((((cbLight._m0[_1639].z * _1492) * _1692) * _1706) * _1535);
    float _1855;
    float _1857;
    float _1859;
    if (_1576)
    {
        _1855 = _1791;
        _1857 = _1792;
        _1859 = _1793;
    }
    else
    {
        uint _1861 = _1498 + 2u;
        uint _1865 = _1498 + 10u;
        float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _285) * 0.949999988079071044921875);
        float _1880 = _1879 * _1879;
        float _1881 = cbLight._m0[_1861].x + _363;
        float _1882 = cbLight._m0[_1861].y + _364;
        float _1883 = cbLight._m0[_1861].z + _365;
        float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
        float _1888 = _1887 * _1881;
        float _1889 = _1887 * _1882;
        float _1890 = _1887 * _1883;
        float _1891 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1861].xyz));
        float _3770 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1894 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
        float _1895 = dot(vec3(_282, _283, _284), vec3(_1888, _1889, _1890));
        float _3781 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1898 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1899 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_1888, _1889, _1890));
        float _3792 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1903 = _1880 * _1880;
        float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
        float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1917 = 1.0 - _1880;
        float _1927 = (0.5 / (((_1668 * ((_1894 * _1917) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1668 * _1917) + _1880) * _1894))) * _1894;
        float _3803 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
        float _1929 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
        float _1930 = isnan(1.0) ? _1513 : (isnan(_1513) ? 1.0 : min(_1513, 1.0));
        _1855 = (((_1916 * cbLight._m0[_1865].x) * _1929) * _1930) + _1791;
        _1857 = (((_1916 * cbLight._m0[_1865].y) * _1929) * _1930) + _1792;
        _1859 = (((_1916 * cbLight._m0[_1865].z) * _1929) * _1930) + _1793;
    }
    float _1965;
    float _1967;
    float _1969;
    if (_1594)
    {
        _1965 = _1855;
        _1967 = _1857;
        _1969 = _1859;
    }
    else
    {
        uint _1976 = _1498 + 3u;
        uint _1980 = _1498 + 11u;
        float _1994 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _285) * 0.949999988079071044921875);
        float _1995 = _1994 * _1994;
        float _1996 = cbLight._m0[_1976].x + _363;
        float _1997 = cbLight._m0[_1976].y + _364;
        float _1998 = cbLight._m0[_1976].z + _365;
        float _2002 = inversesqrt(dot(vec3(_1996, _1997, _1998), vec3(_1996, _1997, _1998)));
        float _2003 = _2002 * _1996;
        float _2004 = _2002 * _1997;
        float _2005 = _2002 * _1998;
        float _2006 = dot(vec3(_282, _283, _284), vec3(cbLight._m0[_1976].xyz));
        float _3819 = isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0));
        float _2009 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _2010 = dot(vec3(_282, _283, _284), vec3(_2003, _2004, _2005));
        float _3830 = isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0));
        float _2013 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _2014 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2003, _2004, _2005));
        float _3841 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2018 = _1995 * _1995;
        float _2022 = ((_2013 * _2013) * (_2018 + (-1.0))) + 1.0;
        float _2031 = (exp2(log2(1.0 - (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2032 = 1.0 - _1995;
        float _2042 = (0.5 / (((_1668 * ((_2009 * _2032) + _1995)) + 9.9999999392252902907785028219223e-09) + (((_1668 * _2032) + _1995) * _2009))) * _2009;
        float _3852 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
        float _2044 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_2018 / ((_2022 * _2022) * 3.141590118408203125));
        float _2045 = isnan(1.0) ? _1514 : (isnan(_1514) ? 1.0 : min(_1514, 1.0));
        _1965 = (((_2031 * cbLight._m0[_1980].x) * _2044) * _2045) + _1855;
        _1967 = (((_2031 * cbLight._m0[_1980].y) * _2044) * _2045) + _1857;
        _1969 = (((_2031 * cbLight._m0[_1980].z) * _2044) * _2045) + _1859;
    }
    float _2179;
    float _2181;
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    if (_1496.y == 0u)
    {
        float _2120 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2121 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2120;
        float _2122 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2120;
        float _2123 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2120;
        uvec4 _2135 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2136 = _2135.x;
        uint _2147 = uint((float(_2135.y) * floor(float(uint(cbSceneParam._m0[85u].y * _372) / _2136))) + floor(float(uint(cbSceneParam._m0[85u].x * _371) / _2136)));
        float _2157 = (log2(_2123 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2158 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
        uint _2161 = uint(isnan(14.0) ? _2158 : (isnan(_2158) ? 14.0 : min(_2158, 14.0)));
        uvec4 _2166 = texelFetch(g_lightClusterGridBuffer, int(((_2161 << 2u) + (_2147 << 6u)) >> 2u));
        uint _2167 = _2166.x;
        uint _2168 = _2135.z;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        if (((((1u << ((_2168 >> 4u) & 15u)) + 4294967295u) & _2167) == 0u) || ((_2168 & 240u) == 0u))
        {
            _2267 = 0.0;
            _2269 = 0.0;
            _2271 = 0.0;
            _2273 = 0.0;
            _2275 = 0.0;
            _2277 = 0.0;
        }
        else
        {
            float _2268;
            float _2270;
            float _2272;
            float _2274;
            float _2276;
            float _2278;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            uint _2417 = 0u;
            uint _2426;
            bool _2427;
            for (;;)
            {
                _2426 = texelFetch(g_lightClassification, int((((_2161 << 5u) + (_2147 << 9u)) + (_2417 << 2u)) >> 2u)).x;
                _2427 = _2426 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2427)
                {
                    frontier_phi_63_pred = _2416;
                    frontier_phi_63_pred_1 = _2415;
                    frontier_phi_63_pred_2 = _2414;
                    frontier_phi_63_pred_3 = _2413;
                    frontier_phi_63_pred_4 = _2412;
                    frontier_phi_63_pred_5 = _2411;
                }
                else
                {
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    uint _2541;
                    _2535 = _2411;
                    _2536 = _2412;
                    _2537 = _2413;
                    _2538 = _2414;
                    _2539 = _2415;
                    _2540 = _2416;
                    _2541 = _2426;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    for (;;)
                    {
                        uint _2545 = uint(findLSB(_2541)) + (_2417 << 5u);
                        uint _2542 = (_2541 + 4294967295u) & _2541;
                        uint _2547 = _2545 * 48u;
                        vec4 _2561 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2547)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2547 + 3u)).x));
                        uint _2567 = (_2545 * 48u) + 4u;
                        vec4 _2580 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2567)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2567 + 3u)).x));
                        uint _2586 = (_2545 * 48u) + 8u;
                        vec3 _2597 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2586)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2586 + 2u)).x));
                        float _2601 = _2561.x - _2121;
                        float _2602 = _2561.y - _2122;
                        float _2603 = _2561.z - _2123;
                        float _2604 = dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603));
                        float _2607 = inversesqrt(_2604);
                        float _2608 = _2607 * _2601;
                        float _2609 = _2607 * _2602;
                        float _2610 = _2607 * _2603;
                        float _2611 = dot(vec3(_393, _396, _399), vec3(_2608, _2609, _2610));
                        float _2616 = 1.0 - (_2604 * _2561.w);
                        float _3878 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
                        float _2617 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                        float _2618 = sqrt(_2604) * _2580.w;
                        float _2621 = 1.39999997615814208984375 / (_2618 + 1.39999997615814208984375);
                        float _2622 = _2621 * _2621;
                        float _2625 = ((1.0 - _2622) * _2611) + _2622;
                        float _2628 = _2618 * _2618;
                        float _2632 = ((isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0))) * _2617) / ((_2628 * 0.699999988079071044921875) + 1.0);
                        float _2636 = (-0.0) - _2121;
                        float _2637 = (-0.0) - _2122;
                        float _2638 = (-0.0) - _2123;
                        float _2642 = inversesqrt(dot(vec3(_2636, _2637, _2638), vec3(_2636, _2637, _2638)));
                        float _2643 = _2642 * _2636;
                        float _2644 = _2642 * _2637;
                        float _2645 = _2642 * _2638;
                        float _2653 = exp2(log2(1.0 / ((_2628 * 3.5) + 5.0)) * 0.25);
                        float _2654 = 1.0 - _454;
                        float _2661 = sqrt(1.0 - ((1.0 - (_2654 * _2654)) * (1.0 - (_2653 * _2653))));
                        float _2662 = _2661 * _2661;
                        float _2663 = _2662 * _2662;
                        float _2664 = _2643 + _2608;
                        float _2665 = _2644 + _2609;
                        float _2666 = _2645 + _2610;
                        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
                        float _2674 = dot(vec3(_393, _396, _399), vec3(_2643, _2644, _2645));
                        float _3894 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
                        float _2677 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
                        float _2678 = dot(vec3(_393, _396, _399), vec3(_2670 * _2664, _2670 * _2665, _2670 * _2666));
                        float _3905 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                        float _2681 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                        float _2685 = ((_2681 * _2681) * (_2663 + (-1.0))) + 1.0;
                        float _2686 = _2621 * _2662;
                        float _2687 = _2686 * _2686;
                        float _2690 = ((1.0 - _2687) * _2611) + _2687;
                        float _3916 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
                        float _2691 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                        float _2692 = 1.0 - _2662;
                        float _2702 = (0.5 / (((_2691 * ((_2677 * _2692) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2691 * _2692) + _2662) * _2677))) * _2691;
                        float _3927 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2713 = (((_2663 * 3.1415927410125732421875) * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) / ((_2685 * _2685) * ((_2628 * 2.1991131305694580078125) + 3.141590118408203125))) * _2617;
                        _2470 = (_2632 * _2580.x) + _2538;
                        _2471 = (_2632 * _2580.y) + _2539;
                        _2472 = (_2632 * _2580.z) + _2540;
                        _2467 = (_2713 * _2597.x) + _2535;
                        _2468 = (_2713 * _2597.y) + _2536;
                        _2469 = (_2713 * _2597.z) + _2537;
                        if (_2542 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2535 = _2467;
                            _2536 = _2468;
                            _2537 = _2469;
                            _2538 = _2470;
                            _2539 = _2471;
                            _2540 = _2472;
                            _2541 = _2542;
                        }
                    }
                    frontier_phi_63_pred = _2472;
                    frontier_phi_63_pred_1 = _2471;
                    frontier_phi_63_pred_2 = _2470;
                    frontier_phi_63_pred_3 = _2469;
                    frontier_phi_63_pred_4 = _2468;
                    frontier_phi_63_pred_5 = _2467;
                }
                _2278 = frontier_phi_63_pred;
                _2276 = frontier_phi_63_pred_1;
                _2274 = frontier_phi_63_pred_2;
                _2272 = frontier_phi_63_pred_3;
                _2270 = frontier_phi_63_pred_4;
                _2268 = frontier_phi_63_pred_5;
                uint _2418 = _2417 + 1u;
                if (_2418 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2411 = _2268;
                    _2412 = _2270;
                    _2413 = _2272;
                    _2414 = _2274;
                    _2415 = _2276;
                    _2416 = _2278;
                    _2417 = _2418;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2267 = _2268;
            _2269 = _2270;
            _2271 = _2272;
            _2273 = _2274;
            _2275 = _2276;
            _2277 = _2278;
        }
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.z;
        uint _2284 = (_2282 >> 8u) & 15u;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((4294967295u << _2284) & _2167) == 0u)
        {
            _2379 = _2267;
            _2381 = _2269;
            _2383 = _2271;
            _2385 = _2273;
            _2387 = _2275;
            _2389 = _2277;
        }
        else
        {
            float _2404 = inversesqrt(dot(vec3(_2121, _2122, _2123), vec3(_2121, _2122, _2123)));
            float _2405 = _2404 * _2121;
            float _2406 = _2404 * _2122;
            float _2407 = _2404 * _2123;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2284 < ((_2282 >> 12u) & 15u))
            {
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2390;
                float _2518 = _2267;
                float _2519 = _2269;
                float _2520 = _2271;
                float _2521 = _2273;
                float _2522 = _2275;
                float _2523 = _2277;
                uint _2524 = _2284;
                uint _2533;
                bool _2534;
                for (;;)
                {
                    _2533 = texelFetch(g_lightClassification, int((((_2161 << 5u) + (_2147 << 9u)) + (_2524 << 2u)) >> 2u)).x;
                    _2534 = _2533 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2534)
                    {
                        frontier_phi_69_pred = _2523;
                        frontier_phi_69_pred_1 = _2522;
                        frontier_phi_69_pred_2 = _2521;
                        frontier_phi_69_pred_3 = _2520;
                        frontier_phi_69_pred_4 = _2519;
                        frontier_phi_69_pred_5 = _2518;
                    }
                    else
                    {
                        float _2718;
                        float _2719;
                        float _2720;
                        float _2721;
                        float _2722;
                        float _2723;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _2731 = _2518;
                        float _2732 = _2519;
                        float _2733 = _2520;
                        float _2734 = _2521;
                        float _2735 = _2522;
                        float _2736 = _2523;
                        uint _2737 = _2533;
                        uint _2738;
                        vec4 _2763;
                        float _2764;
                        vec4 _2779;
                        vec3 _2791;
                        vec4 _2807;
                        vec4 _2823;
                        float _2870;
                        bool _2871;
                        for (;;)
                        {
                            uint _2748 = ((_2524 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2737));
                            _2738 = (_2737 + 4294967295u) & _2737;
                            uint _2750 = _2748 * 40u;
                            _2763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 3u)).x));
                            _2764 = _2763.w;
                            uint _2766 = (_2748 * 40u) + 4u;
                            _2779 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2766)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2766 + 3u)).x));
                            uint _2781 = (_2748 * 40u) + 8u;
                            _2791 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x));
                            uint _2794 = (_2748 * 40u) + 16u;
                            _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            uint _2810 = (_2748 * 40u) + 20u;
                            _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            uint _2826 = (_2748 * 40u) + 24u;
                            vec4 _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            uint _2845 = (_2748 * 40u) + 28u;
                            vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            _2870 = fma(_2123, _2858.z, fma(_2122, _2858.y, _2858.x * _2121)) + _2858.w;
                            _2871 = !((fma(_2123, _2839.z, fma(_2122, _2839.y, _2839.x * _2121)) + _2839.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2871)
                            {
                                float _2898 = _2763.x - _2121;
                                float _2899 = _2763.y - _2122;
                                float _2900 = _2763.z - _2123;
                                float _2901 = dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900));
                                float _2904 = inversesqrt(_2901);
                                float _2905 = _2904 * _2898;
                                float _2906 = _2904 * _2899;
                                float _2907 = _2904 * _2900;
                                float _2911 = 1.0 - (_2901 / (_2764 * _2764));
                                float _3938 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                                float _2912 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                                float _2916 = sqrt(_2901) * _2779.w;
                                float _2918 = 1.39999997615814208984375 / (_2916 + 1.39999997615814208984375);
                                float _2919 = _2918 * _2918;
                                float _2922 = ((1.0 - _2919) * dot(vec3(_2905, _2906, _2907), vec3(_393, _396, _399))) + _2919;
                                float _2925 = _2916 * _2916;
                                float _2929 = (fma(_2123, _2807.z, fma(_2122, _2807.y, _2807.x * _2121)) + _2807.w) / _2870;
                                float _2930 = (fma(_2123, _2823.z, fma(_2122, _2823.y, _2823.x * _2121)) + _2823.w) / _2870;
                                float _2934 = 1.0 - dot(vec2(_2929, _2930), vec2(_2929, _2930));
                                float _3954 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                                float _2935 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                                float _2936 = _2935 * (((isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0))) * _2912) / ((_2925 * 0.699999988079071044921875) + 1.0));
                                float _2948 = exp2(log2(1.0 / ((_2925 * 3.5) + 5.0)) * 0.25);
                                float _2949 = 1.0 - _454;
                                float _2956 = sqrt(1.0 - ((1.0 - (_2949 * _2949)) * (1.0 - (_2948 * _2948))));
                                float _2957 = _2956 * _2956;
                                float _2958 = _2957 * _2957;
                                float _2959 = _2905 - _2405;
                                float _2960 = _2906 - _2406;
                                float _2961 = _2907 - _2407;
                                float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                                float _2969 = dot(vec3(_393, _396, _399), vec3((-0.0) - _2405, (-0.0) - _2406, (-0.0) - _2407));
                                float _3965 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2972 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
                                float _2973 = dot(vec3(_393, _396, _399), vec3(_2965 * _2959, _2965 * _2960, _2965 * _2961));
                                float _3976 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
                                float _2976 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
                                float _2980 = ((_2976 * _2976) * (_2958 + (-1.0))) + 1.0;
                                float _2981 = _2918 * _2957;
                                float _2982 = _2981 * _2981;
                                float _2988 = ((1.0 - _2982) * dot(vec3(_393, _396, _399), vec3(_2905, _2906, _2907))) + _2982;
                                float _3987 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2989 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
                                float _2990 = 1.0 - _2957;
                                float _3000 = (0.5 / (((_2989 * ((_2972 * _2990) + _2957)) + 9.9999999392252902907785028219223e-09) + (((_2989 * _2990) + _2957) * _2972))) * _2989;
                                float _3998 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                                float _3010 = (_2935 * _2912) * (((_2958 * 3.1415927410125732421875) * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) / ((_2980 * _2980) * ((_2925 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2936 * _2779.z;
                                frontier_phi_75_pred_1 = _2936 * _2779.y;
                                frontier_phi_75_pred_2 = _2936 * _2779.x;
                                frontier_phi_75_pred_3 = _3010 * _2791.z;
                                frontier_phi_75_pred_4 = _3010 * _2791.y;
                                frontier_phi_75_pred_5 = _3010 * _2791.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3019 = frontier_phi_75_pred;
                            _3018 = frontier_phi_75_pred_1;
                            _3017 = frontier_phi_75_pred_2;
                            _3016 = frontier_phi_75_pred_3;
                            _3015 = frontier_phi_75_pred_4;
                            _3014 = frontier_phi_75_pred_5;
                            _2721 = _3017 + _2734;
                            _2722 = _3018 + _2735;
                            _2723 = _3019 + _2736;
                            _2718 = _3014 + _2731;
                            _2719 = _3015 + _2732;
                            _2720 = _3016 + _2733;
                            if (_2738 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2721;
                                _2735 = _2722;
                                _2736 = _2723;
                                _2737 = _2738;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2723;
                        frontier_phi_69_pred_1 = _2722;
                        frontier_phi_69_pred_2 = _2721;
                        frontier_phi_69_pred_3 = _2720;
                        frontier_phi_69_pred_4 = _2719;
                        frontier_phi_69_pred_5 = _2718;
                    }
                    _2390 = frontier_phi_69_pred;
                    _2388 = frontier_phi_69_pred_1;
                    _2386 = frontier_phi_69_pred_2;
                    _2384 = frontier_phi_69_pred_3;
                    _2382 = frontier_phi_69_pred_4;
                    _2380 = frontier_phi_69_pred_5;
                    uint _2525 = _2524 + 1u;
                    if (_2525 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2518 = _2380;
                        _2519 = _2382;
                        _2520 = _2384;
                        _2521 = _2386;
                        _2522 = _2388;
                        _2523 = _2390;
                        _2524 = _2525;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2390;
                frontier_phi_57_58_ladder_1 = _2388;
                frontier_phi_57_58_ladder_2 = _2386;
                frontier_phi_57_58_ladder_3 = _2384;
                frontier_phi_57_58_ladder_4 = _2382;
                frontier_phi_57_58_ladder_5 = _2380;
            }
            else
            {
                frontier_phi_57_58_ladder = _2277;
                frontier_phi_57_58_ladder_1 = _2275;
                frontier_phi_57_58_ladder_2 = _2273;
                frontier_phi_57_58_ladder_3 = _2271;
                frontier_phi_57_58_ladder_4 = _2269;
                frontier_phi_57_58_ladder_5 = _2267;
            }
            _2379 = frontier_phi_57_58_ladder_5;
            _2381 = frontier_phi_57_58_ladder_4;
            _2383 = frontier_phi_57_58_ladder_3;
            _2385 = frontier_phi_57_58_ladder_2;
            _2387 = frontier_phi_57_58_ladder_1;
            _2389 = frontier_phi_57_58_ladder;
        }
        float _2394 = isnan(1.0) ? _438 : (isnan(_438) ? 1.0 : min(_438, 1.0));
        _2179 = (_2394 * _2385) + _1632;
        _2181 = (_2394 * _2387) + _1634;
        _2183 = (_2394 * _2389) + _1636;
        _2185 = ((_2379 * 0.039999999105930328369140625) * _2394) + _1965;
        _2187 = ((_2381 * 0.039999999105930328369140625) * _2394) + _1967;
        _2189 = ((_2383 * 0.039999999105930328369140625) * _2394) + _1969;
    }
    else
    {
        _2179 = _1632;
        _2181 = _1634;
        _2183 = _1636;
        _2185 = _1965;
        _2187 = _1967;
        _2189 = _1969;
    }
    float _4014 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _4025 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _4036 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    uint _2209 = _412 + 6u;
    float _2217 = _371 / cbSceneParam._m0[86u].x;
    float _2218 = _372 / cbSceneParam._m0[86u].y;
    vec4 _2232 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2217, _2218, (log2((isnan(cbSceneParam._m0[77u].w) ? _304 : (isnan(_304) ? cbSceneParam._m0[77u].w : min(_304, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2234 = _2232.x;
    float _2235 = _2232.y;
    float _2236 = _2232.z;
    float _2237 = _2232.w;
    float _2329;
    float _2331;
    float _2333;
    float _2335;
    if (_304 > cbSceneParam._m0[78u].w)
    {
        float _2292 = isnan(_304) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _304 : min(cbSceneParam._m0[80u].w, _304));
        float _2293 = _2292 / _304;
        float _2304 = _2293 * _356;
        float _2305 = _357 * _2293;
        float _2306 = (-0.0) - _2305;
        float _2307 = _2293 * _358;
        float _2309 = (cbSceneParam._m0[77u].w * _2306) / _2292;
        float _2310 = _2309 + cbSceneParam._m0[79u].w;
        float _2311 = cbSceneParam._m0[79u].w - _2305;
        float _2317 = sqrt(((_2304 * _2304) + (_2305 * _2305)) + (_2307 * _2307));
        float _2320 = (1.0 - (cbSceneParam._m0[77u].w / _2292)) * _2317;
        float _2325 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2327 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2480;
        if (abs((_2306 - _2309) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2480 = ((((_2310 > 0.0) ? exp2(_2325 * _2310) : (2.0 - exp2(_2327 * _2310))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2320;
        }
        else
        {
            float _2440 = 1.0 / cbSceneParam._m0[80u].x;
            float _2441 = isnan(_2311) ? _2310 : (isnan(_2310) ? _2311 : max(_2310, _2311));
            float _2442 = isnan(_2311) ? _2310 : (isnan(_2310) ? _2311 : min(_2310, _2311));
            float _2451 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : min(_2441, 0.0));
            float _2452 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : min(_2442, 0.0));
            _2480 = ((abs(_2317 / _2306) * cbSceneParam._m0[80u].y) * ((((_2451 - _2452) * 2.0) - ((exp2(_2325 * (isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0)))) - exp2(_2325 * (isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0))))) * _2440)) - ((exp2(_2327 * _2451) - exp2(_2327 * _2452)) * _2440))) + (_2320 * cbSceneParam._m0[80u].z);
        }
        vec4 _2482 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2217, _2218, 1.0), 0.0);
        float _2491 = exp2((_2480 * (-1.44269502162933349609375)) * (1.0 - _2482.w));
        float _2492 = log2(_2491);
        float _2508 = log2(_2237);
        _2329 = (exp2(_2508 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].x)) * _2482.x) / cbSceneParam._m0[78u].x)) + _2234;
        _2331 = (exp2(_2508 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].y)) * _2482.y) / cbSceneParam._m0[78u].y)) + _2235;
        _2333 = (exp2(_2508 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2492 * cbSceneParam._m0[78u].z)) * _2482.z) / cbSceneParam._m0[78u].z)) + _2236;
        _2335 = _2491 * _2237;
    }
    else
    {
        _2329 = _2234;
        _2331 = _2235;
        _2333 = _2236;
        _2335 = _2237;
    }
    float _2347 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2348 = _2347 == 3.0;
    float _2349 = log2(_2335);
    float _2356 = exp2(_2349 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_2179 + ((isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0))) * _438))) + ((_2185 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _1245)) * cbPerFrame._m0[3u].x));
    float _2357 = exp2(_2349 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_2181 + ((isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0))) * _438))) + ((_2187 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _1245)) * cbPerFrame._m0[3u].x));
    float _2358 = exp2(_2349 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_2183 + ((isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0))) * _438))) + ((_2189 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _1245)) * cbPerFrame._m0[3u].x));
    float _2367 = (_2347 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2367 * (_2348 ? _2356 : (_2356 + (cbSceneParam._m0[72u].w * _2329)));
    SV_Target.y = _2367 * (_2348 ? _2357 : (_2357 + (cbSceneParam._m0[72u].w * _2331)));
    SV_Target.z = _2367 * (_2348 ? _2358 : (_2358 + (cbSceneParam._m0[72u].w * _2333)));
    SV_Target.w = cbInstanceData._m0[_2209].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2209].w;
}


