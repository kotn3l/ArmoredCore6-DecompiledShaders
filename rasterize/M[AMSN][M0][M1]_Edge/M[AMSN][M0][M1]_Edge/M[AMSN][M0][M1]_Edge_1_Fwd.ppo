#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _808;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _193 = _192 * NORMAL.x;
    float _194 = _192 * NORMAL.y;
    float _195 = _192 * NORMAL.z;
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207;
    float _208;
    float _209;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _207 = (-0.0) - _193;
        _208 = (-0.0) - _194;
        _209 = (-0.0) - _195;
    }
    else
    {
        _207 = _193;
        _208 = _194;
        _209 = _195;
    }
    vec4 _229 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _235 = _229.x * cbMtdParam._m0[9u].x;
    float _236 = _229.y * cbMtdParam._m0[9u].y;
    float _237 = _229.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(M_AMSN_M0_M1_Edge_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3124 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3124 : (isnan(_3124) ? 1.0 : min(_3124, 1.0))));
    float _269 = fma(_266, _207, fma(_259, _199 * TANGENT.x, (_185 * _178) * _257));
    float _272 = fma(_266, _208, fma(_259, _199 * TANGENT.y, (_185 * _179) * _257));
    float _275 = fma(_266, _209, fma(_259, _199 * TANGENT.z, (_185 * _180) * _257));
    float _279 = inversesqrt(dot(vec3(_269, _272, _275), vec3(_269, _272, _275)));
    float _280 = _279 * _269;
    float _281 = _279 * _272;
    float _282 = _279 * _275;
    float _3135 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _283 = isnan(1.0) ? _3135 : (isnan(_3135) ? 1.0 : min(_3135, 1.0));
    float _3146 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3157 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3168 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _302 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _344 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _354 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _344);
    float _355 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _344);
    float _356 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _344);
    float _360 = inversesqrt(dot(vec3(_354, _355, _356), vec3(_354, _355, _356)));
    float _361 = _354 * _360;
    float _362 = _355 * _360;
    float _363 = _356 * _360;
    float _369 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _370 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _391 = fma(_282, cbSceneParam._m0[5u].z, fma(_281, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _280));
    float _394 = fma(_282, cbSceneParam._m0[6u].z, fma(_281, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _280));
    float _397 = fma(_282, cbSceneParam._m0[7u].z, fma(_281, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _280));
    uint _410 = uint(roundEven(NORMAL.w)) * 13u;
    uint _413 = (_410 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _419 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3146 : (isnan(_3146) ? 1.0 : min(_3146, 1.0)))) * cbInstanceData._m0[_413].x;
    float _420 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3157 : (isnan(_3157) ? 1.0 : min(_3157, 1.0)))) * cbInstanceData._m0[_413].y;
    float _421 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3168 : (isnan(_3168) ? 1.0 : min(_3168, 1.0)))) * cbInstanceData._m0[_413].z;
    float _3179 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _422 = isnan(1.0) ? _3179 : (isnan(_3179) ? 1.0 : min(_3179, 1.0));
    float _3190 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _423 = isnan(1.0) ? _3190 : (isnan(_3190) ? 1.0 : min(_3190, 1.0));
    float _3201 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _424 = isnan(1.0) ? _3201 : (isnan(_3201) ? 1.0 : min(_3201, 1.0));
    vec4 _433 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _369, cbSceneParam._m0[86u].y * _370));
    float _436 = _433.x * TEXCOORD.z;
    float _437 = dot(vec3(_280, _281, _282), vec3(_361, _362, _363));
    float _440 = _437 * 2.0;
    float _444 = (_440 * _280) - _361;
    float _445 = (_440 * _281) - _362;
    float _446 = (_440 * _282) - _363;
    float _450 = abs(dot(vec3(_361, _362, _363), vec3(_280, _281, _282)));
    float _3212 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _452 = sqrt(_283);
    float _465 = exp2((_452 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_452 * 3.0));
    float _497 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _501 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _505 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _807;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    float _820;
    float _821;
    float _822;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _532 = fma(_505, cbModelParam._m0[26u].z, fma(_501, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _497));
        float _536 = fma(_505, cbModelParam._m0[27u].z, fma(_501, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _497));
        float _540 = fma(_505, cbModelParam._m0[28u].z, fma(_501, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _497));
        float _565 = _497 + _280;
        float _566 = _501 + _281;
        float _567 = _505 + _282;
        float _577 = fma(_567, cbModelParam._m0[26u].z, fma(_566, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _565)) - _532;
        float _578 = fma(_567, cbModelParam._m0[27u].z, fma(_566, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _565)) - _536;
        float _579 = fma(_567, cbModelParam._m0[28u].z, fma(_566, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _565)) - _540;
        float _583 = inversesqrt(dot(vec3(_577, _578, _579), vec3(_577, _578, _579)));
        float _596 = ((_583 * _577) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_532 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _597 = ((_583 * _578) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_536 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _598 = ((_583 * _579) / cbModelParam._m0[34u].z) + ((((((_540 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_596, _597, _598), 0.0);
        float _635 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_601.x + (-0.5));
        float _637 = _635 * (_601.y + (-0.5));
        float _638 = _635 * (_601.z + (-0.5));
        float _645 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_608.x + (-0.5));
        float _647 = _645 * (_608.y + (-0.5));
        float _648 = _645 * (_608.z + (-0.5));
        float _655 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_615.x + (-0.5));
        float _657 = _655 * (_615.y + (-0.5));
        float _658 = _655 * (_615.z + (-0.5));
        float _665 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_622.x + (-0.5));
        float _667 = _665 * (_622.y + (-0.5));
        float _668 = _665 * (_622.z + (-0.5));
        float _669 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _670 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        float _671 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _672 = _636 * 0.5;
        float _673 = _646 * 0.5;
        float _674 = _656 * 0.5;
        float _675 = dot(vec3(_672, _673, _674), vec3(_672, _673, _674));
        float _680 = (_675 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_675);
        float _689 = (dot(vec3(_280, _281, _282), vec3(_680 * _672, _680 * _673, _680 * _674)) + 1.0) * 0.5;
        float _3238 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _699 = sqrt(((_673 * _673) + (_672 * _672)) + (_674 * _674)) / (_669 + 9.9999997473787516355514526367188e-06);
        float _3249 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _700 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _701 = _700 * 2.0;
        float _705 = (1.0 - _700) / (_700 + 1.0);
        float _3260 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _706 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _715 = ((((1.0 - _706) * (_701 + 2.0)) * exp2(log2(isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (_701 + 1.0))) + _706) * _669;
        float _716 = _637 * 0.5;
        float _717 = _647 * 0.5;
        float _718 = _657 * 0.5;
        float _719 = dot(vec3(_716, _717, _718), vec3(_716, _717, _718));
        float _724 = (_719 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_719);
        float _732 = (dot(vec3(_280, _281, _282), vec3(_724 * _716, _724 * _717, _724 * _718)) + 1.0) * 0.5;
        float _3271 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _741 = sqrt(((_717 * _717) + (_716 * _716)) + (_718 * _718)) / (_670 + 9.9999997473787516355514526367188e-06);
        float _3282 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
        float _743 = _742 * 2.0;
        float _747 = (1.0 - _742) / (_742 + 1.0);
        float _3293 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _748 = isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0));
        float _757 = ((((1.0 - _748) * (_743 + 2.0)) * exp2(log2(isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0))) * (_743 + 1.0))) + _748) * _670;
        float _758 = _638 * 0.5;
        float _759 = _648 * 0.5;
        float _760 = _658 * 0.5;
        float _761 = dot(vec3(_758, _759, _760), vec3(_758, _759, _760));
        float _766 = (_761 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_761);
        float _774 = (dot(vec3(_280, _281, _282), vec3(_766 * _758, _766 * _759, _766 * _760)) + 1.0) * 0.5;
        float _3304 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _783 = sqrt(((_759 * _759) + (_758 * _758)) + (_760 * _760)) / (_671 + 9.9999997473787516355514526367188e-06);
        float _3315 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3326 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3304 : (isnan(_3304) ? 1.0 : min(_3304, 1.0))) * (_785 + 1.0))) + _790) * _671;
        _807 = _638;
        _809 = _637;
        _810 = _636;
        _811 = _648;
        _812 = _647;
        _813 = _646;
        _814 = _658;
        _815 = _657;
        _816 = _656;
        _817 = _671;
        _818 = _670;
        _819 = _669;
        _820 = cbModelParam._m0[36u].z * (isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0)));
        _821 = cbModelParam._m0[36u].z * (isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0)));
        _822 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
    }
    else
    {
        _807 = _808;
        _809 = _808;
        _810 = _808;
        _811 = _808;
        _812 = _808;
        _813 = _808;
        _814 = _808;
        _815 = _808;
        _816 = _808;
        _817 = _808;
        _818 = _808;
        _819 = _808;
        _820 = 0.0;
        _821 = 0.0;
        _822 = 0.0;
    }
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _848 = fma(_505, cbModelParam._m0[30u].z, fma(_501, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _497));
        float _852 = fma(_505, cbModelParam._m0[31u].z, fma(_501, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _497));
        float _856 = fma(_505, cbModelParam._m0[32u].z, fma(_501, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _497));
        float _879 = _497 + _280;
        float _880 = _501 + _281;
        float _881 = _505 + _282;
        float _891 = fma(_881, cbModelParam._m0[30u].z, fma(_880, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _879)) - _848;
        float _892 = fma(_881, cbModelParam._m0[31u].z, fma(_880, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _879)) - _852;
        float _893 = fma(_881, cbModelParam._m0[32u].z, fma(_880, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _879)) - _856;
        float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
        float _910 = ((_897 * _891) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_848 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _911 = ((_897 * _892) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_852 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _912 = ((_897 * _893) / cbModelParam._m0[35u].z) + ((((((_856 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_910, _911, _912), 0.0);
        float _947 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_914.x + (-0.5));
        float _949 = _947 * (_914.y + (-0.5));
        float _950 = _947 * (_914.z + (-0.5));
        float _957 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_921.x + (-0.5));
        float _959 = _957 * (_921.y + (-0.5));
        float _960 = _957 * (_921.z + (-0.5));
        float _967 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_928.x + (-0.5));
        float _969 = _967 * (_928.y + (-0.5));
        float _970 = _967 * (_928.z + (-0.5));
        float _977 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_935.x + (-0.5));
        float _979 = _977 * (_935.y + (-0.5));
        float _980 = _977 * (_935.z + (-0.5));
        float _981 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _982 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _983 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _984 = _948 * 0.5;
        float _985 = _958 * 0.5;
        float _986 = _968 * 0.5;
        float _987 = dot(vec3(_984, _985, _986), vec3(_984, _985, _986));
        float _992 = (_987 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_987);
        float _1000 = (dot(vec3(_280, _281, _282), vec3(_992 * _984, _992 * _985, _992 * _986)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1009 = sqrt(((_985 * _985) + (_984 * _984)) + (_986 * _986)) / (_981 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _1011 = _1010 * 2.0;
        float _1015 = (1.0 - _1010) / (_1010 + 1.0);
        float _3389 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1025 = ((((1.0 - _1016) * (_1011 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_1011 + 1.0))) + _1016) * _981;
        float _1026 = _949 * 0.5;
        float _1027 = _959 * 0.5;
        float _1028 = _969 * 0.5;
        float _1029 = dot(vec3(_1026, _1027, _1028), vec3(_1026, _1027, _1028));
        float _1034 = (_1029 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1029);
        float _1042 = (dot(vec3(_280, _281, _282), vec3(_1034 * _1026, _1034 * _1027, _1034 * _1028)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1051 = sqrt(((_1027 * _1027) + (_1026 * _1026)) + (_1028 * _1028)) / (_982 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1053 = _1052 * 2.0;
        float _1057 = (1.0 - _1052) / (_1052 + 1.0);
        float _3422 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1067 = ((((1.0 - _1058) * (_1053 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_1053 + 1.0))) + _1058) * _982;
        float _1068 = _950 * 0.5;
        float _1069 = _960 * 0.5;
        float _1070 = _970 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_280, _281, _282), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3433 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_983 + 9.9999997473787516355514526367188e-06);
        float _3444 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3455 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0))) * (_1095 + 1.0))) + _1100) * _983;
        _1117 = _950;
        _1118 = _949;
        _1119 = _948;
        _1120 = _960;
        _1121 = _959;
        _1122 = _958;
        _1123 = _970;
        _1124 = _969;
        _1125 = _968;
        _1126 = _983;
        _1127 = _982;
        _1128 = _981;
        _1129 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0)));
        _1130 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)));
        _1131 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
    }
    else
    {
        _1117 = _808;
        _1118 = _808;
        _1119 = _808;
        _1120 = _808;
        _1121 = _808;
        _1122 = _808;
        _1123 = _808;
        _1124 = _808;
        _1125 = _808;
        _1126 = _808;
        _1127 = _808;
        _1128 = _808;
        _1129 = 0.0;
        _1130 = 0.0;
        _1131 = 0.0;
    }
    float _1141 = (cbModelParam._m0[1u].x * (_1129 - _820)) + _820;
    float _1142 = (cbModelParam._m0[1u].x * (_1130 - _821)) + _821;
    float _1143 = (cbModelParam._m0[1u].x * (_1131 - _822)) + _822;
    float _1164 = fma(_1143, cbSceneParam._m0[89u].z, fma(_1142, cbSceneParam._m0[89u].y, _1141 * cbSceneParam._m0[89u].x));
    float _1167 = fma(_1143, cbSceneParam._m0[90u].z, fma(_1142, cbSceneParam._m0[90u].y, _1141 * cbSceneParam._m0[90u].x));
    float _1170 = fma(_1143, cbSceneParam._m0[91u].z, fma(_1142, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1141));
    float _1185 = _444 * 0.5;
    float _1186 = _445 * 0.5;
    float _1187 = _446 * 0.5;
    float _1188 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_1119, _1122, _1125, _1128));
    float _1191 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_1118, _1121, _1124, _1127));
    float _1194 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_1117, _1120, _1123, _1126));
    float _1228;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1201 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_807, _811, _814, _817));
        float _1205 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_809, _812, _815, _818));
        float _1209 = dot(vec4(_1185, _1186, _1187, 1.0), vec4(_810, _813, _816, _819));
        float _1216 = dot(vec4(cbModelParam._m0[39u]), vec4(_1185, _1186, _1187, 1.0));
        _1228 = dot(vec3(isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)), isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1216) ? 0.0 : (isnan(0.0) ? _1216 : max(0.0, _1216))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1228 = 1.0;
    }
    float _1239;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1230 = dot(vec4(cbModelParam._m0[40u]), vec4(_1185, _1186, _1187, 1.0));
        _1239 = dot(vec3(isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)), isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1230) ? 0.0 : (isnan(0.0) ? _1230 : max(0.0, _1230))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1239 = 1.0;
    }
    float _1243 = (_1239 * cbModelParam._m0[1u].x) + (_1228 * (1.0 - cbModelParam._m0[1u].x));
    float _1253 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _283);
    float _1254 = isnan(_1253) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1253 : min(cbModelParam._m0[25u].z, _1253));
    float _1336;
    float _1338;
    float _1340;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1303 = fma(_505, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497)) + cbModelParam._m0[13u].w;
        float _1307 = fma(_505, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497)) + cbModelParam._m0[14u].w;
        float _1311 = fma(_505, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497)) + cbModelParam._m0[15u].w;
        float _1314 = fma(_446, cbModelParam._m0[13u].z, fma(_445, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _444));
        float _1317 = fma(_446, cbModelParam._m0[14u].z, fma(_445, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _444));
        float _1320 = fma(_446, cbModelParam._m0[15u].z, fma(_445, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _444));
        float _1348;
        if (_1314 > 0.0)
        {
            _1348 = abs((1.0 - _1303) / _1314);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1303 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1348 = frontier_phi_16_14_ladder;
        }
        float _1554;
        if (_1317 > 0.0)
        {
            _1554 = abs((1.0 - _1307) / _1317);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1307 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1554 = frontier_phi_25_21_ladder;
        }
        float _1797;
        if (_1320 > 0.0)
        {
            _1797 = abs((1.0 - _1311) / _1320);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1320 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1311 + 1.0) / _1320);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1797 = frontier_phi_37_32_ladder;
        }
        float _1799 = isnan(_1554) ? _1348 : (isnan(_1348) ? _1554 : min(_1348, _1554));
        float _1800 = isnan(_1797) ? _1799 : (isnan(_1799) ? _1797 : min(_1799, _1797));
        float _1804 = (_1800 * _1314) + _1303;
        float _1805 = (_1800 * _1317) + _1307;
        float _1806 = (_1800 * _1320) + _1311;
        float _1807 = _1800 * 9.9999997473787516355514526367188e-05;
        float _1809 = (-1.0) - _1807;
        float _1811 = _1807 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1806 > _1811) || ((_1806 < _1809) || ((_1805 > _1811) || ((_1805 < _1809) || ((_1804 < _1809) || (_1804 > _1811))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1930 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1806, cbModelParam._m0[9u].z, fma(_1805, cbModelParam._m0[9u].y, _1804 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1806, cbModelParam._m0[10u].z, fma(_1805, cbModelParam._m0[10u].y, _1804 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1806, cbModelParam._m0[11u].z, fma(_1805, cbModelParam._m0[11u].y, _1804 * cbModelParam._m0[11u].x))), _1254);
            frontier_phi_15_37_ladder = _1930.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _1930.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _1930.x * cbModelParam._m0[1u].y;
        }
        _1336 = frontier_phi_15_37_ladder_2;
        _1338 = frontier_phi_15_37_ladder_1;
        _1340 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1324 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_444, _445, _446), _1254);
        _1336 = _1324.x * cbModelParam._m0[1u].y;
        _1338 = _1324.y * cbModelParam._m0[1u].y;
        _1340 = _1324.z * cbModelParam._m0[1u].y;
    }
    float _1344 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _283);
    float _1345 = isnan(_1344) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1344 : min(cbModelParam._m0[25u].w, _1344));
    float _1438;
    float _1440;
    float _1442;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1402 = fma(_505, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497)) + cbModelParam._m0[21u].w;
        float _1406 = fma(_505, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497)) + cbModelParam._m0[22u].w;
        float _1410 = fma(_505, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497)) + cbModelParam._m0[23u].w;
        float _1413 = fma(_446, cbModelParam._m0[21u].z, fma(_445, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _444));
        float _1416 = fma(_446, cbModelParam._m0[22u].z, fma(_445, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _444));
        float _1419 = fma(_446, cbModelParam._m0[23u].z, fma(_445, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _444));
        float _1559;
        if (_1413 > 0.0)
        {
            _1559 = abs((1.0 - _1402) / _1413);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1402 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1559 = frontier_phi_27_23_ladder;
        }
        float _1824;
        if (_1416 > 0.0)
        {
            _1824 = abs((1.0 - _1406) / _1416);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1406 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1824 = frontier_phi_39_34_ladder;
        }
        float _2029;
        if (_1419 > 0.0)
        {
            _2029 = abs((1.0 - _1410) / _1419);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1410 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2029 = frontier_phi_48_45_ladder;
        }
        float _2031 = isnan(_1824) ? _1559 : (isnan(_1559) ? _1824 : min(_1559, _1824));
        float _2032 = isnan(_2029) ? _2031 : (isnan(_2031) ? _2029 : min(_2031, _2029));
        float _2036 = (_2032 * _1413) + _1402;
        float _2037 = (_2032 * _1416) + _1406;
        float _2038 = (_2032 * _1419) + _1410;
        float _2039 = _2032 * 9.9999997473787516355514526367188e-05;
        float _2040 = (-1.0) - _2039;
        float _2042 = _2039 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2038 > _2042) || ((_2038 < _2040) || ((_2037 > _2042) || ((_2037 < _2040) || ((_2036 < _2040) || (_2036 > _2042))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2236 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2038, cbModelParam._m0[17u].z, fma(_2037, cbModelParam._m0[17u].y, _2036 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2038, cbModelParam._m0[18u].z, fma(_2037, cbModelParam._m0[18u].y, _2036 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2038, cbModelParam._m0[19u].z, fma(_2037, cbModelParam._m0[19u].y, _2036 * cbModelParam._m0[19u].x))), _1345);
            frontier_phi_24_48_ladder = _2236.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2236.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2236.x * cbModelParam._m0[1u].z;
        }
        _1438 = frontier_phi_24_48_ladder_2;
        _1440 = frontier_phi_24_48_ladder_1;
        _1442 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1422 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_444, _445, _446), _1345);
        _1438 = _1422.x * cbModelParam._m0[1u].z;
        _1440 = _1422.y * cbModelParam._m0[1u].z;
        _1442 = _1422.z * cbModelParam._m0[1u].z;
    }
    float _1454 = ((((1.0 - _465) * ((_452 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_465 * _452)) * _436;
    float _1455 = _1454 * ((cbModelParam._m0[1u].w * (_1438 - _1336)) + _1336);
    float _1456 = _1454 * ((cbModelParam._m0[1u].w * (_1440 - _1338)) + _1338);
    float _1457 = _1454 * ((cbModelParam._m0[1u].w * (_1442 - _1340)) + _1340);
    float _1460 = fma(_1457, cbSceneParam._m0[89u].z, fma(_1456, cbSceneParam._m0[89u].y, _1455 * cbSceneParam._m0[89u].x));
    float _1463 = fma(_1457, cbSceneParam._m0[90u].z, fma(_1456, cbSceneParam._m0[90u].y, _1455 * cbSceneParam._m0[90u].x));
    float _1466 = fma(_1457, cbSceneParam._m0[91u].z, fma(_1456, cbSceneParam._m0[91u].y, _1455 * cbSceneParam._m0[91u].x));
    uvec4 _1476 = floatBitsToUint(cbInstanceData._m0[_410 + 5u]);
    uint _1478 = _1476.x * 14u;
    uint _1479 = _1478 + 13u;
    float _1486 = _436 + (-1.0);
    float _1491 = (cbLight._m0[_1479].x * _1486) + 1.0;
    float _1492 = (cbLight._m0[_1479].y * _1486) + 1.0;
    float _1493 = (cbLight._m0[_1479].z * _1486) + 1.0;
    float _1494 = (cbLight._m0[_1479].w * _1486) + 1.0;
    uint _1495 = _1478 + 5u;
    float _1501 = isnan(1.0) ? _1492 : (isnan(_1492) ? 1.0 : min(_1492, 1.0));
    uint _1505 = _1478 + 4u;
    float _1512 = isnan(1.0) ? _1491 : (isnan(_1491) ? 1.0 : min(_1491, 1.0));
    uint _1516 = _1478 | 1u;
    float _1527 = dot(vec3(cbLight._m0[_1478].xyz), vec3(_280, _281, _282));
    float _1530 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_280, _281, _282));
    float _3591 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _3602 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
    float _1535 = (isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * 0.3183098733425140380859375;
    float _1537 = (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * 0.3183098733425140380859375;
    float _1544 = ((cbLight._m0[_1495].x * _1501) * _1537) + ((cbLight._m0[_1505].x * _1512) * _1535);
    float _1545 = ((_1501 * cbLight._m0[_1495].y) * _1537) + ((_1512 * cbLight._m0[_1505].y) * _1535);
    float _1546 = ((_1501 * cbLight._m0[_1495].z) * _1537) + ((_1512 * cbLight._m0[_1505].z) * _1535);
    uvec4 _1551 = floatBitsToUint(cbLight._m0[_1478 + 12u]);
    bool _1553 = _1551.x == 0u;
    float _1564;
    float _1566;
    float _1568;
    if (_1553)
    {
        _1564 = _1544;
        _1566 = _1545;
        _1568 = _1546;
    }
    else
    {
        uint _1572 = _1478 + 6u;
        float _1588 = (dot(vec3(cbLight._m0[_1478 + 2u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1589 = _1588 * _1588;
        float _3613 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1591 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
        _1564 = (((cbLight._m0[_1572].x * 0.3183098733425140380859375) * _1590) * _1591) + _1544;
        _1566 = (((cbLight._m0[_1572].y * 0.3183098733425140380859375) * _1590) * _1591) + _1545;
        _1568 = (((cbLight._m0[_1572].z * 0.3183098733425140380859375) * _1590) * _1591) + _1546;
    }
    bool _1571 = _1551.y == 0u;
    float _1609;
    float _1611;
    float _1613;
    if (_1571)
    {
        _1609 = _1564;
        _1611 = _1566;
        _1613 = _1568;
    }
    else
    {
        uint _1768 = _1478 + 7u;
        float _1784 = (dot(vec3(cbLight._m0[_1478 + 3u].xyz), vec3(_280, _281, _282)) * 0.5) + 0.5;
        float _1785 = _1784 * _1784;
        float _3629 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1786 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1787 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
        _1609 = (((cbLight._m0[_1768].x * 0.3183098733425140380859375) * _1786) * _1787) + _1564;
        _1611 = (((cbLight._m0[_1768].y * 0.3183098733425140380859375) * _1786) * _1787) + _1566;
        _1613 = (((cbLight._m0[_1768].z * 0.3183098733425140380859375) * _1786) * _1787) + _1568;
    }
    uint _1616 = _1478 + 8u;
    float _1629 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1478].w)) * _283) * 0.949999988079071044921875);
    float _1630 = _1629 * _1629;
    float _1631 = cbLight._m0[_1478].x + _361;
    float _1632 = cbLight._m0[_1478].y + _362;
    float _1633 = cbLight._m0[_1478].z + _363;
    float _1637 = inversesqrt(dot(vec3(_1631, _1632, _1633), vec3(_1631, _1632, _1633)));
    float _1638 = _1637 * _1631;
    float _1639 = _1637 * _1632;
    float _1640 = _1637 * _1633;
    float _1641 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1478].xyz));
    float _3645 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1644 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _3656 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _1645 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
    float _1646 = dot(vec3(_280, _281, _282), vec3(_1638, _1639, _1640));
    float _3667 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
    float _1649 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
    float _1650 = dot(vec3(cbLight._m0[_1478].xyz), vec3(_1638, _1639, _1640));
    float _3678 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
    float _1654 = _1630 * _1630;
    float _1658 = ((_1649 * _1649) * (_1654 + (-1.0))) + 1.0;
    float _1669 = (exp2(log2(1.0 - (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1670 = 1.0 - _1630;
    float _1681 = (0.5 / (((_1645 * ((_1644 * _1670) + _1630)) + 9.9999999392252902907785028219223e-09) + (((_1645 * _1670) + _1630) * _1644))) * _1644;
    float _3689 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1683 = (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1654 / ((_1658 * _1658) * 3.141590118408203125));
    uint _1694 = _1478 + 9u;
    float _1705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1516].w)) * _283) * 0.949999988079071044921875);
    float _1706 = _1705 * _1705;
    float _1707 = cbLight._m0[_1516].x + _361;
    float _1708 = cbLight._m0[_1516].y + _362;
    float _1709 = cbLight._m0[_1516].z + _363;
    float _1713 = inversesqrt(dot(vec3(_1707, _1708, _1709), vec3(_1707, _1708, _1709)));
    float _1714 = _1713 * _1707;
    float _1715 = _1713 * _1708;
    float _1716 = _1713 * _1709;
    float _1717 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1516].xyz));
    float _3700 = isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0));
    float _1720 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _1721 = dot(vec3(_280, _281, _282), vec3(_1714, _1715, _1716));
    float _3711 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1724 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _1725 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_1714, _1715, _1716));
    float _3722 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1729 = _1706 * _1706;
    float _1733 = ((_1724 * _1724) * (_1729 + (-1.0))) + 1.0;
    float _1742 = (exp2(log2(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1743 = 1.0 - _1706;
    float _1753 = (0.5 / (((_1645 * ((_1720 * _1743) + _1706)) + 9.9999999392252902907785028219223e-09) + (((_1645 * _1743) + _1706) * _1720))) * _1720;
    float _3733 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1755 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1729 / ((_1733 * _1733) * 3.141590118408203125));
    float _1765 = (((_1742 * cbLight._m0[_1694].x) * _1755) * _1501) + (((_1669 * cbLight._m0[_1616].x) * _1683) * _1512);
    float _1766 = (((_1742 * cbLight._m0[_1694].y) * _1755) * _1501) + (((_1669 * cbLight._m0[_1616].y) * _1683) * _1512);
    float _1767 = (((_1742 * cbLight._m0[_1694].z) * _1755) * _1501) + (((_1669 * cbLight._m0[_1616].z) * _1683) * _1512);
    float _1829;
    float _1831;
    float _1833;
    if (_1553)
    {
        _1829 = _1765;
        _1831 = _1766;
        _1833 = _1767;
    }
    else
    {
        uint _1835 = _1478 + 2u;
        uint _1839 = _1478 + 10u;
        float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1835].w)) * _283) * 0.949999988079071044921875);
        float _1854 = _1853 * _1853;
        float _1855 = cbLight._m0[_1835].x + _361;
        float _1856 = cbLight._m0[_1835].y + _362;
        float _1857 = cbLight._m0[_1835].z + _363;
        float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
        float _1862 = _1861 * _1855;
        float _1863 = _1861 * _1856;
        float _1864 = _1861 * _1857;
        float _1865 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1835].xyz));
        float _3744 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
        float _1868 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
        float _1869 = dot(vec3(_280, _281, _282), vec3(_1862, _1863, _1864));
        float _3755 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
        float _1872 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
        float _1873 = dot(vec3(cbLight._m0[_1835].xyz), vec3(_1862, _1863, _1864));
        float _3766 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1877 = _1854 * _1854;
        float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
        float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1891 = 1.0 - _1854;
        float _1901 = (0.5 / (((_1645 * ((_1868 * _1891) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1645 * _1891) + _1854) * _1868))) * _1868;
        float _3777 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
        float _1903 = (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
        float _1904 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
        _1829 = (((_1890 * cbLight._m0[_1839].x) * _1903) * _1904) + _1765;
        _1831 = (((_1890 * cbLight._m0[_1839].y) * _1903) * _1904) + _1766;
        _1833 = (((_1890 * cbLight._m0[_1839].z) * _1903) * _1904) + _1767;
    }
    float _1939;
    float _1941;
    float _1943;
    if (_1571)
    {
        _1939 = _1829;
        _1941 = _1831;
        _1943 = _1833;
    }
    else
    {
        uint _1950 = _1478 + 3u;
        uint _1954 = _1478 + 11u;
        float _1968 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1950].w)) * _283) * 0.949999988079071044921875);
        float _1969 = _1968 * _1968;
        float _1970 = cbLight._m0[_1950].x + _361;
        float _1971 = cbLight._m0[_1950].y + _362;
        float _1972 = cbLight._m0[_1950].z + _363;
        float _1976 = inversesqrt(dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972)));
        float _1977 = _1976 * _1970;
        float _1978 = _1976 * _1971;
        float _1979 = _1976 * _1972;
        float _1980 = dot(vec3(_280, _281, _282), vec3(cbLight._m0[_1950].xyz));
        float _3793 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1983 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1984 = dot(vec3(_280, _281, _282), vec3(_1977, _1978, _1979));
        float _3804 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1987 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1988 = dot(vec3(cbLight._m0[_1950].xyz), vec3(_1977, _1978, _1979));
        float _3815 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1992 = _1969 * _1969;
        float _1996 = ((_1987 * _1987) * (_1992 + (-1.0))) + 1.0;
        float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2006 = 1.0 - _1969;
        float _2016 = (0.5 / (((_1645 * ((_1983 * _2006) + _1969)) + 9.9999999392252902907785028219223e-09) + (((_1645 * _2006) + _1969) * _1983))) * _1983;
        float _3826 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
        float _2018 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1992 / ((_1996 * _1996) * 3.141590118408203125));
        float _2019 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
        _1939 = (((_2005 * cbLight._m0[_1954].x) * _2018) * _2019) + _1829;
        _1941 = (((_2005 * cbLight._m0[_1954].y) * _2018) * _2019) + _1831;
        _1943 = (((_2005 * cbLight._m0[_1954].z) * _2018) * _2019) + _1833;
    }
    float _2153;
    float _2155;
    float _2157;
    float _2159;
    float _2161;
    float _2163;
    if (_1476.y == 0u)
    {
        float _2094 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2094;
        float _2096 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2094;
        float _2097 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2094;
        uvec4 _2109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2110 = _2109.x;
        uint _2121 = uint((float(_2109.y) * floor(float(uint(cbSceneParam._m0[85u].y * _370) / _2110))) + floor(float(uint(cbSceneParam._m0[85u].x * _369) / _2110)));
        float _2131 = (log2(_2097 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2132 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        uint _2135 = uint(isnan(14.0) ? _2132 : (isnan(_2132) ? 14.0 : min(_2132, 14.0)));
        uvec4 _2140 = texelFetch(g_lightClusterGridBuffer, int(((_2135 << 2u) + (_2121 << 6u)) >> 2u));
        uint _2141 = _2140.x;
        uint _2142 = _2109.z;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        if (((((1u << ((_2142 >> 4u) & 15u)) + 4294967295u) & _2141) == 0u) || ((_2142 & 240u) == 0u))
        {
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
            _2251 = 0.0;
        }
        else
        {
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2250;
            float _2252;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            uint _2391 = 0u;
            uint _2400;
            bool _2401;
            for (;;)
            {
                _2400 = texelFetch(g_lightClassification, int((((_2135 << 5u) + (_2121 << 9u)) + (_2391 << 2u)) >> 2u)).x;
                _2401 = _2400 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2401)
                {
                    frontier_phi_63_pred = _2390;
                    frontier_phi_63_pred_1 = _2389;
                    frontier_phi_63_pred_2 = _2388;
                    frontier_phi_63_pred_3 = _2387;
                    frontier_phi_63_pred_4 = _2386;
                    frontier_phi_63_pred_5 = _2385;
                }
                else
                {
                    float _2509;
                    float _2510;
                    float _2511;
                    float _2512;
                    float _2513;
                    float _2514;
                    uint _2515;
                    _2509 = _2385;
                    _2510 = _2386;
                    _2511 = _2387;
                    _2512 = _2388;
                    _2513 = _2389;
                    _2514 = _2390;
                    _2515 = _2400;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    float _2446;
                    for (;;)
                    {
                        uint _2519 = uint(findLSB(_2515)) + (_2391 << 5u);
                        uint _2516 = (_2515 + 4294967295u) & _2515;
                        uint _2521 = _2519 * 48u;
                        vec4 _2535 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2521)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2521 + 3u)).x));
                        uint _2541 = (_2519 * 48u) + 4u;
                        vec4 _2554 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2541)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2541 + 3u)).x));
                        uint _2560 = (_2519 * 48u) + 8u;
                        vec3 _2571 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2560)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2560 + 2u)).x));
                        float _2575 = _2535.x - _2095;
                        float _2576 = _2535.y - _2096;
                        float _2577 = _2535.z - _2097;
                        float _2578 = dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577));
                        float _2581 = inversesqrt(_2578);
                        float _2582 = _2581 * _2575;
                        float _2583 = _2581 * _2576;
                        float _2584 = _2581 * _2577;
                        float _2585 = dot(vec3(_391, _394, _397), vec3(_2582, _2583, _2584));
                        float _2590 = 1.0 - (_2578 * _2535.w);
                        float _3852 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
                        float _2591 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
                        float _2592 = sqrt(_2578) * _2554.w;
                        float _2595 = 1.39999997615814208984375 / (_2592 + 1.39999997615814208984375);
                        float _2596 = _2595 * _2595;
                        float _2599 = ((1.0 - _2596) * _2585) + _2596;
                        float _2602 = _2592 * _2592;
                        float _2606 = ((isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0))) * _2591) / ((_2602 * 0.699999988079071044921875) + 1.0);
                        float _2610 = (-0.0) - _2095;
                        float _2611 = (-0.0) - _2096;
                        float _2612 = (-0.0) - _2097;
                        float _2616 = inversesqrt(dot(vec3(_2610, _2611, _2612), vec3(_2610, _2611, _2612)));
                        float _2617 = _2616 * _2610;
                        float _2618 = _2616 * _2611;
                        float _2619 = _2616 * _2612;
                        float _2627 = exp2(log2(1.0 / ((_2602 * 3.5) + 5.0)) * 0.25);
                        float _2628 = 1.0 - _452;
                        float _2635 = sqrt(1.0 - ((1.0 - (_2628 * _2628)) * (1.0 - (_2627 * _2627))));
                        float _2636 = _2635 * _2635;
                        float _2637 = _2636 * _2636;
                        float _2638 = _2617 + _2582;
                        float _2639 = _2618 + _2583;
                        float _2640 = _2619 + _2584;
                        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
                        float _2648 = dot(vec3(_391, _394, _397), vec3(_2617, _2618, _2619));
                        float _3868 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                        float _2651 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
                        float _2652 = dot(vec3(_391, _394, _397), vec3(_2644 * _2638, _2644 * _2639, _2644 * _2640));
                        float _3879 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                        float _2655 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                        float _2659 = ((_2655 * _2655) * (_2637 + (-1.0))) + 1.0;
                        float _2660 = _2595 * _2636;
                        float _2661 = _2660 * _2660;
                        float _2664 = ((1.0 - _2661) * _2585) + _2661;
                        float _3890 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2665 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                        float _2666 = 1.0 - _2636;
                        float _2676 = (0.5 / (((_2665 * ((_2651 * _2666) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2665 * _2666) + _2636) * _2651))) * _2665;
                        float _3901 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
                        float _2687 = (((_2637 * 3.1415927410125732421875) * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) / ((_2659 * _2659) * ((_2602 * 2.1991131305694580078125) + 3.141590118408203125))) * _2591;
                        _2444 = (_2606 * _2554.x) + _2512;
                        _2445 = (_2606 * _2554.y) + _2513;
                        _2446 = (_2606 * _2554.z) + _2514;
                        _2441 = (_2687 * _2571.x) + _2509;
                        _2442 = (_2687 * _2571.y) + _2510;
                        _2443 = (_2687 * _2571.z) + _2511;
                        if (_2516 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2509 = _2441;
                            _2510 = _2442;
                            _2511 = _2443;
                            _2512 = _2444;
                            _2513 = _2445;
                            _2514 = _2446;
                            _2515 = _2516;
                        }
                    }
                    frontier_phi_63_pred = _2446;
                    frontier_phi_63_pred_1 = _2445;
                    frontier_phi_63_pred_2 = _2444;
                    frontier_phi_63_pred_3 = _2443;
                    frontier_phi_63_pred_4 = _2442;
                    frontier_phi_63_pred_5 = _2441;
                }
                _2252 = frontier_phi_63_pred;
                _2250 = frontier_phi_63_pred_1;
                _2248 = frontier_phi_63_pred_2;
                _2246 = frontier_phi_63_pred_3;
                _2244 = frontier_phi_63_pred_4;
                _2242 = frontier_phi_63_pred_5;
                uint _2392 = _2391 + 1u;
                if (_2392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2385 = _2242;
                    _2386 = _2244;
                    _2387 = _2246;
                    _2388 = _2248;
                    _2389 = _2250;
                    _2390 = _2252;
                    _2391 = _2392;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
            _2251 = _2252;
        }
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.z;
        uint _2258 = (_2256 >> 8u) & 15u;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((4294967295u << _2258) & _2141) == 0u)
        {
            _2353 = _2241;
            _2355 = _2243;
            _2357 = _2245;
            _2359 = _2247;
            _2361 = _2249;
            _2363 = _2251;
        }
        else
        {
            float _2378 = inversesqrt(dot(vec3(_2095, _2096, _2097), vec3(_2095, _2096, _2097)));
            float _2379 = _2378 * _2095;
            float _2380 = _2378 * _2096;
            float _2381 = _2378 * _2097;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2258 < ((_2256 >> 12u) & 15u))
            {
                float _2354;
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2364;
                float _2492 = _2241;
                float _2493 = _2243;
                float _2494 = _2245;
                float _2495 = _2247;
                float _2496 = _2249;
                float _2497 = _2251;
                uint _2498 = _2258;
                uint _2507;
                bool _2508;
                for (;;)
                {
                    _2507 = texelFetch(g_lightClassification, int((((_2135 << 5u) + (_2121 << 9u)) + (_2498 << 2u)) >> 2u)).x;
                    _2508 = _2507 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2508)
                    {
                        frontier_phi_69_pred = _2497;
                        frontier_phi_69_pred_1 = _2496;
                        frontier_phi_69_pred_2 = _2495;
                        frontier_phi_69_pred_3 = _2494;
                        frontier_phi_69_pred_4 = _2493;
                        frontier_phi_69_pred_5 = _2492;
                    }
                    else
                    {
                        float _2692;
                        float _2693;
                        float _2694;
                        float _2695;
                        float _2696;
                        float _2697;
                        float _2988;
                        float _2989;
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2705 = _2492;
                        float _2706 = _2493;
                        float _2707 = _2494;
                        float _2708 = _2495;
                        float _2709 = _2496;
                        float _2710 = _2497;
                        uint _2711 = _2507;
                        uint _2712;
                        vec4 _2737;
                        float _2738;
                        vec4 _2753;
                        vec3 _2765;
                        vec4 _2781;
                        vec4 _2797;
                        float _2844;
                        bool _2845;
                        for (;;)
                        {
                            uint _2722 = ((_2498 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2711));
                            _2712 = (_2711 + 4294967295u) & _2711;
                            uint _2724 = _2722 * 40u;
                            _2737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2724 + 3u)).x));
                            _2738 = _2737.w;
                            uint _2740 = (_2722 * 40u) + 4u;
                            _2753 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2740)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2740 + 3u)).x));
                            uint _2755 = (_2722 * 40u) + 8u;
                            _2765 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x));
                            uint _2768 = (_2722 * 40u) + 16u;
                            _2781 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2768)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2768 + 3u)).x));
                            uint _2784 = (_2722 * 40u) + 20u;
                            _2797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2784 + 3u)).x));
                            uint _2800 = (_2722 * 40u) + 24u;
                            vec4 _2813 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2800)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2800 + 3u)).x));
                            uint _2819 = (_2722 * 40u) + 28u;
                            vec4 _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            _2844 = fma(_2097, _2832.z, fma(_2096, _2832.y, _2832.x * _2095)) + _2832.w;
                            _2845 = !((fma(_2097, _2813.z, fma(_2096, _2813.y, _2813.x * _2095)) + _2813.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2845)
                            {
                                float _2872 = _2737.x - _2095;
                                float _2873 = _2737.y - _2096;
                                float _2874 = _2737.z - _2097;
                                float _2875 = dot(vec3(_2872, _2873, _2874), vec3(_2872, _2873, _2874));
                                float _2878 = inversesqrt(_2875);
                                float _2879 = _2878 * _2872;
                                float _2880 = _2878 * _2873;
                                float _2881 = _2878 * _2874;
                                float _2885 = 1.0 - (_2875 / (_2738 * _2738));
                                float _3912 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                                float _2886 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                                float _2890 = sqrt(_2875) * _2753.w;
                                float _2892 = 1.39999997615814208984375 / (_2890 + 1.39999997615814208984375);
                                float _2893 = _2892 * _2892;
                                float _2896 = ((1.0 - _2893) * dot(vec3(_2879, _2880, _2881), vec3(_391, _394, _397))) + _2893;
                                float _2899 = _2890 * _2890;
                                float _2903 = (fma(_2097, _2781.z, fma(_2096, _2781.y, _2781.x * _2095)) + _2781.w) / _2844;
                                float _2904 = (fma(_2097, _2797.z, fma(_2096, _2797.y, _2797.x * _2095)) + _2797.w) / _2844;
                                float _2908 = 1.0 - dot(vec2(_2903, _2904), vec2(_2903, _2904));
                                float _3928 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                                float _2909 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
                                float _2910 = _2909 * (((isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))) * _2886) / ((_2899 * 0.699999988079071044921875) + 1.0));
                                float _2922 = exp2(log2(1.0 / ((_2899 * 3.5) + 5.0)) * 0.25);
                                float _2923 = 1.0 - _452;
                                float _2930 = sqrt(1.0 - ((1.0 - (_2923 * _2923)) * (1.0 - (_2922 * _2922))));
                                float _2931 = _2930 * _2930;
                                float _2932 = _2931 * _2931;
                                float _2933 = _2879 - _2379;
                                float _2934 = _2880 - _2380;
                                float _2935 = _2881 - _2381;
                                float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
                                float _2943 = dot(vec3(_391, _394, _397), vec3((-0.0) - _2379, (-0.0) - _2380, (-0.0) - _2381));
                                float _3939 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                                float _2946 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
                                float _2947 = dot(vec3(_391, _394, _397), vec3(_2939 * _2933, _2939 * _2934, _2939 * _2935));
                                float _3950 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
                                float _2950 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
                                float _2954 = ((_2950 * _2950) * (_2932 + (-1.0))) + 1.0;
                                float _2955 = _2892 * _2931;
                                float _2956 = _2955 * _2955;
                                float _2962 = ((1.0 - _2956) * dot(vec3(_391, _394, _397), vec3(_2879, _2880, _2881))) + _2956;
                                float _3961 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                                float _2963 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
                                float _2964 = 1.0 - _2931;
                                float _2974 = (0.5 / (((_2963 * ((_2946 * _2964) + _2931)) + 9.9999999392252902907785028219223e-09) + (((_2963 * _2964) + _2931) * _2946))) * _2963;
                                float _3972 = isnan(0.0) ? _2974 : (isnan(_2974) ? 0.0 : max(_2974, 0.0));
                                float _2984 = (_2909 * _2886) * (((_2932 * 3.1415927410125732421875) * (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) / ((_2954 * _2954) * ((_2899 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _2910 * _2753.z;
                                frontier_phi_75_pred_1 = _2910 * _2753.y;
                                frontier_phi_75_pred_2 = _2910 * _2753.x;
                                frontier_phi_75_pred_3 = _2984 * _2765.z;
                                frontier_phi_75_pred_4 = _2984 * _2765.y;
                                frontier_phi_75_pred_5 = _2984 * _2765.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _2993 = frontier_phi_75_pred;
                            _2992 = frontier_phi_75_pred_1;
                            _2991 = frontier_phi_75_pred_2;
                            _2990 = frontier_phi_75_pred_3;
                            _2989 = frontier_phi_75_pred_4;
                            _2988 = frontier_phi_75_pred_5;
                            _2695 = _2991 + _2708;
                            _2696 = _2992 + _2709;
                            _2697 = _2993 + _2710;
                            _2692 = _2988 + _2705;
                            _2693 = _2989 + _2706;
                            _2694 = _2990 + _2707;
                            if (_2712 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2705 = _2692;
                                _2706 = _2693;
                                _2707 = _2694;
                                _2708 = _2695;
                                _2709 = _2696;
                                _2710 = _2697;
                                _2711 = _2712;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2697;
                        frontier_phi_69_pred_1 = _2696;
                        frontier_phi_69_pred_2 = _2695;
                        frontier_phi_69_pred_3 = _2694;
                        frontier_phi_69_pred_4 = _2693;
                        frontier_phi_69_pred_5 = _2692;
                    }
                    _2364 = frontier_phi_69_pred;
                    _2362 = frontier_phi_69_pred_1;
                    _2360 = frontier_phi_69_pred_2;
                    _2358 = frontier_phi_69_pred_3;
                    _2356 = frontier_phi_69_pred_4;
                    _2354 = frontier_phi_69_pred_5;
                    uint _2499 = _2498 + 1u;
                    if (_2499 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2492 = _2354;
                        _2493 = _2356;
                        _2494 = _2358;
                        _2495 = _2360;
                        _2496 = _2362;
                        _2497 = _2364;
                        _2498 = _2499;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2364;
                frontier_phi_57_58_ladder_1 = _2362;
                frontier_phi_57_58_ladder_2 = _2360;
                frontier_phi_57_58_ladder_3 = _2358;
                frontier_phi_57_58_ladder_4 = _2356;
                frontier_phi_57_58_ladder_5 = _2354;
            }
            else
            {
                frontier_phi_57_58_ladder = _2251;
                frontier_phi_57_58_ladder_1 = _2249;
                frontier_phi_57_58_ladder_2 = _2247;
                frontier_phi_57_58_ladder_3 = _2245;
                frontier_phi_57_58_ladder_4 = _2243;
                frontier_phi_57_58_ladder_5 = _2241;
            }
            _2353 = frontier_phi_57_58_ladder_5;
            _2355 = frontier_phi_57_58_ladder_4;
            _2357 = frontier_phi_57_58_ladder_3;
            _2359 = frontier_phi_57_58_ladder_2;
            _2361 = frontier_phi_57_58_ladder_1;
            _2363 = frontier_phi_57_58_ladder;
        }
        float _2368 = isnan(1.0) ? _436 : (isnan(_436) ? 1.0 : min(_436, 1.0));
        _2153 = (_2368 * _2359) + _1609;
        _2155 = (_2368 * _2361) + _1611;
        _2157 = (_2368 * _2363) + _1613;
        _2159 = ((_2353 * 0.039999999105930328369140625) * _2368) + _1939;
        _2161 = ((_2355 * 0.039999999105930328369140625) * _2368) + _1941;
        _2163 = ((_2357 * 0.039999999105930328369140625) * _2368) + _1943;
    }
    else
    {
        _2153 = _1609;
        _2155 = _1611;
        _2157 = _1613;
        _2159 = _1939;
        _2161 = _1941;
        _2163 = _1943;
    }
    float _3988 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _3999 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _4010 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    uint _2183 = _410 + 6u;
    float _2191 = _369 / cbSceneParam._m0[86u].x;
    float _2192 = _370 / cbSceneParam._m0[86u].y;
    vec4 _2206 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2191, _2192, (log2((isnan(cbSceneParam._m0[77u].w) ? _302 : (isnan(_302) ? cbSceneParam._m0[77u].w : min(_302, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2208 = _2206.x;
    float _2209 = _2206.y;
    float _2210 = _2206.z;
    float _2211 = _2206.w;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    if (_302 > cbSceneParam._m0[78u].w)
    {
        float _2266 = isnan(_302) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _302 : min(cbSceneParam._m0[80u].w, _302));
        float _2267 = _2266 / _302;
        float _2278 = _2267 * _354;
        float _2279 = _355 * _2267;
        float _2280 = (-0.0) - _2279;
        float _2281 = _2267 * _356;
        float _2283 = (cbSceneParam._m0[77u].w * _2280) / _2266;
        float _2284 = _2283 + cbSceneParam._m0[79u].w;
        float _2285 = cbSceneParam._m0[79u].w - _2279;
        float _2291 = sqrt(((_2278 * _2278) + (_2279 * _2279)) + (_2281 * _2281));
        float _2294 = (1.0 - (cbSceneParam._m0[77u].w / _2266)) * _2291;
        float _2299 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2301 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2454;
        if (abs((_2280 - _2283) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2454 = ((((_2284 > 0.0) ? exp2(_2299 * _2284) : (2.0 - exp2(_2301 * _2284))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2294;
        }
        else
        {
            float _2414 = 1.0 / cbSceneParam._m0[80u].x;
            float _2415 = isnan(_2285) ? _2284 : (isnan(_2284) ? _2285 : max(_2284, _2285));
            float _2416 = isnan(_2285) ? _2284 : (isnan(_2284) ? _2285 : min(_2284, _2285));
            float _2425 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : min(_2415, 0.0));
            float _2426 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : min(_2416, 0.0));
            _2454 = ((abs(_2291 / _2280) * cbSceneParam._m0[80u].y) * ((((_2425 - _2426) * 2.0) - ((exp2(_2299 * (isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0)))) - exp2(_2299 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0))))) * _2414)) - ((exp2(_2301 * _2425) - exp2(_2301 * _2426)) * _2414))) + (_2294 * cbSceneParam._m0[80u].z);
        }
        vec4 _2456 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2191, _2192, 1.0), 0.0);
        float _2465 = exp2((_2454 * (-1.44269502162933349609375)) * (1.0 - _2456.w));
        float _2466 = log2(_2465);
        float _2482 = log2(_2211);
        _2303 = (exp2(_2482 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].x)) * _2456.x) / cbSceneParam._m0[78u].x)) + _2208;
        _2305 = (exp2(_2482 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].y)) * _2456.y) / cbSceneParam._m0[78u].y)) + _2209;
        _2307 = (exp2(_2482 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2466 * cbSceneParam._m0[78u].z)) * _2456.z) / cbSceneParam._m0[78u].z)) + _2210;
        _2309 = _2465 * _2211;
    }
    else
    {
        _2303 = _2208;
        _2305 = _2209;
        _2307 = _2210;
        _2309 = _2211;
    }
    float _2321 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2322 = _2321 == 3.0;
    float _2323 = log2(_2309);
    float _2330 = exp2(_2323 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_2153 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _436))) + ((_2159 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _1243)) * cbPerFrame._m0[3u].x));
    float _2331 = exp2(_2323 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2155 + ((isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0))) * _436))) + ((_2161 + ((isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0))) * _1243)) * cbPerFrame._m0[3u].x));
    float _2332 = exp2(_2323 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0))) * (_2157 + ((isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0))) * _436))) + ((_2163 + ((isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0))) * _1243)) * cbPerFrame._m0[3u].x));
    float _2341 = (_2321 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2341 * (_2322 ? _2330 : (_2330 + (cbSceneParam._m0[72u].w * _2303)));
    SV_Target.y = _2341 * (_2322 ? _2331 : (_2331 + (cbSceneParam._m0[72u].w * _2305)));
    SV_Target.z = _2341 * (_2322 ? _2332 : (_2332 + (cbSceneParam._m0[72u].w * _2307)));
    SV_Target.w = cbInstanceData._m0[_2183].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2183].w;
}


