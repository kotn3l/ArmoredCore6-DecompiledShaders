#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1129;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    vec4 _255 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _255.x * cbMtdParam._m0[10u].x;
    float _262 = _255.y * cbMtdParam._m0[10u].y;
    float _263 = _255.z * cbMtdParam._m0[10u].z;
    vec4 _282 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _301 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _340 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _301.x) * 2.0) - _329)) + 1.0;
    float _3723 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _341 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
    float _348 = (_341 * ((_282.x * cbMtdParam._m0[11u].x) - _261)) + _261;
    float _349 = (_341 * ((_282.y * cbMtdParam._m0[11u].y) - _262)) + _262;
    float _350 = (_341 * ((_282.z * cbMtdParam._m0[11u].z) - _263)) + _263;
    vec4 _368 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _381 = (((((1.0 - _301.y) * 2.0) - _329) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3734 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
    float _389 = (((_368.x * cbMtdParam._m0[12u].x) - _348) * _382) + _348;
    float _390 = (_382 * ((_368.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _391 = (_382 * ((_368.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _409 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _422 = (((((1.0 - _301.z) * 2.0) - _329) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3745 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
    vec4 _450 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _458 = ((((((_409.x * cbMtdParam._m0[13u].x) - _389) * _423) + _389) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _450.x;
    float _461 = ((((_423 * ((_409.y * cbMtdParam._m0[13u].y) - _390)) + _390) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _450.y;
    float _464 = ((((_423 * ((_409.z * cbMtdParam._m0[13u].z) - _391)) + _391) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _450.z;
    vec4 _477 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    vec4 _493 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _504 = ((_493.x - _479) * _341) + _479;
    float _505 = ((_493.y - _480) * _341) + _480;
    float _506 = ((_493.z - _481) * _341) + _481;
    vec4 _519 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _530 = ((_519.x - _504) * _382) + _504;
    float _531 = ((_519.y - _505) * _382) + _505;
    float _532 = ((_519.z - _506) * _382) + _506;
    vec4 _545 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _558 = ((_545.z - _532) * _423) + _532;
    float _561 = ((((_545.x - _530) * _423) + _530) * 2.0) + (-1.0);
    float _563 = ((((_545.y - _531) * _423) + _531) * 2.0) + (-1.0);
    float _564 = dot(vec2(_561, _563), vec2(_561, _563));
    float _3756 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))));
    vec4 _582 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _592 = (((_582.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _561;
    float _593 = (((_582.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _563;
    float _596 = fma(_569, _233, fma(_593, _225 * TANGENT.x, (_211 * _204) * _592));
    float _599 = fma(_569, _234, fma(_593, _225 * TANGENT.y, (_211 * _205) * _592));
    float _602 = fma(_569, _235, fma(_593, _225 * TANGENT.z, (_211 * _206) * _592));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    float _607 = _606 * _596;
    float _608 = _606 * _599;
    float _609 = _606 * _602;
    float _3767 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _610 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3789 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3800 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _629 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _679 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _669);
    float _680 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _669);
    float _681 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _669);
    float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
    float _686 = _679 * _685;
    float _687 = _680 * _685;
    float _688 = _681 * _685;
    float _694 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _695 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _713 = fma(_609, cbSceneParam._m0[5u].z, fma(_608, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _607));
    float _716 = fma(_609, cbSceneParam._m0[6u].z, fma(_608, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _607));
    float _719 = fma(_609, cbSceneParam._m0[7u].z, fma(_608, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _607));
    uint _732 = uint(roundEven(NORMAL.w)) * 13u;
    uint _734 = (_732 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _740 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0)))) * cbInstanceData._m0[_734].x;
    float _741 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_734].y;
    float _742 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_734].z;
    float _3811 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _3822 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _3833 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    vec4 _754 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _694, cbSceneParam._m0[86u].y * _695));
    float _757 = _754.x * TEXCOORD.z;
    float _758 = dot(vec3(_607, _608, _609), vec3(_686, _687, _688));
    float _761 = _758 * 2.0;
    float _765 = (_761 * _607) - _686;
    float _766 = (_761 * _608) - _687;
    float _767 = (_761 * _609) - _688;
    float _771 = abs(dot(vec3(_686, _687, _688), vec3(_607, _608, _609)));
    float _3844 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _773 = sqrt(_610);
    float _786 = exp2((_773 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_773 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1128;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _853 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _857 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _861 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _886 = _818 + _607;
        float _887 = _822 + _608;
        float _888 = _826 + _609;
        float _898 = fma(_888, cbModelParam._m0[26u].z, fma(_887, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _886)) - _853;
        float _899 = fma(_888, cbModelParam._m0[27u].z, fma(_887, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _886)) - _857;
        float _900 = fma(_888, cbModelParam._m0[28u].z, fma(_887, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _886)) - _861;
        float _904 = inversesqrt(dot(vec3(_898, _899, _900), vec3(_898, _899, _900)));
        float _917 = ((_904 * _898) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_853 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _918 = ((_904 * _899) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_857 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _919 = ((_904 * _900) / cbModelParam._m0[34u].z) + ((((((_861 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _936 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_917, _918, _919), 0.0);
        float _956 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_922.x + (-0.5));
        float _958 = _956 * (_922.y + (-0.5));
        float _959 = _956 * (_922.z + (-0.5));
        float _966 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_929.x + (-0.5));
        float _968 = _966 * (_929.y + (-0.5));
        float _969 = _966 * (_929.z + (-0.5));
        float _976 = exp2((_936.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_936.x + (-0.5));
        float _978 = _976 * (_936.y + (-0.5));
        float _979 = _976 * (_936.z + (-0.5));
        float _986 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_943.x + (-0.5));
        float _988 = _986 * (_943.y + (-0.5));
        float _989 = _986 * (_943.z + (-0.5));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = _957 * 0.5;
        float _994 = _967 * 0.5;
        float _995 = _977 * 0.5;
        float _996 = dot(vec3(_993, _994, _995), vec3(_993, _994, _995));
        float _1001 = (_996 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_996);
        float _1010 = (dot(vec3(_607, _608, _609), vec3(_1001 * _993, _1001 * _994, _1001 * _995)) + 1.0) * 0.5;
        float _3870 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1020 = sqrt(((_994 * _994) + (_993 * _993)) + (_995 * _995)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3881 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3892 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1022 + 1.0))) + _1027) * _990;
        float _1037 = _958 * 0.5;
        float _1038 = _968 * 0.5;
        float _1039 = _978 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_607, _608, _609), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3925 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_1064 + 1.0))) + _1069) * _991;
        float _1079 = _959 * 0.5;
        float _1080 = _969 * 0.5;
        float _1081 = _979 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_607, _608, _609), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3958 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_1106 + 1.0))) + _1111) * _992;
        _1128 = _959;
        _1130 = _958;
        _1131 = _957;
        _1132 = _969;
        _1133 = _968;
        _1134 = _967;
        _1135 = _979;
        _1136 = _978;
        _1137 = _977;
        _1138 = _992;
        _1139 = _991;
        _1140 = _990;
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
        _1142 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1143 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
    }
    else
    {
        _1128 = _1129;
        _1130 = _1129;
        _1131 = _1129;
        _1132 = _1129;
        _1133 = _1129;
        _1134 = _1129;
        _1135 = _1129;
        _1136 = _1129;
        _1137 = _1129;
        _1138 = _1129;
        _1139 = _1129;
        _1140 = _1129;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1169 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1173 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1177 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1200 = _818 + _607;
        float _1201 = _822 + _608;
        float _1202 = _826 + _609;
        float _1212 = fma(_1202, cbModelParam._m0[30u].z, fma(_1201, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1200)) - _1169;
        float _1213 = fma(_1202, cbModelParam._m0[31u].z, fma(_1201, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1200)) - _1173;
        float _1214 = fma(_1202, cbModelParam._m0[32u].z, fma(_1201, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1200)) - _1177;
        float _1218 = inversesqrt(dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214)));
        float _1231 = ((_1218 * _1212) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1169 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1232 = ((_1218 * _1213) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1173 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1233 = ((_1218 * _1214) / cbModelParam._m0[35u].z) + ((((((_1177 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1249 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        vec4 _1256 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1231, _1232, _1233), 0.0);
        float _1268 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1269 = _1268 * (_1235.x + (-0.5));
        float _1270 = _1268 * (_1235.y + (-0.5));
        float _1271 = _1268 * (_1235.z + (-0.5));
        float _1278 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1242.x + (-0.5));
        float _1280 = _1278 * (_1242.y + (-0.5));
        float _1281 = _1278 * (_1242.z + (-0.5));
        float _1288 = exp2((_1249.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1249.x + (-0.5));
        float _1290 = _1288 * (_1249.y + (-0.5));
        float _1291 = _1288 * (_1249.z + (-0.5));
        float _1298 = exp2((_1256.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1256.x + (-0.5));
        float _1300 = _1298 * (_1256.y + (-0.5));
        float _1301 = _1298 * (_1256.z + (-0.5));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1304 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1305 = _1269 * 0.5;
        float _1306 = _1279 * 0.5;
        float _1307 = _1289 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_607, _608, _609), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3999 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _4010 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4021 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_1332 + 1.0))) + _1337) * _1302;
        float _1347 = _1270 * 0.5;
        float _1348 = _1280 * 0.5;
        float _1349 = _1290 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_607, _608, _609), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1303 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4054 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1374 + 1.0))) + _1379) * _1303;
        float _1389 = _1271 * 0.5;
        float _1390 = _1281 * 0.5;
        float _1391 = _1291 * 0.5;
        float _1392 = dot(vec3(_1389, _1390, _1391), vec3(_1389, _1390, _1391));
        float _1397 = (_1392 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1392);
        float _1405 = (dot(vec3(_607, _608, _609), vec3(_1397 * _1389, _1397 * _1390, _1397 * _1391)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1414 = sqrt(((_1390 * _1390) + (_1389 * _1389)) + (_1391 * _1391)) / (_1304 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1416 = _1415 * 2.0;
        float _1420 = (1.0 - _1415) / (_1415 + 1.0);
        float _4087 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1430 = ((((1.0 - _1421) * (_1416 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1416 + 1.0))) + _1421) * _1304;
        _1438 = _1271;
        _1439 = _1270;
        _1440 = _1269;
        _1441 = _1281;
        _1442 = _1280;
        _1443 = _1279;
        _1444 = _1291;
        _1445 = _1290;
        _1446 = _1289;
        _1447 = _1304;
        _1448 = _1303;
        _1449 = _1302;
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1451 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
        _1452 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)));
    }
    else
    {
        _1438 = _1129;
        _1439 = _1129;
        _1440 = _1129;
        _1441 = _1129;
        _1442 = _1129;
        _1443 = _1129;
        _1444 = _1129;
        _1445 = _1129;
        _1446 = _1129;
        _1447 = _1129;
        _1448 = _1129;
        _1449 = _1129;
        _1450 = 0.0;
        _1451 = 0.0;
        _1452 = 0.0;
    }
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1141)) + _1141;
    float _1463 = (cbModelParam._m0[1u].x * (_1451 - _1142)) + _1142;
    float _1464 = (cbModelParam._m0[1u].x * (_1452 - _1143)) + _1143;
    float _1485 = fma(_1464, cbSceneParam._m0[89u].z, fma(_1463, cbSceneParam._m0[89u].y, _1462 * cbSceneParam._m0[89u].x));
    float _1488 = fma(_1464, cbSceneParam._m0[90u].z, fma(_1463, cbSceneParam._m0[90u].y, _1462 * cbSceneParam._m0[90u].x));
    float _1491 = fma(_1464, cbSceneParam._m0[91u].z, fma(_1463, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1462));
    float _1506 = _765 * 0.5;
    float _1507 = _766 * 0.5;
    float _1508 = _767 * 0.5;
    float _1509 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1440, _1443, _1446, _1449));
    float _1512 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1439, _1442, _1445, _1448));
    float _1515 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1549;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1522 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1128, _1132, _1135, _1138));
        float _1526 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1130, _1133, _1136, _1139));
        float _1530 = dot(vec4(_1506, _1507, _1508, 1.0), vec4(_1131, _1134, _1137, _1140));
        float _1537 = dot(vec4(cbModelParam._m0[39u]), vec4(_1506, _1507, _1508, 1.0));
        _1549 = dot(vec3(isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)), isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1549 = 1.0;
    }
    float _1560;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1551 = dot(vec4(cbModelParam._m0[40u]), vec4(_1506, _1507, _1508, 1.0));
        _1560 = dot(vec3(isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1551) ? 0.0 : (isnan(0.0) ? _1551 : max(0.0, _1551))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1560 = 1.0;
    }
    float _1564 = (_1560 * cbModelParam._m0[1u].x) + (_1549 * (1.0 - cbModelParam._m0[1u].x));
    float _1574 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _610);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1574 : min(cbModelParam._m0[25u].z, _1574));
    float _1655;
    float _1657;
    float _1659;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1622 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1626 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1630 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1633 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1636 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1639 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1667;
        if (_1633 > 0.0)
        {
            _1667 = abs((1.0 - _1622) / _1633);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1622 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1667 = frontier_phi_16_14_ladder;
        }
        float _1840;
        if (_1636 > 0.0)
        {
            _1840 = abs((1.0 - _1626) / _1636);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1626 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1840 = frontier_phi_25_21_ladder;
        }
        float _2135;
        if (_1639 > 0.0)
        {
            _2135 = abs((1.0 - _1630) / _1639);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1630 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2135 = frontier_phi_37_32_ladder;
        }
        float _2137 = isnan(_1840) ? _1667 : (isnan(_1667) ? _1840 : min(_1667, _1840));
        float _2138 = isnan(_2135) ? _2137 : (isnan(_2137) ? _2135 : min(_2137, _2135));
        float _2142 = (_2138 * _1633) + _1622;
        float _2143 = (_2138 * _1636) + _1626;
        float _2144 = (_2138 * _1639) + _1630;
        float _2145 = _2138 * 9.9999997473787516355514526367188e-05;
        float _2147 = (-1.0) - _2145;
        float _2149 = _2145 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2144 > _2149) || ((_2144 < _2147) || ((_2143 > _2149) || ((_2143 < _2147) || ((_2142 < _2147) || (_2142 > _2149))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2289 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2144, cbModelParam._m0[9u].z, fma(_2143, cbModelParam._m0[9u].y, _2142 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2144, cbModelParam._m0[10u].z, fma(_2143, cbModelParam._m0[10u].y, _2142 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2144, cbModelParam._m0[11u].z, fma(_2143, cbModelParam._m0[11u].y, _2142 * cbModelParam._m0[11u].x))), _1575);
            frontier_phi_15_37_ladder = _2289.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2289.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2289.z * cbModelParam._m0[1u].y;
        }
        _1655 = frontier_phi_15_37_ladder_1;
        _1657 = frontier_phi_15_37_ladder;
        _1659 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1643 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1575);
        _1655 = _1643.x * cbModelParam._m0[1u].y;
        _1657 = _1643.y * cbModelParam._m0[1u].y;
        _1659 = _1643.z * cbModelParam._m0[1u].y;
    }
    float _1663 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _610);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1663 : min(cbModelParam._m0[25u].w, _1663));
    float _1757;
    float _1759;
    float _1761;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1721 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1725 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1729 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1732 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1735 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1738 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1845;
        if (_1732 > 0.0)
        {
            _1845 = abs((1.0 - _1721) / _1732);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1721 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1845 = frontier_phi_27_23_ladder;
        }
        float _2162;
        if (_1735 > 0.0)
        {
            _2162 = abs((1.0 - _1725) / _1735);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1725 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2162 = frontier_phi_39_34_ladder;
        }
        float _2489;
        if (_1738 > 0.0)
        {
            _2489 = abs((1.0 - _1729) / _1738);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1729 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2489 = frontier_phi_49_46_ladder;
        }
        float _2491 = isnan(_2162) ? _1845 : (isnan(_1845) ? _2162 : min(_1845, _2162));
        float _2492 = isnan(_2489) ? _2491 : (isnan(_2491) ? _2489 : min(_2491, _2489));
        float _2496 = (_2492 * _1732) + _1721;
        float _2497 = (_2492 * _1735) + _1725;
        float _2498 = (_2492 * _1738) + _1729;
        float _2499 = _2492 * 9.9999997473787516355514526367188e-05;
        float _2500 = (-1.0) - _2499;
        float _2502 = _2499 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2498 > _2502) || ((_2498 < _2500) || ((_2497 > _2502) || ((_2497 < _2500) || ((_2496 < _2500) || (_2496 > _2502))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2498, cbModelParam._m0[17u].z, fma(_2497, cbModelParam._m0[17u].y, _2496 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2498, cbModelParam._m0[18u].z, fma(_2497, cbModelParam._m0[18u].y, _2496 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2498, cbModelParam._m0[19u].z, fma(_2497, cbModelParam._m0[19u].y, _2496 * cbModelParam._m0[19u].x))), _1664);
            frontier_phi_24_49_ladder = _2616.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2616.x * cbModelParam._m0[1u].z;
        }
        _1757 = frontier_phi_24_49_ladder_2;
        _1759 = frontier_phi_24_49_ladder_1;
        _1761 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1741 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1664);
        _1757 = _1741.x * cbModelParam._m0[1u].z;
        _1759 = _1741.y * cbModelParam._m0[1u].z;
        _1761 = _1741.z * cbModelParam._m0[1u].z;
    }
    float _1773 = ((((1.0 - _786) * ((_773 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _773)) * _757;
    float _1774 = _1773 * ((cbModelParam._m0[1u].w * (_1757 - _1655)) + _1655);
    float _1775 = _1773 * ((cbModelParam._m0[1u].w * (_1759 - _1657)) + _1657);
    float _1776 = _1773 * ((cbModelParam._m0[1u].w * (_1761 - _1659)) + _1659);
    float _1779 = fma(_1776, cbSceneParam._m0[89u].z, fma(_1775, cbSceneParam._m0[89u].y, _1774 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1776, cbSceneParam._m0[90u].z, fma(_1775, cbSceneParam._m0[90u].y, _1774 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1776, cbSceneParam._m0[91u].z, fma(_1775, cbSceneParam._m0[91u].y, _1774 * cbSceneParam._m0[91u].x));
    float _1819 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1823 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1827 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1831 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1832 = _1819 / _1831;
    float _1833 = _1823 / _1831;
    float _1834 = _1827 / _1831;
    float _1981;
    float _1982;
    float _1983;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1861 = ((uint(_1834 > cbSceneParam._m0[59u].y) + uint(_1834 > cbSceneParam._m0[59u].x)) + uint(_1834 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1862 = _1861 + 43u;
        uint _1870 = _1861 + 44u;
        uint _1878 = _1861 + 45u;
        uint _1886 = _1861 + 46u;
        float _1897 = fma(_1831, cbSceneParam._m0[_1862].w, fma(_1827, cbSceneParam._m0[_1862].z, fma(_1823, cbSceneParam._m0[_1862].y, _1819 * cbSceneParam._m0[_1862].x)));
        float _1901 = fma(_1831, cbSceneParam._m0[_1870].w, fma(_1827, cbSceneParam._m0[_1870].z, fma(_1823, cbSceneParam._m0[_1870].y, _1819 * cbSceneParam._m0[_1870].x)));
        float _1909 = fma(_1831, cbSceneParam._m0[_1886].w, fma(_1827, cbSceneParam._m0[_1886].z, fma(_1823, cbSceneParam._m0[_1886].y, _1819 * cbSceneParam._m0[_1886].x)));
        float _1914 = cbSceneParam._m0[33u].z * _1909;
        float _1916 = cbSceneParam._m0[33u].w * _1909;
        float _1919 = fma(_1831, cbSceneParam._m0[_1878].w, fma(_1827, cbSceneParam._m0[_1878].z, fma(_1823, cbSceneParam._m0[_1878].y, _1819 * cbSceneParam._m0[_1878].x))) / _1909;
        float _1967 = (cbSceneParam._m0[33u].x - sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834))) * cbSceneParam._m0[33u].y;
        float _4213 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
        float _1974 = (isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1914 + _1897) / _1909, (_1916 + _1901) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1916 + _1897) / _1909, (_1901 - _1914) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 - _1914) / _1909, (_1901 - _1916) / _1909), _1919), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 - _1916) / _1909, (_1914 + _1901) / _1909), _1919), 0.0)).x), vec4(0.25)));
        _1981 = 1.0 - (_1974 * cbSceneParam._m0[34u].x);
        _1982 = 1.0 - (_1974 * cbSceneParam._m0[34u].y);
        _1983 = 1.0 - (_1974 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1981 = 1.0;
        _1982 = 1.0;
        _1983 = 1.0;
    }
    float _2047;
    float _2049;
    float _2051;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2035 = fma(_1831, cbSceneParam._m0[63u].w, fma(_1827, cbSceneParam._m0[63u].z, fma(_1823, cbSceneParam._m0[63u].y, _1819 * cbSceneParam._m0[63u].x)));
        float _2036 = fma(_1831, cbSceneParam._m0[60u].w, fma(_1827, cbSceneParam._m0[60u].z, fma(_1823, cbSceneParam._m0[60u].y, _1819 * cbSceneParam._m0[60u].x))) / _2035;
        float _2037 = fma(_1831, cbSceneParam._m0[61u].w, fma(_1827, cbSceneParam._m0[61u].z, fma(_1823, cbSceneParam._m0[61u].y, _1819 * cbSceneParam._m0[61u].x))) / _2035;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2036 >= cbSceneParam._m0[64u].x) && (_2037 >= cbSceneParam._m0[64u].y)) && (_2036 <= cbSceneParam._m0[64u].z)) && (_2037 <= cbSceneParam._m0[64u].w))
        {
            float _2175 = fma(_1831, cbSceneParam._m0[62u].w, fma(_1827, cbSceneParam._m0[62u].z, fma(_1823, cbSceneParam._m0[62u].y, _1819 * cbSceneParam._m0[62u].x))) / _2035;
            float _2179 = isnan(cbSceneParam._m0[41u].w) ? _2175 : (isnan(_2175) ? cbSceneParam._m0[41u].w : max(_2175, cbSceneParam._m0[41u].w));
            float _2222 = (cbSceneParam._m0[33u].x - sqrt(((_1833 * _1833) + (_1832 * _1832)) + (_1834 * _1834))) * cbSceneParam._m0[33u].y;
            float _4229 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
            float _2229 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2036, cbSceneParam._m0[33u].w + _2037), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2036, _2037 - cbSceneParam._m0[33u].z), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2036 - cbSceneParam._m0[33u].z, _2037 - cbSceneParam._m0[33u].w), _2179), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2036 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2037), _2179), 0.0)).x), vec4(0.25)));
            float _2233 = 1.0 - (_2229 * cbSceneParam._m0[34u].x);
            float _2234 = 1.0 - (_2229 * cbSceneParam._m0[34u].y);
            float _2235 = 1.0 - (_2229 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2234) ? _1982 : (isnan(_1982) ? _2234 : min(_1982, _2234));
            frontier_phi_36_35_ladder_1 = isnan(_2235) ? _1983 : (isnan(_1983) ? _2235 : min(_1983, _2235));
            frontier_phi_36_35_ladder_2 = isnan(_2233) ? _1981 : (isnan(_1981) ? _2233 : min(_1981, _2233));
        }
        else
        {
            frontier_phi_36_35_ladder = _1982;
            frontier_phi_36_35_ladder_1 = _1983;
            frontier_phi_36_35_ladder_2 = _1981;
        }
        _2047 = frontier_phi_36_35_ladder_2;
        _2049 = frontier_phi_36_35_ladder;
        _2051 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2047 = _1981;
        _2049 = _1982;
        _2051 = _1983;
    }
    uvec4 _2056 = floatBitsToUint(cbInstanceData._m0[_732 + 5u]);
    uint _2058 = _2056.x * 14u;
    uint _2059 = _2058 + 13u;
    float _2066 = _757 + (-1.0);
    float _2071 = (cbLight._m0[_2059].x * _2066) + 1.0;
    float _2072 = (cbLight._m0[_2059].y * _2066) + 1.0;
    float _2073 = (cbLight._m0[_2059].z * _2066) + 1.0;
    float _2074 = (cbLight._m0[_2059].w * _2066) + 1.0;
    uint _2075 = _2058 + 5u;
    float _2081 = isnan(1.0) ? _2072 : (isnan(_2072) ? 1.0 : min(_2072, 1.0));
    uint _2085 = _2058 + 4u;
    float _2094 = isnan(1.0) ? _2071 : (isnan(_2071) ? 1.0 : min(_2071, 1.0));
    uint _2098 = _2058 | 1u;
    float _2109 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_607, _608, _609));
    float _2112 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_607, _608, _609));
    float _4265 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _4276 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2117 = (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * 0.3183098733425140380859375;
    float _2119 = (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * 0.3183098733425140380859375;
    float _2126 = ((cbLight._m0[_2075].x * _2081) * _2119) + (((cbLight._m0[_2085].x * _2047) * _2094) * _2117);
    float _2127 = ((_2081 * cbLight._m0[_2075].y) * _2119) + (((cbLight._m0[_2085].y * _2049) * _2094) * _2117);
    float _2128 = ((_2081 * cbLight._m0[_2075].z) * _2119) + (((cbLight._m0[_2085].z * _2051) * _2094) * _2117);
    uvec4 _2132 = floatBitsToUint(cbLight._m0[_2058 + 12u]);
    bool _2134 = _2132.x == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2134)
    {
        _2236 = _2126;
        _2238 = _2127;
        _2240 = _2128;
    }
    else
    {
        uint _2244 = _2058 + 6u;
        float _2260 = (dot(vec3(cbLight._m0[_2058 + 2u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2261 = _2260 * _2260;
        float _4287 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2262 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _2263 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2236 = (((cbLight._m0[_2244].x * 0.3183098733425140380859375) * _2262) * _2263) + _2126;
        _2238 = (((cbLight._m0[_2244].y * 0.3183098733425140380859375) * _2262) * _2263) + _2127;
        _2240 = (((cbLight._m0[_2244].z * 0.3183098733425140380859375) * _2262) * _2263) + _2128;
    }
    bool _2243 = _2132.y == 0u;
    float _2298;
    float _2300;
    float _2302;
    if (_2243)
    {
        _2298 = _2236;
        _2300 = _2238;
        _2302 = _2240;
    }
    else
    {
        uint _2460 = _2058 + 7u;
        float _2476 = (dot(vec3(cbLight._m0[_2058 + 3u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4303 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2479 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2298 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2236;
        _2300 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2238;
        _2302 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2240;
    }
    uint _2305 = _2058 + 8u;
    float _2318 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _610) * 0.949999988079071044921875);
    float _2319 = _2318 * _2318;
    float _2320 = cbLight._m0[_2058].x + _686;
    float _2321 = cbLight._m0[_2058].y + _687;
    float _2322 = cbLight._m0[_2058].z + _688;
    float _2326 = inversesqrt(dot(vec3(_2320, _2321, _2322), vec3(_2320, _2321, _2322)));
    float _2327 = _2326 * _2320;
    float _2328 = _2326 * _2321;
    float _2329 = _2326 * _2322;
    float _2330 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2058].xyz));
    float _4319 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
    float _2333 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    float _4330 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2334 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
    float _2335 = dot(vec3(_607, _608, _609), vec3(_2327, _2328, _2329));
    float _4341 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
    float _2338 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _2339 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2327, _2328, _2329));
    float _4352 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = _2319 * _2319;
    float _2347 = ((_2338 * _2338) * (_2343 + (-1.0))) + 1.0;
    float _2358 = (exp2(log2(1.0 - (isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2359 = 1.0 - _2319;
    float _2370 = (0.5 / (((_2334 * ((_2333 * _2359) + _2319)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2359) + _2319) * _2333))) * _2333;
    float _4363 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2372 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_2343 / ((_2347 * _2347) * 3.141590118408203125));
    uint _2386 = _2058 + 9u;
    float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2098].w)) * _610) * 0.949999988079071044921875);
    float _2398 = _2397 * _2397;
    float _2399 = cbLight._m0[_2098].x + _686;
    float _2400 = cbLight._m0[_2098].y + _687;
    float _2401 = cbLight._m0[_2098].z + _688;
    float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
    float _2406 = _2405 * _2399;
    float _2407 = _2405 * _2400;
    float _2408 = _2405 * _2401;
    float _2409 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2098].xyz));
    float _4374 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
    float _2412 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _2413 = dot(vec3(_607, _608, _609), vec3(_2406, _2407, _2408));
    float _4385 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _2417 = dot(vec3(cbLight._m0[_2098].xyz), vec3(_2406, _2407, _2408));
    float _4396 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2421 = _2398 * _2398;
    float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
    float _2434 = (exp2(log2(1.0 - (isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2435 = 1.0 - _2398;
    float _2445 = (0.5 / (((_2334 * ((_2412 * _2435) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2435) + _2398) * _2412))) * _2412;
    float _4407 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2447 = (isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
    float _2457 = (((_2434 * cbLight._m0[_2386].x) * _2447) * _2081) + ((((cbLight._m0[_2305].x * _2047) * _2358) * _2372) * _2094);
    float _2458 = (((_2434 * cbLight._m0[_2386].y) * _2447) * _2081) + ((((cbLight._m0[_2305].y * _2049) * _2358) * _2372) * _2094);
    float _2459 = (((_2434 * cbLight._m0[_2386].z) * _2447) * _2081) + ((((cbLight._m0[_2305].z * _2051) * _2358) * _2372) * _2094);
    float _2515;
    float _2517;
    float _2519;
    if (_2134)
    {
        _2515 = _2457;
        _2517 = _2458;
        _2519 = _2459;
    }
    else
    {
        uint _2521 = _2058 + 2u;
        uint _2525 = _2058 + 10u;
        float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2521].w)) * _610) * 0.949999988079071044921875);
        float _2540 = _2539 * _2539;
        float _2541 = cbLight._m0[_2521].x + _686;
        float _2542 = cbLight._m0[_2521].y + _687;
        float _2543 = cbLight._m0[_2521].z + _688;
        float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
        float _2548 = _2547 * _2541;
        float _2549 = _2547 * _2542;
        float _2550 = _2547 * _2543;
        float _2551 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2521].xyz));
        float _4418 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2554 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _2555 = dot(vec3(_607, _608, _609), vec3(_2548, _2549, _2550));
        float _4429 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
        float _2559 = dot(vec3(cbLight._m0[_2521].xyz), vec3(_2548, _2549, _2550));
        float _4440 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2563 = _2540 * _2540;
        float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
        float _2576 = (exp2(log2(1.0 - (isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2577 = 1.0 - _2540;
        float _2587 = (0.5 / (((_2334 * ((_2554 * _2577) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2577) + _2540) * _2554))) * _2554;
        float _4451 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2589 = (isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
        float _2590 = isnan(1.0) ? _2073 : (isnan(_2073) ? 1.0 : min(_2073, 1.0));
        _2515 = (((_2576 * cbLight._m0[_2525].x) * _2589) * _2590) + _2457;
        _2517 = (((_2576 * cbLight._m0[_2525].y) * _2589) * _2590) + _2458;
        _2519 = (((_2576 * cbLight._m0[_2525].z) * _2589) * _2590) + _2459;
    }
    float _2621;
    float _2623;
    float _2625;
    if (_2243)
    {
        _2621 = _2515;
        _2623 = _2517;
        _2625 = _2519;
    }
    else
    {
        uint _2632 = _2058 + 3u;
        uint _2636 = _2058 + 11u;
        float _2650 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2632].w)) * _610) * 0.949999988079071044921875);
        float _2651 = _2650 * _2650;
        float _2652 = cbLight._m0[_2632].x + _686;
        float _2653 = cbLight._m0[_2632].y + _687;
        float _2654 = cbLight._m0[_2632].z + _688;
        float _2658 = inversesqrt(dot(vec3(_2652, _2653, _2654), vec3(_2652, _2653, _2654)));
        float _2659 = _2658 * _2652;
        float _2660 = _2658 * _2653;
        float _2661 = _2658 * _2654;
        float _2662 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2632].xyz));
        float _4467 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2665 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2666 = dot(vec3(_607, _608, _609), vec3(_2659, _2660, _2661));
        float _4478 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
        float _2669 = isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0));
        float _2670 = dot(vec3(cbLight._m0[_2632].xyz), vec3(_2659, _2660, _2661));
        float _4489 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
        float _2674 = _2651 * _2651;
        float _2678 = ((_2669 * _2669) * (_2674 + (-1.0))) + 1.0;
        float _2687 = (exp2(log2(1.0 - (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2688 = 1.0 - _2651;
        float _2698 = (0.5 / (((_2334 * ((_2665 * _2688) + _2651)) + 9.9999999392252902907785028219223e-09) + (((_2334 * _2688) + _2651) * _2665))) * _2665;
        float _4500 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2700 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * (_2674 / ((_2678 * _2678) * 3.141590118408203125));
        float _2701 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
        _2621 = (((_2687 * cbLight._m0[_2636].x) * _2700) * _2701) + _2515;
        _2623 = (((_2687 * cbLight._m0[_2636].y) * _2700) * _2701) + _2517;
        _2625 = (((_2687 * cbLight._m0[_2636].z) * _2700) * _2701) + _2519;
    }
    float _2766;
    float _2768;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_2056.y == 0u)
    {
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.x;
        uint _2734 = uint((float(_2722.y) * floor(float(uint(cbSceneParam._m0[85u].y * _695) / _2723))) + floor(float(uint(cbSceneParam._m0[85u].x * _694) / _2723)));
        float _2744 = (log2(_1834 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2745 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        uint _2748 = uint(isnan(14.0) ? _2745 : (isnan(_2745) ? 14.0 : min(_2745, 14.0)));
        uvec4 _2753 = texelFetch(g_lightClusterGridBuffer, int(((_2748 << 2u) + (_2734 << 6u)) >> 2u));
        uint _2754 = _2753.x;
        uint _2755 = _2722.z;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((((1u << ((_2755 >> 4u) & 15u)) + 4294967295u) & _2754) == 0u) || ((_2755 & 240u) == 0u))
        {
            _2833 = 0.0;
            _2835 = 0.0;
            _2837 = 0.0;
            _2839 = 0.0;
            _2841 = 0.0;
            _2843 = 0.0;
        }
        else
        {
            float _2834;
            float _2836;
            float _2838;
            float _2840;
            float _2842;
            float _2844;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            float _2982 = 0.0;
            uint _2983 = 0u;
            uint _2992;
            bool _2993;
            for (;;)
            {
                _2992 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_2983 << 2u)) >> 2u)).x;
                _2993 = _2992 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2993)
                {
                    frontier_phi_68_pred = _2982;
                    frontier_phi_68_pred_1 = _2981;
                    frontier_phi_68_pred_2 = _2980;
                    frontier_phi_68_pred_3 = _2978;
                    frontier_phi_68_pred_4 = _2977;
                    frontier_phi_68_pred_5 = _2979;
                }
                else
                {
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    float _3106;
                    uint _3107;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2979;
                    _3104 = _2980;
                    _3105 = _2981;
                    _3106 = _2982;
                    _3107 = _2992;
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    for (;;)
                    {
                        uint _3111 = uint(findLSB(_3107)) + (_2983 << 5u);
                        uint _3108 = (_3107 + 4294967295u) & _3107;
                        uint _3113 = _3111 * 48u;
                        vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3113)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3113 + 3u)).x));
                        uint _3133 = (_3111 * 48u) + 4u;
                        vec4 _3146 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3152 = (_3111 * 48u) + 8u;
                        vec3 _3163 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x));
                        float _3167 = _3127.x - _1832;
                        float _3168 = _3127.y - _1833;
                        float _3169 = _3127.z - _1834;
                        float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                        float _3173 = inversesqrt(_3170);
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3177 = dot(vec3(_713, _716, _719), vec3(_3174, _3175, _3176));
                        float _3182 = 1.0 - (_3170 * _3127.w);
                        float _4526 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                        float _3183 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
                        float _3184 = sqrt(_3170) * _3146.w;
                        float _3187 = 1.39999997615814208984375 / (_3184 + 1.39999997615814208984375);
                        float _3188 = _3187 * _3187;
                        float _3191 = ((1.0 - _3188) * _3177) + _3188;
                        float _3194 = _3184 * _3184;
                        float _3198 = ((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3183) / ((_3194 * 0.699999988079071044921875) + 1.0);
                        float _3202 = (-0.0) - _1832;
                        float _3203 = (-0.0) - _1833;
                        float _3204 = (-0.0) - _1834;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3209 = _3208 * _3202;
                        float _3210 = _3208 * _3203;
                        float _3211 = _3208 * _3204;
                        float _3218 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                        float _3219 = 1.0 - _773;
                        float _3226 = sqrt(1.0 - ((1.0 - (_3219 * _3219)) * (1.0 - (_3218 * _3218))));
                        float _3227 = _3226 * _3226;
                        float _3228 = _3227 * _3227;
                        float _3229 = _3209 + _3174;
                        float _3230 = _3210 + _3175;
                        float _3231 = _3211 + _3176;
                        float _3235 = inversesqrt(dot(vec3(_3229, _3230, _3231), vec3(_3229, _3230, _3231)));
                        float _3239 = dot(vec3(_713, _716, _719), vec3(_3209, _3210, _3211));
                        float _4542 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3242 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
                        float _3243 = dot(vec3(_713, _716, _719), vec3(_3235 * _3229, _3235 * _3230, _3235 * _3231));
                        float _4553 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                        float _3246 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
                        float _3250 = ((_3246 * _3246) * (_3228 + (-1.0))) + 1.0;
                        float _3251 = _3187 * _3227;
                        float _3252 = _3251 * _3251;
                        float _3255 = ((1.0 - _3252) * _3177) + _3252;
                        float _4564 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                        float _3256 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3257 = 1.0 - _3227;
                        float _3267 = (0.5 / (((_3256 * ((_3242 * _3257) + _3227)) + 9.9999999392252902907785028219223e-09) + (((_3256 * _3257) + _3227) * _3242))) * _3256;
                        float _4575 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                        float _3278 = (((_3228 * 3.1415927410125732421875) * (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) / ((_3250 * _3250) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125))) * _3183;
                        _3036 = (_3198 * _3146.x) + _3104;
                        _3037 = (_3198 * _3146.y) + _3105;
                        _3038 = (_3198 * _3146.z) + _3106;
                        _3033 = (_3278 * _3163.x) + _3101;
                        _3034 = (_3278 * _3163.y) + _3102;
                        _3035 = (_3278 * _3163.z) + _3103;
                        if (_3108 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3035;
                            _3104 = _3036;
                            _3105 = _3037;
                            _3106 = _3038;
                            _3107 = _3108;
                        }
                    }
                    frontier_phi_68_pred = _3038;
                    frontier_phi_68_pred_1 = _3037;
                    frontier_phi_68_pred_2 = _3036;
                    frontier_phi_68_pred_3 = _3034;
                    frontier_phi_68_pred_4 = _3033;
                    frontier_phi_68_pred_5 = _3035;
                }
                _2844 = frontier_phi_68_pred;
                _2842 = frontier_phi_68_pred_1;
                _2840 = frontier_phi_68_pred_2;
                _2836 = frontier_phi_68_pred_3;
                _2834 = frontier_phi_68_pred_4;
                _2838 = frontier_phi_68_pred_5;
                uint _2984 = _2983 + 1u;
                if (_2984 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2977 = _2834;
                    _2978 = _2836;
                    _2979 = _2838;
                    _2980 = _2840;
                    _2981 = _2842;
                    _2982 = _2844;
                    _2983 = _2984;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2833 = _2834;
            _2835 = _2836;
            _2837 = _2838;
            _2839 = _2840;
            _2841 = _2842;
            _2843 = _2844;
        }
        uvec4 _2847 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2848 = _2847.z;
        uint _2850 = (_2848 >> 8u) & 15u;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        float _2953;
        float _2955;
        if (((4294967295u << _2850) & _2754) == 0u)
        {
            _2945 = _2833;
            _2947 = _2835;
            _2949 = _2837;
            _2951 = _2839;
            _2953 = _2841;
            _2955 = _2843;
        }
        else
        {
            float _2970 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
            float _2971 = _2970 * _1832;
            float _2972 = _2970 * _1833;
            float _2973 = _2970 * _1834;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2850 < ((_2848 >> 12u) & 15u))
            {
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _2954;
                float _2956;
                float _3084 = _2833;
                float _3085 = _2835;
                float _3086 = _2837;
                float _3087 = _2839;
                float _3088 = _2841;
                float _3089 = _2843;
                uint _3090 = _2850;
                uint _3099;
                bool _3100;
                for (;;)
                {
                    _3099 = texelFetch(g_lightClassification, int((((_2748 << 5u) + (_2734 << 9u)) + (_3090 << 2u)) >> 2u)).x;
                    _3100 = _3099 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3100)
                    {
                        frontier_phi_74_pred = _3086;
                        frontier_phi_74_pred_1 = _3085;
                        frontier_phi_74_pred_2 = _3084;
                        frontier_phi_74_pred_3 = _3089;
                        frontier_phi_74_pred_4 = _3088;
                        frontier_phi_74_pred_5 = _3087;
                    }
                    else
                    {
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3578;
                        float _3579;
                        float _3580;
                        float _3581;
                        float _3582;
                        float _3583;
                        float _3296 = _3084;
                        float _3297 = _3085;
                        float _3298 = _3086;
                        float _3299 = _3087;
                        float _3300 = _3088;
                        float _3301 = _3089;
                        uint _3302 = _3099;
                        uint _3303;
                        vec4 _3328;
                        float _3329;
                        vec4 _3344;
                        vec3 _3356;
                        vec4 _3371;
                        vec4 _3387;
                        float _3434;
                        bool _3435;
                        for (;;)
                        {
                            uint _3313 = ((_3090 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3302));
                            _3303 = (_3302 + 4294967295u) & _3302;
                            uint _3315 = _3313 * 40u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            _3329 = _3328.w;
                            uint _3331 = (_3313 * 40u) + 4u;
                            _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3346 = (_3313 * 40u) + 8u;
                            _3356 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x));
                            uint _3358 = (_3313 * 40u) + 16u;
                            _3371 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3358)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3358 + 3u)).x));
                            uint _3374 = (_3313 * 40u) + 20u;
                            _3387 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3374)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3374 + 3u)).x));
                            uint _3390 = (_3313 * 40u) + 24u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            uint _3409 = (_3313 * 40u) + 28u;
                            vec4 _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            _3434 = fma(_1834, _3422.z, fma(_1833, _3422.y, _3422.x * _1832)) + _3422.w;
                            _3435 = !((fma(_1834, _3403.z, fma(_1833, _3403.y, _3403.x * _1832)) + _3403.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3435)
                            {
                                float _3462 = _3328.x - _1832;
                                float _3463 = _3328.y - _1833;
                                float _3464 = _3328.z - _1834;
                                float _3465 = dot(vec3(_3462, _3463, _3464), vec3(_3462, _3463, _3464));
                                float _3468 = inversesqrt(_3465);
                                float _3469 = _3468 * _3462;
                                float _3470 = _3468 * _3463;
                                float _3471 = _3468 * _3464;
                                float _3475 = 1.0 - (_3465 / (_3329 * _3329));
                                float _4586 = isnan(0.0) ? _3475 : (isnan(_3475) ? 0.0 : max(_3475, 0.0));
                                float _3476 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3480 = sqrt(_3465) * _3344.w;
                                float _3482 = 1.39999997615814208984375 / (_3480 + 1.39999997615814208984375);
                                float _3483 = _3482 * _3482;
                                float _3486 = ((1.0 - _3483) * dot(vec3(_3469, _3470, _3471), vec3(_713, _716, _719))) + _3483;
                                float _3489 = _3480 * _3480;
                                float _3493 = (fma(_1834, _3371.z, fma(_1833, _3371.y, _3371.x * _1832)) + _3371.w) / _3434;
                                float _3494 = (fma(_1834, _3387.z, fma(_1833, _3387.y, _3387.x * _1832)) + _3387.w) / _3434;
                                float _3498 = 1.0 - dot(vec2(_3493, _3494), vec2(_3493, _3494));
                                float _4602 = isnan(0.0) ? _3498 : (isnan(_3498) ? 0.0 : max(_3498, 0.0));
                                float _3499 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                                float _3500 = _3499 * (((isnan(0.0) ? _3486 : (isnan(_3486) ? 0.0 : max(_3486, 0.0))) * _3476) / ((_3489 * 0.699999988079071044921875) + 1.0));
                                float _3512 = exp2(log2(1.0 / ((_3489 * 3.5) + 5.0)) * 0.25);
                                float _3513 = 1.0 - _773;
                                float _3520 = sqrt(1.0 - ((1.0 - (_3513 * _3513)) * (1.0 - (_3512 * _3512))));
                                float _3521 = _3520 * _3520;
                                float _3522 = _3521 * _3521;
                                float _3523 = _3469 - _2971;
                                float _3524 = _3470 - _2972;
                                float _3525 = _3471 - _2973;
                                float _3529 = inversesqrt(dot(vec3(_3523, _3524, _3525), vec3(_3523, _3524, _3525)));
                                float _3533 = dot(vec3(_713, _716, _719), vec3((-0.0) - _2971, (-0.0) - _2972, (-0.0) - _2973));
                                float _4613 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3536 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                                float _3537 = dot(vec3(_713, _716, _719), vec3(_3529 * _3523, _3529 * _3524, _3529 * _3525));
                                float _4624 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                                float _3540 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3544 = ((_3540 * _3540) * (_3522 + (-1.0))) + 1.0;
                                float _3545 = _3482 * _3521;
                                float _3546 = _3545 * _3545;
                                float _3552 = ((1.0 - _3546) * dot(vec3(_713, _716, _719), vec3(_3469, _3470, _3471))) + _3546;
                                float _4635 = isnan(0.0) ? _3552 : (isnan(_3552) ? 0.0 : max(_3552, 0.0));
                                float _3553 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                                float _3554 = 1.0 - _3521;
                                float _3564 = (0.5 / (((_3553 * ((_3536 * _3554) + _3521)) + 9.9999999392252902907785028219223e-09) + (((_3553 * _3554) + _3521) * _3536))) * _3553;
                                float _4646 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3574 = (_3499 * _3476) * (((_3522 * 3.1415927410125732421875) * (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) / ((_3544 * _3544) * ((_3489 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3574 * _3356.z;
                                frontier_phi_80_pred_1 = _3574 * _3356.y;
                                frontier_phi_80_pred_2 = _3574 * _3356.x;
                                frontier_phi_80_pred_3 = _3500 * _3344.z;
                                frontier_phi_80_pred_4 = _3500 * _3344.y;
                                frontier_phi_80_pred_5 = _3500 * _3344.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3580 = frontier_phi_80_pred;
                            _3579 = frontier_phi_80_pred_1;
                            _3578 = frontier_phi_80_pred_2;
                            _3583 = frontier_phi_80_pred_3;
                            _3582 = frontier_phi_80_pred_4;
                            _3581 = frontier_phi_80_pred_5;
                            _3286 = _3581 + _3299;
                            _3287 = _3582 + _3300;
                            _3288 = _3583 + _3301;
                            _3283 = _3578 + _3296;
                            _3284 = _3579 + _3297;
                            _3285 = _3580 + _3298;
                            if (_3303 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3286;
                                _3300 = _3287;
                                _3301 = _3288;
                                _3302 = _3303;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3285;
                        frontier_phi_74_pred_1 = _3284;
                        frontier_phi_74_pred_2 = _3283;
                        frontier_phi_74_pred_3 = _3288;
                        frontier_phi_74_pred_4 = _3287;
                        frontier_phi_74_pred_5 = _3286;
                    }
                    _2950 = frontier_phi_74_pred;
                    _2948 = frontier_phi_74_pred_1;
                    _2946 = frontier_phi_74_pred_2;
                    _2956 = frontier_phi_74_pred_3;
                    _2954 = frontier_phi_74_pred_4;
                    _2952 = frontier_phi_74_pred_5;
                    uint _3091 = _3090 + 1u;
                    if (_3091 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3084 = _2946;
                        _3085 = _2948;
                        _3086 = _2950;
                        _3087 = _2952;
                        _3088 = _2954;
                        _3089 = _2956;
                        _3090 = _3091;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2954;
                frontier_phi_62_63_ladder_1 = _2952;
                frontier_phi_62_63_ladder_2 = _2950;
                frontier_phi_62_63_ladder_3 = _2956;
                frontier_phi_62_63_ladder_4 = _2948;
                frontier_phi_62_63_ladder_5 = _2946;
            }
            else
            {
                frontier_phi_62_63_ladder = _2841;
                frontier_phi_62_63_ladder_1 = _2839;
                frontier_phi_62_63_ladder_2 = _2837;
                frontier_phi_62_63_ladder_3 = _2843;
                frontier_phi_62_63_ladder_4 = _2835;
                frontier_phi_62_63_ladder_5 = _2833;
            }
            _2945 = frontier_phi_62_63_ladder_5;
            _2947 = frontier_phi_62_63_ladder_4;
            _2949 = frontier_phi_62_63_ladder_2;
            _2951 = frontier_phi_62_63_ladder_1;
            _2953 = frontier_phi_62_63_ladder;
            _2955 = frontier_phi_62_63_ladder_3;
        }
        float _2960 = isnan(1.0) ? _757 : (isnan(_757) ? 1.0 : min(_757, 1.0));
        _2766 = (_2960 * _2951) + _2298;
        _2768 = (_2960 * _2953) + _2300;
        _2770 = (_2960 * _2955) + _2302;
        _2772 = ((_2945 * 0.039999999105930328369140625) * _2960) + _2621;
        _2774 = ((_2947 * 0.039999999105930328369140625) * _2960) + _2623;
        _2776 = ((_2949 * 0.039999999105930328369140625) * _2960) + _2625;
    }
    else
    {
        _2766 = _2298;
        _2768 = _2300;
        _2770 = _2302;
        _2772 = _2621;
        _2774 = _2623;
        _2776 = _2625;
    }
    float _4662 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _4673 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4684 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    uint _2796 = _732 + 6u;
    float _2804 = _694 / cbSceneParam._m0[86u].x;
    float _2805 = _695 / cbSceneParam._m0[86u].y;
    vec4 _2819 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, (log2((isnan(cbSceneParam._m0[77u].w) ? _629 : (isnan(_629) ? cbSceneParam._m0[77u].w : min(_629, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2821 = _2819.x;
    float _2822 = _2819.y;
    float _2823 = _2819.z;
    float _2824 = _2819.w;
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    if (_629 > cbSceneParam._m0[78u].w)
    {
        float _2858 = isnan(_629) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _629 : min(cbSceneParam._m0[80u].w, _629));
        float _2859 = _2858 / _629;
        float _2870 = _2859 * _679;
        float _2871 = _680 * _2859;
        float _2872 = (-0.0) - _2871;
        float _2873 = _2859 * _681;
        float _2875 = (cbSceneParam._m0[77u].w * _2872) / _2858;
        float _2876 = _2875 + cbSceneParam._m0[79u].w;
        float _2877 = cbSceneParam._m0[79u].w - _2871;
        float _2883 = sqrt(((_2870 * _2870) + (_2871 * _2871)) + (_2873 * _2873));
        float _2886 = (1.0 - (cbSceneParam._m0[77u].w / _2858)) * _2883;
        float _2891 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2893 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3046;
        if (abs((_2872 - _2875) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3046 = ((((_2876 > 0.0) ? exp2(_2891 * _2876) : (2.0 - exp2(_2893 * _2876))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2886;
        }
        else
        {
            float _3006 = 1.0 / cbSceneParam._m0[80u].x;
            float _3007 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : max(_2876, _2877));
            float _3008 = isnan(_2877) ? _2876 : (isnan(_2876) ? _2877 : min(_2876, _2877));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            float _3018 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : min(_3008, 0.0));
            _3046 = ((abs(_2883 / _2872) * cbSceneParam._m0[80u].y) * ((((_3017 - _3018) * 2.0) - ((exp2(_2891 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)))) - exp2(_2891 * (isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0))))) * _3006)) - ((exp2(_2893 * _3017) - exp2(_2893 * _3018)) * _3006))) + (_2886 * cbSceneParam._m0[80u].z);
        }
        vec4 _3048 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2804, _2805, 1.0), 0.0);
        float _3057 = exp2((_3046 * (-1.44269502162933349609375)) * (1.0 - _3048.w));
        float _3058 = log2(_3057);
        float _3074 = log2(_2824);
        _2895 = (exp2(_3074 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].x)) * _3048.x) / cbSceneParam._m0[78u].x)) + _2821;
        _2897 = (exp2(_3074 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].y)) * _3048.y) / cbSceneParam._m0[78u].y)) + _2822;
        _2899 = (exp2(_3074 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3058 * cbSceneParam._m0[78u].z)) * _3048.z) / cbSceneParam._m0[78u].z)) + _2823;
        _2901 = _3057 * _2824;
    }
    else
    {
        _2895 = _2821;
        _2897 = _2822;
        _2899 = _2823;
        _2901 = _2824;
    }
    float _2913 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2914 = _2913 == 3.0;
    float _2915 = log2(_2901);
    float _2922 = exp2(_2915 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))) * (_2766 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _757))) + ((_2772 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2923 = exp2(_2915 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0))) * (_2768 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _757))) + ((_2774 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2924 = exp2(_2915 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0))) * (_2770 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _757))) + ((_2776 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1564)) * cbPerFrame._m0[3u].x));
    float _2933 = (_2913 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2933 * (_2914 ? _2922 : (_2922 + (cbSceneParam._m0[72u].w * _2895)));
    SV_Target.y = _2933 * (_2914 ? _2923 : (_2923 + (cbSceneParam._m0[72u].w * _2897)));
    SV_Target.z = _2933 * (_2914 ? _2924 : (_2924 + (cbSceneParam._m0[72u].w * _2899)));
    SV_Target.w = cbInstanceData._m0[_2796].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2796].w;
}


