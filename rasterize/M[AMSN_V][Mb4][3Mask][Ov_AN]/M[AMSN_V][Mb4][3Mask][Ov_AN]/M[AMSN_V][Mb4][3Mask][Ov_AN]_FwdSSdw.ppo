#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1127;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _231;
    float _232;
    float _233;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _231 = (-0.0) - _217;
        _232 = (-0.0) - _218;
        _233 = (-0.0) - _219;
    }
    else
    {
        _231 = _217;
        _232 = _218;
        _233 = _219;
    }
    vec4 _253 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _259 = _253.x * cbMtdParam._m0[10u].x;
    float _260 = _253.y * cbMtdParam._m0[10u].y;
    float _261 = _253.z * cbMtdParam._m0[10u].z;
    vec4 _280 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _299 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _338 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _299.x) * 2.0) - _327)) + 1.0;
    float _3462 = isnan(0.0) ? _338 : (isnan(_338) ? 0.0 : max(_338, 0.0));
    float _339 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _346 = (_339 * ((_280.x * cbMtdParam._m0[11u].x) - _259)) + _259;
    float _347 = (_339 * ((_280.y * cbMtdParam._m0[11u].y) - _260)) + _260;
    float _348 = (_339 * ((_280.z * cbMtdParam._m0[11u].z) - _261)) + _261;
    vec4 _366 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _379 = (((((1.0 - _299.y) * 2.0) - _327) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3473 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0));
    float _387 = (((_366.x * cbMtdParam._m0[12u].x) - _346) * _380) + _346;
    float _388 = (_380 * ((_366.y * cbMtdParam._m0[12u].y) - _347)) + _347;
    float _389 = (_380 * ((_366.z * cbMtdParam._m0[12u].z) - _348)) + _348;
    vec4 _407 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _420 = (((((1.0 - _299.z) * 2.0) - _327) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3484 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
    vec4 _448 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _456 = ((((((_407.x * cbMtdParam._m0[13u].x) - _387) * _421) + _387) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _448.x;
    float _459 = ((((_421 * ((_407.y * cbMtdParam._m0[13u].y) - _388)) + _388) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _448.y;
    float _462 = ((((_421 * ((_407.z * cbMtdParam._m0[13u].z) - _389)) + _389) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _448.z;
    vec4 _475 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _477 = _475.x;
    float _478 = _475.y;
    float _479 = _475.z;
    vec4 _491 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _502 = ((_491.x - _477) * _339) + _477;
    float _503 = ((_491.y - _478) * _339) + _478;
    float _504 = ((_491.z - _479) * _339) + _479;
    vec4 _517 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _528 = ((_517.x - _502) * _380) + _502;
    float _529 = ((_517.y - _503) * _380) + _503;
    float _530 = ((_517.z - _504) * _380) + _504;
    vec4 _543 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _556 = ((_543.z - _530) * _421) + _530;
    float _559 = ((((_543.x - _528) * _421) + _528) * 2.0) + (-1.0);
    float _561 = ((((_543.y - _529) * _421) + _529) * 2.0) + (-1.0);
    float _562 = dot(vec2(_559, _561), vec2(_559, _561));
    float _3495 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _567 = sqrt(1.0 - (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))));
    vec4 _580 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _590 = (((_580.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _559;
    float _591 = (((_580.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _561;
    float _594 = fma(_567, _231, fma(_591, _223 * TANGENT.x, (_209 * _202) * _590));
    float _597 = fma(_567, _232, fma(_591, _223 * TANGENT.y, (_209 * _203) * _590));
    float _600 = fma(_567, _233, fma(_591, _223 * TANGENT.z, (_209 * _204) * _590));
    float _604 = inversesqrt(dot(vec3(_594, _597, _600), vec3(_594, _597, _600)));
    float _605 = _604 * _594;
    float _606 = _604 * _597;
    float _607 = _604 * _600;
    float _3506 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _608 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _3528 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _3539 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _627 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _667 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _677 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _667);
    float _678 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _667);
    float _679 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _667);
    float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
    float _684 = _677 * _683;
    float _685 = _678 * _683;
    float _686 = _679 * _683;
    float _692 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _693 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _711 = fma(_607, cbSceneParam._m0[5u].z, fma(_606, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _605));
    float _714 = fma(_607, cbSceneParam._m0[6u].z, fma(_606, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _605));
    float _717 = fma(_607, cbSceneParam._m0[7u].z, fma(_606, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _605));
    uint _730 = uint(roundEven(NORMAL.w)) * 13u;
    uint _732 = (_730 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3550 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
    float _3561 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _692, cbSceneParam._m0[86u].y * _693));
    float _755 = _752.x * TEXCOORD.z;
    float _756 = dot(vec3(_605, _606, _607), vec3(_684, _685, _686));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _605) - _684;
    float _764 = (_759 * _606) - _685;
    float _765 = (_759 * _607) - _686;
    float _769 = abs(dot(vec3(_684, _685, _686), vec3(_605, _606, _607)));
    float _3583 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_608);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1126;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _851 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _855 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _859 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _884 = _816 + _605;
        float _885 = _820 + _606;
        float _886 = _824 + _607;
        float _896 = fma(_886, cbModelParam._m0[26u].z, fma(_885, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _884)) - _851;
        float _897 = fma(_886, cbModelParam._m0[27u].z, fma(_885, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _884)) - _855;
        float _898 = fma(_886, cbModelParam._m0[28u].z, fma(_885, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _884)) - _859;
        float _902 = inversesqrt(dot(vec3(_896, _897, _898), vec3(_896, _897, _898)));
        float _915 = ((_902 * _896) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_851 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_902 * _897) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_855 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _917 = ((_902 * _898) / cbModelParam._m0[34u].z) + ((((((_859 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _934 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        vec4 _941 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_915, _916, _917), 0.0);
        float _954 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _955 = _954 * (_920.x + (-0.5));
        float _956 = _954 * (_920.y + (-0.5));
        float _957 = _954 * (_920.z + (-0.5));
        float _964 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_927.x + (-0.5));
        float _966 = _964 * (_927.y + (-0.5));
        float _967 = _964 * (_927.z + (-0.5));
        float _974 = exp2((_934.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_934.x + (-0.5));
        float _976 = _974 * (_934.y + (-0.5));
        float _977 = _974 * (_934.z + (-0.5));
        float _984 = exp2((_941.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_941.x + (-0.5));
        float _986 = _984 * (_941.y + (-0.5));
        float _987 = _984 * (_941.z + (-0.5));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _991 = _955 * 0.5;
        float _992 = _965 * 0.5;
        float _993 = _975 * 0.5;
        float _994 = dot(vec3(_991, _992, _993), vec3(_991, _992, _993));
        float _999 = (_994 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_994);
        float _1008 = (dot(vec3(_605, _606, _607), vec3(_999 * _991, _999 * _992, _999 * _993)) + 1.0) * 0.5;
        float _3609 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1018 = sqrt(((_992 * _992) + (_991 * _991)) + (_993 * _993)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3620 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1019 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1020 = _1019 * 2.0;
        float _1024 = (1.0 - _1019) / (_1019 + 1.0);
        float _3631 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1034 = ((((1.0 - _1025) * (_1020 + 2.0)) * exp2(log2(isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0))) * (_1020 + 1.0))) + _1025) * _988;
        float _1035 = _956 * 0.5;
        float _1036 = _966 * 0.5;
        float _1037 = _976 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1051 = (dot(vec3(_605, _606, _607), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3642 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1060 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3653 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3664 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * (_1062 + 1.0))) + _1067) * _989;
        float _1077 = _957 * 0.5;
        float _1078 = _967 * 0.5;
        float _1079 = _977 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_605, _606, _607), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_990 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3697 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1104 + 1.0))) + _1109) * _990;
        _1126 = _957;
        _1128 = _956;
        _1129 = _955;
        _1130 = _967;
        _1131 = _966;
        _1132 = _965;
        _1133 = _977;
        _1134 = _976;
        _1135 = _975;
        _1136 = _990;
        _1137 = _989;
        _1138 = _988;
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1141 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
    }
    else
    {
        _1126 = _1127;
        _1128 = _1127;
        _1129 = _1127;
        _1130 = _1127;
        _1131 = _1127;
        _1132 = _1127;
        _1133 = _1127;
        _1134 = _1127;
        _1135 = _1127;
        _1136 = _1127;
        _1137 = _1127;
        _1138 = _1127;
        _1139 = 0.0;
        _1140 = 0.0;
        _1141 = 0.0;
    }
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1167 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1171 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1175 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1198 = _816 + _605;
        float _1199 = _820 + _606;
        float _1200 = _824 + _607;
        float _1210 = fma(_1200, cbModelParam._m0[30u].z, fma(_1199, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1198)) - _1167;
        float _1211 = fma(_1200, cbModelParam._m0[31u].z, fma(_1199, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1198)) - _1171;
        float _1212 = fma(_1200, cbModelParam._m0[32u].z, fma(_1199, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1198)) - _1175;
        float _1216 = inversesqrt(dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212)));
        float _1229 = ((_1216 * _1210) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1167 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1216 * _1211) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1171 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1231 = ((_1216 * _1212) / cbModelParam._m0[35u].z) + ((((((_1175 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1247 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        vec4 _1254 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1229, _1230, _1231), 0.0);
        float _1266 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1267 = _1266 * (_1233.x + (-0.5));
        float _1268 = _1266 * (_1233.y + (-0.5));
        float _1269 = _1266 * (_1233.z + (-0.5));
        float _1276 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1240.x + (-0.5));
        float _1278 = _1276 * (_1240.y + (-0.5));
        float _1279 = _1276 * (_1240.z + (-0.5));
        float _1286 = exp2((_1247.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1247.x + (-0.5));
        float _1288 = _1286 * (_1247.y + (-0.5));
        float _1289 = _1286 * (_1247.z + (-0.5));
        float _1296 = exp2((_1254.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1254.x + (-0.5));
        float _1298 = _1296 * (_1254.y + (-0.5));
        float _1299 = _1296 * (_1254.z + (-0.5));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1303 = _1267 * 0.5;
        float _1304 = _1277 * 0.5;
        float _1305 = _1287 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_605, _606, _607), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3760 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1330 + 1.0))) + _1335) * _1300;
        float _1345 = _1268 * 0.5;
        float _1346 = _1278 * 0.5;
        float _1347 = _1288 * 0.5;
        float _1348 = dot(vec3(_1345, _1346, _1347), vec3(_1345, _1346, _1347));
        float _1353 = (_1348 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1348);
        float _1361 = (dot(vec3(_605, _606, _607), vec3(_1353 * _1345, _1353 * _1346, _1353 * _1347)) + 1.0) * 0.5;
        float _3771 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1370 = sqrt(((_1346 * _1346) + (_1345 * _1345)) + (_1347 * _1347)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3782 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1372 = _1371 * 2.0;
        float _1376 = (1.0 - _1371) / (_1371 + 1.0);
        float _3793 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1386 = ((((1.0 - _1377) * (_1372 + 2.0)) * exp2(log2(isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0))) * (_1372 + 1.0))) + _1377) * _1301;
        float _1387 = _1269 * 0.5;
        float _1388 = _1279 * 0.5;
        float _1389 = _1289 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_605, _606, _607), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3804 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1302 + 9.9999997473787516355514526367188e-06);
        float _3815 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3826 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0))) * (_1414 + 1.0))) + _1419) * _1302;
        _1436 = _1269;
        _1437 = _1268;
        _1438 = _1267;
        _1439 = _1279;
        _1440 = _1278;
        _1441 = _1277;
        _1442 = _1289;
        _1443 = _1288;
        _1444 = _1287;
        _1445 = _1302;
        _1446 = _1301;
        _1447 = _1300;
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0)));
        _1450 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
    }
    else
    {
        _1436 = _1127;
        _1437 = _1127;
        _1438 = _1127;
        _1439 = _1127;
        _1440 = _1127;
        _1441 = _1127;
        _1442 = _1127;
        _1443 = _1127;
        _1444 = _1127;
        _1445 = _1127;
        _1446 = _1127;
        _1447 = _1127;
        _1448 = 0.0;
        _1449 = 0.0;
        _1450 = 0.0;
    }
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1139)) + _1139;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1462 = (cbModelParam._m0[1u].x * (_1450 - _1141)) + _1141;
    float _1483 = fma(_1462, cbSceneParam._m0[89u].z, fma(_1461, cbSceneParam._m0[89u].y, _1460 * cbSceneParam._m0[89u].x));
    float _1486 = fma(_1462, cbSceneParam._m0[90u].z, fma(_1461, cbSceneParam._m0[90u].y, _1460 * cbSceneParam._m0[90u].x));
    float _1489 = fma(_1462, cbSceneParam._m0[91u].z, fma(_1461, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1460));
    float _1504 = _763 * 0.5;
    float _1505 = _764 * 0.5;
    float _1506 = _765 * 0.5;
    float _1507 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1438, _1441, _1444, _1447));
    float _1510 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1513 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1547;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1520 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1126, _1130, _1133, _1136));
        float _1524 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1528 = dot(vec4(_1504, _1505, _1506, 1.0), vec4(_1129, _1132, _1135, _1138));
        float _1535 = dot(vec4(cbModelParam._m0[39u]), vec4(_1504, _1505, _1506, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)), isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1558;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1549 = dot(vec4(cbModelParam._m0[40u]), vec4(_1504, _1505, _1506, 1.0));
        _1558 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1549) ? 0.0 : (isnan(0.0) ? _1549 : max(0.0, _1549))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1558 = 1.0;
    }
    float _1562 = (_1558 * cbModelParam._m0[1u].x) + (_1547 * (1.0 - cbModelParam._m0[1u].x));
    float _1572 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _608);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1572 : min(cbModelParam._m0[25u].z, _1572));
    float _1653;
    float _1655;
    float _1657;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1620 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1624 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1628 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1631 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1634 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1637 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1665;
        if (_1631 > 0.0)
        {
            _1665 = abs((1.0 - _1620) / _1631);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1631 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1620 + 1.0) / _1631);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1665 = frontier_phi_16_14_ladder;
        }
        float _1890;
        if (_1634 > 0.0)
        {
            _1890 = abs((1.0 - _1624) / _1634);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1634 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1624 + 1.0) / _1634);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1890 = frontier_phi_25_21_ladder;
        }
        float _2136;
        if (_1637 > 0.0)
        {
            _2136 = abs((1.0 - _1628) / _1637);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1637 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1628 + 1.0) / _1637);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2136 = frontier_phi_37_32_ladder;
        }
        float _2138 = isnan(_1890) ? _1665 : (isnan(_1665) ? _1890 : min(_1665, _1890));
        float _2139 = isnan(_2136) ? _2138 : (isnan(_2138) ? _2136 : min(_2138, _2136));
        float _2143 = (_2139 * _1631) + _1620;
        float _2144 = (_2139 * _1634) + _1624;
        float _2145 = (_2139 * _1637) + _1628;
        float _2146 = _2139 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2146;
        float _2150 = _2146 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 > _2150) || ((_2144 < _2148) || ((_2143 < _2148) || (_2143 > _2150))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2145, cbModelParam._m0[9u].z, fma(_2144, cbModelParam._m0[9u].y, _2143 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2145, cbModelParam._m0[10u].z, fma(_2144, cbModelParam._m0[10u].y, _2143 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2145, cbModelParam._m0[11u].z, fma(_2144, cbModelParam._m0[11u].y, _2143 * cbModelParam._m0[11u].x))), _1573);
            frontier_phi_15_37_ladder = _2269.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2269.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2269.x * cbModelParam._m0[1u].y;
        }
        _1653 = frontier_phi_15_37_ladder_2;
        _1655 = frontier_phi_15_37_ladder_1;
        _1657 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1641 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1573);
        _1653 = _1641.x * cbModelParam._m0[1u].y;
        _1655 = _1641.y * cbModelParam._m0[1u].y;
        _1657 = _1641.z * cbModelParam._m0[1u].y;
    }
    float _1661 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _608);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1661 : min(cbModelParam._m0[25u].w, _1661));
    float _1755;
    float _1757;
    float _1759;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1719 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1723 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1727 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1730 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1733 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1736 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1895;
        if (_1730 > 0.0)
        {
            _1895 = abs((1.0 - _1719) / _1730);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1719 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1895 = frontier_phi_27_23_ladder;
        }
        float _2163;
        if (_1733 > 0.0)
        {
            _2163 = abs((1.0 - _1723) / _1733);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1733 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1723 + 1.0) / _1733);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2163 = frontier_phi_39_34_ladder;
        }
        float _2368;
        if (_1736 > 0.0)
        {
            _2368 = abs((1.0 - _1727) / _1736);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1736 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1727 + 1.0) / _1736);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2368 = frontier_phi_48_45_ladder;
        }
        float _2370 = isnan(_2163) ? _1895 : (isnan(_1895) ? _2163 : min(_1895, _2163));
        float _2371 = isnan(_2368) ? _2370 : (isnan(_2370) ? _2368 : min(_2370, _2368));
        float _2375 = (_2371 * _1730) + _1719;
        float _2376 = (_2371 * _1733) + _1723;
        float _2377 = (_2371 * _1736) + _1727;
        float _2378 = _2371 * 9.9999997473787516355514526367188e-05;
        float _2379 = (-1.0) - _2378;
        float _2381 = _2378 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2377 > _2381) || ((_2377 < _2379) || ((_2376 > _2381) || ((_2376 < _2379) || ((_2375 < _2379) || (_2375 > _2381))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2575 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2377, cbModelParam._m0[17u].z, fma(_2376, cbModelParam._m0[17u].y, _2375 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2377, cbModelParam._m0[18u].z, fma(_2376, cbModelParam._m0[18u].y, _2375 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2377, cbModelParam._m0[19u].z, fma(_2376, cbModelParam._m0[19u].y, _2375 * cbModelParam._m0[19u].x))), _1662);
            frontier_phi_24_48_ladder = _2575.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2575.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2575.x * cbModelParam._m0[1u].z;
        }
        _1755 = frontier_phi_24_48_ladder_2;
        _1757 = frontier_phi_24_48_ladder_1;
        _1759 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1739 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1662);
        _1755 = _1739.x * cbModelParam._m0[1u].z;
        _1757 = _1739.y * cbModelParam._m0[1u].z;
        _1759 = _1739.z * cbModelParam._m0[1u].z;
    }
    float _1771 = ((((1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_784 * _771)) * _755;
    float _1772 = _1771 * ((cbModelParam._m0[1u].w * (_1755 - _1653)) + _1653);
    float _1773 = _1771 * ((cbModelParam._m0[1u].w * (_1757 - _1655)) + _1655);
    float _1774 = _1771 * ((cbModelParam._m0[1u].w * (_1759 - _1657)) + _1657);
    float _1777 = fma(_1774, cbSceneParam._m0[89u].z, fma(_1773, cbSceneParam._m0[89u].y, _1772 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1774, cbSceneParam._m0[90u].z, fma(_1773, cbSceneParam._m0[90u].y, _1772 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1774, cbSceneParam._m0[91u].z, fma(_1773, cbSceneParam._m0[91u].y, _1772 * cbSceneParam._m0[91u].x));
    vec4 _1791 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_692, _693));
    float _1793 = _1791.w;
    float _1805 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1793);
    float _1806 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1793);
    float _1807 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1793);
    uvec4 _1811 = floatBitsToUint(cbInstanceData._m0[_730 + 5u]);
    uint _1813 = _1811.x * 14u;
    uint _1814 = _1813 + 13u;
    float _1821 = _755 + (-1.0);
    float _1826 = (cbLight._m0[_1814].x * _1821) + 1.0;
    float _1827 = (cbLight._m0[_1814].y * _1821) + 1.0;
    float _1828 = (cbLight._m0[_1814].z * _1821) + 1.0;
    float _1829 = (cbLight._m0[_1814].w * _1821) + 1.0;
    uint _1830 = _1813 + 5u;
    float _1836 = isnan(1.0) ? _1827 : (isnan(_1827) ? 1.0 : min(_1827, 1.0));
    uint _1840 = _1813 + 4u;
    float _1849 = isnan(1.0) ? _1826 : (isnan(_1826) ? 1.0 : min(_1826, 1.0));
    uint _1853 = _1813 | 1u;
    float _1864 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_605, _606, _607));
    float _1867 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_605, _606, _607));
    float _3962 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _3973 = isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0));
    float _1872 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * 0.3183098733425140380859375;
    float _1874 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.3183098733425140380859375;
    float _1881 = ((cbLight._m0[_1830].x * _1836) * _1874) + (((cbLight._m0[_1840].x * _1805) * _1849) * _1872);
    float _1882 = ((_1836 * cbLight._m0[_1830].y) * _1874) + (((cbLight._m0[_1840].y * _1806) * _1849) * _1872);
    float _1883 = ((_1836 * cbLight._m0[_1830].z) * _1874) + (((cbLight._m0[_1840].z * _1807) * _1849) * _1872);
    uvec4 _1887 = floatBitsToUint(cbLight._m0[_1813 + 12u]);
    bool _1889 = _1887.x == 0u;
    float _1900;
    float _1902;
    float _1904;
    if (_1889)
    {
        _1900 = _1881;
        _1902 = _1882;
        _1904 = _1883;
    }
    else
    {
        uint _1908 = _1813 + 6u;
        float _1924 = (dot(vec3(cbLight._m0[_1813 + 2u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _1925 = _1924 * _1924;
        float _3984 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1926 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1927 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _1900 = (((cbLight._m0[_1908].x * 0.3183098733425140380859375) * _1926) * _1927) + _1881;
        _1902 = (((cbLight._m0[_1908].y * 0.3183098733425140380859375) * _1926) * _1927) + _1882;
        _1904 = (((cbLight._m0[_1908].z * 0.3183098733425140380859375) * _1926) * _1927) + _1883;
    }
    bool _1907 = _1887.y == 0u;
    float _1945;
    float _1947;
    float _1949;
    if (_1907)
    {
        _1945 = _1900;
        _1947 = _1902;
        _1949 = _1904;
    }
    else
    {
        uint _2107 = _1813 + 7u;
        float _2123 = (dot(vec3(cbLight._m0[_1813 + 3u].xyz), vec3(_605, _606, _607)) * 0.5) + 0.5;
        float _2124 = _2123 * _2123;
        float _4000 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2125 = isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0));
        float _2126 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _1945 = (((cbLight._m0[_2107].x * 0.3183098733425140380859375) * _2125) * _2126) + _1900;
        _1947 = (((cbLight._m0[_2107].y * 0.3183098733425140380859375) * _2125) * _2126) + _1902;
        _1949 = (((cbLight._m0[_2107].z * 0.3183098733425140380859375) * _2125) * _2126) + _1904;
    }
    uint _1952 = _1813 + 8u;
    float _1965 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1813].w)) * _608) * 0.949999988079071044921875);
    float _1966 = _1965 * _1965;
    float _1967 = cbLight._m0[_1813].x + _684;
    float _1968 = cbLight._m0[_1813].y + _685;
    float _1969 = cbLight._m0[_1813].z + _686;
    float _1973 = inversesqrt(dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969)));
    float _1974 = _1973 * _1967;
    float _1975 = _1973 * _1968;
    float _1976 = _1973 * _1969;
    float _1977 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1813].xyz));
    float _4016 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1980 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1981 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _1982 = dot(vec3(_605, _606, _607), vec3(_1974, _1975, _1976));
    float _4038 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
    float _1985 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _1986 = dot(vec3(cbLight._m0[_1813].xyz), vec3(_1974, _1975, _1976));
    float _4049 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _1990 = _1966 * _1966;
    float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
    float _2005 = (exp2(log2(1.0 - (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2006 = 1.0 - _1966;
    float _2017 = (0.5 / (((_1981 * ((_1980 * _2006) + _1966)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2006) + _1966) * _1980))) * _1980;
    float _4060 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
    float _2019 = (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
    uint _2033 = _1813 + 9u;
    float _2044 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1853].w)) * _608) * 0.949999988079071044921875);
    float _2045 = _2044 * _2044;
    float _2046 = cbLight._m0[_1853].x + _684;
    float _2047 = cbLight._m0[_1853].y + _685;
    float _2048 = cbLight._m0[_1853].z + _686;
    float _2052 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
    float _2053 = _2052 * _2046;
    float _2054 = _2052 * _2047;
    float _2055 = _2052 * _2048;
    float _2056 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_1853].xyz));
    float _4071 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2059 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _2060 = dot(vec3(_605, _606, _607), vec3(_2053, _2054, _2055));
    float _4082 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2063 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _2064 = dot(vec3(cbLight._m0[_1853].xyz), vec3(_2053, _2054, _2055));
    float _4093 = isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0));
    float _2068 = _2045 * _2045;
    float _2072 = ((_2063 * _2063) * (_2068 + (-1.0))) + 1.0;
    float _2081 = (exp2(log2(1.0 - (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2082 = 1.0 - _2045;
    float _2092 = (0.5 / (((_1981 * ((_2059 * _2082) + _2045)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2082) + _2045) * _2059))) * _2059;
    float _4104 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2094 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * (_2068 / ((_2072 * _2072) * 3.141590118408203125));
    float _2104 = (((_2081 * cbLight._m0[_2033].x) * _2094) * _1836) + ((((cbLight._m0[_1952].x * _1805) * _2005) * _2019) * _1849);
    float _2105 = (((_2081 * cbLight._m0[_2033].y) * _2094) * _1836) + ((((cbLight._m0[_1952].y * _1806) * _2005) * _2019) * _1849);
    float _2106 = (((_2081 * cbLight._m0[_2033].z) * _2094) * _1836) + ((((cbLight._m0[_1952].z * _1807) * _2005) * _2019) * _1849);
    float _2168;
    float _2170;
    float _2172;
    if (_1889)
    {
        _2168 = _2104;
        _2170 = _2105;
        _2172 = _2106;
    }
    else
    {
        uint _2174 = _1813 + 2u;
        uint _2178 = _1813 + 10u;
        float _2192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2174].w)) * _608) * 0.949999988079071044921875);
        float _2193 = _2192 * _2192;
        float _2194 = cbLight._m0[_2174].x + _684;
        float _2195 = cbLight._m0[_2174].y + _685;
        float _2196 = cbLight._m0[_2174].z + _686;
        float _2200 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
        float _2201 = _2200 * _2194;
        float _2202 = _2200 * _2195;
        float _2203 = _2200 * _2196;
        float _2204 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2174].xyz));
        float _4115 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2207 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2208 = dot(vec3(_605, _606, _607), vec3(_2201, _2202, _2203));
        float _4126 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2211 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _2212 = dot(vec3(cbLight._m0[_2174].xyz), vec3(_2201, _2202, _2203));
        float _4137 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
        float _2216 = _2193 * _2193;
        float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
        float _2229 = (exp2(log2(1.0 - (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2230 = 1.0 - _2193;
        float _2240 = (0.5 / (((_1981 * ((_2207 * _2230) + _2193)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2230) + _2193) * _2207))) * _2207;
        float _4148 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        float _2242 = (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
        float _2243 = isnan(1.0) ? _1828 : (isnan(_1828) ? 1.0 : min(_1828, 1.0));
        _2168 = (((_2229 * cbLight._m0[_2178].x) * _2242) * _2243) + _2104;
        _2170 = (((_2229 * cbLight._m0[_2178].y) * _2242) * _2243) + _2105;
        _2172 = (((_2229 * cbLight._m0[_2178].z) * _2242) * _2243) + _2106;
    }
    float _2278;
    float _2280;
    float _2282;
    if (_1907)
    {
        _2278 = _2168;
        _2280 = _2170;
        _2282 = _2172;
    }
    else
    {
        uint _2289 = _1813 + 3u;
        uint _2293 = _1813 + 11u;
        float _2307 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _608) * 0.949999988079071044921875);
        float _2308 = _2307 * _2307;
        float _2309 = cbLight._m0[_2289].x + _684;
        float _2310 = cbLight._m0[_2289].y + _685;
        float _2311 = cbLight._m0[_2289].z + _686;
        float _2315 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
        float _2316 = _2315 * _2309;
        float _2317 = _2315 * _2310;
        float _2318 = _2315 * _2311;
        float _2319 = dot(vec3(_605, _606, _607), vec3(cbLight._m0[_2289].xyz));
        float _4164 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        float _2322 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _2323 = dot(vec3(_605, _606, _607), vec3(_2316, _2317, _2318));
        float _4175 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
        float _2326 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _2327 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2316, _2317, _2318));
        float _4186 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
        float _2331 = _2308 * _2308;
        float _2335 = ((_2326 * _2326) * (_2331 + (-1.0))) + 1.0;
        float _2344 = (exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2345 = 1.0 - _2308;
        float _2355 = (0.5 / (((_1981 * ((_2322 * _2345) + _2308)) + 9.9999999392252902907785028219223e-09) + (((_1981 * _2345) + _2308) * _2322))) * _2322;
        float _4197 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
        float _2357 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2331 / ((_2335 * _2335) * 3.141590118408203125));
        float _2358 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
        _2278 = (((_2344 * cbLight._m0[_2293].x) * _2357) * _2358) + _2168;
        _2280 = (((_2344 * cbLight._m0[_2293].y) * _2357) * _2358) + _2170;
        _2282 = (((_2344 * cbLight._m0[_2293].z) * _2357) * _2358) + _2172;
    }
    float _2492;
    float _2494;
    float _2496;
    float _2498;
    float _2500;
    float _2502;
    if (_1811.y == 0u)
    {
        float _2433 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2434 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2433;
        float _2435 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2433;
        float _2436 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2433;
        uvec4 _2448 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2449 = _2448.x;
        uint _2460 = uint((float(_2448.y) * floor(float(uint(cbSceneParam._m0[85u].y * _693) / _2449))) + floor(float(uint(cbSceneParam._m0[85u].x * _692) / _2449)));
        float _2470 = (log2(_2436 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2471 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
        uint _2474 = uint(isnan(14.0) ? _2471 : (isnan(_2471) ? 14.0 : min(_2471, 14.0)));
        uvec4 _2479 = texelFetch(g_lightClusterGridBuffer, int(((_2474 << 2u) + (_2460 << 6u)) >> 2u));
        uint _2480 = _2479.x;
        uint _2481 = _2448.z;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((((1u << ((_2481 >> 4u) & 15u)) + 4294967295u) & _2480) == 0u) || ((_2481 & 240u) == 0u))
        {
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
        }
        else
        {
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            uint _2730 = 0u;
            uint _2739;
            bool _2740;
            for (;;)
            {
                _2739 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2730 << 2u)) >> 2u)).x;
                _2740 = _2739 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2740)
                {
                    frontier_phi_63_pred = _2729;
                    frontier_phi_63_pred_1 = _2728;
                    frontier_phi_63_pred_2 = _2727;
                    frontier_phi_63_pred_3 = _2726;
                    frontier_phi_63_pred_4 = _2725;
                    frontier_phi_63_pred_5 = _2724;
                }
                else
                {
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    uint _2854;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2739;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    for (;;)
                    {
                        uint _2858 = uint(findLSB(_2854)) + (_2730 << 5u);
                        uint _2855 = (_2854 + 4294967295u) & _2854;
                        uint _2860 = _2858 * 48u;
                        vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2880 = (_2858 * 48u) + 4u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2899 = (_2858 * 48u) + 8u;
                        vec3 _2910 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x));
                        float _2914 = _2874.x - _2434;
                        float _2915 = _2874.y - _2435;
                        float _2916 = _2874.z - _2436;
                        float _2917 = dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916));
                        float _2920 = inversesqrt(_2917);
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2924 = dot(vec3(_711, _714, _717), vec3(_2921, _2922, _2923));
                        float _2929 = 1.0 - (_2917 * _2874.w);
                        float _4223 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2931 = sqrt(_2917) * _2893.w;
                        float _2934 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                        float _2935 = _2934 * _2934;
                        float _2938 = ((1.0 - _2935) * _2924) + _2935;
                        float _2941 = _2931 * _2931;
                        float _2945 = ((isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))) * _2930) / ((_2941 * 0.699999988079071044921875) + 1.0);
                        float _2949 = (-0.0) - _2434;
                        float _2950 = (-0.0) - _2435;
                        float _2951 = (-0.0) - _2436;
                        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2966 = exp2(log2(1.0 / ((_2941 * 3.5) + 5.0)) * 0.25);
                        float _2967 = 1.0 - _771;
                        float _2974 = sqrt(1.0 - ((1.0 - (_2967 * _2967)) * (1.0 - (_2966 * _2966))));
                        float _2975 = _2974 * _2974;
                        float _2976 = _2975 * _2975;
                        float _2977 = _2956 + _2921;
                        float _2978 = _2957 + _2922;
                        float _2979 = _2958 + _2923;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2987 = dot(vec3(_711, _714, _717), vec3(_2956, _2957, _2958));
                        float _4239 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                        float _2990 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                        float _2991 = dot(vec3(_711, _714, _717), vec3(_2983 * _2977, _2983 * _2978, _2983 * _2979));
                        float _4250 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                        float _2994 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                        float _2998 = ((_2994 * _2994) * (_2976 + (-1.0))) + 1.0;
                        float _2999 = _2934 * _2975;
                        float _3000 = _2999 * _2999;
                        float _3003 = ((1.0 - _3000) * _2924) + _3000;
                        float _4261 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
                        float _3004 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                        float _3005 = 1.0 - _2975;
                        float _3015 = (0.5 / (((_3004 * ((_2990 * _3005) + _2975)) + 9.9999999392252902907785028219223e-09) + (((_3004 * _3005) + _2975) * _2990))) * _3004;
                        float _4272 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3026 = (((_2976 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_2998 * _2998) * ((_2941 * 2.1991131305694580078125) + 3.141590118408203125))) * _2930;
                        _2783 = (_2945 * _2893.x) + _2851;
                        _2784 = (_2945 * _2893.y) + _2852;
                        _2785 = (_2945 * _2893.z) + _2853;
                        _2780 = (_3026 * _2910.x) + _2848;
                        _2781 = (_3026 * _2910.y) + _2849;
                        _2782 = (_3026 * _2910.z) + _2850;
                        if (_2855 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2855;
                        }
                    }
                    frontier_phi_63_pred = _2785;
                    frontier_phi_63_pred_1 = _2784;
                    frontier_phi_63_pred_2 = _2783;
                    frontier_phi_63_pred_3 = _2782;
                    frontier_phi_63_pred_4 = _2781;
                    frontier_phi_63_pred_5 = _2780;
                }
                _2591 = frontier_phi_63_pred;
                _2589 = frontier_phi_63_pred_1;
                _2587 = frontier_phi_63_pred_2;
                _2585 = frontier_phi_63_pred_3;
                _2583 = frontier_phi_63_pred_4;
                _2581 = frontier_phi_63_pred_5;
                uint _2731 = _2730 + 1u;
                if (_2731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2724 = _2581;
                    _2725 = _2583;
                    _2726 = _2585;
                    _2727 = _2587;
                    _2728 = _2589;
                    _2729 = _2591;
                    _2730 = _2731;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
        }
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.z;
        uint _2597 = (_2595 >> 8u) & 15u;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((4294967295u << _2597) & _2480) == 0u)
        {
            _2692 = _2580;
            _2694 = _2582;
            _2696 = _2584;
            _2698 = _2586;
            _2700 = _2588;
            _2702 = _2590;
        }
        else
        {
            float _2717 = inversesqrt(dot(vec3(_2434, _2435, _2436), vec3(_2434, _2435, _2436)));
            float _2718 = _2717 * _2434;
            float _2719 = _2717 * _2435;
            float _2720 = _2717 * _2436;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2597 < ((_2595 >> 12u) & 15u))
            {
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2831 = _2580;
                float _2832 = _2582;
                float _2833 = _2584;
                float _2834 = _2586;
                float _2835 = _2588;
                float _2836 = _2590;
                uint _2837 = _2597;
                uint _2846;
                bool _2847;
                for (;;)
                {
                    _2846 = texelFetch(g_lightClassification, int((((_2474 << 5u) + (_2460 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                    _2847 = _2846 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2847)
                    {
                        frontier_phi_69_pred = _2836;
                        frontier_phi_69_pred_1 = _2835;
                        frontier_phi_69_pred_2 = _2834;
                        frontier_phi_69_pred_3 = _2833;
                        frontier_phi_69_pred_4 = _2832;
                        frontier_phi_69_pred_5 = _2831;
                    }
                    else
                    {
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3044 = _2831;
                        float _3045 = _2832;
                        float _3046 = _2833;
                        float _3047 = _2834;
                        float _3048 = _2835;
                        float _3049 = _2836;
                        uint _3050 = _2846;
                        uint _3051;
                        vec4 _3076;
                        float _3077;
                        vec4 _3092;
                        vec3 _3104;
                        vec4 _3119;
                        vec4 _3135;
                        float _3182;
                        bool _3183;
                        for (;;)
                        {
                            uint _3061 = ((_2837 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3050));
                            _3051 = (_3050 + 4294967295u) & _3050;
                            uint _3063 = _3061 * 40u;
                            _3076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3063 + 3u)).x));
                            _3077 = _3076.w;
                            uint _3079 = (_3061 * 40u) + 4u;
                            _3092 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 3u)).x));
                            uint _3094 = (_3061 * 40u) + 8u;
                            _3104 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3094)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3094 + 2u)).x));
                            uint _3106 = (_3061 * 40u) + 16u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3122 = (_3061 * 40u) + 20u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3138 = (_3061 * 40u) + 24u;
                            vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3157 = (_3061 * 40u) + 28u;
                            vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3182 = fma(_2436, _3170.z, fma(_2435, _3170.y, _3170.x * _2434)) + _3170.w;
                            _3183 = !((fma(_2436, _3151.z, fma(_2435, _3151.y, _3151.x * _2434)) + _3151.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3183)
                            {
                                float _3210 = _3076.x - _2434;
                                float _3211 = _3076.y - _2435;
                                float _3212 = _3076.z - _2436;
                                float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                                float _3216 = inversesqrt(_3213);
                                float _3217 = _3216 * _3210;
                                float _3218 = _3216 * _3211;
                                float _3219 = _3216 * _3212;
                                float _3223 = 1.0 - (_3213 / (_3077 * _3077));
                                float _4283 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3228 = sqrt(_3213) * _3092.w;
                                float _3230 = 1.39999997615814208984375 / (_3228 + 1.39999997615814208984375);
                                float _3231 = _3230 * _3230;
                                float _3234 = ((1.0 - _3231) * dot(vec3(_3217, _3218, _3219), vec3(_711, _714, _717))) + _3231;
                                float _3237 = _3228 * _3228;
                                float _3241 = (fma(_2436, _3119.z, fma(_2435, _3119.y, _3119.x * _2434)) + _3119.w) / _3182;
                                float _3242 = (fma(_2436, _3135.z, fma(_2435, _3135.y, _3135.x * _2434)) + _3135.w) / _3182;
                                float _3246 = 1.0 - dot(vec2(_3241, _3242), vec2(_3241, _3242));
                                float _4299 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3248 = _3247 * (((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3224) / ((_3237 * 0.699999988079071044921875) + 1.0));
                                float _3260 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                                float _3261 = 1.0 - _771;
                                float _3268 = sqrt(1.0 - ((1.0 - (_3261 * _3261)) * (1.0 - (_3260 * _3260))));
                                float _3269 = _3268 * _3268;
                                float _3270 = _3269 * _3269;
                                float _3271 = _3217 - _2718;
                                float _3272 = _3218 - _2719;
                                float _3273 = _3219 - _2720;
                                float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                                float _3281 = dot(vec3(_711, _714, _717), vec3((-0.0) - _2718, (-0.0) - _2719, (-0.0) - _2720));
                                float _4310 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3284 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3285 = dot(vec3(_711, _714, _717), vec3(_3277 * _3271, _3277 * _3272, _3277 * _3273));
                                float _4321 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3288 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3292 = ((_3288 * _3288) * (_3270 + (-1.0))) + 1.0;
                                float _3293 = _3230 * _3269;
                                float _3294 = _3293 * _3293;
                                float _3300 = ((1.0 - _3294) * dot(vec3(_711, _714, _717), vec3(_3217, _3218, _3219))) + _3294;
                                float _4332 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                                float _3302 = 1.0 - _3269;
                                float _3312 = (0.5 / (((_3301 * ((_3284 * _3302) + _3269)) + 9.9999999392252902907785028219223e-09) + (((_3301 * _3302) + _3269) * _3284))) * _3301;
                                float _4343 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3322 = (_3247 * _3224) * (((_3270 * 3.1415927410125732421875) * (isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0)))) / ((_3292 * _3292) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3248 * _3092.z;
                                frontier_phi_75_pred_1 = _3248 * _3092.y;
                                frontier_phi_75_pred_2 = _3248 * _3092.x;
                                frontier_phi_75_pred_3 = _3322 * _3104.z;
                                frontier_phi_75_pred_4 = _3322 * _3104.y;
                                frontier_phi_75_pred_5 = _3322 * _3104.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3331 = frontier_phi_75_pred;
                            _3330 = frontier_phi_75_pred_1;
                            _3329 = frontier_phi_75_pred_2;
                            _3328 = frontier_phi_75_pred_3;
                            _3327 = frontier_phi_75_pred_4;
                            _3326 = frontier_phi_75_pred_5;
                            _3034 = _3329 + _3047;
                            _3035 = _3330 + _3048;
                            _3036 = _3331 + _3049;
                            _3031 = _3326 + _3044;
                            _3032 = _3327 + _3045;
                            _3033 = _3328 + _3046;
                            if (_3051 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3036;
                                _3050 = _3051;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3036;
                        frontier_phi_69_pred_1 = _3035;
                        frontier_phi_69_pred_2 = _3034;
                        frontier_phi_69_pred_3 = _3033;
                        frontier_phi_69_pred_4 = _3032;
                        frontier_phi_69_pred_5 = _3031;
                    }
                    _2703 = frontier_phi_69_pred;
                    _2701 = frontier_phi_69_pred_1;
                    _2699 = frontier_phi_69_pred_2;
                    _2697 = frontier_phi_69_pred_3;
                    _2695 = frontier_phi_69_pred_4;
                    _2693 = frontier_phi_69_pred_5;
                    uint _2838 = _2837 + 1u;
                    if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2831 = _2693;
                        _2832 = _2695;
                        _2833 = _2697;
                        _2834 = _2699;
                        _2835 = _2701;
                        _2836 = _2703;
                        _2837 = _2838;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2703;
                frontier_phi_57_58_ladder_1 = _2701;
                frontier_phi_57_58_ladder_2 = _2699;
                frontier_phi_57_58_ladder_3 = _2697;
                frontier_phi_57_58_ladder_4 = _2695;
                frontier_phi_57_58_ladder_5 = _2693;
            }
            else
            {
                frontier_phi_57_58_ladder = _2590;
                frontier_phi_57_58_ladder_1 = _2588;
                frontier_phi_57_58_ladder_2 = _2586;
                frontier_phi_57_58_ladder_3 = _2584;
                frontier_phi_57_58_ladder_4 = _2582;
                frontier_phi_57_58_ladder_5 = _2580;
            }
            _2692 = frontier_phi_57_58_ladder_5;
            _2694 = frontier_phi_57_58_ladder_4;
            _2696 = frontier_phi_57_58_ladder_3;
            _2698 = frontier_phi_57_58_ladder_2;
            _2700 = frontier_phi_57_58_ladder_1;
            _2702 = frontier_phi_57_58_ladder;
        }
        float _2707 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2492 = (_2707 * _2698) + _1945;
        _2494 = (_2707 * _2700) + _1947;
        _2496 = (_2707 * _2702) + _1949;
        _2498 = ((_2692 * 0.039999999105930328369140625) * _2707) + _2278;
        _2500 = ((_2694 * 0.039999999105930328369140625) * _2707) + _2280;
        _2502 = ((_2696 * 0.039999999105930328369140625) * _2707) + _2282;
    }
    else
    {
        _2492 = _1945;
        _2494 = _1947;
        _2496 = _1949;
        _2498 = _2278;
        _2500 = _2280;
        _2502 = _2282;
    }
    float _4359 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4370 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4381 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    uint _2522 = _730 + 6u;
    float _2530 = _692 / cbSceneParam._m0[86u].x;
    float _2531 = _693 / cbSceneParam._m0[86u].y;
    vec4 _2545 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2530, _2531, (log2((isnan(cbSceneParam._m0[77u].w) ? _627 : (isnan(_627) ? cbSceneParam._m0[77u].w : min(_627, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2547 = _2545.x;
    float _2548 = _2545.y;
    float _2549 = _2545.z;
    float _2550 = _2545.w;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_627 > cbSceneParam._m0[78u].w)
    {
        float _2605 = isnan(_627) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _627 : min(cbSceneParam._m0[80u].w, _627));
        float _2606 = _2605 / _627;
        float _2617 = _2606 * _677;
        float _2618 = _678 * _2606;
        float _2619 = (-0.0) - _2618;
        float _2620 = _2606 * _679;
        float _2622 = (cbSceneParam._m0[77u].w * _2619) / _2605;
        float _2623 = _2622 + cbSceneParam._m0[79u].w;
        float _2624 = cbSceneParam._m0[79u].w - _2618;
        float _2630 = sqrt(((_2617 * _2617) + (_2618 * _2618)) + (_2620 * _2620));
        float _2633 = (1.0 - (cbSceneParam._m0[77u].w / _2605)) * _2630;
        float _2638 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2640 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2793;
        if (abs((_2619 - _2622) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2793 = ((((_2623 > 0.0) ? exp2(_2638 * _2623) : (2.0 - exp2(_2640 * _2623))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2633;
        }
        else
        {
            float _2753 = 1.0 / cbSceneParam._m0[80u].x;
            float _2754 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : max(_2623, _2624));
            float _2755 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : min(_2623, _2624));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            _2793 = ((abs(_2630 / _2619) * cbSceneParam._m0[80u].y) * ((((_2764 - _2765) * 2.0) - ((exp2(_2638 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0)))) - exp2(_2638 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))))) * _2753)) - ((exp2(_2640 * _2764) - exp2(_2640 * _2765)) * _2753))) + (_2633 * cbSceneParam._m0[80u].z);
        }
        vec4 _2795 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2530, _2531, 1.0), 0.0);
        float _2804 = exp2((_2793 * (-1.44269502162933349609375)) * (1.0 - _2795.w));
        float _2805 = log2(_2804);
        float _2821 = log2(_2550);
        _2642 = (exp2(_2821 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].x)) * _2795.x) / cbSceneParam._m0[78u].x)) + _2547;
        _2644 = (exp2(_2821 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].y)) * _2795.y) / cbSceneParam._m0[78u].y)) + _2548;
        _2646 = (exp2(_2821 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].z)) * _2795.z) / cbSceneParam._m0[78u].z)) + _2549;
        _2648 = _2804 * _2550;
    }
    else
    {
        _2642 = _2547;
        _2644 = _2548;
        _2646 = _2549;
        _2648 = _2550;
    }
    float _2660 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2661 = _2660 == 3.0;
    float _2662 = log2(_2648);
    float _2669 = exp2(_2662 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_2492 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _755))) + ((_2498 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2670 = exp2(_2662 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2494 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _755))) + ((_2500 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2671 = exp2(_2662 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0))) * (_2496 + ((isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0))) * _755))) + ((_2502 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1562)) * cbPerFrame._m0[3u].x));
    float _2680 = (_2660 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2680 * (_2661 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2642)));
    SV_Target.y = _2680 * (_2661 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2644)));
    SV_Target.z = _2680 * (_2661 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2646)));
    SV_Target.w = cbInstanceData._m0[_2522].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2522].w;
}


