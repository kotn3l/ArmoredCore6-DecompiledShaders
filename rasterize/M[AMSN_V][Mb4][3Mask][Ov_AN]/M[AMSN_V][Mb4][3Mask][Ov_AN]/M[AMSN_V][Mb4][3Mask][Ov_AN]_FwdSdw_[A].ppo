#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1174;
float _3822;
float _3823;
float _3824;
float _3825;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _208 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _209 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _210 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _259 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = _259.x * cbMtdParam._m0[10u].x;
    float _266 = _259.y * cbMtdParam._m0[10u].y;
    float _267 = _259.z * cbMtdParam._m0[10u].z;
    vec4 _286 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _305 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _333 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _344 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _305.x) * 2.0) - _333)) + 1.0;
    float _3834 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _345 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _352 = (_345 * ((_286.x * cbMtdParam._m0[11u].x) - _265)) + _265;
    float _353 = (_345 * ((_286.y * cbMtdParam._m0[11u].y) - _266)) + _266;
    float _354 = (_345 * ((_286.z * cbMtdParam._m0[11u].z) - _267)) + _267;
    vec4 _372 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _385 = (((((1.0 - _305.y) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3845 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _386 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
    float _393 = (((_372.x * cbMtdParam._m0[12u].x) - _352) * _386) + _352;
    float _394 = (_386 * ((_372.y * cbMtdParam._m0[12u].y) - _353)) + _353;
    float _395 = (_386 * ((_372.z * cbMtdParam._m0[12u].z) - _354)) + _354;
    vec4 _413 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _426 = (((((1.0 - _305.z) * 2.0) - _333) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3856 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    vec4 _454 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _462 = ((((((_413.x * cbMtdParam._m0[13u].x) - _393) * _427) + _393) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _454.x;
    float _465 = ((((_427 * ((_413.y * cbMtdParam._m0[13u].y) - _394)) + _394) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _454.y;
    float _468 = ((((_427 * ((_413.z * cbMtdParam._m0[13u].z) - _395)) + _395) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _454.z;
    vec4 _481 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _483 = _481.x;
    float _484 = _481.y;
    float _485 = _481.z;
    vec4 _497 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _508 = ((_497.x - _483) * _345) + _483;
    float _509 = ((_497.y - _484) * _345) + _484;
    float _510 = ((_497.z - _485) * _345) + _485;
    vec4 _523 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _534 = ((_523.x - _508) * _386) + _508;
    float _535 = ((_523.y - _509) * _386) + _509;
    float _536 = ((_523.z - _510) * _386) + _510;
    vec4 _549 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _562 = ((_549.z - _536) * _427) + _536;
    float _565 = ((((_549.x - _534) * _427) + _534) * 2.0) + (-1.0);
    float _567 = ((((_549.y - _535) * _427) + _535) * 2.0) + (-1.0);
    float _568 = dot(vec2(_565, _567), vec2(_565, _567));
    float _3867 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _573 = sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))));
    vec4 _586 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _596 = (((_586.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _565;
    float _597 = (((_586.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _567;
    float _600 = fma(_573, _237, fma(_597, _229 * TANGENT.x, (_215 * _208) * _596));
    float _603 = fma(_573, _238, fma(_597, _229 * TANGENT.y, (_215 * _209) * _596));
    float _606 = fma(_573, _239, fma(_597, _229 * TANGENT.z, (_215 * _210) * _596));
    float _610 = inversesqrt(dot(vec3(_600, _603, _606), vec3(_600, _603, _606)));
    float _611 = _610 * _600;
    float _612 = _610 * _603;
    float _613 = _610 * _606;
    float _3878 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _614 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _3900 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _3911 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _633 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _673 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _683 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _673);
    float _684 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _673);
    float _685 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _673);
    float _689 = inversesqrt(dot(vec3(_683, _684, _685), vec3(_683, _684, _685)));
    float _690 = _683 * _689;
    float _691 = _684 * _689;
    float _692 = _685 * _689;
    vec4 _697 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _699 = _697.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _853 = sqrt(((_683 * _683) + (_684 * _684)) + (_685 * _685));
        float _859 = (cbMatDynParam._m0[5u].x * _853) + cbMatDynParam._m0[5u].y;
        float _3922 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _864 = (cbMatDynParam._m0[5u].z * _853) + cbMatDynParam._m0[5u].w;
        float _3933 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) - _860)) + _860) < ((_699 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _710 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _711 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _729 = fma(_613, cbSceneParam._m0[5u].z, fma(_612, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _611));
    float _732 = fma(_613, cbSceneParam._m0[6u].z, fma(_612, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _611));
    float _735 = fma(_613, cbSceneParam._m0[7u].z, fma(_612, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _611));
    uint _748 = uint(roundEven(NORMAL.w)) * 13u;
    uint _749 = _748 + 9u;
    uint _750 = _749 + uint(cbMatDynParam._m0[0u].w);
    float _756 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_750].x;
    float _757 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_750].y;
    float _758 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_750].z;
    float _3944 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _3955 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _3966 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _761 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    vec4 _770 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _710, cbSceneParam._m0[86u].y * _711));
    float _773 = _770.x * TEXCOORD.z;
    float _774 = dot(vec3(_611, _612, _613), vec3(_690, _691, _692));
    float _777 = _774 * 2.0;
    float _781 = (_777 * _611) - _690;
    float _782 = (_777 * _612) - _691;
    float _783 = (_777 * _613) - _692;
    float _787 = abs(dot(vec3(_690, _691, _692), vec3(_611, _612, _613)));
    float _3977 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
    float _789 = sqrt(_614);
    float _802 = exp2((_789 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_789 * 3.0));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1173;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _898 = fma(_842, cbModelParam._m0[26u].z, fma(_838, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _834));
        float _902 = fma(_842, cbModelParam._m0[27u].z, fma(_838, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _834));
        float _906 = fma(_842, cbModelParam._m0[28u].z, fma(_838, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _834));
        float _931 = _834 + _611;
        float _932 = _838 + _612;
        float _933 = _842 + _613;
        float _943 = fma(_933, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _931)) - _898;
        float _944 = fma(_933, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _931)) - _902;
        float _945 = fma(_933, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _931)) - _906;
        float _949 = inversesqrt(dot(vec3(_943, _944, _945), vec3(_943, _944, _945)));
        float _962 = ((_949 * _943) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_898 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _963 = ((_949 * _944) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_902 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_949 * _945) / cbModelParam._m0[34u].z) + ((((((_906 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_962, _963, _964), 0.0);
        float _1001 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = _1001 * (_967.x + (-0.5));
        float _1003 = _1001 * (_967.y + (-0.5));
        float _1004 = _1001 * (_967.z + (-0.5));
        float _1011 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = _1011 * (_974.x + (-0.5));
        float _1013 = _1011 * (_974.y + (-0.5));
        float _1014 = _1011 * (_974.z + (-0.5));
        float _1021 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_981.x + (-0.5));
        float _1023 = _1021 * (_981.y + (-0.5));
        float _1024 = _1021 * (_981.z + (-0.5));
        float _1031 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_988.x + (-0.5));
        float _1033 = _1031 * (_988.y + (-0.5));
        float _1034 = _1031 * (_988.z + (-0.5));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = _1002 * 0.5;
        float _1039 = _1012 * 0.5;
        float _1040 = _1022 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1055 = (dot(vec3(_611, _612, _613), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1065 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _4025 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_1067 + 1.0))) + _1072) * _1035;
        float _1082 = _1003 * 0.5;
        float _1083 = _1013 * 0.5;
        float _1084 = _1023 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_611, _612, _613), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _4058 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1109 + 1.0))) + _1114) * _1036;
        float _1124 = _1004 * 0.5;
        float _1125 = _1014 * 0.5;
        float _1126 = _1024 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_611, _612, _613), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4069 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _4080 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _4091 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * (_1151 + 1.0))) + _1156) * _1037;
        _1173 = _1004;
        _1175 = _1003;
        _1176 = _1002;
        _1177 = _1014;
        _1178 = _1013;
        _1179 = _1012;
        _1180 = _1024;
        _1181 = _1023;
        _1182 = _1022;
        _1183 = _1037;
        _1184 = _1036;
        _1185 = _1035;
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1187 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1188 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
    }
    else
    {
        _1173 = _1174;
        _1175 = _1174;
        _1176 = _1174;
        _1177 = _1174;
        _1178 = _1174;
        _1179 = _1174;
        _1180 = _1174;
        _1181 = _1174;
        _1182 = _1174;
        _1183 = _1174;
        _1184 = _1174;
        _1185 = _1174;
        _1186 = 0.0;
        _1187 = 0.0;
        _1188 = 0.0;
    }
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1217 = fma(_842, cbModelParam._m0[30u].z, fma(_838, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _834));
        float _1221 = fma(_842, cbModelParam._m0[31u].z, fma(_838, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _834));
        float _1225 = fma(_842, cbModelParam._m0[32u].z, fma(_838, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _834));
        float _1248 = _834 + _611;
        float _1249 = _838 + _612;
        float _1250 = _842 + _613;
        float _1260 = fma(_1250, cbModelParam._m0[30u].z, fma(_1249, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1248)) - _1217;
        float _1261 = fma(_1250, cbModelParam._m0[31u].z, fma(_1249, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1248)) - _1221;
        float _1262 = fma(_1250, cbModelParam._m0[32u].z, fma(_1249, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1248)) - _1225;
        float _1266 = inversesqrt(dot(vec3(_1260, _1261, _1262), vec3(_1260, _1261, _1262)));
        float _1279 = ((_1266 * _1260) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1217 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1280 = ((_1266 * _1261) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1221 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1281 = ((_1266 * _1262) / cbModelParam._m0[35u].z) + ((((((_1225 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1297 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        vec4 _1304 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1279, _1280, _1281), 0.0);
        float _1316 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1283.x + (-0.5));
        float _1318 = _1316 * (_1283.y + (-0.5));
        float _1319 = _1316 * (_1283.z + (-0.5));
        float _1326 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1290.x + (-0.5));
        float _1328 = _1326 * (_1290.y + (-0.5));
        float _1329 = _1326 * (_1290.z + (-0.5));
        float _1336 = exp2((_1297.w + (-0.5)) * 20.0) * 2.0;
        float _1337 = _1336 * (_1297.x + (-0.5));
        float _1338 = _1336 * (_1297.y + (-0.5));
        float _1339 = _1336 * (_1297.z + (-0.5));
        float _1346 = exp2((_1304.w + (-0.5)) * 20.0) * 2.0;
        float _1347 = _1346 * (_1304.x + (-0.5));
        float _1348 = _1346 * (_1304.y + (-0.5));
        float _1349 = _1346 * (_1304.z + (-0.5));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1352 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1353 = _1317 * 0.5;
        float _1354 = _1327 * 0.5;
        float _1355 = _1337 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_611, _612, _613), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _4154 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1380 + 1.0))) + _1385) * _1350;
        float _1395 = _1318 * 0.5;
        float _1396 = _1328 * 0.5;
        float _1397 = _1338 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_611, _612, _613), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1351 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _4187 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1422 + 1.0))) + _1427) * _1351;
        float _1437 = _1319 * 0.5;
        float _1438 = _1329 * 0.5;
        float _1439 = _1339 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_611, _612, _613), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _4198 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1352 + 9.9999997473787516355514526367188e-06);
        float _4209 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4220 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_1464 + 1.0))) + _1469) * _1352;
        _1486 = _1319;
        _1487 = _1318;
        _1488 = _1317;
        _1489 = _1329;
        _1490 = _1328;
        _1491 = _1327;
        _1492 = _1339;
        _1493 = _1338;
        _1494 = _1337;
        _1495 = _1352;
        _1496 = _1351;
        _1497 = _1350;
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1499 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
        _1500 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
    }
    else
    {
        _1486 = _1174;
        _1487 = _1174;
        _1488 = _1174;
        _1489 = _1174;
        _1490 = _1174;
        _1491 = _1174;
        _1492 = _1174;
        _1493 = _1174;
        _1494 = _1174;
        _1495 = _1174;
        _1496 = _1174;
        _1497 = _1174;
        _1498 = 0.0;
        _1499 = 0.0;
        _1500 = 0.0;
    }
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1186)) + _1186;
    float _1511 = (cbModelParam._m0[1u].x * (_1499 - _1187)) + _1187;
    float _1512 = (cbModelParam._m0[1u].x * (_1500 - _1188)) + _1188;
    float _1533 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1536 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1539 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1510));
    float _1554 = _781 * 0.5;
    float _1555 = _782 * 0.5;
    float _1556 = _783 * 0.5;
    float _1557 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1488, _1491, _1494, _1497));
    float _1560 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1487, _1490, _1493, _1496));
    float _1563 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1597;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1570 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1173, _1177, _1180, _1183));
        float _1574 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1175, _1178, _1181, _1184));
        float _1578 = dot(vec4(_1554, _1555, _1556, 1.0), vec4(_1176, _1179, _1182, _1185));
        float _1585 = dot(vec4(cbModelParam._m0[39u]), vec4(_1554, _1555, _1556, 1.0));
        _1597 = dot(vec3(isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)), isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1597 = 1.0;
    }
    float _1608;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1599 = dot(vec4(cbModelParam._m0[40u]), vec4(_1554, _1555, _1556, 1.0));
        _1608 = dot(vec3(isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1599) ? 0.0 : (isnan(0.0) ? _1599 : max(0.0, _1599))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1608 = 1.0;
    }
    float _1612 = (_1608 * cbModelParam._m0[1u].x) + (_1597 * (1.0 - cbModelParam._m0[1u].x));
    float _1622 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _614);
    float _1623 = isnan(_1622) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1622 : min(cbModelParam._m0[25u].z, _1622));
    float _1703;
    float _1705;
    float _1707;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1670 = fma(_842, cbModelParam._m0[13u].z, fma(_838, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834)) + cbModelParam._m0[13u].w;
        float _1674 = fma(_842, cbModelParam._m0[14u].z, fma(_838, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834)) + cbModelParam._m0[14u].w;
        float _1678 = fma(_842, cbModelParam._m0[15u].z, fma(_838, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834)) + cbModelParam._m0[15u].w;
        float _1681 = fma(_783, cbModelParam._m0[13u].z, fma(_782, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _781));
        float _1684 = fma(_783, cbModelParam._m0[14u].z, fma(_782, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _781));
        float _1687 = fma(_783, cbModelParam._m0[15u].z, fma(_782, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _781));
        float _1715;
        if (_1681 > 0.0)
        {
            _1715 = abs((1.0 - _1670) / _1681);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1670 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1715 = frontier_phi_19_17_ladder;
        }
        float _1888;
        if (_1684 > 0.0)
        {
            _1888 = abs((1.0 - _1674) / _1684);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1674 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1888 = frontier_phi_28_24_ladder;
        }
        float _2183;
        if (_1687 > 0.0)
        {
            _2183 = abs((1.0 - _1678) / _1687);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1687 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1678 + 1.0) / _1687);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2183 = frontier_phi_40_35_ladder;
        }
        float _2185 = isnan(_1888) ? _1715 : (isnan(_1715) ? _1888 : min(_1715, _1888));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1681) + _1670;
        float _2191 = (_2186 * _1684) + _1674;
        float _2192 = (_2186 * _1687) + _1678;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2193;
        float _2197 = _2193 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 > _2197) || ((_2191 < _2195) || ((_2190 < _2195) || (_2190 > _2197))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2337 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2192, cbModelParam._m0[9u].z, fma(_2191, cbModelParam._m0[9u].y, _2190 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2192, cbModelParam._m0[10u].z, fma(_2191, cbModelParam._m0[10u].y, _2190 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2192, cbModelParam._m0[11u].z, fma(_2191, cbModelParam._m0[11u].y, _2190 * cbModelParam._m0[11u].x))), _1623);
            frontier_phi_18_40_ladder = _2337.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2337.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2337.x * cbModelParam._m0[1u].y;
        }
        _1703 = frontier_phi_18_40_ladder_2;
        _1705 = frontier_phi_18_40_ladder_1;
        _1707 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1691 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_781, _782, _783), _1623);
        _1703 = _1691.x * cbModelParam._m0[1u].y;
        _1705 = _1691.y * cbModelParam._m0[1u].y;
        _1707 = _1691.z * cbModelParam._m0[1u].y;
    }
    float _1711 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _614);
    float _1712 = isnan(_1711) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1711 : min(cbModelParam._m0[25u].w, _1711));
    float _1805;
    float _1807;
    float _1809;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1769 = fma(_842, cbModelParam._m0[21u].z, fma(_838, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834)) + cbModelParam._m0[21u].w;
        float _1773 = fma(_842, cbModelParam._m0[22u].z, fma(_838, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834)) + cbModelParam._m0[22u].w;
        float _1777 = fma(_842, cbModelParam._m0[23u].z, fma(_838, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834)) + cbModelParam._m0[23u].w;
        float _1780 = fma(_783, cbModelParam._m0[21u].z, fma(_782, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _781));
        float _1783 = fma(_783, cbModelParam._m0[22u].z, fma(_782, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _781));
        float _1786 = fma(_783, cbModelParam._m0[23u].z, fma(_782, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _781));
        float _1893;
        if (_1780 > 0.0)
        {
            _1893 = abs((1.0 - _1769) / _1780);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1769 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1893 = frontier_phi_30_26_ladder;
        }
        float _2210;
        if (_1783 > 0.0)
        {
            _2210 = abs((1.0 - _1773) / _1783);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1773 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2210 = frontier_phi_42_37_ladder;
        }
        float _2537;
        if (_1786 > 0.0)
        {
            _2537 = abs((1.0 - _1777) / _1786);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1777 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2537 = frontier_phi_52_49_ladder;
        }
        float _2539 = isnan(_2210) ? _1893 : (isnan(_1893) ? _2210 : min(_1893, _2210));
        float _2540 = isnan(_2537) ? _2539 : (isnan(_2539) ? _2537 : min(_2539, _2537));
        float _2544 = (_2540 * _1780) + _1769;
        float _2545 = (_2540 * _1783) + _1773;
        float _2546 = (_2540 * _1786) + _1777;
        float _2547 = _2540 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2547;
        float _2550 = _2547 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2546 > _2550) || ((_2546 < _2548) || ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 < _2548) || (_2544 > _2550))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2546, cbModelParam._m0[17u].z, fma(_2545, cbModelParam._m0[17u].y, _2544 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2546, cbModelParam._m0[18u].z, fma(_2545, cbModelParam._m0[18u].y, _2544 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2546, cbModelParam._m0[19u].z, fma(_2545, cbModelParam._m0[19u].y, _2544 * cbModelParam._m0[19u].x))), _1712);
            frontier_phi_27_52_ladder = _2664.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2664.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2664.x * cbModelParam._m0[1u].z;
        }
        _1805 = frontier_phi_27_52_ladder_2;
        _1807 = frontier_phi_27_52_ladder_1;
        _1809 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1789 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_781, _782, _783), _1712);
        _1805 = _1789.x * cbModelParam._m0[1u].z;
        _1807 = _1789.y * cbModelParam._m0[1u].z;
        _1809 = _1789.z * cbModelParam._m0[1u].z;
    }
    float _1821 = ((((1.0 - _802) * ((_789 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_802 * _789)) * _773;
    float _1822 = _1821 * ((cbModelParam._m0[1u].w * (_1805 - _1703)) + _1703);
    float _1823 = _1821 * ((cbModelParam._m0[1u].w * (_1807 - _1705)) + _1705);
    float _1824 = _1821 * ((cbModelParam._m0[1u].w * (_1809 - _1707)) + _1707);
    float _1827 = fma(_1824, cbSceneParam._m0[89u].z, fma(_1823, cbSceneParam._m0[89u].y, _1822 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1824, cbSceneParam._m0[90u].z, fma(_1823, cbSceneParam._m0[90u].y, _1822 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1824, cbSceneParam._m0[91u].z, fma(_1823, cbSceneParam._m0[91u].y, _1822 * cbSceneParam._m0[91u].x));
    float _1867 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1871 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1875 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1880 = _1867 / _1879;
    float _1881 = _1871 / _1879;
    float _1882 = _1875 / _1879;
    float _2029;
    float _2030;
    float _2031;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1909 = ((uint(_1882 > cbSceneParam._m0[59u].y) + uint(_1882 > cbSceneParam._m0[59u].x)) + uint(_1882 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1910 = _1909 + 43u;
        uint _1918 = _1909 + 44u;
        uint _1926 = _1909 + 45u;
        uint _1934 = _1909 + 46u;
        float _1945 = fma(_1879, cbSceneParam._m0[_1910].w, fma(_1875, cbSceneParam._m0[_1910].z, fma(_1871, cbSceneParam._m0[_1910].y, _1867 * cbSceneParam._m0[_1910].x)));
        float _1949 = fma(_1879, cbSceneParam._m0[_1918].w, fma(_1875, cbSceneParam._m0[_1918].z, fma(_1871, cbSceneParam._m0[_1918].y, _1867 * cbSceneParam._m0[_1918].x)));
        float _1957 = fma(_1879, cbSceneParam._m0[_1934].w, fma(_1875, cbSceneParam._m0[_1934].z, fma(_1871, cbSceneParam._m0[_1934].y, _1867 * cbSceneParam._m0[_1934].x)));
        float _1962 = cbSceneParam._m0[33u].z * _1957;
        float _1964 = cbSceneParam._m0[33u].w * _1957;
        float _1967 = fma(_1879, cbSceneParam._m0[_1926].w, fma(_1875, cbSceneParam._m0[_1926].z, fma(_1871, cbSceneParam._m0[_1926].y, _1867 * cbSceneParam._m0[_1926].x))) / _1957;
        float _2015 = (cbSceneParam._m0[33u].x - sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882))) * cbSceneParam._m0[33u].y;
        float _4346 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
        float _2022 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1962 + _1945) / _1957, (_1964 + _1949) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1964 + _1945) / _1957, (_1949 - _1962) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 - _1962) / _1957, (_1949 - _1964) / _1957), _1967), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 - _1964) / _1957, (_1962 + _1949) / _1957), _1967), 0.0)).x), vec4(0.25)));
        _2029 = 1.0 - (_2022 * cbSceneParam._m0[34u].x);
        _2030 = 1.0 - (_2022 * cbSceneParam._m0[34u].y);
        _2031 = 1.0 - (_2022 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2029 = 1.0;
        _2030 = 1.0;
        _2031 = 1.0;
    }
    float _2095;
    float _2097;
    float _2099;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2083 = fma(_1879, cbSceneParam._m0[63u].w, fma(_1875, cbSceneParam._m0[63u].z, fma(_1871, cbSceneParam._m0[63u].y, _1867 * cbSceneParam._m0[63u].x)));
        float _2084 = fma(_1879, cbSceneParam._m0[60u].w, fma(_1875, cbSceneParam._m0[60u].z, fma(_1871, cbSceneParam._m0[60u].y, _1867 * cbSceneParam._m0[60u].x))) / _2083;
        float _2085 = fma(_1879, cbSceneParam._m0[61u].w, fma(_1875, cbSceneParam._m0[61u].z, fma(_1871, cbSceneParam._m0[61u].y, _1867 * cbSceneParam._m0[61u].x))) / _2083;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_2084 >= cbSceneParam._m0[64u].x) && (_2085 >= cbSceneParam._m0[64u].y)) && (_2084 <= cbSceneParam._m0[64u].z)) && (_2085 <= cbSceneParam._m0[64u].w))
        {
            float _2223 = fma(_1879, cbSceneParam._m0[62u].w, fma(_1875, cbSceneParam._m0[62u].z, fma(_1871, cbSceneParam._m0[62u].y, _1867 * cbSceneParam._m0[62u].x))) / _2083;
            float _2227 = isnan(cbSceneParam._m0[41u].w) ? _2223 : (isnan(_2223) ? cbSceneParam._m0[41u].w : max(_2223, cbSceneParam._m0[41u].w));
            float _2270 = (cbSceneParam._m0[33u].x - sqrt(((_1881 * _1881) + (_1880 * _1880)) + (_1882 * _1882))) * cbSceneParam._m0[33u].y;
            float _4362 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
            float _2277 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2084, cbSceneParam._m0[33u].w + _2085), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2084, _2085 - cbSceneParam._m0[33u].z), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2084 - cbSceneParam._m0[33u].z, _2085 - cbSceneParam._m0[33u].w), _2227), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2084 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2085), _2227), 0.0)).x), vec4(0.25)));
            float _2281 = 1.0 - (_2277 * cbSceneParam._m0[34u].x);
            float _2282 = 1.0 - (_2277 * cbSceneParam._m0[34u].y);
            float _2283 = 1.0 - (_2277 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2282) ? _2030 : (isnan(_2030) ? _2282 : min(_2030, _2282));
            frontier_phi_39_38_ladder_1 = isnan(_2281) ? _2029 : (isnan(_2029) ? _2281 : min(_2029, _2281));
            frontier_phi_39_38_ladder_2 = isnan(_2283) ? _2031 : (isnan(_2031) ? _2283 : min(_2031, _2283));
        }
        else
        {
            frontier_phi_39_38_ladder = _2030;
            frontier_phi_39_38_ladder_1 = _2029;
            frontier_phi_39_38_ladder_2 = _2031;
        }
        _2095 = frontier_phi_39_38_ladder_1;
        _2097 = frontier_phi_39_38_ladder;
        _2099 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _2095 = _2029;
        _2097 = _2030;
        _2099 = _2031;
    }
    uvec4 _2104 = floatBitsToUint(cbInstanceData._m0[_748 + 5u]);
    uint _2106 = _2104.x * 14u;
    uint _2107 = _2106 + 13u;
    float _2114 = _773 + (-1.0);
    float _2119 = (cbLight._m0[_2107].x * _2114) + 1.0;
    float _2120 = (cbLight._m0[_2107].y * _2114) + 1.0;
    float _2121 = (cbLight._m0[_2107].z * _2114) + 1.0;
    float _2122 = (cbLight._m0[_2107].w * _2114) + 1.0;
    uint _2123 = _2106 + 5u;
    float _2129 = isnan(1.0) ? _2120 : (isnan(_2120) ? 1.0 : min(_2120, 1.0));
    uint _2133 = _2106 + 4u;
    float _2142 = isnan(1.0) ? _2119 : (isnan(_2119) ? 1.0 : min(_2119, 1.0));
    uint _2146 = _2106 | 1u;
    float _2157 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_611, _612, _613));
    float _2160 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_611, _612, _613));
    float _4398 = isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0));
    float _4409 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2165 = (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 0.3183098733425140380859375;
    float _2167 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * 0.3183098733425140380859375;
    float _2174 = ((cbLight._m0[_2123].x * _2129) * _2167) + (((cbLight._m0[_2133].x * _2095) * _2142) * _2165);
    float _2175 = ((_2129 * cbLight._m0[_2123].y) * _2167) + (((cbLight._m0[_2133].y * _2097) * _2142) * _2165);
    float _2176 = ((_2129 * cbLight._m0[_2123].z) * _2167) + (((cbLight._m0[_2133].z * _2099) * _2142) * _2165);
    uvec4 _2180 = floatBitsToUint(cbLight._m0[_2106 + 12u]);
    bool _2182 = _2180.x == 0u;
    float _2284;
    float _2286;
    float _2288;
    if (_2182)
    {
        _2284 = _2174;
        _2286 = _2175;
        _2288 = _2176;
    }
    else
    {
        uint _2292 = _2106 + 6u;
        float _2308 = (dot(vec3(cbLight._m0[_2106 + 2u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2309 = _2308 * _2308;
        float _4420 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2310 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2311 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2284 = (((cbLight._m0[_2292].x * 0.3183098733425140380859375) * _2310) * _2311) + _2174;
        _2286 = (((cbLight._m0[_2292].y * 0.3183098733425140380859375) * _2310) * _2311) + _2175;
        _2288 = (((cbLight._m0[_2292].z * 0.3183098733425140380859375) * _2310) * _2311) + _2176;
    }
    bool _2291 = _2180.y == 0u;
    float _2346;
    float _2348;
    float _2350;
    if (_2291)
    {
        _2346 = _2284;
        _2348 = _2286;
        _2350 = _2288;
    }
    else
    {
        uint _2508 = _2106 + 7u;
        float _2524 = (dot(vec3(cbLight._m0[_2106 + 3u].xyz), vec3(_611, _612, _613)) * 0.5) + 0.5;
        float _2525 = _2524 * _2524;
        float _4436 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2526 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2527 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2346 = (((cbLight._m0[_2508].x * 0.3183098733425140380859375) * _2526) * _2527) + _2284;
        _2348 = (((cbLight._m0[_2508].y * 0.3183098733425140380859375) * _2526) * _2527) + _2286;
        _2350 = (((cbLight._m0[_2508].z * 0.3183098733425140380859375) * _2526) * _2527) + _2288;
    }
    uint _2353 = _2106 + 8u;
    float _2366 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2106].w)) * _614) * 0.949999988079071044921875);
    float _2367 = _2366 * _2366;
    float _2368 = cbLight._m0[_2106].x + _690;
    float _2369 = cbLight._m0[_2106].y + _691;
    float _2370 = cbLight._m0[_2106].z + _692;
    float _2374 = inversesqrt(dot(vec3(_2368, _2369, _2370), vec3(_2368, _2369, _2370)));
    float _2375 = _2374 * _2368;
    float _2376 = _2374 * _2369;
    float _2377 = _2374 * _2370;
    float _2378 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2106].xyz));
    float _4452 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2381 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _4463 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _2382 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _2383 = dot(vec3(_611, _612, _613), vec3(_2375, _2376, _2377));
    float _4474 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2386 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
    float _2387 = dot(vec3(cbLight._m0[_2106].xyz), vec3(_2375, _2376, _2377));
    float _4485 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = _2367 * _2367;
    float _2395 = ((_2386 * _2386) * (_2391 + (-1.0))) + 1.0;
    float _2406 = (exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2407 = 1.0 - _2367;
    float _2418 = (0.5 / (((_2382 * ((_2381 * _2407) + _2367)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2407) + _2367) * _2381))) * _2381;
    float _4496 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2420 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2391 / ((_2395 * _2395) * 3.141590118408203125));
    uint _2434 = _2106 + 9u;
    float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2146].w)) * _614) * 0.949999988079071044921875);
    float _2446 = _2445 * _2445;
    float _2447 = cbLight._m0[_2146].x + _690;
    float _2448 = cbLight._m0[_2146].y + _691;
    float _2449 = cbLight._m0[_2146].z + _692;
    float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
    float _2454 = _2453 * _2447;
    float _2455 = _2453 * _2448;
    float _2456 = _2453 * _2449;
    float _2457 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2146].xyz));
    float _4507 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
    float _2460 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
    float _2461 = dot(vec3(_611, _612, _613), vec3(_2454, _2455, _2456));
    float _4518 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2464 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _2465 = dot(vec3(cbLight._m0[_2146].xyz), vec3(_2454, _2455, _2456));
    float _4529 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2469 = _2446 * _2446;
    float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
    float _2482 = (exp2(log2(1.0 - (isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2483 = 1.0 - _2446;
    float _2493 = (0.5 / (((_2382 * ((_2460 * _2483) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2483) + _2446) * _2460))) * _2460;
    float _4540 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
    float _2495 = (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
    float _2505 = (((_2482 * cbLight._m0[_2434].x) * _2495) * _2129) + ((((cbLight._m0[_2353].x * _2095) * _2406) * _2420) * _2142);
    float _2506 = (((_2482 * cbLight._m0[_2434].y) * _2495) * _2129) + ((((cbLight._m0[_2353].y * _2097) * _2406) * _2420) * _2142);
    float _2507 = (((_2482 * cbLight._m0[_2434].z) * _2495) * _2129) + ((((cbLight._m0[_2353].z * _2099) * _2406) * _2420) * _2142);
    float _2563;
    float _2565;
    float _2567;
    if (_2182)
    {
        _2563 = _2505;
        _2565 = _2506;
        _2567 = _2507;
    }
    else
    {
        uint _2569 = _2106 + 2u;
        uint _2573 = _2106 + 10u;
        float _2587 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2569].w)) * _614) * 0.949999988079071044921875);
        float _2588 = _2587 * _2587;
        float _2589 = cbLight._m0[_2569].x + _690;
        float _2590 = cbLight._m0[_2569].y + _691;
        float _2591 = cbLight._m0[_2569].z + _692;
        float _2595 = inversesqrt(dot(vec3(_2589, _2590, _2591), vec3(_2589, _2590, _2591)));
        float _2596 = _2595 * _2589;
        float _2597 = _2595 * _2590;
        float _2598 = _2595 * _2591;
        float _2599 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2569].xyz));
        float _4551 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
        float _2602 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _2603 = dot(vec3(_611, _612, _613), vec3(_2596, _2597, _2598));
        float _4562 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2607 = dot(vec3(cbLight._m0[_2569].xyz), vec3(_2596, _2597, _2598));
        float _4573 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _2588 * _2588;
        float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
        float _2624 = (exp2(log2(1.0 - (isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2625 = 1.0 - _2588;
        float _2635 = (0.5 / (((_2382 * ((_2602 * _2625) + _2588)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2625) + _2588) * _2602))) * _2602;
        float _4584 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2637 = (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
        float _2638 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
        _2563 = (((_2624 * cbLight._m0[_2573].x) * _2637) * _2638) + _2505;
        _2565 = (((_2624 * cbLight._m0[_2573].y) * _2637) * _2638) + _2506;
        _2567 = (((_2624 * cbLight._m0[_2573].z) * _2637) * _2638) + _2507;
    }
    float _2669;
    float _2671;
    float _2673;
    if (_2291)
    {
        _2669 = _2563;
        _2671 = _2565;
        _2673 = _2567;
    }
    else
    {
        uint _2680 = _2106 + 3u;
        uint _2684 = _2106 + 11u;
        float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2680].w)) * _614) * 0.949999988079071044921875);
        float _2699 = _2698 * _2698;
        float _2700 = cbLight._m0[_2680].x + _690;
        float _2701 = cbLight._m0[_2680].y + _691;
        float _2702 = cbLight._m0[_2680].z + _692;
        float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
        float _2707 = _2706 * _2700;
        float _2708 = _2706 * _2701;
        float _2709 = _2706 * _2702;
        float _2710 = dot(vec3(_611, _612, _613), vec3(cbLight._m0[_2680].xyz));
        float _4600 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
        float _2713 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2714 = dot(vec3(_611, _612, _613), vec3(_2707, _2708, _2709));
        float _4611 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
        float _2717 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
        float _2718 = dot(vec3(cbLight._m0[_2680].xyz), vec3(_2707, _2708, _2709));
        float _4622 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
        float _2722 = _2699 * _2699;
        float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
        float _2735 = (exp2(log2(1.0 - (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2736 = 1.0 - _2699;
        float _2746 = (0.5 / (((_2382 * ((_2713 * _2736) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2382 * _2736) + _2699) * _2713))) * _2713;
        float _4633 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2748 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
        float _2749 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
        _2669 = (((_2735 * cbLight._m0[_2684].x) * _2748) * _2749) + _2563;
        _2671 = (((_2735 * cbLight._m0[_2684].y) * _2748) * _2749) + _2565;
        _2673 = (((_2735 * cbLight._m0[_2684].z) * _2748) * _2749) + _2567;
    }
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    float _2824;
    if (_2104.y == 0u)
    {
        uvec4 _2770 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2771 = _2770.x;
        uint _2782 = uint((float(_2770.y) * floor(float(uint(cbSceneParam._m0[85u].y * _711) / _2771))) + floor(float(uint(cbSceneParam._m0[85u].x * _710) / _2771)));
        float _2792 = (log2(_1882 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2793 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        uint _2796 = uint(isnan(14.0) ? _2793 : (isnan(_2793) ? 14.0 : min(_2793, 14.0)));
        uvec4 _2801 = texelFetch(g_lightClusterGridBuffer, int(((_2796 << 2u) + (_2782 << 6u)) >> 2u));
        uint _2802 = _2801.x;
        uint _2803 = _2770.z;
        float _2881;
        float _2883;
        float _2885;
        float _2887;
        float _2889;
        float _2891;
        if (((((1u << ((_2803 >> 4u) & 15u)) + 4294967295u) & _2802) == 0u) || ((_2803 & 240u) == 0u))
        {
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
            _2887 = 0.0;
            _2889 = 0.0;
            _2891 = 0.0;
        }
        else
        {
            float _2882;
            float _2884;
            float _2886;
            float _2888;
            float _2890;
            float _2892;
            float _3033 = 0.0;
            float _3034 = 0.0;
            float _3035 = 0.0;
            float _3036 = 0.0;
            float _3037 = 0.0;
            float _3038 = 0.0;
            uint _3039 = 0u;
            uint _3048;
            bool _3049;
            for (;;)
            {
                _3048 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3039 << 2u)) >> 2u)).x;
                _3049 = _3048 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_3049)
                {
                    frontier_phi_73_pred = _3038;
                    frontier_phi_73_pred_1 = _3037;
                    frontier_phi_73_pred_2 = _3036;
                    frontier_phi_73_pred_3 = _3035;
                    frontier_phi_73_pred_4 = _3034;
                    frontier_phi_73_pred_5 = _3033;
                }
                else
                {
                    float _3178;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    uint _3184;
                    _3178 = _3033;
                    _3179 = _3034;
                    _3180 = _3035;
                    _3181 = _3036;
                    _3182 = _3037;
                    _3183 = _3038;
                    _3184 = _3048;
                    float _3105;
                    float _3106;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    for (;;)
                    {
                        uint _3188 = uint(findLSB(_3184)) + (_3039 << 5u);
                        uint _3185 = (_3184 + 4294967295u) & _3184;
                        uint _3190 = _3188 * 48u;
                        vec4 _3204 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3190)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3190 + 3u)).x));
                        uint _3210 = (_3188 * 48u) + 4u;
                        vec4 _3223 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3210)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3210 + 3u)).x));
                        uint _3229 = (_3188 * 48u) + 8u;
                        vec3 _3240 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3229)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3229 + 2u)).x));
                        float _3244 = _3204.x - _1880;
                        float _3245 = _3204.y - _1881;
                        float _3246 = _3204.z - _1882;
                        float _3247 = dot(vec3(_3244, _3245, _3246), vec3(_3244, _3245, _3246));
                        float _3250 = inversesqrt(_3247);
                        float _3251 = _3250 * _3244;
                        float _3252 = _3250 * _3245;
                        float _3253 = _3250 * _3246;
                        float _3254 = dot(vec3(_729, _732, _735), vec3(_3251, _3252, _3253));
                        float _3259 = 1.0 - (_3247 * _3204.w);
                        float _4659 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                        float _3260 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3261 = sqrt(_3247) * _3223.w;
                        float _3264 = 1.39999997615814208984375 / (_3261 + 1.39999997615814208984375);
                        float _3265 = _3264 * _3264;
                        float _3268 = ((1.0 - _3265) * _3254) + _3265;
                        float _3271 = _3261 * _3261;
                        float _3275 = ((isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0))) * _3260) / ((_3271 * 0.699999988079071044921875) + 1.0);
                        float _3279 = (-0.0) - _1880;
                        float _3280 = (-0.0) - _1881;
                        float _3281 = (-0.0) - _1882;
                        float _3285 = inversesqrt(dot(vec3(_3279, _3280, _3281), vec3(_3279, _3280, _3281)));
                        float _3286 = _3285 * _3279;
                        float _3287 = _3285 * _3280;
                        float _3288 = _3285 * _3281;
                        float _3295 = exp2(log2(1.0 / ((_3271 * 3.5) + 5.0)) * 0.25);
                        float _3296 = 1.0 - _789;
                        float _3303 = sqrt(1.0 - ((1.0 - (_3296 * _3296)) * (1.0 - (_3295 * _3295))));
                        float _3304 = _3303 * _3303;
                        float _3305 = _3304 * _3304;
                        float _3306 = _3286 + _3251;
                        float _3307 = _3287 + _3252;
                        float _3308 = _3288 + _3253;
                        float _3312 = inversesqrt(dot(vec3(_3306, _3307, _3308), vec3(_3306, _3307, _3308)));
                        float _3316 = dot(vec3(_729, _732, _735), vec3(_3286, _3287, _3288));
                        float _4675 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3320 = dot(vec3(_729, _732, _735), vec3(_3312 * _3306, _3312 * _3307, _3312 * _3308));
                        float _4686 = isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0));
                        float _3323 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
                        float _3327 = ((_3323 * _3323) * (_3305 + (-1.0))) + 1.0;
                        float _3328 = _3264 * _3304;
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3254) + _3329;
                        float _4697 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3333 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                        float _3334 = 1.0 - _3304;
                        float _3344 = (0.5 / (((_3333 * ((_3319 * _3334) + _3304)) + 9.9999999392252902907785028219223e-09) + (((_3333 * _3334) + _3304) * _3319))) * _3333;
                        float _4708 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3355 = (((_3305 * 3.1415927410125732421875) * (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) / ((_3327 * _3327) * ((_3271 * 2.1991131305694580078125) + 3.141590118408203125))) * _3260;
                        _3108 = (_3275 * _3223.x) + _3181;
                        _3109 = (_3275 * _3223.y) + _3182;
                        _3110 = (_3275 * _3223.z) + _3183;
                        _3105 = (_3355 * _3240.x) + _3178;
                        _3106 = (_3355 * _3240.y) + _3179;
                        _3107 = (_3355 * _3240.z) + _3180;
                        if (_3185 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3178 = _3105;
                            _3179 = _3106;
                            _3180 = _3107;
                            _3181 = _3108;
                            _3182 = _3109;
                            _3183 = _3110;
                            _3184 = _3185;
                        }
                    }
                    frontier_phi_73_pred = _3110;
                    frontier_phi_73_pred_1 = _3109;
                    frontier_phi_73_pred_2 = _3108;
                    frontier_phi_73_pred_3 = _3107;
                    frontier_phi_73_pred_4 = _3106;
                    frontier_phi_73_pred_5 = _3105;
                }
                _2892 = frontier_phi_73_pred;
                _2890 = frontier_phi_73_pred_1;
                _2888 = frontier_phi_73_pred_2;
                _2886 = frontier_phi_73_pred_3;
                _2884 = frontier_phi_73_pred_4;
                _2882 = frontier_phi_73_pred_5;
                uint _3040 = _3039 + 1u;
                if (_3040 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3033 = _2882;
                    _3034 = _2884;
                    _3035 = _2886;
                    _3036 = _2888;
                    _3037 = _2890;
                    _3038 = _2892;
                    _3039 = _3040;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
            _2887 = _2888;
            _2889 = _2890;
            _2891 = _2892;
        }
        uvec4 _2895 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2896 = _2895.z;
        uint _2898 = (_2896 >> 8u) & 15u;
        float _3001;
        float _3003;
        float _3005;
        float _3007;
        float _3009;
        float _3011;
        if (((4294967295u << _2898) & _2802) == 0u)
        {
            _3001 = _2881;
            _3003 = _2883;
            _3005 = _2885;
            _3007 = _2887;
            _3009 = _2889;
            _3011 = _2891;
        }
        else
        {
            float _3026 = inversesqrt(dot(vec3(_1880, _1881, _1882), vec3(_1880, _1881, _1882)));
            float _3027 = _3026 * _1880;
            float _3028 = _3026 * _1881;
            float _3029 = _3026 * _1882;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2898 < ((_2896 >> 12u) & 15u))
            {
                float _3002;
                float _3004;
                float _3006;
                float _3008;
                float _3010;
                float _3012;
                float _3161 = _2881;
                float _3162 = _2883;
                float _3163 = _2885;
                float _3164 = _2887;
                float _3165 = _2889;
                float _3166 = _2891;
                uint _3167 = _2898;
                uint _3176;
                bool _3177;
                for (;;)
                {
                    _3176 = texelFetch(g_lightClassification, int((((_2796 << 5u) + (_2782 << 9u)) + (_3167 << 2u)) >> 2u)).x;
                    _3177 = _3176 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3177)
                    {
                        frontier_phi_84_pred = _3165;
                        frontier_phi_84_pred_1 = _3164;
                        frontier_phi_84_pred_2 = _3163;
                        frontier_phi_84_pred_3 = _3162;
                        frontier_phi_84_pred_4 = _3161;
                        frontier_phi_84_pred_5 = _3166;
                    }
                    else
                    {
                        float _3369;
                        float _3370;
                        float _3371;
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3382 = _3161;
                        float _3383 = _3162;
                        float _3384 = _3163;
                        float _3385 = _3164;
                        float _3386 = _3165;
                        float _3387 = _3166;
                        uint _3388 = _3176;
                        uint _3389;
                        vec4 _3414;
                        float _3415;
                        vec4 _3430;
                        vec3 _3442;
                        vec4 _3457;
                        vec4 _3473;
                        float _3520;
                        bool _3521;
                        for (;;)
                        {
                            uint _3399 = ((_3167 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3388));
                            _3389 = (_3388 + 4294967295u) & _3388;
                            uint _3401 = _3399 * 40u;
                            _3414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3401 + 3u)).x));
                            _3415 = _3414.w;
                            uint _3417 = (_3399 * 40u) + 4u;
                            _3430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3417 + 3u)).x));
                            uint _3432 = (_3399 * 40u) + 8u;
                            _3442 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x));
                            uint _3444 = (_3399 * 40u) + 16u;
                            _3457 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3444)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3444 + 3u)).x));
                            uint _3460 = (_3399 * 40u) + 20u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3476 = (_3399 * 40u) + 24u;
                            vec4 _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            uint _3495 = (_3399 * 40u) + 28u;
                            vec4 _3508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3495 + 3u)).x));
                            _3520 = fma(_1882, _3508.z, fma(_1881, _3508.y, _3508.x * _1880)) + _3508.w;
                            _3521 = !((fma(_1882, _3489.z, fma(_1881, _3489.y, _3489.x * _1880)) + _3489.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3521)
                            {
                                float _3548 = _3414.x - _1880;
                                float _3549 = _3414.y - _1881;
                                float _3550 = _3414.z - _1882;
                                float _3551 = dot(vec3(_3548, _3549, _3550), vec3(_3548, _3549, _3550));
                                float _3554 = inversesqrt(_3551);
                                float _3555 = _3554 * _3548;
                                float _3556 = _3554 * _3549;
                                float _3557 = _3554 * _3550;
                                float _3561 = 1.0 - (_3551 / (_3415 * _3415));
                                float _4719 = isnan(0.0) ? _3561 : (isnan(_3561) ? 0.0 : max(_3561, 0.0));
                                float _3562 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3566 = sqrt(_3551) * _3430.w;
                                float _3568 = 1.39999997615814208984375 / (_3566 + 1.39999997615814208984375);
                                float _3569 = _3568 * _3568;
                                float _3572 = ((1.0 - _3569) * dot(vec3(_3555, _3556, _3557), vec3(_729, _732, _735))) + _3569;
                                float _3575 = _3566 * _3566;
                                float _3579 = (fma(_1882, _3457.z, fma(_1881, _3457.y, _3457.x * _1880)) + _3457.w) / _3520;
                                float _3580 = (fma(_1882, _3473.z, fma(_1881, _3473.y, _3473.x * _1880)) + _3473.w) / _3520;
                                float _3584 = 1.0 - dot(vec2(_3579, _3580), vec2(_3579, _3580));
                                float _4735 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3585 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3586 = _3585 * (((isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0))) * _3562) / ((_3575 * 0.699999988079071044921875) + 1.0));
                                float _3598 = exp2(log2(1.0 / ((_3575 * 3.5) + 5.0)) * 0.25);
                                float _3599 = 1.0 - _789;
                                float _3606 = sqrt(1.0 - ((1.0 - (_3599 * _3599)) * (1.0 - (_3598 * _3598))));
                                float _3607 = _3606 * _3606;
                                float _3608 = _3607 * _3607;
                                float _3609 = _3555 - _3027;
                                float _3610 = _3556 - _3028;
                                float _3611 = _3557 - _3029;
                                float _3615 = inversesqrt(dot(vec3(_3609, _3610, _3611), vec3(_3609, _3610, _3611)));
                                float _3619 = dot(vec3(_729, _732, _735), vec3((-0.0) - _3027, (-0.0) - _3028, (-0.0) - _3029));
                                float _4746 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3622 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3623 = dot(vec3(_729, _732, _735), vec3(_3615 * _3609, _3615 * _3610, _3615 * _3611));
                                float _4757 = isnan(0.0) ? _3623 : (isnan(_3623) ? 0.0 : max(_3623, 0.0));
                                float _3626 = isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0));
                                float _3630 = ((_3626 * _3626) * (_3608 + (-1.0))) + 1.0;
                                float _3631 = _3568 * _3607;
                                float _3632 = _3631 * _3631;
                                float _3638 = ((1.0 - _3632) * dot(vec3(_729, _732, _735), vec3(_3555, _3556, _3557))) + _3632;
                                float _4768 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0));
                                float _3640 = 1.0 - _3607;
                                float _3650 = (0.5 / (((_3639 * ((_3622 * _3640) + _3607)) + 9.9999999392252902907785028219223e-09) + (((_3639 * _3640) + _3607) * _3622))) * _3639;
                                float _4779 = isnan(0.0) ? _3650 : (isnan(_3650) ? 0.0 : max(_3650, 0.0));
                                float _3660 = (_3585 * _3562) * (((_3608 * 3.1415927410125732421875) * (isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0)))) / ((_3630 * _3630) * ((_3575 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3586 * _3430.y;
                                frontier_phi_90_pred_1 = _3586 * _3430.x;
                                frontier_phi_90_pred_2 = _3660 * _3442.z;
                                frontier_phi_90_pred_3 = _3660 * _3442.y;
                                frontier_phi_90_pred_4 = _3660 * _3442.x;
                                frontier_phi_90_pred_5 = _3586 * _3430.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3668 = frontier_phi_90_pred;
                            _3667 = frontier_phi_90_pred_1;
                            _3666 = frontier_phi_90_pred_2;
                            _3665 = frontier_phi_90_pred_3;
                            _3664 = frontier_phi_90_pred_4;
                            _3669 = frontier_phi_90_pred_5;
                            _3372 = _3667 + _3385;
                            _3373 = _3668 + _3386;
                            _3374 = _3669 + _3387;
                            _3369 = _3664 + _3382;
                            _3370 = _3665 + _3383;
                            _3371 = _3666 + _3384;
                            if (_3389 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3371;
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3389;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3373;
                        frontier_phi_84_pred_1 = _3372;
                        frontier_phi_84_pred_2 = _3371;
                        frontier_phi_84_pred_3 = _3370;
                        frontier_phi_84_pred_4 = _3369;
                        frontier_phi_84_pred_5 = _3374;
                    }
                    _3010 = frontier_phi_84_pred;
                    _3008 = frontier_phi_84_pred_1;
                    _3006 = frontier_phi_84_pred_2;
                    _3004 = frontier_phi_84_pred_3;
                    _3002 = frontier_phi_84_pred_4;
                    _3012 = frontier_phi_84_pred_5;
                    uint _3168 = _3167 + 1u;
                    if (_3168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3161 = _3002;
                        _3162 = _3004;
                        _3163 = _3006;
                        _3164 = _3008;
                        _3165 = _3010;
                        _3166 = _3012;
                        _3167 = _3168;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _3012;
                frontier_phi_65_66_ladder_1 = _3008;
                frontier_phi_65_66_ladder_2 = _3010;
                frontier_phi_65_66_ladder_3 = _3004;
                frontier_phi_65_66_ladder_4 = _3002;
                frontier_phi_65_66_ladder_5 = _3006;
            }
            else
            {
                frontier_phi_65_66_ladder = _2891;
                frontier_phi_65_66_ladder_1 = _2887;
                frontier_phi_65_66_ladder_2 = _2889;
                frontier_phi_65_66_ladder_3 = _2883;
                frontier_phi_65_66_ladder_4 = _2881;
                frontier_phi_65_66_ladder_5 = _2885;
            }
            _3001 = frontier_phi_65_66_ladder_4;
            _3003 = frontier_phi_65_66_ladder_3;
            _3005 = frontier_phi_65_66_ladder_5;
            _3007 = frontier_phi_65_66_ladder_1;
            _3009 = frontier_phi_65_66_ladder_2;
            _3011 = frontier_phi_65_66_ladder;
        }
        float _3016 = isnan(1.0) ? _773 : (isnan(_773) ? 1.0 : min(_773, 1.0));
        _2814 = (_3016 * _3007) + _2346;
        _2816 = (_3016 * _3009) + _2348;
        _2818 = (_3016 * _3011) + _2350;
        _2820 = ((_3001 * 0.039999999105930328369140625) * _3016) + _2669;
        _2822 = ((_3003 * 0.039999999105930328369140625) * _3016) + _2671;
        _2824 = ((_3005 * 0.039999999105930328369140625) * _3016) + _2673;
    }
    else
    {
        _2814 = _2346;
        _2816 = _2348;
        _2818 = _2350;
        _2820 = _2669;
        _2822 = _2671;
        _2824 = _2673;
    }
    float _4795 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4806 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4817 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _2841 = ((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2814 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _773))) + ((_2820 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    float _2842 = ((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * (_2816 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _773))) + ((_2822 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    float _2843 = ((isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2818 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _773))) + ((_2824 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1612)) * cbPerFrame._m0[3u].x);
    uint _2844 = _748 + 6u;
    float _2852 = _710 / cbSceneParam._m0[86u].x;
    float _2853 = _711 / cbSceneParam._m0[86u].y;
    vec4 _2867 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, (log2((isnan(cbSceneParam._m0[77u].w) ? _633 : (isnan(_633) ? cbSceneParam._m0[77u].w : min(_633, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2869 = _2867.x;
    float _2870 = _2867.y;
    float _2871 = _2867.z;
    float _2872 = _2867.w;
    float _2943;
    float _2945;
    float _2947;
    float _2949;
    if (_633 > cbSceneParam._m0[78u].w)
    {
        float _2906 = isnan(_633) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _633 : min(cbSceneParam._m0[80u].w, _633));
        float _2907 = _2906 / _633;
        float _2918 = _2907 * _683;
        float _2919 = _684 * _2907;
        float _2920 = (-0.0) - _2919;
        float _2921 = _2907 * _685;
        float _2923 = (cbSceneParam._m0[77u].w * _2920) / _2906;
        float _2924 = _2923 + cbSceneParam._m0[79u].w;
        float _2925 = cbSceneParam._m0[79u].w - _2919;
        float _2931 = sqrt(((_2918 * _2918) + (_2919 * _2919)) + (_2921 * _2921));
        float _2934 = (1.0 - (cbSceneParam._m0[77u].w / _2906)) * _2931;
        float _2939 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2941 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3118;
        if (abs((_2920 - _2923) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3118 = ((((_2924 > 0.0) ? exp2(_2939 * _2924) : (2.0 - exp2(_2941 * _2924))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2934;
        }
        else
        {
            float _3062 = 1.0 / cbSceneParam._m0[80u].x;
            float _3063 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : max(_2924, _2925));
            float _3064 = isnan(_2925) ? _2924 : (isnan(_2924) ? _2925 : min(_2924, _2925));
            float _3073 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : min(_3063, 0.0));
            float _3074 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : min(_3064, 0.0));
            _3118 = ((abs(_2931 / _2920) * cbSceneParam._m0[80u].y) * ((((_3073 - _3074) * 2.0) - ((exp2(_2939 * (isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0)))) - exp2(_2939 * (isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))))) * _3062)) - ((exp2(_2941 * _3073) - exp2(_2941 * _3074)) * _3062))) + (_2934 * cbSceneParam._m0[80u].z);
        }
        vec4 _3120 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2852, _2853, 1.0), 0.0);
        float _3129 = exp2((_3118 * (-1.44269502162933349609375)) * (1.0 - _3120.w));
        float _3130 = log2(_3129);
        float _3146 = log2(_2872);
        _2943 = (exp2(_3146 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].x)) * _3120.x) / cbSceneParam._m0[78u].x)) + _2869;
        _2945 = (exp2(_3146 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].y)) * _3120.y) / cbSceneParam._m0[78u].y)) + _2870;
        _2947 = (exp2(_3146 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3130 * cbSceneParam._m0[78u].z)) * _3120.z) / cbSceneParam._m0[78u].z)) + _2871;
        _2949 = _3129 * _2872;
    }
    else
    {
        _2943 = _2869;
        _2945 = _2870;
        _2947 = _2871;
        _2949 = _2872;
    }
    bool _3156;
    vec4 _2959;
    vec4 _2981;
    float _2983;
    float _2987;
    float _2988;
    float _2989;
    float _2990;
    bool _3000;
    for (;;)
    {
        _2959 = cbMatDynParam._m0[0u];
        float _2961 = roundEven(_2959.y);
        bool _2962 = _2961 == 3.0;
        float _2963 = log2(_2949);
        float _2970 = exp2(_2963 * cbSceneParam._m0[78u].x) * _2841;
        float _2971 = exp2(_2963 * cbSceneParam._m0[78u].y) * _2842;
        float _2972 = exp2(_2963 * cbSceneParam._m0[78u].z) * _2843;
        float _2979 = _699 + (-0.5);
        _2981 = cbMtdParam._m0[1u];
        _2983 = _2981.y * _2979;
        float _2986 = (_2961 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2987 = _2986 * (_2962 ? _2970 : (_2970 + (cbSceneParam._m0[72u].w * _2943)));
        _2988 = _2986 * (_2962 ? _2971 : (_2971 + (cbSceneParam._m0[72u].w * _2945)));
        _2989 = _2986 * (_2962 ? _2972 : (_2972 + (cbSceneParam._m0[72u].w * _2947)));
        _2990 = _2979 * 0.999000012874603271484375;
        _3000 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3000)
        {
            if ((cbInstanceData._m0[_748 + 7u].x + _2990) < 0.5)
            {
                _3156 = true;
                break;
            }
        }
        uint _3097 = _749 + uint(_2959.w);
        if ((cbInstanceData._m0[_3097].w < 1.0) && ((cbInstanceData._m0[_3097].w + _2990) < 0.5))
        {
            _3156 = true;
            break;
        }
        if ((_2983 + 1.0) < _2981.x)
        {
            _3156 = true;
            break;
        }
        _3156 = false;
        break;
    }
    float _3360;
    if (_3156)
    {
        discard_state = true;
        _3360 = 0.0;
    }
    else
    {
        _3360 = cbInstanceData._m0[_2844].w;
    }
    SV_Target.x = _2987;
    SV_Target.y = _2988;
    SV_Target.z = _2989;
    SV_Target.w = _3360;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2844].w;
    discard_exit();
}


