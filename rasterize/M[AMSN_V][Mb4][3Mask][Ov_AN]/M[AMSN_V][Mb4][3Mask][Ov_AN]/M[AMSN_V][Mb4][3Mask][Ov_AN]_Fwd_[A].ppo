#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1170;
float _3535;
float _3536;
float _3537;
float _3538;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    vec4 _255 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _255.x * cbMtdParam._m0[10u].x;
    float _262 = _255.y * cbMtdParam._m0[10u].y;
    float _263 = _255.z * cbMtdParam._m0[10u].z;
    vec4 _282 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _301 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _329 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _340 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _301.x) * 2.0) - _329)) + 1.0;
    float _3547 = isnan(0.0) ? _340 : (isnan(_340) ? 0.0 : max(_340, 0.0));
    float _341 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _348 = (_341 * ((_282.x * cbMtdParam._m0[11u].x) - _261)) + _261;
    float _349 = (_341 * ((_282.y * cbMtdParam._m0[11u].y) - _262)) + _262;
    float _350 = (_341 * ((_282.z * cbMtdParam._m0[11u].z) - _263)) + _263;
    vec4 _368 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _381 = (((((1.0 - _301.y) * 2.0) - _329) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3558 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _389 = (((_368.x * cbMtdParam._m0[12u].x) - _348) * _382) + _348;
    float _390 = (_382 * ((_368.y * cbMtdParam._m0[12u].y) - _349)) + _349;
    float _391 = (_382 * ((_368.z * cbMtdParam._m0[12u].z) - _350)) + _350;
    vec4 _409 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _422 = (((((1.0 - _301.z) * 2.0) - _329) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3569 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    vec4 _450 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _458 = ((((((_409.x * cbMtdParam._m0[13u].x) - _389) * _423) + _389) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _450.x;
    float _461 = ((((_423 * ((_409.y * cbMtdParam._m0[13u].y) - _390)) + _390) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _450.y;
    float _464 = ((((_423 * ((_409.z * cbMtdParam._m0[13u].z) - _391)) + _391) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _450.z;
    vec4 _477 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _479 = _477.x;
    float _480 = _477.y;
    float _481 = _477.z;
    vec4 _493 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _504 = ((_493.x - _479) * _341) + _479;
    float _505 = ((_493.y - _480) * _341) + _480;
    float _506 = ((_493.z - _481) * _341) + _481;
    vec4 _519 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _530 = ((_519.x - _504) * _382) + _504;
    float _531 = ((_519.y - _505) * _382) + _505;
    float _532 = ((_519.z - _506) * _382) + _506;
    vec4 _545 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _558 = ((_545.z - _532) * _423) + _532;
    float _561 = ((((_545.x - _530) * _423) + _530) * 2.0) + (-1.0);
    float _563 = ((((_545.y - _531) * _423) + _531) * 2.0) + (-1.0);
    float _564 = dot(vec2(_561, _563), vec2(_561, _563));
    float _3580 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _569 = sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))));
    vec4 _582 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _592 = (((_582.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _561;
    float _593 = (((_582.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _563;
    float _596 = fma(_569, _233, fma(_593, _225 * TANGENT.x, (_211 * _204) * _592));
    float _599 = fma(_569, _234, fma(_593, _225 * TANGENT.y, (_211 * _205) * _592));
    float _602 = fma(_569, _235, fma(_593, _225 * TANGENT.z, (_211 * _206) * _592));
    float _606 = inversesqrt(dot(vec3(_596, _599, _602), vec3(_596, _599, _602)));
    float _607 = _606 * _596;
    float _608 = _606 * _599;
    float _609 = _606 * _602;
    float _3591 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _610 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _3613 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _3624 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _629 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _669 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _679 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _669);
    float _680 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _669);
    float _681 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _669);
    float _685 = inversesqrt(dot(vec3(_679, _680, _681), vec3(_679, _680, _681)));
    float _686 = _679 * _685;
    float _687 = _680 * _685;
    float _688 = _681 * _685;
    vec4 _693 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _695 = _693.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _849 = sqrt(((_679 * _679) + (_680 * _680)) + (_681 * _681));
        float _855 = (cbMatDynParam._m0[5u].x * _849) + cbMatDynParam._m0[5u].y;
        float _3635 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _860 = (cbMatDynParam._m0[5u].z * _849) + cbMatDynParam._m0[5u].w;
        float _3646 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) - _856)) + _856) < ((_695 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _706 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _707 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _725 = fma(_609, cbSceneParam._m0[5u].z, fma(_608, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _607));
    float _728 = fma(_609, cbSceneParam._m0[6u].z, fma(_608, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _607));
    float _731 = fma(_609, cbSceneParam._m0[7u].z, fma(_608, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _607));
    uint _744 = uint(roundEven(NORMAL.w)) * 13u;
    uint _745 = _744 + 9u;
    uint _746 = _745 + uint(cbMatDynParam._m0[0u].w);
    float _752 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_746].x;
    float _753 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_746].y;
    float _754 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_746].z;
    float _3657 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    float _3668 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
    float _3679 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
    vec4 _766 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _706, cbSceneParam._m0[86u].y * _707));
    float _769 = _766.x * TEXCOORD.z;
    float _770 = dot(vec3(_607, _608, _609), vec3(_686, _687, _688));
    float _773 = _770 * 2.0;
    float _777 = (_773 * _607) - _686;
    float _778 = (_773 * _608) - _687;
    float _779 = (_773 * _609) - _688;
    float _783 = abs(dot(vec3(_686, _687, _688), vec3(_607, _608, _609)));
    float _3690 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _785 = sqrt(_610);
    float _798 = exp2((_785 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_785 * 3.0));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _834 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _838 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1169;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _894 = fma(_838, cbModelParam._m0[26u].z, fma(_834, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _830));
        float _898 = fma(_838, cbModelParam._m0[27u].z, fma(_834, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _830));
        float _902 = fma(_838, cbModelParam._m0[28u].z, fma(_834, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _830));
        float _927 = _830 + _607;
        float _928 = _834 + _608;
        float _929 = _838 + _609;
        float _939 = fma(_929, cbModelParam._m0[26u].z, fma(_928, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _927)) - _894;
        float _940 = fma(_929, cbModelParam._m0[27u].z, fma(_928, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _927)) - _898;
        float _941 = fma(_929, cbModelParam._m0[28u].z, fma(_928, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _927)) - _902;
        float _945 = inversesqrt(dot(vec3(_939, _940, _941), vec3(_939, _940, _941)));
        float _958 = ((_945 * _939) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_894 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_945 * _940) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_898 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_945 * _941) / cbModelParam._m0[34u].z) + ((((((_902 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_958, _959, _960), 0.0);
        float _997 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_963.x + (-0.5));
        float _999 = _997 * (_963.y + (-0.5));
        float _1000 = _997 * (_963.z + (-0.5));
        float _1007 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_970.x + (-0.5));
        float _1009 = _1007 * (_970.y + (-0.5));
        float _1010 = _1007 * (_970.z + (-0.5));
        float _1017 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_977.x + (-0.5));
        float _1019 = _1017 * (_977.y + (-0.5));
        float _1020 = _1017 * (_977.z + (-0.5));
        float _1027 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_984.x + (-0.5));
        float _1029 = _1027 * (_984.y + (-0.5));
        float _1030 = _1027 * (_984.z + (-0.5));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = _998 * 0.5;
        float _1035 = _1008 * 0.5;
        float _1036 = _1018 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1051 = (dot(vec3(_607, _608, _609), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3716 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1061 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3727 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3738 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * (_1063 + 1.0))) + _1068) * _1031;
        float _1078 = _999 * 0.5;
        float _1079 = _1009 * 0.5;
        float _1080 = _1019 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_607, _608, _609), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3749 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3760 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3771 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0))) * (_1105 + 1.0))) + _1110) * _1032;
        float _1120 = _1000 * 0.5;
        float _1121 = _1010 * 0.5;
        float _1122 = _1020 * 0.5;
        float _1123 = dot(vec3(_1120, _1121, _1122), vec3(_1120, _1121, _1122));
        float _1128 = (_1123 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1123);
        float _1136 = (dot(vec3(_607, _608, _609), vec3(_1128 * _1120, _1128 * _1121, _1128 * _1122)) + 1.0) * 0.5;
        float _3782 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1145 = sqrt(((_1121 * _1121) + (_1120 * _1120)) + (_1122 * _1122)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3793 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
        float _1147 = _1146 * 2.0;
        float _1151 = (1.0 - _1146) / (_1146 + 1.0);
        float _3804 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
        float _1161 = ((((1.0 - _1152) * (_1147 + 2.0)) * exp2(log2(isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1147 + 1.0))) + _1152) * _1033;
        _1169 = _1000;
        _1171 = _999;
        _1172 = _998;
        _1173 = _1010;
        _1174 = _1009;
        _1175 = _1008;
        _1176 = _1020;
        _1177 = _1019;
        _1178 = _1018;
        _1179 = _1033;
        _1180 = _1032;
        _1181 = _1031;
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0)));
    }
    else
    {
        _1169 = _1170;
        _1171 = _1170;
        _1172 = _1170;
        _1173 = _1170;
        _1174 = _1170;
        _1175 = _1170;
        _1176 = _1170;
        _1177 = _1170;
        _1178 = _1170;
        _1179 = _1170;
        _1180 = _1170;
        _1181 = _1170;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1213 = fma(_838, cbModelParam._m0[30u].z, fma(_834, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _830));
        float _1217 = fma(_838, cbModelParam._m0[31u].z, fma(_834, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _830));
        float _1221 = fma(_838, cbModelParam._m0[32u].z, fma(_834, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _830));
        float _1244 = _830 + _607;
        float _1245 = _834 + _608;
        float _1246 = _838 + _609;
        float _1256 = fma(_1246, cbModelParam._m0[30u].z, fma(_1245, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1244)) - _1213;
        float _1257 = fma(_1246, cbModelParam._m0[31u].z, fma(_1245, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1244)) - _1217;
        float _1258 = fma(_1246, cbModelParam._m0[32u].z, fma(_1245, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1244)) - _1221;
        float _1262 = inversesqrt(dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258)));
        float _1275 = ((_1262 * _1256) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1213 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1262 * _1257) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1217 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1262 * _1258) / cbModelParam._m0[35u].z) + ((((((_1221 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1293 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        vec4 _1300 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1275, _1276, _1277), 0.0);
        float _1312 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1279.x + (-0.5));
        float _1314 = _1312 * (_1279.y + (-0.5));
        float _1315 = _1312 * (_1279.z + (-0.5));
        float _1322 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1286.x + (-0.5));
        float _1324 = _1322 * (_1286.y + (-0.5));
        float _1325 = _1322 * (_1286.z + (-0.5));
        float _1332 = exp2((_1293.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1293.x + (-0.5));
        float _1334 = _1332 * (_1293.y + (-0.5));
        float _1335 = _1332 * (_1293.z + (-0.5));
        float _1342 = exp2((_1300.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1300.x + (-0.5));
        float _1344 = _1342 * (_1300.y + (-0.5));
        float _1345 = _1342 * (_1300.z + (-0.5));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = _1313 * 0.5;
        float _1350 = _1323 * 0.5;
        float _1351 = _1333 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_607, _608, _609), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _3845 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3856 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _3867 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))) * (_1376 + 1.0))) + _1381) * _1346;
        float _1391 = _1314 * 0.5;
        float _1392 = _1324 * 0.5;
        float _1393 = _1334 * 0.5;
        float _1394 = dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393));
        float _1399 = (_1394 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1394);
        float _1407 = (dot(vec3(_607, _608, _609), vec3(_1399 * _1391, _1399 * _1392, _1399 * _1393)) + 1.0) * 0.5;
        float _3878 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1416 = sqrt(((_1392 * _1392) + (_1391 * _1391)) + (_1393 * _1393)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3889 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1418 = _1417 * 2.0;
        float _1422 = (1.0 - _1417) / (_1417 + 1.0);
        float _3900 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1432 = ((((1.0 - _1423) * (_1418 + 2.0)) * exp2(log2(isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * (_1418 + 1.0))) + _1423) * _1347;
        float _1433 = _1315 * 0.5;
        float _1434 = _1325 * 0.5;
        float _1435 = _1335 * 0.5;
        float _1436 = dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435));
        float _1441 = (_1436 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1436);
        float _1449 = (dot(vec3(_607, _608, _609), vec3(_1441 * _1433, _1441 * _1434, _1441 * _1435)) + 1.0) * 0.5;
        float _3911 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1458 = sqrt(((_1434 * _1434) + (_1433 * _1433)) + (_1435 * _1435)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3922 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
        float _1459 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
        float _1460 = _1459 * 2.0;
        float _1464 = (1.0 - _1459) / (_1459 + 1.0);
        float _3933 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
        float _1474 = ((((1.0 - _1465) * (_1460 + 2.0)) * exp2(log2(isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0))) * (_1460 + 1.0))) + _1465) * _1348;
        _1482 = _1315;
        _1483 = _1314;
        _1484 = _1313;
        _1485 = _1325;
        _1486 = _1324;
        _1487 = _1323;
        _1488 = _1335;
        _1489 = _1334;
        _1490 = _1333;
        _1491 = _1348;
        _1492 = _1347;
        _1493 = _1346;
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    }
    else
    {
        _1482 = _1170;
        _1483 = _1170;
        _1484 = _1170;
        _1485 = _1170;
        _1486 = _1170;
        _1487 = _1170;
        _1488 = _1170;
        _1489 = _1170;
        _1490 = _1170;
        _1491 = _1170;
        _1492 = _1170;
        _1493 = _1170;
        _1494 = 0.0;
        _1495 = 0.0;
        _1496 = 0.0;
    }
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1182)) + _1182;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1184)) + _1184;
    float _1529 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1507, cbSceneParam._m0[89u].y, _1506 * cbSceneParam._m0[89u].x));
    float _1532 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1507, cbSceneParam._m0[90u].y, _1506 * cbSceneParam._m0[90u].x));
    float _1535 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1507, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1506));
    float _1550 = _777 * 0.5;
    float _1551 = _778 * 0.5;
    float _1552 = _779 * 0.5;
    float _1553 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1556 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1559 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1593;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1566 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1169, _1173, _1176, _1179));
        float _1570 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1574 = dot(vec4(_1550, _1551, _1552, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1581 = dot(vec4(cbModelParam._m0[39u]), vec4(_1550, _1551, _1552, 1.0));
        _1593 = dot(vec3(isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)), isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1593 = 1.0;
    }
    float _1604;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1595 = dot(vec4(cbModelParam._m0[40u]), vec4(_1550, _1551, _1552, 1.0));
        _1604 = dot(vec3(isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1595) ? 0.0 : (isnan(0.0) ? _1595 : max(0.0, _1595))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1604 = 1.0;
    }
    float _1608 = (_1604 * cbModelParam._m0[1u].x) + (_1593 * (1.0 - cbModelParam._m0[1u].x));
    float _1618 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _610);
    float _1619 = isnan(_1618) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1618 : min(cbModelParam._m0[25u].z, _1618));
    float _1699;
    float _1701;
    float _1703;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1666 = fma(_838, cbModelParam._m0[13u].z, fma(_834, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _830)) + cbModelParam._m0[13u].w;
        float _1670 = fma(_838, cbModelParam._m0[14u].z, fma(_834, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _830)) + cbModelParam._m0[14u].w;
        float _1674 = fma(_838, cbModelParam._m0[15u].z, fma(_834, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _830)) + cbModelParam._m0[15u].w;
        float _1677 = fma(_779, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _777));
        float _1680 = fma(_779, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _777));
        float _1683 = fma(_779, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _777));
        float _1711;
        if (_1677 > 0.0)
        {
            _1711 = abs((1.0 - _1666) / _1677);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1677 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1666 + 1.0) / _1677);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1711 = frontier_phi_19_17_ladder;
        }
        float _1915;
        if (_1680 > 0.0)
        {
            _1915 = abs((1.0 - _1670) / _1680);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1670 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1915 = frontier_phi_28_24_ladder;
        }
        float _2158;
        if (_1683 > 0.0)
        {
            _2158 = abs((1.0 - _1674) / _1683);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1674 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2158 = frontier_phi_40_35_ladder;
        }
        float _2160 = isnan(_1915) ? _1711 : (isnan(_1711) ? _1915 : min(_1711, _1915));
        float _2161 = isnan(_2158) ? _2160 : (isnan(_2160) ? _2158 : min(_2160, _2158));
        float _2165 = (_2161 * _1677) + _1666;
        float _2166 = (_2161 * _1680) + _1670;
        float _2167 = (_2161 * _1683) + _1674;
        float _2168 = _2161 * 9.9999997473787516355514526367188e-05;
        float _2170 = (-1.0) - _2168;
        float _2172 = _2168 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2167 > _2172) || ((_2167 < _2170) || ((_2166 > _2172) || ((_2166 < _2170) || ((_2165 < _2170) || (_2165 > _2172))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2291 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2167, cbModelParam._m0[9u].z, fma(_2166, cbModelParam._m0[9u].y, _2165 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2167, cbModelParam._m0[10u].z, fma(_2166, cbModelParam._m0[10u].y, _2165 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2167, cbModelParam._m0[11u].z, fma(_2166, cbModelParam._m0[11u].y, _2165 * cbModelParam._m0[11u].x))), _1619);
            frontier_phi_18_40_ladder = _2291.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2291.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2291.x * cbModelParam._m0[1u].y;
        }
        _1699 = frontier_phi_18_40_ladder_2;
        _1701 = frontier_phi_18_40_ladder_1;
        _1703 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_777, _778, _779), _1619);
        _1699 = _1687.x * cbModelParam._m0[1u].y;
        _1701 = _1687.y * cbModelParam._m0[1u].y;
        _1703 = _1687.z * cbModelParam._m0[1u].y;
    }
    float _1707 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _610);
    float _1708 = isnan(_1707) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1707 : min(cbModelParam._m0[25u].w, _1707));
    float _1801;
    float _1803;
    float _1805;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1765 = fma(_838, cbModelParam._m0[21u].z, fma(_834, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _830)) + cbModelParam._m0[21u].w;
        float _1769 = fma(_838, cbModelParam._m0[22u].z, fma(_834, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _830)) + cbModelParam._m0[22u].w;
        float _1773 = fma(_838, cbModelParam._m0[23u].z, fma(_834, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _830)) + cbModelParam._m0[23u].w;
        float _1776 = fma(_779, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _777));
        float _1779 = fma(_779, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _777));
        float _1782 = fma(_779, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _777));
        float _1920;
        if (_1776 > 0.0)
        {
            _1920 = abs((1.0 - _1765) / _1776);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1776 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1765 + 1.0) / _1776);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1920 = frontier_phi_30_26_ladder;
        }
        float _2185;
        if (_1779 > 0.0)
        {
            _2185 = abs((1.0 - _1769) / _1779);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1779 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1769 + 1.0) / _1779);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2185 = frontier_phi_42_37_ladder;
        }
        float _2390;
        if (_1782 > 0.0)
        {
            _2390 = abs((1.0 - _1773) / _1782);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1782 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1773 + 1.0) / _1782);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2390 = frontier_phi_51_48_ladder;
        }
        float _2392 = isnan(_2185) ? _1920 : (isnan(_1920) ? _2185 : min(_1920, _2185));
        float _2393 = isnan(_2390) ? _2392 : (isnan(_2392) ? _2390 : min(_2392, _2390));
        float _2397 = (_2393 * _1776) + _1765;
        float _2398 = (_2393 * _1779) + _1769;
        float _2399 = (_2393 * _1782) + _1773;
        float _2400 = _2393 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2400;
        float _2403 = _2400 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2399 > _2403) || ((_2399 < _2401) || ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 < _2401) || (_2397 > _2403))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2399, cbModelParam._m0[17u].z, fma(_2398, cbModelParam._m0[17u].y, _2397 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2399, cbModelParam._m0[18u].z, fma(_2398, cbModelParam._m0[18u].y, _2397 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2399, cbModelParam._m0[19u].z, fma(_2398, cbModelParam._m0[19u].y, _2397 * cbModelParam._m0[19u].x))), _1708);
            frontier_phi_27_51_ladder = _2597.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2597.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2597.x * cbModelParam._m0[1u].z;
        }
        _1801 = frontier_phi_27_51_ladder_2;
        _1803 = frontier_phi_27_51_ladder_1;
        _1805 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_777, _778, _779), _1708);
        _1801 = _1785.x * cbModelParam._m0[1u].z;
        _1803 = _1785.y * cbModelParam._m0[1u].z;
        _1805 = _1785.z * cbModelParam._m0[1u].z;
    }
    float _1817 = ((((1.0 - _798) * ((_785 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_798 * _785)) * _769;
    float _1818 = _1817 * ((cbModelParam._m0[1u].w * (_1801 - _1699)) + _1699);
    float _1819 = _1817 * ((cbModelParam._m0[1u].w * (_1803 - _1701)) + _1701);
    float _1820 = _1817 * ((cbModelParam._m0[1u].w * (_1805 - _1703)) + _1703);
    float _1823 = fma(_1820, cbSceneParam._m0[89u].z, fma(_1819, cbSceneParam._m0[89u].y, _1818 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1820, cbSceneParam._m0[90u].z, fma(_1819, cbSceneParam._m0[90u].y, _1818 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1820, cbSceneParam._m0[91u].z, fma(_1819, cbSceneParam._m0[91u].y, _1818 * cbSceneParam._m0[91u].x));
    uvec4 _1839 = floatBitsToUint(cbInstanceData._m0[_744 + 5u]);
    uint _1841 = _1839.x * 14u;
    uint _1842 = _1841 + 13u;
    float _1849 = _769 + (-1.0);
    float _1854 = (cbLight._m0[_1842].x * _1849) + 1.0;
    float _1855 = (cbLight._m0[_1842].y * _1849) + 1.0;
    float _1856 = (cbLight._m0[_1842].z * _1849) + 1.0;
    float _1857 = (cbLight._m0[_1842].w * _1849) + 1.0;
    uint _1858 = _1841 + 5u;
    float _1864 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1868 = _1841 + 4u;
    float _1874 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1878 = _1841 | 1u;
    float _1889 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_607, _608, _609));
    float _1892 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_607, _608, _609));
    float _4069 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _4080 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1897 = (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0))) * 0.3183098733425140380859375;
    float _1899 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * 0.3183098733425140380859375;
    float _1906 = ((cbLight._m0[_1858].x * _1864) * _1899) + ((cbLight._m0[_1868].x * _1874) * _1897);
    float _1907 = ((_1864 * cbLight._m0[_1858].y) * _1899) + ((_1874 * cbLight._m0[_1868].y) * _1897);
    float _1908 = ((_1864 * cbLight._m0[_1858].z) * _1899) + ((_1874 * cbLight._m0[_1868].z) * _1897);
    uvec4 _1912 = floatBitsToUint(cbLight._m0[_1841 + 12u]);
    bool _1914 = _1912.x == 0u;
    float _1925;
    float _1927;
    float _1929;
    if (_1914)
    {
        _1925 = _1906;
        _1927 = _1907;
        _1929 = _1908;
    }
    else
    {
        uint _1933 = _1841 + 6u;
        float _1949 = (dot(vec3(cbLight._m0[_1841 + 2u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _1950 = _1949 * _1949;
        float _4091 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _1952 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _1925 = (((cbLight._m0[_1933].x * 0.3183098733425140380859375) * _1951) * _1952) + _1906;
        _1927 = (((cbLight._m0[_1933].y * 0.3183098733425140380859375) * _1951) * _1952) + _1907;
        _1929 = (((cbLight._m0[_1933].z * 0.3183098733425140380859375) * _1951) * _1952) + _1908;
    }
    bool _1932 = _1912.y == 0u;
    float _1970;
    float _1972;
    float _1974;
    if (_1932)
    {
        _1970 = _1925;
        _1972 = _1927;
        _1974 = _1929;
    }
    else
    {
        uint _2129 = _1841 + 7u;
        float _2145 = (dot(vec3(cbLight._m0[_1841 + 3u].xyz), vec3(_607, _608, _609)) * 0.5) + 0.5;
        float _2146 = _2145 * _2145;
        float _4107 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2147 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _2148 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _1970 = (((cbLight._m0[_2129].x * 0.3183098733425140380859375) * _2147) * _2148) + _1925;
        _1972 = (((cbLight._m0[_2129].y * 0.3183098733425140380859375) * _2147) * _2148) + _1927;
        _1974 = (((cbLight._m0[_2129].z * 0.3183098733425140380859375) * _2147) * _2148) + _1929;
    }
    uint _1977 = _1841 + 8u;
    float _1990 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1841].w)) * _610) * 0.949999988079071044921875);
    float _1991 = _1990 * _1990;
    float _1992 = cbLight._m0[_1841].x + _686;
    float _1993 = cbLight._m0[_1841].y + _687;
    float _1994 = cbLight._m0[_1841].z + _688;
    float _1998 = inversesqrt(dot(vec3(_1992, _1993, _1994), vec3(_1992, _1993, _1994)));
    float _1999 = _1998 * _1992;
    float _2000 = _1998 * _1993;
    float _2001 = _1998 * _1994;
    float _2002 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1841].xyz));
    float _4123 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2005 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _4134 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _2006 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _2007 = dot(vec3(_607, _608, _609), vec3(_1999, _2000, _2001));
    float _4145 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2010 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _2011 = dot(vec3(cbLight._m0[_1841].xyz), vec3(_1999, _2000, _2001));
    float _4156 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2015 = _1991 * _1991;
    float _2019 = ((_2010 * _2010) * (_2015 + (-1.0))) + 1.0;
    float _2030 = (exp2(log2(1.0 - (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2031 = 1.0 - _1991;
    float _2042 = (0.5 / (((_2006 * ((_2005 * _2031) + _1991)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2031) + _1991) * _2005))) * _2005;
    float _4167 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2044 = (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2015 / ((_2019 * _2019) * 3.141590118408203125));
    uint _2055 = _1841 + 9u;
    float _2066 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _610) * 0.949999988079071044921875);
    float _2067 = _2066 * _2066;
    float _2068 = cbLight._m0[_1878].x + _686;
    float _2069 = cbLight._m0[_1878].y + _687;
    float _2070 = cbLight._m0[_1878].z + _688;
    float _2074 = inversesqrt(dot(vec3(_2068, _2069, _2070), vec3(_2068, _2069, _2070)));
    float _2075 = _2074 * _2068;
    float _2076 = _2074 * _2069;
    float _2077 = _2074 * _2070;
    float _2078 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_1878].xyz));
    float _4178 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2081 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _2082 = dot(vec3(_607, _608, _609), vec3(_2075, _2076, _2077));
    float _4189 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _2086 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2075, _2076, _2077));
    float _4200 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2090 = _2067 * _2067;
    float _2094 = ((_2085 * _2085) * (_2090 + (-1.0))) + 1.0;
    float _2103 = (exp2(log2(1.0 - (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2104 = 1.0 - _2067;
    float _2114 = (0.5 / (((_2006 * ((_2081 * _2104) + _2067)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2104) + _2067) * _2081))) * _2081;
    float _4211 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2116 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_2090 / ((_2094 * _2094) * 3.141590118408203125));
    float _2126 = (((_2103 * cbLight._m0[_2055].x) * _2116) * _1864) + (((_2030 * cbLight._m0[_1977].x) * _2044) * _1874);
    float _2127 = (((_2103 * cbLight._m0[_2055].y) * _2116) * _1864) + (((_2030 * cbLight._m0[_1977].y) * _2044) * _1874);
    float _2128 = (((_2103 * cbLight._m0[_2055].z) * _2116) * _1864) + (((_2030 * cbLight._m0[_1977].z) * _2044) * _1874);
    float _2190;
    float _2192;
    float _2194;
    if (_1914)
    {
        _2190 = _2126;
        _2192 = _2127;
        _2194 = _2128;
    }
    else
    {
        uint _2196 = _1841 + 2u;
        uint _2200 = _1841 + 10u;
        float _2214 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _610) * 0.949999988079071044921875);
        float _2215 = _2214 * _2214;
        float _2216 = cbLight._m0[_2196].x + _686;
        float _2217 = cbLight._m0[_2196].y + _687;
        float _2218 = cbLight._m0[_2196].z + _688;
        float _2222 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
        float _2223 = _2222 * _2216;
        float _2224 = _2222 * _2217;
        float _2225 = _2222 * _2218;
        float _2226 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2196].xyz));
        float _4222 = isnan(0.0) ? _2226 : (isnan(_2226) ? 0.0 : max(_2226, 0.0));
        float _2229 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _2230 = dot(vec3(_607, _608, _609), vec3(_2223, _2224, _2225));
        float _4233 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2233 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2234 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2223, _2224, _2225));
        float _4244 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
        float _2238 = _2215 * _2215;
        float _2242 = ((_2233 * _2233) * (_2238 + (-1.0))) + 1.0;
        float _2251 = (exp2(log2(1.0 - (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2252 = 1.0 - _2215;
        float _2262 = (0.5 / (((_2006 * ((_2229 * _2252) + _2215)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2252) + _2215) * _2229))) * _2229;
        float _4255 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
        float _2264 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_2238 / ((_2242 * _2242) * 3.141590118408203125));
        float _2265 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2190 = (((_2251 * cbLight._m0[_2200].x) * _2264) * _2265) + _2126;
        _2192 = (((_2251 * cbLight._m0[_2200].y) * _2264) * _2265) + _2127;
        _2194 = (((_2251 * cbLight._m0[_2200].z) * _2264) * _2265) + _2128;
    }
    float _2300;
    float _2302;
    float _2304;
    if (_1932)
    {
        _2300 = _2190;
        _2302 = _2192;
        _2304 = _2194;
    }
    else
    {
        uint _2311 = _1841 + 3u;
        uint _2315 = _1841 + 11u;
        float _2329 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2311].w)) * _610) * 0.949999988079071044921875);
        float _2330 = _2329 * _2329;
        float _2331 = cbLight._m0[_2311].x + _686;
        float _2332 = cbLight._m0[_2311].y + _687;
        float _2333 = cbLight._m0[_2311].z + _688;
        float _2337 = inversesqrt(dot(vec3(_2331, _2332, _2333), vec3(_2331, _2332, _2333)));
        float _2338 = _2337 * _2331;
        float _2339 = _2337 * _2332;
        float _2340 = _2337 * _2333;
        float _2341 = dot(vec3(_607, _608, _609), vec3(cbLight._m0[_2311].xyz));
        float _4271 = isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0));
        float _2344 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
        float _2345 = dot(vec3(_607, _608, _609), vec3(_2338, _2339, _2340));
        float _4282 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        float _2348 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2349 = dot(vec3(cbLight._m0[_2311].xyz), vec3(_2338, _2339, _2340));
        float _4293 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
        float _2353 = _2330 * _2330;
        float _2357 = ((_2348 * _2348) * (_2353 + (-1.0))) + 1.0;
        float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2367 = 1.0 - _2330;
        float _2377 = (0.5 / (((_2006 * ((_2344 * _2367) + _2330)) + 9.9999999392252902907785028219223e-09) + (((_2006 * _2367) + _2330) * _2344))) * _2344;
        float _4304 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2379 = (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_2353 / ((_2357 * _2357) * 3.141590118408203125));
        float _2380 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
        _2300 = (((_2366 * cbLight._m0[_2315].x) * _2379) * _2380) + _2190;
        _2302 = (((_2366 * cbLight._m0[_2315].y) * _2379) * _2380) + _2192;
        _2304 = (((_2366 * cbLight._m0[_2315].z) * _2379) * _2380) + _2194;
    }
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    float _2522;
    float _2524;
    if (_1839.y == 0u)
    {
        float _2455 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2456 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2455;
        float _2457 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2455;
        float _2458 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2455;
        uvec4 _2470 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2471 = _2470.x;
        uint _2482 = uint((float(_2470.y) * floor(float(uint(cbSceneParam._m0[85u].y * _707) / _2471))) + floor(float(uint(cbSceneParam._m0[85u].x * _706) / _2471)));
        float _2492 = (log2(_2458 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2493 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        uint _2496 = uint(isnan(14.0) ? _2493 : (isnan(_2493) ? 14.0 : min(_2493, 14.0)));
        uvec4 _2501 = texelFetch(g_lightClusterGridBuffer, int(((_2496 << 2u) + (_2482 << 6u)) >> 2u));
        uint _2502 = _2501.x;
        uint _2503 = _2470.z;
        float _2602;
        float _2604;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        if (((((1u << ((_2503 >> 4u) & 15u)) + 4294967295u) & _2502) == 0u) || ((_2503 & 240u) == 0u))
        {
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
            _2608 = 0.0;
            _2610 = 0.0;
            _2612 = 0.0;
        }
        else
        {
            float _2603;
            float _2605;
            float _2607;
            float _2609;
            float _2611;
            float _2613;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            float _2757 = 0.0;
            float _2758 = 0.0;
            float _2759 = 0.0;
            uint _2760 = 0u;
            uint _2769;
            bool _2770;
            for (;;)
            {
                _2769 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2760 << 2u)) >> 2u)).x;
                _2770 = _2769 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2770)
                {
                    frontier_phi_68_pred = _2756;
                    frontier_phi_68_pred_1 = _2759;
                    frontier_phi_68_pred_2 = _2758;
                    frontier_phi_68_pred_3 = _2757;
                    frontier_phi_68_pred_4 = _2755;
                    frontier_phi_68_pred_5 = _2754;
                }
                else
                {
                    float _2899;
                    float _2900;
                    float _2901;
                    float _2902;
                    float _2903;
                    float _2904;
                    uint _2905;
                    _2899 = _2754;
                    _2900 = _2755;
                    _2901 = _2756;
                    _2902 = _2757;
                    _2903 = _2758;
                    _2904 = _2759;
                    _2905 = _2769;
                    float _2826;
                    float _2827;
                    float _2828;
                    float _2829;
                    float _2830;
                    float _2831;
                    for (;;)
                    {
                        uint _2909 = uint(findLSB(_2905)) + (_2760 << 5u);
                        uint _2906 = (_2905 + 4294967295u) & _2905;
                        uint _2911 = _2909 * 48u;
                        vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        uint _2931 = (_2909 * 48u) + 4u;
                        vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2931)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2931 + 3u)).x));
                        uint _2950 = (_2909 * 48u) + 8u;
                        vec3 _2961 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2950)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2950 + 2u)).x));
                        float _2965 = _2925.x - _2456;
                        float _2966 = _2925.y - _2457;
                        float _2967 = _2925.z - _2458;
                        float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                        float _2971 = inversesqrt(_2968);
                        float _2972 = _2971 * _2965;
                        float _2973 = _2971 * _2966;
                        float _2974 = _2971 * _2967;
                        float _2975 = dot(vec3(_725, _728, _731), vec3(_2972, _2973, _2974));
                        float _2980 = 1.0 - (_2968 * _2925.w);
                        float _4330 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2981 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
                        float _2982 = sqrt(_2968) * _2944.w;
                        float _2985 = 1.39999997615814208984375 / (_2982 + 1.39999997615814208984375);
                        float _2986 = _2985 * _2985;
                        float _2989 = ((1.0 - _2986) * _2975) + _2986;
                        float _2992 = _2982 * _2982;
                        float _2996 = ((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2981) / ((_2992 * 0.699999988079071044921875) + 1.0);
                        float _3000 = (-0.0) - _2456;
                        float _3001 = (-0.0) - _2457;
                        float _3002 = (-0.0) - _2458;
                        float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                        float _3007 = _3006 * _3000;
                        float _3008 = _3006 * _3001;
                        float _3009 = _3006 * _3002;
                        float _3017 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                        float _3018 = 1.0 - _785;
                        float _3025 = sqrt(1.0 - ((1.0 - (_3018 * _3018)) * (1.0 - (_3017 * _3017))));
                        float _3026 = _3025 * _3025;
                        float _3027 = _3026 * _3026;
                        float _3028 = _3007 + _2972;
                        float _3029 = _3008 + _2973;
                        float _3030 = _3009 + _2974;
                        float _3034 = inversesqrt(dot(vec3(_3028, _3029, _3030), vec3(_3028, _3029, _3030)));
                        float _3038 = dot(vec3(_725, _728, _731), vec3(_3007, _3008, _3009));
                        float _4346 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                        float _3041 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3042 = dot(vec3(_725, _728, _731), vec3(_3034 * _3028, _3034 * _3029, _3034 * _3030));
                        float _4357 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                        float _3045 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3049 = ((_3045 * _3045) * (_3027 + (-1.0))) + 1.0;
                        float _3050 = _2985 * _3026;
                        float _3051 = _3050 * _3050;
                        float _3054 = ((1.0 - _3051) * _2975) + _3051;
                        float _4368 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3055 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                        float _3056 = 1.0 - _3026;
                        float _3066 = (0.5 / (((_3055 * ((_3041 * _3056) + _3026)) + 9.9999999392252902907785028219223e-09) + (((_3055 * _3056) + _3026) * _3041))) * _3055;
                        float _4379 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3077 = (((_3027 * 3.1415927410125732421875) * (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) / ((_3049 * _3049) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125))) * _2981;
                        _2829 = (_2996 * _2944.x) + _2902;
                        _2830 = (_2996 * _2944.y) + _2903;
                        _2831 = (_2996 * _2944.z) + _2904;
                        _2826 = (_3077 * _2961.x) + _2899;
                        _2827 = (_3077 * _2961.y) + _2900;
                        _2828 = (_3077 * _2961.z) + _2901;
                        if (_2906 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2899 = _2826;
                            _2900 = _2827;
                            _2901 = _2828;
                            _2902 = _2829;
                            _2903 = _2830;
                            _2904 = _2831;
                            _2905 = _2906;
                        }
                    }
                    frontier_phi_68_pred = _2828;
                    frontier_phi_68_pred_1 = _2831;
                    frontier_phi_68_pred_2 = _2830;
                    frontier_phi_68_pred_3 = _2829;
                    frontier_phi_68_pred_4 = _2827;
                    frontier_phi_68_pred_5 = _2826;
                }
                _2607 = frontier_phi_68_pred;
                _2613 = frontier_phi_68_pred_1;
                _2611 = frontier_phi_68_pred_2;
                _2609 = frontier_phi_68_pred_3;
                _2605 = frontier_phi_68_pred_4;
                _2603 = frontier_phi_68_pred_5;
                uint _2761 = _2760 + 1u;
                if (_2761 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2754 = _2603;
                    _2755 = _2605;
                    _2756 = _2607;
                    _2757 = _2609;
                    _2758 = _2611;
                    _2759 = _2613;
                    _2760 = _2761;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
            _2608 = _2609;
            _2610 = _2611;
            _2612 = _2613;
        }
        uvec4 _2616 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2617 = _2616.z;
        uint _2619 = (_2617 >> 8u) & 15u;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        if (((4294967295u << _2619) & _2502) == 0u)
        {
            _2722 = _2602;
            _2724 = _2604;
            _2726 = _2606;
            _2728 = _2608;
            _2730 = _2610;
            _2732 = _2612;
        }
        else
        {
            float _2747 = inversesqrt(dot(vec3(_2456, _2457, _2458), vec3(_2456, _2457, _2458)));
            float _2748 = _2747 * _2456;
            float _2749 = _2747 * _2457;
            float _2750 = _2747 * _2458;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2619 < ((_2617 >> 12u) & 15u))
            {
                float _2723;
                float _2725;
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2882 = _2602;
                float _2883 = _2604;
                float _2884 = _2606;
                float _2885 = _2608;
                float _2886 = _2610;
                float _2887 = _2612;
                uint _2888 = _2619;
                uint _2897;
                bool _2898;
                for (;;)
                {
                    _2897 = texelFetch(g_lightClassification, int((((_2496 << 5u) + (_2482 << 9u)) + (_2888 << 2u)) >> 2u)).x;
                    _2898 = _2897 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2898)
                    {
                        frontier_phi_79_pred = _2887;
                        frontier_phi_79_pred_1 = _2886;
                        frontier_phi_79_pred_2 = _2885;
                        frontier_phi_79_pred_3 = _2884;
                        frontier_phi_79_pred_4 = _2883;
                        frontier_phi_79_pred_5 = _2882;
                    }
                    else
                    {
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3104 = _2882;
                        float _3105 = _2883;
                        float _3106 = _2884;
                        float _3107 = _2885;
                        float _3108 = _2886;
                        float _3109 = _2887;
                        uint _3110 = _2897;
                        uint _3111;
                        vec4 _3136;
                        float _3137;
                        vec4 _3152;
                        vec3 _3164;
                        vec4 _3179;
                        vec4 _3195;
                        float _3242;
                        bool _3243;
                        for (;;)
                        {
                            uint _3121 = ((_2888 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3110));
                            _3111 = (_3110 + 4294967295u) & _3110;
                            uint _3123 = _3121 * 40u;
                            _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            _3137 = _3136.w;
                            uint _3139 = (_3121 * 40u) + 4u;
                            _3152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3139 + 3u)).x));
                            uint _3154 = (_3121 * 40u) + 8u;
                            _3164 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3154 + 2u)).x));
                            uint _3166 = (_3121 * 40u) + 16u;
                            _3179 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3166)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3166 + 3u)).x));
                            uint _3182 = (_3121 * 40u) + 20u;
                            _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            uint _3198 = (_3121 * 40u) + 24u;
                            vec4 _3211 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3198)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3198 + 3u)).x));
                            uint _3217 = (_3121 * 40u) + 28u;
                            vec4 _3230 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3217)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3217 + 3u)).x));
                            _3242 = fma(_2458, _3230.z, fma(_2457, _3230.y, _3230.x * _2456)) + _3230.w;
                            _3243 = !((fma(_2458, _3211.z, fma(_2457, _3211.y, _3211.x * _2456)) + _3211.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3243)
                            {
                                float _3270 = _3136.x - _2456;
                                float _3271 = _3136.y - _2457;
                                float _3272 = _3136.z - _2458;
                                float _3273 = dot(vec3(_3270, _3271, _3272), vec3(_3270, _3271, _3272));
                                float _3276 = inversesqrt(_3273);
                                float _3277 = _3276 * _3270;
                                float _3278 = _3276 * _3271;
                                float _3279 = _3276 * _3272;
                                float _3283 = 1.0 - (_3273 / (_3137 * _3137));
                                float _4390 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
                                float _3288 = sqrt(_3273) * _3152.w;
                                float _3290 = 1.39999997615814208984375 / (_3288 + 1.39999997615814208984375);
                                float _3291 = _3290 * _3290;
                                float _3294 = ((1.0 - _3291) * dot(vec3(_3277, _3278, _3279), vec3(_725, _728, _731))) + _3291;
                                float _3297 = _3288 * _3288;
                                float _3301 = (fma(_2458, _3179.z, fma(_2457, _3179.y, _3179.x * _2456)) + _3179.w) / _3242;
                                float _3302 = (fma(_2458, _3195.z, fma(_2457, _3195.y, _3195.x * _2456)) + _3195.w) / _3242;
                                float _3306 = 1.0 - dot(vec2(_3301, _3302), vec2(_3301, _3302));
                                float _4406 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3307 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3308 = _3307 * (((isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0))) * _3284) / ((_3297 * 0.699999988079071044921875) + 1.0));
                                float _3320 = exp2(log2(1.0 / ((_3297 * 3.5) + 5.0)) * 0.25);
                                float _3321 = 1.0 - _785;
                                float _3328 = sqrt(1.0 - ((1.0 - (_3321 * _3321)) * (1.0 - (_3320 * _3320))));
                                float _3329 = _3328 * _3328;
                                float _3330 = _3329 * _3329;
                                float _3331 = _3277 - _2748;
                                float _3332 = _3278 - _2749;
                                float _3333 = _3279 - _2750;
                                float _3337 = inversesqrt(dot(vec3(_3331, _3332, _3333), vec3(_3331, _3332, _3333)));
                                float _3341 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2748, (-0.0) - _2749, (-0.0) - _2750));
                                float _4417 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                                float _3344 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3345 = dot(vec3(_725, _728, _731), vec3(_3337 * _3331, _3337 * _3332, _3337 * _3333));
                                float _4428 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0));
                                float _3348 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
                                float _3352 = ((_3348 * _3348) * (_3330 + (-1.0))) + 1.0;
                                float _3353 = _3290 * _3329;
                                float _3354 = _3353 * _3353;
                                float _3360 = ((1.0 - _3354) * dot(vec3(_725, _728, _731), vec3(_3277, _3278, _3279))) + _3354;
                                float _4439 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0));
                                float _3361 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
                                float _3362 = 1.0 - _3329;
                                float _3372 = (0.5 / (((_3361 * ((_3344 * _3362) + _3329)) + 9.9999999392252902907785028219223e-09) + (((_3361 * _3362) + _3329) * _3344))) * _3361;
                                float _4450 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                                float _3382 = (_3307 * _3284) * (((_3330 * 3.1415927410125732421875) * (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) / ((_3352 * _3352) * ((_3297 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3308 * _3152.z;
                                frontier_phi_85_pred_1 = _3308 * _3152.y;
                                frontier_phi_85_pred_2 = _3308 * _3152.x;
                                frontier_phi_85_pred_3 = _3382 * _3164.z;
                                frontier_phi_85_pred_4 = _3382 * _3164.y;
                                frontier_phi_85_pred_5 = _3382 * _3164.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3391 = frontier_phi_85_pred;
                            _3390 = frontier_phi_85_pred_1;
                            _3389 = frontier_phi_85_pred_2;
                            _3388 = frontier_phi_85_pred_3;
                            _3387 = frontier_phi_85_pred_4;
                            _3386 = frontier_phi_85_pred_5;
                            _3094 = _3389 + _3107;
                            _3095 = _3390 + _3108;
                            _3096 = _3391 + _3109;
                            _3091 = _3386 + _3104;
                            _3092 = _3387 + _3105;
                            _3093 = _3388 + _3106;
                            if (_3111 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3104 = _3091;
                                _3105 = _3092;
                                _3106 = _3093;
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3111;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3096;
                        frontier_phi_79_pred_1 = _3095;
                        frontier_phi_79_pred_2 = _3094;
                        frontier_phi_79_pred_3 = _3093;
                        frontier_phi_79_pred_4 = _3092;
                        frontier_phi_79_pred_5 = _3091;
                    }
                    _2733 = frontier_phi_79_pred;
                    _2731 = frontier_phi_79_pred_1;
                    _2729 = frontier_phi_79_pred_2;
                    _2727 = frontier_phi_79_pred_3;
                    _2725 = frontier_phi_79_pred_4;
                    _2723 = frontier_phi_79_pred_5;
                    uint _2889 = _2888 + 1u;
                    if (_2889 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2882 = _2723;
                        _2883 = _2725;
                        _2884 = _2727;
                        _2885 = _2729;
                        _2886 = _2731;
                        _2887 = _2733;
                        _2888 = _2889;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2729;
                frontier_phi_60_61_ladder_1 = _2733;
                frontier_phi_60_61_ladder_2 = _2731;
                frontier_phi_60_61_ladder_3 = _2727;
                frontier_phi_60_61_ladder_4 = _2725;
                frontier_phi_60_61_ladder_5 = _2723;
            }
            else
            {
                frontier_phi_60_61_ladder = _2608;
                frontier_phi_60_61_ladder_1 = _2612;
                frontier_phi_60_61_ladder_2 = _2610;
                frontier_phi_60_61_ladder_3 = _2606;
                frontier_phi_60_61_ladder_4 = _2604;
                frontier_phi_60_61_ladder_5 = _2602;
            }
            _2722 = frontier_phi_60_61_ladder_5;
            _2724 = frontier_phi_60_61_ladder_4;
            _2726 = frontier_phi_60_61_ladder_3;
            _2728 = frontier_phi_60_61_ladder;
            _2730 = frontier_phi_60_61_ladder_2;
            _2732 = frontier_phi_60_61_ladder_1;
        }
        float _2737 = isnan(1.0) ? _769 : (isnan(_769) ? 1.0 : min(_769, 1.0));
        _2514 = (_2737 * _2728) + _1970;
        _2516 = (_2737 * _2730) + _1972;
        _2518 = (_2737 * _2732) + _1974;
        _2520 = ((_2722 * 0.039999999105930328369140625) * _2737) + _2300;
        _2522 = ((_2724 * 0.039999999105930328369140625) * _2737) + _2302;
        _2524 = ((_2726 * 0.039999999105930328369140625) * _2737) + _2304;
    }
    else
    {
        _2514 = _1970;
        _2516 = _1972;
        _2518 = _1974;
        _2520 = _2300;
        _2522 = _2302;
        _2524 = _2304;
    }
    float _4466 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4477 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4488 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _2541 = ((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2514 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _769))) + ((_2520 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1608)) * cbPerFrame._m0[3u].x);
    float _2542 = ((isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2516 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _769))) + ((_2522 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1608)) * cbPerFrame._m0[3u].x);
    float _2543 = ((isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_2518 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _769))) + ((_2524 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1608)) * cbPerFrame._m0[3u].x);
    uint _2544 = _744 + 6u;
    float _2552 = _706 / cbSceneParam._m0[86u].x;
    float _2553 = _707 / cbSceneParam._m0[86u].y;
    vec4 _2567 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, (log2((isnan(cbSceneParam._m0[77u].w) ? _629 : (isnan(_629) ? cbSceneParam._m0[77u].w : min(_629, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2569 = _2567.x;
    float _2570 = _2567.y;
    float _2571 = _2567.z;
    float _2572 = _2567.w;
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    if (_629 > cbSceneParam._m0[78u].w)
    {
        float _2627 = isnan(_629) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _629 : min(cbSceneParam._m0[80u].w, _629));
        float _2628 = _2627 / _629;
        float _2639 = _2628 * _679;
        float _2640 = _680 * _2628;
        float _2641 = (-0.0) - _2640;
        float _2642 = _2628 * _681;
        float _2644 = (cbSceneParam._m0[77u].w * _2641) / _2627;
        float _2645 = _2644 + cbSceneParam._m0[79u].w;
        float _2646 = cbSceneParam._m0[79u].w - _2640;
        float _2652 = sqrt(((_2639 * _2639) + (_2640 * _2640)) + (_2642 * _2642));
        float _2655 = (1.0 - (cbSceneParam._m0[77u].w / _2627)) * _2652;
        float _2660 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2662 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2641 - _2644) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2645 > 0.0) ? exp2(_2660 * _2645) : (2.0 - exp2(_2662 * _2645))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2655;
        }
        else
        {
            float _2783 = 1.0 / cbSceneParam._m0[80u].x;
            float _2784 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : max(_2645, _2646));
            float _2785 = isnan(_2646) ? _2645 : (isnan(_2645) ? _2646 : min(_2645, _2646));
            float _2794 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : min(_2784, 0.0));
            float _2795 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : min(_2785, 0.0));
            _2839 = ((abs(_2652 / _2641) * cbSceneParam._m0[80u].y) * ((((_2794 - _2795) * 2.0) - ((exp2(_2660 * (isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0)))) - exp2(_2660 * (isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0))))) * _2783)) - ((exp2(_2662 * _2794) - exp2(_2662 * _2795)) * _2783))) + (_2655 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2552, _2553, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2572);
        _2664 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2569;
        _2666 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2570;
        _2668 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2571;
        _2670 = _2850 * _2572;
    }
    else
    {
        _2664 = _2569;
        _2666 = _2570;
        _2668 = _2571;
        _2670 = _2572;
    }
    bool _2877;
    vec4 _2680;
    vec4 _2702;
    float _2704;
    float _2708;
    float _2709;
    float _2710;
    float _2711;
    bool _2721;
    for (;;)
    {
        _2680 = cbMatDynParam._m0[0u];
        float _2682 = roundEven(_2680.y);
        bool _2683 = _2682 == 3.0;
        float _2684 = log2(_2670);
        float _2691 = exp2(_2684 * cbSceneParam._m0[78u].x) * _2541;
        float _2692 = exp2(_2684 * cbSceneParam._m0[78u].y) * _2542;
        float _2693 = exp2(_2684 * cbSceneParam._m0[78u].z) * _2543;
        float _2700 = _695 + (-0.5);
        _2702 = cbMtdParam._m0[1u];
        _2704 = _2702.y * _2700;
        float _2707 = (_2682 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2708 = _2707 * (_2683 ? _2691 : (_2691 + (cbSceneParam._m0[72u].w * _2664)));
        _2709 = _2707 * (_2683 ? _2692 : (_2692 + (cbSceneParam._m0[72u].w * _2666)));
        _2710 = _2707 * (_2683 ? _2693 : (_2693 + (cbSceneParam._m0[72u].w * _2668)));
        _2711 = _2700 * 0.999000012874603271484375;
        _2721 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2721)
        {
            if ((cbInstanceData._m0[_744 + 7u].x + _2711) < 0.5)
            {
                _2877 = true;
                break;
            }
        }
        uint _2818 = _745 + uint(_2680.w);
        if ((cbInstanceData._m0[_2818].w < 1.0) && ((cbInstanceData._m0[_2818].w + _2711) < 0.5))
        {
            _2877 = true;
            break;
        }
        if ((_2704 + 1.0) < _2702.x)
        {
            _2877 = true;
            break;
        }
        _2877 = false;
        break;
    }
    float _3082;
    if (_2877)
    {
        discard_state = true;
        _3082 = 0.0;
    }
    else
    {
        _3082 = cbInstanceData._m0[_2544].w;
    }
    SV_Target.x = _2708;
    SV_Target.y = _2709;
    SV_Target.z = _2710;
    SV_Target.w = _3082;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2544].w;
    discard_exit();
}


