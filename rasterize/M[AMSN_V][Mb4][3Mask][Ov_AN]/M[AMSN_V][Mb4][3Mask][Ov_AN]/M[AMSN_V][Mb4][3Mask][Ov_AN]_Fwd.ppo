#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1125;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _229;
    float _230;
    float _231;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _229 = (-0.0) - _215;
        _230 = (-0.0) - _216;
        _231 = (-0.0) - _217;
    }
    else
    {
        _229 = _215;
        _230 = _216;
        _231 = _217;
    }
    vec4 _251 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _257 = _251.x * cbMtdParam._m0[10u].x;
    float _258 = _251.y * cbMtdParam._m0[10u].y;
    float _259 = _251.z * cbMtdParam._m0[10u].z;
    vec4 _278 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _297 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _336 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _297.x) * 2.0) - _325)) + 1.0;
    float _3436 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _337 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _344 = (_337 * ((_278.x * cbMtdParam._m0[11u].x) - _257)) + _257;
    float _345 = (_337 * ((_278.y * cbMtdParam._m0[11u].y) - _258)) + _258;
    float _346 = (_337 * ((_278.z * cbMtdParam._m0[11u].z) - _259)) + _259;
    vec4 _364 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _377 = (((((1.0 - _297.y) * 2.0) - _325) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3447 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
    float _385 = (((_364.x * cbMtdParam._m0[12u].x) - _344) * _378) + _344;
    float _386 = (_378 * ((_364.y * cbMtdParam._m0[12u].y) - _345)) + _345;
    float _387 = (_378 * ((_364.z * cbMtdParam._m0[12u].z) - _346)) + _346;
    vec4 _405 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _418 = (((((1.0 - _297.z) * 2.0) - _325) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3458 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0));
    vec4 _446 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _454 = ((((((_405.x * cbMtdParam._m0[13u].x) - _385) * _419) + _385) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _446.x;
    float _457 = ((((_419 * ((_405.y * cbMtdParam._m0[13u].y) - _386)) + _386) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _446.y;
    float _460 = ((((_419 * ((_405.z * cbMtdParam._m0[13u].z) - _387)) + _387) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _446.z;
    vec4 _473 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _475 = _473.x;
    float _476 = _473.y;
    float _477 = _473.z;
    vec4 _489 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _500 = ((_489.x - _475) * _337) + _475;
    float _501 = ((_489.y - _476) * _337) + _476;
    float _502 = ((_489.z - _477) * _337) + _477;
    vec4 _515 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _526 = ((_515.x - _500) * _378) + _500;
    float _527 = ((_515.y - _501) * _378) + _501;
    float _528 = ((_515.z - _502) * _378) + _502;
    vec4 _541 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _554 = ((_541.z - _528) * _419) + _528;
    float _557 = ((((_541.x - _526) * _419) + _526) * 2.0) + (-1.0);
    float _559 = ((((_541.y - _527) * _419) + _527) * 2.0) + (-1.0);
    float _560 = dot(vec2(_557, _559), vec2(_557, _559));
    float _3469 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _565 = sqrt(1.0 - (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))));
    vec4 _578 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _588 = (((_578.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _557;
    float _589 = (((_578.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _559;
    float _592 = fma(_565, _229, fma(_589, _221 * TANGENT.x, (_207 * _200) * _588));
    float _595 = fma(_565, _230, fma(_589, _221 * TANGENT.y, (_207 * _201) * _588));
    float _598 = fma(_565, _231, fma(_589, _221 * TANGENT.z, (_207 * _202) * _588));
    float _602 = inversesqrt(dot(vec3(_592, _595, _598), vec3(_592, _595, _598)));
    float _603 = _602 * _592;
    float _604 = _602 * _595;
    float _605 = _602 * _598;
    float _3480 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _606 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3502 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _3513 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _625 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _665 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _675 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _665);
    float _676 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _665);
    float _677 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _665);
    float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
    float _682 = _675 * _681;
    float _683 = _676 * _681;
    float _684 = _677 * _681;
    float _690 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _691 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _709 = fma(_605, cbSceneParam._m0[5u].z, fma(_604, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _603));
    float _712 = fma(_605, cbSceneParam._m0[6u].z, fma(_604, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _603));
    float _715 = fma(_605, cbSceneParam._m0[7u].z, fma(_604, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _603));
    uint _728 = uint(roundEven(NORMAL.w)) * 13u;
    uint _730 = (_728 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3524 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
    float _3535 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0));
    float _3546 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _690, cbSceneParam._m0[86u].y * _691));
    float _753 = _750.x * TEXCOORD.z;
    float _754 = dot(vec3(_603, _604, _605), vec3(_682, _683, _684));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _603) - _682;
    float _762 = (_757 * _604) - _683;
    float _763 = (_757 * _605) - _684;
    float _767 = abs(dot(vec3(_682, _683, _684), vec3(_603, _604, _605)));
    float _3557 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_606);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1124;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _849 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _853 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _857 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _882 = _814 + _603;
        float _883 = _818 + _604;
        float _884 = _822 + _605;
        float _894 = fma(_884, cbModelParam._m0[26u].z, fma(_883, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _882)) - _849;
        float _895 = fma(_884, cbModelParam._m0[27u].z, fma(_883, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _882)) - _853;
        float _896 = fma(_884, cbModelParam._m0[28u].z, fma(_883, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _882)) - _857;
        float _900 = inversesqrt(dot(vec3(_894, _895, _896), vec3(_894, _895, _896)));
        float _913 = ((_900 * _894) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_849 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_900 * _895) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_853 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_900 * _896) / cbModelParam._m0[34u].z) + ((((((_857 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_913, _914, _915), 0.0);
        float _952 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_918.x + (-0.5));
        float _954 = _952 * (_918.y + (-0.5));
        float _955 = _952 * (_918.z + (-0.5));
        float _962 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_925.x + (-0.5));
        float _964 = _962 * (_925.y + (-0.5));
        float _965 = _962 * (_925.z + (-0.5));
        float _972 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_932.x + (-0.5));
        float _974 = _972 * (_932.y + (-0.5));
        float _975 = _972 * (_932.z + (-0.5));
        float _982 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_939.x + (-0.5));
        float _984 = _982 * (_939.y + (-0.5));
        float _985 = _982 * (_939.z + (-0.5));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = _953 * 0.5;
        float _990 = _963 * 0.5;
        float _991 = _973 * 0.5;
        float _992 = dot(vec3(_989, _990, _991), vec3(_989, _990, _991));
        float _997 = (_992 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_992);
        float _1006 = (dot(vec3(_603, _604, _605), vec3(_997 * _989, _997 * _990, _997 * _991)) + 1.0) * 0.5;
        float _3583 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1016 = sqrt(((_990 * _990) + (_989 * _989)) + (_991 * _991)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3594 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1018 = _1017 * 2.0;
        float _1022 = (1.0 - _1017) / (_1017 + 1.0);
        float _3605 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
        float _1032 = ((((1.0 - _1023) * (_1018 + 2.0)) * exp2(log2(isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * (_1018 + 1.0))) + _1023) * _986;
        float _1033 = _954 * 0.5;
        float _1034 = _964 * 0.5;
        float _1035 = _974 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_603, _604, _605), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3616 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3627 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3638 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0))) * (_1060 + 1.0))) + _1065) * _987;
        float _1075 = _955 * 0.5;
        float _1076 = _965 * 0.5;
        float _1077 = _975 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_603, _604, _605), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _3671 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1102 + 1.0))) + _1107) * _988;
        _1124 = _955;
        _1126 = _954;
        _1127 = _953;
        _1128 = _965;
        _1129 = _964;
        _1130 = _963;
        _1131 = _975;
        _1132 = _974;
        _1133 = _973;
        _1134 = _988;
        _1135 = _987;
        _1136 = _986;
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
    }
    else
    {
        _1124 = _1125;
        _1126 = _1125;
        _1127 = _1125;
        _1128 = _1125;
        _1129 = _1125;
        _1130 = _1125;
        _1131 = _1125;
        _1132 = _1125;
        _1133 = _1125;
        _1134 = _1125;
        _1135 = _1125;
        _1136 = _1125;
        _1137 = 0.0;
        _1138 = 0.0;
        _1139 = 0.0;
    }
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1165 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1169 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1173 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1196 = _814 + _603;
        float _1197 = _818 + _604;
        float _1198 = _822 + _605;
        float _1208 = fma(_1198, cbModelParam._m0[30u].z, fma(_1197, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1196)) - _1165;
        float _1209 = fma(_1198, cbModelParam._m0[31u].z, fma(_1197, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1196)) - _1169;
        float _1210 = fma(_1198, cbModelParam._m0[32u].z, fma(_1197, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1196)) - _1173;
        float _1214 = inversesqrt(dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210)));
        float _1227 = ((_1214 * _1208) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1165 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1214 * _1209) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1169 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1214 * _1210) / cbModelParam._m0[35u].z) + ((((((_1173 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1227, _1228, _1229), 0.0);
        float _1264 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1231.x + (-0.5));
        float _1266 = _1264 * (_1231.y + (-0.5));
        float _1267 = _1264 * (_1231.z + (-0.5));
        float _1274 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1238.x + (-0.5));
        float _1276 = _1274 * (_1238.y + (-0.5));
        float _1277 = _1274 * (_1238.z + (-0.5));
        float _1284 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1245.x + (-0.5));
        float _1286 = _1284 * (_1245.y + (-0.5));
        float _1287 = _1284 * (_1245.z + (-0.5));
        float _1294 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1252.x + (-0.5));
        float _1296 = _1294 * (_1252.y + (-0.5));
        float _1297 = _1294 * (_1252.z + (-0.5));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = _1265 * 0.5;
        float _1302 = _1275 * 0.5;
        float _1303 = _1285 * 0.5;
        float _1304 = dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303));
        float _1309 = (_1304 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1304);
        float _1317 = (dot(vec3(_603, _604, _605), vec3(_1309 * _1301, _1309 * _1302, _1309 * _1303)) + 1.0) * 0.5;
        float _3712 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1326 = sqrt(((_1302 * _1302) + (_1301 * _1301)) + (_1303 * _1303)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3723 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1327 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1328 = _1327 * 2.0;
        float _1332 = (1.0 - _1327) / (_1327 + 1.0);
        float _3734 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
        float _1342 = ((((1.0 - _1333) * (_1328 + 2.0)) * exp2(log2(isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) * (_1328 + 1.0))) + _1333) * _1298;
        float _1343 = _1266 * 0.5;
        float _1344 = _1276 * 0.5;
        float _1345 = _1286 * 0.5;
        float _1346 = dot(vec3(_1343, _1344, _1345), vec3(_1343, _1344, _1345));
        float _1351 = (_1346 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1346);
        float _1359 = (dot(vec3(_603, _604, _605), vec3(_1351 * _1343, _1351 * _1344, _1351 * _1345)) + 1.0) * 0.5;
        float _3745 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1368 = sqrt(((_1344 * _1344) + (_1343 * _1343)) + (_1345 * _1345)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3756 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1370 = _1369 * 2.0;
        float _1374 = (1.0 - _1369) / (_1369 + 1.0);
        float _3767 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1384 = ((((1.0 - _1375) * (_1370 + 2.0)) * exp2(log2(isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * (_1370 + 1.0))) + _1375) * _1299;
        float _1385 = _1267 * 0.5;
        float _1386 = _1277 * 0.5;
        float _1387 = _1287 * 0.5;
        float _1388 = dot(vec3(_1385, _1386, _1387), vec3(_1385, _1386, _1387));
        float _1393 = (_1388 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1388);
        float _1401 = (dot(vec3(_603, _604, _605), vec3(_1393 * _1385, _1393 * _1386, _1393 * _1387)) + 1.0) * 0.5;
        float _3778 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1410 = sqrt(((_1386 * _1386) + (_1385 * _1385)) + (_1387 * _1387)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3789 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
        float _1412 = _1411 * 2.0;
        float _1416 = (1.0 - _1411) / (_1411 + 1.0);
        float _3800 = isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0));
        float _1417 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1426 = ((((1.0 - _1417) * (_1412 + 2.0)) * exp2(log2(isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * (_1412 + 1.0))) + _1417) * _1300;
        _1434 = _1267;
        _1435 = _1266;
        _1436 = _1265;
        _1437 = _1277;
        _1438 = _1276;
        _1439 = _1275;
        _1440 = _1287;
        _1441 = _1286;
        _1442 = _1285;
        _1443 = _1300;
        _1444 = _1299;
        _1445 = _1298;
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0)));
    }
    else
    {
        _1434 = _1125;
        _1435 = _1125;
        _1436 = _1125;
        _1437 = _1125;
        _1438 = _1125;
        _1439 = _1125;
        _1440 = _1125;
        _1441 = _1125;
        _1442 = _1125;
        _1443 = _1125;
        _1444 = _1125;
        _1445 = _1125;
        _1446 = 0.0;
        _1447 = 0.0;
        _1448 = 0.0;
    }
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1137)) + _1137;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1139)) + _1139;
    float _1481 = fma(_1460, cbSceneParam._m0[89u].z, fma(_1459, cbSceneParam._m0[89u].y, _1458 * cbSceneParam._m0[89u].x));
    float _1484 = fma(_1460, cbSceneParam._m0[90u].z, fma(_1459, cbSceneParam._m0[90u].y, _1458 * cbSceneParam._m0[90u].x));
    float _1487 = fma(_1460, cbSceneParam._m0[91u].z, fma(_1459, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1458));
    float _1502 = _761 * 0.5;
    float _1503 = _762 * 0.5;
    float _1504 = _763 * 0.5;
    float _1505 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1508 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1511 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1545;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1518 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1124, _1128, _1131, _1134));
        float _1522 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1526 = dot(vec4(_1502, _1503, _1504, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1533 = dot(vec4(cbModelParam._m0[39u]), vec4(_1502, _1503, _1504, 1.0));
        _1545 = dot(vec3(isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1545 = 1.0;
    }
    float _1556;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1547 = dot(vec4(cbModelParam._m0[40u]), vec4(_1502, _1503, _1504, 1.0));
        _1556 = dot(vec3(isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1556 = 1.0;
    }
    float _1560 = (_1556 * cbModelParam._m0[1u].x) + (_1545 * (1.0 - cbModelParam._m0[1u].x));
    float _1570 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _606);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1570 : min(cbModelParam._m0[25u].z, _1570));
    float _1651;
    float _1653;
    float _1655;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1618 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1622 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1626 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1629 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1632 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1635 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1663;
        if (_1629 > 0.0)
        {
            _1663 = abs((1.0 - _1618) / _1629);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1629 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1618 + 1.0) / _1629);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1663 = frontier_phi_16_14_ladder;
        }
        float _1867;
        if (_1632 > 0.0)
        {
            _1867 = abs((1.0 - _1622) / _1632);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1622 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1867 = frontier_phi_25_21_ladder;
        }
        float _2110;
        if (_1635 > 0.0)
        {
            _2110 = abs((1.0 - _1626) / _1635);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1626 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2110 = frontier_phi_37_32_ladder;
        }
        float _2112 = isnan(_1867) ? _1663 : (isnan(_1663) ? _1867 : min(_1663, _1867));
        float _2113 = isnan(_2110) ? _2112 : (isnan(_2112) ? _2110 : min(_2112, _2110));
        float _2117 = (_2113 * _1629) + _1618;
        float _2118 = (_2113 * _1632) + _1622;
        float _2119 = (_2113 * _1635) + _1626;
        float _2120 = _2113 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2120;
        float _2124 = _2120 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 > _2124) || ((_2118 < _2122) || ((_2117 < _2122) || (_2117 > _2124))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2243 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2119, cbModelParam._m0[9u].z, fma(_2118, cbModelParam._m0[9u].y, _2117 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2119, cbModelParam._m0[10u].z, fma(_2118, cbModelParam._m0[10u].y, _2117 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2119, cbModelParam._m0[11u].z, fma(_2118, cbModelParam._m0[11u].y, _2117 * cbModelParam._m0[11u].x))), _1571);
            frontier_phi_15_37_ladder = _2243.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2243.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2243.x * cbModelParam._m0[1u].y;
        }
        _1651 = frontier_phi_15_37_ladder_2;
        _1653 = frontier_phi_15_37_ladder_1;
        _1655 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1639 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1571);
        _1651 = _1639.x * cbModelParam._m0[1u].y;
        _1653 = _1639.y * cbModelParam._m0[1u].y;
        _1655 = _1639.z * cbModelParam._m0[1u].y;
    }
    float _1659 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _606);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1659 : min(cbModelParam._m0[25u].w, _1659));
    float _1753;
    float _1755;
    float _1757;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1717 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1721 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1725 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1728 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1731 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1734 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _1872;
        if (_1728 > 0.0)
        {
            _1872 = abs((1.0 - _1717) / _1728);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1717 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1872 = frontier_phi_27_23_ladder;
        }
        float _2137;
        if (_1731 > 0.0)
        {
            _2137 = abs((1.0 - _1721) / _1731);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1731 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1721 + 1.0) / _1731);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2137 = frontier_phi_39_34_ladder;
        }
        float _2342;
        if (_1734 > 0.0)
        {
            _2342 = abs((1.0 - _1725) / _1734);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1734 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1725 + 1.0) / _1734);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2342 = frontier_phi_48_45_ladder;
        }
        float _2344 = isnan(_2137) ? _1872 : (isnan(_1872) ? _2137 : min(_1872, _2137));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1728) + _1717;
        float _2350 = (_2345 * _1731) + _1721;
        float _2351 = (_2345 * _1734) + _1725;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2353 = (-1.0) - _2352;
        float _2355 = _2352 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2351 > _2355) || ((_2351 < _2353) || ((_2350 > _2355) || ((_2350 < _2353) || ((_2349 < _2353) || (_2349 > _2355))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2549 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2351, cbModelParam._m0[17u].z, fma(_2350, cbModelParam._m0[17u].y, _2349 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2351, cbModelParam._m0[18u].z, fma(_2350, cbModelParam._m0[18u].y, _2349 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2351, cbModelParam._m0[19u].z, fma(_2350, cbModelParam._m0[19u].y, _2349 * cbModelParam._m0[19u].x))), _1660);
            frontier_phi_24_48_ladder = _2549.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2549.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2549.x * cbModelParam._m0[1u].z;
        }
        _1753 = frontier_phi_24_48_ladder_2;
        _1755 = frontier_phi_24_48_ladder_1;
        _1757 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1660);
        _1753 = _1737.x * cbModelParam._m0[1u].z;
        _1755 = _1737.y * cbModelParam._m0[1u].z;
        _1757 = _1737.z * cbModelParam._m0[1u].z;
    }
    float _1769 = ((((1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_782 * _769)) * _753;
    float _1770 = _1769 * ((cbModelParam._m0[1u].w * (_1753 - _1651)) + _1651);
    float _1771 = _1769 * ((cbModelParam._m0[1u].w * (_1755 - _1653)) + _1653);
    float _1772 = _1769 * ((cbModelParam._m0[1u].w * (_1757 - _1655)) + _1655);
    float _1775 = fma(_1772, cbSceneParam._m0[89u].z, fma(_1771, cbSceneParam._m0[89u].y, _1770 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1772, cbSceneParam._m0[90u].z, fma(_1771, cbSceneParam._m0[90u].y, _1770 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1772, cbSceneParam._m0[91u].z, fma(_1771, cbSceneParam._m0[91u].y, _1770 * cbSceneParam._m0[91u].x));
    uvec4 _1791 = floatBitsToUint(cbInstanceData._m0[_728 + 5u]);
    uint _1793 = _1791.x * 14u;
    uint _1794 = _1793 + 13u;
    float _1801 = _753 + (-1.0);
    float _1806 = (cbLight._m0[_1794].x * _1801) + 1.0;
    float _1807 = (cbLight._m0[_1794].y * _1801) + 1.0;
    float _1808 = (cbLight._m0[_1794].z * _1801) + 1.0;
    float _1809 = (cbLight._m0[_1794].w * _1801) + 1.0;
    uint _1810 = _1793 + 5u;
    float _1816 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1820 = _1793 + 4u;
    float _1826 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1830 = _1793 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_603, _604, _605));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_603, _604, _605));
    float _3936 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _3947 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1810].x * _1816) * _1851) + ((cbLight._m0[_1820].x * _1826) * _1849);
    float _1859 = ((_1816 * cbLight._m0[_1810].y) * _1851) + ((_1826 * cbLight._m0[_1820].y) * _1849);
    float _1860 = ((_1816 * cbLight._m0[_1810].z) * _1851) + ((_1826 * cbLight._m0[_1820].z) * _1849);
    uvec4 _1864 = floatBitsToUint(cbLight._m0[_1793 + 12u]);
    bool _1866 = _1864.x == 0u;
    float _1877;
    float _1879;
    float _1881;
    if (_1866)
    {
        _1877 = _1858;
        _1879 = _1859;
        _1881 = _1860;
    }
    else
    {
        uint _1885 = _1793 + 6u;
        float _1901 = (dot(vec3(cbLight._m0[_1793 + 2u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _1902 = _1901 * _1901;
        float _3958 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1904 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _1877 = (((cbLight._m0[_1885].x * 0.3183098733425140380859375) * _1903) * _1904) + _1858;
        _1879 = (((cbLight._m0[_1885].y * 0.3183098733425140380859375) * _1903) * _1904) + _1859;
        _1881 = (((cbLight._m0[_1885].z * 0.3183098733425140380859375) * _1903) * _1904) + _1860;
    }
    bool _1884 = _1864.y == 0u;
    float _1922;
    float _1924;
    float _1926;
    if (_1884)
    {
        _1922 = _1877;
        _1924 = _1879;
        _1926 = _1881;
    }
    else
    {
        uint _2081 = _1793 + 7u;
        float _2097 = (dot(vec3(cbLight._m0[_1793 + 3u].xyz), vec3(_603, _604, _605)) * 0.5) + 0.5;
        float _2098 = _2097 * _2097;
        float _3974 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2099 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
        float _2100 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _1922 = (((cbLight._m0[_2081].x * 0.3183098733425140380859375) * _2099) * _2100) + _1877;
        _1924 = (((cbLight._m0[_2081].y * 0.3183098733425140380859375) * _2099) * _2100) + _1879;
        _1926 = (((cbLight._m0[_2081].z * 0.3183098733425140380859375) * _2099) * _2100) + _1881;
    }
    uint _1929 = _1793 + 8u;
    float _1942 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1793].w)) * _606) * 0.949999988079071044921875);
    float _1943 = _1942 * _1942;
    float _1944 = cbLight._m0[_1793].x + _682;
    float _1945 = cbLight._m0[_1793].y + _683;
    float _1946 = cbLight._m0[_1793].z + _684;
    float _1950 = inversesqrt(dot(vec3(_1944, _1945, _1946), vec3(_1944, _1945, _1946)));
    float _1951 = _1950 * _1944;
    float _1952 = _1950 * _1945;
    float _1953 = _1950 * _1946;
    float _1954 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1793].xyz));
    float _3990 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
    float _1957 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1958 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _1959 = dot(vec3(_603, _604, _605), vec3(_1951, _1952, _1953));
    float _4012 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
    float _1963 = dot(vec3(cbLight._m0[_1793].xyz), vec3(_1951, _1952, _1953));
    float _4023 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _1967 = _1943 * _1943;
    float _1971 = ((_1962 * _1962) * (_1967 + (-1.0))) + 1.0;
    float _1982 = (exp2(log2(1.0 - (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1983 = 1.0 - _1943;
    float _1994 = (0.5 / (((_1958 * ((_1957 * _1983) + _1943)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _1983) + _1943) * _1957))) * _1957;
    float _4034 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1996 = (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1967 / ((_1971 * _1971) * 3.141590118408203125));
    uint _2007 = _1793 + 9u;
    float _2018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _606) * 0.949999988079071044921875);
    float _2019 = _2018 * _2018;
    float _2020 = cbLight._m0[_1830].x + _682;
    float _2021 = cbLight._m0[_1830].y + _683;
    float _2022 = cbLight._m0[_1830].z + _684;
    float _2026 = inversesqrt(dot(vec3(_2020, _2021, _2022), vec3(_2020, _2021, _2022)));
    float _2027 = _2026 * _2020;
    float _2028 = _2026 * _2021;
    float _2029 = _2026 * _2022;
    float _2030 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_1830].xyz));
    float _4045 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _2034 = dot(vec3(_603, _604, _605), vec3(_2027, _2028, _2029));
    float _4056 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2037 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2038 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_2027, _2028, _2029));
    float _4067 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2042 = _2019 * _2019;
    float _2046 = ((_2037 * _2037) * (_2042 + (-1.0))) + 1.0;
    float _2055 = (exp2(log2(1.0 - (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2056 = 1.0 - _2019;
    float _2066 = (0.5 / (((_1958 * ((_2033 * _2056) + _2019)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2056) + _2019) * _2033))) * _2033;
    float _4078 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2068 = (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))) * (_2042 / ((_2046 * _2046) * 3.141590118408203125));
    float _2078 = (((_2055 * cbLight._m0[_2007].x) * _2068) * _1816) + (((_1982 * cbLight._m0[_1929].x) * _1996) * _1826);
    float _2079 = (((_2055 * cbLight._m0[_2007].y) * _2068) * _1816) + (((_1982 * cbLight._m0[_1929].y) * _1996) * _1826);
    float _2080 = (((_2055 * cbLight._m0[_2007].z) * _2068) * _1816) + (((_1982 * cbLight._m0[_1929].z) * _1996) * _1826);
    float _2142;
    float _2144;
    float _2146;
    if (_1866)
    {
        _2142 = _2078;
        _2144 = _2079;
        _2146 = _2080;
    }
    else
    {
        uint _2148 = _1793 + 2u;
        uint _2152 = _1793 + 10u;
        float _2166 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _606) * 0.949999988079071044921875);
        float _2167 = _2166 * _2166;
        float _2168 = cbLight._m0[_2148].x + _682;
        float _2169 = cbLight._m0[_2148].y + _683;
        float _2170 = cbLight._m0[_2148].z + _684;
        float _2174 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
        float _2175 = _2174 * _2168;
        float _2176 = _2174 * _2169;
        float _2177 = _2174 * _2170;
        float _2178 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2148].xyz));
        float _4089 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2181 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _2182 = dot(vec3(_603, _604, _605), vec3(_2175, _2176, _2177));
        float _4100 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2185 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _2186 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2175, _2176, _2177));
        float _4111 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
        float _2190 = _2167 * _2167;
        float _2194 = ((_2185 * _2185) * (_2190 + (-1.0))) + 1.0;
        float _2203 = (exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2204 = 1.0 - _2167;
        float _2214 = (0.5 / (((_1958 * ((_2181 * _2204) + _2167)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2204) + _2167) * _2181))) * _2181;
        float _4122 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
        float _2216 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2190 / ((_2194 * _2194) * 3.141590118408203125));
        float _2217 = isnan(1.0) ? _1808 : (isnan(_1808) ? 1.0 : min(_1808, 1.0));
        _2142 = (((_2203 * cbLight._m0[_2152].x) * _2216) * _2217) + _2078;
        _2144 = (((_2203 * cbLight._m0[_2152].y) * _2216) * _2217) + _2079;
        _2146 = (((_2203 * cbLight._m0[_2152].z) * _2216) * _2217) + _2080;
    }
    float _2252;
    float _2254;
    float _2256;
    if (_1884)
    {
        _2252 = _2142;
        _2254 = _2144;
        _2256 = _2146;
    }
    else
    {
        uint _2263 = _1793 + 3u;
        uint _2267 = _1793 + 11u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _606) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _682;
        float _2284 = cbLight._m0[_2263].y + _683;
        float _2285 = cbLight._m0[_2263].z + _684;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_603, _604, _605), vec3(cbLight._m0[_2263].xyz));
        float _4138 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
        float _2297 = dot(vec3(_603, _604, _605), vec3(_2290, _2291, _2292));
        float _4149 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4160 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2319 = 1.0 - _2282;
        float _2329 = (0.5 / (((_1958 * ((_2296 * _2319) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_1958 * _2319) + _2282) * _2296))) * _2296;
        float _4171 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
        _2252 = (((_2318 * cbLight._m0[_2267].x) * _2331) * _2332) + _2142;
        _2254 = (((_2318 * cbLight._m0[_2267].y) * _2331) * _2332) + _2144;
        _2256 = (((_2318 * cbLight._m0[_2267].z) * _2331) * _2332) + _2146;
    }
    float _2466;
    float _2468;
    float _2470;
    float _2472;
    float _2474;
    float _2476;
    if (_1791.y == 0u)
    {
        float _2407 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2408 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2407;
        float _2409 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2407;
        float _2410 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2407;
        uvec4 _2422 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2423 = _2422.x;
        uint _2434 = uint((float(_2422.y) * floor(float(uint(cbSceneParam._m0[85u].y * _691) / _2423))) + floor(float(uint(cbSceneParam._m0[85u].x * _690) / _2423)));
        float _2444 = (log2(_2410 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2445 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        uint _2448 = uint(isnan(14.0) ? _2445 : (isnan(_2445) ? 14.0 : min(_2445, 14.0)));
        uvec4 _2453 = texelFetch(g_lightClusterGridBuffer, int(((_2448 << 2u) + (_2434 << 6u)) >> 2u));
        uint _2454 = _2453.x;
        uint _2455 = _2422.z;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        if (((((1u << ((_2455 >> 4u) & 15u)) + 4294967295u) & _2454) == 0u) || ((_2455 & 240u) == 0u))
        {
            _2554 = 0.0;
            _2556 = 0.0;
            _2558 = 0.0;
            _2560 = 0.0;
            _2562 = 0.0;
            _2564 = 0.0;
        }
        else
        {
            float _2555;
            float _2557;
            float _2559;
            float _2561;
            float _2563;
            float _2565;
            float _2698 = 0.0;
            float _2699 = 0.0;
            float _2700 = 0.0;
            float _2701 = 0.0;
            float _2702 = 0.0;
            float _2703 = 0.0;
            uint _2704 = 0u;
            uint _2713;
            bool _2714;
            for (;;)
            {
                _2713 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2704 << 2u)) >> 2u)).x;
                _2714 = _2713 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2714)
                {
                    frontier_phi_63_pred = _2703;
                    frontier_phi_63_pred_1 = _2702;
                    frontier_phi_63_pred_2 = _2701;
                    frontier_phi_63_pred_3 = _2700;
                    frontier_phi_63_pred_4 = _2699;
                    frontier_phi_63_pred_5 = _2698;
                }
                else
                {
                    float _2822;
                    float _2823;
                    float _2824;
                    float _2825;
                    float _2826;
                    float _2827;
                    uint _2828;
                    _2822 = _2698;
                    _2823 = _2699;
                    _2824 = _2700;
                    _2825 = _2701;
                    _2826 = _2702;
                    _2827 = _2703;
                    _2828 = _2713;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    for (;;)
                    {
                        uint _2832 = uint(findLSB(_2828)) + (_2704 << 5u);
                        uint _2829 = (_2828 + 4294967295u) & _2828;
                        uint _2834 = _2832 * 48u;
                        vec4 _2848 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2834)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2834 + 3u)).x));
                        uint _2854 = (_2832 * 48u) + 4u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2854)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2854 + 3u)).x));
                        uint _2873 = (_2832 * 48u) + 8u;
                        vec3 _2884 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x));
                        float _2888 = _2848.x - _2408;
                        float _2889 = _2848.y - _2409;
                        float _2890 = _2848.z - _2410;
                        float _2891 = dot(vec3(_2888, _2889, _2890), vec3(_2888, _2889, _2890));
                        float _2894 = inversesqrt(_2891);
                        float _2895 = _2894 * _2888;
                        float _2896 = _2894 * _2889;
                        float _2897 = _2894 * _2890;
                        float _2898 = dot(vec3(_709, _712, _715), vec3(_2895, _2896, _2897));
                        float _2903 = 1.0 - (_2891 * _2848.w);
                        float _4197 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
                        float _2904 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
                        float _2905 = sqrt(_2891) * _2867.w;
                        float _2908 = 1.39999997615814208984375 / (_2905 + 1.39999997615814208984375);
                        float _2909 = _2908 * _2908;
                        float _2912 = ((1.0 - _2909) * _2898) + _2909;
                        float _2915 = _2905 * _2905;
                        float _2919 = ((isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0))) * _2904) / ((_2915 * 0.699999988079071044921875) + 1.0);
                        float _2923 = (-0.0) - _2408;
                        float _2924 = (-0.0) - _2409;
                        float _2925 = (-0.0) - _2410;
                        float _2929 = inversesqrt(dot(vec3(_2923, _2924, _2925), vec3(_2923, _2924, _2925)));
                        float _2930 = _2929 * _2923;
                        float _2931 = _2929 * _2924;
                        float _2932 = _2929 * _2925;
                        float _2940 = exp2(log2(1.0 / ((_2915 * 3.5) + 5.0)) * 0.25);
                        float _2941 = 1.0 - _769;
                        float _2948 = sqrt(1.0 - ((1.0 - (_2941 * _2941)) * (1.0 - (_2940 * _2940))));
                        float _2949 = _2948 * _2948;
                        float _2950 = _2949 * _2949;
                        float _2951 = _2930 + _2895;
                        float _2952 = _2931 + _2896;
                        float _2953 = _2932 + _2897;
                        float _2957 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
                        float _2961 = dot(vec3(_709, _712, _715), vec3(_2930, _2931, _2932));
                        float _4213 = isnan(0.0) ? _2961 : (isnan(_2961) ? 0.0 : max(_2961, 0.0));
                        float _2964 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
                        float _2965 = dot(vec3(_709, _712, _715), vec3(_2957 * _2951, _2957 * _2952, _2957 * _2953));
                        float _4224 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2968 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
                        float _2972 = ((_2968 * _2968) * (_2950 + (-1.0))) + 1.0;
                        float _2973 = _2908 * _2949;
                        float _2974 = _2973 * _2973;
                        float _2977 = ((1.0 - _2974) * _2898) + _2974;
                        float _4235 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2978 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
                        float _2979 = 1.0 - _2949;
                        float _2989 = (0.5 / (((_2978 * ((_2964 * _2979) + _2949)) + 9.9999999392252902907785028219223e-09) + (((_2978 * _2979) + _2949) * _2964))) * _2978;
                        float _4246 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
                        float _3000 = (((_2950 * 3.1415927410125732421875) * (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) / ((_2972 * _2972) * ((_2915 * 2.1991131305694580078125) + 3.141590118408203125))) * _2904;
                        _2757 = (_2919 * _2867.x) + _2825;
                        _2758 = (_2919 * _2867.y) + _2826;
                        _2759 = (_2919 * _2867.z) + _2827;
                        _2754 = (_3000 * _2884.x) + _2822;
                        _2755 = (_3000 * _2884.y) + _2823;
                        _2756 = (_3000 * _2884.z) + _2824;
                        if (_2829 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2822 = _2754;
                            _2823 = _2755;
                            _2824 = _2756;
                            _2825 = _2757;
                            _2826 = _2758;
                            _2827 = _2759;
                            _2828 = _2829;
                        }
                    }
                    frontier_phi_63_pred = _2759;
                    frontier_phi_63_pred_1 = _2758;
                    frontier_phi_63_pred_2 = _2757;
                    frontier_phi_63_pred_3 = _2756;
                    frontier_phi_63_pred_4 = _2755;
                    frontier_phi_63_pred_5 = _2754;
                }
                _2565 = frontier_phi_63_pred;
                _2563 = frontier_phi_63_pred_1;
                _2561 = frontier_phi_63_pred_2;
                _2559 = frontier_phi_63_pred_3;
                _2557 = frontier_phi_63_pred_4;
                _2555 = frontier_phi_63_pred_5;
                uint _2705 = _2704 + 1u;
                if (_2705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2698 = _2555;
                    _2699 = _2557;
                    _2700 = _2559;
                    _2701 = _2561;
                    _2702 = _2563;
                    _2703 = _2565;
                    _2704 = _2705;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2554 = _2555;
            _2556 = _2557;
            _2558 = _2559;
            _2560 = _2561;
            _2562 = _2563;
            _2564 = _2565;
        }
        uvec4 _2568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2569 = _2568.z;
        uint _2571 = (_2569 >> 8u) & 15u;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        if (((4294967295u << _2571) & _2454) == 0u)
        {
            _2666 = _2554;
            _2668 = _2556;
            _2670 = _2558;
            _2672 = _2560;
            _2674 = _2562;
            _2676 = _2564;
        }
        else
        {
            float _2691 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
            float _2692 = _2691 * _2408;
            float _2693 = _2691 * _2409;
            float _2694 = _2691 * _2410;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2571 < ((_2569 >> 12u) & 15u))
            {
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2805 = _2554;
                float _2806 = _2556;
                float _2807 = _2558;
                float _2808 = _2560;
                float _2809 = _2562;
                float _2810 = _2564;
                uint _2811 = _2571;
                uint _2820;
                bool _2821;
                for (;;)
                {
                    _2820 = texelFetch(g_lightClassification, int((((_2448 << 5u) + (_2434 << 9u)) + (_2811 << 2u)) >> 2u)).x;
                    _2821 = _2820 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2821)
                    {
                        frontier_phi_69_pred = _2810;
                        frontier_phi_69_pred_1 = _2809;
                        frontier_phi_69_pred_2 = _2808;
                        frontier_phi_69_pred_3 = _2807;
                        frontier_phi_69_pred_4 = _2806;
                        frontier_phi_69_pred_5 = _2805;
                    }
                    else
                    {
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3300;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3018 = _2805;
                        float _3019 = _2806;
                        float _3020 = _2807;
                        float _3021 = _2808;
                        float _3022 = _2809;
                        float _3023 = _2810;
                        uint _3024 = _2820;
                        uint _3025;
                        vec4 _3050;
                        float _3051;
                        vec4 _3066;
                        vec3 _3078;
                        vec4 _3093;
                        vec4 _3109;
                        float _3156;
                        bool _3157;
                        for (;;)
                        {
                            uint _3035 = ((_2811 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3024));
                            _3025 = (_3024 + 4294967295u) & _3024;
                            uint _3037 = _3035 * 40u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            _3051 = _3050.w;
                            uint _3053 = (_3035 * 40u) + 4u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3068 = (_3035 * 40u) + 8u;
                            _3078 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x));
                            uint _3080 = (_3035 * 40u) + 16u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3096 = (_3035 * 40u) + 20u;
                            _3109 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3096)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3096 + 3u)).x));
                            uint _3112 = (_3035 * 40u) + 24u;
                            vec4 _3125 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3112)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3112 + 3u)).x));
                            uint _3131 = (_3035 * 40u) + 28u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            _3156 = fma(_2410, _3144.z, fma(_2409, _3144.y, _3144.x * _2408)) + _3144.w;
                            _3157 = !((fma(_2410, _3125.z, fma(_2409, _3125.y, _3125.x * _2408)) + _3125.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3157)
                            {
                                float _3184 = _3050.x - _2408;
                                float _3185 = _3050.y - _2409;
                                float _3186 = _3050.z - _2410;
                                float _3187 = dot(vec3(_3184, _3185, _3186), vec3(_3184, _3185, _3186));
                                float _3190 = inversesqrt(_3187);
                                float _3191 = _3190 * _3184;
                                float _3192 = _3190 * _3185;
                                float _3193 = _3190 * _3186;
                                float _3197 = 1.0 - (_3187 / (_3051 * _3051));
                                float _4257 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
                                float _3202 = sqrt(_3187) * _3066.w;
                                float _3204 = 1.39999997615814208984375 / (_3202 + 1.39999997615814208984375);
                                float _3205 = _3204 * _3204;
                                float _3208 = ((1.0 - _3205) * dot(vec3(_3191, _3192, _3193), vec3(_709, _712, _715))) + _3205;
                                float _3211 = _3202 * _3202;
                                float _3215 = (fma(_2410, _3093.z, fma(_2409, _3093.y, _3093.x * _2408)) + _3093.w) / _3156;
                                float _3216 = (fma(_2410, _3109.z, fma(_2409, _3109.y, _3109.x * _2408)) + _3109.w) / _3156;
                                float _3220 = 1.0 - dot(vec2(_3215, _3216), vec2(_3215, _3216));
                                float _4273 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
                                float _3221 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
                                float _3222 = _3221 * (((isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * _3198) / ((_3211 * 0.699999988079071044921875) + 1.0));
                                float _3234 = exp2(log2(1.0 / ((_3211 * 3.5) + 5.0)) * 0.25);
                                float _3235 = 1.0 - _769;
                                float _3242 = sqrt(1.0 - ((1.0 - (_3235 * _3235)) * (1.0 - (_3234 * _3234))));
                                float _3243 = _3242 * _3242;
                                float _3244 = _3243 * _3243;
                                float _3245 = _3191 - _2692;
                                float _3246 = _3192 - _2693;
                                float _3247 = _3193 - _2694;
                                float _3251 = inversesqrt(dot(vec3(_3245, _3246, _3247), vec3(_3245, _3246, _3247)));
                                float _3255 = dot(vec3(_709, _712, _715), vec3((-0.0) - _2692, (-0.0) - _2693, (-0.0) - _2694));
                                float _4284 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0));
                                float _3258 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                                float _3259 = dot(vec3(_709, _712, _715), vec3(_3251 * _3245, _3251 * _3246, _3251 * _3247));
                                float _4295 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0));
                                float _3262 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                                float _3266 = ((_3262 * _3262) * (_3244 + (-1.0))) + 1.0;
                                float _3267 = _3204 * _3243;
                                float _3268 = _3267 * _3267;
                                float _3274 = ((1.0 - _3268) * dot(vec3(_709, _712, _715), vec3(_3191, _3192, _3193))) + _3268;
                                float _4306 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3275 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                                float _3276 = 1.0 - _3243;
                                float _3286 = (0.5 / (((_3275 * ((_3258 * _3276) + _3243)) + 9.9999999392252902907785028219223e-09) + (((_3275 * _3276) + _3243) * _3258))) * _3275;
                                float _4317 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3296 = (_3221 * _3198) * (((_3244 * 3.1415927410125732421875) * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) / ((_3266 * _3266) * ((_3211 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3222 * _3066.z;
                                frontier_phi_75_pred_1 = _3222 * _3066.y;
                                frontier_phi_75_pred_2 = _3222 * _3066.x;
                                frontier_phi_75_pred_3 = _3296 * _3078.z;
                                frontier_phi_75_pred_4 = _3296 * _3078.y;
                                frontier_phi_75_pred_5 = _3296 * _3078.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3305 = frontier_phi_75_pred;
                            _3304 = frontier_phi_75_pred_1;
                            _3303 = frontier_phi_75_pred_2;
                            _3302 = frontier_phi_75_pred_3;
                            _3301 = frontier_phi_75_pred_4;
                            _3300 = frontier_phi_75_pred_5;
                            _3008 = _3303 + _3021;
                            _3009 = _3304 + _3022;
                            _3010 = _3305 + _3023;
                            _3005 = _3300 + _3018;
                            _3006 = _3301 + _3019;
                            _3007 = _3302 + _3020;
                            if (_3025 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3018 = _3005;
                                _3019 = _3006;
                                _3020 = _3007;
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3025;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3010;
                        frontier_phi_69_pred_1 = _3009;
                        frontier_phi_69_pred_2 = _3008;
                        frontier_phi_69_pred_3 = _3007;
                        frontier_phi_69_pred_4 = _3006;
                        frontier_phi_69_pred_5 = _3005;
                    }
                    _2677 = frontier_phi_69_pred;
                    _2675 = frontier_phi_69_pred_1;
                    _2673 = frontier_phi_69_pred_2;
                    _2671 = frontier_phi_69_pred_3;
                    _2669 = frontier_phi_69_pred_4;
                    _2667 = frontier_phi_69_pred_5;
                    uint _2812 = _2811 + 1u;
                    if (_2812 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2805 = _2667;
                        _2806 = _2669;
                        _2807 = _2671;
                        _2808 = _2673;
                        _2809 = _2675;
                        _2810 = _2677;
                        _2811 = _2812;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2677;
                frontier_phi_57_58_ladder_1 = _2675;
                frontier_phi_57_58_ladder_2 = _2673;
                frontier_phi_57_58_ladder_3 = _2671;
                frontier_phi_57_58_ladder_4 = _2669;
                frontier_phi_57_58_ladder_5 = _2667;
            }
            else
            {
                frontier_phi_57_58_ladder = _2564;
                frontier_phi_57_58_ladder_1 = _2562;
                frontier_phi_57_58_ladder_2 = _2560;
                frontier_phi_57_58_ladder_3 = _2558;
                frontier_phi_57_58_ladder_4 = _2556;
                frontier_phi_57_58_ladder_5 = _2554;
            }
            _2666 = frontier_phi_57_58_ladder_5;
            _2668 = frontier_phi_57_58_ladder_4;
            _2670 = frontier_phi_57_58_ladder_3;
            _2672 = frontier_phi_57_58_ladder_2;
            _2674 = frontier_phi_57_58_ladder_1;
            _2676 = frontier_phi_57_58_ladder;
        }
        float _2681 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2466 = (_2681 * _2672) + _1922;
        _2468 = (_2681 * _2674) + _1924;
        _2470 = (_2681 * _2676) + _1926;
        _2472 = ((_2666 * 0.039999999105930328369140625) * _2681) + _2252;
        _2474 = ((_2668 * 0.039999999105930328369140625) * _2681) + _2254;
        _2476 = ((_2670 * 0.039999999105930328369140625) * _2681) + _2256;
    }
    else
    {
        _2466 = _1922;
        _2468 = _1924;
        _2470 = _1926;
        _2472 = _2252;
        _2474 = _2254;
        _2476 = _2256;
    }
    float _4333 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _4344 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4355 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    uint _2496 = _728 + 6u;
    float _2504 = _690 / cbSceneParam._m0[86u].x;
    float _2505 = _691 / cbSceneParam._m0[86u].y;
    vec4 _2519 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2504, _2505, (log2((isnan(cbSceneParam._m0[77u].w) ? _625 : (isnan(_625) ? cbSceneParam._m0[77u].w : min(_625, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2521 = _2519.x;
    float _2522 = _2519.y;
    float _2523 = _2519.z;
    float _2524 = _2519.w;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_625 > cbSceneParam._m0[78u].w)
    {
        float _2579 = isnan(_625) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _625 : min(cbSceneParam._m0[80u].w, _625));
        float _2580 = _2579 / _625;
        float _2591 = _2580 * _675;
        float _2592 = _676 * _2580;
        float _2593 = (-0.0) - _2592;
        float _2594 = _2580 * _677;
        float _2596 = (cbSceneParam._m0[77u].w * _2593) / _2579;
        float _2597 = _2596 + cbSceneParam._m0[79u].w;
        float _2598 = cbSceneParam._m0[79u].w - _2592;
        float _2604 = sqrt(((_2591 * _2591) + (_2592 * _2592)) + (_2594 * _2594));
        float _2607 = (1.0 - (cbSceneParam._m0[77u].w / _2579)) * _2604;
        float _2612 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2614 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2767;
        if (abs((_2593 - _2596) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2767 = ((((_2597 > 0.0) ? exp2(_2612 * _2597) : (2.0 - exp2(_2614 * _2597))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2607;
        }
        else
        {
            float _2727 = 1.0 / cbSceneParam._m0[80u].x;
            float _2728 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : max(_2597, _2598));
            float _2729 = isnan(_2598) ? _2597 : (isnan(_2597) ? _2598 : min(_2597, _2598));
            float _2738 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : min(_2728, 0.0));
            float _2739 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : min(_2729, 0.0));
            _2767 = ((abs(_2604 / _2593) * cbSceneParam._m0[80u].y) * ((((_2738 - _2739) * 2.0) - ((exp2(_2612 * (isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0)))) - exp2(_2612 * (isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0))))) * _2727)) - ((exp2(_2614 * _2738) - exp2(_2614 * _2739)) * _2727))) + (_2607 * cbSceneParam._m0[80u].z);
        }
        vec4 _2769 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2504, _2505, 1.0), 0.0);
        float _2778 = exp2((_2767 * (-1.44269502162933349609375)) * (1.0 - _2769.w));
        float _2779 = log2(_2778);
        float _2795 = log2(_2524);
        _2616 = (exp2(_2795 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].x)) * _2769.x) / cbSceneParam._m0[78u].x)) + _2521;
        _2618 = (exp2(_2795 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].y)) * _2769.y) / cbSceneParam._m0[78u].y)) + _2522;
        _2620 = (exp2(_2795 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2779 * cbSceneParam._m0[78u].z)) * _2769.z) / cbSceneParam._m0[78u].z)) + _2523;
        _2622 = _2778 * _2524;
    }
    else
    {
        _2616 = _2521;
        _2618 = _2522;
        _2620 = _2523;
        _2622 = _2524;
    }
    float _2634 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2635 = _2634 == 3.0;
    float _2636 = log2(_2622);
    float _2643 = exp2(_2636 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_2466 + ((isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0))) * _753))) + ((_2472 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1560)) * cbPerFrame._m0[3u].x));
    float _2644 = exp2(_2636 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0))) * (_2468 + ((isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))) * _753))) + ((_2474 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1560)) * cbPerFrame._m0[3u].x));
    float _2645 = exp2(_2636 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * (_2470 + ((isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))) * _753))) + ((_2476 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1560)) * cbPerFrame._m0[3u].x));
    float _2654 = (_2634 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2654 * (_2635 ? _2643 : (_2643 + (cbSceneParam._m0[72u].w * _2616)));
    SV_Target.y = _2654 * (_2635 ? _2644 : (_2644 + (cbSceneParam._m0[72u].w * _2618)));
    SV_Target.z = _2654 * (_2635 ? _2645 : (_2645 + (cbSceneParam._m0[72u].w * _2620)));
    SV_Target.w = cbInstanceData._m0[_2496].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2496].w;
}


