#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[16];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 11) uniform sampler SS_ClampAniso;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1172;
float _3561;
float _3562;
float _3563;
float _3564;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    vec4 _257 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _263 = _257.x * cbMtdParam._m0[10u].x;
    float _264 = _257.y * cbMtdParam._m0[10u].y;
    float _265 = _257.z * cbMtdParam._m0[10u].z;
    vec4 _284 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    vec4 _303 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_0, SS_ClampAniso), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _331 = cbMtdParam._m0[15u].x * texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w)).x;
    float _342 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _303.x) * 2.0) - _331)) + 1.0;
    float _3573 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    float _343 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _350 = (_343 * ((_284.x * cbMtdParam._m0[11u].x) - _263)) + _263;
    float _351 = (_343 * ((_284.y * cbMtdParam._m0[11u].y) - _264)) + _264;
    float _352 = (_343 * ((_284.z * cbMtdParam._m0[11u].z) - _265)) + _265;
    vec4 _370 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _383 = (((((1.0 - _303.y) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].z) + 1.0;
    float _3584 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _384 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _391 = (((_370.x * cbMtdParam._m0[12u].x) - _350) * _384) + _350;
    float _392 = (_384 * ((_370.y * cbMtdParam._m0[12u].y) - _351)) + _351;
    float _393 = (_384 * ((_370.z * cbMtdParam._m0[12u].z) - _352)) + _352;
    vec4 _411 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _424 = (((((1.0 - _303.z) * 2.0) - _331) * (-1.39999997615814208984375)) * cbMtdParam._m0[14u].w) + 1.0;
    float _3595 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    vec4 _452 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_13, SS_ClampAniso), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _460 = ((((((_411.x * cbMtdParam._m0[13u].x) - _391) * _425) + _391) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _452.x;
    float _463 = ((((_425 * ((_411.y * cbMtdParam._m0[13u].y) - _392)) + _392) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _452.y;
    float _466 = ((((_425 * ((_411.z * cbMtdParam._m0[13u].z) - _393)) + _393) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _452.z;
    vec4 _479 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _481 = _479.x;
    float _482 = _479.y;
    float _483 = _479.z;
    vec4 _495 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _506 = ((_495.x - _481) * _343) + _481;
    float _507 = ((_495.y - _482) * _343) + _482;
    float _508 = ((_495.z - _483) * _343) + _483;
    vec4 _521 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _532 = ((_521.x - _506) * _384) + _506;
    float _533 = ((_521.y - _507) * _384) + _507;
    float _534 = ((_521.z - _508) * _384) + _508;
    vec4 _547 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _560 = ((_547.z - _534) * _425) + _534;
    float _563 = ((((_547.x - _532) * _425) + _532) * 2.0) + (-1.0);
    float _565 = ((((_547.y - _533) * _425) + _533) * 2.0) + (-1.0);
    float _566 = dot(vec2(_563, _565), vec2(_563, _565));
    float _3606 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _571 = sqrt(1.0 - (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))));
    vec4 _584 = texture(sampler2D(M_AMSN_V_Mb4_3Mask_Ov_AN_snp_0_Texture2D_7, SS_ClampAniso), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _594 = (((_584.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _563;
    float _595 = (((_584.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].y) + _565;
    float _598 = fma(_571, _235, fma(_595, _227 * TANGENT.x, (_213 * _206) * _594));
    float _601 = fma(_571, _236, fma(_595, _227 * TANGENT.y, (_213 * _207) * _594));
    float _604 = fma(_571, _237, fma(_595, _227 * TANGENT.z, (_213 * _208) * _594));
    float _608 = inversesqrt(dot(vec3(_598, _601, _604), vec3(_598, _601, _604)));
    float _609 = _608 * _598;
    float _610 = _608 * _601;
    float _611 = _608 * _604;
    float _3617 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _612 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _3639 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _3650 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _631 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _671 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _681 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _671);
    float _682 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _671);
    float _683 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _671);
    float _687 = inversesqrt(dot(vec3(_681, _682, _683), vec3(_681, _682, _683)));
    float _688 = _681 * _687;
    float _689 = _682 * _687;
    float _690 = _683 * _687;
    vec4 _695 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _697 = _695.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _851 = sqrt(((_681 * _681) + (_682 * _682)) + (_683 * _683));
        float _857 = (cbMatDynParam._m0[5u].x * _851) + cbMatDynParam._m0[5u].y;
        float _3661 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _862 = (cbMatDynParam._m0[5u].z * _851) + cbMatDynParam._m0[5u].w;
        float _3672 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) - _858)) + _858) < ((_697 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _708 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _709 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_611, cbSceneParam._m0[5u].z, fma(_610, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _609));
    float _730 = fma(_611, cbSceneParam._m0[6u].z, fma(_610, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _609));
    float _733 = fma(_611, cbSceneParam._m0[7u].z, fma(_610, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _609));
    uint _746 = uint(roundEven(NORMAL.w)) * 13u;
    uint _747 = _746 + 9u;
    uint _748 = _747 + uint(cbMatDynParam._m0[0u].w);
    float _754 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_748].x;
    float _755 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_748].y;
    float _756 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_748].z;
    float _3683 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    float _3694 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    vec4 _768 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _708, cbSceneParam._m0[86u].y * _709));
    float _771 = _768.x * TEXCOORD.z;
    float _772 = dot(vec3(_609, _610, _611), vec3(_688, _689, _690));
    float _775 = _772 * 2.0;
    float _779 = (_775 * _609) - _688;
    float _780 = (_775 * _610) - _689;
    float _781 = (_775 * _611) - _690;
    float _785 = abs(dot(vec3(_688, _689, _690), vec3(_609, _610, _611)));
    float _3716 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
    float _787 = sqrt(_612);
    float _800 = exp2((_787 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_787 * 3.0));
    float _832 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _836 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _840 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1171;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _896 = fma(_840, cbModelParam._m0[26u].z, fma(_836, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _832));
        float _900 = fma(_840, cbModelParam._m0[27u].z, fma(_836, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _832));
        float _904 = fma(_840, cbModelParam._m0[28u].z, fma(_836, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _832));
        float _929 = _832 + _609;
        float _930 = _836 + _610;
        float _931 = _840 + _611;
        float _941 = fma(_931, cbModelParam._m0[26u].z, fma(_930, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _929)) - _896;
        float _942 = fma(_931, cbModelParam._m0[27u].z, fma(_930, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _929)) - _900;
        float _943 = fma(_931, cbModelParam._m0[28u].z, fma(_930, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _929)) - _904;
        float _947 = inversesqrt(dot(vec3(_941, _942, _943), vec3(_941, _942, _943)));
        float _960 = ((_947 * _941) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_896 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_947 * _942) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_900 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _962 = ((_947 * _943) / cbModelParam._m0[34u].z) + ((((((_904 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _979 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        vec4 _986 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_960, _961, _962), 0.0);
        float _999 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_965.x + (-0.5));
        float _1001 = _999 * (_965.y + (-0.5));
        float _1002 = _999 * (_965.z + (-0.5));
        float _1009 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_972.x + (-0.5));
        float _1011 = _1009 * (_972.y + (-0.5));
        float _1012 = _1009 * (_972.z + (-0.5));
        float _1019 = exp2((_979.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_979.x + (-0.5));
        float _1021 = _1019 * (_979.y + (-0.5));
        float _1022 = _1019 * (_979.z + (-0.5));
        float _1029 = exp2((_986.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_986.x + (-0.5));
        float _1031 = _1029 * (_986.y + (-0.5));
        float _1032 = _1029 * (_986.z + (-0.5));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = _1000 * 0.5;
        float _1037 = _1010 * 0.5;
        float _1038 = _1020 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1053 = (dot(vec3(_609, _610, _611), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1063 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3764 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1065 + 1.0))) + _1070) * _1033;
        float _1080 = _1001 * 0.5;
        float _1081 = _1011 * 0.5;
        float _1082 = _1021 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_609, _610, _611), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3797 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1107 + 1.0))) + _1112) * _1034;
        float _1122 = _1002 * 0.5;
        float _1123 = _1012 * 0.5;
        float _1124 = _1022 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_609, _610, _611), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3830 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1149 + 1.0))) + _1154) * _1035;
        _1171 = _1002;
        _1173 = _1001;
        _1174 = _1000;
        _1175 = _1012;
        _1176 = _1011;
        _1177 = _1010;
        _1178 = _1022;
        _1179 = _1021;
        _1180 = _1020;
        _1181 = _1035;
        _1182 = _1034;
        _1183 = _1033;
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1186 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
    }
    else
    {
        _1171 = _1172;
        _1173 = _1172;
        _1174 = _1172;
        _1175 = _1172;
        _1176 = _1172;
        _1177 = _1172;
        _1178 = _1172;
        _1179 = _1172;
        _1180 = _1172;
        _1181 = _1172;
        _1182 = _1172;
        _1183 = _1172;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1215 = fma(_840, cbModelParam._m0[30u].z, fma(_836, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _832));
        float _1219 = fma(_840, cbModelParam._m0[31u].z, fma(_836, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _832));
        float _1223 = fma(_840, cbModelParam._m0[32u].z, fma(_836, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _832));
        float _1246 = _832 + _609;
        float _1247 = _836 + _610;
        float _1248 = _840 + _611;
        float _1258 = fma(_1248, cbModelParam._m0[30u].z, fma(_1247, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1246)) - _1215;
        float _1259 = fma(_1248, cbModelParam._m0[31u].z, fma(_1247, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1246)) - _1219;
        float _1260 = fma(_1248, cbModelParam._m0[32u].z, fma(_1247, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1246)) - _1223;
        float _1264 = inversesqrt(dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260)));
        float _1277 = ((_1264 * _1258) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1215 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1264 * _1259) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1219 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1279 = ((_1264 * _1260) / cbModelParam._m0[35u].z) + ((((((_1223 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1277, _1278, _1279), 0.0);
        float _1314 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1315 = _1314 * (_1281.x + (-0.5));
        float _1316 = _1314 * (_1281.y + (-0.5));
        float _1317 = _1314 * (_1281.z + (-0.5));
        float _1324 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1288.x + (-0.5));
        float _1326 = _1324 * (_1288.y + (-0.5));
        float _1327 = _1324 * (_1288.z + (-0.5));
        float _1334 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1295.x + (-0.5));
        float _1336 = _1334 * (_1295.y + (-0.5));
        float _1337 = _1334 * (_1295.z + (-0.5));
        float _1344 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1302.x + (-0.5));
        float _1346 = _1344 * (_1302.y + (-0.5));
        float _1347 = _1344 * (_1302.z + (-0.5));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1351 = _1315 * 0.5;
        float _1352 = _1325 * 0.5;
        float _1353 = _1335 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_609, _610, _611), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _3893 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1378 + 1.0))) + _1383) * _1348;
        float _1393 = _1316 * 0.5;
        float _1394 = _1326 * 0.5;
        float _1395 = _1336 * 0.5;
        float _1396 = dot(vec3(_1393, _1394, _1395), vec3(_1393, _1394, _1395));
        float _1401 = (_1396 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1396);
        float _1409 = (dot(vec3(_609, _610, _611), vec3(_1401 * _1393, _1401 * _1394, _1401 * _1395)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1418 = sqrt(((_1394 * _1394) + (_1393 * _1393)) + (_1395 * _1395)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1420 = _1419 * 2.0;
        float _1424 = (1.0 - _1419) / (_1419 + 1.0);
        float _3926 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1434 = ((((1.0 - _1425) * (_1420 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1420 + 1.0))) + _1425) * _1349;
        float _1435 = _1317 * 0.5;
        float _1436 = _1327 * 0.5;
        float _1437 = _1337 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_609, _610, _611), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3937 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1350 + 9.9999997473787516355514526367188e-06);
        float _3948 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3959 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1462 + 1.0))) + _1467) * _1350;
        _1484 = _1317;
        _1485 = _1316;
        _1486 = _1315;
        _1487 = _1327;
        _1488 = _1326;
        _1489 = _1325;
        _1490 = _1337;
        _1491 = _1336;
        _1492 = _1335;
        _1493 = _1350;
        _1494 = _1349;
        _1495 = _1348;
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0)));
        _1498 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
    }
    else
    {
        _1484 = _1172;
        _1485 = _1172;
        _1486 = _1172;
        _1487 = _1172;
        _1488 = _1172;
        _1489 = _1172;
        _1490 = _1172;
        _1491 = _1172;
        _1492 = _1172;
        _1493 = _1172;
        _1494 = _1172;
        _1495 = _1172;
        _1496 = 0.0;
        _1497 = 0.0;
        _1498 = 0.0;
    }
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1184)) + _1184;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1185)) + _1185;
    float _1510 = (cbModelParam._m0[1u].x * (_1498 - _1186)) + _1186;
    float _1531 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1508));
    float _1552 = _779 * 0.5;
    float _1553 = _780 * 0.5;
    float _1554 = _781 * 0.5;
    float _1555 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1486, _1489, _1492, _1495));
    float _1558 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1561 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1595;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1568 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1171, _1175, _1178, _1181));
        float _1572 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1576 = dot(vec4(_1552, _1553, _1554, 1.0), vec4(_1174, _1177, _1180, _1183));
        float _1583 = dot(vec4(cbModelParam._m0[39u]), vec4(_1552, _1553, _1554, 1.0));
        _1595 = dot(vec3(isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1595 = 1.0;
    }
    float _1606;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1597 = dot(vec4(cbModelParam._m0[40u]), vec4(_1552, _1553, _1554, 1.0));
        _1606 = dot(vec3(isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1606 = 1.0;
    }
    float _1610 = (_1606 * cbModelParam._m0[1u].x) + (_1595 * (1.0 - cbModelParam._m0[1u].x));
    float _1620 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _612);
    float _1621 = isnan(_1620) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1620 : min(cbModelParam._m0[25u].z, _1620));
    float _1701;
    float _1703;
    float _1705;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1668 = fma(_840, cbModelParam._m0[13u].z, fma(_836, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _832)) + cbModelParam._m0[13u].w;
        float _1672 = fma(_840, cbModelParam._m0[14u].z, fma(_836, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _832)) + cbModelParam._m0[14u].w;
        float _1676 = fma(_840, cbModelParam._m0[15u].z, fma(_836, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _832)) + cbModelParam._m0[15u].w;
        float _1679 = fma(_781, cbModelParam._m0[13u].z, fma(_780, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779));
        float _1682 = fma(_781, cbModelParam._m0[14u].z, fma(_780, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779));
        float _1685 = fma(_781, cbModelParam._m0[15u].z, fma(_780, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779));
        float _1713;
        if (_1679 > 0.0)
        {
            _1713 = abs((1.0 - _1668) / _1679);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1679 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1668 + 1.0) / _1679);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1713 = frontier_phi_19_17_ladder;
        }
        float _1938;
        if (_1682 > 0.0)
        {
            _1938 = abs((1.0 - _1672) / _1682);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1682 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1672 + 1.0) / _1682);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1938 = frontier_phi_28_24_ladder;
        }
        float _2184;
        if (_1685 > 0.0)
        {
            _2184 = abs((1.0 - _1676) / _1685);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1685 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1676 + 1.0) / _1685);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2184 = frontier_phi_40_35_ladder;
        }
        float _2186 = isnan(_1938) ? _1713 : (isnan(_1713) ? _1938 : min(_1713, _1938));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1679) + _1668;
        float _2192 = (_2187 * _1682) + _1672;
        float _2193 = (_2187 * _1685) + _1676;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2196 = (-1.0) - _2194;
        float _2198 = _2194 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2193 > _2198) || ((_2193 < _2196) || ((_2192 > _2198) || ((_2192 < _2196) || ((_2191 < _2196) || (_2191 > _2198))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2193, cbModelParam._m0[9u].z, fma(_2192, cbModelParam._m0[9u].y, _2191 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2193, cbModelParam._m0[10u].z, fma(_2192, cbModelParam._m0[10u].y, _2191 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2193, cbModelParam._m0[11u].z, fma(_2192, cbModelParam._m0[11u].y, _2191 * cbModelParam._m0[11u].x))), _1621);
            frontier_phi_18_40_ladder = _2317.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2317.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2317.x * cbModelParam._m0[1u].y;
        }
        _1701 = frontier_phi_18_40_ladder_2;
        _1703 = frontier_phi_18_40_ladder_1;
        _1705 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1689 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_779, _780, _781), _1621);
        _1701 = _1689.x * cbModelParam._m0[1u].y;
        _1703 = _1689.y * cbModelParam._m0[1u].y;
        _1705 = _1689.z * cbModelParam._m0[1u].y;
    }
    float _1709 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _612);
    float _1710 = isnan(_1709) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1709 : min(cbModelParam._m0[25u].w, _1709));
    float _1803;
    float _1805;
    float _1807;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1767 = fma(_840, cbModelParam._m0[21u].z, fma(_836, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _832)) + cbModelParam._m0[21u].w;
        float _1771 = fma(_840, cbModelParam._m0[22u].z, fma(_836, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _832)) + cbModelParam._m0[22u].w;
        float _1775 = fma(_840, cbModelParam._m0[23u].z, fma(_836, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _832)) + cbModelParam._m0[23u].w;
        float _1778 = fma(_781, cbModelParam._m0[21u].z, fma(_780, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779));
        float _1781 = fma(_781, cbModelParam._m0[22u].z, fma(_780, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779));
        float _1784 = fma(_781, cbModelParam._m0[23u].z, fma(_780, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779));
        float _1943;
        if (_1778 > 0.0)
        {
            _1943 = abs((1.0 - _1767) / _1778);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1767 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1943 = frontier_phi_30_26_ladder;
        }
        float _2211;
        if (_1781 > 0.0)
        {
            _2211 = abs((1.0 - _1771) / _1781);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1771 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2211 = frontier_phi_42_37_ladder;
        }
        float _2416;
        if (_1784 > 0.0)
        {
            _2416 = abs((1.0 - _1775) / _1784);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1784 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1775 + 1.0) / _1784);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2416 = frontier_phi_51_48_ladder;
        }
        float _2418 = isnan(_2211) ? _1943 : (isnan(_1943) ? _2211 : min(_1943, _2211));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1778) + _1767;
        float _2424 = (_2419 * _1781) + _1771;
        float _2425 = (_2419 * _1784) + _1775;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2427 = (-1.0) - _2426;
        float _2429 = _2426 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2425 > _2429) || ((_2425 < _2427) || ((_2424 > _2429) || ((_2424 < _2427) || ((_2423 < _2427) || (_2423 > _2429))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2623 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2425, cbModelParam._m0[17u].z, fma(_2424, cbModelParam._m0[17u].y, _2423 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2425, cbModelParam._m0[18u].z, fma(_2424, cbModelParam._m0[18u].y, _2423 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2425, cbModelParam._m0[19u].z, fma(_2424, cbModelParam._m0[19u].y, _2423 * cbModelParam._m0[19u].x))), _1710);
            frontier_phi_27_51_ladder = _2623.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2623.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2623.x * cbModelParam._m0[1u].z;
        }
        _1803 = frontier_phi_27_51_ladder_2;
        _1805 = frontier_phi_27_51_ladder_1;
        _1807 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_779, _780, _781), _1710);
        _1803 = _1787.x * cbModelParam._m0[1u].z;
        _1805 = _1787.y * cbModelParam._m0[1u].z;
        _1807 = _1787.z * cbModelParam._m0[1u].z;
    }
    float _1819 = ((((1.0 - _800) * ((_787 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_800 * _787)) * _771;
    float _1820 = _1819 * ((cbModelParam._m0[1u].w * (_1803 - _1701)) + _1701);
    float _1821 = _1819 * ((cbModelParam._m0[1u].w * (_1805 - _1703)) + _1703);
    float _1822 = _1819 * ((cbModelParam._m0[1u].w * (_1807 - _1705)) + _1705);
    float _1825 = fma(_1822, cbSceneParam._m0[89u].z, fma(_1821, cbSceneParam._m0[89u].y, _1820 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1822, cbSceneParam._m0[90u].z, fma(_1821, cbSceneParam._m0[90u].y, _1820 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1822, cbSceneParam._m0[91u].z, fma(_1821, cbSceneParam._m0[91u].y, _1820 * cbSceneParam._m0[91u].x));
    vec4 _1839 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_708, _709));
    float _1841 = _1839.w;
    float _1853 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1841);
    float _1854 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1841);
    float _1855 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1841);
    uvec4 _1859 = floatBitsToUint(cbInstanceData._m0[_746 + 5u]);
    uint _1861 = _1859.x * 14u;
    uint _1862 = _1861 + 13u;
    float _1869 = _771 + (-1.0);
    float _1874 = (cbLight._m0[_1862].x * _1869) + 1.0;
    float _1875 = (cbLight._m0[_1862].y * _1869) + 1.0;
    float _1876 = (cbLight._m0[_1862].z * _1869) + 1.0;
    float _1877 = (cbLight._m0[_1862].w * _1869) + 1.0;
    uint _1878 = _1861 + 5u;
    float _1884 = isnan(1.0) ? _1875 : (isnan(_1875) ? 1.0 : min(_1875, 1.0));
    uint _1888 = _1861 + 4u;
    float _1897 = isnan(1.0) ? _1874 : (isnan(_1874) ? 1.0 : min(_1874, 1.0));
    uint _1901 = _1861 | 1u;
    float _1912 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_609, _610, _611));
    float _1915 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_609, _610, _611));
    float _4095 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _4106 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1920 = (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))) * 0.3183098733425140380859375;
    float _1922 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * 0.3183098733425140380859375;
    float _1929 = ((cbLight._m0[_1878].x * _1884) * _1922) + (((cbLight._m0[_1888].x * _1853) * _1897) * _1920);
    float _1930 = ((_1884 * cbLight._m0[_1878].y) * _1922) + (((cbLight._m0[_1888].y * _1854) * _1897) * _1920);
    float _1931 = ((_1884 * cbLight._m0[_1878].z) * _1922) + (((cbLight._m0[_1888].z * _1855) * _1897) * _1920);
    uvec4 _1935 = floatBitsToUint(cbLight._m0[_1861 + 12u]);
    bool _1937 = _1935.x == 0u;
    float _1948;
    float _1950;
    float _1952;
    if (_1937)
    {
        _1948 = _1929;
        _1950 = _1930;
        _1952 = _1931;
    }
    else
    {
        uint _1956 = _1861 + 6u;
        float _1972 = (dot(vec3(cbLight._m0[_1861 + 2u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _1973 = _1972 * _1972;
        float _4117 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1974 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1975 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _1948 = (((cbLight._m0[_1956].x * 0.3183098733425140380859375) * _1974) * _1975) + _1929;
        _1950 = (((cbLight._m0[_1956].y * 0.3183098733425140380859375) * _1974) * _1975) + _1930;
        _1952 = (((cbLight._m0[_1956].z * 0.3183098733425140380859375) * _1974) * _1975) + _1931;
    }
    bool _1955 = _1935.y == 0u;
    float _1993;
    float _1995;
    float _1997;
    if (_1955)
    {
        _1993 = _1948;
        _1995 = _1950;
        _1997 = _1952;
    }
    else
    {
        uint _2155 = _1861 + 7u;
        float _2171 = (dot(vec3(cbLight._m0[_1861 + 3u].xyz), vec3(_609, _610, _611)) * 0.5) + 0.5;
        float _2172 = _2171 * _2171;
        float _4133 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2173 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2174 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _1993 = (((cbLight._m0[_2155].x * 0.3183098733425140380859375) * _2173) * _2174) + _1948;
        _1995 = (((cbLight._m0[_2155].y * 0.3183098733425140380859375) * _2173) * _2174) + _1950;
        _1997 = (((cbLight._m0[_2155].z * 0.3183098733425140380859375) * _2173) * _2174) + _1952;
    }
    uint _2000 = _1861 + 8u;
    float _2013 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _612) * 0.949999988079071044921875);
    float _2014 = _2013 * _2013;
    float _2015 = cbLight._m0[_1861].x + _688;
    float _2016 = cbLight._m0[_1861].y + _689;
    float _2017 = cbLight._m0[_1861].z + _690;
    float _2021 = inversesqrt(dot(vec3(_2015, _2016, _2017), vec3(_2015, _2016, _2017)));
    float _2022 = _2021 * _2015;
    float _2023 = _2021 * _2016;
    float _2024 = _2021 * _2017;
    float _2025 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1861].xyz));
    float _4149 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _4160 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _2029 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
    float _2030 = dot(vec3(_609, _610, _611), vec3(_2022, _2023, _2024));
    float _4171 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2033 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _2034 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_2022, _2023, _2024));
    float _4182 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _2038 = _2014 * _2014;
    float _2042 = ((_2033 * _2033) * (_2038 + (-1.0))) + 1.0;
    float _2053 = (exp2(log2(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2054 = 1.0 - _2014;
    float _2065 = (0.5 / (((_2029 * ((_2028 * _2054) + _2014)) + 9.9999999392252902907785028219223e-09) + (((_2029 * _2054) + _2014) * _2028))) * _2028;
    float _4193 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2067 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2038 / ((_2042 * _2042) * 3.141590118408203125));
    uint _2081 = _1861 + 9u;
    float _2092 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _612) * 0.949999988079071044921875);
    float _2093 = _2092 * _2092;
    float _2094 = cbLight._m0[_1901].x + _688;
    float _2095 = cbLight._m0[_1901].y + _689;
    float _2096 = cbLight._m0[_1901].z + _690;
    float _2100 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
    float _2101 = _2100 * _2094;
    float _2102 = _2100 * _2095;
    float _2103 = _2100 * _2096;
    float _2104 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_1901].xyz));
    float _4204 = isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0));
    float _2107 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _2108 = dot(vec3(_609, _610, _611), vec3(_2101, _2102, _2103));
    float _4215 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2111 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _2112 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2101, _2102, _2103));
    float _4226 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2116 = _2093 * _2093;
    float _2120 = ((_2111 * _2111) * (_2116 + (-1.0))) + 1.0;
    float _2129 = (exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2130 = 1.0 - _2093;
    float _2140 = (0.5 / (((_2029 * ((_2107 * _2130) + _2093)) + 9.9999999392252902907785028219223e-09) + (((_2029 * _2130) + _2093) * _2107))) * _2107;
    float _4237 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2142 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_2116 / ((_2120 * _2120) * 3.141590118408203125));
    float _2152 = (((_2129 * cbLight._m0[_2081].x) * _2142) * _1884) + ((((cbLight._m0[_2000].x * _1853) * _2053) * _2067) * _1897);
    float _2153 = (((_2129 * cbLight._m0[_2081].y) * _2142) * _1884) + ((((cbLight._m0[_2000].y * _1854) * _2053) * _2067) * _1897);
    float _2154 = (((_2129 * cbLight._m0[_2081].z) * _2142) * _1884) + ((((cbLight._m0[_2000].z * _1855) * _2053) * _2067) * _1897);
    float _2216;
    float _2218;
    float _2220;
    if (_1937)
    {
        _2216 = _2152;
        _2218 = _2153;
        _2220 = _2154;
    }
    else
    {
        uint _2222 = _1861 + 2u;
        uint _2226 = _1861 + 10u;
        float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _612) * 0.949999988079071044921875);
        float _2241 = _2240 * _2240;
        float _2242 = cbLight._m0[_2222].x + _688;
        float _2243 = cbLight._m0[_2222].y + _689;
        float _2244 = cbLight._m0[_2222].z + _690;
        float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
        float _2249 = _2248 * _2242;
        float _2250 = _2248 * _2243;
        float _2251 = _2248 * _2244;
        float _2252 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2222].xyz));
        float _4248 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        float _2255 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2256 = dot(vec3(_609, _610, _611), vec3(_2249, _2250, _2251));
        float _4259 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
        float _2259 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _2260 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2249, _2250, _2251));
        float _4270 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2264 = _2241 * _2241;
        float _2268 = ((_2259 * _2259) * (_2264 + (-1.0))) + 1.0;
        float _2277 = (exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2278 = 1.0 - _2241;
        float _2288 = (0.5 / (((_2029 * ((_2255 * _2278) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2029 * _2278) + _2241) * _2255))) * _2255;
        float _4281 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        float _2290 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2264 / ((_2268 * _2268) * 3.141590118408203125));
        float _2291 = isnan(1.0) ? _1876 : (isnan(_1876) ? 1.0 : min(_1876, 1.0));
        _2216 = (((_2277 * cbLight._m0[_2226].x) * _2290) * _2291) + _2152;
        _2218 = (((_2277 * cbLight._m0[_2226].y) * _2290) * _2291) + _2153;
        _2220 = (((_2277 * cbLight._m0[_2226].z) * _2290) * _2291) + _2154;
    }
    float _2326;
    float _2328;
    float _2330;
    if (_1955)
    {
        _2326 = _2216;
        _2328 = _2218;
        _2330 = _2220;
    }
    else
    {
        uint _2337 = _1861 + 3u;
        uint _2341 = _1861 + 11u;
        float _2355 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _612) * 0.949999988079071044921875);
        float _2356 = _2355 * _2355;
        float _2357 = cbLight._m0[_2337].x + _688;
        float _2358 = cbLight._m0[_2337].y + _689;
        float _2359 = cbLight._m0[_2337].z + _690;
        float _2363 = inversesqrt(dot(vec3(_2357, _2358, _2359), vec3(_2357, _2358, _2359)));
        float _2364 = _2363 * _2357;
        float _2365 = _2363 * _2358;
        float _2366 = _2363 * _2359;
        float _2367 = dot(vec3(_609, _610, _611), vec3(cbLight._m0[_2337].xyz));
        float _4297 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
        float _2370 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _2371 = dot(vec3(_609, _610, _611), vec3(_2364, _2365, _2366));
        float _4308 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
        float _2374 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _2375 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2364, _2365, _2366));
        float _4319 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2379 = _2356 * _2356;
        float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
        float _2392 = (exp2(log2(1.0 - (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2393 = 1.0 - _2356;
        float _2403 = (0.5 / (((_2029 * ((_2370 * _2393) + _2356)) + 9.9999999392252902907785028219223e-09) + (((_2029 * _2393) + _2356) * _2370))) * _2370;
        float _4330 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2405 = (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
        float _2406 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
        _2326 = (((_2392 * cbLight._m0[_2341].x) * _2405) * _2406) + _2216;
        _2328 = (((_2392 * cbLight._m0[_2341].y) * _2405) * _2406) + _2218;
        _2330 = (((_2392 * cbLight._m0[_2341].z) * _2405) * _2406) + _2220;
    }
    float _2540;
    float _2542;
    float _2544;
    float _2546;
    float _2548;
    float _2550;
    if (_1859.y == 0u)
    {
        float _2481 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2482 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2481;
        float _2483 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2481;
        float _2484 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2481;
        uvec4 _2496 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2497 = _2496.x;
        uint _2508 = uint((float(_2496.y) * floor(float(uint(cbSceneParam._m0[85u].y * _709) / _2497))) + floor(float(uint(cbSceneParam._m0[85u].x * _708) / _2497)));
        float _2518 = (log2(_2484 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2519 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        uint _2522 = uint(isnan(14.0) ? _2519 : (isnan(_2519) ? 14.0 : min(_2519, 14.0)));
        uvec4 _2527 = texelFetch(g_lightClusterGridBuffer, int(((_2522 << 2u) + (_2508 << 6u)) >> 2u));
        uint _2528 = _2527.x;
        uint _2529 = _2496.z;
        float _2628;
        float _2630;
        float _2632;
        float _2634;
        float _2636;
        float _2638;
        if (((((1u << ((_2529 >> 4u) & 15u)) + 4294967295u) & _2528) == 0u) || ((_2529 & 240u) == 0u))
        {
            _2628 = 0.0;
            _2630 = 0.0;
            _2632 = 0.0;
            _2634 = 0.0;
            _2636 = 0.0;
            _2638 = 0.0;
        }
        else
        {
            float _2629;
            float _2631;
            float _2633;
            float _2635;
            float _2637;
            float _2639;
            float _2780 = 0.0;
            float _2781 = 0.0;
            float _2782 = 0.0;
            float _2783 = 0.0;
            float _2784 = 0.0;
            float _2785 = 0.0;
            uint _2786 = 0u;
            uint _2795;
            bool _2796;
            for (;;)
            {
                _2795 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2786 << 2u)) >> 2u)).x;
                _2796 = _2795 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2796)
                {
                    frontier_phi_68_pred = _2782;
                    frontier_phi_68_pred_1 = _2785;
                    frontier_phi_68_pred_2 = _2784;
                    frontier_phi_68_pred_3 = _2783;
                    frontier_phi_68_pred_4 = _2781;
                    frontier_phi_68_pred_5 = _2780;
                }
                else
                {
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    float _2929;
                    float _2930;
                    uint _2931;
                    _2925 = _2780;
                    _2926 = _2781;
                    _2927 = _2782;
                    _2928 = _2783;
                    _2929 = _2784;
                    _2930 = _2785;
                    _2931 = _2795;
                    float _2852;
                    float _2853;
                    float _2854;
                    float _2855;
                    float _2856;
                    float _2857;
                    for (;;)
                    {
                        uint _2935 = uint(findLSB(_2931)) + (_2786 << 5u);
                        uint _2932 = (_2931 + 4294967295u) & _2931;
                        uint _2937 = _2935 * 48u;
                        vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2937)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2937 + 3u)).x));
                        uint _2957 = (_2935 * 48u) + 4u;
                        vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2957)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2957 + 3u)).x));
                        uint _2976 = (_2935 * 48u) + 8u;
                        vec3 _2987 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2976)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2976 + 2u)).x));
                        float _2991 = _2951.x - _2482;
                        float _2992 = _2951.y - _2483;
                        float _2993 = _2951.z - _2484;
                        float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                        float _2997 = inversesqrt(_2994);
                        float _2998 = _2997 * _2991;
                        float _2999 = _2997 * _2992;
                        float _3000 = _2997 * _2993;
                        float _3001 = dot(vec3(_727, _730, _733), vec3(_2998, _2999, _3000));
                        float _3006 = 1.0 - (_2994 * _2951.w);
                        float _4356 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                        float _3007 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                        float _3008 = sqrt(_2994) * _2970.w;
                        float _3011 = 1.39999997615814208984375 / (_3008 + 1.39999997615814208984375);
                        float _3012 = _3011 * _3011;
                        float _3015 = ((1.0 - _3012) * _3001) + _3012;
                        float _3018 = _3008 * _3008;
                        float _3022 = ((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3007) / ((_3018 * 0.699999988079071044921875) + 1.0);
                        float _3026 = (-0.0) - _2482;
                        float _3027 = (-0.0) - _2483;
                        float _3028 = (-0.0) - _2484;
                        float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                        float _3033 = _3032 * _3026;
                        float _3034 = _3032 * _3027;
                        float _3035 = _3032 * _3028;
                        float _3043 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                        float _3044 = 1.0 - _787;
                        float _3051 = sqrt(1.0 - ((1.0 - (_3044 * _3044)) * (1.0 - (_3043 * _3043))));
                        float _3052 = _3051 * _3051;
                        float _3053 = _3052 * _3052;
                        float _3054 = _3033 + _2998;
                        float _3055 = _3034 + _2999;
                        float _3056 = _3035 + _3000;
                        float _3060 = inversesqrt(dot(vec3(_3054, _3055, _3056), vec3(_3054, _3055, _3056)));
                        float _3064 = dot(vec3(_727, _730, _733), vec3(_3033, _3034, _3035));
                        float _4372 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                        float _3067 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3068 = dot(vec3(_727, _730, _733), vec3(_3060 * _3054, _3060 * _3055, _3060 * _3056));
                        float _4383 = isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0));
                        float _3071 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
                        float _3075 = ((_3071 * _3071) * (_3053 + (-1.0))) + 1.0;
                        float _3076 = _3011 * _3052;
                        float _3077 = _3076 * _3076;
                        float _3080 = ((1.0 - _3077) * _3001) + _3077;
                        float _4394 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3081 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                        float _3082 = 1.0 - _3052;
                        float _3092 = (0.5 / (((_3081 * ((_3067 * _3082) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_3081 * _3082) + _3052) * _3067))) * _3081;
                        float _4405 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3103 = (((_3053 * 3.1415927410125732421875) * (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) / ((_3075 * _3075) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125))) * _3007;
                        _2855 = (_3022 * _2970.x) + _2928;
                        _2856 = (_3022 * _2970.y) + _2929;
                        _2857 = (_3022 * _2970.z) + _2930;
                        _2852 = (_3103 * _2987.x) + _2925;
                        _2853 = (_3103 * _2987.y) + _2926;
                        _2854 = (_3103 * _2987.z) + _2927;
                        if (_2932 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2925 = _2852;
                            _2926 = _2853;
                            _2927 = _2854;
                            _2928 = _2855;
                            _2929 = _2856;
                            _2930 = _2857;
                            _2931 = _2932;
                        }
                    }
                    frontier_phi_68_pred = _2854;
                    frontier_phi_68_pred_1 = _2857;
                    frontier_phi_68_pred_2 = _2856;
                    frontier_phi_68_pred_3 = _2855;
                    frontier_phi_68_pred_4 = _2853;
                    frontier_phi_68_pred_5 = _2852;
                }
                _2633 = frontier_phi_68_pred;
                _2639 = frontier_phi_68_pred_1;
                _2637 = frontier_phi_68_pred_2;
                _2635 = frontier_phi_68_pred_3;
                _2631 = frontier_phi_68_pred_4;
                _2629 = frontier_phi_68_pred_5;
                uint _2787 = _2786 + 1u;
                if (_2787 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2780 = _2629;
                    _2781 = _2631;
                    _2782 = _2633;
                    _2783 = _2635;
                    _2784 = _2637;
                    _2785 = _2639;
                    _2786 = _2787;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2628 = _2629;
            _2630 = _2631;
            _2632 = _2633;
            _2634 = _2635;
            _2636 = _2637;
            _2638 = _2639;
        }
        uvec4 _2642 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2643 = _2642.z;
        uint _2645 = (_2643 >> 8u) & 15u;
        float _2748;
        float _2750;
        float _2752;
        float _2754;
        float _2756;
        float _2758;
        if (((4294967295u << _2645) & _2528) == 0u)
        {
            _2748 = _2628;
            _2750 = _2630;
            _2752 = _2632;
            _2754 = _2634;
            _2756 = _2636;
            _2758 = _2638;
        }
        else
        {
            float _2773 = inversesqrt(dot(vec3(_2482, _2483, _2484), vec3(_2482, _2483, _2484)));
            float _2774 = _2773 * _2482;
            float _2775 = _2773 * _2483;
            float _2776 = _2773 * _2484;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2645 < ((_2643 >> 12u) & 15u))
            {
                float _2749;
                float _2751;
                float _2753;
                float _2755;
                float _2757;
                float _2759;
                float _2908 = _2628;
                float _2909 = _2630;
                float _2910 = _2632;
                float _2911 = _2634;
                float _2912 = _2636;
                float _2913 = _2638;
                uint _2914 = _2645;
                uint _2923;
                bool _2924;
                for (;;)
                {
                    _2923 = texelFetch(g_lightClassification, int((((_2522 << 5u) + (_2508 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                    _2924 = _2923 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2924)
                    {
                        frontier_phi_79_pred = _2913;
                        frontier_phi_79_pred_1 = _2912;
                        frontier_phi_79_pred_2 = _2911;
                        frontier_phi_79_pred_3 = _2910;
                        frontier_phi_79_pred_4 = _2909;
                        frontier_phi_79_pred_5 = _2908;
                    }
                    else
                    {
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3412;
                        float _3413;
                        float _3414;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3130 = _2908;
                        float _3131 = _2909;
                        float _3132 = _2910;
                        float _3133 = _2911;
                        float _3134 = _2912;
                        float _3135 = _2913;
                        uint _3136 = _2923;
                        uint _3137;
                        vec4 _3162;
                        float _3163;
                        vec4 _3178;
                        vec3 _3190;
                        vec4 _3205;
                        vec4 _3221;
                        float _3268;
                        bool _3269;
                        for (;;)
                        {
                            uint _3147 = ((_2914 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3136));
                            _3137 = (_3136 + 4294967295u) & _3136;
                            uint _3149 = _3147 * 40u;
                            _3162 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3149)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3149 + 3u)).x));
                            _3163 = _3162.w;
                            uint _3165 = (_3147 * 40u) + 4u;
                            _3178 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 3u)).x));
                            uint _3180 = (_3147 * 40u) + 8u;
                            _3190 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3180 + 2u)).x));
                            uint _3192 = (_3147 * 40u) + 16u;
                            _3205 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3192 + 3u)).x));
                            uint _3208 = (_3147 * 40u) + 20u;
                            _3221 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3208)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3208 + 3u)).x));
                            uint _3224 = (_3147 * 40u) + 24u;
                            vec4 _3237 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 3u)).x));
                            uint _3243 = (_3147 * 40u) + 28u;
                            vec4 _3256 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3243)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3243 + 3u)).x));
                            _3268 = fma(_2484, _3256.z, fma(_2483, _3256.y, _3256.x * _2482)) + _3256.w;
                            _3269 = !((fma(_2484, _3237.z, fma(_2483, _3237.y, _3237.x * _2482)) + _3237.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3269)
                            {
                                float _3296 = _3162.x - _2482;
                                float _3297 = _3162.y - _2483;
                                float _3298 = _3162.z - _2484;
                                float _3299 = dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298));
                                float _3302 = inversesqrt(_3299);
                                float _3303 = _3302 * _3296;
                                float _3304 = _3302 * _3297;
                                float _3305 = _3302 * _3298;
                                float _3309 = 1.0 - (_3299 / (_3163 * _3163));
                                float _4416 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                                float _3314 = sqrt(_3299) * _3178.w;
                                float _3316 = 1.39999997615814208984375 / (_3314 + 1.39999997615814208984375);
                                float _3317 = _3316 * _3316;
                                float _3320 = ((1.0 - _3317) * dot(vec3(_3303, _3304, _3305), vec3(_727, _730, _733))) + _3317;
                                float _3323 = _3314 * _3314;
                                float _3327 = (fma(_2484, _3205.z, fma(_2483, _3205.y, _3205.x * _2482)) + _3205.w) / _3268;
                                float _3328 = (fma(_2484, _3221.z, fma(_2483, _3221.y, _3221.x * _2482)) + _3221.w) / _3268;
                                float _3332 = 1.0 - dot(vec2(_3327, _3328), vec2(_3327, _3328));
                                float _4432 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                                float _3333 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3334 = _3333 * (((isnan(0.0) ? _3320 : (isnan(_3320) ? 0.0 : max(_3320, 0.0))) * _3310) / ((_3323 * 0.699999988079071044921875) + 1.0));
                                float _3346 = exp2(log2(1.0 / ((_3323 * 3.5) + 5.0)) * 0.25);
                                float _3347 = 1.0 - _787;
                                float _3354 = sqrt(1.0 - ((1.0 - (_3347 * _3347)) * (1.0 - (_3346 * _3346))));
                                float _3355 = _3354 * _3354;
                                float _3356 = _3355 * _3355;
                                float _3357 = _3303 - _2774;
                                float _3358 = _3304 - _2775;
                                float _3359 = _3305 - _2776;
                                float _3363 = inversesqrt(dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359)));
                                float _3367 = dot(vec3(_727, _730, _733), vec3((-0.0) - _2774, (-0.0) - _2775, (-0.0) - _2776));
                                float _4443 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3370 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3371 = dot(vec3(_727, _730, _733), vec3(_3363 * _3357, _3363 * _3358, _3363 * _3359));
                                float _4454 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3374 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
                                float _3378 = ((_3374 * _3374) * (_3356 + (-1.0))) + 1.0;
                                float _3379 = _3316 * _3355;
                                float _3380 = _3379 * _3379;
                                float _3386 = ((1.0 - _3380) * dot(vec3(_727, _730, _733), vec3(_3303, _3304, _3305))) + _3380;
                                float _4465 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                                float _3388 = 1.0 - _3355;
                                float _3398 = (0.5 / (((_3387 * ((_3370 * _3388) + _3355)) + 9.9999999392252902907785028219223e-09) + (((_3387 * _3388) + _3355) * _3370))) * _3387;
                                float _4476 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                                float _3408 = (_3333 * _3310) * (((_3356 * 3.1415927410125732421875) * (isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0)))) / ((_3378 * _3378) * ((_3323 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3334 * _3178.z;
                                frontier_phi_85_pred_1 = _3334 * _3178.y;
                                frontier_phi_85_pred_2 = _3334 * _3178.x;
                                frontier_phi_85_pred_3 = _3408 * _3190.z;
                                frontier_phi_85_pred_4 = _3408 * _3190.y;
                                frontier_phi_85_pred_5 = _3408 * _3190.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3417 = frontier_phi_85_pred;
                            _3416 = frontier_phi_85_pred_1;
                            _3415 = frontier_phi_85_pred_2;
                            _3414 = frontier_phi_85_pred_3;
                            _3413 = frontier_phi_85_pred_4;
                            _3412 = frontier_phi_85_pred_5;
                            _3120 = _3415 + _3133;
                            _3121 = _3416 + _3134;
                            _3122 = _3417 + _3135;
                            _3117 = _3412 + _3130;
                            _3118 = _3413 + _3131;
                            _3119 = _3414 + _3132;
                            if (_3137 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3119;
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3137;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3122;
                        frontier_phi_79_pred_1 = _3121;
                        frontier_phi_79_pred_2 = _3120;
                        frontier_phi_79_pred_3 = _3119;
                        frontier_phi_79_pred_4 = _3118;
                        frontier_phi_79_pred_5 = _3117;
                    }
                    _2759 = frontier_phi_79_pred;
                    _2757 = frontier_phi_79_pred_1;
                    _2755 = frontier_phi_79_pred_2;
                    _2753 = frontier_phi_79_pred_3;
                    _2751 = frontier_phi_79_pred_4;
                    _2749 = frontier_phi_79_pred_5;
                    uint _2915 = _2914 + 1u;
                    if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2908 = _2749;
                        _2909 = _2751;
                        _2910 = _2753;
                        _2911 = _2755;
                        _2912 = _2757;
                        _2913 = _2759;
                        _2914 = _2915;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2755;
                frontier_phi_60_61_ladder_1 = _2759;
                frontier_phi_60_61_ladder_2 = _2757;
                frontier_phi_60_61_ladder_3 = _2753;
                frontier_phi_60_61_ladder_4 = _2751;
                frontier_phi_60_61_ladder_5 = _2749;
            }
            else
            {
                frontier_phi_60_61_ladder = _2634;
                frontier_phi_60_61_ladder_1 = _2638;
                frontier_phi_60_61_ladder_2 = _2636;
                frontier_phi_60_61_ladder_3 = _2632;
                frontier_phi_60_61_ladder_4 = _2630;
                frontier_phi_60_61_ladder_5 = _2628;
            }
            _2748 = frontier_phi_60_61_ladder_5;
            _2750 = frontier_phi_60_61_ladder_4;
            _2752 = frontier_phi_60_61_ladder_3;
            _2754 = frontier_phi_60_61_ladder;
            _2756 = frontier_phi_60_61_ladder_2;
            _2758 = frontier_phi_60_61_ladder_1;
        }
        float _2763 = isnan(1.0) ? _771 : (isnan(_771) ? 1.0 : min(_771, 1.0));
        _2540 = (_2763 * _2754) + _1993;
        _2542 = (_2763 * _2756) + _1995;
        _2544 = (_2763 * _2758) + _1997;
        _2546 = ((_2748 * 0.039999999105930328369140625) * _2763) + _2326;
        _2548 = ((_2750 * 0.039999999105930328369140625) * _2763) + _2328;
        _2550 = ((_2752 * 0.039999999105930328369140625) * _2763) + _2330;
    }
    else
    {
        _2540 = _1993;
        _2542 = _1995;
        _2544 = _1997;
        _2546 = _2326;
        _2548 = _2328;
        _2550 = _2330;
    }
    float _4492 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4503 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4514 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _2567 = ((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2540 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _771))) + ((_2546 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1610)) * cbPerFrame._m0[3u].x);
    float _2568 = ((isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_2542 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _771))) + ((_2548 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1610)) * cbPerFrame._m0[3u].x);
    float _2569 = ((isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * (_2544 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _771))) + ((_2550 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1610)) * cbPerFrame._m0[3u].x);
    uint _2570 = _746 + 6u;
    float _2578 = _708 / cbSceneParam._m0[86u].x;
    float _2579 = _709 / cbSceneParam._m0[86u].y;
    vec4 _2593 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, (log2((isnan(cbSceneParam._m0[77u].w) ? _631 : (isnan(_631) ? cbSceneParam._m0[77u].w : min(_631, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2595 = _2593.x;
    float _2596 = _2593.y;
    float _2597 = _2593.z;
    float _2598 = _2593.w;
    float _2690;
    float _2692;
    float _2694;
    float _2696;
    if (_631 > cbSceneParam._m0[78u].w)
    {
        float _2653 = isnan(_631) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _631 : min(cbSceneParam._m0[80u].w, _631));
        float _2654 = _2653 / _631;
        float _2665 = _2654 * _681;
        float _2666 = _682 * _2654;
        float _2667 = (-0.0) - _2666;
        float _2668 = _2654 * _683;
        float _2670 = (cbSceneParam._m0[77u].w * _2667) / _2653;
        float _2671 = _2670 + cbSceneParam._m0[79u].w;
        float _2672 = cbSceneParam._m0[79u].w - _2666;
        float _2678 = sqrt(((_2665 * _2665) + (_2666 * _2666)) + (_2668 * _2668));
        float _2681 = (1.0 - (cbSceneParam._m0[77u].w / _2653)) * _2678;
        float _2686 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2688 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2865;
        if (abs((_2667 - _2670) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2865 = ((((_2671 > 0.0) ? exp2(_2686 * _2671) : (2.0 - exp2(_2688 * _2671))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2681;
        }
        else
        {
            float _2809 = 1.0 / cbSceneParam._m0[80u].x;
            float _2810 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : max(_2671, _2672));
            float _2811 = isnan(_2672) ? _2671 : (isnan(_2671) ? _2672 : min(_2671, _2672));
            float _2820 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : min(_2810, 0.0));
            float _2821 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : min(_2811, 0.0));
            _2865 = ((abs(_2678 / _2667) * cbSceneParam._m0[80u].y) * ((((_2820 - _2821) * 2.0) - ((exp2(_2686 * (isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0)))) - exp2(_2686 * (isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0))))) * _2809)) - ((exp2(_2688 * _2820) - exp2(_2688 * _2821)) * _2809))) + (_2681 * cbSceneParam._m0[80u].z);
        }
        vec4 _2867 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2578, _2579, 1.0), 0.0);
        float _2876 = exp2((_2865 * (-1.44269502162933349609375)) * (1.0 - _2867.w));
        float _2877 = log2(_2876);
        float _2893 = log2(_2598);
        _2690 = (exp2(_2893 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].x)) * _2867.x) / cbSceneParam._m0[78u].x)) + _2595;
        _2692 = (exp2(_2893 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].y)) * _2867.y) / cbSceneParam._m0[78u].y)) + _2596;
        _2694 = (exp2(_2893 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2877 * cbSceneParam._m0[78u].z)) * _2867.z) / cbSceneParam._m0[78u].z)) + _2597;
        _2696 = _2876 * _2598;
    }
    else
    {
        _2690 = _2595;
        _2692 = _2596;
        _2694 = _2597;
        _2696 = _2598;
    }
    bool _2903;
    vec4 _2706;
    vec4 _2728;
    float _2730;
    float _2734;
    float _2735;
    float _2736;
    float _2737;
    bool _2747;
    for (;;)
    {
        _2706 = cbMatDynParam._m0[0u];
        float _2708 = roundEven(_2706.y);
        bool _2709 = _2708 == 3.0;
        float _2710 = log2(_2696);
        float _2717 = exp2(_2710 * cbSceneParam._m0[78u].x) * _2567;
        float _2718 = exp2(_2710 * cbSceneParam._m0[78u].y) * _2568;
        float _2719 = exp2(_2710 * cbSceneParam._m0[78u].z) * _2569;
        float _2726 = _697 + (-0.5);
        _2728 = cbMtdParam._m0[1u];
        _2730 = _2728.y * _2726;
        float _2733 = (_2708 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2734 = _2733 * (_2709 ? _2717 : (_2717 + (cbSceneParam._m0[72u].w * _2690)));
        _2735 = _2733 * (_2709 ? _2718 : (_2718 + (cbSceneParam._m0[72u].w * _2692)));
        _2736 = _2733 * (_2709 ? _2719 : (_2719 + (cbSceneParam._m0[72u].w * _2694)));
        _2737 = _2726 * 0.999000012874603271484375;
        _2747 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2747)
        {
            if ((cbInstanceData._m0[_746 + 7u].x + _2737) < 0.5)
            {
                _2903 = true;
                break;
            }
        }
        uint _2844 = _747 + uint(_2706.w);
        if ((cbInstanceData._m0[_2844].w < 1.0) && ((cbInstanceData._m0[_2844].w + _2737) < 0.5))
        {
            _2903 = true;
            break;
        }
        if ((_2730 + 1.0) < _2728.x)
        {
            _2903 = true;
            break;
        }
        _2903 = false;
        break;
    }
    float _3108;
    if (_2903)
    {
        discard_state = true;
        _3108 = 0.0;
    }
    else
    {
        _3108 = cbInstanceData._m0[_2570].w;
    }
    SV_Target.x = _2734;
    SV_Target.y = _2735;
    SV_Target.z = _2736;
    SV_Target.w = _3108;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2570].w;
    discard_exit();
}


