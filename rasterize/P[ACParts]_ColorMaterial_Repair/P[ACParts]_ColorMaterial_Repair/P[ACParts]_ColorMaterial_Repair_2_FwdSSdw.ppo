#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1618;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _288 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_274 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _295 = log2(0.0);
    float _297 = exp2(_295 * cbMtdParam._m0[31u].z);
    float _301 = _297 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _297);
    float _302 = _297 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _297);
    float _303 = _297 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _297);
    float _304 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _305 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _306 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _307 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    float _309 = isnan(1.0) ? _305 : (isnan(_305) ? 1.0 : min(_305, 1.0));
    float _310 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _326 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _274) + cbTextureTilingScale._m0[0u].w));
    float _330 = _326.z;
    float _331 = _326.w;
    float _332 = 1.0 - _331;
    float _339 = exp2(log2((1.0 - (_332 * _330)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _340 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _341 = isnan(1.0) ? _340 : (isnan(_340) ? 1.0 : min(_340, 1.0));
    float _353 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_332 * _332) * _330))) * cbMtdParam._m0[34u].w);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    vec4 _368 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _371 = _368.y;
    float _374 = (_371 * ((isnan(1.0) ? _354 : (isnan(_354) ? 1.0 : min(_354, 1.0))) - _331)) + _331;
    vec4 _386 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _274) + cbTextureTilingScale._m0[2u].w));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[12u].x;
    _204[0u] = cbMtdParam._m0[12u].y;
    _205[0u] = cbMtdParam._m0[12u].z;
    _203[1u] = cbMtdParam._m0[13u].x;
    _204[1u] = cbMtdParam._m0[13u].y;
    _205[1u] = cbMtdParam._m0[13u].z;
    _203[2u] = cbMtdParam._m0[14u].x;
    _204[2u] = cbMtdParam._m0[14u].y;
    _205[2u] = cbMtdParam._m0[14u].z;
    _203[3u] = cbMtdParam._m0[15u].x;
    _204[3u] = cbMtdParam._m0[15u].y;
    _205[3u] = cbMtdParam._m0[15u].z;
    _203[4u] = cbMtdParam._m0[16u].x;
    _204[4u] = cbMtdParam._m0[16u].y;
    _205[4u] = cbMtdParam._m0[16u].z;
    _203[5u] = cbMtdParam._m0[11u].x;
    _204[5u] = cbMtdParam._m0[11u].y;
    _205[5u] = cbMtdParam._m0[11u].z;
    float _454 = (_368.x + (-0.02500000037252902984619140625)) * 8.0;
    float _456 = roundEven(_454);
    float _457 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    uint _460 = uint(int(isnan(5.0) ? _457 : (isnan(_457) ? 5.0 : min(_457, 5.0))));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = 1.0;
    _211[0u] = 1.0;
    _212[0u] = 1.0;
    _210[1u] = cbMtdParam._m0[23u].x;
    _211[1u] = cbMtdParam._m0[23u].y;
    _212[1u] = cbMtdParam._m0[23u].z;
    _210[2u] = cbMtdParam._m0[21u].x;
    _211[2u] = cbMtdParam._m0[21u].y;
    _212[2u] = cbMtdParam._m0[21u].z;
    _210[3u] = cbMtdParam._m0[19u].x;
    _211[3u] = cbMtdParam._m0[19u].y;
    _212[3u] = cbMtdParam._m0[19u].z;
    _210[4u] = cbMtdParam._m0[18u].x;
    _211[4u] = cbMtdParam._m0[18u].y;
    _212[4u] = cbMtdParam._m0[18u].z;
    _210[5u] = cbMtdParam._m0[17u].x;
    _211[5u] = cbMtdParam._m0[17u].y;
    _212[5u] = cbMtdParam._m0[17u].z;
    float _547 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[38u].w * TEXCOORD.x) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[39u].x * TEXCOORD.y) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _548 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    uint _550 = uint(int(isnan(5.0) ? _548 : (isnan(_548) ? 5.0 : min(_548, 5.0))));
    float _206[6];
    _206[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[23u].w;
    _206[2u] = cbMtdParam._m0[21u].w;
    _206[3u] = cbMtdParam._m0[19u].w;
    _206[4u] = cbMtdParam._m0[18u].w;
    _206[5u] = cbMtdParam._m0[17u].w;
    float _587 = ((((_203[_460] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_210[_550] - _203[_460])) * _206[_460])) * _371) + cbMtdParam._m0[10u].x) * _386.x;
    float _588 = ((((_204[_460] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_211[_550] - _204[_460])) * _206[_460])) * _371) + cbMtdParam._m0[10u].y) * _386.y;
    float _589 = ((((_205[_460] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_212[_550] - _205[_460])) * _206[_460])) * _371) + cbMtdParam._m0[10u].z) * _386.z;
    vec4 _601 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _274) + cbTextureTilingScale._m0[1u].w));
    float _621 = (((cbMtdParam._m0[9u].x * _601.x) - _587) * _374) + _587;
    float _622 = (((cbMtdParam._m0[9u].y * _601.y) - _588) * _374) + _588;
    float _623 = (((cbMtdParam._m0[9u].z * _601.z) - _589) * _374) + _589;
    vec4 _635 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _274) + cbTextureTilingScale._m0[5u].w));
    float _655 = (((cbMtdParam._m0[20u].x * _635.x) - _621) * _341) + _621;
    float _656 = (((cbMtdParam._m0[20u].y * _635.y) - _622) * _341) + _622;
    float _657 = (((cbMtdParam._m0[20u].z * _635.z) - _623) * _341) + _623;
    vec4 _670 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _274) + cbTextureTilingScale._m0[7u].w));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = cbMtdParam._m0[24u].x;
    _208[0u] = cbMtdParam._m0[24u].y;
    _209[0u] = cbMtdParam._m0[24u].z;
    _207[1u] = cbMtdParam._m0[25u].x;
    _208[1u] = cbMtdParam._m0[25u].y;
    _209[1u] = cbMtdParam._m0[25u].z;
    _207[2u] = cbMtdParam._m0[26u].x;
    _208[2u] = cbMtdParam._m0[26u].y;
    _209[2u] = cbMtdParam._m0[26u].z;
    _207[3u] = cbMtdParam._m0[27u].x;
    _208[3u] = cbMtdParam._m0[27u].y;
    _209[3u] = cbMtdParam._m0[27u].z;
    _207[4u] = cbMtdParam._m0[28u].x;
    _208[4u] = cbMtdParam._m0[28u].y;
    _209[4u] = cbMtdParam._m0[28u].z;
    _207[5u] = cbMtdParam._m0[29u].x;
    _208[5u] = cbMtdParam._m0[29u].y;
    _209[5u] = cbMtdParam._m0[29u].z;
    float _757 = _207[_460] * _371;
    float _758 = _208[_460] * _371;
    float _759 = _209[_460] * _371;
    float _760 = _757 + ((_288.x * 4.5) * ((((cbMtdParam._m0[30u].x * _670.x) - _655) * _307) + _655));
    float _761 = _758 + ((_288.y * 4.5) * ((((cbMtdParam._m0[30u].y * _670.y) - _656) * _309) + _656));
    float _762 = _759 + ((_288.z * 4.5) * ((((cbMtdParam._m0[30u].z * _670.z) - _657) * _310) + _657));
    float _198[5];
    float _199[5];
    _198[0u] = cbMtdParam._m0[35u].y;
    _199[0u] = cbMtdParam._m0[35u].z;
    _198[1u] = cbMtdParam._m0[36u].w;
    _199[1u] = cbMtdParam._m0[37u].x;
    _198[2u] = cbMtdParam._m0[37u].y;
    _199[2u] = cbMtdParam._m0[37u].z;
    _198[3u] = cbMtdParam._m0[37u].w;
    _199[3u] = cbMtdParam._m0[38u].x;
    _198[4u] = cbMtdParam._m0[38u].y;
    _199[4u] = cbMtdParam._m0[38u].z;
    float _790 = roundEven(5.0 - _454);
    float _791 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = isnan(4.0) ? _791 : (isnan(_791) ? 4.0 : min(_791, 4.0));
    float _794 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    uint _796 = uint(int(isnan(4.0) ? _794 : (isnan(_794) ? 4.0 : min(_794, 4.0))));
    float _805 = ((cbMtdParam._m0[39u].z - _199[_796]) * _374) + _199[_796];
    float _813 = ((cbMtdParam._m0[40u].x - _805) * _341) + _805;
    float _818 = ((cbMtdParam._m0[40u].z - _813) * _307) + _813;
    vec4 _834 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _274) + cbTextureTilingScale._m0[8u].w));
    float _836 = _834.x;
    float _837 = _834.y;
    float _839 = _834.z + _198[_796];
    vec4 _851 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _274) + cbTextureTilingScale._m0[9u].w));
    float _859 = (((cbMtdParam._m0[39u].y - _839) + _851.z) * _374) + _839;
    vec4 _871 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _879 = (((cbMtdParam._m0[39u].w - _859) + _871.z) * _341) + _859;
    float _885 = ((((_330 * 2.0) * _879) - _879) * cbMtdParam._m0[33u].w) + _879;
    vec4 _897 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _274) + cbTextureTilingScale._m0[12u].w));
    float _905 = (((_897.z + cbMtdParam._m0[40u].y) - _885) * _310) + _885;
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _967 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_936 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_940 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _982 = (-0.0) - ((_940 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _986 = (_940 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _987 = isnan(_986) ? _982 : (isnan(_982) ? _986 : min(_982, _986));
    float _4093 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _988 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _1013 = ((_851.x - _836) * _374) + _836;
    float _1014 = ((_851.y - _837) * _374) + _837;
    float _1019 = ((_871.x - _1013) * _341) + _1013;
    float _1020 = ((_871.y - _1014) * _341) + _1014;
    float _1029 = ((((_897.x - _1019) * _307) + _1019) * 2.0) + (-1.0);
    float _1030 = ((((_897.y - _1020) * _309) + _1020) * 2.0) + (-1.0);
    float _1031 = dot(vec2(_1029, _1030), vec2(_1029, _1030));
    float _4104 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1036 = sqrt(1.0 - (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))));
    float _1039 = (cbMtdParam._m0[34u].x * ((_326.x * 2.0) + (-1.0))) + _1029;
    float _1040 = (cbMtdParam._m0[34u].x * ((_326.y * 2.0) + (-1.0))) + _1030;
    float _1043 = fma(_1036, _252 * NORMAL.x, fma(_1040, _259 * TANGENT.x, (_245 * _237) * _1039));
    float _1046 = fma(_1036, _252 * NORMAL.y, fma(_1040, _259 * TANGENT.y, (_245 * _238) * _1039));
    float _1049 = fma(_1036, _252 * NORMAL.z, fma(_1040, _259 * TANGENT.z, (_245 * _239) * _1039));
    float _1053 = inversesqrt(dot(vec3(_1043, _1046, _1049), vec3(_1043, _1046, _1049)));
    float _1054 = _1053 * _1043;
    float _1055 = _1053 * _1046;
    float _1056 = _1053 * _1049;
    float _4115 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _1057 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _4126 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4137 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4148 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4159 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _1061 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _1077 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1107 = cbSceneParam._m0[71u].x - (_936 / _1097);
    float _1108 = cbSceneParam._m0[71u].y - (_940 / _1097);
    float _1109 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1097);
    float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
    float _1114 = _1107 * _1113;
    float _1115 = _1108 * _1113;
    float _1116 = _1109 * _1113;
    float _1122 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1123 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1125 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1127 = _1125.w;
    float _1145 = fma(_1056, cbSceneParam._m0[5u].z, fma(_1055, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1054));
    float _1148 = fma(_1056, cbSceneParam._m0[6u].z, fma(_1055, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1054));
    float _1151 = fma(_1056, cbSceneParam._m0[7u].z, fma(_1055, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1054));
    vec4 _1153 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1164 = (((_1153.y - _1057) + (_1153.w * _1057)) * cbMtdParam._m0[3u].x) + _1057;
    uint _1177 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1178 = _1177 + 9u;
    uint _1179 = _1178 + uint(cbMatDynParam._m0[0u].w);
    float _1185 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) * cbInstanceData._m0[_1179].x;
    float _1186 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0)))) * cbInstanceData._m0[_1179].y;
    float _1187 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * cbInstanceData._m0[_1179].z;
    float _4170 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
    float _4181 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
    float _1189 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1190 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
    vec4 _1191 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1196 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1207 = (((_1196.x - _1061) + (_1196.w * _1061)) * cbMtdParam._m0[3u].x) + _1061;
    float _1220 = (cbMtdParam._m0[3u].x * (((_1188 * _1127) - _1188) + _1191.x)) + _1188;
    float _1221 = (cbMtdParam._m0[3u].x * (((_1189 * _1127) - _1189) + _1191.y)) + _1189;
    float _1222 = (cbMtdParam._m0[3u].x * (((_1190 * _1127) - _1190) + _1191.z)) + _1190;
    float _1223 = 1.0 - _1207;
    float _1224 = _1223 * _1220;
    float _1225 = _1223 * _1221;
    float _1226 = _1223 * _1222;
    float _1231 = (_1220 + (-0.039999999105930328369140625)) * _1207;
    float _1232 = (_1221 + (-0.039999999105930328369140625)) * _1207;
    float _1233 = (_1222 + (-0.039999999105930328369140625)) * _1207;
    float _1234 = _1231 + 0.039999999105930328369140625;
    float _1236 = _1232 + 0.039999999105930328369140625;
    float _1237 = _1233 + 0.039999999105930328369140625;
    vec4 _1246 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1122, cbSceneParam._m0[86u].y * _1123));
    float _1249 = _1246.x * TEXCOORD_5.w;
    float _1250 = dot(vec3(_1054, _1055, _1056), vec3(_1114, _1115, _1116));
    float _1253 = _1250 * 2.0;
    float _1257 = (_1253 * _1054) - _1114;
    float _1258 = (_1253 * _1055) - _1115;
    float _1259 = (_1253 * _1056) - _1116;
    float _1263 = abs(dot(vec3(_1114, _1115, _1116), vec3(_1054, _1055, _1056)));
    float _4203 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
    float _1265 = sqrt(_1164);
    float _1276 = exp2((_1265 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1265 * 3.0));
    float _1282 = (1.0 - _1276) * ((_1265 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1283 = _1276 * _1265;
    float _1311 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1319 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1617;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1344 = fma(_1319, cbModelParam._m0[26u].z, fma(_1315, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1311));
        float _1348 = fma(_1319, cbModelParam._m0[27u].z, fma(_1315, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1311));
        float _1352 = fma(_1319, cbModelParam._m0[28u].z, fma(_1315, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1311));
        float _1376 = _1311 + _1054;
        float _1377 = _1315 + _1055;
        float _1378 = _1319 + _1056;
        float _1388 = fma(_1378, cbModelParam._m0[26u].z, fma(_1377, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1376)) - _1344;
        float _1389 = fma(_1378, cbModelParam._m0[27u].z, fma(_1377, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1376)) - _1348;
        float _1390 = fma(_1378, cbModelParam._m0[28u].z, fma(_1377, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1376)) - _1352;
        float _1394 = inversesqrt(dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390)));
        float _1406 = ((_1394 * _1388) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1344 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1407 = ((_1394 * _1389) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1348 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1408 = ((_1394 * _1390) / cbModelParam._m0[34u].z) + ((((((_1352 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1411 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1418 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1406, _1407, _1408), 0.0);
        float _1445 = exp2((_1411.w + (-0.5)) * 20.0) * 2.0;
        float _1446 = _1445 * (_1411.x + (-0.5));
        float _1447 = _1445 * (_1411.y + (-0.5));
        float _1448 = _1445 * (_1411.z + (-0.5));
        float _1455 = exp2((_1418.w + (-0.5)) * 20.0) * 2.0;
        float _1456 = _1455 * (_1418.x + (-0.5));
        float _1457 = _1455 * (_1418.y + (-0.5));
        float _1458 = _1455 * (_1418.z + (-0.5));
        float _1465 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1466 = _1465 * (_1425.x + (-0.5));
        float _1467 = _1465 * (_1425.y + (-0.5));
        float _1468 = _1465 * (_1425.z + (-0.5));
        float _1475 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1476 = _1475 * (_1432.x + (-0.5));
        float _1477 = _1475 * (_1432.y + (-0.5));
        float _1478 = _1475 * (_1432.z + (-0.5));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1481 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1482 = _1446 * 0.5;
        float _1483 = _1456 * 0.5;
        float _1484 = _1466 * 0.5;
        float _1485 = dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484));
        float _1490 = (_1485 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1485);
        float _1499 = (dot(vec3(_1054, _1055, _1056), vec3(_1490 * _1482, _1490 * _1483, _1490 * _1484)) + 1.0) * 0.5;
        float _4229 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1509 = sqrt(((_1483 * _1483) + (_1482 * _1482)) + (_1484 * _1484)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4240 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1511 = _1510 * 2.0;
        float _1515 = (1.0 - _1510) / (_1510 + 1.0);
        float _4251 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1525 = ((((1.0 - _1516) * (_1511 + 2.0)) * exp2(log2(isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * (_1511 + 1.0))) + _1516) * _1479;
        float _1526 = _1447 * 0.5;
        float _1527 = _1457 * 0.5;
        float _1528 = _1467 * 0.5;
        float _1529 = dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528));
        float _1534 = (_1529 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1529);
        float _1542 = (dot(vec3(_1054, _1055, _1056), vec3(_1534 * _1526, _1534 * _1527, _1534 * _1528)) + 1.0) * 0.5;
        float _4262 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1551 = sqrt(((_1527 * _1527) + (_1526 * _1526)) + (_1528 * _1528)) / (_1480 + 9.9999997473787516355514526367188e-06);
        float _4273 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
        float _1553 = _1552 * 2.0;
        float _1557 = (1.0 - _1552) / (_1552 + 1.0);
        float _4284 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1567 = ((((1.0 - _1558) * (_1553 + 2.0)) * exp2(log2(isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_1553 + 1.0))) + _1558) * _1480;
        float _1568 = _1448 * 0.5;
        float _1569 = _1458 * 0.5;
        float _1570 = _1468 * 0.5;
        float _1571 = dot(vec3(_1568, _1569, _1570), vec3(_1568, _1569, _1570));
        float _1576 = (_1571 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1571);
        float _1584 = (dot(vec3(_1054, _1055, _1056), vec3(_1576 * _1568, _1576 * _1569, _1576 * _1570)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1593 = sqrt(((_1569 * _1569) + (_1568 * _1568)) + (_1570 * _1570)) / (_1481 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1595 = _1594 * 2.0;
        float _1599 = (1.0 - _1594) / (_1594 + 1.0);
        float _4317 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1609 = ((((1.0 - _1600) * (_1595 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1595 + 1.0))) + _1600) * _1481;
        _1617 = _1448;
        _1619 = _1447;
        _1620 = _1446;
        _1621 = _1458;
        _1622 = _1457;
        _1623 = _1456;
        _1624 = _1468;
        _1625 = _1467;
        _1626 = _1466;
        _1627 = _1481;
        _1628 = _1480;
        _1629 = _1479;
        _1630 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)));
        _1631 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0)));
        _1632 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0)));
    }
    else
    {
        _1617 = _1618;
        _1619 = _1618;
        _1620 = _1618;
        _1621 = _1618;
        _1622 = _1618;
        _1623 = _1618;
        _1624 = _1618;
        _1625 = _1618;
        _1626 = _1618;
        _1627 = _1618;
        _1628 = _1618;
        _1629 = _1618;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    float _1935;
    float _1936;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1655 = fma(_1319, cbModelParam._m0[30u].z, fma(_1315, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1311));
        float _1659 = fma(_1319, cbModelParam._m0[31u].z, fma(_1315, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1311));
        float _1663 = fma(_1319, cbModelParam._m0[32u].z, fma(_1315, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1311));
        float _1685 = _1311 + _1054;
        float _1686 = _1315 + _1055;
        float _1687 = _1319 + _1056;
        float _1697 = fma(_1687, cbModelParam._m0[30u].z, fma(_1686, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1685)) - _1655;
        float _1698 = fma(_1687, cbModelParam._m0[31u].z, fma(_1686, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1685)) - _1659;
        float _1699 = fma(_1687, cbModelParam._m0[32u].z, fma(_1686, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1685)) - _1663;
        float _1703 = inversesqrt(dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699)));
        float _1715 = ((_1703 * _1697) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1655 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1716 = ((_1703 * _1698) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1659 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1717 = ((_1703 * _1699) / cbModelParam._m0[35u].z) + ((((((_1663 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1719 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1726 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1733 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        vec4 _1740 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1715, _1716, _1717), 0.0);
        float _1752 = exp2((_1719.w + (-0.5)) * 20.0) * 2.0;
        float _1753 = _1752 * (_1719.x + (-0.5));
        float _1754 = _1752 * (_1719.y + (-0.5));
        float _1755 = _1752 * (_1719.z + (-0.5));
        float _1762 = exp2((_1726.w + (-0.5)) * 20.0) * 2.0;
        float _1763 = _1762 * (_1726.x + (-0.5));
        float _1764 = _1762 * (_1726.y + (-0.5));
        float _1765 = _1762 * (_1726.z + (-0.5));
        float _1772 = exp2((_1733.w + (-0.5)) * 20.0) * 2.0;
        float _1773 = _1772 * (_1733.x + (-0.5));
        float _1774 = _1772 * (_1733.y + (-0.5));
        float _1775 = _1772 * (_1733.z + (-0.5));
        float _1782 = exp2((_1740.w + (-0.5)) * 20.0) * 2.0;
        float _1783 = _1782 * (_1740.x + (-0.5));
        float _1784 = _1782 * (_1740.y + (-0.5));
        float _1785 = _1782 * (_1740.z + (-0.5));
        float _1786 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1787 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _1788 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
        float _1789 = _1753 * 0.5;
        float _1790 = _1763 * 0.5;
        float _1791 = _1773 * 0.5;
        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
        float _1797 = (_1792 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1792);
        float _1805 = (dot(vec3(_1054, _1055, _1056), vec3(_1797 * _1789, _1797 * _1790, _1797 * _1791)) + 1.0) * 0.5;
        float _4358 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1814 = sqrt(((_1790 * _1790) + (_1789 * _1789)) + (_1791 * _1791)) / (_1786 + 9.9999997473787516355514526367188e-06);
        float _4369 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1816 = _1815 * 2.0;
        float _1820 = (1.0 - _1815) / (_1815 + 1.0);
        float _4380 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
        float _1821 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1830 = ((((1.0 - _1821) * (_1816 + 2.0)) * exp2(log2(isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * (_1816 + 1.0))) + _1821) * _1786;
        float _1831 = _1754 * 0.5;
        float _1832 = _1764 * 0.5;
        float _1833 = _1774 * 0.5;
        float _1834 = dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833));
        float _1839 = (_1834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1834);
        float _1847 = (dot(vec3(_1054, _1055, _1056), vec3(_1839 * _1831, _1839 * _1832, _1839 * _1833)) + 1.0) * 0.5;
        float _4391 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1856 = sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833)) / (_1787 + 9.9999997473787516355514526367188e-06);
        float _4402 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0));
        float _1858 = _1857 * 2.0;
        float _1862 = (1.0 - _1857) / (_1857 + 1.0);
        float _4413 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1872 = ((((1.0 - _1863) * (_1858 + 2.0)) * exp2(log2(isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0))) * (_1858 + 1.0))) + _1863) * _1787;
        float _1873 = _1755 * 0.5;
        float _1874 = _1765 * 0.5;
        float _1875 = _1775 * 0.5;
        float _1876 = dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875));
        float _1881 = (_1876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1876);
        float _1889 = (dot(vec3(_1054, _1055, _1056), vec3(_1881 * _1873, _1881 * _1874, _1881 * _1875)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1898 = sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875)) / (_1788 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1900 = _1899 * 2.0;
        float _1904 = (1.0 - _1899) / (_1899 + 1.0);
        float _4446 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1914 = ((((1.0 - _1905) * (_1900 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1900 + 1.0))) + _1905) * _1788;
        _1922 = _1755;
        _1923 = _1754;
        _1924 = _1753;
        _1925 = _1765;
        _1926 = _1764;
        _1927 = _1763;
        _1928 = _1775;
        _1929 = _1774;
        _1930 = _1773;
        _1931 = _1788;
        _1932 = _1787;
        _1933 = _1786;
        _1934 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0)));
        _1935 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)));
        _1936 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)));
    }
    else
    {
        _1922 = _1618;
        _1923 = _1618;
        _1924 = _1618;
        _1925 = _1618;
        _1926 = _1618;
        _1927 = _1618;
        _1928 = _1618;
        _1929 = _1618;
        _1930 = _1618;
        _1931 = _1618;
        _1932 = _1618;
        _1933 = _1618;
        _1934 = 0.0;
        _1935 = 0.0;
        _1936 = 0.0;
    }
    float _1946 = (cbModelParam._m0[1u].x * (_1934 - _1630)) + _1630;
    float _1947 = (cbModelParam._m0[1u].x * (_1935 - _1631)) + _1631;
    float _1948 = (cbModelParam._m0[1u].x * (_1936 - _1632)) + _1632;
    float _1969 = fma(_1948, cbSceneParam._m0[89u].z, fma(_1947, cbSceneParam._m0[89u].y, _1946 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1948, cbSceneParam._m0[90u].z, fma(_1947, cbSceneParam._m0[90u].y, _1946 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1948, cbSceneParam._m0[91u].z, fma(_1947, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1946));
    float _1988 = _1257 * 0.5;
    float _1989 = _1258 * 0.5;
    float _1990 = _1259 * 0.5;
    float _1991 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1924, _1927, _1930, _1933));
    float _1994 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1923, _1926, _1929, _1932));
    float _1997 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1922, _1925, _1928, _1931));
    float _2031;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2004 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1617, _1621, _1624, _1627));
        float _2008 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1619, _1622, _1625, _1628));
        float _2012 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1620, _1623, _1626, _1629));
        float _2019 = dot(vec4(cbModelParam._m0[39u]), vec4(_1988, _1989, _1990, 1.0));
        _2031 = dot(vec3(isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)), isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2019) ? 0.0 : (isnan(0.0) ? _2019 : max(0.0, _2019))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2031 = 1.0;
    }
    float _2042;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2033 = dot(vec4(cbModelParam._m0[40u]), vec4(_1988, _1989, _1990, 1.0));
        _2042 = dot(vec3(isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0)), isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2033) ? 0.0 : (isnan(0.0) ? _2033 : max(0.0, _2033))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2042 = 1.0;
    }
    float _2046 = (_2042 * cbModelParam._m0[1u].x) + (_2031 * (1.0 - cbModelParam._m0[1u].x));
    float _2056 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1164);
    float _2057 = isnan(_2056) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2056 : min(cbModelParam._m0[25u].z, _2056));
    float _2137;
    float _2139;
    float _2141;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2104 = fma(_1319, cbModelParam._m0[13u].z, fma(_1315, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1311)) + cbModelParam._m0[13u].w;
        float _2108 = fma(_1319, cbModelParam._m0[14u].z, fma(_1315, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1311)) + cbModelParam._m0[14u].w;
        float _2112 = fma(_1319, cbModelParam._m0[15u].z, fma(_1315, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1311)) + cbModelParam._m0[15u].w;
        float _2115 = fma(_1259, cbModelParam._m0[13u].z, fma(_1258, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1257));
        float _2118 = fma(_1259, cbModelParam._m0[14u].z, fma(_1258, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1257));
        float _2121 = fma(_1259, cbModelParam._m0[15u].z, fma(_1258, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1257));
        float _2149;
        if (_2115 > 0.0)
        {
            _2149 = abs((1.0 - _2104) / _2115);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2104 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2149 = frontier_phi_14_12_ladder;
        }
        float _2372;
        if (_2118 > 0.0)
        {
            _2372 = abs((1.0 - _2108) / _2118);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2108 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2372 = frontier_phi_23_19_ladder;
        }
        float _2629;
        if (_2121 > 0.0)
        {
            _2629 = abs((1.0 - _2112) / _2121);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2112 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2629 = frontier_phi_35_30_ladder;
        }
        float _2631 = isnan(_2372) ? _2149 : (isnan(_2149) ? _2372 : min(_2149, _2372));
        float _2632 = isnan(_2629) ? _2631 : (isnan(_2631) ? _2629 : min(_2631, _2629));
        float _2636 = (_2632 * _2115) + _2104;
        float _2637 = (_2632 * _2118) + _2108;
        float _2638 = (_2632 * _2121) + _2112;
        float _2639 = _2632 * 9.9999997473787516355514526367188e-05;
        float _2641 = (-1.0) - _2639;
        float _2643 = _2639 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2638 > _2643) || ((_2638 < _2641) || ((_2637 > _2643) || ((_2637 < _2641) || ((_2636 < _2641) || (_2636 > _2643))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2638, cbModelParam._m0[9u].z, fma(_2637, cbModelParam._m0[9u].y, _2636 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2638, cbModelParam._m0[10u].z, fma(_2637, cbModelParam._m0[10u].y, _2636 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2638, cbModelParam._m0[11u].z, fma(_2637, cbModelParam._m0[11u].y, _2636 * cbModelParam._m0[11u].x))), _2057);
            frontier_phi_13_35_ladder = _2766.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2766.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2766.x * cbModelParam._m0[1u].y;
        }
        _2137 = frontier_phi_13_35_ladder_2;
        _2139 = frontier_phi_13_35_ladder_1;
        _2141 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2125 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1257, _1258, _1259), _2057);
        _2137 = _2125.x * cbModelParam._m0[1u].y;
        _2139 = _2125.y * cbModelParam._m0[1u].y;
        _2141 = _2125.z * cbModelParam._m0[1u].y;
    }
    float _2145 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1164);
    float _2146 = isnan(_2145) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2145 : min(cbModelParam._m0[25u].w, _2145));
    float _2235;
    float _2237;
    float _2239;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2199 = fma(_1319, cbModelParam._m0[21u].z, fma(_1315, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1311)) + cbModelParam._m0[21u].w;
        float _2203 = fma(_1319, cbModelParam._m0[22u].z, fma(_1315, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1311)) + cbModelParam._m0[22u].w;
        float _2207 = fma(_1319, cbModelParam._m0[23u].z, fma(_1315, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1311)) + cbModelParam._m0[23u].w;
        float _2210 = fma(_1259, cbModelParam._m0[21u].z, fma(_1258, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1257));
        float _2213 = fma(_1259, cbModelParam._m0[22u].z, fma(_1258, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1257));
        float _2216 = fma(_1259, cbModelParam._m0[23u].z, fma(_1258, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1257));
        float _2377;
        if (_2210 > 0.0)
        {
            _2377 = abs((1.0 - _2199) / _2210);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2199 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2377 = frontier_phi_25_21_ladder;
        }
        float _2656;
        if (_2213 > 0.0)
        {
            _2656 = abs((1.0 - _2203) / _2213);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2213 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2203 + 1.0) / _2213);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2656 = frontier_phi_37_32_ladder;
        }
        float _2869;
        if (_2216 > 0.0)
        {
            _2869 = abs((1.0 - _2207) / _2216);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2216 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2207 + 1.0) / _2216);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2869 = frontier_phi_46_43_ladder;
        }
        float _2871 = isnan(_2656) ? _2377 : (isnan(_2377) ? _2656 : min(_2377, _2656));
        float _2872 = isnan(_2869) ? _2871 : (isnan(_2871) ? _2869 : min(_2871, _2869));
        float _2876 = (_2872 * _2210) + _2199;
        float _2877 = (_2872 * _2213) + _2203;
        float _2878 = (_2872 * _2216) + _2207;
        float _2879 = _2872 * 9.9999997473787516355514526367188e-05;
        float _2880 = (-1.0) - _2879;
        float _2882 = _2879 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2878 > _2882) || ((_2878 < _2880) || ((_2877 > _2882) || ((_2877 < _2880) || ((_2876 < _2880) || (_2876 > _2882))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3106 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2878, cbModelParam._m0[17u].z, fma(_2877, cbModelParam._m0[17u].y, _2876 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2878, cbModelParam._m0[18u].z, fma(_2877, cbModelParam._m0[18u].y, _2876 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2878, cbModelParam._m0[19u].z, fma(_2877, cbModelParam._m0[19u].y, _2876 * cbModelParam._m0[19u].x))), _2146);
            frontier_phi_22_46_ladder = _3106.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3106.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3106.x * cbModelParam._m0[1u].z;
        }
        _2235 = frontier_phi_22_46_ladder_2;
        _2237 = frontier_phi_22_46_ladder_1;
        _2239 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2219 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1257, _1258, _1259), _2146);
        _2235 = _2219.x * cbModelParam._m0[1u].z;
        _2237 = _2219.y * cbModelParam._m0[1u].z;
        _2239 = _2219.z * cbModelParam._m0[1u].z;
    }
    float _2252 = (((_1282 * _1234) + _1283) * _1249) * ((cbModelParam._m0[1u].w * (_2235 - _2137)) + _2137);
    float _2254 = (((_1282 * _1236) + _1283) * _1249) * ((cbModelParam._m0[1u].w * (_2237 - _2139)) + _2139);
    float _2256 = (((_1282 * _1237) + _1283) * _1249) * ((cbModelParam._m0[1u].w * (_2239 - _2141)) + _2141);
    float _2259 = fma(_2256, cbSceneParam._m0[89u].z, fma(_2254, cbSceneParam._m0[89u].y, _2252 * cbSceneParam._m0[89u].x));
    float _2262 = fma(_2256, cbSceneParam._m0[90u].z, fma(_2254, cbSceneParam._m0[90u].y, _2252 * cbSceneParam._m0[90u].x));
    float _2265 = fma(_2256, cbSceneParam._m0[91u].z, fma(_2254, cbSceneParam._m0[91u].y, _2252 * cbSceneParam._m0[91u].x));
    vec4 _2273 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1122, _1123));
    float _2275 = _2273.w;
    float _2287 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2275);
    float _2288 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2275);
    float _2289 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2275);
    uvec4 _2293 = floatBitsToUint(cbInstanceData._m0[_1177 + 5u]);
    uint _2295 = _2293.x * 14u;
    uint _2296 = _2295 + 13u;
    float _2303 = _1249 + (-1.0);
    float _2308 = (cbLight._m0[_2296].x * _2303) + 1.0;
    float _2309 = (cbLight._m0[_2296].y * _2303) + 1.0;
    float _2310 = (cbLight._m0[_2296].z * _2303) + 1.0;
    float _2311 = (cbLight._m0[_2296].w * _2303) + 1.0;
    uint _2312 = _2295 + 5u;
    float _2318 = isnan(1.0) ? _2309 : (isnan(_2309) ? 1.0 : min(_2309, 1.0));
    uint _2322 = _2295 + 4u;
    float _2331 = isnan(1.0) ? _2308 : (isnan(_2308) ? 1.0 : min(_2308, 1.0));
    uint _2335 = _2295 | 1u;
    float _2346 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_1054, _1055, _1056));
    float _2349 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_1054, _1055, _1056));
    float _4582 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _4593 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2354 = (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0))) * 0.3183098733425140380859375;
    float _2356 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * 0.3183098733425140380859375;
    float _2363 = ((cbLight._m0[_2312].x * _2318) * _2356) + (((cbLight._m0[_2322].x * _2287) * _2331) * _2354);
    float _2364 = ((_2318 * cbLight._m0[_2312].y) * _2356) + (((cbLight._m0[_2322].y * _2288) * _2331) * _2354);
    float _2365 = ((_2318 * cbLight._m0[_2312].z) * _2356) + (((cbLight._m0[_2322].z * _2289) * _2331) * _2354);
    uvec4 _2369 = floatBitsToUint(cbLight._m0[_2295 + 12u]);
    bool _2371 = _2369.x == 0u;
    float _2382;
    float _2384;
    float _2386;
    if (_2371)
    {
        _2382 = _2363;
        _2384 = _2364;
        _2386 = _2365;
    }
    else
    {
        uint _2390 = _2295 + 6u;
        float _2406 = (dot(vec3(cbLight._m0[_2295 + 2u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2407 = _2406 * _2406;
        float _4604 = isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0));
        float _2408 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _2409 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2382 = (((cbLight._m0[_2390].x * 0.3183098733425140380859375) * _2408) * _2409) + _2363;
        _2384 = (((cbLight._m0[_2390].y * 0.3183098733425140380859375) * _2408) * _2409) + _2364;
        _2386 = (((cbLight._m0[_2390].z * 0.3183098733425140380859375) * _2408) * _2409) + _2365;
    }
    bool _2389 = _2369.y == 0u;
    float _2427;
    float _2429;
    float _2431;
    if (_2389)
    {
        _2427 = _2382;
        _2429 = _2384;
        _2431 = _2386;
    }
    else
    {
        uint _2600 = _2295 + 7u;
        float _2616 = (dot(vec3(cbLight._m0[_2295 + 3u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2617 = _2616 * _2616;
        float _4620 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2618 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
        float _2619 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2427 = (((cbLight._m0[_2600].x * 0.3183098733425140380859375) * _2618) * _2619) + _2382;
        _2429 = (((cbLight._m0[_2600].y * 0.3183098733425140380859375) * _2618) * _2619) + _2384;
        _2431 = (((cbLight._m0[_2600].z * 0.3183098733425140380859375) * _2618) * _2619) + _2386;
    }
    uint _2434 = _2295 + 8u;
    float _2447 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2295].w)) * _1164) * 0.949999988079071044921875);
    float _2448 = _2447 * _2447;
    float _2449 = cbLight._m0[_2295].x + _1114;
    float _2450 = cbLight._m0[_2295].y + _1115;
    float _2451 = cbLight._m0[_2295].z + _1116;
    float _2455 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
    float _2456 = _2455 * _2449;
    float _2457 = _2455 * _2450;
    float _2458 = _2455 * _2451;
    float _2459 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2295].xyz));
    float _4636 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2462 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
    float _4647 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
    float _2463 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
    float _2464 = dot(vec3(_1054, _1055, _1056), vec3(_2456, _2457, _2458));
    float _4658 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2467 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _2468 = dot(vec3(cbLight._m0[_2295].xyz), vec3(_2456, _2457, _2458));
    float _4669 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
    float _2472 = _2448 * _2448;
    float _2476 = ((_2467 * _2467) * (_2472 + (-1.0))) + 1.0;
    float _2484 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
    float _2485 = 0.959999978542327880859375 - _1231;
    float _2487 = 0.959999978542327880859375 - _1232;
    float _2488 = 0.959999978542327880859375 - _1233;
    float _2495 = 1.0 - _2448;
    float _2506 = (0.5 / (((_2463 * ((_2462 * _2495) + _2448)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2495) + _2448) * _2462))) * _2462;
    float _4680 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2508 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2472 / ((_2476 * _2476) * 3.141590118408203125));
    uint _2522 = _2295 + 9u;
    float _2533 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2335].w)) * _1164) * 0.949999988079071044921875);
    float _2534 = _2533 * _2533;
    float _2535 = cbLight._m0[_2335].x + _1114;
    float _2536 = cbLight._m0[_2335].y + _1115;
    float _2537 = cbLight._m0[_2335].z + _1116;
    float _2541 = inversesqrt(dot(vec3(_2535, _2536, _2537), vec3(_2535, _2536, _2537)));
    float _2542 = _2541 * _2535;
    float _2543 = _2541 * _2536;
    float _2544 = _2541 * _2537;
    float _2545 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2335].xyz));
    float _4691 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2549 = dot(vec3(_1054, _1055, _1056), vec3(_2542, _2543, _2544));
    float _4702 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2553 = dot(vec3(cbLight._m0[_2335].xyz), vec3(_2542, _2543, _2544));
    float _4713 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2557 = _2534 * _2534;
    float _2561 = ((_2552 * _2552) * (_2557 + (-1.0))) + 1.0;
    float _2568 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
    float _2575 = 1.0 - _2534;
    float _2585 = (0.5 / (((_2463 * ((_2548 * _2575) + _2534)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2575) + _2534) * _2548))) * _2548;
    float _4724 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2587 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2557 / ((_2561 * _2561) * 3.141590118408203125));
    float _2597 = (((((_2568 * _2485) + _1234) * cbLight._m0[_2522].x) * _2587) * _2318) + ((((cbLight._m0[_2434].x * _2287) * ((_2484 * _2485) + _1234)) * _2508) * _2331);
    float _2598 = (((((_2568 * _2487) + _1236) * cbLight._m0[_2522].y) * _2587) * _2318) + ((((cbLight._m0[_2434].y * _2288) * ((_2484 * _2487) + _1236)) * _2508) * _2331);
    float _2599 = (((((_2568 * _2488) + _1237) * cbLight._m0[_2522].z) * _2587) * _2318) + ((((cbLight._m0[_2434].z * _2289) * ((_2484 * _2488) + _1237)) * _2508) * _2331);
    float _2661;
    float _2663;
    float _2665;
    if (_2371)
    {
        _2661 = _2597;
        _2663 = _2598;
        _2665 = _2599;
    }
    else
    {
        uint _2667 = _2295 + 2u;
        uint _2671 = _2295 + 10u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _1164) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _1114;
        float _2688 = cbLight._m0[_2667].y + _1115;
        float _2689 = cbLight._m0[_2667].z + _1116;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2667].xyz));
        float _4735 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2701 = dot(vec3(_1054, _1055, _1056), vec3(_2694, _2695, _2696));
        float _4746 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4757 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
        float _2727 = 1.0 - _2686;
        float _2737 = (0.5 / (((_2463 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2727) + _2686) * _2700))) * _2700;
        float _4768 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2310 : (isnan(_2310) ? 1.0 : min(_2310, 1.0));
        _2661 = (((((_2720 * _2485) + _1234) * cbLight._m0[_2671].x) * _2739) * _2740) + _2597;
        _2663 = (((((_2720 * _2487) + _1236) * cbLight._m0[_2671].y) * _2739) * _2740) + _2598;
        _2665 = (((((_2720 * _2488) + _1237) * cbLight._m0[_2671].z) * _2739) * _2740) + _2599;
    }
    float _2775;
    float _2777;
    float _2779;
    if (_2389)
    {
        _2775 = _2661;
        _2777 = _2663;
        _2779 = _2665;
    }
    else
    {
        uint _2786 = _2295 + 3u;
        uint _2790 = _2295 + 11u;
        float _2804 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2786].w)) * _1164) * 0.949999988079071044921875);
        float _2805 = _2804 * _2804;
        float _2806 = cbLight._m0[_2786].x + _1114;
        float _2807 = cbLight._m0[_2786].y + _1115;
        float _2808 = cbLight._m0[_2786].z + _1116;
        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
        float _2813 = _2812 * _2806;
        float _2814 = _2812 * _2807;
        float _2815 = _2812 * _2808;
        float _2816 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2786].xyz));
        float _4784 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
        float _2820 = dot(vec3(_1054, _1055, _1056), vec3(_2813, _2814, _2815));
        float _4795 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2823 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
        float _2824 = dot(vec3(cbLight._m0[_2786].xyz), vec3(_2813, _2814, _2815));
        float _4806 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        float _2828 = _2805 * _2805;
        float _2832 = ((_2823 * _2823) * (_2828 + (-1.0))) + 1.0;
        float _2839 = exp2(log2(1.0 - (isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0)))) * 5.0);
        float _2846 = 1.0 - _2805;
        float _2856 = (0.5 / (((_2463 * ((_2819 * _2846) + _2805)) + 9.9999999392252902907785028219223e-09) + (((_2463 * _2846) + _2805) * _2819))) * _2819;
        float _4817 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2858 = (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0))) * (_2828 / ((_2832 * _2832) * 3.141590118408203125));
        float _2859 = isnan(1.0) ? _2311 : (isnan(_2311) ? 1.0 : min(_2311, 1.0));
        _2775 = (((((_2839 * _2485) + _1234) * cbLight._m0[_2790].x) * _2858) * _2859) + _2661;
        _2777 = (((((_2839 * _2487) + _1236) * cbLight._m0[_2790].y) * _2858) * _2859) + _2663;
        _2779 = (((((_2839 * _2488) + _1237) * cbLight._m0[_2790].z) * _2858) * _2859) + _2665;
    }
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    float _3002;
    float _3004;
    if (_2293.y == 0u)
    {
        float _2934 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2935 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2934;
        float _2936 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2934;
        float _2937 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2934;
        uvec4 _2949 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2950 = _2949.x;
        uint _2961 = uint((float(_2949.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1123) / _2950))) + floor(float(uint(cbSceneParam._m0[85u].x * _1122) / _2950)));
        float _2971 = (log2(_2937 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2972 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        uint _2975 = uint(isnan(14.0) ? _2972 : (isnan(_2972) ? 14.0 : min(_2972, 14.0)));
        uvec4 _2980 = texelFetch(g_lightClusterGridBuffer, int(((_2975 << 2u) + (_2961 << 6u)) >> 2u));
        uint _2981 = _2980.x;
        uint _2982 = _2949.z;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        float _3121;
        if (((((1u << ((_2982 >> 4u) & 15u)) + 4294967295u) & _2981) == 0u) || ((_2982 & 240u) == 0u))
        {
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
            _3119 = 0.0;
            _3121 = 0.0;
        }
        else
        {
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3120;
            float _3122;
            float _3264 = 0.0;
            float _3265 = 0.0;
            float _3266 = 0.0;
            float _3267 = 0.0;
            float _3268 = 0.0;
            float _3269 = 0.0;
            uint _3270 = 0u;
            uint _3279;
            bool _3280;
            for (;;)
            {
                _3279 = texelFetch(g_lightClassification, int((((_2975 << 5u) + (_2961 << 9u)) + (_3270 << 2u)) >> 2u)).x;
                _3280 = _3279 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3280)
                {
                    frontier_phi_61_pred = _3264;
                    frontier_phi_61_pred_1 = _3269;
                    frontier_phi_61_pred_2 = _3268;
                    frontier_phi_61_pred_3 = _3267;
                    frontier_phi_61_pred_4 = _3266;
                    frontier_phi_61_pred_5 = _3265;
                }
                else
                {
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    float _3393;
                    uint _3394;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3266;
                    _3391 = _3267;
                    _3392 = _3268;
                    _3393 = _3269;
                    _3394 = _3279;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    for (;;)
                    {
                        uint _3398 = uint(findLSB(_3394)) + (_3270 << 5u);
                        uint _3395 = (_3394 + 4294967295u) & _3394;
                        uint _3400 = _3398 * 48u;
                        vec4 _3414 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3400)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3400 + 3u)).x));
                        uint _3420 = (_3398 * 48u) + 4u;
                        vec4 _3433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3420)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3420 + 3u)).x));
                        uint _3439 = (_3398 * 48u) + 8u;
                        vec3 _3450 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3439)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3439 + 2u)).x));
                        float _3454 = _3414.x - _2935;
                        float _3455 = _3414.y - _2936;
                        float _3456 = _3414.z - _2937;
                        float _3457 = dot(vec3(_3454, _3455, _3456), vec3(_3454, _3455, _3456));
                        float _3460 = inversesqrt(_3457);
                        float _3461 = _3460 * _3454;
                        float _3462 = _3460 * _3455;
                        float _3463 = _3460 * _3456;
                        float _3464 = dot(vec3(_1145, _1148, _1151), vec3(_3461, _3462, _3463));
                        float _3469 = 1.0 - (_3457 * _3414.w);
                        float _4843 = isnan(0.0) ? _3469 : (isnan(_3469) ? 0.0 : max(_3469, 0.0));
                        float _3470 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                        float _3471 = sqrt(_3457) * _3433.w;
                        float _3474 = 1.39999997615814208984375 / (_3471 + 1.39999997615814208984375);
                        float _3475 = _3474 * _3474;
                        float _3478 = ((1.0 - _3475) * _3464) + _3475;
                        float _3481 = _3471 * _3471;
                        float _3485 = ((isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0))) * _3470) / ((_3481 * 0.699999988079071044921875) + 1.0);
                        float _3489 = (-0.0) - _2935;
                        float _3490 = (-0.0) - _2936;
                        float _3491 = (-0.0) - _2937;
                        float _3495 = inversesqrt(dot(vec3(_3489, _3490, _3491), vec3(_3489, _3490, _3491)));
                        float _3496 = _3495 * _3489;
                        float _3497 = _3495 * _3490;
                        float _3498 = _3495 * _3491;
                        float _3506 = exp2(log2(1.0 / ((_3481 * 3.5) + 5.0)) * 0.25);
                        float _3507 = 1.0 - _1265;
                        float _3514 = sqrt(1.0 - ((1.0 - (_3507 * _3507)) * (1.0 - (_3506 * _3506))));
                        float _3515 = _3514 * _3514;
                        float _3516 = _3515 * _3515;
                        float _3517 = _3496 + _3461;
                        float _3518 = _3497 + _3462;
                        float _3519 = _3498 + _3463;
                        float _3523 = inversesqrt(dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519)));
                        float _3527 = dot(vec3(_1145, _1148, _1151), vec3(_3496, _3497, _3498));
                        float _4859 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                        float _3531 = dot(vec3(_1145, _1148, _1151), vec3(_3523 * _3517, _3523 * _3518, _3523 * _3519));
                        float _4870 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                        float _3538 = ((_3534 * _3534) * (_3516 + (-1.0))) + 1.0;
                        float _3539 = _3474 * _3515;
                        float _3540 = _3539 * _3539;
                        float _3543 = ((1.0 - _3540) * _3464) + _3540;
                        float _4881 = isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0));
                        float _3544 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                        float _3545 = 1.0 - _3515;
                        float _3555 = (0.5 / (((_3544 * ((_3530 * _3545) + _3515)) + 9.9999999392252902907785028219223e-09) + (((_3544 * _3545) + _3515) * _3530))) * _3544;
                        float _4892 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                        float _3566 = (((_3516 * 3.1415927410125732421875) * (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0)))) / ((_3538 * _3538) * ((_3481 * 2.1991131305694580078125) + 3.141590118408203125))) * _3470;
                        _3323 = (_3485 * _3433.x) + _3391;
                        _3324 = (_3485 * _3433.y) + _3392;
                        _3325 = (_3485 * _3433.z) + _3393;
                        _3320 = (_3566 * _3450.x) + _3388;
                        _3321 = (_3566 * _3450.y) + _3389;
                        _3322 = (_3566 * _3450.z) + _3390;
                        if (_3395 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3322;
                            _3391 = _3323;
                            _3392 = _3324;
                            _3393 = _3325;
                            _3394 = _3395;
                        }
                    }
                    frontier_phi_61_pred = _3320;
                    frontier_phi_61_pred_1 = _3325;
                    frontier_phi_61_pred_2 = _3324;
                    frontier_phi_61_pred_3 = _3323;
                    frontier_phi_61_pred_4 = _3322;
                    frontier_phi_61_pred_5 = _3321;
                }
                _3112 = frontier_phi_61_pred;
                _3122 = frontier_phi_61_pred_1;
                _3120 = frontier_phi_61_pred_2;
                _3118 = frontier_phi_61_pred_3;
                _3116 = frontier_phi_61_pred_4;
                _3114 = frontier_phi_61_pred_5;
                uint _3271 = _3270 + 1u;
                if (_3271 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3264 = _3112;
                    _3265 = _3114;
                    _3266 = _3116;
                    _3267 = _3118;
                    _3268 = _3120;
                    _3269 = _3122;
                    _3270 = _3271;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
            _3119 = _3120;
            _3121 = _3122;
        }
        uvec4 _3125 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3126 = _3125.z;
        uint _3128 = (_3126 >> 8u) & 15u;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        float _3240;
        float _3242;
        if (((4294967295u << _3128) & _2981) == 0u)
        {
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
            _3240 = _3119;
            _3242 = _3121;
        }
        else
        {
            float _3257 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
            float _3258 = _3257 * _2935;
            float _3259 = _3257 * _2936;
            float _3260 = _3257 * _2937;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3128 < ((_3126 >> 12u) & 15u))
            {
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3241;
                float _3243;
                float _3371 = _3111;
                float _3372 = _3113;
                float _3373 = _3115;
                float _3374 = _3117;
                float _3375 = _3119;
                float _3376 = _3121;
                uint _3377 = _3128;
                uint _3386;
                bool _3387;
                for (;;)
                {
                    _3386 = texelFetch(g_lightClassification, int((((_2975 << 5u) + (_2961 << 9u)) + (_3377 << 2u)) >> 2u)).x;
                    _3387 = _3386 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3387)
                    {
                        frontier_phi_67_pred = _3374;
                        frontier_phi_67_pred_1 = _3375;
                        frontier_phi_67_pred_2 = _3376;
                        frontier_phi_67_pred_3 = _3373;
                        frontier_phi_67_pred_4 = _3372;
                        frontier_phi_67_pred_5 = _3371;
                    }
                    else
                    {
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3864;
                        float _3865;
                        float _3866;
                        float _3867;
                        float _3868;
                        float _3869;
                        float _3584 = _3371;
                        float _3585 = _3372;
                        float _3586 = _3373;
                        float _3587 = _3374;
                        float _3588 = _3375;
                        float _3589 = _3376;
                        uint _3590 = _3386;
                        uint _3591;
                        vec4 _3616;
                        float _3617;
                        vec4 _3632;
                        vec3 _3644;
                        vec4 _3659;
                        vec4 _3674;
                        float _3720;
                        bool _3721;
                        for (;;)
                        {
                            uint _3601 = ((_3377 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3590));
                            _3591 = (_3590 + 4294967295u) & _3590;
                            uint _3603 = _3601 * 40u;
                            _3616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 3u)).x));
                            _3617 = _3616.w;
                            uint _3619 = (_3601 * 40u) + 4u;
                            _3632 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3619 + 3u)).x));
                            uint _3634 = (_3601 * 40u) + 8u;
                            _3644 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3634)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3634 + 2u)).x));
                            uint _3646 = (_3601 * 40u) + 16u;
                            _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3661 = (_3601 * 40u) + 20u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            uint _3676 = (_3601 * 40u) + 24u;
                            vec4 _3689 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3676)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3676 + 3u)).x));
                            uint _3695 = (_3601 * 40u) + 28u;
                            vec4 _3708 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3695)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3695 + 3u)).x));
                            _3720 = fma(_2937, _3708.z, fma(_2936, _3708.y, _3708.x * _2935)) + _3708.w;
                            _3721 = !((fma(_2937, _3689.z, fma(_2936, _3689.y, _3689.x * _2935)) + _3689.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3721)
                            {
                                float _3748 = _3616.x - _2935;
                                float _3749 = _3616.y - _2936;
                                float _3750 = _3616.z - _2937;
                                float _3751 = dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750));
                                float _3754 = inversesqrt(_3751);
                                float _3755 = _3754 * _3748;
                                float _3756 = _3754 * _3749;
                                float _3757 = _3754 * _3750;
                                float _3761 = 1.0 - (_3751 / (_3617 * _3617));
                                float _4903 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3766 = sqrt(_3751) * _3632.w;
                                float _3768 = 1.39999997615814208984375 / (_3766 + 1.39999997615814208984375);
                                float _3769 = _3768 * _3768;
                                float _3772 = ((1.0 - _3769) * dot(vec3(_3755, _3756, _3757), vec3(_1145, _1148, _1151))) + _3769;
                                float _3775 = _3766 * _3766;
                                float _3779 = (fma(_2937, _3659.z, fma(_2936, _3659.y, _3659.x * _2935)) + _3659.w) / _3720;
                                float _3780 = (fma(_2937, _3674.z, fma(_2936, _3674.y, _3674.x * _2935)) + _3674.w) / _3720;
                                float _3784 = 1.0 - dot(vec2(_3779, _3780), vec2(_3779, _3780));
                                float _4919 = isnan(0.0) ? _3784 : (isnan(_3784) ? 0.0 : max(_3784, 0.0));
                                float _3785 = isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0));
                                float _3786 = _3785 * (((isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0))) * _3762) / ((_3775 * 0.699999988079071044921875) + 1.0));
                                float _3798 = exp2(log2(1.0 / ((_3775 * 3.5) + 5.0)) * 0.25);
                                float _3799 = 1.0 - _1265;
                                float _3806 = sqrt(1.0 - ((1.0 - (_3799 * _3799)) * (1.0 - (_3798 * _3798))));
                                float _3807 = _3806 * _3806;
                                float _3808 = _3807 * _3807;
                                float _3809 = _3755 - _3258;
                                float _3810 = _3756 - _3259;
                                float _3811 = _3757 - _3260;
                                float _3815 = inversesqrt(dot(vec3(_3809, _3810, _3811), vec3(_3809, _3810, _3811)));
                                float _3819 = dot(vec3(_1145, _1148, _1151), vec3((-0.0) - _3258, (-0.0) - _3259, (-0.0) - _3260));
                                float _4930 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
                                float _3823 = dot(vec3(_1145, _1148, _1151), vec3(_3815 * _3809, _3815 * _3810, _3815 * _3811));
                                float _4941 = isnan(0.0) ? _3823 : (isnan(_3823) ? 0.0 : max(_3823, 0.0));
                                float _3826 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
                                float _3830 = ((_3826 * _3826) * (_3808 + (-1.0))) + 1.0;
                                float _3831 = _3768 * _3807;
                                float _3832 = _3831 * _3831;
                                float _3838 = ((1.0 - _3832) * dot(vec3(_1145, _1148, _1151), vec3(_3755, _3756, _3757))) + _3832;
                                float _4952 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0));
                                float _3840 = 1.0 - _3807;
                                float _3850 = (0.5 / (((_3839 * ((_3822 * _3840) + _3807)) + 9.9999999392252902907785028219223e-09) + (((_3839 * _3840) + _3807) * _3822))) * _3839;
                                float _4963 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3860 = (_3785 * _3762) * (((_3808 * 3.1415927410125732421875) * (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0)))) / ((_3830 * _3830) * ((_3775 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3860 * _3644.x;
                                frontier_phi_73_pred_1 = _3860 * _3644.y;
                                frontier_phi_73_pred_2 = _3786 * _3632.z;
                                frontier_phi_73_pred_3 = _3786 * _3632.y;
                                frontier_phi_73_pred_4 = _3786 * _3632.x;
                                frontier_phi_73_pred_5 = _3860 * _3644.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_73_pred;
                            _3865 = frontier_phi_73_pred_1;
                            _3869 = frontier_phi_73_pred_2;
                            _3868 = frontier_phi_73_pred_3;
                            _3867 = frontier_phi_73_pred_4;
                            _3866 = frontier_phi_73_pred_5;
                            _3574 = _3867 + _3587;
                            _3575 = _3868 + _3588;
                            _3576 = _3869 + _3589;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3573 = _3866 + _3586;
                            if (_3591 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3573;
                                _3587 = _3574;
                                _3588 = _3575;
                                _3589 = _3576;
                                _3590 = _3591;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3574;
                        frontier_phi_67_pred_1 = _3575;
                        frontier_phi_67_pred_2 = _3576;
                        frontier_phi_67_pred_3 = _3573;
                        frontier_phi_67_pred_4 = _3572;
                        frontier_phi_67_pred_5 = _3571;
                    }
                    _3239 = frontier_phi_67_pred;
                    _3241 = frontier_phi_67_pred_1;
                    _3243 = frontier_phi_67_pred_2;
                    _3237 = frontier_phi_67_pred_3;
                    _3235 = frontier_phi_67_pred_4;
                    _3233 = frontier_phi_67_pred_5;
                    uint _3378 = _3377 + 1u;
                    if (_3378 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3371 = _3233;
                        _3372 = _3235;
                        _3373 = _3237;
                        _3374 = _3239;
                        _3375 = _3241;
                        _3376 = _3243;
                        _3377 = _3378;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3241;
                frontier_phi_55_56_ladder_1 = _3243;
                frontier_phi_55_56_ladder_2 = _3239;
                frontier_phi_55_56_ladder_3 = _3237;
                frontier_phi_55_56_ladder_4 = _3235;
                frontier_phi_55_56_ladder_5 = _3233;
            }
            else
            {
                frontier_phi_55_56_ladder = _3119;
                frontier_phi_55_56_ladder_1 = _3121;
                frontier_phi_55_56_ladder_2 = _3117;
                frontier_phi_55_56_ladder_3 = _3115;
                frontier_phi_55_56_ladder_4 = _3113;
                frontier_phi_55_56_ladder_5 = _3111;
            }
            _3232 = frontier_phi_55_56_ladder_5;
            _3234 = frontier_phi_55_56_ladder_4;
            _3236 = frontier_phi_55_56_ladder_3;
            _3238 = frontier_phi_55_56_ladder_2;
            _3240 = frontier_phi_55_56_ladder;
            _3242 = frontier_phi_55_56_ladder_1;
        }
        float _3247 = isnan(1.0) ? _1249 : (isnan(_1249) ? 1.0 : min(_1249, 1.0));
        _2994 = (_3247 * _3238) + _2427;
        _2996 = (_3247 * _3240) + _2429;
        _2998 = (_3247 * _3242) + _2431;
        _3000 = ((_3232 * _1234) * _3247) + _2775;
        _3002 = ((_3234 * _1236) * _3247) + _2777;
        _3004 = ((_3236 * _1237) * _3247) + _2779;
    }
    else
    {
        _2994 = _2427;
        _2996 = _2429;
        _2998 = _2431;
        _3000 = _2775;
        _3002 = _2777;
        _3004 = _2779;
    }
    uint _3010 = _1178 + uint(cbMatDynParam._m0[0u].w);
    float _3016 = cbInstanceData._m0[_3010].x * ((((cbMtdParam._m0[22u].x * _967.x) * cbMtdParam._m0[32u].x) * _988) + _757);
    float _3017 = cbInstanceData._m0[_3010].y * ((((cbMtdParam._m0[22u].y * _967.y) * cbMtdParam._m0[32u].x) * _988) + _758);
    float _3018 = cbInstanceData._m0[_3010].z * ((((cbMtdParam._m0[22u].z * _967.z) * cbMtdParam._m0[32u].x) * _988) + _759);
    float _4979 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _4990 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
    float _5001 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
    float _3035 = (((isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (_2994 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1249))) + ((_3000 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _2046)) * cbPerFrame._m0[3u].x)) + _3016;
    float _3037 = (_3017 + ((_3002 + ((isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0))) * _2046)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4990 : (isnan(_4990) ? 1.0 : min(_4990, 1.0))) * (_2996 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1249)));
    float _3039 = (_3018 + ((_3004 + ((isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))) * _2046)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0))) * (_2998 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1249)));
    float _5027 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3052 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
    uint _3053 = _1177 + 6u;
    float _3061 = _1122 / cbSceneParam._m0[86u].x;
    float _3062 = _1123 / cbSceneParam._m0[86u].y;
    vec4 _3076 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3061, _3062, (log2((isnan(cbSceneParam._m0[77u].w) ? _1077 : (isnan(_1077) ? cbSceneParam._m0[77u].w : min(_1077, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3078 = _3076.x;
    float _3079 = _3076.y;
    float _3080 = _3076.z;
    float _3081 = _3076.w;
    float _3173;
    float _3175;
    float _3177;
    float _3179;
    if (_1077 > cbSceneParam._m0[78u].w)
    {
        float _3136 = isnan(_1077) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1077 : min(cbSceneParam._m0[80u].w, _1077));
        float _3137 = _3136 / _1077;
        float _3148 = _3137 * _1107;
        float _3149 = _1108 * _3137;
        float _3150 = (-0.0) - _3149;
        float _3151 = _3137 * _1109;
        float _3153 = (cbSceneParam._m0[77u].w * _3150) / _3136;
        float _3154 = _3153 + cbSceneParam._m0[79u].w;
        float _3155 = cbSceneParam._m0[79u].w - _3149;
        float _3161 = sqrt(((_3148 * _3148) + (_3149 * _3149)) + (_3151 * _3151));
        float _3164 = (1.0 - (cbSceneParam._m0[77u].w / _3136)) * _3161;
        float _3169 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3171 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3333;
        if (abs((_3150 - _3153) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3333 = ((((_3154 > 0.0) ? exp2(_3169 * _3154) : (2.0 - exp2(_3171 * _3154))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3164;
        }
        else
        {
            float _3293 = 1.0 / cbSceneParam._m0[80u].x;
            float _3294 = isnan(_3155) ? _3154 : (isnan(_3154) ? _3155 : max(_3154, _3155));
            float _3295 = isnan(_3155) ? _3154 : (isnan(_3154) ? _3155 : min(_3154, _3155));
            float _3304 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : min(_3294, 0.0));
            float _3305 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : min(_3295, 0.0));
            _3333 = ((abs(_3161 / _3150) * cbSceneParam._m0[80u].y) * ((((_3304 - _3305) * 2.0) - ((exp2(_3169 * (isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0)))) - exp2(_3169 * (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))))) * _3293)) - ((exp2(_3171 * _3304) - exp2(_3171 * _3305)) * _3293))) + (_3164 * cbSceneParam._m0[80u].z);
        }
        vec4 _3335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3061, _3062, 1.0), 0.0);
        float _3344 = exp2((_3333 * (-1.44269502162933349609375)) * (1.0 - _3335.w));
        float _3345 = log2(_3344);
        float _3361 = log2(_3081);
        _3173 = (exp2(_3361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].x)) * _3335.x) / cbSceneParam._m0[78u].x)) + _3078;
        _3175 = (exp2(_3361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].y)) * _3335.y) / cbSceneParam._m0[78u].y)) + _3079;
        _3177 = (exp2(_3361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].z)) * _3335.z) / cbSceneParam._m0[78u].z)) + _3080;
        _3179 = _3344 * _3081;
    }
    else
    {
        _3173 = _3078;
        _3175 = _3079;
        _3177 = _3080;
        _3179 = _3081;
    }
    float _3191 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3192 = _3191 == 3.0;
    float _3193 = log2(_3179);
    float _3197 = exp2(_3193 * cbSceneParam._m0[78u].x);
    float _3198 = exp2(_3193 * cbSceneParam._m0[78u].y);
    float _3199 = exp2(_3193 * cbSceneParam._m0[78u].z);
    float _3200 = _3197 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)));
    float _3201 = _3198 * (isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0)));
    float _3202 = _3199 * (isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0)));
    float _3211 = (_3191 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3211 * (_3192 ? _3200 : (_3200 + (cbSceneParam._m0[72u].w * _3173)));
    SV_Target.y = _3211 * (_3192 ? _3201 : (_3201 + (cbSceneParam._m0[72u].w * _3175)));
    SV_Target.z = _3211 * (_3192 ? _3202 : (_3202 + (cbSceneParam._m0[72u].w * _3177)));
    SV_Target.w = cbInstanceData._m0[_3053].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3016) * _3052) * _3197) * _3211;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3017) * _3052) * _3198) * _3211;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3018) * _3052) * _3199) * _3211;
    SV_Target_1.w = cbInstanceData._m0[_3053].w;
}


