#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1612;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _281 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _288 = log2(0.0);
    float _290 = exp2(_288 * cbMtdParam._m0[31u].z);
    float _294 = _290 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _290);
    float _295 = _290 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _290);
    float _296 = _290 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _290);
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    float _302 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    float _303 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    vec4 _319 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _323 = _319.z;
    float _324 = _319.w;
    float _325 = 1.0 - _324;
    float _332 = exp2(log2((1.0 - (_325 * _323)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    float _346 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_325 * _325) * _323))) * cbMtdParam._m0[34u].w);
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    vec4 _361 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _364 = _361.y;
    float _367 = (_364 * ((isnan(1.0) ? _347 : (isnan(_347) ? 1.0 : min(_347, 1.0))) - _324)) + _324;
    vec4 _379 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[12u].x;
    _202[0u] = cbMtdParam._m0[12u].y;
    _203[0u] = cbMtdParam._m0[12u].z;
    _201[1u] = cbMtdParam._m0[13u].x;
    _202[1u] = cbMtdParam._m0[13u].y;
    _203[1u] = cbMtdParam._m0[13u].z;
    _201[2u] = cbMtdParam._m0[14u].x;
    _202[2u] = cbMtdParam._m0[14u].y;
    _203[2u] = cbMtdParam._m0[14u].z;
    _201[3u] = cbMtdParam._m0[15u].x;
    _202[3u] = cbMtdParam._m0[15u].y;
    _203[3u] = cbMtdParam._m0[15u].z;
    _201[4u] = cbMtdParam._m0[16u].x;
    _202[4u] = cbMtdParam._m0[16u].y;
    _203[4u] = cbMtdParam._m0[16u].z;
    _201[5u] = cbMtdParam._m0[11u].x;
    _202[5u] = cbMtdParam._m0[11u].y;
    _203[5u] = cbMtdParam._m0[11u].z;
    float _447 = (_361.x + (-0.02500000037252902984619140625)) * 8.0;
    float _449 = roundEven(_447);
    float _450 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    uint _453 = uint(int(isnan(5.0) ? _450 : (isnan(_450) ? 5.0 : min(_450, 5.0))));
    float _204[6];
    float _205[6];
    float _206[6];
    _204[0u] = 1.0;
    _205[0u] = 1.0;
    _206[0u] = 1.0;
    _204[1u] = cbMtdParam._m0[23u].x;
    _205[1u] = cbMtdParam._m0[23u].y;
    _206[1u] = cbMtdParam._m0[23u].z;
    _204[2u] = cbMtdParam._m0[21u].x;
    _205[2u] = cbMtdParam._m0[21u].y;
    _206[2u] = cbMtdParam._m0[21u].z;
    _204[3u] = cbMtdParam._m0[19u].x;
    _205[3u] = cbMtdParam._m0[19u].y;
    _206[3u] = cbMtdParam._m0[19u].z;
    _204[4u] = cbMtdParam._m0[18u].x;
    _205[4u] = cbMtdParam._m0[18u].y;
    _206[4u] = cbMtdParam._m0[18u].z;
    _204[5u] = cbMtdParam._m0[17u].x;
    _205[5u] = cbMtdParam._m0[17u].y;
    _206[5u] = cbMtdParam._m0[17u].z;
    float _543 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[38u].w * TEXCOORD.x) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[39u].x * TEXCOORD.y) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _544 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    uint _546 = uint(int(isnan(5.0) ? _544 : (isnan(_544) ? 5.0 : min(_544, 5.0))));
    float _210[6];
    _210[0u] = 1.0;
    _210[1u] = cbMtdParam._m0[23u].w;
    _210[2u] = cbMtdParam._m0[21u].w;
    _210[3u] = cbMtdParam._m0[19u].w;
    _210[4u] = cbMtdParam._m0[18u].w;
    _210[5u] = cbMtdParam._m0[17u].w;
    float _583 = ((((_201[_453] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_204[_546] - _201[_453])) * _210[_453])) * _364) + cbMtdParam._m0[10u].x) * _379.x;
    float _584 = ((((_202[_453] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_205[_546] - _202[_453])) * _210[_453])) * _364) + cbMtdParam._m0[10u].y) * _379.y;
    float _585 = ((((_203[_453] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_206[_546] - _203[_453])) * _210[_453])) * _364) + cbMtdParam._m0[10u].z) * _379.z;
    vec4 _597 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _617 = (((cbMtdParam._m0[9u].x * _597.x) - _583) * _367) + _583;
    float _618 = (((cbMtdParam._m0[9u].y * _597.y) - _584) * _367) + _584;
    float _619 = (((cbMtdParam._m0[9u].z * _597.z) - _585) * _367) + _585;
    vec4 _631 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _651 = (((cbMtdParam._m0[20u].x * _631.x) - _617) * _334) + _617;
    float _652 = (((cbMtdParam._m0[20u].y * _631.y) - _618) * _334) + _618;
    float _653 = (((cbMtdParam._m0[20u].z * _631.z) - _619) * _334) + _619;
    vec4 _666 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = cbMtdParam._m0[24u].x;
    _208[0u] = cbMtdParam._m0[24u].y;
    _209[0u] = cbMtdParam._m0[24u].z;
    _207[1u] = cbMtdParam._m0[25u].x;
    _208[1u] = cbMtdParam._m0[25u].y;
    _209[1u] = cbMtdParam._m0[25u].z;
    _207[2u] = cbMtdParam._m0[26u].x;
    _208[2u] = cbMtdParam._m0[26u].y;
    _209[2u] = cbMtdParam._m0[26u].z;
    _207[3u] = cbMtdParam._m0[27u].x;
    _208[3u] = cbMtdParam._m0[27u].y;
    _209[3u] = cbMtdParam._m0[27u].z;
    _207[4u] = cbMtdParam._m0[28u].x;
    _208[4u] = cbMtdParam._m0[28u].y;
    _209[4u] = cbMtdParam._m0[28u].z;
    _207[5u] = cbMtdParam._m0[29u].x;
    _208[5u] = cbMtdParam._m0[29u].y;
    _209[5u] = cbMtdParam._m0[29u].z;
    float _753 = _207[_453] * _364;
    float _754 = _208[_453] * _364;
    float _755 = _209[_453] * _364;
    float _756 = _753 + ((_281.x * 4.5) * ((((cbMtdParam._m0[30u].x * _666.x) - _651) * _300) + _651));
    float _757 = _754 + ((_281.y * 4.5) * ((((cbMtdParam._m0[30u].y * _666.y) - _652) * _302) + _652));
    float _758 = _755 + ((_281.z * 4.5) * ((((cbMtdParam._m0[30u].z * _666.z) - _653) * _303) + _653));
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[35u].y;
    _197[0u] = cbMtdParam._m0[35u].z;
    _196[1u] = cbMtdParam._m0[36u].w;
    _197[1u] = cbMtdParam._m0[37u].x;
    _196[2u] = cbMtdParam._m0[37u].y;
    _197[2u] = cbMtdParam._m0[37u].z;
    _196[3u] = cbMtdParam._m0[37u].w;
    _197[3u] = cbMtdParam._m0[38u].x;
    _196[4u] = cbMtdParam._m0[38u].y;
    _197[4u] = cbMtdParam._m0[38u].z;
    float _786 = roundEven(5.0 - _447);
    float _787 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _788 = isnan(4.0) ? _787 : (isnan(_787) ? 4.0 : min(_787, 4.0));
    float _790 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    uint _792 = uint(int(isnan(4.0) ? _790 : (isnan(_790) ? 4.0 : min(_790, 4.0))));
    float _801 = ((cbMtdParam._m0[39u].z - _197[_792]) * _367) + _197[_792];
    float _809 = ((cbMtdParam._m0[40u].x - _801) * _334) + _801;
    float _814 = ((cbMtdParam._m0[40u].z - _809) * _300) + _809;
    vec4 _828 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _830 = _828.x;
    float _831 = _828.y;
    float _833 = _828.z + _196[_792];
    vec4 _845 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _853 = (((cbMtdParam._m0[39u].y - _833) + _845.z) * _367) + _833;
    vec4 _865 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _873 = (((cbMtdParam._m0[39u].w - _853) + _865.z) * _334) + _853;
    float _879 = ((((_323 * 2.0) * _873) - _873) * cbMtdParam._m0[33u].w) + _873;
    vec4 _891 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _899 = (((_891.z + cbMtdParam._m0[40u].y) - _879) * _303) + _879;
    float _930 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _961 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_930 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_934 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _976 = (-0.0) - ((_934 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _980 = (_934 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _981 = isnan(_980) ? _976 : (isnan(_976) ? _980 : min(_976, _980));
    float _4063 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _982 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1007 = ((_845.x - _830) * _367) + _830;
    float _1008 = ((_845.y - _831) * _367) + _831;
    float _1013 = ((_865.x - _1007) * _334) + _1007;
    float _1014 = ((_865.y - _1008) * _334) + _1008;
    float _1023 = ((((_891.x - _1013) * _300) + _1013) * 2.0) + (-1.0);
    float _1024 = ((((_891.y - _1014) * _302) + _1014) * 2.0) + (-1.0);
    float _1025 = dot(vec2(_1023, _1024), vec2(_1023, _1024));
    float _4074 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
    float _1030 = sqrt(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))));
    float _1033 = (cbMtdParam._m0[34u].x * ((_319.x * 2.0) + (-1.0))) + _1023;
    float _1034 = (cbMtdParam._m0[34u].x * ((_319.y * 2.0) + (-1.0))) + _1024;
    float _1037 = fma(_1030, _250 * NORMAL.x, fma(_1034, _257 * TANGENT.x, (_243 * _235) * _1033));
    float _1040 = fma(_1030, _250 * NORMAL.y, fma(_1034, _257 * TANGENT.y, (_243 * _236) * _1033));
    float _1043 = fma(_1030, _250 * NORMAL.z, fma(_1034, _257 * TANGENT.z, (_243 * _237) * _1033));
    float _1047 = inversesqrt(dot(vec3(_1037, _1040, _1043), vec3(_1037, _1040, _1043)));
    float _1048 = _1047 * _1037;
    float _1049 = _1047 * _1040;
    float _1050 = _1047 * _1043;
    float _4085 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _1051 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _4096 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4107 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4118 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4129 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
    float _1055 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    float _1071 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1091 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1101 = cbSceneParam._m0[71u].x - (_930 / _1091);
    float _1102 = cbSceneParam._m0[71u].y - (_934 / _1091);
    float _1103 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1091);
    float _1107 = inversesqrt(dot(vec3(_1101, _1102, _1103), vec3(_1101, _1102, _1103)));
    float _1108 = _1101 * _1107;
    float _1109 = _1102 * _1107;
    float _1110 = _1103 * _1107;
    float _1116 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1117 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1119 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1121 = _1119.w;
    float _1139 = fma(_1050, cbSceneParam._m0[5u].z, fma(_1049, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1048));
    float _1142 = fma(_1050, cbSceneParam._m0[6u].z, fma(_1049, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1048));
    float _1145 = fma(_1050, cbSceneParam._m0[7u].z, fma(_1049, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1048));
    vec4 _1147 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1158 = (((_1147.y - _1051) + (_1147.w * _1051)) * cbMtdParam._m0[3u].x) + _1051;
    uint _1171 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1172 = _1171 + 9u;
    uint _1173 = _1172 + uint(cbMatDynParam._m0[0u].w);
    float _1179 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0)))) * cbInstanceData._m0[_1173].x;
    float _1180 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0)))) * cbInstanceData._m0[_1173].y;
    float _1181 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_1173].z;
    float _4140 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1182 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
    float _4151 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
    float _1183 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _4162 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1184 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
    vec4 _1185 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1190 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1201 = (((_1190.x - _1055) + (_1190.w * _1055)) * cbMtdParam._m0[3u].x) + _1055;
    float _1214 = (cbMtdParam._m0[3u].x * (((_1182 * _1121) - _1182) + _1185.x)) + _1182;
    float _1215 = (cbMtdParam._m0[3u].x * (((_1183 * _1121) - _1183) + _1185.y)) + _1183;
    float _1216 = (cbMtdParam._m0[3u].x * (((_1184 * _1121) - _1184) + _1185.z)) + _1184;
    float _1217 = 1.0 - _1201;
    float _1218 = _1217 * _1214;
    float _1219 = _1217 * _1215;
    float _1220 = _1217 * _1216;
    float _1225 = (_1214 + (-0.039999999105930328369140625)) * _1201;
    float _1226 = (_1215 + (-0.039999999105930328369140625)) * _1201;
    float _1227 = (_1216 + (-0.039999999105930328369140625)) * _1201;
    float _1228 = _1225 + 0.039999999105930328369140625;
    float _1230 = _1226 + 0.039999999105930328369140625;
    float _1231 = _1227 + 0.039999999105930328369140625;
    vec4 _1240 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1116, cbSceneParam._m0[86u].y * _1117));
    float _1243 = _1240.x * TEXCOORD_5.w;
    float _1244 = dot(vec3(_1048, _1049, _1050), vec3(_1108, _1109, _1110));
    float _1247 = _1244 * 2.0;
    float _1251 = (_1247 * _1048) - _1108;
    float _1252 = (_1247 * _1049) - _1109;
    float _1253 = (_1247 * _1050) - _1110;
    float _1257 = abs(dot(vec3(_1108, _1109, _1110), vec3(_1048, _1049, _1050)));
    float _4173 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
    float _1259 = sqrt(_1158);
    float _1270 = exp2((_1259 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1259 * 3.0));
    float _1276 = (1.0 - _1270) * ((_1259 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1277 = _1270 * _1259;
    float _1305 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1309 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1313 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1611;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1338 = fma(_1313, cbModelParam._m0[26u].z, fma(_1309, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1305));
        float _1342 = fma(_1313, cbModelParam._m0[27u].z, fma(_1309, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1305));
        float _1346 = fma(_1313, cbModelParam._m0[28u].z, fma(_1309, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1305));
        float _1370 = _1305 + _1048;
        float _1371 = _1309 + _1049;
        float _1372 = _1313 + _1050;
        float _1382 = fma(_1372, cbModelParam._m0[26u].z, fma(_1371, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1370)) - _1338;
        float _1383 = fma(_1372, cbModelParam._m0[27u].z, fma(_1371, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1370)) - _1342;
        float _1384 = fma(_1372, cbModelParam._m0[28u].z, fma(_1371, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1370)) - _1346;
        float _1388 = inversesqrt(dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384)));
        float _1400 = ((_1388 * _1382) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1338 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1388 * _1383) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1342 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1402 = ((_1388 * _1384) / cbModelParam._m0[34u].z) + ((((((_1346 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1405 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1412 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1419 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1400, _1401, _1402), 0.0);
        float _1439 = exp2((_1405.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1405.x + (-0.5));
        float _1441 = _1439 * (_1405.y + (-0.5));
        float _1442 = _1439 * (_1405.z + (-0.5));
        float _1449 = exp2((_1412.w + (-0.5)) * 20.0) * 2.0;
        float _1450 = _1449 * (_1412.x + (-0.5));
        float _1451 = _1449 * (_1412.y + (-0.5));
        float _1452 = _1449 * (_1412.z + (-0.5));
        float _1459 = exp2((_1419.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1419.x + (-0.5));
        float _1461 = _1459 * (_1419.y + (-0.5));
        float _1462 = _1459 * (_1419.z + (-0.5));
        float _1469 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1426.x + (-0.5));
        float _1471 = _1469 * (_1426.y + (-0.5));
        float _1472 = _1469 * (_1426.z + (-0.5));
        float _1473 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1474 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = _1440 * 0.5;
        float _1477 = _1450 * 0.5;
        float _1478 = _1460 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1493 = (dot(vec3(_1048, _1049, _1050), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1503 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1473 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4221 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1505 + 1.0))) + _1510) * _1473;
        float _1520 = _1441 * 0.5;
        float _1521 = _1451 * 0.5;
        float _1522 = _1461 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_1048, _1049, _1050), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1474 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4254 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1547 + 1.0))) + _1552) * _1474;
        float _1562 = _1442 * 0.5;
        float _1563 = _1452 * 0.5;
        float _1564 = _1462 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_1048, _1049, _1050), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4265 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4276 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4287 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0))) * (_1589 + 1.0))) + _1594) * _1475;
        _1611 = _1442;
        _1613 = _1441;
        _1614 = _1440;
        _1615 = _1452;
        _1616 = _1451;
        _1617 = _1450;
        _1618 = _1462;
        _1619 = _1461;
        _1620 = _1460;
        _1621 = _1475;
        _1622 = _1474;
        _1623 = _1473;
        _1624 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1625 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1626 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
    }
    else
    {
        _1611 = _1612;
        _1613 = _1612;
        _1614 = _1612;
        _1615 = _1612;
        _1616 = _1612;
        _1617 = _1612;
        _1618 = _1612;
        _1619 = _1612;
        _1620 = _1612;
        _1621 = _1612;
        _1622 = _1612;
        _1623 = _1612;
        _1624 = 0.0;
        _1625 = 0.0;
        _1626 = 0.0;
    }
    float _1916;
    float _1917;
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1649 = fma(_1313, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1305));
        float _1653 = fma(_1313, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1305));
        float _1657 = fma(_1313, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1305));
        float _1679 = _1305 + _1048;
        float _1680 = _1309 + _1049;
        float _1681 = _1313 + _1050;
        float _1691 = fma(_1681, cbModelParam._m0[30u].z, fma(_1680, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1679)) - _1649;
        float _1692 = fma(_1681, cbModelParam._m0[31u].z, fma(_1680, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1679)) - _1653;
        float _1693 = fma(_1681, cbModelParam._m0[32u].z, fma(_1680, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1679)) - _1657;
        float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
        float _1709 = ((_1697 * _1691) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1649 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1710 = ((_1697 * _1692) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1653 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1711 = ((_1697 * _1693) / cbModelParam._m0[35u].z) + ((((((_1657 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1713 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1720 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1727 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        vec4 _1734 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1709, _1710, _1711), 0.0);
        float _1746 = exp2((_1713.w + (-0.5)) * 20.0) * 2.0;
        float _1747 = _1746 * (_1713.x + (-0.5));
        float _1748 = _1746 * (_1713.y + (-0.5));
        float _1749 = _1746 * (_1713.z + (-0.5));
        float _1756 = exp2((_1720.w + (-0.5)) * 20.0) * 2.0;
        float _1757 = _1756 * (_1720.x + (-0.5));
        float _1758 = _1756 * (_1720.y + (-0.5));
        float _1759 = _1756 * (_1720.z + (-0.5));
        float _1766 = exp2((_1727.w + (-0.5)) * 20.0) * 2.0;
        float _1767 = _1766 * (_1727.x + (-0.5));
        float _1768 = _1766 * (_1727.y + (-0.5));
        float _1769 = _1766 * (_1727.z + (-0.5));
        float _1776 = exp2((_1734.w + (-0.5)) * 20.0) * 2.0;
        float _1777 = _1776 * (_1734.x + (-0.5));
        float _1778 = _1776 * (_1734.y + (-0.5));
        float _1779 = _1776 * (_1734.z + (-0.5));
        float _1780 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
        float _1781 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1782 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1783 = _1747 * 0.5;
        float _1784 = _1757 * 0.5;
        float _1785 = _1767 * 0.5;
        float _1786 = dot(vec3(_1783, _1784, _1785), vec3(_1783, _1784, _1785));
        float _1791 = (_1786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1786);
        float _1799 = (dot(vec3(_1048, _1049, _1050), vec3(_1791 * _1783, _1791 * _1784, _1791 * _1785)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
        float _1808 = sqrt(((_1784 * _1784) + (_1783 * _1783)) + (_1785 * _1785)) / (_1780 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1810 = _1809 * 2.0;
        float _1814 = (1.0 - _1809) / (_1809 + 1.0);
        float _4350 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        float _1815 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1824 = ((((1.0 - _1815) * (_1810 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1810 + 1.0))) + _1815) * _1780;
        float _1825 = _1748 * 0.5;
        float _1826 = _1758 * 0.5;
        float _1827 = _1768 * 0.5;
        float _1828 = dot(vec3(_1825, _1826, _1827), vec3(_1825, _1826, _1827));
        float _1833 = (_1828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1828);
        float _1841 = (dot(vec3(_1048, _1049, _1050), vec3(_1833 * _1825, _1833 * _1826, _1833 * _1827)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
        float _1850 = sqrt(((_1826 * _1826) + (_1825 * _1825)) + (_1827 * _1827)) / (_1781 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1852 = _1851 * 2.0;
        float _1856 = (1.0 - _1851) / (_1851 + 1.0);
        float _4383 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1866 = ((((1.0 - _1857) * (_1852 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1852 + 1.0))) + _1857) * _1781;
        float _1867 = _1749 * 0.5;
        float _1868 = _1759 * 0.5;
        float _1869 = _1769 * 0.5;
        float _1870 = dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869));
        float _1875 = (_1870 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1870);
        float _1883 = (dot(vec3(_1048, _1049, _1050), vec3(_1875 * _1867, _1875 * _1868, _1875 * _1869)) + 1.0) * 0.5;
        float _4394 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        float _1892 = sqrt(((_1868 * _1868) + (_1867 * _1867)) + (_1869 * _1869)) / (_1782 + 9.9999997473787516355514526367188e-06);
        float _4405 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
        float _1893 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
        float _1894 = _1893 * 2.0;
        float _1898 = (1.0 - _1893) / (_1893 + 1.0);
        float _4416 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1908 = ((((1.0 - _1899) * (_1894 + 2.0)) * exp2(log2(isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_1894 + 1.0))) + _1899) * _1782;
        _1916 = _1749;
        _1917 = _1748;
        _1918 = _1747;
        _1919 = _1759;
        _1920 = _1758;
        _1921 = _1757;
        _1922 = _1769;
        _1923 = _1768;
        _1924 = _1767;
        _1925 = _1782;
        _1926 = _1781;
        _1927 = _1780;
        _1928 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)));
        _1929 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)));
        _1930 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)));
    }
    else
    {
        _1916 = _1612;
        _1917 = _1612;
        _1918 = _1612;
        _1919 = _1612;
        _1920 = _1612;
        _1921 = _1612;
        _1922 = _1612;
        _1923 = _1612;
        _1924 = _1612;
        _1925 = _1612;
        _1926 = _1612;
        _1927 = _1612;
        _1928 = 0.0;
        _1929 = 0.0;
        _1930 = 0.0;
    }
    float _1940 = (cbModelParam._m0[1u].x * (_1928 - _1624)) + _1624;
    float _1941 = (cbModelParam._m0[1u].x * (_1929 - _1625)) + _1625;
    float _1942 = (cbModelParam._m0[1u].x * (_1930 - _1626)) + _1626;
    float _1963 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1941, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1966 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1941, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1969 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1941, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1940));
    float _1982 = _1251 * 0.5;
    float _1983 = _1252 * 0.5;
    float _1984 = _1253 * 0.5;
    float _1985 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1918, _1921, _1924, _1927));
    float _1988 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1917, _1920, _1923, _1926));
    float _1991 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1916, _1919, _1922, _1925));
    float _2025;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1998 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1611, _1615, _1618, _1621));
        float _2002 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1613, _1616, _1619, _1622));
        float _2006 = dot(vec4(_1982, _1983, _1984, 1.0), vec4(_1614, _1617, _1620, _1623));
        float _2013 = dot(vec4(cbModelParam._m0[39u]), vec4(_1982, _1983, _1984, 1.0));
        _2025 = dot(vec3(isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)), isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2013) ? 0.0 : (isnan(0.0) ? _2013 : max(0.0, _2013))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2025 = 1.0;
    }
    float _2036;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2027 = dot(vec4(cbModelParam._m0[40u]), vec4(_1982, _1983, _1984, 1.0));
        _2036 = dot(vec3(isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0)), isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0)), isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2027) ? 0.0 : (isnan(0.0) ? _2027 : max(0.0, _2027))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2036 = 1.0;
    }
    float _2040 = (_2036 * cbModelParam._m0[1u].x) + (_2025 * (1.0 - cbModelParam._m0[1u].x));
    float _2050 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1158);
    float _2051 = isnan(_2050) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2050 : min(cbModelParam._m0[25u].z, _2050));
    float _2131;
    float _2133;
    float _2135;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2098 = fma(_1313, cbModelParam._m0[13u].z, fma(_1309, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1305)) + cbModelParam._m0[13u].w;
        float _2102 = fma(_1313, cbModelParam._m0[14u].z, fma(_1309, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1305)) + cbModelParam._m0[14u].w;
        float _2106 = fma(_1313, cbModelParam._m0[15u].z, fma(_1309, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1305)) + cbModelParam._m0[15u].w;
        float _2109 = fma(_1253, cbModelParam._m0[13u].z, fma(_1252, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1251));
        float _2112 = fma(_1253, cbModelParam._m0[14u].z, fma(_1252, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1251));
        float _2115 = fma(_1253, cbModelParam._m0[15u].z, fma(_1252, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1251));
        float _2143;
        if (_2109 > 0.0)
        {
            _2143 = abs((1.0 - _2098) / _2109);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2109 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2098 + 1.0) / _2109);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2143 = frontier_phi_14_12_ladder;
        }
        float _2345;
        if (_2112 > 0.0)
        {
            _2345 = abs((1.0 - _2102) / _2112);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2112 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2102 + 1.0) / _2112);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2345 = frontier_phi_23_19_ladder;
        }
        float _2599;
        if (_2115 > 0.0)
        {
            _2599 = abs((1.0 - _2106) / _2115);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2106 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2599 = frontier_phi_35_30_ladder;
        }
        float _2601 = isnan(_2345) ? _2143 : (isnan(_2143) ? _2345 : min(_2143, _2345));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _2109) + _2098;
        float _2607 = (_2602 * _2112) + _2102;
        float _2608 = (_2602 * _2115) + _2106;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2611 = (-1.0) - _2609;
        float _2613 = _2609 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2608 > _2613) || ((_2608 < _2611) || ((_2607 > _2613) || ((_2607 < _2611) || ((_2606 < _2611) || (_2606 > _2613))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2736 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2608, cbModelParam._m0[9u].z, fma(_2607, cbModelParam._m0[9u].y, _2606 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2608, cbModelParam._m0[10u].z, fma(_2607, cbModelParam._m0[10u].y, _2606 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2608, cbModelParam._m0[11u].z, fma(_2607, cbModelParam._m0[11u].y, _2606 * cbModelParam._m0[11u].x))), _2051);
            frontier_phi_13_35_ladder = _2736.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2736.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2736.x * cbModelParam._m0[1u].y;
        }
        _2131 = frontier_phi_13_35_ladder_2;
        _2133 = frontier_phi_13_35_ladder_1;
        _2135 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1251, _1252, _1253), _2051);
        _2131 = _2119.x * cbModelParam._m0[1u].y;
        _2133 = _2119.y * cbModelParam._m0[1u].y;
        _2135 = _2119.z * cbModelParam._m0[1u].y;
    }
    float _2139 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1158);
    float _2140 = isnan(_2139) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2139 : min(cbModelParam._m0[25u].w, _2139));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2193 = fma(_1313, cbModelParam._m0[21u].z, fma(_1309, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1305)) + cbModelParam._m0[21u].w;
        float _2197 = fma(_1313, cbModelParam._m0[22u].z, fma(_1309, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1305)) + cbModelParam._m0[22u].w;
        float _2201 = fma(_1313, cbModelParam._m0[23u].z, fma(_1309, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1305)) + cbModelParam._m0[23u].w;
        float _2204 = fma(_1253, cbModelParam._m0[21u].z, fma(_1252, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1251));
        float _2207 = fma(_1253, cbModelParam._m0[22u].z, fma(_1252, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1251));
        float _2210 = fma(_1253, cbModelParam._m0[23u].z, fma(_1252, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1251));
        float _2350;
        if (_2204 > 0.0)
        {
            _2350 = abs((1.0 - _2193) / _2204);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2204 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2193 + 1.0) / _2204);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2350 = frontier_phi_25_21_ladder;
        }
        float _2626;
        if (_2207 > 0.0)
        {
            _2626 = abs((1.0 - _2197) / _2207);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2197 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2626 = frontier_phi_37_32_ladder;
        }
        float _2839;
        if (_2210 > 0.0)
        {
            _2839 = abs((1.0 - _2201) / _2210);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2201 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2839 = frontier_phi_46_43_ladder;
        }
        float _2841 = isnan(_2626) ? _2350 : (isnan(_2350) ? _2626 : min(_2350, _2626));
        float _2842 = isnan(_2839) ? _2841 : (isnan(_2841) ? _2839 : min(_2841, _2839));
        float _2846 = (_2842 * _2204) + _2193;
        float _2847 = (_2842 * _2207) + _2197;
        float _2848 = (_2842 * _2210) + _2201;
        float _2849 = _2842 * 9.9999997473787516355514526367188e-05;
        float _2850 = (-1.0) - _2849;
        float _2852 = _2849 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2848 > _2852) || ((_2848 < _2850) || ((_2847 > _2852) || ((_2847 < _2850) || ((_2846 < _2850) || (_2846 > _2852))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3076 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2848, cbModelParam._m0[17u].z, fma(_2847, cbModelParam._m0[17u].y, _2846 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2848, cbModelParam._m0[18u].z, fma(_2847, cbModelParam._m0[18u].y, _2846 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2848, cbModelParam._m0[19u].z, fma(_2847, cbModelParam._m0[19u].y, _2846 * cbModelParam._m0[19u].x))), _2140);
            frontier_phi_22_46_ladder = _3076.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3076.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3076.x * cbModelParam._m0[1u].z;
        }
        _2229 = frontier_phi_22_46_ladder_2;
        _2231 = frontier_phi_22_46_ladder_1;
        _2233 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1251, _1252, _1253), _2140);
        _2229 = _2213.x * cbModelParam._m0[1u].z;
        _2231 = _2213.y * cbModelParam._m0[1u].z;
        _2233 = _2213.z * cbModelParam._m0[1u].z;
    }
    float _2246 = (((_1276 * _1228) + _1277) * _1243) * ((cbModelParam._m0[1u].w * (_2229 - _2131)) + _2131);
    float _2248 = (((_1276 * _1230) + _1277) * _1243) * ((cbModelParam._m0[1u].w * (_2231 - _2133)) + _2133);
    float _2250 = (((_1276 * _1231) + _1277) * _1243) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2253 = fma(_2250, cbSceneParam._m0[89u].z, fma(_2248, cbSceneParam._m0[89u].y, _2246 * cbSceneParam._m0[89u].x));
    float _2256 = fma(_2250, cbSceneParam._m0[90u].z, fma(_2248, cbSceneParam._m0[90u].y, _2246 * cbSceneParam._m0[90u].x));
    float _2259 = fma(_2250, cbSceneParam._m0[91u].z, fma(_2248, cbSceneParam._m0[91u].y, _2246 * cbSceneParam._m0[91u].x));
    uvec4 _2269 = floatBitsToUint(cbInstanceData._m0[_1171 + 5u]);
    uint _2271 = _2269.x * 14u;
    uint _2272 = _2271 + 13u;
    float _2279 = _1243 + (-1.0);
    float _2284 = (cbLight._m0[_2272].x * _2279) + 1.0;
    float _2285 = (cbLight._m0[_2272].y * _2279) + 1.0;
    float _2286 = (cbLight._m0[_2272].z * _2279) + 1.0;
    float _2287 = (cbLight._m0[_2272].w * _2279) + 1.0;
    uint _2288 = _2271 + 5u;
    float _2294 = isnan(1.0) ? _2285 : (isnan(_2285) ? 1.0 : min(_2285, 1.0));
    uint _2298 = _2271 + 4u;
    float _2304 = isnan(1.0) ? _2284 : (isnan(_2284) ? 1.0 : min(_2284, 1.0));
    uint _2308 = _2271 | 1u;
    float _2319 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_1048, _1049, _1050));
    float _2322 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_1048, _1049, _1050));
    float _4552 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _4563 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2327 = (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0))) * 0.3183098733425140380859375;
    float _2329 = (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0))) * 0.3183098733425140380859375;
    float _2336 = ((cbLight._m0[_2288].x * _2294) * _2329) + ((cbLight._m0[_2298].x * _2304) * _2327);
    float _2337 = ((_2294 * cbLight._m0[_2288].y) * _2329) + ((_2304 * cbLight._m0[_2298].y) * _2327);
    float _2338 = ((_2294 * cbLight._m0[_2288].z) * _2329) + ((_2304 * cbLight._m0[_2298].z) * _2327);
    uvec4 _2342 = floatBitsToUint(cbLight._m0[_2271 + 12u]);
    bool _2344 = _2342.x == 0u;
    float _2355;
    float _2357;
    float _2359;
    if (_2344)
    {
        _2355 = _2336;
        _2357 = _2337;
        _2359 = _2338;
    }
    else
    {
        uint _2363 = _2271 + 6u;
        float _2379 = (dot(vec3(cbLight._m0[_2271 + 2u].xyz), vec3(_1048, _1049, _1050)) * 0.5) + 0.5;
        float _2380 = _2379 * _2379;
        float _4574 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
        float _2381 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
        float _2382 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2355 = (((cbLight._m0[_2363].x * 0.3183098733425140380859375) * _2381) * _2382) + _2336;
        _2357 = (((cbLight._m0[_2363].y * 0.3183098733425140380859375) * _2381) * _2382) + _2337;
        _2359 = (((cbLight._m0[_2363].z * 0.3183098733425140380859375) * _2381) * _2382) + _2338;
    }
    bool _2362 = _2342.y == 0u;
    float _2400;
    float _2402;
    float _2404;
    if (_2362)
    {
        _2400 = _2355;
        _2402 = _2357;
        _2404 = _2359;
    }
    else
    {
        uint _2570 = _2271 + 7u;
        float _2586 = (dot(vec3(cbLight._m0[_2271 + 3u].xyz), vec3(_1048, _1049, _1050)) * 0.5) + 0.5;
        float _2587 = _2586 * _2586;
        float _4590 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2588 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2589 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2400 = (((cbLight._m0[_2570].x * 0.3183098733425140380859375) * _2588) * _2589) + _2355;
        _2402 = (((cbLight._m0[_2570].y * 0.3183098733425140380859375) * _2588) * _2589) + _2357;
        _2404 = (((cbLight._m0[_2570].z * 0.3183098733425140380859375) * _2588) * _2589) + _2359;
    }
    uint _2407 = _2271 + 8u;
    float _2420 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2271].w)) * _1158) * 0.949999988079071044921875);
    float _2421 = _2420 * _2420;
    float _2422 = cbLight._m0[_2271].x + _1108;
    float _2423 = cbLight._m0[_2271].y + _1109;
    float _2424 = cbLight._m0[_2271].z + _1110;
    float _2428 = inversesqrt(dot(vec3(_2422, _2423, _2424), vec3(_2422, _2423, _2424)));
    float _2429 = _2428 * _2422;
    float _2430 = _2428 * _2423;
    float _2431 = _2428 * _2424;
    float _2432 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2271].xyz));
    float _4606 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
    float _2435 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
    float _4617 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
    float _2436 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
    float _2437 = dot(vec3(_1048, _1049, _1050), vec3(_2429, _2430, _2431));
    float _4628 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2440 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2441 = dot(vec3(cbLight._m0[_2271].xyz), vec3(_2429, _2430, _2431));
    float _4639 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2445 = _2421 * _2421;
    float _2449 = ((_2440 * _2440) * (_2445 + (-1.0))) + 1.0;
    float _2457 = exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0);
    float _2458 = 0.959999978542327880859375 - _1225;
    float _2460 = 0.959999978542327880859375 - _1226;
    float _2461 = 0.959999978542327880859375 - _1227;
    float _2468 = 1.0 - _2421;
    float _2479 = (0.5 / (((_2436 * ((_2435 * _2468) + _2421)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2468) + _2421) * _2435))) * _2435;
    float _4650 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0));
    float _2481 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2445 / ((_2449 * _2449) * 3.141590118408203125));
    uint _2492 = _2271 + 9u;
    float _2503 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2308].w)) * _1158) * 0.949999988079071044921875);
    float _2504 = _2503 * _2503;
    float _2505 = cbLight._m0[_2308].x + _1108;
    float _2506 = cbLight._m0[_2308].y + _1109;
    float _2507 = cbLight._m0[_2308].z + _1110;
    float _2511 = inversesqrt(dot(vec3(_2505, _2506, _2507), vec3(_2505, _2506, _2507)));
    float _2512 = _2511 * _2505;
    float _2513 = _2511 * _2506;
    float _2514 = _2511 * _2507;
    float _2515 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2308].xyz));
    float _4661 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0));
    float _2518 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2519 = dot(vec3(_1048, _1049, _1050), vec3(_2512, _2513, _2514));
    float _4672 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2523 = dot(vec3(cbLight._m0[_2308].xyz), vec3(_2512, _2513, _2514));
    float _4683 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2527 = _2504 * _2504;
    float _2531 = ((_2522 * _2522) * (_2527 + (-1.0))) + 1.0;
    float _2538 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
    float _2545 = 1.0 - _2504;
    float _2555 = (0.5 / (((_2436 * ((_2518 * _2545) + _2504)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2545) + _2504) * _2518))) * _2518;
    float _4694 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2557 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2527 / ((_2531 * _2531) * 3.141590118408203125));
    float _2567 = (((((_2538 * _2458) + _1228) * cbLight._m0[_2492].x) * _2557) * _2294) + (((((_2457 * _2458) + _1228) * cbLight._m0[_2407].x) * _2481) * _2304);
    float _2568 = (((((_2538 * _2460) + _1230) * cbLight._m0[_2492].y) * _2557) * _2294) + (((((_2457 * _2460) + _1230) * cbLight._m0[_2407].y) * _2481) * _2304);
    float _2569 = (((((_2538 * _2461) + _1231) * cbLight._m0[_2492].z) * _2557) * _2294) + (((((_2457 * _2461) + _1231) * cbLight._m0[_2407].z) * _2481) * _2304);
    float _2631;
    float _2633;
    float _2635;
    if (_2344)
    {
        _2631 = _2567;
        _2633 = _2568;
        _2635 = _2569;
    }
    else
    {
        uint _2637 = _2271 + 2u;
        uint _2641 = _2271 + 10u;
        float _2655 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2637].w)) * _1158) * 0.949999988079071044921875);
        float _2656 = _2655 * _2655;
        float _2657 = cbLight._m0[_2637].x + _1108;
        float _2658 = cbLight._m0[_2637].y + _1109;
        float _2659 = cbLight._m0[_2637].z + _1110;
        float _2663 = inversesqrt(dot(vec3(_2657, _2658, _2659), vec3(_2657, _2658, _2659)));
        float _2664 = _2663 * _2657;
        float _2665 = _2663 * _2658;
        float _2666 = _2663 * _2659;
        float _2667 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2637].xyz));
        float _4705 = isnan(0.0) ? _2667 : (isnan(_2667) ? 0.0 : max(_2667, 0.0));
        float _2670 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2671 = dot(vec3(_1048, _1049, _1050), vec3(_2664, _2665, _2666));
        float _4716 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2675 = dot(vec3(cbLight._m0[_2637].xyz), vec3(_2664, _2665, _2666));
        float _4727 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2679 = _2656 * _2656;
        float _2683 = ((_2674 * _2674) * (_2679 + (-1.0))) + 1.0;
        float _2690 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
        float _2697 = 1.0 - _2656;
        float _2707 = (0.5 / (((_2436 * ((_2670 * _2697) + _2656)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2697) + _2656) * _2670))) * _2670;
        float _4738 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2709 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2679 / ((_2683 * _2683) * 3.141590118408203125));
        float _2710 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
        _2631 = (((((_2690 * _2458) + _1228) * cbLight._m0[_2641].x) * _2709) * _2710) + _2567;
        _2633 = (((((_2690 * _2460) + _1230) * cbLight._m0[_2641].y) * _2709) * _2710) + _2568;
        _2635 = (((((_2690 * _2461) + _1231) * cbLight._m0[_2641].z) * _2709) * _2710) + _2569;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2362)
    {
        _2745 = _2631;
        _2747 = _2633;
        _2749 = _2635;
    }
    else
    {
        uint _2756 = _2271 + 3u;
        uint _2760 = _2271 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _1158) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _1108;
        float _2777 = cbLight._m0[_2756].y + _1109;
        float _2778 = cbLight._m0[_2756].z + _1110;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_1048, _1049, _1050), vec3(cbLight._m0[_2756].xyz));
        float _4754 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
        float _2790 = dot(vec3(_1048, _1049, _1050), vec3(_2783, _2784, _2785));
        float _4765 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4776 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2436 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2436 * _2816) + _2775) * _2789))) * _2789;
        float _4787 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
        _2745 = (((((_2809 * _2458) + _1228) * cbLight._m0[_2760].x) * _2828) * _2829) + _2631;
        _2747 = (((((_2809 * _2460) + _1230) * cbLight._m0[_2760].y) * _2828) * _2829) + _2633;
        _2749 = (((((_2809 * _2461) + _1231) * cbLight._m0[_2760].z) * _2828) * _2829) + _2635;
    }
    float _2964;
    float _2966;
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    if (_2269.y == 0u)
    {
        float _2904 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2905 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2904;
        float _2906 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2904;
        float _2907 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2904;
        uvec4 _2919 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2920 = _2919.x;
        uint _2931 = uint((float(_2919.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1117) / _2920))) + floor(float(uint(cbSceneParam._m0[85u].x * _1116) / _2920)));
        float _2941 = (log2(_2907 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2942 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
        uint _2945 = uint(isnan(14.0) ? _2942 : (isnan(_2942) ? 14.0 : min(_2942, 14.0)));
        uvec4 _2950 = texelFetch(g_lightClusterGridBuffer, int(((_2945 << 2u) + (_2931 << 6u)) >> 2u));
        uint _2951 = _2950.x;
        uint _2952 = _2919.z;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((((1u << ((_2952 >> 4u) & 15u)) + 4294967295u) & _2951) == 0u) || ((_2952 & 240u) == 0u))
        {
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
        }
        else
        {
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3234 = 0.0;
            float _3235 = 0.0;
            float _3236 = 0.0;
            float _3237 = 0.0;
            float _3238 = 0.0;
            float _3239 = 0.0;
            uint _3240 = 0u;
            uint _3249;
            bool _3250;
            for (;;)
            {
                _3249 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3240 << 2u)) >> 2u)).x;
                _3250 = _3249 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3250)
                {
                    frontier_phi_61_pred = _3234;
                    frontier_phi_61_pred_1 = _3239;
                    frontier_phi_61_pred_2 = _3238;
                    frontier_phi_61_pred_3 = _3237;
                    frontier_phi_61_pred_4 = _3236;
                    frontier_phi_61_pred_5 = _3235;
                }
                else
                {
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    uint _3364;
                    _3358 = _3234;
                    _3359 = _3235;
                    _3360 = _3236;
                    _3361 = _3237;
                    _3362 = _3238;
                    _3363 = _3239;
                    _3364 = _3249;
                    float _3290;
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    for (;;)
                    {
                        uint _3368 = uint(findLSB(_3364)) + (_3240 << 5u);
                        uint _3365 = (_3364 + 4294967295u) & _3364;
                        uint _3370 = _3368 * 48u;
                        vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 3u)).x));
                        uint _3390 = (_3368 * 48u) + 4u;
                        vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3390)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3390 + 3u)).x));
                        uint _3409 = (_3368 * 48u) + 8u;
                        vec3 _3420 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3409)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3409 + 2u)).x));
                        float _3424 = _3384.x - _2905;
                        float _3425 = _3384.y - _2906;
                        float _3426 = _3384.z - _2907;
                        float _3427 = dot(vec3(_3424, _3425, _3426), vec3(_3424, _3425, _3426));
                        float _3430 = inversesqrt(_3427);
                        float _3431 = _3430 * _3424;
                        float _3432 = _3430 * _3425;
                        float _3433 = _3430 * _3426;
                        float _3434 = dot(vec3(_1139, _1142, _1145), vec3(_3431, _3432, _3433));
                        float _3439 = 1.0 - (_3427 * _3384.w);
                        float _4813 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3440 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3441 = sqrt(_3427) * _3403.w;
                        float _3444 = 1.39999997615814208984375 / (_3441 + 1.39999997615814208984375);
                        float _3445 = _3444 * _3444;
                        float _3448 = ((1.0 - _3445) * _3434) + _3445;
                        float _3451 = _3441 * _3441;
                        float _3455 = ((isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0))) * _3440) / ((_3451 * 0.699999988079071044921875) + 1.0);
                        float _3459 = (-0.0) - _2905;
                        float _3460 = (-0.0) - _2906;
                        float _3461 = (-0.0) - _2907;
                        float _3465 = inversesqrt(dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461)));
                        float _3466 = _3465 * _3459;
                        float _3467 = _3465 * _3460;
                        float _3468 = _3465 * _3461;
                        float _3476 = exp2(log2(1.0 / ((_3451 * 3.5) + 5.0)) * 0.25);
                        float _3477 = 1.0 - _1259;
                        float _3484 = sqrt(1.0 - ((1.0 - (_3477 * _3477)) * (1.0 - (_3476 * _3476))));
                        float _3485 = _3484 * _3484;
                        float _3486 = _3485 * _3485;
                        float _3487 = _3466 + _3431;
                        float _3488 = _3467 + _3432;
                        float _3489 = _3468 + _3433;
                        float _3493 = inversesqrt(dot(vec3(_3487, _3488, _3489), vec3(_3487, _3488, _3489)));
                        float _3497 = dot(vec3(_1139, _1142, _1145), vec3(_3466, _3467, _3468));
                        float _4829 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                        float _3500 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
                        float _3501 = dot(vec3(_1139, _1142, _1145), vec3(_3493 * _3487, _3493 * _3488, _3493 * _3489));
                        float _4840 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                        float _3508 = ((_3504 * _3504) * (_3486 + (-1.0))) + 1.0;
                        float _3509 = _3444 * _3485;
                        float _3510 = _3509 * _3509;
                        float _3513 = ((1.0 - _3510) * _3434) + _3510;
                        float _4851 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3514 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                        float _3515 = 1.0 - _3485;
                        float _3525 = (0.5 / (((_3514 * ((_3500 * _3515) + _3485)) + 9.9999999392252902907785028219223e-09) + (((_3514 * _3515) + _3485) * _3500))) * _3514;
                        float _4862 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3536 = (((_3486 * 3.1415927410125732421875) * (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) / ((_3508 * _3508) * ((_3451 * 2.1991131305694580078125) + 3.141590118408203125))) * _3440;
                        _3293 = (_3455 * _3403.x) + _3361;
                        _3294 = (_3455 * _3403.y) + _3362;
                        _3295 = (_3455 * _3403.z) + _3363;
                        _3290 = (_3536 * _3420.x) + _3358;
                        _3291 = (_3536 * _3420.y) + _3359;
                        _3292 = (_3536 * _3420.z) + _3360;
                        if (_3365 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3358 = _3290;
                            _3359 = _3291;
                            _3360 = _3292;
                            _3361 = _3293;
                            _3362 = _3294;
                            _3363 = _3295;
                            _3364 = _3365;
                        }
                    }
                    frontier_phi_61_pred = _3290;
                    frontier_phi_61_pred_1 = _3295;
                    frontier_phi_61_pred_2 = _3294;
                    frontier_phi_61_pred_3 = _3293;
                    frontier_phi_61_pred_4 = _3292;
                    frontier_phi_61_pred_5 = _3291;
                }
                _3082 = frontier_phi_61_pred;
                _3092 = frontier_phi_61_pred_1;
                _3090 = frontier_phi_61_pred_2;
                _3088 = frontier_phi_61_pred_3;
                _3086 = frontier_phi_61_pred_4;
                _3084 = frontier_phi_61_pred_5;
                uint _3241 = _3240 + 1u;
                if (_3241 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3234 = _3082;
                    _3235 = _3084;
                    _3236 = _3086;
                    _3237 = _3088;
                    _3238 = _3090;
                    _3239 = _3092;
                    _3240 = _3241;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
        }
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.z;
        uint _3098 = (_3096 >> 8u) & 15u;
        float _3202;
        float _3204;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        if (((4294967295u << _3098) & _2951) == 0u)
        {
            _3202 = _3081;
            _3204 = _3083;
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
        }
        else
        {
            float _3227 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
            float _3228 = _3227 * _2905;
            float _3229 = _3227 * _2906;
            float _3230 = _3227 * _2907;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3098 < ((_3096 >> 12u) & 15u))
            {
                float _3203;
                float _3205;
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3341 = _3081;
                float _3342 = _3083;
                float _3343 = _3085;
                float _3344 = _3087;
                float _3345 = _3089;
                float _3346 = _3091;
                uint _3347 = _3098;
                uint _3356;
                bool _3357;
                for (;;)
                {
                    _3356 = texelFetch(g_lightClassification, int((((_2945 << 5u) + (_2931 << 9u)) + (_3347 << 2u)) >> 2u)).x;
                    _3357 = _3356 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3357)
                    {
                        frontier_phi_67_pred = _3344;
                        frontier_phi_67_pred_1 = _3345;
                        frontier_phi_67_pred_2 = _3346;
                        frontier_phi_67_pred_3 = _3343;
                        frontier_phi_67_pred_4 = _3342;
                        frontier_phi_67_pred_5 = _3341;
                    }
                    else
                    {
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3554 = _3341;
                        float _3555 = _3342;
                        float _3556 = _3343;
                        float _3557 = _3344;
                        float _3558 = _3345;
                        float _3559 = _3346;
                        uint _3560 = _3356;
                        uint _3561;
                        vec4 _3586;
                        float _3587;
                        vec4 _3602;
                        vec3 _3614;
                        vec4 _3629;
                        vec4 _3644;
                        float _3690;
                        bool _3691;
                        for (;;)
                        {
                            uint _3571 = ((_3347 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3560));
                            _3561 = (_3560 + 4294967295u) & _3560;
                            uint _3573 = _3571 * 40u;
                            _3586 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 3u)).x));
                            _3587 = _3586.w;
                            uint _3589 = (_3571 * 40u) + 4u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3604 = (_3571 * 40u) + 8u;
                            _3614 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3604 + 2u)).x));
                            uint _3616 = (_3571 * 40u) + 16u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3571 * 40u) + 20u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3571 * 40u) + 24u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3665 = (_3571 * 40u) + 28u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3690 = fma(_2907, _3678.z, fma(_2906, _3678.y, _3678.x * _2905)) + _3678.w;
                            _3691 = !((fma(_2907, _3659.z, fma(_2906, _3659.y, _3659.x * _2905)) + _3659.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3691)
                            {
                                float _3718 = _3586.x - _2905;
                                float _3719 = _3586.y - _2906;
                                float _3720 = _3586.z - _2907;
                                float _3721 = dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720));
                                float _3724 = inversesqrt(_3721);
                                float _3725 = _3724 * _3718;
                                float _3726 = _3724 * _3719;
                                float _3727 = _3724 * _3720;
                                float _3731 = 1.0 - (_3721 / (_3587 * _3587));
                                float _4873 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3736 = sqrt(_3721) * _3602.w;
                                float _3738 = 1.39999997615814208984375 / (_3736 + 1.39999997615814208984375);
                                float _3739 = _3738 * _3738;
                                float _3742 = ((1.0 - _3739) * dot(vec3(_3725, _3726, _3727), vec3(_1139, _1142, _1145))) + _3739;
                                float _3745 = _3736 * _3736;
                                float _3749 = (fma(_2907, _3629.z, fma(_2906, _3629.y, _3629.x * _2905)) + _3629.w) / _3690;
                                float _3750 = (fma(_2907, _3644.z, fma(_2906, _3644.y, _3644.x * _2905)) + _3644.w) / _3690;
                                float _3754 = 1.0 - dot(vec2(_3749, _3750), vec2(_3749, _3750));
                                float _4889 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3756 = _3755 * (((isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0))) * _3732) / ((_3745 * 0.699999988079071044921875) + 1.0));
                                float _3768 = exp2(log2(1.0 / ((_3745 * 3.5) + 5.0)) * 0.25);
                                float _3769 = 1.0 - _1259;
                                float _3776 = sqrt(1.0 - ((1.0 - (_3769 * _3769)) * (1.0 - (_3768 * _3768))));
                                float _3777 = _3776 * _3776;
                                float _3778 = _3777 * _3777;
                                float _3779 = _3725 - _3228;
                                float _3780 = _3726 - _3229;
                                float _3781 = _3727 - _3230;
                                float _3785 = inversesqrt(dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781)));
                                float _3789 = dot(vec3(_1139, _1142, _1145), vec3((-0.0) - _3228, (-0.0) - _3229, (-0.0) - _3230));
                                float _4900 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                                float _3793 = dot(vec3(_1139, _1142, _1145), vec3(_3785 * _3779, _3785 * _3780, _3785 * _3781));
                                float _4911 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
                                float _3800 = ((_3796 * _3796) * (_3778 + (-1.0))) + 1.0;
                                float _3801 = _3738 * _3777;
                                float _3802 = _3801 * _3801;
                                float _3808 = ((1.0 - _3802) * dot(vec3(_1139, _1142, _1145), vec3(_3725, _3726, _3727))) + _3802;
                                float _4922 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
                                float _3810 = 1.0 - _3777;
                                float _3820 = (0.5 / (((_3809 * ((_3792 * _3810) + _3777)) + 9.9999999392252902907785028219223e-09) + (((_3809 * _3810) + _3777) * _3792))) * _3809;
                                float _4933 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3830 = (_3755 * _3732) * (((_3778 * 3.1415927410125732421875) * (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) / ((_3800 * _3800) * ((_3745 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3830 * _3614.x;
                                frontier_phi_73_pred_1 = _3830 * _3614.y;
                                frontier_phi_73_pred_2 = _3756 * _3602.z;
                                frontier_phi_73_pred_3 = _3756 * _3602.y;
                                frontier_phi_73_pred_4 = _3756 * _3602.x;
                                frontier_phi_73_pred_5 = _3830 * _3614.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3834 = frontier_phi_73_pred;
                            _3835 = frontier_phi_73_pred_1;
                            _3839 = frontier_phi_73_pred_2;
                            _3838 = frontier_phi_73_pred_3;
                            _3837 = frontier_phi_73_pred_4;
                            _3836 = frontier_phi_73_pred_5;
                            _3544 = _3837 + _3557;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3541 = _3834 + _3554;
                            _3542 = _3835 + _3555;
                            _3543 = _3836 + _3556;
                            if (_3561 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3561;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3544;
                        frontier_phi_67_pred_1 = _3545;
                        frontier_phi_67_pred_2 = _3546;
                        frontier_phi_67_pred_3 = _3543;
                        frontier_phi_67_pred_4 = _3542;
                        frontier_phi_67_pred_5 = _3541;
                    }
                    _3209 = frontier_phi_67_pred;
                    _3211 = frontier_phi_67_pred_1;
                    _3213 = frontier_phi_67_pred_2;
                    _3207 = frontier_phi_67_pred_3;
                    _3205 = frontier_phi_67_pred_4;
                    _3203 = frontier_phi_67_pred_5;
                    uint _3348 = _3347 + 1u;
                    if (_3348 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3341 = _3203;
                        _3342 = _3205;
                        _3343 = _3207;
                        _3344 = _3209;
                        _3345 = _3211;
                        _3346 = _3213;
                        _3347 = _3348;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3211;
                frontier_phi_55_56_ladder_1 = _3213;
                frontier_phi_55_56_ladder_2 = _3209;
                frontier_phi_55_56_ladder_3 = _3207;
                frontier_phi_55_56_ladder_4 = _3205;
                frontier_phi_55_56_ladder_5 = _3203;
            }
            else
            {
                frontier_phi_55_56_ladder = _3089;
                frontier_phi_55_56_ladder_1 = _3091;
                frontier_phi_55_56_ladder_2 = _3087;
                frontier_phi_55_56_ladder_3 = _3085;
                frontier_phi_55_56_ladder_4 = _3083;
                frontier_phi_55_56_ladder_5 = _3081;
            }
            _3202 = frontier_phi_55_56_ladder_5;
            _3204 = frontier_phi_55_56_ladder_4;
            _3206 = frontier_phi_55_56_ladder_3;
            _3208 = frontier_phi_55_56_ladder_2;
            _3210 = frontier_phi_55_56_ladder;
            _3212 = frontier_phi_55_56_ladder_1;
        }
        float _3217 = isnan(1.0) ? _1243 : (isnan(_1243) ? 1.0 : min(_1243, 1.0));
        _2964 = (_3217 * _3208) + _2400;
        _2966 = (_3217 * _3210) + _2402;
        _2968 = (_3217 * _3212) + _2404;
        _2970 = ((_3202 * _1228) * _3217) + _2745;
        _2972 = ((_3204 * _1230) * _3217) + _2747;
        _2974 = ((_3206 * _1231) * _3217) + _2749;
    }
    else
    {
        _2964 = _2400;
        _2966 = _2402;
        _2968 = _2404;
        _2970 = _2745;
        _2972 = _2747;
        _2974 = _2749;
    }
    uint _2980 = _1172 + uint(cbMatDynParam._m0[0u].w);
    float _2986 = cbInstanceData._m0[_2980].x * ((((cbMtdParam._m0[22u].x * _961.x) * cbMtdParam._m0[32u].x) * _982) + _753);
    float _2987 = cbInstanceData._m0[_2980].y * ((((cbMtdParam._m0[22u].y * _961.y) * cbMtdParam._m0[32u].x) * _982) + _754);
    float _2988 = cbInstanceData._m0[_2980].z * ((((cbMtdParam._m0[22u].z * _961.z) * cbMtdParam._m0[32u].x) * _982) + _755);
    float _4949 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
    float _4960 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
    float _4971 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _3005 = (((isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0))) * (_2964 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1243))) + ((_2970 + ((isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0))) * _2040)) * cbPerFrame._m0[3u].x)) + _2986;
    float _3007 = (_2987 + ((_2972 + ((isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0))) * _2040)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0))) * (_2966 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1243)));
    float _3009 = (_2988 + ((_2974 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _2040)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0))) * (_2968 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1243)));
    float _4997 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3022 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
    uint _3023 = _1171 + 6u;
    float _3031 = _1116 / cbSceneParam._m0[86u].x;
    float _3032 = _1117 / cbSceneParam._m0[86u].y;
    vec4 _3046 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, (log2((isnan(cbSceneParam._m0[77u].w) ? _1071 : (isnan(_1071) ? cbSceneParam._m0[77u].w : min(_1071, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3048 = _3046.x;
    float _3049 = _3046.y;
    float _3050 = _3046.z;
    float _3051 = _3046.w;
    float _3143;
    float _3145;
    float _3147;
    float _3149;
    if (_1071 > cbSceneParam._m0[78u].w)
    {
        float _3106 = isnan(_1071) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1071 : min(cbSceneParam._m0[80u].w, _1071));
        float _3107 = _3106 / _1071;
        float _3118 = _3107 * _1101;
        float _3119 = _1102 * _3107;
        float _3120 = (-0.0) - _3119;
        float _3121 = _3107 * _1103;
        float _3123 = (cbSceneParam._m0[77u].w * _3120) / _3106;
        float _3124 = _3123 + cbSceneParam._m0[79u].w;
        float _3125 = cbSceneParam._m0[79u].w - _3119;
        float _3131 = sqrt(((_3118 * _3118) + (_3119 * _3119)) + (_3121 * _3121));
        float _3134 = (1.0 - (cbSceneParam._m0[77u].w / _3106)) * _3131;
        float _3139 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3141 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3303;
        if (abs((_3120 - _3123) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3303 = ((((_3124 > 0.0) ? exp2(_3139 * _3124) : (2.0 - exp2(_3141 * _3124))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3134;
        }
        else
        {
            float _3263 = 1.0 / cbSceneParam._m0[80u].x;
            float _3264 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : max(_3124, _3125));
            float _3265 = isnan(_3125) ? _3124 : (isnan(_3124) ? _3125 : min(_3124, _3125));
            float _3274 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : min(_3264, 0.0));
            float _3275 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : min(_3265, 0.0));
            _3303 = ((abs(_3131 / _3120) * cbSceneParam._m0[80u].y) * ((((_3274 - _3275) * 2.0) - ((exp2(_3139 * (isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0)))) - exp2(_3139 * (isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))))) * _3263)) - ((exp2(_3141 * _3274) - exp2(_3141 * _3275)) * _3263))) + (_3134 * cbSceneParam._m0[80u].z);
        }
        vec4 _3305 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3031, _3032, 1.0), 0.0);
        float _3314 = exp2((_3303 * (-1.44269502162933349609375)) * (1.0 - _3305.w));
        float _3315 = log2(_3314);
        float _3331 = log2(_3051);
        _3143 = (exp2(_3331 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].x)) * _3305.x) / cbSceneParam._m0[78u].x)) + _3048;
        _3145 = (exp2(_3331 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].y)) * _3305.y) / cbSceneParam._m0[78u].y)) + _3049;
        _3147 = (exp2(_3331 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3315 * cbSceneParam._m0[78u].z)) * _3305.z) / cbSceneParam._m0[78u].z)) + _3050;
        _3149 = _3314 * _3051;
    }
    else
    {
        _3143 = _3048;
        _3145 = _3049;
        _3147 = _3050;
        _3149 = _3051;
    }
    float _3161 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3162 = _3161 == 3.0;
    float _3163 = log2(_3149);
    float _3167 = exp2(_3163 * cbSceneParam._m0[78u].x);
    float _3168 = exp2(_3163 * cbSceneParam._m0[78u].y);
    float _3169 = exp2(_3163 * cbSceneParam._m0[78u].z);
    float _3170 = _3167 * (isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0)));
    float _3171 = _3168 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0)));
    float _3172 = _3169 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)));
    float _3181 = (_3161 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3181 * (_3162 ? _3170 : (_3170 + (cbSceneParam._m0[72u].w * _3143)));
    SV_Target.y = _3181 * (_3162 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3145)));
    SV_Target.z = _3181 * (_3162 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3147)));
    SV_Target.w = cbInstanceData._m0[_3023].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2986) * _3022) * _3167) * _3181;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2987) * _3022) * _3168) * _3181;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2988) * _3022) * _3169) * _3181;
    SV_Target_1.w = cbInstanceData._m0[_3023].w;
}


