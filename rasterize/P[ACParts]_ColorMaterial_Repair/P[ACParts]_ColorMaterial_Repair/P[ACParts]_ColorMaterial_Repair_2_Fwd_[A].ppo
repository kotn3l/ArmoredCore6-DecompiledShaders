#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1659;
float _4069;
float _4070;
float _4071;
float _4072;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _288 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_274 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _295 = log2(0.0);
    float _297 = exp2(_295 * cbMtdParam._m0[31u].z);
    float _301 = _297 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _297);
    float _302 = _297 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _297);
    float _303 = _297 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _297);
    float _304 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _305 = isnan(0.0) ? _302 : (isnan(_302) ? 0.0 : max(_302, 0.0));
    float _306 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _307 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    float _309 = isnan(1.0) ? _305 : (isnan(_305) ? 1.0 : min(_305, 1.0));
    float _310 = isnan(1.0) ? _306 : (isnan(_306) ? 1.0 : min(_306, 1.0));
    vec4 _326 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _274) + cbTextureTilingScale._m0[0u].w));
    float _330 = _326.z;
    float _331 = _326.w;
    float _332 = 1.0 - _331;
    float _339 = exp2(log2((1.0 - (_332 * _330)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _340 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _341 = isnan(1.0) ? _340 : (isnan(_340) ? 1.0 : min(_340, 1.0));
    float _353 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_332 * _332) * _330))) * cbMtdParam._m0[34u].w);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    vec4 _368 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _371 = _368.y;
    float _374 = (_371 * ((isnan(1.0) ? _354 : (isnan(_354) ? 1.0 : min(_354, 1.0))) - _331)) + _331;
    vec4 _386 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _274) + cbTextureTilingScale._m0[2u].w));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[12u].x;
    _204[0u] = cbMtdParam._m0[12u].y;
    _205[0u] = cbMtdParam._m0[12u].z;
    _203[1u] = cbMtdParam._m0[13u].x;
    _204[1u] = cbMtdParam._m0[13u].y;
    _205[1u] = cbMtdParam._m0[13u].z;
    _203[2u] = cbMtdParam._m0[14u].x;
    _204[2u] = cbMtdParam._m0[14u].y;
    _205[2u] = cbMtdParam._m0[14u].z;
    _203[3u] = cbMtdParam._m0[15u].x;
    _204[3u] = cbMtdParam._m0[15u].y;
    _205[3u] = cbMtdParam._m0[15u].z;
    _203[4u] = cbMtdParam._m0[16u].x;
    _204[4u] = cbMtdParam._m0[16u].y;
    _205[4u] = cbMtdParam._m0[16u].z;
    _203[5u] = cbMtdParam._m0[11u].x;
    _204[5u] = cbMtdParam._m0[11u].y;
    _205[5u] = cbMtdParam._m0[11u].z;
    float _454 = (_368.x + (-0.02500000037252902984619140625)) * 8.0;
    float _456 = roundEven(_454);
    float _457 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    uint _460 = uint(int(isnan(5.0) ? _457 : (isnan(_457) ? 5.0 : min(_457, 5.0))));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = 1.0;
    _207[0u] = 1.0;
    _208[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[23u].x;
    _207[1u] = cbMtdParam._m0[23u].y;
    _208[1u] = cbMtdParam._m0[23u].z;
    _206[2u] = cbMtdParam._m0[21u].x;
    _207[2u] = cbMtdParam._m0[21u].y;
    _208[2u] = cbMtdParam._m0[21u].z;
    _206[3u] = cbMtdParam._m0[19u].x;
    _207[3u] = cbMtdParam._m0[19u].y;
    _208[3u] = cbMtdParam._m0[19u].z;
    _206[4u] = cbMtdParam._m0[18u].x;
    _207[4u] = cbMtdParam._m0[18u].y;
    _208[4u] = cbMtdParam._m0[18u].z;
    _206[5u] = cbMtdParam._m0[17u].x;
    _207[5u] = cbMtdParam._m0[17u].y;
    _208[5u] = cbMtdParam._m0[17u].z;
    float _547 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[38u].w * TEXCOORD.x) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[39u].x * TEXCOORD.y) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _548 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    uint _550 = uint(int(isnan(5.0) ? _548 : (isnan(_548) ? 5.0 : min(_548, 5.0))));
    float _212[6];
    _212[0u] = 1.0;
    _212[1u] = cbMtdParam._m0[23u].w;
    _212[2u] = cbMtdParam._m0[21u].w;
    _212[3u] = cbMtdParam._m0[19u].w;
    _212[4u] = cbMtdParam._m0[18u].w;
    _212[5u] = cbMtdParam._m0[17u].w;
    float _587 = ((((_203[_460] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_206[_550] - _203[_460])) * _212[_460])) * _371) + cbMtdParam._m0[10u].x) * _386.x;
    float _588 = ((((_204[_460] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_207[_550] - _204[_460])) * _212[_460])) * _371) + cbMtdParam._m0[10u].y) * _386.y;
    float _589 = ((((_205[_460] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_208[_550] - _205[_460])) * _212[_460])) * _371) + cbMtdParam._m0[10u].z) * _386.z;
    vec4 _601 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _274) + cbTextureTilingScale._m0[1u].w));
    float _621 = (((cbMtdParam._m0[9u].x * _601.x) - _587) * _374) + _587;
    float _622 = (((cbMtdParam._m0[9u].y * _601.y) - _588) * _374) + _588;
    float _623 = (((cbMtdParam._m0[9u].z * _601.z) - _589) * _374) + _589;
    vec4 _635 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _274) + cbTextureTilingScale._m0[5u].w));
    float _655 = (((cbMtdParam._m0[20u].x * _635.x) - _621) * _341) + _621;
    float _656 = (((cbMtdParam._m0[20u].y * _635.y) - _622) * _341) + _622;
    float _657 = (((cbMtdParam._m0[20u].z * _635.z) - _623) * _341) + _623;
    vec4 _670 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _274) + cbTextureTilingScale._m0[7u].w));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = cbMtdParam._m0[24u].x;
    _210[0u] = cbMtdParam._m0[24u].y;
    _211[0u] = cbMtdParam._m0[24u].z;
    _209[1u] = cbMtdParam._m0[25u].x;
    _210[1u] = cbMtdParam._m0[25u].y;
    _211[1u] = cbMtdParam._m0[25u].z;
    _209[2u] = cbMtdParam._m0[26u].x;
    _210[2u] = cbMtdParam._m0[26u].y;
    _211[2u] = cbMtdParam._m0[26u].z;
    _209[3u] = cbMtdParam._m0[27u].x;
    _210[3u] = cbMtdParam._m0[27u].y;
    _211[3u] = cbMtdParam._m0[27u].z;
    _209[4u] = cbMtdParam._m0[28u].x;
    _210[4u] = cbMtdParam._m0[28u].y;
    _211[4u] = cbMtdParam._m0[28u].z;
    _209[5u] = cbMtdParam._m0[29u].x;
    _210[5u] = cbMtdParam._m0[29u].y;
    _211[5u] = cbMtdParam._m0[29u].z;
    float _757 = _209[_460] * _371;
    float _758 = _210[_460] * _371;
    float _759 = _211[_460] * _371;
    float _760 = _757 + ((_288.x * 4.5) * ((((cbMtdParam._m0[30u].x * _670.x) - _655) * _307) + _655));
    float _761 = _758 + ((_288.y * 4.5) * ((((cbMtdParam._m0[30u].y * _670.y) - _656) * _309) + _656));
    float _762 = _759 + ((_288.z * 4.5) * ((((cbMtdParam._m0[30u].z * _670.z) - _657) * _310) + _657));
    float _198[5];
    float _199[5];
    _198[0u] = cbMtdParam._m0[35u].y;
    _199[0u] = cbMtdParam._m0[35u].z;
    _198[1u] = cbMtdParam._m0[36u].w;
    _199[1u] = cbMtdParam._m0[37u].x;
    _198[2u] = cbMtdParam._m0[37u].y;
    _199[2u] = cbMtdParam._m0[37u].z;
    _198[3u] = cbMtdParam._m0[37u].w;
    _199[3u] = cbMtdParam._m0[38u].x;
    _198[4u] = cbMtdParam._m0[38u].y;
    _199[4u] = cbMtdParam._m0[38u].z;
    float _790 = roundEven(5.0 - _454);
    float _791 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = isnan(4.0) ? _791 : (isnan(_791) ? 4.0 : min(_791, 4.0));
    float _794 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    uint _796 = uint(int(isnan(4.0) ? _794 : (isnan(_794) ? 4.0 : min(_794, 4.0))));
    float _805 = ((cbMtdParam._m0[39u].z - _199[_796]) * _374) + _199[_796];
    float _813 = ((cbMtdParam._m0[40u].x - _805) * _341) + _805;
    float _818 = ((cbMtdParam._m0[40u].z - _813) * _307) + _813;
    vec4 _834 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _274) + cbTextureTilingScale._m0[8u].w));
    float _836 = _834.x;
    float _837 = _834.y;
    float _839 = _834.z + _198[_796];
    vec4 _851 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _274) + cbTextureTilingScale._m0[9u].w));
    float _859 = (((cbMtdParam._m0[39u].y - _839) + _851.z) * _374) + _839;
    vec4 _871 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _879 = (((cbMtdParam._m0[39u].w - _859) + _871.z) * _341) + _859;
    float _885 = ((((_330 * 2.0) * _879) - _879) * cbMtdParam._m0[33u].w) + _879;
    vec4 _897 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _274) + cbTextureTilingScale._m0[12u].w));
    float _905 = (((_897.z + cbMtdParam._m0[40u].y) - _885) * _310) + _885;
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _967 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_936 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_940 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _982 = (-0.0) - ((_940 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _986 = (_940 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _987 = isnan(_986) ? _982 : (isnan(_982) ? _986 : min(_982, _986));
    float _4176 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
    float _988 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _1013 = ((_851.x - _836) * _374) + _836;
    float _1014 = ((_851.y - _837) * _374) + _837;
    float _1019 = ((_871.x - _1013) * _341) + _1013;
    float _1020 = ((_871.y - _1014) * _341) + _1014;
    float _1029 = ((((_897.x - _1019) * _307) + _1019) * 2.0) + (-1.0);
    float _1030 = ((((_897.y - _1020) * _309) + _1020) * 2.0) + (-1.0);
    float _1031 = dot(vec2(_1029, _1030), vec2(_1029, _1030));
    float _4187 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _1036 = sqrt(1.0 - (isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))));
    float _1039 = (cbMtdParam._m0[34u].x * ((_326.x * 2.0) + (-1.0))) + _1029;
    float _1040 = (cbMtdParam._m0[34u].x * ((_326.y * 2.0) + (-1.0))) + _1030;
    float _1043 = fma(_1036, _252 * NORMAL.x, fma(_1040, _259 * TANGENT.x, (_245 * _237) * _1039));
    float _1046 = fma(_1036, _252 * NORMAL.y, fma(_1040, _259 * TANGENT.y, (_245 * _238) * _1039));
    float _1049 = fma(_1036, _252 * NORMAL.z, fma(_1040, _259 * TANGENT.z, (_245 * _239) * _1039));
    float _1053 = inversesqrt(dot(vec3(_1043, _1046, _1049), vec3(_1043, _1046, _1049)));
    float _1054 = _1053 * _1043;
    float _1055 = _1053 * _1046;
    float _1056 = _1053 * _1049;
    float _4198 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _1057 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _4209 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4220 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4231 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4242 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _1061 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
    float _1077 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1097 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1107 = cbSceneParam._m0[71u].x - (_936 / _1097);
    float _1108 = cbSceneParam._m0[71u].y - (_940 / _1097);
    float _1109 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1097);
    float _1113 = inversesqrt(dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109)));
    float _1114 = _1107 * _1113;
    float _1115 = _1108 * _1113;
    float _1116 = _1109 * _1113;
    vec4 _1121 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1123 = _1121.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1341 = sqrt(((_1107 * _1107) + (_1108 * _1108)) + (_1109 * _1109));
        float _1347 = (cbMatDynParam._m0[5u].x * _1341) + cbMatDynParam._m0[5u].y;
        float _4253 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1352 = (cbMatDynParam._m0[5u].z * _1341) + cbMatDynParam._m0[5u].w;
        float _4264 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0))) - _1348)) + _1348) < ((_1123 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1134 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1135 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1137 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1139 = _1137.w;
    float _1157 = fma(_1056, cbSceneParam._m0[5u].z, fma(_1055, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1054));
    float _1160 = fma(_1056, cbSceneParam._m0[6u].z, fma(_1055, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1054));
    float _1163 = fma(_1056, cbSceneParam._m0[7u].z, fma(_1055, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1054));
    vec4 _1165 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1176 = (((_1165.y - _1057) + (_1165.w * _1057)) * cbMtdParam._m0[3u].x) + _1057;
    uint _1189 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1190 = _1189 + 9u;
    uint _1191 = _1190 + uint(cbMatDynParam._m0[0u].w);
    float _1197 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0)))) * cbInstanceData._m0[_1191].x;
    float _1198 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0)))) * cbInstanceData._m0[_1191].y;
    float _1199 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * cbInstanceData._m0[_1191].z;
    float _4275 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _1200 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _4286 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
    float _1201 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
    float _4297 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _1202 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    vec4 _1203 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1208 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1219 = (((_1208.x - _1061) + (_1208.w * _1061)) * cbMtdParam._m0[3u].x) + _1061;
    float _1232 = (cbMtdParam._m0[3u].x * (((_1200 * _1139) - _1200) + _1203.x)) + _1200;
    float _1233 = (cbMtdParam._m0[3u].x * (((_1201 * _1139) - _1201) + _1203.y)) + _1201;
    float _1234 = (cbMtdParam._m0[3u].x * (((_1202 * _1139) - _1202) + _1203.z)) + _1202;
    float _1235 = 1.0 - _1219;
    float _1236 = _1235 * _1232;
    float _1237 = _1235 * _1233;
    float _1238 = _1235 * _1234;
    float _1243 = (_1232 + (-0.039999999105930328369140625)) * _1219;
    float _1244 = (_1233 + (-0.039999999105930328369140625)) * _1219;
    float _1245 = (_1234 + (-0.039999999105930328369140625)) * _1219;
    float _1246 = _1243 + 0.039999999105930328369140625;
    float _1248 = _1244 + 0.039999999105930328369140625;
    float _1249 = _1245 + 0.039999999105930328369140625;
    vec4 _1258 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1134, cbSceneParam._m0[86u].y * _1135));
    float _1261 = _1258.x * TEXCOORD_5.w;
    float _1262 = dot(vec3(_1054, _1055, _1056), vec3(_1114, _1115, _1116));
    float _1265 = _1262 * 2.0;
    float _1269 = (_1265 * _1054) - _1114;
    float _1270 = (_1265 * _1055) - _1115;
    float _1271 = (_1265 * _1056) - _1116;
    float _1275 = abs(dot(vec3(_1114, _1115, _1116), vec3(_1054, _1055, _1056)));
    float _4308 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
    float _1277 = sqrt(_1176);
    float _1288 = exp2((_1277 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1277 * 3.0));
    float _1294 = (1.0 - _1288) * ((_1277 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1295 = _1288 * _1277;
    float _1323 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1327 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1331 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1658;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1385 = fma(_1331, cbModelParam._m0[26u].z, fma(_1327, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1323));
        float _1389 = fma(_1331, cbModelParam._m0[27u].z, fma(_1327, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1323));
        float _1393 = fma(_1331, cbModelParam._m0[28u].z, fma(_1327, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1323));
        float _1417 = _1323 + _1054;
        float _1418 = _1327 + _1055;
        float _1419 = _1331 + _1056;
        float _1429 = fma(_1419, cbModelParam._m0[26u].z, fma(_1418, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1417)) - _1385;
        float _1430 = fma(_1419, cbModelParam._m0[27u].z, fma(_1418, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1417)) - _1389;
        float _1431 = fma(_1419, cbModelParam._m0[28u].z, fma(_1418, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1417)) - _1393;
        float _1435 = inversesqrt(dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431)));
        float _1447 = ((_1435 * _1429) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1385 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1435 * _1430) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1389 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1449 = ((_1435 * _1431) / cbModelParam._m0[34u].z) + ((((((_1393 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1452 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1447, _1448, _1449), 0.0);
        float _1486 = exp2((_1452.w + (-0.5)) * 20.0) * 2.0;
        float _1487 = _1486 * (_1452.x + (-0.5));
        float _1488 = _1486 * (_1452.y + (-0.5));
        float _1489 = _1486 * (_1452.z + (-0.5));
        float _1496 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1459.x + (-0.5));
        float _1498 = _1496 * (_1459.y + (-0.5));
        float _1499 = _1496 * (_1459.z + (-0.5));
        float _1506 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1466.x + (-0.5));
        float _1508 = _1506 * (_1466.y + (-0.5));
        float _1509 = _1506 * (_1466.z + (-0.5));
        float _1516 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1473.x + (-0.5));
        float _1518 = _1516 * (_1473.y + (-0.5));
        float _1519 = _1516 * (_1473.z + (-0.5));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1522 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1523 = _1487 * 0.5;
        float _1524 = _1497 * 0.5;
        float _1525 = _1507 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1540 = (dot(vec3(_1054, _1055, _1056), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4334 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1550 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4345 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1552 = _1551 * 2.0;
        float _1556 = (1.0 - _1551) / (_1551 + 1.0);
        float _4356 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1566 = ((((1.0 - _1557) * (_1552 + 2.0)) * exp2(log2(isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_1552 + 1.0))) + _1557) * _1520;
        float _1567 = _1488 * 0.5;
        float _1568 = _1498 * 0.5;
        float _1569 = _1508 * 0.5;
        float _1570 = dot(vec3(_1567, _1568, _1569), vec3(_1567, _1568, _1569));
        float _1575 = (_1570 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1570);
        float _1583 = (dot(vec3(_1054, _1055, _1056), vec3(_1575 * _1567, _1575 * _1568, _1575 * _1569)) + 1.0) * 0.5;
        float _4367 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1592 = sqrt(((_1568 * _1568) + (_1567 * _1567)) + (_1569 * _1569)) / (_1521 + 9.9999997473787516355514526367188e-06);
        float _4378 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1593 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1594 = _1593 * 2.0;
        float _1598 = (1.0 - _1593) / (_1593 + 1.0);
        float _4389 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
        float _1608 = ((((1.0 - _1599) * (_1594 + 2.0)) * exp2(log2(isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) * (_1594 + 1.0))) + _1599) * _1521;
        float _1609 = _1489 * 0.5;
        float _1610 = _1499 * 0.5;
        float _1611 = _1509 * 0.5;
        float _1612 = dot(vec3(_1609, _1610, _1611), vec3(_1609, _1610, _1611));
        float _1617 = (_1612 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1612);
        float _1625 = (dot(vec3(_1054, _1055, _1056), vec3(_1617 * _1609, _1617 * _1610, _1617 * _1611)) + 1.0) * 0.5;
        float _4400 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        float _1634 = sqrt(((_1610 * _1610) + (_1609 * _1609)) + (_1611 * _1611)) / (_1522 + 9.9999997473787516355514526367188e-06);
        float _4411 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1635 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1636 = _1635 * 2.0;
        float _1640 = (1.0 - _1635) / (_1635 + 1.0);
        float _4422 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
        float _1650 = ((((1.0 - _1641) * (_1636 + 2.0)) * exp2(log2(isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * (_1636 + 1.0))) + _1641) * _1522;
        _1658 = _1489;
        _1660 = _1488;
        _1661 = _1487;
        _1662 = _1499;
        _1663 = _1498;
        _1664 = _1497;
        _1665 = _1509;
        _1666 = _1508;
        _1667 = _1507;
        _1668 = _1522;
        _1669 = _1521;
        _1670 = _1520;
        _1671 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)));
        _1672 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)));
        _1673 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)));
    }
    else
    {
        _1658 = _1659;
        _1660 = _1659;
        _1661 = _1659;
        _1662 = _1659;
        _1663 = _1659;
        _1664 = _1659;
        _1665 = _1659;
        _1666 = _1659;
        _1667 = _1659;
        _1668 = _1659;
        _1669 = _1659;
        _1670 = _1659;
        _1671 = 0.0;
        _1672 = 0.0;
        _1673 = 0.0;
    }
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    float _1980;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1699 = fma(_1331, cbModelParam._m0[30u].z, fma(_1327, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1323));
        float _1703 = fma(_1331, cbModelParam._m0[31u].z, fma(_1327, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1323));
        float _1707 = fma(_1331, cbModelParam._m0[32u].z, fma(_1327, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1323));
        float _1729 = _1323 + _1054;
        float _1730 = _1327 + _1055;
        float _1731 = _1331 + _1056;
        float _1741 = fma(_1731, cbModelParam._m0[30u].z, fma(_1730, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1729)) - _1699;
        float _1742 = fma(_1731, cbModelParam._m0[31u].z, fma(_1730, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1729)) - _1703;
        float _1743 = fma(_1731, cbModelParam._m0[32u].z, fma(_1730, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1729)) - _1707;
        float _1747 = inversesqrt(dot(vec3(_1741, _1742, _1743), vec3(_1741, _1742, _1743)));
        float _1759 = ((_1747 * _1741) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1699 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1760 = ((_1747 * _1742) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1703 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1761 = ((_1747 * _1743) / cbModelParam._m0[35u].z) + ((((((_1707 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1763 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1759, _1760, _1761), 0.0);
        vec4 _1770 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1759, _1760, _1761), 0.0);
        vec4 _1777 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1759, _1760, _1761), 0.0);
        vec4 _1784 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1759, _1760, _1761), 0.0);
        float _1796 = exp2((_1763.w + (-0.5)) * 20.0) * 2.0;
        float _1797 = _1796 * (_1763.x + (-0.5));
        float _1798 = _1796 * (_1763.y + (-0.5));
        float _1799 = _1796 * (_1763.z + (-0.5));
        float _1806 = exp2((_1770.w + (-0.5)) * 20.0) * 2.0;
        float _1807 = _1806 * (_1770.x + (-0.5));
        float _1808 = _1806 * (_1770.y + (-0.5));
        float _1809 = _1806 * (_1770.z + (-0.5));
        float _1816 = exp2((_1777.w + (-0.5)) * 20.0) * 2.0;
        float _1817 = _1816 * (_1777.x + (-0.5));
        float _1818 = _1816 * (_1777.y + (-0.5));
        float _1819 = _1816 * (_1777.z + (-0.5));
        float _1826 = exp2((_1784.w + (-0.5)) * 20.0) * 2.0;
        float _1827 = _1826 * (_1784.x + (-0.5));
        float _1828 = _1826 * (_1784.y + (-0.5));
        float _1829 = _1826 * (_1784.z + (-0.5));
        float _1830 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1831 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
        float _1832 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
        float _1833 = _1797 * 0.5;
        float _1834 = _1807 * 0.5;
        float _1835 = _1817 * 0.5;
        float _1836 = dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835));
        float _1841 = (_1836 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1836);
        float _1849 = (dot(vec3(_1054, _1055, _1056), vec3(_1841 * _1833, _1841 * _1834, _1841 * _1835)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1858 = sqrt(((_1834 * _1834) + (_1833 * _1833)) + (_1835 * _1835)) / (_1830 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1860 = _1859 * 2.0;
        float _1864 = (1.0 - _1859) / (_1859 + 1.0);
        float _4485 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
        float _1865 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1874 = ((((1.0 - _1865) * (_1860 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1860 + 1.0))) + _1865) * _1830;
        float _1875 = _1798 * 0.5;
        float _1876 = _1808 * 0.5;
        float _1877 = _1818 * 0.5;
        float _1878 = dot(vec3(_1875, _1876, _1877), vec3(_1875, _1876, _1877));
        float _1883 = (_1878 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1878);
        float _1891 = (dot(vec3(_1054, _1055, _1056), vec3(_1883 * _1875, _1883 * _1876, _1883 * _1877)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
        float _1900 = sqrt(((_1876 * _1876) + (_1875 * _1875)) + (_1877 * _1877)) / (_1831 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1902 = _1901 * 2.0;
        float _1906 = (1.0 - _1901) / (_1901 + 1.0);
        float _4518 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1916 = ((((1.0 - _1907) * (_1902 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1902 + 1.0))) + _1907) * _1831;
        float _1917 = _1799 * 0.5;
        float _1918 = _1809 * 0.5;
        float _1919 = _1819 * 0.5;
        float _1920 = dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919));
        float _1925 = (_1920 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1920);
        float _1933 = (dot(vec3(_1054, _1055, _1056), vec3(_1925 * _1917, _1925 * _1918, _1925 * _1919)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1942 = sqrt(((_1918 * _1918) + (_1917 * _1917)) + (_1919 * _1919)) / (_1832 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1943 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1944 = _1943 * 2.0;
        float _1948 = (1.0 - _1943) / (_1943 + 1.0);
        float _4551 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1958 = ((((1.0 - _1949) * (_1944 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1944 + 1.0))) + _1949) * _1832;
        _1966 = _1799;
        _1967 = _1798;
        _1968 = _1797;
        _1969 = _1809;
        _1970 = _1808;
        _1971 = _1807;
        _1972 = _1819;
        _1973 = _1818;
        _1974 = _1817;
        _1975 = _1832;
        _1976 = _1831;
        _1977 = _1830;
        _1978 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0)));
        _1979 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)));
        _1980 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0)));
    }
    else
    {
        _1966 = _1659;
        _1967 = _1659;
        _1968 = _1659;
        _1969 = _1659;
        _1970 = _1659;
        _1971 = _1659;
        _1972 = _1659;
        _1973 = _1659;
        _1974 = _1659;
        _1975 = _1659;
        _1976 = _1659;
        _1977 = _1659;
        _1978 = 0.0;
        _1979 = 0.0;
        _1980 = 0.0;
    }
    float _1990 = (cbModelParam._m0[1u].x * (_1978 - _1671)) + _1671;
    float _1991 = (cbModelParam._m0[1u].x * (_1979 - _1672)) + _1672;
    float _1992 = (cbModelParam._m0[1u].x * (_1980 - _1673)) + _1673;
    float _2013 = fma(_1992, cbSceneParam._m0[89u].z, fma(_1991, cbSceneParam._m0[89u].y, _1990 * cbSceneParam._m0[89u].x));
    float _2016 = fma(_1992, cbSceneParam._m0[90u].z, fma(_1991, cbSceneParam._m0[90u].y, _1990 * cbSceneParam._m0[90u].x));
    float _2019 = fma(_1992, cbSceneParam._m0[91u].z, fma(_1991, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1990));
    float _2032 = _1269 * 0.5;
    float _2033 = _1270 * 0.5;
    float _2034 = _1271 * 0.5;
    float _2035 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1968, _1971, _1974, _1977));
    float _2038 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1967, _1970, _1973, _1976));
    float _2041 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1966, _1969, _1972, _1975));
    float _2075;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2048 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1658, _1662, _1665, _1668));
        float _2052 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1660, _1663, _1666, _1669));
        float _2056 = dot(vec4(_2032, _2033, _2034, 1.0), vec4(_1661, _1664, _1667, _1670));
        float _2063 = dot(vec4(cbModelParam._m0[39u]), vec4(_2032, _2033, _2034, 1.0));
        _2075 = dot(vec3(isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0)), isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)), isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2063) ? 0.0 : (isnan(0.0) ? _2063 : max(0.0, _2063))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2075 = 1.0;
    }
    float _2086;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2077 = dot(vec4(cbModelParam._m0[40u]), vec4(_2032, _2033, _2034, 1.0));
        _2086 = dot(vec3(isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0)), isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0)), isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2077) ? 0.0 : (isnan(0.0) ? _2077 : max(0.0, _2077))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2086 = 1.0;
    }
    float _2090 = (_2086 * cbModelParam._m0[1u].x) + (_2075 * (1.0 - cbModelParam._m0[1u].x));
    float _2100 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1176);
    float _2101 = isnan(_2100) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2100 : min(cbModelParam._m0[25u].z, _2100));
    float _2181;
    float _2183;
    float _2185;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2148 = fma(_1331, cbModelParam._m0[13u].z, fma(_1327, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1323)) + cbModelParam._m0[13u].w;
        float _2152 = fma(_1331, cbModelParam._m0[14u].z, fma(_1327, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1323)) + cbModelParam._m0[14u].w;
        float _2156 = fma(_1331, cbModelParam._m0[15u].z, fma(_1327, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1323)) + cbModelParam._m0[15u].w;
        float _2159 = fma(_1271, cbModelParam._m0[13u].z, fma(_1270, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1269));
        float _2162 = fma(_1271, cbModelParam._m0[14u].z, fma(_1270, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1269));
        float _2165 = fma(_1271, cbModelParam._m0[15u].z, fma(_1270, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1269));
        float _2193;
        if (_2159 > 0.0)
        {
            _2193 = abs((1.0 - _2148) / _2159);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2159 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2148 + 1.0) / _2159);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2193 = frontier_phi_17_15_ladder;
        }
        float _2395;
        if (_2162 > 0.0)
        {
            _2395 = abs((1.0 - _2152) / _2162);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2152 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2395 = frontier_phi_26_22_ladder;
        }
        float _2649;
        if (_2165 > 0.0)
        {
            _2649 = abs((1.0 - _2156) / _2165);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2156 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2649 = frontier_phi_38_33_ladder;
        }
        float _2651 = isnan(_2395) ? _2193 : (isnan(_2193) ? _2395 : min(_2193, _2395));
        float _2652 = isnan(_2649) ? _2651 : (isnan(_2651) ? _2649 : min(_2651, _2649));
        float _2656 = (_2652 * _2159) + _2148;
        float _2657 = (_2652 * _2162) + _2152;
        float _2658 = (_2652 * _2165) + _2156;
        float _2659 = _2652 * 9.9999997473787516355514526367188e-05;
        float _2661 = (-1.0) - _2659;
        float _2663 = _2659 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2658 > _2663) || ((_2658 < _2661) || ((_2657 > _2663) || ((_2657 < _2661) || ((_2656 < _2661) || (_2656 > _2663))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2786 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2658, cbModelParam._m0[9u].z, fma(_2657, cbModelParam._m0[9u].y, _2656 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2658, cbModelParam._m0[10u].z, fma(_2657, cbModelParam._m0[10u].y, _2656 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2658, cbModelParam._m0[11u].z, fma(_2657, cbModelParam._m0[11u].y, _2656 * cbModelParam._m0[11u].x))), _2101);
            frontier_phi_16_38_ladder = _2786.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2786.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2786.x * cbModelParam._m0[1u].y;
        }
        _2181 = frontier_phi_16_38_ladder_2;
        _2183 = frontier_phi_16_38_ladder_1;
        _2185 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2169 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1269, _1270, _1271), _2101);
        _2181 = _2169.x * cbModelParam._m0[1u].y;
        _2183 = _2169.y * cbModelParam._m0[1u].y;
        _2185 = _2169.z * cbModelParam._m0[1u].y;
    }
    float _2189 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1176);
    float _2190 = isnan(_2189) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2189 : min(cbModelParam._m0[25u].w, _2189));
    float _2279;
    float _2281;
    float _2283;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2243 = fma(_1331, cbModelParam._m0[21u].z, fma(_1327, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1323)) + cbModelParam._m0[21u].w;
        float _2247 = fma(_1331, cbModelParam._m0[22u].z, fma(_1327, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1323)) + cbModelParam._m0[22u].w;
        float _2251 = fma(_1331, cbModelParam._m0[23u].z, fma(_1327, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1323)) + cbModelParam._m0[23u].w;
        float _2254 = fma(_1271, cbModelParam._m0[21u].z, fma(_1270, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1269));
        float _2257 = fma(_1271, cbModelParam._m0[22u].z, fma(_1270, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1269));
        float _2260 = fma(_1271, cbModelParam._m0[23u].z, fma(_1270, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1269));
        float _2400;
        if (_2254 > 0.0)
        {
            _2400 = abs((1.0 - _2243) / _2254);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2243 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2400 = frontier_phi_28_24_ladder;
        }
        float _2676;
        if (_2257 > 0.0)
        {
            _2676 = abs((1.0 - _2247) / _2257);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2257 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2247 + 1.0) / _2257);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2676 = frontier_phi_40_35_ladder;
        }
        float _2889;
        if (_2260 > 0.0)
        {
            _2889 = abs((1.0 - _2251) / _2260);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2260 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2251 + 1.0) / _2260);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2889 = frontier_phi_49_46_ladder;
        }
        float _2891 = isnan(_2676) ? _2400 : (isnan(_2400) ? _2676 : min(_2400, _2676));
        float _2892 = isnan(_2889) ? _2891 : (isnan(_2891) ? _2889 : min(_2891, _2889));
        float _2896 = (_2892 * _2254) + _2243;
        float _2897 = (_2892 * _2257) + _2247;
        float _2898 = (_2892 * _2260) + _2251;
        float _2899 = _2892 * 9.9999997473787516355514526367188e-05;
        float _2900 = (-1.0) - _2899;
        float _2902 = _2899 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2898 > _2902) || ((_2898 < _2900) || ((_2897 > _2902) || ((_2897 < _2900) || ((_2896 < _2900) || (_2896 > _2902))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3126 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2898, cbModelParam._m0[17u].z, fma(_2897, cbModelParam._m0[17u].y, _2896 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2898, cbModelParam._m0[18u].z, fma(_2897, cbModelParam._m0[18u].y, _2896 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2898, cbModelParam._m0[19u].z, fma(_2897, cbModelParam._m0[19u].y, _2896 * cbModelParam._m0[19u].x))), _2190);
            frontier_phi_25_49_ladder = _3126.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3126.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3126.x * cbModelParam._m0[1u].z;
        }
        _2279 = frontier_phi_25_49_ladder_2;
        _2281 = frontier_phi_25_49_ladder_1;
        _2283 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2263 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1269, _1270, _1271), _2190);
        _2279 = _2263.x * cbModelParam._m0[1u].z;
        _2281 = _2263.y * cbModelParam._m0[1u].z;
        _2283 = _2263.z * cbModelParam._m0[1u].z;
    }
    float _2296 = (((_1294 * _1246) + _1295) * _1261) * ((cbModelParam._m0[1u].w * (_2279 - _2181)) + _2181);
    float _2298 = (((_1294 * _1248) + _1295) * _1261) * ((cbModelParam._m0[1u].w * (_2281 - _2183)) + _2183);
    float _2300 = (((_1294 * _1249) + _1295) * _1261) * ((cbModelParam._m0[1u].w * (_2283 - _2185)) + _2185);
    float _2303 = fma(_2300, cbSceneParam._m0[89u].z, fma(_2298, cbSceneParam._m0[89u].y, _2296 * cbSceneParam._m0[89u].x));
    float _2306 = fma(_2300, cbSceneParam._m0[90u].z, fma(_2298, cbSceneParam._m0[90u].y, _2296 * cbSceneParam._m0[90u].x));
    float _2309 = fma(_2300, cbSceneParam._m0[91u].z, fma(_2298, cbSceneParam._m0[91u].y, _2296 * cbSceneParam._m0[91u].x));
    uvec4 _2319 = floatBitsToUint(cbInstanceData._m0[_1189 + 5u]);
    uint _2321 = _2319.x * 14u;
    uint _2322 = _2321 + 13u;
    float _2329 = _1261 + (-1.0);
    float _2334 = (cbLight._m0[_2322].x * _2329) + 1.0;
    float _2335 = (cbLight._m0[_2322].y * _2329) + 1.0;
    float _2336 = (cbLight._m0[_2322].z * _2329) + 1.0;
    float _2337 = (cbLight._m0[_2322].w * _2329) + 1.0;
    uint _2338 = _2321 + 5u;
    float _2344 = isnan(1.0) ? _2335 : (isnan(_2335) ? 1.0 : min(_2335, 1.0));
    uint _2348 = _2321 + 4u;
    float _2354 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
    uint _2358 = _2321 | 1u;
    float _2369 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_1054, _1055, _1056));
    float _2372 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_1054, _1055, _1056));
    float _4687 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _4698 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2377 = (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0))) * 0.3183098733425140380859375;
    float _2379 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * 0.3183098733425140380859375;
    float _2386 = ((cbLight._m0[_2338].x * _2344) * _2379) + ((cbLight._m0[_2348].x * _2354) * _2377);
    float _2387 = ((_2344 * cbLight._m0[_2338].y) * _2379) + ((_2354 * cbLight._m0[_2348].y) * _2377);
    float _2388 = ((_2344 * cbLight._m0[_2338].z) * _2379) + ((_2354 * cbLight._m0[_2348].z) * _2377);
    uvec4 _2392 = floatBitsToUint(cbLight._m0[_2321 + 12u]);
    bool _2394 = _2392.x == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2394)
    {
        _2405 = _2386;
        _2407 = _2387;
        _2409 = _2388;
    }
    else
    {
        uint _2413 = _2321 + 6u;
        float _2429 = (dot(vec3(cbLight._m0[_2321 + 2u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4709 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2432 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2405 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2386;
        _2407 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2387;
        _2409 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2388;
    }
    bool _2412 = _2392.y == 0u;
    float _2450;
    float _2452;
    float _2454;
    if (_2412)
    {
        _2450 = _2405;
        _2452 = _2407;
        _2454 = _2409;
    }
    else
    {
        uint _2620 = _2321 + 7u;
        float _2636 = (dot(vec3(cbLight._m0[_2321 + 3u].xyz), vec3(_1054, _1055, _1056)) * 0.5) + 0.5;
        float _2637 = _2636 * _2636;
        float _4725 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2638 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
        float _2639 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2450 = (((cbLight._m0[_2620].x * 0.3183098733425140380859375) * _2638) * _2639) + _2405;
        _2452 = (((cbLight._m0[_2620].y * 0.3183098733425140380859375) * _2638) * _2639) + _2407;
        _2454 = (((cbLight._m0[_2620].z * 0.3183098733425140380859375) * _2638) * _2639) + _2409;
    }
    uint _2457 = _2321 + 8u;
    float _2470 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2321].w)) * _1176) * 0.949999988079071044921875);
    float _2471 = _2470 * _2470;
    float _2472 = cbLight._m0[_2321].x + _1114;
    float _2473 = cbLight._m0[_2321].y + _1115;
    float _2474 = cbLight._m0[_2321].z + _1116;
    float _2478 = inversesqrt(dot(vec3(_2472, _2473, _2474), vec3(_2472, _2473, _2474)));
    float _2479 = _2478 * _2472;
    float _2480 = _2478 * _2473;
    float _2481 = _2478 * _2474;
    float _2482 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2321].xyz));
    float _4741 = isnan(0.0) ? _2482 : (isnan(_2482) ? 0.0 : max(_2482, 0.0));
    float _2485 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _4752 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _2486 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2487 = dot(vec3(_1054, _1055, _1056), vec3(_2479, _2480, _2481));
    float _4763 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2490 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
    float _2491 = dot(vec3(cbLight._m0[_2321].xyz), vec3(_2479, _2480, _2481));
    float _4774 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
    float _2495 = _2471 * _2471;
    float _2499 = ((_2490 * _2490) * (_2495 + (-1.0))) + 1.0;
    float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) * 5.0);
    float _2508 = 0.959999978542327880859375 - _1243;
    float _2510 = 0.959999978542327880859375 - _1244;
    float _2511 = 0.959999978542327880859375 - _1245;
    float _2518 = 1.0 - _2471;
    float _2529 = (0.5 / (((_2486 * ((_2485 * _2518) + _2471)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2518) + _2471) * _2485))) * _2485;
    float _4785 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2531 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2495 / ((_2499 * _2499) * 3.141590118408203125));
    uint _2542 = _2321 + 9u;
    float _2553 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2358].w)) * _1176) * 0.949999988079071044921875);
    float _2554 = _2553 * _2553;
    float _2555 = cbLight._m0[_2358].x + _1114;
    float _2556 = cbLight._m0[_2358].y + _1115;
    float _2557 = cbLight._m0[_2358].z + _1116;
    float _2561 = inversesqrt(dot(vec3(_2555, _2556, _2557), vec3(_2555, _2556, _2557)));
    float _2562 = _2561 * _2555;
    float _2563 = _2561 * _2556;
    float _2564 = _2561 * _2557;
    float _2565 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2358].xyz));
    float _4796 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
    float _2569 = dot(vec3(_1054, _1055, _1056), vec3(_2562, _2563, _2564));
    float _4807 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2572 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
    float _2573 = dot(vec3(cbLight._m0[_2358].xyz), vec3(_2562, _2563, _2564));
    float _4818 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2577 = _2554 * _2554;
    float _2581 = ((_2572 * _2572) * (_2577 + (-1.0))) + 1.0;
    float _2588 = exp2(log2(1.0 - (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0)))) * 5.0);
    float _2595 = 1.0 - _2554;
    float _2605 = (0.5 / (((_2486 * ((_2568 * _2595) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2595) + _2554) * _2568))) * _2568;
    float _4829 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2607 = (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0))) * (_2577 / ((_2581 * _2581) * 3.141590118408203125));
    float _2617 = (((((_2588 * _2508) + _1246) * cbLight._m0[_2542].x) * _2607) * _2344) + (((((_2507 * _2508) + _1246) * cbLight._m0[_2457].x) * _2531) * _2354);
    float _2618 = (((((_2588 * _2510) + _1248) * cbLight._m0[_2542].y) * _2607) * _2344) + (((((_2507 * _2510) + _1248) * cbLight._m0[_2457].y) * _2531) * _2354);
    float _2619 = (((((_2588 * _2511) + _1249) * cbLight._m0[_2542].z) * _2607) * _2344) + (((((_2507 * _2511) + _1249) * cbLight._m0[_2457].z) * _2531) * _2354);
    float _2681;
    float _2683;
    float _2685;
    if (_2394)
    {
        _2681 = _2617;
        _2683 = _2618;
        _2685 = _2619;
    }
    else
    {
        uint _2687 = _2321 + 2u;
        uint _2691 = _2321 + 10u;
        float _2705 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2687].w)) * _1176) * 0.949999988079071044921875);
        float _2706 = _2705 * _2705;
        float _2707 = cbLight._m0[_2687].x + _1114;
        float _2708 = cbLight._m0[_2687].y + _1115;
        float _2709 = cbLight._m0[_2687].z + _1116;
        float _2713 = inversesqrt(dot(vec3(_2707, _2708, _2709), vec3(_2707, _2708, _2709)));
        float _2714 = _2713 * _2707;
        float _2715 = _2713 * _2708;
        float _2716 = _2713 * _2709;
        float _2717 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2687].xyz));
        float _4840 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
        float _2721 = dot(vec3(_1054, _1055, _1056), vec3(_2714, _2715, _2716));
        float _4851 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2724 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
        float _2725 = dot(vec3(cbLight._m0[_2687].xyz), vec3(_2714, _2715, _2716));
        float _4862 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
        float _2729 = _2706 * _2706;
        float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
        float _2740 = exp2(log2(1.0 - (isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0)))) * 5.0);
        float _2747 = 1.0 - _2706;
        float _2757 = (0.5 / (((_2486 * ((_2720 * _2747) + _2706)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2747) + _2706) * _2720))) * _2720;
        float _4873 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2759 = (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
        float _2760 = isnan(1.0) ? _2336 : (isnan(_2336) ? 1.0 : min(_2336, 1.0));
        _2681 = (((((_2740 * _2508) + _1246) * cbLight._m0[_2691].x) * _2759) * _2760) + _2617;
        _2683 = (((((_2740 * _2510) + _1248) * cbLight._m0[_2691].y) * _2759) * _2760) + _2618;
        _2685 = (((((_2740 * _2511) + _1249) * cbLight._m0[_2691].z) * _2759) * _2760) + _2619;
    }
    float _2795;
    float _2797;
    float _2799;
    if (_2412)
    {
        _2795 = _2681;
        _2797 = _2683;
        _2799 = _2685;
    }
    else
    {
        uint _2806 = _2321 + 3u;
        uint _2810 = _2321 + 11u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _1176) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _1114;
        float _2827 = cbLight._m0[_2806].y + _1115;
        float _2828 = cbLight._m0[_2806].z + _1116;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_1054, _1055, _1056), vec3(cbLight._m0[_2806].xyz));
        float _4889 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
        float _2840 = dot(vec3(_1054, _1055, _1056), vec3(_2833, _2834, _2835));
        float _4900 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4911 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2486 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2486 * _2866) + _2825) * _2839))) * _2839;
        float _4922 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
        _2795 = (((((_2859 * _2508) + _1246) * cbLight._m0[_2810].x) * _2878) * _2879) + _2681;
        _2797 = (((((_2859 * _2510) + _1248) * cbLight._m0[_2810].y) * _2878) * _2879) + _2683;
        _2799 = (((((_2859 * _2511) + _1249) * cbLight._m0[_2810].z) * _2878) * _2879) + _2685;
    }
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_2319.y == 0u)
    {
        float _2954 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2955 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2954;
        float _2956 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2954;
        float _2957 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2954;
        uvec4 _2969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2970 = _2969.x;
        uint _2981 = uint((float(_2969.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1135) / _2970))) + floor(float(uint(cbSceneParam._m0[85u].x * _1134) / _2970)));
        float _2991 = (log2(_2957 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2992 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        uint _2995 = uint(isnan(14.0) ? _2992 : (isnan(_2992) ? 14.0 : min(_2992, 14.0)));
        uvec4 _3000 = texelFetch(g_lightClusterGridBuffer, int(((_2995 << 2u) + (_2981 << 6u)) >> 2u));
        uint _3001 = _3000.x;
        uint _3002 = _2969.z;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        if (((((1u << ((_3002 >> 4u) & 15u)) + 4294967295u) & _3001) == 0u) || ((_3002 & 240u) == 0u))
        {
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
            _3139 = 0.0;
            _3141 = 0.0;
        }
        else
        {
            float _3132;
            float _3134;
            float _3136;
            float _3138;
            float _3140;
            float _3142;
            float _3292 = 0.0;
            float _3293 = 0.0;
            float _3294 = 0.0;
            float _3295 = 0.0;
            float _3296 = 0.0;
            float _3297 = 0.0;
            uint _3298 = 0u;
            uint _3307;
            bool _3308;
            for (;;)
            {
                _3307 = texelFetch(g_lightClassification, int((((_2995 << 5u) + (_2981 << 9u)) + (_3298 << 2u)) >> 2u)).x;
                _3308 = _3307 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3308)
                {
                    frontier_phi_66_pred = _3292;
                    frontier_phi_66_pred_1 = _3297;
                    frontier_phi_66_pred_2 = _3296;
                    frontier_phi_66_pred_3 = _3295;
                    frontier_phi_66_pred_4 = _3294;
                    frontier_phi_66_pred_5 = _3293;
                }
                else
                {
                    float _3437;
                    float _3438;
                    float _3439;
                    float _3440;
                    float _3441;
                    float _3442;
                    uint _3443;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3294;
                    _3440 = _3295;
                    _3441 = _3296;
                    _3442 = _3297;
                    _3443 = _3307;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    float _3368;
                    float _3369;
                    for (;;)
                    {
                        uint _3447 = uint(findLSB(_3443)) + (_3298 << 5u);
                        uint _3444 = (_3443 + 4294967295u) & _3443;
                        uint _3449 = _3447 * 48u;
                        vec4 _3463 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3449)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3449 + 3u)).x));
                        uint _3469 = (_3447 * 48u) + 4u;
                        vec4 _3482 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3469)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3469 + 3u)).x));
                        uint _3488 = (_3447 * 48u) + 8u;
                        vec3 _3499 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3488)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3488 + 2u)).x));
                        float _3503 = _3463.x - _2955;
                        float _3504 = _3463.y - _2956;
                        float _3505 = _3463.z - _2957;
                        float _3506 = dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505));
                        float _3509 = inversesqrt(_3506);
                        float _3510 = _3509 * _3503;
                        float _3511 = _3509 * _3504;
                        float _3512 = _3509 * _3505;
                        float _3513 = dot(vec3(_1157, _1160, _1163), vec3(_3510, _3511, _3512));
                        float _3518 = 1.0 - (_3506 * _3463.w);
                        float _4948 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                        float _3519 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3520 = sqrt(_3506) * _3482.w;
                        float _3523 = 1.39999997615814208984375 / (_3520 + 1.39999997615814208984375);
                        float _3524 = _3523 * _3523;
                        float _3527 = ((1.0 - _3524) * _3513) + _3524;
                        float _3530 = _3520 * _3520;
                        float _3534 = ((isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0))) * _3519) / ((_3530 * 0.699999988079071044921875) + 1.0);
                        float _3538 = (-0.0) - _2955;
                        float _3539 = (-0.0) - _2956;
                        float _3540 = (-0.0) - _2957;
                        float _3544 = inversesqrt(dot(vec3(_3538, _3539, _3540), vec3(_3538, _3539, _3540)));
                        float _3545 = _3544 * _3538;
                        float _3546 = _3544 * _3539;
                        float _3547 = _3544 * _3540;
                        float _3555 = exp2(log2(1.0 / ((_3530 * 3.5) + 5.0)) * 0.25);
                        float _3556 = 1.0 - _1277;
                        float _3563 = sqrt(1.0 - ((1.0 - (_3556 * _3556)) * (1.0 - (_3555 * _3555))));
                        float _3564 = _3563 * _3563;
                        float _3565 = _3564 * _3564;
                        float _3566 = _3545 + _3510;
                        float _3567 = _3546 + _3511;
                        float _3568 = _3547 + _3512;
                        float _3572 = inversesqrt(dot(vec3(_3566, _3567, _3568), vec3(_3566, _3567, _3568)));
                        float _3576 = dot(vec3(_1157, _1160, _1163), vec3(_3545, _3546, _3547));
                        float _4964 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3579 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3580 = dot(vec3(_1157, _1160, _1163), vec3(_3572 * _3566, _3572 * _3567, _3572 * _3568));
                        float _4975 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3583 = isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0));
                        float _3587 = ((_3583 * _3583) * (_3565 + (-1.0))) + 1.0;
                        float _3588 = _3523 * _3564;
                        float _3589 = _3588 * _3588;
                        float _3592 = ((1.0 - _3589) * _3513) + _3589;
                        float _4986 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                        float _3593 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                        float _3594 = 1.0 - _3564;
                        float _3604 = (0.5 / (((_3593 * ((_3579 * _3594) + _3564)) + 9.9999999392252902907785028219223e-09) + (((_3593 * _3594) + _3564) * _3579))) * _3593;
                        float _4997 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                        float _3615 = (((_3565 * 3.1415927410125732421875) * (isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0)))) / ((_3587 * _3587) * ((_3530 * 2.1991131305694580078125) + 3.141590118408203125))) * _3519;
                        _3367 = (_3534 * _3482.x) + _3440;
                        _3368 = (_3534 * _3482.y) + _3441;
                        _3369 = (_3534 * _3482.z) + _3442;
                        _3364 = (_3615 * _3499.x) + _3437;
                        _3365 = (_3615 * _3499.y) + _3438;
                        _3366 = (_3615 * _3499.z) + _3439;
                        if (_3444 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3366;
                            _3440 = _3367;
                            _3441 = _3368;
                            _3442 = _3369;
                            _3443 = _3444;
                        }
                    }
                    frontier_phi_66_pred = _3364;
                    frontier_phi_66_pred_1 = _3369;
                    frontier_phi_66_pred_2 = _3368;
                    frontier_phi_66_pred_3 = _3367;
                    frontier_phi_66_pred_4 = _3366;
                    frontier_phi_66_pred_5 = _3365;
                }
                _3132 = frontier_phi_66_pred;
                _3142 = frontier_phi_66_pred_1;
                _3140 = frontier_phi_66_pred_2;
                _3138 = frontier_phi_66_pred_3;
                _3136 = frontier_phi_66_pred_4;
                _3134 = frontier_phi_66_pred_5;
                uint _3299 = _3298 + 1u;
                if (_3299 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3292 = _3132;
                    _3293 = _3134;
                    _3294 = _3136;
                    _3295 = _3138;
                    _3296 = _3140;
                    _3297 = _3142;
                    _3298 = _3299;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
            _3139 = _3140;
            _3141 = _3142;
        }
        uvec4 _3145 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3146 = _3145.z;
        uint _3148 = (_3146 >> 8u) & 15u;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        float _3268;
        float _3270;
        if (((4294967295u << _3148) & _3001) == 0u)
        {
            _3260 = _3131;
            _3262 = _3133;
            _3264 = _3135;
            _3266 = _3137;
            _3268 = _3139;
            _3270 = _3141;
        }
        else
        {
            float _3285 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
            float _3286 = _3285 * _2955;
            float _3287 = _3285 * _2956;
            float _3288 = _3285 * _2957;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3148 < ((_3146 >> 12u) & 15u))
            {
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3269;
                float _3271;
                float _3420 = _3131;
                float _3421 = _3133;
                float _3422 = _3135;
                float _3423 = _3137;
                float _3424 = _3139;
                float _3425 = _3141;
                uint _3426 = _3148;
                uint _3435;
                bool _3436;
                for (;;)
                {
                    _3435 = texelFetch(g_lightClassification, int((((_2995 << 5u) + (_2981 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                    _3436 = _3435 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3436)
                    {
                        frontier_phi_77_pred = _3425;
                        frontier_phi_77_pred_1 = _3424;
                        frontier_phi_77_pred_2 = _3423;
                        frontier_phi_77_pred_3 = _3422;
                        frontier_phi_77_pred_4 = _3421;
                        frontier_phi_77_pred_5 = _3420;
                    }
                    else
                    {
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3922;
                        float _3923;
                        float _3924;
                        float _3925;
                        float _3926;
                        float _3927;
                        float _3642 = _3420;
                        float _3643 = _3421;
                        float _3644 = _3422;
                        float _3645 = _3423;
                        float _3646 = _3424;
                        float _3647 = _3425;
                        uint _3648 = _3435;
                        uint _3649;
                        vec4 _3674;
                        float _3675;
                        vec4 _3690;
                        vec3 _3702;
                        vec4 _3717;
                        vec4 _3732;
                        float _3778;
                        bool _3779;
                        for (;;)
                        {
                            uint _3659 = ((_3426 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3648));
                            _3649 = (_3648 + 4294967295u) & _3648;
                            uint _3661 = _3659 * 40u;
                            _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            _3675 = _3674.w;
                            uint _3677 = (_3659 * 40u) + 4u;
                            _3690 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3677)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3677 + 3u)).x));
                            uint _3692 = (_3659 * 40u) + 8u;
                            _3702 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x));
                            uint _3704 = (_3659 * 40u) + 16u;
                            _3717 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3704)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3704 + 3u)).x));
                            uint _3719 = (_3659 * 40u) + 20u;
                            _3732 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3719)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3719 + 3u)).x));
                            uint _3734 = (_3659 * 40u) + 24u;
                            vec4 _3747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3734 + 3u)).x));
                            uint _3753 = (_3659 * 40u) + 28u;
                            vec4 _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            _3778 = fma(_2957, _3766.z, fma(_2956, _3766.y, _3766.x * _2955)) + _3766.w;
                            _3779 = !((fma(_2957, _3747.z, fma(_2956, _3747.y, _3747.x * _2955)) + _3747.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3779)
                            {
                                float _3806 = _3674.x - _2955;
                                float _3807 = _3674.y - _2956;
                                float _3808 = _3674.z - _2957;
                                float _3809 = dot(vec3(_3806, _3807, _3808), vec3(_3806, _3807, _3808));
                                float _3812 = inversesqrt(_3809);
                                float _3813 = _3812 * _3806;
                                float _3814 = _3812 * _3807;
                                float _3815 = _3812 * _3808;
                                float _3819 = 1.0 - (_3809 / (_3675 * _3675));
                                float _5008 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3820 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3824 = sqrt(_3809) * _3690.w;
                                float _3826 = 1.39999997615814208984375 / (_3824 + 1.39999997615814208984375);
                                float _3827 = _3826 * _3826;
                                float _3830 = ((1.0 - _3827) * dot(vec3(_3813, _3814, _3815), vec3(_1157, _1160, _1163))) + _3827;
                                float _3833 = _3824 * _3824;
                                float _3837 = (fma(_2957, _3717.z, fma(_2956, _3717.y, _3717.x * _2955)) + _3717.w) / _3778;
                                float _3838 = (fma(_2957, _3732.z, fma(_2956, _3732.y, _3732.x * _2955)) + _3732.w) / _3778;
                                float _3842 = 1.0 - dot(vec2(_3837, _3838), vec2(_3837, _3838));
                                float _5024 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3843 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3844 = _3843 * (((isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0))) * _3820) / ((_3833 * 0.699999988079071044921875) + 1.0));
                                float _3856 = exp2(log2(1.0 / ((_3833 * 3.5) + 5.0)) * 0.25);
                                float _3857 = 1.0 - _1277;
                                float _3864 = sqrt(1.0 - ((1.0 - (_3857 * _3857)) * (1.0 - (_3856 * _3856))));
                                float _3865 = _3864 * _3864;
                                float _3866 = _3865 * _3865;
                                float _3867 = _3813 - _3286;
                                float _3868 = _3814 - _3287;
                                float _3869 = _3815 - _3288;
                                float _3873 = inversesqrt(dot(vec3(_3867, _3868, _3869), vec3(_3867, _3868, _3869)));
                                float _3877 = dot(vec3(_1157, _1160, _1163), vec3((-0.0) - _3286, (-0.0) - _3287, (-0.0) - _3288));
                                float _5035 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3880 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3881 = dot(vec3(_1157, _1160, _1163), vec3(_3873 * _3867, _3873 * _3868, _3873 * _3869));
                                float _5046 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                                float _3884 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3888 = ((_3884 * _3884) * (_3866 + (-1.0))) + 1.0;
                                float _3889 = _3826 * _3865;
                                float _3890 = _3889 * _3889;
                                float _3896 = ((1.0 - _3890) * dot(vec3(_1157, _1160, _1163), vec3(_3813, _3814, _3815))) + _3890;
                                float _5057 = isnan(0.0) ? _3896 : (isnan(_3896) ? 0.0 : max(_3896, 0.0));
                                float _3897 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                                float _3898 = 1.0 - _3865;
                                float _3908 = (0.5 / (((_3897 * ((_3880 * _3898) + _3865)) + 9.9999999392252902907785028219223e-09) + (((_3897 * _3898) + _3865) * _3880))) * _3897;
                                float _5068 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3918 = (_3843 * _3820) * (((_3866 * 3.1415927410125732421875) * (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0)))) / ((_3888 * _3888) * ((_3833 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3844 * _3690.y;
                                frontier_phi_83_pred_1 = _3844 * _3690.x;
                                frontier_phi_83_pred_2 = _3918 * _3702.z;
                                frontier_phi_83_pred_3 = _3918 * _3702.y;
                                frontier_phi_83_pred_4 = _3918 * _3702.x;
                                frontier_phi_83_pred_5 = _3844 * _3690.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3926 = frontier_phi_83_pred;
                            _3925 = frontier_phi_83_pred_1;
                            _3924 = frontier_phi_83_pred_2;
                            _3923 = frontier_phi_83_pred_3;
                            _3922 = frontier_phi_83_pred_4;
                            _3927 = frontier_phi_83_pred_5;
                            _3632 = _3925 + _3645;
                            _3633 = _3926 + _3646;
                            _3634 = _3927 + _3647;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            _3631 = _3924 + _3644;
                            if (_3649 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3631;
                                _3645 = _3632;
                                _3646 = _3633;
                                _3647 = _3634;
                                _3648 = _3649;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3634;
                        frontier_phi_77_pred_1 = _3633;
                        frontier_phi_77_pred_2 = _3632;
                        frontier_phi_77_pred_3 = _3631;
                        frontier_phi_77_pred_4 = _3630;
                        frontier_phi_77_pred_5 = _3629;
                    }
                    _3271 = frontier_phi_77_pred;
                    _3269 = frontier_phi_77_pred_1;
                    _3267 = frontier_phi_77_pred_2;
                    _3265 = frontier_phi_77_pred_3;
                    _3263 = frontier_phi_77_pred_4;
                    _3261 = frontier_phi_77_pred_5;
                    uint _3427 = _3426 + 1u;
                    if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3420 = _3261;
                        _3421 = _3263;
                        _3422 = _3265;
                        _3423 = _3267;
                        _3424 = _3269;
                        _3425 = _3271;
                        _3426 = _3427;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3265;
                frontier_phi_58_59_ladder_1 = _3271;
                frontier_phi_58_59_ladder_2 = _3269;
                frontier_phi_58_59_ladder_3 = _3267;
                frontier_phi_58_59_ladder_4 = _3263;
                frontier_phi_58_59_ladder_5 = _3261;
            }
            else
            {
                frontier_phi_58_59_ladder = _3135;
                frontier_phi_58_59_ladder_1 = _3141;
                frontier_phi_58_59_ladder_2 = _3139;
                frontier_phi_58_59_ladder_3 = _3137;
                frontier_phi_58_59_ladder_4 = _3133;
                frontier_phi_58_59_ladder_5 = _3131;
            }
            _3260 = frontier_phi_58_59_ladder_5;
            _3262 = frontier_phi_58_59_ladder_4;
            _3264 = frontier_phi_58_59_ladder;
            _3266 = frontier_phi_58_59_ladder_3;
            _3268 = frontier_phi_58_59_ladder_2;
            _3270 = frontier_phi_58_59_ladder_1;
        }
        float _3275 = isnan(1.0) ? _1261 : (isnan(_1261) ? 1.0 : min(_1261, 1.0));
        _3014 = (_3275 * _3266) + _2450;
        _3016 = (_3275 * _3268) + _2452;
        _3018 = (_3275 * _3270) + _2454;
        _3020 = ((_3260 * _1246) * _3275) + _2795;
        _3022 = ((_3262 * _1248) * _3275) + _2797;
        _3024 = ((_3264 * _1249) * _3275) + _2799;
    }
    else
    {
        _3014 = _2450;
        _3016 = _2452;
        _3018 = _2454;
        _3020 = _2795;
        _3022 = _2797;
        _3024 = _2799;
    }
    uint _3030 = _1190 + uint(cbMatDynParam._m0[0u].w);
    float _3036 = cbInstanceData._m0[_3030].x * ((((cbMtdParam._m0[22u].x * _967.x) * cbMtdParam._m0[32u].x) * _988) + _757);
    float _3037 = cbInstanceData._m0[_3030].y * ((((cbMtdParam._m0[22u].y * _967.y) * cbMtdParam._m0[32u].x) * _988) + _758);
    float _3038 = cbInstanceData._m0[_3030].z * ((((cbMtdParam._m0[22u].z * _967.z) * cbMtdParam._m0[32u].x) * _988) + _759);
    float _5084 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _5095 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _5106 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
    float _3055 = (((isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_3014 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1261))) + ((_3020 + ((isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0))) * _2090)) * cbPerFrame._m0[3u].x)) + _3036;
    float _3057 = (_3037 + ((_3022 + ((isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0))) * _2090)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5095 : (isnan(_5095) ? 1.0 : min(_5095, 1.0))) * (_3016 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1261)));
    float _3059 = (_3038 + ((_3024 + ((isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))) * _2090)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0))) * (_3018 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1261)));
    float _3060 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
    float _3061 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
    float _3062 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
    float _3068 = cbMtdParam._m0[2u].x * _3036;
    float _3069 = cbMtdParam._m0[2u].y * _3037;
    float _3070 = cbMtdParam._m0[2u].z * _3038;
    float _5132 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3072 = isnan(1.0) ? _5132 : (isnan(_5132) ? 1.0 : min(_5132, 1.0));
    uint _3073 = _1189 + 6u;
    float _3081 = _1134 / cbSceneParam._m0[86u].x;
    float _3082 = _1135 / cbSceneParam._m0[86u].y;
    vec4 _3096 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, (log2((isnan(cbSceneParam._m0[77u].w) ? _1077 : (isnan(_1077) ? cbSceneParam._m0[77u].w : min(_1077, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3098 = _3096.x;
    float _3099 = _3096.y;
    float _3100 = _3096.z;
    float _3101 = _3096.w;
    float _3193;
    float _3195;
    float _3197;
    float _3199;
    if (_1077 > cbSceneParam._m0[78u].w)
    {
        float _3156 = isnan(_1077) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1077 : min(cbSceneParam._m0[80u].w, _1077));
        float _3157 = _3156 / _1077;
        float _3168 = _3157 * _1107;
        float _3169 = _1108 * _3157;
        float _3170 = (-0.0) - _3169;
        float _3171 = _3157 * _1109;
        float _3173 = (cbSceneParam._m0[77u].w * _3170) / _3156;
        float _3174 = _3173 + cbSceneParam._m0[79u].w;
        float _3175 = cbSceneParam._m0[79u].w - _3169;
        float _3181 = sqrt(((_3168 * _3168) + (_3169 * _3169)) + (_3171 * _3171));
        float _3184 = (1.0 - (cbSceneParam._m0[77u].w / _3156)) * _3181;
        float _3189 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3191 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3377;
        if (abs((_3170 - _3173) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3377 = ((((_3174 > 0.0) ? exp2(_3189 * _3174) : (2.0 - exp2(_3191 * _3174))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3184;
        }
        else
        {
            float _3321 = 1.0 / cbSceneParam._m0[80u].x;
            float _3322 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : max(_3174, _3175));
            float _3323 = isnan(_3175) ? _3174 : (isnan(_3174) ? _3175 : min(_3174, _3175));
            float _3332 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : min(_3322, 0.0));
            float _3333 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : min(_3323, 0.0));
            _3377 = ((abs(_3181 / _3170) * cbSceneParam._m0[80u].y) * ((((_3332 - _3333) * 2.0) - ((exp2(_3189 * (isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0)))) - exp2(_3189 * (isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))))) * _3321)) - ((exp2(_3191 * _3332) - exp2(_3191 * _3333)) * _3321))) + (_3184 * cbSceneParam._m0[80u].z);
        }
        vec4 _3379 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3081, _3082, 1.0), 0.0);
        float _3388 = exp2((_3377 * (-1.44269502162933349609375)) * (1.0 - _3379.w));
        float _3389 = log2(_3388);
        float _3405 = log2(_3101);
        _3193 = (exp2(_3405 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].x)) * _3379.x) / cbSceneParam._m0[78u].x)) + _3098;
        _3195 = (exp2(_3405 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].y)) * _3379.y) / cbSceneParam._m0[78u].y)) + _3099;
        _3197 = (exp2(_3405 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3389 * cbSceneParam._m0[78u].z)) * _3379.z) / cbSceneParam._m0[78u].z)) + _3100;
        _3199 = _3388 * _3101;
    }
    else
    {
        _3193 = _3098;
        _3195 = _3099;
        _3197 = _3100;
        _3199 = _3101;
    }
    bool _3415;
    vec4 _3209;
    vec4 _3231;
    float _3233;
    float _3237;
    float _3238;
    float _3239;
    float _3242;
    float _3245;
    float _3248;
    float _3249;
    bool _3259;
    for (;;)
    {
        _3209 = cbMatDynParam._m0[0u];
        float _3211 = roundEven(_3209.y);
        bool _3212 = _3211 == 3.0;
        float _3213 = log2(_3199);
        float _3217 = exp2(_3213 * cbSceneParam._m0[78u].x);
        float _3218 = exp2(_3213 * cbSceneParam._m0[78u].y);
        float _3219 = exp2(_3213 * cbSceneParam._m0[78u].z);
        float _3220 = _3217 * _3060;
        float _3221 = _3218 * _3061;
        float _3222 = _3219 * _3062;
        float _3229 = _1123 + (-0.5);
        _3231 = cbMtdParam._m0[1u];
        _3233 = _3231.y * _3229;
        float _3236 = (_3211 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3237 = _3236 * (_3212 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3193)));
        _3238 = _3236 * (_3212 ? _3221 : (_3221 + (cbSceneParam._m0[72u].w * _3195)));
        _3239 = _3236 * (_3212 ? _3222 : (_3222 + (cbSceneParam._m0[72u].w * _3197)));
        _3242 = ((_3068 * _3072) * _3217) * _3236;
        _3245 = ((_3069 * _3072) * _3218) * _3236;
        _3248 = ((_3070 * _3072) * _3219) * _3236;
        _3249 = _3229 * 0.999000012874603271484375;
        _3259 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3259)
        {
            if ((cbInstanceData._m0[_1189 + 7u].x + _3249) < 0.5)
            {
                _3415 = true;
                break;
            }
        }
        uint _3356 = _1190 + uint(_3209.w);
        if ((cbInstanceData._m0[_3356].w < 1.0) && ((cbInstanceData._m0[_3356].w + _3249) < 0.5))
        {
            _3415 = true;
            break;
        }
        if ((_3233 + 1.0) < _3231.x)
        {
            _3415 = true;
            break;
        }
        _3415 = false;
        break;
    }
    float _3620;
    if (_3415)
    {
        discard_state = true;
        _3620 = 0.0;
    }
    else
    {
        _3620 = cbInstanceData._m0[_3073].w;
    }
    SV_Target.x = _3237;
    SV_Target.y = _3238;
    SV_Target.z = _3239;
    SV_Target.w = _3620;
    SV_Target_1.x = _3242;
    SV_Target_1.y = _3245;
    SV_Target_1.z = _3248;
    SV_Target_1.w = cbInstanceData._m0[_3073].w;
    discard_exit();
}


