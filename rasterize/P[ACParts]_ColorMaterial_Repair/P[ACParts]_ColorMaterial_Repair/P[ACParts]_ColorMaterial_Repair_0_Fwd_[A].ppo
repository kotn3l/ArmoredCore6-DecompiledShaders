#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1655;
float _4065;
float _4066;
float _4067;
float _4068;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _283 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _290 = log2(0.0);
    float _292 = exp2(_290 * cbMtdParam._m0[31u].z);
    float _296 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _292);
    float _297 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _292);
    float _298 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _292);
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _301 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _302 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    float _304 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    float _305 = isnan(1.0) ? _301 : (isnan(_301) ? 1.0 : min(_301, 1.0));
    vec4 _321 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = _321.z;
    float _326 = _321.w;
    float _327 = 1.0 - _326;
    float _334 = exp2(log2((1.0 - (_327 * _325)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    float _348 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_327 * _327) * _325))) * cbMtdParam._m0[34u].w);
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    vec4 _363 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _366 = _363.y;
    float _369 = (_366 * ((isnan(1.0) ? _349 : (isnan(_349) ? 1.0 : min(_349, 1.0))) - _326)) + _326;
    vec4 _381 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[12u].x;
    _204[0u] = cbMtdParam._m0[12u].y;
    _205[0u] = cbMtdParam._m0[12u].z;
    _203[1u] = cbMtdParam._m0[13u].x;
    _204[1u] = cbMtdParam._m0[13u].y;
    _205[1u] = cbMtdParam._m0[13u].z;
    _203[2u] = cbMtdParam._m0[14u].x;
    _204[2u] = cbMtdParam._m0[14u].y;
    _205[2u] = cbMtdParam._m0[14u].z;
    _203[3u] = cbMtdParam._m0[15u].x;
    _204[3u] = cbMtdParam._m0[15u].y;
    _205[3u] = cbMtdParam._m0[15u].z;
    _203[4u] = cbMtdParam._m0[16u].x;
    _204[4u] = cbMtdParam._m0[16u].y;
    _205[4u] = cbMtdParam._m0[16u].z;
    _203[5u] = cbMtdParam._m0[11u].x;
    _204[5u] = cbMtdParam._m0[11u].y;
    _205[5u] = cbMtdParam._m0[11u].z;
    float _449 = (_363.x + (-0.02500000037252902984619140625)) * 8.0;
    float _451 = roundEven(_449);
    float _452 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    uint _455 = uint(int(isnan(5.0) ? _452 : (isnan(_452) ? 5.0 : min(_452, 5.0))));
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = 1.0;
    _207[0u] = 1.0;
    _208[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[23u].x;
    _207[1u] = cbMtdParam._m0[23u].y;
    _208[1u] = cbMtdParam._m0[23u].z;
    _206[2u] = cbMtdParam._m0[21u].x;
    _207[2u] = cbMtdParam._m0[21u].y;
    _208[2u] = cbMtdParam._m0[21u].z;
    _206[3u] = cbMtdParam._m0[19u].x;
    _207[3u] = cbMtdParam._m0[19u].y;
    _208[3u] = cbMtdParam._m0[19u].z;
    _206[4u] = cbMtdParam._m0[18u].x;
    _207[4u] = cbMtdParam._m0[18u].y;
    _208[4u] = cbMtdParam._m0[18u].z;
    _206[5u] = cbMtdParam._m0[17u].x;
    _207[5u] = cbMtdParam._m0[17u].y;
    _208[5u] = cbMtdParam._m0[17u].z;
    float _545 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[38u].w * TEXCOORD.x) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[39u].x * TEXCOORD.y) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _546 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    uint _548 = uint(int(isnan(5.0) ? _546 : (isnan(_546) ? 5.0 : min(_546, 5.0))));
    float _212[6];
    _212[0u] = 1.0;
    _212[1u] = cbMtdParam._m0[23u].w;
    _212[2u] = cbMtdParam._m0[21u].w;
    _212[3u] = cbMtdParam._m0[19u].w;
    _212[4u] = cbMtdParam._m0[18u].w;
    _212[5u] = cbMtdParam._m0[17u].w;
    float _585 = ((((_203[_455] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_206[_548] - _203[_455])) * _212[_455])) * _366) + cbMtdParam._m0[10u].x) * _381.x;
    float _586 = ((((_204[_455] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_207[_548] - _204[_455])) * _212[_455])) * _366) + cbMtdParam._m0[10u].y) * _381.y;
    float _587 = ((((_205[_455] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_208[_548] - _205[_455])) * _212[_455])) * _366) + cbMtdParam._m0[10u].z) * _381.z;
    vec4 _599 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _619 = (((cbMtdParam._m0[9u].x * _599.x) - _585) * _369) + _585;
    float _620 = (((cbMtdParam._m0[9u].y * _599.y) - _586) * _369) + _586;
    float _621 = (((cbMtdParam._m0[9u].z * _599.z) - _587) * _369) + _587;
    vec4 _633 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _653 = (((cbMtdParam._m0[20u].x * _633.x) - _619) * _336) + _619;
    float _654 = (((cbMtdParam._m0[20u].y * _633.y) - _620) * _336) + _620;
    float _655 = (((cbMtdParam._m0[20u].z * _633.z) - _621) * _336) + _621;
    vec4 _668 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = cbMtdParam._m0[24u].x;
    _210[0u] = cbMtdParam._m0[24u].y;
    _211[0u] = cbMtdParam._m0[24u].z;
    _209[1u] = cbMtdParam._m0[25u].x;
    _210[1u] = cbMtdParam._m0[25u].y;
    _211[1u] = cbMtdParam._m0[25u].z;
    _209[2u] = cbMtdParam._m0[26u].x;
    _210[2u] = cbMtdParam._m0[26u].y;
    _211[2u] = cbMtdParam._m0[26u].z;
    _209[3u] = cbMtdParam._m0[27u].x;
    _210[3u] = cbMtdParam._m0[27u].y;
    _211[3u] = cbMtdParam._m0[27u].z;
    _209[4u] = cbMtdParam._m0[28u].x;
    _210[4u] = cbMtdParam._m0[28u].y;
    _211[4u] = cbMtdParam._m0[28u].z;
    _209[5u] = cbMtdParam._m0[29u].x;
    _210[5u] = cbMtdParam._m0[29u].y;
    _211[5u] = cbMtdParam._m0[29u].z;
    float _755 = _209[_455] * _366;
    float _756 = _210[_455] * _366;
    float _757 = _211[_455] * _366;
    float _758 = _755 + ((_283.x * 4.5) * ((((cbMtdParam._m0[30u].x * _668.x) - _653) * _302) + _653));
    float _759 = _756 + ((_283.y * 4.5) * ((((cbMtdParam._m0[30u].y * _668.y) - _654) * _304) + _654));
    float _760 = _757 + ((_283.z * 4.5) * ((((cbMtdParam._m0[30u].z * _668.z) - _655) * _305) + _655));
    float _198[5];
    float _199[5];
    _198[0u] = cbMtdParam._m0[35u].y;
    _199[0u] = cbMtdParam._m0[35u].z;
    _198[1u] = cbMtdParam._m0[36u].w;
    _199[1u] = cbMtdParam._m0[37u].x;
    _198[2u] = cbMtdParam._m0[37u].y;
    _199[2u] = cbMtdParam._m0[37u].z;
    _198[3u] = cbMtdParam._m0[37u].w;
    _199[3u] = cbMtdParam._m0[38u].x;
    _198[4u] = cbMtdParam._m0[38u].y;
    _199[4u] = cbMtdParam._m0[38u].z;
    float _788 = roundEven(5.0 - _449);
    float _789 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _790 = isnan(4.0) ? _789 : (isnan(_789) ? 4.0 : min(_789, 4.0));
    float _792 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    uint _794 = uint(int(isnan(4.0) ? _792 : (isnan(_792) ? 4.0 : min(_792, 4.0))));
    float _803 = ((cbMtdParam._m0[39u].z - _199[_794]) * _369) + _199[_794];
    float _811 = ((cbMtdParam._m0[40u].x - _803) * _336) + _803;
    float _816 = ((cbMtdParam._m0[40u].z - _811) * _302) + _811;
    vec4 _830 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _832 = _830.x;
    float _833 = _830.y;
    float _835 = _830.z + _198[_794];
    vec4 _847 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _855 = (((cbMtdParam._m0[39u].y - _835) + _847.z) * _369) + _835;
    vec4 _867 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _875 = (((cbMtdParam._m0[39u].w - _855) + _867.z) * _336) + _855;
    float _881 = ((((_325 * 2.0) * _875) - _875) * cbMtdParam._m0[33u].w) + _875;
    vec4 _893 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _901 = (((_893.z + cbMtdParam._m0[40u].y) - _881) * _305) + _881;
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _963 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_932 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_936 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _978 = (-0.0) - ((_936 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _982 = (_936 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _983 = isnan(_982) ? _978 : (isnan(_978) ? _982 : min(_978, _982));
    float _4172 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _984 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _1009 = ((_847.x - _832) * _369) + _832;
    float _1010 = ((_847.y - _833) * _369) + _833;
    float _1015 = ((_867.x - _1009) * _336) + _1009;
    float _1016 = ((_867.y - _1010) * _336) + _1010;
    float _1025 = ((((_893.x - _1015) * _302) + _1015) * 2.0) + (-1.0);
    float _1026 = ((((_893.y - _1016) * _304) + _1016) * 2.0) + (-1.0);
    float _1027 = dot(vec2(_1025, _1026), vec2(_1025, _1026));
    float _4183 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1032 = sqrt(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))));
    float _1035 = (cbMtdParam._m0[34u].x * ((_321.x * 2.0) + (-1.0))) + _1025;
    float _1036 = (cbMtdParam._m0[34u].x * ((_321.y * 2.0) + (-1.0))) + _1026;
    float _1039 = fma(_1032, _252 * NORMAL.x, fma(_1036, _259 * TANGENT.x, (_245 * _237) * _1035));
    float _1042 = fma(_1032, _252 * NORMAL.y, fma(_1036, _259 * TANGENT.y, (_245 * _238) * _1035));
    float _1045 = fma(_1032, _252 * NORMAL.z, fma(_1036, _259 * TANGENT.z, (_245 * _239) * _1035));
    float _1049 = inversesqrt(dot(vec3(_1039, _1042, _1045), vec3(_1039, _1042, _1045)));
    float _1050 = _1049 * _1039;
    float _1051 = _1049 * _1042;
    float _1052 = _1049 * _1045;
    float _4194 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _1053 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4216 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4227 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4238 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _1057 = isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0));
    float _1073 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1103 = cbSceneParam._m0[71u].x - (_932 / _1093);
    float _1104 = cbSceneParam._m0[71u].y - (_936 / _1093);
    float _1105 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1093);
    float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
    float _1110 = _1103 * _1109;
    float _1111 = _1104 * _1109;
    float _1112 = _1105 * _1109;
    vec4 _1117 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1119 = _1117.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1337 = sqrt(((_1103 * _1103) + (_1104 * _1104)) + (_1105 * _1105));
        float _1343 = (cbMatDynParam._m0[5u].x * _1337) + cbMatDynParam._m0[5u].y;
        float _4249 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _1348 = (cbMatDynParam._m0[5u].z * _1337) + cbMatDynParam._m0[5u].w;
        float _4260 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) - _1344)) + _1344) < ((_1119 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1130 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1131 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1133 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1135 = _1133.w;
    float _1153 = fma(_1052, cbSceneParam._m0[5u].z, fma(_1051, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1050));
    float _1156 = fma(_1052, cbSceneParam._m0[6u].z, fma(_1051, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1050));
    float _1159 = fma(_1052, cbSceneParam._m0[7u].z, fma(_1051, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1050));
    vec4 _1161 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1172 = (((_1161.y - _1053) + (_1161.w * _1053)) * cbMtdParam._m0[3u].x) + _1053;
    uint _1185 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1186 = _1185 + 9u;
    uint _1187 = _1186 + uint(cbMatDynParam._m0[0u].w);
    float _1193 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) * cbInstanceData._m0[_1187].x;
    float _1194 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) * cbInstanceData._m0[_1187].y;
    float _1195 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * cbInstanceData._m0[_1187].z;
    float _4271 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
    float _1196 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
    float _4282 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
    float _1197 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
    float _4293 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
    vec4 _1199 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1204 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1215 = (((_1204.x - _1057) + (_1204.w * _1057)) * cbMtdParam._m0[3u].x) + _1057;
    float _1228 = (cbMtdParam._m0[3u].x * (((_1196 * _1135) - _1196) + _1199.x)) + _1196;
    float _1229 = (cbMtdParam._m0[3u].x * (((_1197 * _1135) - _1197) + _1199.y)) + _1197;
    float _1230 = (cbMtdParam._m0[3u].x * (((_1198 * _1135) - _1198) + _1199.z)) + _1198;
    float _1231 = 1.0 - _1215;
    float _1232 = _1231 * _1228;
    float _1233 = _1231 * _1229;
    float _1234 = _1231 * _1230;
    float _1239 = (_1228 + (-0.039999999105930328369140625)) * _1215;
    float _1240 = (_1229 + (-0.039999999105930328369140625)) * _1215;
    float _1241 = (_1230 + (-0.039999999105930328369140625)) * _1215;
    float _1242 = _1239 + 0.039999999105930328369140625;
    float _1244 = _1240 + 0.039999999105930328369140625;
    float _1245 = _1241 + 0.039999999105930328369140625;
    vec4 _1254 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1130, cbSceneParam._m0[86u].y * _1131));
    float _1257 = _1254.x * TEXCOORD_5.w;
    float _1258 = dot(vec3(_1050, _1051, _1052), vec3(_1110, _1111, _1112));
    float _1261 = _1258 * 2.0;
    float _1265 = (_1261 * _1050) - _1110;
    float _1266 = (_1261 * _1051) - _1111;
    float _1267 = (_1261 * _1052) - _1112;
    float _1271 = abs(dot(vec3(_1110, _1111, _1112), vec3(_1050, _1051, _1052)));
    float _4304 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
    float _1273 = sqrt(_1172);
    float _1284 = exp2((_1273 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1273 * 3.0));
    float _1290 = (1.0 - _1284) * ((_1273 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1291 = _1284 * _1273;
    float _1319 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1323 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1327 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1654;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1381 = fma(_1327, cbModelParam._m0[26u].z, fma(_1323, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1319));
        float _1385 = fma(_1327, cbModelParam._m0[27u].z, fma(_1323, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1319));
        float _1389 = fma(_1327, cbModelParam._m0[28u].z, fma(_1323, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1319));
        float _1413 = _1319 + _1050;
        float _1414 = _1323 + _1051;
        float _1415 = _1327 + _1052;
        float _1425 = fma(_1415, cbModelParam._m0[26u].z, fma(_1414, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1413)) - _1381;
        float _1426 = fma(_1415, cbModelParam._m0[27u].z, fma(_1414, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1413)) - _1385;
        float _1427 = fma(_1415, cbModelParam._m0[28u].z, fma(_1414, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1413)) - _1389;
        float _1431 = inversesqrt(dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427)));
        float _1443 = ((_1431 * _1425) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1381 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1444 = ((_1431 * _1426) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1385 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1445 = ((_1431 * _1427) / cbModelParam._m0[34u].z) + ((((((_1389 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1455 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1462 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        vec4 _1469 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1443, _1444, _1445), 0.0);
        float _1482 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1448.x + (-0.5));
        float _1484 = _1482 * (_1448.y + (-0.5));
        float _1485 = _1482 * (_1448.z + (-0.5));
        float _1492 = exp2((_1455.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1455.x + (-0.5));
        float _1494 = _1492 * (_1455.y + (-0.5));
        float _1495 = _1492 * (_1455.z + (-0.5));
        float _1502 = exp2((_1462.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1462.x + (-0.5));
        float _1504 = _1502 * (_1462.y + (-0.5));
        float _1505 = _1502 * (_1462.z + (-0.5));
        float _1512 = exp2((_1469.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1469.x + (-0.5));
        float _1514 = _1512 * (_1469.y + (-0.5));
        float _1515 = _1512 * (_1469.z + (-0.5));
        float _1516 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = _1483 * 0.5;
        float _1520 = _1493 * 0.5;
        float _1521 = _1503 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1536 = (dot(vec3(_1050, _1051, _1052), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1546 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1516 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4352 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1548 + 1.0))) + _1553) * _1516;
        float _1563 = _1484 * 0.5;
        float _1564 = _1494 * 0.5;
        float _1565 = _1504 * 0.5;
        float _1566 = dot(vec3(_1563, _1564, _1565), vec3(_1563, _1564, _1565));
        float _1571 = (_1566 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1566);
        float _1579 = (dot(vec3(_1050, _1051, _1052), vec3(_1571 * _1563, _1571 * _1564, _1571 * _1565)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1588 = sqrt(((_1564 * _1564) + (_1563 * _1563)) + (_1565 * _1565)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1590 = _1589 * 2.0;
        float _1594 = (1.0 - _1589) / (_1589 + 1.0);
        float _4385 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1604 = ((((1.0 - _1595) * (_1590 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1590 + 1.0))) + _1595) * _1517;
        float _1605 = _1485 * 0.5;
        float _1606 = _1495 * 0.5;
        float _1607 = _1505 * 0.5;
        float _1608 = dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607));
        float _1613 = (_1608 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1608);
        float _1621 = (dot(vec3(_1050, _1051, _1052), vec3(_1613 * _1605, _1613 * _1606, _1613 * _1607)) + 1.0) * 0.5;
        float _4396 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1630 = sqrt(((_1606 * _1606) + (_1605 * _1605)) + (_1607 * _1607)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4407 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0));
        float _1632 = _1631 * 2.0;
        float _1636 = (1.0 - _1631) / (_1631 + 1.0);
        float _4418 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1637 = isnan(1.0) ? _4418 : (isnan(_4418) ? 1.0 : min(_4418, 1.0));
        float _1646 = ((((1.0 - _1637) * (_1632 + 2.0)) * exp2(log2(isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * (_1632 + 1.0))) + _1637) * _1518;
        _1654 = _1485;
        _1656 = _1484;
        _1657 = _1483;
        _1658 = _1495;
        _1659 = _1494;
        _1660 = _1493;
        _1661 = _1505;
        _1662 = _1504;
        _1663 = _1503;
        _1664 = _1518;
        _1665 = _1517;
        _1666 = _1516;
        _1667 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
        _1668 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0)));
        _1669 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)));
    }
    else
    {
        _1654 = _1655;
        _1656 = _1655;
        _1657 = _1655;
        _1658 = _1655;
        _1659 = _1655;
        _1660 = _1655;
        _1661 = _1655;
        _1662 = _1655;
        _1663 = _1655;
        _1664 = _1655;
        _1665 = _1655;
        _1666 = _1655;
        _1667 = 0.0;
        _1668 = 0.0;
        _1669 = 0.0;
    }
    float _1962;
    float _1963;
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1695 = fma(_1327, cbModelParam._m0[30u].z, fma(_1323, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1319));
        float _1699 = fma(_1327, cbModelParam._m0[31u].z, fma(_1323, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1319));
        float _1703 = fma(_1327, cbModelParam._m0[32u].z, fma(_1323, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1319));
        float _1725 = _1319 + _1050;
        float _1726 = _1323 + _1051;
        float _1727 = _1327 + _1052;
        float _1737 = fma(_1727, cbModelParam._m0[30u].z, fma(_1726, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1725)) - _1695;
        float _1738 = fma(_1727, cbModelParam._m0[31u].z, fma(_1726, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1725)) - _1699;
        float _1739 = fma(_1727, cbModelParam._m0[32u].z, fma(_1726, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1725)) - _1703;
        float _1743 = inversesqrt(dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739)));
        float _1755 = ((_1743 * _1737) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1695 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1756 = ((_1743 * _1738) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1699 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1757 = ((_1743 * _1739) / cbModelParam._m0[35u].z) + ((((((_1703 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1759 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1766 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1773 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        vec4 _1780 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1755, _1756, _1757), 0.0);
        float _1792 = exp2((_1759.w + (-0.5)) * 20.0) * 2.0;
        float _1793 = _1792 * (_1759.x + (-0.5));
        float _1794 = _1792 * (_1759.y + (-0.5));
        float _1795 = _1792 * (_1759.z + (-0.5));
        float _1802 = exp2((_1766.w + (-0.5)) * 20.0) * 2.0;
        float _1803 = _1802 * (_1766.x + (-0.5));
        float _1804 = _1802 * (_1766.y + (-0.5));
        float _1805 = _1802 * (_1766.z + (-0.5));
        float _1812 = exp2((_1773.w + (-0.5)) * 20.0) * 2.0;
        float _1813 = _1812 * (_1773.x + (-0.5));
        float _1814 = _1812 * (_1773.y + (-0.5));
        float _1815 = _1812 * (_1773.z + (-0.5));
        float _1822 = exp2((_1780.w + (-0.5)) * 20.0) * 2.0;
        float _1823 = _1822 * (_1780.x + (-0.5));
        float _1824 = _1822 * (_1780.y + (-0.5));
        float _1825 = _1822 * (_1780.z + (-0.5));
        float _1826 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1827 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
        float _1828 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1829 = _1793 * 0.5;
        float _1830 = _1803 * 0.5;
        float _1831 = _1813 * 0.5;
        float _1832 = dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831));
        float _1837 = (_1832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1832);
        float _1845 = (dot(vec3(_1050, _1051, _1052), vec3(_1837 * _1829, _1837 * _1830, _1837 * _1831)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = sqrt(((_1830 * _1830) + (_1829 * _1829)) + (_1831 * _1831)) / (_1826 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1856 = _1855 * 2.0;
        float _1860 = (1.0 - _1855) / (_1855 + 1.0);
        float _4481 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1870 = ((((1.0 - _1861) * (_1856 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1856 + 1.0))) + _1861) * _1826;
        float _1871 = _1794 * 0.5;
        float _1872 = _1804 * 0.5;
        float _1873 = _1814 * 0.5;
        float _1874 = dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873));
        float _1879 = (_1874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1874);
        float _1887 = (dot(vec3(_1050, _1051, _1052), vec3(_1879 * _1871, _1879 * _1872, _1879 * _1873)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1896 = sqrt(((_1872 * _1872) + (_1871 * _1871)) + (_1873 * _1873)) / (_1827 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1898 = _1897 * 2.0;
        float _1902 = (1.0 - _1897) / (_1897 + 1.0);
        float _4514 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1912 = ((((1.0 - _1903) * (_1898 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1898 + 1.0))) + _1903) * _1827;
        float _1913 = _1795 * 0.5;
        float _1914 = _1805 * 0.5;
        float _1915 = _1815 * 0.5;
        float _1916 = dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915));
        float _1921 = (_1916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1916);
        float _1929 = (dot(vec3(_1050, _1051, _1052), vec3(_1921 * _1913, _1921 * _1914, _1921 * _1915)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
        float _1938 = sqrt(((_1914 * _1914) + (_1913 * _1913)) + (_1915 * _1915)) / (_1828 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1939 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1940 = _1939 * 2.0;
        float _1944 = (1.0 - _1939) / (_1939 + 1.0);
        float _4547 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1954 = ((((1.0 - _1945) * (_1940 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1940 + 1.0))) + _1945) * _1828;
        _1962 = _1795;
        _1963 = _1794;
        _1964 = _1793;
        _1965 = _1805;
        _1966 = _1804;
        _1967 = _1803;
        _1968 = _1815;
        _1969 = _1814;
        _1970 = _1813;
        _1971 = _1828;
        _1972 = _1827;
        _1973 = _1826;
        _1974 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)));
        _1975 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)));
        _1976 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0)));
    }
    else
    {
        _1962 = _1655;
        _1963 = _1655;
        _1964 = _1655;
        _1965 = _1655;
        _1966 = _1655;
        _1967 = _1655;
        _1968 = _1655;
        _1969 = _1655;
        _1970 = _1655;
        _1971 = _1655;
        _1972 = _1655;
        _1973 = _1655;
        _1974 = 0.0;
        _1975 = 0.0;
        _1976 = 0.0;
    }
    float _1986 = (cbModelParam._m0[1u].x * (_1974 - _1667)) + _1667;
    float _1987 = (cbModelParam._m0[1u].x * (_1975 - _1668)) + _1668;
    float _1988 = (cbModelParam._m0[1u].x * (_1976 - _1669)) + _1669;
    float _2009 = fma(_1988, cbSceneParam._m0[89u].z, fma(_1987, cbSceneParam._m0[89u].y, _1986 * cbSceneParam._m0[89u].x));
    float _2012 = fma(_1988, cbSceneParam._m0[90u].z, fma(_1987, cbSceneParam._m0[90u].y, _1986 * cbSceneParam._m0[90u].x));
    float _2015 = fma(_1988, cbSceneParam._m0[91u].z, fma(_1987, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1986));
    float _2028 = _1265 * 0.5;
    float _2029 = _1266 * 0.5;
    float _2030 = _1267 * 0.5;
    float _2031 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1964, _1967, _1970, _1973));
    float _2034 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1963, _1966, _1969, _1972));
    float _2037 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1962, _1965, _1968, _1971));
    float _2071;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2044 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1654, _1658, _1661, _1664));
        float _2048 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1656, _1659, _1662, _1665));
        float _2052 = dot(vec4(_2028, _2029, _2030, 1.0), vec4(_1657, _1660, _1663, _1666));
        float _2059 = dot(vec4(cbModelParam._m0[39u]), vec4(_2028, _2029, _2030, 1.0));
        _2071 = dot(vec3(isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0)), isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0)), isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2059) ? 0.0 : (isnan(0.0) ? _2059 : max(0.0, _2059))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2071 = 1.0;
    }
    float _2082;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2073 = dot(vec4(cbModelParam._m0[40u]), vec4(_2028, _2029, _2030, 1.0));
        _2082 = dot(vec3(isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0)), isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)), isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2073) ? 0.0 : (isnan(0.0) ? _2073 : max(0.0, _2073))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2082 = 1.0;
    }
    float _2086 = (_2082 * cbModelParam._m0[1u].x) + (_2071 * (1.0 - cbModelParam._m0[1u].x));
    float _2096 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1172);
    float _2097 = isnan(_2096) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2096 : min(cbModelParam._m0[25u].z, _2096));
    float _2177;
    float _2179;
    float _2181;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2144 = fma(_1327, cbModelParam._m0[13u].z, fma(_1323, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1319)) + cbModelParam._m0[13u].w;
        float _2148 = fma(_1327, cbModelParam._m0[14u].z, fma(_1323, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1319)) + cbModelParam._m0[14u].w;
        float _2152 = fma(_1327, cbModelParam._m0[15u].z, fma(_1323, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1319)) + cbModelParam._m0[15u].w;
        float _2155 = fma(_1267, cbModelParam._m0[13u].z, fma(_1266, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1265));
        float _2158 = fma(_1267, cbModelParam._m0[14u].z, fma(_1266, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1265));
        float _2161 = fma(_1267, cbModelParam._m0[15u].z, fma(_1266, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1265));
        float _2189;
        if (_2155 > 0.0)
        {
            _2189 = abs((1.0 - _2144) / _2155);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2155 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2144 + 1.0) / _2155);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2189 = frontier_phi_17_15_ladder;
        }
        float _2391;
        if (_2158 > 0.0)
        {
            _2391 = abs((1.0 - _2148) / _2158);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2158 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2148 + 1.0) / _2158);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2391 = frontier_phi_26_22_ladder;
        }
        float _2645;
        if (_2161 > 0.0)
        {
            _2645 = abs((1.0 - _2152) / _2161);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2161 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2152 + 1.0) / _2161);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2645 = frontier_phi_38_33_ladder;
        }
        float _2647 = isnan(_2391) ? _2189 : (isnan(_2189) ? _2391 : min(_2189, _2391));
        float _2648 = isnan(_2645) ? _2647 : (isnan(_2647) ? _2645 : min(_2647, _2645));
        float _2652 = (_2648 * _2155) + _2144;
        float _2653 = (_2648 * _2158) + _2148;
        float _2654 = (_2648 * _2161) + _2152;
        float _2655 = _2648 * 9.9999997473787516355514526367188e-05;
        float _2657 = (-1.0) - _2655;
        float _2659 = _2655 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2654 > _2659) || ((_2654 < _2657) || ((_2653 > _2659) || ((_2653 < _2657) || ((_2652 < _2657) || (_2652 > _2659))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2782 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2654, cbModelParam._m0[9u].z, fma(_2653, cbModelParam._m0[9u].y, _2652 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2654, cbModelParam._m0[10u].z, fma(_2653, cbModelParam._m0[10u].y, _2652 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2654, cbModelParam._m0[11u].z, fma(_2653, cbModelParam._m0[11u].y, _2652 * cbModelParam._m0[11u].x))), _2097);
            frontier_phi_16_38_ladder = _2782.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2782.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2782.x * cbModelParam._m0[1u].y;
        }
        _2177 = frontier_phi_16_38_ladder_2;
        _2179 = frontier_phi_16_38_ladder_1;
        _2181 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2165 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1265, _1266, _1267), _2097);
        _2177 = _2165.x * cbModelParam._m0[1u].y;
        _2179 = _2165.y * cbModelParam._m0[1u].y;
        _2181 = _2165.z * cbModelParam._m0[1u].y;
    }
    float _2185 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1172);
    float _2186 = isnan(_2185) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2185 : min(cbModelParam._m0[25u].w, _2185));
    float _2275;
    float _2277;
    float _2279;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2239 = fma(_1327, cbModelParam._m0[21u].z, fma(_1323, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1319)) + cbModelParam._m0[21u].w;
        float _2243 = fma(_1327, cbModelParam._m0[22u].z, fma(_1323, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1319)) + cbModelParam._m0[22u].w;
        float _2247 = fma(_1327, cbModelParam._m0[23u].z, fma(_1323, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1319)) + cbModelParam._m0[23u].w;
        float _2250 = fma(_1267, cbModelParam._m0[21u].z, fma(_1266, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1265));
        float _2253 = fma(_1267, cbModelParam._m0[22u].z, fma(_1266, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1265));
        float _2256 = fma(_1267, cbModelParam._m0[23u].z, fma(_1266, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1265));
        float _2396;
        if (_2250 > 0.0)
        {
            _2396 = abs((1.0 - _2239) / _2250);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2239 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2396 = frontier_phi_28_24_ladder;
        }
        float _2672;
        if (_2253 > 0.0)
        {
            _2672 = abs((1.0 - _2243) / _2253);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2243 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2672 = frontier_phi_40_35_ladder;
        }
        float _2885;
        if (_2256 > 0.0)
        {
            _2885 = abs((1.0 - _2247) / _2256);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2247 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2885 = frontier_phi_49_46_ladder;
        }
        float _2887 = isnan(_2672) ? _2396 : (isnan(_2396) ? _2672 : min(_2396, _2672));
        float _2888 = isnan(_2885) ? _2887 : (isnan(_2887) ? _2885 : min(_2887, _2885));
        float _2892 = (_2888 * _2250) + _2239;
        float _2893 = (_2888 * _2253) + _2243;
        float _2894 = (_2888 * _2256) + _2247;
        float _2895 = _2888 * 9.9999997473787516355514526367188e-05;
        float _2896 = (-1.0) - _2895;
        float _2898 = _2895 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2894 > _2898) || ((_2894 < _2896) || ((_2893 > _2898) || ((_2893 < _2896) || ((_2892 < _2896) || (_2892 > _2898))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3122 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2894, cbModelParam._m0[17u].z, fma(_2893, cbModelParam._m0[17u].y, _2892 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2894, cbModelParam._m0[18u].z, fma(_2893, cbModelParam._m0[18u].y, _2892 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2894, cbModelParam._m0[19u].z, fma(_2893, cbModelParam._m0[19u].y, _2892 * cbModelParam._m0[19u].x))), _2186);
            frontier_phi_25_49_ladder = _3122.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3122.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3122.x * cbModelParam._m0[1u].z;
        }
        _2275 = frontier_phi_25_49_ladder_2;
        _2277 = frontier_phi_25_49_ladder_1;
        _2279 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2259 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1265, _1266, _1267), _2186);
        _2275 = _2259.x * cbModelParam._m0[1u].z;
        _2277 = _2259.y * cbModelParam._m0[1u].z;
        _2279 = _2259.z * cbModelParam._m0[1u].z;
    }
    float _2292 = (((_1290 * _1242) + _1291) * _1257) * ((cbModelParam._m0[1u].w * (_2275 - _2177)) + _2177);
    float _2294 = (((_1290 * _1244) + _1291) * _1257) * ((cbModelParam._m0[1u].w * (_2277 - _2179)) + _2179);
    float _2296 = (((_1290 * _1245) + _1291) * _1257) * ((cbModelParam._m0[1u].w * (_2279 - _2181)) + _2181);
    float _2299 = fma(_2296, cbSceneParam._m0[89u].z, fma(_2294, cbSceneParam._m0[89u].y, _2292 * cbSceneParam._m0[89u].x));
    float _2302 = fma(_2296, cbSceneParam._m0[90u].z, fma(_2294, cbSceneParam._m0[90u].y, _2292 * cbSceneParam._m0[90u].x));
    float _2305 = fma(_2296, cbSceneParam._m0[91u].z, fma(_2294, cbSceneParam._m0[91u].y, _2292 * cbSceneParam._m0[91u].x));
    uvec4 _2315 = floatBitsToUint(cbInstanceData._m0[_1185 + 5u]);
    uint _2317 = _2315.x * 14u;
    uint _2318 = _2317 + 13u;
    float _2325 = _1257 + (-1.0);
    float _2330 = (cbLight._m0[_2318].x * _2325) + 1.0;
    float _2331 = (cbLight._m0[_2318].y * _2325) + 1.0;
    float _2332 = (cbLight._m0[_2318].z * _2325) + 1.0;
    float _2333 = (cbLight._m0[_2318].w * _2325) + 1.0;
    uint _2334 = _2317 + 5u;
    float _2340 = isnan(1.0) ? _2331 : (isnan(_2331) ? 1.0 : min(_2331, 1.0));
    uint _2344 = _2317 + 4u;
    float _2350 = isnan(1.0) ? _2330 : (isnan(_2330) ? 1.0 : min(_2330, 1.0));
    uint _2354 = _2317 | 1u;
    float _2365 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_1050, _1051, _1052));
    float _2368 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_1050, _1051, _1052));
    float _4683 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _4694 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2373 = (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0))) * 0.3183098733425140380859375;
    float _2375 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * 0.3183098733425140380859375;
    float _2382 = ((cbLight._m0[_2334].x * _2340) * _2375) + ((cbLight._m0[_2344].x * _2350) * _2373);
    float _2383 = ((_2340 * cbLight._m0[_2334].y) * _2375) + ((_2350 * cbLight._m0[_2344].y) * _2373);
    float _2384 = ((_2340 * cbLight._m0[_2334].z) * _2375) + ((_2350 * cbLight._m0[_2344].z) * _2373);
    uvec4 _2388 = floatBitsToUint(cbLight._m0[_2317 + 12u]);
    bool _2390 = _2388.x == 0u;
    float _2401;
    float _2403;
    float _2405;
    if (_2390)
    {
        _2401 = _2382;
        _2403 = _2383;
        _2405 = _2384;
    }
    else
    {
        uint _2409 = _2317 + 6u;
        float _2425 = (dot(vec3(cbLight._m0[_2317 + 2u].xyz), vec3(_1050, _1051, _1052)) * 0.5) + 0.5;
        float _2426 = _2425 * _2425;
        float _4705 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2427 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
        float _2428 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2401 = (((cbLight._m0[_2409].x * 0.3183098733425140380859375) * _2427) * _2428) + _2382;
        _2403 = (((cbLight._m0[_2409].y * 0.3183098733425140380859375) * _2427) * _2428) + _2383;
        _2405 = (((cbLight._m0[_2409].z * 0.3183098733425140380859375) * _2427) * _2428) + _2384;
    }
    bool _2408 = _2388.y == 0u;
    float _2446;
    float _2448;
    float _2450;
    if (_2408)
    {
        _2446 = _2401;
        _2448 = _2403;
        _2450 = _2405;
    }
    else
    {
        uint _2616 = _2317 + 7u;
        float _2632 = (dot(vec3(cbLight._m0[_2317 + 3u].xyz), vec3(_1050, _1051, _1052)) * 0.5) + 0.5;
        float _2633 = _2632 * _2632;
        float _4721 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2634 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2635 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2446 = (((cbLight._m0[_2616].x * 0.3183098733425140380859375) * _2634) * _2635) + _2401;
        _2448 = (((cbLight._m0[_2616].y * 0.3183098733425140380859375) * _2634) * _2635) + _2403;
        _2450 = (((cbLight._m0[_2616].z * 0.3183098733425140380859375) * _2634) * _2635) + _2405;
    }
    uint _2453 = _2317 + 8u;
    float _2466 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2317].w)) * _1172) * 0.949999988079071044921875);
    float _2467 = _2466 * _2466;
    float _2468 = cbLight._m0[_2317].x + _1110;
    float _2469 = cbLight._m0[_2317].y + _1111;
    float _2470 = cbLight._m0[_2317].z + _1112;
    float _2474 = inversesqrt(dot(vec3(_2468, _2469, _2470), vec3(_2468, _2469, _2470)));
    float _2475 = _2474 * _2468;
    float _2476 = _2474 * _2469;
    float _2477 = _2474 * _2470;
    float _2478 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2317].xyz));
    float _4737 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
    float _2481 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
    float _4748 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _2482 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2483 = dot(vec3(_1050, _1051, _1052), vec3(_2475, _2476, _2477));
    float _4759 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2486 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2487 = dot(vec3(cbLight._m0[_2317].xyz), vec3(_2475, _2476, _2477));
    float _4770 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
    float _2491 = _2467 * _2467;
    float _2495 = ((_2486 * _2486) * (_2491 + (-1.0))) + 1.0;
    float _2503 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
    float _2504 = 0.959999978542327880859375 - _1239;
    float _2506 = 0.959999978542327880859375 - _1240;
    float _2507 = 0.959999978542327880859375 - _1241;
    float _2514 = 1.0 - _2467;
    float _2525 = (0.5 / (((_2482 * ((_2481 * _2514) + _2467)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2514) + _2467) * _2481))) * _2481;
    float _4781 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2527 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2491 / ((_2495 * _2495) * 3.141590118408203125));
    uint _2538 = _2317 + 9u;
    float _2549 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _1172) * 0.949999988079071044921875);
    float _2550 = _2549 * _2549;
    float _2551 = cbLight._m0[_2354].x + _1110;
    float _2552 = cbLight._m0[_2354].y + _1111;
    float _2553 = cbLight._m0[_2354].z + _1112;
    float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
    float _2558 = _2557 * _2551;
    float _2559 = _2557 * _2552;
    float _2560 = _2557 * _2553;
    float _2561 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2354].xyz));
    float _4792 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2564 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
    float _2565 = dot(vec3(_1050, _1051, _1052), vec3(_2558, _2559, _2560));
    float _4803 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2568 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
    float _2569 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2558, _2559, _2560));
    float _4814 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2573 = _2550 * _2550;
    float _2577 = ((_2568 * _2568) * (_2573 + (-1.0))) + 1.0;
    float _2584 = exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0);
    float _2591 = 1.0 - _2550;
    float _2601 = (0.5 / (((_2482 * ((_2564 * _2591) + _2550)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2591) + _2550) * _2564))) * _2564;
    float _4825 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
    float _2603 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2573 / ((_2577 * _2577) * 3.141590118408203125));
    float _2613 = (((((_2584 * _2504) + _1242) * cbLight._m0[_2538].x) * _2603) * _2340) + (((((_2503 * _2504) + _1242) * cbLight._m0[_2453].x) * _2527) * _2350);
    float _2614 = (((((_2584 * _2506) + _1244) * cbLight._m0[_2538].y) * _2603) * _2340) + (((((_2503 * _2506) + _1244) * cbLight._m0[_2453].y) * _2527) * _2350);
    float _2615 = (((((_2584 * _2507) + _1245) * cbLight._m0[_2538].z) * _2603) * _2340) + (((((_2503 * _2507) + _1245) * cbLight._m0[_2453].z) * _2527) * _2350);
    float _2677;
    float _2679;
    float _2681;
    if (_2390)
    {
        _2677 = _2613;
        _2679 = _2614;
        _2681 = _2615;
    }
    else
    {
        uint _2683 = _2317 + 2u;
        uint _2687 = _2317 + 10u;
        float _2701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2683].w)) * _1172) * 0.949999988079071044921875);
        float _2702 = _2701 * _2701;
        float _2703 = cbLight._m0[_2683].x + _1110;
        float _2704 = cbLight._m0[_2683].y + _1111;
        float _2705 = cbLight._m0[_2683].z + _1112;
        float _2709 = inversesqrt(dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705)));
        float _2710 = _2709 * _2703;
        float _2711 = _2709 * _2704;
        float _2712 = _2709 * _2705;
        float _2713 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2683].xyz));
        float _4836 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2716 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
        float _2717 = dot(vec3(_1050, _1051, _1052), vec3(_2710, _2711, _2712));
        float _4847 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2720 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
        float _2721 = dot(vec3(cbLight._m0[_2683].xyz), vec3(_2710, _2711, _2712));
        float _4858 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
        float _2725 = _2702 * _2702;
        float _2729 = ((_2720 * _2720) * (_2725 + (-1.0))) + 1.0;
        float _2736 = exp2(log2(1.0 - (isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0)))) * 5.0);
        float _2743 = 1.0 - _2702;
        float _2753 = (0.5 / (((_2482 * ((_2716 * _2743) + _2702)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2743) + _2702) * _2716))) * _2716;
        float _4869 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
        float _2755 = (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0))) * (_2725 / ((_2729 * _2729) * 3.141590118408203125));
        float _2756 = isnan(1.0) ? _2332 : (isnan(_2332) ? 1.0 : min(_2332, 1.0));
        _2677 = (((((_2736 * _2504) + _1242) * cbLight._m0[_2687].x) * _2755) * _2756) + _2613;
        _2679 = (((((_2736 * _2506) + _1244) * cbLight._m0[_2687].y) * _2755) * _2756) + _2614;
        _2681 = (((((_2736 * _2507) + _1245) * cbLight._m0[_2687].z) * _2755) * _2756) + _2615;
    }
    float _2791;
    float _2793;
    float _2795;
    if (_2408)
    {
        _2791 = _2677;
        _2793 = _2679;
        _2795 = _2681;
    }
    else
    {
        uint _2802 = _2317 + 3u;
        uint _2806 = _2317 + 11u;
        float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2802].w)) * _1172) * 0.949999988079071044921875);
        float _2821 = _2820 * _2820;
        float _2822 = cbLight._m0[_2802].x + _1110;
        float _2823 = cbLight._m0[_2802].y + _1111;
        float _2824 = cbLight._m0[_2802].z + _1112;
        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
        float _2829 = _2828 * _2822;
        float _2830 = _2828 * _2823;
        float _2831 = _2828 * _2824;
        float _2832 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2802].xyz));
        float _4885 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0));
        float _2836 = dot(vec3(_1050, _1051, _1052), vec3(_2829, _2830, _2831));
        float _4896 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0));
        float _2840 = dot(vec3(cbLight._m0[_2802].xyz), vec3(_2829, _2830, _2831));
        float _4907 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2844 = _2821 * _2821;
        float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
        float _2855 = exp2(log2(1.0 - (isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0)))) * 5.0);
        float _2862 = 1.0 - _2821;
        float _2872 = (0.5 / (((_2482 * ((_2835 * _2862) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2482 * _2862) + _2821) * _2835))) * _2835;
        float _4918 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2333 : (isnan(_2333) ? 1.0 : min(_2333, 1.0));
        _2791 = (((((_2855 * _2504) + _1242) * cbLight._m0[_2806].x) * _2874) * _2875) + _2677;
        _2793 = (((((_2855 * _2506) + _1244) * cbLight._m0[_2806].y) * _2874) * _2875) + _2679;
        _2795 = (((((_2855 * _2507) + _1245) * cbLight._m0[_2806].z) * _2874) * _2875) + _2681;
    }
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    if (_2315.y == 0u)
    {
        float _2950 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2951 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2950;
        float _2952 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2950;
        float _2953 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2950;
        uvec4 _2965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2966 = _2965.x;
        uint _2977 = uint((float(_2965.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1131) / _2966))) + floor(float(uint(cbSceneParam._m0[85u].x * _1130) / _2966)));
        float _2987 = (log2(_2953 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2988 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
        uint _2991 = uint(isnan(14.0) ? _2988 : (isnan(_2988) ? 14.0 : min(_2988, 14.0)));
        uvec4 _2996 = texelFetch(g_lightClusterGridBuffer, int(((_2991 << 2u) + (_2977 << 6u)) >> 2u));
        uint _2997 = _2996.x;
        uint _2998 = _2965.z;
        float _3127;
        float _3129;
        float _3131;
        float _3133;
        float _3135;
        float _3137;
        if (((((1u << ((_2998 >> 4u) & 15u)) + 4294967295u) & _2997) == 0u) || ((_2998 & 240u) == 0u))
        {
            _3127 = 0.0;
            _3129 = 0.0;
            _3131 = 0.0;
            _3133 = 0.0;
            _3135 = 0.0;
            _3137 = 0.0;
        }
        else
        {
            float _3128;
            float _3130;
            float _3132;
            float _3134;
            float _3136;
            float _3138;
            float _3288 = 0.0;
            float _3289 = 0.0;
            float _3290 = 0.0;
            float _3291 = 0.0;
            float _3292 = 0.0;
            float _3293 = 0.0;
            uint _3294 = 0u;
            uint _3303;
            bool _3304;
            for (;;)
            {
                _3303 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3294 << 2u)) >> 2u)).x;
                _3304 = _3303 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3304)
                {
                    frontier_phi_66_pred = _3288;
                    frontier_phi_66_pred_1 = _3293;
                    frontier_phi_66_pred_2 = _3292;
                    frontier_phi_66_pred_3 = _3291;
                    frontier_phi_66_pred_4 = _3290;
                    frontier_phi_66_pred_5 = _3289;
                }
                else
                {
                    float _3433;
                    float _3434;
                    float _3435;
                    float _3436;
                    float _3437;
                    float _3438;
                    uint _3439;
                    _3433 = _3288;
                    _3434 = _3289;
                    _3435 = _3290;
                    _3436 = _3291;
                    _3437 = _3292;
                    _3438 = _3293;
                    _3439 = _3303;
                    float _3360;
                    float _3361;
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    for (;;)
                    {
                        uint _3443 = uint(findLSB(_3439)) + (_3294 << 5u);
                        uint _3440 = (_3439 + 4294967295u) & _3439;
                        uint _3445 = _3443 * 48u;
                        vec4 _3459 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3445)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3445 + 3u)).x));
                        uint _3465 = (_3443 * 48u) + 4u;
                        vec4 _3478 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3484 = (_3443 * 48u) + 8u;
                        vec3 _3495 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3484)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3484 + 2u)).x));
                        float _3499 = _3459.x - _2951;
                        float _3500 = _3459.y - _2952;
                        float _3501 = _3459.z - _2953;
                        float _3502 = dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501));
                        float _3505 = inversesqrt(_3502);
                        float _3506 = _3505 * _3499;
                        float _3507 = _3505 * _3500;
                        float _3508 = _3505 * _3501;
                        float _3509 = dot(vec3(_1153, _1156, _1159), vec3(_3506, _3507, _3508));
                        float _3514 = 1.0 - (_3502 * _3459.w);
                        float _4944 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                        float _3515 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3516 = sqrt(_3502) * _3478.w;
                        float _3519 = 1.39999997615814208984375 / (_3516 + 1.39999997615814208984375);
                        float _3520 = _3519 * _3519;
                        float _3523 = ((1.0 - _3520) * _3509) + _3520;
                        float _3526 = _3516 * _3516;
                        float _3530 = ((isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0))) * _3515) / ((_3526 * 0.699999988079071044921875) + 1.0);
                        float _3534 = (-0.0) - _2951;
                        float _3535 = (-0.0) - _2952;
                        float _3536 = (-0.0) - _2953;
                        float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                        float _3541 = _3540 * _3534;
                        float _3542 = _3540 * _3535;
                        float _3543 = _3540 * _3536;
                        float _3551 = exp2(log2(1.0 / ((_3526 * 3.5) + 5.0)) * 0.25);
                        float _3552 = 1.0 - _1273;
                        float _3559 = sqrt(1.0 - ((1.0 - (_3552 * _3552)) * (1.0 - (_3551 * _3551))));
                        float _3560 = _3559 * _3559;
                        float _3561 = _3560 * _3560;
                        float _3562 = _3541 + _3506;
                        float _3563 = _3542 + _3507;
                        float _3564 = _3543 + _3508;
                        float _3568 = inversesqrt(dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564)));
                        float _3572 = dot(vec3(_1153, _1156, _1159), vec3(_3541, _3542, _3543));
                        float _4960 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                        float _3575 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                        float _3576 = dot(vec3(_1153, _1156, _1159), vec3(_3568 * _3562, _3568 * _3563, _3568 * _3564));
                        float _4971 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                        float _3579 = isnan(1.0) ? _4971 : (isnan(_4971) ? 1.0 : min(_4971, 1.0));
                        float _3583 = ((_3579 * _3579) * (_3561 + (-1.0))) + 1.0;
                        float _3584 = _3519 * _3560;
                        float _3585 = _3584 * _3584;
                        float _3588 = ((1.0 - _3585) * _3509) + _3585;
                        float _4982 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                        float _3589 = isnan(1.0) ? _4982 : (isnan(_4982) ? 1.0 : min(_4982, 1.0));
                        float _3590 = 1.0 - _3560;
                        float _3600 = (0.5 / (((_3589 * ((_3575 * _3590) + _3560)) + 9.9999999392252902907785028219223e-09) + (((_3589 * _3590) + _3560) * _3575))) * _3589;
                        float _4993 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                        float _3611 = (((_3561 * 3.1415927410125732421875) * (isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0)))) / ((_3583 * _3583) * ((_3526 * 2.1991131305694580078125) + 3.141590118408203125))) * _3515;
                        _3363 = (_3530 * _3478.x) + _3436;
                        _3364 = (_3530 * _3478.y) + _3437;
                        _3365 = (_3530 * _3478.z) + _3438;
                        _3360 = (_3611 * _3495.x) + _3433;
                        _3361 = (_3611 * _3495.y) + _3434;
                        _3362 = (_3611 * _3495.z) + _3435;
                        if (_3440 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3433 = _3360;
                            _3434 = _3361;
                            _3435 = _3362;
                            _3436 = _3363;
                            _3437 = _3364;
                            _3438 = _3365;
                            _3439 = _3440;
                        }
                    }
                    frontier_phi_66_pred = _3360;
                    frontier_phi_66_pred_1 = _3365;
                    frontier_phi_66_pred_2 = _3364;
                    frontier_phi_66_pred_3 = _3363;
                    frontier_phi_66_pred_4 = _3362;
                    frontier_phi_66_pred_5 = _3361;
                }
                _3128 = frontier_phi_66_pred;
                _3138 = frontier_phi_66_pred_1;
                _3136 = frontier_phi_66_pred_2;
                _3134 = frontier_phi_66_pred_3;
                _3132 = frontier_phi_66_pred_4;
                _3130 = frontier_phi_66_pred_5;
                uint _3295 = _3294 + 1u;
                if (_3295 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3288 = _3128;
                    _3289 = _3130;
                    _3290 = _3132;
                    _3291 = _3134;
                    _3292 = _3136;
                    _3293 = _3138;
                    _3294 = _3295;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3127 = _3128;
            _3129 = _3130;
            _3131 = _3132;
            _3133 = _3134;
            _3135 = _3136;
            _3137 = _3138;
        }
        uvec4 _3141 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3142 = _3141.z;
        uint _3144 = (_3142 >> 8u) & 15u;
        float _3256;
        float _3258;
        float _3260;
        float _3262;
        float _3264;
        float _3266;
        if (((4294967295u << _3144) & _2997) == 0u)
        {
            _3256 = _3127;
            _3258 = _3129;
            _3260 = _3131;
            _3262 = _3133;
            _3264 = _3135;
            _3266 = _3137;
        }
        else
        {
            float _3281 = inversesqrt(dot(vec3(_2951, _2952, _2953), vec3(_2951, _2952, _2953)));
            float _3282 = _3281 * _2951;
            float _3283 = _3281 * _2952;
            float _3284 = _3281 * _2953;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3144 < ((_3142 >> 12u) & 15u))
            {
                float _3257;
                float _3259;
                float _3261;
                float _3263;
                float _3265;
                float _3267;
                float _3416 = _3127;
                float _3417 = _3129;
                float _3418 = _3131;
                float _3419 = _3133;
                float _3420 = _3135;
                float _3421 = _3137;
                uint _3422 = _3144;
                uint _3431;
                bool _3432;
                for (;;)
                {
                    _3431 = texelFetch(g_lightClassification, int((((_2991 << 5u) + (_2977 << 9u)) + (_3422 << 2u)) >> 2u)).x;
                    _3432 = _3431 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3432)
                    {
                        frontier_phi_77_pred = _3421;
                        frontier_phi_77_pred_1 = _3420;
                        frontier_phi_77_pred_2 = _3419;
                        frontier_phi_77_pred_3 = _3418;
                        frontier_phi_77_pred_4 = _3417;
                        frontier_phi_77_pred_5 = _3416;
                    }
                    else
                    {
                        float _3625;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3918;
                        float _3919;
                        float _3920;
                        float _3921;
                        float _3922;
                        float _3923;
                        float _3638 = _3416;
                        float _3639 = _3417;
                        float _3640 = _3418;
                        float _3641 = _3419;
                        float _3642 = _3420;
                        float _3643 = _3421;
                        uint _3644 = _3431;
                        uint _3645;
                        vec4 _3670;
                        float _3671;
                        vec4 _3686;
                        vec3 _3698;
                        vec4 _3713;
                        vec4 _3728;
                        float _3774;
                        bool _3775;
                        for (;;)
                        {
                            uint _3655 = ((_3422 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3644));
                            _3645 = (_3644 + 4294967295u) & _3644;
                            uint _3657 = _3655 * 40u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            _3671 = _3670.w;
                            uint _3673 = (_3655 * 40u) + 4u;
                            _3686 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3673)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3673 + 3u)).x));
                            uint _3688 = (_3655 * 40u) + 8u;
                            _3698 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3688)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3688 + 2u)).x));
                            uint _3700 = (_3655 * 40u) + 16u;
                            _3713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 3u)).x));
                            uint _3715 = (_3655 * 40u) + 20u;
                            _3728 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3715 + 3u)).x));
                            uint _3730 = (_3655 * 40u) + 24u;
                            vec4 _3743 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3730)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3730 + 3u)).x));
                            uint _3749 = (_3655 * 40u) + 28u;
                            vec4 _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            _3774 = fma(_2953, _3762.z, fma(_2952, _3762.y, _3762.x * _2951)) + _3762.w;
                            _3775 = !((fma(_2953, _3743.z, fma(_2952, _3743.y, _3743.x * _2951)) + _3743.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3775)
                            {
                                float _3802 = _3670.x - _2951;
                                float _3803 = _3670.y - _2952;
                                float _3804 = _3670.z - _2953;
                                float _3805 = dot(vec3(_3802, _3803, _3804), vec3(_3802, _3803, _3804));
                                float _3808 = inversesqrt(_3805);
                                float _3809 = _3808 * _3802;
                                float _3810 = _3808 * _3803;
                                float _3811 = _3808 * _3804;
                                float _3815 = 1.0 - (_3805 / (_3671 * _3671));
                                float _5004 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3820 = sqrt(_3805) * _3686.w;
                                float _3822 = 1.39999997615814208984375 / (_3820 + 1.39999997615814208984375);
                                float _3823 = _3822 * _3822;
                                float _3826 = ((1.0 - _3823) * dot(vec3(_3809, _3810, _3811), vec3(_1153, _1156, _1159))) + _3823;
                                float _3829 = _3820 * _3820;
                                float _3833 = (fma(_2953, _3713.z, fma(_2952, _3713.y, _3713.x * _2951)) + _3713.w) / _3774;
                                float _3834 = (fma(_2953, _3728.z, fma(_2952, _3728.y, _3728.x * _2951)) + _3728.w) / _3774;
                                float _3838 = 1.0 - dot(vec2(_3833, _3834), vec2(_3833, _3834));
                                float _5020 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3839 = isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0));
                                float _3840 = _3839 * (((isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0))) * _3816) / ((_3829 * 0.699999988079071044921875) + 1.0));
                                float _3852 = exp2(log2(1.0 / ((_3829 * 3.5) + 5.0)) * 0.25);
                                float _3853 = 1.0 - _1273;
                                float _3860 = sqrt(1.0 - ((1.0 - (_3853 * _3853)) * (1.0 - (_3852 * _3852))));
                                float _3861 = _3860 * _3860;
                                float _3862 = _3861 * _3861;
                                float _3863 = _3809 - _3282;
                                float _3864 = _3810 - _3283;
                                float _3865 = _3811 - _3284;
                                float _3869 = inversesqrt(dot(vec3(_3863, _3864, _3865), vec3(_3863, _3864, _3865)));
                                float _3873 = dot(vec3(_1153, _1156, _1159), vec3((-0.0) - _3282, (-0.0) - _3283, (-0.0) - _3284));
                                float _5031 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3876 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
                                float _3877 = dot(vec3(_1153, _1156, _1159), vec3(_3869 * _3863, _3869 * _3864, _3869 * _3865));
                                float _5042 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3880 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
                                float _3884 = ((_3880 * _3880) * (_3862 + (-1.0))) + 1.0;
                                float _3885 = _3822 * _3861;
                                float _3886 = _3885 * _3885;
                                float _3892 = ((1.0 - _3886) * dot(vec3(_1153, _1156, _1159), vec3(_3809, _3810, _3811))) + _3886;
                                float _5053 = isnan(0.0) ? _3892 : (isnan(_3892) ? 0.0 : max(_3892, 0.0));
                                float _3893 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
                                float _3894 = 1.0 - _3861;
                                float _3904 = (0.5 / (((_3893 * ((_3876 * _3894) + _3861)) + 9.9999999392252902907785028219223e-09) + (((_3893 * _3894) + _3861) * _3876))) * _3893;
                                float _5064 = isnan(0.0) ? _3904 : (isnan(_3904) ? 0.0 : max(_3904, 0.0));
                                float _3914 = (_3839 * _3816) * (((_3862 * 3.1415927410125732421875) * (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0)))) / ((_3884 * _3884) * ((_3829 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3840 * _3686.y;
                                frontier_phi_83_pred_1 = _3840 * _3686.x;
                                frontier_phi_83_pred_2 = _3914 * _3698.z;
                                frontier_phi_83_pred_3 = _3914 * _3698.y;
                                frontier_phi_83_pred_4 = _3914 * _3698.x;
                                frontier_phi_83_pred_5 = _3840 * _3686.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3922 = frontier_phi_83_pred;
                            _3921 = frontier_phi_83_pred_1;
                            _3920 = frontier_phi_83_pred_2;
                            _3919 = frontier_phi_83_pred_3;
                            _3918 = frontier_phi_83_pred_4;
                            _3923 = frontier_phi_83_pred_5;
                            _3628 = _3921 + _3641;
                            _3629 = _3922 + _3642;
                            _3630 = _3923 + _3643;
                            _3625 = _3918 + _3638;
                            _3626 = _3919 + _3639;
                            _3627 = _3920 + _3640;
                            if (_3645 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3638 = _3625;
                                _3639 = _3626;
                                _3640 = _3627;
                                _3641 = _3628;
                                _3642 = _3629;
                                _3643 = _3630;
                                _3644 = _3645;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3630;
                        frontier_phi_77_pred_1 = _3629;
                        frontier_phi_77_pred_2 = _3628;
                        frontier_phi_77_pred_3 = _3627;
                        frontier_phi_77_pred_4 = _3626;
                        frontier_phi_77_pred_5 = _3625;
                    }
                    _3267 = frontier_phi_77_pred;
                    _3265 = frontier_phi_77_pred_1;
                    _3263 = frontier_phi_77_pred_2;
                    _3261 = frontier_phi_77_pred_3;
                    _3259 = frontier_phi_77_pred_4;
                    _3257 = frontier_phi_77_pred_5;
                    uint _3423 = _3422 + 1u;
                    if (_3423 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3416 = _3257;
                        _3417 = _3259;
                        _3418 = _3261;
                        _3419 = _3263;
                        _3420 = _3265;
                        _3421 = _3267;
                        _3422 = _3423;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3261;
                frontier_phi_58_59_ladder_1 = _3267;
                frontier_phi_58_59_ladder_2 = _3265;
                frontier_phi_58_59_ladder_3 = _3263;
                frontier_phi_58_59_ladder_4 = _3259;
                frontier_phi_58_59_ladder_5 = _3257;
            }
            else
            {
                frontier_phi_58_59_ladder = _3131;
                frontier_phi_58_59_ladder_1 = _3137;
                frontier_phi_58_59_ladder_2 = _3135;
                frontier_phi_58_59_ladder_3 = _3133;
                frontier_phi_58_59_ladder_4 = _3129;
                frontier_phi_58_59_ladder_5 = _3127;
            }
            _3256 = frontier_phi_58_59_ladder_5;
            _3258 = frontier_phi_58_59_ladder_4;
            _3260 = frontier_phi_58_59_ladder;
            _3262 = frontier_phi_58_59_ladder_3;
            _3264 = frontier_phi_58_59_ladder_2;
            _3266 = frontier_phi_58_59_ladder_1;
        }
        float _3271 = isnan(1.0) ? _1257 : (isnan(_1257) ? 1.0 : min(_1257, 1.0));
        _3010 = (_3271 * _3262) + _2446;
        _3012 = (_3271 * _3264) + _2448;
        _3014 = (_3271 * _3266) + _2450;
        _3016 = ((_3256 * _1242) * _3271) + _2791;
        _3018 = ((_3258 * _1244) * _3271) + _2793;
        _3020 = ((_3260 * _1245) * _3271) + _2795;
    }
    else
    {
        _3010 = _2446;
        _3012 = _2448;
        _3014 = _2450;
        _3016 = _2791;
        _3018 = _2793;
        _3020 = _2795;
    }
    uint _3026 = _1186 + uint(cbMatDynParam._m0[0u].w);
    float _3032 = cbInstanceData._m0[_3026].x * ((((cbMtdParam._m0[22u].x * _963.x) * cbMtdParam._m0[32u].x) * _984) + _755);
    float _3033 = cbInstanceData._m0[_3026].y * ((((cbMtdParam._m0[22u].y * _963.y) * cbMtdParam._m0[32u].x) * _984) + _756);
    float _3034 = cbInstanceData._m0[_3026].z * ((((cbMtdParam._m0[22u].z * _963.z) * cbMtdParam._m0[32u].x) * _984) + _757);
    float _5080 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
    float _5091 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
    float _5102 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _3051 = (((isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (_3010 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1257))) + ((_3016 + ((isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0))) * _2086)) * cbPerFrame._m0[3u].x)) + _3032;
    float _3053 = (_3033 + ((_3018 + ((isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))) * _2086)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0))) * (_3012 + ((isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0))) * _1257)));
    float _3055 = (_3034 + ((_3020 + ((isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0))) * _2086)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0))) * (_3014 + ((isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0))) * _1257)));
    float _3056 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
    float _3057 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
    float _3058 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
    float _3064 = cbMtdParam._m0[2u].x * _3032;
    float _3065 = cbMtdParam._m0[2u].y * _3033;
    float _3066 = cbMtdParam._m0[2u].z * _3034;
    float _5128 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3068 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
    uint _3069 = _1185 + 6u;
    float _3077 = _1130 / cbSceneParam._m0[86u].x;
    float _3078 = _1131 / cbSceneParam._m0[86u].y;
    vec4 _3092 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, (log2((isnan(cbSceneParam._m0[77u].w) ? _1073 : (isnan(_1073) ? cbSceneParam._m0[77u].w : min(_1073, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3094 = _3092.x;
    float _3095 = _3092.y;
    float _3096 = _3092.z;
    float _3097 = _3092.w;
    float _3189;
    float _3191;
    float _3193;
    float _3195;
    if (_1073 > cbSceneParam._m0[78u].w)
    {
        float _3152 = isnan(_1073) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1073 : min(cbSceneParam._m0[80u].w, _1073));
        float _3153 = _3152 / _1073;
        float _3164 = _3153 * _1103;
        float _3165 = _1104 * _3153;
        float _3166 = (-0.0) - _3165;
        float _3167 = _3153 * _1105;
        float _3169 = (cbSceneParam._m0[77u].w * _3166) / _3152;
        float _3170 = _3169 + cbSceneParam._m0[79u].w;
        float _3171 = cbSceneParam._m0[79u].w - _3165;
        float _3177 = sqrt(((_3164 * _3164) + (_3165 * _3165)) + (_3167 * _3167));
        float _3180 = (1.0 - (cbSceneParam._m0[77u].w / _3152)) * _3177;
        float _3185 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3187 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3373;
        if (abs((_3166 - _3169) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3373 = ((((_3170 > 0.0) ? exp2(_3185 * _3170) : (2.0 - exp2(_3187 * _3170))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3180;
        }
        else
        {
            float _3317 = 1.0 / cbSceneParam._m0[80u].x;
            float _3318 = isnan(_3171) ? _3170 : (isnan(_3170) ? _3171 : max(_3170, _3171));
            float _3319 = isnan(_3171) ? _3170 : (isnan(_3170) ? _3171 : min(_3170, _3171));
            float _3328 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : min(_3318, 0.0));
            float _3329 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : min(_3319, 0.0));
            _3373 = ((abs(_3177 / _3166) * cbSceneParam._m0[80u].y) * ((((_3328 - _3329) * 2.0) - ((exp2(_3185 * (isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0)))) - exp2(_3185 * (isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0))))) * _3317)) - ((exp2(_3187 * _3328) - exp2(_3187 * _3329)) * _3317))) + (_3180 * cbSceneParam._m0[80u].z);
        }
        vec4 _3375 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3077, _3078, 1.0), 0.0);
        float _3384 = exp2((_3373 * (-1.44269502162933349609375)) * (1.0 - _3375.w));
        float _3385 = log2(_3384);
        float _3401 = log2(_3097);
        _3189 = (exp2(_3401 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].x)) * _3375.x) / cbSceneParam._m0[78u].x)) + _3094;
        _3191 = (exp2(_3401 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].y)) * _3375.y) / cbSceneParam._m0[78u].y)) + _3095;
        _3193 = (exp2(_3401 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3385 * cbSceneParam._m0[78u].z)) * _3375.z) / cbSceneParam._m0[78u].z)) + _3096;
        _3195 = _3384 * _3097;
    }
    else
    {
        _3189 = _3094;
        _3191 = _3095;
        _3193 = _3096;
        _3195 = _3097;
    }
    bool _3411;
    vec4 _3205;
    vec4 _3227;
    float _3229;
    float _3233;
    float _3234;
    float _3235;
    float _3238;
    float _3241;
    float _3244;
    float _3245;
    bool _3255;
    for (;;)
    {
        _3205 = cbMatDynParam._m0[0u];
        float _3207 = roundEven(_3205.y);
        bool _3208 = _3207 == 3.0;
        float _3209 = log2(_3195);
        float _3213 = exp2(_3209 * cbSceneParam._m0[78u].x);
        float _3214 = exp2(_3209 * cbSceneParam._m0[78u].y);
        float _3215 = exp2(_3209 * cbSceneParam._m0[78u].z);
        float _3216 = _3213 * _3056;
        float _3217 = _3214 * _3057;
        float _3218 = _3215 * _3058;
        float _3225 = _1119 + (-0.5);
        _3227 = cbMtdParam._m0[1u];
        _3229 = _3227.y * _3225;
        float _3232 = (_3207 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3233 = _3232 * (_3208 ? _3216 : (_3216 + (cbSceneParam._m0[72u].w * _3189)));
        _3234 = _3232 * (_3208 ? _3217 : (_3217 + (cbSceneParam._m0[72u].w * _3191)));
        _3235 = _3232 * (_3208 ? _3218 : (_3218 + (cbSceneParam._m0[72u].w * _3193)));
        _3238 = ((_3064 * _3068) * _3213) * _3232;
        _3241 = ((_3065 * _3068) * _3214) * _3232;
        _3244 = ((_3066 * _3068) * _3215) * _3232;
        _3245 = _3225 * 0.999000012874603271484375;
        _3255 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3255)
        {
            if ((cbInstanceData._m0[_1185 + 7u].x + _3245) < 0.5)
            {
                _3411 = true;
                break;
            }
        }
        uint _3352 = _1186 + uint(_3205.w);
        if ((cbInstanceData._m0[_3352].w < 1.0) && ((cbInstanceData._m0[_3352].w + _3245) < 0.5))
        {
            _3411 = true;
            break;
        }
        if ((_3229 + 1.0) < _3227.x)
        {
            _3411 = true;
            break;
        }
        _3411 = false;
        break;
    }
    float _3616;
    if (_3411)
    {
        discard_state = true;
        _3616 = 0.0;
    }
    else
    {
        _3616 = cbInstanceData._m0[_3069].w;
    }
    SV_Target.x = _3233;
    SV_Target.y = _3234;
    SV_Target.z = _3235;
    SV_Target.w = _3616;
    SV_Target_1.x = _3238;
    SV_Target_1.y = _3241;
    SV_Target_1.z = _3244;
    SV_Target_1.w = cbInstanceData._m0[_3069].w;
    discard_exit();
}


