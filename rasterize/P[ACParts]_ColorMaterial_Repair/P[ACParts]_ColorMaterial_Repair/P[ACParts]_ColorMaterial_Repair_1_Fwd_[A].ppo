#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1469;
float _3885;
float _3886;
float _3887;
float _3888;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _281 = log2(0.0);
    float _283 = exp2(_281 * cbMtdParam._m0[31u].z);
    float _287 = _283 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _283);
    float _288 = _283 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _283);
    float _289 = _283 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _283);
    float _290 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _291 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _292 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _293 = isnan(1.0) ? _290 : (isnan(_290) ? 1.0 : min(_290, 1.0));
    float _295 = isnan(1.0) ? _291 : (isnan(_291) ? 1.0 : min(_291, 1.0));
    float _296 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    vec4 _312 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _312.z;
    float _317 = _312.w;
    float _318 = 1.0 - _317;
    float _325 = exp2(log2((1.0 - (_318 * _316)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    float _339 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_318 * _318) * _316))) * cbMtdParam._m0[34u].w);
    float _340 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    vec4 _354 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _357 = _354.y;
    float _360 = (_357 * ((isnan(1.0) ? _340 : (isnan(_340) ? 1.0 : min(_340, 1.0))) - _317)) + _317;
    vec4 _372 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _384 = (_354.x + (-0.02500000037252902984619140625)) * 8.0;
    float _386 = roundEven(_384);
    float _387 = cbMtdParam._m0[10u].x * _372.x;
    float _388 = cbMtdParam._m0[10u].y * _372.y;
    float _389 = cbMtdParam._m0[10u].z * _372.z;
    vec4 _401 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _421 = (((cbMtdParam._m0[9u].x * _401.x) - _387) * _360) + _387;
    float _422 = (((cbMtdParam._m0[9u].y * _401.y) - _388) * _360) + _388;
    float _423 = (((cbMtdParam._m0[9u].z * _401.z) - _389) * _360) + _389;
    vec4 _435 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _455 = (((cbMtdParam._m0[20u].x * _435.x) - _421) * _327) + _421;
    float _456 = (((cbMtdParam._m0[20u].y * _435.y) - _422) * _327) + _422;
    float _457 = (((cbMtdParam._m0[20u].z * _435.z) - _423) * _327) + _423;
    vec4 _470 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[24u].x;
    _202[0u] = cbMtdParam._m0[24u].y;
    _203[0u] = cbMtdParam._m0[24u].z;
    _201[1u] = cbMtdParam._m0[25u].x;
    _202[1u] = cbMtdParam._m0[25u].y;
    _203[1u] = cbMtdParam._m0[25u].z;
    _201[2u] = cbMtdParam._m0[26u].x;
    _202[2u] = cbMtdParam._m0[26u].y;
    _203[2u] = cbMtdParam._m0[26u].z;
    _201[3u] = cbMtdParam._m0[27u].x;
    _202[3u] = cbMtdParam._m0[27u].y;
    _203[3u] = cbMtdParam._m0[27u].z;
    _201[4u] = cbMtdParam._m0[28u].x;
    _202[4u] = cbMtdParam._m0[28u].y;
    _203[4u] = cbMtdParam._m0[28u].z;
    _201[5u] = cbMtdParam._m0[29u].x;
    _202[5u] = cbMtdParam._m0[29u].y;
    _203[5u] = cbMtdParam._m0[29u].z;
    float _553 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    uint _556 = uint(int(isnan(5.0) ? _553 : (isnan(_553) ? 5.0 : min(_553, 5.0))));
    float _563 = _201[_556] * _357;
    float _564 = _202[_556] * _357;
    float _565 = _203[_556] * _357;
    float _566 = _563 + ((_274.x * 4.5) * ((((cbMtdParam._m0[30u].x * _470.x) - _455) * _293) + _455));
    float _567 = _564 + ((_274.y * 4.5) * ((((cbMtdParam._m0[30u].y * _470.y) - _456) * _295) + _456));
    float _568 = _565 + ((_274.z * 4.5) * ((((cbMtdParam._m0[30u].z * _470.z) - _457) * _296) + _457));
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[35u].y;
    _197[0u] = cbMtdParam._m0[35u].z;
    _196[1u] = cbMtdParam._m0[36u].w;
    _197[1u] = cbMtdParam._m0[37u].x;
    _196[2u] = cbMtdParam._m0[37u].y;
    _197[2u] = cbMtdParam._m0[37u].z;
    _196[3u] = cbMtdParam._m0[37u].w;
    _197[3u] = cbMtdParam._m0[38u].x;
    _196[4u] = cbMtdParam._m0[38u].y;
    _197[4u] = cbMtdParam._m0[38u].z;
    float _599 = roundEven(5.0 - _384);
    float _600 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _601 = isnan(4.0) ? _600 : (isnan(_600) ? 4.0 : min(_600, 4.0));
    float _603 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    uint _605 = uint(int(isnan(4.0) ? _603 : (isnan(_603) ? 4.0 : min(_603, 4.0))));
    float _617 = ((cbMtdParam._m0[39u].z - _197[_605]) * _360) + _197[_605];
    float _625 = ((cbMtdParam._m0[40u].x - _617) * _327) + _617;
    float _630 = ((cbMtdParam._m0[40u].z - _625) * _293) + _625;
    vec4 _647 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _652 = _647.z + _196[_605];
    vec4 _664 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _672 = (((cbMtdParam._m0[39u].y - _652) + _664.z) * _360) + _652;
    vec4 _685 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _693 = (((cbMtdParam._m0[39u].w - _672) + _685.z) * _327) + _672;
    float _699 = ((((_316 * 2.0) * _693) - _693) * cbMtdParam._m0[33u].w) + _693;
    vec4 _712 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _720 = (((_712.z + cbMtdParam._m0[40u].y) - _699) * _296) + _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _778 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_747 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_751 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _793 = (-0.0) - ((_751 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _797 = (_751 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _798 = isnan(_797) ? _793 : (isnan(_793) ? _797 : min(_793, _797));
    float _3982 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _799 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _822 = ((_664.x - _649) * _360) + _649;
    float _823 = ((_664.y - _650) * _360) + _650;
    float _828 = ((_685.x - _822) * _327) + _822;
    float _829 = ((_685.y - _823) * _327) + _823;
    float _838 = ((((_712.x - _828) * _293) + _828) * 2.0) + (-1.0);
    float _839 = ((((_712.y - _829) * _295) + _829) * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _3993 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _845 = sqrt(1.0 - (isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))));
    float _848 = (cbMtdParam._m0[34u].x * ((_312.x * 2.0) + (-1.0))) + _838;
    float _849 = (cbMtdParam._m0[34u].x * ((_312.y * 2.0) + (-1.0))) + _839;
    float _852 = fma(_845, _243 * NORMAL.x, fma(_849, _250 * TANGENT.x, (_236 * _228) * _848));
    float _855 = fma(_845, _243 * NORMAL.y, fma(_849, _250 * TANGENT.y, (_236 * _229) * _848));
    float _858 = fma(_845, _243 * NORMAL.z, fma(_849, _250 * TANGENT.z, (_236 * _230) * _848));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _4004 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _866 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
    float _4015 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4026 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4037 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4048 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _870 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _916 = cbSceneParam._m0[71u].x - (_747 / _906);
    float _917 = cbSceneParam._m0[71u].y - (_751 / _906);
    float _918 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _906);
    float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
    float _923 = _916 * _922;
    float _924 = _917 * _922;
    float _925 = _918 * _922;
    vec4 _930 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _932 = _930.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1151 = sqrt(((_916 * _916) + (_917 * _917)) + (_918 * _918));
        float _1157 = (cbMatDynParam._m0[5u].x * _1151) + cbMatDynParam._m0[5u].y;
        float _4059 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1162 = (cbMatDynParam._m0[5u].z * _1151) + cbMatDynParam._m0[5u].w;
        float _4070 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) - _1158)) + _1158) < ((_932 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _943 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _944 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _946 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _948 = _946.w;
    float _966 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _969 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _972 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    vec4 _974 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _985 = (((_974.y - _866) + (_974.w * _866)) * cbMtdParam._m0[3u].x) + _866;
    uint _998 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1000 = _998 + 9u;
    uint _1001 = _1000 + uint(cbMatDynParam._m0[0u].w);
    float _1007 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0)))) * cbInstanceData._m0[_1001].x;
    float _1008 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) * cbInstanceData._m0[_1001].y;
    float _1009 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0)))) * cbInstanceData._m0[_1001].z;
    float _4081 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
    float _1010 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
    float _4092 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1011 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
    float _4103 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
    vec4 _1013 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1018 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1029 = (((_1018.x - _870) + (_1018.w * _870)) * cbMtdParam._m0[3u].x) + _870;
    float _1042 = (cbMtdParam._m0[3u].x * (((_1010 * _948) - _1010) + _1013.x)) + _1010;
    float _1043 = (cbMtdParam._m0[3u].x * (((_1011 * _948) - _1011) + _1013.y)) + _1011;
    float _1044 = (cbMtdParam._m0[3u].x * (((_1012 * _948) - _1012) + _1013.z)) + _1012;
    float _1045 = 1.0 - _1029;
    float _1046 = _1045 * _1042;
    float _1047 = _1045 * _1043;
    float _1048 = _1045 * _1044;
    float _1053 = (_1042 + (-0.039999999105930328369140625)) * _1029;
    float _1054 = (_1043 + (-0.039999999105930328369140625)) * _1029;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _1029;
    float _1056 = _1053 + 0.039999999105930328369140625;
    float _1058 = _1054 + 0.039999999105930328369140625;
    float _1059 = _1055 + 0.039999999105930328369140625;
    vec4 _1068 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _943, cbSceneParam._m0[86u].y * _944));
    float _1071 = _1068.x * TEXCOORD_5.w;
    float _1072 = dot(vec3(_863, _864, _865), vec3(_923, _924, _925));
    float _1075 = _1072 * 2.0;
    float _1079 = (_1075 * _863) - _923;
    float _1080 = (_1075 * _864) - _924;
    float _1081 = (_1075 * _865) - _925;
    float _1085 = abs(dot(vec3(_923, _924, _925), vec3(_863, _864, _865)));
    float _4114 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1087 = sqrt(_985);
    float _1098 = exp2((_1087 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1087 * 3.0));
    float _1104 = (1.0 - _1098) * ((_1087 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1105 = _1098 * _1087;
    float _1133 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1468;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1195 = fma(_1141, cbModelParam._m0[26u].z, fma(_1137, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1133));
        float _1199 = fma(_1141, cbModelParam._m0[27u].z, fma(_1137, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1133));
        float _1203 = fma(_1141, cbModelParam._m0[28u].z, fma(_1137, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1133));
        float _1227 = _1133 + _863;
        float _1228 = _1137 + _864;
        float _1229 = _1141 + _865;
        float _1239 = fma(_1229, cbModelParam._m0[26u].z, fma(_1228, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1227)) - _1195;
        float _1240 = fma(_1229, cbModelParam._m0[27u].z, fma(_1228, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1227)) - _1199;
        float _1241 = fma(_1229, cbModelParam._m0[28u].z, fma(_1228, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1227)) - _1203;
        float _1245 = inversesqrt(dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241)));
        float _1257 = ((_1245 * _1239) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1195 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1258 = ((_1245 * _1240) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1199 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1259 = ((_1245 * _1241) / cbModelParam._m0[34u].z) + ((((((_1203 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1257, _1258, _1259), 0.0);
        float _1296 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1262.x + (-0.5));
        float _1298 = _1296 * (_1262.y + (-0.5));
        float _1299 = _1296 * (_1262.z + (-0.5));
        float _1306 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1269.x + (-0.5));
        float _1308 = _1306 * (_1269.y + (-0.5));
        float _1309 = _1306 * (_1269.z + (-0.5));
        float _1316 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1317 = _1316 * (_1276.x + (-0.5));
        float _1318 = _1316 * (_1276.y + (-0.5));
        float _1319 = _1316 * (_1276.z + (-0.5));
        float _1326 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1327 = _1326 * (_1283.x + (-0.5));
        float _1328 = _1326 * (_1283.y + (-0.5));
        float _1329 = _1326 * (_1283.z + (-0.5));
        float _1330 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1331 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = _1297 * 0.5;
        float _1334 = _1307 * 0.5;
        float _1335 = _1317 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1350 = (dot(vec3(_863, _864, _865), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _4140 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1360 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1330 + 9.9999997473787516355514526367188e-06);
        float _4151 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _4162 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_1362 + 1.0))) + _1367) * _1330;
        float _1377 = _1298 * 0.5;
        float _1378 = _1308 * 0.5;
        float _1379 = _1318 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_863, _864, _865), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _4173 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1331 + 9.9999997473787516355514526367188e-06);
        float _4184 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _4195 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_1404 + 1.0))) + _1409) * _1331;
        float _1419 = _1299 * 0.5;
        float _1420 = _1309 * 0.5;
        float _1421 = _1319 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_863, _864, _865), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _4206 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4217 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _4228 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0))) * (_1446 + 1.0))) + _1451) * _1332;
        _1468 = _1299;
        _1470 = _1298;
        _1471 = _1297;
        _1472 = _1309;
        _1473 = _1308;
        _1474 = _1307;
        _1475 = _1319;
        _1476 = _1318;
        _1477 = _1317;
        _1478 = _1332;
        _1479 = _1331;
        _1480 = _1330;
        _1481 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1482 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _1469;
        _1470 = _1469;
        _1471 = _1469;
        _1472 = _1469;
        _1473 = _1469;
        _1474 = _1469;
        _1475 = _1469;
        _1476 = _1469;
        _1477 = _1469;
        _1478 = _1469;
        _1479 = _1469;
        _1480 = _1469;
        _1481 = 0.0;
        _1482 = 0.0;
        _1483 = 0.0;
    }
    float _1776;
    float _1777;
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1509 = fma(_1141, cbModelParam._m0[30u].z, fma(_1137, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1133));
        float _1513 = fma(_1141, cbModelParam._m0[31u].z, fma(_1137, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1133));
        float _1517 = fma(_1141, cbModelParam._m0[32u].z, fma(_1137, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1133));
        float _1539 = _1133 + _863;
        float _1540 = _1137 + _864;
        float _1541 = _1141 + _865;
        float _1551 = fma(_1541, cbModelParam._m0[30u].z, fma(_1540, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1539)) - _1509;
        float _1552 = fma(_1541, cbModelParam._m0[31u].z, fma(_1540, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1539)) - _1513;
        float _1553 = fma(_1541, cbModelParam._m0[32u].z, fma(_1540, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1539)) - _1517;
        float _1557 = inversesqrt(dot(vec3(_1551, _1552, _1553), vec3(_1551, _1552, _1553)));
        float _1569 = ((_1557 * _1551) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1509 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1570 = ((_1557 * _1552) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1513 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1571 = ((_1557 * _1553) / cbModelParam._m0[35u].z) + ((((((_1517 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1573 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1580 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1587 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        vec4 _1594 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1569, _1570, _1571), 0.0);
        float _1606 = exp2((_1573.w + (-0.5)) * 20.0) * 2.0;
        float _1607 = _1606 * (_1573.x + (-0.5));
        float _1608 = _1606 * (_1573.y + (-0.5));
        float _1609 = _1606 * (_1573.z + (-0.5));
        float _1616 = exp2((_1580.w + (-0.5)) * 20.0) * 2.0;
        float _1617 = _1616 * (_1580.x + (-0.5));
        float _1618 = _1616 * (_1580.y + (-0.5));
        float _1619 = _1616 * (_1580.z + (-0.5));
        float _1626 = exp2((_1587.w + (-0.5)) * 20.0) * 2.0;
        float _1627 = _1626 * (_1587.x + (-0.5));
        float _1628 = _1626 * (_1587.y + (-0.5));
        float _1629 = _1626 * (_1587.z + (-0.5));
        float _1636 = exp2((_1594.w + (-0.5)) * 20.0) * 2.0;
        float _1637 = _1636 * (_1594.x + (-0.5));
        float _1638 = _1636 * (_1594.y + (-0.5));
        float _1639 = _1636 * (_1594.z + (-0.5));
        float _1640 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1641 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = _1607 * 0.5;
        float _1644 = _1617 * 0.5;
        float _1645 = _1627 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_863, _864, _865), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1640 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4291 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1670 + 1.0))) + _1675) * _1640;
        float _1685 = _1608 * 0.5;
        float _1686 = _1618 * 0.5;
        float _1687 = _1628 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_863, _864, _865), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1641 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4324 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1712 + 1.0))) + _1717) * _1641;
        float _1727 = _1609 * 0.5;
        float _1728 = _1619 * 0.5;
        float _1729 = _1629 * 0.5;
        float _1730 = dot(vec3(_1727, _1728, _1729), vec3(_1727, _1728, _1729));
        float _1735 = (_1730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1730);
        float _1743 = (dot(vec3(_863, _864, _865), vec3(_1735 * _1727, _1735 * _1728, _1735 * _1729)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1752 = sqrt(((_1728 * _1728) + (_1727 * _1727)) + (_1729 * _1729)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1753 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1754 = _1753 * 2.0;
        float _1758 = (1.0 - _1753) / (_1753 + 1.0);
        float _4357 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1768 = ((((1.0 - _1759) * (_1754 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1754 + 1.0))) + _1759) * _1642;
        _1776 = _1609;
        _1777 = _1608;
        _1778 = _1607;
        _1779 = _1619;
        _1780 = _1618;
        _1781 = _1617;
        _1782 = _1629;
        _1783 = _1628;
        _1784 = _1627;
        _1785 = _1642;
        _1786 = _1641;
        _1787 = _1640;
        _1788 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1789 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0)));
    }
    else
    {
        _1776 = _1469;
        _1777 = _1469;
        _1778 = _1469;
        _1779 = _1469;
        _1780 = _1469;
        _1781 = _1469;
        _1782 = _1469;
        _1783 = _1469;
        _1784 = _1469;
        _1785 = _1469;
        _1786 = _1469;
        _1787 = _1469;
        _1788 = 0.0;
        _1789 = 0.0;
        _1790 = 0.0;
    }
    float _1800 = (cbModelParam._m0[1u].x * (_1788 - _1481)) + _1481;
    float _1801 = (cbModelParam._m0[1u].x * (_1789 - _1482)) + _1482;
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1483)) + _1483;
    float _1823 = fma(_1802, cbSceneParam._m0[89u].z, fma(_1801, cbSceneParam._m0[89u].y, _1800 * cbSceneParam._m0[89u].x));
    float _1826 = fma(_1802, cbSceneParam._m0[90u].z, fma(_1801, cbSceneParam._m0[90u].y, _1800 * cbSceneParam._m0[90u].x));
    float _1829 = fma(_1802, cbSceneParam._m0[91u].z, fma(_1801, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1800));
    float _1842 = _1079 * 0.5;
    float _1843 = _1080 * 0.5;
    float _1844 = _1081 * 0.5;
    float _1845 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1848 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1777, _1780, _1783, _1786));
    float _1851 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1776, _1779, _1782, _1785));
    float _1885;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1858 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1468, _1472, _1475, _1478));
        float _1862 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1470, _1473, _1476, _1479));
        float _1866 = dot(vec4(_1842, _1843, _1844, 1.0), vec4(_1471, _1474, _1477, _1480));
        float _1873 = dot(vec4(cbModelParam._m0[39u]), vec4(_1842, _1843, _1844, 1.0));
        _1885 = dot(vec3(isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0)), isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1873) ? 0.0 : (isnan(0.0) ? _1873 : max(0.0, _1873))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1885 = 1.0;
    }
    float _1896;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1887 = dot(vec4(cbModelParam._m0[40u]), vec4(_1842, _1843, _1844, 1.0));
        _1896 = dot(vec3(isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0)), isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0)), isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1887) ? 0.0 : (isnan(0.0) ? _1887 : max(0.0, _1887))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1896 = 1.0;
    }
    float _1900 = (_1896 * cbModelParam._m0[1u].x) + (_1885 * (1.0 - cbModelParam._m0[1u].x));
    float _1910 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _985);
    float _1911 = isnan(_1910) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1910 : min(cbModelParam._m0[25u].z, _1910));
    float _1993;
    float _1995;
    float _1997;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1960 = fma(_1141, cbModelParam._m0[13u].z, fma(_1137, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1133)) + cbModelParam._m0[13u].w;
        float _1964 = fma(_1141, cbModelParam._m0[14u].z, fma(_1137, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1133)) + cbModelParam._m0[14u].w;
        float _1968 = fma(_1141, cbModelParam._m0[15u].z, fma(_1137, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1133)) + cbModelParam._m0[15u].w;
        float _1971 = fma(_1081, cbModelParam._m0[13u].z, fma(_1080, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1079));
        float _1974 = fma(_1081, cbModelParam._m0[14u].z, fma(_1080, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1079));
        float _1977 = fma(_1081, cbModelParam._m0[15u].z, fma(_1080, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1079));
        float _2005;
        if (_1971 > 0.0)
        {
            _2005 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2005 = frontier_phi_17_15_ladder;
        }
        float _2210;
        if (_1974 > 0.0)
        {
            _2210 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2210 = frontier_phi_26_22_ladder;
        }
        float _2464;
        if (_1977 > 0.0)
        {
            _2464 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2464 = frontier_phi_38_33_ladder;
        }
        float _2466 = isnan(_2210) ? _2005 : (isnan(_2005) ? _2210 : min(_2005, _2210));
        float _2467 = isnan(_2464) ? _2466 : (isnan(_2466) ? _2464 : min(_2466, _2464));
        float _2471 = (_2467 * _1971) + _1960;
        float _2472 = (_2467 * _1974) + _1964;
        float _2473 = (_2467 * _1977) + _1968;
        float _2474 = _2467 * 9.9999997473787516355514526367188e-05;
        float _2476 = (-1.0) - _2474;
        float _2478 = _2474 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2473 > _2478) || ((_2473 < _2476) || ((_2472 > _2478) || ((_2472 < _2476) || ((_2471 < _2476) || (_2471 > _2478))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2473, cbModelParam._m0[9u].z, fma(_2472, cbModelParam._m0[9u].y, _2471 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2473, cbModelParam._m0[10u].z, fma(_2472, cbModelParam._m0[10u].y, _2471 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2473, cbModelParam._m0[11u].z, fma(_2472, cbModelParam._m0[11u].y, _2471 * cbModelParam._m0[11u].x))), _1911);
            frontier_phi_16_38_ladder = _2601.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2601.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2601.x * cbModelParam._m0[1u].y;
        }
        _1993 = frontier_phi_16_38_ladder_2;
        _1995 = frontier_phi_16_38_ladder_1;
        _1997 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1981 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1079, _1080, _1081), _1911);
        _1993 = _1981.x * cbModelParam._m0[1u].y;
        _1995 = _1981.y * cbModelParam._m0[1u].y;
        _1997 = _1981.z * cbModelParam._m0[1u].y;
    }
    float _2001 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _985);
    float _2002 = isnan(_2001) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2001 : min(cbModelParam._m0[25u].w, _2001));
    float _2094;
    float _2096;
    float _2098;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2058 = fma(_1141, cbModelParam._m0[21u].z, fma(_1137, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1133)) + cbModelParam._m0[21u].w;
        float _2062 = fma(_1141, cbModelParam._m0[22u].z, fma(_1137, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1133)) + cbModelParam._m0[22u].w;
        float _2066 = fma(_1141, cbModelParam._m0[23u].z, fma(_1137, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1133)) + cbModelParam._m0[23u].w;
        float _2069 = fma(_1081, cbModelParam._m0[21u].z, fma(_1080, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1079));
        float _2072 = fma(_1081, cbModelParam._m0[22u].z, fma(_1080, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1079));
        float _2075 = fma(_1081, cbModelParam._m0[23u].z, fma(_1080, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1079));
        float _2215;
        if (_2069 > 0.0)
        {
            _2215 = abs((1.0 - _2058) / _2069);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2058 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2215 = frontier_phi_28_24_ladder;
        }
        float _2491;
        if (_2072 > 0.0)
        {
            _2491 = abs((1.0 - _2062) / _2072);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2062 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2491 = frontier_phi_40_35_ladder;
        }
        float _2704;
        if (_2075 > 0.0)
        {
            _2704 = abs((1.0 - _2066) / _2075);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2066 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2704 = frontier_phi_49_46_ladder;
        }
        float _2706 = isnan(_2491) ? _2215 : (isnan(_2215) ? _2491 : min(_2215, _2491));
        float _2707 = isnan(_2704) ? _2706 : (isnan(_2706) ? _2704 : min(_2706, _2704));
        float _2711 = (_2707 * _2069) + _2058;
        float _2712 = (_2707 * _2072) + _2062;
        float _2713 = (_2707 * _2075) + _2066;
        float _2714 = _2707 * 9.9999997473787516355514526367188e-05;
        float _2715 = (-1.0) - _2714;
        float _2717 = _2714 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2713 > _2717) || ((_2713 < _2715) || ((_2712 > _2717) || ((_2712 < _2715) || ((_2711 < _2715) || (_2711 > _2717))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2941 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2713, cbModelParam._m0[17u].z, fma(_2712, cbModelParam._m0[17u].y, _2711 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2713, cbModelParam._m0[18u].z, fma(_2712, cbModelParam._m0[18u].y, _2711 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2713, cbModelParam._m0[19u].z, fma(_2712, cbModelParam._m0[19u].y, _2711 * cbModelParam._m0[19u].x))), _2002);
            frontier_phi_25_49_ladder = _2941.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2941.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2941.x * cbModelParam._m0[1u].z;
        }
        _2094 = frontier_phi_25_49_ladder_2;
        _2096 = frontier_phi_25_49_ladder_1;
        _2098 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2078 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1079, _1080, _1081), _2002);
        _2094 = _2078.x * cbModelParam._m0[1u].z;
        _2096 = _2078.y * cbModelParam._m0[1u].z;
        _2098 = _2078.z * cbModelParam._m0[1u].z;
    }
    float _2111 = (((_1104 * _1056) + _1105) * _1071) * ((cbModelParam._m0[1u].w * (_2094 - _1993)) + _1993);
    float _2113 = (((_1104 * _1058) + _1105) * _1071) * ((cbModelParam._m0[1u].w * (_2096 - _1995)) + _1995);
    float _2115 = (((_1104 * _1059) + _1105) * _1071) * ((cbModelParam._m0[1u].w * (_2098 - _1997)) + _1997);
    float _2118 = fma(_2115, cbSceneParam._m0[89u].z, fma(_2113, cbSceneParam._m0[89u].y, _2111 * cbSceneParam._m0[89u].x));
    float _2121 = fma(_2115, cbSceneParam._m0[90u].z, fma(_2113, cbSceneParam._m0[90u].y, _2111 * cbSceneParam._m0[90u].x));
    float _2124 = fma(_2115, cbSceneParam._m0[91u].z, fma(_2113, cbSceneParam._m0[91u].y, _2111 * cbSceneParam._m0[91u].x));
    uvec4 _2134 = floatBitsToUint(cbInstanceData._m0[_998 + 5u]);
    uint _2136 = _2134.x * 14u;
    uint _2137 = _2136 + 13u;
    float _2144 = _1071 + (-1.0);
    float _2149 = (cbLight._m0[_2137].x * _2144) + 1.0;
    float _2150 = (cbLight._m0[_2137].y * _2144) + 1.0;
    float _2151 = (cbLight._m0[_2137].z * _2144) + 1.0;
    float _2152 = (cbLight._m0[_2137].w * _2144) + 1.0;
    uint _2153 = _2136 + 5u;
    float _2159 = isnan(1.0) ? _2150 : (isnan(_2150) ? 1.0 : min(_2150, 1.0));
    uint _2163 = _2136 + 4u;
    float _2169 = isnan(1.0) ? _2149 : (isnan(_2149) ? 1.0 : min(_2149, 1.0));
    uint _2173 = _2136 | 1u;
    float _2184 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_863, _864, _865));
    float _2187 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_863, _864, _865));
    float _4493 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _4504 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2192 = (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * 0.3183098733425140380859375;
    float _2194 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * 0.3183098733425140380859375;
    float _2201 = ((cbLight._m0[_2153].x * _2159) * _2194) + ((cbLight._m0[_2163].x * _2169) * _2192);
    float _2202 = ((_2159 * cbLight._m0[_2153].y) * _2194) + ((_2169 * cbLight._m0[_2163].y) * _2192);
    float _2203 = ((_2159 * cbLight._m0[_2153].z) * _2194) + ((_2169 * cbLight._m0[_2163].z) * _2192);
    uvec4 _2207 = floatBitsToUint(cbLight._m0[_2136 + 12u]);
    bool _2209 = _2207.x == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2209)
    {
        _2220 = _2201;
        _2222 = _2202;
        _2224 = _2203;
    }
    else
    {
        uint _2228 = _2136 + 6u;
        float _2244 = (dot(vec3(cbLight._m0[_2136 + 2u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2245 = _2244 * _2244;
        float _4515 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
        float _2246 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2247 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2220 = (((cbLight._m0[_2228].x * 0.3183098733425140380859375) * _2246) * _2247) + _2201;
        _2222 = (((cbLight._m0[_2228].y * 0.3183098733425140380859375) * _2246) * _2247) + _2202;
        _2224 = (((cbLight._m0[_2228].z * 0.3183098733425140380859375) * _2246) * _2247) + _2203;
    }
    bool _2227 = _2207.y == 0u;
    float _2265;
    float _2267;
    float _2269;
    if (_2227)
    {
        _2265 = _2220;
        _2267 = _2222;
        _2269 = _2224;
    }
    else
    {
        uint _2435 = _2136 + 7u;
        float _2451 = (dot(vec3(cbLight._m0[_2136 + 3u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2452 = _2451 * _2451;
        float _4531 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
        float _2453 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2454 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2265 = (((cbLight._m0[_2435].x * 0.3183098733425140380859375) * _2453) * _2454) + _2220;
        _2267 = (((cbLight._m0[_2435].y * 0.3183098733425140380859375) * _2453) * _2454) + _2222;
        _2269 = (((cbLight._m0[_2435].z * 0.3183098733425140380859375) * _2453) * _2454) + _2224;
    }
    uint _2272 = _2136 + 8u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _985) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_2136].x + _923;
    float _2288 = cbLight._m0[_2136].y + _924;
    float _2289 = cbLight._m0[_2136].z + _925;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2136].xyz));
    float _4547 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
    float _4558 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _2301 = isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0));
    float _2302 = dot(vec3(_863, _864, _865), vec3(_2294, _2295, _2296));
    float _4569 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2305 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
    float _2306 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2294, _2295, _2296));
    float _4580 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
    float _2310 = _2286 * _2286;
    float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
    float _2322 = exp2(log2(1.0 - (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0)))) * 5.0);
    float _2323 = 0.959999978542327880859375 - _1053;
    float _2325 = 0.959999978542327880859375 - _1054;
    float _2326 = 0.959999978542327880859375 - _1055;
    float _2333 = 1.0 - _2286;
    float _2344 = (0.5 / (((_2301 * ((_2300 * _2333) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2333) + _2286) * _2300))) * _2300;
    float _4591 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
    float _2346 = (isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
    uint _2357 = _2136 + 9u;
    float _2368 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2173].w)) * _985) * 0.949999988079071044921875);
    float _2369 = _2368 * _2368;
    float _2370 = cbLight._m0[_2173].x + _923;
    float _2371 = cbLight._m0[_2173].y + _924;
    float _2372 = cbLight._m0[_2173].z + _925;
    float _2376 = inversesqrt(dot(vec3(_2370, _2371, _2372), vec3(_2370, _2371, _2372)));
    float _2377 = _2376 * _2370;
    float _2378 = _2376 * _2371;
    float _2379 = _2376 * _2372;
    float _2380 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2173].xyz));
    float _4602 = isnan(0.0) ? _2380 : (isnan(_2380) ? 0.0 : max(_2380, 0.0));
    float _2383 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
    float _2384 = dot(vec3(_863, _864, _865), vec3(_2377, _2378, _2379));
    float _4613 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _2387 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
    float _2388 = dot(vec3(cbLight._m0[_2173].xyz), vec3(_2377, _2378, _2379));
    float _4624 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = _2369 * _2369;
    float _2396 = ((_2387 * _2387) * (_2392 + (-1.0))) + 1.0;
    float _2403 = exp2(log2(1.0 - (isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0)))) * 5.0);
    float _2410 = 1.0 - _2369;
    float _2420 = (0.5 / (((_2301 * ((_2383 * _2410) + _2369)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2410) + _2369) * _2383))) * _2383;
    float _4635 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2422 = (isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0))) * (_2392 / ((_2396 * _2396) * 3.141590118408203125));
    float _2432 = (((((_2403 * _2323) + _1056) * cbLight._m0[_2357].x) * _2422) * _2159) + (((((_2322 * _2323) + _1056) * cbLight._m0[_2272].x) * _2346) * _2169);
    float _2433 = (((((_2403 * _2325) + _1058) * cbLight._m0[_2357].y) * _2422) * _2159) + (((((_2322 * _2325) + _1058) * cbLight._m0[_2272].y) * _2346) * _2169);
    float _2434 = (((((_2403 * _2326) + _1059) * cbLight._m0[_2357].z) * _2422) * _2159) + (((((_2322 * _2326) + _1059) * cbLight._m0[_2272].z) * _2346) * _2169);
    float _2496;
    float _2498;
    float _2500;
    if (_2209)
    {
        _2496 = _2432;
        _2498 = _2433;
        _2500 = _2434;
    }
    else
    {
        uint _2502 = _2136 + 2u;
        uint _2506 = _2136 + 10u;
        float _2520 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2502].w)) * _985) * 0.949999988079071044921875);
        float _2521 = _2520 * _2520;
        float _2522 = cbLight._m0[_2502].x + _923;
        float _2523 = cbLight._m0[_2502].y + _924;
        float _2524 = cbLight._m0[_2502].z + _925;
        float _2528 = inversesqrt(dot(vec3(_2522, _2523, _2524), vec3(_2522, _2523, _2524)));
        float _2529 = _2528 * _2522;
        float _2530 = _2528 * _2523;
        float _2531 = _2528 * _2524;
        float _2532 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2502].xyz));
        float _4646 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0));
        float _2535 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
        float _2536 = dot(vec3(_863, _864, _865), vec3(_2529, _2530, _2531));
        float _4657 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
        float _2540 = dot(vec3(cbLight._m0[_2502].xyz), vec3(_2529, _2530, _2531));
        float _4668 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2544 = _2521 * _2521;
        float _2548 = ((_2539 * _2539) * (_2544 + (-1.0))) + 1.0;
        float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4668 : (isnan(_4668) ? 1.0 : min(_4668, 1.0)))) * 5.0);
        float _2562 = 1.0 - _2521;
        float _2572 = (0.5 / (((_2301 * ((_2535 * _2562) + _2521)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2562) + _2521) * _2535))) * _2535;
        float _4679 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4679 : (isnan(_4679) ? 1.0 : min(_4679, 1.0))) * (_2544 / ((_2548 * _2548) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
        _2496 = (((((_2555 * _2323) + _1056) * cbLight._m0[_2506].x) * _2574) * _2575) + _2432;
        _2498 = (((((_2555 * _2325) + _1058) * cbLight._m0[_2506].y) * _2574) * _2575) + _2433;
        _2500 = (((((_2555 * _2326) + _1059) * cbLight._m0[_2506].z) * _2574) * _2575) + _2434;
    }
    float _2610;
    float _2612;
    float _2614;
    if (_2227)
    {
        _2610 = _2496;
        _2612 = _2498;
        _2614 = _2500;
    }
    else
    {
        uint _2621 = _2136 + 3u;
        uint _2625 = _2136 + 11u;
        float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _985) * 0.949999988079071044921875);
        float _2640 = _2639 * _2639;
        float _2641 = cbLight._m0[_2621].x + _923;
        float _2642 = cbLight._m0[_2621].y + _924;
        float _2643 = cbLight._m0[_2621].z + _925;
        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
        float _2648 = _2647 * _2641;
        float _2649 = _2647 * _2642;
        float _2650 = _2647 * _2643;
        float _2651 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2621].xyz));
        float _4695 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
        float _2655 = dot(vec3(_863, _864, _865), vec3(_2648, _2649, _2650));
        float _4706 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
        float _2659 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2648, _2649, _2650));
        float _4717 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2663 = _2640 * _2640;
        float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
        float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) * 5.0);
        float _2681 = 1.0 - _2640;
        float _2691 = (0.5 / (((_2301 * ((_2654 * _2681) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2301 * _2681) + _2640) * _2654))) * _2654;
        float _4728 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
        _2610 = (((((_2674 * _2323) + _1056) * cbLight._m0[_2625].x) * _2693) * _2694) + _2496;
        _2612 = (((((_2674 * _2325) + _1058) * cbLight._m0[_2625].y) * _2693) * _2694) + _2498;
        _2614 = (((((_2674 * _2326) + _1059) * cbLight._m0[_2625].z) * _2693) * _2694) + _2500;
    }
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    if (_2134.y == 0u)
    {
        float _2769 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2770 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2769;
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2769;
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2769;
        uvec4 _2784 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2785 = _2784.x;
        uint _2796 = uint((float(_2784.y) * floor(float(uint(cbSceneParam._m0[85u].y * _944) / _2785))) + floor(float(uint(cbSceneParam._m0[85u].x * _943) / _2785)));
        float _2806 = (log2(_2772 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2807 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        uint _2810 = uint(isnan(14.0) ? _2807 : (isnan(_2807) ? 14.0 : min(_2807, 14.0)));
        uvec4 _2815 = texelFetch(g_lightClusterGridBuffer, int(((_2810 << 2u) + (_2796 << 6u)) >> 2u));
        uint _2816 = _2815.x;
        uint _2817 = _2784.z;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        if (((((1u << ((_2817 >> 4u) & 15u)) + 4294967295u) & _2816) == 0u) || ((_2817 & 240u) == 0u))
        {
            _2946 = 0.0;
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
        }
        else
        {
            float _2947;
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _3107 = 0.0;
            float _3108 = 0.0;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            uint _3113 = 0u;
            uint _3122;
            bool _3123;
            for (;;)
            {
                _3122 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3113 << 2u)) >> 2u)).x;
                _3123 = _3122 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3123)
                {
                    frontier_phi_66_pred = _3107;
                    frontier_phi_66_pred_1 = _3112;
                    frontier_phi_66_pred_2 = _3111;
                    frontier_phi_66_pred_3 = _3110;
                    frontier_phi_66_pred_4 = _3109;
                    frontier_phi_66_pred_5 = _3108;
                }
                else
                {
                    float _3252;
                    float _3253;
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    uint _3258;
                    _3252 = _3107;
                    _3253 = _3108;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3122;
                    float _3179;
                    float _3180;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    for (;;)
                    {
                        uint _3262 = uint(findLSB(_3258)) + (_3113 << 5u);
                        uint _3259 = (_3258 + 4294967295u) & _3258;
                        uint _3264 = _3262 * 48u;
                        vec4 _3278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3264)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3264 + 3u)).x));
                        uint _3284 = (_3262 * 48u) + 4u;
                        vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3303 = (_3262 * 48u) + 8u;
                        vec3 _3314 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x));
                        float _3318 = _3278.x - _2770;
                        float _3319 = _3278.y - _2771;
                        float _3320 = _3278.z - _2772;
                        float _3321 = dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320));
                        float _3324 = inversesqrt(_3321);
                        float _3325 = _3324 * _3318;
                        float _3326 = _3324 * _3319;
                        float _3327 = _3324 * _3320;
                        float _3328 = dot(vec3(_966, _969, _972), vec3(_3325, _3326, _3327));
                        float _3333 = 1.0 - (_3321 * _3278.w);
                        float _4754 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                        float _3334 = isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0));
                        float _3335 = sqrt(_3321) * _3297.w;
                        float _3338 = 1.39999997615814208984375 / (_3335 + 1.39999997615814208984375);
                        float _3339 = _3338 * _3338;
                        float _3342 = ((1.0 - _3339) * _3328) + _3339;
                        float _3345 = _3335 * _3335;
                        float _3349 = ((isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0))) * _3334) / ((_3345 * 0.699999988079071044921875) + 1.0);
                        float _3353 = (-0.0) - _2770;
                        float _3354 = (-0.0) - _2771;
                        float _3355 = (-0.0) - _2772;
                        float _3359 = inversesqrt(dot(vec3(_3353, _3354, _3355), vec3(_3353, _3354, _3355)));
                        float _3360 = _3359 * _3353;
                        float _3361 = _3359 * _3354;
                        float _3362 = _3359 * _3355;
                        float _3370 = exp2(log2(1.0 / ((_3345 * 3.5) + 5.0)) * 0.25);
                        float _3371 = 1.0 - _1087;
                        float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                        float _3379 = _3378 * _3378;
                        float _3380 = _3379 * _3379;
                        float _3381 = _3360 + _3325;
                        float _3382 = _3361 + _3326;
                        float _3383 = _3362 + _3327;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3391 = dot(vec3(_966, _969, _972), vec3(_3360, _3361, _3362));
                        float _4770 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                        float _3394 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
                        float _3395 = dot(vec3(_966, _969, _972), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                        float _4781 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                        float _3398 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
                        float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                        float _3403 = _3338 * _3379;
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3328) + _3404;
                        float _4792 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3408 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
                        float _3409 = 1.0 - _3379;
                        float _3419 = (0.5 / (((_3408 * ((_3394 * _3409) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3408 * _3409) + _3379) * _3394))) * _3408;
                        float _4803 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3430 = (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0)))) / ((_3402 * _3402) * ((_3345 * 2.1991131305694580078125) + 3.141590118408203125))) * _3334;
                        _3182 = (_3349 * _3297.x) + _3255;
                        _3183 = (_3349 * _3297.y) + _3256;
                        _3184 = (_3349 * _3297.z) + _3257;
                        _3179 = (_3430 * _3314.x) + _3252;
                        _3180 = (_3430 * _3314.y) + _3253;
                        _3181 = (_3430 * _3314.z) + _3254;
                        if (_3259 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3252 = _3179;
                            _3253 = _3180;
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3259;
                        }
                    }
                    frontier_phi_66_pred = _3179;
                    frontier_phi_66_pred_1 = _3184;
                    frontier_phi_66_pred_2 = _3183;
                    frontier_phi_66_pred_3 = _3182;
                    frontier_phi_66_pred_4 = _3181;
                    frontier_phi_66_pred_5 = _3180;
                }
                _2947 = frontier_phi_66_pred;
                _2957 = frontier_phi_66_pred_1;
                _2955 = frontier_phi_66_pred_2;
                _2953 = frontier_phi_66_pred_3;
                _2951 = frontier_phi_66_pred_4;
                _2949 = frontier_phi_66_pred_5;
                uint _3114 = _3113 + 1u;
                if (_3114 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3107 = _2947;
                    _3108 = _2949;
                    _3109 = _2951;
                    _3110 = _2953;
                    _3111 = _2955;
                    _3112 = _2957;
                    _3113 = _3114;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2946 = _2947;
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
        }
        uvec4 _2960 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2961 = _2960.z;
        uint _2963 = (_2961 >> 8u) & 15u;
        float _3075;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        if (((4294967295u << _2963) & _2816) == 0u)
        {
            _3075 = _2946;
            _3077 = _2948;
            _3079 = _2950;
            _3081 = _2952;
            _3083 = _2954;
            _3085 = _2956;
        }
        else
        {
            float _3100 = inversesqrt(dot(vec3(_2770, _2771, _2772), vec3(_2770, _2771, _2772)));
            float _3101 = _3100 * _2770;
            float _3102 = _3100 * _2771;
            float _3103 = _3100 * _2772;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2963 < ((_2961 >> 12u) & 15u))
            {
                float _3076;
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3235 = _2946;
                float _3236 = _2948;
                float _3237 = _2950;
                float _3238 = _2952;
                float _3239 = _2954;
                float _3240 = _2956;
                uint _3241 = _2963;
                uint _3250;
                bool _3251;
                for (;;)
                {
                    _3250 = texelFetch(g_lightClassification, int((((_2810 << 5u) + (_2796 << 9u)) + (_3241 << 2u)) >> 2u)).x;
                    _3251 = _3250 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3251)
                    {
                        frontier_phi_77_pred = _3240;
                        frontier_phi_77_pred_1 = _3239;
                        frontier_phi_77_pred_2 = _3238;
                        frontier_phi_77_pred_3 = _3237;
                        frontier_phi_77_pred_4 = _3236;
                        frontier_phi_77_pred_5 = _3235;
                    }
                    else
                    {
                        float _3444;
                        float _3445;
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3738;
                        float _3739;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3457 = _3235;
                        float _3458 = _3236;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        uint _3463 = _3250;
                        uint _3464;
                        vec4 _3489;
                        float _3490;
                        vec4 _3505;
                        vec3 _3517;
                        vec4 _3533;
                        vec4 _3548;
                        float _3594;
                        bool _3595;
                        for (;;)
                        {
                            uint _3474 = ((_3241 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3463));
                            _3464 = (_3463 + 4294967295u) & _3463;
                            uint _3476 = _3474 * 40u;
                            _3489 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3476)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3476 + 3u)).x));
                            _3490 = _3489.w;
                            uint _3492 = (_3474 * 40u) + 4u;
                            _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3507 = (_3474 * 40u) + 8u;
                            _3517 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3507)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3507 + 2u)).x));
                            uint _3520 = (_3474 * 40u) + 16u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3474 * 40u) + 20u;
                            _3548 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 3u)).x));
                            uint _3550 = (_3474 * 40u) + 24u;
                            vec4 _3563 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3550)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3550 + 3u)).x));
                            uint _3569 = (_3474 * 40u) + 28u;
                            vec4 _3582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3569 + 3u)).x));
                            _3594 = fma(_2772, _3582.z, fma(_2771, _3582.y, _3582.x * _2770)) + _3582.w;
                            _3595 = !((fma(_2772, _3563.z, fma(_2771, _3563.y, _3563.x * _2770)) + _3563.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3595)
                            {
                                float _3622 = _3489.x - _2770;
                                float _3623 = _3489.y - _2771;
                                float _3624 = _3489.z - _2772;
                                float _3625 = dot(vec3(_3622, _3623, _3624), vec3(_3622, _3623, _3624));
                                float _3628 = inversesqrt(_3625);
                                float _3629 = _3628 * _3622;
                                float _3630 = _3628 * _3623;
                                float _3631 = _3628 * _3624;
                                float _3635 = 1.0 - (_3625 / (_3490 * _3490));
                                float _4814 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3636 = isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0));
                                float _3640 = sqrt(_3625) * _3505.w;
                                float _3642 = 1.39999997615814208984375 / (_3640 + 1.39999997615814208984375);
                                float _3643 = _3642 * _3642;
                                float _3646 = ((1.0 - _3643) * dot(vec3(_3629, _3630, _3631), vec3(_966, _969, _972))) + _3643;
                                float _3649 = _3640 * _3640;
                                float _3653 = (fma(_2772, _3533.z, fma(_2771, _3533.y, _3533.x * _2770)) + _3533.w) / _3594;
                                float _3654 = (fma(_2772, _3548.z, fma(_2771, _3548.y, _3548.x * _2770)) + _3548.w) / _3594;
                                float _3658 = 1.0 - dot(vec2(_3653, _3654), vec2(_3653, _3654));
                                float _4830 = isnan(0.0) ? _3658 : (isnan(_3658) ? 0.0 : max(_3658, 0.0));
                                float _3659 = isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0));
                                float _3660 = _3659 * (((isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0))) * _3636) / ((_3649 * 0.699999988079071044921875) + 1.0));
                                float _3672 = exp2(log2(1.0 / ((_3649 * 3.5) + 5.0)) * 0.25);
                                float _3673 = 1.0 - _1087;
                                float _3680 = sqrt(1.0 - ((1.0 - (_3673 * _3673)) * (1.0 - (_3672 * _3672))));
                                float _3681 = _3680 * _3680;
                                float _3682 = _3681 * _3681;
                                float _3683 = _3629 - _3101;
                                float _3684 = _3630 - _3102;
                                float _3685 = _3631 - _3103;
                                float _3689 = inversesqrt(dot(vec3(_3683, _3684, _3685), vec3(_3683, _3684, _3685)));
                                float _3693 = dot(vec3(_966, _969, _972), vec3((-0.0) - _3101, (-0.0) - _3102, (-0.0) - _3103));
                                float _4841 = isnan(0.0) ? _3693 : (isnan(_3693) ? 0.0 : max(_3693, 0.0));
                                float _3696 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
                                float _3697 = dot(vec3(_966, _969, _972), vec3(_3689 * _3683, _3689 * _3684, _3689 * _3685));
                                float _4852 = isnan(0.0) ? _3697 : (isnan(_3697) ? 0.0 : max(_3697, 0.0));
                                float _3700 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
                                float _3704 = ((_3700 * _3700) * (_3682 + (-1.0))) + 1.0;
                                float _3705 = _3642 * _3681;
                                float _3706 = _3705 * _3705;
                                float _3712 = ((1.0 - _3706) * dot(vec3(_966, _969, _972), vec3(_3629, _3630, _3631))) + _3706;
                                float _4863 = isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0));
                                float _3713 = isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0));
                                float _3714 = 1.0 - _3681;
                                float _3724 = (0.5 / (((_3713 * ((_3696 * _3714) + _3681)) + 9.9999999392252902907785028219223e-09) + (((_3713 * _3714) + _3681) * _3696))) * _3713;
                                float _4874 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3734 = (_3659 * _3636) * (((_3682 * 3.1415927410125732421875) * (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0)))) / ((_3704 * _3704) * ((_3649 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3660 * _3505.y;
                                frontier_phi_83_pred_1 = _3660 * _3505.x;
                                frontier_phi_83_pred_2 = _3734 * _3517.z;
                                frontier_phi_83_pred_3 = _3734 * _3517.y;
                                frontier_phi_83_pred_4 = _3734 * _3517.x;
                                frontier_phi_83_pred_5 = _3660 * _3505.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3742 = frontier_phi_83_pred;
                            _3741 = frontier_phi_83_pred_1;
                            _3740 = frontier_phi_83_pred_2;
                            _3739 = frontier_phi_83_pred_3;
                            _3738 = frontier_phi_83_pred_4;
                            _3743 = frontier_phi_83_pred_5;
                            _3447 = _3741 + _3460;
                            _3448 = _3742 + _3461;
                            _3449 = _3743 + _3462;
                            _3444 = _3738 + _3457;
                            _3445 = _3739 + _3458;
                            _3446 = _3740 + _3459;
                            if (_3464 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3457 = _3444;
                                _3458 = _3445;
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3464;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3449;
                        frontier_phi_77_pred_1 = _3448;
                        frontier_phi_77_pred_2 = _3447;
                        frontier_phi_77_pred_3 = _3446;
                        frontier_phi_77_pred_4 = _3445;
                        frontier_phi_77_pred_5 = _3444;
                    }
                    _3086 = frontier_phi_77_pred;
                    _3084 = frontier_phi_77_pred_1;
                    _3082 = frontier_phi_77_pred_2;
                    _3080 = frontier_phi_77_pred_3;
                    _3078 = frontier_phi_77_pred_4;
                    _3076 = frontier_phi_77_pred_5;
                    uint _3242 = _3241 + 1u;
                    if (_3242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3235 = _3076;
                        _3236 = _3078;
                        _3237 = _3080;
                        _3238 = _3082;
                        _3239 = _3084;
                        _3240 = _3086;
                        _3241 = _3242;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3080;
                frontier_phi_58_59_ladder_1 = _3086;
                frontier_phi_58_59_ladder_2 = _3084;
                frontier_phi_58_59_ladder_3 = _3082;
                frontier_phi_58_59_ladder_4 = _3078;
                frontier_phi_58_59_ladder_5 = _3076;
            }
            else
            {
                frontier_phi_58_59_ladder = _2950;
                frontier_phi_58_59_ladder_1 = _2956;
                frontier_phi_58_59_ladder_2 = _2954;
                frontier_phi_58_59_ladder_3 = _2952;
                frontier_phi_58_59_ladder_4 = _2948;
                frontier_phi_58_59_ladder_5 = _2946;
            }
            _3075 = frontier_phi_58_59_ladder_5;
            _3077 = frontier_phi_58_59_ladder_4;
            _3079 = frontier_phi_58_59_ladder;
            _3081 = frontier_phi_58_59_ladder_3;
            _3083 = frontier_phi_58_59_ladder_2;
            _3085 = frontier_phi_58_59_ladder_1;
        }
        float _3090 = isnan(1.0) ? _1071 : (isnan(_1071) ? 1.0 : min(_1071, 1.0));
        _2829 = (_3090 * _3081) + _2265;
        _2831 = (_3090 * _3083) + _2267;
        _2833 = (_3090 * _3085) + _2269;
        _2835 = ((_3075 * _1056) * _3090) + _2610;
        _2837 = ((_3077 * _1058) * _3090) + _2612;
        _2839 = ((_3079 * _1059) * _3090) + _2614;
    }
    else
    {
        _2829 = _2265;
        _2831 = _2267;
        _2833 = _2269;
        _2835 = _2610;
        _2837 = _2612;
        _2839 = _2614;
    }
    uint _2845 = _1000 + uint(cbMatDynParam._m0[0u].w);
    float _2851 = cbInstanceData._m0[_2845].x * ((((cbMtdParam._m0[22u].x * _778.x) * cbMtdParam._m0[32u].x) * _799) + _563);
    float _2852 = cbInstanceData._m0[_2845].y * ((((cbMtdParam._m0[22u].y * _778.y) * cbMtdParam._m0[32u].x) * _799) + _564);
    float _2853 = cbInstanceData._m0[_2845].z * ((((cbMtdParam._m0[22u].z * _778.z) * cbMtdParam._m0[32u].x) * _799) + _565);
    float _4890 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
    float _4901 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
    float _4912 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _2870 = (((isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (_2829 + ((isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0))) * _1071))) + ((_2835 + ((isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0))) * _1900)) * cbPerFrame._m0[3u].x)) + _2851;
    float _2872 = (_2852 + ((_2837 + ((isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0))) * _1900)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0))) * (_2831 + ((isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0))) * _1071)));
    float _2874 = (_2853 + ((_2839 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1900)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2833 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1071)));
    float _2875 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
    float _2876 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
    float _2877 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
    float _2883 = cbMtdParam._m0[2u].x * _2851;
    float _2884 = cbMtdParam._m0[2u].y * _2852;
    float _2885 = cbMtdParam._m0[2u].z * _2853;
    float _4938 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2887 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
    uint _2888 = _998 + 6u;
    float _2896 = _943 / cbSceneParam._m0[86u].x;
    float _2897 = _944 / cbSceneParam._m0[86u].y;
    vec4 _2911 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2896, _2897, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2913 = _2911.x;
    float _2914 = _2911.y;
    float _2915 = _2911.z;
    float _2916 = _2911.w;
    float _3008;
    float _3010;
    float _3012;
    float _3014;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _2971 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _2972 = _2971 / _886;
        float _2983 = _2972 * _916;
        float _2984 = _917 * _2972;
        float _2985 = (-0.0) - _2984;
        float _2986 = _2972 * _918;
        float _2988 = (cbSceneParam._m0[77u].w * _2985) / _2971;
        float _2989 = _2988 + cbSceneParam._m0[79u].w;
        float _2990 = cbSceneParam._m0[79u].w - _2984;
        float _2996 = sqrt(((_2983 * _2983) + (_2984 * _2984)) + (_2986 * _2986));
        float _2999 = (1.0 - (cbSceneParam._m0[77u].w / _2971)) * _2996;
        float _3004 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3006 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3192;
        if (abs((_2985 - _2988) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3192 = ((((_2989 > 0.0) ? exp2(_3004 * _2989) : (2.0 - exp2(_3006 * _2989))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2999;
        }
        else
        {
            float _3136 = 1.0 / cbSceneParam._m0[80u].x;
            float _3137 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : max(_2989, _2990));
            float _3138 = isnan(_2990) ? _2989 : (isnan(_2989) ? _2990 : min(_2989, _2990));
            float _3147 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : min(_3137, 0.0));
            float _3148 = isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : min(_3138, 0.0));
            _3192 = ((abs(_2996 / _2985) * cbSceneParam._m0[80u].y) * ((((_3147 - _3148) * 2.0) - ((exp2(_3004 * (isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0)))) - exp2(_3004 * (isnan(0.0) ? _3138 : (isnan(_3138) ? 0.0 : max(_3138, 0.0))))) * _3136)) - ((exp2(_3006 * _3147) - exp2(_3006 * _3148)) * _3136))) + (_2999 * cbSceneParam._m0[80u].z);
        }
        vec4 _3194 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2896, _2897, 1.0), 0.0);
        float _3203 = exp2((_3192 * (-1.44269502162933349609375)) * (1.0 - _3194.w));
        float _3204 = log2(_3203);
        float _3220 = log2(_2916);
        _3008 = (exp2(_3220 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].x)) * _3194.x) / cbSceneParam._m0[78u].x)) + _2913;
        _3010 = (exp2(_3220 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].y)) * _3194.y) / cbSceneParam._m0[78u].y)) + _2914;
        _3012 = (exp2(_3220 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3204 * cbSceneParam._m0[78u].z)) * _3194.z) / cbSceneParam._m0[78u].z)) + _2915;
        _3014 = _3203 * _2916;
    }
    else
    {
        _3008 = _2913;
        _3010 = _2914;
        _3012 = _2915;
        _3014 = _2916;
    }
    bool _3230;
    vec4 _3024;
    vec4 _3046;
    float _3048;
    float _3052;
    float _3053;
    float _3054;
    float _3057;
    float _3060;
    float _3063;
    float _3064;
    bool _3074;
    for (;;)
    {
        _3024 = cbMatDynParam._m0[0u];
        float _3026 = roundEven(_3024.y);
        bool _3027 = _3026 == 3.0;
        float _3028 = log2(_3014);
        float _3032 = exp2(_3028 * cbSceneParam._m0[78u].x);
        float _3033 = exp2(_3028 * cbSceneParam._m0[78u].y);
        float _3034 = exp2(_3028 * cbSceneParam._m0[78u].z);
        float _3035 = _3032 * _2875;
        float _3036 = _3033 * _2876;
        float _3037 = _3034 * _2877;
        float _3044 = _932 + (-0.5);
        _3046 = cbMtdParam._m0[1u];
        _3048 = _3046.y * _3044;
        float _3051 = (_3026 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3052 = _3051 * (_3027 ? _3035 : (_3035 + (cbSceneParam._m0[72u].w * _3008)));
        _3053 = _3051 * (_3027 ? _3036 : (_3036 + (cbSceneParam._m0[72u].w * _3010)));
        _3054 = _3051 * (_3027 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3012)));
        _3057 = ((_2883 * _2887) * _3032) * _3051;
        _3060 = ((_2884 * _2887) * _3033) * _3051;
        _3063 = ((_2885 * _2887) * _3034) * _3051;
        _3064 = _3044 * 0.999000012874603271484375;
        _3074 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3074)
        {
            if ((cbInstanceData._m0[_998 + 7u].x + _3064) < 0.5)
            {
                _3230 = true;
                break;
            }
        }
        uint _3171 = _1000 + uint(_3024.w);
        if ((cbInstanceData._m0[_3171].w < 1.0) && ((cbInstanceData._m0[_3171].w + _3064) < 0.5))
        {
            _3230 = true;
            break;
        }
        if ((_3048 + 1.0) < _3046.x)
        {
            _3230 = true;
            break;
        }
        _3230 = false;
        break;
    }
    float _3435;
    if (_3230)
    {
        discard_state = true;
        _3435 = 0.0;
    }
    else
    {
        _3435 = cbInstanceData._m0[_2888].w;
    }
    SV_Target.x = _3052;
    SV_Target.y = _3053;
    SV_Target.z = _3054;
    SV_Target.w = _3435;
    SV_Target_1.x = _3057;
    SV_Target_1.y = _3060;
    SV_Target_1.z = _3063;
    SV_Target_1.w = cbInstanceData._m0[_2888].w;
    discard_exit();
}


