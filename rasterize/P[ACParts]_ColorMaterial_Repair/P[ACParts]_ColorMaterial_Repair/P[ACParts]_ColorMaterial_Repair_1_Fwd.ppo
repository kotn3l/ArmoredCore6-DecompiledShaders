#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1424;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _224 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _225 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _226 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _232 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _239 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _246 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _270 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _277 = log2(0.0);
    float _279 = exp2(_277 * cbMtdParam._m0[31u].z);
    float _283 = _279 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _279);
    float _284 = _279 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _279);
    float _285 = _279 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _279);
    float _286 = isnan(0.0) ? _283 : (isnan(_283) ? 0.0 : max(_283, 0.0));
    float _287 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _288 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _289 = isnan(1.0) ? _286 : (isnan(_286) ? 1.0 : min(_286, 1.0));
    float _291 = isnan(1.0) ? _287 : (isnan(_287) ? 1.0 : min(_287, 1.0));
    float _292 = isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0));
    vec4 _308 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _312 = _308.z;
    float _313 = _308.w;
    float _314 = 1.0 - _313;
    float _321 = exp2(log2((1.0 - (_314 * _312)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    float _335 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_314 * _314) * _312))) * cbMtdParam._m0[34u].w);
    float _336 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    vec4 _350 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _353 = _350.y;
    float _356 = (_353 * ((isnan(1.0) ? _336 : (isnan(_336) ? 1.0 : min(_336, 1.0))) - _313)) + _313;
    vec4 _368 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _380 = (_350.x + (-0.02500000037252902984619140625)) * 8.0;
    float _382 = roundEven(_380);
    float _383 = cbMtdParam._m0[10u].x * _368.x;
    float _384 = cbMtdParam._m0[10u].y * _368.y;
    float _385 = cbMtdParam._m0[10u].z * _368.z;
    vec4 _397 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _417 = (((cbMtdParam._m0[9u].x * _397.x) - _383) * _356) + _383;
    float _418 = (((cbMtdParam._m0[9u].y * _397.y) - _384) * _356) + _384;
    float _419 = (((cbMtdParam._m0[9u].z * _397.z) - _385) * _356) + _385;
    vec4 _431 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _451 = (((cbMtdParam._m0[20u].x * _431.x) - _417) * _323) + _417;
    float _452 = (((cbMtdParam._m0[20u].y * _431.y) - _418) * _323) + _418;
    float _453 = (((cbMtdParam._m0[20u].z * _431.z) - _419) * _323) + _419;
    vec4 _466 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _197[6];
    float _198[6];
    float _199[6];
    _197[0u] = cbMtdParam._m0[24u].x;
    _198[0u] = cbMtdParam._m0[24u].y;
    _199[0u] = cbMtdParam._m0[24u].z;
    _197[1u] = cbMtdParam._m0[25u].x;
    _198[1u] = cbMtdParam._m0[25u].y;
    _199[1u] = cbMtdParam._m0[25u].z;
    _197[2u] = cbMtdParam._m0[26u].x;
    _198[2u] = cbMtdParam._m0[26u].y;
    _199[2u] = cbMtdParam._m0[26u].z;
    _197[3u] = cbMtdParam._m0[27u].x;
    _198[3u] = cbMtdParam._m0[27u].y;
    _199[3u] = cbMtdParam._m0[27u].z;
    _197[4u] = cbMtdParam._m0[28u].x;
    _198[4u] = cbMtdParam._m0[28u].y;
    _199[4u] = cbMtdParam._m0[28u].z;
    _197[5u] = cbMtdParam._m0[29u].x;
    _198[5u] = cbMtdParam._m0[29u].y;
    _199[5u] = cbMtdParam._m0[29u].z;
    float _549 = isnan(0.0) ? _382 : (isnan(_382) ? 0.0 : max(_382, 0.0));
    uint _552 = uint(int(isnan(5.0) ? _549 : (isnan(_549) ? 5.0 : min(_549, 5.0))));
    float _559 = _197[_552] * _353;
    float _560 = _198[_552] * _353;
    float _561 = _199[_552] * _353;
    float _562 = _559 + ((_270.x * 4.5) * ((((cbMtdParam._m0[30u].x * _466.x) - _451) * _289) + _451));
    float _563 = _560 + ((_270.y * 4.5) * ((((cbMtdParam._m0[30u].y * _466.y) - _452) * _291) + _452));
    float _564 = _561 + ((_270.z * 4.5) * ((((cbMtdParam._m0[30u].z * _466.z) - _453) * _292) + _453));
    float _192[5];
    float _193[5];
    _192[0u] = cbMtdParam._m0[35u].y;
    _193[0u] = cbMtdParam._m0[35u].z;
    _192[1u] = cbMtdParam._m0[36u].w;
    _193[1u] = cbMtdParam._m0[37u].x;
    _192[2u] = cbMtdParam._m0[37u].y;
    _193[2u] = cbMtdParam._m0[37u].z;
    _192[3u] = cbMtdParam._m0[37u].w;
    _193[3u] = cbMtdParam._m0[38u].x;
    _192[4u] = cbMtdParam._m0[38u].y;
    _193[4u] = cbMtdParam._m0[38u].z;
    float _595 = roundEven(5.0 - _380);
    float _596 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _597 = isnan(4.0) ? _596 : (isnan(_596) ? 4.0 : min(_596, 4.0));
    float _599 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    uint _601 = uint(int(isnan(4.0) ? _599 : (isnan(_599) ? 4.0 : min(_599, 4.0))));
    float _613 = ((cbMtdParam._m0[39u].z - _193[_601]) * _356) + _193[_601];
    float _621 = ((cbMtdParam._m0[40u].x - _613) * _323) + _613;
    float _626 = ((cbMtdParam._m0[40u].z - _621) * _289) + _621;
    vec4 _643 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _645 = _643.x;
    float _646 = _643.y;
    float _648 = _643.z + _192[_601];
    vec4 _660 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _668 = (((cbMtdParam._m0[39u].y - _648) + _660.z) * _356) + _648;
    vec4 _681 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _689 = (((cbMtdParam._m0[39u].w - _668) + _681.z) * _323) + _668;
    float _695 = ((((_312 * 2.0) * _689) - _689) * cbMtdParam._m0[33u].w) + _689;
    vec4 _708 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _716 = (((_708.z + cbMtdParam._m0[40u].y) - _695) * _292) + _695;
    float _743 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _774 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_743 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_747 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _789 = (-0.0) - ((_747 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _793 = (_747 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _794 = isnan(_793) ? _789 : (isnan(_789) ? _793 : min(_789, _793));
    float _3871 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _795 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _818 = ((_660.x - _645) * _356) + _645;
    float _819 = ((_660.y - _646) * _356) + _646;
    float _824 = ((_681.x - _818) * _323) + _818;
    float _825 = ((_681.y - _819) * _323) + _819;
    float _834 = ((((_708.x - _824) * _289) + _824) * 2.0) + (-1.0);
    float _835 = ((((_708.y - _825) * _291) + _825) * 2.0) + (-1.0);
    float _836 = dot(vec2(_834, _835), vec2(_834, _835));
    float _3882 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
    float _841 = sqrt(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))));
    float _844 = (cbMtdParam._m0[34u].x * ((_308.x * 2.0) + (-1.0))) + _834;
    float _845 = (cbMtdParam._m0[34u].x * ((_308.y * 2.0) + (-1.0))) + _835;
    float _848 = fma(_841, _239 * NORMAL.x, fma(_845, _246 * TANGENT.x, (_232 * _224) * _844));
    float _851 = fma(_841, _239 * NORMAL.y, fma(_845, _246 * TANGENT.y, (_232 * _225) * _844));
    float _854 = fma(_841, _239 * NORMAL.z, fma(_845, _246 * TANGENT.z, (_232 * _226) * _844));
    float _858 = inversesqrt(dot(vec3(_848, _851, _854), vec3(_848, _851, _854)));
    float _859 = _858 * _848;
    float _860 = _858 * _851;
    float _861 = _858 * _854;
    float _3893 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _862 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3915 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _3926 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3937 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _866 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _882 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _912 = cbSceneParam._m0[71u].x - (_743 / _902);
    float _913 = cbSceneParam._m0[71u].y - (_747 / _902);
    float _914 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _902);
    float _918 = inversesqrt(dot(vec3(_912, _913, _914), vec3(_912, _913, _914)));
    float _919 = _912 * _918;
    float _920 = _913 * _918;
    float _921 = _914 * _918;
    float _927 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _928 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _930 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _932 = _930.w;
    float _950 = fma(_861, cbSceneParam._m0[5u].z, fma(_860, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _859));
    float _953 = fma(_861, cbSceneParam._m0[6u].z, fma(_860, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _859));
    float _956 = fma(_861, cbSceneParam._m0[7u].z, fma(_860, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _859));
    vec4 _958 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _969 = (((_958.y - _862) + (_958.w * _862)) * cbMtdParam._m0[3u].x) + _862;
    uint _982 = uint(roundEven(NORMAL.w)) * 13u;
    uint _984 = _982 + 9u;
    uint _985 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _991 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0)))) * cbInstanceData._m0[_985].x;
    float _992 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0)))) * cbInstanceData._m0[_985].y;
    float _993 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * cbInstanceData._m0[_985].z;
    float _3948 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _994 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
    float _3959 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _995 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
    float _3970 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
    vec4 _997 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1002 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1013 = (((_1002.x - _866) + (_1002.w * _866)) * cbMtdParam._m0[3u].x) + _866;
    float _1026 = (cbMtdParam._m0[3u].x * (((_994 * _932) - _994) + _997.x)) + _994;
    float _1027 = (cbMtdParam._m0[3u].x * (((_995 * _932) - _995) + _997.y)) + _995;
    float _1028 = (cbMtdParam._m0[3u].x * (((_996 * _932) - _996) + _997.z)) + _996;
    float _1029 = 1.0 - _1013;
    float _1030 = _1029 * _1026;
    float _1031 = _1029 * _1027;
    float _1032 = _1029 * _1028;
    float _1037 = (_1026 + (-0.039999999105930328369140625)) * _1013;
    float _1038 = (_1027 + (-0.039999999105930328369140625)) * _1013;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _1013;
    float _1040 = _1037 + 0.039999999105930328369140625;
    float _1042 = _1038 + 0.039999999105930328369140625;
    float _1043 = _1039 + 0.039999999105930328369140625;
    vec4 _1052 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _927, cbSceneParam._m0[86u].y * _928));
    float _1055 = _1052.x * TEXCOORD_5.w;
    float _1056 = dot(vec3(_859, _860, _861), vec3(_919, _920, _921));
    float _1059 = _1056 * 2.0;
    float _1063 = (_1059 * _859) - _919;
    float _1064 = (_1059 * _860) - _920;
    float _1065 = (_1059 * _861) - _921;
    float _1069 = abs(dot(vec3(_919, _920, _921), vec3(_859, _860, _861)));
    float _3981 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
    float _1071 = sqrt(_969);
    float _1082 = exp2((_1071 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1071 * 3.0));
    float _1088 = (1.0 - _1082) * ((_1071 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1089 = _1082 * _1071;
    float _1117 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1423;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1150 = fma(_1125, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1117));
        float _1154 = fma(_1125, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1117));
        float _1158 = fma(_1125, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1117));
        float _1182 = _1117 + _859;
        float _1183 = _1121 + _860;
        float _1184 = _1125 + _861;
        float _1194 = fma(_1184, cbModelParam._m0[26u].z, fma(_1183, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1182)) - _1150;
        float _1195 = fma(_1184, cbModelParam._m0[27u].z, fma(_1183, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1182)) - _1154;
        float _1196 = fma(_1184, cbModelParam._m0[28u].z, fma(_1183, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1182)) - _1158;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1212 = ((_1200 * _1194) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1150 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1213 = ((_1200 * _1195) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1154 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1196) / cbModelParam._m0[34u].z) + ((((((_1158 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1212, _1213, _1214), 0.0);
        float _1251 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1217.x + (-0.5));
        float _1253 = _1251 * (_1217.y + (-0.5));
        float _1254 = _1251 * (_1217.z + (-0.5));
        float _1261 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1224.x + (-0.5));
        float _1263 = _1261 * (_1224.y + (-0.5));
        float _1264 = _1261 * (_1224.z + (-0.5));
        float _1271 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1231.x + (-0.5));
        float _1273 = _1271 * (_1231.y + (-0.5));
        float _1274 = _1271 * (_1231.z + (-0.5));
        float _1281 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1238.x + (-0.5));
        float _1283 = _1281 * (_1238.y + (-0.5));
        float _1284 = _1281 * (_1238.z + (-0.5));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = _1252 * 0.5;
        float _1289 = _1262 * 0.5;
        float _1290 = _1272 * 0.5;
        float _1291 = dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290));
        float _1296 = (_1291 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1291);
        float _1305 = (dot(vec3(_859, _860, _861), vec3(_1296 * _1288, _1296 * _1289, _1296 * _1290)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1315 = sqrt(((_1289 * _1289) + (_1288 * _1288)) + (_1290 * _1290)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1316 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1317 = _1316 * 2.0;
        float _1321 = (1.0 - _1316) / (_1316 + 1.0);
        float _4029 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1331 = ((((1.0 - _1322) * (_1317 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1317 + 1.0))) + _1322) * _1285;
        float _1332 = _1253 * 0.5;
        float _1333 = _1263 * 0.5;
        float _1334 = _1273 * 0.5;
        float _1335 = dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334));
        float _1340 = (_1335 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1335);
        float _1348 = (dot(vec3(_859, _860, _861), vec3(_1340 * _1332, _1340 * _1333, _1340 * _1334)) + 1.0) * 0.5;
        float _4040 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1357 = sqrt(((_1333 * _1333) + (_1332 * _1332)) + (_1334 * _1334)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _4051 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1358 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
        float _1359 = _1358 * 2.0;
        float _1363 = (1.0 - _1358) / (_1358 + 1.0);
        float _4062 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0));
        float _1373 = ((((1.0 - _1364) * (_1359 + 2.0)) * exp2(log2(isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0))) * (_1359 + 1.0))) + _1364) * _1286;
        float _1374 = _1254 * 0.5;
        float _1375 = _1264 * 0.5;
        float _1376 = _1274 * 0.5;
        float _1377 = dot(vec3(_1374, _1375, _1376), vec3(_1374, _1375, _1376));
        float _1382 = (_1377 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1377);
        float _1390 = (dot(vec3(_859, _860, _861), vec3(_1382 * _1374, _1382 * _1375, _1382 * _1376)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1399 = sqrt(((_1375 * _1375) + (_1374 * _1374)) + (_1376 * _1376)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1400 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1401 = _1400 * 2.0;
        float _1405 = (1.0 - _1400) / (_1400 + 1.0);
        float _4095 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1415 = ((((1.0 - _1406) * (_1401 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1401 + 1.0))) + _1406) * _1287;
        _1423 = _1254;
        _1425 = _1253;
        _1426 = _1252;
        _1427 = _1264;
        _1428 = _1263;
        _1429 = _1262;
        _1430 = _1274;
        _1431 = _1273;
        _1432 = _1272;
        _1433 = _1287;
        _1434 = _1286;
        _1435 = _1285;
        _1436 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)));
        _1437 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)));
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0)));
    }
    else
    {
        _1423 = _1424;
        _1425 = _1424;
        _1426 = _1424;
        _1427 = _1424;
        _1428 = _1424;
        _1429 = _1424;
        _1430 = _1424;
        _1431 = _1424;
        _1432 = _1424;
        _1433 = _1424;
        _1434 = _1424;
        _1435 = _1424;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1728;
    float _1729;
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1461 = fma(_1125, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1117));
        float _1465 = fma(_1125, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1117));
        float _1469 = fma(_1125, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1117));
        float _1491 = _1117 + _859;
        float _1492 = _1121 + _860;
        float _1493 = _1125 + _861;
        float _1503 = fma(_1493, cbModelParam._m0[30u].z, fma(_1492, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1491)) - _1461;
        float _1504 = fma(_1493, cbModelParam._m0[31u].z, fma(_1492, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1491)) - _1465;
        float _1505 = fma(_1493, cbModelParam._m0[32u].z, fma(_1492, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1491)) - _1469;
        float _1509 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
        float _1521 = ((_1509 * _1503) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1461 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1522 = ((_1509 * _1504) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1465 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1523 = ((_1509 * _1505) / cbModelParam._m0[35u].z) + ((((((_1469 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1525 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1532 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1539 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        vec4 _1546 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1521, _1522, _1523), 0.0);
        float _1558 = exp2((_1525.w + (-0.5)) * 20.0) * 2.0;
        float _1559 = _1558 * (_1525.x + (-0.5));
        float _1560 = _1558 * (_1525.y + (-0.5));
        float _1561 = _1558 * (_1525.z + (-0.5));
        float _1568 = exp2((_1532.w + (-0.5)) * 20.0) * 2.0;
        float _1569 = _1568 * (_1532.x + (-0.5));
        float _1570 = _1568 * (_1532.y + (-0.5));
        float _1571 = _1568 * (_1532.z + (-0.5));
        float _1578 = exp2((_1539.w + (-0.5)) * 20.0) * 2.0;
        float _1579 = _1578 * (_1539.x + (-0.5));
        float _1580 = _1578 * (_1539.y + (-0.5));
        float _1581 = _1578 * (_1539.z + (-0.5));
        float _1588 = exp2((_1546.w + (-0.5)) * 20.0) * 2.0;
        float _1589 = _1588 * (_1546.x + (-0.5));
        float _1590 = _1588 * (_1546.y + (-0.5));
        float _1591 = _1588 * (_1546.z + (-0.5));
        float _1592 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1593 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = _1559 * 0.5;
        float _1596 = _1569 * 0.5;
        float _1597 = _1579 * 0.5;
        float _1598 = dot(vec3(_1595, _1596, _1597), vec3(_1595, _1596, _1597));
        float _1603 = (_1598 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1598);
        float _1611 = (dot(vec3(_859, _860, _861), vec3(_1603 * _1595, _1603 * _1596, _1603 * _1597)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1620 = sqrt(((_1596 * _1596) + (_1595 * _1595)) + (_1597 * _1597)) / (_1592 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1621 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1622 = _1621 * 2.0;
        float _1626 = (1.0 - _1621) / (_1621 + 1.0);
        float _4158 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1636 = ((((1.0 - _1627) * (_1622 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1622 + 1.0))) + _1627) * _1592;
        float _1637 = _1560 * 0.5;
        float _1638 = _1570 * 0.5;
        float _1639 = _1580 * 0.5;
        float _1640 = dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639));
        float _1645 = (_1640 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1640);
        float _1653 = (dot(vec3(_859, _860, _861), vec3(_1645 * _1637, _1645 * _1638, _1645 * _1639)) + 1.0) * 0.5;
        float _4169 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1662 = sqrt(((_1638 * _1638) + (_1637 * _1637)) + (_1639 * _1639)) / (_1593 + 9.9999997473787516355514526367188e-06);
        float _4180 = isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0));
        float _1663 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
        float _1664 = _1663 * 2.0;
        float _1668 = (1.0 - _1663) / (_1663 + 1.0);
        float _4191 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0));
        float _1678 = ((((1.0 - _1669) * (_1664 + 2.0)) * exp2(log2(isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0))) * (_1664 + 1.0))) + _1669) * _1593;
        float _1679 = _1561 * 0.5;
        float _1680 = _1571 * 0.5;
        float _1681 = _1581 * 0.5;
        float _1682 = dot(vec3(_1679, _1680, _1681), vec3(_1679, _1680, _1681));
        float _1687 = (_1682 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1682);
        float _1695 = (dot(vec3(_859, _860, _861), vec3(_1687 * _1679, _1687 * _1680, _1687 * _1681)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1704 = sqrt(((_1680 * _1680) + (_1679 * _1679)) + (_1681 * _1681)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1705 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1706 = _1705 * 2.0;
        float _1710 = (1.0 - _1705) / (_1705 + 1.0);
        float _4224 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1720 = ((((1.0 - _1711) * (_1706 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1706 + 1.0))) + _1711) * _1594;
        _1728 = _1561;
        _1729 = _1560;
        _1730 = _1559;
        _1731 = _1571;
        _1732 = _1570;
        _1733 = _1569;
        _1734 = _1581;
        _1735 = _1580;
        _1736 = _1579;
        _1737 = _1594;
        _1738 = _1593;
        _1739 = _1592;
        _1740 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0)));
        _1741 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)));
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)));
    }
    else
    {
        _1728 = _1424;
        _1729 = _1424;
        _1730 = _1424;
        _1731 = _1424;
        _1732 = _1424;
        _1733 = _1424;
        _1734 = _1424;
        _1735 = _1424;
        _1736 = _1424;
        _1737 = _1424;
        _1738 = _1424;
        _1739 = _1424;
        _1740 = 0.0;
        _1741 = 0.0;
        _1742 = 0.0;
    }
    float _1752 = (cbModelParam._m0[1u].x * (_1740 - _1436)) + _1436;
    float _1753 = (cbModelParam._m0[1u].x * (_1741 - _1437)) + _1437;
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1438)) + _1438;
    float _1775 = fma(_1754, cbSceneParam._m0[89u].z, fma(_1753, cbSceneParam._m0[89u].y, _1752 * cbSceneParam._m0[89u].x));
    float _1778 = fma(_1754, cbSceneParam._m0[90u].z, fma(_1753, cbSceneParam._m0[90u].y, _1752 * cbSceneParam._m0[90u].x));
    float _1781 = fma(_1754, cbSceneParam._m0[91u].z, fma(_1753, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1752));
    float _1794 = _1063 * 0.5;
    float _1795 = _1064 * 0.5;
    float _1796 = _1065 * 0.5;
    float _1797 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1800 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1729, _1732, _1735, _1738));
    float _1803 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1728, _1731, _1734, _1737));
    float _1837;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1810 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1423, _1427, _1430, _1433));
        float _1814 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1425, _1428, _1431, _1434));
        float _1818 = dot(vec4(_1794, _1795, _1796, 1.0), vec4(_1426, _1429, _1432, _1435));
        float _1825 = dot(vec4(cbModelParam._m0[39u]), vec4(_1794, _1795, _1796, 1.0));
        _1837 = dot(vec3(isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)), isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1825) ? 0.0 : (isnan(0.0) ? _1825 : max(0.0, _1825))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1837 = 1.0;
    }
    float _1848;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1839 = dot(vec4(cbModelParam._m0[40u]), vec4(_1794, _1795, _1796, 1.0));
        _1848 = dot(vec3(isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0)), isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1839) ? 0.0 : (isnan(0.0) ? _1839 : max(0.0, _1839))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1848 = 1.0;
    }
    float _1852 = (_1848 * cbModelParam._m0[1u].x) + (_1837 * (1.0 - cbModelParam._m0[1u].x));
    float _1862 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _969);
    float _1863 = isnan(_1862) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1862 : min(cbModelParam._m0[25u].z, _1862));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1912 = fma(_1125, cbModelParam._m0[13u].z, fma(_1121, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1117)) + cbModelParam._m0[13u].w;
        float _1916 = fma(_1125, cbModelParam._m0[14u].z, fma(_1121, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1117)) + cbModelParam._m0[14u].w;
        float _1920 = fma(_1125, cbModelParam._m0[15u].z, fma(_1121, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1117)) + cbModelParam._m0[15u].w;
        float _1923 = fma(_1065, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1063));
        float _1926 = fma(_1065, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1063));
        float _1929 = fma(_1065, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1063));
        float _1957;
        if (_1923 > 0.0)
        {
            _1957 = abs((1.0 - _1912) / _1923);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1912 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1957 = frontier_phi_14_12_ladder;
        }
        float _2162;
        if (_1926 > 0.0)
        {
            _2162 = abs((1.0 - _1916) / _1926);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1916 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2162 = frontier_phi_23_19_ladder;
        }
        float _2416;
        if (_1929 > 0.0)
        {
            _2416 = abs((1.0 - _1920) / _1929);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1920 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2416 = frontier_phi_35_30_ladder;
        }
        float _2418 = isnan(_2162) ? _1957 : (isnan(_1957) ? _2162 : min(_1957, _2162));
        float _2419 = isnan(_2416) ? _2418 : (isnan(_2418) ? _2416 : min(_2418, _2416));
        float _2423 = (_2419 * _1923) + _1912;
        float _2424 = (_2419 * _1926) + _1916;
        float _2425 = (_2419 * _1929) + _1920;
        float _2426 = _2419 * 9.9999997473787516355514526367188e-05;
        float _2428 = (-1.0) - _2426;
        float _2430 = _2426 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2425 > _2430) || ((_2425 < _2428) || ((_2424 > _2430) || ((_2424 < _2428) || ((_2423 < _2428) || (_2423 > _2430))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2425, cbModelParam._m0[9u].z, fma(_2424, cbModelParam._m0[9u].y, _2423 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2425, cbModelParam._m0[10u].z, fma(_2424, cbModelParam._m0[10u].y, _2423 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2425, cbModelParam._m0[11u].z, fma(_2424, cbModelParam._m0[11u].y, _2423 * cbModelParam._m0[11u].x))), _1863);
            frontier_phi_13_35_ladder = _2553.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2553.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2553.x * cbModelParam._m0[1u].y;
        }
        _1945 = frontier_phi_13_35_ladder_2;
        _1947 = frontier_phi_13_35_ladder_1;
        _1949 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1063, _1064, _1065), _1863);
        _1945 = _1933.x * cbModelParam._m0[1u].y;
        _1947 = _1933.y * cbModelParam._m0[1u].y;
        _1949 = _1933.z * cbModelParam._m0[1u].y;
    }
    float _1953 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _969);
    float _1954 = isnan(_1953) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1953 : min(cbModelParam._m0[25u].w, _1953));
    float _2046;
    float _2048;
    float _2050;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2010 = fma(_1125, cbModelParam._m0[21u].z, fma(_1121, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1117)) + cbModelParam._m0[21u].w;
        float _2014 = fma(_1125, cbModelParam._m0[22u].z, fma(_1121, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1117)) + cbModelParam._m0[22u].w;
        float _2018 = fma(_1125, cbModelParam._m0[23u].z, fma(_1121, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1117)) + cbModelParam._m0[23u].w;
        float _2021 = fma(_1065, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1063));
        float _2024 = fma(_1065, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1063));
        float _2027 = fma(_1065, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1063));
        float _2167;
        if (_2021 > 0.0)
        {
            _2167 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2167 = frontier_phi_25_21_ladder;
        }
        float _2443;
        if (_2024 > 0.0)
        {
            _2443 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2443 = frontier_phi_37_32_ladder;
        }
        float _2656;
        if (_2027 > 0.0)
        {
            _2656 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2656 = frontier_phi_46_43_ladder;
        }
        float _2658 = isnan(_2443) ? _2167 : (isnan(_2167) ? _2443 : min(_2167, _2443));
        float _2659 = isnan(_2656) ? _2658 : (isnan(_2658) ? _2656 : min(_2658, _2656));
        float _2663 = (_2659 * _2021) + _2010;
        float _2664 = (_2659 * _2024) + _2014;
        float _2665 = (_2659 * _2027) + _2018;
        float _2666 = _2659 * 9.9999997473787516355514526367188e-05;
        float _2667 = (-1.0) - _2666;
        float _2669 = _2666 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2665 > _2669) || ((_2665 < _2667) || ((_2664 > _2669) || ((_2664 < _2667) || ((_2663 < _2667) || (_2663 > _2669))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2893 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2665, cbModelParam._m0[17u].z, fma(_2664, cbModelParam._m0[17u].y, _2663 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2665, cbModelParam._m0[18u].z, fma(_2664, cbModelParam._m0[18u].y, _2663 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2665, cbModelParam._m0[19u].z, fma(_2664, cbModelParam._m0[19u].y, _2663 * cbModelParam._m0[19u].x))), _1954);
            frontier_phi_22_46_ladder = _2893.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2893.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2893.x * cbModelParam._m0[1u].z;
        }
        _2046 = frontier_phi_22_46_ladder_2;
        _2048 = frontier_phi_22_46_ladder_1;
        _2050 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2030 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1063, _1064, _1065), _1954);
        _2046 = _2030.x * cbModelParam._m0[1u].z;
        _2048 = _2030.y * cbModelParam._m0[1u].z;
        _2050 = _2030.z * cbModelParam._m0[1u].z;
    }
    float _2063 = (((_1088 * _1040) + _1089) * _1055) * ((cbModelParam._m0[1u].w * (_2046 - _1945)) + _1945);
    float _2065 = (((_1088 * _1042) + _1089) * _1055) * ((cbModelParam._m0[1u].w * (_2048 - _1947)) + _1947);
    float _2067 = (((_1088 * _1043) + _1089) * _1055) * ((cbModelParam._m0[1u].w * (_2050 - _1949)) + _1949);
    float _2070 = fma(_2067, cbSceneParam._m0[89u].z, fma(_2065, cbSceneParam._m0[89u].y, _2063 * cbSceneParam._m0[89u].x));
    float _2073 = fma(_2067, cbSceneParam._m0[90u].z, fma(_2065, cbSceneParam._m0[90u].y, _2063 * cbSceneParam._m0[90u].x));
    float _2076 = fma(_2067, cbSceneParam._m0[91u].z, fma(_2065, cbSceneParam._m0[91u].y, _2063 * cbSceneParam._m0[91u].x));
    uvec4 _2086 = floatBitsToUint(cbInstanceData._m0[_982 + 5u]);
    uint _2088 = _2086.x * 14u;
    uint _2089 = _2088 + 13u;
    float _2096 = _1055 + (-1.0);
    float _2101 = (cbLight._m0[_2089].x * _2096) + 1.0;
    float _2102 = (cbLight._m0[_2089].y * _2096) + 1.0;
    float _2103 = (cbLight._m0[_2089].z * _2096) + 1.0;
    float _2104 = (cbLight._m0[_2089].w * _2096) + 1.0;
    uint _2105 = _2088 + 5u;
    float _2111 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2115 = _2088 + 4u;
    float _2121 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2125 = _2088 | 1u;
    float _2136 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_859, _860, _861));
    float _2139 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_859, _860, _861));
    float _4360 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _4371 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _2144 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * 0.3183098733425140380859375;
    float _2146 = (isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * 0.3183098733425140380859375;
    float _2153 = ((cbLight._m0[_2105].x * _2111) * _2146) + ((cbLight._m0[_2115].x * _2121) * _2144);
    float _2154 = ((_2111 * cbLight._m0[_2105].y) * _2146) + ((_2121 * cbLight._m0[_2115].y) * _2144);
    float _2155 = ((_2111 * cbLight._m0[_2105].z) * _2146) + ((_2121 * cbLight._m0[_2115].z) * _2144);
    uvec4 _2159 = floatBitsToUint(cbLight._m0[_2088 + 12u]);
    bool _2161 = _2159.x == 0u;
    float _2172;
    float _2174;
    float _2176;
    if (_2161)
    {
        _2172 = _2153;
        _2174 = _2154;
        _2176 = _2155;
    }
    else
    {
        uint _2180 = _2088 + 6u;
        float _2196 = (dot(vec3(cbLight._m0[_2088 + 2u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2197 = _2196 * _2196;
        float _4382 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
        float _2198 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2199 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2172 = (((cbLight._m0[_2180].x * 0.3183098733425140380859375) * _2198) * _2199) + _2153;
        _2174 = (((cbLight._m0[_2180].y * 0.3183098733425140380859375) * _2198) * _2199) + _2154;
        _2176 = (((cbLight._m0[_2180].z * 0.3183098733425140380859375) * _2198) * _2199) + _2155;
    }
    bool _2179 = _2159.y == 0u;
    float _2217;
    float _2219;
    float _2221;
    if (_2179)
    {
        _2217 = _2172;
        _2219 = _2174;
        _2221 = _2176;
    }
    else
    {
        uint _2387 = _2088 + 7u;
        float _2403 = (dot(vec3(cbLight._m0[_2088 + 3u].xyz), vec3(_859, _860, _861)) * 0.5) + 0.5;
        float _2404 = _2403 * _2403;
        float _4398 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2405 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2406 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2217 = (((cbLight._m0[_2387].x * 0.3183098733425140380859375) * _2405) * _2406) + _2172;
        _2219 = (((cbLight._m0[_2387].y * 0.3183098733425140380859375) * _2405) * _2406) + _2174;
        _2221 = (((cbLight._m0[_2387].z * 0.3183098733425140380859375) * _2405) * _2406) + _2176;
    }
    uint _2224 = _2088 + 8u;
    float _2237 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _969) * 0.949999988079071044921875);
    float _2238 = _2237 * _2237;
    float _2239 = cbLight._m0[_2088].x + _919;
    float _2240 = cbLight._m0[_2088].y + _920;
    float _2241 = cbLight._m0[_2088].z + _921;
    float _2245 = inversesqrt(dot(vec3(_2239, _2240, _2241), vec3(_2239, _2240, _2241)));
    float _2246 = _2245 * _2239;
    float _2247 = _2245 * _2240;
    float _2248 = _2245 * _2241;
    float _2249 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2088].xyz));
    float _4414 = isnan(0.0) ? _2249 : (isnan(_2249) ? 0.0 : max(_2249, 0.0));
    float _2252 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
    float _4425 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
    float _2253 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
    float _2254 = dot(vec3(_859, _860, _861), vec3(_2246, _2247, _2248));
    float _4436 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2257 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2258 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2246, _2247, _2248));
    float _4447 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2262 = _2238 * _2238;
    float _2266 = ((_2257 * _2257) * (_2262 + (-1.0))) + 1.0;
    float _2274 = exp2(log2(1.0 - (isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0)))) * 5.0);
    float _2275 = 0.959999978542327880859375 - _1037;
    float _2277 = 0.959999978542327880859375 - _1038;
    float _2278 = 0.959999978542327880859375 - _1039;
    float _2285 = 1.0 - _2238;
    float _2296 = (0.5 / (((_2253 * ((_2252 * _2285) + _2238)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2285) + _2238) * _2252))) * _2252;
    float _4458 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2298 = (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_2262 / ((_2266 * _2266) * 3.141590118408203125));
    uint _2309 = _2088 + 9u;
    float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2125].w)) * _969) * 0.949999988079071044921875);
    float _2321 = _2320 * _2320;
    float _2322 = cbLight._m0[_2125].x + _919;
    float _2323 = cbLight._m0[_2125].y + _920;
    float _2324 = cbLight._m0[_2125].z + _921;
    float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
    float _2329 = _2328 * _2322;
    float _2330 = _2328 * _2323;
    float _2331 = _2328 * _2324;
    float _2332 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2125].xyz));
    float _4469 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
    float _2336 = dot(vec3(_859, _860, _861), vec3(_2329, _2330, _2331));
    float _4480 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2339 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
    float _2340 = dot(vec3(cbLight._m0[_2125].xyz), vec3(_2329, _2330, _2331));
    float _4491 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2344 = _2321 * _2321;
    float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
    float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0);
    float _2362 = 1.0 - _2321;
    float _2372 = (0.5 / (((_2253 * ((_2335 * _2362) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2362) + _2321) * _2335))) * _2335;
    float _4502 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
    float _2374 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
    float _2384 = (((((_2355 * _2275) + _1040) * cbLight._m0[_2309].x) * _2374) * _2111) + (((((_2274 * _2275) + _1040) * cbLight._m0[_2224].x) * _2298) * _2121);
    float _2385 = (((((_2355 * _2277) + _1042) * cbLight._m0[_2309].y) * _2374) * _2111) + (((((_2274 * _2277) + _1042) * cbLight._m0[_2224].y) * _2298) * _2121);
    float _2386 = (((((_2355 * _2278) + _1043) * cbLight._m0[_2309].z) * _2374) * _2111) + (((((_2274 * _2278) + _1043) * cbLight._m0[_2224].z) * _2298) * _2121);
    float _2448;
    float _2450;
    float _2452;
    if (_2161)
    {
        _2448 = _2384;
        _2450 = _2385;
        _2452 = _2386;
    }
    else
    {
        uint _2454 = _2088 + 2u;
        uint _2458 = _2088 + 10u;
        float _2472 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2454].w)) * _969) * 0.949999988079071044921875);
        float _2473 = _2472 * _2472;
        float _2474 = cbLight._m0[_2454].x + _919;
        float _2475 = cbLight._m0[_2454].y + _920;
        float _2476 = cbLight._m0[_2454].z + _921;
        float _2480 = inversesqrt(dot(vec3(_2474, _2475, _2476), vec3(_2474, _2475, _2476)));
        float _2481 = _2480 * _2474;
        float _2482 = _2480 * _2475;
        float _2483 = _2480 * _2476;
        float _2484 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2454].xyz));
        float _4513 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2487 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _2488 = dot(vec3(_859, _860, _861), vec3(_2481, _2482, _2483));
        float _4524 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
        float _2491 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2492 = dot(vec3(cbLight._m0[_2454].xyz), vec3(_2481, _2482, _2483));
        float _4535 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
        float _2496 = _2473 * _2473;
        float _2500 = ((_2491 * _2491) * (_2496 + (-1.0))) + 1.0;
        float _2507 = exp2(log2(1.0 - (isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0)))) * 5.0);
        float _2514 = 1.0 - _2473;
        float _2524 = (0.5 / (((_2253 * ((_2487 * _2514) + _2473)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2514) + _2473) * _2487))) * _2487;
        float _4546 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2526 = (isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0))) * (_2496 / ((_2500 * _2500) * 3.141590118408203125));
        float _2527 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2448 = (((((_2507 * _2275) + _1040) * cbLight._m0[_2458].x) * _2526) * _2527) + _2384;
        _2450 = (((((_2507 * _2277) + _1042) * cbLight._m0[_2458].y) * _2526) * _2527) + _2385;
        _2452 = (((((_2507 * _2278) + _1043) * cbLight._m0[_2458].z) * _2526) * _2527) + _2386;
    }
    float _2562;
    float _2564;
    float _2566;
    if (_2179)
    {
        _2562 = _2448;
        _2564 = _2450;
        _2566 = _2452;
    }
    else
    {
        uint _2573 = _2088 + 3u;
        uint _2577 = _2088 + 11u;
        float _2591 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2573].w)) * _969) * 0.949999988079071044921875);
        float _2592 = _2591 * _2591;
        float _2593 = cbLight._m0[_2573].x + _919;
        float _2594 = cbLight._m0[_2573].y + _920;
        float _2595 = cbLight._m0[_2573].z + _921;
        float _2599 = inversesqrt(dot(vec3(_2593, _2594, _2595), vec3(_2593, _2594, _2595)));
        float _2600 = _2599 * _2593;
        float _2601 = _2599 * _2594;
        float _2602 = _2599 * _2595;
        float _2603 = dot(vec3(_859, _860, _861), vec3(cbLight._m0[_2573].xyz));
        float _4562 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2606 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _2607 = dot(vec3(_859, _860, _861), vec3(_2600, _2601, _2602));
        float _4573 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2610 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _2611 = dot(vec3(cbLight._m0[_2573].xyz), vec3(_2600, _2601, _2602));
        float _4584 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
        float _2615 = _2592 * _2592;
        float _2619 = ((_2610 * _2610) * (_2615 + (-1.0))) + 1.0;
        float _2626 = exp2(log2(1.0 - (isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0)))) * 5.0);
        float _2633 = 1.0 - _2592;
        float _2643 = (0.5 / (((_2253 * ((_2606 * _2633) + _2592)) + 9.9999999392252902907785028219223e-09) + (((_2253 * _2633) + _2592) * _2606))) * _2606;
        float _4595 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
        float _2645 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_2615 / ((_2619 * _2619) * 3.141590118408203125));
        float _2646 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2562 = (((((_2626 * _2275) + _1040) * cbLight._m0[_2577].x) * _2645) * _2646) + _2448;
        _2564 = (((((_2626 * _2277) + _1042) * cbLight._m0[_2577].y) * _2645) * _2646) + _2450;
        _2566 = (((((_2626 * _2278) + _1043) * cbLight._m0[_2577].z) * _2645) * _2646) + _2452;
    }
    float _2781;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    float _2791;
    if (_2086.y == 0u)
    {
        float _2721 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2722 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2721;
        float _2723 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2721;
        float _2724 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2721;
        uvec4 _2736 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2737 = _2736.x;
        uint _2748 = uint((float(_2736.y) * floor(float(uint(cbSceneParam._m0[85u].y * _928) / _2737))) + floor(float(uint(cbSceneParam._m0[85u].x * _927) / _2737)));
        float _2758 = (log2(_2724 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2759 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
        uint _2762 = uint(isnan(14.0) ? _2759 : (isnan(_2759) ? 14.0 : min(_2759, 14.0)));
        uvec4 _2767 = texelFetch(g_lightClusterGridBuffer, int(((_2762 << 2u) + (_2748 << 6u)) >> 2u));
        uint _2768 = _2767.x;
        uint _2769 = _2736.z;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        float _2908;
        if (((((1u << ((_2769 >> 4u) & 15u)) + 4294967295u) & _2768) == 0u) || ((_2769 & 240u) == 0u))
        {
            _2898 = 0.0;
            _2900 = 0.0;
            _2902 = 0.0;
            _2904 = 0.0;
            _2906 = 0.0;
            _2908 = 0.0;
        }
        else
        {
            float _2899;
            float _2901;
            float _2903;
            float _2905;
            float _2907;
            float _2909;
            float _3051 = 0.0;
            float _3052 = 0.0;
            float _3053 = 0.0;
            float _3054 = 0.0;
            float _3055 = 0.0;
            float _3056 = 0.0;
            uint _3057 = 0u;
            uint _3066;
            bool _3067;
            for (;;)
            {
                _3066 = texelFetch(g_lightClassification, int((((_2762 << 5u) + (_2748 << 9u)) + (_3057 << 2u)) >> 2u)).x;
                _3067 = _3066 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3067)
                {
                    frontier_phi_61_pred = _3051;
                    frontier_phi_61_pred_1 = _3056;
                    frontier_phi_61_pred_2 = _3055;
                    frontier_phi_61_pred_3 = _3054;
                    frontier_phi_61_pred_4 = _3053;
                    frontier_phi_61_pred_5 = _3052;
                }
                else
                {
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    float _3180;
                    uint _3181;
                    _3175 = _3051;
                    _3176 = _3052;
                    _3177 = _3053;
                    _3178 = _3054;
                    _3179 = _3055;
                    _3180 = _3056;
                    _3181 = _3066;
                    float _3107;
                    float _3108;
                    float _3109;
                    float _3110;
                    float _3111;
                    float _3112;
                    for (;;)
                    {
                        uint _3185 = uint(findLSB(_3181)) + (_3057 << 5u);
                        uint _3182 = (_3181 + 4294967295u) & _3181;
                        uint _3187 = _3185 * 48u;
                        vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3187)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3187 + 3u)).x));
                        uint _3207 = (_3185 * 48u) + 4u;
                        vec4 _3220 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3207)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3207 + 3u)).x));
                        uint _3226 = (_3185 * 48u) + 8u;
                        vec3 _3237 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3226)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3226 + 2u)).x));
                        float _3241 = _3201.x - _2722;
                        float _3242 = _3201.y - _2723;
                        float _3243 = _3201.z - _2724;
                        float _3244 = dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243));
                        float _3247 = inversesqrt(_3244);
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3251 = dot(vec3(_950, _953, _956), vec3(_3248, _3249, _3250));
                        float _3256 = 1.0 - (_3244 * _3201.w);
                        float _4621 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                        float _3257 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
                        float _3258 = sqrt(_3244) * _3220.w;
                        float _3261 = 1.39999997615814208984375 / (_3258 + 1.39999997615814208984375);
                        float _3262 = _3261 * _3261;
                        float _3265 = ((1.0 - _3262) * _3251) + _3262;
                        float _3268 = _3258 * _3258;
                        float _3272 = ((isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0))) * _3257) / ((_3268 * 0.699999988079071044921875) + 1.0);
                        float _3276 = (-0.0) - _2722;
                        float _3277 = (-0.0) - _2723;
                        float _3278 = (-0.0) - _2724;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3283 = _3282 * _3276;
                        float _3284 = _3282 * _3277;
                        float _3285 = _3282 * _3278;
                        float _3293 = exp2(log2(1.0 / ((_3268 * 3.5) + 5.0)) * 0.25);
                        float _3294 = 1.0 - _1071;
                        float _3301 = sqrt(1.0 - ((1.0 - (_3294 * _3294)) * (1.0 - (_3293 * _3293))));
                        float _3302 = _3301 * _3301;
                        float _3303 = _3302 * _3302;
                        float _3304 = _3283 + _3248;
                        float _3305 = _3284 + _3249;
                        float _3306 = _3285 + _3250;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3314 = dot(vec3(_950, _953, _956), vec3(_3283, _3284, _3285));
                        float _4637 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3317 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3318 = dot(vec3(_950, _953, _956), vec3(_3310 * _3304, _3310 * _3305, _3310 * _3306));
                        float _4648 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3321 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
                        float _3325 = ((_3321 * _3321) * (_3303 + (-1.0))) + 1.0;
                        float _3326 = _3261 * _3302;
                        float _3327 = _3326 * _3326;
                        float _3330 = ((1.0 - _3327) * _3251) + _3327;
                        float _4659 = isnan(0.0) ? _3330 : (isnan(_3330) ? 0.0 : max(_3330, 0.0));
                        float _3331 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
                        float _3332 = 1.0 - _3302;
                        float _3342 = (0.5 / (((_3331 * ((_3317 * _3332) + _3302)) + 9.9999999392252902907785028219223e-09) + (((_3331 * _3332) + _3302) * _3317))) * _3331;
                        float _4670 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3353 = (((_3303 * 3.1415927410125732421875) * (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) / ((_3325 * _3325) * ((_3268 * 2.1991131305694580078125) + 3.141590118408203125))) * _3257;
                        _3110 = (_3272 * _3220.x) + _3178;
                        _3111 = (_3272 * _3220.y) + _3179;
                        _3112 = (_3272 * _3220.z) + _3180;
                        _3107 = (_3353 * _3237.x) + _3175;
                        _3108 = (_3353 * _3237.y) + _3176;
                        _3109 = (_3353 * _3237.z) + _3177;
                        if (_3182 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3175 = _3107;
                            _3176 = _3108;
                            _3177 = _3109;
                            _3178 = _3110;
                            _3179 = _3111;
                            _3180 = _3112;
                            _3181 = _3182;
                        }
                    }
                    frontier_phi_61_pred = _3107;
                    frontier_phi_61_pred_1 = _3112;
                    frontier_phi_61_pred_2 = _3111;
                    frontier_phi_61_pred_3 = _3110;
                    frontier_phi_61_pred_4 = _3109;
                    frontier_phi_61_pred_5 = _3108;
                }
                _2899 = frontier_phi_61_pred;
                _2909 = frontier_phi_61_pred_1;
                _2907 = frontier_phi_61_pred_2;
                _2905 = frontier_phi_61_pred_3;
                _2903 = frontier_phi_61_pred_4;
                _2901 = frontier_phi_61_pred_5;
                uint _3058 = _3057 + 1u;
                if (_3058 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3051 = _2899;
                    _3052 = _2901;
                    _3053 = _2903;
                    _3054 = _2905;
                    _3055 = _2907;
                    _3056 = _2909;
                    _3057 = _3058;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2898 = _2899;
            _2900 = _2901;
            _2902 = _2903;
            _2904 = _2905;
            _2906 = _2907;
            _2908 = _2909;
        }
        uvec4 _2912 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2913 = _2912.z;
        uint _2915 = (_2913 >> 8u) & 15u;
        float _3019;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        if (((4294967295u << _2915) & _2768) == 0u)
        {
            _3019 = _2898;
            _3021 = _2900;
            _3023 = _2902;
            _3025 = _2904;
            _3027 = _2906;
            _3029 = _2908;
        }
        else
        {
            float _3044 = inversesqrt(dot(vec3(_2722, _2723, _2724), vec3(_2722, _2723, _2724)));
            float _3045 = _3044 * _2722;
            float _3046 = _3044 * _2723;
            float _3047 = _3044 * _2724;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2915 < ((_2913 >> 12u) & 15u))
            {
                float _3020;
                float _3022;
                float _3024;
                float _3026;
                float _3028;
                float _3030;
                float _3158 = _2898;
                float _3159 = _2900;
                float _3160 = _2902;
                float _3161 = _2904;
                float _3162 = _2906;
                float _3163 = _2908;
                uint _3164 = _2915;
                uint _3173;
                bool _3174;
                for (;;)
                {
                    _3173 = texelFetch(g_lightClassification, int((((_2762 << 5u) + (_2748 << 9u)) + (_3164 << 2u)) >> 2u)).x;
                    _3174 = _3173 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3174)
                    {
                        frontier_phi_67_pred = _3161;
                        frontier_phi_67_pred_1 = _3162;
                        frontier_phi_67_pred_2 = _3163;
                        frontier_phi_67_pred_3 = _3160;
                        frontier_phi_67_pred_4 = _3159;
                        frontier_phi_67_pred_5 = _3158;
                    }
                    else
                    {
                        float _3358;
                        float _3359;
                        float _3360;
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3657;
                        float _3371 = _3158;
                        float _3372 = _3159;
                        float _3373 = _3160;
                        float _3374 = _3161;
                        float _3375 = _3162;
                        float _3376 = _3163;
                        uint _3377 = _3173;
                        uint _3378;
                        vec4 _3403;
                        float _3404;
                        vec4 _3419;
                        vec3 _3431;
                        vec4 _3447;
                        vec4 _3462;
                        float _3508;
                        bool _3509;
                        for (;;)
                        {
                            uint _3388 = ((_3164 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3377));
                            _3378 = (_3377 + 4294967295u) & _3377;
                            uint _3390 = _3388 * 40u;
                            _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3404 = _3403.w;
                            uint _3406 = (_3388 * 40u) + 4u;
                            _3419 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3406)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3406 + 3u)).x));
                            uint _3421 = (_3388 * 40u) + 8u;
                            _3431 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x));
                            uint _3434 = (_3388 * 40u) + 16u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3388 * 40u) + 20u;
                            _3462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 3u)).x));
                            uint _3464 = (_3388 * 40u) + 24u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            uint _3483 = (_3388 * 40u) + 28u;
                            vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3508 = fma(_2724, _3496.z, fma(_2723, _3496.y, _3496.x * _2722)) + _3496.w;
                            _3509 = !((fma(_2724, _3477.z, fma(_2723, _3477.y, _3477.x * _2722)) + _3477.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3509)
                            {
                                float _3536 = _3403.x - _2722;
                                float _3537 = _3403.y - _2723;
                                float _3538 = _3403.z - _2724;
                                float _3539 = dot(vec3(_3536, _3537, _3538), vec3(_3536, _3537, _3538));
                                float _3542 = inversesqrt(_3539);
                                float _3543 = _3542 * _3536;
                                float _3544 = _3542 * _3537;
                                float _3545 = _3542 * _3538;
                                float _3549 = 1.0 - (_3539 / (_3404 * _3404));
                                float _4681 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
                                float _3554 = sqrt(_3539) * _3419.w;
                                float _3556 = 1.39999997615814208984375 / (_3554 + 1.39999997615814208984375);
                                float _3557 = _3556 * _3556;
                                float _3560 = ((1.0 - _3557) * dot(vec3(_3543, _3544, _3545), vec3(_950, _953, _956))) + _3557;
                                float _3563 = _3554 * _3554;
                                float _3567 = (fma(_2724, _3447.z, fma(_2723, _3447.y, _3447.x * _2722)) + _3447.w) / _3508;
                                float _3568 = (fma(_2724, _3462.z, fma(_2723, _3462.y, _3462.x * _2722)) + _3462.w) / _3508;
                                float _3572 = 1.0 - dot(vec2(_3567, _3568), vec2(_3567, _3568));
                                float _4697 = isnan(0.0) ? _3572 : (isnan(_3572) ? 0.0 : max(_3572, 0.0));
                                float _3573 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3574 = _3573 * (((isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0))) * _3550) / ((_3563 * 0.699999988079071044921875) + 1.0));
                                float _3586 = exp2(log2(1.0 / ((_3563 * 3.5) + 5.0)) * 0.25);
                                float _3587 = 1.0 - _1071;
                                float _3594 = sqrt(1.0 - ((1.0 - (_3587 * _3587)) * (1.0 - (_3586 * _3586))));
                                float _3595 = _3594 * _3594;
                                float _3596 = _3595 * _3595;
                                float _3597 = _3543 - _3045;
                                float _3598 = _3544 - _3046;
                                float _3599 = _3545 - _3047;
                                float _3603 = inversesqrt(dot(vec3(_3597, _3598, _3599), vec3(_3597, _3598, _3599)));
                                float _3607 = dot(vec3(_950, _953, _956), vec3((-0.0) - _3045, (-0.0) - _3046, (-0.0) - _3047));
                                float _4708 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3610 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
                                float _3611 = dot(vec3(_950, _953, _956), vec3(_3603 * _3597, _3603 * _3598, _3603 * _3599));
                                float _4719 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
                                float _3618 = ((_3614 * _3614) * (_3596 + (-1.0))) + 1.0;
                                float _3619 = _3556 * _3595;
                                float _3620 = _3619 * _3619;
                                float _3626 = ((1.0 - _3620) * dot(vec3(_950, _953, _956), vec3(_3543, _3544, _3545))) + _3620;
                                float _4730 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3627 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
                                float _3628 = 1.0 - _3595;
                                float _3638 = (0.5 / (((_3627 * ((_3610 * _3628) + _3595)) + 9.9999999392252902907785028219223e-09) + (((_3627 * _3628) + _3595) * _3610))) * _3627;
                                float _4741 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3648 = (_3573 * _3550) * (((_3596 * 3.1415927410125732421875) * (isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0)))) / ((_3618 * _3618) * ((_3563 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3648 * _3431.x;
                                frontier_phi_73_pred_1 = _3648 * _3431.y;
                                frontier_phi_73_pred_2 = _3574 * _3419.z;
                                frontier_phi_73_pred_3 = _3574 * _3419.y;
                                frontier_phi_73_pred_4 = _3574 * _3419.x;
                                frontier_phi_73_pred_5 = _3648 * _3431.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3652 = frontier_phi_73_pred;
                            _3653 = frontier_phi_73_pred_1;
                            _3657 = frontier_phi_73_pred_2;
                            _3656 = frontier_phi_73_pred_3;
                            _3655 = frontier_phi_73_pred_4;
                            _3654 = frontier_phi_73_pred_5;
                            _3361 = _3655 + _3374;
                            _3362 = _3656 + _3375;
                            _3363 = _3657 + _3376;
                            _3358 = _3652 + _3371;
                            _3359 = _3653 + _3372;
                            _3360 = _3654 + _3373;
                            if (_3378 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3371 = _3358;
                                _3372 = _3359;
                                _3373 = _3360;
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3378;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3361;
                        frontier_phi_67_pred_1 = _3362;
                        frontier_phi_67_pred_2 = _3363;
                        frontier_phi_67_pred_3 = _3360;
                        frontier_phi_67_pred_4 = _3359;
                        frontier_phi_67_pred_5 = _3358;
                    }
                    _3026 = frontier_phi_67_pred;
                    _3028 = frontier_phi_67_pred_1;
                    _3030 = frontier_phi_67_pred_2;
                    _3024 = frontier_phi_67_pred_3;
                    _3022 = frontier_phi_67_pred_4;
                    _3020 = frontier_phi_67_pred_5;
                    uint _3165 = _3164 + 1u;
                    if (_3165 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3158 = _3020;
                        _3159 = _3022;
                        _3160 = _3024;
                        _3161 = _3026;
                        _3162 = _3028;
                        _3163 = _3030;
                        _3164 = _3165;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3028;
                frontier_phi_55_56_ladder_1 = _3030;
                frontier_phi_55_56_ladder_2 = _3026;
                frontier_phi_55_56_ladder_3 = _3024;
                frontier_phi_55_56_ladder_4 = _3022;
                frontier_phi_55_56_ladder_5 = _3020;
            }
            else
            {
                frontier_phi_55_56_ladder = _2906;
                frontier_phi_55_56_ladder_1 = _2908;
                frontier_phi_55_56_ladder_2 = _2904;
                frontier_phi_55_56_ladder_3 = _2902;
                frontier_phi_55_56_ladder_4 = _2900;
                frontier_phi_55_56_ladder_5 = _2898;
            }
            _3019 = frontier_phi_55_56_ladder_5;
            _3021 = frontier_phi_55_56_ladder_4;
            _3023 = frontier_phi_55_56_ladder_3;
            _3025 = frontier_phi_55_56_ladder_2;
            _3027 = frontier_phi_55_56_ladder;
            _3029 = frontier_phi_55_56_ladder_1;
        }
        float _3034 = isnan(1.0) ? _1055 : (isnan(_1055) ? 1.0 : min(_1055, 1.0));
        _2781 = (_3034 * _3025) + _2217;
        _2783 = (_3034 * _3027) + _2219;
        _2785 = (_3034 * _3029) + _2221;
        _2787 = ((_3019 * _1040) * _3034) + _2562;
        _2789 = ((_3021 * _1042) * _3034) + _2564;
        _2791 = ((_3023 * _1043) * _3034) + _2566;
    }
    else
    {
        _2781 = _2217;
        _2783 = _2219;
        _2785 = _2221;
        _2787 = _2562;
        _2789 = _2564;
        _2791 = _2566;
    }
    uint _2797 = _984 + uint(cbMatDynParam._m0[0u].w);
    float _2803 = cbInstanceData._m0[_2797].x * ((((cbMtdParam._m0[22u].x * _774.x) * cbMtdParam._m0[32u].x) * _795) + _559);
    float _2804 = cbInstanceData._m0[_2797].y * ((((cbMtdParam._m0[22u].y * _774.y) * cbMtdParam._m0[32u].x) * _795) + _560);
    float _2805 = cbInstanceData._m0[_2797].z * ((((cbMtdParam._m0[22u].z * _774.z) * cbMtdParam._m0[32u].x) * _795) + _561);
    float _4757 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
    float _4768 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
    float _4779 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _2822 = (((isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0))) * (_2781 + ((isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0))) * _1055))) + ((_2787 + ((isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + _2803;
    float _2824 = (_2804 + ((_2789 + ((isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2783 + ((isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0))) * _1055)));
    float _2826 = (_2805 + ((_2791 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1852)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0))) * (_2785 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1055)));
    float _4805 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2839 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
    uint _2840 = _982 + 6u;
    float _2848 = _927 / cbSceneParam._m0[86u].x;
    float _2849 = _928 / cbSceneParam._m0[86u].y;
    vec4 _2863 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, (log2((isnan(cbSceneParam._m0[77u].w) ? _882 : (isnan(_882) ? cbSceneParam._m0[77u].w : min(_882, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2865 = _2863.x;
    float _2866 = _2863.y;
    float _2867 = _2863.z;
    float _2868 = _2863.w;
    float _2960;
    float _2962;
    float _2964;
    float _2966;
    if (_882 > cbSceneParam._m0[78u].w)
    {
        float _2923 = isnan(_882) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _882 : min(cbSceneParam._m0[80u].w, _882));
        float _2924 = _2923 / _882;
        float _2935 = _2924 * _912;
        float _2936 = _913 * _2924;
        float _2937 = (-0.0) - _2936;
        float _2938 = _2924 * _914;
        float _2940 = (cbSceneParam._m0[77u].w * _2937) / _2923;
        float _2941 = _2940 + cbSceneParam._m0[79u].w;
        float _2942 = cbSceneParam._m0[79u].w - _2936;
        float _2948 = sqrt(((_2935 * _2935) + (_2936 * _2936)) + (_2938 * _2938));
        float _2951 = (1.0 - (cbSceneParam._m0[77u].w / _2923)) * _2948;
        float _2956 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2958 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3120;
        if (abs((_2937 - _2940) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3120 = ((((_2941 > 0.0) ? exp2(_2956 * _2941) : (2.0 - exp2(_2958 * _2941))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2951;
        }
        else
        {
            float _3080 = 1.0 / cbSceneParam._m0[80u].x;
            float _3081 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : max(_2941, _2942));
            float _3082 = isnan(_2942) ? _2941 : (isnan(_2941) ? _2942 : min(_2941, _2942));
            float _3091 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : min(_3081, 0.0));
            float _3092 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : min(_3082, 0.0));
            _3120 = ((abs(_2948 / _2937) * cbSceneParam._m0[80u].y) * ((((_3091 - _3092) * 2.0) - ((exp2(_2956 * (isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0)))) - exp2(_2956 * (isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0))))) * _3080)) - ((exp2(_2958 * _3091) - exp2(_2958 * _3092)) * _3080))) + (_2951 * cbSceneParam._m0[80u].z);
        }
        vec4 _3122 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2848, _2849, 1.0), 0.0);
        float _3131 = exp2((_3120 * (-1.44269502162933349609375)) * (1.0 - _3122.w));
        float _3132 = log2(_3131);
        float _3148 = log2(_2868);
        _2960 = (exp2(_3148 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].x)) * _3122.x) / cbSceneParam._m0[78u].x)) + _2865;
        _2962 = (exp2(_3148 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].y)) * _3122.y) / cbSceneParam._m0[78u].y)) + _2866;
        _2964 = (exp2(_3148 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].z)) * _3122.z) / cbSceneParam._m0[78u].z)) + _2867;
        _2966 = _3131 * _2868;
    }
    else
    {
        _2960 = _2865;
        _2962 = _2866;
        _2964 = _2867;
        _2966 = _2868;
    }
    float _2978 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2979 = _2978 == 3.0;
    float _2980 = log2(_2966);
    float _2984 = exp2(_2980 * cbSceneParam._m0[78u].x);
    float _2985 = exp2(_2980 * cbSceneParam._m0[78u].y);
    float _2986 = exp2(_2980 * cbSceneParam._m0[78u].z);
    float _2987 = _2984 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)));
    float _2988 = _2985 * (isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0)));
    float _2989 = _2986 * (isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0)));
    float _2998 = (_2978 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2998 * (_2979 ? _2987 : (_2987 + (cbSceneParam._m0[72u].w * _2960)));
    SV_Target.y = _2998 * (_2979 ? _2988 : (_2988 + (cbSceneParam._m0[72u].w * _2962)));
    SV_Target.z = _2998 * (_2979 ? _2989 : (_2989 + (cbSceneParam._m0[72u].w * _2964)));
    SV_Target.w = cbInstanceData._m0[_2840].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2803) * _2839) * _2984) * _2998;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2804) * _2839) * _2985) * _2998;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2805) * _2839) * _2986) * _2998;
    SV_Target_1.w = cbInstanceData._m0[_2840].w;
}


