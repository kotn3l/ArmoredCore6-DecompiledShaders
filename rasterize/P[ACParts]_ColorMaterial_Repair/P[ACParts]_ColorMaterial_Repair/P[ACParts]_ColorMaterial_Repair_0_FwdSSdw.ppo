#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1614;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _237 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _238 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _239 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _245 = inversesqrt(dot(vec3(_237, _238, _239), vec3(_237, _238, _239)));
    float _252 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _259 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _283 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _290 = log2(0.0);
    float _292 = exp2(_290 * cbMtdParam._m0[31u].z);
    float _296 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _292);
    float _297 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _292);
    float _298 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _292);
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _301 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _302 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    float _304 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    float _305 = isnan(1.0) ? _301 : (isnan(_301) ? 1.0 : min(_301, 1.0));
    vec4 _321 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _325 = _321.z;
    float _326 = _321.w;
    float _327 = 1.0 - _326;
    float _334 = exp2(log2((1.0 - (_327 * _325)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    float _348 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_327 * _327) * _325))) * cbMtdParam._m0[34u].w);
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    vec4 _363 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _366 = _363.y;
    float _369 = (_366 * ((isnan(1.0) ? _349 : (isnan(_349) ? 1.0 : min(_349, 1.0))) - _326)) + _326;
    vec4 _381 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[12u].x;
    _204[0u] = cbMtdParam._m0[12u].y;
    _205[0u] = cbMtdParam._m0[12u].z;
    _203[1u] = cbMtdParam._m0[13u].x;
    _204[1u] = cbMtdParam._m0[13u].y;
    _205[1u] = cbMtdParam._m0[13u].z;
    _203[2u] = cbMtdParam._m0[14u].x;
    _204[2u] = cbMtdParam._m0[14u].y;
    _205[2u] = cbMtdParam._m0[14u].z;
    _203[3u] = cbMtdParam._m0[15u].x;
    _204[3u] = cbMtdParam._m0[15u].y;
    _205[3u] = cbMtdParam._m0[15u].z;
    _203[4u] = cbMtdParam._m0[16u].x;
    _204[4u] = cbMtdParam._m0[16u].y;
    _205[4u] = cbMtdParam._m0[16u].z;
    _203[5u] = cbMtdParam._m0[11u].x;
    _204[5u] = cbMtdParam._m0[11u].y;
    _205[5u] = cbMtdParam._m0[11u].z;
    float _449 = (_363.x + (-0.02500000037252902984619140625)) * 8.0;
    float _451 = roundEven(_449);
    float _452 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    uint _455 = uint(int(isnan(5.0) ? _452 : (isnan(_452) ? 5.0 : min(_452, 5.0))));
    float _210[6];
    float _211[6];
    float _212[6];
    _210[0u] = 1.0;
    _211[0u] = 1.0;
    _212[0u] = 1.0;
    _210[1u] = cbMtdParam._m0[23u].x;
    _211[1u] = cbMtdParam._m0[23u].y;
    _212[1u] = cbMtdParam._m0[23u].z;
    _210[2u] = cbMtdParam._m0[21u].x;
    _211[2u] = cbMtdParam._m0[21u].y;
    _212[2u] = cbMtdParam._m0[21u].z;
    _210[3u] = cbMtdParam._m0[19u].x;
    _211[3u] = cbMtdParam._m0[19u].y;
    _212[3u] = cbMtdParam._m0[19u].z;
    _210[4u] = cbMtdParam._m0[18u].x;
    _211[4u] = cbMtdParam._m0[18u].y;
    _212[4u] = cbMtdParam._m0[18u].z;
    _210[5u] = cbMtdParam._m0[17u].x;
    _211[5u] = cbMtdParam._m0[17u].y;
    _212[5u] = cbMtdParam._m0[17u].z;
    float _545 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[38u].w * TEXCOORD.x) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[39u].x * TEXCOORD.y) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _546 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    uint _548 = uint(int(isnan(5.0) ? _546 : (isnan(_546) ? 5.0 : min(_546, 5.0))));
    float _206[6];
    _206[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[23u].w;
    _206[2u] = cbMtdParam._m0[21u].w;
    _206[3u] = cbMtdParam._m0[19u].w;
    _206[4u] = cbMtdParam._m0[18u].w;
    _206[5u] = cbMtdParam._m0[17u].w;
    float _585 = ((((_203[_455] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_210[_548] - _203[_455])) * _206[_455])) * _366) + cbMtdParam._m0[10u].x) * _381.x;
    float _586 = ((((_204[_455] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_211[_548] - _204[_455])) * _206[_455])) * _366) + cbMtdParam._m0[10u].y) * _381.y;
    float _587 = ((((_205[_455] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_212[_548] - _205[_455])) * _206[_455])) * _366) + cbMtdParam._m0[10u].z) * _381.z;
    vec4 _599 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _619 = (((cbMtdParam._m0[9u].x * _599.x) - _585) * _369) + _585;
    float _620 = (((cbMtdParam._m0[9u].y * _599.y) - _586) * _369) + _586;
    float _621 = (((cbMtdParam._m0[9u].z * _599.z) - _587) * _369) + _587;
    vec4 _633 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _653 = (((cbMtdParam._m0[20u].x * _633.x) - _619) * _336) + _619;
    float _654 = (((cbMtdParam._m0[20u].y * _633.y) - _620) * _336) + _620;
    float _655 = (((cbMtdParam._m0[20u].z * _633.z) - _621) * _336) + _621;
    vec4 _668 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = cbMtdParam._m0[24u].x;
    _208[0u] = cbMtdParam._m0[24u].y;
    _209[0u] = cbMtdParam._m0[24u].z;
    _207[1u] = cbMtdParam._m0[25u].x;
    _208[1u] = cbMtdParam._m0[25u].y;
    _209[1u] = cbMtdParam._m0[25u].z;
    _207[2u] = cbMtdParam._m0[26u].x;
    _208[2u] = cbMtdParam._m0[26u].y;
    _209[2u] = cbMtdParam._m0[26u].z;
    _207[3u] = cbMtdParam._m0[27u].x;
    _208[3u] = cbMtdParam._m0[27u].y;
    _209[3u] = cbMtdParam._m0[27u].z;
    _207[4u] = cbMtdParam._m0[28u].x;
    _208[4u] = cbMtdParam._m0[28u].y;
    _209[4u] = cbMtdParam._m0[28u].z;
    _207[5u] = cbMtdParam._m0[29u].x;
    _208[5u] = cbMtdParam._m0[29u].y;
    _209[5u] = cbMtdParam._m0[29u].z;
    float _755 = _207[_455] * _366;
    float _756 = _208[_455] * _366;
    float _757 = _209[_455] * _366;
    float _758 = _755 + ((_283.x * 4.5) * ((((cbMtdParam._m0[30u].x * _668.x) - _653) * _302) + _653));
    float _759 = _756 + ((_283.y * 4.5) * ((((cbMtdParam._m0[30u].y * _668.y) - _654) * _304) + _654));
    float _760 = _757 + ((_283.z * 4.5) * ((((cbMtdParam._m0[30u].z * _668.z) - _655) * _305) + _655));
    float _198[5];
    float _199[5];
    _198[0u] = cbMtdParam._m0[35u].y;
    _199[0u] = cbMtdParam._m0[35u].z;
    _198[1u] = cbMtdParam._m0[36u].w;
    _199[1u] = cbMtdParam._m0[37u].x;
    _198[2u] = cbMtdParam._m0[37u].y;
    _199[2u] = cbMtdParam._m0[37u].z;
    _198[3u] = cbMtdParam._m0[37u].w;
    _199[3u] = cbMtdParam._m0[38u].x;
    _198[4u] = cbMtdParam._m0[38u].y;
    _199[4u] = cbMtdParam._m0[38u].z;
    float _788 = roundEven(5.0 - _449);
    float _789 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _790 = isnan(4.0) ? _789 : (isnan(_789) ? 4.0 : min(_789, 4.0));
    float _792 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    uint _794 = uint(int(isnan(4.0) ? _792 : (isnan(_792) ? 4.0 : min(_792, 4.0))));
    float _803 = ((cbMtdParam._m0[39u].z - _199[_794]) * _369) + _199[_794];
    float _811 = ((cbMtdParam._m0[40u].x - _803) * _336) + _803;
    float _816 = ((cbMtdParam._m0[40u].z - _811) * _302) + _811;
    vec4 _830 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _832 = _830.x;
    float _833 = _830.y;
    float _835 = _830.z + _198[_794];
    vec4 _847 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _855 = (((cbMtdParam._m0[39u].y - _835) + _847.z) * _369) + _835;
    vec4 _867 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _875 = (((cbMtdParam._m0[39u].w - _855) + _867.z) * _336) + _855;
    float _881 = ((((_325 * 2.0) * _875) - _875) * cbMtdParam._m0[33u].w) + _875;
    vec4 _893 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _901 = (((_893.z + cbMtdParam._m0[40u].y) - _881) * _305) + _881;
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _963 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_932 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_936 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _978 = (-0.0) - ((_936 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _982 = (_936 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _983 = isnan(_982) ? _978 : (isnan(_978) ? _982 : min(_978, _982));
    float _4089 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _984 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _1009 = ((_847.x - _832) * _369) + _832;
    float _1010 = ((_847.y - _833) * _369) + _833;
    float _1015 = ((_867.x - _1009) * _336) + _1009;
    float _1016 = ((_867.y - _1010) * _336) + _1010;
    float _1025 = ((((_893.x - _1015) * _302) + _1015) * 2.0) + (-1.0);
    float _1026 = ((((_893.y - _1016) * _304) + _1016) * 2.0) + (-1.0);
    float _1027 = dot(vec2(_1025, _1026), vec2(_1025, _1026));
    float _4100 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
    float _1032 = sqrt(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))));
    float _1035 = (cbMtdParam._m0[34u].x * ((_321.x * 2.0) + (-1.0))) + _1025;
    float _1036 = (cbMtdParam._m0[34u].x * ((_321.y * 2.0) + (-1.0))) + _1026;
    float _1039 = fma(_1032, _252 * NORMAL.x, fma(_1036, _259 * TANGENT.x, (_245 * _237) * _1035));
    float _1042 = fma(_1032, _252 * NORMAL.y, fma(_1036, _259 * TANGENT.y, (_245 * _238) * _1035));
    float _1045 = fma(_1032, _252 * NORMAL.z, fma(_1036, _259 * TANGENT.z, (_245 * _239) * _1035));
    float _1049 = inversesqrt(dot(vec3(_1039, _1042, _1045), vec3(_1039, _1042, _1045)));
    float _1050 = _1049 * _1039;
    float _1051 = _1049 * _1042;
    float _1052 = _1049 * _1045;
    float _4111 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _1053 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4133 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4144 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4155 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _1057 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _1073 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1093 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1103 = cbSceneParam._m0[71u].x - (_932 / _1093);
    float _1104 = cbSceneParam._m0[71u].y - (_936 / _1093);
    float _1105 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1093);
    float _1109 = inversesqrt(dot(vec3(_1103, _1104, _1105), vec3(_1103, _1104, _1105)));
    float _1110 = _1103 * _1109;
    float _1111 = _1104 * _1109;
    float _1112 = _1105 * _1109;
    float _1118 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1119 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1121 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1123 = _1121.w;
    float _1141 = fma(_1052, cbSceneParam._m0[5u].z, fma(_1051, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1050));
    float _1144 = fma(_1052, cbSceneParam._m0[6u].z, fma(_1051, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1050));
    float _1147 = fma(_1052, cbSceneParam._m0[7u].z, fma(_1051, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1050));
    vec4 _1149 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1160 = (((_1149.y - _1053) + (_1149.w * _1053)) * cbMtdParam._m0[3u].x) + _1053;
    uint _1173 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1174 = _1173 + 9u;
    uint _1175 = _1174 + uint(cbMatDynParam._m0[0u].w);
    float _1181 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_1175].x;
    float _1182 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_1175].y;
    float _1183 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1175].z;
    float _4166 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1184 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    float _4177 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
    float _1185 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _4188 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1186 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    vec4 _1187 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1192 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1203 = (((_1192.x - _1057) + (_1192.w * _1057)) * cbMtdParam._m0[3u].x) + _1057;
    float _1216 = (cbMtdParam._m0[3u].x * (((_1184 * _1123) - _1184) + _1187.x)) + _1184;
    float _1217 = (cbMtdParam._m0[3u].x * (((_1185 * _1123) - _1185) + _1187.y)) + _1185;
    float _1218 = (cbMtdParam._m0[3u].x * (((_1186 * _1123) - _1186) + _1187.z)) + _1186;
    float _1219 = 1.0 - _1203;
    float _1220 = _1219 * _1216;
    float _1221 = _1219 * _1217;
    float _1222 = _1219 * _1218;
    float _1227 = (_1216 + (-0.039999999105930328369140625)) * _1203;
    float _1228 = (_1217 + (-0.039999999105930328369140625)) * _1203;
    float _1229 = (_1218 + (-0.039999999105930328369140625)) * _1203;
    float _1230 = _1227 + 0.039999999105930328369140625;
    float _1232 = _1228 + 0.039999999105930328369140625;
    float _1233 = _1229 + 0.039999999105930328369140625;
    vec4 _1242 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1118, cbSceneParam._m0[86u].y * _1119));
    float _1245 = _1242.x * TEXCOORD_5.w;
    float _1246 = dot(vec3(_1050, _1051, _1052), vec3(_1110, _1111, _1112));
    float _1249 = _1246 * 2.0;
    float _1253 = (_1249 * _1050) - _1110;
    float _1254 = (_1249 * _1051) - _1111;
    float _1255 = (_1249 * _1052) - _1112;
    float _1259 = abs(dot(vec3(_1110, _1111, _1112), vec3(_1050, _1051, _1052)));
    float _4199 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1261 = sqrt(_1160);
    float _1272 = exp2((_1261 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1261 * 3.0));
    float _1278 = (1.0 - _1272) * ((_1261 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1279 = _1272 * _1261;
    float _1307 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1311 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1315 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1613;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1340 = fma(_1315, cbModelParam._m0[26u].z, fma(_1311, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1307));
        float _1344 = fma(_1315, cbModelParam._m0[27u].z, fma(_1311, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1307));
        float _1348 = fma(_1315, cbModelParam._m0[28u].z, fma(_1311, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1307));
        float _1372 = _1307 + _1050;
        float _1373 = _1311 + _1051;
        float _1374 = _1315 + _1052;
        float _1384 = fma(_1374, cbModelParam._m0[26u].z, fma(_1373, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1372)) - _1340;
        float _1385 = fma(_1374, cbModelParam._m0[27u].z, fma(_1373, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1372)) - _1344;
        float _1386 = fma(_1374, cbModelParam._m0[28u].z, fma(_1373, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1372)) - _1348;
        float _1390 = inversesqrt(dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386)));
        float _1402 = ((_1390 * _1384) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1340 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1390 * _1385) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1344 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1390 * _1386) / cbModelParam._m0[34u].z) + ((((((_1348 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        float _1441 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1407.x + (-0.5));
        float _1443 = _1441 * (_1407.y + (-0.5));
        float _1444 = _1441 * (_1407.z + (-0.5));
        float _1451 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1414.x + (-0.5));
        float _1453 = _1451 * (_1414.y + (-0.5));
        float _1454 = _1451 * (_1414.z + (-0.5));
        float _1461 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1421.x + (-0.5));
        float _1463 = _1461 * (_1421.y + (-0.5));
        float _1464 = _1461 * (_1421.z + (-0.5));
        float _1471 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1428.x + (-0.5));
        float _1473 = _1471 * (_1428.y + (-0.5));
        float _1474 = _1471 * (_1428.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1495 = (dot(vec3(_1050, _1051, _1052), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4225 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1505 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4236 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4247 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))) * (_1507 + 1.0))) + _1512) * _1475;
        float _1522 = _1443 * 0.5;
        float _1523 = _1453 * 0.5;
        float _1524 = _1463 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_1050, _1051, _1052), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4258 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4269 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4280 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0))) * (_1549 + 1.0))) + _1554) * _1476;
        float _1564 = _1444 * 0.5;
        float _1565 = _1454 * 0.5;
        float _1566 = _1464 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_1050, _1051, _1052), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4291 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4302 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4313 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * (_1591 + 1.0))) + _1596) * _1477;
        _1613 = _1444;
        _1615 = _1443;
        _1616 = _1442;
        _1617 = _1454;
        _1618 = _1453;
        _1619 = _1452;
        _1620 = _1464;
        _1621 = _1463;
        _1622 = _1462;
        _1623 = _1477;
        _1624 = _1476;
        _1625 = _1475;
        _1626 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1627 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1628 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1614;
        _1615 = _1614;
        _1616 = _1614;
        _1617 = _1614;
        _1618 = _1614;
        _1619 = _1614;
        _1620 = _1614;
        _1621 = _1614;
        _1622 = _1614;
        _1623 = _1614;
        _1624 = _1614;
        _1625 = _1614;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1918;
    float _1919;
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1651 = fma(_1315, cbModelParam._m0[30u].z, fma(_1311, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1307));
        float _1655 = fma(_1315, cbModelParam._m0[31u].z, fma(_1311, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1307));
        float _1659 = fma(_1315, cbModelParam._m0[32u].z, fma(_1311, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1307));
        float _1681 = _1307 + _1050;
        float _1682 = _1311 + _1051;
        float _1683 = _1315 + _1052;
        float _1693 = fma(_1683, cbModelParam._m0[30u].z, fma(_1682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1681)) - _1651;
        float _1694 = fma(_1683, cbModelParam._m0[31u].z, fma(_1682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1681)) - _1655;
        float _1695 = fma(_1683, cbModelParam._m0[32u].z, fma(_1682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1681)) - _1659;
        float _1699 = inversesqrt(dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695)));
        float _1711 = ((_1699 * _1693) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1651 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1712 = ((_1699 * _1694) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1655 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1713 = ((_1699 * _1695) / cbModelParam._m0[35u].z) + ((((((_1659 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1715 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1722 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1729 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        vec4 _1736 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1711, _1712, _1713), 0.0);
        float _1748 = exp2((_1715.w + (-0.5)) * 20.0) * 2.0;
        float _1749 = _1748 * (_1715.x + (-0.5));
        float _1750 = _1748 * (_1715.y + (-0.5));
        float _1751 = _1748 * (_1715.z + (-0.5));
        float _1758 = exp2((_1722.w + (-0.5)) * 20.0) * 2.0;
        float _1759 = _1758 * (_1722.x + (-0.5));
        float _1760 = _1758 * (_1722.y + (-0.5));
        float _1761 = _1758 * (_1722.z + (-0.5));
        float _1768 = exp2((_1729.w + (-0.5)) * 20.0) * 2.0;
        float _1769 = _1768 * (_1729.x + (-0.5));
        float _1770 = _1768 * (_1729.y + (-0.5));
        float _1771 = _1768 * (_1729.z + (-0.5));
        float _1778 = exp2((_1736.w + (-0.5)) * 20.0) * 2.0;
        float _1779 = _1778 * (_1736.x + (-0.5));
        float _1780 = _1778 * (_1736.y + (-0.5));
        float _1781 = _1778 * (_1736.z + (-0.5));
        float _1782 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
        float _1783 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
        float _1784 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1785 = _1749 * 0.5;
        float _1786 = _1759 * 0.5;
        float _1787 = _1769 * 0.5;
        float _1788 = dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787));
        float _1793 = (_1788 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1788);
        float _1801 = (dot(vec3(_1050, _1051, _1052), vec3(_1793 * _1785, _1793 * _1786, _1793 * _1787)) + 1.0) * 0.5;
        float _4354 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
        float _1810 = sqrt(((_1786 * _1786) + (_1785 * _1785)) + (_1787 * _1787)) / (_1782 + 9.9999997473787516355514526367188e-06);
        float _4365 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0));
        float _1812 = _1811 * 2.0;
        float _1816 = (1.0 - _1811) / (_1811 + 1.0);
        float _4376 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
        float _1817 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1826 = ((((1.0 - _1817) * (_1812 + 2.0)) * exp2(log2(isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * (_1812 + 1.0))) + _1817) * _1782;
        float _1827 = _1750 * 0.5;
        float _1828 = _1760 * 0.5;
        float _1829 = _1770 * 0.5;
        float _1830 = dot(vec3(_1827, _1828, _1829), vec3(_1827, _1828, _1829));
        float _1835 = (_1830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1830);
        float _1843 = (dot(vec3(_1050, _1051, _1052), vec3(_1835 * _1827, _1835 * _1828, _1835 * _1829)) + 1.0) * 0.5;
        float _4387 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
        float _1852 = sqrt(((_1828 * _1828) + (_1827 * _1827)) + (_1829 * _1829)) / (_1783 + 9.9999997473787516355514526367188e-06);
        float _4398 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1853 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1854 = _1853 * 2.0;
        float _1858 = (1.0 - _1853) / (_1853 + 1.0);
        float _4409 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
        float _1859 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1868 = ((((1.0 - _1859) * (_1854 + 2.0)) * exp2(log2(isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * (_1854 + 1.0))) + _1859) * _1783;
        float _1869 = _1751 * 0.5;
        float _1870 = _1761 * 0.5;
        float _1871 = _1771 * 0.5;
        float _1872 = dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871));
        float _1877 = (_1872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1872);
        float _1885 = (dot(vec3(_1050, _1051, _1052), vec3(_1877 * _1869, _1877 * _1870, _1877 * _1871)) + 1.0) * 0.5;
        float _4420 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1894 = sqrt(((_1870 * _1870) + (_1869 * _1869)) + (_1871 * _1871)) / (_1784 + 9.9999997473787516355514526367188e-06);
        float _4431 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
        float _1895 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1896 = _1895 * 2.0;
        float _1900 = (1.0 - _1895) / (_1895 + 1.0);
        float _4442 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
        float _1901 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1910 = ((((1.0 - _1901) * (_1896 + 2.0)) * exp2(log2(isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_1896 + 1.0))) + _1901) * _1784;
        _1918 = _1751;
        _1919 = _1750;
        _1920 = _1749;
        _1921 = _1761;
        _1922 = _1760;
        _1923 = _1759;
        _1924 = _1771;
        _1925 = _1770;
        _1926 = _1769;
        _1927 = _1784;
        _1928 = _1783;
        _1929 = _1782;
        _1930 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0)));
        _1931 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)));
        _1932 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)));
    }
    else
    {
        _1918 = _1614;
        _1919 = _1614;
        _1920 = _1614;
        _1921 = _1614;
        _1922 = _1614;
        _1923 = _1614;
        _1924 = _1614;
        _1925 = _1614;
        _1926 = _1614;
        _1927 = _1614;
        _1928 = _1614;
        _1929 = _1614;
        _1930 = 0.0;
        _1931 = 0.0;
        _1932 = 0.0;
    }
    float _1942 = (cbModelParam._m0[1u].x * (_1930 - _1626)) + _1626;
    float _1943 = (cbModelParam._m0[1u].x * (_1931 - _1627)) + _1627;
    float _1944 = (cbModelParam._m0[1u].x * (_1932 - _1628)) + _1628;
    float _1965 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1943, cbSceneParam._m0[89u].y, _1942 * cbSceneParam._m0[89u].x));
    float _1968 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1943, cbSceneParam._m0[90u].y, _1942 * cbSceneParam._m0[90u].x));
    float _1971 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1943, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1942));
    float _1984 = _1253 * 0.5;
    float _1985 = _1254 * 0.5;
    float _1986 = _1255 * 0.5;
    float _1987 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1920, _1923, _1926, _1929));
    float _1990 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1919, _1922, _1925, _1928));
    float _1993 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1918, _1921, _1924, _1927));
    float _2027;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2000 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1613, _1617, _1620, _1623));
        float _2004 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1615, _1618, _1621, _1624));
        float _2008 = dot(vec4(_1984, _1985, _1986, 1.0), vec4(_1616, _1619, _1622, _1625));
        float _2015 = dot(vec4(cbModelParam._m0[39u]), vec4(_1984, _1985, _1986, 1.0));
        _2027 = dot(vec3(isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)), isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2015) ? 0.0 : (isnan(0.0) ? _2015 : max(0.0, _2015))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2027 = 1.0;
    }
    float _2038;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2029 = dot(vec4(cbModelParam._m0[40u]), vec4(_1984, _1985, _1986, 1.0));
        _2038 = dot(vec3(isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0)), isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0)), isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2029) ? 0.0 : (isnan(0.0) ? _2029 : max(0.0, _2029))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2038 = 1.0;
    }
    float _2042 = (_2038 * cbModelParam._m0[1u].x) + (_2027 * (1.0 - cbModelParam._m0[1u].x));
    float _2052 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1160);
    float _2053 = isnan(_2052) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2052 : min(cbModelParam._m0[25u].z, _2052));
    float _2133;
    float _2135;
    float _2137;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2100 = fma(_1315, cbModelParam._m0[13u].z, fma(_1311, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1307)) + cbModelParam._m0[13u].w;
        float _2104 = fma(_1315, cbModelParam._m0[14u].z, fma(_1311, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1307)) + cbModelParam._m0[14u].w;
        float _2108 = fma(_1315, cbModelParam._m0[15u].z, fma(_1311, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1307)) + cbModelParam._m0[15u].w;
        float _2111 = fma(_1255, cbModelParam._m0[13u].z, fma(_1254, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1253));
        float _2114 = fma(_1255, cbModelParam._m0[14u].z, fma(_1254, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1253));
        float _2117 = fma(_1255, cbModelParam._m0[15u].z, fma(_1254, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1253));
        float _2145;
        if (_2111 > 0.0)
        {
            _2145 = abs((1.0 - _2100) / _2111);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2111 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2100 + 1.0) / _2111);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2145 = frontier_phi_14_12_ladder;
        }
        float _2368;
        if (_2114 > 0.0)
        {
            _2368 = abs((1.0 - _2104) / _2114);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2114 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2104 + 1.0) / _2114);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2368 = frontier_phi_23_19_ladder;
        }
        float _2625;
        if (_2117 > 0.0)
        {
            _2625 = abs((1.0 - _2108) / _2117);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2108 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2625 = frontier_phi_35_30_ladder;
        }
        float _2627 = isnan(_2368) ? _2145 : (isnan(_2145) ? _2368 : min(_2145, _2368));
        float _2628 = isnan(_2625) ? _2627 : (isnan(_2627) ? _2625 : min(_2627, _2625));
        float _2632 = (_2628 * _2111) + _2100;
        float _2633 = (_2628 * _2114) + _2104;
        float _2634 = (_2628 * _2117) + _2108;
        float _2635 = _2628 * 9.9999997473787516355514526367188e-05;
        float _2637 = (-1.0) - _2635;
        float _2639 = _2635 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2634 > _2639) || ((_2634 < _2637) || ((_2633 > _2639) || ((_2633 < _2637) || ((_2632 < _2637) || (_2632 > _2639))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2634, cbModelParam._m0[9u].z, fma(_2633, cbModelParam._m0[9u].y, _2632 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2634, cbModelParam._m0[10u].z, fma(_2633, cbModelParam._m0[10u].y, _2632 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2634, cbModelParam._m0[11u].z, fma(_2633, cbModelParam._m0[11u].y, _2632 * cbModelParam._m0[11u].x))), _2053);
            frontier_phi_13_35_ladder = _2762.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2762.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2762.x * cbModelParam._m0[1u].y;
        }
        _2133 = frontier_phi_13_35_ladder_2;
        _2135 = frontier_phi_13_35_ladder_1;
        _2137 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2121 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1253, _1254, _1255), _2053);
        _2133 = _2121.x * cbModelParam._m0[1u].y;
        _2135 = _2121.y * cbModelParam._m0[1u].y;
        _2137 = _2121.z * cbModelParam._m0[1u].y;
    }
    float _2141 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1160);
    float _2142 = isnan(_2141) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2141 : min(cbModelParam._m0[25u].w, _2141));
    float _2231;
    float _2233;
    float _2235;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2195 = fma(_1315, cbModelParam._m0[21u].z, fma(_1311, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1307)) + cbModelParam._m0[21u].w;
        float _2199 = fma(_1315, cbModelParam._m0[22u].z, fma(_1311, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1307)) + cbModelParam._m0[22u].w;
        float _2203 = fma(_1315, cbModelParam._m0[23u].z, fma(_1311, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1307)) + cbModelParam._m0[23u].w;
        float _2206 = fma(_1255, cbModelParam._m0[21u].z, fma(_1254, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1253));
        float _2209 = fma(_1255, cbModelParam._m0[22u].z, fma(_1254, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1253));
        float _2212 = fma(_1255, cbModelParam._m0[23u].z, fma(_1254, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1253));
        float _2373;
        if (_2206 > 0.0)
        {
            _2373 = abs((1.0 - _2195) / _2206);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2195 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2373 = frontier_phi_25_21_ladder;
        }
        float _2652;
        if (_2209 > 0.0)
        {
            _2652 = abs((1.0 - _2199) / _2209);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2199 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2652 = frontier_phi_37_32_ladder;
        }
        float _2865;
        if (_2212 > 0.0)
        {
            _2865 = abs((1.0 - _2203) / _2212);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2212 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2203 + 1.0) / _2212);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2865 = frontier_phi_46_43_ladder;
        }
        float _2867 = isnan(_2652) ? _2373 : (isnan(_2373) ? _2652 : min(_2373, _2652));
        float _2868 = isnan(_2865) ? _2867 : (isnan(_2867) ? _2865 : min(_2867, _2865));
        float _2872 = (_2868 * _2206) + _2195;
        float _2873 = (_2868 * _2209) + _2199;
        float _2874 = (_2868 * _2212) + _2203;
        float _2875 = _2868 * 9.9999997473787516355514526367188e-05;
        float _2876 = (-1.0) - _2875;
        float _2878 = _2875 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2874 > _2878) || ((_2874 < _2876) || ((_2873 > _2878) || ((_2873 < _2876) || ((_2872 < _2876) || (_2872 > _2878))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3102 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2874, cbModelParam._m0[17u].z, fma(_2873, cbModelParam._m0[17u].y, _2872 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2874, cbModelParam._m0[18u].z, fma(_2873, cbModelParam._m0[18u].y, _2872 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2874, cbModelParam._m0[19u].z, fma(_2873, cbModelParam._m0[19u].y, _2872 * cbModelParam._m0[19u].x))), _2142);
            frontier_phi_22_46_ladder = _3102.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3102.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3102.x * cbModelParam._m0[1u].z;
        }
        _2231 = frontier_phi_22_46_ladder_2;
        _2233 = frontier_phi_22_46_ladder_1;
        _2235 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2215 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1253, _1254, _1255), _2142);
        _2231 = _2215.x * cbModelParam._m0[1u].z;
        _2233 = _2215.y * cbModelParam._m0[1u].z;
        _2235 = _2215.z * cbModelParam._m0[1u].z;
    }
    float _2248 = (((_1278 * _1230) + _1279) * _1245) * ((cbModelParam._m0[1u].w * (_2231 - _2133)) + _2133);
    float _2250 = (((_1278 * _1232) + _1279) * _1245) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2252 = (((_1278 * _1233) + _1279) * _1245) * ((cbModelParam._m0[1u].w * (_2235 - _2137)) + _2137);
    float _2255 = fma(_2252, cbSceneParam._m0[89u].z, fma(_2250, cbSceneParam._m0[89u].y, _2248 * cbSceneParam._m0[89u].x));
    float _2258 = fma(_2252, cbSceneParam._m0[90u].z, fma(_2250, cbSceneParam._m0[90u].y, _2248 * cbSceneParam._m0[90u].x));
    float _2261 = fma(_2252, cbSceneParam._m0[91u].z, fma(_2250, cbSceneParam._m0[91u].y, _2248 * cbSceneParam._m0[91u].x));
    vec4 _2269 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1118, _1119));
    float _2271 = _2269.w;
    float _2283 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2271);
    float _2284 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2271);
    float _2285 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2271);
    uvec4 _2289 = floatBitsToUint(cbInstanceData._m0[_1173 + 5u]);
    uint _2291 = _2289.x * 14u;
    uint _2292 = _2291 + 13u;
    float _2299 = _1245 + (-1.0);
    float _2304 = (cbLight._m0[_2292].x * _2299) + 1.0;
    float _2305 = (cbLight._m0[_2292].y * _2299) + 1.0;
    float _2306 = (cbLight._m0[_2292].z * _2299) + 1.0;
    float _2307 = (cbLight._m0[_2292].w * _2299) + 1.0;
    uint _2308 = _2291 + 5u;
    float _2314 = isnan(1.0) ? _2305 : (isnan(_2305) ? 1.0 : min(_2305, 1.0));
    uint _2318 = _2291 + 4u;
    float _2327 = isnan(1.0) ? _2304 : (isnan(_2304) ? 1.0 : min(_2304, 1.0));
    uint _2331 = _2291 | 1u;
    float _2342 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_1050, _1051, _1052));
    float _2345 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_1050, _1051, _1052));
    float _4578 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _4589 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2350 = (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * 0.3183098733425140380859375;
    float _2352 = (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0))) * 0.3183098733425140380859375;
    float _2359 = ((cbLight._m0[_2308].x * _2314) * _2352) + (((cbLight._m0[_2318].x * _2283) * _2327) * _2350);
    float _2360 = ((_2314 * cbLight._m0[_2308].y) * _2352) + (((cbLight._m0[_2318].y * _2284) * _2327) * _2350);
    float _2361 = ((_2314 * cbLight._m0[_2308].z) * _2352) + (((cbLight._m0[_2318].z * _2285) * _2327) * _2350);
    uvec4 _2365 = floatBitsToUint(cbLight._m0[_2291 + 12u]);
    bool _2367 = _2365.x == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2367)
    {
        _2378 = _2359;
        _2380 = _2360;
        _2382 = _2361;
    }
    else
    {
        uint _2386 = _2291 + 6u;
        float _2402 = (dot(vec3(cbLight._m0[_2291 + 2u].xyz), vec3(_1050, _1051, _1052)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4600 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
        float _2405 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2378 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2359;
        _2380 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2360;
        _2382 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2361;
    }
    bool _2385 = _2365.y == 0u;
    float _2423;
    float _2425;
    float _2427;
    if (_2385)
    {
        _2423 = _2378;
        _2425 = _2380;
        _2427 = _2382;
    }
    else
    {
        uint _2596 = _2291 + 7u;
        float _2612 = (dot(vec3(cbLight._m0[_2291 + 3u].xyz), vec3(_1050, _1051, _1052)) * 0.5) + 0.5;
        float _2613 = _2612 * _2612;
        float _4616 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2614 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2615 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2423 = (((cbLight._m0[_2596].x * 0.3183098733425140380859375) * _2614) * _2615) + _2378;
        _2425 = (((cbLight._m0[_2596].y * 0.3183098733425140380859375) * _2614) * _2615) + _2380;
        _2427 = (((cbLight._m0[_2596].z * 0.3183098733425140380859375) * _2614) * _2615) + _2382;
    }
    uint _2430 = _2291 + 8u;
    float _2443 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2291].w)) * _1160) * 0.949999988079071044921875);
    float _2444 = _2443 * _2443;
    float _2445 = cbLight._m0[_2291].x + _1110;
    float _2446 = cbLight._m0[_2291].y + _1111;
    float _2447 = cbLight._m0[_2291].z + _1112;
    float _2451 = inversesqrt(dot(vec3(_2445, _2446, _2447), vec3(_2445, _2446, _2447)));
    float _2452 = _2451 * _2445;
    float _2453 = _2451 * _2446;
    float _2454 = _2451 * _2447;
    float _2455 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2291].xyz));
    float _4632 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _4643 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
    float _2459 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
    float _2460 = dot(vec3(_1050, _1051, _1052), vec3(_2452, _2453, _2454));
    float _4654 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2291].xyz), vec3(_2452, _2453, _2454));
    float _4665 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2444 * _2444;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0);
    float _2481 = 0.959999978542327880859375 - _1227;
    float _2483 = 0.959999978542327880859375 - _1228;
    float _2484 = 0.959999978542327880859375 - _1229;
    float _2491 = 1.0 - _2444;
    float _2502 = (0.5 / (((_2459 * ((_2458 * _2491) + _2444)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2491) + _2444) * _2458))) * _2458;
    float _4676 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2504 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    uint _2518 = _2291 + 9u;
    float _2529 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _1160) * 0.949999988079071044921875);
    float _2530 = _2529 * _2529;
    float _2531 = cbLight._m0[_2331].x + _1110;
    float _2532 = cbLight._m0[_2331].y + _1111;
    float _2533 = cbLight._m0[_2331].z + _1112;
    float _2537 = inversesqrt(dot(vec3(_2531, _2532, _2533), vec3(_2531, _2532, _2533)));
    float _2538 = _2537 * _2531;
    float _2539 = _2537 * _2532;
    float _2540 = _2537 * _2533;
    float _2541 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2331].xyz));
    float _4687 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
    float _2544 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2545 = dot(vec3(_1050, _1051, _1052), vec3(_2538, _2539, _2540));
    float _4698 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2548 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2549 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2538, _2539, _2540));
    float _4709 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2553 = _2530 * _2530;
    float _2557 = ((_2548 * _2548) * (_2553 + (-1.0))) + 1.0;
    float _2564 = exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0);
    float _2571 = 1.0 - _2530;
    float _2581 = (0.5 / (((_2459 * ((_2544 * _2571) + _2530)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2571) + _2530) * _2544))) * _2544;
    float _4720 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2583 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2553 / ((_2557 * _2557) * 3.141590118408203125));
    float _2593 = (((((_2564 * _2481) + _1230) * cbLight._m0[_2518].x) * _2583) * _2314) + ((((cbLight._m0[_2430].x * _2283) * ((_2480 * _2481) + _1230)) * _2504) * _2327);
    float _2594 = (((((_2564 * _2483) + _1232) * cbLight._m0[_2518].y) * _2583) * _2314) + ((((cbLight._m0[_2430].y * _2284) * ((_2480 * _2483) + _1232)) * _2504) * _2327);
    float _2595 = (((((_2564 * _2484) + _1233) * cbLight._m0[_2518].z) * _2583) * _2314) + ((((cbLight._m0[_2430].z * _2285) * ((_2480 * _2484) + _1233)) * _2504) * _2327);
    float _2657;
    float _2659;
    float _2661;
    if (_2367)
    {
        _2657 = _2593;
        _2659 = _2594;
        _2661 = _2595;
    }
    else
    {
        uint _2663 = _2291 + 2u;
        uint _2667 = _2291 + 10u;
        float _2681 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2663].w)) * _1160) * 0.949999988079071044921875);
        float _2682 = _2681 * _2681;
        float _2683 = cbLight._m0[_2663].x + _1110;
        float _2684 = cbLight._m0[_2663].y + _1111;
        float _2685 = cbLight._m0[_2663].z + _1112;
        float _2689 = inversesqrt(dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685)));
        float _2690 = _2689 * _2683;
        float _2691 = _2689 * _2684;
        float _2692 = _2689 * _2685;
        float _2693 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2663].xyz));
        float _4731 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2696 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2697 = dot(vec3(_1050, _1051, _1052), vec3(_2690, _2691, _2692));
        float _4742 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
        float _2701 = dot(vec3(cbLight._m0[_2663].xyz), vec3(_2690, _2691, _2692));
        float _4753 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2705 = _2682 * _2682;
        float _2709 = ((_2700 * _2700) * (_2705 + (-1.0))) + 1.0;
        float _2716 = exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0);
        float _2723 = 1.0 - _2682;
        float _2733 = (0.5 / (((_2459 * ((_2696 * _2723) + _2682)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2723) + _2682) * _2696))) * _2696;
        float _4764 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
        float _2735 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2705 / ((_2709 * _2709) * 3.141590118408203125));
        float _2736 = isnan(1.0) ? _2306 : (isnan(_2306) ? 1.0 : min(_2306, 1.0));
        _2657 = (((((_2716 * _2481) + _1230) * cbLight._m0[_2667].x) * _2735) * _2736) + _2593;
        _2659 = (((((_2716 * _2483) + _1232) * cbLight._m0[_2667].y) * _2735) * _2736) + _2594;
        _2661 = (((((_2716 * _2484) + _1233) * cbLight._m0[_2667].z) * _2735) * _2736) + _2595;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2385)
    {
        _2771 = _2657;
        _2773 = _2659;
        _2775 = _2661;
    }
    else
    {
        uint _2782 = _2291 + 3u;
        uint _2786 = _2291 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _1160) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _1110;
        float _2803 = cbLight._m0[_2782].y + _1111;
        float _2804 = cbLight._m0[_2782].z + _1112;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_1050, _1051, _1052), vec3(cbLight._m0[_2782].xyz));
        float _4780 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
        float _2816 = dot(vec3(_1050, _1051, _1052), vec3(_2809, _2810, _2811));
        float _4791 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4802 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2835 = exp2(log2(1.0 - (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0)))) * 5.0);
        float _2842 = 1.0 - _2801;
        float _2852 = (0.5 / (((_2459 * ((_2815 * _2842) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2459 * _2842) + _2801) * _2815))) * _2815;
        float _4813 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2307 : (isnan(_2307) ? 1.0 : min(_2307, 1.0));
        _2771 = (((((_2835 * _2481) + _1230) * cbLight._m0[_2786].x) * _2854) * _2855) + _2657;
        _2773 = (((((_2835 * _2483) + _1232) * cbLight._m0[_2786].y) * _2854) * _2855) + _2659;
        _2775 = (((((_2835 * _2484) + _1233) * cbLight._m0[_2786].z) * _2854) * _2855) + _2661;
    }
    float _2990;
    float _2992;
    float _2994;
    float _2996;
    float _2998;
    float _3000;
    if (_2289.y == 0u)
    {
        float _2930 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2931 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2930;
        float _2932 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2930;
        float _2933 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2930;
        uvec4 _2945 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2946 = _2945.x;
        uint _2957 = uint((float(_2945.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1119) / _2946))) + floor(float(uint(cbSceneParam._m0[85u].x * _1118) / _2946)));
        float _2967 = (log2(_2933 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2968 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
        uint _2971 = uint(isnan(14.0) ? _2968 : (isnan(_2968) ? 14.0 : min(_2968, 14.0)));
        uvec4 _2976 = texelFetch(g_lightClusterGridBuffer, int(((_2971 << 2u) + (_2957 << 6u)) >> 2u));
        uint _2977 = _2976.x;
        uint _2978 = _2945.z;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        if (((((1u << ((_2978 >> 4u) & 15u)) + 4294967295u) & _2977) == 0u) || ((_2978 & 240u) == 0u))
        {
            _3107 = 0.0;
            _3109 = 0.0;
            _3111 = 0.0;
            _3113 = 0.0;
            _3115 = 0.0;
            _3117 = 0.0;
        }
        else
        {
            float _3108;
            float _3110;
            float _3112;
            float _3114;
            float _3116;
            float _3118;
            float _3260 = 0.0;
            float _3261 = 0.0;
            float _3262 = 0.0;
            float _3263 = 0.0;
            float _3264 = 0.0;
            float _3265 = 0.0;
            uint _3266 = 0u;
            uint _3275;
            bool _3276;
            for (;;)
            {
                _3275 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3266 << 2u)) >> 2u)).x;
                _3276 = _3275 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3276)
                {
                    frontier_phi_61_pred = _3260;
                    frontier_phi_61_pred_1 = _3265;
                    frontier_phi_61_pred_2 = _3264;
                    frontier_phi_61_pred_3 = _3263;
                    frontier_phi_61_pred_4 = _3262;
                    frontier_phi_61_pred_5 = _3261;
                }
                else
                {
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    uint _3390;
                    _3384 = _3260;
                    _3385 = _3261;
                    _3386 = _3262;
                    _3387 = _3263;
                    _3388 = _3264;
                    _3389 = _3265;
                    _3390 = _3275;
                    float _3316;
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    for (;;)
                    {
                        uint _3394 = uint(findLSB(_3390)) + (_3266 << 5u);
                        uint _3391 = (_3390 + 4294967295u) & _3390;
                        uint _3396 = _3394 * 48u;
                        vec4 _3410 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3396)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3396 + 3u)).x));
                        uint _3416 = (_3394 * 48u) + 4u;
                        vec4 _3429 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3416)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3416 + 3u)).x));
                        uint _3435 = (_3394 * 48u) + 8u;
                        vec3 _3446 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3435)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3435 + 2u)).x));
                        float _3450 = _3410.x - _2931;
                        float _3451 = _3410.y - _2932;
                        float _3452 = _3410.z - _2933;
                        float _3453 = dot(vec3(_3450, _3451, _3452), vec3(_3450, _3451, _3452));
                        float _3456 = inversesqrt(_3453);
                        float _3457 = _3456 * _3450;
                        float _3458 = _3456 * _3451;
                        float _3459 = _3456 * _3452;
                        float _3460 = dot(vec3(_1141, _1144, _1147), vec3(_3457, _3458, _3459));
                        float _3465 = 1.0 - (_3453 * _3410.w);
                        float _4839 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3466 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
                        float _3467 = sqrt(_3453) * _3429.w;
                        float _3470 = 1.39999997615814208984375 / (_3467 + 1.39999997615814208984375);
                        float _3471 = _3470 * _3470;
                        float _3474 = ((1.0 - _3471) * _3460) + _3471;
                        float _3477 = _3467 * _3467;
                        float _3481 = ((isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0))) * _3466) / ((_3477 * 0.699999988079071044921875) + 1.0);
                        float _3485 = (-0.0) - _2931;
                        float _3486 = (-0.0) - _2932;
                        float _3487 = (-0.0) - _2933;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3492 = _3491 * _3485;
                        float _3493 = _3491 * _3486;
                        float _3494 = _3491 * _3487;
                        float _3502 = exp2(log2(1.0 / ((_3477 * 3.5) + 5.0)) * 0.25);
                        float _3503 = 1.0 - _1261;
                        float _3510 = sqrt(1.0 - ((1.0 - (_3503 * _3503)) * (1.0 - (_3502 * _3502))));
                        float _3511 = _3510 * _3510;
                        float _3512 = _3511 * _3511;
                        float _3513 = _3492 + _3457;
                        float _3514 = _3493 + _3458;
                        float _3515 = _3494 + _3459;
                        float _3519 = inversesqrt(dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515)));
                        float _3523 = dot(vec3(_1141, _1144, _1147), vec3(_3492, _3493, _3494));
                        float _4855 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3526 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3527 = dot(vec3(_1141, _1144, _1147), vec3(_3519 * _3513, _3519 * _3514, _3519 * _3515));
                        float _4866 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                        float _3530 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
                        float _3534 = ((_3530 * _3530) * (_3512 + (-1.0))) + 1.0;
                        float _3535 = _3470 * _3511;
                        float _3536 = _3535 * _3535;
                        float _3539 = ((1.0 - _3536) * _3460) + _3536;
                        float _4877 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                        float _3540 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3541 = 1.0 - _3511;
                        float _3551 = (0.5 / (((_3540 * ((_3526 * _3541) + _3511)) + 9.9999999392252902907785028219223e-09) + (((_3540 * _3541) + _3511) * _3526))) * _3540;
                        float _4888 = isnan(0.0) ? _3551 : (isnan(_3551) ? 0.0 : max(_3551, 0.0));
                        float _3562 = (((_3512 * 3.1415927410125732421875) * (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0)))) / ((_3534 * _3534) * ((_3477 * 2.1991131305694580078125) + 3.141590118408203125))) * _3466;
                        _3319 = (_3481 * _3429.x) + _3387;
                        _3320 = (_3481 * _3429.y) + _3388;
                        _3321 = (_3481 * _3429.z) + _3389;
                        _3316 = (_3562 * _3446.x) + _3384;
                        _3317 = (_3562 * _3446.y) + _3385;
                        _3318 = (_3562 * _3446.z) + _3386;
                        if (_3391 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3384 = _3316;
                            _3385 = _3317;
                            _3386 = _3318;
                            _3387 = _3319;
                            _3388 = _3320;
                            _3389 = _3321;
                            _3390 = _3391;
                        }
                    }
                    frontier_phi_61_pred = _3316;
                    frontier_phi_61_pred_1 = _3321;
                    frontier_phi_61_pred_2 = _3320;
                    frontier_phi_61_pred_3 = _3319;
                    frontier_phi_61_pred_4 = _3318;
                    frontier_phi_61_pred_5 = _3317;
                }
                _3108 = frontier_phi_61_pred;
                _3118 = frontier_phi_61_pred_1;
                _3116 = frontier_phi_61_pred_2;
                _3114 = frontier_phi_61_pred_3;
                _3112 = frontier_phi_61_pred_4;
                _3110 = frontier_phi_61_pred_5;
                uint _3267 = _3266 + 1u;
                if (_3267 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3260 = _3108;
                    _3261 = _3110;
                    _3262 = _3112;
                    _3263 = _3114;
                    _3264 = _3116;
                    _3265 = _3118;
                    _3266 = _3267;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3107 = _3108;
            _3109 = _3110;
            _3111 = _3112;
            _3113 = _3114;
            _3115 = _3116;
            _3117 = _3118;
        }
        uvec4 _3121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3122 = _3121.z;
        uint _3124 = (_3122 >> 8u) & 15u;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        float _3238;
        if (((4294967295u << _3124) & _2977) == 0u)
        {
            _3228 = _3107;
            _3230 = _3109;
            _3232 = _3111;
            _3234 = _3113;
            _3236 = _3115;
            _3238 = _3117;
        }
        else
        {
            float _3253 = inversesqrt(dot(vec3(_2931, _2932, _2933), vec3(_2931, _2932, _2933)));
            float _3254 = _3253 * _2931;
            float _3255 = _3253 * _2932;
            float _3256 = _3253 * _2933;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3124 < ((_3122 >> 12u) & 15u))
            {
                float _3229;
                float _3231;
                float _3233;
                float _3235;
                float _3237;
                float _3239;
                float _3367 = _3107;
                float _3368 = _3109;
                float _3369 = _3111;
                float _3370 = _3113;
                float _3371 = _3115;
                float _3372 = _3117;
                uint _3373 = _3124;
                uint _3382;
                bool _3383;
                for (;;)
                {
                    _3382 = texelFetch(g_lightClassification, int((((_2971 << 5u) + (_2957 << 9u)) + (_3373 << 2u)) >> 2u)).x;
                    _3383 = _3382 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3383)
                    {
                        frontier_phi_67_pred = _3370;
                        frontier_phi_67_pred_1 = _3371;
                        frontier_phi_67_pred_2 = _3372;
                        frontier_phi_67_pred_3 = _3369;
                        frontier_phi_67_pred_4 = _3368;
                        frontier_phi_67_pred_5 = _3367;
                    }
                    else
                    {
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3572;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3580 = _3367;
                        float _3581 = _3368;
                        float _3582 = _3369;
                        float _3583 = _3370;
                        float _3584 = _3371;
                        float _3585 = _3372;
                        uint _3586 = _3382;
                        uint _3587;
                        vec4 _3612;
                        float _3613;
                        vec4 _3628;
                        vec3 _3640;
                        vec4 _3655;
                        vec4 _3670;
                        float _3716;
                        bool _3717;
                        for (;;)
                        {
                            uint _3597 = ((_3373 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3586));
                            _3587 = (_3586 + 4294967295u) & _3586;
                            uint _3599 = _3597 * 40u;
                            _3612 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 3u)).x));
                            _3613 = _3612.w;
                            uint _3615 = (_3597 * 40u) + 4u;
                            _3628 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3615)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3615 + 3u)).x));
                            uint _3630 = (_3597 * 40u) + 8u;
                            _3640 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3630 + 2u)).x));
                            uint _3642 = (_3597 * 40u) + 16u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3597 * 40u) + 20u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3597 * 40u) + 24u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3691 = (_3597 * 40u) + 28u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3716 = fma(_2933, _3704.z, fma(_2932, _3704.y, _3704.x * _2931)) + _3704.w;
                            _3717 = !((fma(_2933, _3685.z, fma(_2932, _3685.y, _3685.x * _2931)) + _3685.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3717)
                            {
                                float _3744 = _3612.x - _2931;
                                float _3745 = _3612.y - _2932;
                                float _3746 = _3612.z - _2933;
                                float _3747 = dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746));
                                float _3750 = inversesqrt(_3747);
                                float _3751 = _3750 * _3744;
                                float _3752 = _3750 * _3745;
                                float _3753 = _3750 * _3746;
                                float _3757 = 1.0 - (_3747 / (_3613 * _3613));
                                float _4899 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                                float _3762 = sqrt(_3747) * _3628.w;
                                float _3764 = 1.39999997615814208984375 / (_3762 + 1.39999997615814208984375);
                                float _3765 = _3764 * _3764;
                                float _3768 = ((1.0 - _3765) * dot(vec3(_3751, _3752, _3753), vec3(_1141, _1144, _1147))) + _3765;
                                float _3771 = _3762 * _3762;
                                float _3775 = (fma(_2933, _3655.z, fma(_2932, _3655.y, _3655.x * _2931)) + _3655.w) / _3716;
                                float _3776 = (fma(_2933, _3670.z, fma(_2932, _3670.y, _3670.x * _2931)) + _3670.w) / _3716;
                                float _3780 = 1.0 - dot(vec2(_3775, _3776), vec2(_3775, _3776));
                                float _4915 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3782 = _3781 * (((isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0))) * _3758) / ((_3771 * 0.699999988079071044921875) + 1.0));
                                float _3794 = exp2(log2(1.0 / ((_3771 * 3.5) + 5.0)) * 0.25);
                                float _3795 = 1.0 - _1261;
                                float _3802 = sqrt(1.0 - ((1.0 - (_3795 * _3795)) * (1.0 - (_3794 * _3794))));
                                float _3803 = _3802 * _3802;
                                float _3804 = _3803 * _3803;
                                float _3805 = _3751 - _3254;
                                float _3806 = _3752 - _3255;
                                float _3807 = _3753 - _3256;
                                float _3811 = inversesqrt(dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807)));
                                float _3815 = dot(vec3(_1141, _1144, _1147), vec3((-0.0) - _3254, (-0.0) - _3255, (-0.0) - _3256));
                                float _4926 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3819 = dot(vec3(_1141, _1144, _1147), vec3(_3811 * _3805, _3811 * _3806, _3811 * _3807));
                                float _4937 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3826 = ((_3822 * _3822) * (_3804 + (-1.0))) + 1.0;
                                float _3827 = _3764 * _3803;
                                float _3828 = _3827 * _3827;
                                float _3834 = ((1.0 - _3828) * dot(vec3(_1141, _1144, _1147), vec3(_3751, _3752, _3753))) + _3828;
                                float _4948 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3836 = 1.0 - _3803;
                                float _3846 = (0.5 / (((_3835 * ((_3818 * _3836) + _3803)) + 9.9999999392252902907785028219223e-09) + (((_3835 * _3836) + _3803) * _3818))) * _3835;
                                float _4959 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3856 = (_3781 * _3758) * (((_3804 * 3.1415927410125732421875) * (isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0)))) / ((_3826 * _3826) * ((_3771 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3856 * _3640.x;
                                frontier_phi_73_pred_1 = _3856 * _3640.y;
                                frontier_phi_73_pred_2 = _3782 * _3628.z;
                                frontier_phi_73_pred_3 = _3782 * _3628.y;
                                frontier_phi_73_pred_4 = _3782 * _3628.x;
                                frontier_phi_73_pred_5 = _3856 * _3640.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3860 = frontier_phi_73_pred;
                            _3861 = frontier_phi_73_pred_1;
                            _3865 = frontier_phi_73_pred_2;
                            _3864 = frontier_phi_73_pred_3;
                            _3863 = frontier_phi_73_pred_4;
                            _3862 = frontier_phi_73_pred_5;
                            _3570 = _3863 + _3583;
                            _3571 = _3864 + _3584;
                            _3572 = _3865 + _3585;
                            _3567 = _3860 + _3580;
                            _3568 = _3861 + _3581;
                            _3569 = _3862 + _3582;
                            if (_3587 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3572;
                                _3586 = _3587;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3570;
                        frontier_phi_67_pred_1 = _3571;
                        frontier_phi_67_pred_2 = _3572;
                        frontier_phi_67_pred_3 = _3569;
                        frontier_phi_67_pred_4 = _3568;
                        frontier_phi_67_pred_5 = _3567;
                    }
                    _3235 = frontier_phi_67_pred;
                    _3237 = frontier_phi_67_pred_1;
                    _3239 = frontier_phi_67_pred_2;
                    _3233 = frontier_phi_67_pred_3;
                    _3231 = frontier_phi_67_pred_4;
                    _3229 = frontier_phi_67_pred_5;
                    uint _3374 = _3373 + 1u;
                    if (_3374 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3367 = _3229;
                        _3368 = _3231;
                        _3369 = _3233;
                        _3370 = _3235;
                        _3371 = _3237;
                        _3372 = _3239;
                        _3373 = _3374;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3237;
                frontier_phi_55_56_ladder_1 = _3239;
                frontier_phi_55_56_ladder_2 = _3235;
                frontier_phi_55_56_ladder_3 = _3233;
                frontier_phi_55_56_ladder_4 = _3231;
                frontier_phi_55_56_ladder_5 = _3229;
            }
            else
            {
                frontier_phi_55_56_ladder = _3115;
                frontier_phi_55_56_ladder_1 = _3117;
                frontier_phi_55_56_ladder_2 = _3113;
                frontier_phi_55_56_ladder_3 = _3111;
                frontier_phi_55_56_ladder_4 = _3109;
                frontier_phi_55_56_ladder_5 = _3107;
            }
            _3228 = frontier_phi_55_56_ladder_5;
            _3230 = frontier_phi_55_56_ladder_4;
            _3232 = frontier_phi_55_56_ladder_3;
            _3234 = frontier_phi_55_56_ladder_2;
            _3236 = frontier_phi_55_56_ladder;
            _3238 = frontier_phi_55_56_ladder_1;
        }
        float _3243 = isnan(1.0) ? _1245 : (isnan(_1245) ? 1.0 : min(_1245, 1.0));
        _2990 = (_3243 * _3234) + _2423;
        _2992 = (_3243 * _3236) + _2425;
        _2994 = (_3243 * _3238) + _2427;
        _2996 = ((_3228 * _1230) * _3243) + _2771;
        _2998 = ((_3230 * _1232) * _3243) + _2773;
        _3000 = ((_3232 * _1233) * _3243) + _2775;
    }
    else
    {
        _2990 = _2423;
        _2992 = _2425;
        _2994 = _2427;
        _2996 = _2771;
        _2998 = _2773;
        _3000 = _2775;
    }
    uint _3006 = _1174 + uint(cbMatDynParam._m0[0u].w);
    float _3012 = cbInstanceData._m0[_3006].x * ((((cbMtdParam._m0[22u].x * _963.x) * cbMtdParam._m0[32u].x) * _984) + _755);
    float _3013 = cbInstanceData._m0[_3006].y * ((((cbMtdParam._m0[22u].y * _963.y) * cbMtdParam._m0[32u].x) * _984) + _756);
    float _3014 = cbInstanceData._m0[_3006].z * ((((cbMtdParam._m0[22u].z * _963.z) * cbMtdParam._m0[32u].x) * _984) + _757);
    float _4975 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
    float _4986 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
    float _4997 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _3031 = (((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2990 + ((isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) * _1245))) + ((_2996 + ((isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0))) * _2042)) * cbPerFrame._m0[3u].x)) + _3012;
    float _3033 = (_3013 + ((_2998 + ((isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0))) * _2042)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0))) * (_2992 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1245)));
    float _3035 = (_3014 + ((_3000 + ((isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0))) * _2042)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2994 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1245)));
    float _5023 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3048 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
    uint _3049 = _1173 + 6u;
    float _3057 = _1118 / cbSceneParam._m0[86u].x;
    float _3058 = _1119 / cbSceneParam._m0[86u].y;
    vec4 _3072 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3057, _3058, (log2((isnan(cbSceneParam._m0[77u].w) ? _1073 : (isnan(_1073) ? cbSceneParam._m0[77u].w : min(_1073, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3074 = _3072.x;
    float _3075 = _3072.y;
    float _3076 = _3072.z;
    float _3077 = _3072.w;
    float _3169;
    float _3171;
    float _3173;
    float _3175;
    if (_1073 > cbSceneParam._m0[78u].w)
    {
        float _3132 = isnan(_1073) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1073 : min(cbSceneParam._m0[80u].w, _1073));
        float _3133 = _3132 / _1073;
        float _3144 = _3133 * _1103;
        float _3145 = _1104 * _3133;
        float _3146 = (-0.0) - _3145;
        float _3147 = _3133 * _1105;
        float _3149 = (cbSceneParam._m0[77u].w * _3146) / _3132;
        float _3150 = _3149 + cbSceneParam._m0[79u].w;
        float _3151 = cbSceneParam._m0[79u].w - _3145;
        float _3157 = sqrt(((_3144 * _3144) + (_3145 * _3145)) + (_3147 * _3147));
        float _3160 = (1.0 - (cbSceneParam._m0[77u].w / _3132)) * _3157;
        float _3165 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3167 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3329;
        if (abs((_3146 - _3149) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3329 = ((((_3150 > 0.0) ? exp2(_3165 * _3150) : (2.0 - exp2(_3167 * _3150))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3160;
        }
        else
        {
            float _3289 = 1.0 / cbSceneParam._m0[80u].x;
            float _3290 = isnan(_3151) ? _3150 : (isnan(_3150) ? _3151 : max(_3150, _3151));
            float _3291 = isnan(_3151) ? _3150 : (isnan(_3150) ? _3151 : min(_3150, _3151));
            float _3300 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : min(_3290, 0.0));
            float _3301 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : min(_3291, 0.0));
            _3329 = ((abs(_3157 / _3146) * cbSceneParam._m0[80u].y) * ((((_3300 - _3301) * 2.0) - ((exp2(_3165 * (isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0)))) - exp2(_3165 * (isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))))) * _3289)) - ((exp2(_3167 * _3300) - exp2(_3167 * _3301)) * _3289))) + (_3160 * cbSceneParam._m0[80u].z);
        }
        vec4 _3331 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3057, _3058, 1.0), 0.0);
        float _3340 = exp2((_3329 * (-1.44269502162933349609375)) * (1.0 - _3331.w));
        float _3341 = log2(_3340);
        float _3357 = log2(_3077);
        _3169 = (exp2(_3357 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].x)) * _3331.x) / cbSceneParam._m0[78u].x)) + _3074;
        _3171 = (exp2(_3357 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].y)) * _3331.y) / cbSceneParam._m0[78u].y)) + _3075;
        _3173 = (exp2(_3357 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3341 * cbSceneParam._m0[78u].z)) * _3331.z) / cbSceneParam._m0[78u].z)) + _3076;
        _3175 = _3340 * _3077;
    }
    else
    {
        _3169 = _3074;
        _3171 = _3075;
        _3173 = _3076;
        _3175 = _3077;
    }
    float _3187 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3188 = _3187 == 3.0;
    float _3189 = log2(_3175);
    float _3193 = exp2(_3189 * cbSceneParam._m0[78u].x);
    float _3194 = exp2(_3189 * cbSceneParam._m0[78u].y);
    float _3195 = exp2(_3189 * cbSceneParam._m0[78u].z);
    float _3196 = _3193 * (isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0)));
    float _3197 = _3194 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0)));
    float _3198 = _3195 * (isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0)));
    float _3207 = (_3187 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3207 * (_3188 ? _3196 : (_3196 + (cbSceneParam._m0[72u].w * _3169)));
    SV_Target.y = _3207 * (_3188 ? _3197 : (_3197 + (cbSceneParam._m0[72u].w * _3171)));
    SV_Target.z = _3207 * (_3188 ? _3198 : (_3198 + (cbSceneParam._m0[72u].w * _3173)));
    SV_Target.w = cbInstanceData._m0[_3049].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3012) * _3048) * _3193) * _3207;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3013) * _3048) * _3194) * _3207;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3014) * _3048) * _3195) * _3207;
    SV_Target_1.w = cbInstanceData._m0[_3049].w;
}


