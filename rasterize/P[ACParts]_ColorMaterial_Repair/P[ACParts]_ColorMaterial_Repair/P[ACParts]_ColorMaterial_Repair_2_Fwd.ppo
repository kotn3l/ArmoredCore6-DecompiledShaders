#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1616;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _235 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _236 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _237 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _243 = inversesqrt(dot(vec3(_235, _236, _237), vec3(_235, _236, _237)));
    float _250 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _257 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _286 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_272 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _293 = log2(0.0);
    float _295 = exp2(_293 * cbMtdParam._m0[31u].z);
    float _299 = _295 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _295);
    float _300 = _295 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _295);
    float _301 = _295 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _295);
    float _302 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _303 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _304 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _305 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    float _307 = isnan(1.0) ? _303 : (isnan(_303) ? 1.0 : min(_303, 1.0));
    float _308 = isnan(1.0) ? _304 : (isnan(_304) ? 1.0 : min(_304, 1.0));
    vec4 _324 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _272) + cbTextureTilingScale._m0[0u].w));
    float _328 = _324.z;
    float _329 = _324.w;
    float _330 = 1.0 - _329;
    float _337 = exp2(log2((1.0 - (_330 * _328)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _338 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _339 = isnan(1.0) ? _338 : (isnan(_338) ? 1.0 : min(_338, 1.0));
    float _351 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_330 * _330) * _328))) * cbMtdParam._m0[34u].w);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    vec4 _366 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _369 = _366.y;
    float _372 = (_369 * ((isnan(1.0) ? _352 : (isnan(_352) ? 1.0 : min(_352, 1.0))) - _329)) + _329;
    vec4 _384 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _272) + cbTextureTilingScale._m0[2u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[12u].x;
    _202[0u] = cbMtdParam._m0[12u].y;
    _203[0u] = cbMtdParam._m0[12u].z;
    _201[1u] = cbMtdParam._m0[13u].x;
    _202[1u] = cbMtdParam._m0[13u].y;
    _203[1u] = cbMtdParam._m0[13u].z;
    _201[2u] = cbMtdParam._m0[14u].x;
    _202[2u] = cbMtdParam._m0[14u].y;
    _203[2u] = cbMtdParam._m0[14u].z;
    _201[3u] = cbMtdParam._m0[15u].x;
    _202[3u] = cbMtdParam._m0[15u].y;
    _203[3u] = cbMtdParam._m0[15u].z;
    _201[4u] = cbMtdParam._m0[16u].x;
    _202[4u] = cbMtdParam._m0[16u].y;
    _203[4u] = cbMtdParam._m0[16u].z;
    _201[5u] = cbMtdParam._m0[11u].x;
    _202[5u] = cbMtdParam._m0[11u].y;
    _203[5u] = cbMtdParam._m0[11u].z;
    float _452 = (_366.x + (-0.02500000037252902984619140625)) * 8.0;
    float _454 = roundEven(_452);
    float _455 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    uint _458 = uint(int(isnan(5.0) ? _455 : (isnan(_455) ? 5.0 : min(_455, 5.0))));
    float _204[6];
    float _205[6];
    float _206[6];
    _204[0u] = 1.0;
    _205[0u] = 1.0;
    _206[0u] = 1.0;
    _204[1u] = cbMtdParam._m0[23u].x;
    _205[1u] = cbMtdParam._m0[23u].y;
    _206[1u] = cbMtdParam._m0[23u].z;
    _204[2u] = cbMtdParam._m0[21u].x;
    _205[2u] = cbMtdParam._m0[21u].y;
    _206[2u] = cbMtdParam._m0[21u].z;
    _204[3u] = cbMtdParam._m0[19u].x;
    _205[3u] = cbMtdParam._m0[19u].y;
    _206[3u] = cbMtdParam._m0[19u].z;
    _204[4u] = cbMtdParam._m0[18u].x;
    _205[4u] = cbMtdParam._m0[18u].y;
    _206[4u] = cbMtdParam._m0[18u].z;
    _204[5u] = cbMtdParam._m0[17u].x;
    _205[5u] = cbMtdParam._m0[17u].y;
    _206[5u] = cbMtdParam._m0[17u].z;
    float _545 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[38u].w * TEXCOORD.x) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[39u].x * TEXCOORD.y) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _546 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    uint _548 = uint(int(isnan(5.0) ? _546 : (isnan(_546) ? 5.0 : min(_546, 5.0))));
    float _210[6];
    _210[0u] = 1.0;
    _210[1u] = cbMtdParam._m0[23u].w;
    _210[2u] = cbMtdParam._m0[21u].w;
    _210[3u] = cbMtdParam._m0[19u].w;
    _210[4u] = cbMtdParam._m0[18u].w;
    _210[5u] = cbMtdParam._m0[17u].w;
    float _585 = ((((_201[_458] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_204[_548] - _201[_458])) * _210[_458])) * _369) + cbMtdParam._m0[10u].x) * _384.x;
    float _586 = ((((_202[_458] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_205[_548] - _202[_458])) * _210[_458])) * _369) + cbMtdParam._m0[10u].y) * _384.y;
    float _587 = ((((_203[_458] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_206[_548] - _203[_458])) * _210[_458])) * _369) + cbMtdParam._m0[10u].z) * _384.z;
    vec4 _599 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _272) + cbTextureTilingScale._m0[1u].w));
    float _619 = (((cbMtdParam._m0[9u].x * _599.x) - _585) * _372) + _585;
    float _620 = (((cbMtdParam._m0[9u].y * _599.y) - _586) * _372) + _586;
    float _621 = (((cbMtdParam._m0[9u].z * _599.z) - _587) * _372) + _587;
    vec4 _633 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _272) + cbTextureTilingScale._m0[5u].w));
    float _653 = (((cbMtdParam._m0[20u].x * _633.x) - _619) * _339) + _619;
    float _654 = (((cbMtdParam._m0[20u].y * _633.y) - _620) * _339) + _620;
    float _655 = (((cbMtdParam._m0[20u].z * _633.z) - _621) * _339) + _621;
    vec4 _668 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _272) + cbTextureTilingScale._m0[7u].w));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = cbMtdParam._m0[24u].x;
    _208[0u] = cbMtdParam._m0[24u].y;
    _209[0u] = cbMtdParam._m0[24u].z;
    _207[1u] = cbMtdParam._m0[25u].x;
    _208[1u] = cbMtdParam._m0[25u].y;
    _209[1u] = cbMtdParam._m0[25u].z;
    _207[2u] = cbMtdParam._m0[26u].x;
    _208[2u] = cbMtdParam._m0[26u].y;
    _209[2u] = cbMtdParam._m0[26u].z;
    _207[3u] = cbMtdParam._m0[27u].x;
    _208[3u] = cbMtdParam._m0[27u].y;
    _209[3u] = cbMtdParam._m0[27u].z;
    _207[4u] = cbMtdParam._m0[28u].x;
    _208[4u] = cbMtdParam._m0[28u].y;
    _209[4u] = cbMtdParam._m0[28u].z;
    _207[5u] = cbMtdParam._m0[29u].x;
    _208[5u] = cbMtdParam._m0[29u].y;
    _209[5u] = cbMtdParam._m0[29u].z;
    float _755 = _207[_458] * _369;
    float _756 = _208[_458] * _369;
    float _757 = _209[_458] * _369;
    float _758 = _755 + ((_286.x * 4.5) * ((((cbMtdParam._m0[30u].x * _668.x) - _653) * _305) + _653));
    float _759 = _756 + ((_286.y * 4.5) * ((((cbMtdParam._m0[30u].y * _668.y) - _654) * _307) + _654));
    float _760 = _757 + ((_286.z * 4.5) * ((((cbMtdParam._m0[30u].z * _668.z) - _655) * _308) + _655));
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[35u].y;
    _197[0u] = cbMtdParam._m0[35u].z;
    _196[1u] = cbMtdParam._m0[36u].w;
    _197[1u] = cbMtdParam._m0[37u].x;
    _196[2u] = cbMtdParam._m0[37u].y;
    _197[2u] = cbMtdParam._m0[37u].z;
    _196[3u] = cbMtdParam._m0[37u].w;
    _197[3u] = cbMtdParam._m0[38u].x;
    _196[4u] = cbMtdParam._m0[38u].y;
    _197[4u] = cbMtdParam._m0[38u].z;
    float _788 = roundEven(5.0 - _452);
    float _789 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _790 = isnan(4.0) ? _789 : (isnan(_789) ? 4.0 : min(_789, 4.0));
    float _792 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    uint _794 = uint(int(isnan(4.0) ? _792 : (isnan(_792) ? 4.0 : min(_792, 4.0))));
    float _803 = ((cbMtdParam._m0[39u].z - _197[_794]) * _372) + _197[_794];
    float _811 = ((cbMtdParam._m0[40u].x - _803) * _339) + _803;
    float _816 = ((cbMtdParam._m0[40u].z - _811) * _305) + _811;
    vec4 _832 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _272) + cbTextureTilingScale._m0[8u].w));
    float _834 = _832.x;
    float _835 = _832.y;
    float _837 = _832.z + _196[_794];
    vec4 _849 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _272) + cbTextureTilingScale._m0[9u].w));
    float _857 = (((cbMtdParam._m0[39u].y - _837) + _849.z) * _372) + _837;
    vec4 _869 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _877 = (((cbMtdParam._m0[39u].w - _857) + _869.z) * _339) + _857;
    float _883 = ((((_328 * 2.0) * _877) - _877) * cbMtdParam._m0[33u].w) + _877;
    vec4 _895 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _272) + cbTextureTilingScale._m0[12u].w));
    float _903 = (((_895.z + cbMtdParam._m0[40u].y) - _883) * _308) + _883;
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _965 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_934 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_938 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _980 = (-0.0) - ((_938 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _984 = (_938 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _985 = isnan(_984) ? _980 : (isnan(_980) ? _984 : min(_980, _984));
    float _4067 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _986 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _1011 = ((_849.x - _834) * _372) + _834;
    float _1012 = ((_849.y - _835) * _372) + _835;
    float _1017 = ((_869.x - _1011) * _339) + _1011;
    float _1018 = ((_869.y - _1012) * _339) + _1012;
    float _1027 = ((((_895.x - _1017) * _305) + _1017) * 2.0) + (-1.0);
    float _1028 = ((((_895.y - _1018) * _307) + _1018) * 2.0) + (-1.0);
    float _1029 = dot(vec2(_1027, _1028), vec2(_1027, _1028));
    float _4078 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1034 = sqrt(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0))));
    float _1037 = (cbMtdParam._m0[34u].x * ((_324.x * 2.0) + (-1.0))) + _1027;
    float _1038 = (cbMtdParam._m0[34u].x * ((_324.y * 2.0) + (-1.0))) + _1028;
    float _1041 = fma(_1034, _250 * NORMAL.x, fma(_1038, _257 * TANGENT.x, (_243 * _235) * _1037));
    float _1044 = fma(_1034, _250 * NORMAL.y, fma(_1038, _257 * TANGENT.y, (_243 * _236) * _1037));
    float _1047 = fma(_1034, _250 * NORMAL.z, fma(_1038, _257 * TANGENT.z, (_243 * _237) * _1037));
    float _1051 = inversesqrt(dot(vec3(_1041, _1044, _1047), vec3(_1041, _1044, _1047)));
    float _1052 = _1051 * _1041;
    float _1053 = _1051 * _1044;
    float _1054 = _1051 * _1047;
    float _4089 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _1055 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4111 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4122 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4133 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
    float _1059 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _1075 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1105 = cbSceneParam._m0[71u].x - (_934 / _1095);
    float _1106 = cbSceneParam._m0[71u].y - (_938 / _1095);
    float _1107 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1095);
    float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
    float _1112 = _1105 * _1111;
    float _1113 = _1106 * _1111;
    float _1114 = _1107 * _1111;
    float _1120 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1121 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1123 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1125 = _1123.w;
    float _1143 = fma(_1054, cbSceneParam._m0[5u].z, fma(_1053, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1052));
    float _1146 = fma(_1054, cbSceneParam._m0[6u].z, fma(_1053, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1052));
    float _1149 = fma(_1054, cbSceneParam._m0[7u].z, fma(_1053, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1052));
    vec4 _1151 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1162 = (((_1151.y - _1055) + (_1151.w * _1055)) * cbMtdParam._m0[3u].x) + _1055;
    uint _1175 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1176 = _1175 + 9u;
    uint _1177 = _1176 + uint(cbMatDynParam._m0[0u].w);
    float _1183 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * cbInstanceData._m0[_1177].x;
    float _1184 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * cbInstanceData._m0[_1177].y;
    float _1185 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_1177].z;
    float _4144 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1186 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _4155 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _4166 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
    vec4 _1189 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1194 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1205 = (((_1194.x - _1059) + (_1194.w * _1059)) * cbMtdParam._m0[3u].x) + _1059;
    float _1218 = (cbMtdParam._m0[3u].x * (((_1186 * _1125) - _1186) + _1189.x)) + _1186;
    float _1219 = (cbMtdParam._m0[3u].x * (((_1187 * _1125) - _1187) + _1189.y)) + _1187;
    float _1220 = (cbMtdParam._m0[3u].x * (((_1188 * _1125) - _1188) + _1189.z)) + _1188;
    float _1221 = 1.0 - _1205;
    float _1222 = _1221 * _1218;
    float _1223 = _1221 * _1219;
    float _1224 = _1221 * _1220;
    float _1229 = (_1218 + (-0.039999999105930328369140625)) * _1205;
    float _1230 = (_1219 + (-0.039999999105930328369140625)) * _1205;
    float _1231 = (_1220 + (-0.039999999105930328369140625)) * _1205;
    float _1232 = _1229 + 0.039999999105930328369140625;
    float _1234 = _1230 + 0.039999999105930328369140625;
    float _1235 = _1231 + 0.039999999105930328369140625;
    vec4 _1244 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1120, cbSceneParam._m0[86u].y * _1121));
    float _1247 = _1244.x * TEXCOORD_5.w;
    float _1248 = dot(vec3(_1052, _1053, _1054), vec3(_1112, _1113, _1114));
    float _1251 = _1248 * 2.0;
    float _1255 = (_1251 * _1052) - _1112;
    float _1256 = (_1251 * _1053) - _1113;
    float _1257 = (_1251 * _1054) - _1114;
    float _1261 = abs(dot(vec3(_1112, _1113, _1114), vec3(_1052, _1053, _1054)));
    float _4177 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
    float _1263 = sqrt(_1162);
    float _1274 = exp2((_1263 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1263 * 3.0));
    float _1280 = (1.0 - _1274) * ((_1263 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1281 = _1274 * _1263;
    float _1309 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1313 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1317 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1615;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1342 = fma(_1317, cbModelParam._m0[26u].z, fma(_1313, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1309));
        float _1346 = fma(_1317, cbModelParam._m0[27u].z, fma(_1313, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1309));
        float _1350 = fma(_1317, cbModelParam._m0[28u].z, fma(_1313, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1309));
        float _1374 = _1309 + _1052;
        float _1375 = _1313 + _1053;
        float _1376 = _1317 + _1054;
        float _1386 = fma(_1376, cbModelParam._m0[26u].z, fma(_1375, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1374)) - _1342;
        float _1387 = fma(_1376, cbModelParam._m0[27u].z, fma(_1375, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1374)) - _1346;
        float _1388 = fma(_1376, cbModelParam._m0[28u].z, fma(_1375, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1374)) - _1350;
        float _1392 = inversesqrt(dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388)));
        float _1404 = ((_1392 * _1386) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1342 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1405 = ((_1392 * _1387) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1346 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1406 = ((_1392 * _1388) / cbModelParam._m0[34u].z) + ((((((_1350 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1409 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1416 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1423 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        vec4 _1430 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1404, _1405, _1406), 0.0);
        float _1443 = exp2((_1409.w + (-0.5)) * 20.0) * 2.0;
        float _1444 = _1443 * (_1409.x + (-0.5));
        float _1445 = _1443 * (_1409.y + (-0.5));
        float _1446 = _1443 * (_1409.z + (-0.5));
        float _1453 = exp2((_1416.w + (-0.5)) * 20.0) * 2.0;
        float _1454 = _1453 * (_1416.x + (-0.5));
        float _1455 = _1453 * (_1416.y + (-0.5));
        float _1456 = _1453 * (_1416.z + (-0.5));
        float _1463 = exp2((_1423.w + (-0.5)) * 20.0) * 2.0;
        float _1464 = _1463 * (_1423.x + (-0.5));
        float _1465 = _1463 * (_1423.y + (-0.5));
        float _1466 = _1463 * (_1423.z + (-0.5));
        float _1473 = exp2((_1430.w + (-0.5)) * 20.0) * 2.0;
        float _1474 = _1473 * (_1430.x + (-0.5));
        float _1475 = _1473 * (_1430.y + (-0.5));
        float _1476 = _1473 * (_1430.z + (-0.5));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0));
        float _1479 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1480 = _1444 * 0.5;
        float _1481 = _1454 * 0.5;
        float _1482 = _1464 * 0.5;
        float _1483 = dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482));
        float _1488 = (_1483 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1483);
        float _1497 = (dot(vec3(_1052, _1053, _1054), vec3(_1488 * _1480, _1488 * _1481, _1488 * _1482)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1507 = sqrt(((_1481 * _1481) + (_1480 * _1480)) + (_1482 * _1482)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1509 = _1508 * 2.0;
        float _1513 = (1.0 - _1508) / (_1508 + 1.0);
        float _4225 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1523 = ((((1.0 - _1514) * (_1509 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1509 + 1.0))) + _1514) * _1477;
        float _1524 = _1445 * 0.5;
        float _1525 = _1455 * 0.5;
        float _1526 = _1465 * 0.5;
        float _1527 = dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526));
        float _1532 = (_1527 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1527);
        float _1540 = (dot(vec3(_1052, _1053, _1054), vec3(_1532 * _1524, _1532 * _1525, _1532 * _1526)) + 1.0) * 0.5;
        float _4236 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1549 = sqrt(((_1525 * _1525) + (_1524 * _1524)) + (_1526 * _1526)) / (_1478 + 9.9999997473787516355514526367188e-06);
        float _4247 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
        float _1551 = _1550 * 2.0;
        float _1555 = (1.0 - _1550) / (_1550 + 1.0);
        float _4258 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1565 = ((((1.0 - _1556) * (_1551 + 2.0)) * exp2(log2(isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0))) * (_1551 + 1.0))) + _1556) * _1478;
        float _1566 = _1446 * 0.5;
        float _1567 = _1456 * 0.5;
        float _1568 = _1466 * 0.5;
        float _1569 = dot(vec3(_1566, _1567, _1568), vec3(_1566, _1567, _1568));
        float _1574 = (_1569 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1569);
        float _1582 = (dot(vec3(_1052, _1053, _1054), vec3(_1574 * _1566, _1574 * _1567, _1574 * _1568)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1591 = sqrt(((_1567 * _1567) + (_1566 * _1566)) + (_1568 * _1568)) / (_1479 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1592 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1593 = _1592 * 2.0;
        float _1597 = (1.0 - _1592) / (_1592 + 1.0);
        float _4291 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1607 = ((((1.0 - _1598) * (_1593 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1593 + 1.0))) + _1598) * _1479;
        _1615 = _1446;
        _1617 = _1445;
        _1618 = _1444;
        _1619 = _1456;
        _1620 = _1455;
        _1621 = _1454;
        _1622 = _1466;
        _1623 = _1465;
        _1624 = _1464;
        _1625 = _1479;
        _1626 = _1478;
        _1627 = _1477;
        _1628 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)));
        _1629 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)));
        _1630 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0)));
    }
    else
    {
        _1615 = _1616;
        _1617 = _1616;
        _1618 = _1616;
        _1619 = _1616;
        _1620 = _1616;
        _1621 = _1616;
        _1622 = _1616;
        _1623 = _1616;
        _1624 = _1616;
        _1625 = _1616;
        _1626 = _1616;
        _1627 = _1616;
        _1628 = 0.0;
        _1629 = 0.0;
        _1630 = 0.0;
    }
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1653 = fma(_1317, cbModelParam._m0[30u].z, fma(_1313, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1309));
        float _1657 = fma(_1317, cbModelParam._m0[31u].z, fma(_1313, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1309));
        float _1661 = fma(_1317, cbModelParam._m0[32u].z, fma(_1313, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1309));
        float _1683 = _1309 + _1052;
        float _1684 = _1313 + _1053;
        float _1685 = _1317 + _1054;
        float _1695 = fma(_1685, cbModelParam._m0[30u].z, fma(_1684, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1683)) - _1653;
        float _1696 = fma(_1685, cbModelParam._m0[31u].z, fma(_1684, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1683)) - _1657;
        float _1697 = fma(_1685, cbModelParam._m0[32u].z, fma(_1684, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1683)) - _1661;
        float _1701 = inversesqrt(dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697)));
        float _1713 = ((_1701 * _1695) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1653 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1714 = ((_1701 * _1696) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1657 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1715 = ((_1701 * _1697) / cbModelParam._m0[35u].z) + ((((((_1661 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1738 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        float _1750 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1717.x + (-0.5));
        float _1752 = _1750 * (_1717.y + (-0.5));
        float _1753 = _1750 * (_1717.z + (-0.5));
        float _1760 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1761 = _1760 * (_1724.x + (-0.5));
        float _1762 = _1760 * (_1724.y + (-0.5));
        float _1763 = _1760 * (_1724.z + (-0.5));
        float _1770 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1771 = _1770 * (_1731.x + (-0.5));
        float _1772 = _1770 * (_1731.y + (-0.5));
        float _1773 = _1770 * (_1731.z + (-0.5));
        float _1780 = exp2((_1738.w + (-0.5)) * 20.0) * 2.0;
        float _1781 = _1780 * (_1738.x + (-0.5));
        float _1782 = _1780 * (_1738.y + (-0.5));
        float _1783 = _1780 * (_1738.z + (-0.5));
        float _1784 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1785 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1786 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1787 = _1751 * 0.5;
        float _1788 = _1761 * 0.5;
        float _1789 = _1771 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_1052, _1053, _1054), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1784 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4354 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1814 + 1.0))) + _1819) * _1784;
        float _1829 = _1752 * 0.5;
        float _1830 = _1762 * 0.5;
        float _1831 = _1772 * 0.5;
        float _1832 = dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831));
        float _1837 = (_1832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1832);
        float _1845 = (dot(vec3(_1052, _1053, _1054), vec3(_1837 * _1829, _1837 * _1830, _1837 * _1831)) + 1.0) * 0.5;
        float _4365 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = sqrt(((_1830 * _1830) + (_1829 * _1829)) + (_1831 * _1831)) / (_1785 + 9.9999997473787516355514526367188e-06);
        float _4376 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
        float _1856 = _1855 * 2.0;
        float _1860 = (1.0 - _1855) / (_1855 + 1.0);
        float _4387 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1870 = ((((1.0 - _1861) * (_1856 + 2.0)) * exp2(log2(isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_1856 + 1.0))) + _1861) * _1785;
        float _1871 = _1753 * 0.5;
        float _1872 = _1763 * 0.5;
        float _1873 = _1773 * 0.5;
        float _1874 = dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873));
        float _1879 = (_1874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1874);
        float _1887 = (dot(vec3(_1052, _1053, _1054), vec3(_1879 * _1871, _1879 * _1872, _1879 * _1873)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1896 = sqrt(((_1872 * _1872) + (_1871 * _1871)) + (_1873 * _1873)) / (_1786 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1898 = _1897 * 2.0;
        float _1902 = (1.0 - _1897) / (_1897 + 1.0);
        float _4420 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1912 = ((((1.0 - _1903) * (_1898 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1898 + 1.0))) + _1903) * _1786;
        _1920 = _1753;
        _1921 = _1752;
        _1922 = _1751;
        _1923 = _1763;
        _1924 = _1762;
        _1925 = _1761;
        _1926 = _1773;
        _1927 = _1772;
        _1928 = _1771;
        _1929 = _1786;
        _1930 = _1785;
        _1931 = _1784;
        _1932 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
        _1933 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)));
        _1934 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)));
    }
    else
    {
        _1920 = _1616;
        _1921 = _1616;
        _1922 = _1616;
        _1923 = _1616;
        _1924 = _1616;
        _1925 = _1616;
        _1926 = _1616;
        _1927 = _1616;
        _1928 = _1616;
        _1929 = _1616;
        _1930 = _1616;
        _1931 = _1616;
        _1932 = 0.0;
        _1933 = 0.0;
        _1934 = 0.0;
    }
    float _1944 = (cbModelParam._m0[1u].x * (_1932 - _1628)) + _1628;
    float _1945 = (cbModelParam._m0[1u].x * (_1933 - _1629)) + _1629;
    float _1946 = (cbModelParam._m0[1u].x * (_1934 - _1630)) + _1630;
    float _1967 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1944 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1944 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1944));
    float _1986 = _1255 * 0.5;
    float _1987 = _1256 * 0.5;
    float _1988 = _1257 * 0.5;
    float _1989 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1922, _1925, _1928, _1931));
    float _1992 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1921, _1924, _1927, _1930));
    float _1995 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1920, _1923, _1926, _1929));
    float _2029;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2002 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1615, _1619, _1622, _1625));
        float _2006 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1617, _1620, _1623, _1626));
        float _2010 = dot(vec4(_1986, _1987, _1988, 1.0), vec4(_1618, _1621, _1624, _1627));
        float _2017 = dot(vec4(cbModelParam._m0[39u]), vec4(_1986, _1987, _1988, 1.0));
        _2029 = dot(vec3(isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0)), isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)), isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2017) ? 0.0 : (isnan(0.0) ? _2017 : max(0.0, _2017))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2029 = 1.0;
    }
    float _2040;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2031 = dot(vec4(cbModelParam._m0[40u]), vec4(_1986, _1987, _1988, 1.0));
        _2040 = dot(vec3(isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0)), isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0)), isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2031) ? 0.0 : (isnan(0.0) ? _2031 : max(0.0, _2031))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2040 = 1.0;
    }
    float _2044 = (_2040 * cbModelParam._m0[1u].x) + (_2029 * (1.0 - cbModelParam._m0[1u].x));
    float _2054 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1162);
    float _2055 = isnan(_2054) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2054 : min(cbModelParam._m0[25u].z, _2054));
    float _2135;
    float _2137;
    float _2139;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2102 = fma(_1317, cbModelParam._m0[13u].z, fma(_1313, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1309)) + cbModelParam._m0[13u].w;
        float _2106 = fma(_1317, cbModelParam._m0[14u].z, fma(_1313, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1309)) + cbModelParam._m0[14u].w;
        float _2110 = fma(_1317, cbModelParam._m0[15u].z, fma(_1313, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1309)) + cbModelParam._m0[15u].w;
        float _2113 = fma(_1257, cbModelParam._m0[13u].z, fma(_1256, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1255));
        float _2116 = fma(_1257, cbModelParam._m0[14u].z, fma(_1256, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1255));
        float _2119 = fma(_1257, cbModelParam._m0[15u].z, fma(_1256, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1255));
        float _2147;
        if (_2113 > 0.0)
        {
            _2147 = abs((1.0 - _2102) / _2113);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2113 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2102 + 1.0) / _2113);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2147 = frontier_phi_14_12_ladder;
        }
        float _2349;
        if (_2116 > 0.0)
        {
            _2349 = abs((1.0 - _2106) / _2116);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2116 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2106 + 1.0) / _2116);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2349 = frontier_phi_23_19_ladder;
        }
        float _2603;
        if (_2119 > 0.0)
        {
            _2603 = abs((1.0 - _2110) / _2119);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2110 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2603 = frontier_phi_35_30_ladder;
        }
        float _2605 = isnan(_2349) ? _2147 : (isnan(_2147) ? _2349 : min(_2147, _2349));
        float _2606 = isnan(_2603) ? _2605 : (isnan(_2605) ? _2603 : min(_2605, _2603));
        float _2610 = (_2606 * _2113) + _2102;
        float _2611 = (_2606 * _2116) + _2106;
        float _2612 = (_2606 * _2119) + _2110;
        float _2613 = _2606 * 9.9999997473787516355514526367188e-05;
        float _2615 = (-1.0) - _2613;
        float _2617 = _2613 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2612 > _2617) || ((_2612 < _2615) || ((_2611 > _2617) || ((_2611 < _2615) || ((_2610 < _2615) || (_2610 > _2617))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2612, cbModelParam._m0[9u].z, fma(_2611, cbModelParam._m0[9u].y, _2610 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2612, cbModelParam._m0[10u].z, fma(_2611, cbModelParam._m0[10u].y, _2610 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2612, cbModelParam._m0[11u].z, fma(_2611, cbModelParam._m0[11u].y, _2610 * cbModelParam._m0[11u].x))), _2055);
            frontier_phi_13_35_ladder = _2740.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2740.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2740.x * cbModelParam._m0[1u].y;
        }
        _2135 = frontier_phi_13_35_ladder_2;
        _2137 = frontier_phi_13_35_ladder_1;
        _2139 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2123 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1255, _1256, _1257), _2055);
        _2135 = _2123.x * cbModelParam._m0[1u].y;
        _2137 = _2123.y * cbModelParam._m0[1u].y;
        _2139 = _2123.z * cbModelParam._m0[1u].y;
    }
    float _2143 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1162);
    float _2144 = isnan(_2143) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2143 : min(cbModelParam._m0[25u].w, _2143));
    float _2233;
    float _2235;
    float _2237;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2197 = fma(_1317, cbModelParam._m0[21u].z, fma(_1313, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1309)) + cbModelParam._m0[21u].w;
        float _2201 = fma(_1317, cbModelParam._m0[22u].z, fma(_1313, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1309)) + cbModelParam._m0[22u].w;
        float _2205 = fma(_1317, cbModelParam._m0[23u].z, fma(_1313, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1309)) + cbModelParam._m0[23u].w;
        float _2208 = fma(_1257, cbModelParam._m0[21u].z, fma(_1256, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1255));
        float _2211 = fma(_1257, cbModelParam._m0[22u].z, fma(_1256, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1255));
        float _2214 = fma(_1257, cbModelParam._m0[23u].z, fma(_1256, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1255));
        float _2354;
        if (_2208 > 0.0)
        {
            _2354 = abs((1.0 - _2197) / _2208);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2197 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2354 = frontier_phi_25_21_ladder;
        }
        float _2630;
        if (_2211 > 0.0)
        {
            _2630 = abs((1.0 - _2201) / _2211);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2201 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2630 = frontier_phi_37_32_ladder;
        }
        float _2843;
        if (_2214 > 0.0)
        {
            _2843 = abs((1.0 - _2205) / _2214);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2214 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2205 + 1.0) / _2214);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2843 = frontier_phi_46_43_ladder;
        }
        float _2845 = isnan(_2630) ? _2354 : (isnan(_2354) ? _2630 : min(_2354, _2630));
        float _2846 = isnan(_2843) ? _2845 : (isnan(_2845) ? _2843 : min(_2845, _2843));
        float _2850 = (_2846 * _2208) + _2197;
        float _2851 = (_2846 * _2211) + _2201;
        float _2852 = (_2846 * _2214) + _2205;
        float _2853 = _2846 * 9.9999997473787516355514526367188e-05;
        float _2854 = (-1.0) - _2853;
        float _2856 = _2853 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2852 > _2856) || ((_2852 < _2854) || ((_2851 > _2856) || ((_2851 < _2854) || ((_2850 < _2854) || (_2850 > _2856))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3080 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2852, cbModelParam._m0[17u].z, fma(_2851, cbModelParam._m0[17u].y, _2850 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2852, cbModelParam._m0[18u].z, fma(_2851, cbModelParam._m0[18u].y, _2850 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2852, cbModelParam._m0[19u].z, fma(_2851, cbModelParam._m0[19u].y, _2850 * cbModelParam._m0[19u].x))), _2144);
            frontier_phi_22_46_ladder = _3080.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3080.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3080.x * cbModelParam._m0[1u].z;
        }
        _2233 = frontier_phi_22_46_ladder_2;
        _2235 = frontier_phi_22_46_ladder_1;
        _2237 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2217 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1255, _1256, _1257), _2144);
        _2233 = _2217.x * cbModelParam._m0[1u].z;
        _2235 = _2217.y * cbModelParam._m0[1u].z;
        _2237 = _2217.z * cbModelParam._m0[1u].z;
    }
    float _2250 = (((_1280 * _1232) + _1281) * _1247) * ((cbModelParam._m0[1u].w * (_2233 - _2135)) + _2135);
    float _2252 = (((_1280 * _1234) + _1281) * _1247) * ((cbModelParam._m0[1u].w * (_2235 - _2137)) + _2137);
    float _2254 = (((_1280 * _1235) + _1281) * _1247) * ((cbModelParam._m0[1u].w * (_2237 - _2139)) + _2139);
    float _2257 = fma(_2254, cbSceneParam._m0[89u].z, fma(_2252, cbSceneParam._m0[89u].y, _2250 * cbSceneParam._m0[89u].x));
    float _2260 = fma(_2254, cbSceneParam._m0[90u].z, fma(_2252, cbSceneParam._m0[90u].y, _2250 * cbSceneParam._m0[90u].x));
    float _2263 = fma(_2254, cbSceneParam._m0[91u].z, fma(_2252, cbSceneParam._m0[91u].y, _2250 * cbSceneParam._m0[91u].x));
    uvec4 _2273 = floatBitsToUint(cbInstanceData._m0[_1175 + 5u]);
    uint _2275 = _2273.x * 14u;
    uint _2276 = _2275 + 13u;
    float _2283 = _1247 + (-1.0);
    float _2288 = (cbLight._m0[_2276].x * _2283) + 1.0;
    float _2289 = (cbLight._m0[_2276].y * _2283) + 1.0;
    float _2290 = (cbLight._m0[_2276].z * _2283) + 1.0;
    float _2291 = (cbLight._m0[_2276].w * _2283) + 1.0;
    uint _2292 = _2275 + 5u;
    float _2298 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
    uint _2302 = _2275 + 4u;
    float _2308 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
    uint _2312 = _2275 | 1u;
    float _2323 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_1052, _1053, _1054));
    float _2326 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_1052, _1053, _1054));
    float _4556 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
    float _4567 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2331 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * 0.3183098733425140380859375;
    float _2333 = (isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * 0.3183098733425140380859375;
    float _2340 = ((cbLight._m0[_2292].x * _2298) * _2333) + ((cbLight._m0[_2302].x * _2308) * _2331);
    float _2341 = ((_2298 * cbLight._m0[_2292].y) * _2333) + ((_2308 * cbLight._m0[_2302].y) * _2331);
    float _2342 = ((_2298 * cbLight._m0[_2292].z) * _2333) + ((_2308 * cbLight._m0[_2302].z) * _2331);
    uvec4 _2346 = floatBitsToUint(cbLight._m0[_2275 + 12u]);
    bool _2348 = _2346.x == 0u;
    float _2359;
    float _2361;
    float _2363;
    if (_2348)
    {
        _2359 = _2340;
        _2361 = _2341;
        _2363 = _2342;
    }
    else
    {
        uint _2367 = _2275 + 6u;
        float _2383 = (dot(vec3(cbLight._m0[_2275 + 2u].xyz), vec3(_1052, _1053, _1054)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4578 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2386 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2359 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2340;
        _2361 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2341;
        _2363 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2342;
    }
    bool _2366 = _2346.y == 0u;
    float _2404;
    float _2406;
    float _2408;
    if (_2366)
    {
        _2404 = _2359;
        _2406 = _2361;
        _2408 = _2363;
    }
    else
    {
        uint _2574 = _2275 + 7u;
        float _2590 = (dot(vec3(cbLight._m0[_2275 + 3u].xyz), vec3(_1052, _1053, _1054)) * 0.5) + 0.5;
        float _2591 = _2590 * _2590;
        float _4594 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2592 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
        float _2593 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2404 = (((cbLight._m0[_2574].x * 0.3183098733425140380859375) * _2592) * _2593) + _2359;
        _2406 = (((cbLight._m0[_2574].y * 0.3183098733425140380859375) * _2592) * _2593) + _2361;
        _2408 = (((cbLight._m0[_2574].z * 0.3183098733425140380859375) * _2592) * _2593) + _2363;
    }
    uint _2411 = _2275 + 8u;
    float _2424 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2275].w)) * _1162) * 0.949999988079071044921875);
    float _2425 = _2424 * _2424;
    float _2426 = cbLight._m0[_2275].x + _1112;
    float _2427 = cbLight._m0[_2275].y + _1113;
    float _2428 = cbLight._m0[_2275].z + _1114;
    float _2432 = inversesqrt(dot(vec3(_2426, _2427, _2428), vec3(_2426, _2427, _2428)));
    float _2433 = _2432 * _2426;
    float _2434 = _2432 * _2427;
    float _2435 = _2432 * _2428;
    float _2436 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2275].xyz));
    float _4610 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _2439 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _4621 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    float _2440 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
    float _2441 = dot(vec3(_1052, _1053, _1054), vec3(_2433, _2434, _2435));
    float _4632 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2444 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
    float _2445 = dot(vec3(cbLight._m0[_2275].xyz), vec3(_2433, _2434, _2435));
    float _4643 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
    float _2449 = _2425 * _2425;
    float _2453 = ((_2444 * _2444) * (_2449 + (-1.0))) + 1.0;
    float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
    float _2462 = 0.959999978542327880859375 - _1229;
    float _2464 = 0.959999978542327880859375 - _1230;
    float _2465 = 0.959999978542327880859375 - _1231;
    float _2472 = 1.0 - _2425;
    float _2483 = (0.5 / (((_2440 * ((_2439 * _2472) + _2425)) + 9.9999999392252902907785028219223e-09) + (((_2440 * _2472) + _2425) * _2439))) * _2439;
    float _4654 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
    float _2485 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2449 / ((_2453 * _2453) * 3.141590118408203125));
    uint _2496 = _2275 + 9u;
    float _2507 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2312].w)) * _1162) * 0.949999988079071044921875);
    float _2508 = _2507 * _2507;
    float _2509 = cbLight._m0[_2312].x + _1112;
    float _2510 = cbLight._m0[_2312].y + _1113;
    float _2511 = cbLight._m0[_2312].z + _1114;
    float _2515 = inversesqrt(dot(vec3(_2509, _2510, _2511), vec3(_2509, _2510, _2511)));
    float _2516 = _2515 * _2509;
    float _2517 = _2515 * _2510;
    float _2518 = _2515 * _2511;
    float _2519 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2312].xyz));
    float _4665 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2522 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2523 = dot(vec3(_1052, _1053, _1054), vec3(_2516, _2517, _2518));
    float _4676 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
    float _2526 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2527 = dot(vec3(cbLight._m0[_2312].xyz), vec3(_2516, _2517, _2518));
    float _4687 = isnan(0.0) ? _2527 : (isnan(_2527) ? 0.0 : max(_2527, 0.0));
    float _2531 = _2508 * _2508;
    float _2535 = ((_2526 * _2526) * (_2531 + (-1.0))) + 1.0;
    float _2542 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
    float _2549 = 1.0 - _2508;
    float _2559 = (0.5 / (((_2440 * ((_2522 * _2549) + _2508)) + 9.9999999392252902907785028219223e-09) + (((_2440 * _2549) + _2508) * _2522))) * _2522;
    float _4698 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2561 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2531 / ((_2535 * _2535) * 3.141590118408203125));
    float _2571 = (((((_2542 * _2462) + _1232) * cbLight._m0[_2496].x) * _2561) * _2298) + (((((_2461 * _2462) + _1232) * cbLight._m0[_2411].x) * _2485) * _2308);
    float _2572 = (((((_2542 * _2464) + _1234) * cbLight._m0[_2496].y) * _2561) * _2298) + (((((_2461 * _2464) + _1234) * cbLight._m0[_2411].y) * _2485) * _2308);
    float _2573 = (((((_2542 * _2465) + _1235) * cbLight._m0[_2496].z) * _2561) * _2298) + (((((_2461 * _2465) + _1235) * cbLight._m0[_2411].z) * _2485) * _2308);
    float _2635;
    float _2637;
    float _2639;
    if (_2348)
    {
        _2635 = _2571;
        _2637 = _2572;
        _2639 = _2573;
    }
    else
    {
        uint _2641 = _2275 + 2u;
        uint _2645 = _2275 + 10u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _1162) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _1112;
        float _2662 = cbLight._m0[_2641].y + _1113;
        float _2663 = cbLight._m0[_2641].z + _1114;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2641].xyz));
        float _4709 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
        float _2675 = dot(vec3(_1052, _1053, _1054), vec3(_2668, _2669, _2670));
        float _4720 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4731 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2440 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2440 * _2701) + _2660) * _2674))) * _2674;
        float _4742 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
        _2635 = (((((_2694 * _2462) + _1232) * cbLight._m0[_2645].x) * _2713) * _2714) + _2571;
        _2637 = (((((_2694 * _2464) + _1234) * cbLight._m0[_2645].y) * _2713) * _2714) + _2572;
        _2639 = (((((_2694 * _2465) + _1235) * cbLight._m0[_2645].z) * _2713) * _2714) + _2573;
    }
    float _2749;
    float _2751;
    float _2753;
    if (_2366)
    {
        _2749 = _2635;
        _2751 = _2637;
        _2753 = _2639;
    }
    else
    {
        uint _2760 = _2275 + 3u;
        uint _2764 = _2275 + 11u;
        float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2760].w)) * _1162) * 0.949999988079071044921875);
        float _2779 = _2778 * _2778;
        float _2780 = cbLight._m0[_2760].x + _1112;
        float _2781 = cbLight._m0[_2760].y + _1113;
        float _2782 = cbLight._m0[_2760].z + _1114;
        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
        float _2787 = _2786 * _2780;
        float _2788 = _2786 * _2781;
        float _2789 = _2786 * _2782;
        float _2790 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2760].xyz));
        float _4758 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
        float _2794 = dot(vec3(_1052, _1053, _1054), vec3(_2787, _2788, _2789));
        float _4769 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
        float _2798 = dot(vec3(cbLight._m0[_2760].xyz), vec3(_2787, _2788, _2789));
        float _4780 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2802 = _2779 * _2779;
        float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
        float _2813 = exp2(log2(1.0 - (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) * 5.0);
        float _2820 = 1.0 - _2779;
        float _2830 = (0.5 / (((_2440 * ((_2793 * _2820) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2440 * _2820) + _2779) * _2793))) * _2793;
        float _4791 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2832 = (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
        float _2833 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
        _2749 = (((((_2813 * _2462) + _1232) * cbLight._m0[_2764].x) * _2832) * _2833) + _2635;
        _2751 = (((((_2813 * _2464) + _1234) * cbLight._m0[_2764].y) * _2832) * _2833) + _2637;
        _2753 = (((((_2813 * _2465) + _1235) * cbLight._m0[_2764].z) * _2832) * _2833) + _2639;
    }
    float _2968;
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    if (_2273.y == 0u)
    {
        float _2908 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2909 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2908;
        float _2910 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2908;
        float _2911 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2908;
        uvec4 _2923 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2924 = _2923.x;
        uint _2935 = uint((float(_2923.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1121) / _2924))) + floor(float(uint(cbSceneParam._m0[85u].x * _1120) / _2924)));
        float _2945 = (log2(_2911 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2946 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        uint _2949 = uint(isnan(14.0) ? _2946 : (isnan(_2946) ? 14.0 : min(_2946, 14.0)));
        uvec4 _2954 = texelFetch(g_lightClusterGridBuffer, int(((_2949 << 2u) + (_2935 << 6u)) >> 2u));
        uint _2955 = _2954.x;
        uint _2956 = _2923.z;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        float _3095;
        if (((((1u << ((_2956 >> 4u) & 15u)) + 4294967295u) & _2955) == 0u) || ((_2956 & 240u) == 0u))
        {
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
            _3093 = 0.0;
            _3095 = 0.0;
        }
        else
        {
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3094;
            float _3096;
            float _3238 = 0.0;
            float _3239 = 0.0;
            float _3240 = 0.0;
            float _3241 = 0.0;
            float _3242 = 0.0;
            float _3243 = 0.0;
            uint _3244 = 0u;
            uint _3253;
            bool _3254;
            for (;;)
            {
                _3253 = texelFetch(g_lightClassification, int((((_2949 << 5u) + (_2935 << 9u)) + (_3244 << 2u)) >> 2u)).x;
                _3254 = _3253 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3254)
                {
                    frontier_phi_61_pred = _3238;
                    frontier_phi_61_pred_1 = _3243;
                    frontier_phi_61_pred_2 = _3242;
                    frontier_phi_61_pred_3 = _3241;
                    frontier_phi_61_pred_4 = _3240;
                    frontier_phi_61_pred_5 = _3239;
                }
                else
                {
                    float _3362;
                    float _3363;
                    float _3364;
                    float _3365;
                    float _3366;
                    float _3367;
                    uint _3368;
                    _3362 = _3238;
                    _3363 = _3239;
                    _3364 = _3240;
                    _3365 = _3241;
                    _3366 = _3242;
                    _3367 = _3243;
                    _3368 = _3253;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    for (;;)
                    {
                        uint _3372 = uint(findLSB(_3368)) + (_3244 << 5u);
                        uint _3369 = (_3368 + 4294967295u) & _3368;
                        uint _3374 = _3372 * 48u;
                        vec4 _3388 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3374)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3374 + 3u)).x));
                        uint _3394 = (_3372 * 48u) + 4u;
                        vec4 _3407 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3394)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3394 + 3u)).x));
                        uint _3413 = (_3372 * 48u) + 8u;
                        vec3 _3424 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3413)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3413 + 2u)).x));
                        float _3428 = _3388.x - _2909;
                        float _3429 = _3388.y - _2910;
                        float _3430 = _3388.z - _2911;
                        float _3431 = dot(vec3(_3428, _3429, _3430), vec3(_3428, _3429, _3430));
                        float _3434 = inversesqrt(_3431);
                        float _3435 = _3434 * _3428;
                        float _3436 = _3434 * _3429;
                        float _3437 = _3434 * _3430;
                        float _3438 = dot(vec3(_1143, _1146, _1149), vec3(_3435, _3436, _3437));
                        float _3443 = 1.0 - (_3431 * _3388.w);
                        float _4817 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
                        float _3444 = isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0));
                        float _3445 = sqrt(_3431) * _3407.w;
                        float _3448 = 1.39999997615814208984375 / (_3445 + 1.39999997615814208984375);
                        float _3449 = _3448 * _3448;
                        float _3452 = ((1.0 - _3449) * _3438) + _3449;
                        float _3455 = _3445 * _3445;
                        float _3459 = ((isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0))) * _3444) / ((_3455 * 0.699999988079071044921875) + 1.0);
                        float _3463 = (-0.0) - _2909;
                        float _3464 = (-0.0) - _2910;
                        float _3465 = (-0.0) - _2911;
                        float _3469 = inversesqrt(dot(vec3(_3463, _3464, _3465), vec3(_3463, _3464, _3465)));
                        float _3470 = _3469 * _3463;
                        float _3471 = _3469 * _3464;
                        float _3472 = _3469 * _3465;
                        float _3480 = exp2(log2(1.0 / ((_3455 * 3.5) + 5.0)) * 0.25);
                        float _3481 = 1.0 - _1263;
                        float _3488 = sqrt(1.0 - ((1.0 - (_3481 * _3481)) * (1.0 - (_3480 * _3480))));
                        float _3489 = _3488 * _3488;
                        float _3490 = _3489 * _3489;
                        float _3491 = _3470 + _3435;
                        float _3492 = _3471 + _3436;
                        float _3493 = _3472 + _3437;
                        float _3497 = inversesqrt(dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493)));
                        float _3501 = dot(vec3(_1143, _1146, _1149), vec3(_3470, _3471, _3472));
                        float _4833 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                        float _3504 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                        float _3505 = dot(vec3(_1143, _1146, _1149), vec3(_3497 * _3491, _3497 * _3492, _3497 * _3493));
                        float _4844 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                        float _3512 = ((_3508 * _3508) * (_3490 + (-1.0))) + 1.0;
                        float _3513 = _3448 * _3489;
                        float _3514 = _3513 * _3513;
                        float _3517 = ((1.0 - _3514) * _3438) + _3514;
                        float _4855 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3518 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
                        float _3519 = 1.0 - _3489;
                        float _3529 = (0.5 / (((_3518 * ((_3504 * _3519) + _3489)) + 9.9999999392252902907785028219223e-09) + (((_3518 * _3519) + _3489) * _3504))) * _3518;
                        float _4866 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3540 = (((_3490 * 3.1415927410125732421875) * (isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0)))) / ((_3512 * _3512) * ((_3455 * 2.1991131305694580078125) + 3.141590118408203125))) * _3444;
                        _3297 = (_3459 * _3407.x) + _3365;
                        _3298 = (_3459 * _3407.y) + _3366;
                        _3299 = (_3459 * _3407.z) + _3367;
                        _3294 = (_3540 * _3424.x) + _3362;
                        _3295 = (_3540 * _3424.y) + _3363;
                        _3296 = (_3540 * _3424.z) + _3364;
                        if (_3369 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3362 = _3294;
                            _3363 = _3295;
                            _3364 = _3296;
                            _3365 = _3297;
                            _3366 = _3298;
                            _3367 = _3299;
                            _3368 = _3369;
                        }
                    }
                    frontier_phi_61_pred = _3294;
                    frontier_phi_61_pred_1 = _3299;
                    frontier_phi_61_pred_2 = _3298;
                    frontier_phi_61_pred_3 = _3297;
                    frontier_phi_61_pred_4 = _3296;
                    frontier_phi_61_pred_5 = _3295;
                }
                _3086 = frontier_phi_61_pred;
                _3096 = frontier_phi_61_pred_1;
                _3094 = frontier_phi_61_pred_2;
                _3092 = frontier_phi_61_pred_3;
                _3090 = frontier_phi_61_pred_4;
                _3088 = frontier_phi_61_pred_5;
                uint _3245 = _3244 + 1u;
                if (_3245 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3238 = _3086;
                    _3239 = _3088;
                    _3240 = _3090;
                    _3241 = _3092;
                    _3242 = _3094;
                    _3243 = _3096;
                    _3244 = _3245;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
            _3093 = _3094;
            _3095 = _3096;
        }
        uvec4 _3099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3100 = _3099.z;
        uint _3102 = (_3100 >> 8u) & 15u;
        float _3206;
        float _3208;
        float _3210;
        float _3212;
        float _3214;
        float _3216;
        if (((4294967295u << _3102) & _2955) == 0u)
        {
            _3206 = _3085;
            _3208 = _3087;
            _3210 = _3089;
            _3212 = _3091;
            _3214 = _3093;
            _3216 = _3095;
        }
        else
        {
            float _3231 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
            float _3232 = _3231 * _2909;
            float _3233 = _3231 * _2910;
            float _3234 = _3231 * _2911;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3102 < ((_3100 >> 12u) & 15u))
            {
                float _3207;
                float _3209;
                float _3211;
                float _3213;
                float _3215;
                float _3217;
                float _3345 = _3085;
                float _3346 = _3087;
                float _3347 = _3089;
                float _3348 = _3091;
                float _3349 = _3093;
                float _3350 = _3095;
                uint _3351 = _3102;
                uint _3360;
                bool _3361;
                for (;;)
                {
                    _3360 = texelFetch(g_lightClassification, int((((_2949 << 5u) + (_2935 << 9u)) + (_3351 << 2u)) >> 2u)).x;
                    _3361 = _3360 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3361)
                    {
                        frontier_phi_67_pred = _3348;
                        frontier_phi_67_pred_1 = _3349;
                        frontier_phi_67_pred_2 = _3350;
                        frontier_phi_67_pred_3 = _3347;
                        frontier_phi_67_pred_4 = _3346;
                        frontier_phi_67_pred_5 = _3345;
                    }
                    else
                    {
                        float _3545;
                        float _3546;
                        float _3547;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3838;
                        float _3839;
                        float _3840;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3558 = _3345;
                        float _3559 = _3346;
                        float _3560 = _3347;
                        float _3561 = _3348;
                        float _3562 = _3349;
                        float _3563 = _3350;
                        uint _3564 = _3360;
                        uint _3565;
                        vec4 _3590;
                        float _3591;
                        vec4 _3606;
                        vec3 _3618;
                        vec4 _3633;
                        vec4 _3648;
                        float _3694;
                        bool _3695;
                        for (;;)
                        {
                            uint _3575 = ((_3351 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3564));
                            _3565 = (_3564 + 4294967295u) & _3564;
                            uint _3577 = _3575 * 40u;
                            _3590 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3577)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3577 + 3u)).x));
                            _3591 = _3590.w;
                            uint _3593 = (_3575 * 40u) + 4u;
                            _3606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3593 + 3u)).x));
                            uint _3608 = (_3575 * 40u) + 8u;
                            _3618 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3608)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3608 + 2u)).x));
                            uint _3620 = (_3575 * 40u) + 16u;
                            _3633 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3620)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3620 + 3u)).x));
                            uint _3635 = (_3575 * 40u) + 20u;
                            _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            uint _3650 = (_3575 * 40u) + 24u;
                            vec4 _3663 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3650)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3650 + 3u)).x));
                            uint _3669 = (_3575 * 40u) + 28u;
                            vec4 _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            _3694 = fma(_2911, _3682.z, fma(_2910, _3682.y, _3682.x * _2909)) + _3682.w;
                            _3695 = !((fma(_2911, _3663.z, fma(_2910, _3663.y, _3663.x * _2909)) + _3663.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3695)
                            {
                                float _3722 = _3590.x - _2909;
                                float _3723 = _3590.y - _2910;
                                float _3724 = _3590.z - _2911;
                                float _3725 = dot(vec3(_3722, _3723, _3724), vec3(_3722, _3723, _3724));
                                float _3728 = inversesqrt(_3725);
                                float _3729 = _3728 * _3722;
                                float _3730 = _3728 * _3723;
                                float _3731 = _3728 * _3724;
                                float _3735 = 1.0 - (_3725 / (_3591 * _3591));
                                float _4877 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3736 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                                float _3740 = sqrt(_3725) * _3606.w;
                                float _3742 = 1.39999997615814208984375 / (_3740 + 1.39999997615814208984375);
                                float _3743 = _3742 * _3742;
                                float _3746 = ((1.0 - _3743) * dot(vec3(_3729, _3730, _3731), vec3(_1143, _1146, _1149))) + _3743;
                                float _3749 = _3740 * _3740;
                                float _3753 = (fma(_2911, _3633.z, fma(_2910, _3633.y, _3633.x * _2909)) + _3633.w) / _3694;
                                float _3754 = (fma(_2911, _3648.z, fma(_2910, _3648.y, _3648.x * _2909)) + _3648.w) / _3694;
                                float _3758 = 1.0 - dot(vec2(_3753, _3754), vec2(_3753, _3754));
                                float _4893 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                                float _3759 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                                float _3760 = _3759 * (((isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0))) * _3736) / ((_3749 * 0.699999988079071044921875) + 1.0));
                                float _3772 = exp2(log2(1.0 / ((_3749 * 3.5) + 5.0)) * 0.25);
                                float _3773 = 1.0 - _1263;
                                float _3780 = sqrt(1.0 - ((1.0 - (_3773 * _3773)) * (1.0 - (_3772 * _3772))));
                                float _3781 = _3780 * _3780;
                                float _3782 = _3781 * _3781;
                                float _3783 = _3729 - _3232;
                                float _3784 = _3730 - _3233;
                                float _3785 = _3731 - _3234;
                                float _3789 = inversesqrt(dot(vec3(_3783, _3784, _3785), vec3(_3783, _3784, _3785)));
                                float _3793 = dot(vec3(_1143, _1146, _1149), vec3((-0.0) - _3232, (-0.0) - _3233, (-0.0) - _3234));
                                float _4904 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4904 : (isnan(_4904) ? 1.0 : min(_4904, 1.0));
                                float _3797 = dot(vec3(_1143, _1146, _1149), vec3(_3789 * _3783, _3789 * _3784, _3789 * _3785));
                                float _4915 = isnan(0.0) ? _3797 : (isnan(_3797) ? 0.0 : max(_3797, 0.0));
                                float _3800 = isnan(1.0) ? _4915 : (isnan(_4915) ? 1.0 : min(_4915, 1.0));
                                float _3804 = ((_3800 * _3800) * (_3782 + (-1.0))) + 1.0;
                                float _3805 = _3742 * _3781;
                                float _3806 = _3805 * _3805;
                                float _3812 = ((1.0 - _3806) * dot(vec3(_1143, _1146, _1149), vec3(_3729, _3730, _3731))) + _3806;
                                float _4926 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3813 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                                float _3814 = 1.0 - _3781;
                                float _3824 = (0.5 / (((_3813 * ((_3796 * _3814) + _3781)) + 9.9999999392252902907785028219223e-09) + (((_3813 * _3814) + _3781) * _3796))) * _3813;
                                float _4937 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3834 = (_3759 * _3736) * (((_3782 * 3.1415927410125732421875) * (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0)))) / ((_3804 * _3804) * ((_3749 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3834 * _3618.x;
                                frontier_phi_73_pred_1 = _3834 * _3618.y;
                                frontier_phi_73_pred_2 = _3760 * _3606.z;
                                frontier_phi_73_pred_3 = _3760 * _3606.y;
                                frontier_phi_73_pred_4 = _3760 * _3606.x;
                                frontier_phi_73_pred_5 = _3834 * _3618.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3838 = frontier_phi_73_pred;
                            _3839 = frontier_phi_73_pred_1;
                            _3843 = frontier_phi_73_pred_2;
                            _3842 = frontier_phi_73_pred_3;
                            _3841 = frontier_phi_73_pred_4;
                            _3840 = frontier_phi_73_pred_5;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            _3545 = _3838 + _3558;
                            _3546 = _3839 + _3559;
                            _3547 = _3840 + _3560;
                            if (_3565 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3558 = _3545;
                                _3559 = _3546;
                                _3560 = _3547;
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3565;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3548;
                        frontier_phi_67_pred_1 = _3549;
                        frontier_phi_67_pred_2 = _3550;
                        frontier_phi_67_pred_3 = _3547;
                        frontier_phi_67_pred_4 = _3546;
                        frontier_phi_67_pred_5 = _3545;
                    }
                    _3213 = frontier_phi_67_pred;
                    _3215 = frontier_phi_67_pred_1;
                    _3217 = frontier_phi_67_pred_2;
                    _3211 = frontier_phi_67_pred_3;
                    _3209 = frontier_phi_67_pred_4;
                    _3207 = frontier_phi_67_pred_5;
                    uint _3352 = _3351 + 1u;
                    if (_3352 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3345 = _3207;
                        _3346 = _3209;
                        _3347 = _3211;
                        _3348 = _3213;
                        _3349 = _3215;
                        _3350 = _3217;
                        _3351 = _3352;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3215;
                frontier_phi_55_56_ladder_1 = _3217;
                frontier_phi_55_56_ladder_2 = _3213;
                frontier_phi_55_56_ladder_3 = _3211;
                frontier_phi_55_56_ladder_4 = _3209;
                frontier_phi_55_56_ladder_5 = _3207;
            }
            else
            {
                frontier_phi_55_56_ladder = _3093;
                frontier_phi_55_56_ladder_1 = _3095;
                frontier_phi_55_56_ladder_2 = _3091;
                frontier_phi_55_56_ladder_3 = _3089;
                frontier_phi_55_56_ladder_4 = _3087;
                frontier_phi_55_56_ladder_5 = _3085;
            }
            _3206 = frontier_phi_55_56_ladder_5;
            _3208 = frontier_phi_55_56_ladder_4;
            _3210 = frontier_phi_55_56_ladder_3;
            _3212 = frontier_phi_55_56_ladder_2;
            _3214 = frontier_phi_55_56_ladder;
            _3216 = frontier_phi_55_56_ladder_1;
        }
        float _3221 = isnan(1.0) ? _1247 : (isnan(_1247) ? 1.0 : min(_1247, 1.0));
        _2968 = (_3221 * _3212) + _2404;
        _2970 = (_3221 * _3214) + _2406;
        _2972 = (_3221 * _3216) + _2408;
        _2974 = ((_3206 * _1232) * _3221) + _2749;
        _2976 = ((_3208 * _1234) * _3221) + _2751;
        _2978 = ((_3210 * _1235) * _3221) + _2753;
    }
    else
    {
        _2968 = _2404;
        _2970 = _2406;
        _2972 = _2408;
        _2974 = _2749;
        _2976 = _2751;
        _2978 = _2753;
    }
    uint _2984 = _1176 + uint(cbMatDynParam._m0[0u].w);
    float _2990 = cbInstanceData._m0[_2984].x * ((((cbMtdParam._m0[22u].x * _965.x) * cbMtdParam._m0[32u].x) * _986) + _755);
    float _2991 = cbInstanceData._m0[_2984].y * ((((cbMtdParam._m0[22u].y * _965.y) * cbMtdParam._m0[32u].x) * _986) + _756);
    float _2992 = cbInstanceData._m0[_2984].z * ((((cbMtdParam._m0[22u].z * _965.z) * cbMtdParam._m0[32u].x) * _986) + _757);
    float _4953 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
    float _4964 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
    float _4975 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _3009 = (((isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0))) * (_2968 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1247))) + ((_2974 + ((isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0))) * _2044)) * cbPerFrame._m0[3u].x)) + _2990;
    float _3011 = (_2991 + ((_2976 + ((isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0))) * _2044)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0))) * (_2970 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1247)));
    float _3013 = (_2992 + ((_2978 + ((isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))) * _2044)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0))) * (_2972 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1247)));
    float _5001 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3026 = isnan(1.0) ? _5001 : (isnan(_5001) ? 1.0 : min(_5001, 1.0));
    uint _3027 = _1175 + 6u;
    float _3035 = _1120 / cbSceneParam._m0[86u].x;
    float _3036 = _1121 / cbSceneParam._m0[86u].y;
    vec4 _3050 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3035, _3036, (log2((isnan(cbSceneParam._m0[77u].w) ? _1075 : (isnan(_1075) ? cbSceneParam._m0[77u].w : min(_1075, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3052 = _3050.x;
    float _3053 = _3050.y;
    float _3054 = _3050.z;
    float _3055 = _3050.w;
    float _3147;
    float _3149;
    float _3151;
    float _3153;
    if (_1075 > cbSceneParam._m0[78u].w)
    {
        float _3110 = isnan(_1075) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1075 : min(cbSceneParam._m0[80u].w, _1075));
        float _3111 = _3110 / _1075;
        float _3122 = _3111 * _1105;
        float _3123 = _1106 * _3111;
        float _3124 = (-0.0) - _3123;
        float _3125 = _3111 * _1107;
        float _3127 = (cbSceneParam._m0[77u].w * _3124) / _3110;
        float _3128 = _3127 + cbSceneParam._m0[79u].w;
        float _3129 = cbSceneParam._m0[79u].w - _3123;
        float _3135 = sqrt(((_3122 * _3122) + (_3123 * _3123)) + (_3125 * _3125));
        float _3138 = (1.0 - (cbSceneParam._m0[77u].w / _3110)) * _3135;
        float _3143 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3145 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3307;
        if (abs((_3124 - _3127) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3307 = ((((_3128 > 0.0) ? exp2(_3143 * _3128) : (2.0 - exp2(_3145 * _3128))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3138;
        }
        else
        {
            float _3267 = 1.0 / cbSceneParam._m0[80u].x;
            float _3268 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : max(_3128, _3129));
            float _3269 = isnan(_3129) ? _3128 : (isnan(_3128) ? _3129 : min(_3128, _3129));
            float _3278 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : min(_3268, 0.0));
            float _3279 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : min(_3269, 0.0));
            _3307 = ((abs(_3135 / _3124) * cbSceneParam._m0[80u].y) * ((((_3278 - _3279) * 2.0) - ((exp2(_3143 * (isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0)))) - exp2(_3143 * (isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0))))) * _3267)) - ((exp2(_3145 * _3278) - exp2(_3145 * _3279)) * _3267))) + (_3138 * cbSceneParam._m0[80u].z);
        }
        vec4 _3309 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3035, _3036, 1.0), 0.0);
        float _3318 = exp2((_3307 * (-1.44269502162933349609375)) * (1.0 - _3309.w));
        float _3319 = log2(_3318);
        float _3335 = log2(_3055);
        _3147 = (exp2(_3335 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].x)) * _3309.x) / cbSceneParam._m0[78u].x)) + _3052;
        _3149 = (exp2(_3335 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].y)) * _3309.y) / cbSceneParam._m0[78u].y)) + _3053;
        _3151 = (exp2(_3335 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].z)) * _3309.z) / cbSceneParam._m0[78u].z)) + _3054;
        _3153 = _3318 * _3055;
    }
    else
    {
        _3147 = _3052;
        _3149 = _3053;
        _3151 = _3054;
        _3153 = _3055;
    }
    float _3165 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3166 = _3165 == 3.0;
    float _3167 = log2(_3153);
    float _3171 = exp2(_3167 * cbSceneParam._m0[78u].x);
    float _3172 = exp2(_3167 * cbSceneParam._m0[78u].y);
    float _3173 = exp2(_3167 * cbSceneParam._m0[78u].z);
    float _3174 = _3171 * (isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0)));
    float _3175 = _3172 * (isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0)));
    float _3176 = _3173 * (isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0)));
    float _3185 = (_3165 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3185 * (_3166 ? _3174 : (_3174 + (cbSceneParam._m0[72u].w * _3147)));
    SV_Target.y = _3185 * (_3166 ? _3175 : (_3175 + (cbSceneParam._m0[72u].w * _3149)));
    SV_Target.z = _3185 * (_3166 ? _3176 : (_3176 + (cbSceneParam._m0[72u].w * _3151)));
    SV_Target.w = cbInstanceData._m0[_3027].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2990) * _3026) * _3171) * _3185;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2991) * _3026) * _3172) * _3185;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2992) * _3026) * _3173) * _3185;
    SV_Target_1.w = cbInstanceData._m0[_3027].w;
}


