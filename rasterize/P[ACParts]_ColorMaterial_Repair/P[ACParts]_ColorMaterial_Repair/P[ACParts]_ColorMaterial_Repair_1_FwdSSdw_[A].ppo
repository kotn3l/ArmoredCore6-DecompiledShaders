#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1471;
float _3911;
float _3912;
float _3913;
float _3914;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _276 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _283 = log2(0.0);
    float _285 = exp2(_283 * cbMtdParam._m0[31u].z);
    float _289 = _285 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _285);
    float _290 = _285 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _285);
    float _291 = _285 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _285);
    float _292 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _293 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _294 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _295 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    float _297 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    float _298 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    vec4 _314 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _318 = _314.z;
    float _319 = _314.w;
    float _320 = 1.0 - _319;
    float _327 = exp2(log2((1.0 - (_320 * _318)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(1.0) ? _328 : (isnan(_328) ? 1.0 : min(_328, 1.0));
    float _341 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_320 * _320) * _318))) * cbMtdParam._m0[34u].w);
    float _342 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    vec4 _356 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _359 = _356.y;
    float _362 = (_359 * ((isnan(1.0) ? _342 : (isnan(_342) ? 1.0 : min(_342, 1.0))) - _319)) + _319;
    vec4 _374 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _386 = (_356.x + (-0.02500000037252902984619140625)) * 8.0;
    float _388 = roundEven(_386);
    float _389 = cbMtdParam._m0[10u].x * _374.x;
    float _390 = cbMtdParam._m0[10u].y * _374.y;
    float _391 = cbMtdParam._m0[10u].z * _374.z;
    vec4 _403 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _423 = (((cbMtdParam._m0[9u].x * _403.x) - _389) * _362) + _389;
    float _424 = (((cbMtdParam._m0[9u].y * _403.y) - _390) * _362) + _390;
    float _425 = (((cbMtdParam._m0[9u].z * _403.z) - _391) * _362) + _391;
    vec4 _437 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _457 = (((cbMtdParam._m0[20u].x * _437.x) - _423) * _329) + _423;
    float _458 = (((cbMtdParam._m0[20u].y * _437.y) - _424) * _329) + _424;
    float _459 = (((cbMtdParam._m0[20u].z * _437.z) - _425) * _329) + _425;
    vec4 _472 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[24u].x;
    _204[0u] = cbMtdParam._m0[24u].y;
    _205[0u] = cbMtdParam._m0[24u].z;
    _203[1u] = cbMtdParam._m0[25u].x;
    _204[1u] = cbMtdParam._m0[25u].y;
    _205[1u] = cbMtdParam._m0[25u].z;
    _203[2u] = cbMtdParam._m0[26u].x;
    _204[2u] = cbMtdParam._m0[26u].y;
    _205[2u] = cbMtdParam._m0[26u].z;
    _203[3u] = cbMtdParam._m0[27u].x;
    _204[3u] = cbMtdParam._m0[27u].y;
    _205[3u] = cbMtdParam._m0[27u].z;
    _203[4u] = cbMtdParam._m0[28u].x;
    _204[4u] = cbMtdParam._m0[28u].y;
    _205[4u] = cbMtdParam._m0[28u].z;
    _203[5u] = cbMtdParam._m0[29u].x;
    _204[5u] = cbMtdParam._m0[29u].y;
    _205[5u] = cbMtdParam._m0[29u].z;
    float _555 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    uint _558 = uint(int(isnan(5.0) ? _555 : (isnan(_555) ? 5.0 : min(_555, 5.0))));
    float _565 = _203[_558] * _359;
    float _566 = _204[_558] * _359;
    float _567 = _205[_558] * _359;
    float _568 = _565 + ((_276.x * 4.5) * ((((cbMtdParam._m0[30u].x * _472.x) - _457) * _295) + _457));
    float _569 = _566 + ((_276.y * 4.5) * ((((cbMtdParam._m0[30u].y * _472.y) - _458) * _297) + _458));
    float _570 = _567 + ((_276.z * 4.5) * ((((cbMtdParam._m0[30u].z * _472.z) - _459) * _298) + _459));
    float _198[5];
    float _199[5];
    _198[0u] = cbMtdParam._m0[35u].y;
    _199[0u] = cbMtdParam._m0[35u].z;
    _198[1u] = cbMtdParam._m0[36u].w;
    _199[1u] = cbMtdParam._m0[37u].x;
    _198[2u] = cbMtdParam._m0[37u].y;
    _199[2u] = cbMtdParam._m0[37u].z;
    _198[3u] = cbMtdParam._m0[37u].w;
    _199[3u] = cbMtdParam._m0[38u].x;
    _198[4u] = cbMtdParam._m0[38u].y;
    _199[4u] = cbMtdParam._m0[38u].z;
    float _601 = roundEven(5.0 - _386);
    float _602 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _603 = isnan(4.0) ? _602 : (isnan(_602) ? 4.0 : min(_602, 4.0));
    float _605 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    uint _607 = uint(int(isnan(4.0) ? _605 : (isnan(_605) ? 4.0 : min(_605, 4.0))));
    float _619 = ((cbMtdParam._m0[39u].z - _199[_607]) * _362) + _199[_607];
    float _627 = ((cbMtdParam._m0[40u].x - _619) * _329) + _619;
    float _632 = ((cbMtdParam._m0[40u].z - _627) * _295) + _627;
    vec4 _649 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _654 = _649.z + _198[_607];
    vec4 _666 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _674 = (((cbMtdParam._m0[39u].y - _654) + _666.z) * _362) + _654;
    vec4 _687 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _695 = (((cbMtdParam._m0[39u].w - _674) + _687.z) * _329) + _674;
    float _701 = ((((_318 * 2.0) * _695) - _695) * cbMtdParam._m0[33u].w) + _695;
    vec4 _714 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _722 = (((_714.z + cbMtdParam._m0[40u].y) - _701) * _298) + _701;
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _780 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_749 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_753 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _795 = (-0.0) - ((_753 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _799 = (_753 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _800 = isnan(_799) ? _795 : (isnan(_795) ? _799 : min(_795, _799));
    float _4008 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _801 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
    float _824 = ((_666.x - _651) * _362) + _651;
    float _825 = ((_666.y - _652) * _362) + _652;
    float _830 = ((_687.x - _824) * _329) + _824;
    float _831 = ((_687.y - _825) * _329) + _825;
    float _840 = ((((_714.x - _830) * _295) + _830) * 2.0) + (-1.0);
    float _841 = ((((_714.y - _831) * _297) + _831) * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _4019 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _847 = sqrt(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))));
    float _850 = (cbMtdParam._m0[34u].x * ((_314.x * 2.0) + (-1.0))) + _840;
    float _851 = (cbMtdParam._m0[34u].x * ((_314.y * 2.0) + (-1.0))) + _841;
    float _854 = fma(_847, _245 * NORMAL.x, fma(_851, _252 * TANGENT.x, (_238 * _230) * _850));
    float _857 = fma(_847, _245 * NORMAL.y, fma(_851, _252 * TANGENT.y, (_238 * _231) * _850));
    float _860 = fma(_847, _245 * NORMAL.z, fma(_851, _252 * TANGENT.z, (_238 * _232) * _850));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    float _865 = _864 * _854;
    float _866 = _864 * _857;
    float _867 = _864 * _860;
    float _4030 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _868 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4052 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _4063 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4074 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _872 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (_749 / _908);
    float _919 = cbSceneParam._m0[71u].y - (_753 / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    vec4 _932 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _934 = _932.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1153 = sqrt(((_918 * _918) + (_919 * _919)) + (_920 * _920));
        float _1159 = (cbMatDynParam._m0[5u].x * _1153) + cbMatDynParam._m0[5u].y;
        float _4085 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _1164 = (cbMatDynParam._m0[5u].z * _1153) + cbMatDynParam._m0[5u].w;
        float _4096 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))) - _1160)) + _1160) < ((_934 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _945 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _946 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _948 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _950 = _948.w;
    float _968 = fma(_867, cbSceneParam._m0[5u].z, fma(_866, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _865));
    float _971 = fma(_867, cbSceneParam._m0[6u].z, fma(_866, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _865));
    float _974 = fma(_867, cbSceneParam._m0[7u].z, fma(_866, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _865));
    vec4 _976 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _987 = (((_976.y - _868) + (_976.w * _868)) * cbMtdParam._m0[3u].x) + _868;
    uint _1000 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1002 = _1000 + 9u;
    uint _1003 = _1002 + uint(cbMatDynParam._m0[0u].w);
    float _1009 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0)))) * cbInstanceData._m0[_1003].x;
    float _1010 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0)))) * cbInstanceData._m0[_1003].y;
    float _1011 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * cbInstanceData._m0[_1003].z;
    float _4107 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
    float _4129 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
    vec4 _1015 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1020 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1031 = (((_1020.x - _872) + (_1020.w * _872)) * cbMtdParam._m0[3u].x) + _872;
    float _1044 = (cbMtdParam._m0[3u].x * (((_1012 * _950) - _1012) + _1015.x)) + _1012;
    float _1045 = (cbMtdParam._m0[3u].x * (((_1013 * _950) - _1013) + _1015.y)) + _1013;
    float _1046 = (cbMtdParam._m0[3u].x * (((_1014 * _950) - _1014) + _1015.z)) + _1014;
    float _1047 = 1.0 - _1031;
    float _1048 = _1047 * _1044;
    float _1049 = _1047 * _1045;
    float _1050 = _1047 * _1046;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _1031;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _1031;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _1031;
    float _1058 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    vec4 _1070 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _945, cbSceneParam._m0[86u].y * _946));
    float _1073 = _1070.x * TEXCOORD_5.w;
    float _1074 = dot(vec3(_865, _866, _867), vec3(_925, _926, _927));
    float _1077 = _1074 * 2.0;
    float _1081 = (_1077 * _865) - _925;
    float _1082 = (_1077 * _866) - _926;
    float _1083 = (_1077 * _867) - _927;
    float _1087 = abs(dot(vec3(_925, _926, _927), vec3(_865, _866, _867)));
    float _4140 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1089 = sqrt(_987);
    float _1100 = exp2((_1089 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1089 * 3.0));
    float _1106 = (1.0 - _1100) * ((_1089 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1107 = _1100 * _1089;
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1470;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1197 = fma(_1143, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135));
        float _1201 = fma(_1143, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135));
        float _1205 = fma(_1143, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135));
        float _1229 = _1135 + _865;
        float _1230 = _1139 + _866;
        float _1231 = _1143 + _867;
        float _1241 = fma(_1231, cbModelParam._m0[26u].z, fma(_1230, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1229)) - _1197;
        float _1242 = fma(_1231, cbModelParam._m0[27u].z, fma(_1230, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1229)) - _1201;
        float _1243 = fma(_1231, cbModelParam._m0[28u].z, fma(_1230, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1229)) - _1205;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1259 = ((_1247 * _1241) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1197 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1247 * _1242) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1201 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1243) / cbModelParam._m0[34u].z) + ((((((_1205 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1298 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1264.x + (-0.5));
        float _1300 = _1298 * (_1264.y + (-0.5));
        float _1301 = _1298 * (_1264.z + (-0.5));
        float _1308 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1271.x + (-0.5));
        float _1310 = _1308 * (_1271.y + (-0.5));
        float _1311 = _1308 * (_1271.z + (-0.5));
        float _1318 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1278.x + (-0.5));
        float _1320 = _1318 * (_1278.y + (-0.5));
        float _1321 = _1318 * (_1278.z + (-0.5));
        float _1328 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1285.x + (-0.5));
        float _1330 = _1328 * (_1285.y + (-0.5));
        float _1331 = _1328 * (_1285.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1352 = (dot(vec3(_865, _866, _867), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1362 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4188 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1364 + 1.0))) + _1369) * _1332;
        float _1379 = _1300 * 0.5;
        float _1380 = _1310 * 0.5;
        float _1381 = _1320 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_865, _866, _867), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4221 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1406 + 1.0))) + _1411) * _1333;
        float _1421 = _1301 * 0.5;
        float _1422 = _1311 * 0.5;
        float _1423 = _1321 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_865, _866, _867), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4232 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4243 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4254 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_1448 + 1.0))) + _1453) * _1334;
        _1470 = _1301;
        _1472 = _1300;
        _1473 = _1299;
        _1474 = _1311;
        _1475 = _1310;
        _1476 = _1309;
        _1477 = _1321;
        _1478 = _1320;
        _1479 = _1319;
        _1480 = _1334;
        _1481 = _1333;
        _1482 = _1332;
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1471;
        _1472 = _1471;
        _1473 = _1471;
        _1474 = _1471;
        _1475 = _1471;
        _1476 = _1471;
        _1477 = _1471;
        _1478 = _1471;
        _1479 = _1471;
        _1480 = _1471;
        _1481 = _1471;
        _1482 = _1471;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1511 = fma(_1143, cbModelParam._m0[30u].z, fma(_1139, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135));
        float _1515 = fma(_1143, cbModelParam._m0[31u].z, fma(_1139, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135));
        float _1519 = fma(_1143, cbModelParam._m0[32u].z, fma(_1139, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135));
        float _1541 = _1135 + _865;
        float _1542 = _1139 + _866;
        float _1543 = _1143 + _867;
        float _1553 = fma(_1543, cbModelParam._m0[30u].z, fma(_1542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1541)) - _1511;
        float _1554 = fma(_1543, cbModelParam._m0[31u].z, fma(_1542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1541)) - _1515;
        float _1555 = fma(_1543, cbModelParam._m0[32u].z, fma(_1542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1541)) - _1519;
        float _1559 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
        float _1571 = ((_1559 * _1553) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1511 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1572 = ((_1559 * _1554) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1515 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1573 = ((_1559 * _1555) / cbModelParam._m0[35u].z) + ((((((_1519 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        float _1608 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1575.x + (-0.5));
        float _1610 = _1608 * (_1575.y + (-0.5));
        float _1611 = _1608 * (_1575.z + (-0.5));
        float _1618 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1582.x + (-0.5));
        float _1620 = _1618 * (_1582.y + (-0.5));
        float _1621 = _1618 * (_1582.z + (-0.5));
        float _1628 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1589.x + (-0.5));
        float _1630 = _1628 * (_1589.y + (-0.5));
        float _1631 = _1628 * (_1589.z + (-0.5));
        float _1638 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1596.x + (-0.5));
        float _1640 = _1638 * (_1596.y + (-0.5));
        float _1641 = _1638 * (_1596.z + (-0.5));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = _1609 * 0.5;
        float _1646 = _1619 * 0.5;
        float _1647 = _1629 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_865, _866, _867), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4317 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1672 + 1.0))) + _1677) * _1642;
        float _1687 = _1610 * 0.5;
        float _1688 = _1620 * 0.5;
        float _1689 = _1630 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_865, _866, _867), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4350 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1714 + 1.0))) + _1719) * _1643;
        float _1729 = _1611 * 0.5;
        float _1730 = _1621 * 0.5;
        float _1731 = _1631 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_865, _866, _867), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4383 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1756 + 1.0))) + _1761) * _1644;
        _1778 = _1611;
        _1779 = _1610;
        _1780 = _1609;
        _1781 = _1621;
        _1782 = _1620;
        _1783 = _1619;
        _1784 = _1631;
        _1785 = _1630;
        _1786 = _1629;
        _1787 = _1644;
        _1788 = _1643;
        _1789 = _1642;
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
    }
    else
    {
        _1778 = _1471;
        _1779 = _1471;
        _1780 = _1471;
        _1781 = _1471;
        _1782 = _1471;
        _1783 = _1471;
        _1784 = _1471;
        _1785 = _1471;
        _1786 = _1471;
        _1787 = _1471;
        _1788 = _1471;
        _1789 = _1471;
        _1790 = 0.0;
        _1791 = 0.0;
        _1792 = 0.0;
    }
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1483)) + _1483;
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1484)) + _1484;
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1485)) + _1485;
    float _1825 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1802));
    float _1844 = _1081 * 0.5;
    float _1845 = _1082 * 0.5;
    float _1846 = _1083 * 0.5;
    float _1847 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1850 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1853 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1887;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1860 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1470, _1474, _1477, _1480));
        float _1864 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1868 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1473, _1476, _1479, _1482));
        float _1875 = dot(vec4(cbModelParam._m0[39u]), vec4(_1844, _1845, _1846, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1898;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1889 = dot(vec4(cbModelParam._m0[40u]), vec4(_1844, _1845, _1846, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1902 = (_1898 * cbModelParam._m0[1u].x) + (_1887 * (1.0 - cbModelParam._m0[1u].x));
    float _1912 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _987);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1912 : min(cbModelParam._m0[25u].z, _1912));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1962 = fma(_1143, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1135)) + cbModelParam._m0[13u].w;
        float _1966 = fma(_1143, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1135)) + cbModelParam._m0[14u].w;
        float _1970 = fma(_1143, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1135)) + cbModelParam._m0[15u].w;
        float _1973 = fma(_1083, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081));
        float _1976 = fma(_1083, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081));
        float _1979 = fma(_1083, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081));
        float _2007;
        if (_1973 > 0.0)
        {
            _2007 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2007 = frontier_phi_17_15_ladder;
        }
        float _2233;
        if (_1976 > 0.0)
        {
            _2233 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2233 = frontier_phi_26_22_ladder;
        }
        float _2490;
        if (_1979 > 0.0)
        {
            _2490 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2490 = frontier_phi_38_33_ladder;
        }
        float _2492 = isnan(_2233) ? _2007 : (isnan(_2007) ? _2233 : min(_2007, _2233));
        float _2493 = isnan(_2490) ? _2492 : (isnan(_2492) ? _2490 : min(_2492, _2490));
        float _2497 = (_2493 * _1973) + _1962;
        float _2498 = (_2493 * _1976) + _1966;
        float _2499 = (_2493 * _1979) + _1970;
        float _2500 = _2493 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2500;
        float _2504 = _2500 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 > _2504) || ((_2498 < _2502) || ((_2497 < _2502) || (_2497 > _2504))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2627 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2499, cbModelParam._m0[9u].z, fma(_2498, cbModelParam._m0[9u].y, _2497 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2499, cbModelParam._m0[10u].z, fma(_2498, cbModelParam._m0[10u].y, _2497 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2499, cbModelParam._m0[11u].z, fma(_2498, cbModelParam._m0[11u].y, _2497 * cbModelParam._m0[11u].x))), _1913);
            frontier_phi_16_38_ladder = _2627.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2627.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2627.x * cbModelParam._m0[1u].y;
        }
        _1995 = frontier_phi_16_38_ladder_2;
        _1997 = frontier_phi_16_38_ladder_1;
        _1999 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1081, _1082, _1083), _1913);
        _1995 = _1983.x * cbModelParam._m0[1u].y;
        _1997 = _1983.y * cbModelParam._m0[1u].y;
        _1999 = _1983.z * cbModelParam._m0[1u].y;
    }
    float _2003 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _987);
    float _2004 = isnan(_2003) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2003 : min(cbModelParam._m0[25u].w, _2003));
    float _2096;
    float _2098;
    float _2100;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2060 = fma(_1143, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1135)) + cbModelParam._m0[21u].w;
        float _2064 = fma(_1143, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1135)) + cbModelParam._m0[22u].w;
        float _2068 = fma(_1143, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1135)) + cbModelParam._m0[23u].w;
        float _2071 = fma(_1083, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081));
        float _2074 = fma(_1083, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081));
        float _2077 = fma(_1083, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081));
        float _2238;
        if (_2071 > 0.0)
        {
            _2238 = abs((1.0 - _2060) / _2071);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2060 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2238 = frontier_phi_28_24_ladder;
        }
        float _2517;
        if (_2074 > 0.0)
        {
            _2517 = abs((1.0 - _2064) / _2074);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2064 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2517 = frontier_phi_40_35_ladder;
        }
        float _2730;
        if (_2077 > 0.0)
        {
            _2730 = abs((1.0 - _2068) / _2077);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2068 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2730 = frontier_phi_49_46_ladder;
        }
        float _2732 = isnan(_2517) ? _2238 : (isnan(_2238) ? _2517 : min(_2238, _2517));
        float _2733 = isnan(_2730) ? _2732 : (isnan(_2732) ? _2730 : min(_2732, _2730));
        float _2737 = (_2733 * _2071) + _2060;
        float _2738 = (_2733 * _2074) + _2064;
        float _2739 = (_2733 * _2077) + _2068;
        float _2740 = _2733 * 9.9999997473787516355514526367188e-05;
        float _2741 = (-1.0) - _2740;
        float _2743 = _2740 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2739 > _2743) || ((_2739 < _2741) || ((_2738 > _2743) || ((_2738 < _2741) || ((_2737 < _2741) || (_2737 > _2743))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2739, cbModelParam._m0[17u].z, fma(_2738, cbModelParam._m0[17u].y, _2737 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2739, cbModelParam._m0[18u].z, fma(_2738, cbModelParam._m0[18u].y, _2737 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2739, cbModelParam._m0[19u].z, fma(_2738, cbModelParam._m0[19u].y, _2737 * cbModelParam._m0[19u].x))), _2004);
            frontier_phi_25_49_ladder = _2967.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2967.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2967.x * cbModelParam._m0[1u].z;
        }
        _2096 = frontier_phi_25_49_ladder_2;
        _2098 = frontier_phi_25_49_ladder_1;
        _2100 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2080 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1081, _1082, _1083), _2004);
        _2096 = _2080.x * cbModelParam._m0[1u].z;
        _2098 = _2080.y * cbModelParam._m0[1u].z;
        _2100 = _2080.z * cbModelParam._m0[1u].z;
    }
    float _2113 = (((_1106 * _1058) + _1107) * _1073) * ((cbModelParam._m0[1u].w * (_2096 - _1995)) + _1995);
    float _2115 = (((_1106 * _1060) + _1107) * _1073) * ((cbModelParam._m0[1u].w * (_2098 - _1997)) + _1997);
    float _2117 = (((_1106 * _1061) + _1107) * _1073) * ((cbModelParam._m0[1u].w * (_2100 - _1999)) + _1999);
    float _2120 = fma(_2117, cbSceneParam._m0[89u].z, fma(_2115, cbSceneParam._m0[89u].y, _2113 * cbSceneParam._m0[89u].x));
    float _2123 = fma(_2117, cbSceneParam._m0[90u].z, fma(_2115, cbSceneParam._m0[90u].y, _2113 * cbSceneParam._m0[90u].x));
    float _2126 = fma(_2117, cbSceneParam._m0[91u].z, fma(_2115, cbSceneParam._m0[91u].y, _2113 * cbSceneParam._m0[91u].x));
    vec4 _2134 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_945, _946));
    float _2136 = _2134.w;
    float _2148 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2136);
    float _2149 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2136);
    float _2150 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2136);
    uvec4 _2154 = floatBitsToUint(cbInstanceData._m0[_1000 + 5u]);
    uint _2156 = _2154.x * 14u;
    uint _2157 = _2156 + 13u;
    float _2164 = _1073 + (-1.0);
    float _2169 = (cbLight._m0[_2157].x * _2164) + 1.0;
    float _2170 = (cbLight._m0[_2157].y * _2164) + 1.0;
    float _2171 = (cbLight._m0[_2157].z * _2164) + 1.0;
    float _2172 = (cbLight._m0[_2157].w * _2164) + 1.0;
    uint _2173 = _2156 + 5u;
    float _2179 = isnan(1.0) ? _2170 : (isnan(_2170) ? 1.0 : min(_2170, 1.0));
    uint _2183 = _2156 + 4u;
    float _2192 = isnan(1.0) ? _2169 : (isnan(_2169) ? 1.0 : min(_2169, 1.0));
    uint _2196 = _2156 | 1u;
    float _2207 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_865, _866, _867));
    float _2210 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_865, _866, _867));
    float _4519 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _4530 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2215 = (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * 0.3183098733425140380859375;
    float _2217 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * 0.3183098733425140380859375;
    float _2224 = ((cbLight._m0[_2173].x * _2179) * _2217) + (((cbLight._m0[_2183].x * _2148) * _2192) * _2215);
    float _2225 = ((_2179 * cbLight._m0[_2173].y) * _2217) + (((cbLight._m0[_2183].y * _2149) * _2192) * _2215);
    float _2226 = ((_2179 * cbLight._m0[_2173].z) * _2217) + (((cbLight._m0[_2183].z * _2150) * _2192) * _2215);
    uvec4 _2230 = floatBitsToUint(cbLight._m0[_2156 + 12u]);
    bool _2232 = _2230.x == 0u;
    float _2243;
    float _2245;
    float _2247;
    if (_2232)
    {
        _2243 = _2224;
        _2245 = _2225;
        _2247 = _2226;
    }
    else
    {
        uint _2251 = _2156 + 6u;
        float _2267 = (dot(vec3(cbLight._m0[_2156 + 2u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2268 = _2267 * _2267;
        float _4541 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
        float _2269 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2270 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2243 = (((cbLight._m0[_2251].x * 0.3183098733425140380859375) * _2269) * _2270) + _2224;
        _2245 = (((cbLight._m0[_2251].y * 0.3183098733425140380859375) * _2269) * _2270) + _2225;
        _2247 = (((cbLight._m0[_2251].z * 0.3183098733425140380859375) * _2269) * _2270) + _2226;
    }
    bool _2250 = _2230.y == 0u;
    float _2288;
    float _2290;
    float _2292;
    if (_2250)
    {
        _2288 = _2243;
        _2290 = _2245;
        _2292 = _2247;
    }
    else
    {
        uint _2461 = _2156 + 7u;
        float _2477 = (dot(vec3(cbLight._m0[_2156 + 3u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4557 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2480 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2288 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2243;
        _2290 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2245;
        _2292 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2247;
    }
    uint _2295 = _2156 + 8u;
    float _2308 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2156].w)) * _987) * 0.949999988079071044921875);
    float _2309 = _2308 * _2308;
    float _2310 = cbLight._m0[_2156].x + _925;
    float _2311 = cbLight._m0[_2156].y + _926;
    float _2312 = cbLight._m0[_2156].z + _927;
    float _2316 = inversesqrt(dot(vec3(_2310, _2311, _2312), vec3(_2310, _2311, _2312)));
    float _2317 = _2316 * _2310;
    float _2318 = _2316 * _2311;
    float _2319 = _2316 * _2312;
    float _2320 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2156].xyz));
    float _4573 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _4584 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _2324 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2325 = dot(vec3(_865, _866, _867), vec3(_2317, _2318, _2319));
    float _4595 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _2328 = isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0));
    float _2329 = dot(vec3(cbLight._m0[_2156].xyz), vec3(_2317, _2318, _2319));
    float _4606 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
    float _2333 = _2309 * _2309;
    float _2337 = ((_2328 * _2328) * (_2333 + (-1.0))) + 1.0;
    float _2345 = exp2(log2(1.0 - (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0)))) * 5.0);
    float _2346 = 0.959999978542327880859375 - _1055;
    float _2348 = 0.959999978542327880859375 - _1056;
    float _2349 = 0.959999978542327880859375 - _1057;
    float _2356 = 1.0 - _2309;
    float _2367 = (0.5 / (((_2324 * ((_2323 * _2356) + _2309)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2356) + _2309) * _2323))) * _2323;
    float _4617 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * (_2333 / ((_2337 * _2337) * 3.141590118408203125));
    uint _2383 = _2156 + 9u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2196].w)) * _987) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2196].x + _925;
    float _2397 = cbLight._m0[_2196].y + _926;
    float _2398 = cbLight._m0[_2196].z + _927;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2196].xyz));
    float _4628 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
    float _2410 = dot(vec3(_865, _866, _867), vec3(_2403, _2404, _2405));
    float _4639 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
    float _2414 = dot(vec3(cbLight._m0[_2196].xyz), vec3(_2403, _2404, _2405));
    float _4650 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2418 = _2395 * _2395;
    float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
    float _2429 = exp2(log2(1.0 - (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0)))) * 5.0);
    float _2436 = 1.0 - _2395;
    float _2446 = (0.5 / (((_2324 * ((_2409 * _2436) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2436) + _2395) * _2409))) * _2409;
    float _4661 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
    float _2448 = (isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
    float _2458 = (((((_2429 * _2346) + _1058) * cbLight._m0[_2383].x) * _2448) * _2179) + ((((cbLight._m0[_2295].x * _2148) * ((_2345 * _2346) + _1058)) * _2369) * _2192);
    float _2459 = (((((_2429 * _2348) + _1060) * cbLight._m0[_2383].y) * _2448) * _2179) + ((((cbLight._m0[_2295].y * _2149) * ((_2345 * _2348) + _1060)) * _2369) * _2192);
    float _2460 = (((((_2429 * _2349) + _1061) * cbLight._m0[_2383].z) * _2448) * _2179) + ((((cbLight._m0[_2295].z * _2150) * ((_2345 * _2349) + _1061)) * _2369) * _2192);
    float _2522;
    float _2524;
    float _2526;
    if (_2232)
    {
        _2522 = _2458;
        _2524 = _2459;
        _2526 = _2460;
    }
    else
    {
        uint _2528 = _2156 + 2u;
        uint _2532 = _2156 + 10u;
        float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2528].w)) * _987) * 0.949999988079071044921875);
        float _2547 = _2546 * _2546;
        float _2548 = cbLight._m0[_2528].x + _925;
        float _2549 = cbLight._m0[_2528].y + _926;
        float _2550 = cbLight._m0[_2528].z + _927;
        float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
        float _2555 = _2554 * _2548;
        float _2556 = _2554 * _2549;
        float _2557 = _2554 * _2550;
        float _2558 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2528].xyz));
        float _4672 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2561 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
        float _2562 = dot(vec3(_865, _866, _867), vec3(_2555, _2556, _2557));
        float _4683 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
        float _2566 = dot(vec3(cbLight._m0[_2528].xyz), vec3(_2555, _2556, _2557));
        float _4694 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2570 = _2547 * _2547;
        float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
        float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0)))) * 5.0);
        float _2588 = 1.0 - _2547;
        float _2598 = (0.5 / (((_2324 * ((_2561 * _2588) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2588) + _2547) * _2561))) * _2561;
        float _4705 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
        float _2600 = (isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
        float _2601 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
        _2522 = (((((_2581 * _2346) + _1058) * cbLight._m0[_2532].x) * _2600) * _2601) + _2458;
        _2524 = (((((_2581 * _2348) + _1060) * cbLight._m0[_2532].y) * _2600) * _2601) + _2459;
        _2526 = (((((_2581 * _2349) + _1061) * cbLight._m0[_2532].z) * _2600) * _2601) + _2460;
    }
    float _2636;
    float _2638;
    float _2640;
    if (_2250)
    {
        _2636 = _2522;
        _2638 = _2524;
        _2640 = _2526;
    }
    else
    {
        uint _2647 = _2156 + 3u;
        uint _2651 = _2156 + 11u;
        float _2665 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2647].w)) * _987) * 0.949999988079071044921875);
        float _2666 = _2665 * _2665;
        float _2667 = cbLight._m0[_2647].x + _925;
        float _2668 = cbLight._m0[_2647].y + _926;
        float _2669 = cbLight._m0[_2647].z + _927;
        float _2673 = inversesqrt(dot(vec3(_2667, _2668, _2669), vec3(_2667, _2668, _2669)));
        float _2674 = _2673 * _2667;
        float _2675 = _2673 * _2668;
        float _2676 = _2673 * _2669;
        float _2677 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2647].xyz));
        float _4721 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
        float _2681 = dot(vec3(_865, _866, _867), vec3(_2674, _2675, _2676));
        float _4732 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2684 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _2685 = dot(vec3(cbLight._m0[_2647].xyz), vec3(_2674, _2675, _2676));
        float _4743 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2689 = _2666 * _2666;
        float _2693 = ((_2684 * _2684) * (_2689 + (-1.0))) + 1.0;
        float _2700 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
        float _2707 = 1.0 - _2666;
        float _2717 = (0.5 / (((_2324 * ((_2680 * _2707) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2324 * _2707) + _2666) * _2680))) * _2680;
        float _4754 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        float _2719 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2689 / ((_2693 * _2693) * 3.141590118408203125));
        float _2720 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
        _2636 = (((((_2700 * _2346) + _1058) * cbLight._m0[_2651].x) * _2719) * _2720) + _2522;
        _2638 = (((((_2700 * _2348) + _1060) * cbLight._m0[_2651].y) * _2719) * _2720) + _2524;
        _2640 = (((((_2700 * _2349) + _1061) * cbLight._m0[_2651].z) * _2719) * _2720) + _2526;
    }
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_2154.y == 0u)
    {
        float _2795 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2796 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2795;
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2795;
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2795;
        uvec4 _2810 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2811 = _2810.x;
        uint _2822 = uint((float(_2810.y) * floor(float(uint(cbSceneParam._m0[85u].y * _946) / _2811))) + floor(float(uint(cbSceneParam._m0[85u].x * _945) / _2811)));
        float _2832 = (log2(_2798 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2833 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        uint _2836 = uint(isnan(14.0) ? _2833 : (isnan(_2833) ? 14.0 : min(_2833, 14.0)));
        uvec4 _2841 = texelFetch(g_lightClusterGridBuffer, int(((_2836 << 2u) + (_2822 << 6u)) >> 2u));
        uint _2842 = _2841.x;
        uint _2843 = _2810.z;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        if (((((1u << ((_2843 >> 4u) & 15u)) + 4294967295u) & _2842) == 0u) || ((_2843 & 240u) == 0u))
        {
            _2972 = 0.0;
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
        }
        else
        {
            float _2973;
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _3133 = 0.0;
            float _3134 = 0.0;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            uint _3139 = 0u;
            uint _3148;
            bool _3149;
            for (;;)
            {
                _3148 = texelFetch(g_lightClassification, int((((_2836 << 5u) + (_2822 << 9u)) + (_3139 << 2u)) >> 2u)).x;
                _3149 = _3148 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3149)
                {
                    frontier_phi_66_pred = _3133;
                    frontier_phi_66_pred_1 = _3138;
                    frontier_phi_66_pred_2 = _3137;
                    frontier_phi_66_pred_3 = _3136;
                    frontier_phi_66_pred_4 = _3135;
                    frontier_phi_66_pred_5 = _3134;
                }
                else
                {
                    float _3278;
                    float _3279;
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    uint _3284;
                    _3278 = _3133;
                    _3279 = _3134;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3148;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    for (;;)
                    {
                        uint _3288 = uint(findLSB(_3284)) + (_3139 << 5u);
                        uint _3285 = (_3284 + 4294967295u) & _3284;
                        uint _3290 = _3288 * 48u;
                        vec4 _3304 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3290)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3290 + 3u)).x));
                        uint _3310 = (_3288 * 48u) + 4u;
                        vec4 _3323 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3329 = (_3288 * 48u) + 8u;
                        vec3 _3340 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x));
                        float _3344 = _3304.x - _2796;
                        float _3345 = _3304.y - _2797;
                        float _3346 = _3304.z - _2798;
                        float _3347 = dot(vec3(_3344, _3345, _3346), vec3(_3344, _3345, _3346));
                        float _3350 = inversesqrt(_3347);
                        float _3351 = _3350 * _3344;
                        float _3352 = _3350 * _3345;
                        float _3353 = _3350 * _3346;
                        float _3354 = dot(vec3(_968, _971, _974), vec3(_3351, _3352, _3353));
                        float _3359 = 1.0 - (_3347 * _3304.w);
                        float _4780 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0));
                        float _3360 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
                        float _3361 = sqrt(_3347) * _3323.w;
                        float _3364 = 1.39999997615814208984375 / (_3361 + 1.39999997615814208984375);
                        float _3365 = _3364 * _3364;
                        float _3368 = ((1.0 - _3365) * _3354) + _3365;
                        float _3371 = _3361 * _3361;
                        float _3375 = ((isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0))) * _3360) / ((_3371 * 0.699999988079071044921875) + 1.0);
                        float _3379 = (-0.0) - _2796;
                        float _3380 = (-0.0) - _2797;
                        float _3381 = (-0.0) - _2798;
                        float _3385 = inversesqrt(dot(vec3(_3379, _3380, _3381), vec3(_3379, _3380, _3381)));
                        float _3386 = _3385 * _3379;
                        float _3387 = _3385 * _3380;
                        float _3388 = _3385 * _3381;
                        float _3396 = exp2(log2(1.0 / ((_3371 * 3.5) + 5.0)) * 0.25);
                        float _3397 = 1.0 - _1089;
                        float _3404 = sqrt(1.0 - ((1.0 - (_3397 * _3397)) * (1.0 - (_3396 * _3396))));
                        float _3405 = _3404 * _3404;
                        float _3406 = _3405 * _3405;
                        float _3407 = _3386 + _3351;
                        float _3408 = _3387 + _3352;
                        float _3409 = _3388 + _3353;
                        float _3413 = inversesqrt(dot(vec3(_3407, _3408, _3409), vec3(_3407, _3408, _3409)));
                        float _3417 = dot(vec3(_968, _971, _974), vec3(_3386, _3387, _3388));
                        float _4796 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0));
                        float _3420 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
                        float _3421 = dot(vec3(_968, _971, _974), vec3(_3413 * _3407, _3413 * _3408, _3413 * _3409));
                        float _4807 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3424 = isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0));
                        float _3428 = ((_3424 * _3424) * (_3406 + (-1.0))) + 1.0;
                        float _3429 = _3364 * _3405;
                        float _3430 = _3429 * _3429;
                        float _3433 = ((1.0 - _3430) * _3354) + _3430;
                        float _4818 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3434 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
                        float _3435 = 1.0 - _3405;
                        float _3445 = (0.5 / (((_3434 * ((_3420 * _3435) + _3405)) + 9.9999999392252902907785028219223e-09) + (((_3434 * _3435) + _3405) * _3420))) * _3434;
                        float _4829 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3456 = (((_3406 * 3.1415927410125732421875) * (isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0)))) / ((_3428 * _3428) * ((_3371 * 2.1991131305694580078125) + 3.141590118408203125))) * _3360;
                        _3208 = (_3375 * _3323.x) + _3281;
                        _3209 = (_3375 * _3323.y) + _3282;
                        _3210 = (_3375 * _3323.z) + _3283;
                        _3205 = (_3456 * _3340.x) + _3278;
                        _3206 = (_3456 * _3340.y) + _3279;
                        _3207 = (_3456 * _3340.z) + _3280;
                        if (_3285 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3278 = _3205;
                            _3279 = _3206;
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3285;
                        }
                    }
                    frontier_phi_66_pred = _3205;
                    frontier_phi_66_pred_1 = _3210;
                    frontier_phi_66_pred_2 = _3209;
                    frontier_phi_66_pred_3 = _3208;
                    frontier_phi_66_pred_4 = _3207;
                    frontier_phi_66_pred_5 = _3206;
                }
                _2973 = frontier_phi_66_pred;
                _2983 = frontier_phi_66_pred_1;
                _2981 = frontier_phi_66_pred_2;
                _2979 = frontier_phi_66_pred_3;
                _2977 = frontier_phi_66_pred_4;
                _2975 = frontier_phi_66_pred_5;
                uint _3140 = _3139 + 1u;
                if (_3140 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3133 = _2973;
                    _3134 = _2975;
                    _3135 = _2977;
                    _3136 = _2979;
                    _3137 = _2981;
                    _3138 = _2983;
                    _3139 = _3140;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2972 = _2973;
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
        }
        uvec4 _2986 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2987 = _2986.z;
        uint _2989 = (_2987 >> 8u) & 15u;
        float _3101;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        if (((4294967295u << _2989) & _2842) == 0u)
        {
            _3101 = _2972;
            _3103 = _2974;
            _3105 = _2976;
            _3107 = _2978;
            _3109 = _2980;
            _3111 = _2982;
        }
        else
        {
            float _3126 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
            float _3127 = _3126 * _2796;
            float _3128 = _3126 * _2797;
            float _3129 = _3126 * _2798;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2989 < ((_2987 >> 12u) & 15u))
            {
                float _3102;
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3261 = _2972;
                float _3262 = _2974;
                float _3263 = _2976;
                float _3264 = _2978;
                float _3265 = _2980;
                float _3266 = _2982;
                uint _3267 = _2989;
                uint _3276;
                bool _3277;
                for (;;)
                {
                    _3276 = texelFetch(g_lightClassification, int((((_2836 << 5u) + (_2822 << 9u)) + (_3267 << 2u)) >> 2u)).x;
                    _3277 = _3276 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3277)
                    {
                        frontier_phi_77_pred = _3266;
                        frontier_phi_77_pred_1 = _3265;
                        frontier_phi_77_pred_2 = _3264;
                        frontier_phi_77_pred_3 = _3263;
                        frontier_phi_77_pred_4 = _3262;
                        frontier_phi_77_pred_5 = _3261;
                    }
                    else
                    {
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3764;
                        float _3765;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3483 = _3261;
                        float _3484 = _3262;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        uint _3489 = _3276;
                        uint _3490;
                        vec4 _3515;
                        float _3516;
                        vec4 _3531;
                        vec3 _3543;
                        vec4 _3559;
                        vec4 _3574;
                        float _3620;
                        bool _3621;
                        for (;;)
                        {
                            uint _3500 = ((_3267 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3489));
                            _3490 = (_3489 + 4294967295u) & _3489;
                            uint _3502 = _3500 * 40u;
                            _3515 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3502)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3502 + 3u)).x));
                            _3516 = _3515.w;
                            uint _3518 = (_3500 * 40u) + 4u;
                            _3531 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 3u)).x));
                            uint _3533 = (_3500 * 40u) + 8u;
                            _3543 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3533)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3533 + 2u)).x));
                            uint _3546 = (_3500 * 40u) + 16u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3500 * 40u) + 20u;
                            _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3576 = (_3500 * 40u) + 24u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            uint _3595 = (_3500 * 40u) + 28u;
                            vec4 _3608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 3u)).x));
                            _3620 = fma(_2798, _3608.z, fma(_2797, _3608.y, _3608.x * _2796)) + _3608.w;
                            _3621 = !((fma(_2798, _3589.z, fma(_2797, _3589.y, _3589.x * _2796)) + _3589.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3621)
                            {
                                float _3648 = _3515.x - _2796;
                                float _3649 = _3515.y - _2797;
                                float _3650 = _3515.z - _2798;
                                float _3651 = dot(vec3(_3648, _3649, _3650), vec3(_3648, _3649, _3650));
                                float _3654 = inversesqrt(_3651);
                                float _3655 = _3654 * _3648;
                                float _3656 = _3654 * _3649;
                                float _3657 = _3654 * _3650;
                                float _3661 = 1.0 - (_3651 / (_3516 * _3516));
                                float _4840 = isnan(0.0) ? _3661 : (isnan(_3661) ? 0.0 : max(_3661, 0.0));
                                float _3662 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
                                float _3666 = sqrt(_3651) * _3531.w;
                                float _3668 = 1.39999997615814208984375 / (_3666 + 1.39999997615814208984375);
                                float _3669 = _3668 * _3668;
                                float _3672 = ((1.0 - _3669) * dot(vec3(_3655, _3656, _3657), vec3(_968, _971, _974))) + _3669;
                                float _3675 = _3666 * _3666;
                                float _3679 = (fma(_2798, _3559.z, fma(_2797, _3559.y, _3559.x * _2796)) + _3559.w) / _3620;
                                float _3680 = (fma(_2798, _3574.z, fma(_2797, _3574.y, _3574.x * _2796)) + _3574.w) / _3620;
                                float _3684 = 1.0 - dot(vec2(_3679, _3680), vec2(_3679, _3680));
                                float _4856 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                                float _3685 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                                float _3686 = _3685 * (((isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0))) * _3662) / ((_3675 * 0.699999988079071044921875) + 1.0));
                                float _3698 = exp2(log2(1.0 / ((_3675 * 3.5) + 5.0)) * 0.25);
                                float _3699 = 1.0 - _1089;
                                float _3706 = sqrt(1.0 - ((1.0 - (_3699 * _3699)) * (1.0 - (_3698 * _3698))));
                                float _3707 = _3706 * _3706;
                                float _3708 = _3707 * _3707;
                                float _3709 = _3655 - _3127;
                                float _3710 = _3656 - _3128;
                                float _3711 = _3657 - _3129;
                                float _3715 = inversesqrt(dot(vec3(_3709, _3710, _3711), vec3(_3709, _3710, _3711)));
                                float _3719 = dot(vec3(_968, _971, _974), vec3((-0.0) - _3127, (-0.0) - _3128, (-0.0) - _3129));
                                float _4867 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3722 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                                float _3723 = dot(vec3(_968, _971, _974), vec3(_3715 * _3709, _3715 * _3710, _3715 * _3711));
                                float _4878 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3726 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
                                float _3730 = ((_3726 * _3726) * (_3708 + (-1.0))) + 1.0;
                                float _3731 = _3668 * _3707;
                                float _3732 = _3731 * _3731;
                                float _3738 = ((1.0 - _3732) * dot(vec3(_968, _971, _974), vec3(_3655, _3656, _3657))) + _3732;
                                float _4889 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0));
                                float _3740 = 1.0 - _3707;
                                float _3750 = (0.5 / (((_3739 * ((_3722 * _3740) + _3707)) + 9.9999999392252902907785028219223e-09) + (((_3739 * _3740) + _3707) * _3722))) * _3739;
                                float _4900 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3760 = (_3685 * _3662) * (((_3708 * 3.1415927410125732421875) * (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0)))) / ((_3730 * _3730) * ((_3675 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3686 * _3531.y;
                                frontier_phi_83_pred_1 = _3686 * _3531.x;
                                frontier_phi_83_pred_2 = _3760 * _3543.z;
                                frontier_phi_83_pred_3 = _3760 * _3543.y;
                                frontier_phi_83_pred_4 = _3760 * _3543.x;
                                frontier_phi_83_pred_5 = _3686 * _3531.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3768 = frontier_phi_83_pred;
                            _3767 = frontier_phi_83_pred_1;
                            _3766 = frontier_phi_83_pred_2;
                            _3765 = frontier_phi_83_pred_3;
                            _3764 = frontier_phi_83_pred_4;
                            _3769 = frontier_phi_83_pred_5;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            _3475 = _3769 + _3488;
                            _3470 = _3764 + _3483;
                            _3471 = _3765 + _3484;
                            _3472 = _3766 + _3485;
                            if (_3490 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3483 = _3470;
                                _3484 = _3471;
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3490;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3475;
                        frontier_phi_77_pred_1 = _3474;
                        frontier_phi_77_pred_2 = _3473;
                        frontier_phi_77_pred_3 = _3472;
                        frontier_phi_77_pred_4 = _3471;
                        frontier_phi_77_pred_5 = _3470;
                    }
                    _3112 = frontier_phi_77_pred;
                    _3110 = frontier_phi_77_pred_1;
                    _3108 = frontier_phi_77_pred_2;
                    _3106 = frontier_phi_77_pred_3;
                    _3104 = frontier_phi_77_pred_4;
                    _3102 = frontier_phi_77_pred_5;
                    uint _3268 = _3267 + 1u;
                    if (_3268 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3261 = _3102;
                        _3262 = _3104;
                        _3263 = _3106;
                        _3264 = _3108;
                        _3265 = _3110;
                        _3266 = _3112;
                        _3267 = _3268;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3106;
                frontier_phi_58_59_ladder_1 = _3112;
                frontier_phi_58_59_ladder_2 = _3110;
                frontier_phi_58_59_ladder_3 = _3108;
                frontier_phi_58_59_ladder_4 = _3104;
                frontier_phi_58_59_ladder_5 = _3102;
            }
            else
            {
                frontier_phi_58_59_ladder = _2976;
                frontier_phi_58_59_ladder_1 = _2982;
                frontier_phi_58_59_ladder_2 = _2980;
                frontier_phi_58_59_ladder_3 = _2978;
                frontier_phi_58_59_ladder_4 = _2974;
                frontier_phi_58_59_ladder_5 = _2972;
            }
            _3101 = frontier_phi_58_59_ladder_5;
            _3103 = frontier_phi_58_59_ladder_4;
            _3105 = frontier_phi_58_59_ladder;
            _3107 = frontier_phi_58_59_ladder_3;
            _3109 = frontier_phi_58_59_ladder_2;
            _3111 = frontier_phi_58_59_ladder_1;
        }
        float _3116 = isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0));
        _2855 = (_3116 * _3107) + _2288;
        _2857 = (_3116 * _3109) + _2290;
        _2859 = (_3116 * _3111) + _2292;
        _2861 = ((_3101 * _1058) * _3116) + _2636;
        _2863 = ((_3103 * _1060) * _3116) + _2638;
        _2865 = ((_3105 * _1061) * _3116) + _2640;
    }
    else
    {
        _2855 = _2288;
        _2857 = _2290;
        _2859 = _2292;
        _2861 = _2636;
        _2863 = _2638;
        _2865 = _2640;
    }
    uint _2871 = _1002 + uint(cbMatDynParam._m0[0u].w);
    float _2877 = cbInstanceData._m0[_2871].x * ((((cbMtdParam._m0[22u].x * _780.x) * cbMtdParam._m0[32u].x) * _801) + _565);
    float _2878 = cbInstanceData._m0[_2871].y * ((((cbMtdParam._m0[22u].y * _780.y) * cbMtdParam._m0[32u].x) * _801) + _566);
    float _2879 = cbInstanceData._m0[_2871].z * ((((cbMtdParam._m0[22u].z * _780.z) * cbMtdParam._m0[32u].x) * _801) + _567);
    float _4916 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4927 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _4938 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _2896 = (((isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2855 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1073))) + ((_2861 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1902)) * cbPerFrame._m0[3u].x)) + _2877;
    float _2898 = (_2878 + ((_2863 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1902)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0))) * (_2857 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1073)));
    float _2900 = (_2879 + ((_2865 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1902)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0))) * (_2859 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1073)));
    float _2901 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
    float _2902 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2903 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
    float _2909 = cbMtdParam._m0[2u].x * _2877;
    float _2910 = cbMtdParam._m0[2u].y * _2878;
    float _2911 = cbMtdParam._m0[2u].z * _2879;
    float _4964 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2913 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
    uint _2914 = _1000 + 6u;
    float _2922 = _945 / cbSceneParam._m0[86u].x;
    float _2923 = _946 / cbSceneParam._m0[86u].y;
    vec4 _2937 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2939 = _2937.x;
    float _2940 = _2937.y;
    float _2941 = _2937.z;
    float _2942 = _2937.w;
    float _3034;
    float _3036;
    float _3038;
    float _3040;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _2997 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _2998 = _2997 / _888;
        float _3009 = _2998 * _918;
        float _3010 = _919 * _2998;
        float _3011 = (-0.0) - _3010;
        float _3012 = _2998 * _920;
        float _3014 = (cbSceneParam._m0[77u].w * _3011) / _2997;
        float _3015 = _3014 + cbSceneParam._m0[79u].w;
        float _3016 = cbSceneParam._m0[79u].w - _3010;
        float _3022 = sqrt(((_3009 * _3009) + (_3010 * _3010)) + (_3012 * _3012));
        float _3025 = (1.0 - (cbSceneParam._m0[77u].w / _2997)) * _3022;
        float _3030 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3032 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3218;
        if (abs((_3011 - _3014) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3218 = ((((_3015 > 0.0) ? exp2(_3030 * _3015) : (2.0 - exp2(_3032 * _3015))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3025;
        }
        else
        {
            float _3162 = 1.0 / cbSceneParam._m0[80u].x;
            float _3163 = isnan(_3016) ? _3015 : (isnan(_3015) ? _3016 : max(_3015, _3016));
            float _3164 = isnan(_3016) ? _3015 : (isnan(_3015) ? _3016 : min(_3015, _3016));
            float _3173 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : min(_3163, 0.0));
            float _3174 = isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : min(_3164, 0.0));
            _3218 = ((abs(_3022 / _3011) * cbSceneParam._m0[80u].y) * ((((_3173 - _3174) * 2.0) - ((exp2(_3030 * (isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0)))) - exp2(_3030 * (isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))))) * _3162)) - ((exp2(_3032 * _3173) - exp2(_3032 * _3174)) * _3162))) + (_3025 * cbSceneParam._m0[80u].z);
        }
        vec4 _3220 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2922, _2923, 1.0), 0.0);
        float _3229 = exp2((_3218 * (-1.44269502162933349609375)) * (1.0 - _3220.w));
        float _3230 = log2(_3229);
        float _3246 = log2(_2942);
        _3034 = (exp2(_3246 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].x)) * _3220.x) / cbSceneParam._m0[78u].x)) + _2939;
        _3036 = (exp2(_3246 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].y)) * _3220.y) / cbSceneParam._m0[78u].y)) + _2940;
        _3038 = (exp2(_3246 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3230 * cbSceneParam._m0[78u].z)) * _3220.z) / cbSceneParam._m0[78u].z)) + _2941;
        _3040 = _3229 * _2942;
    }
    else
    {
        _3034 = _2939;
        _3036 = _2940;
        _3038 = _2941;
        _3040 = _2942;
    }
    bool _3256;
    vec4 _3050;
    vec4 _3072;
    float _3074;
    float _3078;
    float _3079;
    float _3080;
    float _3083;
    float _3086;
    float _3089;
    float _3090;
    bool _3100;
    for (;;)
    {
        _3050 = cbMatDynParam._m0[0u];
        float _3052 = roundEven(_3050.y);
        bool _3053 = _3052 == 3.0;
        float _3054 = log2(_3040);
        float _3058 = exp2(_3054 * cbSceneParam._m0[78u].x);
        float _3059 = exp2(_3054 * cbSceneParam._m0[78u].y);
        float _3060 = exp2(_3054 * cbSceneParam._m0[78u].z);
        float _3061 = _3058 * _2901;
        float _3062 = _3059 * _2902;
        float _3063 = _3060 * _2903;
        float _3070 = _934 + (-0.5);
        _3072 = cbMtdParam._m0[1u];
        _3074 = _3072.y * _3070;
        float _3077 = (_3052 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3078 = _3077 * (_3053 ? _3061 : (_3061 + (cbSceneParam._m0[72u].w * _3034)));
        _3079 = _3077 * (_3053 ? _3062 : (_3062 + (cbSceneParam._m0[72u].w * _3036)));
        _3080 = _3077 * (_3053 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3038)));
        _3083 = ((_2909 * _2913) * _3058) * _3077;
        _3086 = ((_2910 * _2913) * _3059) * _3077;
        _3089 = ((_2911 * _2913) * _3060) * _3077;
        _3090 = _3070 * 0.999000012874603271484375;
        _3100 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3100)
        {
            if ((cbInstanceData._m0[_1000 + 7u].x + _3090) < 0.5)
            {
                _3256 = true;
                break;
            }
        }
        uint _3197 = _1002 + uint(_3050.w);
        if ((cbInstanceData._m0[_3197].w < 1.0) && ((cbInstanceData._m0[_3197].w + _3090) < 0.5))
        {
            _3256 = true;
            break;
        }
        if ((_3074 + 1.0) < _3072.x)
        {
            _3256 = true;
            break;
        }
        _3256 = false;
        break;
    }
    float _3461;
    if (_3256)
    {
        discard_state = true;
        _3461 = 0.0;
    }
    else
    {
        _3461 = cbInstanceData._m0[_2914].w;
    }
    SV_Target.x = _3078;
    SV_Target.y = _3079;
    SV_Target.z = _3080;
    SV_Target.w = _3461;
    SV_Target_1.x = _3083;
    SV_Target_1.y = _3086;
    SV_Target_1.z = _3089;
    SV_Target_1.w = cbInstanceData._m0[_2914].w;
    discard_exit();
}


