#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1475;
float _4173;
float _4174;
float _4175;
float _4176;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _269 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _283 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_269 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _290 = log2(0.0);
    float _292 = exp2(_290 * cbMtdParam._m0[31u].z);
    float _296 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _292);
    float _297 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _292);
    float _298 = _292 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _292);
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(0.0) ? _297 : (isnan(_297) ? 0.0 : max(_297, 0.0));
    float _301 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _302 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    float _304 = isnan(1.0) ? _300 : (isnan(_300) ? 1.0 : min(_300, 1.0));
    float _305 = isnan(1.0) ? _301 : (isnan(_301) ? 1.0 : min(_301, 1.0));
    vec4 _321 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _269) + cbTextureTilingScale._m0[0u].w));
    float _325 = _321.z;
    float _326 = _321.w;
    float _327 = 1.0 - _326;
    float _334 = exp2(log2((1.0 - (_327 * _325)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    float _348 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_327 * _327) * _325))) * cbMtdParam._m0[34u].w);
    float _349 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    vec4 _363 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _366 = _363.y;
    float _369 = (_366 * ((isnan(1.0) ? _349 : (isnan(_349) ? 1.0 : min(_349, 1.0))) - _326)) + _326;
    vec4 _381 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _269) + cbTextureTilingScale._m0[2u].w));
    float _393 = (_363.x + (-0.02500000037252902984619140625)) * 8.0;
    float _395 = roundEven(_393);
    float _396 = cbMtdParam._m0[10u].x * _381.x;
    float _397 = cbMtdParam._m0[10u].y * _381.y;
    float _398 = cbMtdParam._m0[10u].z * _381.z;
    vec4 _410 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _269) + cbTextureTilingScale._m0[1u].w));
    float _430 = (((cbMtdParam._m0[9u].x * _410.x) - _396) * _369) + _396;
    float _431 = (((cbMtdParam._m0[9u].y * _410.y) - _397) * _369) + _397;
    float _432 = (((cbMtdParam._m0[9u].z * _410.z) - _398) * _369) + _398;
    vec4 _444 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _269) + cbTextureTilingScale._m0[5u].w));
    float _464 = (((cbMtdParam._m0[20u].x * _444.x) - _430) * _336) + _430;
    float _465 = (((cbMtdParam._m0[20u].y * _444.y) - _431) * _336) + _431;
    float _466 = (((cbMtdParam._m0[20u].z * _444.z) - _432) * _336) + _432;
    vec4 _479 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _269) + cbTextureTilingScale._m0[7u].w));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = cbMtdParam._m0[24u].x;
    _206[0u] = cbMtdParam._m0[24u].y;
    _207[0u] = cbMtdParam._m0[24u].z;
    _205[1u] = cbMtdParam._m0[25u].x;
    _206[1u] = cbMtdParam._m0[25u].y;
    _207[1u] = cbMtdParam._m0[25u].z;
    _205[2u] = cbMtdParam._m0[26u].x;
    _206[2u] = cbMtdParam._m0[26u].y;
    _207[2u] = cbMtdParam._m0[26u].z;
    _205[3u] = cbMtdParam._m0[27u].x;
    _206[3u] = cbMtdParam._m0[27u].y;
    _207[3u] = cbMtdParam._m0[27u].z;
    _205[4u] = cbMtdParam._m0[28u].x;
    _206[4u] = cbMtdParam._m0[28u].y;
    _207[4u] = cbMtdParam._m0[28u].z;
    _205[5u] = cbMtdParam._m0[29u].x;
    _206[5u] = cbMtdParam._m0[29u].y;
    _207[5u] = cbMtdParam._m0[29u].z;
    float _562 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    uint _565 = uint(int(isnan(5.0) ? _562 : (isnan(_562) ? 5.0 : min(_562, 5.0))));
    float _572 = _205[_565] * _366;
    float _573 = _206[_565] * _366;
    float _574 = _207[_565] * _366;
    float _575 = _572 + ((_283.x * 4.5) * ((((cbMtdParam._m0[30u].x * _479.x) - _464) * _302) + _464));
    float _576 = _573 + ((_283.y * 4.5) * ((((cbMtdParam._m0[30u].y * _479.y) - _465) * _304) + _465));
    float _577 = _574 + ((_283.z * 4.5) * ((((cbMtdParam._m0[30u].z * _479.z) - _466) * _305) + _466));
    float _200[5];
    float _201[5];
    _200[0u] = cbMtdParam._m0[35u].y;
    _201[0u] = cbMtdParam._m0[35u].z;
    _200[1u] = cbMtdParam._m0[36u].w;
    _201[1u] = cbMtdParam._m0[37u].x;
    _200[2u] = cbMtdParam._m0[37u].y;
    _201[2u] = cbMtdParam._m0[37u].z;
    _200[3u] = cbMtdParam._m0[37u].w;
    _201[3u] = cbMtdParam._m0[38u].x;
    _200[4u] = cbMtdParam._m0[38u].y;
    _201[4u] = cbMtdParam._m0[38u].z;
    float _608 = roundEven(5.0 - _393);
    float _609 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _610 = isnan(4.0) ? _609 : (isnan(_609) ? 4.0 : min(_609, 4.0));
    float _612 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    uint _614 = uint(int(isnan(4.0) ? _612 : (isnan(_612) ? 4.0 : min(_612, 4.0))));
    float _626 = ((cbMtdParam._m0[39u].z - _201[_614]) * _369) + _201[_614];
    float _634 = ((cbMtdParam._m0[40u].x - _626) * _336) + _626;
    float _639 = ((cbMtdParam._m0[40u].z - _634) * _302) + _634;
    vec4 _653 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _269) + cbTextureTilingScale._m0[8u].w));
    float _655 = _653.x;
    float _656 = _653.y;
    float _658 = _653.z + _200[_614];
    vec4 _670 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _269) + cbTextureTilingScale._m0[9u].w));
    float _678 = (((cbMtdParam._m0[39u].y - _658) + _670.z) * _369) + _658;
    vec4 _691 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _269) + cbTextureTilingScale._m0[11u].w));
    float _699 = (((cbMtdParam._m0[39u].w - _678) + _691.z) * _336) + _678;
    float _705 = ((((_325 * 2.0) * _699) - _699) * cbMtdParam._m0[33u].w) + _699;
    vec4 _718 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _269) + cbTextureTilingScale._m0[12u].w));
    float _726 = (((_718.z + cbMtdParam._m0[40u].y) - _705) * _305) + _705;
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _757 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _784 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_753 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_757 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _799 = (-0.0) - ((_757 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _803 = (_757 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _804 = isnan(_803) ? _799 : (isnan(_799) ? _803 : min(_799, _803));
    float _4270 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _805 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _828 = ((_670.x - _655) * _369) + _655;
    float _829 = ((_670.y - _656) * _369) + _656;
    float _834 = ((_691.x - _828) * _336) + _828;
    float _835 = ((_691.y - _829) * _336) + _829;
    float _844 = ((((_718.x - _834) * _302) + _834) * 2.0) + (-1.0);
    float _845 = ((((_718.y - _835) * _304) + _835) * 2.0) + (-1.0);
    float _846 = dot(vec2(_844, _845), vec2(_844, _845));
    float _4281 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
    float _851 = sqrt(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))));
    float _854 = (cbMtdParam._m0[34u].x * ((_321.x * 2.0) + (-1.0))) + _844;
    float _855 = (cbMtdParam._m0[34u].x * ((_321.y * 2.0) + (-1.0))) + _845;
    float _858 = fma(_851, _247 * NORMAL.x, fma(_855, _254 * TANGENT.x, (_240 * _232) * _854));
    float _861 = fma(_851, _247 * NORMAL.y, fma(_855, _254 * TANGENT.y, (_240 * _233) * _854));
    float _864 = fma(_851, _247 * NORMAL.z, fma(_855, _254 * TANGENT.z, (_240 * _234) * _854));
    float _868 = inversesqrt(dot(vec3(_858, _861, _864), vec3(_858, _861, _864)));
    float _869 = _868 * _858;
    float _870 = _868 * _861;
    float _871 = _868 * _864;
    float _4292 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _872 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    float _4303 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4314 = isnan(0.0) ? _576 : (isnan(_576) ? 0.0 : max(_576, 0.0));
    float _4325 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
    float _4336 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _876 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _892 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _912 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _922 = cbSceneParam._m0[71u].x - (_753 / _912);
    float _923 = cbSceneParam._m0[71u].y - (_757 / _912);
    float _924 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _912);
    float _928 = inversesqrt(dot(vec3(_922, _923, _924), vec3(_922, _923, _924)));
    float _929 = _922 * _928;
    float _930 = _923 * _928;
    float _931 = _924 * _928;
    vec4 _936 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _938 = _936.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1157 = sqrt(((_922 * _922) + (_923 * _923)) + (_924 * _924));
        float _1163 = (cbMatDynParam._m0[5u].x * _1157) + cbMatDynParam._m0[5u].y;
        float _4347 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1168 = (cbMatDynParam._m0[5u].z * _1157) + cbMatDynParam._m0[5u].w;
        float _4358 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) - _1164)) + _1164) < ((_938 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _949 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _950 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _952 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _954 = _952.w;
    float _972 = fma(_871, cbSceneParam._m0[5u].z, fma(_870, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _869));
    float _975 = fma(_871, cbSceneParam._m0[6u].z, fma(_870, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _869));
    float _978 = fma(_871, cbSceneParam._m0[7u].z, fma(_870, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _869));
    vec4 _980 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _991 = (((_980.y - _872) + (_980.w * _872)) * cbMtdParam._m0[3u].x) + _872;
    uint _1004 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1006 = _1004 + 9u;
    uint _1007 = _1006 + uint(cbMatDynParam._m0[0u].w);
    float _1013 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * cbInstanceData._m0[_1007].x;
    float _1014 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * cbInstanceData._m0[_1007].y;
    float _1015 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * cbInstanceData._m0[_1007].z;
    float _4369 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _4380 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
    float _1017 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
    float _4391 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    float _1018 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    vec4 _1019 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1024 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1035 = (((_1024.x - _876) + (_1024.w * _876)) * cbMtdParam._m0[3u].x) + _876;
    float _1048 = (cbMtdParam._m0[3u].x * (((_1016 * _954) - _1016) + _1019.x)) + _1016;
    float _1049 = (cbMtdParam._m0[3u].x * (((_1017 * _954) - _1017) + _1019.y)) + _1017;
    float _1050 = (cbMtdParam._m0[3u].x * (((_1018 * _954) - _1018) + _1019.z)) + _1018;
    float _1051 = 1.0 - _1035;
    float _1052 = _1051 * _1048;
    float _1053 = _1051 * _1049;
    float _1054 = _1051 * _1050;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _1035;
    float _1060 = (_1049 + (-0.039999999105930328369140625)) * _1035;
    float _1061 = (_1050 + (-0.039999999105930328369140625)) * _1035;
    float _1062 = _1059 + 0.039999999105930328369140625;
    float _1064 = _1060 + 0.039999999105930328369140625;
    float _1065 = _1061 + 0.039999999105930328369140625;
    vec4 _1074 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _949, cbSceneParam._m0[86u].y * _950));
    float _1077 = _1074.x * TEXCOORD_5.w;
    float _1078 = dot(vec3(_869, _870, _871), vec3(_929, _930, _931));
    float _1081 = _1078 * 2.0;
    float _1085 = (_1081 * _869) - _929;
    float _1086 = (_1081 * _870) - _930;
    float _1087 = (_1081 * _871) - _931;
    float _1091 = abs(dot(vec3(_929, _930, _931), vec3(_869, _870, _871)));
    float _4402 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1093 = sqrt(_991);
    float _1104 = exp2((_1093 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1093 * 3.0));
    float _1110 = (1.0 - _1104) * ((_1093 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1111 = _1104 * _1093;
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1147 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1474;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1201 = fma(_1147, cbModelParam._m0[26u].z, fma(_1143, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1139));
        float _1205 = fma(_1147, cbModelParam._m0[27u].z, fma(_1143, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1139));
        float _1209 = fma(_1147, cbModelParam._m0[28u].z, fma(_1143, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1139));
        float _1233 = _1139 + _869;
        float _1234 = _1143 + _870;
        float _1235 = _1147 + _871;
        float _1245 = fma(_1235, cbModelParam._m0[26u].z, fma(_1234, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233)) - _1201;
        float _1246 = fma(_1235, cbModelParam._m0[27u].z, fma(_1234, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233)) - _1205;
        float _1247 = fma(_1235, cbModelParam._m0[28u].z, fma(_1234, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233)) - _1209;
        float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
        float _1263 = ((_1251 * _1245) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1201 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1251 * _1246) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1205 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1251 * _1247) / cbModelParam._m0[34u].z) + ((((((_1209 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1268 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1275 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1282 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1302 = exp2((_1268.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1268.x + (-0.5));
        float _1304 = _1302 * (_1268.y + (-0.5));
        float _1305 = _1302 * (_1268.z + (-0.5));
        float _1312 = exp2((_1275.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1275.x + (-0.5));
        float _1314 = _1312 * (_1275.y + (-0.5));
        float _1315 = _1312 * (_1275.z + (-0.5));
        float _1322 = exp2((_1282.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1282.x + (-0.5));
        float _1324 = _1322 * (_1282.y + (-0.5));
        float _1325 = _1322 * (_1282.z + (-0.5));
        float _1332 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1289.x + (-0.5));
        float _1334 = _1332 * (_1289.y + (-0.5));
        float _1335 = _1332 * (_1289.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1356 = (dot(vec3(_869, _870, _871), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1366 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1368 = _1367 * 2.0;
        float _1372 = (1.0 - _1367) / (_1367 + 1.0);
        float _4450 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1382 = ((((1.0 - _1373) * (_1368 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1368 + 1.0))) + _1373) * _1336;
        float _1383 = _1304 * 0.5;
        float _1384 = _1314 * 0.5;
        float _1385 = _1324 * 0.5;
        float _1386 = dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385));
        float _1391 = (_1386 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1386);
        float _1399 = (dot(vec3(_869, _870, _871), vec3(_1391 * _1383, _1391 * _1384, _1391 * _1385)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1408 = sqrt(((_1384 * _1384) + (_1383 * _1383)) + (_1385 * _1385)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1410 = _1409 * 2.0;
        float _1414 = (1.0 - _1409) / (_1409 + 1.0);
        float _4483 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
        float _1415 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1424 = ((((1.0 - _1415) * (_1410 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1410 + 1.0))) + _1415) * _1337;
        float _1425 = _1305 * 0.5;
        float _1426 = _1315 * 0.5;
        float _1427 = _1325 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_869, _870, _871), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4494 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _4505 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4516 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * (_1452 + 1.0))) + _1457) * _1338;
        _1474 = _1305;
        _1476 = _1304;
        _1477 = _1303;
        _1478 = _1315;
        _1479 = _1314;
        _1480 = _1313;
        _1481 = _1325;
        _1482 = _1324;
        _1483 = _1323;
        _1484 = _1338;
        _1485 = _1337;
        _1486 = _1336;
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
        _1488 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0)));
        _1489 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
    }
    else
    {
        _1474 = _1475;
        _1476 = _1475;
        _1477 = _1475;
        _1478 = _1475;
        _1479 = _1475;
        _1480 = _1475;
        _1481 = _1475;
        _1482 = _1475;
        _1483 = _1475;
        _1484 = _1475;
        _1485 = _1475;
        _1486 = _1475;
        _1487 = 0.0;
        _1488 = 0.0;
        _1489 = 0.0;
    }
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    float _1795;
    float _1796;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1515 = fma(_1147, cbModelParam._m0[30u].z, fma(_1143, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1139));
        float _1519 = fma(_1147, cbModelParam._m0[31u].z, fma(_1143, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1139));
        float _1523 = fma(_1147, cbModelParam._m0[32u].z, fma(_1143, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1139));
        float _1545 = _1139 + _869;
        float _1546 = _1143 + _870;
        float _1547 = _1147 + _871;
        float _1557 = fma(_1547, cbModelParam._m0[30u].z, fma(_1546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1545)) - _1515;
        float _1558 = fma(_1547, cbModelParam._m0[31u].z, fma(_1546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1545)) - _1519;
        float _1559 = fma(_1547, cbModelParam._m0[32u].z, fma(_1546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1545)) - _1523;
        float _1563 = inversesqrt(dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559)));
        float _1575 = ((_1563 * _1557) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1515 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1576 = ((_1563 * _1558) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1519 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1577 = ((_1563 * _1559) / cbModelParam._m0[35u].z) + ((((((_1523 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1579 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1586 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1593 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        vec4 _1600 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1575, _1576, _1577), 0.0);
        float _1612 = exp2((_1579.w + (-0.5)) * 20.0) * 2.0;
        float _1613 = _1612 * (_1579.x + (-0.5));
        float _1614 = _1612 * (_1579.y + (-0.5));
        float _1615 = _1612 * (_1579.z + (-0.5));
        float _1622 = exp2((_1586.w + (-0.5)) * 20.0) * 2.0;
        float _1623 = _1622 * (_1586.x + (-0.5));
        float _1624 = _1622 * (_1586.y + (-0.5));
        float _1625 = _1622 * (_1586.z + (-0.5));
        float _1632 = exp2((_1593.w + (-0.5)) * 20.0) * 2.0;
        float _1633 = _1632 * (_1593.x + (-0.5));
        float _1634 = _1632 * (_1593.y + (-0.5));
        float _1635 = _1632 * (_1593.z + (-0.5));
        float _1642 = exp2((_1600.w + (-0.5)) * 20.0) * 2.0;
        float _1643 = _1642 * (_1600.x + (-0.5));
        float _1644 = _1642 * (_1600.y + (-0.5));
        float _1645 = _1642 * (_1600.z + (-0.5));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1648 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1649 = _1613 * 0.5;
        float _1650 = _1623 * 0.5;
        float _1651 = _1633 * 0.5;
        float _1652 = dot(vec3(_1649, _1650, _1651), vec3(_1649, _1650, _1651));
        float _1657 = (_1652 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1652);
        float _1665 = (dot(vec3(_869, _870, _871), vec3(_1657 * _1649, _1657 * _1650, _1657 * _1651)) + 1.0) * 0.5;
        float _4557 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1674 = sqrt(((_1650 * _1650) + (_1649 * _1649)) + (_1651 * _1651)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4568 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1676 = _1675 * 2.0;
        float _1680 = (1.0 - _1675) / (_1675 + 1.0);
        float _4579 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1681 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1690 = ((((1.0 - _1681) * (_1676 + 2.0)) * exp2(log2(isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_1676 + 1.0))) + _1681) * _1646;
        float _1691 = _1614 * 0.5;
        float _1692 = _1624 * 0.5;
        float _1693 = _1634 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_869, _870, _871), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1647 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4612 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1718 + 1.0))) + _1723) * _1647;
        float _1733 = _1615 * 0.5;
        float _1734 = _1625 * 0.5;
        float _1735 = _1635 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_869, _870, _871), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4623 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1648 + 9.9999997473787516355514526367188e-06);
        float _4634 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4645 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_1760 + 1.0))) + _1765) * _1648;
        _1782 = _1615;
        _1783 = _1614;
        _1784 = _1613;
        _1785 = _1625;
        _1786 = _1624;
        _1787 = _1623;
        _1788 = _1635;
        _1789 = _1634;
        _1790 = _1633;
        _1791 = _1648;
        _1792 = _1647;
        _1793 = _1646;
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)));
        _1795 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1796 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
    }
    else
    {
        _1782 = _1475;
        _1783 = _1475;
        _1784 = _1475;
        _1785 = _1475;
        _1786 = _1475;
        _1787 = _1475;
        _1788 = _1475;
        _1789 = _1475;
        _1790 = _1475;
        _1791 = _1475;
        _1792 = _1475;
        _1793 = _1475;
        _1794 = 0.0;
        _1795 = 0.0;
        _1796 = 0.0;
    }
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1487)) + _1487;
    float _1807 = (cbModelParam._m0[1u].x * (_1795 - _1488)) + _1488;
    float _1808 = (cbModelParam._m0[1u].x * (_1796 - _1489)) + _1489;
    float _1829 = fma(_1808, cbSceneParam._m0[89u].z, fma(_1807, cbSceneParam._m0[89u].y, _1806 * cbSceneParam._m0[89u].x));
    float _1832 = fma(_1808, cbSceneParam._m0[90u].z, fma(_1807, cbSceneParam._m0[90u].y, _1806 * cbSceneParam._m0[90u].x));
    float _1835 = fma(_1808, cbSceneParam._m0[91u].z, fma(_1807, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1806));
    float _1848 = _1085 * 0.5;
    float _1849 = _1086 * 0.5;
    float _1850 = _1087 * 0.5;
    float _1851 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1784, _1787, _1790, _1793));
    float _1854 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1783, _1786, _1789, _1792));
    float _1857 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1891;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1864 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1474, _1478, _1481, _1484));
        float _1868 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1476, _1479, _1482, _1485));
        float _1872 = dot(vec4(_1848, _1849, _1850, 1.0), vec4(_1477, _1480, _1483, _1486));
        float _1879 = dot(vec4(cbModelParam._m0[39u]), vec4(_1848, _1849, _1850, 1.0));
        _1891 = dot(vec3(isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)), isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1879) ? 0.0 : (isnan(0.0) ? _1879 : max(0.0, _1879))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1891 = 1.0;
    }
    float _1902;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1893 = dot(vec4(cbModelParam._m0[40u]), vec4(_1848, _1849, _1850, 1.0));
        _1902 = dot(vec3(isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0)), isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)), isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1893) ? 0.0 : (isnan(0.0) ? _1893 : max(0.0, _1893))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1902 = 1.0;
    }
    float _1906 = (_1902 * cbModelParam._m0[1u].x) + (_1891 * (1.0 - cbModelParam._m0[1u].x));
    float _1916 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _991);
    float _1917 = isnan(_1916) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1916 : min(cbModelParam._m0[25u].z, _1916));
    float _1999;
    float _2001;
    float _2003;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1966 = fma(_1147, cbModelParam._m0[13u].z, fma(_1143, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1139)) + cbModelParam._m0[13u].w;
        float _1970 = fma(_1147, cbModelParam._m0[14u].z, fma(_1143, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1139)) + cbModelParam._m0[14u].w;
        float _1974 = fma(_1147, cbModelParam._m0[15u].z, fma(_1143, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1139)) + cbModelParam._m0[15u].w;
        float _1977 = fma(_1087, cbModelParam._m0[13u].z, fma(_1086, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1085));
        float _1980 = fma(_1087, cbModelParam._m0[14u].z, fma(_1086, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1085));
        float _1983 = fma(_1087, cbModelParam._m0[15u].z, fma(_1086, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1085));
        float _2011;
        if (_1977 > 0.0)
        {
            _2011 = abs((1.0 - _1966) / _1977);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1966 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2011 = frontier_phi_17_15_ladder;
        }
        float _2185;
        if (_1980 > 0.0)
        {
            _2185 = abs((1.0 - _1970) / _1980);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1980 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1970 + 1.0) / _1980);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2185 = frontier_phi_26_22_ladder;
        }
        float _2479;
        if (_1983 > 0.0)
        {
            _2479 = abs((1.0 - _1974) / _1983);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1983 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1974 + 1.0) / _1983);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2479 = frontier_phi_38_33_ladder;
        }
        float _2481 = isnan(_2185) ? _2011 : (isnan(_2011) ? _2185 : min(_2011, _2185));
        float _2482 = isnan(_2479) ? _2481 : (isnan(_2481) ? _2479 : min(_2481, _2479));
        float _2486 = (_2482 * _1977) + _1966;
        float _2487 = (_2482 * _1980) + _1970;
        float _2488 = (_2482 * _1983) + _1974;
        float _2489 = _2482 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2489;
        float _2493 = _2489 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 > _2493) || ((_2487 < _2491) || ((_2486 < _2491) || (_2486 > _2493))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2633 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2488, cbModelParam._m0[9u].z, fma(_2487, cbModelParam._m0[9u].y, _2486 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2488, cbModelParam._m0[10u].z, fma(_2487, cbModelParam._m0[10u].y, _2486 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2488, cbModelParam._m0[11u].z, fma(_2487, cbModelParam._m0[11u].y, _2486 * cbModelParam._m0[11u].x))), _1917);
            frontier_phi_16_38_ladder = _2633.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2633.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2633.x * cbModelParam._m0[1u].y;
        }
        _1999 = frontier_phi_16_38_ladder_2;
        _2001 = frontier_phi_16_38_ladder_1;
        _2003 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1987 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1085, _1086, _1087), _1917);
        _1999 = _1987.x * cbModelParam._m0[1u].y;
        _2001 = _1987.y * cbModelParam._m0[1u].y;
        _2003 = _1987.z * cbModelParam._m0[1u].y;
    }
    float _2007 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _991);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2007 : min(cbModelParam._m0[25u].w, _2007));
    float _2100;
    float _2102;
    float _2104;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2064 = fma(_1147, cbModelParam._m0[21u].z, fma(_1143, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1139)) + cbModelParam._m0[21u].w;
        float _2068 = fma(_1147, cbModelParam._m0[22u].z, fma(_1143, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1139)) + cbModelParam._m0[22u].w;
        float _2072 = fma(_1147, cbModelParam._m0[23u].z, fma(_1143, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1139)) + cbModelParam._m0[23u].w;
        float _2075 = fma(_1087, cbModelParam._m0[21u].z, fma(_1086, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1085));
        float _2078 = fma(_1087, cbModelParam._m0[22u].z, fma(_1086, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1085));
        float _2081 = fma(_1087, cbModelParam._m0[23u].z, fma(_1086, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1085));
        float _2190;
        if (_2075 > 0.0)
        {
            _2190 = abs((1.0 - _2064) / _2075);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2064 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2190 = frontier_phi_28_24_ladder;
        }
        float _2506;
        if (_2078 > 0.0)
        {
            _2506 = abs((1.0 - _2068) / _2078);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2068 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2506 = frontier_phi_40_35_ladder;
        }
        float _2844;
        if (_2081 > 0.0)
        {
            _2844 = abs((1.0 - _2072) / _2081);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2081 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2072 + 1.0) / _2081);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2844 = frontier_phi_50_47_ladder;
        }
        float _2846 = isnan(_2506) ? _2190 : (isnan(_2190) ? _2506 : min(_2190, _2506));
        float _2847 = isnan(_2844) ? _2846 : (isnan(_2846) ? _2844 : min(_2846, _2844));
        float _2851 = (_2847 * _2075) + _2064;
        float _2852 = (_2847 * _2078) + _2068;
        float _2853 = (_2847 * _2081) + _2072;
        float _2854 = _2847 * 9.9999997473787516355514526367188e-05;
        float _2855 = (-1.0) - _2854;
        float _2857 = _2854 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2853 > _2857) || ((_2853 < _2855) || ((_2852 > _2857) || ((_2852 < _2855) || ((_2851 < _2855) || (_2851 > _2857))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2975 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2853, cbModelParam._m0[17u].z, fma(_2852, cbModelParam._m0[17u].y, _2851 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2853, cbModelParam._m0[18u].z, fma(_2852, cbModelParam._m0[18u].y, _2851 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2853, cbModelParam._m0[19u].z, fma(_2852, cbModelParam._m0[19u].y, _2851 * cbModelParam._m0[19u].x))), _2008);
            frontier_phi_25_50_ladder = _2975.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2975.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2975.x * cbModelParam._m0[1u].z;
        }
        _2100 = frontier_phi_25_50_ladder_2;
        _2102 = frontier_phi_25_50_ladder_1;
        _2104 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2084 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1085, _1086, _1087), _2008);
        _2100 = _2084.x * cbModelParam._m0[1u].z;
        _2102 = _2084.y * cbModelParam._m0[1u].z;
        _2104 = _2084.z * cbModelParam._m0[1u].z;
    }
    float _2117 = (((_1110 * _1062) + _1111) * _1077) * ((cbModelParam._m0[1u].w * (_2100 - _1999)) + _1999);
    float _2119 = (((_1110 * _1064) + _1111) * _1077) * ((cbModelParam._m0[1u].w * (_2102 - _2001)) + _2001);
    float _2121 = (((_1110 * _1065) + _1111) * _1077) * ((cbModelParam._m0[1u].w * (_2104 - _2003)) + _2003);
    float _2124 = fma(_2121, cbSceneParam._m0[89u].z, fma(_2119, cbSceneParam._m0[89u].y, _2117 * cbSceneParam._m0[89u].x));
    float _2127 = fma(_2121, cbSceneParam._m0[90u].z, fma(_2119, cbSceneParam._m0[90u].y, _2117 * cbSceneParam._m0[90u].x));
    float _2130 = fma(_2121, cbSceneParam._m0[91u].z, fma(_2119, cbSceneParam._m0[91u].y, _2117 * cbSceneParam._m0[91u].x));
    float _2164 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2168 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2172 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2176 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2177 = _2164 / _2176;
    float _2178 = _2168 / _2176;
    float _2179 = _2172 / _2176;
    float _2325;
    float _2326;
    float _2327;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2206 = ((uint(_2179 > cbSceneParam._m0[59u].y) + uint(_2179 > cbSceneParam._m0[59u].x)) + uint(_2179 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2207 = _2206 + 43u;
        uint _2215 = _2206 + 44u;
        uint _2223 = _2206 + 45u;
        uint _2231 = _2206 + 46u;
        float _2242 = fma(_2176, cbSceneParam._m0[_2207].w, fma(_2172, cbSceneParam._m0[_2207].z, fma(_2168, cbSceneParam._m0[_2207].y, _2164 * cbSceneParam._m0[_2207].x)));
        float _2246 = fma(_2176, cbSceneParam._m0[_2215].w, fma(_2172, cbSceneParam._m0[_2215].z, fma(_2168, cbSceneParam._m0[_2215].y, _2164 * cbSceneParam._m0[_2215].x)));
        float _2254 = fma(_2176, cbSceneParam._m0[_2231].w, fma(_2172, cbSceneParam._m0[_2231].z, fma(_2168, cbSceneParam._m0[_2231].y, _2164 * cbSceneParam._m0[_2231].x)));
        float _2258 = cbSceneParam._m0[33u].z * _2254;
        float _2260 = cbSceneParam._m0[33u].w * _2254;
        float _2263 = fma(_2176, cbSceneParam._m0[_2223].w, fma(_2172, cbSceneParam._m0[_2223].z, fma(_2168, cbSceneParam._m0[_2223].y, _2164 * cbSceneParam._m0[_2223].x))) / _2254;
        float _2311 = (cbSceneParam._m0[33u].x - sqrt(((_2178 * _2178) + (_2177 * _2177)) + (_2179 * _2179))) * cbSceneParam._m0[33u].y;
        float _4771 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
        float _2318 = (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2258 + _2242) / _2254, (_2260 + _2246) / _2254), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2260 + _2242) / _2254, (_2246 - _2258) / _2254), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 - _2258) / _2254, (_2246 - _2260) / _2254), _2263), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2242 - _2260) / _2254, (_2258 + _2246) / _2254), _2263), 0.0)).x), vec4(0.25)));
        _2325 = 1.0 - (_2318 * cbSceneParam._m0[34u].x);
        _2326 = 1.0 - (_2318 * cbSceneParam._m0[34u].y);
        _2327 = 1.0 - (_2318 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2325 = 1.0;
        _2326 = 1.0;
        _2327 = 1.0;
    }
    float _2391;
    float _2393;
    float _2395;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2379 = fma(_2176, cbSceneParam._m0[63u].w, fma(_2172, cbSceneParam._m0[63u].z, fma(_2168, cbSceneParam._m0[63u].y, _2164 * cbSceneParam._m0[63u].x)));
        float _2380 = fma(_2176, cbSceneParam._m0[60u].w, fma(_2172, cbSceneParam._m0[60u].z, fma(_2168, cbSceneParam._m0[60u].y, _2164 * cbSceneParam._m0[60u].x))) / _2379;
        float _2381 = fma(_2176, cbSceneParam._m0[61u].w, fma(_2172, cbSceneParam._m0[61u].z, fma(_2168, cbSceneParam._m0[61u].y, _2164 * cbSceneParam._m0[61u].x))) / _2379;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2380 >= cbSceneParam._m0[64u].x) && (_2381 >= cbSceneParam._m0[64u].y)) && (_2380 <= cbSceneParam._m0[64u].z)) && (_2381 <= cbSceneParam._m0[64u].w))
        {
            float _2519 = fma(_2176, cbSceneParam._m0[62u].w, fma(_2172, cbSceneParam._m0[62u].z, fma(_2168, cbSceneParam._m0[62u].y, _2164 * cbSceneParam._m0[62u].x))) / _2379;
            float _2523 = isnan(cbSceneParam._m0[41u].w) ? _2519 : (isnan(_2519) ? cbSceneParam._m0[41u].w : max(_2519, cbSceneParam._m0[41u].w));
            float _2566 = (cbSceneParam._m0[33u].x - sqrt(((_2178 * _2178) + (_2177 * _2177)) + (_2179 * _2179))) * cbSceneParam._m0[33u].y;
            float _4787 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
            float _2573 = (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2380, cbSceneParam._m0[33u].w + _2381), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2380, _2381 - cbSceneParam._m0[33u].z), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2380 - cbSceneParam._m0[33u].z, _2381 - cbSceneParam._m0[33u].w), _2523), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2380 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2381), _2523), 0.0)).x), vec4(0.25)));
            float _2577 = 1.0 - (_2573 * cbSceneParam._m0[34u].x);
            float _2578 = 1.0 - (_2573 * cbSceneParam._m0[34u].y);
            float _2579 = 1.0 - (_2573 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2579) ? _2327 : (isnan(_2327) ? _2579 : min(_2327, _2579));
            frontier_phi_37_36_ladder_1 = isnan(_2578) ? _2326 : (isnan(_2326) ? _2578 : min(_2326, _2578));
            frontier_phi_37_36_ladder_2 = isnan(_2577) ? _2325 : (isnan(_2325) ? _2577 : min(_2325, _2577));
        }
        else
        {
            frontier_phi_37_36_ladder = _2327;
            frontier_phi_37_36_ladder_1 = _2326;
            frontier_phi_37_36_ladder_2 = _2325;
        }
        _2391 = frontier_phi_37_36_ladder_2;
        _2393 = frontier_phi_37_36_ladder_1;
        _2395 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2391 = _2325;
        _2393 = _2326;
        _2395 = _2327;
    }
    uvec4 _2400 = floatBitsToUint(cbInstanceData._m0[_1004 + 5u]);
    uint _2402 = _2400.x * 14u;
    uint _2403 = _2402 + 13u;
    float _2410 = _1077 + (-1.0);
    float _2415 = (cbLight._m0[_2403].x * _2410) + 1.0;
    float _2416 = (cbLight._m0[_2403].y * _2410) + 1.0;
    float _2417 = (cbLight._m0[_2403].z * _2410) + 1.0;
    float _2418 = (cbLight._m0[_2403].w * _2410) + 1.0;
    uint _2419 = _2402 + 5u;
    float _2425 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
    uint _2429 = _2402 + 4u;
    float _2438 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
    uint _2442 = _2402 | 1u;
    float _2453 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_869, _870, _871));
    float _2456 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_869, _870, _871));
    float _4823 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _4834 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2461 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * 0.3183098733425140380859375;
    float _2463 = (isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0))) * 0.3183098733425140380859375;
    float _2470 = ((cbLight._m0[_2419].x * _2425) * _2463) + (((cbLight._m0[_2429].x * _2391) * _2438) * _2461);
    float _2471 = ((_2425 * cbLight._m0[_2419].y) * _2463) + (((cbLight._m0[_2429].y * _2393) * _2438) * _2461);
    float _2472 = ((_2425 * cbLight._m0[_2419].z) * _2463) + (((cbLight._m0[_2429].z * _2395) * _2438) * _2461);
    uvec4 _2476 = floatBitsToUint(cbLight._m0[_2402 + 12u]);
    bool _2478 = _2476.x == 0u;
    float _2580;
    float _2582;
    float _2584;
    if (_2478)
    {
        _2580 = _2470;
        _2582 = _2471;
        _2584 = _2472;
    }
    else
    {
        uint _2588 = _2402 + 6u;
        float _2604 = (dot(vec3(cbLight._m0[_2402 + 2u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2605 = _2604 * _2604;
        float _4845 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
        float _2606 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2607 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2580 = (((cbLight._m0[_2588].x * 0.3183098733425140380859375) * _2606) * _2607) + _2470;
        _2582 = (((cbLight._m0[_2588].y * 0.3183098733425140380859375) * _2606) * _2607) + _2471;
        _2584 = (((cbLight._m0[_2588].z * 0.3183098733425140380859375) * _2606) * _2607) + _2472;
    }
    bool _2587 = _2476.y == 0u;
    float _2642;
    float _2644;
    float _2646;
    if (_2587)
    {
        _2642 = _2580;
        _2644 = _2582;
        _2646 = _2584;
    }
    else
    {
        uint _2815 = _2402 + 7u;
        float _2831 = (dot(vec3(cbLight._m0[_2402 + 3u].xyz), vec3(_869, _870, _871)) * 0.5) + 0.5;
        float _2832 = _2831 * _2831;
        float _4861 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2833 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _2834 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2642 = (((cbLight._m0[_2815].x * 0.3183098733425140380859375) * _2833) * _2834) + _2580;
        _2644 = (((cbLight._m0[_2815].y * 0.3183098733425140380859375) * _2833) * _2834) + _2582;
        _2646 = (((cbLight._m0[_2815].z * 0.3183098733425140380859375) * _2833) * _2834) + _2584;
    }
    uint _2649 = _2402 + 8u;
    float _2662 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _991) * 0.949999988079071044921875);
    float _2663 = _2662 * _2662;
    float _2664 = cbLight._m0[_2402].x + _929;
    float _2665 = cbLight._m0[_2402].y + _930;
    float _2666 = cbLight._m0[_2402].z + _931;
    float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
    float _2671 = _2670 * _2664;
    float _2672 = _2670 * _2665;
    float _2673 = _2670 * _2666;
    float _2674 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2402].xyz));
    float _4877 = isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0));
    float _2677 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _4888 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _2678 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _2679 = dot(vec3(_869, _870, _871), vec3(_2671, _2672, _2673));
    float _4899 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2682 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2683 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2671, _2672, _2673));
    float _4910 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
    float _2687 = _2663 * _2663;
    float _2691 = ((_2682 * _2682) * (_2687 + (-1.0))) + 1.0;
    float _2699 = exp2(log2(1.0 - (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) * 5.0);
    float _2700 = 0.959999978542327880859375 - _1059;
    float _2702 = 0.959999978542327880859375 - _1060;
    float _2703 = 0.959999978542327880859375 - _1061;
    float _2710 = 1.0 - _2663;
    float _2721 = (0.5 / (((_2678 * ((_2677 * _2710) + _2663)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2710) + _2663) * _2677))) * _2677;
    float _4921 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2723 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2687 / ((_2691 * _2691) * 3.141590118408203125));
    uint _2737 = _2402 + 9u;
    float _2748 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2442].w)) * _991) * 0.949999988079071044921875);
    float _2749 = _2748 * _2748;
    float _2750 = cbLight._m0[_2442].x + _929;
    float _2751 = cbLight._m0[_2442].y + _930;
    float _2752 = cbLight._m0[_2442].z + _931;
    float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
    float _2757 = _2756 * _2750;
    float _2758 = _2756 * _2751;
    float _2759 = _2756 * _2752;
    float _2760 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2442].xyz));
    float _4932 = isnan(0.0) ? _2760 : (isnan(_2760) ? 0.0 : max(_2760, 0.0));
    float _2763 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
    float _2764 = dot(vec3(_869, _870, _871), vec3(_2757, _2758, _2759));
    float _4943 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
    float _2767 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
    float _2768 = dot(vec3(cbLight._m0[_2442].xyz), vec3(_2757, _2758, _2759));
    float _4954 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2772 = _2749 * _2749;
    float _2776 = ((_2767 * _2767) * (_2772 + (-1.0))) + 1.0;
    float _2783 = exp2(log2(1.0 - (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0)))) * 5.0);
    float _2790 = 1.0 - _2749;
    float _2800 = (0.5 / (((_2678 * ((_2763 * _2790) + _2749)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2790) + _2749) * _2763))) * _2763;
    float _4965 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
    float _2802 = (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0))) * (_2772 / ((_2776 * _2776) * 3.141590118408203125));
    float _2812 = (((((_2783 * _2700) + _1062) * cbLight._m0[_2737].x) * _2802) * _2425) + ((((cbLight._m0[_2649].x * _2391) * ((_2699 * _2700) + _1062)) * _2723) * _2438);
    float _2813 = (((((_2783 * _2702) + _1064) * cbLight._m0[_2737].y) * _2802) * _2425) + ((((cbLight._m0[_2649].y * _2393) * ((_2699 * _2702) + _1064)) * _2723) * _2438);
    float _2814 = (((((_2783 * _2703) + _1065) * cbLight._m0[_2737].z) * _2802) * _2425) + ((((cbLight._m0[_2649].z * _2395) * ((_2699 * _2703) + _1065)) * _2723) * _2438);
    float _2870;
    float _2872;
    float _2874;
    if (_2478)
    {
        _2870 = _2812;
        _2872 = _2813;
        _2874 = _2814;
    }
    else
    {
        uint _2876 = _2402 + 2u;
        uint _2880 = _2402 + 10u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _991) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _929;
        float _2897 = cbLight._m0[_2876].y + _930;
        float _2898 = cbLight._m0[_2876].z + _931;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2876].xyz));
        float _4976 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _2910 = dot(vec3(_869, _870, _871), vec3(_2903, _2904, _2905));
        float _4987 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _4998 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2929 = exp2(log2(1.0 - (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) * 5.0);
        float _2936 = 1.0 - _2895;
        float _2946 = (0.5 / (((_2678 * ((_2909 * _2936) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _2936) + _2895) * _2909))) * _2909;
        float _5009 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2948 = (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2949 = isnan(1.0) ? _2417 : (isnan(_2417) ? 1.0 : min(_2417, 1.0));
        _2870 = (((((_2929 * _2700) + _1062) * cbLight._m0[_2880].x) * _2948) * _2949) + _2812;
        _2872 = (((((_2929 * _2702) + _1064) * cbLight._m0[_2880].y) * _2948) * _2949) + _2813;
        _2874 = (((((_2929 * _2703) + _1065) * cbLight._m0[_2880].z) * _2948) * _2949) + _2814;
    }
    float _2980;
    float _2982;
    float _2984;
    if (_2587)
    {
        _2980 = _2870;
        _2982 = _2872;
        _2984 = _2874;
    }
    else
    {
        uint _2991 = _2402 + 3u;
        uint _2995 = _2402 + 11u;
        float _3009 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2991].w)) * _991) * 0.949999988079071044921875);
        float _3010 = _3009 * _3009;
        float _3011 = cbLight._m0[_2991].x + _929;
        float _3012 = cbLight._m0[_2991].y + _930;
        float _3013 = cbLight._m0[_2991].z + _931;
        float _3017 = inversesqrt(dot(vec3(_3011, _3012, _3013), vec3(_3011, _3012, _3013)));
        float _3018 = _3017 * _3011;
        float _3019 = _3017 * _3012;
        float _3020 = _3017 * _3013;
        float _3021 = dot(vec3(_869, _870, _871), vec3(cbLight._m0[_2991].xyz));
        float _5025 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
        float _3024 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
        float _3025 = dot(vec3(_869, _870, _871), vec3(_3018, _3019, _3020));
        float _5036 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
        float _3028 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
        float _3029 = dot(vec3(cbLight._m0[_2991].xyz), vec3(_3018, _3019, _3020));
        float _5047 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
        float _3033 = _3010 * _3010;
        float _3037 = ((_3028 * _3028) * (_3033 + (-1.0))) + 1.0;
        float _3044 = exp2(log2(1.0 - (isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0)))) * 5.0);
        float _3051 = 1.0 - _3010;
        float _3061 = (0.5 / (((_2678 * ((_3024 * _3051) + _3010)) + 9.9999999392252902907785028219223e-09) + (((_2678 * _3051) + _3010) * _3024))) * _3024;
        float _5058 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        float _3063 = (isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3033 / ((_3037 * _3037) * 3.141590118408203125));
        float _3064 = isnan(1.0) ? _2418 : (isnan(_2418) ? 1.0 : min(_2418, 1.0));
        _2980 = (((((_3044 * _2700) + _1062) * cbLight._m0[_2995].x) * _3063) * _3064) + _2870;
        _2982 = (((((_3044 * _2702) + _1064) * cbLight._m0[_2995].y) * _3063) * _3064) + _2872;
        _2984 = (((((_3044 * _2703) + _1065) * cbLight._m0[_2995].z) * _3063) * _3064) + _2874;
    }
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    float _3140;
    if (_2400.y == 0u)
    {
        uvec4 _3085 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3086 = _3085.x;
        uint _3097 = uint((float(_3085.y) * floor(float(uint(cbSceneParam._m0[85u].y * _950) / _3086))) + floor(float(uint(cbSceneParam._m0[85u].x * _949) / _3086)));
        float _3107 = (log2(_2179 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3108 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
        uint _3111 = uint(isnan(14.0) ? _3108 : (isnan(_3108) ? 14.0 : min(_3108, 14.0)));
        uvec4 _3116 = texelFetch(g_lightClusterGridBuffer, int(((_3111 << 2u) + (_3097 << 6u)) >> 2u));
        uint _3117 = _3116.x;
        uint _3118 = _3085.z;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        float _3236;
        if (((((1u << ((_3118 >> 4u) & 15u)) + 4294967295u) & _3117) == 0u) || ((_3118 & 240u) == 0u))
        {
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
            _3236 = 0.0;
        }
        else
        {
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3237;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            float _3391 = 0.0;
            float _3392 = 0.0;
            uint _3393 = 0u;
            uint _3402;
            bool _3403;
            for (;;)
            {
                _3402 = texelFetch(g_lightClassification, int((((_3111 << 5u) + (_3097 << 9u)) + (_3393 << 2u)) >> 2u)).x;
                _3403 = _3402 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3403)
                {
                    frontier_phi_71_pred = _3392;
                    frontier_phi_71_pred_1 = _3391;
                    frontier_phi_71_pred_2 = _3390;
                    frontier_phi_71_pred_3 = _3389;
                    frontier_phi_71_pred_4 = _3388;
                    frontier_phi_71_pred_5 = _3387;
                }
                else
                {
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    float _3536;
                    float _3537;
                    uint _3538;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3391;
                    _3537 = _3392;
                    _3538 = _3402;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    for (;;)
                    {
                        uint _3542 = uint(findLSB(_3538)) + (_3393 << 5u);
                        uint _3539 = (_3538 + 4294967295u) & _3538;
                        uint _3544 = _3542 * 48u;
                        vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3544)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3544 + 3u)).x));
                        uint _3564 = (_3542 * 48u) + 4u;
                        vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3564)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3564 + 3u)).x));
                        uint _3583 = (_3542 * 48u) + 8u;
                        vec3 _3594 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3583)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 2u)).x));
                        float _3598 = _3558.x - _2177;
                        float _3599 = _3558.y - _2178;
                        float _3600 = _3558.z - _2179;
                        float _3601 = dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600));
                        float _3604 = inversesqrt(_3601);
                        float _3605 = _3604 * _3598;
                        float _3606 = _3604 * _3599;
                        float _3607 = _3604 * _3600;
                        float _3608 = dot(vec3(_972, _975, _978), vec3(_3605, _3606, _3607));
                        float _3613 = 1.0 - (_3601 * _3558.w);
                        float _5084 = isnan(0.0) ? _3613 : (isnan(_3613) ? 0.0 : max(_3613, 0.0));
                        float _3614 = isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0));
                        float _3615 = sqrt(_3601) * _3577.w;
                        float _3618 = 1.39999997615814208984375 / (_3615 + 1.39999997615814208984375);
                        float _3619 = _3618 * _3618;
                        float _3622 = ((1.0 - _3619) * _3608) + _3619;
                        float _3625 = _3615 * _3615;
                        float _3629 = ((isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0))) * _3614) / ((_3625 * 0.699999988079071044921875) + 1.0);
                        float _3633 = (-0.0) - _2177;
                        float _3634 = (-0.0) - _2178;
                        float _3635 = (-0.0) - _2179;
                        float _3639 = inversesqrt(dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635)));
                        float _3640 = _3639 * _3633;
                        float _3641 = _3639 * _3634;
                        float _3642 = _3639 * _3635;
                        float _3649 = exp2(log2(1.0 / ((_3625 * 3.5) + 5.0)) * 0.25);
                        float _3650 = 1.0 - _1093;
                        float _3657 = sqrt(1.0 - ((1.0 - (_3650 * _3650)) * (1.0 - (_3649 * _3649))));
                        float _3658 = _3657 * _3657;
                        float _3659 = _3658 * _3658;
                        float _3660 = _3640 + _3605;
                        float _3661 = _3641 + _3606;
                        float _3662 = _3642 + _3607;
                        float _3666 = inversesqrt(dot(vec3(_3660, _3661, _3662), vec3(_3660, _3661, _3662)));
                        float _3670 = dot(vec3(_972, _975, _978), vec3(_3640, _3641, _3642));
                        float _5100 = isnan(0.0) ? _3670 : (isnan(_3670) ? 0.0 : max(_3670, 0.0));
                        float _3673 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                        float _3674 = dot(vec3(_972, _975, _978), vec3(_3666 * _3660, _3666 * _3661, _3666 * _3662));
                        float _5111 = isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0));
                        float _3677 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                        float _3681 = ((_3677 * _3677) * (_3659 + (-1.0))) + 1.0;
                        float _3682 = _3618 * _3658;
                        float _3683 = _3682 * _3682;
                        float _3686 = ((1.0 - _3683) * _3608) + _3683;
                        float _5122 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3687 = isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0));
                        float _3688 = 1.0 - _3658;
                        float _3698 = (0.5 / (((_3687 * ((_3673 * _3688) + _3658)) + 9.9999999392252902907785028219223e-09) + (((_3687 * _3688) + _3658) * _3673))) * _3687;
                        float _5133 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                        float _3709 = (((_3659 * 3.1415927410125732421875) * (isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0)))) / ((_3681 * _3681) * ((_3625 * 2.1991131305694580078125) + 3.141590118408203125))) * _3614;
                        _3462 = (_3629 * _3577.x) + _3535;
                        _3463 = (_3629 * _3577.y) + _3536;
                        _3464 = (_3629 * _3577.z) + _3537;
                        _3459 = (_3709 * _3594.x) + _3532;
                        _3460 = (_3709 * _3594.y) + _3533;
                        _3461 = (_3709 * _3594.z) + _3534;
                        if (_3539 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3463;
                            _3537 = _3464;
                            _3538 = _3539;
                        }
                    }
                    frontier_phi_71_pred = _3464;
                    frontier_phi_71_pred_1 = _3463;
                    frontier_phi_71_pred_2 = _3462;
                    frontier_phi_71_pred_3 = _3461;
                    frontier_phi_71_pred_4 = _3460;
                    frontier_phi_71_pred_5 = _3459;
                }
                _3237 = frontier_phi_71_pred;
                _3235 = frontier_phi_71_pred_1;
                _3233 = frontier_phi_71_pred_2;
                _3231 = frontier_phi_71_pred_3;
                _3229 = frontier_phi_71_pred_4;
                _3227 = frontier_phi_71_pred_5;
                uint _3394 = _3393 + 1u;
                if (_3394 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3387 = _3227;
                    _3388 = _3229;
                    _3389 = _3231;
                    _3390 = _3233;
                    _3391 = _3235;
                    _3392 = _3237;
                    _3393 = _3394;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
            _3236 = _3237;
        }
        uvec4 _3240 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3241 = _3240.z;
        uint _3243 = (_3241 >> 8u) & 15u;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        float _3365;
        if (((4294967295u << _3243) & _3117) == 0u)
        {
            _3355 = _3226;
            _3357 = _3228;
            _3359 = _3230;
            _3361 = _3232;
            _3363 = _3234;
            _3365 = _3236;
        }
        else
        {
            float _3380 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
            float _3381 = _3380 * _2177;
            float _3382 = _3380 * _2178;
            float _3383 = _3380 * _2179;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3243 < ((_3241 >> 12u) & 15u))
            {
                float _3356;
                float _3358;
                float _3360;
                float _3362;
                float _3364;
                float _3366;
                float _3515 = _3226;
                float _3516 = _3228;
                float _3517 = _3230;
                float _3518 = _3232;
                float _3519 = _3234;
                float _3520 = _3236;
                uint _3521 = _3243;
                uint _3530;
                bool _3531;
                for (;;)
                {
                    _3530 = texelFetch(g_lightClassification, int((((_3111 << 5u) + (_3097 << 9u)) + (_3521 << 2u)) >> 2u)).x;
                    _3531 = _3530 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3531)
                    {
                        frontier_phi_82_pred = _3520;
                        frontier_phi_82_pred_1 = _3519;
                        frontier_phi_82_pred_2 = _3518;
                        frontier_phi_82_pred_3 = _3517;
                        frontier_phi_82_pred_4 = _3516;
                        frontier_phi_82_pred_5 = _3515;
                    }
                    else
                    {
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _3727;
                        float _3728;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        float _3740 = _3519;
                        float _3741 = _3520;
                        uint _3742 = _3530;
                        uint _3743;
                        vec4 _3768;
                        float _3769;
                        vec4 _3784;
                        vec3 _3796;
                        vec4 _3812;
                        vec4 _3827;
                        float _3873;
                        bool _3874;
                        for (;;)
                        {
                            uint _3753 = ((_3521 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3742));
                            _3743 = (_3742 + 4294967295u) & _3742;
                            uint _3755 = _3753 * 40u;
                            _3768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3755 + 3u)).x));
                            _3769 = _3768.w;
                            uint _3771 = (_3753 * 40u) + 4u;
                            _3784 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3771)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3771 + 3u)).x));
                            uint _3786 = (_3753 * 40u) + 8u;
                            _3796 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3786 + 2u)).x));
                            uint _3799 = (_3753 * 40u) + 16u;
                            _3812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3799 + 3u)).x));
                            uint _3814 = (_3753 * 40u) + 20u;
                            _3827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3814 + 3u)).x));
                            uint _3829 = (_3753 * 40u) + 24u;
                            vec4 _3842 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3829)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3829 + 3u)).x));
                            uint _3848 = (_3753 * 40u) + 28u;
                            vec4 _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            _3873 = fma(_2179, _3861.z, fma(_2178, _3861.y, _3861.x * _2177)) + _3861.w;
                            _3874 = !((fma(_2179, _3842.z, fma(_2178, _3842.y, _3842.x * _2177)) + _3842.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3874)
                            {
                                float _3901 = _3768.x - _2177;
                                float _3902 = _3768.y - _2178;
                                float _3903 = _3768.z - _2179;
                                float _3904 = dot(vec3(_3901, _3902, _3903), vec3(_3901, _3902, _3903));
                                float _3907 = inversesqrt(_3904);
                                float _3908 = _3907 * _3901;
                                float _3909 = _3907 * _3902;
                                float _3910 = _3907 * _3903;
                                float _3914 = 1.0 - (_3904 / (_3769 * _3769));
                                float _5144 = isnan(0.0) ? _3914 : (isnan(_3914) ? 0.0 : max(_3914, 0.0));
                                float _3915 = isnan(1.0) ? _5144 : (isnan(_5144) ? 1.0 : min(_5144, 1.0));
                                float _3919 = sqrt(_3904) * _3784.w;
                                float _3921 = 1.39999997615814208984375 / (_3919 + 1.39999997615814208984375);
                                float _3922 = _3921 * _3921;
                                float _3925 = ((1.0 - _3922) * dot(vec3(_3908, _3909, _3910), vec3(_972, _975, _978))) + _3922;
                                float _3928 = _3919 * _3919;
                                float _3932 = (fma(_2179, _3812.z, fma(_2178, _3812.y, _3812.x * _2177)) + _3812.w) / _3873;
                                float _3933 = (fma(_2179, _3827.z, fma(_2178, _3827.y, _3827.x * _2177)) + _3827.w) / _3873;
                                float _3937 = 1.0 - dot(vec2(_3932, _3933), vec2(_3932, _3933));
                                float _5160 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3938 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3939 = _3938 * (((isnan(0.0) ? _3925 : (isnan(_3925) ? 0.0 : max(_3925, 0.0))) * _3915) / ((_3928 * 0.699999988079071044921875) + 1.0));
                                float _3951 = exp2(log2(1.0 / ((_3928 * 3.5) + 5.0)) * 0.25);
                                float _3952 = 1.0 - _1093;
                                float _3959 = sqrt(1.0 - ((1.0 - (_3952 * _3952)) * (1.0 - (_3951 * _3951))));
                                float _3960 = _3959 * _3959;
                                float _3961 = _3960 * _3960;
                                float _3962 = _3908 - _3381;
                                float _3963 = _3909 - _3382;
                                float _3964 = _3910 - _3383;
                                float _3968 = inversesqrt(dot(vec3(_3962, _3963, _3964), vec3(_3962, _3963, _3964)));
                                float _3972 = dot(vec3(_972, _975, _978), vec3((-0.0) - _3381, (-0.0) - _3382, (-0.0) - _3383));
                                float _5171 = isnan(0.0) ? _3972 : (isnan(_3972) ? 0.0 : max(_3972, 0.0));
                                float _3975 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _3976 = dot(vec3(_972, _975, _978), vec3(_3968 * _3962, _3968 * _3963, _3968 * _3964));
                                float _5182 = isnan(0.0) ? _3976 : (isnan(_3976) ? 0.0 : max(_3976, 0.0));
                                float _3979 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _3983 = ((_3979 * _3979) * (_3961 + (-1.0))) + 1.0;
                                float _3984 = _3921 * _3960;
                                float _3985 = _3984 * _3984;
                                float _3991 = ((1.0 - _3985) * dot(vec3(_972, _975, _978), vec3(_3908, _3909, _3910))) + _3985;
                                float _5193 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _3992 = isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0));
                                float _3993 = 1.0 - _3960;
                                float _4003 = (0.5 / (((_3992 * ((_3975 * _3993) + _3960)) + 9.9999999392252902907785028219223e-09) + (((_3992 * _3993) + _3960) * _3975))) * _3992;
                                float _5204 = isnan(0.0) ? _4003 : (isnan(_4003) ? 0.0 : max(_4003, 0.0));
                                float _4013 = (_3938 * _3915) * (((_3961 * 3.1415927410125732421875) * (isnan(1.0) ? _5204 : (isnan(_5204) ? 1.0 : min(_5204, 1.0)))) / ((_3983 * _3983) * ((_3928 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3939 * _3784.z;
                                frontier_phi_88_pred_1 = _3939 * _3784.y;
                                frontier_phi_88_pred_2 = _3939 * _3784.x;
                                frontier_phi_88_pred_3 = _4013 * _3796.z;
                                frontier_phi_88_pred_4 = _4013 * _3796.y;
                                frontier_phi_88_pred_5 = _4013 * _3796.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4022 = frontier_phi_88_pred;
                            _4021 = frontier_phi_88_pred_1;
                            _4020 = frontier_phi_88_pred_2;
                            _4019 = frontier_phi_88_pred_3;
                            _4018 = frontier_phi_88_pred_4;
                            _4017 = frontier_phi_88_pred_5;
                            _3726 = _4020 + _3739;
                            _3727 = _4021 + _3740;
                            _3728 = _4022 + _3741;
                            _3723 = _4017 + _3736;
                            _3724 = _4018 + _3737;
                            _3725 = _4019 + _3738;
                            if (_3743 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3743;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3728;
                        frontier_phi_82_pred_1 = _3727;
                        frontier_phi_82_pred_2 = _3726;
                        frontier_phi_82_pred_3 = _3725;
                        frontier_phi_82_pred_4 = _3724;
                        frontier_phi_82_pred_5 = _3723;
                    }
                    _3366 = frontier_phi_82_pred;
                    _3364 = frontier_phi_82_pred_1;
                    _3362 = frontier_phi_82_pred_2;
                    _3360 = frontier_phi_82_pred_3;
                    _3358 = frontier_phi_82_pred_4;
                    _3356 = frontier_phi_82_pred_5;
                    uint _3522 = _3521 + 1u;
                    if (_3522 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3515 = _3356;
                        _3516 = _3358;
                        _3517 = _3360;
                        _3518 = _3362;
                        _3519 = _3364;
                        _3520 = _3366;
                        _3521 = _3522;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3362;
                frontier_phi_63_64_ladder_1 = _3366;
                frontier_phi_63_64_ladder_2 = _3364;
                frontier_phi_63_64_ladder_3 = _3360;
                frontier_phi_63_64_ladder_4 = _3358;
                frontier_phi_63_64_ladder_5 = _3356;
            }
            else
            {
                frontier_phi_63_64_ladder = _3232;
                frontier_phi_63_64_ladder_1 = _3236;
                frontier_phi_63_64_ladder_2 = _3234;
                frontier_phi_63_64_ladder_3 = _3230;
                frontier_phi_63_64_ladder_4 = _3228;
                frontier_phi_63_64_ladder_5 = _3226;
            }
            _3355 = frontier_phi_63_64_ladder_5;
            _3357 = frontier_phi_63_64_ladder_4;
            _3359 = frontier_phi_63_64_ladder_3;
            _3361 = frontier_phi_63_64_ladder;
            _3363 = frontier_phi_63_64_ladder_2;
            _3365 = frontier_phi_63_64_ladder_1;
        }
        float _3370 = isnan(1.0) ? _1077 : (isnan(_1077) ? 1.0 : min(_1077, 1.0));
        _3130 = (_3370 * _3361) + _2642;
        _3132 = (_3370 * _3363) + _2644;
        _3134 = (_3370 * _3365) + _2646;
        _3136 = ((_3355 * _1062) * _3370) + _2980;
        _3138 = ((_3357 * _1064) * _3370) + _2982;
        _3140 = ((_3359 * _1065) * _3370) + _2984;
    }
    else
    {
        _3130 = _2642;
        _3132 = _2644;
        _3134 = _2646;
        _3136 = _2980;
        _3138 = _2982;
        _3140 = _2984;
    }
    uint _3146 = _1006 + uint(cbMatDynParam._m0[0u].w);
    float _3152 = cbInstanceData._m0[_3146].x * ((((cbMtdParam._m0[22u].x * _784.x) * cbMtdParam._m0[32u].x) * _805) + _572);
    float _3153 = cbInstanceData._m0[_3146].y * ((((cbMtdParam._m0[22u].y * _784.y) * cbMtdParam._m0[32u].x) * _805) + _573);
    float _3154 = cbInstanceData._m0[_3146].z * ((((cbMtdParam._m0[22u].z * _784.z) * cbMtdParam._m0[32u].x) * _805) + _574);
    float _5220 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _5231 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
    float _5242 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
    float _3171 = (((isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0))) * (_3130 + ((isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0))) * _1077))) + ((_3136 + ((isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0))) * _1906)) * cbPerFrame._m0[3u].x)) + _3152;
    float _3173 = (_3153 + ((_3138 + ((isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0))) * _1906)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3132 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1077)));
    float _3175 = (_3154 + ((_3140 + ((isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))) * _1906)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5242 : (isnan(_5242) ? 1.0 : min(_5242, 1.0))) * (_3134 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1077)));
    float _3176 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
    float _3177 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
    float _3178 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
    float _3184 = cbMtdParam._m0[2u].x * _3152;
    float _3185 = cbMtdParam._m0[2u].y * _3153;
    float _3186 = cbMtdParam._m0[2u].z * _3154;
    float _5268 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3188 = isnan(1.0) ? _5268 : (isnan(_5268) ? 1.0 : min(_5268, 1.0));
    uint _3189 = _1004 + 6u;
    float _3197 = _949 / cbSceneParam._m0[86u].x;
    float _3198 = _950 / cbSceneParam._m0[86u].y;
    vec4 _3212 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3197, _3198, (log2((isnan(cbSceneParam._m0[77u].w) ? _892 : (isnan(_892) ? cbSceneParam._m0[77u].w : min(_892, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3214 = _3212.x;
    float _3215 = _3212.y;
    float _3216 = _3212.z;
    float _3217 = _3212.w;
    float _3288;
    float _3290;
    float _3292;
    float _3294;
    if (_892 > cbSceneParam._m0[78u].w)
    {
        float _3251 = isnan(_892) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _892 : min(cbSceneParam._m0[80u].w, _892));
        float _3252 = _3251 / _892;
        float _3263 = _3252 * _922;
        float _3264 = _923 * _3252;
        float _3265 = (-0.0) - _3264;
        float _3266 = _3252 * _924;
        float _3268 = (cbSceneParam._m0[77u].w * _3265) / _3251;
        float _3269 = _3268 + cbSceneParam._m0[79u].w;
        float _3270 = cbSceneParam._m0[79u].w - _3264;
        float _3276 = sqrt(((_3263 * _3263) + (_3264 * _3264)) + (_3266 * _3266));
        float _3279 = (1.0 - (cbSceneParam._m0[77u].w / _3251)) * _3276;
        float _3284 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3286 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3472;
        if (abs((_3265 - _3268) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3472 = ((((_3269 > 0.0) ? exp2(_3284 * _3269) : (2.0 - exp2(_3286 * _3269))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3279;
        }
        else
        {
            float _3416 = 1.0 / cbSceneParam._m0[80u].x;
            float _3417 = isnan(_3270) ? _3269 : (isnan(_3269) ? _3270 : max(_3269, _3270));
            float _3418 = isnan(_3270) ? _3269 : (isnan(_3269) ? _3270 : min(_3269, _3270));
            float _3427 = isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : min(_3417, 0.0));
            float _3428 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : min(_3418, 0.0));
            _3472 = ((abs(_3276 / _3265) * cbSceneParam._m0[80u].y) * ((((_3427 - _3428) * 2.0) - ((exp2(_3284 * (isnan(0.0) ? _3417 : (isnan(_3417) ? 0.0 : max(_3417, 0.0)))) - exp2(_3284 * (isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0))))) * _3416)) - ((exp2(_3286 * _3427) - exp2(_3286 * _3428)) * _3416))) + (_3279 * cbSceneParam._m0[80u].z);
        }
        vec4 _3474 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3197, _3198, 1.0), 0.0);
        float _3483 = exp2((_3472 * (-1.44269502162933349609375)) * (1.0 - _3474.w));
        float _3484 = log2(_3483);
        float _3500 = log2(_3217);
        _3288 = (exp2(_3500 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].x)) * _3474.x) / cbSceneParam._m0[78u].x)) + _3214;
        _3290 = (exp2(_3500 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].y)) * _3474.y) / cbSceneParam._m0[78u].y)) + _3215;
        _3292 = (exp2(_3500 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3484 * cbSceneParam._m0[78u].z)) * _3474.z) / cbSceneParam._m0[78u].z)) + _3216;
        _3294 = _3483 * _3217;
    }
    else
    {
        _3288 = _3214;
        _3290 = _3215;
        _3292 = _3216;
        _3294 = _3217;
    }
    bool _3510;
    vec4 _3304;
    vec4 _3326;
    float _3328;
    float _3332;
    float _3333;
    float _3334;
    float _3337;
    float _3340;
    float _3343;
    float _3344;
    bool _3354;
    for (;;)
    {
        _3304 = cbMatDynParam._m0[0u];
        float _3306 = roundEven(_3304.y);
        bool _3307 = _3306 == 3.0;
        float _3308 = log2(_3294);
        float _3312 = exp2(_3308 * cbSceneParam._m0[78u].x);
        float _3313 = exp2(_3308 * cbSceneParam._m0[78u].y);
        float _3314 = exp2(_3308 * cbSceneParam._m0[78u].z);
        float _3315 = _3312 * _3176;
        float _3316 = _3313 * _3177;
        float _3317 = _3314 * _3178;
        float _3324 = _938 + (-0.5);
        _3326 = cbMtdParam._m0[1u];
        _3328 = _3326.y * _3324;
        float _3331 = (_3306 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3332 = _3331 * (_3307 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3288)));
        _3333 = _3331 * (_3307 ? _3316 : (_3316 + (cbSceneParam._m0[72u].w * _3290)));
        _3334 = _3331 * (_3307 ? _3317 : (_3317 + (cbSceneParam._m0[72u].w * _3292)));
        _3337 = ((_3184 * _3188) * _3312) * _3331;
        _3340 = ((_3185 * _3188) * _3313) * _3331;
        _3343 = ((_3186 * _3188) * _3314) * _3331;
        _3344 = _3324 * 0.999000012874603271484375;
        _3354 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3354)
        {
            if ((cbInstanceData._m0[_1004 + 7u].x + _3344) < 0.5)
            {
                _3510 = true;
                break;
            }
        }
        uint _3451 = _1006 + uint(_3304.w);
        if ((cbInstanceData._m0[_3451].w < 1.0) && ((cbInstanceData._m0[_3451].w + _3344) < 0.5))
        {
            _3510 = true;
            break;
        }
        if ((_3328 + 1.0) < _3326.x)
        {
            _3510 = true;
            break;
        }
        _3510 = false;
        break;
    }
    float _3714;
    if (_3510)
    {
        discard_state = true;
        _3714 = 0.0;
    }
    else
    {
        _3714 = cbInstanceData._m0[_3189].w;
    }
    SV_Target.x = _3332;
    SV_Target.y = _3333;
    SV_Target.z = _3334;
    SV_Target.w = _3714;
    SV_Target_1.x = _3337;
    SV_Target_1.y = _3340;
    SV_Target_1.z = _3343;
    SV_Target_1.w = cbInstanceData._m0[_3189].w;
    discard_exit();
}


