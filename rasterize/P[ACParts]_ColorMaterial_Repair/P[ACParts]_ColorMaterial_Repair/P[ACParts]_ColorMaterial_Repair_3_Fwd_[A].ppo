#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1471;
float _3887;
float _3888;
float _3889;
float _3890;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _279 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_265 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _286 = log2(0.0);
    float _288 = exp2(_286 * cbMtdParam._m0[31u].z);
    float _292 = _288 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _288);
    float _293 = _288 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _288);
    float _294 = _288 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _288);
    float _295 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _296 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    float _300 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    float _301 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    vec4 _317 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _265) + cbTextureTilingScale._m0[0u].w));
    float _321 = _317.z;
    float _322 = _317.w;
    float _323 = 1.0 - _322;
    float _330 = exp2(log2((1.0 - (_323 * _321)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    float _344 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_323 * _323) * _321))) * cbMtdParam._m0[34u].w);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    vec4 _359 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _362 = _359.y;
    float _365 = (_362 * ((isnan(1.0) ? _345 : (isnan(_345) ? 1.0 : min(_345, 1.0))) - _322)) + _322;
    vec4 _377 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _389 = (_359.x + (-0.02500000037252902984619140625)) * 8.0;
    float _391 = roundEven(_389);
    float _392 = cbMtdParam._m0[10u].x * _377.x;
    float _393 = cbMtdParam._m0[10u].y * _377.y;
    float _394 = cbMtdParam._m0[10u].z * _377.z;
    vec4 _406 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _426 = (((cbMtdParam._m0[9u].x * _406.x) - _392) * _365) + _392;
    float _427 = (((cbMtdParam._m0[9u].y * _406.y) - _393) * _365) + _393;
    float _428 = (((cbMtdParam._m0[9u].z * _406.z) - _394) * _365) + _394;
    vec4 _440 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    float _460 = (((cbMtdParam._m0[20u].x * _440.x) - _426) * _332) + _426;
    float _461 = (((cbMtdParam._m0[20u].y * _440.y) - _427) * _332) + _427;
    float _462 = (((cbMtdParam._m0[20u].z * _440.z) - _428) * _332) + _428;
    vec4 _475 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _265) + cbTextureTilingScale._m0[7u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[24u].x;
    _202[0u] = cbMtdParam._m0[24u].y;
    _203[0u] = cbMtdParam._m0[24u].z;
    _201[1u] = cbMtdParam._m0[25u].x;
    _202[1u] = cbMtdParam._m0[25u].y;
    _203[1u] = cbMtdParam._m0[25u].z;
    _201[2u] = cbMtdParam._m0[26u].x;
    _202[2u] = cbMtdParam._m0[26u].y;
    _203[2u] = cbMtdParam._m0[26u].z;
    _201[3u] = cbMtdParam._m0[27u].x;
    _202[3u] = cbMtdParam._m0[27u].y;
    _203[3u] = cbMtdParam._m0[27u].z;
    _201[4u] = cbMtdParam._m0[28u].x;
    _202[4u] = cbMtdParam._m0[28u].y;
    _203[4u] = cbMtdParam._m0[28u].z;
    _201[5u] = cbMtdParam._m0[29u].x;
    _202[5u] = cbMtdParam._m0[29u].y;
    _203[5u] = cbMtdParam._m0[29u].z;
    float _558 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    uint _561 = uint(int(isnan(5.0) ? _558 : (isnan(_558) ? 5.0 : min(_558, 5.0))));
    float _568 = _201[_561] * _362;
    float _569 = _202[_561] * _362;
    float _570 = _203[_561] * _362;
    float _571 = _568 + ((_279.x * 4.5) * ((((cbMtdParam._m0[30u].x * _475.x) - _460) * _298) + _460));
    float _572 = _569 + ((_279.y * 4.5) * ((((cbMtdParam._m0[30u].y * _475.y) - _461) * _300) + _461));
    float _573 = _570 + ((_279.z * 4.5) * ((((cbMtdParam._m0[30u].z * _475.z) - _462) * _301) + _462));
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[35u].y;
    _197[0u] = cbMtdParam._m0[35u].z;
    _196[1u] = cbMtdParam._m0[36u].w;
    _197[1u] = cbMtdParam._m0[37u].x;
    _196[2u] = cbMtdParam._m0[37u].y;
    _197[2u] = cbMtdParam._m0[37u].z;
    _196[3u] = cbMtdParam._m0[37u].w;
    _197[3u] = cbMtdParam._m0[38u].x;
    _196[4u] = cbMtdParam._m0[38u].y;
    _197[4u] = cbMtdParam._m0[38u].z;
    float _604 = roundEven(5.0 - _389);
    float _605 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _606 = isnan(4.0) ? _605 : (isnan(_605) ? 4.0 : min(_605, 4.0));
    float _608 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    uint _610 = uint(int(isnan(4.0) ? _608 : (isnan(_608) ? 4.0 : min(_608, 4.0))));
    float _622 = ((cbMtdParam._m0[39u].z - _197[_610]) * _365) + _197[_610];
    float _630 = ((cbMtdParam._m0[40u].x - _622) * _332) + _622;
    float _635 = ((cbMtdParam._m0[40u].z - _630) * _298) + _630;
    vec4 _649 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _265) + cbTextureTilingScale._m0[8u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _654 = _649.z + _196[_610];
    vec4 _666 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w));
    float _674 = (((cbMtdParam._m0[39u].y - _654) + _666.z) * _365) + _654;
    vec4 _687 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _695 = (((cbMtdParam._m0[39u].w - _674) + _687.z) * _332) + _674;
    float _701 = ((((_321 * 2.0) * _695) - _695) * cbMtdParam._m0[33u].w) + _695;
    vec4 _714 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _265) + cbTextureTilingScale._m0[12u].w));
    float _722 = (((_714.z + cbMtdParam._m0[40u].y) - _701) * _301) + _701;
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _780 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_749 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_753 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _795 = (-0.0) - ((_753 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _799 = (_753 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _800 = isnan(_799) ? _795 : (isnan(_795) ? _799 : min(_795, _799));
    float _3984 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _801 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _824 = ((_666.x - _651) * _365) + _651;
    float _825 = ((_666.y - _652) * _365) + _652;
    float _830 = ((_687.x - _824) * _332) + _824;
    float _831 = ((_687.y - _825) * _332) + _825;
    float _840 = ((((_714.x - _830) * _298) + _830) * 2.0) + (-1.0);
    float _841 = ((((_714.y - _831) * _300) + _831) * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _3995 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _847 = sqrt(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))));
    float _850 = (cbMtdParam._m0[34u].x * ((_317.x * 2.0) + (-1.0))) + _840;
    float _851 = (cbMtdParam._m0[34u].x * ((_317.y * 2.0) + (-1.0))) + _841;
    float _854 = fma(_847, _243 * NORMAL.x, fma(_851, _250 * TANGENT.x, (_236 * _228) * _850));
    float _857 = fma(_847, _243 * NORMAL.y, fma(_851, _250 * TANGENT.y, (_236 * _229) * _850));
    float _860 = fma(_847, _243 * NORMAL.z, fma(_851, _250 * TANGENT.z, (_236 * _230) * _850));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    float _865 = _864 * _854;
    float _866 = _864 * _857;
    float _867 = _864 * _860;
    float _4006 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _868 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _4017 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4028 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4039 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4050 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _872 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (_749 / _908);
    float _919 = cbSceneParam._m0[71u].y - (_753 / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    vec4 _932 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _934 = _932.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1153 = sqrt(((_918 * _918) + (_919 * _919)) + (_920 * _920));
        float _1159 = (cbMatDynParam._m0[5u].x * _1153) + cbMatDynParam._m0[5u].y;
        float _4061 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1164 = (cbMatDynParam._m0[5u].z * _1153) + cbMatDynParam._m0[5u].w;
        float _4072 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) - _1160)) + _1160) < ((_934 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _945 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _946 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _948 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _950 = _948.w;
    float _968 = fma(_867, cbSceneParam._m0[5u].z, fma(_866, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _865));
    float _971 = fma(_867, cbSceneParam._m0[6u].z, fma(_866, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _865));
    float _974 = fma(_867, cbSceneParam._m0[7u].z, fma(_866, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _865));
    vec4 _976 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _987 = (((_976.y - _868) + (_976.w * _868)) * cbMtdParam._m0[3u].x) + _868;
    uint _1000 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1002 = _1000 + 9u;
    uint _1003 = _1002 + uint(cbMatDynParam._m0[0u].w);
    float _1009 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * cbInstanceData._m0[_1003].x;
    float _1010 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * cbInstanceData._m0[_1003].y;
    float _1011 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0)))) * cbInstanceData._m0[_1003].z;
    float _4083 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
    float _1012 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _4094 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1013 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
    float _4105 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0));
    vec4 _1015 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1020 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1031 = (((_1020.x - _872) + (_1020.w * _872)) * cbMtdParam._m0[3u].x) + _872;
    float _1044 = (cbMtdParam._m0[3u].x * (((_1012 * _950) - _1012) + _1015.x)) + _1012;
    float _1045 = (cbMtdParam._m0[3u].x * (((_1013 * _950) - _1013) + _1015.y)) + _1013;
    float _1046 = (cbMtdParam._m0[3u].x * (((_1014 * _950) - _1014) + _1015.z)) + _1014;
    float _1047 = 1.0 - _1031;
    float _1048 = _1047 * _1044;
    float _1049 = _1047 * _1045;
    float _1050 = _1047 * _1046;
    float _1055 = (_1044 + (-0.039999999105930328369140625)) * _1031;
    float _1056 = (_1045 + (-0.039999999105930328369140625)) * _1031;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _1031;
    float _1058 = _1055 + 0.039999999105930328369140625;
    float _1060 = _1056 + 0.039999999105930328369140625;
    float _1061 = _1057 + 0.039999999105930328369140625;
    vec4 _1070 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _945, cbSceneParam._m0[86u].y * _946));
    float _1073 = _1070.x * TEXCOORD_5.w;
    float _1074 = dot(vec3(_865, _866, _867), vec3(_925, _926, _927));
    float _1077 = _1074 * 2.0;
    float _1081 = (_1077 * _865) - _925;
    float _1082 = (_1077 * _866) - _926;
    float _1083 = (_1077 * _867) - _927;
    float _1087 = abs(dot(vec3(_925, _926, _927), vec3(_865, _866, _867)));
    float _4116 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1089 = sqrt(_987);
    float _1100 = exp2((_1089 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1089 * 3.0));
    float _1106 = (1.0 - _1100) * ((_1089 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1107 = _1100 * _1089;
    float _1135 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1139 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1143 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1470;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1197 = fma(_1143, cbModelParam._m0[26u].z, fma(_1139, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1135));
        float _1201 = fma(_1143, cbModelParam._m0[27u].z, fma(_1139, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1135));
        float _1205 = fma(_1143, cbModelParam._m0[28u].z, fma(_1139, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1135));
        float _1229 = _1135 + _865;
        float _1230 = _1139 + _866;
        float _1231 = _1143 + _867;
        float _1241 = fma(_1231, cbModelParam._m0[26u].z, fma(_1230, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1229)) - _1197;
        float _1242 = fma(_1231, cbModelParam._m0[27u].z, fma(_1230, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1229)) - _1201;
        float _1243 = fma(_1231, cbModelParam._m0[28u].z, fma(_1230, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1229)) - _1205;
        float _1247 = inversesqrt(dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243)));
        float _1259 = ((_1247 * _1241) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1197 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1260 = ((_1247 * _1242) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1201 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1261 = ((_1247 * _1243) / cbModelParam._m0[34u].z) + ((((((_1205 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1259, _1260, _1261), 0.0);
        float _1298 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1264.x + (-0.5));
        float _1300 = _1298 * (_1264.y + (-0.5));
        float _1301 = _1298 * (_1264.z + (-0.5));
        float _1308 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1271.x + (-0.5));
        float _1310 = _1308 * (_1271.y + (-0.5));
        float _1311 = _1308 * (_1271.z + (-0.5));
        float _1318 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1278.x + (-0.5));
        float _1320 = _1318 * (_1278.y + (-0.5));
        float _1321 = _1318 * (_1278.z + (-0.5));
        float _1328 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1285.x + (-0.5));
        float _1330 = _1328 * (_1285.y + (-0.5));
        float _1331 = _1328 * (_1285.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1352 = (dot(vec3(_865, _866, _867), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _4142 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1362 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _4153 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _4164 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_1364 + 1.0))) + _1369) * _1332;
        float _1379 = _1300 * 0.5;
        float _1380 = _1310 * 0.5;
        float _1381 = _1320 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_865, _866, _867), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _4175 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _4186 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _4197 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_1406 + 1.0))) + _1411) * _1333;
        float _1421 = _1301 * 0.5;
        float _1422 = _1311 * 0.5;
        float _1423 = _1321 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_865, _866, _867), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _4230 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1448 + 1.0))) + _1453) * _1334;
        _1470 = _1301;
        _1472 = _1300;
        _1473 = _1299;
        _1474 = _1311;
        _1475 = _1310;
        _1476 = _1309;
        _1477 = _1321;
        _1478 = _1320;
        _1479 = _1319;
        _1480 = _1334;
        _1481 = _1333;
        _1482 = _1332;
        _1483 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1484 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _1471;
        _1472 = _1471;
        _1473 = _1471;
        _1474 = _1471;
        _1475 = _1471;
        _1476 = _1471;
        _1477 = _1471;
        _1478 = _1471;
        _1479 = _1471;
        _1480 = _1471;
        _1481 = _1471;
        _1482 = _1471;
        _1483 = 0.0;
        _1484 = 0.0;
        _1485 = 0.0;
    }
    float _1778;
    float _1779;
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1511 = fma(_1143, cbModelParam._m0[30u].z, fma(_1139, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1135));
        float _1515 = fma(_1143, cbModelParam._m0[31u].z, fma(_1139, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1135));
        float _1519 = fma(_1143, cbModelParam._m0[32u].z, fma(_1139, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1135));
        float _1541 = _1135 + _865;
        float _1542 = _1139 + _866;
        float _1543 = _1143 + _867;
        float _1553 = fma(_1543, cbModelParam._m0[30u].z, fma(_1542, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1541)) - _1511;
        float _1554 = fma(_1543, cbModelParam._m0[31u].z, fma(_1542, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1541)) - _1515;
        float _1555 = fma(_1543, cbModelParam._m0[32u].z, fma(_1542, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1541)) - _1519;
        float _1559 = inversesqrt(dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555)));
        float _1571 = ((_1559 * _1553) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1511 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1572 = ((_1559 * _1554) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1515 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1573 = ((_1559 * _1555) / cbModelParam._m0[35u].z) + ((((((_1519 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1575 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1582 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1589 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        vec4 _1596 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1571, _1572, _1573), 0.0);
        float _1608 = exp2((_1575.w + (-0.5)) * 20.0) * 2.0;
        float _1609 = _1608 * (_1575.x + (-0.5));
        float _1610 = _1608 * (_1575.y + (-0.5));
        float _1611 = _1608 * (_1575.z + (-0.5));
        float _1618 = exp2((_1582.w + (-0.5)) * 20.0) * 2.0;
        float _1619 = _1618 * (_1582.x + (-0.5));
        float _1620 = _1618 * (_1582.y + (-0.5));
        float _1621 = _1618 * (_1582.z + (-0.5));
        float _1628 = exp2((_1589.w + (-0.5)) * 20.0) * 2.0;
        float _1629 = _1628 * (_1589.x + (-0.5));
        float _1630 = _1628 * (_1589.y + (-0.5));
        float _1631 = _1628 * (_1589.z + (-0.5));
        float _1638 = exp2((_1596.w + (-0.5)) * 20.0) * 2.0;
        float _1639 = _1638 * (_1596.x + (-0.5));
        float _1640 = _1638 * (_1596.y + (-0.5));
        float _1641 = _1638 * (_1596.z + (-0.5));
        float _1642 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1643 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = _1609 * 0.5;
        float _1646 = _1619 * 0.5;
        float _1647 = _1629 * 0.5;
        float _1648 = dot(vec3(_1645, _1646, _1647), vec3(_1645, _1646, _1647));
        float _1653 = (_1648 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1648);
        float _1661 = (dot(vec3(_865, _866, _867), vec3(_1653 * _1645, _1653 * _1646, _1653 * _1647)) + 1.0) * 0.5;
        float _4271 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1670 = sqrt(((_1646 * _1646) + (_1645 * _1645)) + (_1647 * _1647)) / (_1642 + 9.9999997473787516355514526367188e-06);
        float _4282 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _1672 = _1671 * 2.0;
        float _1676 = (1.0 - _1671) / (_1671 + 1.0);
        float _4293 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1677 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
        float _1686 = ((((1.0 - _1677) * (_1672 + 2.0)) * exp2(log2(isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_1672 + 1.0))) + _1677) * _1642;
        float _1687 = _1610 * 0.5;
        float _1688 = _1620 * 0.5;
        float _1689 = _1630 * 0.5;
        float _1690 = dot(vec3(_1687, _1688, _1689), vec3(_1687, _1688, _1689));
        float _1695 = (_1690 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1690);
        float _1703 = (dot(vec3(_865, _866, _867), vec3(_1695 * _1687, _1695 * _1688, _1695 * _1689)) + 1.0) * 0.5;
        float _4304 = isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0));
        float _1712 = sqrt(((_1688 * _1688) + (_1687 * _1687)) + (_1689 * _1689)) / (_1643 + 9.9999997473787516355514526367188e-06);
        float _4315 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1714 = _1713 * 2.0;
        float _1718 = (1.0 - _1713) / (_1713 + 1.0);
        float _4326 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0));
        float _1728 = ((((1.0 - _1719) * (_1714 + 2.0)) * exp2(log2(isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0))) * (_1714 + 1.0))) + _1719) * _1643;
        float _1729 = _1611 * 0.5;
        float _1730 = _1621 * 0.5;
        float _1731 = _1631 * 0.5;
        float _1732 = dot(vec3(_1729, _1730, _1731), vec3(_1729, _1730, _1731));
        float _1737 = (_1732 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1732);
        float _1745 = (dot(vec3(_865, _866, _867), vec3(_1737 * _1729, _1737 * _1730, _1737 * _1731)) + 1.0) * 0.5;
        float _4337 = isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0));
        float _1754 = sqrt(((_1730 * _1730) + (_1729 * _1729)) + (_1731 * _1731)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4348 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1755 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1756 = _1755 * 2.0;
        float _1760 = (1.0 - _1755) / (_1755 + 1.0);
        float _4359 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0));
        float _1770 = ((((1.0 - _1761) * (_1756 + 2.0)) * exp2(log2(isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0))) * (_1756 + 1.0))) + _1761) * _1644;
        _1778 = _1611;
        _1779 = _1610;
        _1780 = _1609;
        _1781 = _1621;
        _1782 = _1620;
        _1783 = _1619;
        _1784 = _1631;
        _1785 = _1630;
        _1786 = _1629;
        _1787 = _1644;
        _1788 = _1643;
        _1789 = _1642;
        _1790 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0)));
        _1791 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0)));
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0)));
    }
    else
    {
        _1778 = _1471;
        _1779 = _1471;
        _1780 = _1471;
        _1781 = _1471;
        _1782 = _1471;
        _1783 = _1471;
        _1784 = _1471;
        _1785 = _1471;
        _1786 = _1471;
        _1787 = _1471;
        _1788 = _1471;
        _1789 = _1471;
        _1790 = 0.0;
        _1791 = 0.0;
        _1792 = 0.0;
    }
    float _1802 = (cbModelParam._m0[1u].x * (_1790 - _1483)) + _1483;
    float _1803 = (cbModelParam._m0[1u].x * (_1791 - _1484)) + _1484;
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1485)) + _1485;
    float _1825 = fma(_1804, cbSceneParam._m0[89u].z, fma(_1803, cbSceneParam._m0[89u].y, _1802 * cbSceneParam._m0[89u].x));
    float _1828 = fma(_1804, cbSceneParam._m0[90u].z, fma(_1803, cbSceneParam._m0[90u].y, _1802 * cbSceneParam._m0[90u].x));
    float _1831 = fma(_1804, cbSceneParam._m0[91u].z, fma(_1803, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1802));
    float _1844 = _1081 * 0.5;
    float _1845 = _1082 * 0.5;
    float _1846 = _1083 * 0.5;
    float _1847 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1850 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1779, _1782, _1785, _1788));
    float _1853 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1778, _1781, _1784, _1787));
    float _1887;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1860 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1470, _1474, _1477, _1480));
        float _1864 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1472, _1475, _1478, _1481));
        float _1868 = dot(vec4(_1844, _1845, _1846, 1.0), vec4(_1473, _1476, _1479, _1482));
        float _1875 = dot(vec4(cbModelParam._m0[39u]), vec4(_1844, _1845, _1846, 1.0));
        _1887 = dot(vec3(isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0)), isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)), isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1875) ? 0.0 : (isnan(0.0) ? _1875 : max(0.0, _1875))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1887 = 1.0;
    }
    float _1898;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1889 = dot(vec4(cbModelParam._m0[40u]), vec4(_1844, _1845, _1846, 1.0));
        _1898 = dot(vec3(isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0)), isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0)), isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1889) ? 0.0 : (isnan(0.0) ? _1889 : max(0.0, _1889))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1898 = 1.0;
    }
    float _1902 = (_1898 * cbModelParam._m0[1u].x) + (_1887 * (1.0 - cbModelParam._m0[1u].x));
    float _1912 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _987);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1912 : min(cbModelParam._m0[25u].z, _1912));
    float _1995;
    float _1997;
    float _1999;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1962 = fma(_1143, cbModelParam._m0[13u].z, fma(_1139, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1135)) + cbModelParam._m0[13u].w;
        float _1966 = fma(_1143, cbModelParam._m0[14u].z, fma(_1139, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1135)) + cbModelParam._m0[14u].w;
        float _1970 = fma(_1143, cbModelParam._m0[15u].z, fma(_1139, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1135)) + cbModelParam._m0[15u].w;
        float _1973 = fma(_1083, cbModelParam._m0[13u].z, fma(_1082, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1081));
        float _1976 = fma(_1083, cbModelParam._m0[14u].z, fma(_1082, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1081));
        float _1979 = fma(_1083, cbModelParam._m0[15u].z, fma(_1082, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1081));
        float _2007;
        if (_1973 > 0.0)
        {
            _2007 = abs((1.0 - _1962) / _1973);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1962 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2007 = frontier_phi_17_15_ladder;
        }
        float _2212;
        if (_1976 > 0.0)
        {
            _2212 = abs((1.0 - _1966) / _1976);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1976 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1966 + 1.0) / _1976);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2212 = frontier_phi_26_22_ladder;
        }
        float _2466;
        if (_1979 > 0.0)
        {
            _2466 = abs((1.0 - _1970) / _1979);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1970 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2466 = frontier_phi_38_33_ladder;
        }
        float _2468 = isnan(_2212) ? _2007 : (isnan(_2007) ? _2212 : min(_2007, _2212));
        float _2469 = isnan(_2466) ? _2468 : (isnan(_2468) ? _2466 : min(_2468, _2466));
        float _2473 = (_2469 * _1973) + _1962;
        float _2474 = (_2469 * _1976) + _1966;
        float _2475 = (_2469 * _1979) + _1970;
        float _2476 = _2469 * 9.9999997473787516355514526367188e-05;
        float _2478 = (-1.0) - _2476;
        float _2480 = _2476 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2475 > _2480) || ((_2475 < _2478) || ((_2474 > _2480) || ((_2474 < _2478) || ((_2473 < _2478) || (_2473 > _2480))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2603 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2475, cbModelParam._m0[9u].z, fma(_2474, cbModelParam._m0[9u].y, _2473 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2475, cbModelParam._m0[10u].z, fma(_2474, cbModelParam._m0[10u].y, _2473 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2475, cbModelParam._m0[11u].z, fma(_2474, cbModelParam._m0[11u].y, _2473 * cbModelParam._m0[11u].x))), _1913);
            frontier_phi_16_38_ladder = _2603.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2603.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2603.x * cbModelParam._m0[1u].y;
        }
        _1995 = frontier_phi_16_38_ladder_2;
        _1997 = frontier_phi_16_38_ladder_1;
        _1999 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1983 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1081, _1082, _1083), _1913);
        _1995 = _1983.x * cbModelParam._m0[1u].y;
        _1997 = _1983.y * cbModelParam._m0[1u].y;
        _1999 = _1983.z * cbModelParam._m0[1u].y;
    }
    float _2003 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _987);
    float _2004 = isnan(_2003) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2003 : min(cbModelParam._m0[25u].w, _2003));
    float _2096;
    float _2098;
    float _2100;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2060 = fma(_1143, cbModelParam._m0[21u].z, fma(_1139, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1135)) + cbModelParam._m0[21u].w;
        float _2064 = fma(_1143, cbModelParam._m0[22u].z, fma(_1139, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1135)) + cbModelParam._m0[22u].w;
        float _2068 = fma(_1143, cbModelParam._m0[23u].z, fma(_1139, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1135)) + cbModelParam._m0[23u].w;
        float _2071 = fma(_1083, cbModelParam._m0[21u].z, fma(_1082, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1081));
        float _2074 = fma(_1083, cbModelParam._m0[22u].z, fma(_1082, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1081));
        float _2077 = fma(_1083, cbModelParam._m0[23u].z, fma(_1082, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1081));
        float _2217;
        if (_2071 > 0.0)
        {
            _2217 = abs((1.0 - _2060) / _2071);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2060 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2217 = frontier_phi_28_24_ladder;
        }
        float _2493;
        if (_2074 > 0.0)
        {
            _2493 = abs((1.0 - _2064) / _2074);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2064 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2493 = frontier_phi_40_35_ladder;
        }
        float _2706;
        if (_2077 > 0.0)
        {
            _2706 = abs((1.0 - _2068) / _2077);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2077 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2068 + 1.0) / _2077);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2706 = frontier_phi_49_46_ladder;
        }
        float _2708 = isnan(_2493) ? _2217 : (isnan(_2217) ? _2493 : min(_2217, _2493));
        float _2709 = isnan(_2706) ? _2708 : (isnan(_2708) ? _2706 : min(_2708, _2706));
        float _2713 = (_2709 * _2071) + _2060;
        float _2714 = (_2709 * _2074) + _2064;
        float _2715 = (_2709 * _2077) + _2068;
        float _2716 = _2709 * 9.9999997473787516355514526367188e-05;
        float _2717 = (-1.0) - _2716;
        float _2719 = _2716 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2715 > _2719) || ((_2715 < _2717) || ((_2714 > _2719) || ((_2714 < _2717) || ((_2713 < _2717) || (_2713 > _2719))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2943 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2715, cbModelParam._m0[17u].z, fma(_2714, cbModelParam._m0[17u].y, _2713 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2715, cbModelParam._m0[18u].z, fma(_2714, cbModelParam._m0[18u].y, _2713 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2715, cbModelParam._m0[19u].z, fma(_2714, cbModelParam._m0[19u].y, _2713 * cbModelParam._m0[19u].x))), _2004);
            frontier_phi_25_49_ladder = _2943.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2943.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2943.x * cbModelParam._m0[1u].z;
        }
        _2096 = frontier_phi_25_49_ladder_2;
        _2098 = frontier_phi_25_49_ladder_1;
        _2100 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2080 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1081, _1082, _1083), _2004);
        _2096 = _2080.x * cbModelParam._m0[1u].z;
        _2098 = _2080.y * cbModelParam._m0[1u].z;
        _2100 = _2080.z * cbModelParam._m0[1u].z;
    }
    float _2113 = (((_1106 * _1058) + _1107) * _1073) * ((cbModelParam._m0[1u].w * (_2096 - _1995)) + _1995);
    float _2115 = (((_1106 * _1060) + _1107) * _1073) * ((cbModelParam._m0[1u].w * (_2098 - _1997)) + _1997);
    float _2117 = (((_1106 * _1061) + _1107) * _1073) * ((cbModelParam._m0[1u].w * (_2100 - _1999)) + _1999);
    float _2120 = fma(_2117, cbSceneParam._m0[89u].z, fma(_2115, cbSceneParam._m0[89u].y, _2113 * cbSceneParam._m0[89u].x));
    float _2123 = fma(_2117, cbSceneParam._m0[90u].z, fma(_2115, cbSceneParam._m0[90u].y, _2113 * cbSceneParam._m0[90u].x));
    float _2126 = fma(_2117, cbSceneParam._m0[91u].z, fma(_2115, cbSceneParam._m0[91u].y, _2113 * cbSceneParam._m0[91u].x));
    uvec4 _2136 = floatBitsToUint(cbInstanceData._m0[_1000 + 5u]);
    uint _2138 = _2136.x * 14u;
    uint _2139 = _2138 + 13u;
    float _2146 = _1073 + (-1.0);
    float _2151 = (cbLight._m0[_2139].x * _2146) + 1.0;
    float _2152 = (cbLight._m0[_2139].y * _2146) + 1.0;
    float _2153 = (cbLight._m0[_2139].z * _2146) + 1.0;
    float _2154 = (cbLight._m0[_2139].w * _2146) + 1.0;
    uint _2155 = _2138 + 5u;
    float _2161 = isnan(1.0) ? _2152 : (isnan(_2152) ? 1.0 : min(_2152, 1.0));
    uint _2165 = _2138 + 4u;
    float _2171 = isnan(1.0) ? _2151 : (isnan(_2151) ? 1.0 : min(_2151, 1.0));
    uint _2175 = _2138 | 1u;
    float _2186 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_865, _866, _867));
    float _2189 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_865, _866, _867));
    float _4495 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _4506 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2194 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * 0.3183098733425140380859375;
    float _2196 = (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0))) * 0.3183098733425140380859375;
    float _2203 = ((cbLight._m0[_2155].x * _2161) * _2196) + ((cbLight._m0[_2165].x * _2171) * _2194);
    float _2204 = ((_2161 * cbLight._m0[_2155].y) * _2196) + ((_2171 * cbLight._m0[_2165].y) * _2194);
    float _2205 = ((_2161 * cbLight._m0[_2155].z) * _2196) + ((_2171 * cbLight._m0[_2165].z) * _2194);
    uvec4 _2209 = floatBitsToUint(cbLight._m0[_2138 + 12u]);
    bool _2211 = _2209.x == 0u;
    float _2222;
    float _2224;
    float _2226;
    if (_2211)
    {
        _2222 = _2203;
        _2224 = _2204;
        _2226 = _2205;
    }
    else
    {
        uint _2230 = _2138 + 6u;
        float _2246 = (dot(vec3(cbLight._m0[_2138 + 2u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2247 = _2246 * _2246;
        float _4517 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2248 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _2249 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2222 = (((cbLight._m0[_2230].x * 0.3183098733425140380859375) * _2248) * _2249) + _2203;
        _2224 = (((cbLight._m0[_2230].y * 0.3183098733425140380859375) * _2248) * _2249) + _2204;
        _2226 = (((cbLight._m0[_2230].z * 0.3183098733425140380859375) * _2248) * _2249) + _2205;
    }
    bool _2229 = _2209.y == 0u;
    float _2267;
    float _2269;
    float _2271;
    if (_2229)
    {
        _2267 = _2222;
        _2269 = _2224;
        _2271 = _2226;
    }
    else
    {
        uint _2437 = _2138 + 7u;
        float _2453 = (dot(vec3(cbLight._m0[_2138 + 3u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2454 = _2453 * _2453;
        float _4533 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2455 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
        float _2456 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2267 = (((cbLight._m0[_2437].x * 0.3183098733425140380859375) * _2455) * _2456) + _2222;
        _2269 = (((cbLight._m0[_2437].y * 0.3183098733425140380859375) * _2455) * _2456) + _2224;
        _2271 = (((cbLight._m0[_2437].z * 0.3183098733425140380859375) * _2455) * _2456) + _2226;
    }
    uint _2274 = _2138 + 8u;
    float _2287 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2138].w)) * _987) * 0.949999988079071044921875);
    float _2288 = _2287 * _2287;
    float _2289 = cbLight._m0[_2138].x + _925;
    float _2290 = cbLight._m0[_2138].y + _926;
    float _2291 = cbLight._m0[_2138].z + _927;
    float _2295 = inversesqrt(dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291)));
    float _2296 = _2295 * _2289;
    float _2297 = _2295 * _2290;
    float _2298 = _2295 * _2291;
    float _2299 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2138].xyz));
    float _4549 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2302 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
    float _4560 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _2303 = isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0));
    float _2304 = dot(vec3(_865, _866, _867), vec3(_2296, _2297, _2298));
    float _4571 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _2307 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
    float _2308 = dot(vec3(cbLight._m0[_2138].xyz), vec3(_2296, _2297, _2298));
    float _4582 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2312 = _2288 * _2288;
    float _2316 = ((_2307 * _2307) * (_2312 + (-1.0))) + 1.0;
    float _2324 = exp2(log2(1.0 - (isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0)))) * 5.0);
    float _2325 = 0.959999978542327880859375 - _1055;
    float _2327 = 0.959999978542327880859375 - _1056;
    float _2328 = 0.959999978542327880859375 - _1057;
    float _2335 = 1.0 - _2288;
    float _2346 = (0.5 / (((_2303 * ((_2302 * _2335) + _2288)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2335) + _2288) * _2302))) * _2302;
    float _4593 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2348 = (isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_2312 / ((_2316 * _2316) * 3.141590118408203125));
    uint _2359 = _2138 + 9u;
    float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2175].w)) * _987) * 0.949999988079071044921875);
    float _2371 = _2370 * _2370;
    float _2372 = cbLight._m0[_2175].x + _925;
    float _2373 = cbLight._m0[_2175].y + _926;
    float _2374 = cbLight._m0[_2175].z + _927;
    float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
    float _2379 = _2378 * _2372;
    float _2380 = _2378 * _2373;
    float _2381 = _2378 * _2374;
    float _2382 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2175].xyz));
    float _4604 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
    float _2385 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
    float _2386 = dot(vec3(_865, _866, _867), vec3(_2379, _2380, _2381));
    float _4615 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
    float _2389 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
    float _2390 = dot(vec3(cbLight._m0[_2175].xyz), vec3(_2379, _2380, _2381));
    float _4626 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2394 = _2371 * _2371;
    float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
    float _2405 = exp2(log2(1.0 - (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0)))) * 5.0);
    float _2412 = 1.0 - _2371;
    float _2422 = (0.5 / (((_2303 * ((_2385 * _2412) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2412) + _2371) * _2385))) * _2385;
    float _4637 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2424 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
    float _2434 = (((((_2405 * _2325) + _1058) * cbLight._m0[_2359].x) * _2424) * _2161) + (((((_2324 * _2325) + _1058) * cbLight._m0[_2274].x) * _2348) * _2171);
    float _2435 = (((((_2405 * _2327) + _1060) * cbLight._m0[_2359].y) * _2424) * _2161) + (((((_2324 * _2327) + _1060) * cbLight._m0[_2274].y) * _2348) * _2171);
    float _2436 = (((((_2405 * _2328) + _1061) * cbLight._m0[_2359].z) * _2424) * _2161) + (((((_2324 * _2328) + _1061) * cbLight._m0[_2274].z) * _2348) * _2171);
    float _2498;
    float _2500;
    float _2502;
    if (_2211)
    {
        _2498 = _2434;
        _2500 = _2435;
        _2502 = _2436;
    }
    else
    {
        uint _2504 = _2138 + 2u;
        uint _2508 = _2138 + 10u;
        float _2522 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2504].w)) * _987) * 0.949999988079071044921875);
        float _2523 = _2522 * _2522;
        float _2524 = cbLight._m0[_2504].x + _925;
        float _2525 = cbLight._m0[_2504].y + _926;
        float _2526 = cbLight._m0[_2504].z + _927;
        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
        float _2531 = _2530 * _2524;
        float _2532 = _2530 * _2525;
        float _2533 = _2530 * _2526;
        float _2534 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2504].xyz));
        float _4648 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
        float _2537 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2538 = dot(vec3(_865, _866, _867), vec3(_2531, _2532, _2533));
        float _4659 = isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0));
        float _2541 = isnan(1.0) ? _4659 : (isnan(_4659) ? 1.0 : min(_4659, 1.0));
        float _2542 = dot(vec3(cbLight._m0[_2504].xyz), vec3(_2531, _2532, _2533));
        float _4670 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2546 = _2523 * _2523;
        float _2550 = ((_2541 * _2541) * (_2546 + (-1.0))) + 1.0;
        float _2557 = exp2(log2(1.0 - (isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0)))) * 5.0);
        float _2564 = 1.0 - _2523;
        float _2574 = (0.5 / (((_2303 * ((_2537 * _2564) + _2523)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2564) + _2523) * _2537))) * _2537;
        float _4681 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0));
        float _2576 = (isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0))) * (_2546 / ((_2550 * _2550) * 3.141590118408203125));
        float _2577 = isnan(1.0) ? _2153 : (isnan(_2153) ? 1.0 : min(_2153, 1.0));
        _2498 = (((((_2557 * _2325) + _1058) * cbLight._m0[_2508].x) * _2576) * _2577) + _2434;
        _2500 = (((((_2557 * _2327) + _1060) * cbLight._m0[_2508].y) * _2576) * _2577) + _2435;
        _2502 = (((((_2557 * _2328) + _1061) * cbLight._m0[_2508].z) * _2576) * _2577) + _2436;
    }
    float _2612;
    float _2614;
    float _2616;
    if (_2229)
    {
        _2612 = _2498;
        _2614 = _2500;
        _2616 = _2502;
    }
    else
    {
        uint _2623 = _2138 + 3u;
        uint _2627 = _2138 + 11u;
        float _2641 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2623].w)) * _987) * 0.949999988079071044921875);
        float _2642 = _2641 * _2641;
        float _2643 = cbLight._m0[_2623].x + _925;
        float _2644 = cbLight._m0[_2623].y + _926;
        float _2645 = cbLight._m0[_2623].z + _927;
        float _2649 = inversesqrt(dot(vec3(_2643, _2644, _2645), vec3(_2643, _2644, _2645)));
        float _2650 = _2649 * _2643;
        float _2651 = _2649 * _2644;
        float _2652 = _2649 * _2645;
        float _2653 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2623].xyz));
        float _4697 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
        float _2656 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2657 = dot(vec3(_865, _866, _867), vec3(_2650, _2651, _2652));
        float _4708 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2660 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2661 = dot(vec3(cbLight._m0[_2623].xyz), vec3(_2650, _2651, _2652));
        float _4719 = isnan(0.0) ? _2661 : (isnan(_2661) ? 0.0 : max(_2661, 0.0));
        float _2665 = _2642 * _2642;
        float _2669 = ((_2660 * _2660) * (_2665 + (-1.0))) + 1.0;
        float _2676 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
        float _2683 = 1.0 - _2642;
        float _2693 = (0.5 / (((_2303 * ((_2656 * _2683) + _2642)) + 9.9999999392252902907785028219223e-09) + (((_2303 * _2683) + _2642) * _2656))) * _2656;
        float _4730 = isnan(0.0) ? _2693 : (isnan(_2693) ? 0.0 : max(_2693, 0.0));
        float _2695 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2665 / ((_2669 * _2669) * 3.141590118408203125));
        float _2696 = isnan(1.0) ? _2154 : (isnan(_2154) ? 1.0 : min(_2154, 1.0));
        _2612 = (((((_2676 * _2325) + _1058) * cbLight._m0[_2627].x) * _2695) * _2696) + _2498;
        _2614 = (((((_2676 * _2327) + _1060) * cbLight._m0[_2627].y) * _2695) * _2696) + _2500;
        _2616 = (((((_2676 * _2328) + _1061) * cbLight._m0[_2627].z) * _2695) * _2696) + _2502;
    }
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    float _2839;
    float _2841;
    if (_2136.y == 0u)
    {
        float _2771 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2772 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2771;
        float _2773 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2771;
        float _2774 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2771;
        uvec4 _2786 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2787 = _2786.x;
        uint _2798 = uint((float(_2786.y) * floor(float(uint(cbSceneParam._m0[85u].y * _946) / _2787))) + floor(float(uint(cbSceneParam._m0[85u].x * _945) / _2787)));
        float _2808 = (log2(_2774 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2809 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        uint _2812 = uint(isnan(14.0) ? _2809 : (isnan(_2809) ? 14.0 : min(_2809, 14.0)));
        uvec4 _2817 = texelFetch(g_lightClusterGridBuffer, int(((_2812 << 2u) + (_2798 << 6u)) >> 2u));
        uint _2818 = _2817.x;
        uint _2819 = _2786.z;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        float _2956;
        float _2958;
        if (((((1u << ((_2819 >> 4u) & 15u)) + 4294967295u) & _2818) == 0u) || ((_2819 & 240u) == 0u))
        {
            _2948 = 0.0;
            _2950 = 0.0;
            _2952 = 0.0;
            _2954 = 0.0;
            _2956 = 0.0;
            _2958 = 0.0;
        }
        else
        {
            float _2949;
            float _2951;
            float _2953;
            float _2955;
            float _2957;
            float _2959;
            float _3109 = 0.0;
            float _3110 = 0.0;
            float _3111 = 0.0;
            float _3112 = 0.0;
            float _3113 = 0.0;
            float _3114 = 0.0;
            uint _3115 = 0u;
            uint _3124;
            bool _3125;
            for (;;)
            {
                _3124 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3115 << 2u)) >> 2u)).x;
                _3125 = _3124 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3125)
                {
                    frontier_phi_66_pred = _3109;
                    frontier_phi_66_pred_1 = _3114;
                    frontier_phi_66_pred_2 = _3113;
                    frontier_phi_66_pred_3 = _3112;
                    frontier_phi_66_pred_4 = _3111;
                    frontier_phi_66_pred_5 = _3110;
                }
                else
                {
                    float _3254;
                    float _3255;
                    float _3256;
                    float _3257;
                    float _3258;
                    float _3259;
                    uint _3260;
                    _3254 = _3109;
                    _3255 = _3110;
                    _3256 = _3111;
                    _3257 = _3112;
                    _3258 = _3113;
                    _3259 = _3114;
                    _3260 = _3124;
                    float _3181;
                    float _3182;
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    for (;;)
                    {
                        uint _3264 = uint(findLSB(_3260)) + (_3115 << 5u);
                        uint _3261 = (_3260 + 4294967295u) & _3260;
                        uint _3266 = _3264 * 48u;
                        vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3266)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3266 + 3u)).x));
                        uint _3286 = (_3264 * 48u) + 4u;
                        vec4 _3299 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3286)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3286 + 3u)).x));
                        uint _3305 = (_3264 * 48u) + 8u;
                        vec3 _3316 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x));
                        float _3320 = _3280.x - _2772;
                        float _3321 = _3280.y - _2773;
                        float _3322 = _3280.z - _2774;
                        float _3323 = dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322));
                        float _3326 = inversesqrt(_3323);
                        float _3327 = _3326 * _3320;
                        float _3328 = _3326 * _3321;
                        float _3329 = _3326 * _3322;
                        float _3330 = dot(vec3(_968, _971, _974), vec3(_3327, _3328, _3329));
                        float _3335 = 1.0 - (_3323 * _3280.w);
                        float _4756 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                        float _3336 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3337 = sqrt(_3323) * _3299.w;
                        float _3340 = 1.39999997615814208984375 / (_3337 + 1.39999997615814208984375);
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3330) + _3341;
                        float _3347 = _3337 * _3337;
                        float _3351 = ((isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))) * _3336) / ((_3347 * 0.699999988079071044921875) + 1.0);
                        float _3355 = (-0.0) - _2772;
                        float _3356 = (-0.0) - _2773;
                        float _3357 = (-0.0) - _2774;
                        float _3361 = inversesqrt(dot(vec3(_3355, _3356, _3357), vec3(_3355, _3356, _3357)));
                        float _3362 = _3361 * _3355;
                        float _3363 = _3361 * _3356;
                        float _3364 = _3361 * _3357;
                        float _3372 = exp2(log2(1.0 / ((_3347 * 3.5) + 5.0)) * 0.25);
                        float _3373 = 1.0 - _1089;
                        float _3380 = sqrt(1.0 - ((1.0 - (_3373 * _3373)) * (1.0 - (_3372 * _3372))));
                        float _3381 = _3380 * _3380;
                        float _3382 = _3381 * _3381;
                        float _3383 = _3362 + _3327;
                        float _3384 = _3363 + _3328;
                        float _3385 = _3364 + _3329;
                        float _3389 = inversesqrt(dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385)));
                        float _3393 = dot(vec3(_968, _971, _974), vec3(_3362, _3363, _3364));
                        float _4772 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                        float _3396 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
                        float _3397 = dot(vec3(_968, _971, _974), vec3(_3389 * _3383, _3389 * _3384, _3389 * _3385));
                        float _4783 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                        float _3400 = isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0));
                        float _3404 = ((_3400 * _3400) * (_3382 + (-1.0))) + 1.0;
                        float _3405 = _3340 * _3381;
                        float _3406 = _3405 * _3405;
                        float _3409 = ((1.0 - _3406) * _3330) + _3406;
                        float _4794 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                        float _3410 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3411 = 1.0 - _3381;
                        float _3421 = (0.5 / (((_3410 * ((_3396 * _3411) + _3381)) + 9.9999999392252902907785028219223e-09) + (((_3410 * _3411) + _3381) * _3396))) * _3410;
                        float _4805 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                        float _3432 = (((_3382 * 3.1415927410125732421875) * (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0)))) / ((_3404 * _3404) * ((_3347 * 2.1991131305694580078125) + 3.141590118408203125))) * _3336;
                        _3184 = (_3351 * _3299.x) + _3257;
                        _3185 = (_3351 * _3299.y) + _3258;
                        _3186 = (_3351 * _3299.z) + _3259;
                        _3181 = (_3432 * _3316.x) + _3254;
                        _3182 = (_3432 * _3316.y) + _3255;
                        _3183 = (_3432 * _3316.z) + _3256;
                        if (_3261 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3254 = _3181;
                            _3255 = _3182;
                            _3256 = _3183;
                            _3257 = _3184;
                            _3258 = _3185;
                            _3259 = _3186;
                            _3260 = _3261;
                        }
                    }
                    frontier_phi_66_pred = _3181;
                    frontier_phi_66_pred_1 = _3186;
                    frontier_phi_66_pred_2 = _3185;
                    frontier_phi_66_pred_3 = _3184;
                    frontier_phi_66_pred_4 = _3183;
                    frontier_phi_66_pred_5 = _3182;
                }
                _2949 = frontier_phi_66_pred;
                _2959 = frontier_phi_66_pred_1;
                _2957 = frontier_phi_66_pred_2;
                _2955 = frontier_phi_66_pred_3;
                _2953 = frontier_phi_66_pred_4;
                _2951 = frontier_phi_66_pred_5;
                uint _3116 = _3115 + 1u;
                if (_3116 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3109 = _2949;
                    _3110 = _2951;
                    _3111 = _2953;
                    _3112 = _2955;
                    _3113 = _2957;
                    _3114 = _2959;
                    _3115 = _3116;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2948 = _2949;
            _2950 = _2951;
            _2952 = _2953;
            _2954 = _2955;
            _2956 = _2957;
            _2958 = _2959;
        }
        uvec4 _2962 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2963 = _2962.z;
        uint _2965 = (_2963 >> 8u) & 15u;
        float _3077;
        float _3079;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        if (((4294967295u << _2965) & _2818) == 0u)
        {
            _3077 = _2948;
            _3079 = _2950;
            _3081 = _2952;
            _3083 = _2954;
            _3085 = _2956;
            _3087 = _2958;
        }
        else
        {
            float _3102 = inversesqrt(dot(vec3(_2772, _2773, _2774), vec3(_2772, _2773, _2774)));
            float _3103 = _3102 * _2772;
            float _3104 = _3102 * _2773;
            float _3105 = _3102 * _2774;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2965 < ((_2963 >> 12u) & 15u))
            {
                float _3078;
                float _3080;
                float _3082;
                float _3084;
                float _3086;
                float _3088;
                float _3237 = _2948;
                float _3238 = _2950;
                float _3239 = _2952;
                float _3240 = _2954;
                float _3241 = _2956;
                float _3242 = _2958;
                uint _3243 = _2965;
                uint _3252;
                bool _3253;
                for (;;)
                {
                    _3252 = texelFetch(g_lightClassification, int((((_2812 << 5u) + (_2798 << 9u)) + (_3243 << 2u)) >> 2u)).x;
                    _3253 = _3252 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3253)
                    {
                        frontier_phi_77_pred = _3242;
                        frontier_phi_77_pred_1 = _3241;
                        frontier_phi_77_pred_2 = _3240;
                        frontier_phi_77_pred_3 = _3239;
                        frontier_phi_77_pred_4 = _3238;
                        frontier_phi_77_pred_5 = _3237;
                    }
                    else
                    {
                        float _3446;
                        float _3447;
                        float _3448;
                        float _3449;
                        float _3450;
                        float _3451;
                        float _3740;
                        float _3741;
                        float _3742;
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3459 = _3237;
                        float _3460 = _3238;
                        float _3461 = _3239;
                        float _3462 = _3240;
                        float _3463 = _3241;
                        float _3464 = _3242;
                        uint _3465 = _3252;
                        uint _3466;
                        vec4 _3491;
                        float _3492;
                        vec4 _3507;
                        vec3 _3519;
                        vec4 _3535;
                        vec4 _3550;
                        float _3596;
                        bool _3597;
                        for (;;)
                        {
                            uint _3476 = ((_3243 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3465));
                            _3466 = (_3465 + 4294967295u) & _3465;
                            uint _3478 = _3476 * 40u;
                            _3491 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3478)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3478 + 3u)).x));
                            _3492 = _3491.w;
                            uint _3494 = (_3476 * 40u) + 4u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3509 = (_3476 * 40u) + 8u;
                            _3519 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x));
                            uint _3522 = (_3476 * 40u) + 16u;
                            _3535 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3522)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3522 + 3u)).x));
                            uint _3537 = (_3476 * 40u) + 20u;
                            _3550 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3537)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3537 + 3u)).x));
                            uint _3552 = (_3476 * 40u) + 24u;
                            vec4 _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3571 = (_3476 * 40u) + 28u;
                            vec4 _3584 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3571)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3571 + 3u)).x));
                            _3596 = fma(_2774, _3584.z, fma(_2773, _3584.y, _3584.x * _2772)) + _3584.w;
                            _3597 = !((fma(_2774, _3565.z, fma(_2773, _3565.y, _3565.x * _2772)) + _3565.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3597)
                            {
                                float _3624 = _3491.x - _2772;
                                float _3625 = _3491.y - _2773;
                                float _3626 = _3491.z - _2774;
                                float _3627 = dot(vec3(_3624, _3625, _3626), vec3(_3624, _3625, _3626));
                                float _3630 = inversesqrt(_3627);
                                float _3631 = _3630 * _3624;
                                float _3632 = _3630 * _3625;
                                float _3633 = _3630 * _3626;
                                float _3637 = 1.0 - (_3627 / (_3492 * _3492));
                                float _4816 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3638 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3642 = sqrt(_3627) * _3507.w;
                                float _3644 = 1.39999997615814208984375 / (_3642 + 1.39999997615814208984375);
                                float _3645 = _3644 * _3644;
                                float _3648 = ((1.0 - _3645) * dot(vec3(_3631, _3632, _3633), vec3(_968, _971, _974))) + _3645;
                                float _3651 = _3642 * _3642;
                                float _3655 = (fma(_2774, _3535.z, fma(_2773, _3535.y, _3535.x * _2772)) + _3535.w) / _3596;
                                float _3656 = (fma(_2774, _3550.z, fma(_2773, _3550.y, _3550.x * _2772)) + _3550.w) / _3596;
                                float _3660 = 1.0 - dot(vec2(_3655, _3656), vec2(_3655, _3656));
                                float _4832 = isnan(0.0) ? _3660 : (isnan(_3660) ? 0.0 : max(_3660, 0.0));
                                float _3661 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                                float _3662 = _3661 * (((isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0))) * _3638) / ((_3651 * 0.699999988079071044921875) + 1.0));
                                float _3674 = exp2(log2(1.0 / ((_3651 * 3.5) + 5.0)) * 0.25);
                                float _3675 = 1.0 - _1089;
                                float _3682 = sqrt(1.0 - ((1.0 - (_3675 * _3675)) * (1.0 - (_3674 * _3674))));
                                float _3683 = _3682 * _3682;
                                float _3684 = _3683 * _3683;
                                float _3685 = _3631 - _3103;
                                float _3686 = _3632 - _3104;
                                float _3687 = _3633 - _3105;
                                float _3691 = inversesqrt(dot(vec3(_3685, _3686, _3687), vec3(_3685, _3686, _3687)));
                                float _3695 = dot(vec3(_968, _971, _974), vec3((-0.0) - _3103, (-0.0) - _3104, (-0.0) - _3105));
                                float _4843 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3698 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
                                float _3699 = dot(vec3(_968, _971, _974), vec3(_3691 * _3685, _3691 * _3686, _3691 * _3687));
                                float _4854 = isnan(0.0) ? _3699 : (isnan(_3699) ? 0.0 : max(_3699, 0.0));
                                float _3702 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3706 = ((_3702 * _3702) * (_3684 + (-1.0))) + 1.0;
                                float _3707 = _3644 * _3683;
                                float _3708 = _3707 * _3707;
                                float _3714 = ((1.0 - _3708) * dot(vec3(_968, _971, _974), vec3(_3631, _3632, _3633))) + _3708;
                                float _4865 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                                float _3715 = isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0));
                                float _3716 = 1.0 - _3683;
                                float _3726 = (0.5 / (((_3715 * ((_3698 * _3716) + _3683)) + 9.9999999392252902907785028219223e-09) + (((_3715 * _3716) + _3683) * _3698))) * _3715;
                                float _4876 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3736 = (_3661 * _3638) * (((_3684 * 3.1415927410125732421875) * (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0)))) / ((_3706 * _3706) * ((_3651 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3662 * _3507.y;
                                frontier_phi_83_pred_1 = _3662 * _3507.x;
                                frontier_phi_83_pred_2 = _3736 * _3519.z;
                                frontier_phi_83_pred_3 = _3736 * _3519.y;
                                frontier_phi_83_pred_4 = _3736 * _3519.x;
                                frontier_phi_83_pred_5 = _3662 * _3507.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3744 = frontier_phi_83_pred;
                            _3743 = frontier_phi_83_pred_1;
                            _3742 = frontier_phi_83_pred_2;
                            _3741 = frontier_phi_83_pred_3;
                            _3740 = frontier_phi_83_pred_4;
                            _3745 = frontier_phi_83_pred_5;
                            _3449 = _3743 + _3462;
                            _3450 = _3744 + _3463;
                            _3451 = _3745 + _3464;
                            _3446 = _3740 + _3459;
                            _3447 = _3741 + _3460;
                            _3448 = _3742 + _3461;
                            if (_3466 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3459 = _3446;
                                _3460 = _3447;
                                _3461 = _3448;
                                _3462 = _3449;
                                _3463 = _3450;
                                _3464 = _3451;
                                _3465 = _3466;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3451;
                        frontier_phi_77_pred_1 = _3450;
                        frontier_phi_77_pred_2 = _3449;
                        frontier_phi_77_pred_3 = _3448;
                        frontier_phi_77_pred_4 = _3447;
                        frontier_phi_77_pred_5 = _3446;
                    }
                    _3088 = frontier_phi_77_pred;
                    _3086 = frontier_phi_77_pred_1;
                    _3084 = frontier_phi_77_pred_2;
                    _3082 = frontier_phi_77_pred_3;
                    _3080 = frontier_phi_77_pred_4;
                    _3078 = frontier_phi_77_pred_5;
                    uint _3244 = _3243 + 1u;
                    if (_3244 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3237 = _3078;
                        _3238 = _3080;
                        _3239 = _3082;
                        _3240 = _3084;
                        _3241 = _3086;
                        _3242 = _3088;
                        _3243 = _3244;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3082;
                frontier_phi_58_59_ladder_1 = _3088;
                frontier_phi_58_59_ladder_2 = _3086;
                frontier_phi_58_59_ladder_3 = _3084;
                frontier_phi_58_59_ladder_4 = _3080;
                frontier_phi_58_59_ladder_5 = _3078;
            }
            else
            {
                frontier_phi_58_59_ladder = _2952;
                frontier_phi_58_59_ladder_1 = _2958;
                frontier_phi_58_59_ladder_2 = _2956;
                frontier_phi_58_59_ladder_3 = _2954;
                frontier_phi_58_59_ladder_4 = _2950;
                frontier_phi_58_59_ladder_5 = _2948;
            }
            _3077 = frontier_phi_58_59_ladder_5;
            _3079 = frontier_phi_58_59_ladder_4;
            _3081 = frontier_phi_58_59_ladder;
            _3083 = frontier_phi_58_59_ladder_3;
            _3085 = frontier_phi_58_59_ladder_2;
            _3087 = frontier_phi_58_59_ladder_1;
        }
        float _3092 = isnan(1.0) ? _1073 : (isnan(_1073) ? 1.0 : min(_1073, 1.0));
        _2831 = (_3092 * _3083) + _2267;
        _2833 = (_3092 * _3085) + _2269;
        _2835 = (_3092 * _3087) + _2271;
        _2837 = ((_3077 * _1058) * _3092) + _2612;
        _2839 = ((_3079 * _1060) * _3092) + _2614;
        _2841 = ((_3081 * _1061) * _3092) + _2616;
    }
    else
    {
        _2831 = _2267;
        _2833 = _2269;
        _2835 = _2271;
        _2837 = _2612;
        _2839 = _2614;
        _2841 = _2616;
    }
    uint _2847 = _1002 + uint(cbMatDynParam._m0[0u].w);
    float _2853 = cbInstanceData._m0[_2847].x * ((((cbMtdParam._m0[22u].x * _780.x) * cbMtdParam._m0[32u].x) * _801) + _568);
    float _2854 = cbInstanceData._m0[_2847].y * ((((cbMtdParam._m0[22u].y * _780.y) * cbMtdParam._m0[32u].x) * _801) + _569);
    float _2855 = cbInstanceData._m0[_2847].z * ((((cbMtdParam._m0[22u].z * _780.z) * cbMtdParam._m0[32u].x) * _801) + _570);
    float _4892 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
    float _4903 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
    float _4914 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _2872 = (((isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2831 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1073))) + ((_2837 + ((isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0))) * _1902)) * cbPerFrame._m0[3u].x)) + _2853;
    float _2874 = (_2854 + ((_2839 + ((isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0))) * _1902)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0))) * (_2833 + ((isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0))) * _1073)));
    float _2876 = (_2855 + ((_2841 + ((isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0))) * _1902)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2835 + ((isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0))) * _1073)));
    float _2877 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
    float _2878 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
    float _2879 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
    float _2885 = cbMtdParam._m0[2u].x * _2853;
    float _2886 = cbMtdParam._m0[2u].y * _2854;
    float _2887 = cbMtdParam._m0[2u].z * _2855;
    float _4940 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2889 = isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0));
    uint _2890 = _1000 + 6u;
    float _2898 = _945 / cbSceneParam._m0[86u].x;
    float _2899 = _946 / cbSceneParam._m0[86u].y;
    vec4 _2913 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2915 = _2913.x;
    float _2916 = _2913.y;
    float _2917 = _2913.z;
    float _2918 = _2913.w;
    float _3010;
    float _3012;
    float _3014;
    float _3016;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _2973 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _2974 = _2973 / _888;
        float _2985 = _2974 * _918;
        float _2986 = _919 * _2974;
        float _2987 = (-0.0) - _2986;
        float _2988 = _2974 * _920;
        float _2990 = (cbSceneParam._m0[77u].w * _2987) / _2973;
        float _2991 = _2990 + cbSceneParam._m0[79u].w;
        float _2992 = cbSceneParam._m0[79u].w - _2986;
        float _2998 = sqrt(((_2985 * _2985) + (_2986 * _2986)) + (_2988 * _2988));
        float _3001 = (1.0 - (cbSceneParam._m0[77u].w / _2973)) * _2998;
        float _3006 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3008 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3194;
        if (abs((_2987 - _2990) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3194 = ((((_2991 > 0.0) ? exp2(_3006 * _2991) : (2.0 - exp2(_3008 * _2991))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3001;
        }
        else
        {
            float _3138 = 1.0 / cbSceneParam._m0[80u].x;
            float _3139 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : max(_2991, _2992));
            float _3140 = isnan(_2992) ? _2991 : (isnan(_2991) ? _2992 : min(_2991, _2992));
            float _3149 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : min(_3139, 0.0));
            float _3150 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : min(_3140, 0.0));
            _3194 = ((abs(_2998 / _2987) * cbSceneParam._m0[80u].y) * ((((_3149 - _3150) * 2.0) - ((exp2(_3006 * (isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0)))) - exp2(_3006 * (isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0))))) * _3138)) - ((exp2(_3008 * _3149) - exp2(_3008 * _3150)) * _3138))) + (_3001 * cbSceneParam._m0[80u].z);
        }
        vec4 _3196 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2898, _2899, 1.0), 0.0);
        float _3205 = exp2((_3194 * (-1.44269502162933349609375)) * (1.0 - _3196.w));
        float _3206 = log2(_3205);
        float _3222 = log2(_2918);
        _3010 = (exp2(_3222 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].x)) * _3196.x) / cbSceneParam._m0[78u].x)) + _2915;
        _3012 = (exp2(_3222 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].y)) * _3196.y) / cbSceneParam._m0[78u].y)) + _2916;
        _3014 = (exp2(_3222 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3206 * cbSceneParam._m0[78u].z)) * _3196.z) / cbSceneParam._m0[78u].z)) + _2917;
        _3016 = _3205 * _2918;
    }
    else
    {
        _3010 = _2915;
        _3012 = _2916;
        _3014 = _2917;
        _3016 = _2918;
    }
    bool _3232;
    vec4 _3026;
    vec4 _3048;
    float _3050;
    float _3054;
    float _3055;
    float _3056;
    float _3059;
    float _3062;
    float _3065;
    float _3066;
    bool _3076;
    for (;;)
    {
        _3026 = cbMatDynParam._m0[0u];
        float _3028 = roundEven(_3026.y);
        bool _3029 = _3028 == 3.0;
        float _3030 = log2(_3016);
        float _3034 = exp2(_3030 * cbSceneParam._m0[78u].x);
        float _3035 = exp2(_3030 * cbSceneParam._m0[78u].y);
        float _3036 = exp2(_3030 * cbSceneParam._m0[78u].z);
        float _3037 = _3034 * _2877;
        float _3038 = _3035 * _2878;
        float _3039 = _3036 * _2879;
        float _3046 = _934 + (-0.5);
        _3048 = cbMtdParam._m0[1u];
        _3050 = _3048.y * _3046;
        float _3053 = (_3028 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3054 = _3053 * (_3029 ? _3037 : (_3037 + (cbSceneParam._m0[72u].w * _3010)));
        _3055 = _3053 * (_3029 ? _3038 : (_3038 + (cbSceneParam._m0[72u].w * _3012)));
        _3056 = _3053 * (_3029 ? _3039 : (_3039 + (cbSceneParam._m0[72u].w * _3014)));
        _3059 = ((_2885 * _2889) * _3034) * _3053;
        _3062 = ((_2886 * _2889) * _3035) * _3053;
        _3065 = ((_2887 * _2889) * _3036) * _3053;
        _3066 = _3046 * 0.999000012874603271484375;
        _3076 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3076)
        {
            if ((cbInstanceData._m0[_1000 + 7u].x + _3066) < 0.5)
            {
                _3232 = true;
                break;
            }
        }
        uint _3173 = _1002 + uint(_3026.w);
        if ((cbInstanceData._m0[_3173].w < 1.0) && ((cbInstanceData._m0[_3173].w + _3066) < 0.5))
        {
            _3232 = true;
            break;
        }
        if ((_3050 + 1.0) < _3048.x)
        {
            _3232 = true;
            break;
        }
        _3232 = false;
        break;
    }
    float _3437;
    if (_3232)
    {
        discard_state = true;
        _3437 = 0.0;
    }
    else
    {
        _3437 = cbInstanceData._m0[_2890].w;
    }
    SV_Target.x = _3054;
    SV_Target.y = _3055;
    SV_Target.z = _3056;
    SV_Target.w = _3437;
    SV_Target_1.x = _3059;
    SV_Target_1.y = _3062;
    SV_Target_1.z = _3065;
    SV_Target_1.w = cbInstanceData._m0[_2890].w;
    discard_exit();
}


