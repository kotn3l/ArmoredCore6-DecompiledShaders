#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1426;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _272 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _279 = log2(0.0);
    float _281 = exp2(_279 * cbMtdParam._m0[31u].z);
    float _285 = _281 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _281);
    float _286 = _281 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _281);
    float _287 = _281 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _281);
    float _288 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _289 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _290 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _291 = isnan(1.0) ? _288 : (isnan(_288) ? 1.0 : min(_288, 1.0));
    float _293 = isnan(1.0) ? _289 : (isnan(_289) ? 1.0 : min(_289, 1.0));
    float _294 = isnan(1.0) ? _290 : (isnan(_290) ? 1.0 : min(_290, 1.0));
    vec4 _310 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _314 = _310.z;
    float _315 = _310.w;
    float _316 = 1.0 - _315;
    float _323 = exp2(log2((1.0 - (_316 * _314)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    float _337 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_316 * _316) * _314))) * cbMtdParam._m0[34u].w);
    float _338 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    vec4 _352 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _355 = _352.y;
    float _358 = (_355 * ((isnan(1.0) ? _338 : (isnan(_338) ? 1.0 : min(_338, 1.0))) - _315)) + _315;
    vec4 _370 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _382 = (_352.x + (-0.02500000037252902984619140625)) * 8.0;
    float _384 = roundEven(_382);
    float _385 = cbMtdParam._m0[10u].x * _370.x;
    float _386 = cbMtdParam._m0[10u].y * _370.y;
    float _387 = cbMtdParam._m0[10u].z * _370.z;
    vec4 _399 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _419 = (((cbMtdParam._m0[9u].x * _399.x) - _385) * _358) + _385;
    float _420 = (((cbMtdParam._m0[9u].y * _399.y) - _386) * _358) + _386;
    float _421 = (((cbMtdParam._m0[9u].z * _399.z) - _387) * _358) + _387;
    vec4 _433 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _453 = (((cbMtdParam._m0[20u].x * _433.x) - _419) * _325) + _419;
    float _454 = (((cbMtdParam._m0[20u].y * _433.y) - _420) * _325) + _420;
    float _455 = (((cbMtdParam._m0[20u].z * _433.z) - _421) * _325) + _421;
    vec4 _468 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _199[6];
    float _200[6];
    float _201[6];
    _199[0u] = cbMtdParam._m0[24u].x;
    _200[0u] = cbMtdParam._m0[24u].y;
    _201[0u] = cbMtdParam._m0[24u].z;
    _199[1u] = cbMtdParam._m0[25u].x;
    _200[1u] = cbMtdParam._m0[25u].y;
    _201[1u] = cbMtdParam._m0[25u].z;
    _199[2u] = cbMtdParam._m0[26u].x;
    _200[2u] = cbMtdParam._m0[26u].y;
    _201[2u] = cbMtdParam._m0[26u].z;
    _199[3u] = cbMtdParam._m0[27u].x;
    _200[3u] = cbMtdParam._m0[27u].y;
    _201[3u] = cbMtdParam._m0[27u].z;
    _199[4u] = cbMtdParam._m0[28u].x;
    _200[4u] = cbMtdParam._m0[28u].y;
    _201[4u] = cbMtdParam._m0[28u].z;
    _199[5u] = cbMtdParam._m0[29u].x;
    _200[5u] = cbMtdParam._m0[29u].y;
    _201[5u] = cbMtdParam._m0[29u].z;
    float _551 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    uint _554 = uint(int(isnan(5.0) ? _551 : (isnan(_551) ? 5.0 : min(_551, 5.0))));
    float _561 = _199[_554] * _355;
    float _562 = _200[_554] * _355;
    float _563 = _201[_554] * _355;
    float _564 = _561 + ((_272.x * 4.5) * ((((cbMtdParam._m0[30u].x * _468.x) - _453) * _291) + _453));
    float _565 = _562 + ((_272.y * 4.5) * ((((cbMtdParam._m0[30u].y * _468.y) - _454) * _293) + _454));
    float _566 = _563 + ((_272.z * 4.5) * ((((cbMtdParam._m0[30u].z * _468.z) - _455) * _294) + _455));
    float _194[5];
    float _195[5];
    _194[0u] = cbMtdParam._m0[35u].y;
    _195[0u] = cbMtdParam._m0[35u].z;
    _194[1u] = cbMtdParam._m0[36u].w;
    _195[1u] = cbMtdParam._m0[37u].x;
    _194[2u] = cbMtdParam._m0[37u].y;
    _195[2u] = cbMtdParam._m0[37u].z;
    _194[3u] = cbMtdParam._m0[37u].w;
    _195[3u] = cbMtdParam._m0[38u].x;
    _194[4u] = cbMtdParam._m0[38u].y;
    _195[4u] = cbMtdParam._m0[38u].z;
    float _597 = roundEven(5.0 - _382);
    float _598 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _599 = isnan(4.0) ? _598 : (isnan(_598) ? 4.0 : min(_598, 4.0));
    float _601 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    uint _603 = uint(int(isnan(4.0) ? _601 : (isnan(_601) ? 4.0 : min(_601, 4.0))));
    float _615 = ((cbMtdParam._m0[39u].z - _195[_603]) * _358) + _195[_603];
    float _623 = ((cbMtdParam._m0[40u].x - _615) * _325) + _615;
    float _628 = ((cbMtdParam._m0[40u].z - _623) * _291) + _623;
    vec4 _645 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _647 = _645.x;
    float _648 = _645.y;
    float _650 = _645.z + _194[_603];
    vec4 _662 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _670 = (((cbMtdParam._m0[39u].y - _650) + _662.z) * _358) + _650;
    vec4 _683 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _691 = (((cbMtdParam._m0[39u].w - _670) + _683.z) * _325) + _670;
    float _697 = ((((_314 * 2.0) * _691) - _691) * cbMtdParam._m0[33u].w) + _691;
    vec4 _710 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _718 = (((_710.z + cbMtdParam._m0[40u].y) - _697) * _294) + _697;
    float _745 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _776 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_745 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_749 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _791 = (-0.0) - ((_749 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _795 = (_749 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _796 = isnan(_795) ? _791 : (isnan(_791) ? _795 : min(_791, _795));
    float _3897 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _797 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _820 = ((_662.x - _647) * _358) + _647;
    float _821 = ((_662.y - _648) * _358) + _648;
    float _826 = ((_683.x - _820) * _325) + _820;
    float _827 = ((_683.y - _821) * _325) + _821;
    float _836 = ((((_710.x - _826) * _291) + _826) * 2.0) + (-1.0);
    float _837 = ((((_710.y - _827) * _293) + _827) * 2.0) + (-1.0);
    float _838 = dot(vec2(_836, _837), vec2(_836, _837));
    float _3908 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
    float _843 = sqrt(1.0 - (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))));
    float _846 = (cbMtdParam._m0[34u].x * ((_310.x * 2.0) + (-1.0))) + _836;
    float _847 = (cbMtdParam._m0[34u].x * ((_310.y * 2.0) + (-1.0))) + _837;
    float _850 = fma(_843, _241 * NORMAL.x, fma(_847, _248 * TANGENT.x, (_234 * _226) * _846));
    float _853 = fma(_843, _241 * NORMAL.y, fma(_847, _248 * TANGENT.y, (_234 * _227) * _846));
    float _856 = fma(_843, _241 * NORMAL.z, fma(_847, _248 * TANGENT.z, (_234 * _228) * _846));
    float _860 = inversesqrt(dot(vec3(_850, _853, _856), vec3(_850, _853, _856)));
    float _861 = _860 * _850;
    float _862 = _860 * _853;
    float _863 = _860 * _856;
    float _3919 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _864 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _3941 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _3952 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _3963 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _868 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _884 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _914 = cbSceneParam._m0[71u].x - (_745 / _904);
    float _915 = cbSceneParam._m0[71u].y - (_749 / _904);
    float _916 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _904);
    float _920 = inversesqrt(dot(vec3(_914, _915, _916), vec3(_914, _915, _916)));
    float _921 = _914 * _920;
    float _922 = _915 * _920;
    float _923 = _916 * _920;
    float _929 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _930 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _932 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _934 = _932.w;
    float _952 = fma(_863, cbSceneParam._m0[5u].z, fma(_862, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _861));
    float _955 = fma(_863, cbSceneParam._m0[6u].z, fma(_862, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _861));
    float _958 = fma(_863, cbSceneParam._m0[7u].z, fma(_862, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _861));
    vec4 _960 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _971 = (((_960.y - _864) + (_960.w * _864)) * cbMtdParam._m0[3u].x) + _864;
    uint _984 = uint(roundEven(NORMAL.w)) * 13u;
    uint _986 = _984 + 9u;
    uint _987 = _986 + uint(cbMatDynParam._m0[0u].w);
    float _993 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0)))) * cbInstanceData._m0[_987].x;
    float _994 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0)))) * cbInstanceData._m0[_987].y;
    float _995 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * cbInstanceData._m0[_987].z;
    float _3974 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
    float _996 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _3985 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _997 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _3996 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    vec4 _999 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1004 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1015 = (((_1004.x - _868) + (_1004.w * _868)) * cbMtdParam._m0[3u].x) + _868;
    float _1028 = (cbMtdParam._m0[3u].x * (((_996 * _934) - _996) + _999.x)) + _996;
    float _1029 = (cbMtdParam._m0[3u].x * (((_997 * _934) - _997) + _999.y)) + _997;
    float _1030 = (cbMtdParam._m0[3u].x * (((_998 * _934) - _998) + _999.z)) + _998;
    float _1031 = 1.0 - _1015;
    float _1032 = _1031 * _1028;
    float _1033 = _1031 * _1029;
    float _1034 = _1031 * _1030;
    float _1039 = (_1028 + (-0.039999999105930328369140625)) * _1015;
    float _1040 = (_1029 + (-0.039999999105930328369140625)) * _1015;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _1015;
    float _1042 = _1039 + 0.039999999105930328369140625;
    float _1044 = _1040 + 0.039999999105930328369140625;
    float _1045 = _1041 + 0.039999999105930328369140625;
    vec4 _1054 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _929, cbSceneParam._m0[86u].y * _930));
    float _1057 = _1054.x * TEXCOORD_5.w;
    float _1058 = dot(vec3(_861, _862, _863), vec3(_921, _922, _923));
    float _1061 = _1058 * 2.0;
    float _1065 = (_1061 * _861) - _921;
    float _1066 = (_1061 * _862) - _922;
    float _1067 = (_1061 * _863) - _923;
    float _1071 = abs(dot(vec3(_921, _922, _923), vec3(_861, _862, _863)));
    float _4007 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
    float _1073 = sqrt(_971);
    float _1084 = exp2((_1073 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1073 * 3.0));
    float _1090 = (1.0 - _1084) * ((_1073 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1091 = _1084 * _1073;
    float _1119 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1425;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1152 = fma(_1127, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1119));
        float _1156 = fma(_1127, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1119));
        float _1160 = fma(_1127, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1119));
        float _1184 = _1119 + _861;
        float _1185 = _1123 + _862;
        float _1186 = _1127 + _863;
        float _1196 = fma(_1186, cbModelParam._m0[26u].z, fma(_1185, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1184)) - _1152;
        float _1197 = fma(_1186, cbModelParam._m0[27u].z, fma(_1185, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1184)) - _1156;
        float _1198 = fma(_1186, cbModelParam._m0[28u].z, fma(_1185, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1184)) - _1160;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1214 = ((_1202 * _1196) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1152 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1202 * _1197) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1156 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1198) / cbModelParam._m0[34u].z) + ((((((_1160 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1214, _1215, _1216), 0.0);
        float _1253 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1219.x + (-0.5));
        float _1255 = _1253 * (_1219.y + (-0.5));
        float _1256 = _1253 * (_1219.z + (-0.5));
        float _1263 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1226.x + (-0.5));
        float _1265 = _1263 * (_1226.y + (-0.5));
        float _1266 = _1263 * (_1226.z + (-0.5));
        float _1273 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1233.x + (-0.5));
        float _1275 = _1273 * (_1233.y + (-0.5));
        float _1276 = _1273 * (_1233.z + (-0.5));
        float _1283 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1240.x + (-0.5));
        float _1285 = _1283 * (_1240.y + (-0.5));
        float _1286 = _1283 * (_1240.z + (-0.5));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = _1254 * 0.5;
        float _1291 = _1264 * 0.5;
        float _1292 = _1274 * 0.5;
        float _1293 = dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292));
        float _1298 = (_1293 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1293);
        float _1307 = (dot(vec3(_861, _862, _863), vec3(_1298 * _1290, _1298 * _1291, _1298 * _1292)) + 1.0) * 0.5;
        float _4033 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1317 = sqrt(((_1291 * _1291) + (_1290 * _1290)) + (_1292 * _1292)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _4044 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4055 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0))) * (_1319 + 1.0))) + _1324) * _1287;
        float _1334 = _1255 * 0.5;
        float _1335 = _1265 * 0.5;
        float _1336 = _1275 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_861, _862, _863), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4066 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _4077 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4088 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * (_1361 + 1.0))) + _1366) * _1288;
        float _1376 = _1256 * 0.5;
        float _1377 = _1266 * 0.5;
        float _1378 = _1276 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_861, _862, _863), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4121 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1403 + 1.0))) + _1408) * _1289;
        _1425 = _1256;
        _1427 = _1255;
        _1428 = _1254;
        _1429 = _1266;
        _1430 = _1265;
        _1431 = _1264;
        _1432 = _1276;
        _1433 = _1275;
        _1434 = _1274;
        _1435 = _1289;
        _1436 = _1288;
        _1437 = _1287;
        _1438 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1439 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
    }
    else
    {
        _1425 = _1426;
        _1427 = _1426;
        _1428 = _1426;
        _1429 = _1426;
        _1430 = _1426;
        _1431 = _1426;
        _1432 = _1426;
        _1433 = _1426;
        _1434 = _1426;
        _1435 = _1426;
        _1436 = _1426;
        _1437 = _1426;
        _1438 = 0.0;
        _1439 = 0.0;
        _1440 = 0.0;
    }
    float _1730;
    float _1731;
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1463 = fma(_1127, cbModelParam._m0[30u].z, fma(_1123, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1119));
        float _1467 = fma(_1127, cbModelParam._m0[31u].z, fma(_1123, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1119));
        float _1471 = fma(_1127, cbModelParam._m0[32u].z, fma(_1123, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1119));
        float _1493 = _1119 + _861;
        float _1494 = _1123 + _862;
        float _1495 = _1127 + _863;
        float _1505 = fma(_1495, cbModelParam._m0[30u].z, fma(_1494, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1493)) - _1463;
        float _1506 = fma(_1495, cbModelParam._m0[31u].z, fma(_1494, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1493)) - _1467;
        float _1507 = fma(_1495, cbModelParam._m0[32u].z, fma(_1494, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1493)) - _1471;
        float _1511 = inversesqrt(dot(vec3(_1505, _1506, _1507), vec3(_1505, _1506, _1507)));
        float _1523 = ((_1511 * _1505) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1463 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1524 = ((_1511 * _1506) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1467 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1525 = ((_1511 * _1507) / cbModelParam._m0[35u].z) + ((((((_1471 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1534 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1523, _1524, _1525), 0.0);
        float _1560 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1561 = _1560 * (_1527.x + (-0.5));
        float _1562 = _1560 * (_1527.y + (-0.5));
        float _1563 = _1560 * (_1527.z + (-0.5));
        float _1570 = exp2((_1534.w + (-0.5)) * 20.0) * 2.0;
        float _1571 = _1570 * (_1534.x + (-0.5));
        float _1572 = _1570 * (_1534.y + (-0.5));
        float _1573 = _1570 * (_1534.z + (-0.5));
        float _1580 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1581 = _1580 * (_1541.x + (-0.5));
        float _1582 = _1580 * (_1541.y + (-0.5));
        float _1583 = _1580 * (_1541.z + (-0.5));
        float _1590 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1591 = _1590 * (_1548.x + (-0.5));
        float _1592 = _1590 * (_1548.y + (-0.5));
        float _1593 = _1590 * (_1548.z + (-0.5));
        float _1594 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1595 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = _1561 * 0.5;
        float _1598 = _1571 * 0.5;
        float _1599 = _1581 * 0.5;
        float _1600 = dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599));
        float _1605 = (_1600 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1600);
        float _1613 = (dot(vec3(_861, _862, _863), vec3(_1605 * _1597, _1605 * _1598, _1605 * _1599)) + 1.0) * 0.5;
        float _4162 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1622 = sqrt(((_1598 * _1598) + (_1597 * _1597)) + (_1599 * _1599)) / (_1594 + 9.9999997473787516355514526367188e-06);
        float _4173 = isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0));
        float _1623 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
        float _1624 = _1623 * 2.0;
        float _1628 = (1.0 - _1623) / (_1623 + 1.0);
        float _4184 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
        float _1629 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
        float _1638 = ((((1.0 - _1629) * (_1624 + 2.0)) * exp2(log2(isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_1624 + 1.0))) + _1629) * _1594;
        float _1639 = _1562 * 0.5;
        float _1640 = _1572 * 0.5;
        float _1641 = _1582 * 0.5;
        float _1642 = dot(vec3(_1639, _1640, _1641), vec3(_1639, _1640, _1641));
        float _1647 = (_1642 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1642);
        float _1655 = (dot(vec3(_861, _862, _863), vec3(_1647 * _1639, _1647 * _1640, _1647 * _1641)) + 1.0) * 0.5;
        float _4195 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1664 = sqrt(((_1640 * _1640) + (_1639 * _1639)) + (_1641 * _1641)) / (_1595 + 9.9999997473787516355514526367188e-06);
        float _4206 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
        float _1665 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
        float _1666 = _1665 * 2.0;
        float _1670 = (1.0 - _1665) / (_1665 + 1.0);
        float _4217 = isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0));
        float _1671 = isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0));
        float _1680 = ((((1.0 - _1671) * (_1666 + 2.0)) * exp2(log2(isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (_1666 + 1.0))) + _1671) * _1595;
        float _1681 = _1563 * 0.5;
        float _1682 = _1573 * 0.5;
        float _1683 = _1583 * 0.5;
        float _1684 = dot(vec3(_1681, _1682, _1683), vec3(_1681, _1682, _1683));
        float _1689 = (_1684 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1684);
        float _1697 = (dot(vec3(_861, _862, _863), vec3(_1689 * _1681, _1689 * _1682, _1689 * _1683)) + 1.0) * 0.5;
        float _4228 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
        float _1706 = sqrt(((_1682 * _1682) + (_1681 * _1681)) + (_1683 * _1683)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4239 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
        float _1708 = _1707 * 2.0;
        float _1712 = (1.0 - _1707) / (_1707 + 1.0);
        float _4250 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1713 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
        float _1722 = ((((1.0 - _1713) * (_1708 + 2.0)) * exp2(log2(isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0))) * (_1708 + 1.0))) + _1713) * _1596;
        _1730 = _1563;
        _1731 = _1562;
        _1732 = _1561;
        _1733 = _1573;
        _1734 = _1572;
        _1735 = _1571;
        _1736 = _1583;
        _1737 = _1582;
        _1738 = _1581;
        _1739 = _1596;
        _1740 = _1595;
        _1741 = _1594;
        _1742 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)));
        _1743 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)));
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)));
    }
    else
    {
        _1730 = _1426;
        _1731 = _1426;
        _1732 = _1426;
        _1733 = _1426;
        _1734 = _1426;
        _1735 = _1426;
        _1736 = _1426;
        _1737 = _1426;
        _1738 = _1426;
        _1739 = _1426;
        _1740 = _1426;
        _1741 = _1426;
        _1742 = 0.0;
        _1743 = 0.0;
        _1744 = 0.0;
    }
    float _1754 = (cbModelParam._m0[1u].x * (_1742 - _1438)) + _1438;
    float _1755 = (cbModelParam._m0[1u].x * (_1743 - _1439)) + _1439;
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1440)) + _1440;
    float _1777 = fma(_1756, cbSceneParam._m0[89u].z, fma(_1755, cbSceneParam._m0[89u].y, _1754 * cbSceneParam._m0[89u].x));
    float _1780 = fma(_1756, cbSceneParam._m0[90u].z, fma(_1755, cbSceneParam._m0[90u].y, _1754 * cbSceneParam._m0[90u].x));
    float _1783 = fma(_1756, cbSceneParam._m0[91u].z, fma(_1755, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1754));
    float _1796 = _1065 * 0.5;
    float _1797 = _1066 * 0.5;
    float _1798 = _1067 * 0.5;
    float _1799 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1802 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1731, _1734, _1737, _1740));
    float _1805 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1730, _1733, _1736, _1739));
    float _1839;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1812 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1425, _1429, _1432, _1435));
        float _1816 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1427, _1430, _1433, _1436));
        float _1820 = dot(vec4(_1796, _1797, _1798, 1.0), vec4(_1428, _1431, _1434, _1437));
        float _1827 = dot(vec4(cbModelParam._m0[39u]), vec4(_1796, _1797, _1798, 1.0));
        _1839 = dot(vec3(isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)), isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1827) ? 0.0 : (isnan(0.0) ? _1827 : max(0.0, _1827))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1839 = 1.0;
    }
    float _1850;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1841 = dot(vec4(cbModelParam._m0[40u]), vec4(_1796, _1797, _1798, 1.0));
        _1850 = dot(vec3(isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0)), isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1841) ? 0.0 : (isnan(0.0) ? _1841 : max(0.0, _1841))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1850 = 1.0;
    }
    float _1854 = (_1850 * cbModelParam._m0[1u].x) + (_1839 * (1.0 - cbModelParam._m0[1u].x));
    float _1864 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _971);
    float _1865 = isnan(_1864) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1864 : min(cbModelParam._m0[25u].z, _1864));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1914 = fma(_1127, cbModelParam._m0[13u].z, fma(_1123, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1119)) + cbModelParam._m0[13u].w;
        float _1918 = fma(_1127, cbModelParam._m0[14u].z, fma(_1123, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1119)) + cbModelParam._m0[14u].w;
        float _1922 = fma(_1127, cbModelParam._m0[15u].z, fma(_1123, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1119)) + cbModelParam._m0[15u].w;
        float _1925 = fma(_1067, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1065));
        float _1928 = fma(_1067, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1065));
        float _1931 = fma(_1067, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1065));
        float _1959;
        if (_1925 > 0.0)
        {
            _1959 = abs((1.0 - _1914) / _1925);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1914 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1959 = frontier_phi_14_12_ladder;
        }
        float _2185;
        if (_1928 > 0.0)
        {
            _2185 = abs((1.0 - _1918) / _1928);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1918 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2185 = frontier_phi_23_19_ladder;
        }
        float _2442;
        if (_1931 > 0.0)
        {
            _2442 = abs((1.0 - _1922) / _1931);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1931 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1922 + 1.0) / _1931);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2442 = frontier_phi_35_30_ladder;
        }
        float _2444 = isnan(_2185) ? _1959 : (isnan(_1959) ? _2185 : min(_1959, _2185));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1925) + _1914;
        float _2450 = (_2445 * _1928) + _1918;
        float _2451 = (_2445 * _1931) + _1922;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2454 = (-1.0) - _2452;
        float _2456 = _2452 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2451 > _2456) || ((_2451 < _2454) || ((_2450 > _2456) || ((_2450 < _2454) || ((_2449 < _2454) || (_2449 > _2456))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2451, cbModelParam._m0[9u].z, fma(_2450, cbModelParam._m0[9u].y, _2449 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2451, cbModelParam._m0[10u].z, fma(_2450, cbModelParam._m0[10u].y, _2449 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2451, cbModelParam._m0[11u].z, fma(_2450, cbModelParam._m0[11u].y, _2449 * cbModelParam._m0[11u].x))), _1865);
            frontier_phi_13_35_ladder = _2579.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2579.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2579.x * cbModelParam._m0[1u].y;
        }
        _1947 = frontier_phi_13_35_ladder_2;
        _1949 = frontier_phi_13_35_ladder_1;
        _1951 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1935 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1065, _1066, _1067), _1865);
        _1947 = _1935.x * cbModelParam._m0[1u].y;
        _1949 = _1935.y * cbModelParam._m0[1u].y;
        _1951 = _1935.z * cbModelParam._m0[1u].y;
    }
    float _1955 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _971);
    float _1956 = isnan(_1955) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1955 : min(cbModelParam._m0[25u].w, _1955));
    float _2048;
    float _2050;
    float _2052;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2012 = fma(_1127, cbModelParam._m0[21u].z, fma(_1123, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1119)) + cbModelParam._m0[21u].w;
        float _2016 = fma(_1127, cbModelParam._m0[22u].z, fma(_1123, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1119)) + cbModelParam._m0[22u].w;
        float _2020 = fma(_1127, cbModelParam._m0[23u].z, fma(_1123, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1119)) + cbModelParam._m0[23u].w;
        float _2023 = fma(_1067, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1065));
        float _2026 = fma(_1067, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1065));
        float _2029 = fma(_1067, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1065));
        float _2190;
        if (_2023 > 0.0)
        {
            _2190 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2190 = frontier_phi_25_21_ladder;
        }
        float _2469;
        if (_2026 > 0.0)
        {
            _2469 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2469 = frontier_phi_37_32_ladder;
        }
        float _2682;
        if (_2029 > 0.0)
        {
            _2682 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2682 = frontier_phi_46_43_ladder;
        }
        float _2684 = isnan(_2469) ? _2190 : (isnan(_2190) ? _2469 : min(_2190, _2469));
        float _2685 = isnan(_2682) ? _2684 : (isnan(_2684) ? _2682 : min(_2684, _2682));
        float _2689 = (_2685 * _2023) + _2012;
        float _2690 = (_2685 * _2026) + _2016;
        float _2691 = (_2685 * _2029) + _2020;
        float _2692 = _2685 * 9.9999997473787516355514526367188e-05;
        float _2693 = (-1.0) - _2692;
        float _2695 = _2692 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2691 > _2695) || ((_2691 < _2693) || ((_2690 > _2695) || ((_2690 < _2693) || ((_2689 < _2693) || (_2689 > _2695))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2691, cbModelParam._m0[17u].z, fma(_2690, cbModelParam._m0[17u].y, _2689 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2691, cbModelParam._m0[18u].z, fma(_2690, cbModelParam._m0[18u].y, _2689 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2691, cbModelParam._m0[19u].z, fma(_2690, cbModelParam._m0[19u].y, _2689 * cbModelParam._m0[19u].x))), _1956);
            frontier_phi_22_46_ladder = _2919.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2919.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2919.x * cbModelParam._m0[1u].z;
        }
        _2048 = frontier_phi_22_46_ladder_2;
        _2050 = frontier_phi_22_46_ladder_1;
        _2052 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2032 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1065, _1066, _1067), _1956);
        _2048 = _2032.x * cbModelParam._m0[1u].z;
        _2050 = _2032.y * cbModelParam._m0[1u].z;
        _2052 = _2032.z * cbModelParam._m0[1u].z;
    }
    float _2065 = (((_1090 * _1042) + _1091) * _1057) * ((cbModelParam._m0[1u].w * (_2048 - _1947)) + _1947);
    float _2067 = (((_1090 * _1044) + _1091) * _1057) * ((cbModelParam._m0[1u].w * (_2050 - _1949)) + _1949);
    float _2069 = (((_1090 * _1045) + _1091) * _1057) * ((cbModelParam._m0[1u].w * (_2052 - _1951)) + _1951);
    float _2072 = fma(_2069, cbSceneParam._m0[89u].z, fma(_2067, cbSceneParam._m0[89u].y, _2065 * cbSceneParam._m0[89u].x));
    float _2075 = fma(_2069, cbSceneParam._m0[90u].z, fma(_2067, cbSceneParam._m0[90u].y, _2065 * cbSceneParam._m0[90u].x));
    float _2078 = fma(_2069, cbSceneParam._m0[91u].z, fma(_2067, cbSceneParam._m0[91u].y, _2065 * cbSceneParam._m0[91u].x));
    vec4 _2086 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_929, _930));
    float _2088 = _2086.w;
    float _2100 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2088);
    float _2101 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2088);
    float _2102 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2088);
    uvec4 _2106 = floatBitsToUint(cbInstanceData._m0[_984 + 5u]);
    uint _2108 = _2106.x * 14u;
    uint _2109 = _2108 + 13u;
    float _2116 = _1057 + (-1.0);
    float _2121 = (cbLight._m0[_2109].x * _2116) + 1.0;
    float _2122 = (cbLight._m0[_2109].y * _2116) + 1.0;
    float _2123 = (cbLight._m0[_2109].z * _2116) + 1.0;
    float _2124 = (cbLight._m0[_2109].w * _2116) + 1.0;
    uint _2125 = _2108 + 5u;
    float _2131 = isnan(1.0) ? _2122 : (isnan(_2122) ? 1.0 : min(_2122, 1.0));
    uint _2135 = _2108 + 4u;
    float _2144 = isnan(1.0) ? _2121 : (isnan(_2121) ? 1.0 : min(_2121, 1.0));
    uint _2148 = _2108 | 1u;
    float _2159 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_861, _862, _863));
    float _2162 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_861, _862, _863));
    float _4386 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _4397 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
    float _2167 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * 0.3183098733425140380859375;
    float _2169 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * 0.3183098733425140380859375;
    float _2176 = ((cbLight._m0[_2125].x * _2131) * _2169) + (((cbLight._m0[_2135].x * _2100) * _2144) * _2167);
    float _2177 = ((_2131 * cbLight._m0[_2125].y) * _2169) + (((cbLight._m0[_2135].y * _2101) * _2144) * _2167);
    float _2178 = ((_2131 * cbLight._m0[_2125].z) * _2169) + (((cbLight._m0[_2135].z * _2102) * _2144) * _2167);
    uvec4 _2182 = floatBitsToUint(cbLight._m0[_2108 + 12u]);
    bool _2184 = _2182.x == 0u;
    float _2195;
    float _2197;
    float _2199;
    if (_2184)
    {
        _2195 = _2176;
        _2197 = _2177;
        _2199 = _2178;
    }
    else
    {
        uint _2203 = _2108 + 6u;
        float _2219 = (dot(vec3(cbLight._m0[_2108 + 2u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2220 = _2219 * _2219;
        float _4408 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
        float _2221 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2222 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2195 = (((cbLight._m0[_2203].x * 0.3183098733425140380859375) * _2221) * _2222) + _2176;
        _2197 = (((cbLight._m0[_2203].y * 0.3183098733425140380859375) * _2221) * _2222) + _2177;
        _2199 = (((cbLight._m0[_2203].z * 0.3183098733425140380859375) * _2221) * _2222) + _2178;
    }
    bool _2202 = _2182.y == 0u;
    float _2240;
    float _2242;
    float _2244;
    if (_2202)
    {
        _2240 = _2195;
        _2242 = _2197;
        _2244 = _2199;
    }
    else
    {
        uint _2413 = _2108 + 7u;
        float _2429 = (dot(vec3(cbLight._m0[_2108 + 3u].xyz), vec3(_861, _862, _863)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4424 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2432 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2240 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2195;
        _2242 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2197;
        _2244 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2199;
    }
    uint _2247 = _2108 + 8u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2108].w)) * _971) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_2108].x + _921;
    float _2263 = cbLight._m0[_2108].y + _922;
    float _2264 = cbLight._m0[_2108].z + _923;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2108].xyz));
    float _4440 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _4451 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
    float _2276 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2277 = dot(vec3(_861, _862, _863), vec3(_2269, _2270, _2271));
    float _4462 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2280 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _2281 = dot(vec3(cbLight._m0[_2108].xyz), vec3(_2269, _2270, _2271));
    float _4473 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2285 = _2261 * _2261;
    float _2289 = ((_2280 * _2280) * (_2285 + (-1.0))) + 1.0;
    float _2297 = exp2(log2(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0)))) * 5.0);
    float _2298 = 0.959999978542327880859375 - _1039;
    float _2300 = 0.959999978542327880859375 - _1040;
    float _2301 = 0.959999978542327880859375 - _1041;
    float _2308 = 1.0 - _2261;
    float _2319 = (0.5 / (((_2276 * ((_2275 * _2308) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2308) + _2261) * _2275))) * _2275;
    float _4484 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0))) * (_2285 / ((_2289 * _2289) * 3.141590118408203125));
    uint _2335 = _2108 + 9u;
    float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2148].w)) * _971) * 0.949999988079071044921875);
    float _2347 = _2346 * _2346;
    float _2348 = cbLight._m0[_2148].x + _921;
    float _2349 = cbLight._m0[_2148].y + _922;
    float _2350 = cbLight._m0[_2148].z + _923;
    float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
    float _2355 = _2354 * _2348;
    float _2356 = _2354 * _2349;
    float _2357 = _2354 * _2350;
    float _2358 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2148].xyz));
    float _4495 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
    float _2362 = dot(vec3(_861, _862, _863), vec3(_2355, _2356, _2357));
    float _4506 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
    float _2366 = dot(vec3(cbLight._m0[_2148].xyz), vec3(_2355, _2356, _2357));
    float _4517 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = _2347 * _2347;
    float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
    float _2381 = exp2(log2(1.0 - (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * 5.0);
    float _2388 = 1.0 - _2347;
    float _2398 = (0.5 / (((_2276 * ((_2361 * _2388) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2388) + _2347) * _2361))) * _2361;
    float _4528 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2400 = (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
    float _2410 = (((((_2381 * _2298) + _1042) * cbLight._m0[_2335].x) * _2400) * _2131) + ((((cbLight._m0[_2247].x * _2100) * ((_2297 * _2298) + _1042)) * _2321) * _2144);
    float _2411 = (((((_2381 * _2300) + _1044) * cbLight._m0[_2335].y) * _2400) * _2131) + ((((cbLight._m0[_2247].y * _2101) * ((_2297 * _2300) + _1044)) * _2321) * _2144);
    float _2412 = (((((_2381 * _2301) + _1045) * cbLight._m0[_2335].z) * _2400) * _2131) + ((((cbLight._m0[_2247].z * _2102) * ((_2297 * _2301) + _1045)) * _2321) * _2144);
    float _2474;
    float _2476;
    float _2478;
    if (_2184)
    {
        _2474 = _2410;
        _2476 = _2411;
        _2478 = _2412;
    }
    else
    {
        uint _2480 = _2108 + 2u;
        uint _2484 = _2108 + 10u;
        float _2498 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2480].w)) * _971) * 0.949999988079071044921875);
        float _2499 = _2498 * _2498;
        float _2500 = cbLight._m0[_2480].x + _921;
        float _2501 = cbLight._m0[_2480].y + _922;
        float _2502 = cbLight._m0[_2480].z + _923;
        float _2506 = inversesqrt(dot(vec3(_2500, _2501, _2502), vec3(_2500, _2501, _2502)));
        float _2507 = _2506 * _2500;
        float _2508 = _2506 * _2501;
        float _2509 = _2506 * _2502;
        float _2510 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2480].xyz));
        float _4539 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2513 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _2514 = dot(vec3(_861, _862, _863), vec3(_2507, _2508, _2509));
        float _4550 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0));
        float _2517 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2518 = dot(vec3(cbLight._m0[_2480].xyz), vec3(_2507, _2508, _2509));
        float _4561 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
        float _2522 = _2499 * _2499;
        float _2526 = ((_2517 * _2517) * (_2522 + (-1.0))) + 1.0;
        float _2533 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
        float _2540 = 1.0 - _2499;
        float _2550 = (0.5 / (((_2276 * ((_2513 * _2540) + _2499)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2540) + _2499) * _2513))) * _2513;
        float _4572 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2552 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2522 / ((_2526 * _2526) * 3.141590118408203125));
        float _2553 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
        _2474 = (((((_2533 * _2298) + _1042) * cbLight._m0[_2484].x) * _2552) * _2553) + _2410;
        _2476 = (((((_2533 * _2300) + _1044) * cbLight._m0[_2484].y) * _2552) * _2553) + _2411;
        _2478 = (((((_2533 * _2301) + _1045) * cbLight._m0[_2484].z) * _2552) * _2553) + _2412;
    }
    float _2588;
    float _2590;
    float _2592;
    if (_2202)
    {
        _2588 = _2474;
        _2590 = _2476;
        _2592 = _2478;
    }
    else
    {
        uint _2599 = _2108 + 3u;
        uint _2603 = _2108 + 11u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _971) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _921;
        float _2620 = cbLight._m0[_2599].y + _922;
        float _2621 = cbLight._m0[_2599].z + _923;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_861, _862, _863), vec3(cbLight._m0[_2599].xyz));
        float _4588 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _2633 = dot(vec3(_861, _862, _863), vec3(_2626, _2627, _2628));
        float _4599 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4610 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) * 5.0);
        float _2659 = 1.0 - _2618;
        float _2669 = (0.5 / (((_2276 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2276 * _2659) + _2618) * _2632))) * _2632;
        float _4621 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2671 = (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2672 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
        _2588 = (((((_2652 * _2298) + _1042) * cbLight._m0[_2603].x) * _2671) * _2672) + _2474;
        _2590 = (((((_2652 * _2300) + _1044) * cbLight._m0[_2603].y) * _2671) * _2672) + _2476;
        _2592 = (((((_2652 * _2301) + _1045) * cbLight._m0[_2603].z) * _2671) * _2672) + _2478;
    }
    float _2807;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    if (_2106.y == 0u)
    {
        float _2747 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2748 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2747;
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2747;
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2747;
        uvec4 _2762 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2763 = _2762.x;
        uint _2774 = uint((float(_2762.y) * floor(float(uint(cbSceneParam._m0[85u].y * _930) / _2763))) + floor(float(uint(cbSceneParam._m0[85u].x * _929) / _2763)));
        float _2784 = (log2(_2750 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2785 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        uint _2788 = uint(isnan(14.0) ? _2785 : (isnan(_2785) ? 14.0 : min(_2785, 14.0)));
        uvec4 _2793 = texelFetch(g_lightClusterGridBuffer, int(((_2788 << 2u) + (_2774 << 6u)) >> 2u));
        uint _2794 = _2793.x;
        uint _2795 = _2762.z;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        if (((((1u << ((_2795 >> 4u) & 15u)) + 4294967295u) & _2794) == 0u) || ((_2795 & 240u) == 0u))
        {
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
        }
        else
        {
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _3077 = 0.0;
            float _3078 = 0.0;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            uint _3083 = 0u;
            uint _3092;
            bool _3093;
            for (;;)
            {
                _3092 = texelFetch(g_lightClassification, int((((_2788 << 5u) + (_2774 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                _3093 = _3092 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3093)
                {
                    frontier_phi_61_pred = _3077;
                    frontier_phi_61_pred_1 = _3082;
                    frontier_phi_61_pred_2 = _3081;
                    frontier_phi_61_pred_3 = _3080;
                    frontier_phi_61_pred_4 = _3079;
                    frontier_phi_61_pred_5 = _3078;
                }
                else
                {
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    uint _3207;
                    _3201 = _3077;
                    _3202 = _3078;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3092;
                    float _3133;
                    float _3134;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    for (;;)
                    {
                        uint _3211 = uint(findLSB(_3207)) + (_3083 << 5u);
                        uint _3208 = (_3207 + 4294967295u) & _3207;
                        uint _3213 = _3211 * 48u;
                        vec4 _3227 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3213)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3213 + 3u)).x));
                        uint _3233 = (_3211 * 48u) + 4u;
                        vec4 _3246 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3233)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3233 + 3u)).x));
                        uint _3252 = (_3211 * 48u) + 8u;
                        vec3 _3263 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3252)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3252 + 2u)).x));
                        float _3267 = _3227.x - _2748;
                        float _3268 = _3227.y - _2749;
                        float _3269 = _3227.z - _2750;
                        float _3270 = dot(vec3(_3267, _3268, _3269), vec3(_3267, _3268, _3269));
                        float _3273 = inversesqrt(_3270);
                        float _3274 = _3273 * _3267;
                        float _3275 = _3273 * _3268;
                        float _3276 = _3273 * _3269;
                        float _3277 = dot(vec3(_952, _955, _958), vec3(_3274, _3275, _3276));
                        float _3282 = 1.0 - (_3270 * _3227.w);
                        float _4647 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                        float _3283 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                        float _3284 = sqrt(_3270) * _3246.w;
                        float _3287 = 1.39999997615814208984375 / (_3284 + 1.39999997615814208984375);
                        float _3288 = _3287 * _3287;
                        float _3291 = ((1.0 - _3288) * _3277) + _3288;
                        float _3294 = _3284 * _3284;
                        float _3298 = ((isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0))) * _3283) / ((_3294 * 0.699999988079071044921875) + 1.0);
                        float _3302 = (-0.0) - _2748;
                        float _3303 = (-0.0) - _2749;
                        float _3304 = (-0.0) - _2750;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3309 = _3308 * _3302;
                        float _3310 = _3308 * _3303;
                        float _3311 = _3308 * _3304;
                        float _3319 = exp2(log2(1.0 / ((_3294 * 3.5) + 5.0)) * 0.25);
                        float _3320 = 1.0 - _1073;
                        float _3327 = sqrt(1.0 - ((1.0 - (_3320 * _3320)) * (1.0 - (_3319 * _3319))));
                        float _3328 = _3327 * _3327;
                        float _3329 = _3328 * _3328;
                        float _3330 = _3309 + _3274;
                        float _3331 = _3310 + _3275;
                        float _3332 = _3311 + _3276;
                        float _3336 = inversesqrt(dot(vec3(_3330, _3331, _3332), vec3(_3330, _3331, _3332)));
                        float _3340 = dot(vec3(_952, _955, _958), vec3(_3309, _3310, _3311));
                        float _4663 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3343 = isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0));
                        float _3344 = dot(vec3(_952, _955, _958), vec3(_3336 * _3330, _3336 * _3331, _3336 * _3332));
                        float _4674 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3347 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
                        float _3351 = ((_3347 * _3347) * (_3329 + (-1.0))) + 1.0;
                        float _3352 = _3287 * _3328;
                        float _3353 = _3352 * _3352;
                        float _3356 = ((1.0 - _3353) * _3277) + _3353;
                        float _4685 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3357 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
                        float _3358 = 1.0 - _3328;
                        float _3368 = (0.5 / (((_3357 * ((_3343 * _3358) + _3328)) + 9.9999999392252902907785028219223e-09) + (((_3357 * _3358) + _3328) * _3343))) * _3357;
                        float _4696 = isnan(0.0) ? _3368 : (isnan(_3368) ? 0.0 : max(_3368, 0.0));
                        float _3379 = (((_3329 * 3.1415927410125732421875) * (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) / ((_3351 * _3351) * ((_3294 * 2.1991131305694580078125) + 3.141590118408203125))) * _3283;
                        _3136 = (_3298 * _3246.x) + _3204;
                        _3137 = (_3298 * _3246.y) + _3205;
                        _3138 = (_3298 * _3246.z) + _3206;
                        _3133 = (_3379 * _3263.x) + _3201;
                        _3134 = (_3379 * _3263.y) + _3202;
                        _3135 = (_3379 * _3263.z) + _3203;
                        if (_3208 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3201 = _3133;
                            _3202 = _3134;
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3208;
                        }
                    }
                    frontier_phi_61_pred = _3133;
                    frontier_phi_61_pred_1 = _3138;
                    frontier_phi_61_pred_2 = _3137;
                    frontier_phi_61_pred_3 = _3136;
                    frontier_phi_61_pred_4 = _3135;
                    frontier_phi_61_pred_5 = _3134;
                }
                _2925 = frontier_phi_61_pred;
                _2935 = frontier_phi_61_pred_1;
                _2933 = frontier_phi_61_pred_2;
                _2931 = frontier_phi_61_pred_3;
                _2929 = frontier_phi_61_pred_4;
                _2927 = frontier_phi_61_pred_5;
                uint _3084 = _3083 + 1u;
                if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3077 = _2925;
                    _3078 = _2927;
                    _3079 = _2929;
                    _3080 = _2931;
                    _3081 = _2933;
                    _3082 = _2935;
                    _3083 = _3084;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
        }
        uvec4 _2938 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2939 = _2938.z;
        uint _2941 = (_2939 >> 8u) & 15u;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        if (((4294967295u << _2941) & _2794) == 0u)
        {
            _3045 = _2924;
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
        }
        else
        {
            float _3070 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
            float _3071 = _3070 * _2748;
            float _3072 = _3070 * _2749;
            float _3073 = _3070 * _2750;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2941 < ((_2939 >> 12u) & 15u))
            {
                float _3046;
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3184 = _2924;
                float _3185 = _2926;
                float _3186 = _2928;
                float _3187 = _2930;
                float _3188 = _2932;
                float _3189 = _2934;
                uint _3190 = _2941;
                uint _3199;
                bool _3200;
                for (;;)
                {
                    _3199 = texelFetch(g_lightClassification, int((((_2788 << 5u) + (_2774 << 9u)) + (_3190 << 2u)) >> 2u)).x;
                    _3200 = _3199 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3200)
                    {
                        frontier_phi_67_pred = _3187;
                        frontier_phi_67_pred_1 = _3188;
                        frontier_phi_67_pred_2 = _3189;
                        frontier_phi_67_pred_3 = _3186;
                        frontier_phi_67_pred_4 = _3185;
                        frontier_phi_67_pred_5 = _3184;
                    }
                    else
                    {
                        float _3384;
                        float _3385;
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3678;
                        float _3679;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3397 = _3184;
                        float _3398 = _3185;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        uint _3403 = _3199;
                        uint _3404;
                        vec4 _3429;
                        float _3430;
                        vec4 _3445;
                        vec3 _3457;
                        vec4 _3473;
                        vec4 _3488;
                        float _3534;
                        bool _3535;
                        for (;;)
                        {
                            uint _3414 = ((_3190 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3403));
                            _3404 = (_3403 + 4294967295u) & _3403;
                            uint _3416 = _3414 * 40u;
                            _3429 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3416)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3416 + 3u)).x));
                            _3430 = _3429.w;
                            uint _3432 = (_3414 * 40u) + 4u;
                            _3445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3432 + 3u)).x));
                            uint _3447 = (_3414 * 40u) + 8u;
                            _3457 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x));
                            uint _3460 = (_3414 * 40u) + 16u;
                            _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            uint _3475 = (_3414 * 40u) + 20u;
                            _3488 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3475)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3475 + 3u)).x));
                            uint _3490 = (_3414 * 40u) + 24u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            uint _3509 = (_3414 * 40u) + 28u;
                            vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3534 = fma(_2750, _3522.z, fma(_2749, _3522.y, _3522.x * _2748)) + _3522.w;
                            _3535 = !((fma(_2750, _3503.z, fma(_2749, _3503.y, _3503.x * _2748)) + _3503.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3535)
                            {
                                float _3562 = _3429.x - _2748;
                                float _3563 = _3429.y - _2749;
                                float _3564 = _3429.z - _2750;
                                float _3565 = dot(vec3(_3562, _3563, _3564), vec3(_3562, _3563, _3564));
                                float _3568 = inversesqrt(_3565);
                                float _3569 = _3568 * _3562;
                                float _3570 = _3568 * _3563;
                                float _3571 = _3568 * _3564;
                                float _3575 = 1.0 - (_3565 / (_3430 * _3430));
                                float _4707 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3576 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
                                float _3580 = sqrt(_3565) * _3445.w;
                                float _3582 = 1.39999997615814208984375 / (_3580 + 1.39999997615814208984375);
                                float _3583 = _3582 * _3582;
                                float _3586 = ((1.0 - _3583) * dot(vec3(_3569, _3570, _3571), vec3(_952, _955, _958))) + _3583;
                                float _3589 = _3580 * _3580;
                                float _3593 = (fma(_2750, _3473.z, fma(_2749, _3473.y, _3473.x * _2748)) + _3473.w) / _3534;
                                float _3594 = (fma(_2750, _3488.z, fma(_2749, _3488.y, _3488.x * _2748)) + _3488.w) / _3534;
                                float _3598 = 1.0 - dot(vec2(_3593, _3594), vec2(_3593, _3594));
                                float _4723 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                                float _3599 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
                                float _3600 = _3599 * (((isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0))) * _3576) / ((_3589 * 0.699999988079071044921875) + 1.0));
                                float _3612 = exp2(log2(1.0 / ((_3589 * 3.5) + 5.0)) * 0.25);
                                float _3613 = 1.0 - _1073;
                                float _3620 = sqrt(1.0 - ((1.0 - (_3613 * _3613)) * (1.0 - (_3612 * _3612))));
                                float _3621 = _3620 * _3620;
                                float _3622 = _3621 * _3621;
                                float _3623 = _3569 - _3071;
                                float _3624 = _3570 - _3072;
                                float _3625 = _3571 - _3073;
                                float _3629 = inversesqrt(dot(vec3(_3623, _3624, _3625), vec3(_3623, _3624, _3625)));
                                float _3633 = dot(vec3(_952, _955, _958), vec3((-0.0) - _3071, (-0.0) - _3072, (-0.0) - _3073));
                                float _4734 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3636 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
                                float _3637 = dot(vec3(_952, _955, _958), vec3(_3629 * _3623, _3629 * _3624, _3629 * _3625));
                                float _4745 = isnan(0.0) ? _3637 : (isnan(_3637) ? 0.0 : max(_3637, 0.0));
                                float _3640 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                                float _3644 = ((_3640 * _3640) * (_3622 + (-1.0))) + 1.0;
                                float _3645 = _3582 * _3621;
                                float _3646 = _3645 * _3645;
                                float _3652 = ((1.0 - _3646) * dot(vec3(_952, _955, _958), vec3(_3569, _3570, _3571))) + _3646;
                                float _4756 = isnan(0.0) ? _3652 : (isnan(_3652) ? 0.0 : max(_3652, 0.0));
                                float _3653 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                                float _3654 = 1.0 - _3621;
                                float _3664 = (0.5 / (((_3653 * ((_3636 * _3654) + _3621)) + 9.9999999392252902907785028219223e-09) + (((_3653 * _3654) + _3621) * _3636))) * _3653;
                                float _4767 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3674 = (_3599 * _3576) * (((_3622 * 3.1415927410125732421875) * (isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0)))) / ((_3644 * _3644) * ((_3589 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3674 * _3457.x;
                                frontier_phi_73_pred_1 = _3674 * _3457.y;
                                frontier_phi_73_pred_2 = _3600 * _3445.z;
                                frontier_phi_73_pred_3 = _3600 * _3445.y;
                                frontier_phi_73_pred_4 = _3600 * _3445.x;
                                frontier_phi_73_pred_5 = _3674 * _3457.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3678 = frontier_phi_73_pred;
                            _3679 = frontier_phi_73_pred_1;
                            _3683 = frontier_phi_73_pred_2;
                            _3682 = frontier_phi_73_pred_3;
                            _3681 = frontier_phi_73_pred_4;
                            _3680 = frontier_phi_73_pred_5;
                            _3387 = _3681 + _3400;
                            _3388 = _3682 + _3401;
                            _3389 = _3683 + _3402;
                            _3384 = _3678 + _3397;
                            _3385 = _3679 + _3398;
                            _3386 = _3680 + _3399;
                            if (_3404 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3397 = _3384;
                                _3398 = _3385;
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3404;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3387;
                        frontier_phi_67_pred_1 = _3388;
                        frontier_phi_67_pred_2 = _3389;
                        frontier_phi_67_pred_3 = _3386;
                        frontier_phi_67_pred_4 = _3385;
                        frontier_phi_67_pred_5 = _3384;
                    }
                    _3052 = frontier_phi_67_pred;
                    _3054 = frontier_phi_67_pred_1;
                    _3056 = frontier_phi_67_pred_2;
                    _3050 = frontier_phi_67_pred_3;
                    _3048 = frontier_phi_67_pred_4;
                    _3046 = frontier_phi_67_pred_5;
                    uint _3191 = _3190 + 1u;
                    if (_3191 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3184 = _3046;
                        _3185 = _3048;
                        _3186 = _3050;
                        _3187 = _3052;
                        _3188 = _3054;
                        _3189 = _3056;
                        _3190 = _3191;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3054;
                frontier_phi_55_56_ladder_1 = _3056;
                frontier_phi_55_56_ladder_2 = _3052;
                frontier_phi_55_56_ladder_3 = _3050;
                frontier_phi_55_56_ladder_4 = _3048;
                frontier_phi_55_56_ladder_5 = _3046;
            }
            else
            {
                frontier_phi_55_56_ladder = _2932;
                frontier_phi_55_56_ladder_1 = _2934;
                frontier_phi_55_56_ladder_2 = _2930;
                frontier_phi_55_56_ladder_3 = _2928;
                frontier_phi_55_56_ladder_4 = _2926;
                frontier_phi_55_56_ladder_5 = _2924;
            }
            _3045 = frontier_phi_55_56_ladder_5;
            _3047 = frontier_phi_55_56_ladder_4;
            _3049 = frontier_phi_55_56_ladder_3;
            _3051 = frontier_phi_55_56_ladder_2;
            _3053 = frontier_phi_55_56_ladder;
            _3055 = frontier_phi_55_56_ladder_1;
        }
        float _3060 = isnan(1.0) ? _1057 : (isnan(_1057) ? 1.0 : min(_1057, 1.0));
        _2807 = (_3060 * _3051) + _2240;
        _2809 = (_3060 * _3053) + _2242;
        _2811 = (_3060 * _3055) + _2244;
        _2813 = ((_3045 * _1042) * _3060) + _2588;
        _2815 = ((_3047 * _1044) * _3060) + _2590;
        _2817 = ((_3049 * _1045) * _3060) + _2592;
    }
    else
    {
        _2807 = _2240;
        _2809 = _2242;
        _2811 = _2244;
        _2813 = _2588;
        _2815 = _2590;
        _2817 = _2592;
    }
    uint _2823 = _986 + uint(cbMatDynParam._m0[0u].w);
    float _2829 = cbInstanceData._m0[_2823].x * ((((cbMtdParam._m0[22u].x * _776.x) * cbMtdParam._m0[32u].x) * _797) + _561);
    float _2830 = cbInstanceData._m0[_2823].y * ((((cbMtdParam._m0[22u].y * _776.y) * cbMtdParam._m0[32u].x) * _797) + _562);
    float _2831 = cbInstanceData._m0[_2823].z * ((((cbMtdParam._m0[22u].z * _776.z) * cbMtdParam._m0[32u].x) * _797) + _563);
    float _4783 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
    float _4794 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
    float _4805 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _2848 = (((isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_2807 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1057))) + ((_2813 + ((isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0))) * _1854)) * cbPerFrame._m0[3u].x)) + _2829;
    float _2850 = (_2830 + ((_2815 + ((isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0))) * _1854)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * (_2809 + ((isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0))) * _1057)));
    float _2852 = (_2831 + ((_2817 + ((isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0))) * _1854)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * (_2811 + ((isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))) * _1057)));
    float _4831 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2865 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
    uint _2866 = _984 + 6u;
    float _2874 = _929 / cbSceneParam._m0[86u].x;
    float _2875 = _930 / cbSceneParam._m0[86u].y;
    vec4 _2889 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, (log2((isnan(cbSceneParam._m0[77u].w) ? _884 : (isnan(_884) ? cbSceneParam._m0[77u].w : min(_884, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2891 = _2889.x;
    float _2892 = _2889.y;
    float _2893 = _2889.z;
    float _2894 = _2889.w;
    float _2986;
    float _2988;
    float _2990;
    float _2992;
    if (_884 > cbSceneParam._m0[78u].w)
    {
        float _2949 = isnan(_884) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _884 : min(cbSceneParam._m0[80u].w, _884));
        float _2950 = _2949 / _884;
        float _2961 = _2950 * _914;
        float _2962 = _915 * _2950;
        float _2963 = (-0.0) - _2962;
        float _2964 = _2950 * _916;
        float _2966 = (cbSceneParam._m0[77u].w * _2963) / _2949;
        float _2967 = _2966 + cbSceneParam._m0[79u].w;
        float _2968 = cbSceneParam._m0[79u].w - _2962;
        float _2974 = sqrt(((_2961 * _2961) + (_2962 * _2962)) + (_2964 * _2964));
        float _2977 = (1.0 - (cbSceneParam._m0[77u].w / _2949)) * _2974;
        float _2982 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2984 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3146;
        if (abs((_2963 - _2966) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3146 = ((((_2967 > 0.0) ? exp2(_2982 * _2967) : (2.0 - exp2(_2984 * _2967))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2977;
        }
        else
        {
            float _3106 = 1.0 / cbSceneParam._m0[80u].x;
            float _3107 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : max(_2967, _2968));
            float _3108 = isnan(_2968) ? _2967 : (isnan(_2967) ? _2968 : min(_2967, _2968));
            float _3117 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : min(_3107, 0.0));
            float _3118 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : min(_3108, 0.0));
            _3146 = ((abs(_2974 / _2963) * cbSceneParam._m0[80u].y) * ((((_3117 - _3118) * 2.0) - ((exp2(_2982 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0)))) - exp2(_2982 * (isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0))))) * _3106)) - ((exp2(_2984 * _3117) - exp2(_2984 * _3118)) * _3106))) + (_2977 * cbSceneParam._m0[80u].z);
        }
        vec4 _3148 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2874, _2875, 1.0), 0.0);
        float _3157 = exp2((_3146 * (-1.44269502162933349609375)) * (1.0 - _3148.w));
        float _3158 = log2(_3157);
        float _3174 = log2(_2894);
        _2986 = (exp2(_3174 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].x)) * _3148.x) / cbSceneParam._m0[78u].x)) + _2891;
        _2988 = (exp2(_3174 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].y)) * _3148.y) / cbSceneParam._m0[78u].y)) + _2892;
        _2990 = (exp2(_3174 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3158 * cbSceneParam._m0[78u].z)) * _3148.z) / cbSceneParam._m0[78u].z)) + _2893;
        _2992 = _3157 * _2894;
    }
    else
    {
        _2986 = _2891;
        _2988 = _2892;
        _2990 = _2893;
        _2992 = _2894;
    }
    float _3004 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3005 = _3004 == 3.0;
    float _3006 = log2(_2992);
    float _3010 = exp2(_3006 * cbSceneParam._m0[78u].x);
    float _3011 = exp2(_3006 * cbSceneParam._m0[78u].y);
    float _3012 = exp2(_3006 * cbSceneParam._m0[78u].z);
    float _3013 = _3010 * (isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0)));
    float _3014 = _3011 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0)));
    float _3015 = _3012 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)));
    float _3024 = (_3004 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3024 * (_3005 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.y = _3024 * (_3005 ? _3014 : (_3014 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.z = _3024 * (_3005 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.w = cbInstanceData._m0[_2866].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2829) * _2865) * _3010) * _3024;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2830) * _2865) * _3011) * _3024;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2831) * _2865) * _3012) * _3024;
    SV_Target_1.w = cbInstanceData._m0[_2866].w;
}


