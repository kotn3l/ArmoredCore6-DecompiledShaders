#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1473;
float _3913;
float _3914;
float _3915;
float _3916;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _281 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_267 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _288 = log2(0.0);
    float _290 = exp2(_288 * cbMtdParam._m0[31u].z);
    float _294 = _290 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _290);
    float _295 = _290 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _290);
    float _296 = _290 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _290);
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(0.0) ? _295 : (isnan(_295) ? 0.0 : max(_295, 0.0));
    float _299 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _300 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    float _302 = isnan(1.0) ? _298 : (isnan(_298) ? 1.0 : min(_298, 1.0));
    float _303 = isnan(1.0) ? _299 : (isnan(_299) ? 1.0 : min(_299, 1.0));
    vec4 _319 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _267) + cbTextureTilingScale._m0[0u].w));
    float _323 = _319.z;
    float _324 = _319.w;
    float _325 = 1.0 - _324;
    float _332 = exp2(log2((1.0 - (_325 * _323)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    float _346 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_325 * _325) * _323))) * cbMtdParam._m0[34u].w);
    float _347 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    vec4 _361 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _364 = _361.y;
    float _367 = (_364 * ((isnan(1.0) ? _347 : (isnan(_347) ? 1.0 : min(_347, 1.0))) - _324)) + _324;
    vec4 _379 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _391 = (_361.x + (-0.02500000037252902984619140625)) * 8.0;
    float _393 = roundEven(_391);
    float _394 = cbMtdParam._m0[10u].x * _379.x;
    float _395 = cbMtdParam._m0[10u].y * _379.y;
    float _396 = cbMtdParam._m0[10u].z * _379.z;
    vec4 _408 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _267) + cbTextureTilingScale._m0[1u].w));
    float _428 = (((cbMtdParam._m0[9u].x * _408.x) - _394) * _367) + _394;
    float _429 = (((cbMtdParam._m0[9u].y * _408.y) - _395) * _367) + _395;
    float _430 = (((cbMtdParam._m0[9u].z * _408.z) - _396) * _367) + _396;
    vec4 _442 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    float _462 = (((cbMtdParam._m0[20u].x * _442.x) - _428) * _334) + _428;
    float _463 = (((cbMtdParam._m0[20u].y * _442.y) - _429) * _334) + _429;
    float _464 = (((cbMtdParam._m0[20u].z * _442.z) - _430) * _334) + _430;
    vec4 _477 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _267) + cbTextureTilingScale._m0[7u].w));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = cbMtdParam._m0[24u].x;
    _204[0u] = cbMtdParam._m0[24u].y;
    _205[0u] = cbMtdParam._m0[24u].z;
    _203[1u] = cbMtdParam._m0[25u].x;
    _204[1u] = cbMtdParam._m0[25u].y;
    _205[1u] = cbMtdParam._m0[25u].z;
    _203[2u] = cbMtdParam._m0[26u].x;
    _204[2u] = cbMtdParam._m0[26u].y;
    _205[2u] = cbMtdParam._m0[26u].z;
    _203[3u] = cbMtdParam._m0[27u].x;
    _204[3u] = cbMtdParam._m0[27u].y;
    _205[3u] = cbMtdParam._m0[27u].z;
    _203[4u] = cbMtdParam._m0[28u].x;
    _204[4u] = cbMtdParam._m0[28u].y;
    _205[4u] = cbMtdParam._m0[28u].z;
    _203[5u] = cbMtdParam._m0[29u].x;
    _204[5u] = cbMtdParam._m0[29u].y;
    _205[5u] = cbMtdParam._m0[29u].z;
    float _560 = isnan(0.0) ? _393 : (isnan(_393) ? 0.0 : max(_393, 0.0));
    uint _563 = uint(int(isnan(5.0) ? _560 : (isnan(_560) ? 5.0 : min(_560, 5.0))));
    float _570 = _203[_563] * _364;
    float _571 = _204[_563] * _364;
    float _572 = _205[_563] * _364;
    float _573 = _570 + ((_281.x * 4.5) * ((((cbMtdParam._m0[30u].x * _477.x) - _462) * _300) + _462));
    float _574 = _571 + ((_281.y * 4.5) * ((((cbMtdParam._m0[30u].y * _477.y) - _463) * _302) + _463));
    float _575 = _572 + ((_281.z * 4.5) * ((((cbMtdParam._m0[30u].z * _477.z) - _464) * _303) + _464));
    float _198[5];
    float _199[5];
    _198[0u] = cbMtdParam._m0[35u].y;
    _199[0u] = cbMtdParam._m0[35u].z;
    _198[1u] = cbMtdParam._m0[36u].w;
    _199[1u] = cbMtdParam._m0[37u].x;
    _198[2u] = cbMtdParam._m0[37u].y;
    _199[2u] = cbMtdParam._m0[37u].z;
    _198[3u] = cbMtdParam._m0[37u].w;
    _199[3u] = cbMtdParam._m0[38u].x;
    _198[4u] = cbMtdParam._m0[38u].y;
    _199[4u] = cbMtdParam._m0[38u].z;
    float _606 = roundEven(5.0 - _391);
    float _607 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _608 = isnan(4.0) ? _607 : (isnan(_607) ? 4.0 : min(_607, 4.0));
    float _610 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    uint _612 = uint(int(isnan(4.0) ? _610 : (isnan(_610) ? 4.0 : min(_610, 4.0))));
    float _624 = ((cbMtdParam._m0[39u].z - _199[_612]) * _367) + _199[_612];
    float _632 = ((cbMtdParam._m0[40u].x - _624) * _334) + _624;
    float _637 = ((cbMtdParam._m0[40u].z - _632) * _300) + _632;
    vec4 _651 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _267) + cbTextureTilingScale._m0[8u].w));
    float _653 = _651.x;
    float _654 = _651.y;
    float _656 = _651.z + _198[_612];
    vec4 _668 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w));
    float _676 = (((cbMtdParam._m0[39u].y - _656) + _668.z) * _367) + _656;
    vec4 _689 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _697 = (((cbMtdParam._m0[39u].w - _676) + _689.z) * _334) + _676;
    float _703 = ((((_323 * 2.0) * _697) - _697) * cbMtdParam._m0[33u].w) + _697;
    vec4 _716 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _267) + cbTextureTilingScale._m0[12u].w));
    float _724 = (((_716.z + cbMtdParam._m0[40u].y) - _703) * _303) + _703;
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _782 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_751 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_755 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _797 = (-0.0) - ((_755 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _801 = (_755 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _802 = isnan(_801) ? _797 : (isnan(_797) ? _801 : min(_797, _801));
    float _4010 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _803 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
    float _826 = ((_668.x - _653) * _367) + _653;
    float _827 = ((_668.y - _654) * _367) + _654;
    float _832 = ((_689.x - _826) * _334) + _826;
    float _833 = ((_689.y - _827) * _334) + _827;
    float _842 = ((((_716.x - _832) * _300) + _832) * 2.0) + (-1.0);
    float _843 = ((((_716.y - _833) * _302) + _833) * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _4021 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _849 = sqrt(1.0 - (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))));
    float _852 = (cbMtdParam._m0[34u].x * ((_319.x * 2.0) + (-1.0))) + _842;
    float _853 = (cbMtdParam._m0[34u].x * ((_319.y * 2.0) + (-1.0))) + _843;
    float _856 = fma(_849, _245 * NORMAL.x, fma(_853, _252 * TANGENT.x, (_238 * _230) * _852));
    float _859 = fma(_849, _245 * NORMAL.y, fma(_853, _252 * TANGENT.y, (_238 * _231) * _852));
    float _862 = fma(_849, _245 * NORMAL.z, fma(_853, _252 * TANGENT.z, (_238 * _232) * _852));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    float _867 = _866 * _856;
    float _868 = _866 * _859;
    float _869 = _866 * _862;
    float _4032 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _870 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _4043 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4054 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _4065 = isnan(0.0) ? _575 : (isnan(_575) ? 0.0 : max(_575, 0.0));
    float _4076 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _874 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _890 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _920 = cbSceneParam._m0[71u].x - (_751 / _910);
    float _921 = cbSceneParam._m0[71u].y - (_755 / _910);
    float _922 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _910);
    float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
    float _927 = _920 * _926;
    float _928 = _921 * _926;
    float _929 = _922 * _926;
    vec4 _934 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _936 = _934.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1155 = sqrt(((_920 * _920) + (_921 * _921)) + (_922 * _922));
        float _1161 = (cbMatDynParam._m0[5u].x * _1155) + cbMatDynParam._m0[5u].y;
        float _4087 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1166 = (cbMatDynParam._m0[5u].z * _1155) + cbMatDynParam._m0[5u].w;
        float _4098 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) - _1162)) + _1162) < ((_936 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _947 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _948 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _950 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _952 = _950.w;
    float _970 = fma(_869, cbSceneParam._m0[5u].z, fma(_868, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _867));
    float _973 = fma(_869, cbSceneParam._m0[6u].z, fma(_868, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _867));
    float _976 = fma(_869, cbSceneParam._m0[7u].z, fma(_868, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _867));
    vec4 _978 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _989 = (((_978.y - _870) + (_978.w * _870)) * cbMtdParam._m0[3u].x) + _870;
    uint _1002 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1004 = _1002 + 9u;
    uint _1005 = _1004 + uint(cbMatDynParam._m0[0u].w);
    float _1011 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) * cbInstanceData._m0[_1005].x;
    float _1012 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * cbInstanceData._m0[_1005].y;
    float _1013 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0)))) * cbInstanceData._m0[_1005].z;
    float _4109 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _4131 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    vec4 _1017 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1022 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1033 = (((_1022.x - _874) + (_1022.w * _874)) * cbMtdParam._m0[3u].x) + _874;
    float _1046 = (cbMtdParam._m0[3u].x * (((_1014 * _952) - _1014) + _1017.x)) + _1014;
    float _1047 = (cbMtdParam._m0[3u].x * (((_1015 * _952) - _1015) + _1017.y)) + _1015;
    float _1048 = (cbMtdParam._m0[3u].x * (((_1016 * _952) - _1016) + _1017.z)) + _1016;
    float _1049 = 1.0 - _1033;
    float _1050 = _1049 * _1046;
    float _1051 = _1049 * _1047;
    float _1052 = _1049 * _1048;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _1033;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _1033;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _1033;
    float _1060 = _1057 + 0.039999999105930328369140625;
    float _1062 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    vec4 _1072 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _947, cbSceneParam._m0[86u].y * _948));
    float _1075 = _1072.x * TEXCOORD_5.w;
    float _1076 = dot(vec3(_867, _868, _869), vec3(_927, _928, _929));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _867) - _927;
    float _1084 = (_1079 * _868) - _928;
    float _1085 = (_1079 * _869) - _929;
    float _1089 = abs(dot(vec3(_927, _928, _929), vec3(_867, _868, _869)));
    float _4142 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_989);
    float _1102 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1108 = (1.0 - _1102) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1109 = _1102 * _1091;
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1472;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1199 = fma(_1145, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137));
        float _1203 = fma(_1145, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137));
        float _1207 = fma(_1145, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137));
        float _1231 = _1137 + _867;
        float _1232 = _1141 + _868;
        float _1233 = _1145 + _869;
        float _1243 = fma(_1233, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231)) - _1199;
        float _1244 = fma(_1233, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231)) - _1203;
        float _1245 = fma(_1233, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231)) - _1207;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1261 = ((_1249 * _1243) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1199 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1249 * _1244) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1203 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1245) / cbModelParam._m0[34u].z) + ((((((_1207 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1300 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1266.x + (-0.5));
        float _1302 = _1300 * (_1266.y + (-0.5));
        float _1303 = _1300 * (_1266.z + (-0.5));
        float _1310 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1273.x + (-0.5));
        float _1312 = _1310 * (_1273.y + (-0.5));
        float _1313 = _1310 * (_1273.z + (-0.5));
        float _1320 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1280.x + (-0.5));
        float _1322 = _1320 * (_1280.y + (-0.5));
        float _1323 = _1320 * (_1280.z + (-0.5));
        float _1330 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1287.x + (-0.5));
        float _1332 = _1330 * (_1287.y + (-0.5));
        float _1333 = _1330 * (_1287.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1354 = (dot(vec3(_867, _868, _869), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4168 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1364 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4179 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4190 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))) * (_1366 + 1.0))) + _1371) * _1334;
        float _1381 = _1302 * 0.5;
        float _1382 = _1312 * 0.5;
        float _1383 = _1322 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_867, _868, _869), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4201 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4212 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4223 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0))) * (_1408 + 1.0))) + _1413) * _1335;
        float _1423 = _1303 * 0.5;
        float _1424 = _1313 * 0.5;
        float _1425 = _1323 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_867, _868, _869), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4256 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1450 + 1.0))) + _1455) * _1336;
        _1472 = _1303;
        _1474 = _1302;
        _1475 = _1301;
        _1476 = _1313;
        _1477 = _1312;
        _1478 = _1311;
        _1479 = _1323;
        _1480 = _1322;
        _1481 = _1321;
        _1482 = _1336;
        _1483 = _1335;
        _1484 = _1334;
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1473;
        _1474 = _1473;
        _1475 = _1473;
        _1476 = _1473;
        _1477 = _1473;
        _1478 = _1473;
        _1479 = _1473;
        _1480 = _1473;
        _1481 = _1473;
        _1482 = _1473;
        _1483 = _1473;
        _1484 = _1473;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1513 = fma(_1145, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137));
        float _1517 = fma(_1145, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137));
        float _1521 = fma(_1145, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137));
        float _1543 = _1137 + _867;
        float _1544 = _1141 + _868;
        float _1545 = _1145 + _869;
        float _1555 = fma(_1545, cbModelParam._m0[30u].z, fma(_1544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1543)) - _1513;
        float _1556 = fma(_1545, cbModelParam._m0[31u].z, fma(_1544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1543)) - _1517;
        float _1557 = fma(_1545, cbModelParam._m0[32u].z, fma(_1544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1543)) - _1521;
        float _1561 = inversesqrt(dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557)));
        float _1573 = ((_1561 * _1555) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1513 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1574 = ((_1561 * _1556) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1517 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1575 = ((_1561 * _1557) / cbModelParam._m0[35u].z) + ((((((_1521 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        float _1610 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1577.x + (-0.5));
        float _1612 = _1610 * (_1577.y + (-0.5));
        float _1613 = _1610 * (_1577.z + (-0.5));
        float _1620 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1584.x + (-0.5));
        float _1622 = _1620 * (_1584.y + (-0.5));
        float _1623 = _1620 * (_1584.z + (-0.5));
        float _1630 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1591.x + (-0.5));
        float _1632 = _1630 * (_1591.y + (-0.5));
        float _1633 = _1630 * (_1591.z + (-0.5));
        float _1640 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1598.x + (-0.5));
        float _1642 = _1640 * (_1598.y + (-0.5));
        float _1643 = _1640 * (_1598.z + (-0.5));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = _1611 * 0.5;
        float _1648 = _1621 * 0.5;
        float _1649 = _1631 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_867, _868, _869), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4297 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4308 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4319 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_1674 + 1.0))) + _1679) * _1644;
        float _1689 = _1612 * 0.5;
        float _1690 = _1622 * 0.5;
        float _1691 = _1632 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_867, _868, _869), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4330 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4341 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4352 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * (_1716 + 1.0))) + _1721) * _1645;
        float _1731 = _1613 * 0.5;
        float _1732 = _1623 * 0.5;
        float _1733 = _1633 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_867, _868, _869), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4363 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4374 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4385 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (_1758 + 1.0))) + _1763) * _1646;
        _1780 = _1613;
        _1781 = _1612;
        _1782 = _1611;
        _1783 = _1623;
        _1784 = _1622;
        _1785 = _1621;
        _1786 = _1633;
        _1787 = _1632;
        _1788 = _1631;
        _1789 = _1646;
        _1790 = _1645;
        _1791 = _1644;
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
    }
    else
    {
        _1780 = _1473;
        _1781 = _1473;
        _1782 = _1473;
        _1783 = _1473;
        _1784 = _1473;
        _1785 = _1473;
        _1786 = _1473;
        _1787 = _1473;
        _1788 = _1473;
        _1789 = _1473;
        _1790 = _1473;
        _1791 = _1473;
        _1792 = 0.0;
        _1793 = 0.0;
        _1794 = 0.0;
    }
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1485)) + _1485;
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1486)) + _1486;
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1487)) + _1487;
    float _1827 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1804));
    float _1846 = _1083 * 0.5;
    float _1847 = _1084 * 0.5;
    float _1848 = _1085 * 0.5;
    float _1849 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1852 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1855 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1889;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1862 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1472, _1476, _1479, _1482));
        float _1866 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1474, _1477, _1480, _1483));
        float _1870 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1877 = dot(vec4(cbModelParam._m0[39u]), vec4(_1846, _1847, _1848, 1.0));
        _1889 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1889 = 1.0;
    }
    float _1900;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1891 = dot(vec4(cbModelParam._m0[40u]), vec4(_1846, _1847, _1848, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1891) ? 0.0 : (isnan(0.0) ? _1891 : max(0.0, _1891))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1904 = (_1900 * cbModelParam._m0[1u].x) + (_1889 * (1.0 - cbModelParam._m0[1u].x));
    float _1914 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _989);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1914 : min(cbModelParam._m0[25u].z, _1914));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1964 = fma(_1145, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1137)) + cbModelParam._m0[13u].w;
        float _1968 = fma(_1145, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1137)) + cbModelParam._m0[14u].w;
        float _1972 = fma(_1145, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1137)) + cbModelParam._m0[15u].w;
        float _1975 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1978 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1981 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _2009;
        if (_1975 > 0.0)
        {
            _2009 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2009 = frontier_phi_17_15_ladder;
        }
        float _2235;
        if (_1978 > 0.0)
        {
            _2235 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2235 = frontier_phi_26_22_ladder;
        }
        float _2492;
        if (_1981 > 0.0)
        {
            _2492 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2492 = frontier_phi_38_33_ladder;
        }
        float _2494 = isnan(_2235) ? _2009 : (isnan(_2009) ? _2235 : min(_2009, _2235));
        float _2495 = isnan(_2492) ? _2494 : (isnan(_2494) ? _2492 : min(_2494, _2492));
        float _2499 = (_2495 * _1975) + _1964;
        float _2500 = (_2495 * _1978) + _1968;
        float _2501 = (_2495 * _1981) + _1972;
        float _2502 = _2495 * 9.9999997473787516355514526367188e-05;
        float _2504 = (-1.0) - _2502;
        float _2506 = _2502 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2501 > _2506) || ((_2501 < _2504) || ((_2500 > _2506) || ((_2500 < _2504) || ((_2499 < _2504) || (_2499 > _2506))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2629 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2501, cbModelParam._m0[9u].z, fma(_2500, cbModelParam._m0[9u].y, _2499 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2501, cbModelParam._m0[10u].z, fma(_2500, cbModelParam._m0[10u].y, _2499 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2501, cbModelParam._m0[11u].z, fma(_2500, cbModelParam._m0[11u].y, _2499 * cbModelParam._m0[11u].x))), _1915);
            frontier_phi_16_38_ladder = _2629.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2629.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2629.x * cbModelParam._m0[1u].y;
        }
        _1997 = frontier_phi_16_38_ladder_2;
        _1999 = frontier_phi_16_38_ladder_1;
        _2001 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1915);
        _1997 = _1985.x * cbModelParam._m0[1u].y;
        _1999 = _1985.y * cbModelParam._m0[1u].y;
        _2001 = _1985.z * cbModelParam._m0[1u].y;
    }
    float _2005 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _989);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2005 : min(cbModelParam._m0[25u].w, _2005));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2062 = fma(_1145, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1137)) + cbModelParam._m0[21u].w;
        float _2066 = fma(_1145, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1137)) + cbModelParam._m0[22u].w;
        float _2070 = fma(_1145, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1137)) + cbModelParam._m0[23u].w;
        float _2073 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2076 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2079 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2240;
        if (_2073 > 0.0)
        {
            _2240 = abs((1.0 - _2062) / _2073);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2062 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2240 = frontier_phi_28_24_ladder;
        }
        float _2519;
        if (_2076 > 0.0)
        {
            _2519 = abs((1.0 - _2066) / _2076);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2066 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2519 = frontier_phi_40_35_ladder;
        }
        float _2732;
        if (_2079 > 0.0)
        {
            _2732 = abs((1.0 - _2070) / _2079);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2070 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2732 = frontier_phi_49_46_ladder;
        }
        float _2734 = isnan(_2519) ? _2240 : (isnan(_2240) ? _2519 : min(_2240, _2519));
        float _2735 = isnan(_2732) ? _2734 : (isnan(_2734) ? _2732 : min(_2734, _2732));
        float _2739 = (_2735 * _2073) + _2062;
        float _2740 = (_2735 * _2076) + _2066;
        float _2741 = (_2735 * _2079) + _2070;
        float _2742 = _2735 * 9.9999997473787516355514526367188e-05;
        float _2743 = (-1.0) - _2742;
        float _2745 = _2742 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2741 > _2745) || ((_2741 < _2743) || ((_2740 > _2745) || ((_2740 < _2743) || ((_2739 < _2743) || (_2739 > _2745))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2969 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2741, cbModelParam._m0[17u].z, fma(_2740, cbModelParam._m0[17u].y, _2739 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2741, cbModelParam._m0[18u].z, fma(_2740, cbModelParam._m0[18u].y, _2739 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2741, cbModelParam._m0[19u].z, fma(_2740, cbModelParam._m0[19u].y, _2739 * cbModelParam._m0[19u].x))), _2006);
            frontier_phi_25_49_ladder = _2969.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2969.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2969.x * cbModelParam._m0[1u].z;
        }
        _2098 = frontier_phi_25_49_ladder_2;
        _2100 = frontier_phi_25_49_ladder_1;
        _2102 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2082 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _2006);
        _2098 = _2082.x * cbModelParam._m0[1u].z;
        _2100 = _2082.y * cbModelParam._m0[1u].z;
        _2102 = _2082.z * cbModelParam._m0[1u].z;
    }
    float _2115 = (((_1108 * _1060) + _1109) * _1075) * ((cbModelParam._m0[1u].w * (_2098 - _1997)) + _1997);
    float _2117 = (((_1108 * _1062) + _1109) * _1075) * ((cbModelParam._m0[1u].w * (_2100 - _1999)) + _1999);
    float _2119 = (((_1108 * _1063) + _1109) * _1075) * ((cbModelParam._m0[1u].w * (_2102 - _2001)) + _2001);
    float _2122 = fma(_2119, cbSceneParam._m0[89u].z, fma(_2117, cbSceneParam._m0[89u].y, _2115 * cbSceneParam._m0[89u].x));
    float _2125 = fma(_2119, cbSceneParam._m0[90u].z, fma(_2117, cbSceneParam._m0[90u].y, _2115 * cbSceneParam._m0[90u].x));
    float _2128 = fma(_2119, cbSceneParam._m0[91u].z, fma(_2117, cbSceneParam._m0[91u].y, _2115 * cbSceneParam._m0[91u].x));
    vec4 _2136 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_947, _948));
    float _2138 = _2136.w;
    float _2150 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2138);
    float _2151 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2138);
    float _2152 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2138);
    uvec4 _2156 = floatBitsToUint(cbInstanceData._m0[_1002 + 5u]);
    uint _2158 = _2156.x * 14u;
    uint _2159 = _2158 + 13u;
    float _2166 = _1075 + (-1.0);
    float _2171 = (cbLight._m0[_2159].x * _2166) + 1.0;
    float _2172 = (cbLight._m0[_2159].y * _2166) + 1.0;
    float _2173 = (cbLight._m0[_2159].z * _2166) + 1.0;
    float _2174 = (cbLight._m0[_2159].w * _2166) + 1.0;
    uint _2175 = _2158 + 5u;
    float _2181 = isnan(1.0) ? _2172 : (isnan(_2172) ? 1.0 : min(_2172, 1.0));
    uint _2185 = _2158 + 4u;
    float _2194 = isnan(1.0) ? _2171 : (isnan(_2171) ? 1.0 : min(_2171, 1.0));
    uint _2198 = _2158 | 1u;
    float _2209 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_867, _868, _869));
    float _2212 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_867, _868, _869));
    float _4521 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _4532 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2217 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2219 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2226 = ((cbLight._m0[_2175].x * _2181) * _2219) + (((cbLight._m0[_2185].x * _2150) * _2194) * _2217);
    float _2227 = ((_2181 * cbLight._m0[_2175].y) * _2219) + (((cbLight._m0[_2185].y * _2151) * _2194) * _2217);
    float _2228 = ((_2181 * cbLight._m0[_2175].z) * _2219) + (((cbLight._m0[_2185].z * _2152) * _2194) * _2217);
    uvec4 _2232 = floatBitsToUint(cbLight._m0[_2158 + 12u]);
    bool _2234 = _2232.x == 0u;
    float _2245;
    float _2247;
    float _2249;
    if (_2234)
    {
        _2245 = _2226;
        _2247 = _2227;
        _2249 = _2228;
    }
    else
    {
        uint _2253 = _2158 + 6u;
        float _2269 = (dot(vec3(cbLight._m0[_2158 + 2u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4543 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2272 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2245 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2226;
        _2247 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2227;
        _2249 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2228;
    }
    bool _2252 = _2232.y == 0u;
    float _2290;
    float _2292;
    float _2294;
    if (_2252)
    {
        _2290 = _2245;
        _2292 = _2247;
        _2294 = _2249;
    }
    else
    {
        uint _2463 = _2158 + 7u;
        float _2479 = (dot(vec3(cbLight._m0[_2158 + 3u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2480 = _2479 * _2479;
        float _4559 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2481 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2482 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2290 = (((cbLight._m0[_2463].x * 0.3183098733425140380859375) * _2481) * _2482) + _2245;
        _2292 = (((cbLight._m0[_2463].y * 0.3183098733425140380859375) * _2481) * _2482) + _2247;
        _2294 = (((cbLight._m0[_2463].z * 0.3183098733425140380859375) * _2481) * _2482) + _2249;
    }
    uint _2297 = _2158 + 8u;
    float _2310 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2158].w)) * _989) * 0.949999988079071044921875);
    float _2311 = _2310 * _2310;
    float _2312 = cbLight._m0[_2158].x + _927;
    float _2313 = cbLight._m0[_2158].y + _928;
    float _2314 = cbLight._m0[_2158].z + _929;
    float _2318 = inversesqrt(dot(vec3(_2312, _2313, _2314), vec3(_2312, _2313, _2314)));
    float _2319 = _2318 * _2312;
    float _2320 = _2318 * _2313;
    float _2321 = _2318 * _2314;
    float _2322 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2158].xyz));
    float _4575 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2325 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _4586 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2326 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2327 = dot(vec3(_867, _868, _869), vec3(_2319, _2320, _2321));
    float _4597 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2331 = dot(vec3(cbLight._m0[_2158].xyz), vec3(_2319, _2320, _2321));
    float _4608 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2335 = _2311 * _2311;
    float _2339 = ((_2330 * _2330) * (_2335 + (-1.0))) + 1.0;
    float _2347 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2348 = 0.959999978542327880859375 - _1057;
    float _2350 = 0.959999978542327880859375 - _1058;
    float _2351 = 0.959999978542327880859375 - _1059;
    float _2358 = 1.0 - _2311;
    float _2369 = (0.5 / (((_2326 * ((_2325 * _2358) + _2311)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2358) + _2311) * _2325))) * _2325;
    float _4619 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2371 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2335 / ((_2339 * _2339) * 3.141590118408203125));
    uint _2385 = _2158 + 9u;
    float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2198].w)) * _989) * 0.949999988079071044921875);
    float _2397 = _2396 * _2396;
    float _2398 = cbLight._m0[_2198].x + _927;
    float _2399 = cbLight._m0[_2198].y + _928;
    float _2400 = cbLight._m0[_2198].z + _929;
    float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
    float _2405 = _2404 * _2398;
    float _2406 = _2404 * _2399;
    float _2407 = _2404 * _2400;
    float _2408 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2198].xyz));
    float _4630 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2411 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2412 = dot(vec3(_867, _868, _869), vec3(_2405, _2406, _2407));
    float _4641 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
    float _2415 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2416 = dot(vec3(cbLight._m0[_2198].xyz), vec3(_2405, _2406, _2407));
    float _4652 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2420 = _2397 * _2397;
    float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
    float _2431 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2438 = 1.0 - _2397;
    float _2448 = (0.5 / (((_2326 * ((_2411 * _2438) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2438) + _2397) * _2411))) * _2411;
    float _4663 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2450 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
    float _2460 = (((((_2431 * _2348) + _1060) * cbLight._m0[_2385].x) * _2450) * _2181) + ((((cbLight._m0[_2297].x * _2150) * ((_2347 * _2348) + _1060)) * _2371) * _2194);
    float _2461 = (((((_2431 * _2350) + _1062) * cbLight._m0[_2385].y) * _2450) * _2181) + ((((cbLight._m0[_2297].y * _2151) * ((_2347 * _2350) + _1062)) * _2371) * _2194);
    float _2462 = (((((_2431 * _2351) + _1063) * cbLight._m0[_2385].z) * _2450) * _2181) + ((((cbLight._m0[_2297].z * _2152) * ((_2347 * _2351) + _1063)) * _2371) * _2194);
    float _2524;
    float _2526;
    float _2528;
    if (_2234)
    {
        _2524 = _2460;
        _2526 = _2461;
        _2528 = _2462;
    }
    else
    {
        uint _2530 = _2158 + 2u;
        uint _2534 = _2158 + 10u;
        float _2548 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2530].w)) * _989) * 0.949999988079071044921875);
        float _2549 = _2548 * _2548;
        float _2550 = cbLight._m0[_2530].x + _927;
        float _2551 = cbLight._m0[_2530].y + _928;
        float _2552 = cbLight._m0[_2530].z + _929;
        float _2556 = inversesqrt(dot(vec3(_2550, _2551, _2552), vec3(_2550, _2551, _2552)));
        float _2557 = _2556 * _2550;
        float _2558 = _2556 * _2551;
        float _2559 = _2556 * _2552;
        float _2560 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2530].xyz));
        float _4674 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
        float _2563 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2564 = dot(vec3(_867, _868, _869), vec3(_2557, _2558, _2559));
        float _4685 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
        float _2567 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2568 = dot(vec3(cbLight._m0[_2530].xyz), vec3(_2557, _2558, _2559));
        float _4696 = isnan(0.0) ? _2568 : (isnan(_2568) ? 0.0 : max(_2568, 0.0));
        float _2572 = _2549 * _2549;
        float _2576 = ((_2567 * _2567) * (_2572 + (-1.0))) + 1.0;
        float _2583 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2590 = 1.0 - _2549;
        float _2600 = (0.5 / (((_2326 * ((_2563 * _2590) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2590) + _2549) * _2563))) * _2563;
        float _4707 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2602 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2572 / ((_2576 * _2576) * 3.141590118408203125));
        float _2603 = isnan(1.0) ? _2173 : (isnan(_2173) ? 1.0 : min(_2173, 1.0));
        _2524 = (((((_2583 * _2348) + _1060) * cbLight._m0[_2534].x) * _2602) * _2603) + _2460;
        _2526 = (((((_2583 * _2350) + _1062) * cbLight._m0[_2534].y) * _2602) * _2603) + _2461;
        _2528 = (((((_2583 * _2351) + _1063) * cbLight._m0[_2534].z) * _2602) * _2603) + _2462;
    }
    float _2638;
    float _2640;
    float _2642;
    if (_2252)
    {
        _2638 = _2524;
        _2640 = _2526;
        _2642 = _2528;
    }
    else
    {
        uint _2649 = _2158 + 3u;
        uint _2653 = _2158 + 11u;
        float _2667 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2649].w)) * _989) * 0.949999988079071044921875);
        float _2668 = _2667 * _2667;
        float _2669 = cbLight._m0[_2649].x + _927;
        float _2670 = cbLight._m0[_2649].y + _928;
        float _2671 = cbLight._m0[_2649].z + _929;
        float _2675 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
        float _2676 = _2675 * _2669;
        float _2677 = _2675 * _2670;
        float _2678 = _2675 * _2671;
        float _2679 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2649].xyz));
        float _4723 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2682 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2683 = dot(vec3(_867, _868, _869), vec3(_2676, _2677, _2678));
        float _4734 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2686 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2687 = dot(vec3(cbLight._m0[_2649].xyz), vec3(_2676, _2677, _2678));
        float _4745 = isnan(0.0) ? _2687 : (isnan(_2687) ? 0.0 : max(_2687, 0.0));
        float _2691 = _2668 * _2668;
        float _2695 = ((_2686 * _2686) * (_2691 + (-1.0))) + 1.0;
        float _2702 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
        float _2709 = 1.0 - _2668;
        float _2719 = (0.5 / (((_2326 * ((_2682 * _2709) + _2668)) + 9.9999999392252902907785028219223e-09) + (((_2326 * _2709) + _2668) * _2682))) * _2682;
        float _4756 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
        float _2721 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2691 / ((_2695 * _2695) * 3.141590118408203125));
        float _2722 = isnan(1.0) ? _2174 : (isnan(_2174) ? 1.0 : min(_2174, 1.0));
        _2638 = (((((_2702 * _2348) + _1060) * cbLight._m0[_2653].x) * _2721) * _2722) + _2524;
        _2640 = (((((_2702 * _2350) + _1062) * cbLight._m0[_2653].y) * _2721) * _2722) + _2526;
        _2642 = (((((_2702 * _2351) + _1063) * cbLight._m0[_2653].z) * _2721) * _2722) + _2528;
    }
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    float _2867;
    if (_2156.y == 0u)
    {
        float _2797 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2798 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2797;
        float _2799 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2797;
        float _2800 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2797;
        uvec4 _2812 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2813 = _2812.x;
        uint _2824 = uint((float(_2812.y) * floor(float(uint(cbSceneParam._m0[85u].y * _948) / _2813))) + floor(float(uint(cbSceneParam._m0[85u].x * _947) / _2813)));
        float _2834 = (log2(_2800 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2835 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
        uint _2838 = uint(isnan(14.0) ? _2835 : (isnan(_2835) ? 14.0 : min(_2835, 14.0)));
        uvec4 _2843 = texelFetch(g_lightClusterGridBuffer, int(((_2838 << 2u) + (_2824 << 6u)) >> 2u));
        uint _2844 = _2843.x;
        uint _2845 = _2812.z;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        float _2982;
        float _2984;
        if (((((1u << ((_2845 >> 4u) & 15u)) + 4294967295u) & _2844) == 0u) || ((_2845 & 240u) == 0u))
        {
            _2974 = 0.0;
            _2976 = 0.0;
            _2978 = 0.0;
            _2980 = 0.0;
            _2982 = 0.0;
            _2984 = 0.0;
        }
        else
        {
            float _2975;
            float _2977;
            float _2979;
            float _2981;
            float _2983;
            float _2985;
            float _3135 = 0.0;
            float _3136 = 0.0;
            float _3137 = 0.0;
            float _3138 = 0.0;
            float _3139 = 0.0;
            float _3140 = 0.0;
            uint _3141 = 0u;
            uint _3150;
            bool _3151;
            for (;;)
            {
                _3150 = texelFetch(g_lightClassification, int((((_2838 << 5u) + (_2824 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                _3151 = _3150 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3151)
                {
                    frontier_phi_66_pred = _3135;
                    frontier_phi_66_pred_1 = _3140;
                    frontier_phi_66_pred_2 = _3139;
                    frontier_phi_66_pred_3 = _3138;
                    frontier_phi_66_pred_4 = _3137;
                    frontier_phi_66_pred_5 = _3136;
                }
                else
                {
                    float _3280;
                    float _3281;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    uint _3286;
                    _3280 = _3135;
                    _3281 = _3136;
                    _3282 = _3137;
                    _3283 = _3138;
                    _3284 = _3139;
                    _3285 = _3140;
                    _3286 = _3150;
                    float _3207;
                    float _3208;
                    float _3209;
                    float _3210;
                    float _3211;
                    float _3212;
                    for (;;)
                    {
                        uint _3290 = uint(findLSB(_3286)) + (_3141 << 5u);
                        uint _3287 = (_3286 + 4294967295u) & _3286;
                        uint _3292 = _3290 * 48u;
                        vec4 _3306 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3312 = (_3290 * 48u) + 4u;
                        vec4 _3325 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3312)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3312 + 3u)).x));
                        uint _3331 = (_3290 * 48u) + 8u;
                        vec3 _3342 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x));
                        float _3346 = _3306.x - _2798;
                        float _3347 = _3306.y - _2799;
                        float _3348 = _3306.z - _2800;
                        float _3349 = dot(vec3(_3346, _3347, _3348), vec3(_3346, _3347, _3348));
                        float _3352 = inversesqrt(_3349);
                        float _3353 = _3352 * _3346;
                        float _3354 = _3352 * _3347;
                        float _3355 = _3352 * _3348;
                        float _3356 = dot(vec3(_970, _973, _976), vec3(_3353, _3354, _3355));
                        float _3361 = 1.0 - (_3349 * _3306.w);
                        float _4782 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                        float _3362 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3363 = sqrt(_3349) * _3325.w;
                        float _3366 = 1.39999997615814208984375 / (_3363 + 1.39999997615814208984375);
                        float _3367 = _3366 * _3366;
                        float _3370 = ((1.0 - _3367) * _3356) + _3367;
                        float _3373 = _3363 * _3363;
                        float _3377 = ((isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0))) * _3362) / ((_3373 * 0.699999988079071044921875) + 1.0);
                        float _3381 = (-0.0) - _2798;
                        float _3382 = (-0.0) - _2799;
                        float _3383 = (-0.0) - _2800;
                        float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                        float _3388 = _3387 * _3381;
                        float _3389 = _3387 * _3382;
                        float _3390 = _3387 * _3383;
                        float _3398 = exp2(log2(1.0 / ((_3373 * 3.5) + 5.0)) * 0.25);
                        float _3399 = 1.0 - _1091;
                        float _3406 = sqrt(1.0 - ((1.0 - (_3399 * _3399)) * (1.0 - (_3398 * _3398))));
                        float _3407 = _3406 * _3406;
                        float _3408 = _3407 * _3407;
                        float _3409 = _3388 + _3353;
                        float _3410 = _3389 + _3354;
                        float _3411 = _3390 + _3355;
                        float _3415 = inversesqrt(dot(vec3(_3409, _3410, _3411), vec3(_3409, _3410, _3411)));
                        float _3419 = dot(vec3(_970, _973, _976), vec3(_3388, _3389, _3390));
                        float _4798 = isnan(0.0) ? _3419 : (isnan(_3419) ? 0.0 : max(_3419, 0.0));
                        float _3422 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3423 = dot(vec3(_970, _973, _976), vec3(_3415 * _3409, _3415 * _3410, _3415 * _3411));
                        float _4809 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3426 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3430 = ((_3426 * _3426) * (_3408 + (-1.0))) + 1.0;
                        float _3431 = _3366 * _3407;
                        float _3432 = _3431 * _3431;
                        float _3435 = ((1.0 - _3432) * _3356) + _3432;
                        float _4820 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3436 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3437 = 1.0 - _3407;
                        float _3447 = (0.5 / (((_3436 * ((_3422 * _3437) + _3407)) + 9.9999999392252902907785028219223e-09) + (((_3436 * _3437) + _3407) * _3422))) * _3436;
                        float _4831 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3458 = (((_3408 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3430 * _3430) * ((_3373 * 2.1991131305694580078125) + 3.141590118408203125))) * _3362;
                        _3210 = (_3377 * _3325.x) + _3283;
                        _3211 = (_3377 * _3325.y) + _3284;
                        _3212 = (_3377 * _3325.z) + _3285;
                        _3207 = (_3458 * _3342.x) + _3280;
                        _3208 = (_3458 * _3342.y) + _3281;
                        _3209 = (_3458 * _3342.z) + _3282;
                        if (_3287 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3280 = _3207;
                            _3281 = _3208;
                            _3282 = _3209;
                            _3283 = _3210;
                            _3284 = _3211;
                            _3285 = _3212;
                            _3286 = _3287;
                        }
                    }
                    frontier_phi_66_pred = _3207;
                    frontier_phi_66_pred_1 = _3212;
                    frontier_phi_66_pred_2 = _3211;
                    frontier_phi_66_pred_3 = _3210;
                    frontier_phi_66_pred_4 = _3209;
                    frontier_phi_66_pred_5 = _3208;
                }
                _2975 = frontier_phi_66_pred;
                _2985 = frontier_phi_66_pred_1;
                _2983 = frontier_phi_66_pred_2;
                _2981 = frontier_phi_66_pred_3;
                _2979 = frontier_phi_66_pred_4;
                _2977 = frontier_phi_66_pred_5;
                uint _3142 = _3141 + 1u;
                if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3135 = _2975;
                    _3136 = _2977;
                    _3137 = _2979;
                    _3138 = _2981;
                    _3139 = _2983;
                    _3140 = _2985;
                    _3141 = _3142;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2974 = _2975;
            _2976 = _2977;
            _2978 = _2979;
            _2980 = _2981;
            _2982 = _2983;
            _2984 = _2985;
        }
        uvec4 _2988 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2989 = _2988.z;
        uint _2991 = (_2989 >> 8u) & 15u;
        float _3103;
        float _3105;
        float _3107;
        float _3109;
        float _3111;
        float _3113;
        if (((4294967295u << _2991) & _2844) == 0u)
        {
            _3103 = _2974;
            _3105 = _2976;
            _3107 = _2978;
            _3109 = _2980;
            _3111 = _2982;
            _3113 = _2984;
        }
        else
        {
            float _3128 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
            float _3129 = _3128 * _2798;
            float _3130 = _3128 * _2799;
            float _3131 = _3128 * _2800;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2991 < ((_2989 >> 12u) & 15u))
            {
                float _3104;
                float _3106;
                float _3108;
                float _3110;
                float _3112;
                float _3114;
                float _3263 = _2974;
                float _3264 = _2976;
                float _3265 = _2978;
                float _3266 = _2980;
                float _3267 = _2982;
                float _3268 = _2984;
                uint _3269 = _2991;
                uint _3278;
                bool _3279;
                for (;;)
                {
                    _3278 = texelFetch(g_lightClassification, int((((_2838 << 5u) + (_2824 << 9u)) + (_3269 << 2u)) >> 2u)).x;
                    _3279 = _3278 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3279)
                    {
                        frontier_phi_77_pred = _3268;
                        frontier_phi_77_pred_1 = _3267;
                        frontier_phi_77_pred_2 = _3266;
                        frontier_phi_77_pred_3 = _3265;
                        frontier_phi_77_pred_4 = _3264;
                        frontier_phi_77_pred_5 = _3263;
                    }
                    else
                    {
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3766;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3485 = _3263;
                        float _3486 = _3264;
                        float _3487 = _3265;
                        float _3488 = _3266;
                        float _3489 = _3267;
                        float _3490 = _3268;
                        uint _3491 = _3278;
                        uint _3492;
                        vec4 _3517;
                        float _3518;
                        vec4 _3533;
                        vec3 _3545;
                        vec4 _3561;
                        vec4 _3576;
                        float _3622;
                        bool _3623;
                        for (;;)
                        {
                            uint _3502 = ((_3269 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3491));
                            _3492 = (_3491 + 4294967295u) & _3491;
                            uint _3504 = _3502 * 40u;
                            _3517 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3504)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3504 + 3u)).x));
                            _3518 = _3517.w;
                            uint _3520 = (_3502 * 40u) + 4u;
                            _3533 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3520)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3520 + 3u)).x));
                            uint _3535 = (_3502 * 40u) + 8u;
                            _3545 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3535)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3535 + 2u)).x));
                            uint _3548 = (_3502 * 40u) + 16u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3502 * 40u) + 20u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3578 = (_3502 * 40u) + 24u;
                            vec4 _3591 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3578)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3578 + 3u)).x));
                            uint _3597 = (_3502 * 40u) + 28u;
                            vec4 _3610 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3597 + 3u)).x));
                            _3622 = fma(_2800, _3610.z, fma(_2799, _3610.y, _3610.x * _2798)) + _3610.w;
                            _3623 = !((fma(_2800, _3591.z, fma(_2799, _3591.y, _3591.x * _2798)) + _3591.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3623)
                            {
                                float _3650 = _3517.x - _2798;
                                float _3651 = _3517.y - _2799;
                                float _3652 = _3517.z - _2800;
                                float _3653 = dot(vec3(_3650, _3651, _3652), vec3(_3650, _3651, _3652));
                                float _3656 = inversesqrt(_3653);
                                float _3657 = _3656 * _3650;
                                float _3658 = _3656 * _3651;
                                float _3659 = _3656 * _3652;
                                float _3663 = 1.0 - (_3653 / (_3518 * _3518));
                                float _4842 = isnan(0.0) ? _3663 : (isnan(_3663) ? 0.0 : max(_3663, 0.0));
                                float _3664 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3668 = sqrt(_3653) * _3533.w;
                                float _3670 = 1.39999997615814208984375 / (_3668 + 1.39999997615814208984375);
                                float _3671 = _3670 * _3670;
                                float _3674 = ((1.0 - _3671) * dot(vec3(_3657, _3658, _3659), vec3(_970, _973, _976))) + _3671;
                                float _3677 = _3668 * _3668;
                                float _3681 = (fma(_2800, _3561.z, fma(_2799, _3561.y, _3561.x * _2798)) + _3561.w) / _3622;
                                float _3682 = (fma(_2800, _3576.z, fma(_2799, _3576.y, _3576.x * _2798)) + _3576.w) / _3622;
                                float _3686 = 1.0 - dot(vec2(_3681, _3682), vec2(_3681, _3682));
                                float _4858 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                                float _3687 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3688 = _3687 * (((isnan(0.0) ? _3674 : (isnan(_3674) ? 0.0 : max(_3674, 0.0))) * _3664) / ((_3677 * 0.699999988079071044921875) + 1.0));
                                float _3700 = exp2(log2(1.0 / ((_3677 * 3.5) + 5.0)) * 0.25);
                                float _3701 = 1.0 - _1091;
                                float _3708 = sqrt(1.0 - ((1.0 - (_3701 * _3701)) * (1.0 - (_3700 * _3700))));
                                float _3709 = _3708 * _3708;
                                float _3710 = _3709 * _3709;
                                float _3711 = _3657 - _3129;
                                float _3712 = _3658 - _3130;
                                float _3713 = _3659 - _3131;
                                float _3717 = inversesqrt(dot(vec3(_3711, _3712, _3713), vec3(_3711, _3712, _3713)));
                                float _3721 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3129, (-0.0) - _3130, (-0.0) - _3131));
                                float _4869 = isnan(0.0) ? _3721 : (isnan(_3721) ? 0.0 : max(_3721, 0.0));
                                float _3724 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3725 = dot(vec3(_970, _973, _976), vec3(_3717 * _3711, _3717 * _3712, _3717 * _3713));
                                float _4880 = isnan(0.0) ? _3725 : (isnan(_3725) ? 0.0 : max(_3725, 0.0));
                                float _3728 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3732 = ((_3728 * _3728) * (_3710 + (-1.0))) + 1.0;
                                float _3733 = _3670 * _3709;
                                float _3734 = _3733 * _3733;
                                float _3740 = ((1.0 - _3734) * dot(vec3(_970, _973, _976), vec3(_3657, _3658, _3659))) + _3734;
                                float _4891 = isnan(0.0) ? _3740 : (isnan(_3740) ? 0.0 : max(_3740, 0.0));
                                float _3741 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3742 = 1.0 - _3709;
                                float _3752 = (0.5 / (((_3741 * ((_3724 * _3742) + _3709)) + 9.9999999392252902907785028219223e-09) + (((_3741 * _3742) + _3709) * _3724))) * _3741;
                                float _4902 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3762 = (_3687 * _3664) * (((_3710 * 3.1415927410125732421875) * (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) / ((_3732 * _3732) * ((_3677 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3688 * _3533.y;
                                frontier_phi_83_pred_1 = _3688 * _3533.x;
                                frontier_phi_83_pred_2 = _3762 * _3545.z;
                                frontier_phi_83_pred_3 = _3762 * _3545.y;
                                frontier_phi_83_pred_4 = _3762 * _3545.x;
                                frontier_phi_83_pred_5 = _3688 * _3533.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3770 = frontier_phi_83_pred;
                            _3769 = frontier_phi_83_pred_1;
                            _3768 = frontier_phi_83_pred_2;
                            _3767 = frontier_phi_83_pred_3;
                            _3766 = frontier_phi_83_pred_4;
                            _3771 = frontier_phi_83_pred_5;
                            _3475 = _3769 + _3488;
                            _3476 = _3770 + _3489;
                            _3477 = _3771 + _3490;
                            _3472 = _3766 + _3485;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            if (_3492 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3485 = _3472;
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3492;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3477;
                        frontier_phi_77_pred_1 = _3476;
                        frontier_phi_77_pred_2 = _3475;
                        frontier_phi_77_pred_3 = _3474;
                        frontier_phi_77_pred_4 = _3473;
                        frontier_phi_77_pred_5 = _3472;
                    }
                    _3114 = frontier_phi_77_pred;
                    _3112 = frontier_phi_77_pred_1;
                    _3110 = frontier_phi_77_pred_2;
                    _3108 = frontier_phi_77_pred_3;
                    _3106 = frontier_phi_77_pred_4;
                    _3104 = frontier_phi_77_pred_5;
                    uint _3270 = _3269 + 1u;
                    if (_3270 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3263 = _3104;
                        _3264 = _3106;
                        _3265 = _3108;
                        _3266 = _3110;
                        _3267 = _3112;
                        _3268 = _3114;
                        _3269 = _3270;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3108;
                frontier_phi_58_59_ladder_1 = _3114;
                frontier_phi_58_59_ladder_2 = _3112;
                frontier_phi_58_59_ladder_3 = _3110;
                frontier_phi_58_59_ladder_4 = _3106;
                frontier_phi_58_59_ladder_5 = _3104;
            }
            else
            {
                frontier_phi_58_59_ladder = _2978;
                frontier_phi_58_59_ladder_1 = _2984;
                frontier_phi_58_59_ladder_2 = _2982;
                frontier_phi_58_59_ladder_3 = _2980;
                frontier_phi_58_59_ladder_4 = _2976;
                frontier_phi_58_59_ladder_5 = _2974;
            }
            _3103 = frontier_phi_58_59_ladder_5;
            _3105 = frontier_phi_58_59_ladder_4;
            _3107 = frontier_phi_58_59_ladder;
            _3109 = frontier_phi_58_59_ladder_3;
            _3111 = frontier_phi_58_59_ladder_2;
            _3113 = frontier_phi_58_59_ladder_1;
        }
        float _3118 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _2857 = (_3118 * _3109) + _2290;
        _2859 = (_3118 * _3111) + _2292;
        _2861 = (_3118 * _3113) + _2294;
        _2863 = ((_3103 * _1060) * _3118) + _2638;
        _2865 = ((_3105 * _1062) * _3118) + _2640;
        _2867 = ((_3107 * _1063) * _3118) + _2642;
    }
    else
    {
        _2857 = _2290;
        _2859 = _2292;
        _2861 = _2294;
        _2863 = _2638;
        _2865 = _2640;
        _2867 = _2642;
    }
    uint _2873 = _1004 + uint(cbMatDynParam._m0[0u].w);
    float _2879 = cbInstanceData._m0[_2873].x * ((((cbMtdParam._m0[22u].x * _782.x) * cbMtdParam._m0[32u].x) * _803) + _570);
    float _2880 = cbInstanceData._m0[_2873].y * ((((cbMtdParam._m0[22u].y * _782.y) * cbMtdParam._m0[32u].x) * _803) + _571);
    float _2881 = cbInstanceData._m0[_2873].z * ((((cbMtdParam._m0[22u].z * _782.z) * cbMtdParam._m0[32u].x) * _803) + _572);
    float _4918 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _4929 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _4940 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _2898 = (((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2857 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1075))) + ((_2863 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + _2879;
    float _2900 = (_2880 + ((_2865 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2859 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1075)));
    float _2902 = (_2881 + ((_2867 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2861 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1075)));
    float _2903 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
    float _2904 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
    float _2905 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
    float _2911 = cbMtdParam._m0[2u].x * _2879;
    float _2912 = cbMtdParam._m0[2u].y * _2880;
    float _2913 = cbMtdParam._m0[2u].z * _2881;
    float _4966 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2915 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
    uint _2916 = _1002 + 6u;
    float _2924 = _947 / cbSceneParam._m0[86u].x;
    float _2925 = _948 / cbSceneParam._m0[86u].y;
    vec4 _2939 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, (log2((isnan(cbSceneParam._m0[77u].w) ? _890 : (isnan(_890) ? cbSceneParam._m0[77u].w : min(_890, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2941 = _2939.x;
    float _2942 = _2939.y;
    float _2943 = _2939.z;
    float _2944 = _2939.w;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    if (_890 > cbSceneParam._m0[78u].w)
    {
        float _2999 = isnan(_890) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _890 : min(cbSceneParam._m0[80u].w, _890));
        float _3000 = _2999 / _890;
        float _3011 = _3000 * _920;
        float _3012 = _921 * _3000;
        float _3013 = (-0.0) - _3012;
        float _3014 = _3000 * _922;
        float _3016 = (cbSceneParam._m0[77u].w * _3013) / _2999;
        float _3017 = _3016 + cbSceneParam._m0[79u].w;
        float _3018 = cbSceneParam._m0[79u].w - _3012;
        float _3024 = sqrt(((_3011 * _3011) + (_3012 * _3012)) + (_3014 * _3014));
        float _3027 = (1.0 - (cbSceneParam._m0[77u].w / _2999)) * _3024;
        float _3032 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3034 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3220;
        if (abs((_3013 - _3016) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3220 = ((((_3017 > 0.0) ? exp2(_3032 * _3017) : (2.0 - exp2(_3034 * _3017))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3027;
        }
        else
        {
            float _3164 = 1.0 / cbSceneParam._m0[80u].x;
            float _3165 = isnan(_3018) ? _3017 : (isnan(_3017) ? _3018 : max(_3017, _3018));
            float _3166 = isnan(_3018) ? _3017 : (isnan(_3017) ? _3018 : min(_3017, _3018));
            float _3175 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : min(_3165, 0.0));
            float _3176 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : min(_3166, 0.0));
            _3220 = ((abs(_3024 / _3013) * cbSceneParam._m0[80u].y) * ((((_3175 - _3176) * 2.0) - ((exp2(_3032 * (isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0)))) - exp2(_3032 * (isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0))))) * _3164)) - ((exp2(_3034 * _3175) - exp2(_3034 * _3176)) * _3164))) + (_3027 * cbSceneParam._m0[80u].z);
        }
        vec4 _3222 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2924, _2925, 1.0), 0.0);
        float _3231 = exp2((_3220 * (-1.44269502162933349609375)) * (1.0 - _3222.w));
        float _3232 = log2(_3231);
        float _3248 = log2(_2944);
        _3036 = (exp2(_3248 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3232 * cbSceneParam._m0[78u].x)) * _3222.x) / cbSceneParam._m0[78u].x)) + _2941;
        _3038 = (exp2(_3248 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3232 * cbSceneParam._m0[78u].y)) * _3222.y) / cbSceneParam._m0[78u].y)) + _2942;
        _3040 = (exp2(_3248 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3232 * cbSceneParam._m0[78u].z)) * _3222.z) / cbSceneParam._m0[78u].z)) + _2943;
        _3042 = _3231 * _2944;
    }
    else
    {
        _3036 = _2941;
        _3038 = _2942;
        _3040 = _2943;
        _3042 = _2944;
    }
    bool _3258;
    vec4 _3052;
    vec4 _3074;
    float _3076;
    float _3080;
    float _3081;
    float _3082;
    float _3085;
    float _3088;
    float _3091;
    float _3092;
    bool _3102;
    for (;;)
    {
        _3052 = cbMatDynParam._m0[0u];
        float _3054 = roundEven(_3052.y);
        bool _3055 = _3054 == 3.0;
        float _3056 = log2(_3042);
        float _3060 = exp2(_3056 * cbSceneParam._m0[78u].x);
        float _3061 = exp2(_3056 * cbSceneParam._m0[78u].y);
        float _3062 = exp2(_3056 * cbSceneParam._m0[78u].z);
        float _3063 = _3060 * _2903;
        float _3064 = _3061 * _2904;
        float _3065 = _3062 * _2905;
        float _3072 = _936 + (-0.5);
        _3074 = cbMtdParam._m0[1u];
        _3076 = _3074.y * _3072;
        float _3079 = (_3054 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3080 = _3079 * (_3055 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3036)));
        _3081 = _3079 * (_3055 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3038)));
        _3082 = _3079 * (_3055 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3040)));
        _3085 = ((_2911 * _2915) * _3060) * _3079;
        _3088 = ((_2912 * _2915) * _3061) * _3079;
        _3091 = ((_2913 * _2915) * _3062) * _3079;
        _3092 = _3072 * 0.999000012874603271484375;
        _3102 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3102)
        {
            if ((cbInstanceData._m0[_1002 + 7u].x + _3092) < 0.5)
            {
                _3258 = true;
                break;
            }
        }
        uint _3199 = _1004 + uint(_3052.w);
        if ((cbInstanceData._m0[_3199].w < 1.0) && ((cbInstanceData._m0[_3199].w + _3092) < 0.5))
        {
            _3258 = true;
            break;
        }
        if ((_3076 + 1.0) < _3074.x)
        {
            _3258 = true;
            break;
        }
        _3258 = false;
        break;
    }
    float _3463;
    if (_3258)
    {
        discard_state = true;
        _3463 = 0.0;
    }
    else
    {
        _3463 = cbInstanceData._m0[_2916].w;
    }
    SV_Target.x = _3080;
    SV_Target.y = _3081;
    SV_Target.z = _3082;
    SV_Target.w = _3463;
    SV_Target_1.x = _3085;
    SV_Target_1.y = _3088;
    SV_Target_1.z = _3091;
    SV_Target_1.w = cbInstanceData._m0[_2916].w;
    discard_exit();
}


