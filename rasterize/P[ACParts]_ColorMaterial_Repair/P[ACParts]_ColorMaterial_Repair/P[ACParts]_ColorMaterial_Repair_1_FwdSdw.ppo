#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1428;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _274 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _281 = log2(0.0);
    float _283 = exp2(_281 * cbMtdParam._m0[31u].z);
    float _287 = _283 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _283);
    float _288 = _283 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _283);
    float _289 = _283 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _283);
    float _290 = isnan(0.0) ? _287 : (isnan(_287) ? 0.0 : max(_287, 0.0));
    float _291 = isnan(0.0) ? _288 : (isnan(_288) ? 0.0 : max(_288, 0.0));
    float _292 = isnan(0.0) ? _289 : (isnan(_289) ? 0.0 : max(_289, 0.0));
    float _293 = isnan(1.0) ? _290 : (isnan(_290) ? 1.0 : min(_290, 1.0));
    float _295 = isnan(1.0) ? _291 : (isnan(_291) ? 1.0 : min(_291, 1.0));
    float _296 = isnan(1.0) ? _292 : (isnan(_292) ? 1.0 : min(_292, 1.0));
    vec4 _312 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _316 = _312.z;
    float _317 = _312.w;
    float _318 = 1.0 - _317;
    float _325 = exp2(log2((1.0 - (_318 * _316)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    float _339 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_318 * _318) * _316))) * cbMtdParam._m0[34u].w);
    float _340 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    vec4 _354 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _357 = _354.y;
    float _360 = (_357 * ((isnan(1.0) ? _340 : (isnan(_340) ? 1.0 : min(_340, 1.0))) - _317)) + _317;
    vec4 _372 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _384 = (_354.x + (-0.02500000037252902984619140625)) * 8.0;
    float _386 = roundEven(_384);
    float _387 = cbMtdParam._m0[10u].x * _372.x;
    float _388 = cbMtdParam._m0[10u].y * _372.y;
    float _389 = cbMtdParam._m0[10u].z * _372.z;
    vec4 _401 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _421 = (((cbMtdParam._m0[9u].x * _401.x) - _387) * _360) + _387;
    float _422 = (((cbMtdParam._m0[9u].y * _401.y) - _388) * _360) + _388;
    float _423 = (((cbMtdParam._m0[9u].z * _401.z) - _389) * _360) + _389;
    vec4 _435 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _455 = (((cbMtdParam._m0[20u].x * _435.x) - _421) * _327) + _421;
    float _456 = (((cbMtdParam._m0[20u].y * _435.y) - _422) * _327) + _422;
    float _457 = (((cbMtdParam._m0[20u].z * _435.z) - _423) * _327) + _423;
    vec4 _470 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[24u].x;
    _202[0u] = cbMtdParam._m0[24u].y;
    _203[0u] = cbMtdParam._m0[24u].z;
    _201[1u] = cbMtdParam._m0[25u].x;
    _202[1u] = cbMtdParam._m0[25u].y;
    _203[1u] = cbMtdParam._m0[25u].z;
    _201[2u] = cbMtdParam._m0[26u].x;
    _202[2u] = cbMtdParam._m0[26u].y;
    _203[2u] = cbMtdParam._m0[26u].z;
    _201[3u] = cbMtdParam._m0[27u].x;
    _202[3u] = cbMtdParam._m0[27u].y;
    _203[3u] = cbMtdParam._m0[27u].z;
    _201[4u] = cbMtdParam._m0[28u].x;
    _202[4u] = cbMtdParam._m0[28u].y;
    _203[4u] = cbMtdParam._m0[28u].z;
    _201[5u] = cbMtdParam._m0[29u].x;
    _202[5u] = cbMtdParam._m0[29u].y;
    _203[5u] = cbMtdParam._m0[29u].z;
    float _553 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    uint _556 = uint(int(isnan(5.0) ? _553 : (isnan(_553) ? 5.0 : min(_553, 5.0))));
    float _563 = _201[_556] * _357;
    float _564 = _202[_556] * _357;
    float _565 = _203[_556] * _357;
    float _566 = _563 + ((_274.x * 4.5) * ((((cbMtdParam._m0[30u].x * _470.x) - _455) * _293) + _455));
    float _567 = _564 + ((_274.y * 4.5) * ((((cbMtdParam._m0[30u].y * _470.y) - _456) * _295) + _456));
    float _568 = _565 + ((_274.z * 4.5) * ((((cbMtdParam._m0[30u].z * _470.z) - _457) * _296) + _457));
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[35u].y;
    _197[0u] = cbMtdParam._m0[35u].z;
    _196[1u] = cbMtdParam._m0[36u].w;
    _197[1u] = cbMtdParam._m0[37u].x;
    _196[2u] = cbMtdParam._m0[37u].y;
    _197[2u] = cbMtdParam._m0[37u].z;
    _196[3u] = cbMtdParam._m0[37u].w;
    _197[3u] = cbMtdParam._m0[38u].x;
    _196[4u] = cbMtdParam._m0[38u].y;
    _197[4u] = cbMtdParam._m0[38u].z;
    float _599 = roundEven(5.0 - _384);
    float _600 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _601 = isnan(4.0) ? _600 : (isnan(_600) ? 4.0 : min(_600, 4.0));
    float _603 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    uint _605 = uint(int(isnan(4.0) ? _603 : (isnan(_603) ? 4.0 : min(_603, 4.0))));
    float _617 = ((cbMtdParam._m0[39u].z - _197[_605]) * _360) + _197[_605];
    float _625 = ((cbMtdParam._m0[40u].x - _617) * _327) + _617;
    float _630 = ((cbMtdParam._m0[40u].z - _625) * _293) + _625;
    vec4 _647 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _652 = _647.z + _196[_605];
    vec4 _664 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _672 = (((cbMtdParam._m0[39u].y - _652) + _664.z) * _360) + _652;
    vec4 _685 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _693 = (((cbMtdParam._m0[39u].w - _672) + _685.z) * _327) + _672;
    float _699 = ((((_316 * 2.0) * _693) - _693) * cbMtdParam._m0[33u].w) + _693;
    vec4 _712 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _720 = (((_712.z + cbMtdParam._m0[40u].y) - _699) * _296) + _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _778 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_747 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_751 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _793 = (-0.0) - ((_751 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _797 = (_751 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _798 = isnan(_797) ? _793 : (isnan(_793) ? _797 : min(_793, _797));
    float _4157 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _799 = isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0));
    float _822 = ((_664.x - _649) * _360) + _649;
    float _823 = ((_664.y - _650) * _360) + _650;
    float _828 = ((_685.x - _822) * _327) + _822;
    float _829 = ((_685.y - _823) * _327) + _823;
    float _838 = ((((_712.x - _828) * _293) + _828) * 2.0) + (-1.0);
    float _839 = ((((_712.y - _829) * _295) + _829) * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _4168 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _845 = sqrt(1.0 - (isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0))));
    float _848 = (cbMtdParam._m0[34u].x * ((_312.x * 2.0) + (-1.0))) + _838;
    float _849 = (cbMtdParam._m0[34u].x * ((_312.y * 2.0) + (-1.0))) + _839;
    float _852 = fma(_845, _243 * NORMAL.x, fma(_849, _250 * TANGENT.x, (_236 * _228) * _848));
    float _855 = fma(_845, _243 * NORMAL.y, fma(_849, _250 * TANGENT.y, (_236 * _229) * _848));
    float _858 = fma(_845, _243 * NORMAL.z, fma(_849, _250 * TANGENT.z, (_236 * _230) * _848));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _4179 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _866 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _4190 = isnan(0.0) ? _566 : (isnan(_566) ? 0.0 : max(_566, 0.0));
    float _4201 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _4212 = isnan(0.0) ? _568 : (isnan(_568) ? 0.0 : max(_568, 0.0));
    float _4223 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _870 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _916 = cbSceneParam._m0[71u].x - (_747 / _906);
    float _917 = cbSceneParam._m0[71u].y - (_751 / _906);
    float _918 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _906);
    float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
    float _923 = _916 * _922;
    float _924 = _917 * _922;
    float _925 = _918 * _922;
    float _931 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _932 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _934 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _936 = _934.w;
    float _954 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _957 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _960 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    vec4 _962 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _973 = (((_962.y - _866) + (_962.w * _866)) * cbMtdParam._m0[3u].x) + _866;
    uint _986 = uint(roundEven(NORMAL.w)) * 13u;
    uint _988 = _986 + 9u;
    uint _989 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _995 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0)))) * cbInstanceData._m0[_989].x;
    float _996 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) * cbInstanceData._m0[_989].y;
    float _997 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0)))) * cbInstanceData._m0[_989].z;
    float _4234 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
    float _4245 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
    float _4256 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
    vec4 _1001 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1006 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1017 = (((_1006.x - _870) + (_1006.w * _870)) * cbMtdParam._m0[3u].x) + _870;
    float _1030 = (cbMtdParam._m0[3u].x * (((_998 * _936) - _998) + _1001.x)) + _998;
    float _1031 = (cbMtdParam._m0[3u].x * (((_999 * _936) - _999) + _1001.y)) + _999;
    float _1032 = (cbMtdParam._m0[3u].x * (((_1000 * _936) - _1000) + _1001.z)) + _1000;
    float _1033 = 1.0 - _1017;
    float _1034 = _1033 * _1030;
    float _1035 = _1033 * _1031;
    float _1036 = _1033 * _1032;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _1017;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _1017;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _1017;
    float _1044 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    vec4 _1056 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _931, cbSceneParam._m0[86u].y * _932));
    float _1059 = _1056.x * TEXCOORD_5.w;
    float _1060 = dot(vec3(_863, _864, _865), vec3(_923, _924, _925));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _863) - _923;
    float _1068 = (_1063 * _864) - _924;
    float _1069 = (_1063 * _865) - _925;
    float _1073 = abs(dot(vec3(_923, _924, _925), vec3(_863, _864, _865)));
    float _4267 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_973);
    float _1086 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1092 = (1.0 - _1086) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1093 = _1086 * _1075;
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1427;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1154 = fma(_1129, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121));
        float _1158 = fma(_1129, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121));
        float _1162 = fma(_1129, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121));
        float _1186 = _1121 + _863;
        float _1187 = _1125 + _864;
        float _1188 = _1129 + _865;
        float _1198 = fma(_1188, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186)) - _1154;
        float _1199 = fma(_1188, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186)) - _1158;
        float _1200 = fma(_1188, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186)) - _1162;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1216 = ((_1204 * _1198) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1154 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1204 * _1199) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1158 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1200) / cbModelParam._m0[34u].z) + ((((((_1162 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1255 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1221.x + (-0.5));
        float _1257 = _1255 * (_1221.y + (-0.5));
        float _1258 = _1255 * (_1221.z + (-0.5));
        float _1265 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1228.x + (-0.5));
        float _1267 = _1265 * (_1228.y + (-0.5));
        float _1268 = _1265 * (_1228.z + (-0.5));
        float _1275 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1235.x + (-0.5));
        float _1277 = _1275 * (_1235.y + (-0.5));
        float _1278 = _1275 * (_1235.z + (-0.5));
        float _1285 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1242.x + (-0.5));
        float _1287 = _1285 * (_1242.y + (-0.5));
        float _1288 = _1285 * (_1242.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1309 = (dot(vec3(_863, _864, _865), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4293 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1319 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4304 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4315 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4315 : (isnan(_4315) ? 1.0 : min(_4315, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0))) * (_1321 + 1.0))) + _1326) * _1289;
        float _1336 = _1257 * 0.5;
        float _1337 = _1267 * 0.5;
        float _1338 = _1277 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_863, _864, _865), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4326 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4337 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4348 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4326 : (isnan(_4326) ? 1.0 : min(_4326, 1.0))) * (_1363 + 1.0))) + _1368) * _1290;
        float _1378 = _1258 * 0.5;
        float _1379 = _1268 * 0.5;
        float _1380 = _1278 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_863, _864, _865), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4359 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4370 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4381 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * (_1405 + 1.0))) + _1410) * _1291;
        _1427 = _1258;
        _1429 = _1257;
        _1430 = _1256;
        _1431 = _1268;
        _1432 = _1267;
        _1433 = _1266;
        _1434 = _1278;
        _1435 = _1277;
        _1436 = _1276;
        _1437 = _1291;
        _1438 = _1290;
        _1439 = _1289;
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1428;
        _1429 = _1428;
        _1430 = _1428;
        _1431 = _1428;
        _1432 = _1428;
        _1433 = _1428;
        _1434 = _1428;
        _1435 = _1428;
        _1436 = _1428;
        _1437 = _1428;
        _1438 = _1428;
        _1439 = _1428;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1465 = fma(_1129, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121));
        float _1469 = fma(_1129, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121));
        float _1473 = fma(_1129, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121));
        float _1495 = _1121 + _863;
        float _1496 = _1125 + _864;
        float _1497 = _1129 + _865;
        float _1507 = fma(_1497, cbModelParam._m0[30u].z, fma(_1496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1495)) - _1465;
        float _1508 = fma(_1497, cbModelParam._m0[31u].z, fma(_1496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1495)) - _1469;
        float _1509 = fma(_1497, cbModelParam._m0[32u].z, fma(_1496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1495)) - _1473;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1525 = ((_1513 * _1507) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1465 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1513 * _1508) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1469 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1509) / cbModelParam._m0[35u].z) + ((((((_1473 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        float _1562 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1529.x + (-0.5));
        float _1564 = _1562 * (_1529.y + (-0.5));
        float _1565 = _1562 * (_1529.z + (-0.5));
        float _1572 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1536.x + (-0.5));
        float _1574 = _1572 * (_1536.y + (-0.5));
        float _1575 = _1572 * (_1536.z + (-0.5));
        float _1582 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1543.x + (-0.5));
        float _1584 = _1582 * (_1543.y + (-0.5));
        float _1585 = _1582 * (_1543.z + (-0.5));
        float _1592 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1550.x + (-0.5));
        float _1594 = _1592 * (_1550.y + (-0.5));
        float _1595 = _1592 * (_1550.z + (-0.5));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = _1563 * 0.5;
        float _1600 = _1573 * 0.5;
        float _1601 = _1583 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_863, _864, _865), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4444 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1626 + 1.0))) + _1631) * _1596;
        float _1641 = _1564 * 0.5;
        float _1642 = _1574 * 0.5;
        float _1643 = _1584 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_863, _864, _865), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4455 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4466 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4477 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_1668 + 1.0))) + _1673) * _1597;
        float _1683 = _1565 * 0.5;
        float _1684 = _1575 * 0.5;
        float _1685 = _1585 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_863, _864, _865), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4488 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4499 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4510 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * (_1710 + 1.0))) + _1715) * _1598;
        _1732 = _1565;
        _1733 = _1564;
        _1734 = _1563;
        _1735 = _1575;
        _1736 = _1574;
        _1737 = _1573;
        _1738 = _1585;
        _1739 = _1584;
        _1740 = _1583;
        _1741 = _1598;
        _1742 = _1597;
        _1743 = _1596;
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
    }
    else
    {
        _1732 = _1428;
        _1733 = _1428;
        _1734 = _1428;
        _1735 = _1428;
        _1736 = _1428;
        _1737 = _1428;
        _1738 = _1428;
        _1739 = _1428;
        _1740 = _1428;
        _1741 = _1428;
        _1742 = _1428;
        _1743 = _1428;
        _1744 = 0.0;
        _1745 = 0.0;
        _1746 = 0.0;
    }
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1440)) + _1440;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1441)) + _1441;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1442)) + _1442;
    float _1779 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1756));
    float _1798 = _1067 * 0.5;
    float _1799 = _1068 * 0.5;
    float _1800 = _1069 * 0.5;
    float _1801 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1804 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1807 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1841;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1814 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1427, _1431, _1434, _1437));
        float _1818 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1822 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1829 = dot(vec4(cbModelParam._m0[39u]), vec4(_1798, _1799, _1800, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1852;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1843 = dot(vec4(cbModelParam._m0[40u]), vec4(_1798, _1799, _1800, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1856 = (_1852 * cbModelParam._m0[1u].x) + (_1841 * (1.0 - cbModelParam._m0[1u].x));
    float _1866 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _973);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1866 : min(cbModelParam._m0[25u].z, _1866));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1916 = fma(_1129, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121)) + cbModelParam._m0[13u].w;
        float _1920 = fma(_1129, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121)) + cbModelParam._m0[14u].w;
        float _1924 = fma(_1129, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121)) + cbModelParam._m0[15u].w;
        float _1927 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1930 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1933 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1961;
        if (_1927 > 0.0)
        {
            _1961 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1961 = frontier_phi_14_12_ladder;
        }
        float _2135;
        if (_1930 > 0.0)
        {
            _2135 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2135 = frontier_phi_23_19_ladder;
        }
        float _2429;
        if (_1933 > 0.0)
        {
            _2429 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2429 = frontier_phi_35_30_ladder;
        }
        float _2431 = isnan(_2135) ? _1961 : (isnan(_1961) ? _2135 : min(_1961, _2135));
        float _2432 = isnan(_2429) ? _2431 : (isnan(_2431) ? _2429 : min(_2431, _2429));
        float _2436 = (_2432 * _1927) + _1916;
        float _2437 = (_2432 * _1930) + _1920;
        float _2438 = (_2432 * _1933) + _1924;
        float _2439 = _2432 * 9.9999997473787516355514526367188e-05;
        float _2441 = (-1.0) - _2439;
        float _2443 = _2439 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2438 > _2443) || ((_2438 < _2441) || ((_2437 > _2443) || ((_2437 < _2441) || ((_2436 < _2441) || (_2436 > _2443))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2438, cbModelParam._m0[9u].z, fma(_2437, cbModelParam._m0[9u].y, _2436 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2438, cbModelParam._m0[10u].z, fma(_2437, cbModelParam._m0[10u].y, _2436 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2438, cbModelParam._m0[11u].z, fma(_2437, cbModelParam._m0[11u].y, _2436 * cbModelParam._m0[11u].x))), _1867);
            frontier_phi_13_35_ladder = _2583.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2583.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2583.x * cbModelParam._m0[1u].y;
        }
        _1949 = frontier_phi_13_35_ladder_2;
        _1951 = frontier_phi_13_35_ladder_1;
        _1953 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1867);
        _1949 = _1937.x * cbModelParam._m0[1u].y;
        _1951 = _1937.y * cbModelParam._m0[1u].y;
        _1953 = _1937.z * cbModelParam._m0[1u].y;
    }
    float _1957 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _973);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1957 : min(cbModelParam._m0[25u].w, _1957));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2014 = fma(_1129, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121)) + cbModelParam._m0[21u].w;
        float _2018 = fma(_1129, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121)) + cbModelParam._m0[22u].w;
        float _2022 = fma(_1129, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121)) + cbModelParam._m0[23u].w;
        float _2025 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2028 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2031 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2140;
        if (_2025 > 0.0)
        {
            _2140 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2140 = frontier_phi_25_21_ladder;
        }
        float _2456;
        if (_2028 > 0.0)
        {
            _2456 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2456 = frontier_phi_37_32_ladder;
        }
        float _2794;
        if (_2031 > 0.0)
        {
            _2794 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2794 = frontier_phi_47_44_ladder;
        }
        float _2796 = isnan(_2456) ? _2140 : (isnan(_2140) ? _2456 : min(_2140, _2456));
        float _2797 = isnan(_2794) ? _2796 : (isnan(_2796) ? _2794 : min(_2796, _2794));
        float _2801 = (_2797 * _2025) + _2014;
        float _2802 = (_2797 * _2028) + _2018;
        float _2803 = (_2797 * _2031) + _2022;
        float _2804 = _2797 * 9.9999997473787516355514526367188e-05;
        float _2805 = (-1.0) - _2804;
        float _2807 = _2804 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2803 > _2807) || ((_2803 < _2805) || ((_2802 > _2807) || ((_2802 < _2805) || ((_2801 < _2805) || (_2801 > _2807))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2925 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2803, cbModelParam._m0[17u].z, fma(_2802, cbModelParam._m0[17u].y, _2801 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2803, cbModelParam._m0[18u].z, fma(_2802, cbModelParam._m0[18u].y, _2801 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2803, cbModelParam._m0[19u].z, fma(_2802, cbModelParam._m0[19u].y, _2801 * cbModelParam._m0[19u].x))), _1958);
            frontier_phi_22_47_ladder = _2925.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2925.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2925.x * cbModelParam._m0[1u].z;
        }
        _2050 = frontier_phi_22_47_ladder_2;
        _2052 = frontier_phi_22_47_ladder_1;
        _2054 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1958);
        _2050 = _2034.x * cbModelParam._m0[1u].z;
        _2052 = _2034.y * cbModelParam._m0[1u].z;
        _2054 = _2034.z * cbModelParam._m0[1u].z;
    }
    float _2067 = (((_1092 * _1044) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2050 - _1949)) + _1949);
    float _2069 = (((_1092 * _1046) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2052 - _1951)) + _1951);
    float _2071 = (((_1092 * _1047) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2054 - _1953)) + _1953);
    float _2074 = fma(_2071, cbSceneParam._m0[89u].z, fma(_2069, cbSceneParam._m0[89u].y, _2067 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2071, cbSceneParam._m0[90u].z, fma(_2069, cbSceneParam._m0[90u].y, _2067 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2071, cbSceneParam._m0[91u].z, fma(_2069, cbSceneParam._m0[91u].y, _2067 * cbSceneParam._m0[91u].x));
    float _2114 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2118 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2122 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2126 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2127 = _2114 / _2126;
    float _2128 = _2118 / _2126;
    float _2129 = _2122 / _2126;
    float _2275;
    float _2276;
    float _2277;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2156 = ((uint(_2129 > cbSceneParam._m0[59u].y) + uint(_2129 > cbSceneParam._m0[59u].x)) + uint(_2129 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2157 = _2156 + 43u;
        uint _2165 = _2156 + 44u;
        uint _2173 = _2156 + 45u;
        uint _2181 = _2156 + 46u;
        float _2192 = fma(_2126, cbSceneParam._m0[_2157].w, fma(_2122, cbSceneParam._m0[_2157].z, fma(_2118, cbSceneParam._m0[_2157].y, _2114 * cbSceneParam._m0[_2157].x)));
        float _2196 = fma(_2126, cbSceneParam._m0[_2165].w, fma(_2122, cbSceneParam._m0[_2165].z, fma(_2118, cbSceneParam._m0[_2165].y, _2114 * cbSceneParam._m0[_2165].x)));
        float _2204 = fma(_2126, cbSceneParam._m0[_2181].w, fma(_2122, cbSceneParam._m0[_2181].z, fma(_2118, cbSceneParam._m0[_2181].y, _2114 * cbSceneParam._m0[_2181].x)));
        float _2208 = cbSceneParam._m0[33u].z * _2204;
        float _2210 = cbSceneParam._m0[33u].w * _2204;
        float _2213 = fma(_2126, cbSceneParam._m0[_2173].w, fma(_2122, cbSceneParam._m0[_2173].z, fma(_2118, cbSceneParam._m0[_2173].y, _2114 * cbSceneParam._m0[_2173].x))) / _2204;
        float _2261 = (cbSceneParam._m0[33u].x - sqrt(((_2128 * _2128) + (_2127 * _2127)) + (_2129 * _2129))) * cbSceneParam._m0[33u].y;
        float _4636 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2268 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2208 + _2192) / _2204, (_2210 + _2196) / _2204), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2210 + _2192) / _2204, (_2196 - _2208) / _2204), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 - _2208) / _2204, (_2196 - _2210) / _2204), _2213), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2192 - _2210) / _2204, (_2208 + _2196) / _2204), _2213), 0.0)).x), vec4(0.25)));
        _2275 = 1.0 - (_2268 * cbSceneParam._m0[34u].x);
        _2276 = 1.0 - (_2268 * cbSceneParam._m0[34u].y);
        _2277 = 1.0 - (_2268 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2275 = 1.0;
        _2276 = 1.0;
        _2277 = 1.0;
    }
    float _2341;
    float _2343;
    float _2345;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2329 = fma(_2126, cbSceneParam._m0[63u].w, fma(_2122, cbSceneParam._m0[63u].z, fma(_2118, cbSceneParam._m0[63u].y, _2114 * cbSceneParam._m0[63u].x)));
        float _2330 = fma(_2126, cbSceneParam._m0[60u].w, fma(_2122, cbSceneParam._m0[60u].z, fma(_2118, cbSceneParam._m0[60u].y, _2114 * cbSceneParam._m0[60u].x))) / _2329;
        float _2331 = fma(_2126, cbSceneParam._m0[61u].w, fma(_2122, cbSceneParam._m0[61u].z, fma(_2118, cbSceneParam._m0[61u].y, _2114 * cbSceneParam._m0[61u].x))) / _2329;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2330 >= cbSceneParam._m0[64u].x) && (_2331 >= cbSceneParam._m0[64u].y)) && (_2330 <= cbSceneParam._m0[64u].z)) && (_2331 <= cbSceneParam._m0[64u].w))
        {
            float _2469 = fma(_2126, cbSceneParam._m0[62u].w, fma(_2122, cbSceneParam._m0[62u].z, fma(_2118, cbSceneParam._m0[62u].y, _2114 * cbSceneParam._m0[62u].x))) / _2329;
            float _2473 = isnan(cbSceneParam._m0[41u].w) ? _2469 : (isnan(_2469) ? cbSceneParam._m0[41u].w : max(_2469, cbSceneParam._m0[41u].w));
            float _2516 = (cbSceneParam._m0[33u].x - sqrt(((_2128 * _2128) + (_2127 * _2127)) + (_2129 * _2129))) * cbSceneParam._m0[33u].y;
            float _4652 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
            float _2523 = (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2330, cbSceneParam._m0[33u].w + _2331), _2473), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2330, _2331 - cbSceneParam._m0[33u].z), _2473), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2330 - cbSceneParam._m0[33u].z, _2331 - cbSceneParam._m0[33u].w), _2473), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2330 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2331), _2473), 0.0)).x), vec4(0.25)));
            float _2527 = 1.0 - (_2523 * cbSceneParam._m0[34u].x);
            float _2528 = 1.0 - (_2523 * cbSceneParam._m0[34u].y);
            float _2529 = 1.0 - (_2523 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2529) ? _2277 : (isnan(_2277) ? _2529 : min(_2277, _2529));
            frontier_phi_34_33_ladder_1 = isnan(_2528) ? _2276 : (isnan(_2276) ? _2528 : min(_2276, _2528));
            frontier_phi_34_33_ladder_2 = isnan(_2527) ? _2275 : (isnan(_2275) ? _2527 : min(_2275, _2527));
        }
        else
        {
            frontier_phi_34_33_ladder = _2277;
            frontier_phi_34_33_ladder_1 = _2276;
            frontier_phi_34_33_ladder_2 = _2275;
        }
        _2341 = frontier_phi_34_33_ladder_2;
        _2343 = frontier_phi_34_33_ladder_1;
        _2345 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2341 = _2275;
        _2343 = _2276;
        _2345 = _2277;
    }
    uvec4 _2350 = floatBitsToUint(cbInstanceData._m0[_986 + 5u]);
    uint _2352 = _2350.x * 14u;
    uint _2353 = _2352 + 13u;
    float _2360 = _1059 + (-1.0);
    float _2365 = (cbLight._m0[_2353].x * _2360) + 1.0;
    float _2366 = (cbLight._m0[_2353].y * _2360) + 1.0;
    float _2367 = (cbLight._m0[_2353].z * _2360) + 1.0;
    float _2368 = (cbLight._m0[_2353].w * _2360) + 1.0;
    uint _2369 = _2352 + 5u;
    float _2375 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
    uint _2379 = _2352 + 4u;
    float _2388 = isnan(1.0) ? _2365 : (isnan(_2365) ? 1.0 : min(_2365, 1.0));
    uint _2392 = _2352 | 1u;
    float _2403 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_863, _864, _865));
    float _2406 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_863, _864, _865));
    float _4688 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _4699 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2411 = (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * 0.3183098733425140380859375;
    float _2413 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * 0.3183098733425140380859375;
    float _2420 = ((cbLight._m0[_2369].x * _2375) * _2413) + (((cbLight._m0[_2379].x * _2341) * _2388) * _2411);
    float _2421 = ((_2375 * cbLight._m0[_2369].y) * _2413) + (((cbLight._m0[_2379].y * _2343) * _2388) * _2411);
    float _2422 = ((_2375 * cbLight._m0[_2369].z) * _2413) + (((cbLight._m0[_2379].z * _2345) * _2388) * _2411);
    uvec4 _2426 = floatBitsToUint(cbLight._m0[_2352 + 12u]);
    bool _2428 = _2426.x == 0u;
    float _2530;
    float _2532;
    float _2534;
    if (_2428)
    {
        _2530 = _2420;
        _2532 = _2421;
        _2534 = _2422;
    }
    else
    {
        uint _2538 = _2352 + 6u;
        float _2554 = (dot(vec3(cbLight._m0[_2352 + 2u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2555 = _2554 * _2554;
        float _4710 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2556 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
        float _2557 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2530 = (((cbLight._m0[_2538].x * 0.3183098733425140380859375) * _2556) * _2557) + _2420;
        _2532 = (((cbLight._m0[_2538].y * 0.3183098733425140380859375) * _2556) * _2557) + _2421;
        _2534 = (((cbLight._m0[_2538].z * 0.3183098733425140380859375) * _2556) * _2557) + _2422;
    }
    bool _2537 = _2426.y == 0u;
    float _2592;
    float _2594;
    float _2596;
    if (_2537)
    {
        _2592 = _2530;
        _2594 = _2532;
        _2596 = _2534;
    }
    else
    {
        uint _2765 = _2352 + 7u;
        float _2781 = (dot(vec3(cbLight._m0[_2352 + 3u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2782 = _2781 * _2781;
        float _4726 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2783 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
        float _2784 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
        _2592 = (((cbLight._m0[_2765].x * 0.3183098733425140380859375) * _2783) * _2784) + _2530;
        _2594 = (((cbLight._m0[_2765].y * 0.3183098733425140380859375) * _2783) * _2784) + _2532;
        _2596 = (((cbLight._m0[_2765].z * 0.3183098733425140380859375) * _2783) * _2784) + _2534;
    }
    uint _2599 = _2352 + 8u;
    float _2612 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _973) * 0.949999988079071044921875);
    float _2613 = _2612 * _2612;
    float _2614 = cbLight._m0[_2352].x + _923;
    float _2615 = cbLight._m0[_2352].y + _924;
    float _2616 = cbLight._m0[_2352].z + _925;
    float _2620 = inversesqrt(dot(vec3(_2614, _2615, _2616), vec3(_2614, _2615, _2616)));
    float _2621 = _2620 * _2614;
    float _2622 = _2620 * _2615;
    float _2623 = _2620 * _2616;
    float _2624 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2352].xyz));
    float _4742 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2627 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _4753 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2628 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
    float _2629 = dot(vec3(_863, _864, _865), vec3(_2621, _2622, _2623));
    float _4764 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
    float _2632 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
    float _2633 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2621, _2622, _2623));
    float _4775 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
    float _2637 = _2613 * _2613;
    float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
    float _2649 = exp2(log2(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) * 5.0);
    float _2650 = 0.959999978542327880859375 - _1041;
    float _2652 = 0.959999978542327880859375 - _1042;
    float _2653 = 0.959999978542327880859375 - _1043;
    float _2660 = 1.0 - _2613;
    float _2671 = (0.5 / (((_2628 * ((_2627 * _2660) + _2613)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _2660) + _2613) * _2627))) * _2627;
    float _4786 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
    float _2673 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
    uint _2687 = _2352 + 9u;
    float _2698 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2392].w)) * _973) * 0.949999988079071044921875);
    float _2699 = _2698 * _2698;
    float _2700 = cbLight._m0[_2392].x + _923;
    float _2701 = cbLight._m0[_2392].y + _924;
    float _2702 = cbLight._m0[_2392].z + _925;
    float _2706 = inversesqrt(dot(vec3(_2700, _2701, _2702), vec3(_2700, _2701, _2702)));
    float _2707 = _2706 * _2700;
    float _2708 = _2706 * _2701;
    float _2709 = _2706 * _2702;
    float _2710 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2392].xyz));
    float _4797 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
    float _2713 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
    float _2714 = dot(vec3(_863, _864, _865), vec3(_2707, _2708, _2709));
    float _4808 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2717 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
    float _2718 = dot(vec3(cbLight._m0[_2392].xyz), vec3(_2707, _2708, _2709));
    float _4819 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
    float _2722 = _2699 * _2699;
    float _2726 = ((_2717 * _2717) * (_2722 + (-1.0))) + 1.0;
    float _2733 = exp2(log2(1.0 - (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) * 5.0);
    float _2740 = 1.0 - _2699;
    float _2750 = (0.5 / (((_2628 * ((_2713 * _2740) + _2699)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _2740) + _2699) * _2713))) * _2713;
    float _4830 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
    float _2752 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2722 / ((_2726 * _2726) * 3.141590118408203125));
    float _2762 = (((((_2733 * _2650) + _1044) * cbLight._m0[_2687].x) * _2752) * _2375) + ((((cbLight._m0[_2599].x * _2341) * ((_2649 * _2650) + _1044)) * _2673) * _2388);
    float _2763 = (((((_2733 * _2652) + _1046) * cbLight._m0[_2687].y) * _2752) * _2375) + ((((cbLight._m0[_2599].y * _2343) * ((_2649 * _2652) + _1046)) * _2673) * _2388);
    float _2764 = (((((_2733 * _2653) + _1047) * cbLight._m0[_2687].z) * _2752) * _2375) + ((((cbLight._m0[_2599].z * _2345) * ((_2649 * _2653) + _1047)) * _2673) * _2388);
    float _2820;
    float _2822;
    float _2824;
    if (_2428)
    {
        _2820 = _2762;
        _2822 = _2763;
        _2824 = _2764;
    }
    else
    {
        uint _2826 = _2352 + 2u;
        uint _2830 = _2352 + 10u;
        float _2844 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2826].w)) * _973) * 0.949999988079071044921875);
        float _2845 = _2844 * _2844;
        float _2846 = cbLight._m0[_2826].x + _923;
        float _2847 = cbLight._m0[_2826].y + _924;
        float _2848 = cbLight._m0[_2826].z + _925;
        float _2852 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
        float _2853 = _2852 * _2846;
        float _2854 = _2852 * _2847;
        float _2855 = _2852 * _2848;
        float _2856 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2826].xyz));
        float _4841 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        float _2859 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2860 = dot(vec3(_863, _864, _865), vec3(_2853, _2854, _2855));
        float _4852 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
        float _2863 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2864 = dot(vec3(cbLight._m0[_2826].xyz), vec3(_2853, _2854, _2855));
        float _4863 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
        float _2868 = _2845 * _2845;
        float _2872 = ((_2863 * _2863) * (_2868 + (-1.0))) + 1.0;
        float _2879 = exp2(log2(1.0 - (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) * 5.0);
        float _2886 = 1.0 - _2845;
        float _2896 = (0.5 / (((_2628 * ((_2859 * _2886) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _2886) + _2845) * _2859))) * _2859;
        float _4874 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
        float _2898 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2868 / ((_2872 * _2872) * 3.141590118408203125));
        float _2899 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
        _2820 = (((((_2879 * _2650) + _1044) * cbLight._m0[_2830].x) * _2898) * _2899) + _2762;
        _2822 = (((((_2879 * _2652) + _1046) * cbLight._m0[_2830].y) * _2898) * _2899) + _2763;
        _2824 = (((((_2879 * _2653) + _1047) * cbLight._m0[_2830].z) * _2898) * _2899) + _2764;
    }
    float _2930;
    float _2932;
    float _2934;
    if (_2537)
    {
        _2930 = _2820;
        _2932 = _2822;
        _2934 = _2824;
    }
    else
    {
        uint _2941 = _2352 + 3u;
        uint _2945 = _2352 + 11u;
        float _2959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2941].w)) * _973) * 0.949999988079071044921875);
        float _2960 = _2959 * _2959;
        float _2961 = cbLight._m0[_2941].x + _923;
        float _2962 = cbLight._m0[_2941].y + _924;
        float _2963 = cbLight._m0[_2941].z + _925;
        float _2967 = inversesqrt(dot(vec3(_2961, _2962, _2963), vec3(_2961, _2962, _2963)));
        float _2968 = _2967 * _2961;
        float _2969 = _2967 * _2962;
        float _2970 = _2967 * _2963;
        float _2971 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2941].xyz));
        float _4890 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
        float _2974 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _2975 = dot(vec3(_863, _864, _865), vec3(_2968, _2969, _2970));
        float _4901 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
        float _2978 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
        float _2979 = dot(vec3(cbLight._m0[_2941].xyz), vec3(_2968, _2969, _2970));
        float _4912 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        float _2983 = _2960 * _2960;
        float _2987 = ((_2978 * _2978) * (_2983 + (-1.0))) + 1.0;
        float _2994 = exp2(log2(1.0 - (isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0)))) * 5.0);
        float _3001 = 1.0 - _2960;
        float _3011 = (0.5 / (((_2628 * ((_2974 * _3001) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2628 * _3001) + _2960) * _2974))) * _2974;
        float _4923 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
        float _3013 = (isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0))) * (_2983 / ((_2987 * _2987) * 3.141590118408203125));
        float _3014 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
        _2930 = (((((_2994 * _2650) + _1044) * cbLight._m0[_2945].x) * _3013) * _3014) + _2820;
        _2932 = (((((_2994 * _2652) + _1046) * cbLight._m0[_2945].y) * _3013) * _3014) + _2822;
        _2934 = (((((_2994 * _2653) + _1047) * cbLight._m0[_2945].z) * _3013) * _3014) + _2824;
    }
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_2350.y == 0u)
    {
        uvec4 _3035 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3036 = _3035.x;
        uint _3047 = uint((float(_3035.y) * floor(float(uint(cbSceneParam._m0[85u].y * _932) / _3036))) + floor(float(uint(cbSceneParam._m0[85u].x * _931) / _3036)));
        float _3057 = (log2(_2129 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3058 = isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0));
        uint _3061 = uint(isnan(14.0) ? _3058 : (isnan(_3058) ? 14.0 : min(_3058, 14.0)));
        uvec4 _3066 = texelFetch(g_lightClusterGridBuffer, int(((_3061 << 2u) + (_3047 << 6u)) >> 2u));
        uint _3067 = _3066.x;
        uint _3068 = _3035.z;
        float _3176;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        if (((((1u << ((_3068 >> 4u) & 15u)) + 4294967295u) & _3067) == 0u) || ((_3068 & 240u) == 0u))
        {
            _3176 = 0.0;
            _3178 = 0.0;
            _3180 = 0.0;
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
        }
        else
        {
            float _3177;
            float _3179;
            float _3181;
            float _3183;
            float _3185;
            float _3187;
            float _3329 = 0.0;
            float _3330 = 0.0;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            uint _3335 = 0u;
            uint _3344;
            bool _3345;
            for (;;)
            {
                _3344 = texelFetch(g_lightClassification, int((((_3061 << 5u) + (_3047 << 9u)) + (_3335 << 2u)) >> 2u)).x;
                _3345 = _3344 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3345)
                {
                    frontier_phi_66_pred = _3334;
                    frontier_phi_66_pred_1 = _3333;
                    frontier_phi_66_pred_2 = _3332;
                    frontier_phi_66_pred_3 = _3331;
                    frontier_phi_66_pred_4 = _3330;
                    frontier_phi_66_pred_5 = _3329;
                }
                else
                {
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    uint _3459;
                    _3453 = _3329;
                    _3454 = _3330;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3344;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    for (;;)
                    {
                        uint _3463 = uint(findLSB(_3459)) + (_3335 << 5u);
                        uint _3460 = (_3459 + 4294967295u) & _3459;
                        uint _3465 = _3463 * 48u;
                        vec4 _3479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3465)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3465 + 3u)).x));
                        uint _3485 = (_3463 * 48u) + 4u;
                        vec4 _3498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3485)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3485 + 3u)).x));
                        uint _3504 = (_3463 * 48u) + 8u;
                        vec3 _3515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3504)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3504 + 2u)).x));
                        float _3519 = _3479.x - _2127;
                        float _3520 = _3479.y - _2128;
                        float _3521 = _3479.z - _2129;
                        float _3522 = dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521));
                        float _3525 = inversesqrt(_3522);
                        float _3526 = _3525 * _3519;
                        float _3527 = _3525 * _3520;
                        float _3528 = _3525 * _3521;
                        float _3529 = dot(vec3(_954, _957, _960), vec3(_3526, _3527, _3528));
                        float _3534 = 1.0 - (_3522 * _3479.w);
                        float _4949 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                        float _3535 = isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0));
                        float _3536 = sqrt(_3522) * _3498.w;
                        float _3539 = 1.39999997615814208984375 / (_3536 + 1.39999997615814208984375);
                        float _3540 = _3539 * _3539;
                        float _3543 = ((1.0 - _3540) * _3529) + _3540;
                        float _3546 = _3536 * _3536;
                        float _3550 = ((isnan(0.0) ? _3543 : (isnan(_3543) ? 0.0 : max(_3543, 0.0))) * _3535) / ((_3546 * 0.699999988079071044921875) + 1.0);
                        float _3554 = (-0.0) - _2127;
                        float _3555 = (-0.0) - _2128;
                        float _3556 = (-0.0) - _2129;
                        float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                        float _3561 = _3560 * _3554;
                        float _3562 = _3560 * _3555;
                        float _3563 = _3560 * _3556;
                        float _3570 = exp2(log2(1.0 / ((_3546 * 3.5) + 5.0)) * 0.25);
                        float _3571 = 1.0 - _1075;
                        float _3578 = sqrt(1.0 - ((1.0 - (_3571 * _3571)) * (1.0 - (_3570 * _3570))));
                        float _3579 = _3578 * _3578;
                        float _3580 = _3579 * _3579;
                        float _3581 = _3561 + _3526;
                        float _3582 = _3562 + _3527;
                        float _3583 = _3563 + _3528;
                        float _3587 = inversesqrt(dot(vec3(_3581, _3582, _3583), vec3(_3581, _3582, _3583)));
                        float _3591 = dot(vec3(_954, _957, _960), vec3(_3561, _3562, _3563));
                        float _4965 = isnan(0.0) ? _3591 : (isnan(_3591) ? 0.0 : max(_3591, 0.0));
                        float _3594 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                        float _3595 = dot(vec3(_954, _957, _960), vec3(_3587 * _3581, _3587 * _3582, _3587 * _3583));
                        float _4976 = isnan(0.0) ? _3595 : (isnan(_3595) ? 0.0 : max(_3595, 0.0));
                        float _3598 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                        float _3602 = ((_3598 * _3598) * (_3580 + (-1.0))) + 1.0;
                        float _3603 = _3539 * _3579;
                        float _3604 = _3603 * _3603;
                        float _3607 = ((1.0 - _3604) * _3529) + _3604;
                        float _4987 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                        float _3608 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                        float _3609 = 1.0 - _3579;
                        float _3619 = (0.5 / (((_3608 * ((_3594 * _3609) + _3579)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3579) * _3594))) * _3608;
                        float _4998 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                        float _3630 = (((_3580 * 3.1415927410125732421875) * (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0)))) / ((_3602 * _3602) * ((_3546 * 2.1991131305694580078125) + 3.141590118408203125))) * _3535;
                        _3388 = (_3550 * _3498.x) + _3456;
                        _3389 = (_3550 * _3498.y) + _3457;
                        _3390 = (_3550 * _3498.z) + _3458;
                        _3385 = (_3630 * _3515.x) + _3453;
                        _3386 = (_3630 * _3515.y) + _3454;
                        _3387 = (_3630 * _3515.z) + _3455;
                        if (_3460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3453 = _3385;
                            _3454 = _3386;
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3460;
                        }
                    }
                    frontier_phi_66_pred = _3390;
                    frontier_phi_66_pred_1 = _3389;
                    frontier_phi_66_pred_2 = _3388;
                    frontier_phi_66_pred_3 = _3387;
                    frontier_phi_66_pred_4 = _3386;
                    frontier_phi_66_pred_5 = _3385;
                }
                _3187 = frontier_phi_66_pred;
                _3185 = frontier_phi_66_pred_1;
                _3183 = frontier_phi_66_pred_2;
                _3181 = frontier_phi_66_pred_3;
                _3179 = frontier_phi_66_pred_4;
                _3177 = frontier_phi_66_pred_5;
                uint _3336 = _3335 + 1u;
                if (_3336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3329 = _3177;
                    _3330 = _3179;
                    _3331 = _3181;
                    _3332 = _3183;
                    _3333 = _3185;
                    _3334 = _3187;
                    _3335 = _3336;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3176 = _3177;
            _3178 = _3179;
            _3180 = _3181;
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
        }
        uvec4 _3190 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3191 = _3190.z;
        uint _3193 = (_3191 >> 8u) & 15u;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        if (((4294967295u << _3193) & _3067) == 0u)
        {
            _3297 = _3176;
            _3299 = _3178;
            _3301 = _3180;
            _3303 = _3182;
            _3305 = _3184;
            _3307 = _3186;
        }
        else
        {
            float _3322 = inversesqrt(dot(vec3(_2127, _2128, _2129), vec3(_2127, _2128, _2129)));
            float _3323 = _3322 * _2127;
            float _3324 = _3322 * _2128;
            float _3325 = _3322 * _2129;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3193 < ((_3191 >> 12u) & 15u))
            {
                float _3298;
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3436 = _3176;
                float _3437 = _3178;
                float _3438 = _3180;
                float _3439 = _3182;
                float _3440 = _3184;
                float _3441 = _3186;
                uint _3442 = _3193;
                uint _3451;
                bool _3452;
                for (;;)
                {
                    _3451 = texelFetch(g_lightClassification, int((((_3061 << 5u) + (_3047 << 9u)) + (_3442 << 2u)) >> 2u)).x;
                    _3452 = _3451 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3452)
                    {
                        frontier_phi_72_pred = _3441;
                        frontier_phi_72_pred_1 = _3440;
                        frontier_phi_72_pred_2 = _3439;
                        frontier_phi_72_pred_3 = _3438;
                        frontier_phi_72_pred_4 = _3437;
                        frontier_phi_72_pred_5 = _3436;
                    }
                    else
                    {
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3648 = _3436;
                        float _3649 = _3437;
                        float _3650 = _3438;
                        float _3651 = _3439;
                        float _3652 = _3440;
                        float _3653 = _3441;
                        uint _3654 = _3451;
                        uint _3655;
                        vec4 _3680;
                        float _3681;
                        vec4 _3696;
                        vec3 _3708;
                        vec4 _3724;
                        vec4 _3739;
                        float _3785;
                        bool _3786;
                        for (;;)
                        {
                            uint _3665 = ((_3442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3654));
                            _3655 = (_3654 + 4294967295u) & _3654;
                            uint _3667 = _3665 * 40u;
                            _3680 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3667)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3667 + 3u)).x));
                            _3681 = _3680.w;
                            uint _3683 = (_3665 * 40u) + 4u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            uint _3698 = (_3665 * 40u) + 8u;
                            _3708 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3698)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3698 + 2u)).x));
                            uint _3711 = (_3665 * 40u) + 16u;
                            _3724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3711 + 3u)).x));
                            uint _3726 = (_3665 * 40u) + 20u;
                            _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3741 = (_3665 * 40u) + 24u;
                            vec4 _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3760 = (_3665 * 40u) + 28u;
                            vec4 _3773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3760 + 3u)).x));
                            _3785 = fma(_2129, _3773.z, fma(_2128, _3773.y, _3773.x * _2127)) + _3773.w;
                            _3786 = !((fma(_2129, _3754.z, fma(_2128, _3754.y, _3754.x * _2127)) + _3754.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3786)
                            {
                                float _3813 = _3680.x - _2127;
                                float _3814 = _3680.y - _2128;
                                float _3815 = _3680.z - _2129;
                                float _3816 = dot(vec3(_3813, _3814, _3815), vec3(_3813, _3814, _3815));
                                float _3819 = inversesqrt(_3816);
                                float _3820 = _3819 * _3813;
                                float _3821 = _3819 * _3814;
                                float _3822 = _3819 * _3815;
                                float _3826 = 1.0 - (_3816 / (_3681 * _3681));
                                float _5009 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3831 = sqrt(_3816) * _3696.w;
                                float _3833 = 1.39999997615814208984375 / (_3831 + 1.39999997615814208984375);
                                float _3834 = _3833 * _3833;
                                float _3837 = ((1.0 - _3834) * dot(vec3(_3820, _3821, _3822), vec3(_954, _957, _960))) + _3834;
                                float _3840 = _3831 * _3831;
                                float _3844 = (fma(_2129, _3724.z, fma(_2128, _3724.y, _3724.x * _2127)) + _3724.w) / _3785;
                                float _3845 = (fma(_2129, _3739.z, fma(_2128, _3739.y, _3739.x * _2127)) + _3739.w) / _3785;
                                float _3849 = 1.0 - dot(vec2(_3844, _3845), vec2(_3844, _3845));
                                float _5025 = isnan(0.0) ? _3849 : (isnan(_3849) ? 0.0 : max(_3849, 0.0));
                                float _3850 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
                                float _3851 = _3850 * (((isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0))) * _3827) / ((_3840 * 0.699999988079071044921875) + 1.0));
                                float _3863 = exp2(log2(1.0 / ((_3840 * 3.5) + 5.0)) * 0.25);
                                float _3864 = 1.0 - _1075;
                                float _3871 = sqrt(1.0 - ((1.0 - (_3864 * _3864)) * (1.0 - (_3863 * _3863))));
                                float _3872 = _3871 * _3871;
                                float _3873 = _3872 * _3872;
                                float _3874 = _3820 - _3323;
                                float _3875 = _3821 - _3324;
                                float _3876 = _3822 - _3325;
                                float _3880 = inversesqrt(dot(vec3(_3874, _3875, _3876), vec3(_3874, _3875, _3876)));
                                float _3884 = dot(vec3(_954, _957, _960), vec3((-0.0) - _3323, (-0.0) - _3324, (-0.0) - _3325));
                                float _5036 = isnan(0.0) ? _3884 : (isnan(_3884) ? 0.0 : max(_3884, 0.0));
                                float _3887 = isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0));
                                float _3888 = dot(vec3(_954, _957, _960), vec3(_3880 * _3874, _3880 * _3875, _3880 * _3876));
                                float _5047 = isnan(0.0) ? _3888 : (isnan(_3888) ? 0.0 : max(_3888, 0.0));
                                float _3891 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                                float _3895 = ((_3891 * _3891) * (_3873 + (-1.0))) + 1.0;
                                float _3896 = _3833 * _3872;
                                float _3897 = _3896 * _3896;
                                float _3903 = ((1.0 - _3897) * dot(vec3(_954, _957, _960), vec3(_3820, _3821, _3822))) + _3897;
                                float _5058 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3904 = isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0));
                                float _3905 = 1.0 - _3872;
                                float _3915 = (0.5 / (((_3904 * ((_3887 * _3905) + _3872)) + 9.9999999392252902907785028219223e-09) + (((_3904 * _3905) + _3872) * _3887))) * _3904;
                                float _5069 = isnan(0.0) ? _3915 : (isnan(_3915) ? 0.0 : max(_3915, 0.0));
                                float _3925 = (_3850 * _3827) * (((_3873 * 3.1415927410125732421875) * (isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0)))) / ((_3895 * _3895) * ((_3840 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3851 * _3696.y;
                                frontier_phi_78_pred_1 = _3851 * _3696.x;
                                frontier_phi_78_pred_2 = _3925 * _3708.z;
                                frontier_phi_78_pred_3 = _3925 * _3708.y;
                                frontier_phi_78_pred_4 = _3925 * _3708.x;
                                frontier_phi_78_pred_5 = _3851 * _3696.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3933 = frontier_phi_78_pred;
                            _3932 = frontier_phi_78_pred_1;
                            _3931 = frontier_phi_78_pred_2;
                            _3930 = frontier_phi_78_pred_3;
                            _3929 = frontier_phi_78_pred_4;
                            _3934 = frontier_phi_78_pred_5;
                            _3638 = _3932 + _3651;
                            _3639 = _3933 + _3652;
                            _3640 = _3934 + _3653;
                            _3635 = _3929 + _3648;
                            _3636 = _3930 + _3649;
                            _3637 = _3931 + _3650;
                            if (_3655 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3655;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3640;
                        frontier_phi_72_pred_1 = _3639;
                        frontier_phi_72_pred_2 = _3638;
                        frontier_phi_72_pred_3 = _3637;
                        frontier_phi_72_pred_4 = _3636;
                        frontier_phi_72_pred_5 = _3635;
                    }
                    _3308 = frontier_phi_72_pred;
                    _3306 = frontier_phi_72_pred_1;
                    _3304 = frontier_phi_72_pred_2;
                    _3302 = frontier_phi_72_pred_3;
                    _3300 = frontier_phi_72_pred_4;
                    _3298 = frontier_phi_72_pred_5;
                    uint _3443 = _3442 + 1u;
                    if (_3443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3436 = _3298;
                        _3437 = _3300;
                        _3438 = _3302;
                        _3439 = _3304;
                        _3440 = _3306;
                        _3441 = _3308;
                        _3442 = _3443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3308;
                frontier_phi_60_61_ladder_1 = _3306;
                frontier_phi_60_61_ladder_2 = _3302;
                frontier_phi_60_61_ladder_3 = _3300;
                frontier_phi_60_61_ladder_4 = _3298;
                frontier_phi_60_61_ladder_5 = _3304;
            }
            else
            {
                frontier_phi_60_61_ladder = _3186;
                frontier_phi_60_61_ladder_1 = _3184;
                frontier_phi_60_61_ladder_2 = _3180;
                frontier_phi_60_61_ladder_3 = _3178;
                frontier_phi_60_61_ladder_4 = _3176;
                frontier_phi_60_61_ladder_5 = _3182;
            }
            _3297 = frontier_phi_60_61_ladder_4;
            _3299 = frontier_phi_60_61_ladder_3;
            _3301 = frontier_phi_60_61_ladder_2;
            _3303 = frontier_phi_60_61_ladder_5;
            _3305 = frontier_phi_60_61_ladder_1;
            _3307 = frontier_phi_60_61_ladder;
        }
        float _3312 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _3080 = (_3312 * _3303) + _2592;
        _3082 = (_3312 * _3305) + _2594;
        _3084 = (_3312 * _3307) + _2596;
        _3086 = ((_3297 * _1044) * _3312) + _2930;
        _3088 = ((_3299 * _1046) * _3312) + _2932;
        _3090 = ((_3301 * _1047) * _3312) + _2934;
    }
    else
    {
        _3080 = _2592;
        _3082 = _2594;
        _3084 = _2596;
        _3086 = _2930;
        _3088 = _2932;
        _3090 = _2934;
    }
    uint _3096 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _3102 = cbInstanceData._m0[_3096].x * ((((cbMtdParam._m0[22u].x * _778.x) * cbMtdParam._m0[32u].x) * _799) + _563);
    float _3103 = cbInstanceData._m0[_3096].y * ((((cbMtdParam._m0[22u].y * _778.y) * cbMtdParam._m0[32u].x) * _799) + _564);
    float _3104 = cbInstanceData._m0[_3096].z * ((((cbMtdParam._m0[22u].z * _778.z) * cbMtdParam._m0[32u].x) * _799) + _565);
    float _5085 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _5096 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _5107 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _3121 = (((isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0))) * (_3080 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1059))) + ((_3086 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1856)) * cbPerFrame._m0[3u].x)) + _3102;
    float _3123 = (_3103 + ((_3088 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1856)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0))) * (_3082 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1059)));
    float _3125 = (_3104 + ((_3090 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1856)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0))) * (_3084 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1059)));
    float _5133 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3138 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
    uint _3139 = _986 + 6u;
    float _3147 = _931 / cbSceneParam._m0[86u].x;
    float _3148 = _932 / cbSceneParam._m0[86u].y;
    vec4 _3162 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3147, _3148, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3164 = _3162.x;
    float _3165 = _3162.y;
    float _3166 = _3162.z;
    float _3167 = _3162.w;
    float _3238;
    float _3240;
    float _3242;
    float _3244;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _3201 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _3202 = _3201 / _886;
        float _3213 = _3202 * _916;
        float _3214 = _917 * _3202;
        float _3215 = (-0.0) - _3214;
        float _3216 = _3202 * _918;
        float _3218 = (cbSceneParam._m0[77u].w * _3215) / _3201;
        float _3219 = _3218 + cbSceneParam._m0[79u].w;
        float _3220 = cbSceneParam._m0[79u].w - _3214;
        float _3226 = sqrt(((_3213 * _3213) + (_3214 * _3214)) + (_3216 * _3216));
        float _3229 = (1.0 - (cbSceneParam._m0[77u].w / _3201)) * _3226;
        float _3234 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3236 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3398;
        if (abs((_3215 - _3218) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3398 = ((((_3219 > 0.0) ? exp2(_3234 * _3219) : (2.0 - exp2(_3236 * _3219))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3229;
        }
        else
        {
            float _3358 = 1.0 / cbSceneParam._m0[80u].x;
            float _3359 = isnan(_3220) ? _3219 : (isnan(_3219) ? _3220 : max(_3219, _3220));
            float _3360 = isnan(_3220) ? _3219 : (isnan(_3219) ? _3220 : min(_3219, _3220));
            float _3369 = isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : min(_3359, 0.0));
            float _3370 = isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : min(_3360, 0.0));
            _3398 = ((abs(_3226 / _3215) * cbSceneParam._m0[80u].y) * ((((_3369 - _3370) * 2.0) - ((exp2(_3234 * (isnan(0.0) ? _3359 : (isnan(_3359) ? 0.0 : max(_3359, 0.0)))) - exp2(_3234 * (isnan(0.0) ? _3360 : (isnan(_3360) ? 0.0 : max(_3360, 0.0))))) * _3358)) - ((exp2(_3236 * _3369) - exp2(_3236 * _3370)) * _3358))) + (_3229 * cbSceneParam._m0[80u].z);
        }
        vec4 _3400 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3147, _3148, 1.0), 0.0);
        float _3409 = exp2((_3398 * (-1.44269502162933349609375)) * (1.0 - _3400.w));
        float _3410 = log2(_3409);
        float _3426 = log2(_3167);
        _3238 = (exp2(_3426 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].x)) * _3400.x) / cbSceneParam._m0[78u].x)) + _3164;
        _3240 = (exp2(_3426 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].y)) * _3400.y) / cbSceneParam._m0[78u].y)) + _3165;
        _3242 = (exp2(_3426 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3410 * cbSceneParam._m0[78u].z)) * _3400.z) / cbSceneParam._m0[78u].z)) + _3166;
        _3244 = _3409 * _3167;
    }
    else
    {
        _3238 = _3164;
        _3240 = _3165;
        _3242 = _3166;
        _3244 = _3167;
    }
    float _3256 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3257 = _3256 == 3.0;
    float _3258 = log2(_3244);
    float _3262 = exp2(_3258 * cbSceneParam._m0[78u].x);
    float _3263 = exp2(_3258 * cbSceneParam._m0[78u].y);
    float _3264 = exp2(_3258 * cbSceneParam._m0[78u].z);
    float _3265 = _3262 * (isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0)));
    float _3266 = _3263 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0)));
    float _3267 = _3264 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0)));
    float _3276 = (_3256 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3276 * (_3257 ? _3265 : (_3265 + (cbSceneParam._m0[72u].w * _3238)));
    SV_Target.y = _3276 * (_3257 ? _3266 : (_3266 + (cbSceneParam._m0[72u].w * _3240)));
    SV_Target.z = _3276 * (_3257 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3242)));
    SV_Target.w = cbInstanceData._m0[_3139].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3102) * _3138) * _3262) * _3276;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3103) * _3138) * _3263) * _3276;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3104) * _3138) * _3264) * _3276;
    SV_Target_1.w = cbInstanceData._m0[_3139].w;
}


