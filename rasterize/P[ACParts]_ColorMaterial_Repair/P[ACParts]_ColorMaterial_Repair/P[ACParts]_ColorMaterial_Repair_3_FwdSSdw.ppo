#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1428;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _226 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _227 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _228 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _234 = inversesqrt(dot(vec3(_226, _227, _228), vec3(_226, _227, _228)));
    float _241 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _248 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _277 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_263 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _284 = log2(0.0);
    float _286 = exp2(_284 * cbMtdParam._m0[31u].z);
    float _290 = _286 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _286);
    float _291 = _286 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _286);
    float _292 = _286 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _286);
    float _293 = isnan(0.0) ? _290 : (isnan(_290) ? 0.0 : max(_290, 0.0));
    float _294 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _295 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _296 = isnan(1.0) ? _293 : (isnan(_293) ? 1.0 : min(_293, 1.0));
    float _298 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    float _299 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    vec4 _315 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _263) + cbTextureTilingScale._m0[0u].w));
    float _319 = _315.z;
    float _320 = _315.w;
    float _321 = 1.0 - _320;
    float _328 = exp2(log2((1.0 - (_321 * _319)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    float _342 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_321 * _321) * _319))) * cbMtdParam._m0[34u].w);
    float _343 = isnan(0.0) ? _342 : (isnan(_342) ? 0.0 : max(_342, 0.0));
    vec4 _357 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _360 = _357.y;
    float _363 = (_360 * ((isnan(1.0) ? _343 : (isnan(_343) ? 1.0 : min(_343, 1.0))) - _320)) + _320;
    vec4 _375 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _387 = (_357.x + (-0.02500000037252902984619140625)) * 8.0;
    float _389 = roundEven(_387);
    float _390 = cbMtdParam._m0[10u].x * _375.x;
    float _391 = cbMtdParam._m0[10u].y * _375.y;
    float _392 = cbMtdParam._m0[10u].z * _375.z;
    vec4 _404 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _263) + cbTextureTilingScale._m0[1u].w));
    float _424 = (((cbMtdParam._m0[9u].x * _404.x) - _390) * _363) + _390;
    float _425 = (((cbMtdParam._m0[9u].y * _404.y) - _391) * _363) + _391;
    float _426 = (((cbMtdParam._m0[9u].z * _404.z) - _392) * _363) + _392;
    vec4 _438 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    float _458 = (((cbMtdParam._m0[20u].x * _438.x) - _424) * _330) + _424;
    float _459 = (((cbMtdParam._m0[20u].y * _438.y) - _425) * _330) + _425;
    float _460 = (((cbMtdParam._m0[20u].z * _438.z) - _426) * _330) + _426;
    vec4 _473 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _263) + cbTextureTilingScale._m0[7u].w));
    float _199[6];
    float _200[6];
    float _201[6];
    _199[0u] = cbMtdParam._m0[24u].x;
    _200[0u] = cbMtdParam._m0[24u].y;
    _201[0u] = cbMtdParam._m0[24u].z;
    _199[1u] = cbMtdParam._m0[25u].x;
    _200[1u] = cbMtdParam._m0[25u].y;
    _201[1u] = cbMtdParam._m0[25u].z;
    _199[2u] = cbMtdParam._m0[26u].x;
    _200[2u] = cbMtdParam._m0[26u].y;
    _201[2u] = cbMtdParam._m0[26u].z;
    _199[3u] = cbMtdParam._m0[27u].x;
    _200[3u] = cbMtdParam._m0[27u].y;
    _201[3u] = cbMtdParam._m0[27u].z;
    _199[4u] = cbMtdParam._m0[28u].x;
    _200[4u] = cbMtdParam._m0[28u].y;
    _201[4u] = cbMtdParam._m0[28u].z;
    _199[5u] = cbMtdParam._m0[29u].x;
    _200[5u] = cbMtdParam._m0[29u].y;
    _201[5u] = cbMtdParam._m0[29u].z;
    float _556 = isnan(0.0) ? _389 : (isnan(_389) ? 0.0 : max(_389, 0.0));
    uint _559 = uint(int(isnan(5.0) ? _556 : (isnan(_556) ? 5.0 : min(_556, 5.0))));
    float _566 = _199[_559] * _360;
    float _567 = _200[_559] * _360;
    float _568 = _201[_559] * _360;
    float _569 = _566 + ((_277.x * 4.5) * ((((cbMtdParam._m0[30u].x * _473.x) - _458) * _296) + _458));
    float _570 = _567 + ((_277.y * 4.5) * ((((cbMtdParam._m0[30u].y * _473.y) - _459) * _298) + _459));
    float _571 = _568 + ((_277.z * 4.5) * ((((cbMtdParam._m0[30u].z * _473.z) - _460) * _299) + _460));
    float _194[5];
    float _195[5];
    _194[0u] = cbMtdParam._m0[35u].y;
    _195[0u] = cbMtdParam._m0[35u].z;
    _194[1u] = cbMtdParam._m0[36u].w;
    _195[1u] = cbMtdParam._m0[37u].x;
    _194[2u] = cbMtdParam._m0[37u].y;
    _195[2u] = cbMtdParam._m0[37u].z;
    _194[3u] = cbMtdParam._m0[37u].w;
    _195[3u] = cbMtdParam._m0[38u].x;
    _194[4u] = cbMtdParam._m0[38u].y;
    _195[4u] = cbMtdParam._m0[38u].z;
    float _602 = roundEven(5.0 - _387);
    float _603 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _604 = isnan(4.0) ? _603 : (isnan(_603) ? 4.0 : min(_603, 4.0));
    float _606 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    uint _608 = uint(int(isnan(4.0) ? _606 : (isnan(_606) ? 4.0 : min(_606, 4.0))));
    float _620 = ((cbMtdParam._m0[39u].z - _195[_608]) * _363) + _195[_608];
    float _628 = ((cbMtdParam._m0[40u].x - _620) * _330) + _620;
    float _633 = ((cbMtdParam._m0[40u].z - _628) * _296) + _628;
    vec4 _647 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _263) + cbTextureTilingScale._m0[8u].w));
    float _649 = _647.x;
    float _650 = _647.y;
    float _652 = _647.z + _194[_608];
    vec4 _664 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w));
    float _672 = (((cbMtdParam._m0[39u].y - _652) + _664.z) * _363) + _652;
    vec4 _685 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _693 = (((cbMtdParam._m0[39u].w - _672) + _685.z) * _330) + _672;
    float _699 = ((((_319 * 2.0) * _693) - _693) * cbMtdParam._m0[33u].w) + _693;
    vec4 _712 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _263) + cbTextureTilingScale._m0[12u].w));
    float _720 = (((_712.z + cbMtdParam._m0[40u].y) - _699) * _299) + _699;
    float _747 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _778 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_747 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_751 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _793 = (-0.0) - ((_751 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _797 = (_751 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _798 = isnan(_797) ? _793 : (isnan(_793) ? _797 : min(_793, _797));
    float _3899 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _799 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _822 = ((_664.x - _649) * _363) + _649;
    float _823 = ((_664.y - _650) * _363) + _650;
    float _828 = ((_685.x - _822) * _330) + _822;
    float _829 = ((_685.y - _823) * _330) + _823;
    float _838 = ((((_712.x - _828) * _296) + _828) * 2.0) + (-1.0);
    float _839 = ((((_712.y - _829) * _298) + _829) * 2.0) + (-1.0);
    float _840 = dot(vec2(_838, _839), vec2(_838, _839));
    float _3910 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _845 = sqrt(1.0 - (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))));
    float _848 = (cbMtdParam._m0[34u].x * ((_315.x * 2.0) + (-1.0))) + _838;
    float _849 = (cbMtdParam._m0[34u].x * ((_315.y * 2.0) + (-1.0))) + _839;
    float _852 = fma(_845, _241 * NORMAL.x, fma(_849, _248 * TANGENT.x, (_234 * _226) * _848));
    float _855 = fma(_845, _241 * NORMAL.y, fma(_849, _248 * TANGENT.y, (_234 * _227) * _848));
    float _858 = fma(_845, _241 * NORMAL.z, fma(_849, _248 * TANGENT.z, (_234 * _228) * _848));
    float _862 = inversesqrt(dot(vec3(_852, _855, _858), vec3(_852, _855, _858)));
    float _863 = _862 * _852;
    float _864 = _862 * _855;
    float _865 = _862 * _858;
    float _3921 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _866 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _3932 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _3943 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _3954 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _3965 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _870 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _886 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _906 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _916 = cbSceneParam._m0[71u].x - (_747 / _906);
    float _917 = cbSceneParam._m0[71u].y - (_751 / _906);
    float _918 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _906);
    float _922 = inversesqrt(dot(vec3(_916, _917, _918), vec3(_916, _917, _918)));
    float _923 = _916 * _922;
    float _924 = _917 * _922;
    float _925 = _918 * _922;
    float _931 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _932 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _934 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _936 = _934.w;
    float _954 = fma(_865, cbSceneParam._m0[5u].z, fma(_864, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _863));
    float _957 = fma(_865, cbSceneParam._m0[6u].z, fma(_864, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _863));
    float _960 = fma(_865, cbSceneParam._m0[7u].z, fma(_864, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _863));
    vec4 _962 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _973 = (((_962.y - _866) + (_962.w * _866)) * cbMtdParam._m0[3u].x) + _866;
    uint _986 = uint(roundEven(NORMAL.w)) * 13u;
    uint _988 = _986 + 9u;
    uint _989 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _995 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0)))) * cbInstanceData._m0[_989].x;
    float _996 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * cbInstanceData._m0[_989].y;
    float _997 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0)))) * cbInstanceData._m0[_989].z;
    float _3976 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _998 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
    float _3987 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _999 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _3998 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    vec4 _1001 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1006 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1017 = (((_1006.x - _870) + (_1006.w * _870)) * cbMtdParam._m0[3u].x) + _870;
    float _1030 = (cbMtdParam._m0[3u].x * (((_998 * _936) - _998) + _1001.x)) + _998;
    float _1031 = (cbMtdParam._m0[3u].x * (((_999 * _936) - _999) + _1001.y)) + _999;
    float _1032 = (cbMtdParam._m0[3u].x * (((_1000 * _936) - _1000) + _1001.z)) + _1000;
    float _1033 = 1.0 - _1017;
    float _1034 = _1033 * _1030;
    float _1035 = _1033 * _1031;
    float _1036 = _1033 * _1032;
    float _1041 = (_1030 + (-0.039999999105930328369140625)) * _1017;
    float _1042 = (_1031 + (-0.039999999105930328369140625)) * _1017;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _1017;
    float _1044 = _1041 + 0.039999999105930328369140625;
    float _1046 = _1042 + 0.039999999105930328369140625;
    float _1047 = _1043 + 0.039999999105930328369140625;
    vec4 _1056 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _931, cbSceneParam._m0[86u].y * _932));
    float _1059 = _1056.x * TEXCOORD_5.w;
    float _1060 = dot(vec3(_863, _864, _865), vec3(_923, _924, _925));
    float _1063 = _1060 * 2.0;
    float _1067 = (_1063 * _863) - _923;
    float _1068 = (_1063 * _864) - _924;
    float _1069 = (_1063 * _865) - _925;
    float _1073 = abs(dot(vec3(_923, _924, _925), vec3(_863, _864, _865)));
    float _4009 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
    float _1075 = sqrt(_973);
    float _1086 = exp2((_1075 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1075 * 3.0));
    float _1092 = (1.0 - _1086) * ((_1075 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1093 = _1086 * _1075;
    float _1121 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1125 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1129 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1427;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1154 = fma(_1129, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1121));
        float _1158 = fma(_1129, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1121));
        float _1162 = fma(_1129, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1121));
        float _1186 = _1121 + _863;
        float _1187 = _1125 + _864;
        float _1188 = _1129 + _865;
        float _1198 = fma(_1188, cbModelParam._m0[26u].z, fma(_1187, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1186)) - _1154;
        float _1199 = fma(_1188, cbModelParam._m0[27u].z, fma(_1187, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1186)) - _1158;
        float _1200 = fma(_1188, cbModelParam._m0[28u].z, fma(_1187, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1186)) - _1162;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1216 = ((_1204 * _1198) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1154 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1204 * _1199) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1158 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1200) / cbModelParam._m0[34u].z) + ((((((_1162 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1216, _1217, _1218), 0.0);
        float _1255 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1221.x + (-0.5));
        float _1257 = _1255 * (_1221.y + (-0.5));
        float _1258 = _1255 * (_1221.z + (-0.5));
        float _1265 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1228.x + (-0.5));
        float _1267 = _1265 * (_1228.y + (-0.5));
        float _1268 = _1265 * (_1228.z + (-0.5));
        float _1275 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1235.x + (-0.5));
        float _1277 = _1275 * (_1235.y + (-0.5));
        float _1278 = _1275 * (_1235.z + (-0.5));
        float _1285 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1242.x + (-0.5));
        float _1287 = _1285 * (_1242.y + (-0.5));
        float _1288 = _1285 * (_1242.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1309 = (dot(vec3(_863, _864, _865), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4035 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1319 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4046 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _4057 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0))) * (_1321 + 1.0))) + _1326) * _1289;
        float _1336 = _1257 * 0.5;
        float _1337 = _1267 * 0.5;
        float _1338 = _1277 * 0.5;
        float _1339 = dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338));
        float _1344 = (_1339 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1339);
        float _1352 = (dot(vec3(_863, _864, _865), vec3(_1344 * _1336, _1344 * _1337, _1344 * _1338)) + 1.0) * 0.5;
        float _4068 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1361 = sqrt(((_1337 * _1337) + (_1336 * _1336)) + (_1338 * _1338)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4079 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1362 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
        float _1363 = _1362 * 2.0;
        float _1367 = (1.0 - _1362) / (_1362 + 1.0);
        float _4090 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1377 = ((((1.0 - _1368) * (_1363 + 2.0)) * exp2(log2(isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0))) * (_1363 + 1.0))) + _1368) * _1290;
        float _1378 = _1258 * 0.5;
        float _1379 = _1268 * 0.5;
        float _1380 = _1278 * 0.5;
        float _1381 = dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380));
        float _1386 = (_1381 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1381);
        float _1394 = (dot(vec3(_863, _864, _865), vec3(_1386 * _1378, _1386 * _1379, _1386 * _1380)) + 1.0) * 0.5;
        float _4101 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1403 = sqrt(((_1379 * _1379) + (_1378 * _1378)) + (_1380 * _1380)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4112 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1404 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _1405 = _1404 * 2.0;
        float _1409 = (1.0 - _1404) / (_1404 + 1.0);
        float _4123 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1419 = ((((1.0 - _1410) * (_1405 + 2.0)) * exp2(log2(isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0))) * (_1405 + 1.0))) + _1410) * _1291;
        _1427 = _1258;
        _1429 = _1257;
        _1430 = _1256;
        _1431 = _1268;
        _1432 = _1267;
        _1433 = _1266;
        _1434 = _1278;
        _1435 = _1277;
        _1436 = _1276;
        _1437 = _1291;
        _1438 = _1290;
        _1439 = _1289;
        _1440 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
        _1441 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)));
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)));
    }
    else
    {
        _1427 = _1428;
        _1429 = _1428;
        _1430 = _1428;
        _1431 = _1428;
        _1432 = _1428;
        _1433 = _1428;
        _1434 = _1428;
        _1435 = _1428;
        _1436 = _1428;
        _1437 = _1428;
        _1438 = _1428;
        _1439 = _1428;
        _1440 = 0.0;
        _1441 = 0.0;
        _1442 = 0.0;
    }
    float _1732;
    float _1733;
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1465 = fma(_1129, cbModelParam._m0[30u].z, fma(_1125, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121));
        float _1469 = fma(_1129, cbModelParam._m0[31u].z, fma(_1125, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121));
        float _1473 = fma(_1129, cbModelParam._m0[32u].z, fma(_1125, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121));
        float _1495 = _1121 + _863;
        float _1496 = _1125 + _864;
        float _1497 = _1129 + _865;
        float _1507 = fma(_1497, cbModelParam._m0[30u].z, fma(_1496, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1495)) - _1465;
        float _1508 = fma(_1497, cbModelParam._m0[31u].z, fma(_1496, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1495)) - _1469;
        float _1509 = fma(_1497, cbModelParam._m0[32u].z, fma(_1496, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1495)) - _1473;
        float _1513 = inversesqrt(dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509)));
        float _1525 = ((_1513 * _1507) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1465 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1526 = ((_1513 * _1508) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1469 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1527 = ((_1513 * _1509) / cbModelParam._m0[35u].z) + ((((((_1473 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1536 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1525, _1526, _1527), 0.0);
        float _1562 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1563 = _1562 * (_1529.x + (-0.5));
        float _1564 = _1562 * (_1529.y + (-0.5));
        float _1565 = _1562 * (_1529.z + (-0.5));
        float _1572 = exp2((_1536.w + (-0.5)) * 20.0) * 2.0;
        float _1573 = _1572 * (_1536.x + (-0.5));
        float _1574 = _1572 * (_1536.y + (-0.5));
        float _1575 = _1572 * (_1536.z + (-0.5));
        float _1582 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1583 = _1582 * (_1543.x + (-0.5));
        float _1584 = _1582 * (_1543.y + (-0.5));
        float _1585 = _1582 * (_1543.z + (-0.5));
        float _1592 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1593 = _1592 * (_1550.x + (-0.5));
        float _1594 = _1592 * (_1550.y + (-0.5));
        float _1595 = _1592 * (_1550.z + (-0.5));
        float _1596 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1597 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = _1563 * 0.5;
        float _1600 = _1573 * 0.5;
        float _1601 = _1583 * 0.5;
        float _1602 = dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601));
        float _1607 = (_1602 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1602);
        float _1615 = (dot(vec3(_863, _864, _865), vec3(_1607 * _1599, _1607 * _1600, _1607 * _1601)) + 1.0) * 0.5;
        float _4164 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1624 = sqrt(((_1600 * _1600) + (_1599 * _1599)) + (_1601 * _1601)) / (_1596 + 9.9999997473787516355514526367188e-06);
        float _4175 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _1625 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
        float _1626 = _1625 * 2.0;
        float _1630 = (1.0 - _1625) / (_1625 + 1.0);
        float _4186 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1631 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _1640 = ((((1.0 - _1631) * (_1626 + 2.0)) * exp2(log2(isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_1626 + 1.0))) + _1631) * _1596;
        float _1641 = _1564 * 0.5;
        float _1642 = _1574 * 0.5;
        float _1643 = _1584 * 0.5;
        float _1644 = dot(vec3(_1641, _1642, _1643), vec3(_1641, _1642, _1643));
        float _1649 = (_1644 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1644);
        float _1657 = (dot(vec3(_863, _864, _865), vec3(_1649 * _1641, _1649 * _1642, _1649 * _1643)) + 1.0) * 0.5;
        float _4197 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1666 = sqrt(((_1642 * _1642) + (_1641 * _1641)) + (_1643 * _1643)) / (_1597 + 9.9999997473787516355514526367188e-06);
        float _4208 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _1668 = _1667 * 2.0;
        float _1672 = (1.0 - _1667) / (_1667 + 1.0);
        float _4219 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1682 = ((((1.0 - _1673) * (_1668 + 2.0)) * exp2(log2(isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_1668 + 1.0))) + _1673) * _1597;
        float _1683 = _1565 * 0.5;
        float _1684 = _1575 * 0.5;
        float _1685 = _1585 * 0.5;
        float _1686 = dot(vec3(_1683, _1684, _1685), vec3(_1683, _1684, _1685));
        float _1691 = (_1686 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1686);
        float _1699 = (dot(vec3(_863, _864, _865), vec3(_1691 * _1683, _1691 * _1684, _1691 * _1685)) + 1.0) * 0.5;
        float _4230 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
        float _1708 = sqrt(((_1684 * _1684) + (_1683 * _1683)) + (_1685 * _1685)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4241 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
        float _1709 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
        float _1710 = _1709 * 2.0;
        float _1714 = (1.0 - _1709) / (_1709 + 1.0);
        float _4252 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1724 = ((((1.0 - _1715) * (_1710 + 2.0)) * exp2(log2(isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * (_1710 + 1.0))) + _1715) * _1598;
        _1732 = _1565;
        _1733 = _1564;
        _1734 = _1563;
        _1735 = _1575;
        _1736 = _1574;
        _1737 = _1573;
        _1738 = _1585;
        _1739 = _1584;
        _1740 = _1583;
        _1741 = _1598;
        _1742 = _1597;
        _1743 = _1596;
        _1744 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
        _1745 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0)));
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)));
    }
    else
    {
        _1732 = _1428;
        _1733 = _1428;
        _1734 = _1428;
        _1735 = _1428;
        _1736 = _1428;
        _1737 = _1428;
        _1738 = _1428;
        _1739 = _1428;
        _1740 = _1428;
        _1741 = _1428;
        _1742 = _1428;
        _1743 = _1428;
        _1744 = 0.0;
        _1745 = 0.0;
        _1746 = 0.0;
    }
    float _1756 = (cbModelParam._m0[1u].x * (_1744 - _1440)) + _1440;
    float _1757 = (cbModelParam._m0[1u].x * (_1745 - _1441)) + _1441;
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1442)) + _1442;
    float _1779 = fma(_1758, cbSceneParam._m0[89u].z, fma(_1757, cbSceneParam._m0[89u].y, _1756 * cbSceneParam._m0[89u].x));
    float _1782 = fma(_1758, cbSceneParam._m0[90u].z, fma(_1757, cbSceneParam._m0[90u].y, _1756 * cbSceneParam._m0[90u].x));
    float _1785 = fma(_1758, cbSceneParam._m0[91u].z, fma(_1757, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1756));
    float _1798 = _1067 * 0.5;
    float _1799 = _1068 * 0.5;
    float _1800 = _1069 * 0.5;
    float _1801 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1804 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1733, _1736, _1739, _1742));
    float _1807 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1732, _1735, _1738, _1741));
    float _1841;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1814 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1427, _1431, _1434, _1437));
        float _1818 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1429, _1432, _1435, _1438));
        float _1822 = dot(vec4(_1798, _1799, _1800, 1.0), vec4(_1430, _1433, _1436, _1439));
        float _1829 = dot(vec4(cbModelParam._m0[39u]), vec4(_1798, _1799, _1800, 1.0));
        _1841 = dot(vec3(isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)), isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)), isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1829) ? 0.0 : (isnan(0.0) ? _1829 : max(0.0, _1829))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1841 = 1.0;
    }
    float _1852;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1843 = dot(vec4(cbModelParam._m0[40u]), vec4(_1798, _1799, _1800, 1.0));
        _1852 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0)), isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1843) ? 0.0 : (isnan(0.0) ? _1843 : max(0.0, _1843))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1852 = 1.0;
    }
    float _1856 = (_1852 * cbModelParam._m0[1u].x) + (_1841 * (1.0 - cbModelParam._m0[1u].x));
    float _1866 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _973);
    float _1867 = isnan(_1866) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1866 : min(cbModelParam._m0[25u].z, _1866));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1916 = fma(_1129, cbModelParam._m0[13u].z, fma(_1125, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1121)) + cbModelParam._m0[13u].w;
        float _1920 = fma(_1129, cbModelParam._m0[14u].z, fma(_1125, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1121)) + cbModelParam._m0[14u].w;
        float _1924 = fma(_1129, cbModelParam._m0[15u].z, fma(_1125, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1121)) + cbModelParam._m0[15u].w;
        float _1927 = fma(_1069, cbModelParam._m0[13u].z, fma(_1068, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1067));
        float _1930 = fma(_1069, cbModelParam._m0[14u].z, fma(_1068, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1067));
        float _1933 = fma(_1069, cbModelParam._m0[15u].z, fma(_1068, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1067));
        float _1961;
        if (_1927 > 0.0)
        {
            _1961 = abs((1.0 - _1916) / _1927);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1916 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1961 = frontier_phi_14_12_ladder;
        }
        float _2187;
        if (_1930 > 0.0)
        {
            _2187 = abs((1.0 - _1920) / _1930);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1920 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2187 = frontier_phi_23_19_ladder;
        }
        float _2444;
        if (_1933 > 0.0)
        {
            _2444 = abs((1.0 - _1924) / _1933);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1933 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1924 + 1.0) / _1933);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2444 = frontier_phi_35_30_ladder;
        }
        float _2446 = isnan(_2187) ? _1961 : (isnan(_1961) ? _2187 : min(_1961, _2187));
        float _2447 = isnan(_2444) ? _2446 : (isnan(_2446) ? _2444 : min(_2446, _2444));
        float _2451 = (_2447 * _1927) + _1916;
        float _2452 = (_2447 * _1930) + _1920;
        float _2453 = (_2447 * _1933) + _1924;
        float _2454 = _2447 * 9.9999997473787516355514526367188e-05;
        float _2456 = (-1.0) - _2454;
        float _2458 = _2454 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2453 > _2458) || ((_2453 < _2456) || ((_2452 > _2458) || ((_2452 < _2456) || ((_2451 < _2456) || (_2451 > _2458))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2453, cbModelParam._m0[9u].z, fma(_2452, cbModelParam._m0[9u].y, _2451 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2453, cbModelParam._m0[10u].z, fma(_2452, cbModelParam._m0[10u].y, _2451 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2453, cbModelParam._m0[11u].z, fma(_2452, cbModelParam._m0[11u].y, _2451 * cbModelParam._m0[11u].x))), _1867);
            frontier_phi_13_35_ladder = _2581.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2581.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2581.x * cbModelParam._m0[1u].y;
        }
        _1949 = frontier_phi_13_35_ladder_2;
        _1951 = frontier_phi_13_35_ladder_1;
        _1953 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1937 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1067, _1068, _1069), _1867);
        _1949 = _1937.x * cbModelParam._m0[1u].y;
        _1951 = _1937.y * cbModelParam._m0[1u].y;
        _1953 = _1937.z * cbModelParam._m0[1u].y;
    }
    float _1957 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _973);
    float _1958 = isnan(_1957) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1957 : min(cbModelParam._m0[25u].w, _1957));
    float _2050;
    float _2052;
    float _2054;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2014 = fma(_1129, cbModelParam._m0[21u].z, fma(_1125, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1121)) + cbModelParam._m0[21u].w;
        float _2018 = fma(_1129, cbModelParam._m0[22u].z, fma(_1125, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1121)) + cbModelParam._m0[22u].w;
        float _2022 = fma(_1129, cbModelParam._m0[23u].z, fma(_1125, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1121)) + cbModelParam._m0[23u].w;
        float _2025 = fma(_1069, cbModelParam._m0[21u].z, fma(_1068, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1067));
        float _2028 = fma(_1069, cbModelParam._m0[22u].z, fma(_1068, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1067));
        float _2031 = fma(_1069, cbModelParam._m0[23u].z, fma(_1068, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1067));
        float _2192;
        if (_2025 > 0.0)
        {
            _2192 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2192 = frontier_phi_25_21_ladder;
        }
        float _2471;
        if (_2028 > 0.0)
        {
            _2471 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2471 = frontier_phi_37_32_ladder;
        }
        float _2684;
        if (_2031 > 0.0)
        {
            _2684 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2684 = frontier_phi_46_43_ladder;
        }
        float _2686 = isnan(_2471) ? _2192 : (isnan(_2192) ? _2471 : min(_2192, _2471));
        float _2687 = isnan(_2684) ? _2686 : (isnan(_2686) ? _2684 : min(_2686, _2684));
        float _2691 = (_2687 * _2025) + _2014;
        float _2692 = (_2687 * _2028) + _2018;
        float _2693 = (_2687 * _2031) + _2022;
        float _2694 = _2687 * 9.9999997473787516355514526367188e-05;
        float _2695 = (-1.0) - _2694;
        float _2697 = _2694 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2693 > _2697) || ((_2693 < _2695) || ((_2692 > _2697) || ((_2692 < _2695) || ((_2691 < _2695) || (_2691 > _2697))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2921 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2693, cbModelParam._m0[17u].z, fma(_2692, cbModelParam._m0[17u].y, _2691 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2693, cbModelParam._m0[18u].z, fma(_2692, cbModelParam._m0[18u].y, _2691 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2693, cbModelParam._m0[19u].z, fma(_2692, cbModelParam._m0[19u].y, _2691 * cbModelParam._m0[19u].x))), _1958);
            frontier_phi_22_46_ladder = _2921.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2921.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2921.x * cbModelParam._m0[1u].z;
        }
        _2050 = frontier_phi_22_46_ladder_2;
        _2052 = frontier_phi_22_46_ladder_1;
        _2054 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1067, _1068, _1069), _1958);
        _2050 = _2034.x * cbModelParam._m0[1u].z;
        _2052 = _2034.y * cbModelParam._m0[1u].z;
        _2054 = _2034.z * cbModelParam._m0[1u].z;
    }
    float _2067 = (((_1092 * _1044) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2050 - _1949)) + _1949);
    float _2069 = (((_1092 * _1046) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2052 - _1951)) + _1951);
    float _2071 = (((_1092 * _1047) + _1093) * _1059) * ((cbModelParam._m0[1u].w * (_2054 - _1953)) + _1953);
    float _2074 = fma(_2071, cbSceneParam._m0[89u].z, fma(_2069, cbSceneParam._m0[89u].y, _2067 * cbSceneParam._m0[89u].x));
    float _2077 = fma(_2071, cbSceneParam._m0[90u].z, fma(_2069, cbSceneParam._m0[90u].y, _2067 * cbSceneParam._m0[90u].x));
    float _2080 = fma(_2071, cbSceneParam._m0[91u].z, fma(_2069, cbSceneParam._m0[91u].y, _2067 * cbSceneParam._m0[91u].x));
    vec4 _2088 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_931, _932));
    float _2090 = _2088.w;
    float _2102 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2090);
    float _2103 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2090);
    float _2104 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2090);
    uvec4 _2108 = floatBitsToUint(cbInstanceData._m0[_986 + 5u]);
    uint _2110 = _2108.x * 14u;
    uint _2111 = _2110 + 13u;
    float _2118 = _1059 + (-1.0);
    float _2123 = (cbLight._m0[_2111].x * _2118) + 1.0;
    float _2124 = (cbLight._m0[_2111].y * _2118) + 1.0;
    float _2125 = (cbLight._m0[_2111].z * _2118) + 1.0;
    float _2126 = (cbLight._m0[_2111].w * _2118) + 1.0;
    uint _2127 = _2110 + 5u;
    float _2133 = isnan(1.0) ? _2124 : (isnan(_2124) ? 1.0 : min(_2124, 1.0));
    uint _2137 = _2110 + 4u;
    float _2146 = isnan(1.0) ? _2123 : (isnan(_2123) ? 1.0 : min(_2123, 1.0));
    uint _2150 = _2110 | 1u;
    float _2161 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_863, _864, _865));
    float _2164 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_863, _864, _865));
    float _4388 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _4399 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2169 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * 0.3183098733425140380859375;
    float _2171 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2178 = ((cbLight._m0[_2127].x * _2133) * _2171) + (((cbLight._m0[_2137].x * _2102) * _2146) * _2169);
    float _2179 = ((_2133 * cbLight._m0[_2127].y) * _2171) + (((cbLight._m0[_2137].y * _2103) * _2146) * _2169);
    float _2180 = ((_2133 * cbLight._m0[_2127].z) * _2171) + (((cbLight._m0[_2137].z * _2104) * _2146) * _2169);
    uvec4 _2184 = floatBitsToUint(cbLight._m0[_2110 + 12u]);
    bool _2186 = _2184.x == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2186)
    {
        _2197 = _2178;
        _2199 = _2179;
        _2201 = _2180;
    }
    else
    {
        uint _2205 = _2110 + 6u;
        float _2221 = (dot(vec3(cbLight._m0[_2110 + 2u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2222 = _2221 * _2221;
        float _4410 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        float _2223 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2224 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2197 = (((cbLight._m0[_2205].x * 0.3183098733425140380859375) * _2223) * _2224) + _2178;
        _2199 = (((cbLight._m0[_2205].y * 0.3183098733425140380859375) * _2223) * _2224) + _2179;
        _2201 = (((cbLight._m0[_2205].z * 0.3183098733425140380859375) * _2223) * _2224) + _2180;
    }
    bool _2204 = _2184.y == 0u;
    float _2242;
    float _2244;
    float _2246;
    if (_2204)
    {
        _2242 = _2197;
        _2244 = _2199;
        _2246 = _2201;
    }
    else
    {
        uint _2415 = _2110 + 7u;
        float _2431 = (dot(vec3(cbLight._m0[_2110 + 3u].xyz), vec3(_863, _864, _865)) * 0.5) + 0.5;
        float _2432 = _2431 * _2431;
        float _4426 = isnan(0.0) ? _2432 : (isnan(_2432) ? 0.0 : max(_2432, 0.0));
        float _2433 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _2434 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2242 = (((cbLight._m0[_2415].x * 0.3183098733425140380859375) * _2433) * _2434) + _2197;
        _2244 = (((cbLight._m0[_2415].y * 0.3183098733425140380859375) * _2433) * _2434) + _2199;
        _2246 = (((cbLight._m0[_2415].z * 0.3183098733425140380859375) * _2433) * _2434) + _2201;
    }
    uint _2249 = _2110 + 8u;
    float _2262 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _973) * 0.949999988079071044921875);
    float _2263 = _2262 * _2262;
    float _2264 = cbLight._m0[_2110].x + _923;
    float _2265 = cbLight._m0[_2110].y + _924;
    float _2266 = cbLight._m0[_2110].z + _925;
    float _2270 = inversesqrt(dot(vec3(_2264, _2265, _2266), vec3(_2264, _2265, _2266)));
    float _2271 = _2270 * _2264;
    float _2272 = _2270 * _2265;
    float _2273 = _2270 * _2266;
    float _2274 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2110].xyz));
    float _4442 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
    float _2277 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _4453 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
    float _2278 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _2279 = dot(vec3(_863, _864, _865), vec3(_2271, _2272, _2273));
    float _4464 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2283 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2271, _2272, _2273));
    float _4475 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2287 = _2263 * _2263;
    float _2291 = ((_2282 * _2282) * (_2287 + (-1.0))) + 1.0;
    float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
    float _2300 = 0.959999978542327880859375 - _1041;
    float _2302 = 0.959999978542327880859375 - _1042;
    float _2303 = 0.959999978542327880859375 - _1043;
    float _2310 = 1.0 - _2263;
    float _2321 = (0.5 / (((_2278 * ((_2277 * _2310) + _2263)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2310) + _2263) * _2277))) * _2277;
    float _4486 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
    float _2323 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2287 / ((_2291 * _2291) * 3.141590118408203125));
    uint _2337 = _2110 + 9u;
    float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2150].w)) * _973) * 0.949999988079071044921875);
    float _2349 = _2348 * _2348;
    float _2350 = cbLight._m0[_2150].x + _923;
    float _2351 = cbLight._m0[_2150].y + _924;
    float _2352 = cbLight._m0[_2150].z + _925;
    float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
    float _2357 = _2356 * _2350;
    float _2358 = _2356 * _2351;
    float _2359 = _2356 * _2352;
    float _2360 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2150].xyz));
    float _4497 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
    float _2363 = isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0));
    float _2364 = dot(vec3(_863, _864, _865), vec3(_2357, _2358, _2359));
    float _4508 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2367 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2368 = dot(vec3(cbLight._m0[_2150].xyz), vec3(_2357, _2358, _2359));
    float _4519 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
    float _2372 = _2349 * _2349;
    float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
    float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0)))) * 5.0);
    float _2390 = 1.0 - _2349;
    float _2400 = (0.5 / (((_2278 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2390) + _2349) * _2363))) * _2363;
    float _4530 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2402 = (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
    float _2412 = (((((_2383 * _2300) + _1044) * cbLight._m0[_2337].x) * _2402) * _2133) + ((((cbLight._m0[_2249].x * _2102) * ((_2299 * _2300) + _1044)) * _2323) * _2146);
    float _2413 = (((((_2383 * _2302) + _1046) * cbLight._m0[_2337].y) * _2402) * _2133) + ((((cbLight._m0[_2249].y * _2103) * ((_2299 * _2302) + _1046)) * _2323) * _2146);
    float _2414 = (((((_2383 * _2303) + _1047) * cbLight._m0[_2337].z) * _2402) * _2133) + ((((cbLight._m0[_2249].z * _2104) * ((_2299 * _2303) + _1047)) * _2323) * _2146);
    float _2476;
    float _2478;
    float _2480;
    if (_2186)
    {
        _2476 = _2412;
        _2478 = _2413;
        _2480 = _2414;
    }
    else
    {
        uint _2482 = _2110 + 2u;
        uint _2486 = _2110 + 10u;
        float _2500 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2482].w)) * _973) * 0.949999988079071044921875);
        float _2501 = _2500 * _2500;
        float _2502 = cbLight._m0[_2482].x + _923;
        float _2503 = cbLight._m0[_2482].y + _924;
        float _2504 = cbLight._m0[_2482].z + _925;
        float _2508 = inversesqrt(dot(vec3(_2502, _2503, _2504), vec3(_2502, _2503, _2504)));
        float _2509 = _2508 * _2502;
        float _2510 = _2508 * _2503;
        float _2511 = _2508 * _2504;
        float _2512 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2482].xyz));
        float _4541 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2515 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
        float _2516 = dot(vec3(_863, _864, _865), vec3(_2509, _2510, _2511));
        float _4552 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2519 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2520 = dot(vec3(cbLight._m0[_2482].xyz), vec3(_2509, _2510, _2511));
        float _4563 = isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0));
        float _2524 = _2501 * _2501;
        float _2528 = ((_2519 * _2519) * (_2524 + (-1.0))) + 1.0;
        float _2535 = exp2(log2(1.0 - (isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0)))) * 5.0);
        float _2542 = 1.0 - _2501;
        float _2552 = (0.5 / (((_2278 * ((_2515 * _2542) + _2501)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2542) + _2501) * _2515))) * _2515;
        float _4574 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0));
        float _2554 = (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))) * (_2524 / ((_2528 * _2528) * 3.141590118408203125));
        float _2555 = isnan(1.0) ? _2125 : (isnan(_2125) ? 1.0 : min(_2125, 1.0));
        _2476 = (((((_2535 * _2300) + _1044) * cbLight._m0[_2486].x) * _2554) * _2555) + _2412;
        _2478 = (((((_2535 * _2302) + _1046) * cbLight._m0[_2486].y) * _2554) * _2555) + _2413;
        _2480 = (((((_2535 * _2303) + _1047) * cbLight._m0[_2486].z) * _2554) * _2555) + _2414;
    }
    float _2590;
    float _2592;
    float _2594;
    if (_2204)
    {
        _2590 = _2476;
        _2592 = _2478;
        _2594 = _2480;
    }
    else
    {
        uint _2601 = _2110 + 3u;
        uint _2605 = _2110 + 11u;
        float _2619 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2601].w)) * _973) * 0.949999988079071044921875);
        float _2620 = _2619 * _2619;
        float _2621 = cbLight._m0[_2601].x + _923;
        float _2622 = cbLight._m0[_2601].y + _924;
        float _2623 = cbLight._m0[_2601].z + _925;
        float _2627 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
        float _2628 = _2627 * _2621;
        float _2629 = _2627 * _2622;
        float _2630 = _2627 * _2623;
        float _2631 = dot(vec3(_863, _864, _865), vec3(cbLight._m0[_2601].xyz));
        float _4590 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2634 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
        float _2635 = dot(vec3(_863, _864, _865), vec3(_2628, _2629, _2630));
        float _4601 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
        float _2638 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2639 = dot(vec3(cbLight._m0[_2601].xyz), vec3(_2628, _2629, _2630));
        float _4612 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
        float _2643 = _2620 * _2620;
        float _2647 = ((_2638 * _2638) * (_2643 + (-1.0))) + 1.0;
        float _2654 = exp2(log2(1.0 - (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0)))) * 5.0);
        float _2661 = 1.0 - _2620;
        float _2671 = (0.5 / (((_2278 * ((_2634 * _2661) + _2620)) + 9.9999999392252902907785028219223e-09) + (((_2278 * _2661) + _2620) * _2634))) * _2634;
        float _4623 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2673 = (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2643 / ((_2647 * _2647) * 3.141590118408203125));
        float _2674 = isnan(1.0) ? _2126 : (isnan(_2126) ? 1.0 : min(_2126, 1.0));
        _2590 = (((((_2654 * _2300) + _1044) * cbLight._m0[_2605].x) * _2673) * _2674) + _2476;
        _2592 = (((((_2654 * _2302) + _1046) * cbLight._m0[_2605].y) * _2673) * _2674) + _2478;
        _2594 = (((((_2654 * _2303) + _1047) * cbLight._m0[_2605].z) * _2673) * _2674) + _2480;
    }
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    float _2817;
    float _2819;
    if (_2108.y == 0u)
    {
        float _2749 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2750 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2749;
        float _2751 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2749;
        float _2752 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2749;
        uvec4 _2764 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2765 = _2764.x;
        uint _2776 = uint((float(_2764.y) * floor(float(uint(cbSceneParam._m0[85u].y * _932) / _2765))) + floor(float(uint(cbSceneParam._m0[85u].x * _931) / _2765)));
        float _2786 = (log2(_2752 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2787 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        uint _2790 = uint(isnan(14.0) ? _2787 : (isnan(_2787) ? 14.0 : min(_2787, 14.0)));
        uvec4 _2795 = texelFetch(g_lightClusterGridBuffer, int(((_2790 << 2u) + (_2776 << 6u)) >> 2u));
        uint _2796 = _2795.x;
        uint _2797 = _2764.z;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        float _2934;
        float _2936;
        if (((((1u << ((_2797 >> 4u) & 15u)) + 4294967295u) & _2796) == 0u) || ((_2797 & 240u) == 0u))
        {
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
            _2934 = 0.0;
            _2936 = 0.0;
        }
        else
        {
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _2935;
            float _2937;
            float _3079 = 0.0;
            float _3080 = 0.0;
            float _3081 = 0.0;
            float _3082 = 0.0;
            float _3083 = 0.0;
            float _3084 = 0.0;
            uint _3085 = 0u;
            uint _3094;
            bool _3095;
            for (;;)
            {
                _3094 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3085 << 2u)) >> 2u)).x;
                _3095 = _3094 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3095)
                {
                    frontier_phi_61_pred = _3079;
                    frontier_phi_61_pred_1 = _3084;
                    frontier_phi_61_pred_2 = _3083;
                    frontier_phi_61_pred_3 = _3082;
                    frontier_phi_61_pred_4 = _3081;
                    frontier_phi_61_pred_5 = _3080;
                }
                else
                {
                    float _3203;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    uint _3209;
                    _3203 = _3079;
                    _3204 = _3080;
                    _3205 = _3081;
                    _3206 = _3082;
                    _3207 = _3083;
                    _3208 = _3084;
                    _3209 = _3094;
                    float _3135;
                    float _3136;
                    float _3137;
                    float _3138;
                    float _3139;
                    float _3140;
                    for (;;)
                    {
                        uint _3213 = uint(findLSB(_3209)) + (_3085 << 5u);
                        uint _3210 = (_3209 + 4294967295u) & _3209;
                        uint _3215 = _3213 * 48u;
                        vec4 _3229 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3235 = (_3213 * 48u) + 4u;
                        vec4 _3248 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3235)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3235 + 3u)).x));
                        uint _3254 = (_3213 * 48u) + 8u;
                        vec3 _3265 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x));
                        float _3269 = _3229.x - _2750;
                        float _3270 = _3229.y - _2751;
                        float _3271 = _3229.z - _2752;
                        float _3272 = dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271));
                        float _3275 = inversesqrt(_3272);
                        float _3276 = _3275 * _3269;
                        float _3277 = _3275 * _3270;
                        float _3278 = _3275 * _3271;
                        float _3279 = dot(vec3(_954, _957, _960), vec3(_3276, _3277, _3278));
                        float _3284 = 1.0 - (_3272 * _3229.w);
                        float _4649 = isnan(0.0) ? _3284 : (isnan(_3284) ? 0.0 : max(_3284, 0.0));
                        float _3285 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
                        float _3286 = sqrt(_3272) * _3248.w;
                        float _3289 = 1.39999997615814208984375 / (_3286 + 1.39999997615814208984375);
                        float _3290 = _3289 * _3289;
                        float _3293 = ((1.0 - _3290) * _3279) + _3290;
                        float _3296 = _3286 * _3286;
                        float _3300 = ((isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0))) * _3285) / ((_3296 * 0.699999988079071044921875) + 1.0);
                        float _3304 = (-0.0) - _2750;
                        float _3305 = (-0.0) - _2751;
                        float _3306 = (-0.0) - _2752;
                        float _3310 = inversesqrt(dot(vec3(_3304, _3305, _3306), vec3(_3304, _3305, _3306)));
                        float _3311 = _3310 * _3304;
                        float _3312 = _3310 * _3305;
                        float _3313 = _3310 * _3306;
                        float _3321 = exp2(log2(1.0 / ((_3296 * 3.5) + 5.0)) * 0.25);
                        float _3322 = 1.0 - _1075;
                        float _3329 = sqrt(1.0 - ((1.0 - (_3322 * _3322)) * (1.0 - (_3321 * _3321))));
                        float _3330 = _3329 * _3329;
                        float _3331 = _3330 * _3330;
                        float _3332 = _3311 + _3276;
                        float _3333 = _3312 + _3277;
                        float _3334 = _3313 + _3278;
                        float _3338 = inversesqrt(dot(vec3(_3332, _3333, _3334), vec3(_3332, _3333, _3334)));
                        float _3342 = dot(vec3(_954, _957, _960), vec3(_3311, _3312, _3313));
                        float _4665 = isnan(0.0) ? _3342 : (isnan(_3342) ? 0.0 : max(_3342, 0.0));
                        float _3345 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
                        float _3346 = dot(vec3(_954, _957, _960), vec3(_3338 * _3332, _3338 * _3333, _3338 * _3334));
                        float _4676 = isnan(0.0) ? _3346 : (isnan(_3346) ? 0.0 : max(_3346, 0.0));
                        float _3349 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3353 = ((_3349 * _3349) * (_3331 + (-1.0))) + 1.0;
                        float _3354 = _3289 * _3330;
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3279) + _3355;
                        float _4687 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
                        float _3359 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3360 = 1.0 - _3330;
                        float _3370 = (0.5 / (((_3359 * ((_3345 * _3360) + _3330)) + 9.9999999392252902907785028219223e-09) + (((_3359 * _3360) + _3330) * _3345))) * _3359;
                        float _4698 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3381 = (((_3331 * 3.1415927410125732421875) * (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) / ((_3353 * _3353) * ((_3296 * 2.1991131305694580078125) + 3.141590118408203125))) * _3285;
                        _3138 = (_3300 * _3248.x) + _3206;
                        _3139 = (_3300 * _3248.y) + _3207;
                        _3140 = (_3300 * _3248.z) + _3208;
                        _3135 = (_3381 * _3265.x) + _3203;
                        _3136 = (_3381 * _3265.y) + _3204;
                        _3137 = (_3381 * _3265.z) + _3205;
                        if (_3210 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3203 = _3135;
                            _3204 = _3136;
                            _3205 = _3137;
                            _3206 = _3138;
                            _3207 = _3139;
                            _3208 = _3140;
                            _3209 = _3210;
                        }
                    }
                    frontier_phi_61_pred = _3135;
                    frontier_phi_61_pred_1 = _3140;
                    frontier_phi_61_pred_2 = _3139;
                    frontier_phi_61_pred_3 = _3138;
                    frontier_phi_61_pred_4 = _3137;
                    frontier_phi_61_pred_5 = _3136;
                }
                _2927 = frontier_phi_61_pred;
                _2937 = frontier_phi_61_pred_1;
                _2935 = frontier_phi_61_pred_2;
                _2933 = frontier_phi_61_pred_3;
                _2931 = frontier_phi_61_pred_4;
                _2929 = frontier_phi_61_pred_5;
                uint _3086 = _3085 + 1u;
                if (_3086 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3079 = _2927;
                    _3080 = _2929;
                    _3081 = _2931;
                    _3082 = _2933;
                    _3083 = _2935;
                    _3084 = _2937;
                    _3085 = _3086;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
            _2934 = _2935;
            _2936 = _2937;
        }
        uvec4 _2940 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2941 = _2940.z;
        uint _2943 = (_2941 >> 8u) & 15u;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        if (((4294967295u << _2943) & _2796) == 0u)
        {
            _3047 = _2926;
            _3049 = _2928;
            _3051 = _2930;
            _3053 = _2932;
            _3055 = _2934;
            _3057 = _2936;
        }
        else
        {
            float _3072 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
            float _3073 = _3072 * _2750;
            float _3074 = _3072 * _2751;
            float _3075 = _3072 * _2752;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2943 < ((_2941 >> 12u) & 15u))
            {
                float _3048;
                float _3050;
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3186 = _2926;
                float _3187 = _2928;
                float _3188 = _2930;
                float _3189 = _2932;
                float _3190 = _2934;
                float _3191 = _2936;
                uint _3192 = _2943;
                uint _3201;
                bool _3202;
                for (;;)
                {
                    _3201 = texelFetch(g_lightClassification, int((((_2790 << 5u) + (_2776 << 9u)) + (_3192 << 2u)) >> 2u)).x;
                    _3202 = _3201 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3202)
                    {
                        frontier_phi_67_pred = _3189;
                        frontier_phi_67_pred_1 = _3190;
                        frontier_phi_67_pred_2 = _3191;
                        frontier_phi_67_pred_3 = _3188;
                        frontier_phi_67_pred_4 = _3187;
                        frontier_phi_67_pred_5 = _3186;
                    }
                    else
                    {
                        float _3386;
                        float _3387;
                        float _3388;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3680;
                        float _3681;
                        float _3682;
                        float _3683;
                        float _3684;
                        float _3685;
                        float _3399 = _3186;
                        float _3400 = _3187;
                        float _3401 = _3188;
                        float _3402 = _3189;
                        float _3403 = _3190;
                        float _3404 = _3191;
                        uint _3405 = _3201;
                        uint _3406;
                        vec4 _3431;
                        float _3432;
                        vec4 _3447;
                        vec3 _3459;
                        vec4 _3475;
                        vec4 _3490;
                        float _3536;
                        bool _3537;
                        for (;;)
                        {
                            uint _3416 = ((_3192 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3405));
                            _3406 = (_3405 + 4294967295u) & _3405;
                            uint _3418 = _3416 * 40u;
                            _3431 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3418)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3418 + 3u)).x));
                            _3432 = _3431.w;
                            uint _3434 = (_3416 * 40u) + 4u;
                            _3447 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3434)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3434 + 3u)).x));
                            uint _3449 = (_3416 * 40u) + 8u;
                            _3459 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3449 + 2u)).x));
                            uint _3462 = (_3416 * 40u) + 16u;
                            _3475 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3462)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3462 + 3u)).x));
                            uint _3477 = (_3416 * 40u) + 20u;
                            _3490 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3477)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3477 + 3u)).x));
                            uint _3492 = (_3416 * 40u) + 24u;
                            vec4 _3505 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3492)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3492 + 3u)).x));
                            uint _3511 = (_3416 * 40u) + 28u;
                            vec4 _3524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3511 + 3u)).x));
                            _3536 = fma(_2752, _3524.z, fma(_2751, _3524.y, _3524.x * _2750)) + _3524.w;
                            _3537 = !((fma(_2752, _3505.z, fma(_2751, _3505.y, _3505.x * _2750)) + _3505.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3537)
                            {
                                float _3564 = _3431.x - _2750;
                                float _3565 = _3431.y - _2751;
                                float _3566 = _3431.z - _2752;
                                float _3567 = dot(vec3(_3564, _3565, _3566), vec3(_3564, _3565, _3566));
                                float _3570 = inversesqrt(_3567);
                                float _3571 = _3570 * _3564;
                                float _3572 = _3570 * _3565;
                                float _3573 = _3570 * _3566;
                                float _3577 = 1.0 - (_3567 / (_3432 * _3432));
                                float _4709 = isnan(0.0) ? _3577 : (isnan(_3577) ? 0.0 : max(_3577, 0.0));
                                float _3578 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3582 = sqrt(_3567) * _3447.w;
                                float _3584 = 1.39999997615814208984375 / (_3582 + 1.39999997615814208984375);
                                float _3585 = _3584 * _3584;
                                float _3588 = ((1.0 - _3585) * dot(vec3(_3571, _3572, _3573), vec3(_954, _957, _960))) + _3585;
                                float _3591 = _3582 * _3582;
                                float _3595 = (fma(_2752, _3475.z, fma(_2751, _3475.y, _3475.x * _2750)) + _3475.w) / _3536;
                                float _3596 = (fma(_2752, _3490.z, fma(_2751, _3490.y, _3490.x * _2750)) + _3490.w) / _3536;
                                float _3600 = 1.0 - dot(vec2(_3595, _3596), vec2(_3595, _3596));
                                float _4725 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3602 = _3601 * (((isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0))) * _3578) / ((_3591 * 0.699999988079071044921875) + 1.0));
                                float _3614 = exp2(log2(1.0 / ((_3591 * 3.5) + 5.0)) * 0.25);
                                float _3615 = 1.0 - _1075;
                                float _3622 = sqrt(1.0 - ((1.0 - (_3615 * _3615)) * (1.0 - (_3614 * _3614))));
                                float _3623 = _3622 * _3622;
                                float _3624 = _3623 * _3623;
                                float _3625 = _3571 - _3073;
                                float _3626 = _3572 - _3074;
                                float _3627 = _3573 - _3075;
                                float _3631 = inversesqrt(dot(vec3(_3625, _3626, _3627), vec3(_3625, _3626, _3627)));
                                float _3635 = dot(vec3(_954, _957, _960), vec3((-0.0) - _3073, (-0.0) - _3074, (-0.0) - _3075));
                                float _4736 = isnan(0.0) ? _3635 : (isnan(_3635) ? 0.0 : max(_3635, 0.0));
                                float _3638 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3639 = dot(vec3(_954, _957, _960), vec3(_3631 * _3625, _3631 * _3626, _3631 * _3627));
                                float _4747 = isnan(0.0) ? _3639 : (isnan(_3639) ? 0.0 : max(_3639, 0.0));
                                float _3642 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3646 = ((_3642 * _3642) * (_3624 + (-1.0))) + 1.0;
                                float _3647 = _3584 * _3623;
                                float _3648 = _3647 * _3647;
                                float _3654 = ((1.0 - _3648) * dot(vec3(_954, _957, _960), vec3(_3571, _3572, _3573))) + _3648;
                                float _4758 = isnan(0.0) ? _3654 : (isnan(_3654) ? 0.0 : max(_3654, 0.0));
                                float _3655 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3656 = 1.0 - _3623;
                                float _3666 = (0.5 / (((_3655 * ((_3638 * _3656) + _3623)) + 9.9999999392252902907785028219223e-09) + (((_3655 * _3656) + _3623) * _3638))) * _3655;
                                float _4769 = isnan(0.0) ? _3666 : (isnan(_3666) ? 0.0 : max(_3666, 0.0));
                                float _3676 = (_3601 * _3578) * (((_3624 * 3.1415927410125732421875) * (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) / ((_3646 * _3646) * ((_3591 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3676 * _3459.x;
                                frontier_phi_73_pred_1 = _3676 * _3459.y;
                                frontier_phi_73_pred_2 = _3602 * _3447.z;
                                frontier_phi_73_pred_3 = _3602 * _3447.y;
                                frontier_phi_73_pred_4 = _3602 * _3447.x;
                                frontier_phi_73_pred_5 = _3676 * _3459.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3680 = frontier_phi_73_pred;
                            _3681 = frontier_phi_73_pred_1;
                            _3685 = frontier_phi_73_pred_2;
                            _3684 = frontier_phi_73_pred_3;
                            _3683 = frontier_phi_73_pred_4;
                            _3682 = frontier_phi_73_pred_5;
                            _3389 = _3683 + _3402;
                            _3390 = _3684 + _3403;
                            _3391 = _3685 + _3404;
                            _3386 = _3680 + _3399;
                            _3387 = _3681 + _3400;
                            _3388 = _3682 + _3401;
                            if (_3406 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3399 = _3386;
                                _3400 = _3387;
                                _3401 = _3388;
                                _3402 = _3389;
                                _3403 = _3390;
                                _3404 = _3391;
                                _3405 = _3406;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3389;
                        frontier_phi_67_pred_1 = _3390;
                        frontier_phi_67_pred_2 = _3391;
                        frontier_phi_67_pred_3 = _3388;
                        frontier_phi_67_pred_4 = _3387;
                        frontier_phi_67_pred_5 = _3386;
                    }
                    _3054 = frontier_phi_67_pred;
                    _3056 = frontier_phi_67_pred_1;
                    _3058 = frontier_phi_67_pred_2;
                    _3052 = frontier_phi_67_pred_3;
                    _3050 = frontier_phi_67_pred_4;
                    _3048 = frontier_phi_67_pred_5;
                    uint _3193 = _3192 + 1u;
                    if (_3193 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3186 = _3048;
                        _3187 = _3050;
                        _3188 = _3052;
                        _3189 = _3054;
                        _3190 = _3056;
                        _3191 = _3058;
                        _3192 = _3193;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3056;
                frontier_phi_55_56_ladder_1 = _3058;
                frontier_phi_55_56_ladder_2 = _3054;
                frontier_phi_55_56_ladder_3 = _3052;
                frontier_phi_55_56_ladder_4 = _3050;
                frontier_phi_55_56_ladder_5 = _3048;
            }
            else
            {
                frontier_phi_55_56_ladder = _2934;
                frontier_phi_55_56_ladder_1 = _2936;
                frontier_phi_55_56_ladder_2 = _2932;
                frontier_phi_55_56_ladder_3 = _2930;
                frontier_phi_55_56_ladder_4 = _2928;
                frontier_phi_55_56_ladder_5 = _2926;
            }
            _3047 = frontier_phi_55_56_ladder_5;
            _3049 = frontier_phi_55_56_ladder_4;
            _3051 = frontier_phi_55_56_ladder_3;
            _3053 = frontier_phi_55_56_ladder_2;
            _3055 = frontier_phi_55_56_ladder;
            _3057 = frontier_phi_55_56_ladder_1;
        }
        float _3062 = isnan(1.0) ? _1059 : (isnan(_1059) ? 1.0 : min(_1059, 1.0));
        _2809 = (_3062 * _3053) + _2242;
        _2811 = (_3062 * _3055) + _2244;
        _2813 = (_3062 * _3057) + _2246;
        _2815 = ((_3047 * _1044) * _3062) + _2590;
        _2817 = ((_3049 * _1046) * _3062) + _2592;
        _2819 = ((_3051 * _1047) * _3062) + _2594;
    }
    else
    {
        _2809 = _2242;
        _2811 = _2244;
        _2813 = _2246;
        _2815 = _2590;
        _2817 = _2592;
        _2819 = _2594;
    }
    uint _2825 = _988 + uint(cbMatDynParam._m0[0u].w);
    float _2831 = cbInstanceData._m0[_2825].x * ((((cbMtdParam._m0[22u].x * _778.x) * cbMtdParam._m0[32u].x) * _799) + _566);
    float _2832 = cbInstanceData._m0[_2825].y * ((((cbMtdParam._m0[22u].y * _778.y) * cbMtdParam._m0[32u].x) * _799) + _567);
    float _2833 = cbInstanceData._m0[_2825].z * ((((cbMtdParam._m0[22u].z * _778.z) * cbMtdParam._m0[32u].x) * _799) + _568);
    float _4785 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
    float _4796 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _4807 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _2850 = (((isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (_2809 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1059))) + ((_2815 + ((isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0))) * _1856)) * cbPerFrame._m0[3u].x)) + _2831;
    float _2852 = (_2832 + ((_2817 + ((isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0))) * _1856)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2811 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1059)));
    float _2854 = (_2833 + ((_2819 + ((isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0))) * _1856)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2813 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1059)));
    float _4833 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2867 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
    uint _2868 = _986 + 6u;
    float _2876 = _931 / cbSceneParam._m0[86u].x;
    float _2877 = _932 / cbSceneParam._m0[86u].y;
    vec4 _2891 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, (log2((isnan(cbSceneParam._m0[77u].w) ? _886 : (isnan(_886) ? cbSceneParam._m0[77u].w : min(_886, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2893 = _2891.x;
    float _2894 = _2891.y;
    float _2895 = _2891.z;
    float _2896 = _2891.w;
    float _2988;
    float _2990;
    float _2992;
    float _2994;
    if (_886 > cbSceneParam._m0[78u].w)
    {
        float _2951 = isnan(_886) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _886 : min(cbSceneParam._m0[80u].w, _886));
        float _2952 = _2951 / _886;
        float _2963 = _2952 * _916;
        float _2964 = _917 * _2952;
        float _2965 = (-0.0) - _2964;
        float _2966 = _2952 * _918;
        float _2968 = (cbSceneParam._m0[77u].w * _2965) / _2951;
        float _2969 = _2968 + cbSceneParam._m0[79u].w;
        float _2970 = cbSceneParam._m0[79u].w - _2964;
        float _2976 = sqrt(((_2963 * _2963) + (_2964 * _2964)) + (_2966 * _2966));
        float _2979 = (1.0 - (cbSceneParam._m0[77u].w / _2951)) * _2976;
        float _2984 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2986 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3148;
        if (abs((_2965 - _2968) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3148 = ((((_2969 > 0.0) ? exp2(_2984 * _2969) : (2.0 - exp2(_2986 * _2969))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2979;
        }
        else
        {
            float _3108 = 1.0 / cbSceneParam._m0[80u].x;
            float _3109 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : max(_2969, _2970));
            float _3110 = isnan(_2970) ? _2969 : (isnan(_2969) ? _2970 : min(_2969, _2970));
            float _3119 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : min(_3109, 0.0));
            float _3120 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : min(_3110, 0.0));
            _3148 = ((abs(_2976 / _2965) * cbSceneParam._m0[80u].y) * ((((_3119 - _3120) * 2.0) - ((exp2(_2984 * (isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0)))) - exp2(_2984 * (isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))))) * _3108)) - ((exp2(_2986 * _3119) - exp2(_2986 * _3120)) * _3108))) + (_2979 * cbSceneParam._m0[80u].z);
        }
        vec4 _3150 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2876, _2877, 1.0), 0.0);
        float _3159 = exp2((_3148 * (-1.44269502162933349609375)) * (1.0 - _3150.w));
        float _3160 = log2(_3159);
        float _3176 = log2(_2896);
        _2988 = (exp2(_3176 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].x)) * _3150.x) / cbSceneParam._m0[78u].x)) + _2893;
        _2990 = (exp2(_3176 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].y)) * _3150.y) / cbSceneParam._m0[78u].y)) + _2894;
        _2992 = (exp2(_3176 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3160 * cbSceneParam._m0[78u].z)) * _3150.z) / cbSceneParam._m0[78u].z)) + _2895;
        _2994 = _3159 * _2896;
    }
    else
    {
        _2988 = _2893;
        _2990 = _2894;
        _2992 = _2895;
        _2994 = _2896;
    }
    float _3006 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3007 = _3006 == 3.0;
    float _3008 = log2(_2994);
    float _3012 = exp2(_3008 * cbSceneParam._m0[78u].x);
    float _3013 = exp2(_3008 * cbSceneParam._m0[78u].y);
    float _3014 = exp2(_3008 * cbSceneParam._m0[78u].z);
    float _3015 = _3012 * (isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0)));
    float _3016 = _3013 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)));
    float _3017 = _3014 * (isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0)));
    float _3026 = (_3006 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3026 * (_3007 ? _3015 : (_3015 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.y = _3026 * (_3007 ? _3016 : (_3016 + (cbSceneParam._m0[72u].w * _2990)));
    SV_Target.z = _3026 * (_3007 ? _3017 : (_3017 + (cbSceneParam._m0[72u].w * _2992)));
    SV_Target.w = cbInstanceData._m0[_2868].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2831) * _2867) * _3012) * _3026;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2832) * _2867) * _3013) * _3026;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2833) * _2867) * _3014) * _3026;
    SV_Target_1.w = cbInstanceData._m0[_2868].w;
}


