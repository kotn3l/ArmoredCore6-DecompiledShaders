#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1657;
float _4091;
float _4092;
float _4093;
float _4094;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _239 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _240 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _241 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _247 = inversesqrt(dot(vec3(_239, _240, _241), vec3(_239, _240, _241)));
    float _254 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _261 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _285 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _292 = log2(0.0);
    float _294 = exp2(_292 * cbMtdParam._m0[31u].z);
    float _298 = _294 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _294);
    float _299 = _294 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _294);
    float _300 = _294 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _294);
    float _301 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _302 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _303 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _304 = isnan(1.0) ? _301 : (isnan(_301) ? 1.0 : min(_301, 1.0));
    float _306 = isnan(1.0) ? _302 : (isnan(_302) ? 1.0 : min(_302, 1.0));
    float _307 = isnan(1.0) ? _303 : (isnan(_303) ? 1.0 : min(_303, 1.0));
    vec4 _323 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _327 = _323.z;
    float _328 = _323.w;
    float _329 = 1.0 - _328;
    float _336 = exp2(log2((1.0 - (_329 * _327)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _337 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _338 = isnan(1.0) ? _337 : (isnan(_337) ? 1.0 : min(_337, 1.0));
    float _350 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_329 * _329) * _327))) * cbMtdParam._m0[34u].w);
    float _351 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    vec4 _365 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _368 = _365.y;
    float _371 = (_368 * ((isnan(1.0) ? _351 : (isnan(_351) ? 1.0 : min(_351, 1.0))) - _328)) + _328;
    vec4 _383 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = cbMtdParam._m0[12u].x;
    _206[0u] = cbMtdParam._m0[12u].y;
    _207[0u] = cbMtdParam._m0[12u].z;
    _205[1u] = cbMtdParam._m0[13u].x;
    _206[1u] = cbMtdParam._m0[13u].y;
    _207[1u] = cbMtdParam._m0[13u].z;
    _205[2u] = cbMtdParam._m0[14u].x;
    _206[2u] = cbMtdParam._m0[14u].y;
    _207[2u] = cbMtdParam._m0[14u].z;
    _205[3u] = cbMtdParam._m0[15u].x;
    _206[3u] = cbMtdParam._m0[15u].y;
    _207[3u] = cbMtdParam._m0[15u].z;
    _205[4u] = cbMtdParam._m0[16u].x;
    _206[4u] = cbMtdParam._m0[16u].y;
    _207[4u] = cbMtdParam._m0[16u].z;
    _205[5u] = cbMtdParam._m0[11u].x;
    _206[5u] = cbMtdParam._m0[11u].y;
    _207[5u] = cbMtdParam._m0[11u].z;
    float _451 = (_365.x + (-0.02500000037252902984619140625)) * 8.0;
    float _453 = roundEven(_451);
    float _454 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _457 = uint(int(isnan(5.0) ? _454 : (isnan(_454) ? 5.0 : min(_454, 5.0))));
    float _212[6];
    float _213[6];
    float _214[6];
    _212[0u] = 1.0;
    _213[0u] = 1.0;
    _214[0u] = 1.0;
    _212[1u] = cbMtdParam._m0[23u].x;
    _213[1u] = cbMtdParam._m0[23u].y;
    _214[1u] = cbMtdParam._m0[23u].z;
    _212[2u] = cbMtdParam._m0[21u].x;
    _213[2u] = cbMtdParam._m0[21u].y;
    _214[2u] = cbMtdParam._m0[21u].z;
    _212[3u] = cbMtdParam._m0[19u].x;
    _213[3u] = cbMtdParam._m0[19u].y;
    _214[3u] = cbMtdParam._m0[19u].z;
    _212[4u] = cbMtdParam._m0[18u].x;
    _213[4u] = cbMtdParam._m0[18u].y;
    _214[4u] = cbMtdParam._m0[18u].z;
    _212[5u] = cbMtdParam._m0[17u].x;
    _213[5u] = cbMtdParam._m0[17u].y;
    _214[5u] = cbMtdParam._m0[17u].z;
    float _547 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[38u].w * TEXCOORD.x) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[39u].x * TEXCOORD.y) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _548 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    uint _550 = uint(int(isnan(5.0) ? _548 : (isnan(_548) ? 5.0 : min(_548, 5.0))));
    float _208[6];
    _208[0u] = 1.0;
    _208[1u] = cbMtdParam._m0[23u].w;
    _208[2u] = cbMtdParam._m0[21u].w;
    _208[3u] = cbMtdParam._m0[19u].w;
    _208[4u] = cbMtdParam._m0[18u].w;
    _208[5u] = cbMtdParam._m0[17u].w;
    float _587 = ((((_205[_457] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_212[_550] - _205[_457])) * _208[_457])) * _368) + cbMtdParam._m0[10u].x) * _383.x;
    float _588 = ((((_206[_457] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_213[_550] - _206[_457])) * _208[_457])) * _368) + cbMtdParam._m0[10u].y) * _383.y;
    float _589 = ((((_207[_457] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_214[_550] - _207[_457])) * _208[_457])) * _368) + cbMtdParam._m0[10u].z) * _383.z;
    vec4 _601 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _621 = (((cbMtdParam._m0[9u].x * _601.x) - _587) * _371) + _587;
    float _622 = (((cbMtdParam._m0[9u].y * _601.y) - _588) * _371) + _588;
    float _623 = (((cbMtdParam._m0[9u].z * _601.z) - _589) * _371) + _589;
    vec4 _635 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _655 = (((cbMtdParam._m0[20u].x * _635.x) - _621) * _338) + _621;
    float _656 = (((cbMtdParam._m0[20u].y * _635.y) - _622) * _338) + _622;
    float _657 = (((cbMtdParam._m0[20u].z * _635.z) - _623) * _338) + _623;
    vec4 _670 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = cbMtdParam._m0[24u].x;
    _210[0u] = cbMtdParam._m0[24u].y;
    _211[0u] = cbMtdParam._m0[24u].z;
    _209[1u] = cbMtdParam._m0[25u].x;
    _210[1u] = cbMtdParam._m0[25u].y;
    _211[1u] = cbMtdParam._m0[25u].z;
    _209[2u] = cbMtdParam._m0[26u].x;
    _210[2u] = cbMtdParam._m0[26u].y;
    _211[2u] = cbMtdParam._m0[26u].z;
    _209[3u] = cbMtdParam._m0[27u].x;
    _210[3u] = cbMtdParam._m0[27u].y;
    _211[3u] = cbMtdParam._m0[27u].z;
    _209[4u] = cbMtdParam._m0[28u].x;
    _210[4u] = cbMtdParam._m0[28u].y;
    _211[4u] = cbMtdParam._m0[28u].z;
    _209[5u] = cbMtdParam._m0[29u].x;
    _210[5u] = cbMtdParam._m0[29u].y;
    _211[5u] = cbMtdParam._m0[29u].z;
    float _757 = _209[_457] * _368;
    float _758 = _210[_457] * _368;
    float _759 = _211[_457] * _368;
    float _760 = _757 + ((_285.x * 4.5) * ((((cbMtdParam._m0[30u].x * _670.x) - _655) * _304) + _655));
    float _761 = _758 + ((_285.y * 4.5) * ((((cbMtdParam._m0[30u].y * _670.y) - _656) * _306) + _656));
    float _762 = _759 + ((_285.z * 4.5) * ((((cbMtdParam._m0[30u].z * _670.z) - _657) * _307) + _657));
    float _200[5];
    float _201[5];
    _200[0u] = cbMtdParam._m0[35u].y;
    _201[0u] = cbMtdParam._m0[35u].z;
    _200[1u] = cbMtdParam._m0[36u].w;
    _201[1u] = cbMtdParam._m0[37u].x;
    _200[2u] = cbMtdParam._m0[37u].y;
    _201[2u] = cbMtdParam._m0[37u].z;
    _200[3u] = cbMtdParam._m0[37u].w;
    _201[3u] = cbMtdParam._m0[38u].x;
    _200[4u] = cbMtdParam._m0[38u].y;
    _201[4u] = cbMtdParam._m0[38u].z;
    float _790 = roundEven(5.0 - _451);
    float _791 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _792 = isnan(4.0) ? _791 : (isnan(_791) ? 4.0 : min(_791, 4.0));
    float _794 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
    uint _796 = uint(int(isnan(4.0) ? _794 : (isnan(_794) ? 4.0 : min(_794, 4.0))));
    float _805 = ((cbMtdParam._m0[39u].z - _201[_796]) * _371) + _201[_796];
    float _813 = ((cbMtdParam._m0[40u].x - _805) * _338) + _805;
    float _818 = ((cbMtdParam._m0[40u].z - _813) * _304) + _813;
    vec4 _832 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _834 = _832.x;
    float _835 = _832.y;
    float _837 = _832.z + _200[_796];
    vec4 _849 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _857 = (((cbMtdParam._m0[39u].y - _837) + _849.z) * _371) + _837;
    vec4 _869 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _877 = (((cbMtdParam._m0[39u].w - _857) + _869.z) * _338) + _857;
    float _883 = ((((_327 * 2.0) * _877) - _877) * cbMtdParam._m0[33u].w) + _877;
    vec4 _895 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _903 = (((_895.z + cbMtdParam._m0[40u].y) - _883) * _307) + _883;
    float _934 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _965 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_934 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_938 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _980 = (-0.0) - ((_938 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _984 = (_938 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _985 = isnan(_984) ? _980 : (isnan(_980) ? _984 : min(_980, _984));
    float _4198 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
    float _986 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
    float _1011 = ((_849.x - _834) * _371) + _834;
    float _1012 = ((_849.y - _835) * _371) + _835;
    float _1017 = ((_869.x - _1011) * _338) + _1011;
    float _1018 = ((_869.y - _1012) * _338) + _1012;
    float _1027 = ((((_895.x - _1017) * _304) + _1017) * 2.0) + (-1.0);
    float _1028 = ((((_895.y - _1018) * _306) + _1018) * 2.0) + (-1.0);
    float _1029 = dot(vec2(_1027, _1028), vec2(_1027, _1028));
    float _4209 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
    float _1034 = sqrt(1.0 - (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))));
    float _1037 = (cbMtdParam._m0[34u].x * ((_323.x * 2.0) + (-1.0))) + _1027;
    float _1038 = (cbMtdParam._m0[34u].x * ((_323.y * 2.0) + (-1.0))) + _1028;
    float _1041 = fma(_1034, _254 * NORMAL.x, fma(_1038, _261 * TANGENT.x, (_247 * _239) * _1037));
    float _1044 = fma(_1034, _254 * NORMAL.y, fma(_1038, _261 * TANGENT.y, (_247 * _240) * _1037));
    float _1047 = fma(_1034, _254 * NORMAL.z, fma(_1038, _261 * TANGENT.z, (_247 * _241) * _1037));
    float _1051 = inversesqrt(dot(vec3(_1041, _1044, _1047), vec3(_1041, _1044, _1047)));
    float _1052 = _1051 * _1041;
    float _1053 = _1051 * _1044;
    float _1054 = _1051 * _1047;
    float _4220 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _1055 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _4231 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _4242 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _4253 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _4264 = isnan(0.0) ? _818 : (isnan(_818) ? 0.0 : max(_818, 0.0));
    float _1059 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
    float _1075 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1095 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1105 = cbSceneParam._m0[71u].x - (_934 / _1095);
    float _1106 = cbSceneParam._m0[71u].y - (_938 / _1095);
    float _1107 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1095);
    float _1111 = inversesqrt(dot(vec3(_1105, _1106, _1107), vec3(_1105, _1106, _1107)));
    float _1112 = _1105 * _1111;
    float _1113 = _1106 * _1111;
    float _1114 = _1107 * _1111;
    vec4 _1119 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1121 = _1119.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1339 = sqrt(((_1105 * _1105) + (_1106 * _1106)) + (_1107 * _1107));
        float _1345 = (cbMatDynParam._m0[5u].x * _1339) + cbMatDynParam._m0[5u].y;
        float _4275 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _1350 = (cbMatDynParam._m0[5u].z * _1339) + cbMatDynParam._m0[5u].w;
        float _4286 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) - _1346)) + _1346) < ((_1121 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1132 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1133 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1135 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1137 = _1135.w;
    float _1155 = fma(_1054, cbSceneParam._m0[5u].z, fma(_1053, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1052));
    float _1158 = fma(_1054, cbSceneParam._m0[6u].z, fma(_1053, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1052));
    float _1161 = fma(_1054, cbSceneParam._m0[7u].z, fma(_1053, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1052));
    vec4 _1163 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1174 = (((_1163.y - _1055) + (_1163.w * _1055)) * cbMtdParam._m0[3u].x) + _1055;
    uint _1187 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1188 = _1187 + 9u;
    uint _1189 = _1188 + uint(cbMatDynParam._m0[0u].w);
    float _1195 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * cbInstanceData._m0[_1189].x;
    float _1196 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * cbInstanceData._m0[_1189].y;
    float _1197 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0)))) * cbInstanceData._m0[_1189].z;
    float _4297 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
    float _1199 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
    float _4319 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
    float _1200 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
    vec4 _1201 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1206 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1217 = (((_1206.x - _1059) + (_1206.w * _1059)) * cbMtdParam._m0[3u].x) + _1059;
    float _1230 = (cbMtdParam._m0[3u].x * (((_1198 * _1137) - _1198) + _1201.x)) + _1198;
    float _1231 = (cbMtdParam._m0[3u].x * (((_1199 * _1137) - _1199) + _1201.y)) + _1199;
    float _1232 = (cbMtdParam._m0[3u].x * (((_1200 * _1137) - _1200) + _1201.z)) + _1200;
    float _1233 = 1.0 - _1217;
    float _1234 = _1233 * _1230;
    float _1235 = _1233 * _1231;
    float _1236 = _1233 * _1232;
    float _1241 = (_1230 + (-0.039999999105930328369140625)) * _1217;
    float _1242 = (_1231 + (-0.039999999105930328369140625)) * _1217;
    float _1243 = (_1232 + (-0.039999999105930328369140625)) * _1217;
    float _1244 = _1241 + 0.039999999105930328369140625;
    float _1246 = _1242 + 0.039999999105930328369140625;
    float _1247 = _1243 + 0.039999999105930328369140625;
    vec4 _1256 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1132, cbSceneParam._m0[86u].y * _1133));
    float _1259 = _1256.x * TEXCOORD_5.w;
    float _1260 = dot(vec3(_1052, _1053, _1054), vec3(_1112, _1113, _1114));
    float _1263 = _1260 * 2.0;
    float _1267 = (_1263 * _1052) - _1112;
    float _1268 = (_1263 * _1053) - _1113;
    float _1269 = (_1263 * _1054) - _1114;
    float _1273 = abs(dot(vec3(_1112, _1113, _1114), vec3(_1052, _1053, _1054)));
    float _4330 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _1275 = sqrt(_1174);
    float _1286 = exp2((_1275 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1275 * 3.0));
    float _1292 = (1.0 - _1286) * ((_1275 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1293 = _1286 * _1275;
    float _1321 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1325 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1329 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1656;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1383 = fma(_1329, cbModelParam._m0[26u].z, fma(_1325, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1321));
        float _1387 = fma(_1329, cbModelParam._m0[27u].z, fma(_1325, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1321));
        float _1391 = fma(_1329, cbModelParam._m0[28u].z, fma(_1325, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1321));
        float _1415 = _1321 + _1052;
        float _1416 = _1325 + _1053;
        float _1417 = _1329 + _1054;
        float _1427 = fma(_1417, cbModelParam._m0[26u].z, fma(_1416, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1415)) - _1383;
        float _1428 = fma(_1417, cbModelParam._m0[27u].z, fma(_1416, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1415)) - _1387;
        float _1429 = fma(_1417, cbModelParam._m0[28u].z, fma(_1416, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1415)) - _1391;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1445 = ((_1433 * _1427) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1383 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1446 = ((_1433 * _1428) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1387 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1433 * _1429) / cbModelParam._m0[34u].z) + ((((((_1391 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1445, _1446, _1447), 0.0);
        float _1484 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1485 = _1484 * (_1450.x + (-0.5));
        float _1486 = _1484 * (_1450.y + (-0.5));
        float _1487 = _1484 * (_1450.z + (-0.5));
        float _1494 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1457.x + (-0.5));
        float _1496 = _1494 * (_1457.y + (-0.5));
        float _1497 = _1494 * (_1457.z + (-0.5));
        float _1504 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1464.x + (-0.5));
        float _1506 = _1504 * (_1464.y + (-0.5));
        float _1507 = _1504 * (_1464.z + (-0.5));
        float _1514 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1471.x + (-0.5));
        float _1516 = _1514 * (_1471.y + (-0.5));
        float _1517 = _1514 * (_1471.z + (-0.5));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0));
        float _1521 = _1485 * 0.5;
        float _1522 = _1495 * 0.5;
        float _1523 = _1505 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1538 = (dot(vec3(_1052, _1053, _1054), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4356 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1548 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4367 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4378 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) * (_1550 + 1.0))) + _1555) * _1518;
        float _1565 = _1486 * 0.5;
        float _1566 = _1496 * 0.5;
        float _1567 = _1506 * 0.5;
        float _1568 = dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567));
        float _1573 = (_1568 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1568);
        float _1581 = (dot(vec3(_1052, _1053, _1054), vec3(_1573 * _1565, _1573 * _1566, _1573 * _1567)) + 1.0) * 0.5;
        float _4389 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1590 = sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4400 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1591 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _1592 = _1591 * 2.0;
        float _1596 = (1.0 - _1591) / (_1591 + 1.0);
        float _4411 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
        float _1606 = ((((1.0 - _1597) * (_1592 + 2.0)) * exp2(log2(isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_1592 + 1.0))) + _1597) * _1519;
        float _1607 = _1487 * 0.5;
        float _1608 = _1497 * 0.5;
        float _1609 = _1507 * 0.5;
        float _1610 = dot(vec3(_1607, _1608, _1609), vec3(_1607, _1608, _1609));
        float _1615 = (_1610 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1610);
        float _1623 = (dot(vec3(_1052, _1053, _1054), vec3(_1615 * _1607, _1615 * _1608, _1615 * _1609)) + 1.0) * 0.5;
        float _4422 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1632 = sqrt(((_1608 * _1608) + (_1607 * _1607)) + (_1609 * _1609)) / (_1520 + 9.9999997473787516355514526367188e-06);
        float _4433 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
        float _1634 = _1633 * 2.0;
        float _1638 = (1.0 - _1633) / (_1633 + 1.0);
        float _4444 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1648 = ((((1.0 - _1639) * (_1634 + 2.0)) * exp2(log2(isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (_1634 + 1.0))) + _1639) * _1520;
        _1656 = _1487;
        _1658 = _1486;
        _1659 = _1485;
        _1660 = _1497;
        _1661 = _1496;
        _1662 = _1495;
        _1663 = _1507;
        _1664 = _1506;
        _1665 = _1505;
        _1666 = _1520;
        _1667 = _1519;
        _1668 = _1518;
        _1669 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
        _1670 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0)));
        _1671 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)));
    }
    else
    {
        _1656 = _1657;
        _1658 = _1657;
        _1659 = _1657;
        _1660 = _1657;
        _1661 = _1657;
        _1662 = _1657;
        _1663 = _1657;
        _1664 = _1657;
        _1665 = _1657;
        _1666 = _1657;
        _1667 = _1657;
        _1668 = _1657;
        _1669 = 0.0;
        _1670 = 0.0;
        _1671 = 0.0;
    }
    float _1964;
    float _1965;
    float _1966;
    float _1967;
    float _1968;
    float _1969;
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1697 = fma(_1329, cbModelParam._m0[30u].z, fma(_1325, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1321));
        float _1701 = fma(_1329, cbModelParam._m0[31u].z, fma(_1325, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1321));
        float _1705 = fma(_1329, cbModelParam._m0[32u].z, fma(_1325, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1321));
        float _1727 = _1321 + _1052;
        float _1728 = _1325 + _1053;
        float _1729 = _1329 + _1054;
        float _1739 = fma(_1729, cbModelParam._m0[30u].z, fma(_1728, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1727)) - _1697;
        float _1740 = fma(_1729, cbModelParam._m0[31u].z, fma(_1728, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1727)) - _1701;
        float _1741 = fma(_1729, cbModelParam._m0[32u].z, fma(_1728, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1727)) - _1705;
        float _1745 = inversesqrt(dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741)));
        float _1757 = ((_1745 * _1739) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1697 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1758 = ((_1745 * _1740) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1701 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1759 = ((_1745 * _1741) / cbModelParam._m0[35u].z) + ((((((_1705 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1761 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1757, _1758, _1759), 0.0);
        vec4 _1768 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1757, _1758, _1759), 0.0);
        vec4 _1775 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1757, _1758, _1759), 0.0);
        vec4 _1782 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1757, _1758, _1759), 0.0);
        float _1794 = exp2((_1761.w + (-0.5)) * 20.0) * 2.0;
        float _1795 = _1794 * (_1761.x + (-0.5));
        float _1796 = _1794 * (_1761.y + (-0.5));
        float _1797 = _1794 * (_1761.z + (-0.5));
        float _1804 = exp2((_1768.w + (-0.5)) * 20.0) * 2.0;
        float _1805 = _1804 * (_1768.x + (-0.5));
        float _1806 = _1804 * (_1768.y + (-0.5));
        float _1807 = _1804 * (_1768.z + (-0.5));
        float _1814 = exp2((_1775.w + (-0.5)) * 20.0) * 2.0;
        float _1815 = _1814 * (_1775.x + (-0.5));
        float _1816 = _1814 * (_1775.y + (-0.5));
        float _1817 = _1814 * (_1775.z + (-0.5));
        float _1824 = exp2((_1782.w + (-0.5)) * 20.0) * 2.0;
        float _1825 = _1824 * (_1782.x + (-0.5));
        float _1826 = _1824 * (_1782.y + (-0.5));
        float _1827 = _1824 * (_1782.z + (-0.5));
        float _1828 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
        float _1829 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
        float _1830 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1831 = _1795 * 0.5;
        float _1832 = _1805 * 0.5;
        float _1833 = _1815 * 0.5;
        float _1834 = dot(vec3(_1831, _1832, _1833), vec3(_1831, _1832, _1833));
        float _1839 = (_1834 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1834);
        float _1847 = (dot(vec3(_1052, _1053, _1054), vec3(_1839 * _1831, _1839 * _1832, _1839 * _1833)) + 1.0) * 0.5;
        float _4485 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1856 = sqrt(((_1832 * _1832) + (_1831 * _1831)) + (_1833 * _1833)) / (_1828 + 9.9999997473787516355514526367188e-06);
        float _4496 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
        float _1857 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _1858 = _1857 * 2.0;
        float _1862 = (1.0 - _1857) / (_1857 + 1.0);
        float _4507 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1872 = ((((1.0 - _1863) * (_1858 + 2.0)) * exp2(log2(isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (_1858 + 1.0))) + _1863) * _1828;
        float _1873 = _1796 * 0.5;
        float _1874 = _1806 * 0.5;
        float _1875 = _1816 * 0.5;
        float _1876 = dot(vec3(_1873, _1874, _1875), vec3(_1873, _1874, _1875));
        float _1881 = (_1876 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1876);
        float _1889 = (dot(vec3(_1052, _1053, _1054), vec3(_1881 * _1873, _1881 * _1874, _1881 * _1875)) + 1.0) * 0.5;
        float _4518 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _1898 = sqrt(((_1874 * _1874) + (_1873 * _1873)) + (_1875 * _1875)) / (_1829 + 9.9999997473787516355514526367188e-06);
        float _4529 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _1900 = _1899 * 2.0;
        float _1904 = (1.0 - _1899) / (_1899 + 1.0);
        float _4540 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1914 = ((((1.0 - _1905) * (_1900 + 2.0)) * exp2(log2(isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_1900 + 1.0))) + _1905) * _1829;
        float _1915 = _1797 * 0.5;
        float _1916 = _1807 * 0.5;
        float _1917 = _1817 * 0.5;
        float _1918 = dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917));
        float _1923 = (_1918 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1918);
        float _1931 = (dot(vec3(_1052, _1053, _1054), vec3(_1923 * _1915, _1923 * _1916, _1923 * _1917)) + 1.0) * 0.5;
        float _4551 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
        float _1940 = sqrt(((_1916 * _1916) + (_1915 * _1915)) + (_1917 * _1917)) / (_1830 + 9.9999997473787516355514526367188e-06);
        float _4562 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1941 = isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0));
        float _1942 = _1941 * 2.0;
        float _1946 = (1.0 - _1941) / (_1941 + 1.0);
        float _4573 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1956 = ((((1.0 - _1947) * (_1942 + 2.0)) * exp2(log2(isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0))) * (_1942 + 1.0))) + _1947) * _1830;
        _1964 = _1797;
        _1965 = _1796;
        _1966 = _1795;
        _1967 = _1807;
        _1968 = _1806;
        _1969 = _1805;
        _1970 = _1817;
        _1971 = _1816;
        _1972 = _1815;
        _1973 = _1830;
        _1974 = _1829;
        _1975 = _1828;
        _1976 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0)));
        _1977 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)));
        _1978 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0)));
    }
    else
    {
        _1964 = _1657;
        _1965 = _1657;
        _1966 = _1657;
        _1967 = _1657;
        _1968 = _1657;
        _1969 = _1657;
        _1970 = _1657;
        _1971 = _1657;
        _1972 = _1657;
        _1973 = _1657;
        _1974 = _1657;
        _1975 = _1657;
        _1976 = 0.0;
        _1977 = 0.0;
        _1978 = 0.0;
    }
    float _1988 = (cbModelParam._m0[1u].x * (_1976 - _1669)) + _1669;
    float _1989 = (cbModelParam._m0[1u].x * (_1977 - _1670)) + _1670;
    float _1990 = (cbModelParam._m0[1u].x * (_1978 - _1671)) + _1671;
    float _2011 = fma(_1990, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1988 * cbSceneParam._m0[89u].x));
    float _2014 = fma(_1990, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1988 * cbSceneParam._m0[90u].x));
    float _2017 = fma(_1990, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1988));
    float _2030 = _1267 * 0.5;
    float _2031 = _1268 * 0.5;
    float _2032 = _1269 * 0.5;
    float _2033 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1966, _1969, _1972, _1975));
    float _2036 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1965, _1968, _1971, _1974));
    float _2039 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1964, _1967, _1970, _1973));
    float _2073;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2046 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1656, _1660, _1663, _1666));
        float _2050 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1658, _1661, _1664, _1667));
        float _2054 = dot(vec4(_2030, _2031, _2032, 1.0), vec4(_1659, _1662, _1665, _1668));
        float _2061 = dot(vec4(cbModelParam._m0[39u]), vec4(_2030, _2031, _2032, 1.0));
        _2073 = dot(vec3(isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0)), isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0)), isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2061) ? 0.0 : (isnan(0.0) ? _2061 : max(0.0, _2061))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2073 = 1.0;
    }
    float _2084;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2075 = dot(vec4(cbModelParam._m0[40u]), vec4(_2030, _2031, _2032, 1.0));
        _2084 = dot(vec3(isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0)), isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0)), isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2075) ? 0.0 : (isnan(0.0) ? _2075 : max(0.0, _2075))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2084 = 1.0;
    }
    float _2088 = (_2084 * cbModelParam._m0[1u].x) + (_2073 * (1.0 - cbModelParam._m0[1u].x));
    float _2098 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1174);
    float _2099 = isnan(_2098) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2098 : min(cbModelParam._m0[25u].z, _2098));
    float _2179;
    float _2181;
    float _2183;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2146 = fma(_1329, cbModelParam._m0[13u].z, fma(_1325, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1321)) + cbModelParam._m0[13u].w;
        float _2150 = fma(_1329, cbModelParam._m0[14u].z, fma(_1325, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1321)) + cbModelParam._m0[14u].w;
        float _2154 = fma(_1329, cbModelParam._m0[15u].z, fma(_1325, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1321)) + cbModelParam._m0[15u].w;
        float _2157 = fma(_1269, cbModelParam._m0[13u].z, fma(_1268, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1267));
        float _2160 = fma(_1269, cbModelParam._m0[14u].z, fma(_1268, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1267));
        float _2163 = fma(_1269, cbModelParam._m0[15u].z, fma(_1268, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1267));
        float _2191;
        if (_2157 > 0.0)
        {
            _2191 = abs((1.0 - _2146) / _2157);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2157 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2146 + 1.0) / _2157);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2191 = frontier_phi_17_15_ladder;
        }
        float _2414;
        if (_2160 > 0.0)
        {
            _2414 = abs((1.0 - _2150) / _2160);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2160 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2150 + 1.0) / _2160);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2414 = frontier_phi_26_22_ladder;
        }
        float _2671;
        if (_2163 > 0.0)
        {
            _2671 = abs((1.0 - _2154) / _2163);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2154 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2671 = frontier_phi_38_33_ladder;
        }
        float _2673 = isnan(_2414) ? _2191 : (isnan(_2191) ? _2414 : min(_2191, _2414));
        float _2674 = isnan(_2671) ? _2673 : (isnan(_2673) ? _2671 : min(_2673, _2671));
        float _2678 = (_2674 * _2157) + _2146;
        float _2679 = (_2674 * _2160) + _2150;
        float _2680 = (_2674 * _2163) + _2154;
        float _2681 = _2674 * 9.9999997473787516355514526367188e-05;
        float _2683 = (-1.0) - _2681;
        float _2685 = _2681 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2680 > _2685) || ((_2680 < _2683) || ((_2679 > _2685) || ((_2679 < _2683) || ((_2678 < _2683) || (_2678 > _2685))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2808 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2680, cbModelParam._m0[9u].z, fma(_2679, cbModelParam._m0[9u].y, _2678 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2680, cbModelParam._m0[10u].z, fma(_2679, cbModelParam._m0[10u].y, _2678 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2680, cbModelParam._m0[11u].z, fma(_2679, cbModelParam._m0[11u].y, _2678 * cbModelParam._m0[11u].x))), _2099);
            frontier_phi_16_38_ladder = _2808.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2808.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2808.x * cbModelParam._m0[1u].y;
        }
        _2179 = frontier_phi_16_38_ladder_2;
        _2181 = frontier_phi_16_38_ladder_1;
        _2183 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1267, _1268, _1269), _2099);
        _2179 = _2167.x * cbModelParam._m0[1u].y;
        _2181 = _2167.y * cbModelParam._m0[1u].y;
        _2183 = _2167.z * cbModelParam._m0[1u].y;
    }
    float _2187 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1174);
    float _2188 = isnan(_2187) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2187 : min(cbModelParam._m0[25u].w, _2187));
    float _2277;
    float _2279;
    float _2281;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2241 = fma(_1329, cbModelParam._m0[21u].z, fma(_1325, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1321)) + cbModelParam._m0[21u].w;
        float _2245 = fma(_1329, cbModelParam._m0[22u].z, fma(_1325, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1321)) + cbModelParam._m0[22u].w;
        float _2249 = fma(_1329, cbModelParam._m0[23u].z, fma(_1325, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1321)) + cbModelParam._m0[23u].w;
        float _2252 = fma(_1269, cbModelParam._m0[21u].z, fma(_1268, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1267));
        float _2255 = fma(_1269, cbModelParam._m0[22u].z, fma(_1268, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1267));
        float _2258 = fma(_1269, cbModelParam._m0[23u].z, fma(_1268, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1267));
        float _2419;
        if (_2252 > 0.0)
        {
            _2419 = abs((1.0 - _2241) / _2252);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2252 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2241 + 1.0) / _2252);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2419 = frontier_phi_28_24_ladder;
        }
        float _2698;
        if (_2255 > 0.0)
        {
            _2698 = abs((1.0 - _2245) / _2255);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2245 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2698 = frontier_phi_40_35_ladder;
        }
        float _2911;
        if (_2258 > 0.0)
        {
            _2911 = abs((1.0 - _2249) / _2258);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2249 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2911 = frontier_phi_49_46_ladder;
        }
        float _2913 = isnan(_2698) ? _2419 : (isnan(_2419) ? _2698 : min(_2419, _2698));
        float _2914 = isnan(_2911) ? _2913 : (isnan(_2913) ? _2911 : min(_2913, _2911));
        float _2918 = (_2914 * _2252) + _2241;
        float _2919 = (_2914 * _2255) + _2245;
        float _2920 = (_2914 * _2258) + _2249;
        float _2921 = _2914 * 9.9999997473787516355514526367188e-05;
        float _2922 = (-1.0) - _2921;
        float _2924 = _2921 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2920 > _2924) || ((_2920 < _2922) || ((_2919 > _2924) || ((_2919 < _2922) || ((_2918 < _2922) || (_2918 > _2924))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3148 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2920, cbModelParam._m0[17u].z, fma(_2919, cbModelParam._m0[17u].y, _2918 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2920, cbModelParam._m0[18u].z, fma(_2919, cbModelParam._m0[18u].y, _2918 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2920, cbModelParam._m0[19u].z, fma(_2919, cbModelParam._m0[19u].y, _2918 * cbModelParam._m0[19u].x))), _2188);
            frontier_phi_25_49_ladder = _3148.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3148.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3148.x * cbModelParam._m0[1u].z;
        }
        _2277 = frontier_phi_25_49_ladder_2;
        _2279 = frontier_phi_25_49_ladder_1;
        _2281 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2261 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1267, _1268, _1269), _2188);
        _2277 = _2261.x * cbModelParam._m0[1u].z;
        _2279 = _2261.y * cbModelParam._m0[1u].z;
        _2281 = _2261.z * cbModelParam._m0[1u].z;
    }
    float _2294 = (((_1292 * _1244) + _1293) * _1259) * ((cbModelParam._m0[1u].w * (_2277 - _2179)) + _2179);
    float _2296 = (((_1292 * _1246) + _1293) * _1259) * ((cbModelParam._m0[1u].w * (_2279 - _2181)) + _2181);
    float _2298 = (((_1292 * _1247) + _1293) * _1259) * ((cbModelParam._m0[1u].w * (_2281 - _2183)) + _2183);
    float _2301 = fma(_2298, cbSceneParam._m0[89u].z, fma(_2296, cbSceneParam._m0[89u].y, _2294 * cbSceneParam._m0[89u].x));
    float _2304 = fma(_2298, cbSceneParam._m0[90u].z, fma(_2296, cbSceneParam._m0[90u].y, _2294 * cbSceneParam._m0[90u].x));
    float _2307 = fma(_2298, cbSceneParam._m0[91u].z, fma(_2296, cbSceneParam._m0[91u].y, _2294 * cbSceneParam._m0[91u].x));
    vec4 _2315 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1132, _1133));
    float _2317 = _2315.w;
    float _2329 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2317);
    float _2330 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2317);
    float _2331 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2317);
    uvec4 _2335 = floatBitsToUint(cbInstanceData._m0[_1187 + 5u]);
    uint _2337 = _2335.x * 14u;
    uint _2338 = _2337 + 13u;
    float _2345 = _1259 + (-1.0);
    float _2350 = (cbLight._m0[_2338].x * _2345) + 1.0;
    float _2351 = (cbLight._m0[_2338].y * _2345) + 1.0;
    float _2352 = (cbLight._m0[_2338].z * _2345) + 1.0;
    float _2353 = (cbLight._m0[_2338].w * _2345) + 1.0;
    uint _2354 = _2337 + 5u;
    float _2360 = isnan(1.0) ? _2351 : (isnan(_2351) ? 1.0 : min(_2351, 1.0));
    uint _2364 = _2337 + 4u;
    float _2373 = isnan(1.0) ? _2350 : (isnan(_2350) ? 1.0 : min(_2350, 1.0));
    uint _2377 = _2337 | 1u;
    float _2388 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_1052, _1053, _1054));
    float _2391 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_1052, _1053, _1054));
    float _4709 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _4720 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2396 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * 0.3183098733425140380859375;
    float _2398 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * 0.3183098733425140380859375;
    float _2405 = ((cbLight._m0[_2354].x * _2360) * _2398) + (((cbLight._m0[_2364].x * _2329) * _2373) * _2396);
    float _2406 = ((_2360 * cbLight._m0[_2354].y) * _2398) + (((cbLight._m0[_2364].y * _2330) * _2373) * _2396);
    float _2407 = ((_2360 * cbLight._m0[_2354].z) * _2398) + (((cbLight._m0[_2364].z * _2331) * _2373) * _2396);
    uvec4 _2411 = floatBitsToUint(cbLight._m0[_2337 + 12u]);
    bool _2413 = _2411.x == 0u;
    float _2424;
    float _2426;
    float _2428;
    if (_2413)
    {
        _2424 = _2405;
        _2426 = _2406;
        _2428 = _2407;
    }
    else
    {
        uint _2432 = _2337 + 6u;
        float _2448 = (dot(vec3(cbLight._m0[_2337 + 2u].xyz), vec3(_1052, _1053, _1054)) * 0.5) + 0.5;
        float _2449 = _2448 * _2448;
        float _4731 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2450 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
        float _2451 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2424 = (((cbLight._m0[_2432].x * 0.3183098733425140380859375) * _2450) * _2451) + _2405;
        _2426 = (((cbLight._m0[_2432].y * 0.3183098733425140380859375) * _2450) * _2451) + _2406;
        _2428 = (((cbLight._m0[_2432].z * 0.3183098733425140380859375) * _2450) * _2451) + _2407;
    }
    bool _2431 = _2411.y == 0u;
    float _2469;
    float _2471;
    float _2473;
    if (_2431)
    {
        _2469 = _2424;
        _2471 = _2426;
        _2473 = _2428;
    }
    else
    {
        uint _2642 = _2337 + 7u;
        float _2658 = (dot(vec3(cbLight._m0[_2337 + 3u].xyz), vec3(_1052, _1053, _1054)) * 0.5) + 0.5;
        float _2659 = _2658 * _2658;
        float _4747 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2660 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
        float _2661 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2469 = (((cbLight._m0[_2642].x * 0.3183098733425140380859375) * _2660) * _2661) + _2424;
        _2471 = (((cbLight._m0[_2642].y * 0.3183098733425140380859375) * _2660) * _2661) + _2426;
        _2473 = (((cbLight._m0[_2642].z * 0.3183098733425140380859375) * _2660) * _2661) + _2428;
    }
    uint _2476 = _2337 + 8u;
    float _2489 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2337].w)) * _1174) * 0.949999988079071044921875);
    float _2490 = _2489 * _2489;
    float _2491 = cbLight._m0[_2337].x + _1112;
    float _2492 = cbLight._m0[_2337].y + _1113;
    float _2493 = cbLight._m0[_2337].z + _1114;
    float _2497 = inversesqrt(dot(vec3(_2491, _2492, _2493), vec3(_2491, _2492, _2493)));
    float _2498 = _2497 * _2491;
    float _2499 = _2497 * _2492;
    float _2500 = _2497 * _2493;
    float _2501 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2337].xyz));
    float _4763 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    float _2504 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
    float _4774 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _2505 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2506 = dot(vec3(_1052, _1053, _1054), vec3(_2498, _2499, _2500));
    float _4785 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2509 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2510 = dot(vec3(cbLight._m0[_2337].xyz), vec3(_2498, _2499, _2500));
    float _4796 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
    float _2514 = _2490 * _2490;
    float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
    float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
    float _2527 = 0.959999978542327880859375 - _1241;
    float _2529 = 0.959999978542327880859375 - _1242;
    float _2530 = 0.959999978542327880859375 - _1243;
    float _2537 = 1.0 - _2490;
    float _2548 = (0.5 / (((_2505 * ((_2504 * _2537) + _2490)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2537) + _2490) * _2504))) * _2504;
    float _4807 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
    float _2550 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
    uint _2564 = _2337 + 9u;
    float _2575 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2377].w)) * _1174) * 0.949999988079071044921875);
    float _2576 = _2575 * _2575;
    float _2577 = cbLight._m0[_2377].x + _1112;
    float _2578 = cbLight._m0[_2377].y + _1113;
    float _2579 = cbLight._m0[_2377].z + _1114;
    float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
    float _2584 = _2583 * _2577;
    float _2585 = _2583 * _2578;
    float _2586 = _2583 * _2579;
    float _2587 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2377].xyz));
    float _4818 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
    float _2590 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
    float _2591 = dot(vec3(_1052, _1053, _1054), vec3(_2584, _2585, _2586));
    float _4829 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2594 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
    float _2595 = dot(vec3(cbLight._m0[_2377].xyz), vec3(_2584, _2585, _2586));
    float _4840 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
    float _2599 = _2576 * _2576;
    float _2603 = ((_2594 * _2594) * (_2599 + (-1.0))) + 1.0;
    float _2610 = exp2(log2(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * 5.0);
    float _2617 = 1.0 - _2576;
    float _2627 = (0.5 / (((_2505 * ((_2590 * _2617) + _2576)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2617) + _2576) * _2590))) * _2590;
    float _4851 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
    float _2629 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2599 / ((_2603 * _2603) * 3.141590118408203125));
    float _2639 = (((((_2610 * _2527) + _1244) * cbLight._m0[_2564].x) * _2629) * _2360) + ((((cbLight._m0[_2476].x * _2329) * ((_2526 * _2527) + _1244)) * _2550) * _2373);
    float _2640 = (((((_2610 * _2529) + _1246) * cbLight._m0[_2564].y) * _2629) * _2360) + ((((cbLight._m0[_2476].y * _2330) * ((_2526 * _2529) + _1246)) * _2550) * _2373);
    float _2641 = (((((_2610 * _2530) + _1247) * cbLight._m0[_2564].z) * _2629) * _2360) + ((((cbLight._m0[_2476].z * _2331) * ((_2526 * _2530) + _1247)) * _2550) * _2373);
    float _2703;
    float _2705;
    float _2707;
    if (_2413)
    {
        _2703 = _2639;
        _2705 = _2640;
        _2707 = _2641;
    }
    else
    {
        uint _2709 = _2337 + 2u;
        uint _2713 = _2337 + 10u;
        float _2727 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2709].w)) * _1174) * 0.949999988079071044921875);
        float _2728 = _2727 * _2727;
        float _2729 = cbLight._m0[_2709].x + _1112;
        float _2730 = cbLight._m0[_2709].y + _1113;
        float _2731 = cbLight._m0[_2709].z + _1114;
        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
        float _2736 = _2735 * _2729;
        float _2737 = _2735 * _2730;
        float _2738 = _2735 * _2731;
        float _2739 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2709].xyz));
        float _4862 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2742 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2743 = dot(vec3(_1052, _1053, _1054), vec3(_2736, _2737, _2738));
        float _4873 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0));
        float _2746 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2747 = dot(vec3(cbLight._m0[_2709].xyz), vec3(_2736, _2737, _2738));
        float _4884 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
        float _2751 = _2728 * _2728;
        float _2755 = ((_2746 * _2746) * (_2751 + (-1.0))) + 1.0;
        float _2762 = exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0);
        float _2769 = 1.0 - _2728;
        float _2779 = (0.5 / (((_2505 * ((_2742 * _2769) + _2728)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2769) + _2728) * _2742))) * _2742;
        float _4895 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
        float _2781 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2751 / ((_2755 * _2755) * 3.141590118408203125));
        float _2782 = isnan(1.0) ? _2352 : (isnan(_2352) ? 1.0 : min(_2352, 1.0));
        _2703 = (((((_2762 * _2527) + _1244) * cbLight._m0[_2713].x) * _2781) * _2782) + _2639;
        _2705 = (((((_2762 * _2529) + _1246) * cbLight._m0[_2713].y) * _2781) * _2782) + _2640;
        _2707 = (((((_2762 * _2530) + _1247) * cbLight._m0[_2713].z) * _2781) * _2782) + _2641;
    }
    float _2817;
    float _2819;
    float _2821;
    if (_2431)
    {
        _2817 = _2703;
        _2819 = _2705;
        _2821 = _2707;
    }
    else
    {
        uint _2828 = _2337 + 3u;
        uint _2832 = _2337 + 11u;
        float _2846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2828].w)) * _1174) * 0.949999988079071044921875);
        float _2847 = _2846 * _2846;
        float _2848 = cbLight._m0[_2828].x + _1112;
        float _2849 = cbLight._m0[_2828].y + _1113;
        float _2850 = cbLight._m0[_2828].z + _1114;
        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
        float _2855 = _2854 * _2848;
        float _2856 = _2854 * _2849;
        float _2857 = _2854 * _2850;
        float _2858 = dot(vec3(_1052, _1053, _1054), vec3(cbLight._m0[_2828].xyz));
        float _4911 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0));
        float _2862 = dot(vec3(_1052, _1053, _1054), vec3(_2855, _2856, _2857));
        float _4922 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0));
        float _2866 = dot(vec3(cbLight._m0[_2828].xyz), vec3(_2855, _2856, _2857));
        float _4933 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2870 = _2847 * _2847;
        float _2874 = ((_2865 * _2865) * (_2870 + (-1.0))) + 1.0;
        float _2881 = exp2(log2(1.0 - (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0)))) * 5.0);
        float _2888 = 1.0 - _2847;
        float _2898 = (0.5 / (((_2505 * ((_2861 * _2888) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2505 * _2888) + _2847) * _2861))) * _2861;
        float _4944 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2900 = (isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2870 / ((_2874 * _2874) * 3.141590118408203125));
        float _2901 = isnan(1.0) ? _2353 : (isnan(_2353) ? 1.0 : min(_2353, 1.0));
        _2817 = (((((_2881 * _2527) + _1244) * cbLight._m0[_2832].x) * _2900) * _2901) + _2703;
        _2819 = (((((_2881 * _2529) + _1246) * cbLight._m0[_2832].y) * _2900) * _2901) + _2705;
        _2821 = (((((_2881 * _2530) + _1247) * cbLight._m0[_2832].z) * _2900) * _2901) + _2707;
    }
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    float _3044;
    float _3046;
    if (_2335.y == 0u)
    {
        float _2976 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2977 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2976;
        float _2978 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2976;
        float _2979 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2976;
        uvec4 _2991 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2992 = _2991.x;
        uint _3003 = uint((float(_2991.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1133) / _2992))) + floor(float(uint(cbSceneParam._m0[85u].x * _1132) / _2992)));
        float _3013 = (log2(_2979 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3014 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        uint _3017 = uint(isnan(14.0) ? _3014 : (isnan(_3014) ? 14.0 : min(_3014, 14.0)));
        uvec4 _3022 = texelFetch(g_lightClusterGridBuffer, int(((_3017 << 2u) + (_3003 << 6u)) >> 2u));
        uint _3023 = _3022.x;
        uint _3024 = _2991.z;
        float _3153;
        float _3155;
        float _3157;
        float _3159;
        float _3161;
        float _3163;
        if (((((1u << ((_3024 >> 4u) & 15u)) + 4294967295u) & _3023) == 0u) || ((_3024 & 240u) == 0u))
        {
            _3153 = 0.0;
            _3155 = 0.0;
            _3157 = 0.0;
            _3159 = 0.0;
            _3161 = 0.0;
            _3163 = 0.0;
        }
        else
        {
            float _3154;
            float _3156;
            float _3158;
            float _3160;
            float _3162;
            float _3164;
            float _3314 = 0.0;
            float _3315 = 0.0;
            float _3316 = 0.0;
            float _3317 = 0.0;
            float _3318 = 0.0;
            float _3319 = 0.0;
            uint _3320 = 0u;
            uint _3329;
            bool _3330;
            for (;;)
            {
                _3329 = texelFetch(g_lightClassification, int((((_3017 << 5u) + (_3003 << 9u)) + (_3320 << 2u)) >> 2u)).x;
                _3330 = _3329 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3330)
                {
                    frontier_phi_66_pred = _3314;
                    frontier_phi_66_pred_1 = _3319;
                    frontier_phi_66_pred_2 = _3318;
                    frontier_phi_66_pred_3 = _3317;
                    frontier_phi_66_pred_4 = _3316;
                    frontier_phi_66_pred_5 = _3315;
                }
                else
                {
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    float _3463;
                    float _3464;
                    uint _3465;
                    _3459 = _3314;
                    _3460 = _3315;
                    _3461 = _3316;
                    _3462 = _3317;
                    _3463 = _3318;
                    _3464 = _3319;
                    _3465 = _3329;
                    float _3386;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    for (;;)
                    {
                        uint _3469 = uint(findLSB(_3465)) + (_3320 << 5u);
                        uint _3466 = (_3465 + 4294967295u) & _3465;
                        uint _3471 = _3469 * 48u;
                        vec4 _3485 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3471)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3471 + 3u)).x));
                        uint _3491 = (_3469 * 48u) + 4u;
                        vec4 _3504 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3491)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3491 + 3u)).x));
                        uint _3510 = (_3469 * 48u) + 8u;
                        vec3 _3521 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3510)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3510 + 2u)).x));
                        float _3525 = _3485.x - _2977;
                        float _3526 = _3485.y - _2978;
                        float _3527 = _3485.z - _2979;
                        float _3528 = dot(vec3(_3525, _3526, _3527), vec3(_3525, _3526, _3527));
                        float _3531 = inversesqrt(_3528);
                        float _3532 = _3531 * _3525;
                        float _3533 = _3531 * _3526;
                        float _3534 = _3531 * _3527;
                        float _3535 = dot(vec3(_1155, _1158, _1161), vec3(_3532, _3533, _3534));
                        float _3540 = 1.0 - (_3528 * _3485.w);
                        float _4970 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                        float _3541 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3542 = sqrt(_3528) * _3504.w;
                        float _3545 = 1.39999997615814208984375 / (_3542 + 1.39999997615814208984375);
                        float _3546 = _3545 * _3545;
                        float _3549 = ((1.0 - _3546) * _3535) + _3546;
                        float _3552 = _3542 * _3542;
                        float _3556 = ((isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0))) * _3541) / ((_3552 * 0.699999988079071044921875) + 1.0);
                        float _3560 = (-0.0) - _2977;
                        float _3561 = (-0.0) - _2978;
                        float _3562 = (-0.0) - _2979;
                        float _3566 = inversesqrt(dot(vec3(_3560, _3561, _3562), vec3(_3560, _3561, _3562)));
                        float _3567 = _3566 * _3560;
                        float _3568 = _3566 * _3561;
                        float _3569 = _3566 * _3562;
                        float _3577 = exp2(log2(1.0 / ((_3552 * 3.5) + 5.0)) * 0.25);
                        float _3578 = 1.0 - _1275;
                        float _3585 = sqrt(1.0 - ((1.0 - (_3578 * _3578)) * (1.0 - (_3577 * _3577))));
                        float _3586 = _3585 * _3585;
                        float _3587 = _3586 * _3586;
                        float _3588 = _3567 + _3532;
                        float _3589 = _3568 + _3533;
                        float _3590 = _3569 + _3534;
                        float _3594 = inversesqrt(dot(vec3(_3588, _3589, _3590), vec3(_3588, _3589, _3590)));
                        float _3598 = dot(vec3(_1155, _1158, _1161), vec3(_3567, _3568, _3569));
                        float _4986 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3601 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                        float _3602 = dot(vec3(_1155, _1158, _1161), vec3(_3594 * _3588, _3594 * _3589, _3594 * _3590));
                        float _4997 = isnan(0.0) ? _3602 : (isnan(_3602) ? 0.0 : max(_3602, 0.0));
                        float _3605 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                        float _3609 = ((_3605 * _3605) * (_3587 + (-1.0))) + 1.0;
                        float _3610 = _3545 * _3586;
                        float _3611 = _3610 * _3610;
                        float _3614 = ((1.0 - _3611) * _3535) + _3611;
                        float _5008 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                        float _3615 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                        float _3616 = 1.0 - _3586;
                        float _3626 = (0.5 / (((_3615 * ((_3601 * _3616) + _3586)) + 9.9999999392252902907785028219223e-09) + (((_3615 * _3616) + _3586) * _3601))) * _3615;
                        float _5019 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                        float _3637 = (((_3587 * 3.1415927410125732421875) * (isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0)))) / ((_3609 * _3609) * ((_3552 * 2.1991131305694580078125) + 3.141590118408203125))) * _3541;
                        _3389 = (_3556 * _3504.x) + _3462;
                        _3390 = (_3556 * _3504.y) + _3463;
                        _3391 = (_3556 * _3504.z) + _3464;
                        _3386 = (_3637 * _3521.x) + _3459;
                        _3387 = (_3637 * _3521.y) + _3460;
                        _3388 = (_3637 * _3521.z) + _3461;
                        if (_3466 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3459 = _3386;
                            _3460 = _3387;
                            _3461 = _3388;
                            _3462 = _3389;
                            _3463 = _3390;
                            _3464 = _3391;
                            _3465 = _3466;
                        }
                    }
                    frontier_phi_66_pred = _3386;
                    frontier_phi_66_pred_1 = _3391;
                    frontier_phi_66_pred_2 = _3390;
                    frontier_phi_66_pred_3 = _3389;
                    frontier_phi_66_pred_4 = _3388;
                    frontier_phi_66_pred_5 = _3387;
                }
                _3154 = frontier_phi_66_pred;
                _3164 = frontier_phi_66_pred_1;
                _3162 = frontier_phi_66_pred_2;
                _3160 = frontier_phi_66_pred_3;
                _3158 = frontier_phi_66_pred_4;
                _3156 = frontier_phi_66_pred_5;
                uint _3321 = _3320 + 1u;
                if (_3321 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3314 = _3154;
                    _3315 = _3156;
                    _3316 = _3158;
                    _3317 = _3160;
                    _3318 = _3162;
                    _3319 = _3164;
                    _3320 = _3321;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3153 = _3154;
            _3155 = _3156;
            _3157 = _3158;
            _3159 = _3160;
            _3161 = _3162;
            _3163 = _3164;
        }
        uvec4 _3167 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3168 = _3167.z;
        uint _3170 = (_3168 >> 8u) & 15u;
        float _3282;
        float _3284;
        float _3286;
        float _3288;
        float _3290;
        float _3292;
        if (((4294967295u << _3170) & _3023) == 0u)
        {
            _3282 = _3153;
            _3284 = _3155;
            _3286 = _3157;
            _3288 = _3159;
            _3290 = _3161;
            _3292 = _3163;
        }
        else
        {
            float _3307 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
            float _3308 = _3307 * _2977;
            float _3309 = _3307 * _2978;
            float _3310 = _3307 * _2979;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3170 < ((_3168 >> 12u) & 15u))
            {
                float _3283;
                float _3285;
                float _3287;
                float _3289;
                float _3291;
                float _3293;
                float _3442 = _3153;
                float _3443 = _3155;
                float _3444 = _3157;
                float _3445 = _3159;
                float _3446 = _3161;
                float _3447 = _3163;
                uint _3448 = _3170;
                uint _3457;
                bool _3458;
                for (;;)
                {
                    _3457 = texelFetch(g_lightClassification, int((((_3017 << 5u) + (_3003 << 9u)) + (_3448 << 2u)) >> 2u)).x;
                    _3458 = _3457 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3458)
                    {
                        frontier_phi_77_pred = _3447;
                        frontier_phi_77_pred_1 = _3446;
                        frontier_phi_77_pred_2 = _3445;
                        frontier_phi_77_pred_3 = _3444;
                        frontier_phi_77_pred_4 = _3443;
                        frontier_phi_77_pred_5 = _3442;
                    }
                    else
                    {
                        float _3651;
                        float _3652;
                        float _3653;
                        float _3654;
                        float _3655;
                        float _3656;
                        float _3944;
                        float _3945;
                        float _3946;
                        float _3947;
                        float _3948;
                        float _3949;
                        float _3664 = _3442;
                        float _3665 = _3443;
                        float _3666 = _3444;
                        float _3667 = _3445;
                        float _3668 = _3446;
                        float _3669 = _3447;
                        uint _3670 = _3457;
                        uint _3671;
                        vec4 _3696;
                        float _3697;
                        vec4 _3712;
                        vec3 _3724;
                        vec4 _3739;
                        vec4 _3754;
                        float _3800;
                        bool _3801;
                        for (;;)
                        {
                            uint _3681 = ((_3448 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3670));
                            _3671 = (_3670 + 4294967295u) & _3670;
                            uint _3683 = _3681 * 40u;
                            _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            _3697 = _3696.w;
                            uint _3699 = (_3681 * 40u) + 4u;
                            _3712 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3699)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3699 + 3u)).x));
                            uint _3714 = (_3681 * 40u) + 8u;
                            _3724 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3714)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3714 + 2u)).x));
                            uint _3726 = (_3681 * 40u) + 16u;
                            _3739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3726 + 3u)).x));
                            uint _3741 = (_3681 * 40u) + 20u;
                            _3754 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3741)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3741 + 3u)).x));
                            uint _3756 = (_3681 * 40u) + 24u;
                            vec4 _3769 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3756)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3756 + 3u)).x));
                            uint _3775 = (_3681 * 40u) + 28u;
                            vec4 _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            _3800 = fma(_2979, _3788.z, fma(_2978, _3788.y, _3788.x * _2977)) + _3788.w;
                            _3801 = !((fma(_2979, _3769.z, fma(_2978, _3769.y, _3769.x * _2977)) + _3769.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3801)
                            {
                                float _3828 = _3696.x - _2977;
                                float _3829 = _3696.y - _2978;
                                float _3830 = _3696.z - _2979;
                                float _3831 = dot(vec3(_3828, _3829, _3830), vec3(_3828, _3829, _3830));
                                float _3834 = inversesqrt(_3831);
                                float _3835 = _3834 * _3828;
                                float _3836 = _3834 * _3829;
                                float _3837 = _3834 * _3830;
                                float _3841 = 1.0 - (_3831 / (_3697 * _3697));
                                float _5030 = isnan(0.0) ? _3841 : (isnan(_3841) ? 0.0 : max(_3841, 0.0));
                                float _3842 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3846 = sqrt(_3831) * _3712.w;
                                float _3848 = 1.39999997615814208984375 / (_3846 + 1.39999997615814208984375);
                                float _3849 = _3848 * _3848;
                                float _3852 = ((1.0 - _3849) * dot(vec3(_3835, _3836, _3837), vec3(_1155, _1158, _1161))) + _3849;
                                float _3855 = _3846 * _3846;
                                float _3859 = (fma(_2979, _3739.z, fma(_2978, _3739.y, _3739.x * _2977)) + _3739.w) / _3800;
                                float _3860 = (fma(_2979, _3754.z, fma(_2978, _3754.y, _3754.x * _2977)) + _3754.w) / _3800;
                                float _3864 = 1.0 - dot(vec2(_3859, _3860), vec2(_3859, _3860));
                                float _5046 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3865 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
                                float _3866 = _3865 * (((isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0))) * _3842) / ((_3855 * 0.699999988079071044921875) + 1.0));
                                float _3878 = exp2(log2(1.0 / ((_3855 * 3.5) + 5.0)) * 0.25);
                                float _3879 = 1.0 - _1275;
                                float _3886 = sqrt(1.0 - ((1.0 - (_3879 * _3879)) * (1.0 - (_3878 * _3878))));
                                float _3887 = _3886 * _3886;
                                float _3888 = _3887 * _3887;
                                float _3889 = _3835 - _3308;
                                float _3890 = _3836 - _3309;
                                float _3891 = _3837 - _3310;
                                float _3895 = inversesqrt(dot(vec3(_3889, _3890, _3891), vec3(_3889, _3890, _3891)));
                                float _3899 = dot(vec3(_1155, _1158, _1161), vec3((-0.0) - _3308, (-0.0) - _3309, (-0.0) - _3310));
                                float _5057 = isnan(0.0) ? _3899 : (isnan(_3899) ? 0.0 : max(_3899, 0.0));
                                float _3902 = isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0));
                                float _3903 = dot(vec3(_1155, _1158, _1161), vec3(_3895 * _3889, _3895 * _3890, _3895 * _3891));
                                float _5068 = isnan(0.0) ? _3903 : (isnan(_3903) ? 0.0 : max(_3903, 0.0));
                                float _3906 = isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0));
                                float _3910 = ((_3906 * _3906) * (_3888 + (-1.0))) + 1.0;
                                float _3911 = _3848 * _3887;
                                float _3912 = _3911 * _3911;
                                float _3918 = ((1.0 - _3912) * dot(vec3(_1155, _1158, _1161), vec3(_3835, _3836, _3837))) + _3912;
                                float _5079 = isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0));
                                float _3919 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
                                float _3920 = 1.0 - _3887;
                                float _3930 = (0.5 / (((_3919 * ((_3902 * _3920) + _3887)) + 9.9999999392252902907785028219223e-09) + (((_3919 * _3920) + _3887) * _3902))) * _3919;
                                float _5090 = isnan(0.0) ? _3930 : (isnan(_3930) ? 0.0 : max(_3930, 0.0));
                                float _3940 = (_3865 * _3842) * (((_3888 * 3.1415927410125732421875) * (isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0)))) / ((_3910 * _3910) * ((_3855 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3866 * _3712.y;
                                frontier_phi_83_pred_1 = _3866 * _3712.x;
                                frontier_phi_83_pred_2 = _3940 * _3724.z;
                                frontier_phi_83_pred_3 = _3940 * _3724.y;
                                frontier_phi_83_pred_4 = _3940 * _3724.x;
                                frontier_phi_83_pred_5 = _3866 * _3712.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3948 = frontier_phi_83_pred;
                            _3947 = frontier_phi_83_pred_1;
                            _3946 = frontier_phi_83_pred_2;
                            _3945 = frontier_phi_83_pred_3;
                            _3944 = frontier_phi_83_pred_4;
                            _3949 = frontier_phi_83_pred_5;
                            _3654 = _3947 + _3667;
                            _3655 = _3948 + _3668;
                            _3656 = _3949 + _3669;
                            _3651 = _3944 + _3664;
                            _3652 = _3945 + _3665;
                            _3653 = _3946 + _3666;
                            if (_3671 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3664 = _3651;
                                _3665 = _3652;
                                _3666 = _3653;
                                _3667 = _3654;
                                _3668 = _3655;
                                _3669 = _3656;
                                _3670 = _3671;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3656;
                        frontier_phi_77_pred_1 = _3655;
                        frontier_phi_77_pred_2 = _3654;
                        frontier_phi_77_pred_3 = _3653;
                        frontier_phi_77_pred_4 = _3652;
                        frontier_phi_77_pred_5 = _3651;
                    }
                    _3293 = frontier_phi_77_pred;
                    _3291 = frontier_phi_77_pred_1;
                    _3289 = frontier_phi_77_pred_2;
                    _3287 = frontier_phi_77_pred_3;
                    _3285 = frontier_phi_77_pred_4;
                    _3283 = frontier_phi_77_pred_5;
                    uint _3449 = _3448 + 1u;
                    if (_3449 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3442 = _3283;
                        _3443 = _3285;
                        _3444 = _3287;
                        _3445 = _3289;
                        _3446 = _3291;
                        _3447 = _3293;
                        _3448 = _3449;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3287;
                frontier_phi_58_59_ladder_1 = _3293;
                frontier_phi_58_59_ladder_2 = _3291;
                frontier_phi_58_59_ladder_3 = _3289;
                frontier_phi_58_59_ladder_4 = _3285;
                frontier_phi_58_59_ladder_5 = _3283;
            }
            else
            {
                frontier_phi_58_59_ladder = _3157;
                frontier_phi_58_59_ladder_1 = _3163;
                frontier_phi_58_59_ladder_2 = _3161;
                frontier_phi_58_59_ladder_3 = _3159;
                frontier_phi_58_59_ladder_4 = _3155;
                frontier_phi_58_59_ladder_5 = _3153;
            }
            _3282 = frontier_phi_58_59_ladder_5;
            _3284 = frontier_phi_58_59_ladder_4;
            _3286 = frontier_phi_58_59_ladder;
            _3288 = frontier_phi_58_59_ladder_3;
            _3290 = frontier_phi_58_59_ladder_2;
            _3292 = frontier_phi_58_59_ladder_1;
        }
        float _3297 = isnan(1.0) ? _1259 : (isnan(_1259) ? 1.0 : min(_1259, 1.0));
        _3036 = (_3297 * _3288) + _2469;
        _3038 = (_3297 * _3290) + _2471;
        _3040 = (_3297 * _3292) + _2473;
        _3042 = ((_3282 * _1244) * _3297) + _2817;
        _3044 = ((_3284 * _1246) * _3297) + _2819;
        _3046 = ((_3286 * _1247) * _3297) + _2821;
    }
    else
    {
        _3036 = _2469;
        _3038 = _2471;
        _3040 = _2473;
        _3042 = _2817;
        _3044 = _2819;
        _3046 = _2821;
    }
    uint _3052 = _1188 + uint(cbMatDynParam._m0[0u].w);
    float _3058 = cbInstanceData._m0[_3052].x * ((((cbMtdParam._m0[22u].x * _965.x) * cbMtdParam._m0[32u].x) * _986) + _757);
    float _3059 = cbInstanceData._m0[_3052].y * ((((cbMtdParam._m0[22u].y * _965.y) * cbMtdParam._m0[32u].x) * _986) + _758);
    float _3060 = cbInstanceData._m0[_3052].z * ((((cbMtdParam._m0[22u].z * _965.z) * cbMtdParam._m0[32u].x) * _986) + _759);
    float _5106 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
    float _5117 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _5128 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
    float _3077 = (((isnan(1.0) ? _5106 : (isnan(_5106) ? 1.0 : min(_5106, 1.0))) * (_3036 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1259))) + ((_3042 + ((isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0))) * _2088)) * cbPerFrame._m0[3u].x)) + _3058;
    float _3079 = (_3059 + ((_3044 + ((isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0))) * _2088)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5117 : (isnan(_5117) ? 1.0 : min(_5117, 1.0))) * (_3038 + ((isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) * _1259)));
    float _3081 = (_3060 + ((_3046 + ((isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))) * _2088)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0))) * (_3040 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1259)));
    float _3082 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
    float _3083 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
    float _3084 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
    float _3090 = cbMtdParam._m0[2u].x * _3058;
    float _3091 = cbMtdParam._m0[2u].y * _3059;
    float _3092 = cbMtdParam._m0[2u].z * _3060;
    float _5154 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3094 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
    uint _3095 = _1187 + 6u;
    float _3103 = _1132 / cbSceneParam._m0[86u].x;
    float _3104 = _1133 / cbSceneParam._m0[86u].y;
    vec4 _3118 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, (log2((isnan(cbSceneParam._m0[77u].w) ? _1075 : (isnan(_1075) ? cbSceneParam._m0[77u].w : min(_1075, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3120 = _3118.x;
    float _3121 = _3118.y;
    float _3122 = _3118.z;
    float _3123 = _3118.w;
    float _3215;
    float _3217;
    float _3219;
    float _3221;
    if (_1075 > cbSceneParam._m0[78u].w)
    {
        float _3178 = isnan(_1075) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1075 : min(cbSceneParam._m0[80u].w, _1075));
        float _3179 = _3178 / _1075;
        float _3190 = _3179 * _1105;
        float _3191 = _1106 * _3179;
        float _3192 = (-0.0) - _3191;
        float _3193 = _3179 * _1107;
        float _3195 = (cbSceneParam._m0[77u].w * _3192) / _3178;
        float _3196 = _3195 + cbSceneParam._m0[79u].w;
        float _3197 = cbSceneParam._m0[79u].w - _3191;
        float _3203 = sqrt(((_3190 * _3190) + (_3191 * _3191)) + (_3193 * _3193));
        float _3206 = (1.0 - (cbSceneParam._m0[77u].w / _3178)) * _3203;
        float _3211 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3213 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3399;
        if (abs((_3192 - _3195) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3399 = ((((_3196 > 0.0) ? exp2(_3211 * _3196) : (2.0 - exp2(_3213 * _3196))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3206;
        }
        else
        {
            float _3343 = 1.0 / cbSceneParam._m0[80u].x;
            float _3344 = isnan(_3197) ? _3196 : (isnan(_3196) ? _3197 : max(_3196, _3197));
            float _3345 = isnan(_3197) ? _3196 : (isnan(_3196) ? _3197 : min(_3196, _3197));
            float _3354 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : min(_3344, 0.0));
            float _3355 = isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : min(_3345, 0.0));
            _3399 = ((abs(_3203 / _3192) * cbSceneParam._m0[80u].y) * ((((_3354 - _3355) * 2.0) - ((exp2(_3211 * (isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0)))) - exp2(_3211 * (isnan(0.0) ? _3345 : (isnan(_3345) ? 0.0 : max(_3345, 0.0))))) * _3343)) - ((exp2(_3213 * _3354) - exp2(_3213 * _3355)) * _3343))) + (_3206 * cbSceneParam._m0[80u].z);
        }
        vec4 _3401 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3103, _3104, 1.0), 0.0);
        float _3410 = exp2((_3399 * (-1.44269502162933349609375)) * (1.0 - _3401.w));
        float _3411 = log2(_3410);
        float _3427 = log2(_3123);
        _3215 = (exp2(_3427 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].x)) * _3401.x) / cbSceneParam._m0[78u].x)) + _3120;
        _3217 = (exp2(_3427 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].y)) * _3401.y) / cbSceneParam._m0[78u].y)) + _3121;
        _3219 = (exp2(_3427 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3411 * cbSceneParam._m0[78u].z)) * _3401.z) / cbSceneParam._m0[78u].z)) + _3122;
        _3221 = _3410 * _3123;
    }
    else
    {
        _3215 = _3120;
        _3217 = _3121;
        _3219 = _3122;
        _3221 = _3123;
    }
    bool _3437;
    vec4 _3231;
    vec4 _3253;
    float _3255;
    float _3259;
    float _3260;
    float _3261;
    float _3264;
    float _3267;
    float _3270;
    float _3271;
    bool _3281;
    for (;;)
    {
        _3231 = cbMatDynParam._m0[0u];
        float _3233 = roundEven(_3231.y);
        bool _3234 = _3233 == 3.0;
        float _3235 = log2(_3221);
        float _3239 = exp2(_3235 * cbSceneParam._m0[78u].x);
        float _3240 = exp2(_3235 * cbSceneParam._m0[78u].y);
        float _3241 = exp2(_3235 * cbSceneParam._m0[78u].z);
        float _3242 = _3239 * _3082;
        float _3243 = _3240 * _3083;
        float _3244 = _3241 * _3084;
        float _3251 = _1121 + (-0.5);
        _3253 = cbMtdParam._m0[1u];
        _3255 = _3253.y * _3251;
        float _3258 = (_3233 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3259 = _3258 * (_3234 ? _3242 : (_3242 + (cbSceneParam._m0[72u].w * _3215)));
        _3260 = _3258 * (_3234 ? _3243 : (_3243 + (cbSceneParam._m0[72u].w * _3217)));
        _3261 = _3258 * (_3234 ? _3244 : (_3244 + (cbSceneParam._m0[72u].w * _3219)));
        _3264 = ((_3090 * _3094) * _3239) * _3258;
        _3267 = ((_3091 * _3094) * _3240) * _3258;
        _3270 = ((_3092 * _3094) * _3241) * _3258;
        _3271 = _3251 * 0.999000012874603271484375;
        _3281 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3281)
        {
            if ((cbInstanceData._m0[_1187 + 7u].x + _3271) < 0.5)
            {
                _3437 = true;
                break;
            }
        }
        uint _3378 = _1188 + uint(_3231.w);
        if ((cbInstanceData._m0[_3378].w < 1.0) && ((cbInstanceData._m0[_3378].w + _3271) < 0.5))
        {
            _3437 = true;
            break;
        }
        if ((_3255 + 1.0) < _3253.x)
        {
            _3437 = true;
            break;
        }
        _3437 = false;
        break;
    }
    float _3642;
    if (_3437)
    {
        discard_state = true;
        _3642 = 0.0;
    }
    else
    {
        _3642 = cbInstanceData._m0[_3095].w;
    }
    SV_Target.x = _3259;
    SV_Target.y = _3260;
    SV_Target.z = _3261;
    SV_Target.w = _3642;
    SV_Target_1.x = _3264;
    SV_Target_1.y = _3267;
    SV_Target_1.z = _3270;
    SV_Target_1.w = cbInstanceData._m0[_3095].w;
    discard_exit();
}


