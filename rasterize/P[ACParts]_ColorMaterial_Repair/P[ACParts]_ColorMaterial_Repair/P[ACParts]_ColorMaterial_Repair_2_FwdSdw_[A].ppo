#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1663;
float _4355;
float _4356;
float _4357;
float _4358;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _241 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _242 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _243 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _249 = inversesqrt(dot(vec3(_241, _242, _243), vec3(_241, _242, _243)));
    float _256 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _263 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _278 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _292 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_278 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _299 = log2(0.0);
    float _301 = exp2(_299 * cbMtdParam._m0[31u].z);
    float _305 = _301 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _301);
    float _306 = _301 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _301);
    float _307 = _301 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _301);
    float _308 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _309 = isnan(0.0) ? _306 : (isnan(_306) ? 0.0 : max(_306, 0.0));
    float _310 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _311 = isnan(1.0) ? _308 : (isnan(_308) ? 1.0 : min(_308, 1.0));
    float _313 = isnan(1.0) ? _309 : (isnan(_309) ? 1.0 : min(_309, 1.0));
    float _314 = isnan(1.0) ? _310 : (isnan(_310) ? 1.0 : min(_310, 1.0));
    vec4 _330 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _278) + cbTextureTilingScale._m0[0u].w));
    float _334 = _330.z;
    float _335 = _330.w;
    float _336 = 1.0 - _335;
    float _343 = exp2(log2((1.0 - (_336 * _334)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _344 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    float _345 = isnan(1.0) ? _344 : (isnan(_344) ? 1.0 : min(_344, 1.0));
    float _357 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_336 * _336) * _334))) * cbMtdParam._m0[34u].w);
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    vec4 _372 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _375 = _372.y;
    float _378 = (_375 * ((isnan(1.0) ? _358 : (isnan(_358) ? 1.0 : min(_358, 1.0))) - _335)) + _335;
    vec4 _390 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _278) + cbTextureTilingScale._m0[2u].w));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = cbMtdParam._m0[12u].x;
    _208[0u] = cbMtdParam._m0[12u].y;
    _209[0u] = cbMtdParam._m0[12u].z;
    _207[1u] = cbMtdParam._m0[13u].x;
    _208[1u] = cbMtdParam._m0[13u].y;
    _209[1u] = cbMtdParam._m0[13u].z;
    _207[2u] = cbMtdParam._m0[14u].x;
    _208[2u] = cbMtdParam._m0[14u].y;
    _209[2u] = cbMtdParam._m0[14u].z;
    _207[3u] = cbMtdParam._m0[15u].x;
    _208[3u] = cbMtdParam._m0[15u].y;
    _209[3u] = cbMtdParam._m0[15u].z;
    _207[4u] = cbMtdParam._m0[16u].x;
    _208[4u] = cbMtdParam._m0[16u].y;
    _209[4u] = cbMtdParam._m0[16u].z;
    _207[5u] = cbMtdParam._m0[11u].x;
    _208[5u] = cbMtdParam._m0[11u].y;
    _209[5u] = cbMtdParam._m0[11u].z;
    float _458 = (_372.x + (-0.02500000037252902984619140625)) * 8.0;
    float _460 = roundEven(_458);
    float _461 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    uint _464 = uint(int(isnan(5.0) ? _461 : (isnan(_461) ? 5.0 : min(_461, 5.0))));
    float _214[6];
    float _215[6];
    float _216[6];
    _214[0u] = 1.0;
    _215[0u] = 1.0;
    _216[0u] = 1.0;
    _214[1u] = cbMtdParam._m0[23u].x;
    _215[1u] = cbMtdParam._m0[23u].y;
    _216[1u] = cbMtdParam._m0[23u].z;
    _214[2u] = cbMtdParam._m0[21u].x;
    _215[2u] = cbMtdParam._m0[21u].y;
    _216[2u] = cbMtdParam._m0[21u].z;
    _214[3u] = cbMtdParam._m0[19u].x;
    _215[3u] = cbMtdParam._m0[19u].y;
    _216[3u] = cbMtdParam._m0[19u].z;
    _214[4u] = cbMtdParam._m0[18u].x;
    _215[4u] = cbMtdParam._m0[18u].y;
    _216[4u] = cbMtdParam._m0[18u].z;
    _214[5u] = cbMtdParam._m0[17u].x;
    _215[5u] = cbMtdParam._m0[17u].y;
    _216[5u] = cbMtdParam._m0[17u].z;
    float _551 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[38u].w * TEXCOORD.x) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[39u].x * TEXCOORD.y) * cbMtdParam._m0[33u].x) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _552 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
    uint _554 = uint(int(isnan(5.0) ? _552 : (isnan(_552) ? 5.0 : min(_552, 5.0))));
    float _210[6];
    _210[0u] = 1.0;
    _210[1u] = cbMtdParam._m0[23u].w;
    _210[2u] = cbMtdParam._m0[21u].w;
    _210[3u] = cbMtdParam._m0[19u].w;
    _210[4u] = cbMtdParam._m0[18u].w;
    _210[5u] = cbMtdParam._m0[17u].w;
    float _591 = ((((_207[_464] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_214[_554] - _207[_464])) * _210[_464])) * _375) + cbMtdParam._m0[10u].x) * _390.x;
    float _592 = ((((_208[_464] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_215[_554] - _208[_464])) * _210[_464])) * _375) + cbMtdParam._m0[10u].y) * _390.y;
    float _593 = ((((_209[_464] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_216[_554] - _209[_464])) * _210[_464])) * _375) + cbMtdParam._m0[10u].z) * _390.z;
    vec4 _605 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _278) + cbTextureTilingScale._m0[1u].w));
    float _625 = (((cbMtdParam._m0[9u].x * _605.x) - _591) * _378) + _591;
    float _626 = (((cbMtdParam._m0[9u].y * _605.y) - _592) * _378) + _592;
    float _627 = (((cbMtdParam._m0[9u].z * _605.z) - _593) * _378) + _593;
    vec4 _639 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _278) + cbTextureTilingScale._m0[5u].w));
    float _659 = (((cbMtdParam._m0[20u].x * _639.x) - _625) * _345) + _625;
    float _660 = (((cbMtdParam._m0[20u].y * _639.y) - _626) * _345) + _626;
    float _661 = (((cbMtdParam._m0[20u].z * _639.z) - _627) * _345) + _627;
    vec4 _674 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _278) + cbTextureTilingScale._m0[7u].w));
    float _211[6];
    float _212[6];
    float _213[6];
    _211[0u] = cbMtdParam._m0[24u].x;
    _212[0u] = cbMtdParam._m0[24u].y;
    _213[0u] = cbMtdParam._m0[24u].z;
    _211[1u] = cbMtdParam._m0[25u].x;
    _212[1u] = cbMtdParam._m0[25u].y;
    _213[1u] = cbMtdParam._m0[25u].z;
    _211[2u] = cbMtdParam._m0[26u].x;
    _212[2u] = cbMtdParam._m0[26u].y;
    _213[2u] = cbMtdParam._m0[26u].z;
    _211[3u] = cbMtdParam._m0[27u].x;
    _212[3u] = cbMtdParam._m0[27u].y;
    _213[3u] = cbMtdParam._m0[27u].z;
    _211[4u] = cbMtdParam._m0[28u].x;
    _212[4u] = cbMtdParam._m0[28u].y;
    _213[4u] = cbMtdParam._m0[28u].z;
    _211[5u] = cbMtdParam._m0[29u].x;
    _212[5u] = cbMtdParam._m0[29u].y;
    _213[5u] = cbMtdParam._m0[29u].z;
    float _761 = _211[_464] * _375;
    float _762 = _212[_464] * _375;
    float _763 = _213[_464] * _375;
    float _764 = _761 + ((_292.x * 4.5) * ((((cbMtdParam._m0[30u].x * _674.x) - _659) * _311) + _659));
    float _765 = _762 + ((_292.y * 4.5) * ((((cbMtdParam._m0[30u].y * _674.y) - _660) * _313) + _660));
    float _766 = _763 + ((_292.z * 4.5) * ((((cbMtdParam._m0[30u].z * _674.z) - _661) * _314) + _661));
    float _202[5];
    float _203[5];
    _202[0u] = cbMtdParam._m0[35u].y;
    _203[0u] = cbMtdParam._m0[35u].z;
    _202[1u] = cbMtdParam._m0[36u].w;
    _203[1u] = cbMtdParam._m0[37u].x;
    _202[2u] = cbMtdParam._m0[37u].y;
    _203[2u] = cbMtdParam._m0[37u].z;
    _202[3u] = cbMtdParam._m0[37u].w;
    _203[3u] = cbMtdParam._m0[38u].x;
    _202[4u] = cbMtdParam._m0[38u].y;
    _203[4u] = cbMtdParam._m0[38u].z;
    float _794 = roundEven(5.0 - _458);
    float _795 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _796 = isnan(4.0) ? _795 : (isnan(_795) ? 4.0 : min(_795, 4.0));
    float _798 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    uint _800 = uint(int(isnan(4.0) ? _798 : (isnan(_798) ? 4.0 : min(_798, 4.0))));
    float _809 = ((cbMtdParam._m0[39u].z - _203[_800]) * _378) + _203[_800];
    float _817 = ((cbMtdParam._m0[40u].x - _809) * _345) + _809;
    float _822 = ((cbMtdParam._m0[40u].z - _817) * _311) + _817;
    vec4 _838 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _278) + cbTextureTilingScale._m0[8u].w));
    float _840 = _838.x;
    float _841 = _838.y;
    float _843 = _838.z + _202[_800];
    vec4 _855 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _278) + cbTextureTilingScale._m0[9u].w));
    float _863 = (((cbMtdParam._m0[39u].y - _843) + _855.z) * _378) + _843;
    vec4 _875 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _278) + cbTextureTilingScale._m0[11u].w));
    float _883 = (((cbMtdParam._m0[39u].w - _863) + _875.z) * _345) + _863;
    float _889 = ((((_334 * 2.0) * _883) - _883) * cbMtdParam._m0[33u].w) + _883;
    vec4 _901 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _278) + cbTextureTilingScale._m0[12u].w));
    float _909 = (((_901.z + cbMtdParam._m0[40u].y) - _889) * _314) + _889;
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _971 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_940 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_944 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _986 = (-0.0) - ((_944 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _990 = (_944 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _991 = isnan(_990) ? _986 : (isnan(_986) ? _990 : min(_986, _990));
    float _4462 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
    float _992 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
    float _1017 = ((_855.x - _840) * _378) + _840;
    float _1018 = ((_855.y - _841) * _378) + _841;
    float _1023 = ((_875.x - _1017) * _345) + _1017;
    float _1024 = ((_875.y - _1018) * _345) + _1018;
    float _1033 = ((((_901.x - _1023) * _311) + _1023) * 2.0) + (-1.0);
    float _1034 = ((((_901.y - _1024) * _313) + _1024) * 2.0) + (-1.0);
    float _1035 = dot(vec2(_1033, _1034), vec2(_1033, _1034));
    float _4473 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
    float _1040 = sqrt(1.0 - (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))));
    float _1043 = (cbMtdParam._m0[34u].x * ((_330.x * 2.0) + (-1.0))) + _1033;
    float _1044 = (cbMtdParam._m0[34u].x * ((_330.y * 2.0) + (-1.0))) + _1034;
    float _1047 = fma(_1040, _256 * NORMAL.x, fma(_1044, _263 * TANGENT.x, (_249 * _241) * _1043));
    float _1050 = fma(_1040, _256 * NORMAL.y, fma(_1044, _263 * TANGENT.y, (_249 * _242) * _1043));
    float _1053 = fma(_1040, _256 * NORMAL.z, fma(_1044, _263 * TANGENT.z, (_249 * _243) * _1043));
    float _1057 = inversesqrt(dot(vec3(_1047, _1050, _1053), vec3(_1047, _1050, _1053)));
    float _1058 = _1057 * _1047;
    float _1059 = _1057 * _1050;
    float _1060 = _1057 * _1053;
    float _4484 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
    float _1061 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
    float _4495 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _4506 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _4517 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _4528 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _1065 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _1081 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1101 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1111 = cbSceneParam._m0[71u].x - (_940 / _1101);
    float _1112 = cbSceneParam._m0[71u].y - (_944 / _1101);
    float _1113 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1101);
    float _1117 = inversesqrt(dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113)));
    float _1118 = _1111 * _1117;
    float _1119 = _1112 * _1117;
    float _1120 = _1113 * _1117;
    vec4 _1125 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1127 = _1125.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1345 = sqrt(((_1111 * _1111) + (_1112 * _1112)) + (_1113 * _1113));
        float _1351 = (cbMatDynParam._m0[5u].x * _1345) + cbMatDynParam._m0[5u].y;
        float _4539 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1356 = (cbMatDynParam._m0[5u].z * _1345) + cbMatDynParam._m0[5u].w;
        float _4550 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0))) - _1352)) + _1352) < ((_1127 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1138 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1139 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1141 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1143 = _1141.w;
    float _1161 = fma(_1060, cbSceneParam._m0[5u].z, fma(_1059, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1058));
    float _1164 = fma(_1060, cbSceneParam._m0[6u].z, fma(_1059, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1058));
    float _1167 = fma(_1060, cbSceneParam._m0[7u].z, fma(_1059, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1058));
    vec4 _1169 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1180 = (((_1169.y - _1061) + (_1169.w * _1061)) * cbMtdParam._m0[3u].x) + _1061;
    uint _1193 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1194 = _1193 + 9u;
    uint _1195 = _1194 + uint(cbMatDynParam._m0[0u].w);
    float _1201 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) * cbInstanceData._m0[_1195].x;
    float _1202 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0)))) * cbInstanceData._m0[_1195].y;
    float _1203 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0)))) * cbInstanceData._m0[_1195].z;
    float _4561 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
    float _1204 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
    float _4572 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
    float _1205 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
    float _4583 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
    float _1206 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    vec4 _1207 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1212 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1223 = (((_1212.x - _1065) + (_1212.w * _1065)) * cbMtdParam._m0[3u].x) + _1065;
    float _1236 = (cbMtdParam._m0[3u].x * (((_1204 * _1143) - _1204) + _1207.x)) + _1204;
    float _1237 = (cbMtdParam._m0[3u].x * (((_1205 * _1143) - _1205) + _1207.y)) + _1205;
    float _1238 = (cbMtdParam._m0[3u].x * (((_1206 * _1143) - _1206) + _1207.z)) + _1206;
    float _1239 = 1.0 - _1223;
    float _1240 = _1239 * _1236;
    float _1241 = _1239 * _1237;
    float _1242 = _1239 * _1238;
    float _1247 = (_1236 + (-0.039999999105930328369140625)) * _1223;
    float _1248 = (_1237 + (-0.039999999105930328369140625)) * _1223;
    float _1249 = (_1238 + (-0.039999999105930328369140625)) * _1223;
    float _1250 = _1247 + 0.039999999105930328369140625;
    float _1252 = _1248 + 0.039999999105930328369140625;
    float _1253 = _1249 + 0.039999999105930328369140625;
    vec4 _1262 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1138, cbSceneParam._m0[86u].y * _1139));
    float _1265 = _1262.x * TEXCOORD_5.w;
    float _1266 = dot(vec3(_1058, _1059, _1060), vec3(_1118, _1119, _1120));
    float _1269 = _1266 * 2.0;
    float _1273 = (_1269 * _1058) - _1118;
    float _1274 = (_1269 * _1059) - _1119;
    float _1275 = (_1269 * _1060) - _1120;
    float _1279 = abs(dot(vec3(_1118, _1119, _1120), vec3(_1058, _1059, _1060)));
    float _4594 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
    float _1281 = sqrt(_1180);
    float _1292 = exp2((_1281 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1281 * 3.0));
    float _1298 = (1.0 - _1292) * ((_1281 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1299 = _1292 * _1281;
    float _1327 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1331 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1335 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1662;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1389 = fma(_1335, cbModelParam._m0[26u].z, fma(_1331, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1327));
        float _1393 = fma(_1335, cbModelParam._m0[27u].z, fma(_1331, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1327));
        float _1397 = fma(_1335, cbModelParam._m0[28u].z, fma(_1331, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1327));
        float _1421 = _1327 + _1058;
        float _1422 = _1331 + _1059;
        float _1423 = _1335 + _1060;
        float _1433 = fma(_1423, cbModelParam._m0[26u].z, fma(_1422, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1421)) - _1389;
        float _1434 = fma(_1423, cbModelParam._m0[27u].z, fma(_1422, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1421)) - _1393;
        float _1435 = fma(_1423, cbModelParam._m0[28u].z, fma(_1422, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1421)) - _1397;
        float _1439 = inversesqrt(dot(vec3(_1433, _1434, _1435), vec3(_1433, _1434, _1435)));
        float _1451 = ((_1439 * _1433) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1389 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1452 = ((_1439 * _1434) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1393 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1453 = ((_1439 * _1435) / cbModelParam._m0[34u].z) + ((((((_1397 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1456 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1451, _1452, _1453), 0.0);
        float _1490 = exp2((_1456.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1456.x + (-0.5));
        float _1492 = _1490 * (_1456.y + (-0.5));
        float _1493 = _1490 * (_1456.z + (-0.5));
        float _1500 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1501 = _1500 * (_1463.x + (-0.5));
        float _1502 = _1500 * (_1463.y + (-0.5));
        float _1503 = _1500 * (_1463.z + (-0.5));
        float _1510 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1511 = _1510 * (_1470.x + (-0.5));
        float _1512 = _1510 * (_1470.y + (-0.5));
        float _1513 = _1510 * (_1470.z + (-0.5));
        float _1520 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1521 = _1520 * (_1477.x + (-0.5));
        float _1522 = _1520 * (_1477.y + (-0.5));
        float _1523 = _1520 * (_1477.z + (-0.5));
        float _1524 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1525 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = _1491 * 0.5;
        float _1528 = _1501 * 0.5;
        float _1529 = _1511 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1544 = (dot(vec3(_1058, _1059, _1060), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _4620 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1554 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1524 + 9.9999997473787516355514526367188e-06);
        float _4631 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4642 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_1556 + 1.0))) + _1561) * _1524;
        float _1571 = _1492 * 0.5;
        float _1572 = _1502 * 0.5;
        float _1573 = _1512 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_1058, _1059, _1060), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4653 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1525 + 9.9999997473787516355514526367188e-06);
        float _4664 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4675 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0))) * (_1598 + 1.0))) + _1603) * _1525;
        float _1613 = _1493 * 0.5;
        float _1614 = _1503 * 0.5;
        float _1615 = _1513 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_1058, _1059, _1060), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4686 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _4697 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4708 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_1640 + 1.0))) + _1645) * _1526;
        _1662 = _1493;
        _1664 = _1492;
        _1665 = _1491;
        _1666 = _1503;
        _1667 = _1502;
        _1668 = _1501;
        _1669 = _1513;
        _1670 = _1512;
        _1671 = _1511;
        _1672 = _1526;
        _1673 = _1525;
        _1674 = _1524;
        _1675 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1676 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1677 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1663;
        _1664 = _1663;
        _1665 = _1663;
        _1666 = _1663;
        _1667 = _1663;
        _1668 = _1663;
        _1669 = _1663;
        _1670 = _1663;
        _1671 = _1663;
        _1672 = _1663;
        _1673 = _1663;
        _1674 = _1663;
        _1675 = 0.0;
        _1676 = 0.0;
        _1677 = 0.0;
    }
    float _1970;
    float _1971;
    float _1972;
    float _1973;
    float _1974;
    float _1975;
    float _1976;
    float _1977;
    float _1978;
    float _1979;
    float _1980;
    float _1981;
    float _1982;
    float _1983;
    float _1984;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1703 = fma(_1335, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1327));
        float _1707 = fma(_1335, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1327));
        float _1711 = fma(_1335, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1327));
        float _1733 = _1327 + _1058;
        float _1734 = _1331 + _1059;
        float _1735 = _1335 + _1060;
        float _1745 = fma(_1735, cbModelParam._m0[30u].z, fma(_1734, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1733)) - _1703;
        float _1746 = fma(_1735, cbModelParam._m0[31u].z, fma(_1734, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1733)) - _1707;
        float _1747 = fma(_1735, cbModelParam._m0[32u].z, fma(_1734, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1733)) - _1711;
        float _1751 = inversesqrt(dot(vec3(_1745, _1746, _1747), vec3(_1745, _1746, _1747)));
        float _1763 = ((_1751 * _1745) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1703 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1764 = ((_1751 * _1746) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1707 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1765 = ((_1751 * _1747) / cbModelParam._m0[35u].z) + ((((((_1711 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1767 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1763, _1764, _1765), 0.0);
        vec4 _1774 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1763, _1764, _1765), 0.0);
        vec4 _1781 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1763, _1764, _1765), 0.0);
        vec4 _1788 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1763, _1764, _1765), 0.0);
        float _1800 = exp2((_1767.w + (-0.5)) * 20.0) * 2.0;
        float _1801 = _1800 * (_1767.x + (-0.5));
        float _1802 = _1800 * (_1767.y + (-0.5));
        float _1803 = _1800 * (_1767.z + (-0.5));
        float _1810 = exp2((_1774.w + (-0.5)) * 20.0) * 2.0;
        float _1811 = _1810 * (_1774.x + (-0.5));
        float _1812 = _1810 * (_1774.y + (-0.5));
        float _1813 = _1810 * (_1774.z + (-0.5));
        float _1820 = exp2((_1781.w + (-0.5)) * 20.0) * 2.0;
        float _1821 = _1820 * (_1781.x + (-0.5));
        float _1822 = _1820 * (_1781.y + (-0.5));
        float _1823 = _1820 * (_1781.z + (-0.5));
        float _1830 = exp2((_1788.w + (-0.5)) * 20.0) * 2.0;
        float _1831 = _1830 * (_1788.x + (-0.5));
        float _1832 = _1830 * (_1788.y + (-0.5));
        float _1833 = _1830 * (_1788.z + (-0.5));
        float _1834 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
        float _1835 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
        float _1836 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1837 = _1801 * 0.5;
        float _1838 = _1811 * 0.5;
        float _1839 = _1821 * 0.5;
        float _1840 = dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839));
        float _1845 = (_1840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1840);
        float _1853 = (dot(vec3(_1058, _1059, _1060), vec3(_1845 * _1837, _1845 * _1838, _1845 * _1839)) + 1.0) * 0.5;
        float _4749 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1862 = sqrt(((_1838 * _1838) + (_1837 * _1837)) + (_1839 * _1839)) / (_1834 + 9.9999997473787516355514526367188e-06);
        float _4760 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        float _1863 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _1864 = _1863 * 2.0;
        float _1868 = (1.0 - _1863) / (_1863 + 1.0);
        float _4771 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
        float _1878 = ((((1.0 - _1869) * (_1864 + 2.0)) * exp2(log2(isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_1864 + 1.0))) + _1869) * _1834;
        float _1879 = _1802 * 0.5;
        float _1880 = _1812 * 0.5;
        float _1881 = _1822 * 0.5;
        float _1882 = dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881));
        float _1887 = (_1882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1882);
        float _1895 = (dot(vec3(_1058, _1059, _1060), vec3(_1887 * _1879, _1887 * _1880, _1887 * _1881)) + 1.0) * 0.5;
        float _4782 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1904 = sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881)) / (_1835 + 9.9999997473787516355514526367188e-06);
        float _4793 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
        float _1906 = _1905 * 2.0;
        float _1910 = (1.0 - _1905) / (_1905 + 1.0);
        float _4804 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0));
        float _1920 = ((((1.0 - _1911) * (_1906 + 2.0)) * exp2(log2(isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_1906 + 1.0))) + _1911) * _1835;
        float _1921 = _1803 * 0.5;
        float _1922 = _1813 * 0.5;
        float _1923 = _1823 * 0.5;
        float _1924 = dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923));
        float _1929 = (_1924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1924);
        float _1937 = (dot(vec3(_1058, _1059, _1060), vec3(_1929 * _1921, _1929 * _1922, _1929 * _1923)) + 1.0) * 0.5;
        float _4815 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1946 = sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923)) / (_1836 + 9.9999997473787516355514526367188e-06);
        float _4826 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4826 : (isnan(_4826) ? 1.0 : min(_4826, 1.0));
        float _1948 = _1947 * 2.0;
        float _1952 = (1.0 - _1947) / (_1947 + 1.0);
        float _4837 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1953 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
        float _1962 = ((((1.0 - _1953) * (_1948 + 2.0)) * exp2(log2(isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0))) * (_1948 + 1.0))) + _1953) * _1836;
        _1970 = _1803;
        _1971 = _1802;
        _1972 = _1801;
        _1973 = _1813;
        _1974 = _1812;
        _1975 = _1811;
        _1976 = _1823;
        _1977 = _1822;
        _1978 = _1821;
        _1979 = _1836;
        _1980 = _1835;
        _1981 = _1834;
        _1982 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0)));
        _1983 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)));
        _1984 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)));
    }
    else
    {
        _1970 = _1663;
        _1971 = _1663;
        _1972 = _1663;
        _1973 = _1663;
        _1974 = _1663;
        _1975 = _1663;
        _1976 = _1663;
        _1977 = _1663;
        _1978 = _1663;
        _1979 = _1663;
        _1980 = _1663;
        _1981 = _1663;
        _1982 = 0.0;
        _1983 = 0.0;
        _1984 = 0.0;
    }
    float _1994 = (cbModelParam._m0[1u].x * (_1982 - _1675)) + _1675;
    float _1995 = (cbModelParam._m0[1u].x * (_1983 - _1676)) + _1676;
    float _1996 = (cbModelParam._m0[1u].x * (_1984 - _1677)) + _1677;
    float _2017 = fma(_1996, cbSceneParam._m0[89u].z, fma(_1995, cbSceneParam._m0[89u].y, _1994 * cbSceneParam._m0[89u].x));
    float _2020 = fma(_1996, cbSceneParam._m0[90u].z, fma(_1995, cbSceneParam._m0[90u].y, _1994 * cbSceneParam._m0[90u].x));
    float _2023 = fma(_1996, cbSceneParam._m0[91u].z, fma(_1995, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1994));
    float _2036 = _1273 * 0.5;
    float _2037 = _1274 * 0.5;
    float _2038 = _1275 * 0.5;
    float _2039 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1972, _1975, _1978, _1981));
    float _2042 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1971, _1974, _1977, _1980));
    float _2045 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1970, _1973, _1976, _1979));
    float _2079;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2052 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1662, _1666, _1669, _1672));
        float _2056 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1664, _1667, _1670, _1673));
        float _2060 = dot(vec4(_2036, _2037, _2038, 1.0), vec4(_1665, _1668, _1671, _1674));
        float _2067 = dot(vec4(cbModelParam._m0[39u]), vec4(_2036, _2037, _2038, 1.0));
        _2079 = dot(vec3(isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0)), isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0)), isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2067) ? 0.0 : (isnan(0.0) ? _2067 : max(0.0, _2067))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2079 = 1.0;
    }
    float _2090;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2081 = dot(vec4(cbModelParam._m0[40u]), vec4(_2036, _2037, _2038, 1.0));
        _2090 = dot(vec3(isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0)), isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)), isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2081) ? 0.0 : (isnan(0.0) ? _2081 : max(0.0, _2081))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2090 = 1.0;
    }
    float _2094 = (_2090 * cbModelParam._m0[1u].x) + (_2079 * (1.0 - cbModelParam._m0[1u].x));
    float _2104 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1180);
    float _2105 = isnan(_2104) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2104 : min(cbModelParam._m0[25u].z, _2104));
    float _2185;
    float _2187;
    float _2189;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2152 = fma(_1335, cbModelParam._m0[13u].z, fma(_1331, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1327)) + cbModelParam._m0[13u].w;
        float _2156 = fma(_1335, cbModelParam._m0[14u].z, fma(_1331, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1327)) + cbModelParam._m0[14u].w;
        float _2160 = fma(_1335, cbModelParam._m0[15u].z, fma(_1331, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1327)) + cbModelParam._m0[15u].w;
        float _2163 = fma(_1275, cbModelParam._m0[13u].z, fma(_1274, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1273));
        float _2166 = fma(_1275, cbModelParam._m0[14u].z, fma(_1274, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1273));
        float _2169 = fma(_1275, cbModelParam._m0[15u].z, fma(_1274, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1273));
        float _2197;
        if (_2163 > 0.0)
        {
            _2197 = abs((1.0 - _2152) / _2163);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2163 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2152 + 1.0) / _2163);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2197 = frontier_phi_17_15_ladder;
        }
        float _2368;
        if (_2166 > 0.0)
        {
            _2368 = abs((1.0 - _2156) / _2166);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2156 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2368 = frontier_phi_26_22_ladder;
        }
        float _2662;
        if (_2169 > 0.0)
        {
            _2662 = abs((1.0 - _2160) / _2169);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2169 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2160 + 1.0) / _2169);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2662 = frontier_phi_38_33_ladder;
        }
        float _2664 = isnan(_2368) ? _2197 : (isnan(_2197) ? _2368 : min(_2197, _2368));
        float _2665 = isnan(_2662) ? _2664 : (isnan(_2664) ? _2662 : min(_2664, _2662));
        float _2669 = (_2665 * _2163) + _2152;
        float _2670 = (_2665 * _2166) + _2156;
        float _2671 = (_2665 * _2169) + _2160;
        float _2672 = _2665 * 9.9999997473787516355514526367188e-05;
        float _2674 = (-1.0) - _2672;
        float _2676 = _2672 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2671 > _2676) || ((_2671 < _2674) || ((_2670 > _2676) || ((_2670 < _2674) || ((_2669 < _2674) || (_2669 > _2676))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2816 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2671, cbModelParam._m0[9u].z, fma(_2670, cbModelParam._m0[9u].y, _2669 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2671, cbModelParam._m0[10u].z, fma(_2670, cbModelParam._m0[10u].y, _2669 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2671, cbModelParam._m0[11u].z, fma(_2670, cbModelParam._m0[11u].y, _2669 * cbModelParam._m0[11u].x))), _2105);
            frontier_phi_16_38_ladder = _2816.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2816.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2816.x * cbModelParam._m0[1u].y;
        }
        _2185 = frontier_phi_16_38_ladder_2;
        _2187 = frontier_phi_16_38_ladder_1;
        _2189 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2173 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1273, _1274, _1275), _2105);
        _2185 = _2173.x * cbModelParam._m0[1u].y;
        _2187 = _2173.y * cbModelParam._m0[1u].y;
        _2189 = _2173.z * cbModelParam._m0[1u].y;
    }
    float _2193 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1180);
    float _2194 = isnan(_2193) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2193 : min(cbModelParam._m0[25u].w, _2193));
    float _2283;
    float _2285;
    float _2287;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2247 = fma(_1335, cbModelParam._m0[21u].z, fma(_1331, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1327)) + cbModelParam._m0[21u].w;
        float _2251 = fma(_1335, cbModelParam._m0[22u].z, fma(_1331, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1327)) + cbModelParam._m0[22u].w;
        float _2255 = fma(_1335, cbModelParam._m0[23u].z, fma(_1331, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1327)) + cbModelParam._m0[23u].w;
        float _2258 = fma(_1275, cbModelParam._m0[21u].z, fma(_1274, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1273));
        float _2261 = fma(_1275, cbModelParam._m0[22u].z, fma(_1274, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1273));
        float _2264 = fma(_1275, cbModelParam._m0[23u].z, fma(_1274, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1273));
        float _2373;
        if (_2258 > 0.0)
        {
            _2373 = abs((1.0 - _2247) / _2258);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2247 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2373 = frontier_phi_28_24_ladder;
        }
        float _2689;
        if (_2261 > 0.0)
        {
            _2689 = abs((1.0 - _2251) / _2261);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2261 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2251 + 1.0) / _2261);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2689 = frontier_phi_40_35_ladder;
        }
        float _3027;
        if (_2264 > 0.0)
        {
            _3027 = abs((1.0 - _2255) / _2264);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2264 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2255 + 1.0) / _2264);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3027 = frontier_phi_50_47_ladder;
        }
        float _3029 = isnan(_2689) ? _2373 : (isnan(_2373) ? _2689 : min(_2373, _2689));
        float _3030 = isnan(_3027) ? _3029 : (isnan(_3029) ? _3027 : min(_3029, _3027));
        float _3034 = (_3030 * _2258) + _2247;
        float _3035 = (_3030 * _2261) + _2251;
        float _3036 = (_3030 * _2264) + _2255;
        float _3037 = _3030 * 9.9999997473787516355514526367188e-05;
        float _3038 = (-1.0) - _3037;
        float _3040 = _3037 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3036 > _3040) || ((_3036 < _3038) || ((_3035 > _3040) || ((_3035 < _3038) || ((_3034 < _3038) || (_3034 > _3040))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3158 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3036, cbModelParam._m0[17u].z, fma(_3035, cbModelParam._m0[17u].y, _3034 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3036, cbModelParam._m0[18u].z, fma(_3035, cbModelParam._m0[18u].y, _3034 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3036, cbModelParam._m0[19u].z, fma(_3035, cbModelParam._m0[19u].y, _3034 * cbModelParam._m0[19u].x))), _2194);
            frontier_phi_25_50_ladder = _3158.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3158.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3158.x * cbModelParam._m0[1u].z;
        }
        _2283 = frontier_phi_25_50_ladder_2;
        _2285 = frontier_phi_25_50_ladder_1;
        _2287 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2267 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1273, _1274, _1275), _2194);
        _2283 = _2267.x * cbModelParam._m0[1u].z;
        _2285 = _2267.y * cbModelParam._m0[1u].z;
        _2287 = _2267.z * cbModelParam._m0[1u].z;
    }
    float _2300 = (((_1298 * _1250) + _1299) * _1265) * ((cbModelParam._m0[1u].w * (_2283 - _2185)) + _2185);
    float _2302 = (((_1298 * _1252) + _1299) * _1265) * ((cbModelParam._m0[1u].w * (_2285 - _2187)) + _2187);
    float _2304 = (((_1298 * _1253) + _1299) * _1265) * ((cbModelParam._m0[1u].w * (_2287 - _2189)) + _2189);
    float _2307 = fma(_2304, cbSceneParam._m0[89u].z, fma(_2302, cbSceneParam._m0[89u].y, _2300 * cbSceneParam._m0[89u].x));
    float _2310 = fma(_2304, cbSceneParam._m0[90u].z, fma(_2302, cbSceneParam._m0[90u].y, _2300 * cbSceneParam._m0[90u].x));
    float _2313 = fma(_2304, cbSceneParam._m0[91u].z, fma(_2302, cbSceneParam._m0[91u].y, _2300 * cbSceneParam._m0[91u].x));
    float _2347 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2351 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2355 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2359 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2360 = _2347 / _2359;
    float _2361 = _2351 / _2359;
    float _2362 = _2355 / _2359;
    float _2508;
    float _2509;
    float _2510;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2389 = ((uint(_2362 > cbSceneParam._m0[59u].y) + uint(_2362 > cbSceneParam._m0[59u].x)) + uint(_2362 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2390 = _2389 + 43u;
        uint _2398 = _2389 + 44u;
        uint _2406 = _2389 + 45u;
        uint _2414 = _2389 + 46u;
        float _2425 = fma(_2359, cbSceneParam._m0[_2390].w, fma(_2355, cbSceneParam._m0[_2390].z, fma(_2351, cbSceneParam._m0[_2390].y, _2347 * cbSceneParam._m0[_2390].x)));
        float _2429 = fma(_2359, cbSceneParam._m0[_2398].w, fma(_2355, cbSceneParam._m0[_2398].z, fma(_2351, cbSceneParam._m0[_2398].y, _2347 * cbSceneParam._m0[_2398].x)));
        float _2437 = fma(_2359, cbSceneParam._m0[_2414].w, fma(_2355, cbSceneParam._m0[_2414].z, fma(_2351, cbSceneParam._m0[_2414].y, _2347 * cbSceneParam._m0[_2414].x)));
        float _2441 = cbSceneParam._m0[33u].z * _2437;
        float _2443 = cbSceneParam._m0[33u].w * _2437;
        float _2446 = fma(_2359, cbSceneParam._m0[_2406].w, fma(_2355, cbSceneParam._m0[_2406].z, fma(_2351, cbSceneParam._m0[_2406].y, _2347 * cbSceneParam._m0[_2406].x))) / _2437;
        float _2494 = (cbSceneParam._m0[33u].x - sqrt(((_2361 * _2361) + (_2360 * _2360)) + (_2362 * _2362))) * cbSceneParam._m0[33u].y;
        float _4963 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2501 = (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2441 + _2425) / _2437, (_2443 + _2429) / _2437), _2446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2443 + _2425) / _2437, (_2429 - _2441) / _2437), _2446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2425 - _2441) / _2437, (_2429 - _2443) / _2437), _2446), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2425 - _2443) / _2437, (_2441 + _2429) / _2437), _2446), 0.0)).x), vec4(0.25)));
        _2508 = 1.0 - (_2501 * cbSceneParam._m0[34u].x);
        _2509 = 1.0 - (_2501 * cbSceneParam._m0[34u].y);
        _2510 = 1.0 - (_2501 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2508 = 1.0;
        _2509 = 1.0;
        _2510 = 1.0;
    }
    float _2574;
    float _2576;
    float _2578;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2562 = fma(_2359, cbSceneParam._m0[63u].w, fma(_2355, cbSceneParam._m0[63u].z, fma(_2351, cbSceneParam._m0[63u].y, _2347 * cbSceneParam._m0[63u].x)));
        float _2563 = fma(_2359, cbSceneParam._m0[60u].w, fma(_2355, cbSceneParam._m0[60u].z, fma(_2351, cbSceneParam._m0[60u].y, _2347 * cbSceneParam._m0[60u].x))) / _2562;
        float _2564 = fma(_2359, cbSceneParam._m0[61u].w, fma(_2355, cbSceneParam._m0[61u].z, fma(_2351, cbSceneParam._m0[61u].y, _2347 * cbSceneParam._m0[61u].x))) / _2562;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2563 >= cbSceneParam._m0[64u].x) && (_2564 >= cbSceneParam._m0[64u].y)) && (_2563 <= cbSceneParam._m0[64u].z)) && (_2564 <= cbSceneParam._m0[64u].w))
        {
            float _2702 = fma(_2359, cbSceneParam._m0[62u].w, fma(_2355, cbSceneParam._m0[62u].z, fma(_2351, cbSceneParam._m0[62u].y, _2347 * cbSceneParam._m0[62u].x))) / _2562;
            float _2706 = isnan(cbSceneParam._m0[41u].w) ? _2702 : (isnan(_2702) ? cbSceneParam._m0[41u].w : max(_2702, cbSceneParam._m0[41u].w));
            float _2749 = (cbSceneParam._m0[33u].x - sqrt(((_2361 * _2361) + (_2360 * _2360)) + (_2362 * _2362))) * cbSceneParam._m0[33u].y;
            float _4979 = isnan(0.0) ? _2749 : (isnan(_2749) ? 0.0 : max(_2749, 0.0));
            float _2756 = (isnan(1.0) ? _4979 : (isnan(_4979) ? 1.0 : min(_4979, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2563, cbSceneParam._m0[33u].w + _2564), _2706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2563, _2564 - cbSceneParam._m0[33u].z), _2706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2563 - cbSceneParam._m0[33u].z, _2564 - cbSceneParam._m0[33u].w), _2706), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2563 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2564), _2706), 0.0)).x), vec4(0.25)));
            float _2760 = 1.0 - (_2756 * cbSceneParam._m0[34u].x);
            float _2761 = 1.0 - (_2756 * cbSceneParam._m0[34u].y);
            float _2762 = 1.0 - (_2756 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2762) ? _2510 : (isnan(_2510) ? _2762 : min(_2510, _2762));
            frontier_phi_37_36_ladder_1 = isnan(_2761) ? _2509 : (isnan(_2509) ? _2761 : min(_2509, _2761));
            frontier_phi_37_36_ladder_2 = isnan(_2760) ? _2508 : (isnan(_2508) ? _2760 : min(_2508, _2760));
        }
        else
        {
            frontier_phi_37_36_ladder = _2510;
            frontier_phi_37_36_ladder_1 = _2509;
            frontier_phi_37_36_ladder_2 = _2508;
        }
        _2574 = frontier_phi_37_36_ladder_2;
        _2576 = frontier_phi_37_36_ladder_1;
        _2578 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2574 = _2508;
        _2576 = _2509;
        _2578 = _2510;
    }
    uvec4 _2583 = floatBitsToUint(cbInstanceData._m0[_1193 + 5u]);
    uint _2585 = _2583.x * 14u;
    uint _2586 = _2585 + 13u;
    float _2593 = _1265 + (-1.0);
    float _2598 = (cbLight._m0[_2586].x * _2593) + 1.0;
    float _2599 = (cbLight._m0[_2586].y * _2593) + 1.0;
    float _2600 = (cbLight._m0[_2586].z * _2593) + 1.0;
    float _2601 = (cbLight._m0[_2586].w * _2593) + 1.0;
    uint _2602 = _2585 + 5u;
    float _2608 = isnan(1.0) ? _2599 : (isnan(_2599) ? 1.0 : min(_2599, 1.0));
    uint _2612 = _2585 + 4u;
    float _2621 = isnan(1.0) ? _2598 : (isnan(_2598) ? 1.0 : min(_2598, 1.0));
    uint _2625 = _2585 | 1u;
    float _2636 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_1058, _1059, _1060));
    float _2639 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_1058, _1059, _1060));
    float _5015 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _5026 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2644 = (isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * 0.3183098733425140380859375;
    float _2646 = (isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0))) * 0.3183098733425140380859375;
    float _2653 = ((cbLight._m0[_2602].x * _2608) * _2646) + (((cbLight._m0[_2612].x * _2574) * _2621) * _2644);
    float _2654 = ((_2608 * cbLight._m0[_2602].y) * _2646) + (((cbLight._m0[_2612].y * _2576) * _2621) * _2644);
    float _2655 = ((_2608 * cbLight._m0[_2602].z) * _2646) + (((cbLight._m0[_2612].z * _2578) * _2621) * _2644);
    uvec4 _2659 = floatBitsToUint(cbLight._m0[_2585 + 12u]);
    bool _2661 = _2659.x == 0u;
    float _2763;
    float _2765;
    float _2767;
    if (_2661)
    {
        _2763 = _2653;
        _2765 = _2654;
        _2767 = _2655;
    }
    else
    {
        uint _2771 = _2585 + 6u;
        float _2787 = (dot(vec3(cbLight._m0[_2585 + 2u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _2788 = _2787 * _2787;
        float _5037 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2789 = isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0));
        float _2790 = isnan(1.0) ? _2600 : (isnan(_2600) ? 1.0 : min(_2600, 1.0));
        _2763 = (((cbLight._m0[_2771].x * 0.3183098733425140380859375) * _2789) * _2790) + _2653;
        _2765 = (((cbLight._m0[_2771].y * 0.3183098733425140380859375) * _2789) * _2790) + _2654;
        _2767 = (((cbLight._m0[_2771].z * 0.3183098733425140380859375) * _2789) * _2790) + _2655;
    }
    bool _2770 = _2659.y == 0u;
    float _2825;
    float _2827;
    float _2829;
    if (_2770)
    {
        _2825 = _2763;
        _2827 = _2765;
        _2829 = _2767;
    }
    else
    {
        uint _2998 = _2585 + 7u;
        float _3014 = (dot(vec3(cbLight._m0[_2585 + 3u].xyz), vec3(_1058, _1059, _1060)) * 0.5) + 0.5;
        float _3015 = _3014 * _3014;
        float _5053 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
        float _3016 = isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0));
        float _3017 = isnan(1.0) ? _2601 : (isnan(_2601) ? 1.0 : min(_2601, 1.0));
        _2825 = (((cbLight._m0[_2998].x * 0.3183098733425140380859375) * _3016) * _3017) + _2763;
        _2827 = (((cbLight._m0[_2998].y * 0.3183098733425140380859375) * _3016) * _3017) + _2765;
        _2829 = (((cbLight._m0[_2998].z * 0.3183098733425140380859375) * _3016) * _3017) + _2767;
    }
    uint _2832 = _2585 + 8u;
    float _2845 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2585].w)) * _1180) * 0.949999988079071044921875);
    float _2846 = _2845 * _2845;
    float _2847 = cbLight._m0[_2585].x + _1118;
    float _2848 = cbLight._m0[_2585].y + _1119;
    float _2849 = cbLight._m0[_2585].z + _1120;
    float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
    float _2854 = _2853 * _2847;
    float _2855 = _2853 * _2848;
    float _2856 = _2853 * _2849;
    float _2857 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2585].xyz));
    float _5069 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2860 = isnan(1.0) ? _5069 : (isnan(_5069) ? 1.0 : min(_5069, 1.0));
    float _5080 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
    float _2861 = isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0));
    float _2862 = dot(vec3(_1058, _1059, _1060), vec3(_2854, _2855, _2856));
    float _5091 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
    float _2865 = isnan(1.0) ? _5091 : (isnan(_5091) ? 1.0 : min(_5091, 1.0));
    float _2866 = dot(vec3(cbLight._m0[_2585].xyz), vec3(_2854, _2855, _2856));
    float _5102 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
    float _2870 = _2846 * _2846;
    float _2874 = ((_2865 * _2865) * (_2870 + (-1.0))) + 1.0;
    float _2882 = exp2(log2(1.0 - (isnan(1.0) ? _5102 : (isnan(_5102) ? 1.0 : min(_5102, 1.0)))) * 5.0);
    float _2883 = 0.959999978542327880859375 - _1247;
    float _2885 = 0.959999978542327880859375 - _1248;
    float _2886 = 0.959999978542327880859375 - _1249;
    float _2893 = 1.0 - _2846;
    float _2904 = (0.5 / (((_2861 * ((_2860 * _2893) + _2846)) + 9.9999999392252902907785028219223e-09) + (((_2861 * _2893) + _2846) * _2860))) * _2860;
    float _5113 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
    float _2906 = (isnan(1.0) ? _5113 : (isnan(_5113) ? 1.0 : min(_5113, 1.0))) * (_2870 / ((_2874 * _2874) * 3.141590118408203125));
    uint _2920 = _2585 + 9u;
    float _2931 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _1180) * 0.949999988079071044921875);
    float _2932 = _2931 * _2931;
    float _2933 = cbLight._m0[_2625].x + _1118;
    float _2934 = cbLight._m0[_2625].y + _1119;
    float _2935 = cbLight._m0[_2625].z + _1120;
    float _2939 = inversesqrt(dot(vec3(_2933, _2934, _2935), vec3(_2933, _2934, _2935)));
    float _2940 = _2939 * _2933;
    float _2941 = _2939 * _2934;
    float _2942 = _2939 * _2935;
    float _2943 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_2625].xyz));
    float _5124 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
    float _2946 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
    float _2947 = dot(vec3(_1058, _1059, _1060), vec3(_2940, _2941, _2942));
    float _5135 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
    float _2950 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
    float _2951 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2940, _2941, _2942));
    float _5146 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
    float _2955 = _2932 * _2932;
    float _2959 = ((_2950 * _2950) * (_2955 + (-1.0))) + 1.0;
    float _2966 = exp2(log2(1.0 - (isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0)))) * 5.0);
    float _2973 = 1.0 - _2932;
    float _2983 = (0.5 / (((_2861 * ((_2946 * _2973) + _2932)) + 9.9999999392252902907785028219223e-09) + (((_2861 * _2973) + _2932) * _2946))) * _2946;
    float _5157 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
    float _2985 = (isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_2955 / ((_2959 * _2959) * 3.141590118408203125));
    float _2995 = (((((_2966 * _2883) + _1250) * cbLight._m0[_2920].x) * _2985) * _2608) + ((((cbLight._m0[_2832].x * _2574) * ((_2882 * _2883) + _1250)) * _2906) * _2621);
    float _2996 = (((((_2966 * _2885) + _1252) * cbLight._m0[_2920].y) * _2985) * _2608) + ((((cbLight._m0[_2832].y * _2576) * ((_2882 * _2885) + _1252)) * _2906) * _2621);
    float _2997 = (((((_2966 * _2886) + _1253) * cbLight._m0[_2920].z) * _2985) * _2608) + ((((cbLight._m0[_2832].z * _2578) * ((_2882 * _2886) + _1253)) * _2906) * _2621);
    float _3053;
    float _3055;
    float _3057;
    if (_2661)
    {
        _3053 = _2995;
        _3055 = _2996;
        _3057 = _2997;
    }
    else
    {
        uint _3059 = _2585 + 2u;
        uint _3063 = _2585 + 10u;
        float _3077 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3059].w)) * _1180) * 0.949999988079071044921875);
        float _3078 = _3077 * _3077;
        float _3079 = cbLight._m0[_3059].x + _1118;
        float _3080 = cbLight._m0[_3059].y + _1119;
        float _3081 = cbLight._m0[_3059].z + _1120;
        float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
        float _3086 = _3085 * _3079;
        float _3087 = _3085 * _3080;
        float _3088 = _3085 * _3081;
        float _3089 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_3059].xyz));
        float _5168 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
        float _3092 = isnan(1.0) ? _5168 : (isnan(_5168) ? 1.0 : min(_5168, 1.0));
        float _3093 = dot(vec3(_1058, _1059, _1060), vec3(_3086, _3087, _3088));
        float _5179 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
        float _3096 = isnan(1.0) ? _5179 : (isnan(_5179) ? 1.0 : min(_5179, 1.0));
        float _3097 = dot(vec3(cbLight._m0[_3059].xyz), vec3(_3086, _3087, _3088));
        float _5190 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
        float _3101 = _3078 * _3078;
        float _3105 = ((_3096 * _3096) * (_3101 + (-1.0))) + 1.0;
        float _3112 = exp2(log2(1.0 - (isnan(1.0) ? _5190 : (isnan(_5190) ? 1.0 : min(_5190, 1.0)))) * 5.0);
        float _3119 = 1.0 - _3078;
        float _3129 = (0.5 / (((_2861 * ((_3092 * _3119) + _3078)) + 9.9999999392252902907785028219223e-09) + (((_2861 * _3119) + _3078) * _3092))) * _3092;
        float _5201 = isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0));
        float _3131 = (isnan(1.0) ? _5201 : (isnan(_5201) ? 1.0 : min(_5201, 1.0))) * (_3101 / ((_3105 * _3105) * 3.141590118408203125));
        float _3132 = isnan(1.0) ? _2600 : (isnan(_2600) ? 1.0 : min(_2600, 1.0));
        _3053 = (((((_3112 * _2883) + _1250) * cbLight._m0[_3063].x) * _3131) * _3132) + _2995;
        _3055 = (((((_3112 * _2885) + _1252) * cbLight._m0[_3063].y) * _3131) * _3132) + _2996;
        _3057 = (((((_3112 * _2886) + _1253) * cbLight._m0[_3063].z) * _3131) * _3132) + _2997;
    }
    float _3163;
    float _3165;
    float _3167;
    if (_2770)
    {
        _3163 = _3053;
        _3165 = _3055;
        _3167 = _3057;
    }
    else
    {
        uint _3174 = _2585 + 3u;
        uint _3178 = _2585 + 11u;
        float _3192 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3174].w)) * _1180) * 0.949999988079071044921875);
        float _3193 = _3192 * _3192;
        float _3194 = cbLight._m0[_3174].x + _1118;
        float _3195 = cbLight._m0[_3174].y + _1119;
        float _3196 = cbLight._m0[_3174].z + _1120;
        float _3200 = inversesqrt(dot(vec3(_3194, _3195, _3196), vec3(_3194, _3195, _3196)));
        float _3201 = _3200 * _3194;
        float _3202 = _3200 * _3195;
        float _3203 = _3200 * _3196;
        float _3204 = dot(vec3(_1058, _1059, _1060), vec3(cbLight._m0[_3174].xyz));
        float _5217 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0));
        float _3207 = isnan(1.0) ? _5217 : (isnan(_5217) ? 1.0 : min(_5217, 1.0));
        float _3208 = dot(vec3(_1058, _1059, _1060), vec3(_3201, _3202, _3203));
        float _5228 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
        float _3211 = isnan(1.0) ? _5228 : (isnan(_5228) ? 1.0 : min(_5228, 1.0));
        float _3212 = dot(vec3(cbLight._m0[_3174].xyz), vec3(_3201, _3202, _3203));
        float _5239 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
        float _3216 = _3193 * _3193;
        float _3220 = ((_3211 * _3211) * (_3216 + (-1.0))) + 1.0;
        float _3227 = exp2(log2(1.0 - (isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0)))) * 5.0);
        float _3234 = 1.0 - _3193;
        float _3244 = (0.5 / (((_2861 * ((_3207 * _3234) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_2861 * _3234) + _3193) * _3207))) * _3207;
        float _5250 = isnan(0.0) ? _3244 : (isnan(_3244) ? 0.0 : max(_3244, 0.0));
        float _3246 = (isnan(1.0) ? _5250 : (isnan(_5250) ? 1.0 : min(_5250, 1.0))) * (_3216 / ((_3220 * _3220) * 3.141590118408203125));
        float _3247 = isnan(1.0) ? _2601 : (isnan(_2601) ? 1.0 : min(_2601, 1.0));
        _3163 = (((((_3227 * _2883) + _1250) * cbLight._m0[_3178].x) * _3246) * _3247) + _3053;
        _3165 = (((((_3227 * _2885) + _1252) * cbLight._m0[_3178].y) * _3246) * _3247) + _3055;
        _3167 = (((((_3227 * _2886) + _1253) * cbLight._m0[_3178].z) * _3246) * _3247) + _3057;
    }
    float _3313;
    float _3315;
    float _3317;
    float _3319;
    float _3321;
    float _3323;
    if (_2583.y == 0u)
    {
        uvec4 _3268 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3269 = _3268.x;
        uint _3280 = uint((float(_3268.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1139) / _3269))) + floor(float(uint(cbSceneParam._m0[85u].x * _1138) / _3269)));
        float _3290 = (log2(_2362 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3291 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
        uint _3294 = uint(isnan(14.0) ? _3291 : (isnan(_3291) ? 14.0 : min(_3291, 14.0)));
        uvec4 _3299 = texelFetch(g_lightClusterGridBuffer, int(((_3294 << 2u) + (_3280 << 6u)) >> 2u));
        uint _3300 = _3299.x;
        uint _3301 = _3268.z;
        float _3409;
        float _3411;
        float _3413;
        float _3415;
        float _3417;
        float _3419;
        if (((((1u << ((_3301 >> 4u) & 15u)) + 4294967295u) & _3300) == 0u) || ((_3301 & 240u) == 0u))
        {
            _3409 = 0.0;
            _3411 = 0.0;
            _3413 = 0.0;
            _3415 = 0.0;
            _3417 = 0.0;
            _3419 = 0.0;
        }
        else
        {
            float _3410;
            float _3412;
            float _3414;
            float _3416;
            float _3418;
            float _3420;
            float _3570 = 0.0;
            float _3571 = 0.0;
            float _3572 = 0.0;
            float _3573 = 0.0;
            float _3574 = 0.0;
            float _3575 = 0.0;
            uint _3576 = 0u;
            uint _3585;
            bool _3586;
            for (;;)
            {
                _3585 = texelFetch(g_lightClassification, int((((_3294 << 5u) + (_3280 << 9u)) + (_3576 << 2u)) >> 2u)).x;
                _3586 = _3585 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3586)
                {
                    frontier_phi_71_pred = _3575;
                    frontier_phi_71_pred_1 = _3574;
                    frontier_phi_71_pred_2 = _3573;
                    frontier_phi_71_pred_3 = _3572;
                    frontier_phi_71_pred_4 = _3571;
                    frontier_phi_71_pred_5 = _3570;
                }
                else
                {
                    float _3715;
                    float _3716;
                    float _3717;
                    float _3718;
                    float _3719;
                    float _3720;
                    uint _3721;
                    _3715 = _3570;
                    _3716 = _3571;
                    _3717 = _3572;
                    _3718 = _3573;
                    _3719 = _3574;
                    _3720 = _3575;
                    _3721 = _3585;
                    float _3642;
                    float _3643;
                    float _3644;
                    float _3645;
                    float _3646;
                    float _3647;
                    for (;;)
                    {
                        uint _3725 = uint(findLSB(_3721)) + (_3576 << 5u);
                        uint _3722 = (_3721 + 4294967295u) & _3721;
                        uint _3727 = _3725 * 48u;
                        vec4 _3741 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3727)).x, texelFetch(g_PointLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3727 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3727 + 3u)).x));
                        uint _3747 = (_3725 * 48u) + 4u;
                        vec4 _3760 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3747)).x, texelFetch(g_PointLightRenderingBuffer, int(_3747 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3747 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3747 + 3u)).x));
                        uint _3766 = (_3725 * 48u) + 8u;
                        vec3 _3777 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3766)).x, texelFetch(g_PointLightRenderingBuffer, int(_3766 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3766 + 2u)).x));
                        float _3781 = _3741.x - _2360;
                        float _3782 = _3741.y - _2361;
                        float _3783 = _3741.z - _2362;
                        float _3784 = dot(vec3(_3781, _3782, _3783), vec3(_3781, _3782, _3783));
                        float _3787 = inversesqrt(_3784);
                        float _3788 = _3787 * _3781;
                        float _3789 = _3787 * _3782;
                        float _3790 = _3787 * _3783;
                        float _3791 = dot(vec3(_1161, _1164, _1167), vec3(_3788, _3789, _3790));
                        float _3796 = 1.0 - (_3784 * _3741.w);
                        float _5276 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                        float _3797 = isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0));
                        float _3798 = sqrt(_3784) * _3760.w;
                        float _3801 = 1.39999997615814208984375 / (_3798 + 1.39999997615814208984375);
                        float _3802 = _3801 * _3801;
                        float _3805 = ((1.0 - _3802) * _3791) + _3802;
                        float _3808 = _3798 * _3798;
                        float _3812 = ((isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0))) * _3797) / ((_3808 * 0.699999988079071044921875) + 1.0);
                        float _3816 = (-0.0) - _2360;
                        float _3817 = (-0.0) - _2361;
                        float _3818 = (-0.0) - _2362;
                        float _3822 = inversesqrt(dot(vec3(_3816, _3817, _3818), vec3(_3816, _3817, _3818)));
                        float _3823 = _3822 * _3816;
                        float _3824 = _3822 * _3817;
                        float _3825 = _3822 * _3818;
                        float _3832 = exp2(log2(1.0 / ((_3808 * 3.5) + 5.0)) * 0.25);
                        float _3833 = 1.0 - _1281;
                        float _3840 = sqrt(1.0 - ((1.0 - (_3833 * _3833)) * (1.0 - (_3832 * _3832))));
                        float _3841 = _3840 * _3840;
                        float _3842 = _3841 * _3841;
                        float _3843 = _3823 + _3788;
                        float _3844 = _3824 + _3789;
                        float _3845 = _3825 + _3790;
                        float _3849 = inversesqrt(dot(vec3(_3843, _3844, _3845), vec3(_3843, _3844, _3845)));
                        float _3853 = dot(vec3(_1161, _1164, _1167), vec3(_3823, _3824, _3825));
                        float _5292 = isnan(0.0) ? _3853 : (isnan(_3853) ? 0.0 : max(_3853, 0.0));
                        float _3856 = isnan(1.0) ? _5292 : (isnan(_5292) ? 1.0 : min(_5292, 1.0));
                        float _3857 = dot(vec3(_1161, _1164, _1167), vec3(_3849 * _3843, _3849 * _3844, _3849 * _3845));
                        float _5303 = isnan(0.0) ? _3857 : (isnan(_3857) ? 0.0 : max(_3857, 0.0));
                        float _3860 = isnan(1.0) ? _5303 : (isnan(_5303) ? 1.0 : min(_5303, 1.0));
                        float _3864 = ((_3860 * _3860) * (_3842 + (-1.0))) + 1.0;
                        float _3865 = _3801 * _3841;
                        float _3866 = _3865 * _3865;
                        float _3869 = ((1.0 - _3866) * _3791) + _3866;
                        float _5314 = isnan(0.0) ? _3869 : (isnan(_3869) ? 0.0 : max(_3869, 0.0));
                        float _3870 = isnan(1.0) ? _5314 : (isnan(_5314) ? 1.0 : min(_5314, 1.0));
                        float _3871 = 1.0 - _3841;
                        float _3881 = (0.5 / (((_3870 * ((_3856 * _3871) + _3841)) + 9.9999999392252902907785028219223e-09) + (((_3870 * _3871) + _3841) * _3856))) * _3870;
                        float _5325 = isnan(0.0) ? _3881 : (isnan(_3881) ? 0.0 : max(_3881, 0.0));
                        float _3892 = (((_3842 * 3.1415927410125732421875) * (isnan(1.0) ? _5325 : (isnan(_5325) ? 1.0 : min(_5325, 1.0)))) / ((_3864 * _3864) * ((_3808 * 2.1991131305694580078125) + 3.141590118408203125))) * _3797;
                        _3645 = (_3812 * _3760.x) + _3718;
                        _3646 = (_3812 * _3760.y) + _3719;
                        _3647 = (_3812 * _3760.z) + _3720;
                        _3642 = (_3892 * _3777.x) + _3715;
                        _3643 = (_3892 * _3777.y) + _3716;
                        _3644 = (_3892 * _3777.z) + _3717;
                        if (_3722 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3715 = _3642;
                            _3716 = _3643;
                            _3717 = _3644;
                            _3718 = _3645;
                            _3719 = _3646;
                            _3720 = _3647;
                            _3721 = _3722;
                        }
                    }
                    frontier_phi_71_pred = _3647;
                    frontier_phi_71_pred_1 = _3646;
                    frontier_phi_71_pred_2 = _3645;
                    frontier_phi_71_pred_3 = _3644;
                    frontier_phi_71_pred_4 = _3643;
                    frontier_phi_71_pred_5 = _3642;
                }
                _3420 = frontier_phi_71_pred;
                _3418 = frontier_phi_71_pred_1;
                _3416 = frontier_phi_71_pred_2;
                _3414 = frontier_phi_71_pred_3;
                _3412 = frontier_phi_71_pred_4;
                _3410 = frontier_phi_71_pred_5;
                uint _3577 = _3576 + 1u;
                if (_3577 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3570 = _3410;
                    _3571 = _3412;
                    _3572 = _3414;
                    _3573 = _3416;
                    _3574 = _3418;
                    _3575 = _3420;
                    _3576 = _3577;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3409 = _3410;
            _3411 = _3412;
            _3413 = _3414;
            _3415 = _3416;
            _3417 = _3418;
            _3419 = _3420;
        }
        uvec4 _3423 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3424 = _3423.z;
        uint _3426 = (_3424 >> 8u) & 15u;
        float _3538;
        float _3540;
        float _3542;
        float _3544;
        float _3546;
        float _3548;
        if (((4294967295u << _3426) & _3300) == 0u)
        {
            _3538 = _3409;
            _3540 = _3411;
            _3542 = _3413;
            _3544 = _3415;
            _3546 = _3417;
            _3548 = _3419;
        }
        else
        {
            float _3563 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
            float _3564 = _3563 * _2360;
            float _3565 = _3563 * _2361;
            float _3566 = _3563 * _2362;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3426 < ((_3424 >> 12u) & 15u))
            {
                float _3539;
                float _3541;
                float _3543;
                float _3545;
                float _3547;
                float _3549;
                float _3698 = _3409;
                float _3699 = _3411;
                float _3700 = _3413;
                float _3701 = _3415;
                float _3702 = _3417;
                float _3703 = _3419;
                uint _3704 = _3426;
                uint _3713;
                bool _3714;
                for (;;)
                {
                    _3713 = texelFetch(g_lightClassification, int((((_3294 << 5u) + (_3280 << 9u)) + (_3704 << 2u)) >> 2u)).x;
                    _3714 = _3713 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3714)
                    {
                        frontier_phi_82_pred = _3703;
                        frontier_phi_82_pred_1 = _3702;
                        frontier_phi_82_pred_2 = _3701;
                        frontier_phi_82_pred_3 = _3700;
                        frontier_phi_82_pred_4 = _3699;
                        frontier_phi_82_pred_5 = _3698;
                    }
                    else
                    {
                        float _3906;
                        float _3907;
                        float _3908;
                        float _3909;
                        float _3910;
                        float _3911;
                        float _4199;
                        float _4200;
                        float _4201;
                        float _4202;
                        float _4203;
                        float _4204;
                        float _3919 = _3698;
                        float _3920 = _3699;
                        float _3921 = _3700;
                        float _3922 = _3701;
                        float _3923 = _3702;
                        float _3924 = _3703;
                        uint _3925 = _3713;
                        uint _3926;
                        vec4 _3951;
                        float _3952;
                        vec4 _3967;
                        vec3 _3979;
                        vec4 _3994;
                        vec4 _4009;
                        float _4055;
                        bool _4056;
                        for (;;)
                        {
                            uint _3936 = ((_3704 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3925));
                            _3926 = (_3925 + 4294967295u) & _3925;
                            uint _3938 = _3936 * 40u;
                            _3951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3938 + 3u)).x));
                            _3952 = _3951.w;
                            uint _3954 = (_3936 * 40u) + 4u;
                            _3967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3954 + 3u)).x));
                            uint _3969 = (_3936 * 40u) + 8u;
                            _3979 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3969 + 2u)).x));
                            uint _3981 = (_3936 * 40u) + 16u;
                            _3994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3981 + 3u)).x));
                            uint _3996 = (_3936 * 40u) + 20u;
                            _4009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3996 + 3u)).x));
                            uint _4011 = (_3936 * 40u) + 24u;
                            vec4 _4024 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4011 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4011 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4011 + 3u)).x));
                            uint _4030 = (_3936 * 40u) + 28u;
                            vec4 _4043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4030 + 3u)).x));
                            _4055 = fma(_2362, _4043.z, fma(_2361, _4043.y, _4043.x * _2360)) + _4043.w;
                            _4056 = !((fma(_2362, _4024.z, fma(_2361, _4024.y, _4024.x * _2360)) + _4024.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4056)
                            {
                                float _4083 = _3951.x - _2360;
                                float _4084 = _3951.y - _2361;
                                float _4085 = _3951.z - _2362;
                                float _4086 = dot(vec3(_4083, _4084, _4085), vec3(_4083, _4084, _4085));
                                float _4089 = inversesqrt(_4086);
                                float _4090 = _4089 * _4083;
                                float _4091 = _4089 * _4084;
                                float _4092 = _4089 * _4085;
                                float _4096 = 1.0 - (_4086 / (_3952 * _3952));
                                float _5336 = isnan(0.0) ? _4096 : (isnan(_4096) ? 0.0 : max(_4096, 0.0));
                                float _4097 = isnan(1.0) ? _5336 : (isnan(_5336) ? 1.0 : min(_5336, 1.0));
                                float _4101 = sqrt(_4086) * _3967.w;
                                float _4103 = 1.39999997615814208984375 / (_4101 + 1.39999997615814208984375);
                                float _4104 = _4103 * _4103;
                                float _4107 = ((1.0 - _4104) * dot(vec3(_4090, _4091, _4092), vec3(_1161, _1164, _1167))) + _4104;
                                float _4110 = _4101 * _4101;
                                float _4114 = (fma(_2362, _3994.z, fma(_2361, _3994.y, _3994.x * _2360)) + _3994.w) / _4055;
                                float _4115 = (fma(_2362, _4009.z, fma(_2361, _4009.y, _4009.x * _2360)) + _4009.w) / _4055;
                                float _4119 = 1.0 - dot(vec2(_4114, _4115), vec2(_4114, _4115));
                                float _5352 = isnan(0.0) ? _4119 : (isnan(_4119) ? 0.0 : max(_4119, 0.0));
                                float _4120 = isnan(1.0) ? _5352 : (isnan(_5352) ? 1.0 : min(_5352, 1.0));
                                float _4121 = _4120 * (((isnan(0.0) ? _4107 : (isnan(_4107) ? 0.0 : max(_4107, 0.0))) * _4097) / ((_4110 * 0.699999988079071044921875) + 1.0));
                                float _4133 = exp2(log2(1.0 / ((_4110 * 3.5) + 5.0)) * 0.25);
                                float _4134 = 1.0 - _1281;
                                float _4141 = sqrt(1.0 - ((1.0 - (_4134 * _4134)) * (1.0 - (_4133 * _4133))));
                                float _4142 = _4141 * _4141;
                                float _4143 = _4142 * _4142;
                                float _4144 = _4090 - _3564;
                                float _4145 = _4091 - _3565;
                                float _4146 = _4092 - _3566;
                                float _4150 = inversesqrt(dot(vec3(_4144, _4145, _4146), vec3(_4144, _4145, _4146)));
                                float _4154 = dot(vec3(_1161, _1164, _1167), vec3((-0.0) - _3564, (-0.0) - _3565, (-0.0) - _3566));
                                float _5363 = isnan(0.0) ? _4154 : (isnan(_4154) ? 0.0 : max(_4154, 0.0));
                                float _4157 = isnan(1.0) ? _5363 : (isnan(_5363) ? 1.0 : min(_5363, 1.0));
                                float _4158 = dot(vec3(_1161, _1164, _1167), vec3(_4150 * _4144, _4150 * _4145, _4150 * _4146));
                                float _5374 = isnan(0.0) ? _4158 : (isnan(_4158) ? 0.0 : max(_4158, 0.0));
                                float _4161 = isnan(1.0) ? _5374 : (isnan(_5374) ? 1.0 : min(_5374, 1.0));
                                float _4165 = ((_4161 * _4161) * (_4143 + (-1.0))) + 1.0;
                                float _4166 = _4103 * _4142;
                                float _4167 = _4166 * _4166;
                                float _4173 = ((1.0 - _4167) * dot(vec3(_1161, _1164, _1167), vec3(_4090, _4091, _4092))) + _4167;
                                float _5385 = isnan(0.0) ? _4173 : (isnan(_4173) ? 0.0 : max(_4173, 0.0));
                                float _4174 = isnan(1.0) ? _5385 : (isnan(_5385) ? 1.0 : min(_5385, 1.0));
                                float _4175 = 1.0 - _4142;
                                float _4185 = (0.5 / (((_4174 * ((_4157 * _4175) + _4142)) + 9.9999999392252902907785028219223e-09) + (((_4174 * _4175) + _4142) * _4157))) * _4174;
                                float _5396 = isnan(0.0) ? _4185 : (isnan(_4185) ? 0.0 : max(_4185, 0.0));
                                float _4195 = (_4120 * _4097) * (((_4143 * 3.1415927410125732421875) * (isnan(1.0) ? _5396 : (isnan(_5396) ? 1.0 : min(_5396, 1.0)))) / ((_4165 * _4165) * ((_4110 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4121 * _3967.z;
                                frontier_phi_88_pred_1 = _4121 * _3967.y;
                                frontier_phi_88_pred_2 = _4121 * _3967.x;
                                frontier_phi_88_pred_3 = _4195 * _3979.z;
                                frontier_phi_88_pred_4 = _4195 * _3979.y;
                                frontier_phi_88_pred_5 = _4195 * _3979.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4204 = frontier_phi_88_pred;
                            _4203 = frontier_phi_88_pred_1;
                            _4202 = frontier_phi_88_pred_2;
                            _4201 = frontier_phi_88_pred_3;
                            _4200 = frontier_phi_88_pred_4;
                            _4199 = frontier_phi_88_pred_5;
                            _3909 = _4202 + _3922;
                            _3910 = _4203 + _3923;
                            _3911 = _4204 + _3924;
                            _3906 = _4199 + _3919;
                            _3907 = _4200 + _3920;
                            _3908 = _4201 + _3921;
                            if (_3926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3919 = _3906;
                                _3920 = _3907;
                                _3921 = _3908;
                                _3922 = _3909;
                                _3923 = _3910;
                                _3924 = _3911;
                                _3925 = _3926;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3911;
                        frontier_phi_82_pred_1 = _3910;
                        frontier_phi_82_pred_2 = _3909;
                        frontier_phi_82_pred_3 = _3908;
                        frontier_phi_82_pred_4 = _3907;
                        frontier_phi_82_pred_5 = _3906;
                    }
                    _3549 = frontier_phi_82_pred;
                    _3547 = frontier_phi_82_pred_1;
                    _3545 = frontier_phi_82_pred_2;
                    _3543 = frontier_phi_82_pred_3;
                    _3541 = frontier_phi_82_pred_4;
                    _3539 = frontier_phi_82_pred_5;
                    uint _3705 = _3704 + 1u;
                    if (_3705 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3698 = _3539;
                        _3699 = _3541;
                        _3700 = _3543;
                        _3701 = _3545;
                        _3702 = _3547;
                        _3703 = _3549;
                        _3704 = _3705;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3545;
                frontier_phi_63_64_ladder_1 = _3549;
                frontier_phi_63_64_ladder_2 = _3547;
                frontier_phi_63_64_ladder_3 = _3543;
                frontier_phi_63_64_ladder_4 = _3541;
                frontier_phi_63_64_ladder_5 = _3539;
            }
            else
            {
                frontier_phi_63_64_ladder = _3415;
                frontier_phi_63_64_ladder_1 = _3419;
                frontier_phi_63_64_ladder_2 = _3417;
                frontier_phi_63_64_ladder_3 = _3413;
                frontier_phi_63_64_ladder_4 = _3411;
                frontier_phi_63_64_ladder_5 = _3409;
            }
            _3538 = frontier_phi_63_64_ladder_5;
            _3540 = frontier_phi_63_64_ladder_4;
            _3542 = frontier_phi_63_64_ladder_3;
            _3544 = frontier_phi_63_64_ladder;
            _3546 = frontier_phi_63_64_ladder_2;
            _3548 = frontier_phi_63_64_ladder_1;
        }
        float _3553 = isnan(1.0) ? _1265 : (isnan(_1265) ? 1.0 : min(_1265, 1.0));
        _3313 = (_3553 * _3544) + _2825;
        _3315 = (_3553 * _3546) + _2827;
        _3317 = (_3553 * _3548) + _2829;
        _3319 = ((_3538 * _1250) * _3553) + _3163;
        _3321 = ((_3540 * _1252) * _3553) + _3165;
        _3323 = ((_3542 * _1253) * _3553) + _3167;
    }
    else
    {
        _3313 = _2825;
        _3315 = _2827;
        _3317 = _2829;
        _3319 = _3163;
        _3321 = _3165;
        _3323 = _3167;
    }
    uint _3329 = _1194 + uint(cbMatDynParam._m0[0u].w);
    float _3335 = cbInstanceData._m0[_3329].x * ((((cbMtdParam._m0[22u].x * _971.x) * cbMtdParam._m0[32u].x) * _992) + _761);
    float _3336 = cbInstanceData._m0[_3329].y * ((((cbMtdParam._m0[22u].y * _971.y) * cbMtdParam._m0[32u].x) * _992) + _762);
    float _3337 = cbInstanceData._m0[_3329].z * ((((cbMtdParam._m0[22u].z * _971.z) * cbMtdParam._m0[32u].x) * _992) + _763);
    float _5412 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
    float _5423 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _5434 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
    float _3354 = (((isnan(1.0) ? _5412 : (isnan(_5412) ? 1.0 : min(_5412, 1.0))) * (_3313 + ((isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0))) * _1265))) + ((_3319 + ((isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0))) * _2094)) * cbPerFrame._m0[3u].x)) + _3335;
    float _3356 = (_3336 + ((_3321 + ((isnan(0.0) ? _2310 : (isnan(_2310) ? 0.0 : max(_2310, 0.0))) * _2094)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5423 : (isnan(_5423) ? 1.0 : min(_5423, 1.0))) * (_3315 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1265)));
    float _3358 = (_3337 + ((_3323 + ((isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0))) * _2094)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5434 : (isnan(_5434) ? 1.0 : min(_5434, 1.0))) * (_3317 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1265)));
    float _3359 = isnan(0.0) ? _3354 : (isnan(_3354) ? 0.0 : max(_3354, 0.0));
    float _3360 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
    float _3361 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0));
    float _3367 = cbMtdParam._m0[2u].x * _3335;
    float _3368 = cbMtdParam._m0[2u].y * _3336;
    float _3369 = cbMtdParam._m0[2u].z * _3337;
    float _5460 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3371 = isnan(1.0) ? _5460 : (isnan(_5460) ? 1.0 : min(_5460, 1.0));
    uint _3372 = _1193 + 6u;
    float _3380 = _1138 / cbSceneParam._m0[86u].x;
    float _3381 = _1139 / cbSceneParam._m0[86u].y;
    vec4 _3395 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3380, _3381, (log2((isnan(cbSceneParam._m0[77u].w) ? _1081 : (isnan(_1081) ? cbSceneParam._m0[77u].w : min(_1081, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3397 = _3395.x;
    float _3398 = _3395.y;
    float _3399 = _3395.z;
    float _3400 = _3395.w;
    float _3471;
    float _3473;
    float _3475;
    float _3477;
    if (_1081 > cbSceneParam._m0[78u].w)
    {
        float _3434 = isnan(_1081) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1081 : min(cbSceneParam._m0[80u].w, _1081));
        float _3435 = _3434 / _1081;
        float _3446 = _3435 * _1111;
        float _3447 = _1112 * _3435;
        float _3448 = (-0.0) - _3447;
        float _3449 = _3435 * _1113;
        float _3451 = (cbSceneParam._m0[77u].w * _3448) / _3434;
        float _3452 = _3451 + cbSceneParam._m0[79u].w;
        float _3453 = cbSceneParam._m0[79u].w - _3447;
        float _3459 = sqrt(((_3446 * _3446) + (_3447 * _3447)) + (_3449 * _3449));
        float _3462 = (1.0 - (cbSceneParam._m0[77u].w / _3434)) * _3459;
        float _3467 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3469 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3655;
        if (abs((_3448 - _3451) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3655 = ((((_3452 > 0.0) ? exp2(_3467 * _3452) : (2.0 - exp2(_3469 * _3452))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3462;
        }
        else
        {
            float _3599 = 1.0 / cbSceneParam._m0[80u].x;
            float _3600 = isnan(_3453) ? _3452 : (isnan(_3452) ? _3453 : max(_3452, _3453));
            float _3601 = isnan(_3453) ? _3452 : (isnan(_3452) ? _3453 : min(_3452, _3453));
            float _3610 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : min(_3600, 0.0));
            float _3611 = isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : min(_3601, 0.0));
            _3655 = ((abs(_3459 / _3448) * cbSceneParam._m0[80u].y) * ((((_3610 - _3611) * 2.0) - ((exp2(_3467 * (isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0)))) - exp2(_3467 * (isnan(0.0) ? _3601 : (isnan(_3601) ? 0.0 : max(_3601, 0.0))))) * _3599)) - ((exp2(_3469 * _3610) - exp2(_3469 * _3611)) * _3599))) + (_3462 * cbSceneParam._m0[80u].z);
        }
        vec4 _3657 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3380, _3381, 1.0), 0.0);
        float _3666 = exp2((_3655 * (-1.44269502162933349609375)) * (1.0 - _3657.w));
        float _3667 = log2(_3666);
        float _3683 = log2(_3400);
        _3471 = (exp2(_3683 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3667 * cbSceneParam._m0[78u].x)) * _3657.x) / cbSceneParam._m0[78u].x)) + _3397;
        _3473 = (exp2(_3683 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3667 * cbSceneParam._m0[78u].y)) * _3657.y) / cbSceneParam._m0[78u].y)) + _3398;
        _3475 = (exp2(_3683 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3667 * cbSceneParam._m0[78u].z)) * _3657.z) / cbSceneParam._m0[78u].z)) + _3399;
        _3477 = _3666 * _3400;
    }
    else
    {
        _3471 = _3397;
        _3473 = _3398;
        _3475 = _3399;
        _3477 = _3400;
    }
    bool _3693;
    vec4 _3487;
    vec4 _3509;
    float _3511;
    float _3515;
    float _3516;
    float _3517;
    float _3520;
    float _3523;
    float _3526;
    float _3527;
    bool _3537;
    for (;;)
    {
        _3487 = cbMatDynParam._m0[0u];
        float _3489 = roundEven(_3487.y);
        bool _3490 = _3489 == 3.0;
        float _3491 = log2(_3477);
        float _3495 = exp2(_3491 * cbSceneParam._m0[78u].x);
        float _3496 = exp2(_3491 * cbSceneParam._m0[78u].y);
        float _3497 = exp2(_3491 * cbSceneParam._m0[78u].z);
        float _3498 = _3495 * _3359;
        float _3499 = _3496 * _3360;
        float _3500 = _3497 * _3361;
        float _3507 = _1127 + (-0.5);
        _3509 = cbMtdParam._m0[1u];
        _3511 = _3509.y * _3507;
        float _3514 = (_3489 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3515 = _3514 * (_3490 ? _3498 : (_3498 + (cbSceneParam._m0[72u].w * _3471)));
        _3516 = _3514 * (_3490 ? _3499 : (_3499 + (cbSceneParam._m0[72u].w * _3473)));
        _3517 = _3514 * (_3490 ? _3500 : (_3500 + (cbSceneParam._m0[72u].w * _3475)));
        _3520 = ((_3367 * _3371) * _3495) * _3514;
        _3523 = ((_3368 * _3371) * _3496) * _3514;
        _3526 = ((_3369 * _3371) * _3497) * _3514;
        _3527 = _3507 * 0.999000012874603271484375;
        _3537 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3537)
        {
            if ((cbInstanceData._m0[_1193 + 7u].x + _3527) < 0.5)
            {
                _3693 = true;
                break;
            }
        }
        uint _3634 = _1194 + uint(_3487.w);
        if ((cbInstanceData._m0[_3634].w < 1.0) && ((cbInstanceData._m0[_3634].w + _3527) < 0.5))
        {
            _3693 = true;
            break;
        }
        if ((_3511 + 1.0) < _3509.x)
        {
            _3693 = true;
            break;
        }
        _3693 = false;
        break;
    }
    float _3897;
    if (_3693)
    {
        discard_state = true;
        _3897 = 0.0;
    }
    else
    {
        _3897 = cbInstanceData._m0[_3372].w;
    }
    SV_Target.x = _3515;
    SV_Target.y = _3516;
    SV_Target.z = _3517;
    SV_Target.w = _3897;
    SV_Target_1.x = _3520;
    SV_Target_1.y = _3523;
    SV_Target_1.z = _3526;
    SV_Target_1.w = cbInstanceData._m0[_3372].w;
    discard_exit();
}


