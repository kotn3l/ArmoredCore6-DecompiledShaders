#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1473;
float _4171;
float _4172;
float _4173;
float _4174;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _232 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _233 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _234 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _240 = inversesqrt(dot(vec3(_232, _233, _234), vec3(_232, _233, _234)));
    float _247 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _254 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _278 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _285 = log2(0.0);
    float _287 = exp2(_285 * cbMtdParam._m0[31u].z);
    float _291 = _287 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _287);
    float _292 = _287 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _287);
    float _293 = _287 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _287);
    float _294 = isnan(0.0) ? _291 : (isnan(_291) ? 0.0 : max(_291, 0.0));
    float _295 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _296 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _297 = isnan(1.0) ? _294 : (isnan(_294) ? 1.0 : min(_294, 1.0));
    float _299 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    float _300 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    vec4 _316 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _320 = _316.z;
    float _321 = _316.w;
    float _322 = 1.0 - _321;
    float _329 = exp2(log2((1.0 - (_322 * _320)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _330 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _331 = isnan(1.0) ? _330 : (isnan(_330) ? 1.0 : min(_330, 1.0));
    float _343 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_322 * _322) * _320))) * cbMtdParam._m0[34u].w);
    float _344 = isnan(0.0) ? _343 : (isnan(_343) ? 0.0 : max(_343, 0.0));
    vec4 _358 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _361 = _358.y;
    float _364 = (_361 * ((isnan(1.0) ? _344 : (isnan(_344) ? 1.0 : min(_344, 1.0))) - _321)) + _321;
    vec4 _376 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _388 = (_358.x + (-0.02500000037252902984619140625)) * 8.0;
    float _390 = roundEven(_388);
    float _391 = cbMtdParam._m0[10u].x * _376.x;
    float _392 = cbMtdParam._m0[10u].y * _376.y;
    float _393 = cbMtdParam._m0[10u].z * _376.z;
    vec4 _405 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _425 = (((cbMtdParam._m0[9u].x * _405.x) - _391) * _364) + _391;
    float _426 = (((cbMtdParam._m0[9u].y * _405.y) - _392) * _364) + _392;
    float _427 = (((cbMtdParam._m0[9u].z * _405.z) - _393) * _364) + _393;
    vec4 _439 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _459 = (((cbMtdParam._m0[20u].x * _439.x) - _425) * _331) + _425;
    float _460 = (((cbMtdParam._m0[20u].y * _439.y) - _426) * _331) + _426;
    float _461 = (((cbMtdParam._m0[20u].z * _439.z) - _427) * _331) + _427;
    vec4 _474 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = cbMtdParam._m0[24u].x;
    _206[0u] = cbMtdParam._m0[24u].y;
    _207[0u] = cbMtdParam._m0[24u].z;
    _205[1u] = cbMtdParam._m0[25u].x;
    _206[1u] = cbMtdParam._m0[25u].y;
    _207[1u] = cbMtdParam._m0[25u].z;
    _205[2u] = cbMtdParam._m0[26u].x;
    _206[2u] = cbMtdParam._m0[26u].y;
    _207[2u] = cbMtdParam._m0[26u].z;
    _205[3u] = cbMtdParam._m0[27u].x;
    _206[3u] = cbMtdParam._m0[27u].y;
    _207[3u] = cbMtdParam._m0[27u].z;
    _205[4u] = cbMtdParam._m0[28u].x;
    _206[4u] = cbMtdParam._m0[28u].y;
    _207[4u] = cbMtdParam._m0[28u].z;
    _205[5u] = cbMtdParam._m0[29u].x;
    _206[5u] = cbMtdParam._m0[29u].y;
    _207[5u] = cbMtdParam._m0[29u].z;
    float _557 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    uint _560 = uint(int(isnan(5.0) ? _557 : (isnan(_557) ? 5.0 : min(_557, 5.0))));
    float _567 = _205[_560] * _361;
    float _568 = _206[_560] * _361;
    float _569 = _207[_560] * _361;
    float _570 = _567 + ((_278.x * 4.5) * ((((cbMtdParam._m0[30u].x * _474.x) - _459) * _297) + _459));
    float _571 = _568 + ((_278.y * 4.5) * ((((cbMtdParam._m0[30u].y * _474.y) - _460) * _299) + _460));
    float _572 = _569 + ((_278.z * 4.5) * ((((cbMtdParam._m0[30u].z * _474.z) - _461) * _300) + _461));
    float _200[5];
    float _201[5];
    _200[0u] = cbMtdParam._m0[35u].y;
    _201[0u] = cbMtdParam._m0[35u].z;
    _200[1u] = cbMtdParam._m0[36u].w;
    _201[1u] = cbMtdParam._m0[37u].x;
    _200[2u] = cbMtdParam._m0[37u].y;
    _201[2u] = cbMtdParam._m0[37u].z;
    _200[3u] = cbMtdParam._m0[37u].w;
    _201[3u] = cbMtdParam._m0[38u].x;
    _200[4u] = cbMtdParam._m0[38u].y;
    _201[4u] = cbMtdParam._m0[38u].z;
    float _603 = roundEven(5.0 - _388);
    float _604 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _605 = isnan(4.0) ? _604 : (isnan(_604) ? 4.0 : min(_604, 4.0));
    float _607 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    uint _609 = uint(int(isnan(4.0) ? _607 : (isnan(_607) ? 4.0 : min(_607, 4.0))));
    float _621 = ((cbMtdParam._m0[39u].z - _201[_609]) * _364) + _201[_609];
    float _629 = ((cbMtdParam._m0[40u].x - _621) * _331) + _621;
    float _634 = ((cbMtdParam._m0[40u].z - _629) * _297) + _629;
    vec4 _651 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _653 = _651.x;
    float _654 = _651.y;
    float _656 = _651.z + _200[_609];
    vec4 _668 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _676 = (((cbMtdParam._m0[39u].y - _656) + _668.z) * _364) + _656;
    vec4 _689 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _697 = (((cbMtdParam._m0[39u].w - _676) + _689.z) * _331) + _676;
    float _703 = ((((_320 * 2.0) * _697) - _697) * cbMtdParam._m0[33u].w) + _697;
    vec4 _716 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _724 = (((_716.z + cbMtdParam._m0[40u].y) - _703) * _300) + _703;
    float _751 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _782 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_751 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_755 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _797 = (-0.0) - ((_755 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _801 = (_755 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _802 = isnan(_801) ? _797 : (isnan(_797) ? _801 : min(_797, _801));
    float _4268 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _803 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _826 = ((_668.x - _653) * _364) + _653;
    float _827 = ((_668.y - _654) * _364) + _654;
    float _832 = ((_689.x - _826) * _331) + _826;
    float _833 = ((_689.y - _827) * _331) + _827;
    float _842 = ((((_716.x - _832) * _297) + _832) * 2.0) + (-1.0);
    float _843 = ((((_716.y - _833) * _299) + _833) * 2.0) + (-1.0);
    float _844 = dot(vec2(_842, _843), vec2(_842, _843));
    float _4279 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _849 = sqrt(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))));
    float _852 = (cbMtdParam._m0[34u].x * ((_316.x * 2.0) + (-1.0))) + _842;
    float _853 = (cbMtdParam._m0[34u].x * ((_316.y * 2.0) + (-1.0))) + _843;
    float _856 = fma(_849, _247 * NORMAL.x, fma(_853, _254 * TANGENT.x, (_240 * _232) * _852));
    float _859 = fma(_849, _247 * NORMAL.y, fma(_853, _254 * TANGENT.y, (_240 * _233) * _852));
    float _862 = fma(_849, _247 * NORMAL.z, fma(_853, _254 * TANGENT.z, (_240 * _234) * _852));
    float _866 = inversesqrt(dot(vec3(_856, _859, _862), vec3(_856, _859, _862)));
    float _867 = _866 * _856;
    float _868 = _866 * _859;
    float _869 = _866 * _862;
    float _4290 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _870 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
    float _4301 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _4312 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4323 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4334 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _874 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
    float _890 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _910 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _920 = cbSceneParam._m0[71u].x - (_751 / _910);
    float _921 = cbSceneParam._m0[71u].y - (_755 / _910);
    float _922 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _910);
    float _926 = inversesqrt(dot(vec3(_920, _921, _922), vec3(_920, _921, _922)));
    float _927 = _920 * _926;
    float _928 = _921 * _926;
    float _929 = _922 * _926;
    vec4 _934 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _936 = _934.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1155 = sqrt(((_920 * _920) + (_921 * _921)) + (_922 * _922));
        float _1161 = (cbMatDynParam._m0[5u].x * _1155) + cbMatDynParam._m0[5u].y;
        float _4345 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
        float _1166 = (cbMatDynParam._m0[5u].z * _1155) + cbMatDynParam._m0[5u].w;
        float _4356 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0))) - _1162)) + _1162) < ((_936 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _947 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _948 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _950 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _952 = _950.w;
    float _970 = fma(_869, cbSceneParam._m0[5u].z, fma(_868, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _867));
    float _973 = fma(_869, cbSceneParam._m0[6u].z, fma(_868, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _867));
    float _976 = fma(_869, cbSceneParam._m0[7u].z, fma(_868, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _867));
    vec4 _978 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _989 = (((_978.y - _870) + (_978.w * _870)) * cbMtdParam._m0[3u].x) + _870;
    uint _1002 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1004 = _1002 + 9u;
    uint _1005 = _1004 + uint(cbMatDynParam._m0[0u].w);
    float _1011 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) * cbInstanceData._m0[_1005].x;
    float _1012 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * cbInstanceData._m0[_1005].y;
    float _1013 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * cbInstanceData._m0[_1005].z;
    float _4367 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
    float _1014 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _4378 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1015 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    float _1016 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    vec4 _1017 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1022 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1033 = (((_1022.x - _874) + (_1022.w * _874)) * cbMtdParam._m0[3u].x) + _874;
    float _1046 = (cbMtdParam._m0[3u].x * (((_1014 * _952) - _1014) + _1017.x)) + _1014;
    float _1047 = (cbMtdParam._m0[3u].x * (((_1015 * _952) - _1015) + _1017.y)) + _1015;
    float _1048 = (cbMtdParam._m0[3u].x * (((_1016 * _952) - _1016) + _1017.z)) + _1016;
    float _1049 = 1.0 - _1033;
    float _1050 = _1049 * _1046;
    float _1051 = _1049 * _1047;
    float _1052 = _1049 * _1048;
    float _1057 = (_1046 + (-0.039999999105930328369140625)) * _1033;
    float _1058 = (_1047 + (-0.039999999105930328369140625)) * _1033;
    float _1059 = (_1048 + (-0.039999999105930328369140625)) * _1033;
    float _1060 = _1057 + 0.039999999105930328369140625;
    float _1062 = _1058 + 0.039999999105930328369140625;
    float _1063 = _1059 + 0.039999999105930328369140625;
    vec4 _1072 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _947, cbSceneParam._m0[86u].y * _948));
    float _1075 = _1072.x * TEXCOORD_5.w;
    float _1076 = dot(vec3(_867, _868, _869), vec3(_927, _928, _929));
    float _1079 = _1076 * 2.0;
    float _1083 = (_1079 * _867) - _927;
    float _1084 = (_1079 * _868) - _928;
    float _1085 = (_1079 * _869) - _929;
    float _1089 = abs(dot(vec3(_927, _928, _929), vec3(_867, _868, _869)));
    float _4400 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1091 = sqrt(_989);
    float _1102 = exp2((_1091 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1091 * 3.0));
    float _1108 = (1.0 - _1102) * ((_1091 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1109 = _1102 * _1091;
    float _1137 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1141 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1145 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1472;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1199 = fma(_1145, cbModelParam._m0[26u].z, fma(_1141, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1137));
        float _1203 = fma(_1145, cbModelParam._m0[27u].z, fma(_1141, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1137));
        float _1207 = fma(_1145, cbModelParam._m0[28u].z, fma(_1141, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1137));
        float _1231 = _1137 + _867;
        float _1232 = _1141 + _868;
        float _1233 = _1145 + _869;
        float _1243 = fma(_1233, cbModelParam._m0[26u].z, fma(_1232, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231)) - _1199;
        float _1244 = fma(_1233, cbModelParam._m0[27u].z, fma(_1232, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231)) - _1203;
        float _1245 = fma(_1233, cbModelParam._m0[28u].z, fma(_1232, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231)) - _1207;
        float _1249 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
        float _1261 = ((_1249 * _1243) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1199 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1249 * _1244) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1203 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1249 * _1245) / cbModelParam._m0[34u].z) + ((((((_1207 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1300 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1266.x + (-0.5));
        float _1302 = _1300 * (_1266.y + (-0.5));
        float _1303 = _1300 * (_1266.z + (-0.5));
        float _1310 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1273.x + (-0.5));
        float _1312 = _1310 * (_1273.y + (-0.5));
        float _1313 = _1310 * (_1273.z + (-0.5));
        float _1320 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1280.x + (-0.5));
        float _1322 = _1320 * (_1280.y + (-0.5));
        float _1323 = _1320 * (_1280.z + (-0.5));
        float _1330 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1287.x + (-0.5));
        float _1332 = _1330 * (_1287.y + (-0.5));
        float _1333 = _1330 * (_1287.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1354 = (dot(vec3(_867, _868, _869), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _4426 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1364 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _4437 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _4448 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_1366 + 1.0))) + _1371) * _1334;
        float _1381 = _1302 * 0.5;
        float _1382 = _1312 * 0.5;
        float _1383 = _1322 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_867, _868, _869), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _4481 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1408 + 1.0))) + _1413) * _1335;
        float _1423 = _1303 * 0.5;
        float _1424 = _1313 * 0.5;
        float _1425 = _1323 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_867, _868, _869), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _4514 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1450 + 1.0))) + _1455) * _1336;
        _1472 = _1303;
        _1474 = _1302;
        _1475 = _1301;
        _1476 = _1313;
        _1477 = _1312;
        _1478 = _1311;
        _1479 = _1323;
        _1480 = _1322;
        _1481 = _1321;
        _1482 = _1336;
        _1483 = _1335;
        _1484 = _1334;
        _1485 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1486 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1487 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _1473;
        _1474 = _1473;
        _1475 = _1473;
        _1476 = _1473;
        _1477 = _1473;
        _1478 = _1473;
        _1479 = _1473;
        _1480 = _1473;
        _1481 = _1473;
        _1482 = _1473;
        _1483 = _1473;
        _1484 = _1473;
        _1485 = 0.0;
        _1486 = 0.0;
        _1487 = 0.0;
    }
    float _1780;
    float _1781;
    float _1782;
    float _1783;
    float _1784;
    float _1785;
    float _1786;
    float _1787;
    float _1788;
    float _1789;
    float _1790;
    float _1791;
    float _1792;
    float _1793;
    float _1794;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1513 = fma(_1145, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1137));
        float _1517 = fma(_1145, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1137));
        float _1521 = fma(_1145, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1137));
        float _1543 = _1137 + _867;
        float _1544 = _1141 + _868;
        float _1545 = _1145 + _869;
        float _1555 = fma(_1545, cbModelParam._m0[30u].z, fma(_1544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1543)) - _1513;
        float _1556 = fma(_1545, cbModelParam._m0[31u].z, fma(_1544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1543)) - _1517;
        float _1557 = fma(_1545, cbModelParam._m0[32u].z, fma(_1544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1543)) - _1521;
        float _1561 = inversesqrt(dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557)));
        float _1573 = ((_1561 * _1555) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1513 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1574 = ((_1561 * _1556) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1517 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1575 = ((_1561 * _1557) / cbModelParam._m0[35u].z) + ((((((_1521 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1577 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1584 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1591 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        vec4 _1598 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1573, _1574, _1575), 0.0);
        float _1610 = exp2((_1577.w + (-0.5)) * 20.0) * 2.0;
        float _1611 = _1610 * (_1577.x + (-0.5));
        float _1612 = _1610 * (_1577.y + (-0.5));
        float _1613 = _1610 * (_1577.z + (-0.5));
        float _1620 = exp2((_1584.w + (-0.5)) * 20.0) * 2.0;
        float _1621 = _1620 * (_1584.x + (-0.5));
        float _1622 = _1620 * (_1584.y + (-0.5));
        float _1623 = _1620 * (_1584.z + (-0.5));
        float _1630 = exp2((_1591.w + (-0.5)) * 20.0) * 2.0;
        float _1631 = _1630 * (_1591.x + (-0.5));
        float _1632 = _1630 * (_1591.y + (-0.5));
        float _1633 = _1630 * (_1591.z + (-0.5));
        float _1640 = exp2((_1598.w + (-0.5)) * 20.0) * 2.0;
        float _1641 = _1640 * (_1598.x + (-0.5));
        float _1642 = _1640 * (_1598.y + (-0.5));
        float _1643 = _1640 * (_1598.z + (-0.5));
        float _1644 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1645 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1646 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1647 = _1611 * 0.5;
        float _1648 = _1621 * 0.5;
        float _1649 = _1631 * 0.5;
        float _1650 = dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649));
        float _1655 = (_1650 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1650);
        float _1663 = (dot(vec3(_867, _868, _869), vec3(_1655 * _1647, _1655 * _1648, _1655 * _1649)) + 1.0) * 0.5;
        float _4555 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1672 = sqrt(((_1648 * _1648) + (_1647 * _1647)) + (_1649 * _1649)) / (_1644 + 9.9999997473787516355514526367188e-06);
        float _4566 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1673 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
        float _1674 = _1673 * 2.0;
        float _1678 = (1.0 - _1673) / (_1673 + 1.0);
        float _4577 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1688 = ((((1.0 - _1679) * (_1674 + 2.0)) * exp2(log2(isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0))) * (_1674 + 1.0))) + _1679) * _1644;
        float _1689 = _1612 * 0.5;
        float _1690 = _1622 * 0.5;
        float _1691 = _1632 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_867, _868, _869), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4588 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1645 + 9.9999997473787516355514526367188e-06);
        float _4599 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4610 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_1716 + 1.0))) + _1721) * _1645;
        float _1731 = _1613 * 0.5;
        float _1732 = _1623 * 0.5;
        float _1733 = _1633 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_867, _868, _869), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4621 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1646 + 9.9999997473787516355514526367188e-06);
        float _4632 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4643 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_1758 + 1.0))) + _1763) * _1646;
        _1780 = _1613;
        _1781 = _1612;
        _1782 = _1611;
        _1783 = _1623;
        _1784 = _1622;
        _1785 = _1621;
        _1786 = _1633;
        _1787 = _1632;
        _1788 = _1631;
        _1789 = _1646;
        _1790 = _1645;
        _1791 = _1644;
        _1792 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0)));
        _1793 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1794 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
    }
    else
    {
        _1780 = _1473;
        _1781 = _1473;
        _1782 = _1473;
        _1783 = _1473;
        _1784 = _1473;
        _1785 = _1473;
        _1786 = _1473;
        _1787 = _1473;
        _1788 = _1473;
        _1789 = _1473;
        _1790 = _1473;
        _1791 = _1473;
        _1792 = 0.0;
        _1793 = 0.0;
        _1794 = 0.0;
    }
    float _1804 = (cbModelParam._m0[1u].x * (_1792 - _1485)) + _1485;
    float _1805 = (cbModelParam._m0[1u].x * (_1793 - _1486)) + _1486;
    float _1806 = (cbModelParam._m0[1u].x * (_1794 - _1487)) + _1487;
    float _1827 = fma(_1806, cbSceneParam._m0[89u].z, fma(_1805, cbSceneParam._m0[89u].y, _1804 * cbSceneParam._m0[89u].x));
    float _1830 = fma(_1806, cbSceneParam._m0[90u].z, fma(_1805, cbSceneParam._m0[90u].y, _1804 * cbSceneParam._m0[90u].x));
    float _1833 = fma(_1806, cbSceneParam._m0[91u].z, fma(_1805, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1804));
    float _1846 = _1083 * 0.5;
    float _1847 = _1084 * 0.5;
    float _1848 = _1085 * 0.5;
    float _1849 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1782, _1785, _1788, _1791));
    float _1852 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1781, _1784, _1787, _1790));
    float _1855 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1780, _1783, _1786, _1789));
    float _1889;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1862 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1472, _1476, _1479, _1482));
        float _1866 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1474, _1477, _1480, _1483));
        float _1870 = dot(vec4(_1846, _1847, _1848, 1.0), vec4(_1475, _1478, _1481, _1484));
        float _1877 = dot(vec4(cbModelParam._m0[39u]), vec4(_1846, _1847, _1848, 1.0));
        _1889 = dot(vec3(isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)), isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)), isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1877) ? 0.0 : (isnan(0.0) ? _1877 : max(0.0, _1877))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1889 = 1.0;
    }
    float _1900;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1891 = dot(vec4(cbModelParam._m0[40u]), vec4(_1846, _1847, _1848, 1.0));
        _1900 = dot(vec3(isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0)), isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)), isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1891) ? 0.0 : (isnan(0.0) ? _1891 : max(0.0, _1891))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1900 = 1.0;
    }
    float _1904 = (_1900 * cbModelParam._m0[1u].x) + (_1889 * (1.0 - cbModelParam._m0[1u].x));
    float _1914 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _989);
    float _1915 = isnan(_1914) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1914 : min(cbModelParam._m0[25u].z, _1914));
    float _1997;
    float _1999;
    float _2001;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1964 = fma(_1145, cbModelParam._m0[13u].z, fma(_1141, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1137)) + cbModelParam._m0[13u].w;
        float _1968 = fma(_1145, cbModelParam._m0[14u].z, fma(_1141, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1137)) + cbModelParam._m0[14u].w;
        float _1972 = fma(_1145, cbModelParam._m0[15u].z, fma(_1141, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1137)) + cbModelParam._m0[15u].w;
        float _1975 = fma(_1085, cbModelParam._m0[13u].z, fma(_1084, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1083));
        float _1978 = fma(_1085, cbModelParam._m0[14u].z, fma(_1084, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1083));
        float _1981 = fma(_1085, cbModelParam._m0[15u].z, fma(_1084, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1083));
        float _2009;
        if (_1975 > 0.0)
        {
            _2009 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2009 = frontier_phi_17_15_ladder;
        }
        float _2183;
        if (_1978 > 0.0)
        {
            _2183 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2183 = frontier_phi_26_22_ladder;
        }
        float _2477;
        if (_1981 > 0.0)
        {
            _2477 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2477 = frontier_phi_38_33_ladder;
        }
        float _2479 = isnan(_2183) ? _2009 : (isnan(_2009) ? _2183 : min(_2009, _2183));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1975) + _1964;
        float _2485 = (_2480 * _1978) + _1968;
        float _2486 = (_2480 * _1981) + _1972;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2489 = (-1.0) - _2487;
        float _2491 = _2487 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2486 > _2491) || ((_2486 < _2489) || ((_2485 > _2491) || ((_2485 < _2489) || ((_2484 < _2489) || (_2484 > _2491))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2631 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2486, cbModelParam._m0[9u].z, fma(_2485, cbModelParam._m0[9u].y, _2484 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2486, cbModelParam._m0[10u].z, fma(_2485, cbModelParam._m0[10u].y, _2484 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2486, cbModelParam._m0[11u].z, fma(_2485, cbModelParam._m0[11u].y, _2484 * cbModelParam._m0[11u].x))), _1915);
            frontier_phi_16_38_ladder = _2631.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2631.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2631.x * cbModelParam._m0[1u].y;
        }
        _1997 = frontier_phi_16_38_ladder_2;
        _1999 = frontier_phi_16_38_ladder_1;
        _2001 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1985 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1083, _1084, _1085), _1915);
        _1997 = _1985.x * cbModelParam._m0[1u].y;
        _1999 = _1985.y * cbModelParam._m0[1u].y;
        _2001 = _1985.z * cbModelParam._m0[1u].y;
    }
    float _2005 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _989);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2005 : min(cbModelParam._m0[25u].w, _2005));
    float _2098;
    float _2100;
    float _2102;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2062 = fma(_1145, cbModelParam._m0[21u].z, fma(_1141, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1137)) + cbModelParam._m0[21u].w;
        float _2066 = fma(_1145, cbModelParam._m0[22u].z, fma(_1141, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1137)) + cbModelParam._m0[22u].w;
        float _2070 = fma(_1145, cbModelParam._m0[23u].z, fma(_1141, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1137)) + cbModelParam._m0[23u].w;
        float _2073 = fma(_1085, cbModelParam._m0[21u].z, fma(_1084, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1083));
        float _2076 = fma(_1085, cbModelParam._m0[22u].z, fma(_1084, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1083));
        float _2079 = fma(_1085, cbModelParam._m0[23u].z, fma(_1084, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1083));
        float _2188;
        if (_2073 > 0.0)
        {
            _2188 = abs((1.0 - _2062) / _2073);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2062 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2188 = frontier_phi_28_24_ladder;
        }
        float _2504;
        if (_2076 > 0.0)
        {
            _2504 = abs((1.0 - _2066) / _2076);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2066 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2504 = frontier_phi_40_35_ladder;
        }
        float _2842;
        if (_2079 > 0.0)
        {
            _2842 = abs((1.0 - _2070) / _2079);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2079 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2070 + 1.0) / _2079);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2842 = frontier_phi_50_47_ladder;
        }
        float _2844 = isnan(_2504) ? _2188 : (isnan(_2188) ? _2504 : min(_2188, _2504));
        float _2845 = isnan(_2842) ? _2844 : (isnan(_2844) ? _2842 : min(_2844, _2842));
        float _2849 = (_2845 * _2073) + _2062;
        float _2850 = (_2845 * _2076) + _2066;
        float _2851 = (_2845 * _2079) + _2070;
        float _2852 = _2845 * 9.9999997473787516355514526367188e-05;
        float _2853 = (-1.0) - _2852;
        float _2855 = _2852 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2851 > _2855) || ((_2851 < _2853) || ((_2850 > _2855) || ((_2850 < _2853) || ((_2849 < _2853) || (_2849 > _2855))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2973 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2851, cbModelParam._m0[17u].z, fma(_2850, cbModelParam._m0[17u].y, _2849 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2851, cbModelParam._m0[18u].z, fma(_2850, cbModelParam._m0[18u].y, _2849 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2851, cbModelParam._m0[19u].z, fma(_2850, cbModelParam._m0[19u].y, _2849 * cbModelParam._m0[19u].x))), _2006);
            frontier_phi_25_50_ladder = _2973.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2973.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2973.x * cbModelParam._m0[1u].z;
        }
        _2098 = frontier_phi_25_50_ladder_2;
        _2100 = frontier_phi_25_50_ladder_1;
        _2102 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2082 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1083, _1084, _1085), _2006);
        _2098 = _2082.x * cbModelParam._m0[1u].z;
        _2100 = _2082.y * cbModelParam._m0[1u].z;
        _2102 = _2082.z * cbModelParam._m0[1u].z;
    }
    float _2115 = (((_1108 * _1060) + _1109) * _1075) * ((cbModelParam._m0[1u].w * (_2098 - _1997)) + _1997);
    float _2117 = (((_1108 * _1062) + _1109) * _1075) * ((cbModelParam._m0[1u].w * (_2100 - _1999)) + _1999);
    float _2119 = (((_1108 * _1063) + _1109) * _1075) * ((cbModelParam._m0[1u].w * (_2102 - _2001)) + _2001);
    float _2122 = fma(_2119, cbSceneParam._m0[89u].z, fma(_2117, cbSceneParam._m0[89u].y, _2115 * cbSceneParam._m0[89u].x));
    float _2125 = fma(_2119, cbSceneParam._m0[90u].z, fma(_2117, cbSceneParam._m0[90u].y, _2115 * cbSceneParam._m0[90u].x));
    float _2128 = fma(_2119, cbSceneParam._m0[91u].z, fma(_2117, cbSceneParam._m0[91u].y, _2115 * cbSceneParam._m0[91u].x));
    float _2162 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2166 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2170 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2174 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2175 = _2162 / _2174;
    float _2176 = _2166 / _2174;
    float _2177 = _2170 / _2174;
    float _2323;
    float _2324;
    float _2325;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2204 = ((uint(_2177 > cbSceneParam._m0[59u].y) + uint(_2177 > cbSceneParam._m0[59u].x)) + uint(_2177 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2205 = _2204 + 43u;
        uint _2213 = _2204 + 44u;
        uint _2221 = _2204 + 45u;
        uint _2229 = _2204 + 46u;
        float _2240 = fma(_2174, cbSceneParam._m0[_2205].w, fma(_2170, cbSceneParam._m0[_2205].z, fma(_2166, cbSceneParam._m0[_2205].y, _2162 * cbSceneParam._m0[_2205].x)));
        float _2244 = fma(_2174, cbSceneParam._m0[_2213].w, fma(_2170, cbSceneParam._m0[_2213].z, fma(_2166, cbSceneParam._m0[_2213].y, _2162 * cbSceneParam._m0[_2213].x)));
        float _2252 = fma(_2174, cbSceneParam._m0[_2229].w, fma(_2170, cbSceneParam._m0[_2229].z, fma(_2166, cbSceneParam._m0[_2229].y, _2162 * cbSceneParam._m0[_2229].x)));
        float _2256 = cbSceneParam._m0[33u].z * _2252;
        float _2258 = cbSceneParam._m0[33u].w * _2252;
        float _2261 = fma(_2174, cbSceneParam._m0[_2221].w, fma(_2170, cbSceneParam._m0[_2221].z, fma(_2166, cbSceneParam._m0[_2221].y, _2162 * cbSceneParam._m0[_2221].x))) / _2252;
        float _2309 = (cbSceneParam._m0[33u].x - sqrt(((_2176 * _2176) + (_2175 * _2175)) + (_2177 * _2177))) * cbSceneParam._m0[33u].y;
        float _4769 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
        float _2316 = (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2256 + _2240) / _2252, (_2258 + _2244) / _2252), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2258 + _2240) / _2252, (_2244 - _2256) / _2252), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2240 - _2256) / _2252, (_2244 - _2258) / _2252), _2261), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2240 - _2258) / _2252, (_2256 + _2244) / _2252), _2261), 0.0)).x), vec4(0.25)));
        _2323 = 1.0 - (_2316 * cbSceneParam._m0[34u].x);
        _2324 = 1.0 - (_2316 * cbSceneParam._m0[34u].y);
        _2325 = 1.0 - (_2316 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2323 = 1.0;
        _2324 = 1.0;
        _2325 = 1.0;
    }
    float _2389;
    float _2391;
    float _2393;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2377 = fma(_2174, cbSceneParam._m0[63u].w, fma(_2170, cbSceneParam._m0[63u].z, fma(_2166, cbSceneParam._m0[63u].y, _2162 * cbSceneParam._m0[63u].x)));
        float _2378 = fma(_2174, cbSceneParam._m0[60u].w, fma(_2170, cbSceneParam._m0[60u].z, fma(_2166, cbSceneParam._m0[60u].y, _2162 * cbSceneParam._m0[60u].x))) / _2377;
        float _2379 = fma(_2174, cbSceneParam._m0[61u].w, fma(_2170, cbSceneParam._m0[61u].z, fma(_2166, cbSceneParam._m0[61u].y, _2162 * cbSceneParam._m0[61u].x))) / _2377;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2378 >= cbSceneParam._m0[64u].x) && (_2379 >= cbSceneParam._m0[64u].y)) && (_2378 <= cbSceneParam._m0[64u].z)) && (_2379 <= cbSceneParam._m0[64u].w))
        {
            float _2517 = fma(_2174, cbSceneParam._m0[62u].w, fma(_2170, cbSceneParam._m0[62u].z, fma(_2166, cbSceneParam._m0[62u].y, _2162 * cbSceneParam._m0[62u].x))) / _2377;
            float _2521 = isnan(cbSceneParam._m0[41u].w) ? _2517 : (isnan(_2517) ? cbSceneParam._m0[41u].w : max(_2517, cbSceneParam._m0[41u].w));
            float _2564 = (cbSceneParam._m0[33u].x - sqrt(((_2176 * _2176) + (_2175 * _2175)) + (_2177 * _2177))) * cbSceneParam._m0[33u].y;
            float _4785 = isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0));
            float _2571 = (isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2378, cbSceneParam._m0[33u].w + _2379), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2378, _2379 - cbSceneParam._m0[33u].z), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2378 - cbSceneParam._m0[33u].z, _2379 - cbSceneParam._m0[33u].w), _2521), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2378 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2379), _2521), 0.0)).x), vec4(0.25)));
            float _2575 = 1.0 - (_2571 * cbSceneParam._m0[34u].x);
            float _2576 = 1.0 - (_2571 * cbSceneParam._m0[34u].y);
            float _2577 = 1.0 - (_2571 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2577) ? _2325 : (isnan(_2325) ? _2577 : min(_2325, _2577));
            frontier_phi_37_36_ladder_1 = isnan(_2576) ? _2324 : (isnan(_2324) ? _2576 : min(_2324, _2576));
            frontier_phi_37_36_ladder_2 = isnan(_2575) ? _2323 : (isnan(_2323) ? _2575 : min(_2323, _2575));
        }
        else
        {
            frontier_phi_37_36_ladder = _2325;
            frontier_phi_37_36_ladder_1 = _2324;
            frontier_phi_37_36_ladder_2 = _2323;
        }
        _2389 = frontier_phi_37_36_ladder_2;
        _2391 = frontier_phi_37_36_ladder_1;
        _2393 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2389 = _2323;
        _2391 = _2324;
        _2393 = _2325;
    }
    uvec4 _2398 = floatBitsToUint(cbInstanceData._m0[_1002 + 5u]);
    uint _2400 = _2398.x * 14u;
    uint _2401 = _2400 + 13u;
    float _2408 = _1075 + (-1.0);
    float _2413 = (cbLight._m0[_2401].x * _2408) + 1.0;
    float _2414 = (cbLight._m0[_2401].y * _2408) + 1.0;
    float _2415 = (cbLight._m0[_2401].z * _2408) + 1.0;
    float _2416 = (cbLight._m0[_2401].w * _2408) + 1.0;
    uint _2417 = _2400 + 5u;
    float _2423 = isnan(1.0) ? _2414 : (isnan(_2414) ? 1.0 : min(_2414, 1.0));
    uint _2427 = _2400 + 4u;
    float _2436 = isnan(1.0) ? _2413 : (isnan(_2413) ? 1.0 : min(_2413, 1.0));
    uint _2440 = _2400 | 1u;
    float _2451 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_867, _868, _869));
    float _2454 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_867, _868, _869));
    float _4821 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
    float _4832 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
    float _2459 = (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0))) * 0.3183098733425140380859375;
    float _2461 = (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * 0.3183098733425140380859375;
    float _2468 = ((cbLight._m0[_2417].x * _2423) * _2461) + (((cbLight._m0[_2427].x * _2389) * _2436) * _2459);
    float _2469 = ((_2423 * cbLight._m0[_2417].y) * _2461) + (((cbLight._m0[_2427].y * _2391) * _2436) * _2459);
    float _2470 = ((_2423 * cbLight._m0[_2417].z) * _2461) + (((cbLight._m0[_2427].z * _2393) * _2436) * _2459);
    uvec4 _2474 = floatBitsToUint(cbLight._m0[_2400 + 12u]);
    bool _2476 = _2474.x == 0u;
    float _2578;
    float _2580;
    float _2582;
    if (_2476)
    {
        _2578 = _2468;
        _2580 = _2469;
        _2582 = _2470;
    }
    else
    {
        uint _2586 = _2400 + 6u;
        float _2602 = (dot(vec3(cbLight._m0[_2400 + 2u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2603 = _2602 * _2602;
        float _4843 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
        float _2604 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2605 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
        _2578 = (((cbLight._m0[_2586].x * 0.3183098733425140380859375) * _2604) * _2605) + _2468;
        _2580 = (((cbLight._m0[_2586].y * 0.3183098733425140380859375) * _2604) * _2605) + _2469;
        _2582 = (((cbLight._m0[_2586].z * 0.3183098733425140380859375) * _2604) * _2605) + _2470;
    }
    bool _2585 = _2474.y == 0u;
    float _2640;
    float _2642;
    float _2644;
    if (_2585)
    {
        _2640 = _2578;
        _2642 = _2580;
        _2644 = _2582;
    }
    else
    {
        uint _2813 = _2400 + 7u;
        float _2829 = (dot(vec3(cbLight._m0[_2400 + 3u].xyz), vec3(_867, _868, _869)) * 0.5) + 0.5;
        float _2830 = _2829 * _2829;
        float _4859 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2831 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
        float _2832 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        _2640 = (((cbLight._m0[_2813].x * 0.3183098733425140380859375) * _2831) * _2832) + _2578;
        _2642 = (((cbLight._m0[_2813].y * 0.3183098733425140380859375) * _2831) * _2832) + _2580;
        _2644 = (((cbLight._m0[_2813].z * 0.3183098733425140380859375) * _2831) * _2832) + _2582;
    }
    uint _2647 = _2400 + 8u;
    float _2660 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2400].w)) * _989) * 0.949999988079071044921875);
    float _2661 = _2660 * _2660;
    float _2662 = cbLight._m0[_2400].x + _927;
    float _2663 = cbLight._m0[_2400].y + _928;
    float _2664 = cbLight._m0[_2400].z + _929;
    float _2668 = inversesqrt(dot(vec3(_2662, _2663, _2664), vec3(_2662, _2663, _2664)));
    float _2669 = _2668 * _2662;
    float _2670 = _2668 * _2663;
    float _2671 = _2668 * _2664;
    float _2672 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2400].xyz));
    float _4875 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2675 = isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0));
    float _4886 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _2676 = isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0));
    float _2677 = dot(vec3(_867, _868, _869), vec3(_2669, _2670, _2671));
    float _4897 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
    float _2680 = isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0));
    float _2681 = dot(vec3(cbLight._m0[_2400].xyz), vec3(_2669, _2670, _2671));
    float _4908 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
    float _2685 = _2661 * _2661;
    float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
    float _2697 = exp2(log2(1.0 - (isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0)))) * 5.0);
    float _2698 = 0.959999978542327880859375 - _1057;
    float _2700 = 0.959999978542327880859375 - _1058;
    float _2701 = 0.959999978542327880859375 - _1059;
    float _2708 = 1.0 - _2661;
    float _2719 = (0.5 / (((_2676 * ((_2675 * _2708) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2708) + _2661) * _2675))) * _2675;
    float _4919 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
    float _2721 = (isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
    uint _2735 = _2400 + 9u;
    float _2746 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2440].w)) * _989) * 0.949999988079071044921875);
    float _2747 = _2746 * _2746;
    float _2748 = cbLight._m0[_2440].x + _927;
    float _2749 = cbLight._m0[_2440].y + _928;
    float _2750 = cbLight._m0[_2440].z + _929;
    float _2754 = inversesqrt(dot(vec3(_2748, _2749, _2750), vec3(_2748, _2749, _2750)));
    float _2755 = _2754 * _2748;
    float _2756 = _2754 * _2749;
    float _2757 = _2754 * _2750;
    float _2758 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2440].xyz));
    float _4930 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
    float _2761 = isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0));
    float _2762 = dot(vec3(_867, _868, _869), vec3(_2755, _2756, _2757));
    float _4941 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
    float _2765 = isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0));
    float _2766 = dot(vec3(cbLight._m0[_2440].xyz), vec3(_2755, _2756, _2757));
    float _4952 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
    float _2770 = _2747 * _2747;
    float _2774 = ((_2765 * _2765) * (_2770 + (-1.0))) + 1.0;
    float _2781 = exp2(log2(1.0 - (isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0)))) * 5.0);
    float _2788 = 1.0 - _2747;
    float _2798 = (0.5 / (((_2676 * ((_2761 * _2788) + _2747)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2788) + _2747) * _2761))) * _2761;
    float _4963 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
    float _2800 = (isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0))) * (_2770 / ((_2774 * _2774) * 3.141590118408203125));
    float _2810 = (((((_2781 * _2698) + _1060) * cbLight._m0[_2735].x) * _2800) * _2423) + ((((cbLight._m0[_2647].x * _2389) * ((_2697 * _2698) + _1060)) * _2721) * _2436);
    float _2811 = (((((_2781 * _2700) + _1062) * cbLight._m0[_2735].y) * _2800) * _2423) + ((((cbLight._m0[_2647].y * _2391) * ((_2697 * _2700) + _1062)) * _2721) * _2436);
    float _2812 = (((((_2781 * _2701) + _1063) * cbLight._m0[_2735].z) * _2800) * _2423) + ((((cbLight._m0[_2647].z * _2393) * ((_2697 * _2701) + _1063)) * _2721) * _2436);
    float _2868;
    float _2870;
    float _2872;
    if (_2476)
    {
        _2868 = _2810;
        _2870 = _2811;
        _2872 = _2812;
    }
    else
    {
        uint _2874 = _2400 + 2u;
        uint _2878 = _2400 + 10u;
        float _2892 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2874].w)) * _989) * 0.949999988079071044921875);
        float _2893 = _2892 * _2892;
        float _2894 = cbLight._m0[_2874].x + _927;
        float _2895 = cbLight._m0[_2874].y + _928;
        float _2896 = cbLight._m0[_2874].z + _929;
        float _2900 = inversesqrt(dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896)));
        float _2901 = _2900 * _2894;
        float _2902 = _2900 * _2895;
        float _2903 = _2900 * _2896;
        float _2904 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2874].xyz));
        float _4974 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
        float _2907 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
        float _2908 = dot(vec3(_867, _868, _869), vec3(_2901, _2902, _2903));
        float _4985 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
        float _2911 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
        float _2912 = dot(vec3(cbLight._m0[_2874].xyz), vec3(_2901, _2902, _2903));
        float _4996 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2916 = _2893 * _2893;
        float _2920 = ((_2911 * _2911) * (_2916 + (-1.0))) + 1.0;
        float _2927 = exp2(log2(1.0 - (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0)))) * 5.0);
        float _2934 = 1.0 - _2893;
        float _2944 = (0.5 / (((_2676 * ((_2907 * _2934) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _2934) + _2893) * _2907))) * _2907;
        float _5007 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
        float _2946 = (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0))) * (_2916 / ((_2920 * _2920) * 3.141590118408203125));
        float _2947 = isnan(1.0) ? _2415 : (isnan(_2415) ? 1.0 : min(_2415, 1.0));
        _2868 = (((((_2927 * _2698) + _1060) * cbLight._m0[_2878].x) * _2946) * _2947) + _2810;
        _2870 = (((((_2927 * _2700) + _1062) * cbLight._m0[_2878].y) * _2946) * _2947) + _2811;
        _2872 = (((((_2927 * _2701) + _1063) * cbLight._m0[_2878].z) * _2946) * _2947) + _2812;
    }
    float _2978;
    float _2980;
    float _2982;
    if (_2585)
    {
        _2978 = _2868;
        _2980 = _2870;
        _2982 = _2872;
    }
    else
    {
        uint _2989 = _2400 + 3u;
        uint _2993 = _2400 + 11u;
        float _3007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2989].w)) * _989) * 0.949999988079071044921875);
        float _3008 = _3007 * _3007;
        float _3009 = cbLight._m0[_2989].x + _927;
        float _3010 = cbLight._m0[_2989].y + _928;
        float _3011 = cbLight._m0[_2989].z + _929;
        float _3015 = inversesqrt(dot(vec3(_3009, _3010, _3011), vec3(_3009, _3010, _3011)));
        float _3016 = _3015 * _3009;
        float _3017 = _3015 * _3010;
        float _3018 = _3015 * _3011;
        float _3019 = dot(vec3(_867, _868, _869), vec3(cbLight._m0[_2989].xyz));
        float _5023 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
        float _3022 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
        float _3023 = dot(vec3(_867, _868, _869), vec3(_3016, _3017, _3018));
        float _5034 = isnan(0.0) ? _3023 : (isnan(_3023) ? 0.0 : max(_3023, 0.0));
        float _3026 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
        float _3027 = dot(vec3(cbLight._m0[_2989].xyz), vec3(_3016, _3017, _3018));
        float _5045 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
        float _3031 = _3008 * _3008;
        float _3035 = ((_3026 * _3026) * (_3031 + (-1.0))) + 1.0;
        float _3042 = exp2(log2(1.0 - (isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0)))) * 5.0);
        float _3049 = 1.0 - _3008;
        float _3059 = (0.5 / (((_2676 * ((_3022 * _3049) + _3008)) + 9.9999999392252902907785028219223e-09) + (((_2676 * _3049) + _3008) * _3022))) * _3022;
        float _5056 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        float _3061 = (isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0))) * (_3031 / ((_3035 * _3035) * 3.141590118408203125));
        float _3062 = isnan(1.0) ? _2416 : (isnan(_2416) ? 1.0 : min(_2416, 1.0));
        _2978 = (((((_3042 * _2698) + _1060) * cbLight._m0[_2993].x) * _3061) * _3062) + _2868;
        _2980 = (((((_3042 * _2700) + _1062) * cbLight._m0[_2993].y) * _3061) * _3062) + _2870;
        _2982 = (((((_3042 * _2701) + _1063) * cbLight._m0[_2993].z) * _3061) * _3062) + _2872;
    }
    float _3128;
    float _3130;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_2398.y == 0u)
    {
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.x;
        uint _3095 = uint((float(_3083.y) * floor(float(uint(cbSceneParam._m0[85u].y * _948) / _3084))) + floor(float(uint(cbSceneParam._m0[85u].x * _947) / _3084)));
        float _3105 = (log2(_2177 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3106 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
        uint _3109 = uint(isnan(14.0) ? _3106 : (isnan(_3106) ? 14.0 : min(_3106, 14.0)));
        uvec4 _3114 = texelFetch(g_lightClusterGridBuffer, int(((_3109 << 2u) + (_3095 << 6u)) >> 2u));
        uint _3115 = _3114.x;
        uint _3116 = _3083.z;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((((1u << ((_3116 >> 4u) & 15u)) + 4294967295u) & _3115) == 0u) || ((_3116 & 240u) == 0u))
        {
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
        }
        else
        {
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            float _3390 = 0.0;
            uint _3391 = 0u;
            uint _3400;
            bool _3401;
            for (;;)
            {
                _3400 = texelFetch(g_lightClassification, int((((_3109 << 5u) + (_3095 << 9u)) + (_3391 << 2u)) >> 2u)).x;
                _3401 = _3400 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3401)
                {
                    frontier_phi_71_pred = _3390;
                    frontier_phi_71_pred_1 = _3389;
                    frontier_phi_71_pred_2 = _3388;
                    frontier_phi_71_pred_3 = _3387;
                    frontier_phi_71_pred_4 = _3386;
                    frontier_phi_71_pred_5 = _3385;
                }
                else
                {
                    float _3530;
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    float _3535;
                    uint _3536;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3390;
                    _3536 = _3400;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    float _3462;
                    for (;;)
                    {
                        uint _3540 = uint(findLSB(_3536)) + (_3391 << 5u);
                        uint _3537 = (_3536 + 4294967295u) & _3536;
                        uint _3542 = _3540 * 48u;
                        vec4 _3556 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3542)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3542 + 3u)).x));
                        uint _3562 = (_3540 * 48u) + 4u;
                        vec4 _3575 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3562)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3562 + 3u)).x));
                        uint _3581 = (_3540 * 48u) + 8u;
                        vec3 _3592 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3581)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3581 + 2u)).x));
                        float _3596 = _3556.x - _2175;
                        float _3597 = _3556.y - _2176;
                        float _3598 = _3556.z - _2177;
                        float _3599 = dot(vec3(_3596, _3597, _3598), vec3(_3596, _3597, _3598));
                        float _3602 = inversesqrt(_3599);
                        float _3603 = _3602 * _3596;
                        float _3604 = _3602 * _3597;
                        float _3605 = _3602 * _3598;
                        float _3606 = dot(vec3(_970, _973, _976), vec3(_3603, _3604, _3605));
                        float _3611 = 1.0 - (_3599 * _3556.w);
                        float _5082 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                        float _3612 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                        float _3613 = sqrt(_3599) * _3575.w;
                        float _3616 = 1.39999997615814208984375 / (_3613 + 1.39999997615814208984375);
                        float _3617 = _3616 * _3616;
                        float _3620 = ((1.0 - _3617) * _3606) + _3617;
                        float _3623 = _3613 * _3613;
                        float _3627 = ((isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0))) * _3612) / ((_3623 * 0.699999988079071044921875) + 1.0);
                        float _3631 = (-0.0) - _2175;
                        float _3632 = (-0.0) - _2176;
                        float _3633 = (-0.0) - _2177;
                        float _3637 = inversesqrt(dot(vec3(_3631, _3632, _3633), vec3(_3631, _3632, _3633)));
                        float _3638 = _3637 * _3631;
                        float _3639 = _3637 * _3632;
                        float _3640 = _3637 * _3633;
                        float _3647 = exp2(log2(1.0 / ((_3623 * 3.5) + 5.0)) * 0.25);
                        float _3648 = 1.0 - _1091;
                        float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                        float _3656 = _3655 * _3655;
                        float _3657 = _3656 * _3656;
                        float _3658 = _3638 + _3603;
                        float _3659 = _3639 + _3604;
                        float _3660 = _3640 + _3605;
                        float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                        float _3668 = dot(vec3(_970, _973, _976), vec3(_3638, _3639, _3640));
                        float _5098 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3671 = isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0));
                        float _3672 = dot(vec3(_970, _973, _976), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                        float _5109 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3675 = isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0));
                        float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                        float _3680 = _3616 * _3656;
                        float _3681 = _3680 * _3680;
                        float _3684 = ((1.0 - _3681) * _3606) + _3681;
                        float _5120 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                        float _3685 = isnan(1.0) ? _5120 : (isnan(_5120) ? 1.0 : min(_5120, 1.0));
                        float _3686 = 1.0 - _3656;
                        float _3696 = (0.5 / (((_3685 * ((_3671 * _3686) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3656) * _3671))) * _3685;
                        float _5131 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3707 = (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0)))) / ((_3679 * _3679) * ((_3623 * 2.1991131305694580078125) + 3.141590118408203125))) * _3612;
                        _3460 = (_3627 * _3575.x) + _3533;
                        _3461 = (_3627 * _3575.y) + _3534;
                        _3462 = (_3627 * _3575.z) + _3535;
                        _3457 = (_3707 * _3592.x) + _3530;
                        _3458 = (_3707 * _3592.y) + _3531;
                        _3459 = (_3707 * _3592.z) + _3532;
                        if (_3537 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3462;
                            _3536 = _3537;
                        }
                    }
                    frontier_phi_71_pred = _3462;
                    frontier_phi_71_pred_1 = _3461;
                    frontier_phi_71_pred_2 = _3460;
                    frontier_phi_71_pred_3 = _3459;
                    frontier_phi_71_pred_4 = _3458;
                    frontier_phi_71_pred_5 = _3457;
                }
                _3235 = frontier_phi_71_pred;
                _3233 = frontier_phi_71_pred_1;
                _3231 = frontier_phi_71_pred_2;
                _3229 = frontier_phi_71_pred_3;
                _3227 = frontier_phi_71_pred_4;
                _3225 = frontier_phi_71_pred_5;
                uint _3392 = _3391 + 1u;
                if (_3392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3385 = _3225;
                    _3386 = _3227;
                    _3387 = _3229;
                    _3388 = _3231;
                    _3389 = _3233;
                    _3390 = _3235;
                    _3391 = _3392;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
        }
        uvec4 _3238 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3239 = _3238.z;
        uint _3241 = (_3239 >> 8u) & 15u;
        float _3353;
        float _3355;
        float _3357;
        float _3359;
        float _3361;
        float _3363;
        if (((4294967295u << _3241) & _3115) == 0u)
        {
            _3353 = _3224;
            _3355 = _3226;
            _3357 = _3228;
            _3359 = _3230;
            _3361 = _3232;
            _3363 = _3234;
        }
        else
        {
            float _3378 = inversesqrt(dot(vec3(_2175, _2176, _2177), vec3(_2175, _2176, _2177)));
            float _3379 = _3378 * _2175;
            float _3380 = _3378 * _2176;
            float _3381 = _3378 * _2177;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3241 < ((_3239 >> 12u) & 15u))
            {
                float _3354;
                float _3356;
                float _3358;
                float _3360;
                float _3362;
                float _3364;
                float _3513 = _3224;
                float _3514 = _3226;
                float _3515 = _3228;
                float _3516 = _3230;
                float _3517 = _3232;
                float _3518 = _3234;
                uint _3519 = _3241;
                uint _3528;
                bool _3529;
                for (;;)
                {
                    _3528 = texelFetch(g_lightClassification, int((((_3109 << 5u) + (_3095 << 9u)) + (_3519 << 2u)) >> 2u)).x;
                    _3529 = _3528 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3529)
                    {
                        frontier_phi_82_pred = _3518;
                        frontier_phi_82_pred_1 = _3517;
                        frontier_phi_82_pred_2 = _3516;
                        frontier_phi_82_pred_3 = _3515;
                        frontier_phi_82_pred_4 = _3514;
                        frontier_phi_82_pred_5 = _3513;
                    }
                    else
                    {
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _4020;
                        float _3734 = _3513;
                        float _3735 = _3514;
                        float _3736 = _3515;
                        float _3737 = _3516;
                        float _3738 = _3517;
                        float _3739 = _3518;
                        uint _3740 = _3528;
                        uint _3741;
                        vec4 _3766;
                        float _3767;
                        vec4 _3782;
                        vec3 _3794;
                        vec4 _3810;
                        vec4 _3825;
                        float _3871;
                        bool _3872;
                        for (;;)
                        {
                            uint _3751 = ((_3519 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3740));
                            _3741 = (_3740 + 4294967295u) & _3740;
                            uint _3753 = _3751 * 40u;
                            _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            _3767 = _3766.w;
                            uint _3769 = (_3751 * 40u) + 4u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3784 = (_3751 * 40u) + 8u;
                            _3794 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x));
                            uint _3797 = (_3751 * 40u) + 16u;
                            _3810 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3797)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3797 + 3u)).x));
                            uint _3812 = (_3751 * 40u) + 20u;
                            _3825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3812 + 3u)).x));
                            uint _3827 = (_3751 * 40u) + 24u;
                            vec4 _3840 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3827 + 3u)).x));
                            uint _3846 = (_3751 * 40u) + 28u;
                            vec4 _3859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3846 + 3u)).x));
                            _3871 = fma(_2177, _3859.z, fma(_2176, _3859.y, _3859.x * _2175)) + _3859.w;
                            _3872 = !((fma(_2177, _3840.z, fma(_2176, _3840.y, _3840.x * _2175)) + _3840.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3872)
                            {
                                float _3899 = _3766.x - _2175;
                                float _3900 = _3766.y - _2176;
                                float _3901 = _3766.z - _2177;
                                float _3902 = dot(vec3(_3899, _3900, _3901), vec3(_3899, _3900, _3901));
                                float _3905 = inversesqrt(_3902);
                                float _3906 = _3905 * _3899;
                                float _3907 = _3905 * _3900;
                                float _3908 = _3905 * _3901;
                                float _3912 = 1.0 - (_3902 / (_3767 * _3767));
                                float _5142 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3913 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                                float _3917 = sqrt(_3902) * _3782.w;
                                float _3919 = 1.39999997615814208984375 / (_3917 + 1.39999997615814208984375);
                                float _3920 = _3919 * _3919;
                                float _3923 = ((1.0 - _3920) * dot(vec3(_3906, _3907, _3908), vec3(_970, _973, _976))) + _3920;
                                float _3926 = _3917 * _3917;
                                float _3930 = (fma(_2177, _3810.z, fma(_2176, _3810.y, _3810.x * _2175)) + _3810.w) / _3871;
                                float _3931 = (fma(_2177, _3825.z, fma(_2176, _3825.y, _3825.x * _2175)) + _3825.w) / _3871;
                                float _3935 = 1.0 - dot(vec2(_3930, _3931), vec2(_3930, _3931));
                                float _5158 = isnan(0.0) ? _3935 : (isnan(_3935) ? 0.0 : max(_3935, 0.0));
                                float _3936 = isnan(1.0) ? _5158 : (isnan(_5158) ? 1.0 : min(_5158, 1.0));
                                float _3937 = _3936 * (((isnan(0.0) ? _3923 : (isnan(_3923) ? 0.0 : max(_3923, 0.0))) * _3913) / ((_3926 * 0.699999988079071044921875) + 1.0));
                                float _3949 = exp2(log2(1.0 / ((_3926 * 3.5) + 5.0)) * 0.25);
                                float _3950 = 1.0 - _1091;
                                float _3957 = sqrt(1.0 - ((1.0 - (_3950 * _3950)) * (1.0 - (_3949 * _3949))));
                                float _3958 = _3957 * _3957;
                                float _3959 = _3958 * _3958;
                                float _3960 = _3906 - _3379;
                                float _3961 = _3907 - _3380;
                                float _3962 = _3908 - _3381;
                                float _3966 = inversesqrt(dot(vec3(_3960, _3961, _3962), vec3(_3960, _3961, _3962)));
                                float _3970 = dot(vec3(_970, _973, _976), vec3((-0.0) - _3379, (-0.0) - _3380, (-0.0) - _3381));
                                float _5169 = isnan(0.0) ? _3970 : (isnan(_3970) ? 0.0 : max(_3970, 0.0));
                                float _3973 = isnan(1.0) ? _5169 : (isnan(_5169) ? 1.0 : min(_5169, 1.0));
                                float _3974 = dot(vec3(_970, _973, _976), vec3(_3966 * _3960, _3966 * _3961, _3966 * _3962));
                                float _5180 = isnan(0.0) ? _3974 : (isnan(_3974) ? 0.0 : max(_3974, 0.0));
                                float _3977 = isnan(1.0) ? _5180 : (isnan(_5180) ? 1.0 : min(_5180, 1.0));
                                float _3981 = ((_3977 * _3977) * (_3959 + (-1.0))) + 1.0;
                                float _3982 = _3919 * _3958;
                                float _3983 = _3982 * _3982;
                                float _3989 = ((1.0 - _3983) * dot(vec3(_970, _973, _976), vec3(_3906, _3907, _3908))) + _3983;
                                float _5191 = isnan(0.0) ? _3989 : (isnan(_3989) ? 0.0 : max(_3989, 0.0));
                                float _3990 = isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0));
                                float _3991 = 1.0 - _3958;
                                float _4001 = (0.5 / (((_3990 * ((_3973 * _3991) + _3958)) + 9.9999999392252902907785028219223e-09) + (((_3990 * _3991) + _3958) * _3973))) * _3990;
                                float _5202 = isnan(0.0) ? _4001 : (isnan(_4001) ? 0.0 : max(_4001, 0.0));
                                float _4011 = (_3936 * _3913) * (((_3959 * 3.1415927410125732421875) * (isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0)))) / ((_3981 * _3981) * ((_3926 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3937 * _3782.z;
                                frontier_phi_88_pred_1 = _3937 * _3782.y;
                                frontier_phi_88_pred_2 = _3937 * _3782.x;
                                frontier_phi_88_pred_3 = _4011 * _3794.z;
                                frontier_phi_88_pred_4 = _4011 * _3794.y;
                                frontier_phi_88_pred_5 = _4011 * _3794.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4020 = frontier_phi_88_pred;
                            _4019 = frontier_phi_88_pred_1;
                            _4018 = frontier_phi_88_pred_2;
                            _4017 = frontier_phi_88_pred_3;
                            _4016 = frontier_phi_88_pred_4;
                            _4015 = frontier_phi_88_pred_5;
                            _3724 = _4018 + _3737;
                            _3725 = _4019 + _3738;
                            _3726 = _4020 + _3739;
                            _3721 = _4015 + _3734;
                            _3722 = _4016 + _3735;
                            _3723 = _4017 + _3736;
                            if (_3741 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3741;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3726;
                        frontier_phi_82_pred_1 = _3725;
                        frontier_phi_82_pred_2 = _3724;
                        frontier_phi_82_pred_3 = _3723;
                        frontier_phi_82_pred_4 = _3722;
                        frontier_phi_82_pred_5 = _3721;
                    }
                    _3364 = frontier_phi_82_pred;
                    _3362 = frontier_phi_82_pred_1;
                    _3360 = frontier_phi_82_pred_2;
                    _3358 = frontier_phi_82_pred_3;
                    _3356 = frontier_phi_82_pred_4;
                    _3354 = frontier_phi_82_pred_5;
                    uint _3520 = _3519 + 1u;
                    if (_3520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3513 = _3354;
                        _3514 = _3356;
                        _3515 = _3358;
                        _3516 = _3360;
                        _3517 = _3362;
                        _3518 = _3364;
                        _3519 = _3520;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3360;
                frontier_phi_63_64_ladder_1 = _3364;
                frontier_phi_63_64_ladder_2 = _3362;
                frontier_phi_63_64_ladder_3 = _3358;
                frontier_phi_63_64_ladder_4 = _3356;
                frontier_phi_63_64_ladder_5 = _3354;
            }
            else
            {
                frontier_phi_63_64_ladder = _3230;
                frontier_phi_63_64_ladder_1 = _3234;
                frontier_phi_63_64_ladder_2 = _3232;
                frontier_phi_63_64_ladder_3 = _3228;
                frontier_phi_63_64_ladder_4 = _3226;
                frontier_phi_63_64_ladder_5 = _3224;
            }
            _3353 = frontier_phi_63_64_ladder_5;
            _3355 = frontier_phi_63_64_ladder_4;
            _3357 = frontier_phi_63_64_ladder_3;
            _3359 = frontier_phi_63_64_ladder;
            _3361 = frontier_phi_63_64_ladder_2;
            _3363 = frontier_phi_63_64_ladder_1;
        }
        float _3368 = isnan(1.0) ? _1075 : (isnan(_1075) ? 1.0 : min(_1075, 1.0));
        _3128 = (_3368 * _3359) + _2640;
        _3130 = (_3368 * _3361) + _2642;
        _3132 = (_3368 * _3363) + _2644;
        _3134 = ((_3353 * _1060) * _3368) + _2978;
        _3136 = ((_3355 * _1062) * _3368) + _2980;
        _3138 = ((_3357 * _1063) * _3368) + _2982;
    }
    else
    {
        _3128 = _2640;
        _3130 = _2642;
        _3132 = _2644;
        _3134 = _2978;
        _3136 = _2980;
        _3138 = _2982;
    }
    uint _3144 = _1004 + uint(cbMatDynParam._m0[0u].w);
    float _3150 = cbInstanceData._m0[_3144].x * ((((cbMtdParam._m0[22u].x * _782.x) * cbMtdParam._m0[32u].x) * _803) + _567);
    float _3151 = cbInstanceData._m0[_3144].y * ((((cbMtdParam._m0[22u].y * _782.y) * cbMtdParam._m0[32u].x) * _803) + _568);
    float _3152 = cbInstanceData._m0[_3144].z * ((((cbMtdParam._m0[22u].z * _782.z) * cbMtdParam._m0[32u].x) * _803) + _569);
    float _5218 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
    float _5229 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
    float _5240 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
    float _3169 = (((isnan(1.0) ? _5218 : (isnan(_5218) ? 1.0 : min(_5218, 1.0))) * (_3128 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1075))) + ((_3134 + ((isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + _3150;
    float _3171 = (_3151 + ((_3136 + ((isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5229 : (isnan(_5229) ? 1.0 : min(_5229, 1.0))) * (_3130 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1075)));
    float _3173 = (_3152 + ((_3138 + ((isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0))) * _1904)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5240 : (isnan(_5240) ? 1.0 : min(_5240, 1.0))) * (_3132 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1075)));
    float _3174 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
    float _3175 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
    float _3176 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
    float _3182 = cbMtdParam._m0[2u].x * _3150;
    float _3183 = cbMtdParam._m0[2u].y * _3151;
    float _3184 = cbMtdParam._m0[2u].z * _3152;
    float _5266 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3186 = isnan(1.0) ? _5266 : (isnan(_5266) ? 1.0 : min(_5266, 1.0));
    uint _3187 = _1002 + 6u;
    float _3195 = _947 / cbSceneParam._m0[86u].x;
    float _3196 = _948 / cbSceneParam._m0[86u].y;
    vec4 _3210 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, (log2((isnan(cbSceneParam._m0[77u].w) ? _890 : (isnan(_890) ? cbSceneParam._m0[77u].w : min(_890, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3212 = _3210.x;
    float _3213 = _3210.y;
    float _3214 = _3210.z;
    float _3215 = _3210.w;
    float _3286;
    float _3288;
    float _3290;
    float _3292;
    if (_890 > cbSceneParam._m0[78u].w)
    {
        float _3249 = isnan(_890) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _890 : min(cbSceneParam._m0[80u].w, _890));
        float _3250 = _3249 / _890;
        float _3261 = _3250 * _920;
        float _3262 = _921 * _3250;
        float _3263 = (-0.0) - _3262;
        float _3264 = _3250 * _922;
        float _3266 = (cbSceneParam._m0[77u].w * _3263) / _3249;
        float _3267 = _3266 + cbSceneParam._m0[79u].w;
        float _3268 = cbSceneParam._m0[79u].w - _3262;
        float _3274 = sqrt(((_3261 * _3261) + (_3262 * _3262)) + (_3264 * _3264));
        float _3277 = (1.0 - (cbSceneParam._m0[77u].w / _3249)) * _3274;
        float _3282 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3284 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3470;
        if (abs((_3263 - _3266) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3470 = ((((_3267 > 0.0) ? exp2(_3282 * _3267) : (2.0 - exp2(_3284 * _3267))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3277;
        }
        else
        {
            float _3414 = 1.0 / cbSceneParam._m0[80u].x;
            float _3415 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : max(_3267, _3268));
            float _3416 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : min(_3267, _3268));
            float _3425 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : min(_3415, 0.0));
            float _3426 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : min(_3416, 0.0));
            _3470 = ((abs(_3274 / _3263) * cbSceneParam._m0[80u].y) * ((((_3425 - _3426) * 2.0) - ((exp2(_3282 * (isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0)))) - exp2(_3282 * (isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0))))) * _3414)) - ((exp2(_3284 * _3425) - exp2(_3284 * _3426)) * _3414))) + (_3277 * cbSceneParam._m0[80u].z);
        }
        vec4 _3472 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3195, _3196, 1.0), 0.0);
        float _3481 = exp2((_3470 * (-1.44269502162933349609375)) * (1.0 - _3472.w));
        float _3482 = log2(_3481);
        float _3498 = log2(_3215);
        _3286 = (exp2(_3498 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].x)) * _3472.x) / cbSceneParam._m0[78u].x)) + _3212;
        _3288 = (exp2(_3498 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].y)) * _3472.y) / cbSceneParam._m0[78u].y)) + _3213;
        _3290 = (exp2(_3498 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3482 * cbSceneParam._m0[78u].z)) * _3472.z) / cbSceneParam._m0[78u].z)) + _3214;
        _3292 = _3481 * _3215;
    }
    else
    {
        _3286 = _3212;
        _3288 = _3213;
        _3290 = _3214;
        _3292 = _3215;
    }
    bool _3508;
    vec4 _3302;
    vec4 _3324;
    float _3326;
    float _3330;
    float _3331;
    float _3332;
    float _3335;
    float _3338;
    float _3341;
    float _3342;
    bool _3352;
    for (;;)
    {
        _3302 = cbMatDynParam._m0[0u];
        float _3304 = roundEven(_3302.y);
        bool _3305 = _3304 == 3.0;
        float _3306 = log2(_3292);
        float _3310 = exp2(_3306 * cbSceneParam._m0[78u].x);
        float _3311 = exp2(_3306 * cbSceneParam._m0[78u].y);
        float _3312 = exp2(_3306 * cbSceneParam._m0[78u].z);
        float _3313 = _3310 * _3174;
        float _3314 = _3311 * _3175;
        float _3315 = _3312 * _3176;
        float _3322 = _936 + (-0.5);
        _3324 = cbMtdParam._m0[1u];
        _3326 = _3324.y * _3322;
        float _3329 = (_3304 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3330 = _3329 * (_3305 ? _3313 : (_3313 + (cbSceneParam._m0[72u].w * _3286)));
        _3331 = _3329 * (_3305 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3288)));
        _3332 = _3329 * (_3305 ? _3315 : (_3315 + (cbSceneParam._m0[72u].w * _3290)));
        _3335 = ((_3182 * _3186) * _3310) * _3329;
        _3338 = ((_3183 * _3186) * _3311) * _3329;
        _3341 = ((_3184 * _3186) * _3312) * _3329;
        _3342 = _3322 * 0.999000012874603271484375;
        _3352 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3352)
        {
            if ((cbInstanceData._m0[_1002 + 7u].x + _3342) < 0.5)
            {
                _3508 = true;
                break;
            }
        }
        uint _3449 = _1004 + uint(_3302.w);
        if ((cbInstanceData._m0[_3449].w < 1.0) && ((cbInstanceData._m0[_3449].w + _3342) < 0.5))
        {
            _3508 = true;
            break;
        }
        if ((_3326 + 1.0) < _3324.x)
        {
            _3508 = true;
            break;
        }
        _3508 = false;
        break;
    }
    float _3712;
    if (_3508)
    {
        discard_state = true;
        _3712 = 0.0;
    }
    else
    {
        _3712 = cbInstanceData._m0[_3187].w;
    }
    SV_Target.x = _3330;
    SV_Target.y = _3331;
    SV_Target.z = _3332;
    SV_Target.w = _3712;
    SV_Target_1.x = _3335;
    SV_Target_1.y = _3338;
    SV_Target_1.z = _3341;
    SV_Target_1.w = cbInstanceData._m0[_3187].w;
    discard_exit();
}


