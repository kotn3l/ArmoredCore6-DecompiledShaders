#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[41];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1430;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _228 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _229 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _230 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _236 = inversesqrt(dot(vec3(_228, _229, _230), vec3(_228, _229, _230)));
    float _243 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _250 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = cbMtdParam._m0[33u].y + TEXCOORD.y;
    vec4 _279 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (_265 * cbTextureTilingScale._m0[10u].y) + cbTextureTilingScale._m0[10u].w));
    float _286 = log2(0.0);
    float _288 = exp2(_286 * cbMtdParam._m0[31u].z);
    float _292 = _288 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.x) * _288);
    float _293 = _288 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.y) * _288);
    float _294 = _288 - ((cbMtdParam._m0[31u].x * TEXCOORD_5.z) * _288);
    float _295 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _296 = isnan(0.0) ? _293 : (isnan(_293) ? 0.0 : max(_293, 0.0));
    float _297 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _298 = isnan(1.0) ? _295 : (isnan(_295) ? 1.0 : min(_295, 1.0));
    float _300 = isnan(1.0) ? _296 : (isnan(_296) ? 1.0 : min(_296, 1.0));
    float _301 = isnan(1.0) ? _297 : (isnan(_297) ? 1.0 : min(_297, 1.0));
    vec4 _317 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * _265) + cbTextureTilingScale._m0[0u].w));
    float _321 = _317.z;
    float _322 = _317.w;
    float _323 = 1.0 - _322;
    float _330 = exp2(log2((1.0 - (_323 * _321)) * cbMtdParam._m0[34u].y) * cbMtdParam._m0[34u].z);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    float _344 = exp2(log2(cbMtdParam._m0[35u].x * (1.0 - ((_323 * _323) * _321))) * cbMtdParam._m0[34u].w);
    float _345 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    vec4 _359 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -3.0);
    float _362 = _359.y;
    float _365 = (_362 * ((isnan(1.0) ? _345 : (isnan(_345) ? 1.0 : min(_345, 1.0))) - _322)) + _322;
    vec4 _377 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _389 = (_359.x + (-0.02500000037252902984619140625)) * 8.0;
    float _391 = roundEven(_389);
    float _392 = cbMtdParam._m0[10u].x * _377.x;
    float _393 = cbMtdParam._m0[10u].y * _377.y;
    float _394 = cbMtdParam._m0[10u].z * _377.z;
    vec4 _406 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _426 = (((cbMtdParam._m0[9u].x * _406.x) - _392) * _365) + _392;
    float _427 = (((cbMtdParam._m0[9u].y * _406.y) - _393) * _365) + _393;
    float _428 = (((cbMtdParam._m0[9u].z * _406.z) - _394) * _365) + _394;
    vec4 _440 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    float _460 = (((cbMtdParam._m0[20u].x * _440.x) - _426) * _332) + _426;
    float _461 = (((cbMtdParam._m0[20u].y * _440.y) - _427) * _332) + _427;
    float _462 = (((cbMtdParam._m0[20u].z * _440.z) - _428) * _332) + _428;
    vec4 _475 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _265) + cbTextureTilingScale._m0[7u].w));
    float _201[6];
    float _202[6];
    float _203[6];
    _201[0u] = cbMtdParam._m0[24u].x;
    _202[0u] = cbMtdParam._m0[24u].y;
    _203[0u] = cbMtdParam._m0[24u].z;
    _201[1u] = cbMtdParam._m0[25u].x;
    _202[1u] = cbMtdParam._m0[25u].y;
    _203[1u] = cbMtdParam._m0[25u].z;
    _201[2u] = cbMtdParam._m0[26u].x;
    _202[2u] = cbMtdParam._m0[26u].y;
    _203[2u] = cbMtdParam._m0[26u].z;
    _201[3u] = cbMtdParam._m0[27u].x;
    _202[3u] = cbMtdParam._m0[27u].y;
    _203[3u] = cbMtdParam._m0[27u].z;
    _201[4u] = cbMtdParam._m0[28u].x;
    _202[4u] = cbMtdParam._m0[28u].y;
    _203[4u] = cbMtdParam._m0[28u].z;
    _201[5u] = cbMtdParam._m0[29u].x;
    _202[5u] = cbMtdParam._m0[29u].y;
    _203[5u] = cbMtdParam._m0[29u].z;
    float _558 = isnan(0.0) ? _391 : (isnan(_391) ? 0.0 : max(_391, 0.0));
    uint _561 = uint(int(isnan(5.0) ? _558 : (isnan(_558) ? 5.0 : min(_558, 5.0))));
    float _568 = _201[_561] * _362;
    float _569 = _202[_561] * _362;
    float _570 = _203[_561] * _362;
    float _571 = _568 + ((_279.x * 4.5) * ((((cbMtdParam._m0[30u].x * _475.x) - _460) * _298) + _460));
    float _572 = _569 + ((_279.y * 4.5) * ((((cbMtdParam._m0[30u].y * _475.y) - _461) * _300) + _461));
    float _573 = _570 + ((_279.z * 4.5) * ((((cbMtdParam._m0[30u].z * _475.z) - _462) * _301) + _462));
    float _196[5];
    float _197[5];
    _196[0u] = cbMtdParam._m0[35u].y;
    _197[0u] = cbMtdParam._m0[35u].z;
    _196[1u] = cbMtdParam._m0[36u].w;
    _197[1u] = cbMtdParam._m0[37u].x;
    _196[2u] = cbMtdParam._m0[37u].y;
    _197[2u] = cbMtdParam._m0[37u].z;
    _196[3u] = cbMtdParam._m0[37u].w;
    _197[3u] = cbMtdParam._m0[38u].x;
    _196[4u] = cbMtdParam._m0[38u].y;
    _197[4u] = cbMtdParam._m0[38u].z;
    float _604 = roundEven(5.0 - _389);
    float _605 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _606 = isnan(4.0) ? _605 : (isnan(_605) ? 4.0 : min(_605, 4.0));
    float _608 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    uint _610 = uint(int(isnan(4.0) ? _608 : (isnan(_608) ? 4.0 : min(_608, 4.0))));
    float _622 = ((cbMtdParam._m0[39u].z - _197[_610]) * _365) + _197[_610];
    float _630 = ((cbMtdParam._m0[40u].x - _622) * _332) + _622;
    float _635 = ((cbMtdParam._m0[40u].z - _630) * _298) + _630;
    vec4 _649 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * _265) + cbTextureTilingScale._m0[8u].w));
    float _651 = _649.x;
    float _652 = _649.y;
    float _654 = _649.z + _196[_610];
    vec4 _666 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w));
    float _674 = (((cbMtdParam._m0[39u].y - _654) + _666.z) * _365) + _654;
    vec4 _687 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _695 = (((cbMtdParam._m0[39u].w - _674) + _687.z) * _332) + _674;
    float _701 = ((((_321 * 2.0) * _695) - _695) * cbMtdParam._m0[33u].w) + _695;
    vec4 _714 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _265) + cbTextureTilingScale._m0[12u].w));
    float _722 = (((_714.z + cbMtdParam._m0[40u].y) - _701) * _301) + _701;
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _753 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _780 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[36u].y * ((_749 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[32u].w)) + ((cbMtdParam._m0[35u].w * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, ((((cbMtdParam._m0[36u].x * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[36u].z * ((_753 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[32u].w))) * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _795 = (-0.0) - ((_753 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].z);
    float _799 = (_753 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].z;
    float _800 = isnan(_799) ? _795 : (isnan(_795) ? _799 : min(_795, _799));
    float _4159 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _801 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
    float _824 = ((_666.x - _651) * _365) + _651;
    float _825 = ((_666.y - _652) * _365) + _652;
    float _830 = ((_687.x - _824) * _332) + _824;
    float _831 = ((_687.y - _825) * _332) + _825;
    float _840 = ((((_714.x - _830) * _298) + _830) * 2.0) + (-1.0);
    float _841 = ((((_714.y - _831) * _300) + _831) * 2.0) + (-1.0);
    float _842 = dot(vec2(_840, _841), vec2(_840, _841));
    float _4170 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _847 = sqrt(1.0 - (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))));
    float _850 = (cbMtdParam._m0[34u].x * ((_317.x * 2.0) + (-1.0))) + _840;
    float _851 = (cbMtdParam._m0[34u].x * ((_317.y * 2.0) + (-1.0))) + _841;
    float _854 = fma(_847, _243 * NORMAL.x, fma(_851, _250 * TANGENT.x, (_236 * _228) * _850));
    float _857 = fma(_847, _243 * NORMAL.y, fma(_851, _250 * TANGENT.y, (_236 * _229) * _850));
    float _860 = fma(_847, _243 * NORMAL.z, fma(_851, _250 * TANGENT.z, (_236 * _230) * _850));
    float _864 = inversesqrt(dot(vec3(_854, _857, _860), vec3(_854, _857, _860)));
    float _865 = _864 * _854;
    float _866 = _864 * _857;
    float _867 = _864 * _860;
    float _4181 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _868 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _4192 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _4203 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _4214 = isnan(0.0) ? _573 : (isnan(_573) ? 0.0 : max(_573, 0.0));
    float _4225 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _872 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _888 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _918 = cbSceneParam._m0[71u].x - (_749 / _908);
    float _919 = cbSceneParam._m0[71u].y - (_753 / _908);
    float _920 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _908);
    float _924 = inversesqrt(dot(vec3(_918, _919, _920), vec3(_918, _919, _920)));
    float _925 = _918 * _924;
    float _926 = _919 * _924;
    float _927 = _920 * _924;
    float _933 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _934 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _936 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _938 = _936.w;
    float _956 = fma(_867, cbSceneParam._m0[5u].z, fma(_866, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _865));
    float _959 = fma(_867, cbSceneParam._m0[6u].z, fma(_866, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _865));
    float _962 = fma(_867, cbSceneParam._m0[7u].z, fma(_866, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _865));
    vec4 _964 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _975 = (((_964.y - _868) + (_964.w * _868)) * cbMtdParam._m0[3u].x) + _868;
    uint _988 = uint(roundEven(NORMAL.w)) * 13u;
    uint _990 = _988 + 9u;
    uint _991 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _997 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0)))) * cbInstanceData._m0[_991].x;
    float _998 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0)))) * cbInstanceData._m0[_991].y;
    float _999 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0)))) * cbInstanceData._m0[_991].z;
    float _4236 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _1000 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _4247 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
    float _1001 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _4258 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _1002 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    vec4 _1003 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1008 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1019 = (((_1008.x - _872) + (_1008.w * _872)) * cbMtdParam._m0[3u].x) + _872;
    float _1032 = (cbMtdParam._m0[3u].x * (((_1000 * _938) - _1000) + _1003.x)) + _1000;
    float _1033 = (cbMtdParam._m0[3u].x * (((_1001 * _938) - _1001) + _1003.y)) + _1001;
    float _1034 = (cbMtdParam._m0[3u].x * (((_1002 * _938) - _1002) + _1003.z)) + _1002;
    float _1035 = 1.0 - _1019;
    float _1036 = _1035 * _1032;
    float _1037 = _1035 * _1033;
    float _1038 = _1035 * _1034;
    float _1043 = (_1032 + (-0.039999999105930328369140625)) * _1019;
    float _1044 = (_1033 + (-0.039999999105930328369140625)) * _1019;
    float _1045 = (_1034 + (-0.039999999105930328369140625)) * _1019;
    float _1046 = _1043 + 0.039999999105930328369140625;
    float _1048 = _1044 + 0.039999999105930328369140625;
    float _1049 = _1045 + 0.039999999105930328369140625;
    vec4 _1058 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _933, cbSceneParam._m0[86u].y * _934));
    float _1061 = _1058.x * TEXCOORD_5.w;
    float _1062 = dot(vec3(_865, _866, _867), vec3(_925, _926, _927));
    float _1065 = _1062 * 2.0;
    float _1069 = (_1065 * _865) - _925;
    float _1070 = (_1065 * _866) - _926;
    float _1071 = (_1065 * _867) - _927;
    float _1075 = abs(dot(vec3(_925, _926, _927), vec3(_865, _866, _867)));
    float _4269 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
    float _1077 = sqrt(_975);
    float _1088 = exp2((_1077 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1077 * 3.0));
    float _1094 = (1.0 - _1088) * ((_1077 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1095 = _1088 * _1077;
    float _1123 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1127 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1131 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1429;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1156 = fma(_1131, cbModelParam._m0[26u].z, fma(_1127, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1123));
        float _1160 = fma(_1131, cbModelParam._m0[27u].z, fma(_1127, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1123));
        float _1164 = fma(_1131, cbModelParam._m0[28u].z, fma(_1127, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1123));
        float _1188 = _1123 + _865;
        float _1189 = _1127 + _866;
        float _1190 = _1131 + _867;
        float _1200 = fma(_1190, cbModelParam._m0[26u].z, fma(_1189, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1188)) - _1156;
        float _1201 = fma(_1190, cbModelParam._m0[27u].z, fma(_1189, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1188)) - _1160;
        float _1202 = fma(_1190, cbModelParam._m0[28u].z, fma(_1189, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1188)) - _1164;
        float _1206 = inversesqrt(dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202)));
        float _1218 = ((_1206 * _1200) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1156 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1206 * _1201) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1160 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1206 * _1202) / cbModelParam._m0[34u].z) + ((((((_1164 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1223 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1257 = exp2((_1223.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1223.x + (-0.5));
        float _1259 = _1257 * (_1223.y + (-0.5));
        float _1260 = _1257 * (_1223.z + (-0.5));
        float _1267 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1230.x + (-0.5));
        float _1269 = _1267 * (_1230.y + (-0.5));
        float _1270 = _1267 * (_1230.z + (-0.5));
        float _1277 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1278 = _1277 * (_1237.x + (-0.5));
        float _1279 = _1277 * (_1237.y + (-0.5));
        float _1280 = _1277 * (_1237.z + (-0.5));
        float _1287 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1288 = _1287 * (_1244.x + (-0.5));
        float _1289 = _1287 * (_1244.y + (-0.5));
        float _1290 = _1287 * (_1244.z + (-0.5));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1293 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1294 = _1258 * 0.5;
        float _1295 = _1268 * 0.5;
        float _1296 = _1278 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1311 = (dot(vec3(_865, _866, _867), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _4295 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1321 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4306 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _4317 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_1323 + 1.0))) + _1328) * _1291;
        float _1338 = _1259 * 0.5;
        float _1339 = _1269 * 0.5;
        float _1340 = _1279 * 0.5;
        float _1341 = dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340));
        float _1346 = (_1341 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1341);
        float _1354 = (dot(vec3(_865, _866, _867), vec3(_1346 * _1338, _1346 * _1339, _1346 * _1340)) + 1.0) * 0.5;
        float _4328 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1363 = sqrt(((_1339 * _1339) + (_1338 * _1338)) + (_1340 * _1340)) / (_1292 + 9.9999997473787516355514526367188e-06);
        float _4339 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1364 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
        float _1365 = _1364 * 2.0;
        float _1369 = (1.0 - _1364) / (_1364 + 1.0);
        float _4350 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1379 = ((((1.0 - _1370) * (_1365 + 2.0)) * exp2(log2(isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_1365 + 1.0))) + _1370) * _1292;
        float _1380 = _1260 * 0.5;
        float _1381 = _1270 * 0.5;
        float _1382 = _1280 * 0.5;
        float _1383 = dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382));
        float _1388 = (_1383 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1383);
        float _1396 = (dot(vec3(_865, _866, _867), vec3(_1388 * _1380, _1388 * _1381, _1388 * _1382)) + 1.0) * 0.5;
        float _4361 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1405 = sqrt(((_1381 * _1381) + (_1380 * _1380)) + (_1382 * _1382)) / (_1293 + 9.9999997473787516355514526367188e-06);
        float _4372 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1406 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _1407 = _1406 * 2.0;
        float _1411 = (1.0 - _1406) / (_1406 + 1.0);
        float _4383 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1421 = ((((1.0 - _1412) * (_1407 + 2.0)) * exp2(log2(isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_1407 + 1.0))) + _1412) * _1293;
        _1429 = _1260;
        _1431 = _1259;
        _1432 = _1258;
        _1433 = _1270;
        _1434 = _1269;
        _1435 = _1268;
        _1436 = _1280;
        _1437 = _1279;
        _1438 = _1278;
        _1439 = _1293;
        _1440 = _1292;
        _1441 = _1291;
        _1442 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
        _1443 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)));
        _1444 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)));
    }
    else
    {
        _1429 = _1430;
        _1431 = _1430;
        _1432 = _1430;
        _1433 = _1430;
        _1434 = _1430;
        _1435 = _1430;
        _1436 = _1430;
        _1437 = _1430;
        _1438 = _1430;
        _1439 = _1430;
        _1440 = _1430;
        _1441 = _1430;
        _1442 = 0.0;
        _1443 = 0.0;
        _1444 = 0.0;
    }
    float _1734;
    float _1735;
    float _1736;
    float _1737;
    float _1738;
    float _1739;
    float _1740;
    float _1741;
    float _1742;
    float _1743;
    float _1744;
    float _1745;
    float _1746;
    float _1747;
    float _1748;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1467 = fma(_1131, cbModelParam._m0[30u].z, fma(_1127, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1123));
        float _1471 = fma(_1131, cbModelParam._m0[31u].z, fma(_1127, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1123));
        float _1475 = fma(_1131, cbModelParam._m0[32u].z, fma(_1127, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1123));
        float _1497 = _1123 + _865;
        float _1498 = _1127 + _866;
        float _1499 = _1131 + _867;
        float _1509 = fma(_1499, cbModelParam._m0[30u].z, fma(_1498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1497)) - _1467;
        float _1510 = fma(_1499, cbModelParam._m0[31u].z, fma(_1498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1497)) - _1471;
        float _1511 = fma(_1499, cbModelParam._m0[32u].z, fma(_1498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1497)) - _1475;
        float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
        float _1527 = ((_1515 * _1509) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1467 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1528 = ((_1515 * _1510) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1471 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1529 = ((_1515 * _1511) / cbModelParam._m0[35u].z) + ((((((_1475 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1538 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1527, _1528, _1529), 0.0);
        float _1564 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1565 = _1564 * (_1531.x + (-0.5));
        float _1566 = _1564 * (_1531.y + (-0.5));
        float _1567 = _1564 * (_1531.z + (-0.5));
        float _1574 = exp2((_1538.w + (-0.5)) * 20.0) * 2.0;
        float _1575 = _1574 * (_1538.x + (-0.5));
        float _1576 = _1574 * (_1538.y + (-0.5));
        float _1577 = _1574 * (_1538.z + (-0.5));
        float _1584 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1585 = _1584 * (_1545.x + (-0.5));
        float _1586 = _1584 * (_1545.y + (-0.5));
        float _1587 = _1584 * (_1545.z + (-0.5));
        float _1594 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1595 = _1594 * (_1552.x + (-0.5));
        float _1596 = _1594 * (_1552.y + (-0.5));
        float _1597 = _1594 * (_1552.z + (-0.5));
        float _1598 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1599 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1600 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1601 = _1565 * 0.5;
        float _1602 = _1575 * 0.5;
        float _1603 = _1585 * 0.5;
        float _1604 = dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603));
        float _1609 = (_1604 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1604);
        float _1617 = (dot(vec3(_865, _866, _867), vec3(_1609 * _1601, _1609 * _1602, _1609 * _1603)) + 1.0) * 0.5;
        float _4424 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1626 = sqrt(((_1602 * _1602) + (_1601 * _1601)) + (_1603 * _1603)) / (_1598 + 9.9999997473787516355514526367188e-06);
        float _4435 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
        float _1628 = _1627 * 2.0;
        float _1632 = (1.0 - _1627) / (_1627 + 1.0);
        float _4446 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1633 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1642 = ((((1.0 - _1633) * (_1628 + 2.0)) * exp2(log2(isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0))) * (_1628 + 1.0))) + _1633) * _1598;
        float _1643 = _1566 * 0.5;
        float _1644 = _1576 * 0.5;
        float _1645 = _1586 * 0.5;
        float _1646 = dot(vec3(_1643, _1644, _1645), vec3(_1643, _1644, _1645));
        float _1651 = (_1646 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1646);
        float _1659 = (dot(vec3(_865, _866, _867), vec3(_1651 * _1643, _1651 * _1644, _1651 * _1645)) + 1.0) * 0.5;
        float _4457 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1668 = sqrt(((_1644 * _1644) + (_1643 * _1643)) + (_1645 * _1645)) / (_1599 + 9.9999997473787516355514526367188e-06);
        float _4468 = isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0));
        float _1669 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
        float _1670 = _1669 * 2.0;
        float _1674 = (1.0 - _1669) / (_1669 + 1.0);
        float _4479 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1684 = ((((1.0 - _1675) * (_1670 + 2.0)) * exp2(log2(isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) * (_1670 + 1.0))) + _1675) * _1599;
        float _1685 = _1567 * 0.5;
        float _1686 = _1577 * 0.5;
        float _1687 = _1587 * 0.5;
        float _1688 = dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687));
        float _1693 = (_1688 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1688);
        float _1701 = (dot(vec3(_865, _866, _867), vec3(_1693 * _1685, _1693 * _1686, _1693 * _1687)) + 1.0) * 0.5;
        float _4490 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
        float _1710 = sqrt(((_1686 * _1686) + (_1685 * _1685)) + (_1687 * _1687)) / (_1600 + 9.9999997473787516355514526367188e-06);
        float _4501 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
        float _1712 = _1711 * 2.0;
        float _1716 = (1.0 - _1711) / (_1711 + 1.0);
        float _4512 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _1726 = ((((1.0 - _1717) * (_1712 + 2.0)) * exp2(log2(isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_1712 + 1.0))) + _1717) * _1600;
        _1734 = _1567;
        _1735 = _1566;
        _1736 = _1565;
        _1737 = _1577;
        _1738 = _1576;
        _1739 = _1575;
        _1740 = _1587;
        _1741 = _1586;
        _1742 = _1585;
        _1743 = _1600;
        _1744 = _1599;
        _1745 = _1598;
        _1746 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
        _1747 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0)));
        _1748 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0)));
    }
    else
    {
        _1734 = _1430;
        _1735 = _1430;
        _1736 = _1430;
        _1737 = _1430;
        _1738 = _1430;
        _1739 = _1430;
        _1740 = _1430;
        _1741 = _1430;
        _1742 = _1430;
        _1743 = _1430;
        _1744 = _1430;
        _1745 = _1430;
        _1746 = 0.0;
        _1747 = 0.0;
        _1748 = 0.0;
    }
    float _1758 = (cbModelParam._m0[1u].x * (_1746 - _1442)) + _1442;
    float _1759 = (cbModelParam._m0[1u].x * (_1747 - _1443)) + _1443;
    float _1760 = (cbModelParam._m0[1u].x * (_1748 - _1444)) + _1444;
    float _1781 = fma(_1760, cbSceneParam._m0[89u].z, fma(_1759, cbSceneParam._m0[89u].y, _1758 * cbSceneParam._m0[89u].x));
    float _1784 = fma(_1760, cbSceneParam._m0[90u].z, fma(_1759, cbSceneParam._m0[90u].y, _1758 * cbSceneParam._m0[90u].x));
    float _1787 = fma(_1760, cbSceneParam._m0[91u].z, fma(_1759, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1758));
    float _1800 = _1069 * 0.5;
    float _1801 = _1070 * 0.5;
    float _1802 = _1071 * 0.5;
    float _1803 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1736, _1739, _1742, _1745));
    float _1806 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1735, _1738, _1741, _1744));
    float _1809 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1734, _1737, _1740, _1743));
    float _1843;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1816 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1429, _1433, _1436, _1439));
        float _1820 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1431, _1434, _1437, _1440));
        float _1824 = dot(vec4(_1800, _1801, _1802, 1.0), vec4(_1432, _1435, _1438, _1441));
        float _1831 = dot(vec4(cbModelParam._m0[39u]), vec4(_1800, _1801, _1802, 1.0));
        _1843 = dot(vec3(isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0)), isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)), isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1831) ? 0.0 : (isnan(0.0) ? _1831 : max(0.0, _1831))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1843 = 1.0;
    }
    float _1854;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1845 = dot(vec4(cbModelParam._m0[40u]), vec4(_1800, _1801, _1802, 1.0));
        _1854 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)), isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1845) ? 0.0 : (isnan(0.0) ? _1845 : max(0.0, _1845))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1854 = 1.0;
    }
    float _1858 = (_1854 * cbModelParam._m0[1u].x) + (_1843 * (1.0 - cbModelParam._m0[1u].x));
    float _1868 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _975);
    float _1869 = isnan(_1868) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1868 : min(cbModelParam._m0[25u].z, _1868));
    float _1951;
    float _1953;
    float _1955;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1918 = fma(_1131, cbModelParam._m0[13u].z, fma(_1127, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1123)) + cbModelParam._m0[13u].w;
        float _1922 = fma(_1131, cbModelParam._m0[14u].z, fma(_1127, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1123)) + cbModelParam._m0[14u].w;
        float _1926 = fma(_1131, cbModelParam._m0[15u].z, fma(_1127, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1123)) + cbModelParam._m0[15u].w;
        float _1929 = fma(_1071, cbModelParam._m0[13u].z, fma(_1070, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1069));
        float _1932 = fma(_1071, cbModelParam._m0[14u].z, fma(_1070, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1069));
        float _1935 = fma(_1071, cbModelParam._m0[15u].z, fma(_1070, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1069));
        float _1963;
        if (_1929 > 0.0)
        {
            _1963 = abs((1.0 - _1918) / _1929);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1929 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1918 + 1.0) / _1929);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1963 = frontier_phi_14_12_ladder;
        }
        float _2137;
        if (_1932 > 0.0)
        {
            _2137 = abs((1.0 - _1922) / _1932);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1932 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1922 + 1.0) / _1932);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2137 = frontier_phi_23_19_ladder;
        }
        float _2431;
        if (_1935 > 0.0)
        {
            _2431 = abs((1.0 - _1926) / _1935);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1935 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1926 + 1.0) / _1935);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2431 = frontier_phi_35_30_ladder;
        }
        float _2433 = isnan(_2137) ? _1963 : (isnan(_1963) ? _2137 : min(_1963, _2137));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1929) + _1918;
        float _2439 = (_2434 * _1932) + _1922;
        float _2440 = (_2434 * _1935) + _1926;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2443 = (-1.0) - _2441;
        float _2445 = _2441 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2440 > _2445) || ((_2440 < _2443) || ((_2439 > _2445) || ((_2439 < _2443) || ((_2438 < _2443) || (_2438 > _2445))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2585 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2440, cbModelParam._m0[9u].z, fma(_2439, cbModelParam._m0[9u].y, _2438 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2440, cbModelParam._m0[10u].z, fma(_2439, cbModelParam._m0[10u].y, _2438 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2440, cbModelParam._m0[11u].z, fma(_2439, cbModelParam._m0[11u].y, _2438 * cbModelParam._m0[11u].x))), _1869);
            frontier_phi_13_35_ladder = _2585.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2585.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2585.x * cbModelParam._m0[1u].y;
        }
        _1951 = frontier_phi_13_35_ladder_2;
        _1953 = frontier_phi_13_35_ladder_1;
        _1955 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1939 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1069, _1070, _1071), _1869);
        _1951 = _1939.x * cbModelParam._m0[1u].y;
        _1953 = _1939.y * cbModelParam._m0[1u].y;
        _1955 = _1939.z * cbModelParam._m0[1u].y;
    }
    float _1959 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _975);
    float _1960 = isnan(_1959) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1959 : min(cbModelParam._m0[25u].w, _1959));
    float _2052;
    float _2054;
    float _2056;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2016 = fma(_1131, cbModelParam._m0[21u].z, fma(_1127, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1123)) + cbModelParam._m0[21u].w;
        float _2020 = fma(_1131, cbModelParam._m0[22u].z, fma(_1127, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1123)) + cbModelParam._m0[22u].w;
        float _2024 = fma(_1131, cbModelParam._m0[23u].z, fma(_1127, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1123)) + cbModelParam._m0[23u].w;
        float _2027 = fma(_1071, cbModelParam._m0[21u].z, fma(_1070, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1069));
        float _2030 = fma(_1071, cbModelParam._m0[22u].z, fma(_1070, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1069));
        float _2033 = fma(_1071, cbModelParam._m0[23u].z, fma(_1070, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1069));
        float _2142;
        if (_2027 > 0.0)
        {
            _2142 = abs((1.0 - _2016) / _2027);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2016 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2142 = frontier_phi_25_21_ladder;
        }
        float _2458;
        if (_2030 > 0.0)
        {
            _2458 = abs((1.0 - _2020) / _2030);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2030 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2020 + 1.0) / _2030);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2458 = frontier_phi_37_32_ladder;
        }
        float _2796;
        if (_2033 > 0.0)
        {
            _2796 = abs((1.0 - _2024) / _2033);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2033 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2024 + 1.0) / _2033);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2796 = frontier_phi_47_44_ladder;
        }
        float _2798 = isnan(_2458) ? _2142 : (isnan(_2142) ? _2458 : min(_2142, _2458));
        float _2799 = isnan(_2796) ? _2798 : (isnan(_2798) ? _2796 : min(_2798, _2796));
        float _2803 = (_2799 * _2027) + _2016;
        float _2804 = (_2799 * _2030) + _2020;
        float _2805 = (_2799 * _2033) + _2024;
        float _2806 = _2799 * 9.9999997473787516355514526367188e-05;
        float _2807 = (-1.0) - _2806;
        float _2809 = _2806 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2805 > _2809) || ((_2805 < _2807) || ((_2804 > _2809) || ((_2804 < _2807) || ((_2803 < _2807) || (_2803 > _2809))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2927 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2805, cbModelParam._m0[17u].z, fma(_2804, cbModelParam._m0[17u].y, _2803 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2805, cbModelParam._m0[18u].z, fma(_2804, cbModelParam._m0[18u].y, _2803 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2805, cbModelParam._m0[19u].z, fma(_2804, cbModelParam._m0[19u].y, _2803 * cbModelParam._m0[19u].x))), _1960);
            frontier_phi_22_47_ladder = _2927.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2927.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2927.x * cbModelParam._m0[1u].z;
        }
        _2052 = frontier_phi_22_47_ladder_2;
        _2054 = frontier_phi_22_47_ladder_1;
        _2056 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2036 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1069, _1070, _1071), _1960);
        _2052 = _2036.x * cbModelParam._m0[1u].z;
        _2054 = _2036.y * cbModelParam._m0[1u].z;
        _2056 = _2036.z * cbModelParam._m0[1u].z;
    }
    float _2069 = (((_1094 * _1046) + _1095) * _1061) * ((cbModelParam._m0[1u].w * (_2052 - _1951)) + _1951);
    float _2071 = (((_1094 * _1048) + _1095) * _1061) * ((cbModelParam._m0[1u].w * (_2054 - _1953)) + _1953);
    float _2073 = (((_1094 * _1049) + _1095) * _1061) * ((cbModelParam._m0[1u].w * (_2056 - _1955)) + _1955);
    float _2076 = fma(_2073, cbSceneParam._m0[89u].z, fma(_2071, cbSceneParam._m0[89u].y, _2069 * cbSceneParam._m0[89u].x));
    float _2079 = fma(_2073, cbSceneParam._m0[90u].z, fma(_2071, cbSceneParam._m0[90u].y, _2069 * cbSceneParam._m0[90u].x));
    float _2082 = fma(_2073, cbSceneParam._m0[91u].z, fma(_2071, cbSceneParam._m0[91u].y, _2069 * cbSceneParam._m0[91u].x));
    float _2116 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2120 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2124 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2128 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2129 = _2116 / _2128;
    float _2130 = _2120 / _2128;
    float _2131 = _2124 / _2128;
    float _2277;
    float _2278;
    float _2279;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2158 = ((uint(_2131 > cbSceneParam._m0[59u].y) + uint(_2131 > cbSceneParam._m0[59u].x)) + uint(_2131 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2159 = _2158 + 43u;
        uint _2167 = _2158 + 44u;
        uint _2175 = _2158 + 45u;
        uint _2183 = _2158 + 46u;
        float _2194 = fma(_2128, cbSceneParam._m0[_2159].w, fma(_2124, cbSceneParam._m0[_2159].z, fma(_2120, cbSceneParam._m0[_2159].y, _2116 * cbSceneParam._m0[_2159].x)));
        float _2198 = fma(_2128, cbSceneParam._m0[_2167].w, fma(_2124, cbSceneParam._m0[_2167].z, fma(_2120, cbSceneParam._m0[_2167].y, _2116 * cbSceneParam._m0[_2167].x)));
        float _2206 = fma(_2128, cbSceneParam._m0[_2183].w, fma(_2124, cbSceneParam._m0[_2183].z, fma(_2120, cbSceneParam._m0[_2183].y, _2116 * cbSceneParam._m0[_2183].x)));
        float _2210 = cbSceneParam._m0[33u].z * _2206;
        float _2212 = cbSceneParam._m0[33u].w * _2206;
        float _2215 = fma(_2128, cbSceneParam._m0[_2175].w, fma(_2124, cbSceneParam._m0[_2175].z, fma(_2120, cbSceneParam._m0[_2175].y, _2116 * cbSceneParam._m0[_2175].x))) / _2206;
        float _2263 = (cbSceneParam._m0[33u].x - sqrt(((_2130 * _2130) + (_2129 * _2129)) + (_2131 * _2131))) * cbSceneParam._m0[33u].y;
        float _4638 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2270 = (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2210 + _2194) / _2206, (_2212 + _2198) / _2206), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2212 + _2194) / _2206, (_2198 - _2210) / _2206), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 - _2210) / _2206, (_2198 - _2212) / _2206), _2215), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2194 - _2212) / _2206, (_2210 + _2198) / _2206), _2215), 0.0)).x), vec4(0.25)));
        _2277 = 1.0 - (_2270 * cbSceneParam._m0[34u].x);
        _2278 = 1.0 - (_2270 * cbSceneParam._m0[34u].y);
        _2279 = 1.0 - (_2270 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2277 = 1.0;
        _2278 = 1.0;
        _2279 = 1.0;
    }
    float _2343;
    float _2345;
    float _2347;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2331 = fma(_2128, cbSceneParam._m0[63u].w, fma(_2124, cbSceneParam._m0[63u].z, fma(_2120, cbSceneParam._m0[63u].y, _2116 * cbSceneParam._m0[63u].x)));
        float _2332 = fma(_2128, cbSceneParam._m0[60u].w, fma(_2124, cbSceneParam._m0[60u].z, fma(_2120, cbSceneParam._m0[60u].y, _2116 * cbSceneParam._m0[60u].x))) / _2331;
        float _2333 = fma(_2128, cbSceneParam._m0[61u].w, fma(_2124, cbSceneParam._m0[61u].z, fma(_2120, cbSceneParam._m0[61u].y, _2116 * cbSceneParam._m0[61u].x))) / _2331;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2332 >= cbSceneParam._m0[64u].x) && (_2333 >= cbSceneParam._m0[64u].y)) && (_2332 <= cbSceneParam._m0[64u].z)) && (_2333 <= cbSceneParam._m0[64u].w))
        {
            float _2471 = fma(_2128, cbSceneParam._m0[62u].w, fma(_2124, cbSceneParam._m0[62u].z, fma(_2120, cbSceneParam._m0[62u].y, _2116 * cbSceneParam._m0[62u].x))) / _2331;
            float _2475 = isnan(cbSceneParam._m0[41u].w) ? _2471 : (isnan(_2471) ? cbSceneParam._m0[41u].w : max(_2471, cbSceneParam._m0[41u].w));
            float _2518 = (cbSceneParam._m0[33u].x - sqrt(((_2130 * _2130) + (_2129 * _2129)) + (_2131 * _2131))) * cbSceneParam._m0[33u].y;
            float _4654 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
            float _2525 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2332, cbSceneParam._m0[33u].w + _2333), _2475), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2332, _2333 - cbSceneParam._m0[33u].z), _2475), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2332 - cbSceneParam._m0[33u].z, _2333 - cbSceneParam._m0[33u].w), _2475), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2332 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2333), _2475), 0.0)).x), vec4(0.25)));
            float _2529 = 1.0 - (_2525 * cbSceneParam._m0[34u].x);
            float _2530 = 1.0 - (_2525 * cbSceneParam._m0[34u].y);
            float _2531 = 1.0 - (_2525 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2531) ? _2279 : (isnan(_2279) ? _2531 : min(_2279, _2531));
            frontier_phi_34_33_ladder_1 = isnan(_2530) ? _2278 : (isnan(_2278) ? _2530 : min(_2278, _2530));
            frontier_phi_34_33_ladder_2 = isnan(_2529) ? _2277 : (isnan(_2277) ? _2529 : min(_2277, _2529));
        }
        else
        {
            frontier_phi_34_33_ladder = _2279;
            frontier_phi_34_33_ladder_1 = _2278;
            frontier_phi_34_33_ladder_2 = _2277;
        }
        _2343 = frontier_phi_34_33_ladder_2;
        _2345 = frontier_phi_34_33_ladder_1;
        _2347 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2343 = _2277;
        _2345 = _2278;
        _2347 = _2279;
    }
    uvec4 _2352 = floatBitsToUint(cbInstanceData._m0[_988 + 5u]);
    uint _2354 = _2352.x * 14u;
    uint _2355 = _2354 + 13u;
    float _2362 = _1061 + (-1.0);
    float _2367 = (cbLight._m0[_2355].x * _2362) + 1.0;
    float _2368 = (cbLight._m0[_2355].y * _2362) + 1.0;
    float _2369 = (cbLight._m0[_2355].z * _2362) + 1.0;
    float _2370 = (cbLight._m0[_2355].w * _2362) + 1.0;
    uint _2371 = _2354 + 5u;
    float _2377 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
    uint _2381 = _2354 + 4u;
    float _2390 = isnan(1.0) ? _2367 : (isnan(_2367) ? 1.0 : min(_2367, 1.0));
    uint _2394 = _2354 | 1u;
    float _2405 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_865, _866, _867));
    float _2408 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_865, _866, _867));
    float _4690 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
    float _4701 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
    float _2413 = (isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0))) * 0.3183098733425140380859375;
    float _2415 = (isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 0.3183098733425140380859375;
    float _2422 = ((cbLight._m0[_2371].x * _2377) * _2415) + (((cbLight._m0[_2381].x * _2343) * _2390) * _2413);
    float _2423 = ((_2377 * cbLight._m0[_2371].y) * _2415) + (((cbLight._m0[_2381].y * _2345) * _2390) * _2413);
    float _2424 = ((_2377 * cbLight._m0[_2371].z) * _2415) + (((cbLight._m0[_2381].z * _2347) * _2390) * _2413);
    uvec4 _2428 = floatBitsToUint(cbLight._m0[_2354 + 12u]);
    bool _2430 = _2428.x == 0u;
    float _2532;
    float _2534;
    float _2536;
    if (_2430)
    {
        _2532 = _2422;
        _2534 = _2423;
        _2536 = _2424;
    }
    else
    {
        uint _2540 = _2354 + 6u;
        float _2556 = (dot(vec3(cbLight._m0[_2354 + 2u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2557 = _2556 * _2556;
        float _4712 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2558 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
        float _2559 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
        _2532 = (((cbLight._m0[_2540].x * 0.3183098733425140380859375) * _2558) * _2559) + _2422;
        _2534 = (((cbLight._m0[_2540].y * 0.3183098733425140380859375) * _2558) * _2559) + _2423;
        _2536 = (((cbLight._m0[_2540].z * 0.3183098733425140380859375) * _2558) * _2559) + _2424;
    }
    bool _2539 = _2428.y == 0u;
    float _2594;
    float _2596;
    float _2598;
    if (_2539)
    {
        _2594 = _2532;
        _2596 = _2534;
        _2598 = _2536;
    }
    else
    {
        uint _2767 = _2354 + 7u;
        float _2783 = (dot(vec3(cbLight._m0[_2354 + 3u].xyz), vec3(_865, _866, _867)) * 0.5) + 0.5;
        float _2784 = _2783 * _2783;
        float _4728 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2785 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _2786 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2594 = (((cbLight._m0[_2767].x * 0.3183098733425140380859375) * _2785) * _2786) + _2532;
        _2596 = (((cbLight._m0[_2767].y * 0.3183098733425140380859375) * _2785) * _2786) + _2534;
        _2598 = (((cbLight._m0[_2767].z * 0.3183098733425140380859375) * _2785) * _2786) + _2536;
    }
    uint _2601 = _2354 + 8u;
    float _2614 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _975) * 0.949999988079071044921875);
    float _2615 = _2614 * _2614;
    float _2616 = cbLight._m0[_2354].x + _925;
    float _2617 = cbLight._m0[_2354].y + _926;
    float _2618 = cbLight._m0[_2354].z + _927;
    float _2622 = inversesqrt(dot(vec3(_2616, _2617, _2618), vec3(_2616, _2617, _2618)));
    float _2623 = _2622 * _2616;
    float _2624 = _2622 * _2617;
    float _2625 = _2622 * _2618;
    float _2626 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2354].xyz));
    float _4744 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2629 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
    float _4755 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
    float _2630 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
    float _2631 = dot(vec3(_865, _866, _867), vec3(_2623, _2624, _2625));
    float _4766 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
    float _2634 = isnan(1.0) ? _4766 : (isnan(_4766) ? 1.0 : min(_4766, 1.0));
    float _2635 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2623, _2624, _2625));
    float _4777 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2639 = _2615 * _2615;
    float _2643 = ((_2634 * _2634) * (_2639 + (-1.0))) + 1.0;
    float _2651 = exp2(log2(1.0 - (isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0)))) * 5.0);
    float _2652 = 0.959999978542327880859375 - _1043;
    float _2654 = 0.959999978542327880859375 - _1044;
    float _2655 = 0.959999978542327880859375 - _1045;
    float _2662 = 1.0 - _2615;
    float _2673 = (0.5 / (((_2630 * ((_2629 * _2662) + _2615)) + 9.9999999392252902907785028219223e-09) + (((_2630 * _2662) + _2615) * _2629))) * _2629;
    float _4788 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2675 = (isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0))) * (_2639 / ((_2643 * _2643) * 3.141590118408203125));
    uint _2689 = _2354 + 9u;
    float _2700 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2394].w)) * _975) * 0.949999988079071044921875);
    float _2701 = _2700 * _2700;
    float _2702 = cbLight._m0[_2394].x + _925;
    float _2703 = cbLight._m0[_2394].y + _926;
    float _2704 = cbLight._m0[_2394].z + _927;
    float _2708 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
    float _2709 = _2708 * _2702;
    float _2710 = _2708 * _2703;
    float _2711 = _2708 * _2704;
    float _2712 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2394].xyz));
    float _4799 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2715 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
    float _2716 = dot(vec3(_865, _866, _867), vec3(_2709, _2710, _2711));
    float _4810 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2719 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
    float _2720 = dot(vec3(cbLight._m0[_2394].xyz), vec3(_2709, _2710, _2711));
    float _4821 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2724 = _2701 * _2701;
    float _2728 = ((_2719 * _2719) * (_2724 + (-1.0))) + 1.0;
    float _2735 = exp2(log2(1.0 - (isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0)))) * 5.0);
    float _2742 = 1.0 - _2701;
    float _2752 = (0.5 / (((_2630 * ((_2715 * _2742) + _2701)) + 9.9999999392252902907785028219223e-09) + (((_2630 * _2742) + _2701) * _2715))) * _2715;
    float _4832 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
    float _2754 = (isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0))) * (_2724 / ((_2728 * _2728) * 3.141590118408203125));
    float _2764 = (((((_2735 * _2652) + _1046) * cbLight._m0[_2689].x) * _2754) * _2377) + ((((cbLight._m0[_2601].x * _2343) * ((_2651 * _2652) + _1046)) * _2675) * _2390);
    float _2765 = (((((_2735 * _2654) + _1048) * cbLight._m0[_2689].y) * _2754) * _2377) + ((((cbLight._m0[_2601].y * _2345) * ((_2651 * _2654) + _1048)) * _2675) * _2390);
    float _2766 = (((((_2735 * _2655) + _1049) * cbLight._m0[_2689].z) * _2754) * _2377) + ((((cbLight._m0[_2601].z * _2347) * ((_2651 * _2655) + _1049)) * _2675) * _2390);
    float _2822;
    float _2824;
    float _2826;
    if (_2430)
    {
        _2822 = _2764;
        _2824 = _2765;
        _2826 = _2766;
    }
    else
    {
        uint _2828 = _2354 + 2u;
        uint _2832 = _2354 + 10u;
        float _2846 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2828].w)) * _975) * 0.949999988079071044921875);
        float _2847 = _2846 * _2846;
        float _2848 = cbLight._m0[_2828].x + _925;
        float _2849 = cbLight._m0[_2828].y + _926;
        float _2850 = cbLight._m0[_2828].z + _927;
        float _2854 = inversesqrt(dot(vec3(_2848, _2849, _2850), vec3(_2848, _2849, _2850)));
        float _2855 = _2854 * _2848;
        float _2856 = _2854 * _2849;
        float _2857 = _2854 * _2850;
        float _2858 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2828].xyz));
        float _4843 = isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0));
        float _2861 = isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0));
        float _2862 = dot(vec3(_865, _866, _867), vec3(_2855, _2856, _2857));
        float _4854 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
        float _2865 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2866 = dot(vec3(cbLight._m0[_2828].xyz), vec3(_2855, _2856, _2857));
        float _4865 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0));
        float _2870 = _2847 * _2847;
        float _2874 = ((_2865 * _2865) * (_2870 + (-1.0))) + 1.0;
        float _2881 = exp2(log2(1.0 - (isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0)))) * 5.0);
        float _2888 = 1.0 - _2847;
        float _2898 = (0.5 / (((_2630 * ((_2861 * _2888) + _2847)) + 9.9999999392252902907785028219223e-09) + (((_2630 * _2888) + _2847) * _2861))) * _2861;
        float _4876 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        float _2900 = (isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2870 / ((_2874 * _2874) * 3.141590118408203125));
        float _2901 = isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0));
        _2822 = (((((_2881 * _2652) + _1046) * cbLight._m0[_2832].x) * _2900) * _2901) + _2764;
        _2824 = (((((_2881 * _2654) + _1048) * cbLight._m0[_2832].y) * _2900) * _2901) + _2765;
        _2826 = (((((_2881 * _2655) + _1049) * cbLight._m0[_2832].z) * _2900) * _2901) + _2766;
    }
    float _2932;
    float _2934;
    float _2936;
    if (_2539)
    {
        _2932 = _2822;
        _2934 = _2824;
        _2936 = _2826;
    }
    else
    {
        uint _2943 = _2354 + 3u;
        uint _2947 = _2354 + 11u;
        float _2961 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2943].w)) * _975) * 0.949999988079071044921875);
        float _2962 = _2961 * _2961;
        float _2963 = cbLight._m0[_2943].x + _925;
        float _2964 = cbLight._m0[_2943].y + _926;
        float _2965 = cbLight._m0[_2943].z + _927;
        float _2969 = inversesqrt(dot(vec3(_2963, _2964, _2965), vec3(_2963, _2964, _2965)));
        float _2970 = _2969 * _2963;
        float _2971 = _2969 * _2964;
        float _2972 = _2969 * _2965;
        float _2973 = dot(vec3(_865, _866, _867), vec3(cbLight._m0[_2943].xyz));
        float _4892 = isnan(0.0) ? _2973 : (isnan(_2973) ? 0.0 : max(_2973, 0.0));
        float _2976 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
        float _2977 = dot(vec3(_865, _866, _867), vec3(_2970, _2971, _2972));
        float _4903 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
        float _2980 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
        float _2981 = dot(vec3(cbLight._m0[_2943].xyz), vec3(_2970, _2971, _2972));
        float _4914 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
        float _2985 = _2962 * _2962;
        float _2989 = ((_2980 * _2980) * (_2985 + (-1.0))) + 1.0;
        float _2996 = exp2(log2(1.0 - (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) * 5.0);
        float _3003 = 1.0 - _2962;
        float _3013 = (0.5 / (((_2630 * ((_2976 * _3003) + _2962)) + 9.9999999392252902907785028219223e-09) + (((_2630 * _3003) + _2962) * _2976))) * _2976;
        float _4925 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
        float _3015 = (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0))) * (_2985 / ((_2989 * _2989) * 3.141590118408203125));
        float _3016 = isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0));
        _2932 = (((((_2996 * _2652) + _1046) * cbLight._m0[_2947].x) * _3015) * _3016) + _2822;
        _2934 = (((((_2996 * _2654) + _1048) * cbLight._m0[_2947].y) * _3015) * _3016) + _2824;
        _2936 = (((((_2996 * _2655) + _1049) * cbLight._m0[_2947].z) * _3015) * _3016) + _2826;
    }
    float _3082;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    if (_2352.y == 0u)
    {
        uvec4 _3037 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3038 = _3037.x;
        uint _3049 = uint((float(_3037.y) * floor(float(uint(cbSceneParam._m0[85u].y * _934) / _3038))) + floor(float(uint(cbSceneParam._m0[85u].x * _933) / _3038)));
        float _3059 = (log2(_2131 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3060 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0));
        uint _3063 = uint(isnan(14.0) ? _3060 : (isnan(_3060) ? 14.0 : min(_3060, 14.0)));
        uvec4 _3068 = texelFetch(g_lightClusterGridBuffer, int(((_3063 << 2u) + (_3049 << 6u)) >> 2u));
        uint _3069 = _3068.x;
        uint _3070 = _3037.z;
        float _3178;
        float _3180;
        float _3182;
        float _3184;
        float _3186;
        float _3188;
        if (((((1u << ((_3070 >> 4u) & 15u)) + 4294967295u) & _3069) == 0u) || ((_3070 & 240u) == 0u))
        {
            _3178 = 0.0;
            _3180 = 0.0;
            _3182 = 0.0;
            _3184 = 0.0;
            _3186 = 0.0;
            _3188 = 0.0;
        }
        else
        {
            float _3179;
            float _3181;
            float _3183;
            float _3185;
            float _3187;
            float _3189;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            uint _3337 = 0u;
            uint _3346;
            bool _3347;
            for (;;)
            {
                _3346 = texelFetch(g_lightClassification, int((((_3063 << 5u) + (_3049 << 9u)) + (_3337 << 2u)) >> 2u)).x;
                _3347 = _3346 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3347)
                {
                    frontier_phi_66_pred = _3336;
                    frontier_phi_66_pred_1 = _3335;
                    frontier_phi_66_pred_2 = _3334;
                    frontier_phi_66_pred_3 = _3333;
                    frontier_phi_66_pred_4 = _3332;
                    frontier_phi_66_pred_5 = _3331;
                }
                else
                {
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    uint _3461;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3335;
                    _3460 = _3336;
                    _3461 = _3346;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    for (;;)
                    {
                        uint _3465 = uint(findLSB(_3461)) + (_3337 << 5u);
                        uint _3462 = (_3461 + 4294967295u) & _3461;
                        uint _3467 = _3465 * 48u;
                        vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 3u)).x));
                        uint _3487 = (_3465 * 48u) + 4u;
                        vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3487)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 3u)).x));
                        uint _3506 = (_3465 * 48u) + 8u;
                        vec3 _3517 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3506)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 2u)).x));
                        float _3521 = _3481.x - _2129;
                        float _3522 = _3481.y - _2130;
                        float _3523 = _3481.z - _2131;
                        float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                        float _3527 = inversesqrt(_3524);
                        float _3528 = _3527 * _3521;
                        float _3529 = _3527 * _3522;
                        float _3530 = _3527 * _3523;
                        float _3531 = dot(vec3(_956, _959, _962), vec3(_3528, _3529, _3530));
                        float _3536 = 1.0 - (_3524 * _3481.w);
                        float _4951 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3537 = isnan(1.0) ? _4951 : (isnan(_4951) ? 1.0 : min(_4951, 1.0));
                        float _3538 = sqrt(_3524) * _3500.w;
                        float _3541 = 1.39999997615814208984375 / (_3538 + 1.39999997615814208984375);
                        float _3542 = _3541 * _3541;
                        float _3545 = ((1.0 - _3542) * _3531) + _3542;
                        float _3548 = _3538 * _3538;
                        float _3552 = ((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3537) / ((_3548 * 0.699999988079071044921875) + 1.0);
                        float _3556 = (-0.0) - _2129;
                        float _3557 = (-0.0) - _2130;
                        float _3558 = (-0.0) - _2131;
                        float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                        float _3563 = _3562 * _3556;
                        float _3564 = _3562 * _3557;
                        float _3565 = _3562 * _3558;
                        float _3572 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                        float _3573 = 1.0 - _1077;
                        float _3580 = sqrt(1.0 - ((1.0 - (_3573 * _3573)) * (1.0 - (_3572 * _3572))));
                        float _3581 = _3580 * _3580;
                        float _3582 = _3581 * _3581;
                        float _3583 = _3563 + _3528;
                        float _3584 = _3564 + _3529;
                        float _3585 = _3565 + _3530;
                        float _3589 = inversesqrt(dot(vec3(_3583, _3584, _3585), vec3(_3583, _3584, _3585)));
                        float _3593 = dot(vec3(_956, _959, _962), vec3(_3563, _3564, _3565));
                        float _4967 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                        float _3596 = isnan(1.0) ? _4967 : (isnan(_4967) ? 1.0 : min(_4967, 1.0));
                        float _3597 = dot(vec3(_956, _959, _962), vec3(_3589 * _3583, _3589 * _3584, _3589 * _3585));
                        float _4978 = isnan(0.0) ? _3597 : (isnan(_3597) ? 0.0 : max(_3597, 0.0));
                        float _3600 = isnan(1.0) ? _4978 : (isnan(_4978) ? 1.0 : min(_4978, 1.0));
                        float _3604 = ((_3600 * _3600) * (_3582 + (-1.0))) + 1.0;
                        float _3605 = _3541 * _3581;
                        float _3606 = _3605 * _3605;
                        float _3609 = ((1.0 - _3606) * _3531) + _3606;
                        float _4989 = isnan(0.0) ? _3609 : (isnan(_3609) ? 0.0 : max(_3609, 0.0));
                        float _3610 = isnan(1.0) ? _4989 : (isnan(_4989) ? 1.0 : min(_4989, 1.0));
                        float _3611 = 1.0 - _3581;
                        float _3621 = (0.5 / (((_3610 * ((_3596 * _3611) + _3581)) + 9.9999999392252902907785028219223e-09) + (((_3610 * _3611) + _3581) * _3596))) * _3610;
                        float _5000 = isnan(0.0) ? _3621 : (isnan(_3621) ? 0.0 : max(_3621, 0.0));
                        float _3632 = (((_3582 * 3.1415927410125732421875) * (isnan(1.0) ? _5000 : (isnan(_5000) ? 1.0 : min(_5000, 1.0)))) / ((_3604 * _3604) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125))) * _3537;
                        _3390 = (_3552 * _3500.x) + _3458;
                        _3391 = (_3552 * _3500.y) + _3459;
                        _3392 = (_3552 * _3500.z) + _3460;
                        _3387 = (_3632 * _3517.x) + _3455;
                        _3388 = (_3632 * _3517.y) + _3456;
                        _3389 = (_3632 * _3517.z) + _3457;
                        if (_3462 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3391;
                            _3460 = _3392;
                            _3461 = _3462;
                        }
                    }
                    frontier_phi_66_pred = _3392;
                    frontier_phi_66_pred_1 = _3391;
                    frontier_phi_66_pred_2 = _3390;
                    frontier_phi_66_pred_3 = _3389;
                    frontier_phi_66_pred_4 = _3388;
                    frontier_phi_66_pred_5 = _3387;
                }
                _3189 = frontier_phi_66_pred;
                _3187 = frontier_phi_66_pred_1;
                _3185 = frontier_phi_66_pred_2;
                _3183 = frontier_phi_66_pred_3;
                _3181 = frontier_phi_66_pred_4;
                _3179 = frontier_phi_66_pred_5;
                uint _3338 = _3337 + 1u;
                if (_3338 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3331 = _3179;
                    _3332 = _3181;
                    _3333 = _3183;
                    _3334 = _3185;
                    _3335 = _3187;
                    _3336 = _3189;
                    _3337 = _3338;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3178 = _3179;
            _3180 = _3181;
            _3182 = _3183;
            _3184 = _3185;
            _3186 = _3187;
            _3188 = _3189;
        }
        uvec4 _3192 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3193 = _3192.z;
        uint _3195 = (_3193 >> 8u) & 15u;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        if (((4294967295u << _3195) & _3069) == 0u)
        {
            _3299 = _3178;
            _3301 = _3180;
            _3303 = _3182;
            _3305 = _3184;
            _3307 = _3186;
            _3309 = _3188;
        }
        else
        {
            float _3324 = inversesqrt(dot(vec3(_2129, _2130, _2131), vec3(_2129, _2130, _2131)));
            float _3325 = _3324 * _2129;
            float _3326 = _3324 * _2130;
            float _3327 = _3324 * _2131;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3195 < ((_3193 >> 12u) & 15u))
            {
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3438 = _3178;
                float _3439 = _3180;
                float _3440 = _3182;
                float _3441 = _3184;
                float _3442 = _3186;
                float _3443 = _3188;
                uint _3444 = _3195;
                uint _3453;
                bool _3454;
                for (;;)
                {
                    _3453 = texelFetch(g_lightClassification, int((((_3063 << 5u) + (_3049 << 9u)) + (_3444 << 2u)) >> 2u)).x;
                    _3454 = _3453 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3454)
                    {
                        frontier_phi_72_pred = _3443;
                        frontier_phi_72_pred_1 = _3442;
                        frontier_phi_72_pred_2 = _3441;
                        frontier_phi_72_pred_3 = _3440;
                        frontier_phi_72_pred_4 = _3439;
                        frontier_phi_72_pred_5 = _3438;
                    }
                    else
                    {
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3650 = _3438;
                        float _3651 = _3439;
                        float _3652 = _3440;
                        float _3653 = _3441;
                        float _3654 = _3442;
                        float _3655 = _3443;
                        uint _3656 = _3453;
                        uint _3657;
                        vec4 _3682;
                        float _3683;
                        vec4 _3698;
                        vec3 _3710;
                        vec4 _3726;
                        vec4 _3741;
                        float _3787;
                        bool _3788;
                        for (;;)
                        {
                            uint _3667 = ((_3444 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3656));
                            _3657 = (_3656 + 4294967295u) & _3656;
                            uint _3669 = _3667 * 40u;
                            _3682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3669 + 3u)).x));
                            _3683 = _3682.w;
                            uint _3685 = (_3667 * 40u) + 4u;
                            _3698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3685 + 3u)).x));
                            uint _3700 = (_3667 * 40u) + 8u;
                            _3710 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3700 + 2u)).x));
                            uint _3713 = (_3667 * 40u) + 16u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3667 * 40u) + 20u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3667 * 40u) + 24u;
                            vec4 _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3762 = (_3667 * 40u) + 28u;
                            vec4 _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            _3787 = fma(_2131, _3775.z, fma(_2130, _3775.y, _3775.x * _2129)) + _3775.w;
                            _3788 = !((fma(_2131, _3756.z, fma(_2130, _3756.y, _3756.x * _2129)) + _3756.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3788)
                            {
                                float _3815 = _3682.x - _2129;
                                float _3816 = _3682.y - _2130;
                                float _3817 = _3682.z - _2131;
                                float _3818 = dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817));
                                float _3821 = inversesqrt(_3818);
                                float _3822 = _3821 * _3815;
                                float _3823 = _3821 * _3816;
                                float _3824 = _3821 * _3817;
                                float _3828 = 1.0 - (_3818 / (_3683 * _3683));
                                float _5011 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _5011 : (isnan(_5011) ? 1.0 : min(_5011, 1.0));
                                float _3833 = sqrt(_3818) * _3698.w;
                                float _3835 = 1.39999997615814208984375 / (_3833 + 1.39999997615814208984375);
                                float _3836 = _3835 * _3835;
                                float _3839 = ((1.0 - _3836) * dot(vec3(_3822, _3823, _3824), vec3(_956, _959, _962))) + _3836;
                                float _3842 = _3833 * _3833;
                                float _3846 = (fma(_2131, _3726.z, fma(_2130, _3726.y, _3726.x * _2129)) + _3726.w) / _3787;
                                float _3847 = (fma(_2131, _3741.z, fma(_2130, _3741.y, _3741.x * _2129)) + _3741.w) / _3787;
                                float _3851 = 1.0 - dot(vec2(_3846, _3847), vec2(_3846, _3847));
                                float _5027 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _5027 : (isnan(_5027) ? 1.0 : min(_5027, 1.0));
                                float _3853 = _3852 * (((isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0))) * _3829) / ((_3842 * 0.699999988079071044921875) + 1.0));
                                float _3865 = exp2(log2(1.0 / ((_3842 * 3.5) + 5.0)) * 0.25);
                                float _3866 = 1.0 - _1077;
                                float _3873 = sqrt(1.0 - ((1.0 - (_3866 * _3866)) * (1.0 - (_3865 * _3865))));
                                float _3874 = _3873 * _3873;
                                float _3875 = _3874 * _3874;
                                float _3876 = _3822 - _3325;
                                float _3877 = _3823 - _3326;
                                float _3878 = _3824 - _3327;
                                float _3882 = inversesqrt(dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878)));
                                float _3886 = dot(vec3(_956, _959, _962), vec3((-0.0) - _3325, (-0.0) - _3326, (-0.0) - _3327));
                                float _5038 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3889 = isnan(1.0) ? _5038 : (isnan(_5038) ? 1.0 : min(_5038, 1.0));
                                float _3890 = dot(vec3(_956, _959, _962), vec3(_3882 * _3876, _3882 * _3877, _3882 * _3878));
                                float _5049 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3893 = isnan(1.0) ? _5049 : (isnan(_5049) ? 1.0 : min(_5049, 1.0));
                                float _3897 = ((_3893 * _3893) * (_3875 + (-1.0))) + 1.0;
                                float _3898 = _3835 * _3874;
                                float _3899 = _3898 * _3898;
                                float _3905 = ((1.0 - _3899) * dot(vec3(_956, _959, _962), vec3(_3822, _3823, _3824))) + _3899;
                                float _5060 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3906 = isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0));
                                float _3907 = 1.0 - _3874;
                                float _3917 = (0.5 / (((_3906 * ((_3889 * _3907) + _3874)) + 9.9999999392252902907785028219223e-09) + (((_3906 * _3907) + _3874) * _3889))) * _3906;
                                float _5071 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3927 = (_3852 * _3829) * (((_3875 * 3.1415927410125732421875) * (isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0)))) / ((_3897 * _3897) * ((_3842 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3853 * _3698.y;
                                frontier_phi_78_pred_1 = _3853 * _3698.x;
                                frontier_phi_78_pred_2 = _3927 * _3710.z;
                                frontier_phi_78_pred_3 = _3927 * _3710.y;
                                frontier_phi_78_pred_4 = _3927 * _3710.x;
                                frontier_phi_78_pred_5 = _3853 * _3698.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3935 = frontier_phi_78_pred;
                            _3934 = frontier_phi_78_pred_1;
                            _3933 = frontier_phi_78_pred_2;
                            _3932 = frontier_phi_78_pred_3;
                            _3931 = frontier_phi_78_pred_4;
                            _3936 = frontier_phi_78_pred_5;
                            _3640 = _3934 + _3653;
                            _3641 = _3935 + _3654;
                            _3642 = _3936 + _3655;
                            _3637 = _3931 + _3650;
                            _3638 = _3932 + _3651;
                            _3639 = _3933 + _3652;
                            if (_3657 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3657;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3642;
                        frontier_phi_72_pred_1 = _3641;
                        frontier_phi_72_pred_2 = _3640;
                        frontier_phi_72_pred_3 = _3639;
                        frontier_phi_72_pred_4 = _3638;
                        frontier_phi_72_pred_5 = _3637;
                    }
                    _3310 = frontier_phi_72_pred;
                    _3308 = frontier_phi_72_pred_1;
                    _3306 = frontier_phi_72_pred_2;
                    _3304 = frontier_phi_72_pred_3;
                    _3302 = frontier_phi_72_pred_4;
                    _3300 = frontier_phi_72_pred_5;
                    uint _3445 = _3444 + 1u;
                    if (_3445 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3438 = _3300;
                        _3439 = _3302;
                        _3440 = _3304;
                        _3441 = _3306;
                        _3442 = _3308;
                        _3443 = _3310;
                        _3444 = _3445;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3310;
                frontier_phi_60_61_ladder_1 = _3308;
                frontier_phi_60_61_ladder_2 = _3304;
                frontier_phi_60_61_ladder_3 = _3302;
                frontier_phi_60_61_ladder_4 = _3300;
                frontier_phi_60_61_ladder_5 = _3306;
            }
            else
            {
                frontier_phi_60_61_ladder = _3188;
                frontier_phi_60_61_ladder_1 = _3186;
                frontier_phi_60_61_ladder_2 = _3182;
                frontier_phi_60_61_ladder_3 = _3180;
                frontier_phi_60_61_ladder_4 = _3178;
                frontier_phi_60_61_ladder_5 = _3184;
            }
            _3299 = frontier_phi_60_61_ladder_4;
            _3301 = frontier_phi_60_61_ladder_3;
            _3303 = frontier_phi_60_61_ladder_2;
            _3305 = frontier_phi_60_61_ladder_5;
            _3307 = frontier_phi_60_61_ladder_1;
            _3309 = frontier_phi_60_61_ladder;
        }
        float _3314 = isnan(1.0) ? _1061 : (isnan(_1061) ? 1.0 : min(_1061, 1.0));
        _3082 = (_3314 * _3305) + _2594;
        _3084 = (_3314 * _3307) + _2596;
        _3086 = (_3314 * _3309) + _2598;
        _3088 = ((_3299 * _1046) * _3314) + _2932;
        _3090 = ((_3301 * _1048) * _3314) + _2934;
        _3092 = ((_3303 * _1049) * _3314) + _2936;
    }
    else
    {
        _3082 = _2594;
        _3084 = _2596;
        _3086 = _2598;
        _3088 = _2932;
        _3090 = _2934;
        _3092 = _2936;
    }
    uint _3098 = _990 + uint(cbMatDynParam._m0[0u].w);
    float _3104 = cbInstanceData._m0[_3098].x * ((((cbMtdParam._m0[22u].x * _780.x) * cbMtdParam._m0[32u].x) * _801) + _568);
    float _3105 = cbInstanceData._m0[_3098].y * ((((cbMtdParam._m0[22u].y * _780.y) * cbMtdParam._m0[32u].x) * _801) + _569);
    float _3106 = cbInstanceData._m0[_3098].z * ((((cbMtdParam._m0[22u].z * _780.z) * cbMtdParam._m0[32u].x) * _801) + _570);
    float _5087 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
    float _5098 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
    float _5109 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
    float _3123 = (((isnan(1.0) ? _5087 : (isnan(_5087) ? 1.0 : min(_5087, 1.0))) * (_3082 + ((isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0))) * _1061))) + ((_3088 + ((isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0))) * _1858)) * cbPerFrame._m0[3u].x)) + _3104;
    float _3125 = (_3105 + ((_3090 + ((isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0))) * _1858)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5098 : (isnan(_5098) ? 1.0 : min(_5098, 1.0))) * (_3084 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1061)));
    float _3127 = (_3106 + ((_3092 + ((isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0))) * _1858)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5109 : (isnan(_5109) ? 1.0 : min(_5109, 1.0))) * (_3086 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1061)));
    float _5135 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3140 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
    uint _3141 = _988 + 6u;
    float _3149 = _933 / cbSceneParam._m0[86u].x;
    float _3150 = _934 / cbSceneParam._m0[86u].y;
    vec4 _3164 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3149, _3150, (log2((isnan(cbSceneParam._m0[77u].w) ? _888 : (isnan(_888) ? cbSceneParam._m0[77u].w : min(_888, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3166 = _3164.x;
    float _3167 = _3164.y;
    float _3168 = _3164.z;
    float _3169 = _3164.w;
    float _3240;
    float _3242;
    float _3244;
    float _3246;
    if (_888 > cbSceneParam._m0[78u].w)
    {
        float _3203 = isnan(_888) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _888 : min(cbSceneParam._m0[80u].w, _888));
        float _3204 = _3203 / _888;
        float _3215 = _3204 * _918;
        float _3216 = _919 * _3204;
        float _3217 = (-0.0) - _3216;
        float _3218 = _3204 * _920;
        float _3220 = (cbSceneParam._m0[77u].w * _3217) / _3203;
        float _3221 = _3220 + cbSceneParam._m0[79u].w;
        float _3222 = cbSceneParam._m0[79u].w - _3216;
        float _3228 = sqrt(((_3215 * _3215) + (_3216 * _3216)) + (_3218 * _3218));
        float _3231 = (1.0 - (cbSceneParam._m0[77u].w / _3203)) * _3228;
        float _3236 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3238 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3400;
        if (abs((_3217 - _3220) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3400 = ((((_3221 > 0.0) ? exp2(_3236 * _3221) : (2.0 - exp2(_3238 * _3221))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3231;
        }
        else
        {
            float _3360 = 1.0 / cbSceneParam._m0[80u].x;
            float _3361 = isnan(_3222) ? _3221 : (isnan(_3221) ? _3222 : max(_3221, _3222));
            float _3362 = isnan(_3222) ? _3221 : (isnan(_3221) ? _3222 : min(_3221, _3222));
            float _3371 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : min(_3361, 0.0));
            float _3372 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : min(_3362, 0.0));
            _3400 = ((abs(_3228 / _3217) * cbSceneParam._m0[80u].y) * ((((_3371 - _3372) * 2.0) - ((exp2(_3236 * (isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0)))) - exp2(_3236 * (isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))))) * _3360)) - ((exp2(_3238 * _3371) - exp2(_3238 * _3372)) * _3360))) + (_3231 * cbSceneParam._m0[80u].z);
        }
        vec4 _3402 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3149, _3150, 1.0), 0.0);
        float _3411 = exp2((_3400 * (-1.44269502162933349609375)) * (1.0 - _3402.w));
        float _3412 = log2(_3411);
        float _3428 = log2(_3169);
        _3240 = (exp2(_3428 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].x)) * _3402.x) / cbSceneParam._m0[78u].x)) + _3166;
        _3242 = (exp2(_3428 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].y)) * _3402.y) / cbSceneParam._m0[78u].y)) + _3167;
        _3244 = (exp2(_3428 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].z)) * _3402.z) / cbSceneParam._m0[78u].z)) + _3168;
        _3246 = _3411 * _3169;
    }
    else
    {
        _3240 = _3166;
        _3242 = _3167;
        _3244 = _3168;
        _3246 = _3169;
    }
    float _3258 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3259 = _3258 == 3.0;
    float _3260 = log2(_3246);
    float _3264 = exp2(_3260 * cbSceneParam._m0[78u].x);
    float _3265 = exp2(_3260 * cbSceneParam._m0[78u].y);
    float _3266 = exp2(_3260 * cbSceneParam._m0[78u].z);
    float _3267 = _3264 * (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0)));
    float _3268 = _3265 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0)));
    float _3269 = _3266 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0)));
    float _3278 = (_3258 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3278 * (_3259 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3240)));
    SV_Target.y = _3278 * (_3259 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3242)));
    SV_Target.z = _3278 * (_3259 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3244)));
    SV_Target.w = cbInstanceData._m0[_3141].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3104) * _3140) * _3264) * _3278;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3105) * _3140) * _3265) * _3278;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3106) * _3140) * _3266) * _3278;
    SV_Target_1.w = cbInstanceData._m0[_3141].w;
}


