#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1524;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _274 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_261 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _279 = _274.z;
    float _280 = _274.w;
    vec4 _302 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _261) + cbTextureTilingScale._m0[11u].w));
    float _307 = _302.w;
    float _319 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _279) * exp2(log2(1.0 - _307) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _320 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _321 = isnan(1.0) ? _320 : (isnan(_320) ? 1.0 : min(_320, 1.0));
    vec4 _335 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _261) + cbTextureTilingScale._m0[2u].w));
    float _345 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _353 = (_345 - (((_335.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _345))) * (cbMtdParam._m0[36u].w + 1.0);
    float _3919 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _356 = _321 - (_354 * _321);
    float _357 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    vec4 _371 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _374 = _371.y;
    float _375 = _374 * (isnan(1.0) ? _357 : (isnan(_357) ? 1.0 : min(_357, 1.0)));
    float _384 = exp2(log2(cbMtdParam._m0[32u].w * _307) * cbMtdParam._m0[31u].z);
    float _386 = _384 - (_354 * _384);
    float _387 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _388 = isnan(1.0) ? _387 : (isnan(_387) ? 1.0 : min(_387, 1.0));
    float _399 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_280) * 4.5));
    float _408 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _279) * _399)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _409 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _410 = isnan(1.0) ? _409 : (isnan(_409) ? 1.0 : min(_409, 1.0));
    float _421 = exp2(log2((1.0 - (((_399 * _399) * _279) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _422 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _426 = (((isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0))) - _280) * _374) + _280;
    vec4 _438 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _261) + cbTextureTilingScale._m0[5u].w));
    float _451 = (_371.x + (-0.02500000037252902984619140625)) * 8.0;
    float _453 = roundEven(_451);
    float _454 = cbMtdParam._m0[10u].x * _438.x;
    float _455 = cbMtdParam._m0[10u].y * _438.y;
    float _456 = cbMtdParam._m0[10u].z * _438.z;
    vec4 _468 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _261) + cbTextureTilingScale._m0[1u].w));
    float _479 = cbMtdParam._m0[9u].x * _468.x;
    float _480 = cbMtdParam._m0[9u].y * _468.y;
    float _481 = cbMtdParam._m0[9u].z * _468.z;
    float _488 = ((_479 - _454) * _426) + _454;
    float _489 = ((_480 - _455) * _426) + _455;
    float _490 = ((_481 - _456) * _426) + _456;
    vec4 _502 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _261) + cbTextureTilingScale._m0[6u].w));
    float _522 = (((cbMtdParam._m0[20u].x * _502.x) - _488) * _410) + _488;
    float _523 = (((cbMtdParam._m0[20u].y * _502.y) - _489) * _410) + _489;
    float _524 = (((cbMtdParam._m0[20u].z * _502.z) - _490) * _410) + _490;
    vec4 _536 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _261) + cbTextureTilingScale._m0[9u].w));
    float _556 = (((cbMtdParam._m0[29u].x * _536.x) - _522) * _388) + _522;
    float _557 = (((cbMtdParam._m0[29u].y * _536.y) - _523) * _388) + _523;
    float _558 = (((cbMtdParam._m0[29u].z * _536.z) - _524) * _388) + _524;
    float _198[6];
    float _199[6];
    float _200[6];
    _198[0u] = cbMtdParam._m0[30u].x;
    _199[0u] = cbMtdParam._m0[30u].y;
    _200[0u] = cbMtdParam._m0[30u].z;
    _198[1u] = cbMtdParam._m0[28u].x;
    _199[1u] = cbMtdParam._m0[28u].y;
    _200[1u] = cbMtdParam._m0[28u].z;
    _198[2u] = cbMtdParam._m0[27u].x;
    _199[2u] = cbMtdParam._m0[27u].y;
    _200[2u] = cbMtdParam._m0[27u].z;
    _198[3u] = cbMtdParam._m0[26u].x;
    _199[3u] = cbMtdParam._m0[26u].y;
    _200[3u] = cbMtdParam._m0[26u].z;
    _198[4u] = cbMtdParam._m0[25u].x;
    _199[4u] = cbMtdParam._m0[25u].y;
    _200[4u] = cbMtdParam._m0[25u].z;
    _198[5u] = cbMtdParam._m0[24u].x;
    _199[5u] = cbMtdParam._m0[24u].y;
    _200[5u] = cbMtdParam._m0[24u].z;
    float _627 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _630 = uint(int(isnan(5.0) ? _627 : (isnan(_627) ? 5.0 : min(_627, 5.0))));
    float _637 = _198[_630] * _374;
    float _638 = _199[_630] * _374;
    float _639 = _200[_630] * _374;
    float _640 = _637 + ((_302.x * 4.5) * (((_479 - _556) * _375) + _556));
    float _641 = _638 + ((_302.y * 4.5) * (((_480 - _557) * _375) + _557));
    float _642 = _639 + ((_302.z * 4.5) * (((_481 - _558) * _375) + _558));
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[37u].w;
    _194[0u] = cbMtdParam._m0[38u].x;
    _193[1u] = cbMtdParam._m0[39u].w;
    _194[1u] = cbMtdParam._m0[40u].x;
    _193[2u] = cbMtdParam._m0[40u].y;
    _194[2u] = cbMtdParam._m0[40u].z;
    _193[3u] = cbMtdParam._m0[40u].w;
    _194[3u] = cbMtdParam._m0[41u].x;
    _193[4u] = cbMtdParam._m0[41u].y;
    _194[4u] = cbMtdParam._m0[41u].z;
    float _675 = roundEven(5.0 - _451);
    float _676 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _677 = isnan(4.0) ? _676 : (isnan(_676) ? 4.0 : min(_676, 4.0));
    float _679 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    uint _681 = uint(int(isnan(4.0) ? _679 : (isnan(_679) ? 4.0 : min(_679, 4.0))));
    float _693 = ((cbMtdParam._m0[42u].z - _194[_681]) * _426) + _194[_681];
    float _701 = ((cbMtdParam._m0[43u].x - _693) * _410) + _693;
    float _706 = ((cbMtdParam._m0[43u].z - _701) * _388) + _701;
    float _711 = ((cbMtdParam._m0[39u].z - _706) * _375) + _706;
    vec4 _725 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _261) + cbTextureTilingScale._m0[7u].w));
    float _727 = _725.x;
    float _728 = _725.y;
    float _730 = _725.z + _193[_681];
    vec4 _742 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _261) + cbTextureTilingScale._m0[10u].w));
    float _750 = (((cbMtdParam._m0[42u].y - _730) + _742.z) * _426) + _730;
    vec4 _763 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _261) + cbTextureTilingScale._m0[12u].w));
    float _771 = (((cbMtdParam._m0[42u].w - _750) + _763.z) * _410) + _750;
    float _777 = ((((_279 * 2.0) * _771) - _771) * cbMtdParam._m0[34u].x) + _771;
    vec4 _790 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _261) + cbTextureTilingScale._m0[13u].w));
    float _798 = (((_790.z + cbMtdParam._m0[43u].y) - _777) * _388) + _777;
    float _802 = (((cbMtdParam._m0[39u].y + _335.z) - _798) * _375) + _798;
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _864 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_833 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_837 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _879 = (-0.0) - ((_837 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _883 = (_837 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _884 = isnan(_883) ? _879 : (isnan(_879) ? _883 : min(_879, _883));
    float _4005 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _885 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
    float _913 = ((_742.x - _727) * _426) + _727;
    float _914 = ((_742.y - _728) * _426) + _728;
    float _919 = ((_763.x - _913) * _410) + _913;
    float _920 = ((_763.y - _914) * _410) + _914;
    float _925 = ((_790.x - _919) * _388) + _919;
    float _926 = ((_790.y - _920) * _388) + _920;
    float _935 = ((((_335.x - _925) * _375) + _925) * 2.0) + (-1.0);
    float _936 = ((((_335.y - _926) * _375) + _926) * 2.0) + (-1.0);
    float _937 = dot(vec2(_935, _936), vec2(_935, _936));
    float _4016 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _942 = sqrt(1.0 - (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))));
    float _945 = (cbMtdParam._m0[34u].z * ((_274.x * 2.0) + (-1.0))) + _935;
    float _946 = (cbMtdParam._m0[34u].z * ((_274.y * 2.0) + (-1.0))) + _936;
    float _949 = fma(_942, _240 * NORMAL.x, fma(_946, _247 * TANGENT.x, (_233 * _225) * _945));
    float _952 = fma(_942, _240 * NORMAL.y, fma(_946, _247 * TANGENT.y, (_233 * _226) * _945));
    float _955 = fma(_942, _240 * NORMAL.z, fma(_946, _247 * TANGENT.z, (_233 * _227) * _945));
    float _959 = inversesqrt(dot(vec3(_949, _952, _955), vec3(_949, _952, _955)));
    float _960 = _959 * _949;
    float _961 = _959 * _952;
    float _962 = _959 * _955;
    float _4027 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _963 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _4038 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4049 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4060 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4071 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _967 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _983 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (_833 / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (_837 / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    float _1028 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1029 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1031 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1033 = _1031.w;
    float _1051 = fma(_962, cbSceneParam._m0[5u].z, fma(_961, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _960));
    float _1054 = fma(_962, cbSceneParam._m0[6u].z, fma(_961, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _960));
    float _1057 = fma(_962, cbSceneParam._m0[7u].z, fma(_961, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _960));
    vec4 _1059 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1070 = (((_1059.y - _963) + (_1059.w * _963)) * cbMtdParam._m0[3u].x) + _963;
    uint _1083 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1084 = _1083 + 9u;
    uint _1085 = _1084 + uint(cbMatDynParam._m0[0u].w);
    float _1091 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_1085].x;
    float _1092 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_1085].y;
    float _1093 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0)))) * cbInstanceData._m0[_1085].z;
    float _4082 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _4093 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
    float _1095 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    vec4 _1097 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1102 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1113 = (((_1102.x - _967) + (_1102.w * _967)) * cbMtdParam._m0[3u].x) + _967;
    float _1126 = (cbMtdParam._m0[3u].x * (((_1094 * _1033) - _1094) + _1097.x)) + _1094;
    float _1127 = (cbMtdParam._m0[3u].x * (((_1095 * _1033) - _1095) + _1097.y)) + _1095;
    float _1128 = (cbMtdParam._m0[3u].x * (((_1096 * _1033) - _1096) + _1097.z)) + _1096;
    float _1129 = 1.0 - _1113;
    float _1130 = _1129 * _1126;
    float _1131 = _1129 * _1127;
    float _1132 = _1129 * _1128;
    float _1137 = (_1126 + (-0.039999999105930328369140625)) * _1113;
    float _1138 = (_1127 + (-0.039999999105930328369140625)) * _1113;
    float _1139 = (_1128 + (-0.039999999105930328369140625)) * _1113;
    float _1140 = _1137 + 0.039999999105930328369140625;
    float _1142 = _1138 + 0.039999999105930328369140625;
    float _1143 = _1139 + 0.039999999105930328369140625;
    vec4 _1152 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1028, cbSceneParam._m0[86u].y * _1029));
    float _1155 = _1152.x * TEXCOORD_5.w;
    float _1156 = dot(vec3(_960, _961, _962), vec3(_1020, _1021, _1022));
    float _1159 = _1156 * 2.0;
    float _1163 = (_1159 * _960) - _1020;
    float _1164 = (_1159 * _961) - _1021;
    float _1165 = (_1159 * _962) - _1022;
    float _1169 = abs(dot(vec3(_1020, _1021, _1022), vec3(_960, _961, _962)));
    float _4115 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
    float _1171 = sqrt(_1070);
    float _1182 = exp2((_1171 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1171 * 3.0));
    float _1188 = (1.0 - _1182) * ((_1171 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1189 = _1182 * _1171;
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1225 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1523;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1250 = fma(_1225, cbModelParam._m0[26u].z, fma(_1221, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1217));
        float _1254 = fma(_1225, cbModelParam._m0[27u].z, fma(_1221, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1217));
        float _1258 = fma(_1225, cbModelParam._m0[28u].z, fma(_1221, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1217));
        float _1282 = _1217 + _960;
        float _1283 = _1221 + _961;
        float _1284 = _1225 + _962;
        float _1294 = fma(_1284, cbModelParam._m0[26u].z, fma(_1283, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1282)) - _1250;
        float _1295 = fma(_1284, cbModelParam._m0[27u].z, fma(_1283, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1282)) - _1254;
        float _1296 = fma(_1284, cbModelParam._m0[28u].z, fma(_1283, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1282)) - _1258;
        float _1300 = inversesqrt(dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296)));
        float _1312 = ((_1300 * _1294) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1250 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1313 = ((_1300 * _1295) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1254 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1300 * _1296) / cbModelParam._m0[34u].z) + ((((((_1258 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1312, _1313, _1314), 0.0);
        float _1351 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1352 = _1351 * (_1317.x + (-0.5));
        float _1353 = _1351 * (_1317.y + (-0.5));
        float _1354 = _1351 * (_1317.z + (-0.5));
        float _1361 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1362 = _1361 * (_1324.x + (-0.5));
        float _1363 = _1361 * (_1324.y + (-0.5));
        float _1364 = _1361 * (_1324.z + (-0.5));
        float _1371 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1372 = _1371 * (_1331.x + (-0.5));
        float _1373 = _1371 * (_1331.y + (-0.5));
        float _1374 = _1371 * (_1331.z + (-0.5));
        float _1381 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1382 = _1381 * (_1338.x + (-0.5));
        float _1383 = _1381 * (_1338.y + (-0.5));
        float _1384 = _1381 * (_1338.z + (-0.5));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = _1352 * 0.5;
        float _1389 = _1362 * 0.5;
        float _1390 = _1372 * 0.5;
        float _1391 = dot(vec3(_1388, _1389, _1390), vec3(_1388, _1389, _1390));
        float _1396 = (_1391 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1391);
        float _1405 = (dot(vec3(_960, _961, _962), vec3(_1396 * _1388, _1396 * _1389, _1396 * _1390)) + 1.0) * 0.5;
        float _4141 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1415 = sqrt(((_1389 * _1389) + (_1388 * _1388)) + (_1390 * _1390)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4152 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _4163 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_1417 + 1.0))) + _1422) * _1385;
        float _1432 = _1353 * 0.5;
        float _1433 = _1363 * 0.5;
        float _1434 = _1373 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_960, _961, _962), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4174 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _4185 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4196 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (_1459 + 1.0))) + _1464) * _1386;
        float _1474 = _1354 * 0.5;
        float _1475 = _1364 * 0.5;
        float _1476 = _1374 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_960, _961, _962), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4207 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4218 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4229 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_1501 + 1.0))) + _1506) * _1387;
        _1523 = _1354;
        _1525 = _1353;
        _1526 = _1352;
        _1527 = _1364;
        _1528 = _1363;
        _1529 = _1362;
        _1530 = _1374;
        _1531 = _1373;
        _1532 = _1372;
        _1533 = _1387;
        _1534 = _1386;
        _1535 = _1385;
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1537 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1524;
        _1525 = _1524;
        _1526 = _1524;
        _1527 = _1524;
        _1528 = _1524;
        _1529 = _1524;
        _1530 = _1524;
        _1531 = _1524;
        _1532 = _1524;
        _1533 = _1524;
        _1534 = _1524;
        _1535 = _1524;
        _1536 = 0.0;
        _1537 = 0.0;
        _1538 = 0.0;
    }
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1561 = fma(_1225, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1217));
        float _1565 = fma(_1225, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1217));
        float _1569 = fma(_1225, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1217));
        float _1591 = _1217 + _960;
        float _1592 = _1221 + _961;
        float _1593 = _1225 + _962;
        float _1603 = fma(_1593, cbModelParam._m0[30u].z, fma(_1592, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1591)) - _1561;
        float _1604 = fma(_1593, cbModelParam._m0[31u].z, fma(_1592, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1591)) - _1565;
        float _1605 = fma(_1593, cbModelParam._m0[32u].z, fma(_1592, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1591)) - _1569;
        float _1609 = inversesqrt(dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605)));
        float _1621 = ((_1609 * _1603) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1561 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1622 = ((_1609 * _1604) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1565 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1623 = ((_1609 * _1605) / cbModelParam._m0[35u].z) + ((((((_1569 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1625 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1632 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1639 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        vec4 _1646 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1621, _1622, _1623), 0.0);
        float _1658 = exp2((_1625.w + (-0.5)) * 20.0) * 2.0;
        float _1659 = _1658 * (_1625.x + (-0.5));
        float _1660 = _1658 * (_1625.y + (-0.5));
        float _1661 = _1658 * (_1625.z + (-0.5));
        float _1668 = exp2((_1632.w + (-0.5)) * 20.0) * 2.0;
        float _1669 = _1668 * (_1632.x + (-0.5));
        float _1670 = _1668 * (_1632.y + (-0.5));
        float _1671 = _1668 * (_1632.z + (-0.5));
        float _1678 = exp2((_1639.w + (-0.5)) * 20.0) * 2.0;
        float _1679 = _1678 * (_1639.x + (-0.5));
        float _1680 = _1678 * (_1639.y + (-0.5));
        float _1681 = _1678 * (_1639.z + (-0.5));
        float _1688 = exp2((_1646.w + (-0.5)) * 20.0) * 2.0;
        float _1689 = _1688 * (_1646.x + (-0.5));
        float _1690 = _1688 * (_1646.y + (-0.5));
        float _1691 = _1688 * (_1646.z + (-0.5));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
        float _1694 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1695 = _1659 * 0.5;
        float _1696 = _1669 * 0.5;
        float _1697 = _1679 * 0.5;
        float _1698 = dot(vec3(_1695, _1696, _1697), vec3(_1695, _1696, _1697));
        float _1703 = (_1698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1698);
        float _1711 = (dot(vec3(_960, _961, _962), vec3(_1703 * _1695, _1703 * _1696, _1703 * _1697)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
        float _1720 = sqrt(((_1696 * _1696) + (_1695 * _1695)) + (_1697 * _1697)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1722 = _1721 * 2.0;
        float _1726 = (1.0 - _1721) / (_1721 + 1.0);
        float _4292 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
        float _1727 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1736 = ((((1.0 - _1727) * (_1722 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1722 + 1.0))) + _1727) * _1692;
        float _1737 = _1660 * 0.5;
        float _1738 = _1670 * 0.5;
        float _1739 = _1680 * 0.5;
        float _1740 = dot(vec3(_1737, _1738, _1739), vec3(_1737, _1738, _1739));
        float _1745 = (_1740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1740);
        float _1753 = (dot(vec3(_960, _961, _962), vec3(_1745 * _1737, _1745 * _1738, _1745 * _1739)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1762 = sqrt(((_1738 * _1738) + (_1737 * _1737)) + (_1739 * _1739)) / (_1693 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1764 = _1763 * 2.0;
        float _1768 = (1.0 - _1763) / (_1763 + 1.0);
        float _4325 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
        float _1769 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1778 = ((((1.0 - _1769) * (_1764 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1764 + 1.0))) + _1769) * _1693;
        float _1779 = _1661 * 0.5;
        float _1780 = _1671 * 0.5;
        float _1781 = _1681 * 0.5;
        float _1782 = dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781));
        float _1787 = (_1782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1782);
        float _1795 = (dot(vec3(_960, _961, _962), vec3(_1787 * _1779, _1787 * _1780, _1787 * _1781)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
        float _1804 = sqrt(((_1780 * _1780) + (_1779 * _1779)) + (_1781 * _1781)) / (_1694 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1806 = _1805 * 2.0;
        float _1810 = (1.0 - _1805) / (_1805 + 1.0);
        float _4358 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
        float _1811 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1820 = ((((1.0 - _1811) * (_1806 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1806 + 1.0))) + _1811) * _1694;
        _1828 = _1661;
        _1829 = _1660;
        _1830 = _1659;
        _1831 = _1671;
        _1832 = _1670;
        _1833 = _1669;
        _1834 = _1681;
        _1835 = _1680;
        _1836 = _1679;
        _1837 = _1694;
        _1838 = _1693;
        _1839 = _1692;
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)));
        _1841 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0)));
        _1842 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0)));
    }
    else
    {
        _1828 = _1524;
        _1829 = _1524;
        _1830 = _1524;
        _1831 = _1524;
        _1832 = _1524;
        _1833 = _1524;
        _1834 = _1524;
        _1835 = _1524;
        _1836 = _1524;
        _1837 = _1524;
        _1838 = _1524;
        _1839 = _1524;
        _1840 = 0.0;
        _1841 = 0.0;
        _1842 = 0.0;
    }
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1536)) + _1536;
    float _1853 = (cbModelParam._m0[1u].x * (_1841 - _1537)) + _1537;
    float _1854 = (cbModelParam._m0[1u].x * (_1842 - _1538)) + _1538;
    float _1875 = fma(_1854, cbSceneParam._m0[89u].z, fma(_1853, cbSceneParam._m0[89u].y, _1852 * cbSceneParam._m0[89u].x));
    float _1878 = fma(_1854, cbSceneParam._m0[90u].z, fma(_1853, cbSceneParam._m0[90u].y, _1852 * cbSceneParam._m0[90u].x));
    float _1881 = fma(_1854, cbSceneParam._m0[91u].z, fma(_1853, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1852));
    float _1894 = _1163 * 0.5;
    float _1895 = _1164 * 0.5;
    float _1896 = _1165 * 0.5;
    float _1897 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1830, _1833, _1836, _1839));
    float _1900 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1829, _1832, _1835, _1838));
    float _1903 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1937;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1910 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1523, _1527, _1530, _1533));
        float _1914 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1525, _1528, _1531, _1534));
        float _1918 = dot(vec4(_1894, _1895, _1896, 1.0), vec4(_1526, _1529, _1532, _1535));
        float _1925 = dot(vec4(cbModelParam._m0[39u]), vec4(_1894, _1895, _1896, 1.0));
        _1937 = dot(vec3(isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)), isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1925) ? 0.0 : (isnan(0.0) ? _1925 : max(0.0, _1925))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1937 = 1.0;
    }
    float _1948;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1939 = dot(vec4(cbModelParam._m0[40u]), vec4(_1894, _1895, _1896, 1.0));
        _1948 = dot(vec3(isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0)), isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0)), isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1939) ? 0.0 : (isnan(0.0) ? _1939 : max(0.0, _1939))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1948 = 1.0;
    }
    float _1952 = (_1948 * cbModelParam._m0[1u].x) + (_1937 * (1.0 - cbModelParam._m0[1u].x));
    float _1962 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1070);
    float _1963 = isnan(_1962) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1962 : min(cbModelParam._m0[25u].z, _1962));
    float _2045;
    float _2047;
    float _2049;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2012 = fma(_1225, cbModelParam._m0[13u].z, fma(_1221, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1217)) + cbModelParam._m0[13u].w;
        float _2016 = fma(_1225, cbModelParam._m0[14u].z, fma(_1221, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1217)) + cbModelParam._m0[14u].w;
        float _2020 = fma(_1225, cbModelParam._m0[15u].z, fma(_1221, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1217)) + cbModelParam._m0[15u].w;
        float _2023 = fma(_1165, cbModelParam._m0[13u].z, fma(_1164, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1163));
        float _2026 = fma(_1165, cbModelParam._m0[14u].z, fma(_1164, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1163));
        float _2029 = fma(_1165, cbModelParam._m0[15u].z, fma(_1164, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1163));
        float _2057;
        if (_2023 > 0.0)
        {
            _2057 = abs((1.0 - _2012) / _2023);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2012 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2057 = frontier_phi_14_12_ladder;
        }
        float _2283;
        if (_2026 > 0.0)
        {
            _2283 = abs((1.0 - _2016) / _2026);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2026 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2016 + 1.0) / _2026);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2283 = frontier_phi_23_19_ladder;
        }
        float _2540;
        if (_2029 > 0.0)
        {
            _2540 = abs((1.0 - _2020) / _2029);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2029 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2020 + 1.0) / _2029);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2540 = frontier_phi_35_30_ladder;
        }
        float _2542 = isnan(_2283) ? _2057 : (isnan(_2057) ? _2283 : min(_2057, _2283));
        float _2543 = isnan(_2540) ? _2542 : (isnan(_2542) ? _2540 : min(_2542, _2540));
        float _2547 = (_2543 * _2023) + _2012;
        float _2548 = (_2543 * _2026) + _2016;
        float _2549 = (_2543 * _2029) + _2020;
        float _2550 = _2543 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2550;
        float _2554 = _2550 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 > _2554) || ((_2548 < _2552) || ((_2547 < _2552) || (_2547 > _2554))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2677 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2549, cbModelParam._m0[9u].z, fma(_2548, cbModelParam._m0[9u].y, _2547 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2549, cbModelParam._m0[10u].z, fma(_2548, cbModelParam._m0[10u].y, _2547 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2549, cbModelParam._m0[11u].z, fma(_2548, cbModelParam._m0[11u].y, _2547 * cbModelParam._m0[11u].x))), _1963);
            frontier_phi_13_35_ladder = _2677.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2677.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2677.x * cbModelParam._m0[1u].y;
        }
        _2045 = frontier_phi_13_35_ladder_2;
        _2047 = frontier_phi_13_35_ladder_1;
        _2049 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2033 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1163, _1164, _1165), _1963);
        _2045 = _2033.x * cbModelParam._m0[1u].y;
        _2047 = _2033.y * cbModelParam._m0[1u].y;
        _2049 = _2033.z * cbModelParam._m0[1u].y;
    }
    float _2053 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1070);
    float _2054 = isnan(_2053) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2053 : min(cbModelParam._m0[25u].w, _2053));
    float _2146;
    float _2148;
    float _2150;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2110 = fma(_1225, cbModelParam._m0[21u].z, fma(_1221, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1217)) + cbModelParam._m0[21u].w;
        float _2114 = fma(_1225, cbModelParam._m0[22u].z, fma(_1221, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1217)) + cbModelParam._m0[22u].w;
        float _2118 = fma(_1225, cbModelParam._m0[23u].z, fma(_1221, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1217)) + cbModelParam._m0[23u].w;
        float _2121 = fma(_1165, cbModelParam._m0[21u].z, fma(_1164, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1163));
        float _2124 = fma(_1165, cbModelParam._m0[22u].z, fma(_1164, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1163));
        float _2127 = fma(_1165, cbModelParam._m0[23u].z, fma(_1164, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1163));
        float _2288;
        if (_2121 > 0.0)
        {
            _2288 = abs((1.0 - _2110) / _2121);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2110 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2288 = frontier_phi_25_21_ladder;
        }
        float _2567;
        if (_2124 > 0.0)
        {
            _2567 = abs((1.0 - _2114) / _2124);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2124 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2114 + 1.0) / _2124);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2567 = frontier_phi_37_32_ladder;
        }
        float _2780;
        if (_2127 > 0.0)
        {
            _2780 = abs((1.0 - _2118) / _2127);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2127 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2118 + 1.0) / _2127);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2780 = frontier_phi_46_43_ladder;
        }
        float _2782 = isnan(_2567) ? _2288 : (isnan(_2288) ? _2567 : min(_2288, _2567));
        float _2783 = isnan(_2780) ? _2782 : (isnan(_2782) ? _2780 : min(_2782, _2780));
        float _2787 = (_2783 * _2121) + _2110;
        float _2788 = (_2783 * _2124) + _2114;
        float _2789 = (_2783 * _2127) + _2118;
        float _2790 = _2783 * 9.9999997473787516355514526367188e-05;
        float _2791 = (-1.0) - _2790;
        float _2793 = _2790 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2789 > _2793) || ((_2789 < _2791) || ((_2788 > _2793) || ((_2788 < _2791) || ((_2787 < _2791) || (_2787 > _2793))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2789, cbModelParam._m0[17u].z, fma(_2788, cbModelParam._m0[17u].y, _2787 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2789, cbModelParam._m0[18u].z, fma(_2788, cbModelParam._m0[18u].y, _2787 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2789, cbModelParam._m0[19u].z, fma(_2788, cbModelParam._m0[19u].y, _2787 * cbModelParam._m0[19u].x))), _2054);
            frontier_phi_22_46_ladder = _3017.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3017.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3017.x * cbModelParam._m0[1u].z;
        }
        _2146 = frontier_phi_22_46_ladder_2;
        _2148 = frontier_phi_22_46_ladder_1;
        _2150 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2130 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1163, _1164, _1165), _2054);
        _2146 = _2130.x * cbModelParam._m0[1u].z;
        _2148 = _2130.y * cbModelParam._m0[1u].z;
        _2150 = _2130.z * cbModelParam._m0[1u].z;
    }
    float _2163 = (((_1188 * _1140) + _1189) * _1155) * ((cbModelParam._m0[1u].w * (_2146 - _2045)) + _2045);
    float _2165 = (((_1188 * _1142) + _1189) * _1155) * ((cbModelParam._m0[1u].w * (_2148 - _2047)) + _2047);
    float _2167 = (((_1188 * _1143) + _1189) * _1155) * ((cbModelParam._m0[1u].w * (_2150 - _2049)) + _2049);
    float _2170 = fma(_2167, cbSceneParam._m0[89u].z, fma(_2165, cbSceneParam._m0[89u].y, _2163 * cbSceneParam._m0[89u].x));
    float _2173 = fma(_2167, cbSceneParam._m0[90u].z, fma(_2165, cbSceneParam._m0[90u].y, _2163 * cbSceneParam._m0[90u].x));
    float _2176 = fma(_2167, cbSceneParam._m0[91u].z, fma(_2165, cbSceneParam._m0[91u].y, _2163 * cbSceneParam._m0[91u].x));
    vec4 _2184 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1028, _1029));
    float _2186 = _2184.w;
    float _2198 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2186);
    float _2199 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2186);
    float _2200 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2186);
    uvec4 _2204 = floatBitsToUint(cbInstanceData._m0[_1083 + 5u]);
    uint _2206 = _2204.x * 14u;
    uint _2207 = _2206 + 13u;
    float _2214 = _1155 + (-1.0);
    float _2219 = (cbLight._m0[_2207].x * _2214) + 1.0;
    float _2220 = (cbLight._m0[_2207].y * _2214) + 1.0;
    float _2221 = (cbLight._m0[_2207].z * _2214) + 1.0;
    float _2222 = (cbLight._m0[_2207].w * _2214) + 1.0;
    uint _2223 = _2206 + 5u;
    float _2229 = isnan(1.0) ? _2220 : (isnan(_2220) ? 1.0 : min(_2220, 1.0));
    uint _2233 = _2206 + 4u;
    float _2242 = isnan(1.0) ? _2219 : (isnan(_2219) ? 1.0 : min(_2219, 1.0));
    uint _2246 = _2206 | 1u;
    float _2257 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_960, _961, _962));
    float _2260 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_960, _961, _962));
    float _4494 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _4505 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
    float _2265 = (isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0))) * 0.3183098733425140380859375;
    float _2267 = (isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 0.3183098733425140380859375;
    float _2274 = ((cbLight._m0[_2223].x * _2229) * _2267) + (((cbLight._m0[_2233].x * _2198) * _2242) * _2265);
    float _2275 = ((_2229 * cbLight._m0[_2223].y) * _2267) + (((cbLight._m0[_2233].y * _2199) * _2242) * _2265);
    float _2276 = ((_2229 * cbLight._m0[_2223].z) * _2267) + (((cbLight._m0[_2233].z * _2200) * _2242) * _2265);
    uvec4 _2280 = floatBitsToUint(cbLight._m0[_2206 + 12u]);
    bool _2282 = _2280.x == 0u;
    float _2293;
    float _2295;
    float _2297;
    if (_2282)
    {
        _2293 = _2274;
        _2295 = _2275;
        _2297 = _2276;
    }
    else
    {
        uint _2301 = _2206 + 6u;
        float _2317 = (dot(vec3(cbLight._m0[_2206 + 2u].xyz), vec3(_960, _961, _962)) * 0.5) + 0.5;
        float _2318 = _2317 * _2317;
        float _4516 = isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0));
        float _2319 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2320 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2293 = (((cbLight._m0[_2301].x * 0.3183098733425140380859375) * _2319) * _2320) + _2274;
        _2295 = (((cbLight._m0[_2301].y * 0.3183098733425140380859375) * _2319) * _2320) + _2275;
        _2297 = (((cbLight._m0[_2301].z * 0.3183098733425140380859375) * _2319) * _2320) + _2276;
    }
    bool _2300 = _2280.y == 0u;
    float _2338;
    float _2340;
    float _2342;
    if (_2300)
    {
        _2338 = _2293;
        _2340 = _2295;
        _2342 = _2297;
    }
    else
    {
        uint _2511 = _2206 + 7u;
        float _2527 = (dot(vec3(cbLight._m0[_2206 + 3u].xyz), vec3(_960, _961, _962)) * 0.5) + 0.5;
        float _2528 = _2527 * _2527;
        float _4532 = isnan(0.0) ? _2528 : (isnan(_2528) ? 0.0 : max(_2528, 0.0));
        float _2529 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
        float _2530 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2338 = (((cbLight._m0[_2511].x * 0.3183098733425140380859375) * _2529) * _2530) + _2293;
        _2340 = (((cbLight._m0[_2511].y * 0.3183098733425140380859375) * _2529) * _2530) + _2295;
        _2342 = (((cbLight._m0[_2511].z * 0.3183098733425140380859375) * _2529) * _2530) + _2297;
    }
    uint _2345 = _2206 + 8u;
    float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2206].w)) * _1070) * 0.949999988079071044921875);
    float _2359 = _2358 * _2358;
    float _2360 = cbLight._m0[_2206].x + _1020;
    float _2361 = cbLight._m0[_2206].y + _1021;
    float _2362 = cbLight._m0[_2206].z + _1022;
    float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
    float _2367 = _2366 * _2360;
    float _2368 = _2366 * _2361;
    float _2369 = _2366 * _2362;
    float _2370 = dot(vec3(_960, _961, _962), vec3(cbLight._m0[_2206].xyz));
    float _4548 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
    float _2373 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
    float _4559 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
    float _2374 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _2375 = dot(vec3(_960, _961, _962), vec3(_2367, _2368, _2369));
    float _4570 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2378 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
    float _2379 = dot(vec3(cbLight._m0[_2206].xyz), vec3(_2367, _2368, _2369));
    float _4581 = isnan(0.0) ? _2379 : (isnan(_2379) ? 0.0 : max(_2379, 0.0));
    float _2383 = _2359 * _2359;
    float _2387 = ((_2378 * _2378) * (_2383 + (-1.0))) + 1.0;
    float _2395 = exp2(log2(1.0 - (isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0)))) * 5.0);
    float _2396 = 0.959999978542327880859375 - _1137;
    float _2398 = 0.959999978542327880859375 - _1138;
    float _2399 = 0.959999978542327880859375 - _1139;
    float _2406 = 1.0 - _2359;
    float _2417 = (0.5 / (((_2374 * ((_2373 * _2406) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2406) + _2359) * _2373))) * _2373;
    float _4592 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2419 = (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_2383 / ((_2387 * _2387) * 3.141590118408203125));
    uint _2433 = _2206 + 9u;
    float _2444 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _1070) * 0.949999988079071044921875);
    float _2445 = _2444 * _2444;
    float _2446 = cbLight._m0[_2246].x + _1020;
    float _2447 = cbLight._m0[_2246].y + _1021;
    float _2448 = cbLight._m0[_2246].z + _1022;
    float _2452 = inversesqrt(dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448)));
    float _2453 = _2452 * _2446;
    float _2454 = _2452 * _2447;
    float _2455 = _2452 * _2448;
    float _2456 = dot(vec3(_960, _961, _962), vec3(cbLight._m0[_2246].xyz));
    float _4603 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
    float _2460 = dot(vec3(_960, _961, _962), vec3(_2453, _2454, _2455));
    float _4614 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2463 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
    float _2464 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2453, _2454, _2455));
    float _4625 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2468 = _2445 * _2445;
    float _2472 = ((_2463 * _2463) * (_2468 + (-1.0))) + 1.0;
    float _2479 = exp2(log2(1.0 - (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) * 5.0);
    float _2486 = 1.0 - _2445;
    float _2496 = (0.5 / (((_2374 * ((_2459 * _2486) + _2445)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2486) + _2445) * _2459))) * _2459;
    float _4636 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2498 = (isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0))) * (_2468 / ((_2472 * _2472) * 3.141590118408203125));
    float _2508 = (((((_2479 * _2396) + _1140) * cbLight._m0[_2433].x) * _2498) * _2229) + ((((cbLight._m0[_2345].x * _2198) * ((_2395 * _2396) + _1140)) * _2419) * _2242);
    float _2509 = (((((_2479 * _2398) + _1142) * cbLight._m0[_2433].y) * _2498) * _2229) + ((((cbLight._m0[_2345].y * _2199) * ((_2395 * _2398) + _1142)) * _2419) * _2242);
    float _2510 = (((((_2479 * _2399) + _1143) * cbLight._m0[_2433].z) * _2498) * _2229) + ((((cbLight._m0[_2345].z * _2200) * ((_2395 * _2399) + _1143)) * _2419) * _2242);
    float _2572;
    float _2574;
    float _2576;
    if (_2282)
    {
        _2572 = _2508;
        _2574 = _2509;
        _2576 = _2510;
    }
    else
    {
        uint _2578 = _2206 + 2u;
        uint _2582 = _2206 + 10u;
        float _2596 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2578].w)) * _1070) * 0.949999988079071044921875);
        float _2597 = _2596 * _2596;
        float _2598 = cbLight._m0[_2578].x + _1020;
        float _2599 = cbLight._m0[_2578].y + _1021;
        float _2600 = cbLight._m0[_2578].z + _1022;
        float _2604 = inversesqrt(dot(vec3(_2598, _2599, _2600), vec3(_2598, _2599, _2600)));
        float _2605 = _2604 * _2598;
        float _2606 = _2604 * _2599;
        float _2607 = _2604 * _2600;
        float _2608 = dot(vec3(_960, _961, _962), vec3(cbLight._m0[_2578].xyz));
        float _4647 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2612 = dot(vec3(_960, _961, _962), vec3(_2605, _2606, _2607));
        float _4658 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2615 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
        float _2616 = dot(vec3(cbLight._m0[_2578].xyz), vec3(_2605, _2606, _2607));
        float _4669 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2620 = _2597 * _2597;
        float _2624 = ((_2615 * _2615) * (_2620 + (-1.0))) + 1.0;
        float _2631 = exp2(log2(1.0 - (isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0)))) * 5.0);
        float _2638 = 1.0 - _2597;
        float _2648 = (0.5 / (((_2374 * ((_2611 * _2638) + _2597)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2638) + _2597) * _2611))) * _2611;
        float _4680 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2650 = (isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * (_2620 / ((_2624 * _2624) * 3.141590118408203125));
        float _2651 = isnan(1.0) ? _2221 : (isnan(_2221) ? 1.0 : min(_2221, 1.0));
        _2572 = (((((_2631 * _2396) + _1140) * cbLight._m0[_2582].x) * _2650) * _2651) + _2508;
        _2574 = (((((_2631 * _2398) + _1142) * cbLight._m0[_2582].y) * _2650) * _2651) + _2509;
        _2576 = (((((_2631 * _2399) + _1143) * cbLight._m0[_2582].z) * _2650) * _2651) + _2510;
    }
    float _2686;
    float _2688;
    float _2690;
    if (_2300)
    {
        _2686 = _2572;
        _2688 = _2574;
        _2690 = _2576;
    }
    else
    {
        uint _2697 = _2206 + 3u;
        uint _2701 = _2206 + 11u;
        float _2715 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2697].w)) * _1070) * 0.949999988079071044921875);
        float _2716 = _2715 * _2715;
        float _2717 = cbLight._m0[_2697].x + _1020;
        float _2718 = cbLight._m0[_2697].y + _1021;
        float _2719 = cbLight._m0[_2697].z + _1022;
        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
        float _2724 = _2723 * _2717;
        float _2725 = _2723 * _2718;
        float _2726 = _2723 * _2719;
        float _2727 = dot(vec3(_960, _961, _962), vec3(cbLight._m0[_2697].xyz));
        float _4696 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0));
        float _2731 = dot(vec3(_960, _961, _962), vec3(_2724, _2725, _2726));
        float _4707 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0));
        float _2735 = dot(vec3(cbLight._m0[_2697].xyz), vec3(_2724, _2725, _2726));
        float _4718 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2739 = _2716 * _2716;
        float _2743 = ((_2734 * _2734) * (_2739 + (-1.0))) + 1.0;
        float _2750 = exp2(log2(1.0 - (isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0)))) * 5.0);
        float _2757 = 1.0 - _2716;
        float _2767 = (0.5 / (((_2374 * ((_2730 * _2757) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2374 * _2757) + _2716) * _2730))) * _2730;
        float _4729 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
        float _2769 = (isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2739 / ((_2743 * _2743) * 3.141590118408203125));
        float _2770 = isnan(1.0) ? _2222 : (isnan(_2222) ? 1.0 : min(_2222, 1.0));
        _2686 = (((((_2750 * _2396) + _1140) * cbLight._m0[_2701].x) * _2769) * _2770) + _2572;
        _2688 = (((((_2750 * _2398) + _1142) * cbLight._m0[_2701].y) * _2769) * _2770) + _2574;
        _2690 = (((((_2750 * _2399) + _1143) * cbLight._m0[_2701].z) * _2769) * _2770) + _2576;
    }
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    float _2913;
    float _2915;
    if (_2204.y == 0u)
    {
        float _2845 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2846 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2845;
        float _2847 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2845;
        float _2848 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2845;
        uvec4 _2860 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2861 = _2860.x;
        uint _2872 = uint((float(_2860.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1029) / _2861))) + floor(float(uint(cbSceneParam._m0[85u].x * _1028) / _2861)));
        float _2882 = (log2(_2848 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2883 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0));
        uint _2886 = uint(isnan(14.0) ? _2883 : (isnan(_2883) ? 14.0 : min(_2883, 14.0)));
        uvec4 _2891 = texelFetch(g_lightClusterGridBuffer, int(((_2886 << 2u) + (_2872 << 6u)) >> 2u));
        uint _2892 = _2891.x;
        uint _2893 = _2860.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2893 >> 4u) & 15u)) + 4294967295u) & _2892) == 0u) || ((_2893 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            uint _3180 = 0u;
            uint _3189;
            bool _3190;
            for (;;)
            {
                _3189 = texelFetch(g_lightClassification, int((((_2886 << 5u) + (_2872 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                _3190 = _3189 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3190)
                {
                    frontier_phi_61_pred = _3174;
                    frontier_phi_61_pred_1 = _3179;
                    frontier_phi_61_pred_2 = _3178;
                    frontier_phi_61_pred_3 = _3177;
                    frontier_phi_61_pred_4 = _3176;
                    frontier_phi_61_pred_5 = _3175;
                }
                else
                {
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    float _3303;
                    uint _3304;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3176;
                    _3301 = _3177;
                    _3302 = _3178;
                    _3303 = _3179;
                    _3304 = _3189;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    float _3234;
                    float _3235;
                    for (;;)
                    {
                        uint _3308 = uint(findLSB(_3304)) + (_3180 << 5u);
                        uint _3305 = (_3304 + 4294967295u) & _3304;
                        uint _3310 = _3308 * 48u;
                        vec4 _3324 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3310)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3310 + 3u)).x));
                        uint _3330 = (_3308 * 48u) + 4u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3330)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3330 + 3u)).x));
                        uint _3349 = (_3308 * 48u) + 8u;
                        vec3 _3360 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x));
                        float _3364 = _3324.x - _2846;
                        float _3365 = _3324.y - _2847;
                        float _3366 = _3324.z - _2848;
                        float _3367 = dot(vec3(_3364, _3365, _3366), vec3(_3364, _3365, _3366));
                        float _3370 = inversesqrt(_3367);
                        float _3371 = _3370 * _3364;
                        float _3372 = _3370 * _3365;
                        float _3373 = _3370 * _3366;
                        float _3374 = dot(vec3(_1051, _1054, _1057), vec3(_3371, _3372, _3373));
                        float _3379 = 1.0 - (_3367 * _3324.w);
                        float _4755 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                        float _3380 = isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0));
                        float _3381 = sqrt(_3367) * _3343.w;
                        float _3384 = 1.39999997615814208984375 / (_3381 + 1.39999997615814208984375);
                        float _3385 = _3384 * _3384;
                        float _3388 = ((1.0 - _3385) * _3374) + _3385;
                        float _3391 = _3381 * _3381;
                        float _3395 = ((isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))) * _3380) / ((_3391 * 0.699999988079071044921875) + 1.0);
                        float _3399 = (-0.0) - _2846;
                        float _3400 = (-0.0) - _2847;
                        float _3401 = (-0.0) - _2848;
                        float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                        float _3406 = _3405 * _3399;
                        float _3407 = _3405 * _3400;
                        float _3408 = _3405 * _3401;
                        float _3416 = exp2(log2(1.0 / ((_3391 * 3.5) + 5.0)) * 0.25);
                        float _3417 = 1.0 - _1171;
                        float _3424 = sqrt(1.0 - ((1.0 - (_3417 * _3417)) * (1.0 - (_3416 * _3416))));
                        float _3425 = _3424 * _3424;
                        float _3426 = _3425 * _3425;
                        float _3427 = _3406 + _3371;
                        float _3428 = _3407 + _3372;
                        float _3429 = _3408 + _3373;
                        float _3433 = inversesqrt(dot(vec3(_3427, _3428, _3429), vec3(_3427, _3428, _3429)));
                        float _3437 = dot(vec3(_1051, _1054, _1057), vec3(_3406, _3407, _3408));
                        float _4771 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0));
                        float _3441 = dot(vec3(_1051, _1054, _1057), vec3(_3433 * _3427, _3433 * _3428, _3433 * _3429));
                        float _4782 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                        float _3444 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3448 = ((_3444 * _3444) * (_3426 + (-1.0))) + 1.0;
                        float _3449 = _3384 * _3425;
                        float _3450 = _3449 * _3449;
                        float _3453 = ((1.0 - _3450) * _3374) + _3450;
                        float _4793 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                        float _3454 = isnan(1.0) ? _4793 : (isnan(_4793) ? 1.0 : min(_4793, 1.0));
                        float _3455 = 1.0 - _3425;
                        float _3465 = (0.5 / (((_3454 * ((_3440 * _3455) + _3425)) + 9.9999999392252902907785028219223e-09) + (((_3454 * _3455) + _3425) * _3440))) * _3454;
                        float _4804 = isnan(0.0) ? _3465 : (isnan(_3465) ? 0.0 : max(_3465, 0.0));
                        float _3476 = (((_3426 * 3.1415927410125732421875) * (isnan(1.0) ? _4804 : (isnan(_4804) ? 1.0 : min(_4804, 1.0)))) / ((_3448 * _3448) * ((_3391 * 2.1991131305694580078125) + 3.141590118408203125))) * _3380;
                        _3233 = (_3395 * _3343.x) + _3301;
                        _3234 = (_3395 * _3343.y) + _3302;
                        _3235 = (_3395 * _3343.z) + _3303;
                        _3230 = (_3476 * _3360.x) + _3298;
                        _3231 = (_3476 * _3360.y) + _3299;
                        _3232 = (_3476 * _3360.z) + _3300;
                        if (_3305 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3232;
                            _3301 = _3233;
                            _3302 = _3234;
                            _3303 = _3235;
                            _3304 = _3305;
                        }
                    }
                    frontier_phi_61_pred = _3230;
                    frontier_phi_61_pred_1 = _3235;
                    frontier_phi_61_pred_2 = _3234;
                    frontier_phi_61_pred_3 = _3233;
                    frontier_phi_61_pred_4 = _3232;
                    frontier_phi_61_pred_5 = _3231;
                }
                _3023 = frontier_phi_61_pred;
                _3033 = frontier_phi_61_pred_1;
                _3031 = frontier_phi_61_pred_2;
                _3029 = frontier_phi_61_pred_3;
                _3027 = frontier_phi_61_pred_4;
                _3025 = frontier_phi_61_pred_5;
                uint _3181 = _3180 + 1u;
                if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3174 = _3023;
                    _3175 = _3025;
                    _3176 = _3027;
                    _3177 = _3029;
                    _3178 = _3031;
                    _3179 = _3033;
                    _3180 = _3181;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        if (((4294967295u << _3039) & _2892) == 0u)
        {
            _3142 = _3022;
            _3144 = _3024;
            _3146 = _3026;
            _3148 = _3028;
            _3150 = _3030;
            _3152 = _3032;
        }
        else
        {
            float _3167 = inversesqrt(dot(vec3(_2846, _2847, _2848), vec3(_2846, _2847, _2848)));
            float _3168 = _3167 * _2846;
            float _3169 = _3167 * _2847;
            float _3170 = _3167 * _2848;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3281 = _3022;
                float _3282 = _3024;
                float _3283 = _3026;
                float _3284 = _3028;
                float _3285 = _3030;
                float _3286 = _3032;
                uint _3287 = _3039;
                uint _3296;
                bool _3297;
                for (;;)
                {
                    _3296 = texelFetch(g_lightClassification, int((((_2886 << 5u) + (_2872 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                    _3297 = _3296 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3297)
                    {
                        frontier_phi_67_pred = _3284;
                        frontier_phi_67_pred_1 = _3285;
                        frontier_phi_67_pred_2 = _3286;
                        frontier_phi_67_pred_3 = _3283;
                        frontier_phi_67_pred_4 = _3282;
                        frontier_phi_67_pred_5 = _3281;
                    }
                    else
                    {
                        float _3481;
                        float _3482;
                        float _3483;
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3775;
                        float _3776;
                        float _3777;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        float _3496 = _3283;
                        float _3497 = _3284;
                        float _3498 = _3285;
                        float _3499 = _3286;
                        uint _3500 = _3296;
                        uint _3501;
                        vec4 _3526;
                        float _3527;
                        vec4 _3542;
                        vec3 _3554;
                        vec4 _3570;
                        vec4 _3585;
                        float _3631;
                        bool _3632;
                        for (;;)
                        {
                            uint _3511 = ((_3287 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3500));
                            _3501 = (_3500 + 4294967295u) & _3500;
                            uint _3513 = _3511 * 40u;
                            _3526 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3513)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3513 + 3u)).x));
                            _3527 = _3526.w;
                            uint _3529 = (_3511 * 40u) + 4u;
                            _3542 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3529)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3529 + 3u)).x));
                            uint _3544 = (_3511 * 40u) + 8u;
                            _3554 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3544)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3544 + 2u)).x));
                            uint _3557 = (_3511 * 40u) + 16u;
                            _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3572 = (_3511 * 40u) + 20u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            uint _3587 = (_3511 * 40u) + 24u;
                            vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3587)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3587 + 3u)).x));
                            uint _3606 = (_3511 * 40u) + 28u;
                            vec4 _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            _3631 = fma(_2848, _3619.z, fma(_2847, _3619.y, _3619.x * _2846)) + _3619.w;
                            _3632 = !((fma(_2848, _3600.z, fma(_2847, _3600.y, _3600.x * _2846)) + _3600.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3632)
                            {
                                float _3659 = _3526.x - _2846;
                                float _3660 = _3526.y - _2847;
                                float _3661 = _3526.z - _2848;
                                float _3662 = dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661));
                                float _3665 = inversesqrt(_3662);
                                float _3666 = _3665 * _3659;
                                float _3667 = _3665 * _3660;
                                float _3668 = _3665 * _3661;
                                float _3672 = 1.0 - (_3662 / (_3527 * _3527));
                                float _4815 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                                float _3673 = isnan(1.0) ? _4815 : (isnan(_4815) ? 1.0 : min(_4815, 1.0));
                                float _3677 = sqrt(_3662) * _3542.w;
                                float _3679 = 1.39999997615814208984375 / (_3677 + 1.39999997615814208984375);
                                float _3680 = _3679 * _3679;
                                float _3683 = ((1.0 - _3680) * dot(vec3(_3666, _3667, _3668), vec3(_1051, _1054, _1057))) + _3680;
                                float _3686 = _3677 * _3677;
                                float _3690 = (fma(_2848, _3570.z, fma(_2847, _3570.y, _3570.x * _2846)) + _3570.w) / _3631;
                                float _3691 = (fma(_2848, _3585.z, fma(_2847, _3585.y, _3585.x * _2846)) + _3585.w) / _3631;
                                float _3695 = 1.0 - dot(vec2(_3690, _3691), vec2(_3690, _3691));
                                float _4831 = isnan(0.0) ? _3695 : (isnan(_3695) ? 0.0 : max(_3695, 0.0));
                                float _3696 = isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0));
                                float _3697 = _3696 * (((isnan(0.0) ? _3683 : (isnan(_3683) ? 0.0 : max(_3683, 0.0))) * _3673) / ((_3686 * 0.699999988079071044921875) + 1.0));
                                float _3709 = exp2(log2(1.0 / ((_3686 * 3.5) + 5.0)) * 0.25);
                                float _3710 = 1.0 - _1171;
                                float _3717 = sqrt(1.0 - ((1.0 - (_3710 * _3710)) * (1.0 - (_3709 * _3709))));
                                float _3718 = _3717 * _3717;
                                float _3719 = _3718 * _3718;
                                float _3720 = _3666 - _3168;
                                float _3721 = _3667 - _3169;
                                float _3722 = _3668 - _3170;
                                float _3726 = inversesqrt(dot(vec3(_3720, _3721, _3722), vec3(_3720, _3721, _3722)));
                                float _3730 = dot(vec3(_1051, _1054, _1057), vec3((-0.0) - _3168, (-0.0) - _3169, (-0.0) - _3170));
                                float _4842 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3734 = dot(vec3(_1051, _1054, _1057), vec3(_3726 * _3720, _3726 * _3721, _3726 * _3722));
                                float _4853 = isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0));
                                float _3737 = isnan(1.0) ? _4853 : (isnan(_4853) ? 1.0 : min(_4853, 1.0));
                                float _3741 = ((_3737 * _3737) * (_3719 + (-1.0))) + 1.0;
                                float _3742 = _3679 * _3718;
                                float _3743 = _3742 * _3742;
                                float _3749 = ((1.0 - _3743) * dot(vec3(_1051, _1054, _1057), vec3(_3666, _3667, _3668))) + _3743;
                                float _4864 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4864 : (isnan(_4864) ? 1.0 : min(_4864, 1.0));
                                float _3751 = 1.0 - _3718;
                                float _3761 = (0.5 / (((_3750 * ((_3733 * _3751) + _3718)) + 9.9999999392252902907785028219223e-09) + (((_3750 * _3751) + _3718) * _3733))) * _3750;
                                float _4875 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3771 = (_3696 * _3673) * (((_3719 * 3.1415927410125732421875) * (isnan(1.0) ? _4875 : (isnan(_4875) ? 1.0 : min(_4875, 1.0)))) / ((_3741 * _3741) * ((_3686 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3771 * _3554.x;
                                frontier_phi_73_pred_1 = _3771 * _3554.y;
                                frontier_phi_73_pred_2 = _3697 * _3542.z;
                                frontier_phi_73_pred_3 = _3697 * _3542.y;
                                frontier_phi_73_pred_4 = _3697 * _3542.x;
                                frontier_phi_73_pred_5 = _3771 * _3554.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3775 = frontier_phi_73_pred;
                            _3776 = frontier_phi_73_pred_1;
                            _3780 = frontier_phi_73_pred_2;
                            _3779 = frontier_phi_73_pred_3;
                            _3778 = frontier_phi_73_pred_4;
                            _3777 = frontier_phi_73_pred_5;
                            _3484 = _3778 + _3497;
                            _3485 = _3779 + _3498;
                            _3486 = _3780 + _3499;
                            _3481 = _3775 + _3494;
                            _3482 = _3776 + _3495;
                            _3483 = _3777 + _3496;
                            if (_3501 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3483;
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3501;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3484;
                        frontier_phi_67_pred_1 = _3485;
                        frontier_phi_67_pred_2 = _3486;
                        frontier_phi_67_pred_3 = _3483;
                        frontier_phi_67_pred_4 = _3482;
                        frontier_phi_67_pred_5 = _3481;
                    }
                    _3149 = frontier_phi_67_pred;
                    _3151 = frontier_phi_67_pred_1;
                    _3153 = frontier_phi_67_pred_2;
                    _3147 = frontier_phi_67_pred_3;
                    _3145 = frontier_phi_67_pred_4;
                    _3143 = frontier_phi_67_pred_5;
                    uint _3288 = _3287 + 1u;
                    if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3281 = _3143;
                        _3282 = _3145;
                        _3283 = _3147;
                        _3284 = _3149;
                        _3285 = _3151;
                        _3286 = _3153;
                        _3287 = _3288;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3151;
                frontier_phi_55_56_ladder_1 = _3153;
                frontier_phi_55_56_ladder_2 = _3149;
                frontier_phi_55_56_ladder_3 = _3147;
                frontier_phi_55_56_ladder_4 = _3145;
                frontier_phi_55_56_ladder_5 = _3143;
            }
            else
            {
                frontier_phi_55_56_ladder = _3030;
                frontier_phi_55_56_ladder_1 = _3032;
                frontier_phi_55_56_ladder_2 = _3028;
                frontier_phi_55_56_ladder_3 = _3026;
                frontier_phi_55_56_ladder_4 = _3024;
                frontier_phi_55_56_ladder_5 = _3022;
            }
            _3142 = frontier_phi_55_56_ladder_5;
            _3144 = frontier_phi_55_56_ladder_4;
            _3146 = frontier_phi_55_56_ladder_3;
            _3148 = frontier_phi_55_56_ladder_2;
            _3150 = frontier_phi_55_56_ladder;
            _3152 = frontier_phi_55_56_ladder_1;
        }
        float _3157 = isnan(1.0) ? _1155 : (isnan(_1155) ? 1.0 : min(_1155, 1.0));
        _2905 = (_3157 * _3148) + _2338;
        _2907 = (_3157 * _3150) + _2340;
        _2909 = (_3157 * _3152) + _2342;
        _2911 = ((_3142 * _1140) * _3157) + _2686;
        _2913 = ((_3144 * _1142) * _3157) + _2688;
        _2915 = ((_3146 * _1143) * _3157) + _2690;
    }
    else
    {
        _2905 = _2338;
        _2907 = _2340;
        _2909 = _2342;
        _2911 = _2686;
        _2913 = _2688;
        _2915 = _2690;
    }
    uint _2921 = _1084 + uint(cbMatDynParam._m0[0u].w);
    float _2927 = (((((cbMtdParam._m0[22u].x * _864.x) * cbMtdParam._m0[32u].x) * _885) + _637) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2921].x;
    float _2928 = (((((cbMtdParam._m0[22u].y * _864.y) * cbMtdParam._m0[32u].x) * _885) + _638) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2921].y;
    float _2929 = (((((cbMtdParam._m0[22u].z * _864.z) * cbMtdParam._m0[32u].x) * _885) + _639) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2921].z;
    float _4891 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _4902 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
    float _4913 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _2946 = (((isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2905 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1155))) + ((_2911 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1952)) * cbPerFrame._m0[3u].x)) + _2927;
    float _2948 = (_2928 + ((_2913 + ((isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0))) * _1952)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0))) * (_2907 + ((isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))) * _1155)));
    float _2950 = (_2929 + ((_2915 + ((isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))) * _1952)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0))) * (_2909 + ((isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0))) * _1155)));
    float _4939 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2963 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
    uint _2964 = _1083 + 6u;
    float _2972 = _1028 / cbSceneParam._m0[86u].x;
    float _2973 = _1029 / cbSceneParam._m0[86u].y;
    vec4 _2987 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, (log2((isnan(cbSceneParam._m0[77u].w) ? _983 : (isnan(_983) ? cbSceneParam._m0[77u].w : min(_983, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2989 = _2987.x;
    float _2990 = _2987.y;
    float _2991 = _2987.z;
    float _2992 = _2987.w;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_983 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_983) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _983 : min(cbSceneParam._m0[80u].w, _983));
        float _3048 = _3047 / _983;
        float _3059 = _3048 * _1013;
        float _3060 = _1014 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3062 = _3048 * _1015;
        float _3064 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3065 = _3064 + cbSceneParam._m0[79u].w;
        float _3066 = cbSceneParam._m0[79u].w - _3060;
        float _3072 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3062 * _3062));
        float _3075 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3072;
        float _3080 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3082 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3243;
        if (abs((_3061 - _3064) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3243 = ((((_3065 > 0.0) ? exp2(_3080 * _3065) : (2.0 - exp2(_3082 * _3065))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3075;
        }
        else
        {
            float _3203 = 1.0 / cbSceneParam._m0[80u].x;
            float _3204 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : max(_3065, _3066));
            float _3205 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : min(_3065, _3066));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            _3243 = ((abs(_3072 / _3061) * cbSceneParam._m0[80u].y) * ((((_3214 - _3215) * 2.0) - ((exp2(_3080 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0)))) - exp2(_3080 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))))) * _3203)) - ((exp2(_3082 * _3214) - exp2(_3082 * _3215)) * _3203))) + (_3075 * cbSceneParam._m0[80u].z);
        }
        vec4 _3245 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2972, _2973, 1.0), 0.0);
        float _3254 = exp2((_3243 * (-1.44269502162933349609375)) * (1.0 - _3245.w));
        float _3255 = log2(_3254);
        float _3271 = log2(_2992);
        _3084 = (exp2(_3271 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].x)) * _3245.x) / cbSceneParam._m0[78u].x)) + _2989;
        _3086 = (exp2(_3271 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].y)) * _3245.y) / cbSceneParam._m0[78u].y)) + _2990;
        _3088 = (exp2(_3271 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3255 * cbSceneParam._m0[78u].z)) * _3245.z) / cbSceneParam._m0[78u].z)) + _2991;
        _3090 = _3254 * _2992;
    }
    else
    {
        _3084 = _2989;
        _3086 = _2990;
        _3088 = _2991;
        _3090 = _2992;
    }
    float _3101 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3102 = _3101 == 3.0;
    float _3103 = log2(_3090);
    float _3107 = exp2(_3103 * cbSceneParam._m0[78u].x);
    float _3108 = exp2(_3103 * cbSceneParam._m0[78u].y);
    float _3109 = exp2(_3103 * cbSceneParam._m0[78u].z);
    float _3110 = _3107 * (isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0)));
    float _3111 = _3108 * (isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0)));
    float _3112 = _3109 * (isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0)));
    float _3121 = (_3101 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3121 * (_3102 ? _3110 : (_3110 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.y = _3121 * (_3102 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3086)));
    SV_Target.z = _3121 * (_3102 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3088)));
    SV_Target.w = cbInstanceData._m0[_2964].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2927) * _2963) * _3107) * _3121;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2928) * _2963) * _3108) * _3121;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2929) * _2963) * _3109) * _3121;
    SV_Target_1.w = cbInstanceData._m0[_2964].w;
}


