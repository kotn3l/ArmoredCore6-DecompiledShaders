#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1566;
float _3981;
float _3982;
float _3983;
float _3984;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _276 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_263 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _281 = _276.z;
    float _282 = _276.w;
    vec4 _304 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _309 = _304.w;
    float _321 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _281) * exp2(log2(1.0 - _309) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    vec4 _337 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _347 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _355 = (_347 - (((_337.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _347))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4003 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _358 = _323 - (_356 * _323);
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    vec4 _373 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _376 = _373.y;
    float _377 = _376 * (isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0)));
    float _386 = exp2(log2(cbMtdParam._m0[32u].w * _309) * cbMtdParam._m0[31u].z);
    float _388 = _386 - (_356 * _386);
    float _389 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _390 = isnan(1.0) ? _389 : (isnan(_389) ? 1.0 : min(_389, 1.0));
    float _401 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_282) * 4.5));
    float _410 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _281) * _401)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _411 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _412 = isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0));
    float _423 = exp2(log2((1.0 - (((_401 * _401) * _281) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _424 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = (((isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0))) - _282) * _376) + _282;
    vec4 _440 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    float _453 = (_373.x + (-0.02500000037252902984619140625)) * 8.0;
    float _455 = roundEven(_453);
    float _456 = cbMtdParam._m0[10u].x * _440.x;
    float _457 = cbMtdParam._m0[10u].y * _440.y;
    float _458 = cbMtdParam._m0[10u].z * _440.z;
    vec4 _470 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _263) + cbTextureTilingScale._m0[1u].w));
    float _481 = cbMtdParam._m0[9u].x * _470.x;
    float _482 = cbMtdParam._m0[9u].y * _470.y;
    float _483 = cbMtdParam._m0[9u].z * _470.z;
    float _490 = ((_481 - _456) * _428) + _456;
    float _491 = ((_482 - _457) * _428) + _457;
    float _492 = ((_483 - _458) * _428) + _458;
    vec4 _504 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _263) + cbTextureTilingScale._m0[6u].w));
    float _524 = (((cbMtdParam._m0[20u].x * _504.x) - _490) * _412) + _490;
    float _525 = (((cbMtdParam._m0[20u].y * _504.y) - _491) * _412) + _491;
    float _526 = (((cbMtdParam._m0[20u].z * _504.z) - _492) * _412) + _492;
    vec4 _538 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w));
    float _558 = (((cbMtdParam._m0[29u].x * _538.x) - _524) * _390) + _524;
    float _559 = (((cbMtdParam._m0[29u].y * _538.y) - _525) * _390) + _525;
    float _560 = (((cbMtdParam._m0[29u].z * _538.z) - _526) * _390) + _526;
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[30u].x;
    _201[0u] = cbMtdParam._m0[30u].y;
    _202[0u] = cbMtdParam._m0[30u].z;
    _200[1u] = cbMtdParam._m0[28u].x;
    _201[1u] = cbMtdParam._m0[28u].y;
    _202[1u] = cbMtdParam._m0[28u].z;
    _200[2u] = cbMtdParam._m0[27u].x;
    _201[2u] = cbMtdParam._m0[27u].y;
    _202[2u] = cbMtdParam._m0[27u].z;
    _200[3u] = cbMtdParam._m0[26u].x;
    _201[3u] = cbMtdParam._m0[26u].y;
    _202[3u] = cbMtdParam._m0[26u].z;
    _200[4u] = cbMtdParam._m0[25u].x;
    _201[4u] = cbMtdParam._m0[25u].y;
    _202[4u] = cbMtdParam._m0[25u].z;
    _200[5u] = cbMtdParam._m0[24u].x;
    _201[5u] = cbMtdParam._m0[24u].y;
    _202[5u] = cbMtdParam._m0[24u].z;
    float _629 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    uint _632 = uint(int(isnan(5.0) ? _629 : (isnan(_629) ? 5.0 : min(_629, 5.0))));
    float _639 = _200[_632] * _376;
    float _640 = _201[_632] * _376;
    float _641 = _202[_632] * _376;
    float _642 = _639 + ((_304.x * 4.5) * (((_481 - _558) * _377) + _558));
    float _643 = _640 + ((_304.y * 4.5) * (((_482 - _559) * _377) + _559));
    float _644 = _641 + ((_304.z * 4.5) * (((_483 - _560) * _377) + _560));
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[37u].w;
    _196[0u] = cbMtdParam._m0[38u].x;
    _195[1u] = cbMtdParam._m0[39u].w;
    _196[1u] = cbMtdParam._m0[40u].x;
    _195[2u] = cbMtdParam._m0[40u].y;
    _196[2u] = cbMtdParam._m0[40u].z;
    _195[3u] = cbMtdParam._m0[40u].w;
    _196[3u] = cbMtdParam._m0[41u].x;
    _195[4u] = cbMtdParam._m0[41u].y;
    _196[4u] = cbMtdParam._m0[41u].z;
    float _677 = roundEven(5.0 - _453);
    float _678 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = isnan(4.0) ? _678 : (isnan(_678) ? 4.0 : min(_678, 4.0));
    float _681 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    uint _683 = uint(int(isnan(4.0) ? _681 : (isnan(_681) ? 4.0 : min(_681, 4.0))));
    float _695 = ((cbMtdParam._m0[42u].z - _196[_683]) * _428) + _196[_683];
    float _703 = ((cbMtdParam._m0[43u].x - _695) * _412) + _695;
    float _708 = ((cbMtdParam._m0[43u].z - _703) * _390) + _703;
    float _713 = ((cbMtdParam._m0[39u].z - _708) * _377) + _708;
    vec4 _727 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _263) + cbTextureTilingScale._m0[7u].w));
    float _729 = _727.x;
    float _730 = _727.y;
    float _732 = _727.z + _195[_683];
    vec4 _744 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _263) + cbTextureTilingScale._m0[10u].w));
    float _752 = (((cbMtdParam._m0[42u].y - _732) + _744.z) * _428) + _732;
    vec4 _765 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _263) + cbTextureTilingScale._m0[12u].w));
    float _773 = (((cbMtdParam._m0[42u].w - _752) + _765.z) * _412) + _752;
    float _779 = ((((_281 * 2.0) * _773) - _773) * cbMtdParam._m0[34u].x) + _773;
    vec4 _792 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _263) + cbTextureTilingScale._m0[13u].w));
    float _800 = (((_792.z + cbMtdParam._m0[43u].y) - _779) * _390) + _779;
    float _804 = (((cbMtdParam._m0[39u].y + _337.z) - _800) * _377) + _800;
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _866 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_835 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_839 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _881 = (-0.0) - ((_839 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _885 = (_839 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _886 = isnan(_885) ? _881 : (isnan(_881) ? _885 : min(_881, _885));
    float _4089 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _887 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _915 = ((_744.x - _729) * _428) + _729;
    float _916 = ((_744.y - _730) * _428) + _730;
    float _921 = ((_765.x - _915) * _412) + _915;
    float _922 = ((_765.y - _916) * _412) + _916;
    float _927 = ((_792.x - _921) * _390) + _921;
    float _928 = ((_792.y - _922) * _390) + _922;
    float _937 = ((((_337.x - _927) * _377) + _927) * 2.0) + (-1.0);
    float _938 = ((((_337.y - _928) * _377) + _928) * 2.0) + (-1.0);
    float _939 = dot(vec2(_937, _938), vec2(_937, _938));
    float _4100 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _944 = sqrt(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))));
    float _947 = (cbMtdParam._m0[34u].z * ((_276.x * 2.0) + (-1.0))) + _937;
    float _948 = (cbMtdParam._m0[34u].z * ((_276.y * 2.0) + (-1.0))) + _938;
    float _951 = fma(_944, _242 * NORMAL.x, fma(_948, _249 * TANGENT.x, (_235 * _227) * _947));
    float _954 = fma(_944, _242 * NORMAL.y, fma(_948, _249 * TANGENT.y, (_235 * _228) * _947));
    float _957 = fma(_944, _242 * NORMAL.z, fma(_948, _249 * TANGENT.z, (_235 * _229) * _947));
    float _961 = inversesqrt(dot(vec3(_951, _954, _957), vec3(_951, _954, _957)));
    float _962 = _961 * _951;
    float _963 = _961 * _954;
    float _964 = _961 * _957;
    float _4111 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _965 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _4122 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4133 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4144 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4155 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _969 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
    float _985 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (_835 / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (_839 / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    vec4 _1029 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1031 = _1029.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1249 = sqrt(((_1015 * _1015) + (_1016 * _1016)) + (_1017 * _1017));
        float _1255 = (cbMatDynParam._m0[5u].x * _1249) + cbMatDynParam._m0[5u].y;
        float _4166 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1260 = (cbMatDynParam._m0[5u].z * _1249) + cbMatDynParam._m0[5u].w;
        float _4177 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) - _1256)) + _1256) < ((_1031 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1042 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1043 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1045 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1047 = _1045.w;
    float _1065 = fma(_964, cbSceneParam._m0[5u].z, fma(_963, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _962));
    float _1068 = fma(_964, cbSceneParam._m0[6u].z, fma(_963, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _962));
    float _1071 = fma(_964, cbSceneParam._m0[7u].z, fma(_963, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _962));
    vec4 _1073 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1084 = (((_1073.y - _965) + (_1073.w * _965)) * cbMtdParam._m0[3u].x) + _965;
    uint _1097 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1098 = _1097 + 9u;
    uint _1099 = _1098 + uint(cbMatDynParam._m0[0u].w);
    float _1105 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * cbInstanceData._m0[_1099].x;
    float _1106 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0)))) * cbInstanceData._m0[_1099].y;
    float _1107 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1099].z;
    float _4188 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
    float _4199 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1109 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
    float _4210 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    vec4 _1111 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1116 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1127 = (((_1116.x - _969) + (_1116.w * _969)) * cbMtdParam._m0[3u].x) + _969;
    float _1140 = (cbMtdParam._m0[3u].x * (((_1108 * _1047) - _1108) + _1111.x)) + _1108;
    float _1141 = (cbMtdParam._m0[3u].x * (((_1109 * _1047) - _1109) + _1111.y)) + _1109;
    float _1142 = (cbMtdParam._m0[3u].x * (((_1110 * _1047) - _1110) + _1111.z)) + _1110;
    float _1143 = 1.0 - _1127;
    float _1144 = _1143 * _1140;
    float _1145 = _1143 * _1141;
    float _1146 = _1143 * _1142;
    float _1151 = (_1140 + (-0.039999999105930328369140625)) * _1127;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _1127;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1127;
    float _1154 = _1151 + 0.039999999105930328369140625;
    float _1156 = _1152 + 0.039999999105930328369140625;
    float _1157 = _1153 + 0.039999999105930328369140625;
    vec4 _1166 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1042, cbSceneParam._m0[86u].y * _1043));
    float _1169 = _1166.x * TEXCOORD_5.w;
    float _1170 = dot(vec3(_962, _963, _964), vec3(_1022, _1023, _1024));
    float _1173 = _1170 * 2.0;
    float _1177 = (_1173 * _962) - _1022;
    float _1178 = (_1173 * _963) - _1023;
    float _1179 = (_1173 * _964) - _1024;
    float _1183 = abs(dot(vec3(_1022, _1023, _1024), vec3(_962, _963, _964)));
    float _4221 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1185 = sqrt(_1084);
    float _1196 = exp2((_1185 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1185 * 3.0));
    float _1202 = (1.0 - _1196) * ((_1185 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1203 = _1196 * _1185;
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1565;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1292 = fma(_1239, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231));
        float _1296 = fma(_1239, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231));
        float _1300 = fma(_1239, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231));
        float _1324 = _1231 + _962;
        float _1325 = _1235 + _963;
        float _1326 = _1239 + _964;
        float _1336 = fma(_1326, cbModelParam._m0[26u].z, fma(_1325, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1324)) - _1292;
        float _1337 = fma(_1326, cbModelParam._m0[27u].z, fma(_1325, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1324)) - _1296;
        float _1338 = fma(_1326, cbModelParam._m0[28u].z, fma(_1325, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1324)) - _1300;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1354 = ((_1342 * _1336) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1292 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1342 * _1337) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1296 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1338) / cbModelParam._m0[34u].z) + ((((((_1300 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1393 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1359.x + (-0.5));
        float _1395 = _1393 * (_1359.y + (-0.5));
        float _1396 = _1393 * (_1359.z + (-0.5));
        float _1403 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1366.x + (-0.5));
        float _1405 = _1403 * (_1366.y + (-0.5));
        float _1406 = _1403 * (_1366.z + (-0.5));
        float _1413 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1373.x + (-0.5));
        float _1415 = _1413 * (_1373.y + (-0.5));
        float _1416 = _1413 * (_1373.z + (-0.5));
        float _1423 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1380.x + (-0.5));
        float _1425 = _1423 * (_1380.y + (-0.5));
        float _1426 = _1423 * (_1380.z + (-0.5));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = _1394 * 0.5;
        float _1431 = _1404 * 0.5;
        float _1432 = _1414 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1447 = (dot(vec3(_962, _963, _964), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4247 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1457 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4258 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4269 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * (_1459 + 1.0))) + _1464) * _1427;
        float _1474 = _1395 * 0.5;
        float _1475 = _1405 * 0.5;
        float _1476 = _1415 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_962, _963, _964), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4280 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4291 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4302 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0))) * (_1501 + 1.0))) + _1506) * _1428;
        float _1516 = _1396 * 0.5;
        float _1517 = _1406 * 0.5;
        float _1518 = _1416 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_962, _963, _964), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4313 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4324 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4335 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_1543 + 1.0))) + _1548) * _1429;
        _1565 = _1396;
        _1567 = _1395;
        _1568 = _1394;
        _1569 = _1406;
        _1570 = _1405;
        _1571 = _1404;
        _1572 = _1416;
        _1573 = _1415;
        _1574 = _1414;
        _1575 = _1429;
        _1576 = _1428;
        _1577 = _1427;
        _1578 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1579 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1580 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1566;
        _1567 = _1566;
        _1568 = _1566;
        _1569 = _1566;
        _1570 = _1566;
        _1571 = _1566;
        _1572 = _1566;
        _1573 = _1566;
        _1574 = _1566;
        _1575 = _1566;
        _1576 = _1566;
        _1577 = _1566;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1606 = fma(_1239, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231));
        float _1610 = fma(_1239, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231));
        float _1614 = fma(_1239, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231));
        float _1636 = _1231 + _962;
        float _1637 = _1235 + _963;
        float _1638 = _1239 + _964;
        float _1648 = fma(_1638, cbModelParam._m0[30u].z, fma(_1637, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1636)) - _1606;
        float _1649 = fma(_1638, cbModelParam._m0[31u].z, fma(_1637, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1636)) - _1610;
        float _1650 = fma(_1638, cbModelParam._m0[32u].z, fma(_1637, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1636)) - _1614;
        float _1654 = inversesqrt(dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650)));
        float _1666 = ((_1654 * _1648) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1606 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1667 = ((_1654 * _1649) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1610 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1668 = ((_1654 * _1650) / cbModelParam._m0[35u].z) + ((((((_1614 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        float _1703 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1670.x + (-0.5));
        float _1705 = _1703 * (_1670.y + (-0.5));
        float _1706 = _1703 * (_1670.z + (-0.5));
        float _1713 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1677.x + (-0.5));
        float _1715 = _1713 * (_1677.y + (-0.5));
        float _1716 = _1713 * (_1677.z + (-0.5));
        float _1723 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1684.x + (-0.5));
        float _1725 = _1723 * (_1684.y + (-0.5));
        float _1726 = _1723 * (_1684.z + (-0.5));
        float _1733 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1691.x + (-0.5));
        float _1735 = _1733 * (_1691.y + (-0.5));
        float _1736 = _1733 * (_1691.z + (-0.5));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1739 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1740 = _1704 * 0.5;
        float _1741 = _1714 * 0.5;
        float _1742 = _1724 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_962, _963, _964), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4376 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4387 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4398 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * (_1767 + 1.0))) + _1772) * _1737;
        float _1782 = _1705 * 0.5;
        float _1783 = _1715 * 0.5;
        float _1784 = _1725 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_962, _963, _964), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4409 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1738 + 9.9999997473787516355514526367188e-06);
        float _4420 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4431 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_1809 + 1.0))) + _1814) * _1738;
        float _1824 = _1706 * 0.5;
        float _1825 = _1716 * 0.5;
        float _1826 = _1726 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_962, _963, _964), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4442 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1739 + 9.9999997473787516355514526367188e-06);
        float _4453 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4464 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0))) * (_1851 + 1.0))) + _1856) * _1739;
        _1873 = _1706;
        _1874 = _1705;
        _1875 = _1704;
        _1876 = _1716;
        _1877 = _1715;
        _1878 = _1714;
        _1879 = _1726;
        _1880 = _1725;
        _1881 = _1724;
        _1882 = _1739;
        _1883 = _1738;
        _1884 = _1737;
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
        _1886 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
        _1887 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
    }
    else
    {
        _1873 = _1566;
        _1874 = _1566;
        _1875 = _1566;
        _1876 = _1566;
        _1877 = _1566;
        _1878 = _1566;
        _1879 = _1566;
        _1880 = _1566;
        _1881 = _1566;
        _1882 = _1566;
        _1883 = _1566;
        _1884 = _1566;
        _1885 = 0.0;
        _1886 = 0.0;
        _1887 = 0.0;
    }
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1578)) + _1578;
    float _1898 = (cbModelParam._m0[1u].x * (_1886 - _1579)) + _1579;
    float _1899 = (cbModelParam._m0[1u].x * (_1887 - _1580)) + _1580;
    float _1920 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1897));
    float _1939 = _1177 * 0.5;
    float _1940 = _1178 * 0.5;
    float _1941 = _1179 * 0.5;
    float _1942 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1875, _1878, _1881, _1884));
    float _1945 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1874, _1877, _1880, _1883));
    float _1948 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1982;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1955 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1565, _1569, _1572, _1575));
        float _1959 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1567, _1570, _1573, _1576));
        float _1963 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1568, _1571, _1574, _1577));
        float _1970 = dot(vec4(cbModelParam._m0[39u]), vec4(_1939, _1940, _1941, 1.0));
        _1982 = dot(vec3(isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1970) ? 0.0 : (isnan(0.0) ? _1970 : max(0.0, _1970))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1982 = 1.0;
    }
    float _1993;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1984 = dot(vec4(cbModelParam._m0[40u]), vec4(_1939, _1940, _1941, 1.0));
        _1993 = dot(vec3(isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1993 = 1.0;
    }
    float _1997 = (_1993 * cbModelParam._m0[1u].x) + (_1982 * (1.0 - cbModelParam._m0[1u].x));
    float _2007 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1084);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2007 : min(cbModelParam._m0[25u].z, _2007));
    float _2090;
    float _2092;
    float _2094;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2057 = fma(_1239, cbModelParam._m0[13u].z, fma(_1235, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1231)) + cbModelParam._m0[13u].w;
        float _2061 = fma(_1239, cbModelParam._m0[14u].z, fma(_1235, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1231)) + cbModelParam._m0[14u].w;
        float _2065 = fma(_1239, cbModelParam._m0[15u].z, fma(_1235, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1231)) + cbModelParam._m0[15u].w;
        float _2068 = fma(_1179, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177));
        float _2071 = fma(_1179, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177));
        float _2074 = fma(_1179, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177));
        float _2102;
        if (_2068 > 0.0)
        {
            _2102 = abs((1.0 - _2057) / _2068);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2057 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2102 = frontier_phi_17_15_ladder;
        }
        float _2307;
        if (_2071 > 0.0)
        {
            _2307 = abs((1.0 - _2061) / _2071);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2061 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2307 = frontier_phi_26_22_ladder;
        }
        float _2561;
        if (_2074 > 0.0)
        {
            _2561 = abs((1.0 - _2065) / _2074);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2065 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2561 = frontier_phi_38_33_ladder;
        }
        float _2563 = isnan(_2307) ? _2102 : (isnan(_2102) ? _2307 : min(_2102, _2307));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _2068) + _2057;
        float _2569 = (_2564 * _2071) + _2061;
        float _2570 = (_2564 * _2074) + _2065;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2573 = (-1.0) - _2571;
        float _2575 = _2571 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2570 > _2575) || ((_2570 < _2573) || ((_2569 > _2575) || ((_2569 < _2573) || ((_2568 < _2573) || (_2568 > _2575))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2698 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2570, cbModelParam._m0[9u].z, fma(_2569, cbModelParam._m0[9u].y, _2568 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2570, cbModelParam._m0[10u].z, fma(_2569, cbModelParam._m0[10u].y, _2568 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2570, cbModelParam._m0[11u].z, fma(_2569, cbModelParam._m0[11u].y, _2568 * cbModelParam._m0[11u].x))), _2008);
            frontier_phi_16_38_ladder = _2698.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2698.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2698.x * cbModelParam._m0[1u].y;
        }
        _2090 = frontier_phi_16_38_ladder_2;
        _2092 = frontier_phi_16_38_ladder_1;
        _2094 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1177, _1178, _1179), _2008);
        _2090 = _2078.x * cbModelParam._m0[1u].y;
        _2092 = _2078.y * cbModelParam._m0[1u].y;
        _2094 = _2078.z * cbModelParam._m0[1u].y;
    }
    float _2098 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1084);
    float _2099 = isnan(_2098) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2098 : min(cbModelParam._m0[25u].w, _2098));
    float _2191;
    float _2193;
    float _2195;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2155 = fma(_1239, cbModelParam._m0[21u].z, fma(_1235, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1231)) + cbModelParam._m0[21u].w;
        float _2159 = fma(_1239, cbModelParam._m0[22u].z, fma(_1235, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1231)) + cbModelParam._m0[22u].w;
        float _2163 = fma(_1239, cbModelParam._m0[23u].z, fma(_1235, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1231)) + cbModelParam._m0[23u].w;
        float _2166 = fma(_1179, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177));
        float _2169 = fma(_1179, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177));
        float _2172 = fma(_1179, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177));
        float _2312;
        if (_2166 > 0.0)
        {
            _2312 = abs((1.0 - _2155) / _2166);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2155 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2312 = frontier_phi_28_24_ladder;
        }
        float _2588;
        if (_2169 > 0.0)
        {
            _2588 = abs((1.0 - _2159) / _2169);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2169 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2159 + 1.0) / _2169);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2588 = frontier_phi_40_35_ladder;
        }
        float _2801;
        if (_2172 > 0.0)
        {
            _2801 = abs((1.0 - _2163) / _2172);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2172 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2163 + 1.0) / _2172);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2801 = frontier_phi_49_46_ladder;
        }
        float _2803 = isnan(_2588) ? _2312 : (isnan(_2312) ? _2588 : min(_2312, _2588));
        float _2804 = isnan(_2801) ? _2803 : (isnan(_2803) ? _2801 : min(_2803, _2801));
        float _2808 = (_2804 * _2166) + _2155;
        float _2809 = (_2804 * _2169) + _2159;
        float _2810 = (_2804 * _2172) + _2163;
        float _2811 = _2804 * 9.9999997473787516355514526367188e-05;
        float _2812 = (-1.0) - _2811;
        float _2814 = _2811 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2810 > _2814) || ((_2810 < _2812) || ((_2809 > _2814) || ((_2809 < _2812) || ((_2808 < _2812) || (_2808 > _2814))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3038 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2810, cbModelParam._m0[17u].z, fma(_2809, cbModelParam._m0[17u].y, _2808 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2810, cbModelParam._m0[18u].z, fma(_2809, cbModelParam._m0[18u].y, _2808 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2810, cbModelParam._m0[19u].z, fma(_2809, cbModelParam._m0[19u].y, _2808 * cbModelParam._m0[19u].x))), _2099);
            frontier_phi_25_49_ladder = _3038.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3038.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3038.x * cbModelParam._m0[1u].z;
        }
        _2191 = frontier_phi_25_49_ladder_2;
        _2193 = frontier_phi_25_49_ladder_1;
        _2195 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2175 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1177, _1178, _1179), _2099);
        _2191 = _2175.x * cbModelParam._m0[1u].z;
        _2193 = _2175.y * cbModelParam._m0[1u].z;
        _2195 = _2175.z * cbModelParam._m0[1u].z;
    }
    float _2208 = (((_1202 * _1154) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2191 - _2090)) + _2090);
    float _2210 = (((_1202 * _1156) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2193 - _2092)) + _2092);
    float _2212 = (((_1202 * _1157) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2195 - _2094)) + _2094);
    float _2215 = fma(_2212, cbSceneParam._m0[89u].z, fma(_2210, cbSceneParam._m0[89u].y, _2208 * cbSceneParam._m0[89u].x));
    float _2218 = fma(_2212, cbSceneParam._m0[90u].z, fma(_2210, cbSceneParam._m0[90u].y, _2208 * cbSceneParam._m0[90u].x));
    float _2221 = fma(_2212, cbSceneParam._m0[91u].z, fma(_2210, cbSceneParam._m0[91u].y, _2208 * cbSceneParam._m0[91u].x));
    uvec4 _2231 = floatBitsToUint(cbInstanceData._m0[_1097 + 5u]);
    uint _2233 = _2231.x * 14u;
    uint _2234 = _2233 + 13u;
    float _2241 = _1169 + (-1.0);
    float _2246 = (cbLight._m0[_2234].x * _2241) + 1.0;
    float _2247 = (cbLight._m0[_2234].y * _2241) + 1.0;
    float _2248 = (cbLight._m0[_2234].z * _2241) + 1.0;
    float _2249 = (cbLight._m0[_2234].w * _2241) + 1.0;
    uint _2250 = _2233 + 5u;
    float _2256 = isnan(1.0) ? _2247 : (isnan(_2247) ? 1.0 : min(_2247, 1.0));
    uint _2260 = _2233 + 4u;
    float _2266 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
    uint _2270 = _2233 | 1u;
    float _2281 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_962, _963, _964));
    float _2284 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_962, _963, _964));
    float _4600 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _4611 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2289 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * 0.3183098733425140380859375;
    float _2291 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * 0.3183098733425140380859375;
    float _2298 = ((cbLight._m0[_2250].x * _2256) * _2291) + ((cbLight._m0[_2260].x * _2266) * _2289);
    float _2299 = ((_2256 * cbLight._m0[_2250].y) * _2291) + ((_2266 * cbLight._m0[_2260].y) * _2289);
    float _2300 = ((_2256 * cbLight._m0[_2250].z) * _2291) + ((_2266 * cbLight._m0[_2260].z) * _2289);
    uvec4 _2304 = floatBitsToUint(cbLight._m0[_2233 + 12u]);
    bool _2306 = _2304.x == 0u;
    float _2317;
    float _2319;
    float _2321;
    if (_2306)
    {
        _2317 = _2298;
        _2319 = _2299;
        _2321 = _2300;
    }
    else
    {
        uint _2325 = _2233 + 6u;
        float _2341 = (dot(vec3(cbLight._m0[_2233 + 2u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2342 = _2341 * _2341;
        float _4622 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2343 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
        float _2344 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2317 = (((cbLight._m0[_2325].x * 0.3183098733425140380859375) * _2343) * _2344) + _2298;
        _2319 = (((cbLight._m0[_2325].y * 0.3183098733425140380859375) * _2343) * _2344) + _2299;
        _2321 = (((cbLight._m0[_2325].z * 0.3183098733425140380859375) * _2343) * _2344) + _2300;
    }
    bool _2324 = _2304.y == 0u;
    float _2362;
    float _2364;
    float _2366;
    if (_2324)
    {
        _2362 = _2317;
        _2364 = _2319;
        _2366 = _2321;
    }
    else
    {
        uint _2532 = _2233 + 7u;
        float _2548 = (dot(vec3(cbLight._m0[_2233 + 3u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2549 = _2548 * _2548;
        float _4638 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2550 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2551 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2362 = (((cbLight._m0[_2532].x * 0.3183098733425140380859375) * _2550) * _2551) + _2317;
        _2364 = (((cbLight._m0[_2532].y * 0.3183098733425140380859375) * _2550) * _2551) + _2319;
        _2366 = (((cbLight._m0[_2532].z * 0.3183098733425140380859375) * _2550) * _2551) + _2321;
    }
    uint _2369 = _2233 + 8u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _1084) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2233].x + _1022;
    float _2385 = cbLight._m0[_2233].y + _1023;
    float _2386 = cbLight._m0[_2233].z + _1024;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2233].xyz));
    float _4654 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
    float _4665 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _2398 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
    float _2399 = dot(vec3(_962, _963, _964), vec3(_2391, _2392, _2393));
    float _4676 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2402 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _2403 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2391, _2392, _2393));
    float _4687 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
    float _2407 = _2383 * _2383;
    float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
    float _2419 = exp2(log2(1.0 - (isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0)))) * 5.0);
    float _2420 = 0.959999978542327880859375 - _1151;
    float _2422 = 0.959999978542327880859375 - _1152;
    float _2423 = 0.959999978542327880859375 - _1153;
    float _2430 = 1.0 - _2383;
    float _2441 = (0.5 / (((_2398 * ((_2397 * _2430) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2430) + _2383) * _2397))) * _2397;
    float _4698 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
    float _2443 = (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
    uint _2454 = _2233 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _1084) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2270].x + _1022;
    float _2468 = cbLight._m0[_2270].y + _1023;
    float _2469 = cbLight._m0[_2270].z + _1024;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2270].xyz));
    float _4709 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
    float _2481 = dot(vec3(_962, _963, _964), vec3(_2474, _2475, _2476));
    float _4720 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2474, _2475, _2476));
    float _4731 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) * 5.0);
    float _2507 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2398 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2507) + _2466) * _2480))) * _2480;
    float _4742 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2529 = (((((_2500 * _2420) + _1154) * cbLight._m0[_2454].x) * _2519) * _2256) + (((((_2419 * _2420) + _1154) * cbLight._m0[_2369].x) * _2443) * _2266);
    float _2530 = (((((_2500 * _2422) + _1156) * cbLight._m0[_2454].y) * _2519) * _2256) + (((((_2419 * _2422) + _1156) * cbLight._m0[_2369].y) * _2443) * _2266);
    float _2531 = (((((_2500 * _2423) + _1157) * cbLight._m0[_2454].z) * _2519) * _2256) + (((((_2419 * _2423) + _1157) * cbLight._m0[_2369].z) * _2443) * _2266);
    float _2593;
    float _2595;
    float _2597;
    if (_2306)
    {
        _2593 = _2529;
        _2595 = _2530;
        _2597 = _2531;
    }
    else
    {
        uint _2599 = _2233 + 2u;
        uint _2603 = _2233 + 10u;
        float _2617 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2599].w)) * _1084) * 0.949999988079071044921875);
        float _2618 = _2617 * _2617;
        float _2619 = cbLight._m0[_2599].x + _1022;
        float _2620 = cbLight._m0[_2599].y + _1023;
        float _2621 = cbLight._m0[_2599].z + _1024;
        float _2625 = inversesqrt(dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621)));
        float _2626 = _2625 * _2619;
        float _2627 = _2625 * _2620;
        float _2628 = _2625 * _2621;
        float _2629 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2599].xyz));
        float _4753 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0));
        float _2633 = dot(vec3(_962, _963, _964), vec3(_2626, _2627, _2628));
        float _4764 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2636 = isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0));
        float _2637 = dot(vec3(cbLight._m0[_2599].xyz), vec3(_2626, _2627, _2628));
        float _4775 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0));
        float _2641 = _2618 * _2618;
        float _2645 = ((_2636 * _2636) * (_2641 + (-1.0))) + 1.0;
        float _2652 = exp2(log2(1.0 - (isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0)))) * 5.0);
        float _2659 = 1.0 - _2618;
        float _2669 = (0.5 / (((_2398 * ((_2632 * _2659) + _2618)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2659) + _2618) * _2632))) * _2632;
        float _4786 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
        float _2671 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * (_2641 / ((_2645 * _2645) * 3.141590118408203125));
        float _2672 = isnan(1.0) ? _2248 : (isnan(_2248) ? 1.0 : min(_2248, 1.0));
        _2593 = (((((_2652 * _2420) + _1154) * cbLight._m0[_2603].x) * _2671) * _2672) + _2529;
        _2595 = (((((_2652 * _2422) + _1156) * cbLight._m0[_2603].y) * _2671) * _2672) + _2530;
        _2597 = (((((_2652 * _2423) + _1157) * cbLight._m0[_2603].z) * _2671) * _2672) + _2531;
    }
    float _2707;
    float _2709;
    float _2711;
    if (_2324)
    {
        _2707 = _2593;
        _2709 = _2595;
        _2711 = _2597;
    }
    else
    {
        uint _2718 = _2233 + 3u;
        uint _2722 = _2233 + 11u;
        float _2736 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2718].w)) * _1084) * 0.949999988079071044921875);
        float _2737 = _2736 * _2736;
        float _2738 = cbLight._m0[_2718].x + _1022;
        float _2739 = cbLight._m0[_2718].y + _1023;
        float _2740 = cbLight._m0[_2718].z + _1024;
        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
        float _2745 = _2744 * _2738;
        float _2746 = _2744 * _2739;
        float _2747 = _2744 * _2740;
        float _2748 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2718].xyz));
        float _4802 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
        float _2752 = dot(vec3(_962, _963, _964), vec3(_2745, _2746, _2747));
        float _4813 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2755 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2756 = dot(vec3(cbLight._m0[_2718].xyz), vec3(_2745, _2746, _2747));
        float _4824 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2760 = _2737 * _2737;
        float _2764 = ((_2755 * _2755) * (_2760 + (-1.0))) + 1.0;
        float _2771 = exp2(log2(1.0 - (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) * 5.0);
        float _2778 = 1.0 - _2737;
        float _2788 = (0.5 / (((_2398 * ((_2751 * _2778) + _2737)) + 9.9999999392252902907785028219223e-09) + (((_2398 * _2778) + _2737) * _2751))) * _2751;
        float _4835 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
        float _2790 = (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * (_2760 / ((_2764 * _2764) * 3.141590118408203125));
        float _2791 = isnan(1.0) ? _2249 : (isnan(_2249) ? 1.0 : min(_2249, 1.0));
        _2707 = (((((_2771 * _2420) + _1154) * cbLight._m0[_2722].x) * _2790) * _2791) + _2593;
        _2709 = (((((_2771 * _2422) + _1156) * cbLight._m0[_2722].y) * _2790) * _2791) + _2595;
        _2711 = (((((_2771 * _2423) + _1157) * cbLight._m0[_2722].z) * _2790) * _2791) + _2597;
    }
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    if (_2231.y == 0u)
    {
        float _2866 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2867 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2866;
        float _2868 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2866;
        float _2869 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2866;
        uvec4 _2881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2882 = _2881.x;
        uint _2893 = uint((float(_2881.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1043) / _2882))) + floor(float(uint(cbSceneParam._m0[85u].x * _1042) / _2882)));
        float _2903 = (log2(_2869 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2904 = isnan(0.0) ? _2903 : (isnan(_2903) ? 0.0 : max(_2903, 0.0));
        uint _2907 = uint(isnan(14.0) ? _2904 : (isnan(_2904) ? 14.0 : min(_2904, 14.0)));
        uvec4 _2912 = texelFetch(g_lightClusterGridBuffer, int(((_2907 << 2u) + (_2893 << 6u)) >> 2u));
        uint _2913 = _2912.x;
        uint _2914 = _2881.z;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        float _3051;
        float _3053;
        if (((((1u << ((_2914 >> 4u) & 15u)) + 4294967295u) & _2913) == 0u) || ((_2914 & 240u) == 0u))
        {
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
            _3051 = 0.0;
            _3053 = 0.0;
        }
        else
        {
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3052;
            float _3054;
            float _3203 = 0.0;
            float _3204 = 0.0;
            float _3205 = 0.0;
            float _3206 = 0.0;
            float _3207 = 0.0;
            float _3208 = 0.0;
            uint _3209 = 0u;
            uint _3218;
            bool _3219;
            for (;;)
            {
                _3218 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3209 << 2u)) >> 2u)).x;
                _3219 = _3218 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3219)
                {
                    frontier_phi_66_pred = _3203;
                    frontier_phi_66_pred_1 = _3208;
                    frontier_phi_66_pred_2 = _3207;
                    frontier_phi_66_pred_3 = _3206;
                    frontier_phi_66_pred_4 = _3205;
                    frontier_phi_66_pred_5 = _3204;
                }
                else
                {
                    float _3348;
                    float _3349;
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    uint _3354;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3205;
                    _3351 = _3206;
                    _3352 = _3207;
                    _3353 = _3208;
                    _3354 = _3218;
                    float _3275;
                    float _3276;
                    float _3277;
                    float _3278;
                    float _3279;
                    float _3280;
                    for (;;)
                    {
                        uint _3358 = uint(findLSB(_3354)) + (_3209 << 5u);
                        uint _3355 = (_3354 + 4294967295u) & _3354;
                        uint _3360 = _3358 * 48u;
                        vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3360)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3360 + 3u)).x));
                        uint _3380 = (_3358 * 48u) + 4u;
                        vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3380)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3380 + 3u)).x));
                        uint _3399 = (_3358 * 48u) + 8u;
                        vec3 _3410 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x));
                        float _3414 = _3374.x - _2867;
                        float _3415 = _3374.y - _2868;
                        float _3416 = _3374.z - _2869;
                        float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                        float _3420 = inversesqrt(_3417);
                        float _3421 = _3420 * _3414;
                        float _3422 = _3420 * _3415;
                        float _3423 = _3420 * _3416;
                        float _3424 = dot(vec3(_1065, _1068, _1071), vec3(_3421, _3422, _3423));
                        float _3429 = 1.0 - (_3417 * _3374.w);
                        float _4861 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3430 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
                        float _3431 = sqrt(_3417) * _3393.w;
                        float _3434 = 1.39999997615814208984375 / (_3431 + 1.39999997615814208984375);
                        float _3435 = _3434 * _3434;
                        float _3438 = ((1.0 - _3435) * _3424) + _3435;
                        float _3441 = _3431 * _3431;
                        float _3445 = ((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3430) / ((_3441 * 0.699999988079071044921875) + 1.0);
                        float _3449 = (-0.0) - _2867;
                        float _3450 = (-0.0) - _2868;
                        float _3451 = (-0.0) - _2869;
                        float _3455 = inversesqrt(dot(vec3(_3449, _3450, _3451), vec3(_3449, _3450, _3451)));
                        float _3456 = _3455 * _3449;
                        float _3457 = _3455 * _3450;
                        float _3458 = _3455 * _3451;
                        float _3466 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                        float _3467 = 1.0 - _1185;
                        float _3474 = sqrt(1.0 - ((1.0 - (_3467 * _3467)) * (1.0 - (_3466 * _3466))));
                        float _3475 = _3474 * _3474;
                        float _3476 = _3475 * _3475;
                        float _3477 = _3456 + _3421;
                        float _3478 = _3457 + _3422;
                        float _3479 = _3458 + _3423;
                        float _3483 = inversesqrt(dot(vec3(_3477, _3478, _3479), vec3(_3477, _3478, _3479)));
                        float _3487 = dot(vec3(_1065, _1068, _1071), vec3(_3456, _3457, _3458));
                        float _4877 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
                        float _3491 = dot(vec3(_1065, _1068, _1071), vec3(_3483 * _3477, _3483 * _3478, _3483 * _3479));
                        float _4888 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                        float _3494 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
                        float _3498 = ((_3494 * _3494) * (_3476 + (-1.0))) + 1.0;
                        float _3499 = _3434 * _3475;
                        float _3500 = _3499 * _3499;
                        float _3503 = ((1.0 - _3500) * _3424) + _3500;
                        float _4899 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                        float _3504 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3505 = 1.0 - _3475;
                        float _3515 = (0.5 / (((_3504 * ((_3490 * _3505) + _3475)) + 9.9999999392252902907785028219223e-09) + (((_3504 * _3505) + _3475) * _3490))) * _3504;
                        float _4910 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                        float _3526 = (((_3476 * 3.1415927410125732421875) * (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) / ((_3498 * _3498) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125))) * _3430;
                        _3278 = (_3445 * _3393.x) + _3351;
                        _3279 = (_3445 * _3393.y) + _3352;
                        _3280 = (_3445 * _3393.z) + _3353;
                        _3275 = (_3526 * _3410.x) + _3348;
                        _3276 = (_3526 * _3410.y) + _3349;
                        _3277 = (_3526 * _3410.z) + _3350;
                        if (_3355 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3277;
                            _3351 = _3278;
                            _3352 = _3279;
                            _3353 = _3280;
                            _3354 = _3355;
                        }
                    }
                    frontier_phi_66_pred = _3275;
                    frontier_phi_66_pred_1 = _3280;
                    frontier_phi_66_pred_2 = _3279;
                    frontier_phi_66_pred_3 = _3278;
                    frontier_phi_66_pred_4 = _3277;
                    frontier_phi_66_pred_5 = _3276;
                }
                _3044 = frontier_phi_66_pred;
                _3054 = frontier_phi_66_pred_1;
                _3052 = frontier_phi_66_pred_2;
                _3050 = frontier_phi_66_pred_3;
                _3048 = frontier_phi_66_pred_4;
                _3046 = frontier_phi_66_pred_5;
                uint _3210 = _3209 + 1u;
                if (_3210 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3203 = _3044;
                    _3204 = _3046;
                    _3205 = _3048;
                    _3206 = _3050;
                    _3207 = _3052;
                    _3208 = _3054;
                    _3209 = _3210;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
            _3051 = _3052;
            _3053 = _3054;
        }
        uvec4 _3057 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3058 = _3057.z;
        uint _3060 = (_3058 >> 8u) & 15u;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        if (((4294967295u << _3060) & _2913) == 0u)
        {
            _3171 = _3043;
            _3173 = _3045;
            _3175 = _3047;
            _3177 = _3049;
            _3179 = _3051;
            _3181 = _3053;
        }
        else
        {
            float _3196 = inversesqrt(dot(vec3(_2867, _2868, _2869), vec3(_2867, _2868, _2869)));
            float _3197 = _3196 * _2867;
            float _3198 = _3196 * _2868;
            float _3199 = _3196 * _2869;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3060 < ((_3058 >> 12u) & 15u))
            {
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3180;
                float _3182;
                float _3331 = _3043;
                float _3332 = _3045;
                float _3333 = _3047;
                float _3334 = _3049;
                float _3335 = _3051;
                float _3336 = _3053;
                uint _3337 = _3060;
                uint _3346;
                bool _3347;
                for (;;)
                {
                    _3346 = texelFetch(g_lightClassification, int((((_2907 << 5u) + (_2893 << 9u)) + (_3337 << 2u)) >> 2u)).x;
                    _3347 = _3346 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3347)
                    {
                        frontier_phi_77_pred = _3336;
                        frontier_phi_77_pred_1 = _3335;
                        frontier_phi_77_pred_2 = _3334;
                        frontier_phi_77_pred_3 = _3333;
                        frontier_phi_77_pred_4 = _3332;
                        frontier_phi_77_pred_5 = _3331;
                    }
                    else
                    {
                        float _3540;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3834;
                        float _3835;
                        float _3836;
                        float _3837;
                        float _3838;
                        float _3839;
                        float _3553 = _3331;
                        float _3554 = _3332;
                        float _3555 = _3333;
                        float _3556 = _3334;
                        float _3557 = _3335;
                        float _3558 = _3336;
                        uint _3559 = _3346;
                        uint _3560;
                        vec4 _3585;
                        float _3586;
                        vec4 _3601;
                        vec3 _3613;
                        vec4 _3629;
                        vec4 _3644;
                        float _3690;
                        bool _3691;
                        for (;;)
                        {
                            uint _3570 = ((_3337 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3559));
                            _3560 = (_3559 + 4294967295u) & _3559;
                            uint _3572 = _3570 * 40u;
                            _3585 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3572)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3572 + 3u)).x));
                            _3586 = _3585.w;
                            uint _3588 = (_3570 * 40u) + 4u;
                            _3601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3588 + 3u)).x));
                            uint _3603 = (_3570 * 40u) + 8u;
                            _3613 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3603 + 2u)).x));
                            uint _3616 = (_3570 * 40u) + 16u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3631 = (_3570 * 40u) + 20u;
                            _3644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3631 + 3u)).x));
                            uint _3646 = (_3570 * 40u) + 24u;
                            vec4 _3659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3646 + 3u)).x));
                            uint _3665 = (_3570 * 40u) + 28u;
                            vec4 _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            _3690 = fma(_2869, _3678.z, fma(_2868, _3678.y, _3678.x * _2867)) + _3678.w;
                            _3691 = !((fma(_2869, _3659.z, fma(_2868, _3659.y, _3659.x * _2867)) + _3659.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3691)
                            {
                                float _3718 = _3585.x - _2867;
                                float _3719 = _3585.y - _2868;
                                float _3720 = _3585.z - _2869;
                                float _3721 = dot(vec3(_3718, _3719, _3720), vec3(_3718, _3719, _3720));
                                float _3724 = inversesqrt(_3721);
                                float _3725 = _3724 * _3718;
                                float _3726 = _3724 * _3719;
                                float _3727 = _3724 * _3720;
                                float _3731 = 1.0 - (_3721 / (_3586 * _3586));
                                float _4921 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3732 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                                float _3736 = sqrt(_3721) * _3601.w;
                                float _3738 = 1.39999997615814208984375 / (_3736 + 1.39999997615814208984375);
                                float _3739 = _3738 * _3738;
                                float _3742 = ((1.0 - _3739) * dot(vec3(_3725, _3726, _3727), vec3(_1065, _1068, _1071))) + _3739;
                                float _3745 = _3736 * _3736;
                                float _3749 = (fma(_2869, _3629.z, fma(_2868, _3629.y, _3629.x * _2867)) + _3629.w) / _3690;
                                float _3750 = (fma(_2869, _3644.z, fma(_2868, _3644.y, _3644.x * _2867)) + _3644.w) / _3690;
                                float _3754 = 1.0 - dot(vec2(_3749, _3750), vec2(_3749, _3750));
                                float _4937 = isnan(0.0) ? _3754 : (isnan(_3754) ? 0.0 : max(_3754, 0.0));
                                float _3755 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                                float _3756 = _3755 * (((isnan(0.0) ? _3742 : (isnan(_3742) ? 0.0 : max(_3742, 0.0))) * _3732) / ((_3745 * 0.699999988079071044921875) + 1.0));
                                float _3768 = exp2(log2(1.0 / ((_3745 * 3.5) + 5.0)) * 0.25);
                                float _3769 = 1.0 - _1185;
                                float _3776 = sqrt(1.0 - ((1.0 - (_3769 * _3769)) * (1.0 - (_3768 * _3768))));
                                float _3777 = _3776 * _3776;
                                float _3778 = _3777 * _3777;
                                float _3779 = _3725 - _3197;
                                float _3780 = _3726 - _3198;
                                float _3781 = _3727 - _3199;
                                float _3785 = inversesqrt(dot(vec3(_3779, _3780, _3781), vec3(_3779, _3780, _3781)));
                                float _3789 = dot(vec3(_1065, _1068, _1071), vec3((-0.0) - _3197, (-0.0) - _3198, (-0.0) - _3199));
                                float _4948 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                                float _3793 = dot(vec3(_1065, _1068, _1071), vec3(_3785 * _3779, _3785 * _3780, _3785 * _3781));
                                float _4959 = isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0));
                                float _3796 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3800 = ((_3796 * _3796) * (_3778 + (-1.0))) + 1.0;
                                float _3801 = _3738 * _3777;
                                float _3802 = _3801 * _3801;
                                float _3808 = ((1.0 - _3802) * dot(vec3(_1065, _1068, _1071), vec3(_3725, _3726, _3727))) + _3802;
                                float _4970 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3810 = 1.0 - _3777;
                                float _3820 = (0.5 / (((_3809 * ((_3792 * _3810) + _3777)) + 9.9999999392252902907785028219223e-09) + (((_3809 * _3810) + _3777) * _3792))) * _3809;
                                float _4981 = isnan(0.0) ? _3820 : (isnan(_3820) ? 0.0 : max(_3820, 0.0));
                                float _3830 = (_3755 * _3732) * (((_3778 * 3.1415927410125732421875) * (isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0)))) / ((_3800 * _3800) * ((_3745 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3756 * _3601.y;
                                frontier_phi_83_pred_1 = _3756 * _3601.x;
                                frontier_phi_83_pred_2 = _3830 * _3613.z;
                                frontier_phi_83_pred_3 = _3830 * _3613.y;
                                frontier_phi_83_pred_4 = _3830 * _3613.x;
                                frontier_phi_83_pred_5 = _3756 * _3601.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3838 = frontier_phi_83_pred;
                            _3837 = frontier_phi_83_pred_1;
                            _3836 = frontier_phi_83_pred_2;
                            _3835 = frontier_phi_83_pred_3;
                            _3834 = frontier_phi_83_pred_4;
                            _3839 = frontier_phi_83_pred_5;
                            _3543 = _3837 + _3556;
                            _3544 = _3838 + _3557;
                            _3545 = _3839 + _3558;
                            _3540 = _3834 + _3553;
                            _3541 = _3835 + _3554;
                            _3542 = _3836 + _3555;
                            if (_3560 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3542;
                                _3556 = _3543;
                                _3557 = _3544;
                                _3558 = _3545;
                                _3559 = _3560;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3545;
                        frontier_phi_77_pred_1 = _3544;
                        frontier_phi_77_pred_2 = _3543;
                        frontier_phi_77_pred_3 = _3542;
                        frontier_phi_77_pred_4 = _3541;
                        frontier_phi_77_pred_5 = _3540;
                    }
                    _3182 = frontier_phi_77_pred;
                    _3180 = frontier_phi_77_pred_1;
                    _3178 = frontier_phi_77_pred_2;
                    _3176 = frontier_phi_77_pred_3;
                    _3174 = frontier_phi_77_pred_4;
                    _3172 = frontier_phi_77_pred_5;
                    uint _3338 = _3337 + 1u;
                    if (_3338 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3331 = _3172;
                        _3332 = _3174;
                        _3333 = _3176;
                        _3334 = _3178;
                        _3335 = _3180;
                        _3336 = _3182;
                        _3337 = _3338;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3176;
                frontier_phi_58_59_ladder_1 = _3182;
                frontier_phi_58_59_ladder_2 = _3180;
                frontier_phi_58_59_ladder_3 = _3178;
                frontier_phi_58_59_ladder_4 = _3174;
                frontier_phi_58_59_ladder_5 = _3172;
            }
            else
            {
                frontier_phi_58_59_ladder = _3047;
                frontier_phi_58_59_ladder_1 = _3053;
                frontier_phi_58_59_ladder_2 = _3051;
                frontier_phi_58_59_ladder_3 = _3049;
                frontier_phi_58_59_ladder_4 = _3045;
                frontier_phi_58_59_ladder_5 = _3043;
            }
            _3171 = frontier_phi_58_59_ladder_5;
            _3173 = frontier_phi_58_59_ladder_4;
            _3175 = frontier_phi_58_59_ladder;
            _3177 = frontier_phi_58_59_ladder_3;
            _3179 = frontier_phi_58_59_ladder_2;
            _3181 = frontier_phi_58_59_ladder_1;
        }
        float _3186 = isnan(1.0) ? _1169 : (isnan(_1169) ? 1.0 : min(_1169, 1.0));
        _2926 = (_3186 * _3177) + _2362;
        _2928 = (_3186 * _3179) + _2364;
        _2930 = (_3186 * _3181) + _2366;
        _2932 = ((_3171 * _1154) * _3186) + _2707;
        _2934 = ((_3173 * _1156) * _3186) + _2709;
        _2936 = ((_3175 * _1157) * _3186) + _2711;
    }
    else
    {
        _2926 = _2362;
        _2928 = _2364;
        _2930 = _2366;
        _2932 = _2707;
        _2934 = _2709;
        _2936 = _2711;
    }
    uint _2942 = _1098 + uint(cbMatDynParam._m0[0u].w);
    float _2948 = (((((cbMtdParam._m0[22u].x * _866.x) * cbMtdParam._m0[32u].x) * _887) + _639) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2942].x;
    float _2949 = (((((cbMtdParam._m0[22u].y * _866.y) * cbMtdParam._m0[32u].x) * _887) + _640) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2942].y;
    float _2950 = (((((cbMtdParam._m0[22u].z * _866.z) * cbMtdParam._m0[32u].x) * _887) + _641) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2942].z;
    float _4997 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _5008 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _5019 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _2967 = (((isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0))) * (_2926 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1169))) + ((_2932 + ((isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0))) * _1997)) * cbPerFrame._m0[3u].x)) + _2948;
    float _2969 = (_2949 + ((_2934 + ((isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0))) * _1997)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0))) * (_2928 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1169)));
    float _2971 = (_2950 + ((_2936 + ((isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0))) * _1997)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2930 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1169)));
    float _2972 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
    float _2973 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
    float _2974 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0));
    float _2980 = cbMtdParam._m0[2u].x * _2948;
    float _2981 = cbMtdParam._m0[2u].y * _2949;
    float _2982 = cbMtdParam._m0[2u].z * _2950;
    float _5045 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2984 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
    uint _2985 = _1097 + 6u;
    float _2993 = _1042 / cbSceneParam._m0[86u].x;
    float _2994 = _1043 / cbSceneParam._m0[86u].y;
    vec4 _3008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, (log2((isnan(cbSceneParam._m0[77u].w) ? _985 : (isnan(_985) ? cbSceneParam._m0[77u].w : min(_985, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3010 = _3008.x;
    float _3011 = _3008.y;
    float _3012 = _3008.z;
    float _3013 = _3008.w;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    if (_985 > cbSceneParam._m0[78u].w)
    {
        float _3068 = isnan(_985) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _985 : min(cbSceneParam._m0[80u].w, _985));
        float _3069 = _3068 / _985;
        float _3080 = _3069 * _1015;
        float _3081 = _1016 * _3069;
        float _3082 = (-0.0) - _3081;
        float _3083 = _3069 * _1017;
        float _3085 = (cbSceneParam._m0[77u].w * _3082) / _3068;
        float _3086 = _3085 + cbSceneParam._m0[79u].w;
        float _3087 = cbSceneParam._m0[79u].w - _3081;
        float _3093 = sqrt(((_3080 * _3080) + (_3081 * _3081)) + (_3083 * _3083));
        float _3096 = (1.0 - (cbSceneParam._m0[77u].w / _3068)) * _3093;
        float _3101 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3103 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3288;
        if (abs((_3082 - _3085) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3288 = ((((_3086 > 0.0) ? exp2(_3101 * _3086) : (2.0 - exp2(_3103 * _3086))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3096;
        }
        else
        {
            float _3232 = 1.0 / cbSceneParam._m0[80u].x;
            float _3233 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : max(_3086, _3087));
            float _3234 = isnan(_3087) ? _3086 : (isnan(_3086) ? _3087 : min(_3086, _3087));
            float _3243 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : min(_3233, 0.0));
            float _3244 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : min(_3234, 0.0));
            _3288 = ((abs(_3093 / _3082) * cbSceneParam._m0[80u].y) * ((((_3243 - _3244) * 2.0) - ((exp2(_3101 * (isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0)))) - exp2(_3101 * (isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))))) * _3232)) - ((exp2(_3103 * _3243) - exp2(_3103 * _3244)) * _3232))) + (_3096 * cbSceneParam._m0[80u].z);
        }
        vec4 _3290 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, 1.0), 0.0);
        float _3299 = exp2((_3288 * (-1.44269502162933349609375)) * (1.0 - _3290.w));
        float _3300 = log2(_3299);
        float _3316 = log2(_3013);
        _3105 = (exp2(_3316 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].x)) * _3290.x) / cbSceneParam._m0[78u].x)) + _3010;
        _3107 = (exp2(_3316 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].y)) * _3290.y) / cbSceneParam._m0[78u].y)) + _3011;
        _3109 = (exp2(_3316 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3300 * cbSceneParam._m0[78u].z)) * _3290.z) / cbSceneParam._m0[78u].z)) + _3012;
        _3111 = _3299 * _3013;
    }
    else
    {
        _3105 = _3010;
        _3107 = _3011;
        _3109 = _3012;
        _3111 = _3013;
    }
    bool _3326;
    vec4 _3120;
    vec4 _3142;
    float _3144;
    float _3148;
    float _3149;
    float _3150;
    float _3153;
    float _3156;
    float _3159;
    float _3160;
    bool _3170;
    for (;;)
    {
        _3120 = cbMatDynParam._m0[0u];
        float _3122 = roundEven(_3120.y);
        bool _3123 = _3122 == 3.0;
        float _3124 = log2(_3111);
        float _3128 = exp2(_3124 * cbSceneParam._m0[78u].x);
        float _3129 = exp2(_3124 * cbSceneParam._m0[78u].y);
        float _3130 = exp2(_3124 * cbSceneParam._m0[78u].z);
        float _3131 = _3128 * _2972;
        float _3132 = _3129 * _2973;
        float _3133 = _3130 * _2974;
        float _3140 = _1031 + (-0.5);
        _3142 = cbMtdParam._m0[1u];
        _3144 = _3142.y * _3140;
        float _3147 = (_3122 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3148 = _3147 * (_3123 ? _3131 : (_3131 + (cbSceneParam._m0[72u].w * _3105)));
        _3149 = _3147 * (_3123 ? _3132 : (_3132 + (cbSceneParam._m0[72u].w * _3107)));
        _3150 = _3147 * (_3123 ? _3133 : (_3133 + (cbSceneParam._m0[72u].w * _3109)));
        _3153 = ((_2980 * _2984) * _3128) * _3147;
        _3156 = ((_2981 * _2984) * _3129) * _3147;
        _3159 = ((_2982 * _2984) * _3130) * _3147;
        _3160 = _3140 * 0.999000012874603271484375;
        _3170 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3170)
        {
            if ((cbInstanceData._m0[_1097 + 7u].x + _3160) < 0.5)
            {
                _3326 = true;
                break;
            }
        }
        uint _3267 = _1098 + uint(_3120.w);
        if ((cbInstanceData._m0[_3267].w < 1.0) && ((cbInstanceData._m0[_3267].w + _3160) < 0.5))
        {
            _3326 = true;
            break;
        }
        if ((_3144 + 1.0) < _3142.x)
        {
            _3326 = true;
            break;
        }
        _3326 = false;
        break;
    }
    float _3531;
    if (_3326)
    {
        discard_state = true;
        _3531 = 0.0;
    }
    else
    {
        _3531 = cbInstanceData._m0[_2985].w;
    }
    SV_Target.x = _3148;
    SV_Target.y = _3149;
    SV_Target.z = _3150;
    SV_Target.w = _3531;
    SV_Target_1.x = _3153;
    SV_Target_1.y = _3156;
    SV_Target_1.z = _3159;
    SV_Target_1.w = cbInstanceData._m0[_2985].w;
    discard_exit();
}


