#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1570;
float _4265;
float _4266;
float _4267;
float _4268;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _267 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _280 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_267 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _285 = _280.z;
    float _286 = _280.w;
    vec4 _308 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _267) + cbTextureTilingScale._m0[11u].w));
    float _313 = _308.w;
    float _325 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _285) * exp2(log2(1.0 - _313) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    vec4 _341 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _267) + cbTextureTilingScale._m0[2u].w));
    float _351 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _359 = (_351 - (((_341.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _351))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4287 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _362 = _327 - (_360 * _327);
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    vec4 _377 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _380 = _377.y;
    float _381 = _380 * (isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0)));
    float _390 = exp2(log2(cbMtdParam._m0[32u].w * _313) * cbMtdParam._m0[31u].z);
    float _392 = _390 - (_360 * _390);
    float _393 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _394 = isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0));
    float _405 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_286) * 4.5));
    float _414 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _285) * _405)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _415 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _416 = isnan(1.0) ? _415 : (isnan(_415) ? 1.0 : min(_415, 1.0));
    float _427 = exp2(log2((1.0 - (((_405 * _405) * _285) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _428 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = (((isnan(1.0) ? _428 : (isnan(_428) ? 1.0 : min(_428, 1.0))) - _286) * _380) + _286;
    vec4 _444 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _267) + cbTextureTilingScale._m0[5u].w));
    float _457 = (_377.x + (-0.02500000037252902984619140625)) * 8.0;
    float _459 = roundEven(_457);
    float _460 = cbMtdParam._m0[10u].x * _444.x;
    float _461 = cbMtdParam._m0[10u].y * _444.y;
    float _462 = cbMtdParam._m0[10u].z * _444.z;
    vec4 _474 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _267) + cbTextureTilingScale._m0[1u].w));
    float _485 = cbMtdParam._m0[9u].x * _474.x;
    float _486 = cbMtdParam._m0[9u].y * _474.y;
    float _487 = cbMtdParam._m0[9u].z * _474.z;
    float _494 = ((_485 - _460) * _432) + _460;
    float _495 = ((_486 - _461) * _432) + _461;
    float _496 = ((_487 - _462) * _432) + _462;
    vec4 _508 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _267) + cbTextureTilingScale._m0[6u].w));
    float _528 = (((cbMtdParam._m0[20u].x * _508.x) - _494) * _416) + _494;
    float _529 = (((cbMtdParam._m0[20u].y * _508.y) - _495) * _416) + _495;
    float _530 = (((cbMtdParam._m0[20u].z * _508.z) - _496) * _416) + _496;
    vec4 _542 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _267) + cbTextureTilingScale._m0[9u].w));
    float _562 = (((cbMtdParam._m0[29u].x * _542.x) - _528) * _394) + _528;
    float _563 = (((cbMtdParam._m0[29u].y * _542.y) - _529) * _394) + _529;
    float _564 = (((cbMtdParam._m0[29u].z * _542.z) - _530) * _394) + _530;
    float _204[6];
    float _205[6];
    float _206[6];
    _204[0u] = cbMtdParam._m0[30u].x;
    _205[0u] = cbMtdParam._m0[30u].y;
    _206[0u] = cbMtdParam._m0[30u].z;
    _204[1u] = cbMtdParam._m0[28u].x;
    _205[1u] = cbMtdParam._m0[28u].y;
    _206[1u] = cbMtdParam._m0[28u].z;
    _204[2u] = cbMtdParam._m0[27u].x;
    _205[2u] = cbMtdParam._m0[27u].y;
    _206[2u] = cbMtdParam._m0[27u].z;
    _204[3u] = cbMtdParam._m0[26u].x;
    _205[3u] = cbMtdParam._m0[26u].y;
    _206[3u] = cbMtdParam._m0[26u].z;
    _204[4u] = cbMtdParam._m0[25u].x;
    _205[4u] = cbMtdParam._m0[25u].y;
    _206[4u] = cbMtdParam._m0[25u].z;
    _204[5u] = cbMtdParam._m0[24u].x;
    _205[5u] = cbMtdParam._m0[24u].y;
    _206[5u] = cbMtdParam._m0[24u].z;
    float _633 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    uint _636 = uint(int(isnan(5.0) ? _633 : (isnan(_633) ? 5.0 : min(_633, 5.0))));
    float _643 = _204[_636] * _380;
    float _644 = _205[_636] * _380;
    float _645 = _206[_636] * _380;
    float _646 = _643 + ((_308.x * 4.5) * (((_485 - _562) * _381) + _562));
    float _647 = _644 + ((_308.y * 4.5) * (((_486 - _563) * _381) + _563));
    float _648 = _645 + ((_308.z * 4.5) * (((_487 - _564) * _381) + _564));
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[37u].w;
    _200[0u] = cbMtdParam._m0[38u].x;
    _199[1u] = cbMtdParam._m0[39u].w;
    _200[1u] = cbMtdParam._m0[40u].x;
    _199[2u] = cbMtdParam._m0[40u].y;
    _200[2u] = cbMtdParam._m0[40u].z;
    _199[3u] = cbMtdParam._m0[40u].w;
    _200[3u] = cbMtdParam._m0[41u].x;
    _199[4u] = cbMtdParam._m0[41u].y;
    _200[4u] = cbMtdParam._m0[41u].z;
    float _681 = roundEven(5.0 - _457);
    float _682 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _683 = isnan(4.0) ? _682 : (isnan(_682) ? 4.0 : min(_682, 4.0));
    float _685 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    uint _687 = uint(int(isnan(4.0) ? _685 : (isnan(_685) ? 4.0 : min(_685, 4.0))));
    float _699 = ((cbMtdParam._m0[42u].z - _200[_687]) * _432) + _200[_687];
    float _707 = ((cbMtdParam._m0[43u].x - _699) * _416) + _699;
    float _712 = ((cbMtdParam._m0[43u].z - _707) * _394) + _707;
    float _717 = ((cbMtdParam._m0[39u].z - _712) * _381) + _712;
    vec4 _731 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _267) + cbTextureTilingScale._m0[7u].w));
    float _733 = _731.x;
    float _734 = _731.y;
    float _736 = _731.z + _199[_687];
    vec4 _748 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _267) + cbTextureTilingScale._m0[10u].w));
    float _756 = (((cbMtdParam._m0[42u].y - _736) + _748.z) * _432) + _736;
    vec4 _769 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _267) + cbTextureTilingScale._m0[12u].w));
    float _777 = (((cbMtdParam._m0[42u].w - _756) + _769.z) * _416) + _756;
    float _783 = ((((_285 * 2.0) * _777) - _777) * cbMtdParam._m0[34u].x) + _777;
    vec4 _796 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _267) + cbTextureTilingScale._m0[13u].w));
    float _804 = (((_796.z + cbMtdParam._m0[43u].y) - _783) * _394) + _783;
    float _808 = (((cbMtdParam._m0[39u].y + _341.z) - _804) * _381) + _804;
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _870 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_839 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_843 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _885 = (-0.0) - ((_843 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _889 = (_843 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _890 = isnan(_889) ? _885 : (isnan(_885) ? _889 : min(_885, _889));
    float _4373 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _891 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _919 = ((_748.x - _733) * _432) + _733;
    float _920 = ((_748.y - _734) * _432) + _734;
    float _925 = ((_769.x - _919) * _416) + _919;
    float _926 = ((_769.y - _920) * _416) + _920;
    float _931 = ((_796.x - _925) * _394) + _925;
    float _932 = ((_796.y - _926) * _394) + _926;
    float _941 = ((((_341.x - _931) * _381) + _931) * 2.0) + (-1.0);
    float _942 = ((((_341.y - _932) * _381) + _932) * 2.0) + (-1.0);
    float _943 = dot(vec2(_941, _942), vec2(_941, _942));
    float _4384 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _948 = sqrt(1.0 - (isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0))));
    float _951 = (cbMtdParam._m0[34u].z * ((_280.x * 2.0) + (-1.0))) + _941;
    float _952 = (cbMtdParam._m0[34u].z * ((_280.y * 2.0) + (-1.0))) + _942;
    float _955 = fma(_948, _246 * NORMAL.x, fma(_952, _253 * TANGENT.x, (_239 * _231) * _951));
    float _958 = fma(_948, _246 * NORMAL.y, fma(_952, _253 * TANGENT.y, (_239 * _232) * _951));
    float _961 = fma(_948, _246 * NORMAL.z, fma(_952, _253 * TANGENT.z, (_239 * _233) * _951));
    float _965 = inversesqrt(dot(vec3(_955, _958, _961), vec3(_955, _958, _961)));
    float _966 = _965 * _955;
    float _967 = _965 * _958;
    float _968 = _965 * _961;
    float _4395 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
    float _969 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
    float _4406 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4417 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _4428 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _4439 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _973 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
    float _989 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1009 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1019 = cbSceneParam._m0[71u].x - (_839 / _1009);
    float _1020 = cbSceneParam._m0[71u].y - (_843 / _1009);
    float _1021 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1009);
    float _1025 = inversesqrt(dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021)));
    float _1026 = _1019 * _1025;
    float _1027 = _1020 * _1025;
    float _1028 = _1021 * _1025;
    vec4 _1033 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1035 = _1033.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1253 = sqrt(((_1019 * _1019) + (_1020 * _1020)) + (_1021 * _1021));
        float _1259 = (cbMatDynParam._m0[5u].x * _1253) + cbMatDynParam._m0[5u].y;
        float _4450 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1260 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1264 = (cbMatDynParam._m0[5u].z * _1253) + cbMatDynParam._m0[5u].w;
        float _4461 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) - _1260)) + _1260) < ((_1035 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1046 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1047 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1049 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1051 = _1049.w;
    float _1069 = fma(_968, cbSceneParam._m0[5u].z, fma(_967, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _966));
    float _1072 = fma(_968, cbSceneParam._m0[6u].z, fma(_967, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _966));
    float _1075 = fma(_968, cbSceneParam._m0[7u].z, fma(_967, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _966));
    vec4 _1077 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1088 = (((_1077.y - _969) + (_1077.w * _969)) * cbMtdParam._m0[3u].x) + _969;
    uint _1101 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1102 = _1101 + 9u;
    uint _1103 = _1102 + uint(cbMatDynParam._m0[0u].w);
    float _1109 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) * cbInstanceData._m0[_1103].x;
    float _1110 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0)))) * cbInstanceData._m0[_1103].y;
    float _1111 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * cbInstanceData._m0[_1103].z;
    float _4472 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1112 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
    float _4483 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
    float _1113 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
    float _4494 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
    float _1114 = isnan(1.0) ? _4494 : (isnan(_4494) ? 1.0 : min(_4494, 1.0));
    vec4 _1115 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1120 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1131 = (((_1120.x - _973) + (_1120.w * _973)) * cbMtdParam._m0[3u].x) + _973;
    float _1144 = (cbMtdParam._m0[3u].x * (((_1112 * _1051) - _1112) + _1115.x)) + _1112;
    float _1145 = (cbMtdParam._m0[3u].x * (((_1113 * _1051) - _1113) + _1115.y)) + _1113;
    float _1146 = (cbMtdParam._m0[3u].x * (((_1114 * _1051) - _1114) + _1115.z)) + _1114;
    float _1147 = 1.0 - _1131;
    float _1148 = _1147 * _1144;
    float _1149 = _1147 * _1145;
    float _1150 = _1147 * _1146;
    float _1155 = (_1144 + (-0.039999999105930328369140625)) * _1131;
    float _1156 = (_1145 + (-0.039999999105930328369140625)) * _1131;
    float _1157 = (_1146 + (-0.039999999105930328369140625)) * _1131;
    float _1158 = _1155 + 0.039999999105930328369140625;
    float _1160 = _1156 + 0.039999999105930328369140625;
    float _1161 = _1157 + 0.039999999105930328369140625;
    vec4 _1170 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1046, cbSceneParam._m0[86u].y * _1047));
    float _1173 = _1170.x * TEXCOORD_5.w;
    float _1174 = dot(vec3(_966, _967, _968), vec3(_1026, _1027, _1028));
    float _1177 = _1174 * 2.0;
    float _1181 = (_1177 * _966) - _1026;
    float _1182 = (_1177 * _967) - _1027;
    float _1183 = (_1177 * _968) - _1028;
    float _1187 = abs(dot(vec3(_1026, _1027, _1028), vec3(_966, _967, _968)));
    float _4505 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1189 = sqrt(_1088);
    float _1200 = exp2((_1189 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1189 * 3.0));
    float _1206 = (1.0 - _1200) * ((_1189 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1207 = _1200 * _1189;
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1243 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1569;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1296 = fma(_1243, cbModelParam._m0[26u].z, fma(_1239, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1235));
        float _1300 = fma(_1243, cbModelParam._m0[27u].z, fma(_1239, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1235));
        float _1304 = fma(_1243, cbModelParam._m0[28u].z, fma(_1239, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1235));
        float _1328 = _1235 + _966;
        float _1329 = _1239 + _967;
        float _1330 = _1243 + _968;
        float _1340 = fma(_1330, cbModelParam._m0[26u].z, fma(_1329, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1328)) - _1296;
        float _1341 = fma(_1330, cbModelParam._m0[27u].z, fma(_1329, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1328)) - _1300;
        float _1342 = fma(_1330, cbModelParam._m0[28u].z, fma(_1329, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1328)) - _1304;
        float _1346 = inversesqrt(dot(vec3(_1340, _1341, _1342), vec3(_1340, _1341, _1342)));
        float _1358 = ((_1346 * _1340) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1296 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1359 = ((_1346 * _1341) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1300 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1360 = ((_1346 * _1342) / cbModelParam._m0[34u].z) + ((((((_1304 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1363 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1370 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1358, _1359, _1360), 0.0);
        float _1397 = exp2((_1363.w + (-0.5)) * 20.0) * 2.0;
        float _1398 = _1397 * (_1363.x + (-0.5));
        float _1399 = _1397 * (_1363.y + (-0.5));
        float _1400 = _1397 * (_1363.z + (-0.5));
        float _1407 = exp2((_1370.w + (-0.5)) * 20.0) * 2.0;
        float _1408 = _1407 * (_1370.x + (-0.5));
        float _1409 = _1407 * (_1370.y + (-0.5));
        float _1410 = _1407 * (_1370.z + (-0.5));
        float _1417 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1418 = _1417 * (_1377.x + (-0.5));
        float _1419 = _1417 * (_1377.y + (-0.5));
        float _1420 = _1417 * (_1377.z + (-0.5));
        float _1427 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1428 = _1427 * (_1384.x + (-0.5));
        float _1429 = _1427 * (_1384.y + (-0.5));
        float _1430 = _1427 * (_1384.z + (-0.5));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = _1398 * 0.5;
        float _1435 = _1408 * 0.5;
        float _1436 = _1418 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1451 = (dot(vec3(_966, _967, _968), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4531 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1461 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4542 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4553 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0))) * (_1463 + 1.0))) + _1468) * _1431;
        float _1478 = _1399 * 0.5;
        float _1479 = _1409 * 0.5;
        float _1480 = _1419 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_966, _967, _968), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4564 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _4575 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4586 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_1505 + 1.0))) + _1510) * _1432;
        float _1520 = _1400 * 0.5;
        float _1521 = _1410 * 0.5;
        float _1522 = _1420 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_966, _967, _968), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4597 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _4608 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4619 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_1547 + 1.0))) + _1552) * _1433;
        _1569 = _1400;
        _1571 = _1399;
        _1572 = _1398;
        _1573 = _1410;
        _1574 = _1409;
        _1575 = _1408;
        _1576 = _1420;
        _1577 = _1419;
        _1578 = _1418;
        _1579 = _1433;
        _1580 = _1432;
        _1581 = _1431;
        _1582 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1583 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
        _1584 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
    }
    else
    {
        _1569 = _1570;
        _1571 = _1570;
        _1572 = _1570;
        _1573 = _1570;
        _1574 = _1570;
        _1575 = _1570;
        _1576 = _1570;
        _1577 = _1570;
        _1578 = _1570;
        _1579 = _1570;
        _1580 = _1570;
        _1581 = _1570;
        _1582 = 0.0;
        _1583 = 0.0;
        _1584 = 0.0;
    }
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    float _1890;
    float _1891;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1610 = fma(_1243, cbModelParam._m0[30u].z, fma(_1239, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1235));
        float _1614 = fma(_1243, cbModelParam._m0[31u].z, fma(_1239, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1235));
        float _1618 = fma(_1243, cbModelParam._m0[32u].z, fma(_1239, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1235));
        float _1640 = _1235 + _966;
        float _1641 = _1239 + _967;
        float _1642 = _1243 + _968;
        float _1652 = fma(_1642, cbModelParam._m0[30u].z, fma(_1641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1640)) - _1610;
        float _1653 = fma(_1642, cbModelParam._m0[31u].z, fma(_1641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1640)) - _1614;
        float _1654 = fma(_1642, cbModelParam._m0[32u].z, fma(_1641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1640)) - _1618;
        float _1658 = inversesqrt(dot(vec3(_1652, _1653, _1654), vec3(_1652, _1653, _1654)));
        float _1670 = ((_1658 * _1652) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1610 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1671 = ((_1658 * _1653) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1614 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1672 = ((_1658 * _1654) / cbModelParam._m0[35u].z) + ((((((_1618 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1674 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1670, _1671, _1672), 0.0);
        vec4 _1681 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1670, _1671, _1672), 0.0);
        vec4 _1688 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1670, _1671, _1672), 0.0);
        vec4 _1695 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1670, _1671, _1672), 0.0);
        float _1707 = exp2((_1674.w + (-0.5)) * 20.0) * 2.0;
        float _1708 = _1707 * (_1674.x + (-0.5));
        float _1709 = _1707 * (_1674.y + (-0.5));
        float _1710 = _1707 * (_1674.z + (-0.5));
        float _1717 = exp2((_1681.w + (-0.5)) * 20.0) * 2.0;
        float _1718 = _1717 * (_1681.x + (-0.5));
        float _1719 = _1717 * (_1681.y + (-0.5));
        float _1720 = _1717 * (_1681.z + (-0.5));
        float _1727 = exp2((_1688.w + (-0.5)) * 20.0) * 2.0;
        float _1728 = _1727 * (_1688.x + (-0.5));
        float _1729 = _1727 * (_1688.y + (-0.5));
        float _1730 = _1727 * (_1688.z + (-0.5));
        float _1737 = exp2((_1695.w + (-0.5)) * 20.0) * 2.0;
        float _1738 = _1737 * (_1695.x + (-0.5));
        float _1739 = _1737 * (_1695.y + (-0.5));
        float _1740 = _1737 * (_1695.z + (-0.5));
        float _1741 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1742 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
        float _1743 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        float _1744 = _1708 * 0.5;
        float _1745 = _1718 * 0.5;
        float _1746 = _1728 * 0.5;
        float _1747 = dot(vec3(_1744, _1745, _1746), vec3(_1744, _1745, _1746));
        float _1752 = (_1747 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1747);
        float _1760 = (dot(vec3(_966, _967, _968), vec3(_1752 * _1744, _1752 * _1745, _1752 * _1746)) + 1.0) * 0.5;
        float _4660 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1769 = sqrt(((_1745 * _1745) + (_1744 * _1744)) + (_1746 * _1746)) / (_1741 + 9.9999997473787516355514526367188e-06);
        float _4671 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
        float _1771 = _1770 * 2.0;
        float _1775 = (1.0 - _1770) / (_1770 + 1.0);
        float _4682 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1776 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _1785 = ((((1.0 - _1776) * (_1771 + 2.0)) * exp2(log2(isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_1771 + 1.0))) + _1776) * _1741;
        float _1786 = _1709 * 0.5;
        float _1787 = _1719 * 0.5;
        float _1788 = _1729 * 0.5;
        float _1789 = dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788));
        float _1794 = (_1789 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1789);
        float _1802 = (dot(vec3(_966, _967, _968), vec3(_1794 * _1786, _1794 * _1787, _1794 * _1788)) + 1.0) * 0.5;
        float _4693 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1811 = sqrt(((_1787 * _1787) + (_1786 * _1786)) + (_1788 * _1788)) / (_1742 + 9.9999997473787516355514526367188e-06);
        float _4704 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _1813 = _1812 * 2.0;
        float _1817 = (1.0 - _1812) / (_1812 + 1.0);
        float _4715 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
        float _1818 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
        float _1827 = ((((1.0 - _1818) * (_1813 + 2.0)) * exp2(log2(isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_1813 + 1.0))) + _1818) * _1742;
        float _1828 = _1710 * 0.5;
        float _1829 = _1720 * 0.5;
        float _1830 = _1730 * 0.5;
        float _1831 = dot(vec3(_1828, _1829, _1830), vec3(_1828, _1829, _1830));
        float _1836 = (_1831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1831);
        float _1844 = (dot(vec3(_966, _967, _968), vec3(_1836 * _1828, _1836 * _1829, _1836 * _1830)) + 1.0) * 0.5;
        float _4726 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1853 = sqrt(((_1829 * _1829) + (_1828 * _1828)) + (_1830 * _1830)) / (_1743 + 9.9999997473787516355514526367188e-06);
        float _4737 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0));
        float _1855 = _1854 * 2.0;
        float _1859 = (1.0 - _1854) / (_1854 + 1.0);
        float _4748 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _1869 = ((((1.0 - _1860) * (_1855 + 2.0)) * exp2(log2(isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_1855 + 1.0))) + _1860) * _1743;
        _1877 = _1710;
        _1878 = _1709;
        _1879 = _1708;
        _1880 = _1720;
        _1881 = _1719;
        _1882 = _1718;
        _1883 = _1730;
        _1884 = _1729;
        _1885 = _1728;
        _1886 = _1743;
        _1887 = _1742;
        _1888 = _1741;
        _1889 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)));
        _1890 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0)));
        _1891 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0)));
    }
    else
    {
        _1877 = _1570;
        _1878 = _1570;
        _1879 = _1570;
        _1880 = _1570;
        _1881 = _1570;
        _1882 = _1570;
        _1883 = _1570;
        _1884 = _1570;
        _1885 = _1570;
        _1886 = _1570;
        _1887 = _1570;
        _1888 = _1570;
        _1889 = 0.0;
        _1890 = 0.0;
        _1891 = 0.0;
    }
    float _1901 = (cbModelParam._m0[1u].x * (_1889 - _1582)) + _1582;
    float _1902 = (cbModelParam._m0[1u].x * (_1890 - _1583)) + _1583;
    float _1903 = (cbModelParam._m0[1u].x * (_1891 - _1584)) + _1584;
    float _1924 = fma(_1903, cbSceneParam._m0[89u].z, fma(_1902, cbSceneParam._m0[89u].y, _1901 * cbSceneParam._m0[89u].x));
    float _1927 = fma(_1903, cbSceneParam._m0[90u].z, fma(_1902, cbSceneParam._m0[90u].y, _1901 * cbSceneParam._m0[90u].x));
    float _1930 = fma(_1903, cbSceneParam._m0[91u].z, fma(_1902, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1901));
    float _1943 = _1181 * 0.5;
    float _1944 = _1182 * 0.5;
    float _1945 = _1183 * 0.5;
    float _1946 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1879, _1882, _1885, _1888));
    float _1949 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1878, _1881, _1884, _1887));
    float _1952 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1877, _1880, _1883, _1886));
    float _1986;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1959 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1569, _1573, _1576, _1579));
        float _1963 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1571, _1574, _1577, _1580));
        float _1967 = dot(vec4(_1943, _1944, _1945, 1.0), vec4(_1572, _1575, _1578, _1581));
        float _1974 = dot(vec4(cbModelParam._m0[39u]), vec4(_1943, _1944, _1945, 1.0));
        _1986 = dot(vec3(isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)), isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1974) ? 0.0 : (isnan(0.0) ? _1974 : max(0.0, _1974))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1986 = 1.0;
    }
    float _1997;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1988 = dot(vec4(cbModelParam._m0[40u]), vec4(_1943, _1944, _1945, 1.0));
        _1997 = dot(vec3(isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0)), isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0)), isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1988) ? 0.0 : (isnan(0.0) ? _1988 : max(0.0, _1988))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1997 = 1.0;
    }
    float _2001 = (_1997 * cbModelParam._m0[1u].x) + (_1986 * (1.0 - cbModelParam._m0[1u].x));
    float _2011 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1088);
    float _2012 = isnan(_2011) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2011 : min(cbModelParam._m0[25u].z, _2011));
    float _2094;
    float _2096;
    float _2098;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2061 = fma(_1243, cbModelParam._m0[13u].z, fma(_1239, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1235)) + cbModelParam._m0[13u].w;
        float _2065 = fma(_1243, cbModelParam._m0[14u].z, fma(_1239, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1235)) + cbModelParam._m0[14u].w;
        float _2069 = fma(_1243, cbModelParam._m0[15u].z, fma(_1239, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1235)) + cbModelParam._m0[15u].w;
        float _2072 = fma(_1183, cbModelParam._m0[13u].z, fma(_1182, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1181));
        float _2075 = fma(_1183, cbModelParam._m0[14u].z, fma(_1182, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1181));
        float _2078 = fma(_1183, cbModelParam._m0[15u].z, fma(_1182, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1181));
        float _2106;
        if (_2072 > 0.0)
        {
            _2106 = abs((1.0 - _2061) / _2072);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2061 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2106 = frontier_phi_17_15_ladder;
        }
        float _2280;
        if (_2075 > 0.0)
        {
            _2280 = abs((1.0 - _2065) / _2075);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2075 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2065 + 1.0) / _2075);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2280 = frontier_phi_26_22_ladder;
        }
        float _2572;
        if (_2078 > 0.0)
        {
            _2572 = abs((1.0 - _2069) / _2078);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2078 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2069 + 1.0) / _2078);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2572 = frontier_phi_38_33_ladder;
        }
        float _2574 = isnan(_2280) ? _2106 : (isnan(_2106) ? _2280 : min(_2106, _2280));
        float _2575 = isnan(_2572) ? _2574 : (isnan(_2574) ? _2572 : min(_2574, _2572));
        float _2579 = (_2575 * _2072) + _2061;
        float _2580 = (_2575 * _2075) + _2065;
        float _2581 = (_2575 * _2078) + _2069;
        float _2582 = _2575 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2582;
        float _2586 = _2582 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 > _2586) || ((_2580 < _2584) || ((_2579 < _2584) || (_2579 > _2586))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2581, cbModelParam._m0[9u].z, fma(_2580, cbModelParam._m0[9u].y, _2579 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2581, cbModelParam._m0[10u].z, fma(_2580, cbModelParam._m0[10u].y, _2579 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2581, cbModelParam._m0[11u].z, fma(_2580, cbModelParam._m0[11u].y, _2579 * cbModelParam._m0[11u].x))), _2012);
            frontier_phi_16_38_ladder = _2726.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2726.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2726.x * cbModelParam._m0[1u].y;
        }
        _2094 = frontier_phi_16_38_ladder_2;
        _2096 = frontier_phi_16_38_ladder_1;
        _2098 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2082 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1181, _1182, _1183), _2012);
        _2094 = _2082.x * cbModelParam._m0[1u].y;
        _2096 = _2082.y * cbModelParam._m0[1u].y;
        _2098 = _2082.z * cbModelParam._m0[1u].y;
    }
    float _2102 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1088);
    float _2103 = isnan(_2102) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2102 : min(cbModelParam._m0[25u].w, _2102));
    float _2195;
    float _2197;
    float _2199;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2159 = fma(_1243, cbModelParam._m0[21u].z, fma(_1239, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1235)) + cbModelParam._m0[21u].w;
        float _2163 = fma(_1243, cbModelParam._m0[22u].z, fma(_1239, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1235)) + cbModelParam._m0[22u].w;
        float _2167 = fma(_1243, cbModelParam._m0[23u].z, fma(_1239, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1235)) + cbModelParam._m0[23u].w;
        float _2170 = fma(_1183, cbModelParam._m0[21u].z, fma(_1182, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1181));
        float _2173 = fma(_1183, cbModelParam._m0[22u].z, fma(_1182, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1181));
        float _2176 = fma(_1183, cbModelParam._m0[23u].z, fma(_1182, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1181));
        float _2285;
        if (_2170 > 0.0)
        {
            _2285 = abs((1.0 - _2159) / _2170);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2170 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2159 + 1.0) / _2170);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2285 = frontier_phi_28_24_ladder;
        }
        float _2599;
        if (_2173 > 0.0)
        {
            _2599 = abs((1.0 - _2163) / _2173);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2173 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2163 + 1.0) / _2173);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2599 = frontier_phi_40_35_ladder;
        }
        float _2937;
        if (_2176 > 0.0)
        {
            _2937 = abs((1.0 - _2167) / _2176);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2176 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2167 + 1.0) / _2176);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2937 = frontier_phi_50_47_ladder;
        }
        float _2939 = isnan(_2599) ? _2285 : (isnan(_2285) ? _2599 : min(_2285, _2599));
        float _2940 = isnan(_2937) ? _2939 : (isnan(_2939) ? _2937 : min(_2939, _2937));
        float _2944 = (_2940 * _2170) + _2159;
        float _2945 = (_2940 * _2173) + _2163;
        float _2946 = (_2940 * _2176) + _2167;
        float _2947 = _2940 * 9.9999997473787516355514526367188e-05;
        float _2948 = (-1.0) - _2947;
        float _2950 = _2947 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2946 > _2950) || ((_2946 < _2948) || ((_2945 > _2950) || ((_2945 < _2948) || ((_2944 < _2948) || (_2944 > _2950))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3068 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2946, cbModelParam._m0[17u].z, fma(_2945, cbModelParam._m0[17u].y, _2944 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2946, cbModelParam._m0[18u].z, fma(_2945, cbModelParam._m0[18u].y, _2944 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2946, cbModelParam._m0[19u].z, fma(_2945, cbModelParam._m0[19u].y, _2944 * cbModelParam._m0[19u].x))), _2103);
            frontier_phi_25_50_ladder = _3068.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3068.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3068.x * cbModelParam._m0[1u].z;
        }
        _2195 = frontier_phi_25_50_ladder_2;
        _2197 = frontier_phi_25_50_ladder_1;
        _2199 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2179 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1181, _1182, _1183), _2103);
        _2195 = _2179.x * cbModelParam._m0[1u].z;
        _2197 = _2179.y * cbModelParam._m0[1u].z;
        _2199 = _2179.z * cbModelParam._m0[1u].z;
    }
    float _2212 = (((_1206 * _1158) + _1207) * _1173) * ((cbModelParam._m0[1u].w * (_2195 - _2094)) + _2094);
    float _2214 = (((_1206 * _1160) + _1207) * _1173) * ((cbModelParam._m0[1u].w * (_2197 - _2096)) + _2096);
    float _2216 = (((_1206 * _1161) + _1207) * _1173) * ((cbModelParam._m0[1u].w * (_2199 - _2098)) + _2098);
    float _2219 = fma(_2216, cbSceneParam._m0[89u].z, fma(_2214, cbSceneParam._m0[89u].y, _2212 * cbSceneParam._m0[89u].x));
    float _2222 = fma(_2216, cbSceneParam._m0[90u].z, fma(_2214, cbSceneParam._m0[90u].y, _2212 * cbSceneParam._m0[90u].x));
    float _2225 = fma(_2216, cbSceneParam._m0[91u].z, fma(_2214, cbSceneParam._m0[91u].y, _2212 * cbSceneParam._m0[91u].x));
    float _2259 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2263 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2267 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2271 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2272 = _2259 / _2271;
    float _2273 = _2263 / _2271;
    float _2274 = _2267 / _2271;
    float _2418;
    float _2419;
    float _2420;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2301 = ((uint(_2274 > cbSceneParam._m0[59u].y) + uint(_2274 > cbSceneParam._m0[59u].x)) + uint(_2274 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2302 = _2301 + 43u;
        uint _2309 = _2301 + 44u;
        uint _2316 = _2301 + 45u;
        uint _2324 = _2301 + 46u;
        float _2335 = fma(_2271, cbSceneParam._m0[_2302].w, fma(_2267, cbSceneParam._m0[_2302].z, fma(_2263, cbSceneParam._m0[_2302].y, _2259 * cbSceneParam._m0[_2302].x)));
        float _2339 = fma(_2271, cbSceneParam._m0[_2309].w, fma(_2267, cbSceneParam._m0[_2309].z, fma(_2263, cbSceneParam._m0[_2309].y, _2259 * cbSceneParam._m0[_2309].x)));
        float _2347 = fma(_2271, cbSceneParam._m0[_2324].w, fma(_2267, cbSceneParam._m0[_2324].z, fma(_2263, cbSceneParam._m0[_2324].y, _2259 * cbSceneParam._m0[_2324].x)));
        float _2351 = cbSceneParam._m0[33u].z * _2347;
        float _2353 = cbSceneParam._m0[33u].w * _2347;
        float _2356 = fma(_2271, cbSceneParam._m0[_2316].w, fma(_2267, cbSceneParam._m0[_2316].z, fma(_2263, cbSceneParam._m0[_2316].y, _2259 * cbSceneParam._m0[_2316].x))) / _2347;
        float _2404 = (cbSceneParam._m0[33u].x - sqrt(((_2273 * _2273) + (_2272 * _2272)) + (_2274 * _2274))) * cbSceneParam._m0[33u].y;
        float _4874 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
        float _2411 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2351 + _2335) / _2347, (_2353 + _2339) / _2347), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2353 + _2335) / _2347, (_2339 - _2351) / _2347), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2335 - _2351) / _2347, (_2339 - _2353) / _2347), _2356), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2335 - _2353) / _2347, (_2351 + _2339) / _2347), _2356), 0.0)).x), vec4(0.25)));
        _2418 = 1.0 - (_2411 * cbSceneParam._m0[34u].x);
        _2419 = 1.0 - (_2411 * cbSceneParam._m0[34u].y);
        _2420 = 1.0 - (_2411 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2418 = 1.0;
        _2419 = 1.0;
        _2420 = 1.0;
    }
    float _2484;
    float _2486;
    float _2488;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2472 = fma(_2271, cbSceneParam._m0[63u].w, fma(_2267, cbSceneParam._m0[63u].z, fma(_2263, cbSceneParam._m0[63u].y, _2259 * cbSceneParam._m0[63u].x)));
        float _2473 = fma(_2271, cbSceneParam._m0[60u].w, fma(_2267, cbSceneParam._m0[60u].z, fma(_2263, cbSceneParam._m0[60u].y, _2259 * cbSceneParam._m0[60u].x))) / _2472;
        float _2474 = fma(_2271, cbSceneParam._m0[61u].w, fma(_2267, cbSceneParam._m0[61u].z, fma(_2263, cbSceneParam._m0[61u].y, _2259 * cbSceneParam._m0[61u].x))) / _2472;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2473 >= cbSceneParam._m0[64u].x) && (_2474 >= cbSceneParam._m0[64u].y)) && (_2473 <= cbSceneParam._m0[64u].z)) && (_2474 <= cbSceneParam._m0[64u].w))
        {
            float _2612 = fma(_2271, cbSceneParam._m0[62u].w, fma(_2267, cbSceneParam._m0[62u].z, fma(_2263, cbSceneParam._m0[62u].y, _2259 * cbSceneParam._m0[62u].x))) / _2472;
            float _2616 = isnan(cbSceneParam._m0[41u].w) ? _2612 : (isnan(_2612) ? cbSceneParam._m0[41u].w : max(_2612, cbSceneParam._m0[41u].w));
            float _2659 = (cbSceneParam._m0[33u].x - sqrt(((_2273 * _2273) + (_2272 * _2272)) + (_2274 * _2274))) * cbSceneParam._m0[33u].y;
            float _4890 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
            float _2666 = (isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2473, cbSceneParam._m0[33u].w + _2474), _2616), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2473, _2474 - cbSceneParam._m0[33u].z), _2616), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2473 - cbSceneParam._m0[33u].z, _2474 - cbSceneParam._m0[33u].w), _2616), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2473 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2474), _2616), 0.0)).x), vec4(0.25)));
            float _2670 = 1.0 - (_2666 * cbSceneParam._m0[34u].x);
            float _2671 = 1.0 - (_2666 * cbSceneParam._m0[34u].y);
            float _2672 = 1.0 - (_2666 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2672) ? _2420 : (isnan(_2420) ? _2672 : min(_2420, _2672));
            frontier_phi_37_36_ladder_1 = isnan(_2671) ? _2419 : (isnan(_2419) ? _2671 : min(_2419, _2671));
            frontier_phi_37_36_ladder_2 = isnan(_2670) ? _2418 : (isnan(_2418) ? _2670 : min(_2418, _2670));
        }
        else
        {
            frontier_phi_37_36_ladder = _2420;
            frontier_phi_37_36_ladder_1 = _2419;
            frontier_phi_37_36_ladder_2 = _2418;
        }
        _2484 = frontier_phi_37_36_ladder_2;
        _2486 = frontier_phi_37_36_ladder_1;
        _2488 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2484 = _2418;
        _2486 = _2419;
        _2488 = _2420;
    }
    uvec4 _2493 = floatBitsToUint(cbInstanceData._m0[_1101 + 5u]);
    uint _2495 = _2493.x * 14u;
    uint _2496 = _2495 + 13u;
    float _2503 = _1173 + (-1.0);
    float _2508 = (cbLight._m0[_2496].x * _2503) + 1.0;
    float _2509 = (cbLight._m0[_2496].y * _2503) + 1.0;
    float _2510 = (cbLight._m0[_2496].z * _2503) + 1.0;
    float _2511 = (cbLight._m0[_2496].w * _2503) + 1.0;
    uint _2512 = _2495 + 5u;
    float _2518 = isnan(1.0) ? _2509 : (isnan(_2509) ? 1.0 : min(_2509, 1.0));
    uint _2522 = _2495 + 4u;
    float _2531 = isnan(1.0) ? _2508 : (isnan(_2508) ? 1.0 : min(_2508, 1.0));
    uint _2535 = _2495 | 1u;
    float _2546 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_966, _967, _968));
    float _2549 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_966, _967, _968));
    float _4926 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _4937 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2554 = (isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0))) * 0.3183098733425140380859375;
    float _2556 = (isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0))) * 0.3183098733425140380859375;
    float _2563 = ((cbLight._m0[_2512].x * _2518) * _2556) + (((cbLight._m0[_2522].x * _2484) * _2531) * _2554);
    float _2564 = ((_2518 * cbLight._m0[_2512].y) * _2556) + (((cbLight._m0[_2522].y * _2486) * _2531) * _2554);
    float _2565 = ((_2518 * cbLight._m0[_2512].z) * _2556) + (((cbLight._m0[_2522].z * _2488) * _2531) * _2554);
    uvec4 _2569 = floatBitsToUint(cbLight._m0[_2495 + 12u]);
    bool _2571 = _2569.x == 0u;
    float _2673;
    float _2675;
    float _2677;
    if (_2571)
    {
        _2673 = _2563;
        _2675 = _2564;
        _2677 = _2565;
    }
    else
    {
        uint _2681 = _2495 + 6u;
        float _2697 = (dot(vec3(cbLight._m0[_2495 + 2u].xyz), vec3(_966, _967, _968)) * 0.5) + 0.5;
        float _2698 = _2697 * _2697;
        float _4948 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
        float _2699 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
        float _2700 = isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0));
        _2673 = (((cbLight._m0[_2681].x * 0.3183098733425140380859375) * _2699) * _2700) + _2563;
        _2675 = (((cbLight._m0[_2681].y * 0.3183098733425140380859375) * _2699) * _2700) + _2564;
        _2677 = (((cbLight._m0[_2681].z * 0.3183098733425140380859375) * _2699) * _2700) + _2565;
    }
    bool _2680 = _2569.y == 0u;
    float _2735;
    float _2737;
    float _2739;
    if (_2680)
    {
        _2735 = _2673;
        _2737 = _2675;
        _2739 = _2677;
    }
    else
    {
        uint _2908 = _2495 + 7u;
        float _2924 = (dot(vec3(cbLight._m0[_2495 + 3u].xyz), vec3(_966, _967, _968)) * 0.5) + 0.5;
        float _2925 = _2924 * _2924;
        float _4964 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2926 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
        float _2927 = isnan(1.0) ? _2511 : (isnan(_2511) ? 1.0 : min(_2511, 1.0));
        _2735 = (((cbLight._m0[_2908].x * 0.3183098733425140380859375) * _2926) * _2927) + _2673;
        _2737 = (((cbLight._m0[_2908].y * 0.3183098733425140380859375) * _2926) * _2927) + _2675;
        _2739 = (((cbLight._m0[_2908].z * 0.3183098733425140380859375) * _2926) * _2927) + _2677;
    }
    uint _2742 = _2495 + 8u;
    float _2755 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2495].w)) * _1088) * 0.949999988079071044921875);
    float _2756 = _2755 * _2755;
    float _2757 = cbLight._m0[_2495].x + _1026;
    float _2758 = cbLight._m0[_2495].y + _1027;
    float _2759 = cbLight._m0[_2495].z + _1028;
    float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
    float _2764 = _2763 * _2757;
    float _2765 = _2763 * _2758;
    float _2766 = _2763 * _2759;
    float _2767 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2495].xyz));
    float _4980 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2770 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
    float _4991 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _2771 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
    float _2772 = dot(vec3(_966, _967, _968), vec3(_2764, _2765, _2766));
    float _5002 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2775 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
    float _2776 = dot(vec3(cbLight._m0[_2495].xyz), vec3(_2764, _2765, _2766));
    float _5013 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
    float _2780 = _2756 * _2756;
    float _2784 = ((_2775 * _2775) * (_2780 + (-1.0))) + 1.0;
    float _2792 = exp2(log2(1.0 - (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) * 5.0);
    float _2793 = 0.959999978542327880859375 - _1155;
    float _2795 = 0.959999978542327880859375 - _1156;
    float _2796 = 0.959999978542327880859375 - _1157;
    float _2803 = 1.0 - _2756;
    float _2814 = (0.5 / (((_2771 * ((_2770 * _2803) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2771 * _2803) + _2756) * _2770))) * _2770;
    float _5024 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2816 = (isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0))) * (_2780 / ((_2784 * _2784) * 3.141590118408203125));
    uint _2830 = _2495 + 9u;
    float _2841 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2535].w)) * _1088) * 0.949999988079071044921875);
    float _2842 = _2841 * _2841;
    float _2843 = cbLight._m0[_2535].x + _1026;
    float _2844 = cbLight._m0[_2535].y + _1027;
    float _2845 = cbLight._m0[_2535].z + _1028;
    float _2849 = inversesqrt(dot(vec3(_2843, _2844, _2845), vec3(_2843, _2844, _2845)));
    float _2850 = _2849 * _2843;
    float _2851 = _2849 * _2844;
    float _2852 = _2849 * _2845;
    float _2853 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2535].xyz));
    float _5035 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
    float _2856 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
    float _2857 = dot(vec3(_966, _967, _968), vec3(_2850, _2851, _2852));
    float _5046 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2860 = isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0));
    float _2861 = dot(vec3(cbLight._m0[_2535].xyz), vec3(_2850, _2851, _2852));
    float _5057 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
    float _2865 = _2842 * _2842;
    float _2869 = ((_2860 * _2860) * (_2865 + (-1.0))) + 1.0;
    float _2876 = exp2(log2(1.0 - (isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0)))) * 5.0);
    float _2883 = 1.0 - _2842;
    float _2893 = (0.5 / (((_2771 * ((_2856 * _2883) + _2842)) + 9.9999999392252902907785028219223e-09) + (((_2771 * _2883) + _2842) * _2856))) * _2856;
    float _5068 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
    float _2895 = (isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_2865 / ((_2869 * _2869) * 3.141590118408203125));
    float _2905 = (((((_2876 * _2793) + _1158) * cbLight._m0[_2830].x) * _2895) * _2518) + ((((cbLight._m0[_2742].x * _2484) * ((_2792 * _2793) + _1158)) * _2816) * _2531);
    float _2906 = (((((_2876 * _2795) + _1160) * cbLight._m0[_2830].y) * _2895) * _2518) + ((((cbLight._m0[_2742].y * _2486) * ((_2792 * _2795) + _1160)) * _2816) * _2531);
    float _2907 = (((((_2876 * _2796) + _1161) * cbLight._m0[_2830].z) * _2895) * _2518) + ((((cbLight._m0[_2742].z * _2488) * ((_2792 * _2796) + _1161)) * _2816) * _2531);
    float _2963;
    float _2965;
    float _2967;
    if (_2571)
    {
        _2963 = _2905;
        _2965 = _2906;
        _2967 = _2907;
    }
    else
    {
        uint _2969 = _2495 + 2u;
        uint _2973 = _2495 + 10u;
        float _2987 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2969].w)) * _1088) * 0.949999988079071044921875);
        float _2988 = _2987 * _2987;
        float _2989 = cbLight._m0[_2969].x + _1026;
        float _2990 = cbLight._m0[_2969].y + _1027;
        float _2991 = cbLight._m0[_2969].z + _1028;
        float _2995 = inversesqrt(dot(vec3(_2989, _2990, _2991), vec3(_2989, _2990, _2991)));
        float _2996 = _2995 * _2989;
        float _2997 = _2995 * _2990;
        float _2998 = _2995 * _2991;
        float _2999 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_2969].xyz));
        float _5079 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3002 = isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0));
        float _3003 = dot(vec3(_966, _967, _968), vec3(_2996, _2997, _2998));
        float _5090 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3006 = isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0));
        float _3007 = dot(vec3(cbLight._m0[_2969].xyz), vec3(_2996, _2997, _2998));
        float _5101 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
        float _3011 = _2988 * _2988;
        float _3015 = ((_3006 * _3006) * (_3011 + (-1.0))) + 1.0;
        float _3022 = exp2(log2(1.0 - (isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0)))) * 5.0);
        float _3029 = 1.0 - _2988;
        float _3039 = (0.5 / (((_2771 * ((_3002 * _3029) + _2988)) + 9.9999999392252902907785028219223e-09) + (((_2771 * _3029) + _2988) * _3002))) * _3002;
        float _5112 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        float _3041 = (isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0))) * (_3011 / ((_3015 * _3015) * 3.141590118408203125));
        float _3042 = isnan(1.0) ? _2510 : (isnan(_2510) ? 1.0 : min(_2510, 1.0));
        _2963 = (((((_3022 * _2793) + _1158) * cbLight._m0[_2973].x) * _3041) * _3042) + _2905;
        _2965 = (((((_3022 * _2795) + _1160) * cbLight._m0[_2973].y) * _3041) * _3042) + _2906;
        _2967 = (((((_3022 * _2796) + _1161) * cbLight._m0[_2973].z) * _3041) * _3042) + _2907;
    }
    float _3073;
    float _3075;
    float _3077;
    if (_2680)
    {
        _3073 = _2963;
        _3075 = _2965;
        _3077 = _2967;
    }
    else
    {
        uint _3084 = _2495 + 3u;
        uint _3088 = _2495 + 11u;
        float _3102 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3084].w)) * _1088) * 0.949999988079071044921875);
        float _3103 = _3102 * _3102;
        float _3104 = cbLight._m0[_3084].x + _1026;
        float _3105 = cbLight._m0[_3084].y + _1027;
        float _3106 = cbLight._m0[_3084].z + _1028;
        float _3110 = inversesqrt(dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106)));
        float _3111 = _3110 * _3104;
        float _3112 = _3110 * _3105;
        float _3113 = _3110 * _3106;
        float _3114 = dot(vec3(_966, _967, _968), vec3(cbLight._m0[_3084].xyz));
        float _5128 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
        float _3117 = isnan(1.0) ? _5128 : (isnan(_5128) ? 1.0 : min(_5128, 1.0));
        float _3118 = dot(vec3(_966, _967, _968), vec3(_3111, _3112, _3113));
        float _5139 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
        float _3121 = isnan(1.0) ? _5139 : (isnan(_5139) ? 1.0 : min(_5139, 1.0));
        float _3122 = dot(vec3(cbLight._m0[_3084].xyz), vec3(_3111, _3112, _3113));
        float _5150 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
        float _3126 = _3103 * _3103;
        float _3130 = ((_3121 * _3121) * (_3126 + (-1.0))) + 1.0;
        float _3137 = exp2(log2(1.0 - (isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0)))) * 5.0);
        float _3144 = 1.0 - _3103;
        float _3154 = (0.5 / (((_2771 * ((_3117 * _3144) + _3103)) + 9.9999999392252902907785028219223e-09) + (((_2771 * _3144) + _3103) * _3117))) * _3117;
        float _5161 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
        float _3156 = (isnan(1.0) ? _5161 : (isnan(_5161) ? 1.0 : min(_5161, 1.0))) * (_3126 / ((_3130 * _3130) * 3.141590118408203125));
        float _3157 = isnan(1.0) ? _2511 : (isnan(_2511) ? 1.0 : min(_2511, 1.0));
        _3073 = (((((_3137 * _2793) + _1158) * cbLight._m0[_3088].x) * _3156) * _3157) + _2963;
        _3075 = (((((_3137 * _2795) + _1160) * cbLight._m0[_3088].y) * _3156) * _3157) + _2965;
        _3077 = (((((_3137 * _2796) + _1161) * cbLight._m0[_3088].z) * _3156) * _3157) + _2967;
    }
    float _3223;
    float _3225;
    float _3227;
    float _3229;
    float _3231;
    float _3233;
    if (_2493.y == 0u)
    {
        uvec4 _3178 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3179 = _3178.x;
        uint _3190 = uint((float(_3178.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1047) / _3179))) + floor(float(uint(cbSceneParam._m0[85u].x * _1046) / _3179)));
        float _3200 = (log2(_2274 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3201 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
        uint _3204 = uint(isnan(14.0) ? _3201 : (isnan(_3201) ? 14.0 : min(_3201, 14.0)));
        uvec4 _3209 = texelFetch(g_lightClusterGridBuffer, int(((_3204 << 2u) + (_3190 << 6u)) >> 2u));
        uint _3210 = _3209.x;
        uint _3211 = _3178.z;
        float _3319;
        float _3321;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        if (((((1u << ((_3211 >> 4u) & 15u)) + 4294967295u) & _3210) == 0u) || ((_3211 & 240u) == 0u))
        {
            _3319 = 0.0;
            _3321 = 0.0;
            _3323 = 0.0;
            _3325 = 0.0;
            _3327 = 0.0;
            _3329 = 0.0;
        }
        else
        {
            float _3320;
            float _3322;
            float _3324;
            float _3326;
            float _3328;
            float _3330;
            float _3479 = 0.0;
            float _3480 = 0.0;
            float _3481 = 0.0;
            float _3482 = 0.0;
            float _3483 = 0.0;
            float _3484 = 0.0;
            uint _3485 = 0u;
            uint _3494;
            bool _3495;
            for (;;)
            {
                _3494 = texelFetch(g_lightClassification, int((((_3204 << 5u) + (_3190 << 9u)) + (_3485 << 2u)) >> 2u)).x;
                _3495 = _3494 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3495)
                {
                    frontier_phi_71_pred = _3484;
                    frontier_phi_71_pred_1 = _3483;
                    frontier_phi_71_pred_2 = _3482;
                    frontier_phi_71_pred_3 = _3481;
                    frontier_phi_71_pred_4 = _3480;
                    frontier_phi_71_pred_5 = _3479;
                }
                else
                {
                    float _3624;
                    float _3625;
                    float _3626;
                    float _3627;
                    float _3628;
                    float _3629;
                    uint _3630;
                    _3624 = _3479;
                    _3625 = _3480;
                    _3626 = _3481;
                    _3627 = _3482;
                    _3628 = _3483;
                    _3629 = _3484;
                    _3630 = _3494;
                    float _3551;
                    float _3552;
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    for (;;)
                    {
                        uint _3634 = uint(findLSB(_3630)) + (_3485 << 5u);
                        uint _3631 = (_3630 + 4294967295u) & _3630;
                        uint _3636 = _3634 * 48u;
                        vec4 _3650 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3636)).x, texelFetch(g_PointLightRenderingBuffer, int(_3636 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3636 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3636 + 3u)).x));
                        uint _3656 = (_3634 * 48u) + 4u;
                        vec4 _3669 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3656)).x, texelFetch(g_PointLightRenderingBuffer, int(_3656 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3656 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3656 + 3u)).x));
                        uint _3675 = (_3634 * 48u) + 8u;
                        vec3 _3686 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3675)).x, texelFetch(g_PointLightRenderingBuffer, int(_3675 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3675 + 2u)).x));
                        float _3690 = _3650.x - _2272;
                        float _3691 = _3650.y - _2273;
                        float _3692 = _3650.z - _2274;
                        float _3693 = dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692));
                        float _3696 = inversesqrt(_3693);
                        float _3697 = _3696 * _3690;
                        float _3698 = _3696 * _3691;
                        float _3699 = _3696 * _3692;
                        float _3700 = dot(vec3(_1069, _1072, _1075), vec3(_3697, _3698, _3699));
                        float _3705 = 1.0 - (_3693 * _3650.w);
                        float _5187 = isnan(0.0) ? _3705 : (isnan(_3705) ? 0.0 : max(_3705, 0.0));
                        float _3706 = isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0));
                        float _3707 = sqrt(_3693) * _3669.w;
                        float _3710 = 1.39999997615814208984375 / (_3707 + 1.39999997615814208984375);
                        float _3711 = _3710 * _3710;
                        float _3714 = ((1.0 - _3711) * _3700) + _3711;
                        float _3717 = _3707 * _3707;
                        float _3721 = ((isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0))) * _3706) / ((_3717 * 0.699999988079071044921875) + 1.0);
                        float _3725 = (-0.0) - _2272;
                        float _3726 = (-0.0) - _2273;
                        float _3727 = (-0.0) - _2274;
                        float _3731 = inversesqrt(dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727)));
                        float _3732 = _3731 * _3725;
                        float _3733 = _3731 * _3726;
                        float _3734 = _3731 * _3727;
                        float _3741 = exp2(log2(1.0 / ((_3717 * 3.5) + 5.0)) * 0.25);
                        float _3742 = 1.0 - _1189;
                        float _3749 = sqrt(1.0 - ((1.0 - (_3742 * _3742)) * (1.0 - (_3741 * _3741))));
                        float _3750 = _3749 * _3749;
                        float _3751 = _3750 * _3750;
                        float _3752 = _3732 + _3697;
                        float _3753 = _3733 + _3698;
                        float _3754 = _3734 + _3699;
                        float _3758 = inversesqrt(dot(vec3(_3752, _3753, _3754), vec3(_3752, _3753, _3754)));
                        float _3762 = dot(vec3(_1069, _1072, _1075), vec3(_3732, _3733, _3734));
                        float _5203 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                        float _3765 = isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0));
                        float _3766 = dot(vec3(_1069, _1072, _1075), vec3(_3758 * _3752, _3758 * _3753, _3758 * _3754));
                        float _5214 = isnan(0.0) ? _3766 : (isnan(_3766) ? 0.0 : max(_3766, 0.0));
                        float _3769 = isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0));
                        float _3773 = ((_3769 * _3769) * (_3751 + (-1.0))) + 1.0;
                        float _3774 = _3710 * _3750;
                        float _3775 = _3774 * _3774;
                        float _3778 = ((1.0 - _3775) * _3700) + _3775;
                        float _5225 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                        float _3779 = isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0));
                        float _3780 = 1.0 - _3750;
                        float _3790 = (0.5 / (((_3779 * ((_3765 * _3780) + _3750)) + 9.9999999392252902907785028219223e-09) + (((_3779 * _3780) + _3750) * _3765))) * _3779;
                        float _5236 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                        float _3801 = (((_3751 * 3.1415927410125732421875) * (isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0)))) / ((_3773 * _3773) * ((_3717 * 2.1991131305694580078125) + 3.141590118408203125))) * _3706;
                        _3554 = (_3721 * _3669.x) + _3627;
                        _3555 = (_3721 * _3669.y) + _3628;
                        _3556 = (_3721 * _3669.z) + _3629;
                        _3551 = (_3801 * _3686.x) + _3624;
                        _3552 = (_3801 * _3686.y) + _3625;
                        _3553 = (_3801 * _3686.z) + _3626;
                        if (_3631 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3624 = _3551;
                            _3625 = _3552;
                            _3626 = _3553;
                            _3627 = _3554;
                            _3628 = _3555;
                            _3629 = _3556;
                            _3630 = _3631;
                        }
                    }
                    frontier_phi_71_pred = _3556;
                    frontier_phi_71_pred_1 = _3555;
                    frontier_phi_71_pred_2 = _3554;
                    frontier_phi_71_pred_3 = _3553;
                    frontier_phi_71_pred_4 = _3552;
                    frontier_phi_71_pred_5 = _3551;
                }
                _3330 = frontier_phi_71_pred;
                _3328 = frontier_phi_71_pred_1;
                _3326 = frontier_phi_71_pred_2;
                _3324 = frontier_phi_71_pred_3;
                _3322 = frontier_phi_71_pred_4;
                _3320 = frontier_phi_71_pred_5;
                uint _3486 = _3485 + 1u;
                if (_3486 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3479 = _3320;
                    _3480 = _3322;
                    _3481 = _3324;
                    _3482 = _3326;
                    _3483 = _3328;
                    _3484 = _3330;
                    _3485 = _3486;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3319 = _3320;
            _3321 = _3322;
            _3323 = _3324;
            _3325 = _3326;
            _3327 = _3328;
            _3329 = _3330;
        }
        uvec4 _3333 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3334 = _3333.z;
        uint _3336 = (_3334 >> 8u) & 15u;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        float _3455;
        float _3457;
        if (((4294967295u << _3336) & _3210) == 0u)
        {
            _3447 = _3319;
            _3449 = _3321;
            _3451 = _3323;
            _3453 = _3325;
            _3455 = _3327;
            _3457 = _3329;
        }
        else
        {
            float _3472 = inversesqrt(dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274)));
            float _3473 = _3472 * _2272;
            float _3474 = _3472 * _2273;
            float _3475 = _3472 * _2274;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3336 < ((_3334 >> 12u) & 15u))
            {
                float _3448;
                float _3450;
                float _3452;
                float _3454;
                float _3456;
                float _3458;
                float _3607 = _3319;
                float _3608 = _3321;
                float _3609 = _3323;
                float _3610 = _3325;
                float _3611 = _3327;
                float _3612 = _3329;
                uint _3613 = _3336;
                uint _3622;
                bool _3623;
                for (;;)
                {
                    _3622 = texelFetch(g_lightClassification, int((((_3204 << 5u) + (_3190 << 9u)) + (_3613 << 2u)) >> 2u)).x;
                    _3623 = _3622 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3623)
                    {
                        frontier_phi_82_pred = _3612;
                        frontier_phi_82_pred_1 = _3611;
                        frontier_phi_82_pred_2 = _3610;
                        frontier_phi_82_pred_3 = _3609;
                        frontier_phi_82_pred_4 = _3608;
                        frontier_phi_82_pred_5 = _3607;
                    }
                    else
                    {
                        float _3815;
                        float _3816;
                        float _3817;
                        float _3818;
                        float _3819;
                        float _3820;
                        float _4109;
                        float _4110;
                        float _4111;
                        float _4112;
                        float _4113;
                        float _4114;
                        float _3828 = _3607;
                        float _3829 = _3608;
                        float _3830 = _3609;
                        float _3831 = _3610;
                        float _3832 = _3611;
                        float _3833 = _3612;
                        uint _3834 = _3622;
                        uint _3835;
                        vec4 _3860;
                        float _3861;
                        vec4 _3876;
                        vec3 _3888;
                        vec4 _3904;
                        vec4 _3919;
                        float _3965;
                        bool _3966;
                        for (;;)
                        {
                            uint _3845 = ((_3613 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3834));
                            _3835 = (_3834 + 4294967295u) & _3834;
                            uint _3847 = _3845 * 40u;
                            _3860 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3847)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3847 + 3u)).x));
                            _3861 = _3860.w;
                            uint _3863 = (_3845 * 40u) + 4u;
                            _3876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3863 + 3u)).x));
                            uint _3878 = (_3845 * 40u) + 8u;
                            _3888 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3878 + 2u)).x));
                            uint _3891 = (_3845 * 40u) + 16u;
                            _3904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3891 + 3u)).x));
                            uint _3906 = (_3845 * 40u) + 20u;
                            _3919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3906 + 3u)).x));
                            uint _3921 = (_3845 * 40u) + 24u;
                            vec4 _3934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3921 + 3u)).x));
                            uint _3940 = (_3845 * 40u) + 28u;
                            vec4 _3953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3940 + 3u)).x));
                            _3965 = fma(_2274, _3953.z, fma(_2273, _3953.y, _3953.x * _2272)) + _3953.w;
                            _3966 = !((fma(_2274, _3934.z, fma(_2273, _3934.y, _3934.x * _2272)) + _3934.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3966)
                            {
                                float _3993 = _3860.x - _2272;
                                float _3994 = _3860.y - _2273;
                                float _3995 = _3860.z - _2274;
                                float _3996 = dot(vec3(_3993, _3994, _3995), vec3(_3993, _3994, _3995));
                                float _3999 = inversesqrt(_3996);
                                float _4000 = _3999 * _3993;
                                float _4001 = _3999 * _3994;
                                float _4002 = _3999 * _3995;
                                float _4006 = 1.0 - (_3996 / (_3861 * _3861));
                                float _5247 = isnan(0.0) ? _4006 : (isnan(_4006) ? 0.0 : max(_4006, 0.0));
                                float _4007 = isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0));
                                float _4011 = sqrt(_3996) * _3876.w;
                                float _4013 = 1.39999997615814208984375 / (_4011 + 1.39999997615814208984375);
                                float _4014 = _4013 * _4013;
                                float _4017 = ((1.0 - _4014) * dot(vec3(_4000, _4001, _4002), vec3(_1069, _1072, _1075))) + _4014;
                                float _4020 = _4011 * _4011;
                                float _4024 = (fma(_2274, _3904.z, fma(_2273, _3904.y, _3904.x * _2272)) + _3904.w) / _3965;
                                float _4025 = (fma(_2274, _3919.z, fma(_2273, _3919.y, _3919.x * _2272)) + _3919.w) / _3965;
                                float _4029 = 1.0 - dot(vec2(_4024, _4025), vec2(_4024, _4025));
                                float _5263 = isnan(0.0) ? _4029 : (isnan(_4029) ? 0.0 : max(_4029, 0.0));
                                float _4030 = isnan(1.0) ? _5263 : (isnan(_5263) ? 1.0 : min(_5263, 1.0));
                                float _4031 = _4030 * (((isnan(0.0) ? _4017 : (isnan(_4017) ? 0.0 : max(_4017, 0.0))) * _4007) / ((_4020 * 0.699999988079071044921875) + 1.0));
                                float _4043 = exp2(log2(1.0 / ((_4020 * 3.5) + 5.0)) * 0.25);
                                float _4044 = 1.0 - _1189;
                                float _4051 = sqrt(1.0 - ((1.0 - (_4044 * _4044)) * (1.0 - (_4043 * _4043))));
                                float _4052 = _4051 * _4051;
                                float _4053 = _4052 * _4052;
                                float _4054 = _4000 - _3473;
                                float _4055 = _4001 - _3474;
                                float _4056 = _4002 - _3475;
                                float _4060 = inversesqrt(dot(vec3(_4054, _4055, _4056), vec3(_4054, _4055, _4056)));
                                float _4064 = dot(vec3(_1069, _1072, _1075), vec3((-0.0) - _3473, (-0.0) - _3474, (-0.0) - _3475));
                                float _5274 = isnan(0.0) ? _4064 : (isnan(_4064) ? 0.0 : max(_4064, 0.0));
                                float _4067 = isnan(1.0) ? _5274 : (isnan(_5274) ? 1.0 : min(_5274, 1.0));
                                float _4068 = dot(vec3(_1069, _1072, _1075), vec3(_4060 * _4054, _4060 * _4055, _4060 * _4056));
                                float _5285 = isnan(0.0) ? _4068 : (isnan(_4068) ? 0.0 : max(_4068, 0.0));
                                float _4071 = isnan(1.0) ? _5285 : (isnan(_5285) ? 1.0 : min(_5285, 1.0));
                                float _4075 = ((_4071 * _4071) * (_4053 + (-1.0))) + 1.0;
                                float _4076 = _4013 * _4052;
                                float _4077 = _4076 * _4076;
                                float _4083 = ((1.0 - _4077) * dot(vec3(_1069, _1072, _1075), vec3(_4000, _4001, _4002))) + _4077;
                                float _5296 = isnan(0.0) ? _4083 : (isnan(_4083) ? 0.0 : max(_4083, 0.0));
                                float _4084 = isnan(1.0) ? _5296 : (isnan(_5296) ? 1.0 : min(_5296, 1.0));
                                float _4085 = 1.0 - _4052;
                                float _4095 = (0.5 / (((_4084 * ((_4067 * _4085) + _4052)) + 9.9999999392252902907785028219223e-09) + (((_4084 * _4085) + _4052) * _4067))) * _4084;
                                float _5307 = isnan(0.0) ? _4095 : (isnan(_4095) ? 0.0 : max(_4095, 0.0));
                                float _4105 = (_4030 * _4007) * (((_4053 * 3.1415927410125732421875) * (isnan(1.0) ? _5307 : (isnan(_5307) ? 1.0 : min(_5307, 1.0)))) / ((_4075 * _4075) * ((_4020 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4031 * _3876.z;
                                frontier_phi_88_pred_1 = _4031 * _3876.y;
                                frontier_phi_88_pred_2 = _4031 * _3876.x;
                                frontier_phi_88_pred_3 = _4105 * _3888.z;
                                frontier_phi_88_pred_4 = _4105 * _3888.y;
                                frontier_phi_88_pred_5 = _4105 * _3888.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4114 = frontier_phi_88_pred;
                            _4113 = frontier_phi_88_pred_1;
                            _4112 = frontier_phi_88_pred_2;
                            _4111 = frontier_phi_88_pred_3;
                            _4110 = frontier_phi_88_pred_4;
                            _4109 = frontier_phi_88_pred_5;
                            _3818 = _4112 + _3831;
                            _3819 = _4113 + _3832;
                            _3820 = _4114 + _3833;
                            _3815 = _4109 + _3828;
                            _3816 = _4110 + _3829;
                            _3817 = _4111 + _3830;
                            if (_3835 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3828 = _3815;
                                _3829 = _3816;
                                _3830 = _3817;
                                _3831 = _3818;
                                _3832 = _3819;
                                _3833 = _3820;
                                _3834 = _3835;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3820;
                        frontier_phi_82_pred_1 = _3819;
                        frontier_phi_82_pred_2 = _3818;
                        frontier_phi_82_pred_3 = _3817;
                        frontier_phi_82_pred_4 = _3816;
                        frontier_phi_82_pred_5 = _3815;
                    }
                    _3458 = frontier_phi_82_pred;
                    _3456 = frontier_phi_82_pred_1;
                    _3454 = frontier_phi_82_pred_2;
                    _3452 = frontier_phi_82_pred_3;
                    _3450 = frontier_phi_82_pred_4;
                    _3448 = frontier_phi_82_pred_5;
                    uint _3614 = _3613 + 1u;
                    if (_3614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3607 = _3448;
                        _3608 = _3450;
                        _3609 = _3452;
                        _3610 = _3454;
                        _3611 = _3456;
                        _3612 = _3458;
                        _3613 = _3614;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3454;
                frontier_phi_63_64_ladder_1 = _3458;
                frontier_phi_63_64_ladder_2 = _3456;
                frontier_phi_63_64_ladder_3 = _3452;
                frontier_phi_63_64_ladder_4 = _3450;
                frontier_phi_63_64_ladder_5 = _3448;
            }
            else
            {
                frontier_phi_63_64_ladder = _3325;
                frontier_phi_63_64_ladder_1 = _3329;
                frontier_phi_63_64_ladder_2 = _3327;
                frontier_phi_63_64_ladder_3 = _3323;
                frontier_phi_63_64_ladder_4 = _3321;
                frontier_phi_63_64_ladder_5 = _3319;
            }
            _3447 = frontier_phi_63_64_ladder_5;
            _3449 = frontier_phi_63_64_ladder_4;
            _3451 = frontier_phi_63_64_ladder_3;
            _3453 = frontier_phi_63_64_ladder;
            _3455 = frontier_phi_63_64_ladder_2;
            _3457 = frontier_phi_63_64_ladder_1;
        }
        float _3462 = isnan(1.0) ? _1173 : (isnan(_1173) ? 1.0 : min(_1173, 1.0));
        _3223 = (_3462 * _3453) + _2735;
        _3225 = (_3462 * _3455) + _2737;
        _3227 = (_3462 * _3457) + _2739;
        _3229 = ((_3447 * _1158) * _3462) + _3073;
        _3231 = ((_3449 * _1160) * _3462) + _3075;
        _3233 = ((_3451 * _1161) * _3462) + _3077;
    }
    else
    {
        _3223 = _2735;
        _3225 = _2737;
        _3227 = _2739;
        _3229 = _3073;
        _3231 = _3075;
        _3233 = _3077;
    }
    uint _3239 = _1102 + uint(cbMatDynParam._m0[0u].w);
    float _3245 = (((((cbMtdParam._m0[22u].x * _870.x) * cbMtdParam._m0[32u].x) * _891) + _643) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3239].x;
    float _3246 = (((((cbMtdParam._m0[22u].y * _870.y) * cbMtdParam._m0[32u].x) * _891) + _644) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3239].y;
    float _3247 = (((((cbMtdParam._m0[22u].z * _870.z) * cbMtdParam._m0[32u].x) * _891) + _645) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3239].z;
    float _5323 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _5334 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
    float _5345 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _3264 = (((isnan(1.0) ? _5323 : (isnan(_5323) ? 1.0 : min(_5323, 1.0))) * (_3223 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1173))) + ((_3229 + ((isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0))) * _2001)) * cbPerFrame._m0[3u].x)) + _3245;
    float _3266 = (_3246 + ((_3231 + ((isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0))) * _2001)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5334 : (isnan(_5334) ? 1.0 : min(_5334, 1.0))) * (_3225 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1173)));
    float _3268 = (_3247 + ((_3233 + ((isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0))) * _2001)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5345 : (isnan(_5345) ? 1.0 : min(_5345, 1.0))) * (_3227 + ((isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0))) * _1173)));
    float _3269 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
    float _3270 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
    float _3271 = isnan(0.0) ? _3268 : (isnan(_3268) ? 0.0 : max(_3268, 0.0));
    float _3277 = cbMtdParam._m0[2u].x * _3245;
    float _3278 = cbMtdParam._m0[2u].y * _3246;
    float _3279 = cbMtdParam._m0[2u].z * _3247;
    float _5371 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3281 = isnan(1.0) ? _5371 : (isnan(_5371) ? 1.0 : min(_5371, 1.0));
    uint _3282 = _1101 + 6u;
    float _3290 = _1046 / cbSceneParam._m0[86u].x;
    float _3291 = _1047 / cbSceneParam._m0[86u].y;
    vec4 _3305 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3290, _3291, (log2((isnan(cbSceneParam._m0[77u].w) ? _989 : (isnan(_989) ? cbSceneParam._m0[77u].w : min(_989, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3307 = _3305.x;
    float _3308 = _3305.y;
    float _3309 = _3305.z;
    float _3310 = _3305.w;
    float _3381;
    float _3383;
    float _3385;
    float _3387;
    if (_989 > cbSceneParam._m0[78u].w)
    {
        float _3344 = isnan(_989) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _989 : min(cbSceneParam._m0[80u].w, _989));
        float _3345 = _3344 / _989;
        float _3356 = _3345 * _1019;
        float _3357 = _1020 * _3345;
        float _3358 = (-0.0) - _3357;
        float _3359 = _3345 * _1021;
        float _3361 = (cbSceneParam._m0[77u].w * _3358) / _3344;
        float _3362 = _3361 + cbSceneParam._m0[79u].w;
        float _3363 = cbSceneParam._m0[79u].w - _3357;
        float _3369 = sqrt(((_3356 * _3356) + (_3357 * _3357)) + (_3359 * _3359));
        float _3372 = (1.0 - (cbSceneParam._m0[77u].w / _3344)) * _3369;
        float _3377 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3379 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3564;
        if (abs((_3358 - _3361) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3564 = ((((_3362 > 0.0) ? exp2(_3377 * _3362) : (2.0 - exp2(_3379 * _3362))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3372;
        }
        else
        {
            float _3508 = 1.0 / cbSceneParam._m0[80u].x;
            float _3509 = isnan(_3363) ? _3362 : (isnan(_3362) ? _3363 : max(_3362, _3363));
            float _3510 = isnan(_3363) ? _3362 : (isnan(_3362) ? _3363 : min(_3362, _3363));
            float _3519 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : min(_3509, 0.0));
            float _3520 = isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : min(_3510, 0.0));
            _3564 = ((abs(_3369 / _3358) * cbSceneParam._m0[80u].y) * ((((_3519 - _3520) * 2.0) - ((exp2(_3377 * (isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0)))) - exp2(_3377 * (isnan(0.0) ? _3510 : (isnan(_3510) ? 0.0 : max(_3510, 0.0))))) * _3508)) - ((exp2(_3379 * _3519) - exp2(_3379 * _3520)) * _3508))) + (_3372 * cbSceneParam._m0[80u].z);
        }
        vec4 _3566 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3290, _3291, 1.0), 0.0);
        float _3575 = exp2((_3564 * (-1.44269502162933349609375)) * (1.0 - _3566.w));
        float _3576 = log2(_3575);
        float _3592 = log2(_3310);
        _3381 = (exp2(_3592 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3576 * cbSceneParam._m0[78u].x)) * _3566.x) / cbSceneParam._m0[78u].x)) + _3307;
        _3383 = (exp2(_3592 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3576 * cbSceneParam._m0[78u].y)) * _3566.y) / cbSceneParam._m0[78u].y)) + _3308;
        _3385 = (exp2(_3592 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3576 * cbSceneParam._m0[78u].z)) * _3566.z) / cbSceneParam._m0[78u].z)) + _3309;
        _3387 = _3575 * _3310;
    }
    else
    {
        _3381 = _3307;
        _3383 = _3308;
        _3385 = _3309;
        _3387 = _3310;
    }
    bool _3602;
    vec4 _3396;
    vec4 _3418;
    float _3420;
    float _3424;
    float _3425;
    float _3426;
    float _3429;
    float _3432;
    float _3435;
    float _3436;
    bool _3446;
    for (;;)
    {
        _3396 = cbMatDynParam._m0[0u];
        float _3398 = roundEven(_3396.y);
        bool _3399 = _3398 == 3.0;
        float _3400 = log2(_3387);
        float _3404 = exp2(_3400 * cbSceneParam._m0[78u].x);
        float _3405 = exp2(_3400 * cbSceneParam._m0[78u].y);
        float _3406 = exp2(_3400 * cbSceneParam._m0[78u].z);
        float _3407 = _3404 * _3269;
        float _3408 = _3405 * _3270;
        float _3409 = _3406 * _3271;
        float _3416 = _1035 + (-0.5);
        _3418 = cbMtdParam._m0[1u];
        _3420 = _3418.y * _3416;
        float _3423 = (_3398 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3424 = _3423 * (_3399 ? _3407 : (_3407 + (cbSceneParam._m0[72u].w * _3381)));
        _3425 = _3423 * (_3399 ? _3408 : (_3408 + (cbSceneParam._m0[72u].w * _3383)));
        _3426 = _3423 * (_3399 ? _3409 : (_3409 + (cbSceneParam._m0[72u].w * _3385)));
        _3429 = ((_3277 * _3281) * _3404) * _3423;
        _3432 = ((_3278 * _3281) * _3405) * _3423;
        _3435 = ((_3279 * _3281) * _3406) * _3423;
        _3436 = _3416 * 0.999000012874603271484375;
        _3446 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3446)
        {
            if ((cbInstanceData._m0[_1101 + 7u].x + _3436) < 0.5)
            {
                _3602 = true;
                break;
            }
        }
        uint _3543 = _1102 + uint(_3396.w);
        if ((cbInstanceData._m0[_3543].w < 1.0) && ((cbInstanceData._m0[_3543].w + _3436) < 0.5))
        {
            _3602 = true;
            break;
        }
        if ((_3420 + 1.0) < _3418.x)
        {
            _3602 = true;
            break;
        }
        _3602 = false;
        break;
    }
    float _3806;
    if (_3602)
    {
        discard_state = true;
        _3806 = 0.0;
    }
    else
    {
        _3806 = cbInstanceData._m0[_3282].w;
    }
    SV_Target.x = _3424;
    SV_Target.y = _3425;
    SV_Target.z = _3426;
    SV_Target.w = _3806;
    SV_Target_1.x = _3429;
    SV_Target_1.y = _3432;
    SV_Target_1.z = _3435;
    SV_Target_1.w = cbInstanceData._m0[_3282].w;
    discard_exit();
}


