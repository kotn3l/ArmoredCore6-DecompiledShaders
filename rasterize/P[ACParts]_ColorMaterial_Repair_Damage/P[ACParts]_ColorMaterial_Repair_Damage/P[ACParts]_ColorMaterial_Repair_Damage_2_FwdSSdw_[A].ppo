#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1754;
float _4187;
float _4188;
float _4189;
float _4190;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _274 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _287 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_274 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _292 = _287.z;
    float _293 = _287.w;
    vec4 _315 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _274) + cbTextureTilingScale._m0[11u].w));
    float _320 = _315.w;
    float _332 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _292) * exp2(log2(1.0 - _320) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    vec4 _348 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _274) + cbTextureTilingScale._m0[2u].w));
    float _358 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _366 = (_358 - (((_348.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _358))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4209 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _367 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
    float _369 = _334 - (_367 * _334);
    float _370 = isnan(0.0) ? _369 : (isnan(_369) ? 0.0 : max(_369, 0.0));
    vec4 _384 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _387 = _384.y;
    float _388 = _387 * (isnan(1.0) ? _370 : (isnan(_370) ? 1.0 : min(_370, 1.0)));
    float _397 = exp2(log2(cbMtdParam._m0[32u].w * _320) * cbMtdParam._m0[31u].z);
    float _399 = _397 - (_367 * _397);
    float _400 = isnan(0.0) ? _399 : (isnan(_399) ? 0.0 : max(_399, 0.0));
    float _401 = isnan(1.0) ? _400 : (isnan(_400) ? 1.0 : min(_400, 1.0));
    float _412 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_293) * 4.5));
    float _421 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _292) * _412)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _422 = isnan(0.0) ? _421 : (isnan(_421) ? 0.0 : max(_421, 0.0));
    float _423 = isnan(1.0) ? _422 : (isnan(_422) ? 1.0 : min(_422, 1.0));
    float _434 = exp2(log2((1.0 - (((_412 * _412) * _292) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _435 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _439 = (((isnan(1.0) ? _435 : (isnan(_435) ? 1.0 : min(_435, 1.0))) - _293) * _387) + _293;
    vec4 _451 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _274) + cbTextureTilingScale._m0[5u].w));
    float _211[6];
    float _212[6];
    float _213[6];
    _211[0u] = cbMtdParam._m0[12u].x;
    _212[0u] = cbMtdParam._m0[12u].y;
    _213[0u] = cbMtdParam._m0[12u].z;
    _211[1u] = cbMtdParam._m0[13u].x;
    _212[1u] = cbMtdParam._m0[13u].y;
    _213[1u] = cbMtdParam._m0[13u].z;
    _211[2u] = cbMtdParam._m0[14u].x;
    _212[2u] = cbMtdParam._m0[14u].y;
    _213[2u] = cbMtdParam._m0[14u].z;
    _211[3u] = cbMtdParam._m0[15u].x;
    _212[3u] = cbMtdParam._m0[15u].y;
    _213[3u] = cbMtdParam._m0[15u].z;
    _211[4u] = cbMtdParam._m0[16u].x;
    _212[4u] = cbMtdParam._m0[16u].y;
    _213[4u] = cbMtdParam._m0[16u].z;
    _211[5u] = cbMtdParam._m0[11u].x;
    _212[5u] = cbMtdParam._m0[11u].y;
    _213[5u] = cbMtdParam._m0[11u].z;
    float _519 = (_384.x + (-0.02500000037252902984619140625)) * 8.0;
    float _521 = roundEven(_519);
    float _522 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    uint _525 = uint(int(isnan(5.0) ? _522 : (isnan(_522) ? 5.0 : min(_522, 5.0))));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = 1.0;
    _208[0u] = 1.0;
    _209[0u] = 1.0;
    _207[1u] = cbMtdParam._m0[23u].x;
    _208[1u] = cbMtdParam._m0[23u].y;
    _209[1u] = cbMtdParam._m0[23u].z;
    _207[2u] = cbMtdParam._m0[21u].x;
    _208[2u] = cbMtdParam._m0[21u].y;
    _209[2u] = cbMtdParam._m0[21u].z;
    _207[3u] = cbMtdParam._m0[19u].x;
    _208[3u] = cbMtdParam._m0[19u].y;
    _209[3u] = cbMtdParam._m0[19u].z;
    _207[4u] = cbMtdParam._m0[18u].x;
    _208[4u] = cbMtdParam._m0[18u].y;
    _209[4u] = cbMtdParam._m0[18u].z;
    _207[5u] = cbMtdParam._m0[17u].x;
    _208[5u] = cbMtdParam._m0[17u].y;
    _209[5u] = cbMtdParam._m0[17u].z;
    float _611 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _612 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    uint _614 = uint(int(isnan(5.0) ? _612 : (isnan(_612) ? 5.0 : min(_612, 5.0))));
    float _210[6];
    _210[0u] = 1.0;
    _210[1u] = cbMtdParam._m0[23u].w;
    _210[2u] = cbMtdParam._m0[21u].w;
    _210[3u] = cbMtdParam._m0[19u].w;
    _210[4u] = cbMtdParam._m0[18u].w;
    _210[5u] = cbMtdParam._m0[17u].w;
    float _651 = ((((_211[_525] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_207[_614] - _211[_525])) * _210[_525])) * _387) + cbMtdParam._m0[10u].x) * _451.x;
    float _652 = ((((_212[_525] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_208[_614] - _212[_525])) * _210[_525])) * _387) + cbMtdParam._m0[10u].y) * _451.y;
    float _653 = ((((_213[_525] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_209[_614] - _213[_525])) * _210[_525])) * _387) + cbMtdParam._m0[10u].z) * _451.z;
    vec4 _665 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _274) + cbTextureTilingScale._m0[1u].w));
    float _676 = cbMtdParam._m0[9u].x * _665.x;
    float _677 = cbMtdParam._m0[9u].y * _665.y;
    float _678 = cbMtdParam._m0[9u].z * _665.z;
    float _685 = ((_676 - _651) * _439) + _651;
    float _686 = ((_677 - _652) * _439) + _652;
    float _687 = ((_678 - _653) * _439) + _653;
    vec4 _699 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _274) + cbTextureTilingScale._m0[6u].w));
    float _719 = (((cbMtdParam._m0[20u].x * _699.x) - _685) * _423) + _685;
    float _720 = (((cbMtdParam._m0[20u].y * _699.y) - _686) * _423) + _686;
    float _721 = (((cbMtdParam._m0[20u].z * _699.z) - _687) * _423) + _687;
    vec4 _733 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _274) + cbTextureTilingScale._m0[9u].w));
    float _753 = (((cbMtdParam._m0[29u].x * _733.x) - _719) * _401) + _719;
    float _754 = (((cbMtdParam._m0[29u].y * _733.y) - _720) * _401) + _720;
    float _755 = (((cbMtdParam._m0[29u].z * _733.z) - _721) * _401) + _721;
    float _204[6];
    float _205[6];
    float _206[6];
    _204[0u] = cbMtdParam._m0[30u].x;
    _205[0u] = cbMtdParam._m0[30u].y;
    _206[0u] = cbMtdParam._m0[30u].z;
    _204[1u] = cbMtdParam._m0[28u].x;
    _205[1u] = cbMtdParam._m0[28u].y;
    _206[1u] = cbMtdParam._m0[28u].z;
    _204[2u] = cbMtdParam._m0[27u].x;
    _205[2u] = cbMtdParam._m0[27u].y;
    _206[2u] = cbMtdParam._m0[27u].z;
    _204[3u] = cbMtdParam._m0[26u].x;
    _205[3u] = cbMtdParam._m0[26u].y;
    _206[3u] = cbMtdParam._m0[26u].z;
    _204[4u] = cbMtdParam._m0[25u].x;
    _205[4u] = cbMtdParam._m0[25u].y;
    _206[4u] = cbMtdParam._m0[25u].z;
    _204[5u] = cbMtdParam._m0[24u].x;
    _205[5u] = cbMtdParam._m0[24u].y;
    _206[5u] = cbMtdParam._m0[24u].z;
    float _828 = _204[_525] * _387;
    float _829 = _205[_525] * _387;
    float _830 = _206[_525] * _387;
    float _831 = _828 + ((_315.x * 4.5) * (((_676 - _753) * _388) + _753));
    float _832 = _829 + ((_315.y * 4.5) * (((_677 - _754) * _388) + _754));
    float _833 = _830 + ((_315.z * 4.5) * (((_678 - _755) * _388) + _755));
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[37u].w;
    _200[0u] = cbMtdParam._m0[38u].x;
    _199[1u] = cbMtdParam._m0[39u].w;
    _200[1u] = cbMtdParam._m0[40u].x;
    _199[2u] = cbMtdParam._m0[40u].y;
    _200[2u] = cbMtdParam._m0[40u].z;
    _199[3u] = cbMtdParam._m0[40u].w;
    _200[3u] = cbMtdParam._m0[41u].x;
    _199[4u] = cbMtdParam._m0[41u].y;
    _200[4u] = cbMtdParam._m0[41u].z;
    float _866 = roundEven(5.0 - _519);
    float _867 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = isnan(4.0) ? _867 : (isnan(_867) ? 4.0 : min(_867, 4.0));
    float _870 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    uint _872 = uint(int(isnan(4.0) ? _870 : (isnan(_870) ? 4.0 : min(_870, 4.0))));
    float _881 = ((cbMtdParam._m0[42u].z - _200[_872]) * _439) + _200[_872];
    float _889 = ((cbMtdParam._m0[43u].x - _881) * _423) + _881;
    float _894 = ((cbMtdParam._m0[43u].z - _889) * _401) + _889;
    float _899 = ((cbMtdParam._m0[39u].z - _894) * _388) + _894;
    vec4 _915 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _274) + cbTextureTilingScale._m0[7u].w));
    float _917 = _915.x;
    float _918 = _915.y;
    float _920 = _915.z + _199[_872];
    vec4 _932 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _274) + cbTextureTilingScale._m0[10u].w));
    float _940 = (((cbMtdParam._m0[42u].y - _920) + _932.z) * _439) + _920;
    vec4 _952 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _274) + cbTextureTilingScale._m0[12u].w));
    float _960 = (((cbMtdParam._m0[42u].w - _940) + _952.z) * _423) + _940;
    float _966 = ((((_292 * 2.0) * _960) - _960) * cbMtdParam._m0[34u].x) + _960;
    vec4 _978 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _274) + cbTextureTilingScale._m0[13u].w));
    float _986 = (((_978.z + cbMtdParam._m0[43u].y) - _966) * _401) + _966;
    float _990 = (((cbMtdParam._m0[39u].y + _348.z) - _986) * _388) + _986;
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1027 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1054 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1023 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1027 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1071 = (-0.0) - ((_1027 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1075 = (_1027 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1076 = isnan(_1075) ? _1071 : (isnan(_1071) ? _1075 : min(_1071, _1075));
    float _4305 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
    float _1077 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
    float _1103 = ((_932.x - _917) * _439) + _917;
    float _1104 = ((_932.y - _918) * _439) + _918;
    float _1109 = ((_952.x - _1103) * _423) + _1103;
    float _1110 = ((_952.y - _1104) * _423) + _1104;
    float _1115 = ((_978.x - _1109) * _401) + _1109;
    float _1116 = ((_978.y - _1110) * _401) + _1110;
    float _1125 = ((((_348.x - _1115) * _388) + _1115) * 2.0) + (-1.0);
    float _1126 = ((((_348.y - _1116) * _388) + _1116) * 2.0) + (-1.0);
    float _1127 = dot(vec2(_1125, _1126), vec2(_1125, _1126));
    float _4316 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _1132 = sqrt(1.0 - (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))));
    float _1135 = (cbMtdParam._m0[34u].z * ((_287.x * 2.0) + (-1.0))) + _1125;
    float _1136 = (cbMtdParam._m0[34u].z * ((_287.y * 2.0) + (-1.0))) + _1126;
    float _1139 = fma(_1132, _253 * NORMAL.x, fma(_1136, _260 * TANGENT.x, (_246 * _238) * _1135));
    float _1142 = fma(_1132, _253 * NORMAL.y, fma(_1136, _260 * TANGENT.y, (_246 * _239) * _1135));
    float _1145 = fma(_1132, _253 * NORMAL.z, fma(_1136, _260 * TANGENT.z, (_246 * _240) * _1135));
    float _1149 = inversesqrt(dot(vec3(_1139, _1142, _1145), vec3(_1139, _1142, _1145)));
    float _1150 = _1149 * _1139;
    float _1151 = _1149 * _1142;
    float _1152 = _1149 * _1145;
    float _4327 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _1153 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _4338 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4349 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4360 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4371 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _1157 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
    float _1173 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1193 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1203 = cbSceneParam._m0[71u].x - (_1023 / _1193);
    float _1204 = cbSceneParam._m0[71u].y - (_1027 / _1193);
    float _1205 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1193);
    float _1209 = inversesqrt(dot(vec3(_1203, _1204, _1205), vec3(_1203, _1204, _1205)));
    float _1210 = _1203 * _1209;
    float _1211 = _1204 * _1209;
    float _1212 = _1205 * _1209;
    vec4 _1217 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1219 = _1217.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1437 = sqrt(((_1203 * _1203) + (_1204 * _1204)) + (_1205 * _1205));
        float _1443 = (cbMatDynParam._m0[5u].x * _1437) + cbMatDynParam._m0[5u].y;
        float _4382 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1444 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1448 = (cbMatDynParam._m0[5u].z * _1437) + cbMatDynParam._m0[5u].w;
        float _4393 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0))) - _1444)) + _1444) < ((_1219 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1230 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1231 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1233 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1235 = _1233.w;
    float _1253 = fma(_1152, cbSceneParam._m0[5u].z, fma(_1151, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1150));
    float _1256 = fma(_1152, cbSceneParam._m0[6u].z, fma(_1151, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1150));
    float _1259 = fma(_1152, cbSceneParam._m0[7u].z, fma(_1151, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1150));
    vec4 _1261 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1272 = (((_1261.y - _1153) + (_1261.w * _1153)) * cbMtdParam._m0[3u].x) + _1153;
    uint _1285 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1286 = _1285 + 9u;
    uint _1287 = _1286 + uint(cbMatDynParam._m0[0u].w);
    float _1293 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0)))) * cbInstanceData._m0[_1287].x;
    float _1294 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * cbInstanceData._m0[_1287].y;
    float _1295 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0)))) * cbInstanceData._m0[_1287].z;
    float _4404 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _1296 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
    float _4415 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
    float _1297 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
    float _4426 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
    float _1298 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
    vec4 _1299 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1304 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1315 = (((_1304.x - _1157) + (_1304.w * _1157)) * cbMtdParam._m0[3u].x) + _1157;
    float _1328 = (cbMtdParam._m0[3u].x * (((_1296 * _1235) - _1296) + _1299.x)) + _1296;
    float _1329 = (cbMtdParam._m0[3u].x * (((_1297 * _1235) - _1297) + _1299.y)) + _1297;
    float _1330 = (cbMtdParam._m0[3u].x * (((_1298 * _1235) - _1298) + _1299.z)) + _1298;
    float _1331 = 1.0 - _1315;
    float _1332 = _1331 * _1328;
    float _1333 = _1331 * _1329;
    float _1334 = _1331 * _1330;
    float _1339 = (_1328 + (-0.039999999105930328369140625)) * _1315;
    float _1340 = (_1329 + (-0.039999999105930328369140625)) * _1315;
    float _1341 = (_1330 + (-0.039999999105930328369140625)) * _1315;
    float _1342 = _1339 + 0.039999999105930328369140625;
    float _1344 = _1340 + 0.039999999105930328369140625;
    float _1345 = _1341 + 0.039999999105930328369140625;
    vec4 _1354 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1230, cbSceneParam._m0[86u].y * _1231));
    float _1357 = _1354.x * TEXCOORD_5.w;
    float _1358 = dot(vec3(_1150, _1151, _1152), vec3(_1210, _1211, _1212));
    float _1361 = _1358 * 2.0;
    float _1365 = (_1361 * _1150) - _1210;
    float _1366 = (_1361 * _1151) - _1211;
    float _1367 = (_1361 * _1152) - _1212;
    float _1371 = abs(dot(vec3(_1210, _1211, _1212), vec3(_1150, _1151, _1152)));
    float _4437 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
    float _1373 = sqrt(_1272);
    float _1384 = exp2((_1373 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1373 * 3.0));
    float _1390 = (1.0 - _1384) * ((_1373 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1391 = _1384 * _1373;
    float _1419 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1423 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1427 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1753;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1480 = fma(_1427, cbModelParam._m0[26u].z, fma(_1423, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1419));
        float _1484 = fma(_1427, cbModelParam._m0[27u].z, fma(_1423, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1419));
        float _1488 = fma(_1427, cbModelParam._m0[28u].z, fma(_1423, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1419));
        float _1512 = _1419 + _1150;
        float _1513 = _1423 + _1151;
        float _1514 = _1427 + _1152;
        float _1524 = fma(_1514, cbModelParam._m0[26u].z, fma(_1513, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1512)) - _1480;
        float _1525 = fma(_1514, cbModelParam._m0[27u].z, fma(_1513, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1512)) - _1484;
        float _1526 = fma(_1514, cbModelParam._m0[28u].z, fma(_1513, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1512)) - _1488;
        float _1530 = inversesqrt(dot(vec3(_1524, _1525, _1526), vec3(_1524, _1525, _1526)));
        float _1542 = ((_1530 * _1524) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1480 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1543 = ((_1530 * _1525) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1484 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1544 = ((_1530 * _1526) / cbModelParam._m0[34u].z) + ((((((_1488 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1547 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1554 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1561 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        vec4 _1568 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1542, _1543, _1544), 0.0);
        float _1581 = exp2((_1547.w + (-0.5)) * 20.0) * 2.0;
        float _1582 = _1581 * (_1547.x + (-0.5));
        float _1583 = _1581 * (_1547.y + (-0.5));
        float _1584 = _1581 * (_1547.z + (-0.5));
        float _1591 = exp2((_1554.w + (-0.5)) * 20.0) * 2.0;
        float _1592 = _1591 * (_1554.x + (-0.5));
        float _1593 = _1591 * (_1554.y + (-0.5));
        float _1594 = _1591 * (_1554.z + (-0.5));
        float _1601 = exp2((_1561.w + (-0.5)) * 20.0) * 2.0;
        float _1602 = _1601 * (_1561.x + (-0.5));
        float _1603 = _1601 * (_1561.y + (-0.5));
        float _1604 = _1601 * (_1561.z + (-0.5));
        float _1611 = exp2((_1568.w + (-0.5)) * 20.0) * 2.0;
        float _1612 = _1611 * (_1568.x + (-0.5));
        float _1613 = _1611 * (_1568.y + (-0.5));
        float _1614 = _1611 * (_1568.z + (-0.5));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = _1582 * 0.5;
        float _1619 = _1592 * 0.5;
        float _1620 = _1602 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1635 = (dot(vec3(_1150, _1151, _1152), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4463 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1645 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4474 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4485 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_1647 + 1.0))) + _1652) * _1615;
        float _1662 = _1583 * 0.5;
        float _1663 = _1593 * 0.5;
        float _1664 = _1603 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_1150, _1151, _1152), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4496 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1616 + 9.9999997473787516355514526367188e-06);
        float _4507 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4518 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_1689 + 1.0))) + _1694) * _1616;
        float _1704 = _1584 * 0.5;
        float _1705 = _1594 * 0.5;
        float _1706 = _1604 * 0.5;
        float _1707 = dot(vec3(_1704, _1705, _1706), vec3(_1704, _1705, _1706));
        float _1712 = (_1707 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1707);
        float _1720 = (dot(vec3(_1150, _1151, _1152), vec3(_1712 * _1704, _1712 * _1705, _1712 * _1706)) + 1.0) * 0.5;
        float _4529 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1729 = sqrt(((_1705 * _1705) + (_1704 * _1704)) + (_1706 * _1706)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4540 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _1731 = _1730 * 2.0;
        float _1735 = (1.0 - _1730) / (_1730 + 1.0);
        float _4551 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1736 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
        float _1745 = ((((1.0 - _1736) * (_1731 + 2.0)) * exp2(log2(isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0))) * (_1731 + 1.0))) + _1736) * _1617;
        _1753 = _1584;
        _1755 = _1583;
        _1756 = _1582;
        _1757 = _1594;
        _1758 = _1593;
        _1759 = _1592;
        _1760 = _1604;
        _1761 = _1603;
        _1762 = _1602;
        _1763 = _1617;
        _1764 = _1616;
        _1765 = _1615;
        _1766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1767 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
        _1768 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)));
    }
    else
    {
        _1753 = _1754;
        _1755 = _1754;
        _1756 = _1754;
        _1757 = _1754;
        _1758 = _1754;
        _1759 = _1754;
        _1760 = _1754;
        _1761 = _1754;
        _1762 = _1754;
        _1763 = _1754;
        _1764 = _1754;
        _1765 = _1754;
        _1766 = 0.0;
        _1767 = 0.0;
        _1768 = 0.0;
    }
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    float _2072;
    float _2073;
    float _2074;
    float _2075;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1794 = fma(_1427, cbModelParam._m0[30u].z, fma(_1423, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1419));
        float _1798 = fma(_1427, cbModelParam._m0[31u].z, fma(_1423, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1419));
        float _1802 = fma(_1427, cbModelParam._m0[32u].z, fma(_1423, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1419));
        float _1824 = _1419 + _1150;
        float _1825 = _1423 + _1151;
        float _1826 = _1427 + _1152;
        float _1836 = fma(_1826, cbModelParam._m0[30u].z, fma(_1825, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1824)) - _1794;
        float _1837 = fma(_1826, cbModelParam._m0[31u].z, fma(_1825, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1824)) - _1798;
        float _1838 = fma(_1826, cbModelParam._m0[32u].z, fma(_1825, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1824)) - _1802;
        float _1842 = inversesqrt(dot(vec3(_1836, _1837, _1838), vec3(_1836, _1837, _1838)));
        float _1854 = ((_1842 * _1836) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1794 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1855 = ((_1842 * _1837) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1798 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1856 = ((_1842 * _1838) / cbModelParam._m0[35u].z) + ((((((_1802 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1858 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1854, _1855, _1856), 0.0);
        vec4 _1865 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1854, _1855, _1856), 0.0);
        vec4 _1872 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1854, _1855, _1856), 0.0);
        vec4 _1879 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1854, _1855, _1856), 0.0);
        float _1891 = exp2((_1858.w + (-0.5)) * 20.0) * 2.0;
        float _1892 = _1891 * (_1858.x + (-0.5));
        float _1893 = _1891 * (_1858.y + (-0.5));
        float _1894 = _1891 * (_1858.z + (-0.5));
        float _1901 = exp2((_1865.w + (-0.5)) * 20.0) * 2.0;
        float _1902 = _1901 * (_1865.x + (-0.5));
        float _1903 = _1901 * (_1865.y + (-0.5));
        float _1904 = _1901 * (_1865.z + (-0.5));
        float _1911 = exp2((_1872.w + (-0.5)) * 20.0) * 2.0;
        float _1912 = _1911 * (_1872.x + (-0.5));
        float _1913 = _1911 * (_1872.y + (-0.5));
        float _1914 = _1911 * (_1872.z + (-0.5));
        float _1921 = exp2((_1879.w + (-0.5)) * 20.0) * 2.0;
        float _1922 = _1921 * (_1879.x + (-0.5));
        float _1923 = _1921 * (_1879.y + (-0.5));
        float _1924 = _1921 * (_1879.z + (-0.5));
        float _1925 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
        float _1927 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1928 = _1892 * 0.5;
        float _1929 = _1902 * 0.5;
        float _1930 = _1912 * 0.5;
        float _1931 = dot(vec3(_1928, _1929, _1930), vec3(_1928, _1929, _1930));
        float _1936 = (_1931 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1931);
        float _1944 = (dot(vec3(_1150, _1151, _1152), vec3(_1936 * _1928, _1936 * _1929, _1936 * _1930)) + 1.0) * 0.5;
        float _4592 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1953 = sqrt(((_1929 * _1929) + (_1928 * _1928)) + (_1930 * _1930)) / (_1925 + 9.9999997473787516355514526367188e-06);
        float _4603 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
        float _1955 = _1954 * 2.0;
        float _1959 = (1.0 - _1954) / (_1954 + 1.0);
        float _4614 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        float _1960 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
        float _1969 = ((((1.0 - _1960) * (_1955 + 2.0)) * exp2(log2(isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0))) * (_1955 + 1.0))) + _1960) * _1925;
        float _1970 = _1893 * 0.5;
        float _1971 = _1903 * 0.5;
        float _1972 = _1913 * 0.5;
        float _1973 = dot(vec3(_1970, _1971, _1972), vec3(_1970, _1971, _1972));
        float _1978 = (_1973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1973);
        float _1986 = (dot(vec3(_1150, _1151, _1152), vec3(_1978 * _1970, _1978 * _1971, _1978 * _1972)) + 1.0) * 0.5;
        float _4625 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1995 = sqrt(((_1971 * _1971) + (_1970 * _1970)) + (_1972 * _1972)) / (_1926 + 9.9999997473787516355514526367188e-06);
        float _4636 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1997 = _1996 * 2.0;
        float _2001 = (1.0 - _1996) / (_1996 + 1.0);
        float _4647 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2002 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
        float _2011 = ((((1.0 - _2002) * (_1997 + 2.0)) * exp2(log2(isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0))) * (_1997 + 1.0))) + _2002) * _1926;
        float _2012 = _1894 * 0.5;
        float _2013 = _1904 * 0.5;
        float _2014 = _1914 * 0.5;
        float _2015 = dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014));
        float _2020 = (_2015 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2015);
        float _2028 = (dot(vec3(_1150, _1151, _1152), vec3(_2020 * _2012, _2020 * _2013, _2020 * _2014)) + 1.0) * 0.5;
        float _4658 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
        float _2037 = sqrt(((_2013 * _2013) + (_2012 * _2012)) + (_2014 * _2014)) / (_1927 + 9.9999997473787516355514526367188e-06);
        float _4669 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
        float _2039 = _2038 * 2.0;
        float _2043 = (1.0 - _2038) / (_2038 + 1.0);
        float _4680 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2044 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
        float _2053 = ((((1.0 - _2044) * (_2039 + 2.0)) * exp2(log2(isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0))) * (_2039 + 1.0))) + _2044) * _1927;
        _2061 = _1894;
        _2062 = _1893;
        _2063 = _1892;
        _2064 = _1904;
        _2065 = _1903;
        _2066 = _1902;
        _2067 = _1914;
        _2068 = _1913;
        _2069 = _1912;
        _2070 = _1927;
        _2071 = _1926;
        _2072 = _1925;
        _2073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0)));
        _2074 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0)));
        _2075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)));
    }
    else
    {
        _2061 = _1754;
        _2062 = _1754;
        _2063 = _1754;
        _2064 = _1754;
        _2065 = _1754;
        _2066 = _1754;
        _2067 = _1754;
        _2068 = _1754;
        _2069 = _1754;
        _2070 = _1754;
        _2071 = _1754;
        _2072 = _1754;
        _2073 = 0.0;
        _2074 = 0.0;
        _2075 = 0.0;
    }
    float _2085 = (cbModelParam._m0[1u].x * (_2073 - _1766)) + _1766;
    float _2086 = (cbModelParam._m0[1u].x * (_2074 - _1767)) + _1767;
    float _2087 = (cbModelParam._m0[1u].x * (_2075 - _1768)) + _1768;
    float _2108 = fma(_2087, cbSceneParam._m0[89u].z, fma(_2086, cbSceneParam._m0[89u].y, _2085 * cbSceneParam._m0[89u].x));
    float _2111 = fma(_2087, cbSceneParam._m0[90u].z, fma(_2086, cbSceneParam._m0[90u].y, _2085 * cbSceneParam._m0[90u].x));
    float _2114 = fma(_2087, cbSceneParam._m0[91u].z, fma(_2086, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2085));
    float _2127 = _1365 * 0.5;
    float _2128 = _1366 * 0.5;
    float _2129 = _1367 * 0.5;
    float _2130 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2063, _2066, _2069, _2072));
    float _2133 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2062, _2065, _2068, _2071));
    float _2136 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_2061, _2064, _2067, _2070));
    float _2170;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2143 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1753, _1757, _1760, _1763));
        float _2147 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1755, _1758, _1761, _1764));
        float _2151 = dot(vec4(_2127, _2128, _2129, 1.0), vec4(_1756, _1759, _1762, _1765));
        float _2158 = dot(vec4(cbModelParam._m0[39u]), vec4(_2127, _2128, _2129, 1.0));
        _2170 = dot(vec3(isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0)), isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0)), isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2158) ? 0.0 : (isnan(0.0) ? _2158 : max(0.0, _2158))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2170 = 1.0;
    }
    float _2181;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2172 = dot(vec4(cbModelParam._m0[40u]), vec4(_2127, _2128, _2129, 1.0));
        _2181 = dot(vec3(isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0)), isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)), isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2172) ? 0.0 : (isnan(0.0) ? _2172 : max(0.0, _2172))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2181 = 1.0;
    }
    float _2185 = (_2181 * cbModelParam._m0[1u].x) + (_2170 * (1.0 - cbModelParam._m0[1u].x));
    float _2195 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1272);
    float _2196 = isnan(_2195) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2195 : min(cbModelParam._m0[25u].z, _2195));
    float _2276;
    float _2278;
    float _2280;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2243 = fma(_1427, cbModelParam._m0[13u].z, fma(_1423, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1419)) + cbModelParam._m0[13u].w;
        float _2247 = fma(_1427, cbModelParam._m0[14u].z, fma(_1423, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1419)) + cbModelParam._m0[14u].w;
        float _2251 = fma(_1427, cbModelParam._m0[15u].z, fma(_1423, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1419)) + cbModelParam._m0[15u].w;
        float _2254 = fma(_1367, cbModelParam._m0[13u].z, fma(_1366, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1365));
        float _2257 = fma(_1367, cbModelParam._m0[14u].z, fma(_1366, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1365));
        float _2260 = fma(_1367, cbModelParam._m0[15u].z, fma(_1366, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1365));
        float _2288;
        if (_2254 > 0.0)
        {
            _2288 = abs((1.0 - _2243) / _2254);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2243 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2288 = frontier_phi_17_15_ladder;
        }
        float _2511;
        if (_2257 > 0.0)
        {
            _2511 = abs((1.0 - _2247) / _2257);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2257 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2247 + 1.0) / _2257);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2511 = frontier_phi_26_22_ladder;
        }
        float _2768;
        if (_2260 > 0.0)
        {
            _2768 = abs((1.0 - _2251) / _2260);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2260 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2251 + 1.0) / _2260);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2768 = frontier_phi_38_33_ladder;
        }
        float _2770 = isnan(_2511) ? _2288 : (isnan(_2288) ? _2511 : min(_2288, _2511));
        float _2771 = isnan(_2768) ? _2770 : (isnan(_2770) ? _2768 : min(_2770, _2768));
        float _2775 = (_2771 * _2254) + _2243;
        float _2776 = (_2771 * _2257) + _2247;
        float _2777 = (_2771 * _2260) + _2251;
        float _2778 = _2771 * 9.9999997473787516355514526367188e-05;
        float _2780 = (-1.0) - _2778;
        float _2782 = _2778 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2777 > _2782) || ((_2777 < _2780) || ((_2776 > _2782) || ((_2776 < _2780) || ((_2775 < _2780) || (_2775 > _2782))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2905 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2777, cbModelParam._m0[9u].z, fma(_2776, cbModelParam._m0[9u].y, _2775 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2777, cbModelParam._m0[10u].z, fma(_2776, cbModelParam._m0[10u].y, _2775 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2777, cbModelParam._m0[11u].z, fma(_2776, cbModelParam._m0[11u].y, _2775 * cbModelParam._m0[11u].x))), _2196);
            frontier_phi_16_38_ladder = _2905.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2905.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2905.x * cbModelParam._m0[1u].y;
        }
        _2276 = frontier_phi_16_38_ladder_2;
        _2278 = frontier_phi_16_38_ladder_1;
        _2280 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1365, _1366, _1367), _2196);
        _2276 = _2264.x * cbModelParam._m0[1u].y;
        _2278 = _2264.y * cbModelParam._m0[1u].y;
        _2280 = _2264.z * cbModelParam._m0[1u].y;
    }
    float _2284 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1272);
    float _2285 = isnan(_2284) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2284 : min(cbModelParam._m0[25u].w, _2284));
    float _2374;
    float _2376;
    float _2378;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2338 = fma(_1427, cbModelParam._m0[21u].z, fma(_1423, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1419)) + cbModelParam._m0[21u].w;
        float _2342 = fma(_1427, cbModelParam._m0[22u].z, fma(_1423, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1419)) + cbModelParam._m0[22u].w;
        float _2346 = fma(_1427, cbModelParam._m0[23u].z, fma(_1423, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1419)) + cbModelParam._m0[23u].w;
        float _2349 = fma(_1367, cbModelParam._m0[21u].z, fma(_1366, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1365));
        float _2352 = fma(_1367, cbModelParam._m0[22u].z, fma(_1366, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1365));
        float _2355 = fma(_1367, cbModelParam._m0[23u].z, fma(_1366, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1365));
        float _2516;
        if (_2349 > 0.0)
        {
            _2516 = abs((1.0 - _2338) / _2349);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2349 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2338 + 1.0) / _2349);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2516 = frontier_phi_28_24_ladder;
        }
        float _2795;
        if (_2352 > 0.0)
        {
            _2795 = abs((1.0 - _2342) / _2352);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2352 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2342 + 1.0) / _2352);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2795 = frontier_phi_40_35_ladder;
        }
        float _3008;
        if (_2355 > 0.0)
        {
            _3008 = abs((1.0 - _2346) / _2355);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2355 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2346 + 1.0) / _2355);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3008 = frontier_phi_49_46_ladder;
        }
        float _3010 = isnan(_2795) ? _2516 : (isnan(_2516) ? _2795 : min(_2516, _2795));
        float _3011 = isnan(_3008) ? _3010 : (isnan(_3010) ? _3008 : min(_3010, _3008));
        float _3015 = (_3011 * _2349) + _2338;
        float _3016 = (_3011 * _2352) + _2342;
        float _3017 = (_3011 * _2355) + _2346;
        float _3018 = _3011 * 9.9999997473787516355514526367188e-05;
        float _3019 = (-1.0) - _3018;
        float _3021 = _3018 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3017 > _3021) || ((_3017 < _3019) || ((_3016 > _3021) || ((_3016 < _3019) || ((_3015 < _3019) || (_3015 > _3021))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3245 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3017, cbModelParam._m0[17u].z, fma(_3016, cbModelParam._m0[17u].y, _3015 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3017, cbModelParam._m0[18u].z, fma(_3016, cbModelParam._m0[18u].y, _3015 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3017, cbModelParam._m0[19u].z, fma(_3016, cbModelParam._m0[19u].y, _3015 * cbModelParam._m0[19u].x))), _2285);
            frontier_phi_25_49_ladder = _3245.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3245.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3245.x * cbModelParam._m0[1u].z;
        }
        _2374 = frontier_phi_25_49_ladder_2;
        _2376 = frontier_phi_25_49_ladder_1;
        _2378 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1365, _1366, _1367), _2285);
        _2374 = _2358.x * cbModelParam._m0[1u].z;
        _2376 = _2358.y * cbModelParam._m0[1u].z;
        _2378 = _2358.z * cbModelParam._m0[1u].z;
    }
    float _2391 = (((_1390 * _1342) + _1391) * _1357) * ((cbModelParam._m0[1u].w * (_2374 - _2276)) + _2276);
    float _2393 = (((_1390 * _1344) + _1391) * _1357) * ((cbModelParam._m0[1u].w * (_2376 - _2278)) + _2278);
    float _2395 = (((_1390 * _1345) + _1391) * _1357) * ((cbModelParam._m0[1u].w * (_2378 - _2280)) + _2280);
    float _2398 = fma(_2395, cbSceneParam._m0[89u].z, fma(_2393, cbSceneParam._m0[89u].y, _2391 * cbSceneParam._m0[89u].x));
    float _2401 = fma(_2395, cbSceneParam._m0[90u].z, fma(_2393, cbSceneParam._m0[90u].y, _2391 * cbSceneParam._m0[90u].x));
    float _2404 = fma(_2395, cbSceneParam._m0[91u].z, fma(_2393, cbSceneParam._m0[91u].y, _2391 * cbSceneParam._m0[91u].x));
    vec4 _2412 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1230, _1231));
    float _2414 = _2412.w;
    float _2426 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2414);
    float _2427 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2414);
    float _2428 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2414);
    uvec4 _2432 = floatBitsToUint(cbInstanceData._m0[_1285 + 5u]);
    uint _2434 = _2432.x * 14u;
    uint _2435 = _2434 + 13u;
    float _2442 = _1357 + (-1.0);
    float _2447 = (cbLight._m0[_2435].x * _2442) + 1.0;
    float _2448 = (cbLight._m0[_2435].y * _2442) + 1.0;
    float _2449 = (cbLight._m0[_2435].z * _2442) + 1.0;
    float _2450 = (cbLight._m0[_2435].w * _2442) + 1.0;
    uint _2451 = _2434 + 5u;
    float _2457 = isnan(1.0) ? _2448 : (isnan(_2448) ? 1.0 : min(_2448, 1.0));
    uint _2461 = _2434 + 4u;
    float _2470 = isnan(1.0) ? _2447 : (isnan(_2447) ? 1.0 : min(_2447, 1.0));
    uint _2474 = _2434 | 1u;
    float _2485 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_1150, _1151, _1152));
    float _2488 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_1150, _1151, _1152));
    float _4816 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _4827 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
    float _2493 = (isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0))) * 0.3183098733425140380859375;
    float _2495 = (isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0))) * 0.3183098733425140380859375;
    float _2502 = ((cbLight._m0[_2451].x * _2457) * _2495) + (((cbLight._m0[_2461].x * _2426) * _2470) * _2493);
    float _2503 = ((_2457 * cbLight._m0[_2451].y) * _2495) + (((cbLight._m0[_2461].y * _2427) * _2470) * _2493);
    float _2504 = ((_2457 * cbLight._m0[_2451].z) * _2495) + (((cbLight._m0[_2461].z * _2428) * _2470) * _2493);
    uvec4 _2508 = floatBitsToUint(cbLight._m0[_2434 + 12u]);
    bool _2510 = _2508.x == 0u;
    float _2521;
    float _2523;
    float _2525;
    if (_2510)
    {
        _2521 = _2502;
        _2523 = _2503;
        _2525 = _2504;
    }
    else
    {
        uint _2529 = _2434 + 6u;
        float _2545 = (dot(vec3(cbLight._m0[_2434 + 2u].xyz), vec3(_1150, _1151, _1152)) * 0.5) + 0.5;
        float _2546 = _2545 * _2545;
        float _4838 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
        float _2547 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
        float _2548 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2521 = (((cbLight._m0[_2529].x * 0.3183098733425140380859375) * _2547) * _2548) + _2502;
        _2523 = (((cbLight._m0[_2529].y * 0.3183098733425140380859375) * _2547) * _2548) + _2503;
        _2525 = (((cbLight._m0[_2529].z * 0.3183098733425140380859375) * _2547) * _2548) + _2504;
    }
    bool _2528 = _2508.y == 0u;
    float _2566;
    float _2568;
    float _2570;
    if (_2528)
    {
        _2566 = _2521;
        _2568 = _2523;
        _2570 = _2525;
    }
    else
    {
        uint _2739 = _2434 + 7u;
        float _2755 = (dot(vec3(cbLight._m0[_2434 + 3u].xyz), vec3(_1150, _1151, _1152)) * 0.5) + 0.5;
        float _2756 = _2755 * _2755;
        float _4854 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
        float _2757 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
        float _2758 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2566 = (((cbLight._m0[_2739].x * 0.3183098733425140380859375) * _2757) * _2758) + _2521;
        _2568 = (((cbLight._m0[_2739].y * 0.3183098733425140380859375) * _2757) * _2758) + _2523;
        _2570 = (((cbLight._m0[_2739].z * 0.3183098733425140380859375) * _2757) * _2758) + _2525;
    }
    uint _2573 = _2434 + 8u;
    float _2586 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _1272) * 0.949999988079071044921875);
    float _2587 = _2586 * _2586;
    float _2588 = cbLight._m0[_2434].x + _1210;
    float _2589 = cbLight._m0[_2434].y + _1211;
    float _2590 = cbLight._m0[_2434].z + _1212;
    float _2594 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
    float _2595 = _2594 * _2588;
    float _2596 = _2594 * _2589;
    float _2597 = _2594 * _2590;
    float _2598 = dot(vec3(_1150, _1151, _1152), vec3(cbLight._m0[_2434].xyz));
    float _4870 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2601 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _4881 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
    float _2602 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
    float _2603 = dot(vec3(_1150, _1151, _1152), vec3(_2595, _2596, _2597));
    float _4892 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2606 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
    float _2607 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2595, _2596, _2597));
    float _4903 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2611 = _2587 * _2587;
    float _2615 = ((_2606 * _2606) * (_2611 + (-1.0))) + 1.0;
    float _2623 = exp2(log2(1.0 - (isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0)))) * 5.0);
    float _2624 = 0.959999978542327880859375 - _1339;
    float _2626 = 0.959999978542327880859375 - _1340;
    float _2627 = 0.959999978542327880859375 - _1341;
    float _2634 = 1.0 - _2587;
    float _2645 = (0.5 / (((_2602 * ((_2601 * _2634) + _2587)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2634) + _2587) * _2601))) * _2601;
    float _4914 = isnan(0.0) ? _2645 : (isnan(_2645) ? 0.0 : max(_2645, 0.0));
    float _2647 = (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0))) * (_2611 / ((_2615 * _2615) * 3.141590118408203125));
    uint _2661 = _2434 + 9u;
    float _2672 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2474].w)) * _1272) * 0.949999988079071044921875);
    float _2673 = _2672 * _2672;
    float _2674 = cbLight._m0[_2474].x + _1210;
    float _2675 = cbLight._m0[_2474].y + _1211;
    float _2676 = cbLight._m0[_2474].z + _1212;
    float _2680 = inversesqrt(dot(vec3(_2674, _2675, _2676), vec3(_2674, _2675, _2676)));
    float _2681 = _2680 * _2674;
    float _2682 = _2680 * _2675;
    float _2683 = _2680 * _2676;
    float _2684 = dot(vec3(_1150, _1151, _1152), vec3(cbLight._m0[_2474].xyz));
    float _4925 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
    float _2688 = dot(vec3(_1150, _1151, _1152), vec3(_2681, _2682, _2683));
    float _4936 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2691 = isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0));
    float _2692 = dot(vec3(cbLight._m0[_2474].xyz), vec3(_2681, _2682, _2683));
    float _4947 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
    float _2696 = _2673 * _2673;
    float _2700 = ((_2691 * _2691) * (_2696 + (-1.0))) + 1.0;
    float _2707 = exp2(log2(1.0 - (isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0)))) * 5.0);
    float _2714 = 1.0 - _2673;
    float _2724 = (0.5 / (((_2602 * ((_2687 * _2714) + _2673)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2714) + _2673) * _2687))) * _2687;
    float _4958 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
    float _2726 = (isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0))) * (_2696 / ((_2700 * _2700) * 3.141590118408203125));
    float _2736 = (((((_2707 * _2624) + _1342) * cbLight._m0[_2661].x) * _2726) * _2457) + ((((cbLight._m0[_2573].x * _2426) * ((_2623 * _2624) + _1342)) * _2647) * _2470);
    float _2737 = (((((_2707 * _2626) + _1344) * cbLight._m0[_2661].y) * _2726) * _2457) + ((((cbLight._m0[_2573].y * _2427) * ((_2623 * _2626) + _1344)) * _2647) * _2470);
    float _2738 = (((((_2707 * _2627) + _1345) * cbLight._m0[_2661].z) * _2726) * _2457) + ((((cbLight._m0[_2573].z * _2428) * ((_2623 * _2627) + _1345)) * _2647) * _2470);
    float _2800;
    float _2802;
    float _2804;
    if (_2510)
    {
        _2800 = _2736;
        _2802 = _2737;
        _2804 = _2738;
    }
    else
    {
        uint _2806 = _2434 + 2u;
        uint _2810 = _2434 + 10u;
        float _2824 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2806].w)) * _1272) * 0.949999988079071044921875);
        float _2825 = _2824 * _2824;
        float _2826 = cbLight._m0[_2806].x + _1210;
        float _2827 = cbLight._m0[_2806].y + _1211;
        float _2828 = cbLight._m0[_2806].z + _1212;
        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
        float _2833 = _2832 * _2826;
        float _2834 = _2832 * _2827;
        float _2835 = _2832 * _2828;
        float _2836 = dot(vec3(_1150, _1151, _1152), vec3(cbLight._m0[_2806].xyz));
        float _4969 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
        float _2840 = dot(vec3(_1150, _1151, _1152), vec3(_2833, _2834, _2835));
        float _4980 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2843 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
        float _2844 = dot(vec3(cbLight._m0[_2806].xyz), vec3(_2833, _2834, _2835));
        float _4991 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2848 = _2825 * _2825;
        float _2852 = ((_2843 * _2843) * (_2848 + (-1.0))) + 1.0;
        float _2859 = exp2(log2(1.0 - (isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0)))) * 5.0);
        float _2866 = 1.0 - _2825;
        float _2876 = (0.5 / (((_2602 * ((_2839 * _2866) + _2825)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2866) + _2825) * _2839))) * _2839;
        float _5002 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2878 = (isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0))) * (_2848 / ((_2852 * _2852) * 3.141590118408203125));
        float _2879 = isnan(1.0) ? _2449 : (isnan(_2449) ? 1.0 : min(_2449, 1.0));
        _2800 = (((((_2859 * _2624) + _1342) * cbLight._m0[_2810].x) * _2878) * _2879) + _2736;
        _2802 = (((((_2859 * _2626) + _1344) * cbLight._m0[_2810].y) * _2878) * _2879) + _2737;
        _2804 = (((((_2859 * _2627) + _1345) * cbLight._m0[_2810].z) * _2878) * _2879) + _2738;
    }
    float _2914;
    float _2916;
    float _2918;
    if (_2528)
    {
        _2914 = _2800;
        _2916 = _2802;
        _2918 = _2804;
    }
    else
    {
        uint _2925 = _2434 + 3u;
        uint _2929 = _2434 + 11u;
        float _2943 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2925].w)) * _1272) * 0.949999988079071044921875);
        float _2944 = _2943 * _2943;
        float _2945 = cbLight._m0[_2925].x + _1210;
        float _2946 = cbLight._m0[_2925].y + _1211;
        float _2947 = cbLight._m0[_2925].z + _1212;
        float _2951 = inversesqrt(dot(vec3(_2945, _2946, _2947), vec3(_2945, _2946, _2947)));
        float _2952 = _2951 * _2945;
        float _2953 = _2951 * _2946;
        float _2954 = _2951 * _2947;
        float _2955 = dot(vec3(_1150, _1151, _1152), vec3(cbLight._m0[_2925].xyz));
        float _5018 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0));
        float _2959 = dot(vec3(_1150, _1151, _1152), vec3(_2952, _2953, _2954));
        float _5029 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2962 = isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0));
        float _2963 = dot(vec3(cbLight._m0[_2925].xyz), vec3(_2952, _2953, _2954));
        float _5040 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
        float _2967 = _2944 * _2944;
        float _2971 = ((_2962 * _2962) * (_2967 + (-1.0))) + 1.0;
        float _2978 = exp2(log2(1.0 - (isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0)))) * 5.0);
        float _2985 = 1.0 - _2944;
        float _2995 = (0.5 / (((_2602 * ((_2958 * _2985) + _2944)) + 9.9999999392252902907785028219223e-09) + (((_2602 * _2985) + _2944) * _2958))) * _2958;
        float _5051 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2997 = (isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_2967 / ((_2971 * _2971) * 3.141590118408203125));
        float _2998 = isnan(1.0) ? _2450 : (isnan(_2450) ? 1.0 : min(_2450, 1.0));
        _2914 = (((((_2978 * _2624) + _1342) * cbLight._m0[_2929].x) * _2997) * _2998) + _2800;
        _2916 = (((((_2978 * _2626) + _1344) * cbLight._m0[_2929].y) * _2997) * _2998) + _2802;
        _2918 = (((((_2978 * _2627) + _1345) * cbLight._m0[_2929].z) * _2997) * _2998) + _2804;
    }
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    float _3141;
    float _3143;
    if (_2432.y == 0u)
    {
        float _3073 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3074 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3073;
        float _3075 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3073;
        float _3076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3073;
        uvec4 _3088 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3089 = _3088.x;
        uint _3100 = uint((float(_3088.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1231) / _3089))) + floor(float(uint(cbSceneParam._m0[85u].x * _1230) / _3089)));
        float _3110 = (log2(_3076 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3111 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
        uint _3114 = uint(isnan(14.0) ? _3111 : (isnan(_3111) ? 14.0 : min(_3111, 14.0)));
        uvec4 _3119 = texelFetch(g_lightClusterGridBuffer, int(((_3114 << 2u) + (_3100 << 6u)) >> 2u));
        uint _3120 = _3119.x;
        uint _3121 = _3088.z;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        float _3258;
        float _3260;
        if (((((1u << ((_3121 >> 4u) & 15u)) + 4294967295u) & _3120) == 0u) || ((_3121 & 240u) == 0u))
        {
            _3250 = 0.0;
            _3252 = 0.0;
            _3254 = 0.0;
            _3256 = 0.0;
            _3258 = 0.0;
            _3260 = 0.0;
        }
        else
        {
            float _3251;
            float _3253;
            float _3255;
            float _3257;
            float _3259;
            float _3261;
            float _3410 = 0.0;
            float _3411 = 0.0;
            float _3412 = 0.0;
            float _3413 = 0.0;
            float _3414 = 0.0;
            float _3415 = 0.0;
            uint _3416 = 0u;
            uint _3425;
            bool _3426;
            for (;;)
            {
                _3425 = texelFetch(g_lightClassification, int((((_3114 << 5u) + (_3100 << 9u)) + (_3416 << 2u)) >> 2u)).x;
                _3426 = _3425 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3426)
                {
                    frontier_phi_66_pred = _3410;
                    frontier_phi_66_pred_1 = _3415;
                    frontier_phi_66_pred_2 = _3414;
                    frontier_phi_66_pred_3 = _3413;
                    frontier_phi_66_pred_4 = _3412;
                    frontier_phi_66_pred_5 = _3411;
                }
                else
                {
                    float _3555;
                    float _3556;
                    float _3557;
                    float _3558;
                    float _3559;
                    float _3560;
                    uint _3561;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3412;
                    _3558 = _3413;
                    _3559 = _3414;
                    _3560 = _3415;
                    _3561 = _3425;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    float _3487;
                    for (;;)
                    {
                        uint _3565 = uint(findLSB(_3561)) + (_3416 << 5u);
                        uint _3562 = (_3561 + 4294967295u) & _3561;
                        uint _3567 = _3565 * 48u;
                        vec4 _3581 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3567)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3567 + 3u)).x));
                        uint _3587 = (_3565 * 48u) + 4u;
                        vec4 _3600 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3587)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3587 + 3u)).x));
                        uint _3606 = (_3565 * 48u) + 8u;
                        vec3 _3617 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3606)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3606 + 2u)).x));
                        float _3621 = _3581.x - _3074;
                        float _3622 = _3581.y - _3075;
                        float _3623 = _3581.z - _3076;
                        float _3624 = dot(vec3(_3621, _3622, _3623), vec3(_3621, _3622, _3623));
                        float _3627 = inversesqrt(_3624);
                        float _3628 = _3627 * _3621;
                        float _3629 = _3627 * _3622;
                        float _3630 = _3627 * _3623;
                        float _3631 = dot(vec3(_1253, _1256, _1259), vec3(_3628, _3629, _3630));
                        float _3636 = 1.0 - (_3624 * _3581.w);
                        float _5077 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3637 = isnan(1.0) ? _5077 : (isnan(_5077) ? 1.0 : min(_5077, 1.0));
                        float _3638 = sqrt(_3624) * _3600.w;
                        float _3641 = 1.39999997615814208984375 / (_3638 + 1.39999997615814208984375);
                        float _3642 = _3641 * _3641;
                        float _3645 = ((1.0 - _3642) * _3631) + _3642;
                        float _3648 = _3638 * _3638;
                        float _3652 = ((isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0))) * _3637) / ((_3648 * 0.699999988079071044921875) + 1.0);
                        float _3656 = (-0.0) - _3074;
                        float _3657 = (-0.0) - _3075;
                        float _3658 = (-0.0) - _3076;
                        float _3662 = inversesqrt(dot(vec3(_3656, _3657, _3658), vec3(_3656, _3657, _3658)));
                        float _3663 = _3662 * _3656;
                        float _3664 = _3662 * _3657;
                        float _3665 = _3662 * _3658;
                        float _3673 = exp2(log2(1.0 / ((_3648 * 3.5) + 5.0)) * 0.25);
                        float _3674 = 1.0 - _1373;
                        float _3681 = sqrt(1.0 - ((1.0 - (_3674 * _3674)) * (1.0 - (_3673 * _3673))));
                        float _3682 = _3681 * _3681;
                        float _3683 = _3682 * _3682;
                        float _3684 = _3663 + _3628;
                        float _3685 = _3664 + _3629;
                        float _3686 = _3665 + _3630;
                        float _3690 = inversesqrt(dot(vec3(_3684, _3685, _3686), vec3(_3684, _3685, _3686)));
                        float _3694 = dot(vec3(_1253, _1256, _1259), vec3(_3663, _3664, _3665));
                        float _5093 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3697 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                        float _3698 = dot(vec3(_1253, _1256, _1259), vec3(_3690 * _3684, _3690 * _3685, _3690 * _3686));
                        float _5104 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                        float _3701 = isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0));
                        float _3705 = ((_3701 * _3701) * (_3683 + (-1.0))) + 1.0;
                        float _3706 = _3641 * _3682;
                        float _3707 = _3706 * _3706;
                        float _3710 = ((1.0 - _3707) * _3631) + _3707;
                        float _5115 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                        float _3711 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                        float _3712 = 1.0 - _3682;
                        float _3722 = (0.5 / (((_3711 * ((_3697 * _3712) + _3682)) + 9.9999999392252902907785028219223e-09) + (((_3711 * _3712) + _3682) * _3697))) * _3711;
                        float _5126 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                        float _3733 = (((_3683 * 3.1415927410125732421875) * (isnan(1.0) ? _5126 : (isnan(_5126) ? 1.0 : min(_5126, 1.0)))) / ((_3705 * _3705) * ((_3648 * 2.1991131305694580078125) + 3.141590118408203125))) * _3637;
                        _3485 = (_3652 * _3600.x) + _3558;
                        _3486 = (_3652 * _3600.y) + _3559;
                        _3487 = (_3652 * _3600.z) + _3560;
                        _3482 = (_3733 * _3617.x) + _3555;
                        _3483 = (_3733 * _3617.y) + _3556;
                        _3484 = (_3733 * _3617.z) + _3557;
                        if (_3562 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3484;
                            _3558 = _3485;
                            _3559 = _3486;
                            _3560 = _3487;
                            _3561 = _3562;
                        }
                    }
                    frontier_phi_66_pred = _3482;
                    frontier_phi_66_pred_1 = _3487;
                    frontier_phi_66_pred_2 = _3486;
                    frontier_phi_66_pred_3 = _3485;
                    frontier_phi_66_pred_4 = _3484;
                    frontier_phi_66_pred_5 = _3483;
                }
                _3251 = frontier_phi_66_pred;
                _3261 = frontier_phi_66_pred_1;
                _3259 = frontier_phi_66_pred_2;
                _3257 = frontier_phi_66_pred_3;
                _3255 = frontier_phi_66_pred_4;
                _3253 = frontier_phi_66_pred_5;
                uint _3417 = _3416 + 1u;
                if (_3417 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3410 = _3251;
                    _3411 = _3253;
                    _3412 = _3255;
                    _3413 = _3257;
                    _3414 = _3259;
                    _3415 = _3261;
                    _3416 = _3417;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3250 = _3251;
            _3252 = _3253;
            _3254 = _3255;
            _3256 = _3257;
            _3258 = _3259;
            _3260 = _3261;
        }
        uvec4 _3264 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3265 = _3264.z;
        uint _3267 = (_3265 >> 8u) & 15u;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        float _3386;
        float _3388;
        if (((4294967295u << _3267) & _3120) == 0u)
        {
            _3378 = _3250;
            _3380 = _3252;
            _3382 = _3254;
            _3384 = _3256;
            _3386 = _3258;
            _3388 = _3260;
        }
        else
        {
            float _3403 = inversesqrt(dot(vec3(_3074, _3075, _3076), vec3(_3074, _3075, _3076)));
            float _3404 = _3403 * _3074;
            float _3405 = _3403 * _3075;
            float _3406 = _3403 * _3076;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3267 < ((_3265 >> 12u) & 15u))
            {
                float _3379;
                float _3381;
                float _3383;
                float _3385;
                float _3387;
                float _3389;
                float _3538 = _3250;
                float _3539 = _3252;
                float _3540 = _3254;
                float _3541 = _3256;
                float _3542 = _3258;
                float _3543 = _3260;
                uint _3544 = _3267;
                uint _3553;
                bool _3554;
                for (;;)
                {
                    _3553 = texelFetch(g_lightClassification, int((((_3114 << 5u) + (_3100 << 9u)) + (_3544 << 2u)) >> 2u)).x;
                    _3554 = _3553 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3554)
                    {
                        frontier_phi_77_pred = _3543;
                        frontier_phi_77_pred_1 = _3542;
                        frontier_phi_77_pred_2 = _3541;
                        frontier_phi_77_pred_3 = _3540;
                        frontier_phi_77_pred_4 = _3539;
                        frontier_phi_77_pred_5 = _3538;
                    }
                    else
                    {
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _4040;
                        float _4041;
                        float _4042;
                        float _4043;
                        float _4044;
                        float _4045;
                        float _3760 = _3538;
                        float _3761 = _3539;
                        float _3762 = _3540;
                        float _3763 = _3541;
                        float _3764 = _3542;
                        float _3765 = _3543;
                        uint _3766 = _3553;
                        uint _3767;
                        vec4 _3792;
                        float _3793;
                        vec4 _3808;
                        vec3 _3820;
                        vec4 _3835;
                        vec4 _3850;
                        float _3896;
                        bool _3897;
                        for (;;)
                        {
                            uint _3777 = ((_3544 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3766));
                            _3767 = (_3766 + 4294967295u) & _3766;
                            uint _3779 = _3777 * 40u;
                            _3792 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3779)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3779 + 3u)).x));
                            _3793 = _3792.w;
                            uint _3795 = (_3777 * 40u) + 4u;
                            _3808 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3795)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3795 + 3u)).x));
                            uint _3810 = (_3777 * 40u) + 8u;
                            _3820 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3810 + 2u)).x));
                            uint _3822 = (_3777 * 40u) + 16u;
                            _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            uint _3837 = (_3777 * 40u) + 20u;
                            _3850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3837 + 3u)).x));
                            uint _3852 = (_3777 * 40u) + 24u;
                            vec4 _3865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3852 + 3u)).x));
                            uint _3871 = (_3777 * 40u) + 28u;
                            vec4 _3884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3871 + 3u)).x));
                            _3896 = fma(_3076, _3884.z, fma(_3075, _3884.y, _3884.x * _3074)) + _3884.w;
                            _3897 = !((fma(_3076, _3865.z, fma(_3075, _3865.y, _3865.x * _3074)) + _3865.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3897)
                            {
                                float _3924 = _3792.x - _3074;
                                float _3925 = _3792.y - _3075;
                                float _3926 = _3792.z - _3076;
                                float _3927 = dot(vec3(_3924, _3925, _3926), vec3(_3924, _3925, _3926));
                                float _3930 = inversesqrt(_3927);
                                float _3931 = _3930 * _3924;
                                float _3932 = _3930 * _3925;
                                float _3933 = _3930 * _3926;
                                float _3937 = 1.0 - (_3927 / (_3793 * _3793));
                                float _5137 = isnan(0.0) ? _3937 : (isnan(_3937) ? 0.0 : max(_3937, 0.0));
                                float _3938 = isnan(1.0) ? _5137 : (isnan(_5137) ? 1.0 : min(_5137, 1.0));
                                float _3942 = sqrt(_3927) * _3808.w;
                                float _3944 = 1.39999997615814208984375 / (_3942 + 1.39999997615814208984375);
                                float _3945 = _3944 * _3944;
                                float _3948 = ((1.0 - _3945) * dot(vec3(_3931, _3932, _3933), vec3(_1253, _1256, _1259))) + _3945;
                                float _3951 = _3942 * _3942;
                                float _3955 = (fma(_3076, _3835.z, fma(_3075, _3835.y, _3835.x * _3074)) + _3835.w) / _3896;
                                float _3956 = (fma(_3076, _3850.z, fma(_3075, _3850.y, _3850.x * _3074)) + _3850.w) / _3896;
                                float _3960 = 1.0 - dot(vec2(_3955, _3956), vec2(_3955, _3956));
                                float _5153 = isnan(0.0) ? _3960 : (isnan(_3960) ? 0.0 : max(_3960, 0.0));
                                float _3961 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3962 = _3961 * (((isnan(0.0) ? _3948 : (isnan(_3948) ? 0.0 : max(_3948, 0.0))) * _3938) / ((_3951 * 0.699999988079071044921875) + 1.0));
                                float _3974 = exp2(log2(1.0 / ((_3951 * 3.5) + 5.0)) * 0.25);
                                float _3975 = 1.0 - _1373;
                                float _3982 = sqrt(1.0 - ((1.0 - (_3975 * _3975)) * (1.0 - (_3974 * _3974))));
                                float _3983 = _3982 * _3982;
                                float _3984 = _3983 * _3983;
                                float _3985 = _3931 - _3404;
                                float _3986 = _3932 - _3405;
                                float _3987 = _3933 - _3406;
                                float _3991 = inversesqrt(dot(vec3(_3985, _3986, _3987), vec3(_3985, _3986, _3987)));
                                float _3995 = dot(vec3(_1253, _1256, _1259), vec3((-0.0) - _3404, (-0.0) - _3405, (-0.0) - _3406));
                                float _5164 = isnan(0.0) ? _3995 : (isnan(_3995) ? 0.0 : max(_3995, 0.0));
                                float _3998 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _3999 = dot(vec3(_1253, _1256, _1259), vec3(_3991 * _3985, _3991 * _3986, _3991 * _3987));
                                float _5175 = isnan(0.0) ? _3999 : (isnan(_3999) ? 0.0 : max(_3999, 0.0));
                                float _4002 = isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0));
                                float _4006 = ((_4002 * _4002) * (_3984 + (-1.0))) + 1.0;
                                float _4007 = _3944 * _3983;
                                float _4008 = _4007 * _4007;
                                float _4014 = ((1.0 - _4008) * dot(vec3(_1253, _1256, _1259), vec3(_3931, _3932, _3933))) + _4008;
                                float _5186 = isnan(0.0) ? _4014 : (isnan(_4014) ? 0.0 : max(_4014, 0.0));
                                float _4015 = isnan(1.0) ? _5186 : (isnan(_5186) ? 1.0 : min(_5186, 1.0));
                                float _4016 = 1.0 - _3983;
                                float _4026 = (0.5 / (((_4015 * ((_3998 * _4016) + _3983)) + 9.9999999392252902907785028219223e-09) + (((_4015 * _4016) + _3983) * _3998))) * _4015;
                                float _5197 = isnan(0.0) ? _4026 : (isnan(_4026) ? 0.0 : max(_4026, 0.0));
                                float _4036 = (_3961 * _3938) * (((_3984 * 3.1415927410125732421875) * (isnan(1.0) ? _5197 : (isnan(_5197) ? 1.0 : min(_5197, 1.0)))) / ((_4006 * _4006) * ((_3951 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3962 * _3808.y;
                                frontier_phi_83_pred_1 = _3962 * _3808.x;
                                frontier_phi_83_pred_2 = _4036 * _3820.z;
                                frontier_phi_83_pred_3 = _4036 * _3820.y;
                                frontier_phi_83_pred_4 = _4036 * _3820.x;
                                frontier_phi_83_pred_5 = _3962 * _3808.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4044 = frontier_phi_83_pred;
                            _4043 = frontier_phi_83_pred_1;
                            _4042 = frontier_phi_83_pred_2;
                            _4041 = frontier_phi_83_pred_3;
                            _4040 = frontier_phi_83_pred_4;
                            _4045 = frontier_phi_83_pred_5;
                            _3750 = _4043 + _3763;
                            _3751 = _4044 + _3764;
                            _3752 = _4045 + _3765;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            _3749 = _4042 + _3762;
                            if (_3767 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3749;
                                _3763 = _3750;
                                _3764 = _3751;
                                _3765 = _3752;
                                _3766 = _3767;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3752;
                        frontier_phi_77_pred_1 = _3751;
                        frontier_phi_77_pred_2 = _3750;
                        frontier_phi_77_pred_3 = _3749;
                        frontier_phi_77_pred_4 = _3748;
                        frontier_phi_77_pred_5 = _3747;
                    }
                    _3389 = frontier_phi_77_pred;
                    _3387 = frontier_phi_77_pred_1;
                    _3385 = frontier_phi_77_pred_2;
                    _3383 = frontier_phi_77_pred_3;
                    _3381 = frontier_phi_77_pred_4;
                    _3379 = frontier_phi_77_pred_5;
                    uint _3545 = _3544 + 1u;
                    if (_3545 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3538 = _3379;
                        _3539 = _3381;
                        _3540 = _3383;
                        _3541 = _3385;
                        _3542 = _3387;
                        _3543 = _3389;
                        _3544 = _3545;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3383;
                frontier_phi_58_59_ladder_1 = _3389;
                frontier_phi_58_59_ladder_2 = _3387;
                frontier_phi_58_59_ladder_3 = _3385;
                frontier_phi_58_59_ladder_4 = _3381;
                frontier_phi_58_59_ladder_5 = _3379;
            }
            else
            {
                frontier_phi_58_59_ladder = _3254;
                frontier_phi_58_59_ladder_1 = _3260;
                frontier_phi_58_59_ladder_2 = _3258;
                frontier_phi_58_59_ladder_3 = _3256;
                frontier_phi_58_59_ladder_4 = _3252;
                frontier_phi_58_59_ladder_5 = _3250;
            }
            _3378 = frontier_phi_58_59_ladder_5;
            _3380 = frontier_phi_58_59_ladder_4;
            _3382 = frontier_phi_58_59_ladder;
            _3384 = frontier_phi_58_59_ladder_3;
            _3386 = frontier_phi_58_59_ladder_2;
            _3388 = frontier_phi_58_59_ladder_1;
        }
        float _3393 = isnan(1.0) ? _1357 : (isnan(_1357) ? 1.0 : min(_1357, 1.0));
        _3133 = (_3393 * _3384) + _2566;
        _3135 = (_3393 * _3386) + _2568;
        _3137 = (_3393 * _3388) + _2570;
        _3139 = ((_3378 * _1342) * _3393) + _2914;
        _3141 = ((_3380 * _1344) * _3393) + _2916;
        _3143 = ((_3382 * _1345) * _3393) + _2918;
    }
    else
    {
        _3133 = _2566;
        _3135 = _2568;
        _3137 = _2570;
        _3139 = _2914;
        _3141 = _2916;
        _3143 = _2918;
    }
    uint _3149 = _1286 + uint(cbMatDynParam._m0[0u].w);
    float _3155 = (((((cbMtdParam._m0[22u].x * _1054.x) * cbMtdParam._m0[32u].x) * _1077) + _828) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3149].x;
    float _3156 = (((((cbMtdParam._m0[22u].y * _1054.y) * cbMtdParam._m0[32u].x) * _1077) + _829) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3149].y;
    float _3157 = (((((cbMtdParam._m0[22u].z * _1054.z) * cbMtdParam._m0[32u].x) * _1077) + _830) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3149].z;
    float _5213 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _5224 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
    float _5235 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _3174 = (((isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0))) * (_3133 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1357))) + ((_3139 + ((isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0))) * _2185)) * cbPerFrame._m0[3u].x)) + _3155;
    float _3176 = (_3156 + ((_3141 + ((isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0))) * _2185)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5224 : (isnan(_5224) ? 1.0 : min(_5224, 1.0))) * (_3135 + ((isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0))) * _1357)));
    float _3178 = (_3157 + ((_3143 + ((isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0))) * _2185)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0))) * (_3137 + ((isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0))) * _1357)));
    float _3179 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
    float _3180 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
    float _3181 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
    float _3187 = cbMtdParam._m0[2u].x * _3155;
    float _3188 = cbMtdParam._m0[2u].y * _3156;
    float _3189 = cbMtdParam._m0[2u].z * _3157;
    float _5261 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3191 = isnan(1.0) ? _5261 : (isnan(_5261) ? 1.0 : min(_5261, 1.0));
    uint _3192 = _1285 + 6u;
    float _3200 = _1230 / cbSceneParam._m0[86u].x;
    float _3201 = _1231 / cbSceneParam._m0[86u].y;
    vec4 _3215 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3200, _3201, (log2((isnan(cbSceneParam._m0[77u].w) ? _1173 : (isnan(_1173) ? cbSceneParam._m0[77u].w : min(_1173, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3217 = _3215.x;
    float _3218 = _3215.y;
    float _3219 = _3215.z;
    float _3220 = _3215.w;
    float _3312;
    float _3314;
    float _3316;
    float _3318;
    if (_1173 > cbSceneParam._m0[78u].w)
    {
        float _3275 = isnan(_1173) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1173 : min(cbSceneParam._m0[80u].w, _1173));
        float _3276 = _3275 / _1173;
        float _3287 = _3276 * _1203;
        float _3288 = _1204 * _3276;
        float _3289 = (-0.0) - _3288;
        float _3290 = _3276 * _1205;
        float _3292 = (cbSceneParam._m0[77u].w * _3289) / _3275;
        float _3293 = _3292 + cbSceneParam._m0[79u].w;
        float _3294 = cbSceneParam._m0[79u].w - _3288;
        float _3300 = sqrt(((_3287 * _3287) + (_3288 * _3288)) + (_3290 * _3290));
        float _3303 = (1.0 - (cbSceneParam._m0[77u].w / _3275)) * _3300;
        float _3308 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3310 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3495;
        if (abs((_3289 - _3292) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3495 = ((((_3293 > 0.0) ? exp2(_3308 * _3293) : (2.0 - exp2(_3310 * _3293))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3303;
        }
        else
        {
            float _3439 = 1.0 / cbSceneParam._m0[80u].x;
            float _3440 = isnan(_3294) ? _3293 : (isnan(_3293) ? _3294 : max(_3293, _3294));
            float _3441 = isnan(_3294) ? _3293 : (isnan(_3293) ? _3294 : min(_3293, _3294));
            float _3450 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : min(_3440, 0.0));
            float _3451 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : min(_3441, 0.0));
            _3495 = ((abs(_3300 / _3289) * cbSceneParam._m0[80u].y) * ((((_3450 - _3451) * 2.0) - ((exp2(_3308 * (isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0)))) - exp2(_3308 * (isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0))))) * _3439)) - ((exp2(_3310 * _3450) - exp2(_3310 * _3451)) * _3439))) + (_3303 * cbSceneParam._m0[80u].z);
        }
        vec4 _3497 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3200, _3201, 1.0), 0.0);
        float _3506 = exp2((_3495 * (-1.44269502162933349609375)) * (1.0 - _3497.w));
        float _3507 = log2(_3506);
        float _3523 = log2(_3220);
        _3312 = (exp2(_3523 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].x)) * _3497.x) / cbSceneParam._m0[78u].x)) + _3217;
        _3314 = (exp2(_3523 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].y)) * _3497.y) / cbSceneParam._m0[78u].y)) + _3218;
        _3316 = (exp2(_3523 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3507 * cbSceneParam._m0[78u].z)) * _3497.z) / cbSceneParam._m0[78u].z)) + _3219;
        _3318 = _3506 * _3220;
    }
    else
    {
        _3312 = _3217;
        _3314 = _3218;
        _3316 = _3219;
        _3318 = _3220;
    }
    bool _3533;
    vec4 _3327;
    vec4 _3349;
    float _3351;
    float _3355;
    float _3356;
    float _3357;
    float _3360;
    float _3363;
    float _3366;
    float _3367;
    bool _3377;
    for (;;)
    {
        _3327 = cbMatDynParam._m0[0u];
        float _3329 = roundEven(_3327.y);
        bool _3330 = _3329 == 3.0;
        float _3331 = log2(_3318);
        float _3335 = exp2(_3331 * cbSceneParam._m0[78u].x);
        float _3336 = exp2(_3331 * cbSceneParam._m0[78u].y);
        float _3337 = exp2(_3331 * cbSceneParam._m0[78u].z);
        float _3338 = _3335 * _3179;
        float _3339 = _3336 * _3180;
        float _3340 = _3337 * _3181;
        float _3347 = _1219 + (-0.5);
        _3349 = cbMtdParam._m0[1u];
        _3351 = _3349.y * _3347;
        float _3354 = (_3329 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3355 = _3354 * (_3330 ? _3338 : (_3338 + (cbSceneParam._m0[72u].w * _3312)));
        _3356 = _3354 * (_3330 ? _3339 : (_3339 + (cbSceneParam._m0[72u].w * _3314)));
        _3357 = _3354 * (_3330 ? _3340 : (_3340 + (cbSceneParam._m0[72u].w * _3316)));
        _3360 = ((_3187 * _3191) * _3335) * _3354;
        _3363 = ((_3188 * _3191) * _3336) * _3354;
        _3366 = ((_3189 * _3191) * _3337) * _3354;
        _3367 = _3347 * 0.999000012874603271484375;
        _3377 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3377)
        {
            if ((cbInstanceData._m0[_1285 + 7u].x + _3367) < 0.5)
            {
                _3533 = true;
                break;
            }
        }
        uint _3474 = _1286 + uint(_3327.w);
        if ((cbInstanceData._m0[_3474].w < 1.0) && ((cbInstanceData._m0[_3474].w + _3367) < 0.5))
        {
            _3533 = true;
            break;
        }
        if ((_3351 + 1.0) < _3349.x)
        {
            _3533 = true;
            break;
        }
        _3533 = false;
        break;
    }
    float _3738;
    if (_3533)
    {
        discard_state = true;
        _3738 = 0.0;
    }
    else
    {
        _3738 = cbInstanceData._m0[_3192].w;
    }
    SV_Target.x = _3355;
    SV_Target.y = _3356;
    SV_Target.z = _3357;
    SV_Target.w = _3738;
    SV_Target_1.x = _3360;
    SV_Target_1.y = _3363;
    SV_Target_1.z = _3366;
    SV_Target_1.w = cbInstanceData._m0[_3192].w;
    discard_exit();
}


