#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1568;
float _4007;
float _4008;
float _4009;
float _4010;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _265 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _278 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_265 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _283 = _278.z;
    float _284 = _278.w;
    vec4 _306 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _265) + cbTextureTilingScale._m0[11u].w));
    float _311 = _306.w;
    float _323 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _283) * exp2(log2(1.0 - _311) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    vec4 _339 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _265) + cbTextureTilingScale._m0[2u].w));
    float _349 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _357 = (_349 - (((_339.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _349))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4029 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _360 = _325 - (_358 * _325);
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    vec4 _375 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _378 = _375.y;
    float _379 = _378 * (isnan(1.0) ? _361 : (isnan(_361) ? 1.0 : min(_361, 1.0)));
    float _388 = exp2(log2(cbMtdParam._m0[32u].w * _311) * cbMtdParam._m0[31u].z);
    float _390 = _388 - (_358 * _388);
    float _391 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _392 = isnan(1.0) ? _391 : (isnan(_391) ? 1.0 : min(_391, 1.0));
    float _403 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_284) * 4.5));
    float _412 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _283) * _403)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _413 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _414 = isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0));
    float _425 = exp2(log2((1.0 - (((_403 * _403) * _283) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _426 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = (((isnan(1.0) ? _426 : (isnan(_426) ? 1.0 : min(_426, 1.0))) - _284) * _378) + _284;
    vec4 _442 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _265) + cbTextureTilingScale._m0[5u].w));
    float _455 = (_375.x + (-0.02500000037252902984619140625)) * 8.0;
    float _457 = roundEven(_455);
    float _458 = cbMtdParam._m0[10u].x * _442.x;
    float _459 = cbMtdParam._m0[10u].y * _442.y;
    float _460 = cbMtdParam._m0[10u].z * _442.z;
    vec4 _472 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _265) + cbTextureTilingScale._m0[1u].w));
    float _483 = cbMtdParam._m0[9u].x * _472.x;
    float _484 = cbMtdParam._m0[9u].y * _472.y;
    float _485 = cbMtdParam._m0[9u].z * _472.z;
    float _492 = ((_483 - _458) * _430) + _458;
    float _493 = ((_484 - _459) * _430) + _459;
    float _494 = ((_485 - _460) * _430) + _460;
    vec4 _506 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _265) + cbTextureTilingScale._m0[6u].w));
    float _526 = (((cbMtdParam._m0[20u].x * _506.x) - _492) * _414) + _492;
    float _527 = (((cbMtdParam._m0[20u].y * _506.y) - _493) * _414) + _493;
    float _528 = (((cbMtdParam._m0[20u].z * _506.z) - _494) * _414) + _494;
    vec4 _540 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _265) + cbTextureTilingScale._m0[9u].w));
    float _560 = (((cbMtdParam._m0[29u].x * _540.x) - _526) * _392) + _526;
    float _561 = (((cbMtdParam._m0[29u].y * _540.y) - _527) * _392) + _527;
    float _562 = (((cbMtdParam._m0[29u].z * _540.z) - _528) * _392) + _528;
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[30u].x;
    _203[0u] = cbMtdParam._m0[30u].y;
    _204[0u] = cbMtdParam._m0[30u].z;
    _202[1u] = cbMtdParam._m0[28u].x;
    _203[1u] = cbMtdParam._m0[28u].y;
    _204[1u] = cbMtdParam._m0[28u].z;
    _202[2u] = cbMtdParam._m0[27u].x;
    _203[2u] = cbMtdParam._m0[27u].y;
    _204[2u] = cbMtdParam._m0[27u].z;
    _202[3u] = cbMtdParam._m0[26u].x;
    _203[3u] = cbMtdParam._m0[26u].y;
    _204[3u] = cbMtdParam._m0[26u].z;
    _202[4u] = cbMtdParam._m0[25u].x;
    _203[4u] = cbMtdParam._m0[25u].y;
    _204[4u] = cbMtdParam._m0[25u].z;
    _202[5u] = cbMtdParam._m0[24u].x;
    _203[5u] = cbMtdParam._m0[24u].y;
    _204[5u] = cbMtdParam._m0[24u].z;
    float _631 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    uint _634 = uint(int(isnan(5.0) ? _631 : (isnan(_631) ? 5.0 : min(_631, 5.0))));
    float _641 = _202[_634] * _378;
    float _642 = _203[_634] * _378;
    float _643 = _204[_634] * _378;
    float _644 = _641 + ((_306.x * 4.5) * (((_483 - _560) * _379) + _560));
    float _645 = _642 + ((_306.y * 4.5) * (((_484 - _561) * _379) + _561));
    float _646 = _643 + ((_306.z * 4.5) * (((_485 - _562) * _379) + _562));
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[37u].w;
    _198[0u] = cbMtdParam._m0[38u].x;
    _197[1u] = cbMtdParam._m0[39u].w;
    _198[1u] = cbMtdParam._m0[40u].x;
    _197[2u] = cbMtdParam._m0[40u].y;
    _198[2u] = cbMtdParam._m0[40u].z;
    _197[3u] = cbMtdParam._m0[40u].w;
    _198[3u] = cbMtdParam._m0[41u].x;
    _197[4u] = cbMtdParam._m0[41u].y;
    _198[4u] = cbMtdParam._m0[41u].z;
    float _679 = roundEven(5.0 - _455);
    float _680 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _681 = isnan(4.0) ? _680 : (isnan(_680) ? 4.0 : min(_680, 4.0));
    float _683 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    uint _685 = uint(int(isnan(4.0) ? _683 : (isnan(_683) ? 4.0 : min(_683, 4.0))));
    float _697 = ((cbMtdParam._m0[42u].z - _198[_685]) * _430) + _198[_685];
    float _705 = ((cbMtdParam._m0[43u].x - _697) * _414) + _697;
    float _710 = ((cbMtdParam._m0[43u].z - _705) * _392) + _705;
    float _715 = ((cbMtdParam._m0[39u].z - _710) * _379) + _710;
    vec4 _729 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _265) + cbTextureTilingScale._m0[7u].w));
    float _731 = _729.x;
    float _732 = _729.y;
    float _734 = _729.z + _197[_685];
    vec4 _746 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _265) + cbTextureTilingScale._m0[10u].w));
    float _754 = (((cbMtdParam._m0[42u].y - _734) + _746.z) * _430) + _734;
    vec4 _767 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _265) + cbTextureTilingScale._m0[12u].w));
    float _775 = (((cbMtdParam._m0[42u].w - _754) + _767.z) * _414) + _754;
    float _781 = ((((_283 * 2.0) * _775) - _775) * cbMtdParam._m0[34u].x) + _775;
    vec4 _794 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _265) + cbTextureTilingScale._m0[13u].w));
    float _802 = (((_794.z + cbMtdParam._m0[43u].y) - _781) * _392) + _781;
    float _806 = (((cbMtdParam._m0[39u].y + _339.z) - _802) * _379) + _802;
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _868 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_837 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_841 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _883 = (-0.0) - ((_841 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _887 = (_841 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _888 = isnan(_887) ? _883 : (isnan(_883) ? _887 : min(_883, _887));
    float _4115 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _889 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _917 = ((_746.x - _731) * _430) + _731;
    float _918 = ((_746.y - _732) * _430) + _732;
    float _923 = ((_767.x - _917) * _414) + _917;
    float _924 = ((_767.y - _918) * _414) + _918;
    float _929 = ((_794.x - _923) * _392) + _923;
    float _930 = ((_794.y - _924) * _392) + _924;
    float _939 = ((((_339.x - _929) * _379) + _929) * 2.0) + (-1.0);
    float _940 = ((((_339.y - _930) * _379) + _930) * 2.0) + (-1.0);
    float _941 = dot(vec2(_939, _940), vec2(_939, _940));
    float _4126 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _946 = sqrt(1.0 - (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))));
    float _949 = (cbMtdParam._m0[34u].z * ((_278.x * 2.0) + (-1.0))) + _939;
    float _950 = (cbMtdParam._m0[34u].z * ((_278.y * 2.0) + (-1.0))) + _940;
    float _953 = fma(_946, _244 * NORMAL.x, fma(_950, _251 * TANGENT.x, (_237 * _229) * _949));
    float _956 = fma(_946, _244 * NORMAL.y, fma(_950, _251 * TANGENT.y, (_237 * _230) * _949));
    float _959 = fma(_946, _244 * NORMAL.z, fma(_950, _251 * TANGENT.z, (_237 * _231) * _949));
    float _963 = inversesqrt(dot(vec3(_953, _956, _959), vec3(_953, _956, _959)));
    float _964 = _963 * _953;
    float _965 = _963 * _956;
    float _966 = _963 * _959;
    float _4137 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _967 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _4148 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4159 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _4170 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _4181 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _971 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
    float _987 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1007 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1017 = cbSceneParam._m0[71u].x - (_837 / _1007);
    float _1018 = cbSceneParam._m0[71u].y - (_841 / _1007);
    float _1019 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1007);
    float _1023 = inversesqrt(dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019)));
    float _1024 = _1017 * _1023;
    float _1025 = _1018 * _1023;
    float _1026 = _1019 * _1023;
    vec4 _1031 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1033 = _1031.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1251 = sqrt(((_1017 * _1017) + (_1018 * _1018)) + (_1019 * _1019));
        float _1257 = (cbMatDynParam._m0[5u].x * _1251) + cbMatDynParam._m0[5u].y;
        float _4192 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1262 = (cbMatDynParam._m0[5u].z * _1251) + cbMatDynParam._m0[5u].w;
        float _4203 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) - _1258)) + _1258) < ((_1033 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1044 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1045 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1047 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1049 = _1047.w;
    float _1067 = fma(_966, cbSceneParam._m0[5u].z, fma(_965, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _964));
    float _1070 = fma(_966, cbSceneParam._m0[6u].z, fma(_965, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _964));
    float _1073 = fma(_966, cbSceneParam._m0[7u].z, fma(_965, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _964));
    vec4 _1075 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1086 = (((_1075.y - _967) + (_1075.w * _967)) * cbMtdParam._m0[3u].x) + _967;
    uint _1099 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1100 = _1099 + 9u;
    uint _1101 = _1100 + uint(cbMatDynParam._m0[0u].w);
    float _1107 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) * cbInstanceData._m0[_1101].x;
    float _1108 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * cbInstanceData._m0[_1101].y;
    float _1109 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0)))) * cbInstanceData._m0[_1101].z;
    float _4214 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
    float _4225 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
    float _1111 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
    float _1112 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    vec4 _1113 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1118 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1129 = (((_1118.x - _971) + (_1118.w * _971)) * cbMtdParam._m0[3u].x) + _971;
    float _1142 = (cbMtdParam._m0[3u].x * (((_1110 * _1049) - _1110) + _1113.x)) + _1110;
    float _1143 = (cbMtdParam._m0[3u].x * (((_1111 * _1049) - _1111) + _1113.y)) + _1111;
    float _1144 = (cbMtdParam._m0[3u].x * (((_1112 * _1049) - _1112) + _1113.z)) + _1112;
    float _1145 = 1.0 - _1129;
    float _1146 = _1145 * _1142;
    float _1147 = _1145 * _1143;
    float _1148 = _1145 * _1144;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1129;
    float _1154 = (_1143 + (-0.039999999105930328369140625)) * _1129;
    float _1155 = (_1144 + (-0.039999999105930328369140625)) * _1129;
    float _1156 = _1153 + 0.039999999105930328369140625;
    float _1158 = _1154 + 0.039999999105930328369140625;
    float _1159 = _1155 + 0.039999999105930328369140625;
    vec4 _1168 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1044, cbSceneParam._m0[86u].y * _1045));
    float _1171 = _1168.x * TEXCOORD_5.w;
    float _1172 = dot(vec3(_964, _965, _966), vec3(_1024, _1025, _1026));
    float _1175 = _1172 * 2.0;
    float _1179 = (_1175 * _964) - _1024;
    float _1180 = (_1175 * _965) - _1025;
    float _1181 = (_1175 * _966) - _1026;
    float _1185 = abs(dot(vec3(_1024, _1025, _1026), vec3(_964, _965, _966)));
    float _4247 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1187 = sqrt(_1086);
    float _1198 = exp2((_1187 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1187 * 3.0));
    float _1204 = (1.0 - _1198) * ((_1187 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1205 = _1198 * _1187;
    float _1233 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1241 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1567;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1294 = fma(_1241, cbModelParam._m0[26u].z, fma(_1237, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1233));
        float _1298 = fma(_1241, cbModelParam._m0[27u].z, fma(_1237, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1233));
        float _1302 = fma(_1241, cbModelParam._m0[28u].z, fma(_1237, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1233));
        float _1326 = _1233 + _964;
        float _1327 = _1237 + _965;
        float _1328 = _1241 + _966;
        float _1338 = fma(_1328, cbModelParam._m0[26u].z, fma(_1327, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1326)) - _1294;
        float _1339 = fma(_1328, cbModelParam._m0[27u].z, fma(_1327, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1326)) - _1298;
        float _1340 = fma(_1328, cbModelParam._m0[28u].z, fma(_1327, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1326)) - _1302;
        float _1344 = inversesqrt(dot(vec3(_1338, _1339, _1340), vec3(_1338, _1339, _1340)));
        float _1356 = ((_1344 * _1338) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1294 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1357 = ((_1344 * _1339) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1298 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1358 = ((_1344 * _1340) / cbModelParam._m0[34u].z) + ((((((_1302 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1361 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1368 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1375 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        vec4 _1382 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1356, _1357, _1358), 0.0);
        float _1395 = exp2((_1361.w + (-0.5)) * 20.0) * 2.0;
        float _1396 = _1395 * (_1361.x + (-0.5));
        float _1397 = _1395 * (_1361.y + (-0.5));
        float _1398 = _1395 * (_1361.z + (-0.5));
        float _1405 = exp2((_1368.w + (-0.5)) * 20.0) * 2.0;
        float _1406 = _1405 * (_1368.x + (-0.5));
        float _1407 = _1405 * (_1368.y + (-0.5));
        float _1408 = _1405 * (_1368.z + (-0.5));
        float _1415 = exp2((_1375.w + (-0.5)) * 20.0) * 2.0;
        float _1416 = _1415 * (_1375.x + (-0.5));
        float _1417 = _1415 * (_1375.y + (-0.5));
        float _1418 = _1415 * (_1375.z + (-0.5));
        float _1425 = exp2((_1382.w + (-0.5)) * 20.0) * 2.0;
        float _1426 = _1425 * (_1382.x + (-0.5));
        float _1427 = _1425 * (_1382.y + (-0.5));
        float _1428 = _1425 * (_1382.z + (-0.5));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1431 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1432 = _1396 * 0.5;
        float _1433 = _1406 * 0.5;
        float _1434 = _1416 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1449 = (dot(vec3(_964, _965, _966), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0));
        float _1459 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4295 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1461 + 1.0))) + _1466) * _1429;
        float _1476 = _1397 * 0.5;
        float _1477 = _1407 * 0.5;
        float _1478 = _1417 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_964, _965, _966), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1430 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4328 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1503 + 1.0))) + _1508) * _1430;
        float _1518 = _1398 * 0.5;
        float _1519 = _1408 * 0.5;
        float _1520 = _1418 * 0.5;
        float _1521 = dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520));
        float _1526 = (_1521 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1521);
        float _1534 = (dot(vec3(_964, _965, _966), vec3(_1526 * _1518, _1526 * _1519, _1526 * _1520)) + 1.0) * 0.5;
        float _4339 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1543 = sqrt(((_1519 * _1519) + (_1518 * _1518)) + (_1520 * _1520)) / (_1431 + 9.9999997473787516355514526367188e-06);
        float _4350 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _1545 = _1544 * 2.0;
        float _1549 = (1.0 - _1544) / (_1544 + 1.0);
        float _4361 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1550 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _1559 = ((((1.0 - _1550) * (_1545 + 2.0)) * exp2(log2(isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_1545 + 1.0))) + _1550) * _1431;
        _1567 = _1398;
        _1569 = _1397;
        _1570 = _1396;
        _1571 = _1408;
        _1572 = _1407;
        _1573 = _1406;
        _1574 = _1418;
        _1575 = _1417;
        _1576 = _1416;
        _1577 = _1431;
        _1578 = _1430;
        _1579 = _1429;
        _1580 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1581 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
        _1582 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1559 : (isnan(_1559) ? 0.0 : max(_1559, 0.0)));
    }
    else
    {
        _1567 = _1568;
        _1569 = _1568;
        _1570 = _1568;
        _1571 = _1568;
        _1572 = _1568;
        _1573 = _1568;
        _1574 = _1568;
        _1575 = _1568;
        _1576 = _1568;
        _1577 = _1568;
        _1578 = _1568;
        _1579 = _1568;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    float _1888;
    float _1889;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1608 = fma(_1241, cbModelParam._m0[30u].z, fma(_1237, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1233));
        float _1612 = fma(_1241, cbModelParam._m0[31u].z, fma(_1237, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1233));
        float _1616 = fma(_1241, cbModelParam._m0[32u].z, fma(_1237, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1233));
        float _1638 = _1233 + _964;
        float _1639 = _1237 + _965;
        float _1640 = _1241 + _966;
        float _1650 = fma(_1640, cbModelParam._m0[30u].z, fma(_1639, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1638)) - _1608;
        float _1651 = fma(_1640, cbModelParam._m0[31u].z, fma(_1639, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1638)) - _1612;
        float _1652 = fma(_1640, cbModelParam._m0[32u].z, fma(_1639, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1638)) - _1616;
        float _1656 = inversesqrt(dot(vec3(_1650, _1651, _1652), vec3(_1650, _1651, _1652)));
        float _1668 = ((_1656 * _1650) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1608 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1669 = ((_1656 * _1651) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1612 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1670 = ((_1656 * _1652) / cbModelParam._m0[35u].z) + ((((((_1616 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1672 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1679 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1686 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        vec4 _1693 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1668, _1669, _1670), 0.0);
        float _1705 = exp2((_1672.w + (-0.5)) * 20.0) * 2.0;
        float _1706 = _1705 * (_1672.x + (-0.5));
        float _1707 = _1705 * (_1672.y + (-0.5));
        float _1708 = _1705 * (_1672.z + (-0.5));
        float _1715 = exp2((_1679.w + (-0.5)) * 20.0) * 2.0;
        float _1716 = _1715 * (_1679.x + (-0.5));
        float _1717 = _1715 * (_1679.y + (-0.5));
        float _1718 = _1715 * (_1679.z + (-0.5));
        float _1725 = exp2((_1686.w + (-0.5)) * 20.0) * 2.0;
        float _1726 = _1725 * (_1686.x + (-0.5));
        float _1727 = _1725 * (_1686.y + (-0.5));
        float _1728 = _1725 * (_1686.z + (-0.5));
        float _1735 = exp2((_1693.w + (-0.5)) * 20.0) * 2.0;
        float _1736 = _1735 * (_1693.x + (-0.5));
        float _1737 = _1735 * (_1693.y + (-0.5));
        float _1738 = _1735 * (_1693.z + (-0.5));
        float _1739 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1740 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1741 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1742 = _1706 * 0.5;
        float _1743 = _1716 * 0.5;
        float _1744 = _1726 * 0.5;
        float _1745 = dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744));
        float _1750 = (_1745 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1745);
        float _1758 = (dot(vec3(_964, _965, _966), vec3(_1750 * _1742, _1750 * _1743, _1750 * _1744)) + 1.0) * 0.5;
        float _4402 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1767 = sqrt(((_1743 * _1743) + (_1742 * _1742)) + (_1744 * _1744)) / (_1739 + 9.9999997473787516355514526367188e-06);
        float _4413 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _1769 = _1768 * 2.0;
        float _1773 = (1.0 - _1768) / (_1768 + 1.0);
        float _4424 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
        float _1774 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _1783 = ((((1.0 - _1774) * (_1769 + 2.0)) * exp2(log2(isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0))) * (_1769 + 1.0))) + _1774) * _1739;
        float _1784 = _1707 * 0.5;
        float _1785 = _1717 * 0.5;
        float _1786 = _1727 * 0.5;
        float _1787 = dot(vec3(_1784, _1785, _1786), vec3(_1784, _1785, _1786));
        float _1792 = (_1787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1787);
        float _1800 = (dot(vec3(_964, _965, _966), vec3(_1792 * _1784, _1792 * _1785, _1792 * _1786)) + 1.0) * 0.5;
        float _4435 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1809 = sqrt(((_1785 * _1785) + (_1784 * _1784)) + (_1786 * _1786)) / (_1740 + 9.9999997473787516355514526367188e-06);
        float _4446 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1811 = _1810 * 2.0;
        float _1815 = (1.0 - _1810) / (_1810 + 1.0);
        float _4457 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
        float _1816 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _1825 = ((((1.0 - _1816) * (_1811 + 2.0)) * exp2(log2(isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0))) * (_1811 + 1.0))) + _1816) * _1740;
        float _1826 = _1708 * 0.5;
        float _1827 = _1718 * 0.5;
        float _1828 = _1728 * 0.5;
        float _1829 = dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828));
        float _1834 = (_1829 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1829);
        float _1842 = (dot(vec3(_964, _965, _966), vec3(_1834 * _1826, _1834 * _1827, _1834 * _1828)) + 1.0) * 0.5;
        float _4468 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
        float _1851 = sqrt(((_1827 * _1827) + (_1826 * _1826)) + (_1828 * _1828)) / (_1741 + 9.9999997473787516355514526367188e-06);
        float _4479 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
        float _1853 = _1852 * 2.0;
        float _1857 = (1.0 - _1852) / (_1852 + 1.0);
        float _4490 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
        float _1858 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _1867 = ((((1.0 - _1858) * (_1853 + 2.0)) * exp2(log2(isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * (_1853 + 1.0))) + _1858) * _1741;
        _1875 = _1708;
        _1876 = _1707;
        _1877 = _1706;
        _1878 = _1718;
        _1879 = _1717;
        _1880 = _1716;
        _1881 = _1728;
        _1882 = _1727;
        _1883 = _1726;
        _1884 = _1741;
        _1885 = _1740;
        _1886 = _1739;
        _1887 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)));
        _1888 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0)));
        _1889 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0)));
    }
    else
    {
        _1875 = _1568;
        _1876 = _1568;
        _1877 = _1568;
        _1878 = _1568;
        _1879 = _1568;
        _1880 = _1568;
        _1881 = _1568;
        _1882 = _1568;
        _1883 = _1568;
        _1884 = _1568;
        _1885 = _1568;
        _1886 = _1568;
        _1887 = 0.0;
        _1888 = 0.0;
        _1889 = 0.0;
    }
    float _1899 = (cbModelParam._m0[1u].x * (_1887 - _1580)) + _1580;
    float _1900 = (cbModelParam._m0[1u].x * (_1888 - _1581)) + _1581;
    float _1901 = (cbModelParam._m0[1u].x * (_1889 - _1582)) + _1582;
    float _1922 = fma(_1901, cbSceneParam._m0[89u].z, fma(_1900, cbSceneParam._m0[89u].y, _1899 * cbSceneParam._m0[89u].x));
    float _1925 = fma(_1901, cbSceneParam._m0[90u].z, fma(_1900, cbSceneParam._m0[90u].y, _1899 * cbSceneParam._m0[90u].x));
    float _1928 = fma(_1901, cbSceneParam._m0[91u].z, fma(_1900, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1899));
    float _1941 = _1179 * 0.5;
    float _1942 = _1180 * 0.5;
    float _1943 = _1181 * 0.5;
    float _1944 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1877, _1880, _1883, _1886));
    float _1947 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1876, _1879, _1882, _1885));
    float _1950 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1875, _1878, _1881, _1884));
    float _1984;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1957 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1567, _1571, _1574, _1577));
        float _1961 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1569, _1572, _1575, _1578));
        float _1965 = dot(vec4(_1941, _1942, _1943, 1.0), vec4(_1570, _1573, _1576, _1579));
        float _1972 = dot(vec4(cbModelParam._m0[39u]), vec4(_1941, _1942, _1943, 1.0));
        _1984 = dot(vec3(isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)), isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1972) ? 0.0 : (isnan(0.0) ? _1972 : max(0.0, _1972))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1984 = 1.0;
    }
    float _1995;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1986 = dot(vec4(cbModelParam._m0[40u]), vec4(_1941, _1942, _1943, 1.0));
        _1995 = dot(vec3(isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0)), isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0)), isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1986) ? 0.0 : (isnan(0.0) ? _1986 : max(0.0, _1986))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1995 = 1.0;
    }
    float _1999 = (_1995 * cbModelParam._m0[1u].x) + (_1984 * (1.0 - cbModelParam._m0[1u].x));
    float _2009 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1086);
    float _2010 = isnan(_2009) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2009 : min(cbModelParam._m0[25u].z, _2009));
    float _2092;
    float _2094;
    float _2096;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2059 = fma(_1241, cbModelParam._m0[13u].z, fma(_1237, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1233)) + cbModelParam._m0[13u].w;
        float _2063 = fma(_1241, cbModelParam._m0[14u].z, fma(_1237, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1233)) + cbModelParam._m0[14u].w;
        float _2067 = fma(_1241, cbModelParam._m0[15u].z, fma(_1237, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1233)) + cbModelParam._m0[15u].w;
        float _2070 = fma(_1181, cbModelParam._m0[13u].z, fma(_1180, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1179));
        float _2073 = fma(_1181, cbModelParam._m0[14u].z, fma(_1180, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1179));
        float _2076 = fma(_1181, cbModelParam._m0[15u].z, fma(_1180, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1179));
        float _2104;
        if (_2070 > 0.0)
        {
            _2104 = abs((1.0 - _2059) / _2070);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2059 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2104 = frontier_phi_17_15_ladder;
        }
        float _2330;
        if (_2073 > 0.0)
        {
            _2330 = abs((1.0 - _2063) / _2073);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2073 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2063 + 1.0) / _2073);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2330 = frontier_phi_26_22_ladder;
        }
        float _2587;
        if (_2076 > 0.0)
        {
            _2587 = abs((1.0 - _2067) / _2076);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2076 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2067 + 1.0) / _2076);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2587 = frontier_phi_38_33_ladder;
        }
        float _2589 = isnan(_2330) ? _2104 : (isnan(_2104) ? _2330 : min(_2104, _2330));
        float _2590 = isnan(_2587) ? _2589 : (isnan(_2589) ? _2587 : min(_2589, _2587));
        float _2594 = (_2590 * _2070) + _2059;
        float _2595 = (_2590 * _2073) + _2063;
        float _2596 = (_2590 * _2076) + _2067;
        float _2597 = _2590 * 9.9999997473787516355514526367188e-05;
        float _2599 = (-1.0) - _2597;
        float _2601 = _2597 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2596 > _2601) || ((_2596 < _2599) || ((_2595 > _2601) || ((_2595 < _2599) || ((_2594 < _2599) || (_2594 > _2601))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2724 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2596, cbModelParam._m0[9u].z, fma(_2595, cbModelParam._m0[9u].y, _2594 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2596, cbModelParam._m0[10u].z, fma(_2595, cbModelParam._m0[10u].y, _2594 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2596, cbModelParam._m0[11u].z, fma(_2595, cbModelParam._m0[11u].y, _2594 * cbModelParam._m0[11u].x))), _2010);
            frontier_phi_16_38_ladder = _2724.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2724.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2724.x * cbModelParam._m0[1u].y;
        }
        _2092 = frontier_phi_16_38_ladder_2;
        _2094 = frontier_phi_16_38_ladder_1;
        _2096 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2080 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1179, _1180, _1181), _2010);
        _2092 = _2080.x * cbModelParam._m0[1u].y;
        _2094 = _2080.y * cbModelParam._m0[1u].y;
        _2096 = _2080.z * cbModelParam._m0[1u].y;
    }
    float _2100 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1086);
    float _2101 = isnan(_2100) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2100 : min(cbModelParam._m0[25u].w, _2100));
    float _2193;
    float _2195;
    float _2197;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2157 = fma(_1241, cbModelParam._m0[21u].z, fma(_1237, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1233)) + cbModelParam._m0[21u].w;
        float _2161 = fma(_1241, cbModelParam._m0[22u].z, fma(_1237, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1233)) + cbModelParam._m0[22u].w;
        float _2165 = fma(_1241, cbModelParam._m0[23u].z, fma(_1237, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1233)) + cbModelParam._m0[23u].w;
        float _2168 = fma(_1181, cbModelParam._m0[21u].z, fma(_1180, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1179));
        float _2171 = fma(_1181, cbModelParam._m0[22u].z, fma(_1180, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1179));
        float _2174 = fma(_1181, cbModelParam._m0[23u].z, fma(_1180, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1179));
        float _2335;
        if (_2168 > 0.0)
        {
            _2335 = abs((1.0 - _2157) / _2168);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2168 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2157 + 1.0) / _2168);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2335 = frontier_phi_28_24_ladder;
        }
        float _2614;
        if (_2171 > 0.0)
        {
            _2614 = abs((1.0 - _2161) / _2171);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2171 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2161 + 1.0) / _2171);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2614 = frontier_phi_40_35_ladder;
        }
        float _2827;
        if (_2174 > 0.0)
        {
            _2827 = abs((1.0 - _2165) / _2174);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2174 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2165 + 1.0) / _2174);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2827 = frontier_phi_49_46_ladder;
        }
        float _2829 = isnan(_2614) ? _2335 : (isnan(_2335) ? _2614 : min(_2335, _2614));
        float _2830 = isnan(_2827) ? _2829 : (isnan(_2829) ? _2827 : min(_2829, _2827));
        float _2834 = (_2830 * _2168) + _2157;
        float _2835 = (_2830 * _2171) + _2161;
        float _2836 = (_2830 * _2174) + _2165;
        float _2837 = _2830 * 9.9999997473787516355514526367188e-05;
        float _2838 = (-1.0) - _2837;
        float _2840 = _2837 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2836 > _2840) || ((_2836 < _2838) || ((_2835 > _2840) || ((_2835 < _2838) || ((_2834 < _2838) || (_2834 > _2840))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2836, cbModelParam._m0[17u].z, fma(_2835, cbModelParam._m0[17u].y, _2834 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2836, cbModelParam._m0[18u].z, fma(_2835, cbModelParam._m0[18u].y, _2834 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2836, cbModelParam._m0[19u].z, fma(_2835, cbModelParam._m0[19u].y, _2834 * cbModelParam._m0[19u].x))), _2101);
            frontier_phi_25_49_ladder = _3064.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3064.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3064.x * cbModelParam._m0[1u].z;
        }
        _2193 = frontier_phi_25_49_ladder_2;
        _2195 = frontier_phi_25_49_ladder_1;
        _2197 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2177 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1179, _1180, _1181), _2101);
        _2193 = _2177.x * cbModelParam._m0[1u].z;
        _2195 = _2177.y * cbModelParam._m0[1u].z;
        _2197 = _2177.z * cbModelParam._m0[1u].z;
    }
    float _2210 = (((_1204 * _1156) + _1205) * _1171) * ((cbModelParam._m0[1u].w * (_2193 - _2092)) + _2092);
    float _2212 = (((_1204 * _1158) + _1205) * _1171) * ((cbModelParam._m0[1u].w * (_2195 - _2094)) + _2094);
    float _2214 = (((_1204 * _1159) + _1205) * _1171) * ((cbModelParam._m0[1u].w * (_2197 - _2096)) + _2096);
    float _2217 = fma(_2214, cbSceneParam._m0[89u].z, fma(_2212, cbSceneParam._m0[89u].y, _2210 * cbSceneParam._m0[89u].x));
    float _2220 = fma(_2214, cbSceneParam._m0[90u].z, fma(_2212, cbSceneParam._m0[90u].y, _2210 * cbSceneParam._m0[90u].x));
    float _2223 = fma(_2214, cbSceneParam._m0[91u].z, fma(_2212, cbSceneParam._m0[91u].y, _2210 * cbSceneParam._m0[91u].x));
    vec4 _2231 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1044, _1045));
    float _2233 = _2231.w;
    float _2245 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2233);
    float _2246 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2233);
    float _2247 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2233);
    uvec4 _2251 = floatBitsToUint(cbInstanceData._m0[_1099 + 5u]);
    uint _2253 = _2251.x * 14u;
    uint _2254 = _2253 + 13u;
    float _2261 = _1171 + (-1.0);
    float _2266 = (cbLight._m0[_2254].x * _2261) + 1.0;
    float _2267 = (cbLight._m0[_2254].y * _2261) + 1.0;
    float _2268 = (cbLight._m0[_2254].z * _2261) + 1.0;
    float _2269 = (cbLight._m0[_2254].w * _2261) + 1.0;
    uint _2270 = _2253 + 5u;
    float _2276 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
    uint _2280 = _2253 + 4u;
    float _2289 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2293 = _2253 | 1u;
    float _2304 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_964, _965, _966));
    float _2307 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_964, _965, _966));
    float _4626 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _4637 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = (isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * 0.3183098733425140380859375;
    float _2314 = (isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * 0.3183098733425140380859375;
    float _2321 = ((cbLight._m0[_2270].x * _2276) * _2314) + (((cbLight._m0[_2280].x * _2245) * _2289) * _2312);
    float _2322 = ((_2276 * cbLight._m0[_2270].y) * _2314) + (((cbLight._m0[_2280].y * _2246) * _2289) * _2312);
    float _2323 = ((_2276 * cbLight._m0[_2270].z) * _2314) + (((cbLight._m0[_2280].z * _2247) * _2289) * _2312);
    uvec4 _2327 = floatBitsToUint(cbLight._m0[_2253 + 12u]);
    bool _2329 = _2327.x == 0u;
    float _2340;
    float _2342;
    float _2344;
    if (_2329)
    {
        _2340 = _2321;
        _2342 = _2322;
        _2344 = _2323;
    }
    else
    {
        uint _2348 = _2253 + 6u;
        float _2364 = (dot(vec3(cbLight._m0[_2253 + 2u].xyz), vec3(_964, _965, _966)) * 0.5) + 0.5;
        float _2365 = _2364 * _2364;
        float _4648 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2366 = isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0));
        float _2367 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2340 = (((cbLight._m0[_2348].x * 0.3183098733425140380859375) * _2366) * _2367) + _2321;
        _2342 = (((cbLight._m0[_2348].y * 0.3183098733425140380859375) * _2366) * _2367) + _2322;
        _2344 = (((cbLight._m0[_2348].z * 0.3183098733425140380859375) * _2366) * _2367) + _2323;
    }
    bool _2347 = _2327.y == 0u;
    float _2385;
    float _2387;
    float _2389;
    if (_2347)
    {
        _2385 = _2340;
        _2387 = _2342;
        _2389 = _2344;
    }
    else
    {
        uint _2558 = _2253 + 7u;
        float _2574 = (dot(vec3(cbLight._m0[_2253 + 3u].xyz), vec3(_964, _965, _966)) * 0.5) + 0.5;
        float _2575 = _2574 * _2574;
        float _4664 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
        float _2576 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2577 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2385 = (((cbLight._m0[_2558].x * 0.3183098733425140380859375) * _2576) * _2577) + _2340;
        _2387 = (((cbLight._m0[_2558].y * 0.3183098733425140380859375) * _2576) * _2577) + _2342;
        _2389 = (((cbLight._m0[_2558].z * 0.3183098733425140380859375) * _2576) * _2577) + _2344;
    }
    uint _2392 = _2253 + 8u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2253].w)) * _1086) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2253].x + _1024;
    float _2408 = cbLight._m0[_2253].y + _1025;
    float _2409 = cbLight._m0[_2253].z + _1026;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_964, _965, _966), vec3(cbLight._m0[_2253].xyz));
    float _4680 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    float _4691 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
    float _2421 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
    float _2422 = dot(vec3(_964, _965, _966), vec3(_2414, _2415, _2416));
    float _4702 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2425 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
    float _2426 = dot(vec3(cbLight._m0[_2253].xyz), vec3(_2414, _2415, _2416));
    float _4713 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2430 = _2406 * _2406;
    float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
    float _2442 = exp2(log2(1.0 - (isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0)))) * 5.0);
    float _2443 = 0.959999978542327880859375 - _1153;
    float _2445 = 0.959999978542327880859375 - _1154;
    float _2446 = 0.959999978542327880859375 - _1155;
    float _2453 = 1.0 - _2406;
    float _2464 = (0.5 / (((_2421 * ((_2420 * _2453) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2453) + _2406) * _2420))) * _2420;
    float _4724 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
    float _2466 = (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
    uint _2480 = _2253 + 9u;
    float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _1086) * 0.949999988079071044921875);
    float _2492 = _2491 * _2491;
    float _2493 = cbLight._m0[_2293].x + _1024;
    float _2494 = cbLight._m0[_2293].y + _1025;
    float _2495 = cbLight._m0[_2293].z + _1026;
    float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
    float _2500 = _2499 * _2493;
    float _2501 = _2499 * _2494;
    float _2502 = _2499 * _2495;
    float _2503 = dot(vec3(_964, _965, _966), vec3(cbLight._m0[_2293].xyz));
    float _4735 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
    float _2507 = dot(vec3(_964, _965, _966), vec3(_2500, _2501, _2502));
    float _4746 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2510 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
    float _2511 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2500, _2501, _2502));
    float _4757 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
    float _2515 = _2492 * _2492;
    float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
    float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
    float _2533 = 1.0 - _2492;
    float _2543 = (0.5 / (((_2421 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2533) + _2492) * _2506))) * _2506;
    float _4768 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
    float _2545 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
    float _2555 = (((((_2526 * _2443) + _1156) * cbLight._m0[_2480].x) * _2545) * _2276) + ((((cbLight._m0[_2392].x * _2245) * ((_2442 * _2443) + _1156)) * _2466) * _2289);
    float _2556 = (((((_2526 * _2445) + _1158) * cbLight._m0[_2480].y) * _2545) * _2276) + ((((cbLight._m0[_2392].y * _2246) * ((_2442 * _2445) + _1158)) * _2466) * _2289);
    float _2557 = (((((_2526 * _2446) + _1159) * cbLight._m0[_2480].z) * _2545) * _2276) + ((((cbLight._m0[_2392].z * _2247) * ((_2442 * _2446) + _1159)) * _2466) * _2289);
    float _2619;
    float _2621;
    float _2623;
    if (_2329)
    {
        _2619 = _2555;
        _2621 = _2556;
        _2623 = _2557;
    }
    else
    {
        uint _2625 = _2253 + 2u;
        uint _2629 = _2253 + 10u;
        float _2643 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2625].w)) * _1086) * 0.949999988079071044921875);
        float _2644 = _2643 * _2643;
        float _2645 = cbLight._m0[_2625].x + _1024;
        float _2646 = cbLight._m0[_2625].y + _1025;
        float _2647 = cbLight._m0[_2625].z + _1026;
        float _2651 = inversesqrt(dot(vec3(_2645, _2646, _2647), vec3(_2645, _2646, _2647)));
        float _2652 = _2651 * _2645;
        float _2653 = _2651 * _2646;
        float _2654 = _2651 * _2647;
        float _2655 = dot(vec3(_964, _965, _966), vec3(cbLight._m0[_2625].xyz));
        float _4779 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4779 : (isnan(_4779) ? 1.0 : min(_4779, 1.0));
        float _2659 = dot(vec3(_964, _965, _966), vec3(_2652, _2653, _2654));
        float _4790 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2662 = isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0));
        float _2663 = dot(vec3(cbLight._m0[_2625].xyz), vec3(_2652, _2653, _2654));
        float _4801 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2667 = _2644 * _2644;
        float _2671 = ((_2662 * _2662) * (_2667 + (-1.0))) + 1.0;
        float _2678 = exp2(log2(1.0 - (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0)))) * 5.0);
        float _2685 = 1.0 - _2644;
        float _2695 = (0.5 / (((_2421 * ((_2658 * _2685) + _2644)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2685) + _2644) * _2658))) * _2658;
        float _4812 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
        float _2697 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * (_2667 / ((_2671 * _2671) * 3.141590118408203125));
        float _2698 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2619 = (((((_2678 * _2443) + _1156) * cbLight._m0[_2629].x) * _2697) * _2698) + _2555;
        _2621 = (((((_2678 * _2445) + _1158) * cbLight._m0[_2629].y) * _2697) * _2698) + _2556;
        _2623 = (((((_2678 * _2446) + _1159) * cbLight._m0[_2629].z) * _2697) * _2698) + _2557;
    }
    float _2733;
    float _2735;
    float _2737;
    if (_2347)
    {
        _2733 = _2619;
        _2735 = _2621;
        _2737 = _2623;
    }
    else
    {
        uint _2744 = _2253 + 3u;
        uint _2748 = _2253 + 11u;
        float _2762 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2744].w)) * _1086) * 0.949999988079071044921875);
        float _2763 = _2762 * _2762;
        float _2764 = cbLight._m0[_2744].x + _1024;
        float _2765 = cbLight._m0[_2744].y + _1025;
        float _2766 = cbLight._m0[_2744].z + _1026;
        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
        float _2771 = _2770 * _2764;
        float _2772 = _2770 * _2765;
        float _2773 = _2770 * _2766;
        float _2774 = dot(vec3(_964, _965, _966), vec3(cbLight._m0[_2744].xyz));
        float _4828 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2778 = dot(vec3(_964, _965, _966), vec3(_2771, _2772, _2773));
        float _4839 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2782 = dot(vec3(cbLight._m0[_2744].xyz), vec3(_2771, _2772, _2773));
        float _4850 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2786 = _2763 * _2763;
        float _2790 = ((_2781 * _2781) * (_2786 + (-1.0))) + 1.0;
        float _2797 = exp2(log2(1.0 - (isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0)))) * 5.0);
        float _2804 = 1.0 - _2763;
        float _2814 = (0.5 / (((_2421 * ((_2777 * _2804) + _2763)) + 9.9999999392252902907785028219223e-09) + (((_2421 * _2804) + _2763) * _2777))) * _2777;
        float _4861 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2816 = (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2786 / ((_2790 * _2790) * 3.141590118408203125));
        float _2817 = isnan(1.0) ? _2269 : (isnan(_2269) ? 1.0 : min(_2269, 1.0));
        _2733 = (((((_2797 * _2443) + _1156) * cbLight._m0[_2748].x) * _2816) * _2817) + _2619;
        _2735 = (((((_2797 * _2445) + _1158) * cbLight._m0[_2748].y) * _2816) * _2817) + _2621;
        _2737 = (((((_2797 * _2446) + _1159) * cbLight._m0[_2748].z) * _2816) * _2817) + _2623;
    }
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    if (_2251.y == 0u)
    {
        float _2892 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2893 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2892;
        float _2894 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2892;
        float _2895 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2892;
        uvec4 _2907 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2908 = _2907.x;
        uint _2919 = uint((float(_2907.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1045) / _2908))) + floor(float(uint(cbSceneParam._m0[85u].x * _1044) / _2908)));
        float _2929 = (log2(_2895 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2930 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        uint _2933 = uint(isnan(14.0) ? _2930 : (isnan(_2930) ? 14.0 : min(_2930, 14.0)));
        uvec4 _2938 = texelFetch(g_lightClusterGridBuffer, int(((_2933 << 2u) + (_2919 << 6u)) >> 2u));
        uint _2939 = _2938.x;
        uint _2940 = _2907.z;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((((1u << ((_2940 >> 4u) & 15u)) + 4294967295u) & _2939) == 0u) || ((_2940 & 240u) == 0u))
        {
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
        }
        else
        {
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            float _3232 = 0.0;
            float _3233 = 0.0;
            float _3234 = 0.0;
            uint _3235 = 0u;
            uint _3244;
            bool _3245;
            for (;;)
            {
                _3244 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3235 << 2u)) >> 2u)).x;
                _3245 = _3244 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3245)
                {
                    frontier_phi_66_pred = _3229;
                    frontier_phi_66_pred_1 = _3234;
                    frontier_phi_66_pred_2 = _3233;
                    frontier_phi_66_pred_3 = _3232;
                    frontier_phi_66_pred_4 = _3231;
                    frontier_phi_66_pred_5 = _3230;
                }
                else
                {
                    float _3374;
                    float _3375;
                    float _3376;
                    float _3377;
                    float _3378;
                    float _3379;
                    uint _3380;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3231;
                    _3377 = _3232;
                    _3378 = _3233;
                    _3379 = _3234;
                    _3380 = _3244;
                    float _3301;
                    float _3302;
                    float _3303;
                    float _3304;
                    float _3305;
                    float _3306;
                    for (;;)
                    {
                        uint _3384 = uint(findLSB(_3380)) + (_3235 << 5u);
                        uint _3381 = (_3380 + 4294967295u) & _3380;
                        uint _3386 = _3384 * 48u;
                        vec4 _3400 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3386)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3386 + 3u)).x));
                        uint _3406 = (_3384 * 48u) + 4u;
                        vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3406)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3406 + 3u)).x));
                        uint _3425 = (_3384 * 48u) + 8u;
                        vec3 _3436 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x));
                        float _3440 = _3400.x - _2893;
                        float _3441 = _3400.y - _2894;
                        float _3442 = _3400.z - _2895;
                        float _3443 = dot(vec3(_3440, _3441, _3442), vec3(_3440, _3441, _3442));
                        float _3446 = inversesqrt(_3443);
                        float _3447 = _3446 * _3440;
                        float _3448 = _3446 * _3441;
                        float _3449 = _3446 * _3442;
                        float _3450 = dot(vec3(_1067, _1070, _1073), vec3(_3447, _3448, _3449));
                        float _3455 = 1.0 - (_3443 * _3400.w);
                        float _4887 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3456 = isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0));
                        float _3457 = sqrt(_3443) * _3419.w;
                        float _3460 = 1.39999997615814208984375 / (_3457 + 1.39999997615814208984375);
                        float _3461 = _3460 * _3460;
                        float _3464 = ((1.0 - _3461) * _3450) + _3461;
                        float _3467 = _3457 * _3457;
                        float _3471 = ((isnan(0.0) ? _3464 : (isnan(_3464) ? 0.0 : max(_3464, 0.0))) * _3456) / ((_3467 * 0.699999988079071044921875) + 1.0);
                        float _3475 = (-0.0) - _2893;
                        float _3476 = (-0.0) - _2894;
                        float _3477 = (-0.0) - _2895;
                        float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                        float _3482 = _3481 * _3475;
                        float _3483 = _3481 * _3476;
                        float _3484 = _3481 * _3477;
                        float _3492 = exp2(log2(1.0 / ((_3467 * 3.5) + 5.0)) * 0.25);
                        float _3493 = 1.0 - _1187;
                        float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                        float _3501 = _3500 * _3500;
                        float _3502 = _3501 * _3501;
                        float _3503 = _3482 + _3447;
                        float _3504 = _3483 + _3448;
                        float _3505 = _3484 + _3449;
                        float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                        float _3513 = dot(vec3(_1067, _1070, _1073), vec3(_3482, _3483, _3484));
                        float _4903 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                        float _3517 = dot(vec3(_1067, _1070, _1073), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                        float _4914 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                        float _3520 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
                        float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                        float _3525 = _3460 * _3501;
                        float _3526 = _3525 * _3525;
                        float _3529 = ((1.0 - _3526) * _3450) + _3526;
                        float _4925 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                        float _3530 = isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0));
                        float _3531 = 1.0 - _3501;
                        float _3541 = (0.5 / (((_3530 * ((_3516 * _3531) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3530 * _3531) + _3501) * _3516))) * _3530;
                        float _4936 = isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0));
                        float _3552 = (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0)))) / ((_3524 * _3524) * ((_3467 * 2.1991131305694580078125) + 3.141590118408203125))) * _3456;
                        _3304 = (_3471 * _3419.x) + _3377;
                        _3305 = (_3471 * _3419.y) + _3378;
                        _3306 = (_3471 * _3419.z) + _3379;
                        _3301 = (_3552 * _3436.x) + _3374;
                        _3302 = (_3552 * _3436.y) + _3375;
                        _3303 = (_3552 * _3436.z) + _3376;
                        if (_3381 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3303;
                            _3377 = _3304;
                            _3378 = _3305;
                            _3379 = _3306;
                            _3380 = _3381;
                        }
                    }
                    frontier_phi_66_pred = _3301;
                    frontier_phi_66_pred_1 = _3306;
                    frontier_phi_66_pred_2 = _3305;
                    frontier_phi_66_pred_3 = _3304;
                    frontier_phi_66_pred_4 = _3303;
                    frontier_phi_66_pred_5 = _3302;
                }
                _3070 = frontier_phi_66_pred;
                _3080 = frontier_phi_66_pred_1;
                _3078 = frontier_phi_66_pred_2;
                _3076 = frontier_phi_66_pred_3;
                _3074 = frontier_phi_66_pred_4;
                _3072 = frontier_phi_66_pred_5;
                uint _3236 = _3235 + 1u;
                if (_3236 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3229 = _3070;
                    _3230 = _3072;
                    _3231 = _3074;
                    _3232 = _3076;
                    _3233 = _3078;
                    _3234 = _3080;
                    _3235 = _3236;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
        }
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.z;
        uint _3086 = (_3084 >> 8u) & 15u;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        if (((4294967295u << _3086) & _2939) == 0u)
        {
            _3197 = _3069;
            _3199 = _3071;
            _3201 = _3073;
            _3203 = _3075;
            _3205 = _3077;
            _3207 = _3079;
        }
        else
        {
            float _3222 = inversesqrt(dot(vec3(_2893, _2894, _2895), vec3(_2893, _2894, _2895)));
            float _3223 = _3222 * _2893;
            float _3224 = _3222 * _2894;
            float _3225 = _3222 * _2895;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3086 < ((_3084 >> 12u) & 15u))
            {
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3206;
                float _3208;
                float _3357 = _3069;
                float _3358 = _3071;
                float _3359 = _3073;
                float _3360 = _3075;
                float _3361 = _3077;
                float _3362 = _3079;
                uint _3363 = _3086;
                uint _3372;
                bool _3373;
                for (;;)
                {
                    _3372 = texelFetch(g_lightClassification, int((((_2933 << 5u) + (_2919 << 9u)) + (_3363 << 2u)) >> 2u)).x;
                    _3373 = _3372 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3373)
                    {
                        frontier_phi_77_pred = _3362;
                        frontier_phi_77_pred_1 = _3361;
                        frontier_phi_77_pred_2 = _3360;
                        frontier_phi_77_pred_3 = _3359;
                        frontier_phi_77_pred_4 = _3358;
                        frontier_phi_77_pred_5 = _3357;
                    }
                    else
                    {
                        float _3566;
                        float _3567;
                        float _3568;
                        float _3569;
                        float _3570;
                        float _3571;
                        float _3860;
                        float _3861;
                        float _3862;
                        float _3863;
                        float _3864;
                        float _3865;
                        float _3579 = _3357;
                        float _3580 = _3358;
                        float _3581 = _3359;
                        float _3582 = _3360;
                        float _3583 = _3361;
                        float _3584 = _3362;
                        uint _3585 = _3372;
                        uint _3586;
                        vec4 _3611;
                        float _3612;
                        vec4 _3627;
                        vec3 _3639;
                        vec4 _3655;
                        vec4 _3670;
                        float _3716;
                        bool _3717;
                        for (;;)
                        {
                            uint _3596 = ((_3363 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3585));
                            _3586 = (_3585 + 4294967295u) & _3585;
                            uint _3598 = _3596 * 40u;
                            _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3612 = _3611.w;
                            uint _3614 = (_3596 * 40u) + 4u;
                            _3627 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3614)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3614 + 3u)).x));
                            uint _3629 = (_3596 * 40u) + 8u;
                            _3639 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3629)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3629 + 2u)).x));
                            uint _3642 = (_3596 * 40u) + 16u;
                            _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3657 = (_3596 * 40u) + 20u;
                            _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            uint _3672 = (_3596 * 40u) + 24u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            uint _3691 = (_3596 * 40u) + 28u;
                            vec4 _3704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3691 + 3u)).x));
                            _3716 = fma(_2895, _3704.z, fma(_2894, _3704.y, _3704.x * _2893)) + _3704.w;
                            _3717 = !((fma(_2895, _3685.z, fma(_2894, _3685.y, _3685.x * _2893)) + _3685.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3717)
                            {
                                float _3744 = _3611.x - _2893;
                                float _3745 = _3611.y - _2894;
                                float _3746 = _3611.z - _2895;
                                float _3747 = dot(vec3(_3744, _3745, _3746), vec3(_3744, _3745, _3746));
                                float _3750 = inversesqrt(_3747);
                                float _3751 = _3750 * _3744;
                                float _3752 = _3750 * _3745;
                                float _3753 = _3750 * _3746;
                                float _3757 = 1.0 - (_3747 / (_3612 * _3612));
                                float _4947 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3758 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                                float _3762 = sqrt(_3747) * _3627.w;
                                float _3764 = 1.39999997615814208984375 / (_3762 + 1.39999997615814208984375);
                                float _3765 = _3764 * _3764;
                                float _3768 = ((1.0 - _3765) * dot(vec3(_3751, _3752, _3753), vec3(_1067, _1070, _1073))) + _3765;
                                float _3771 = _3762 * _3762;
                                float _3775 = (fma(_2895, _3655.z, fma(_2894, _3655.y, _3655.x * _2893)) + _3655.w) / _3716;
                                float _3776 = (fma(_2895, _3670.z, fma(_2894, _3670.y, _3670.x * _2893)) + _3670.w) / _3716;
                                float _3780 = 1.0 - dot(vec2(_3775, _3776), vec2(_3775, _3776));
                                float _4963 = isnan(0.0) ? _3780 : (isnan(_3780) ? 0.0 : max(_3780, 0.0));
                                float _3781 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                                float _3782 = _3781 * (((isnan(0.0) ? _3768 : (isnan(_3768) ? 0.0 : max(_3768, 0.0))) * _3758) / ((_3771 * 0.699999988079071044921875) + 1.0));
                                float _3794 = exp2(log2(1.0 / ((_3771 * 3.5) + 5.0)) * 0.25);
                                float _3795 = 1.0 - _1187;
                                float _3802 = sqrt(1.0 - ((1.0 - (_3795 * _3795)) * (1.0 - (_3794 * _3794))));
                                float _3803 = _3802 * _3802;
                                float _3804 = _3803 * _3803;
                                float _3805 = _3751 - _3223;
                                float _3806 = _3752 - _3224;
                                float _3807 = _3753 - _3225;
                                float _3811 = inversesqrt(dot(vec3(_3805, _3806, _3807), vec3(_3805, _3806, _3807)));
                                float _3815 = dot(vec3(_1067, _1070, _1073), vec3((-0.0) - _3223, (-0.0) - _3224, (-0.0) - _3225));
                                float _4974 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                                float _3819 = dot(vec3(_1067, _1070, _1073), vec3(_3811 * _3805, _3811 * _3806, _3811 * _3807));
                                float _4985 = isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0));
                                float _3822 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                                float _3826 = ((_3822 * _3822) * (_3804 + (-1.0))) + 1.0;
                                float _3827 = _3764 * _3803;
                                float _3828 = _3827 * _3827;
                                float _3834 = ((1.0 - _3828) * dot(vec3(_1067, _1070, _1073), vec3(_3751, _3752, _3753))) + _3828;
                                float _4996 = isnan(0.0) ? _3834 : (isnan(_3834) ? 0.0 : max(_3834, 0.0));
                                float _3835 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
                                float _3836 = 1.0 - _3803;
                                float _3846 = (0.5 / (((_3835 * ((_3818 * _3836) + _3803)) + 9.9999999392252902907785028219223e-09) + (((_3835 * _3836) + _3803) * _3818))) * _3835;
                                float _5007 = isnan(0.0) ? _3846 : (isnan(_3846) ? 0.0 : max(_3846, 0.0));
                                float _3856 = (_3781 * _3758) * (((_3804 * 3.1415927410125732421875) * (isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0)))) / ((_3826 * _3826) * ((_3771 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3782 * _3627.y;
                                frontier_phi_83_pred_1 = _3782 * _3627.x;
                                frontier_phi_83_pred_2 = _3856 * _3639.z;
                                frontier_phi_83_pred_3 = _3856 * _3639.y;
                                frontier_phi_83_pred_4 = _3856 * _3639.x;
                                frontier_phi_83_pred_5 = _3782 * _3627.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3864 = frontier_phi_83_pred;
                            _3863 = frontier_phi_83_pred_1;
                            _3862 = frontier_phi_83_pred_2;
                            _3861 = frontier_phi_83_pred_3;
                            _3860 = frontier_phi_83_pred_4;
                            _3865 = frontier_phi_83_pred_5;
                            _3569 = _3863 + _3582;
                            _3570 = _3864 + _3583;
                            _3571 = _3865 + _3584;
                            _3566 = _3860 + _3579;
                            _3567 = _3861 + _3580;
                            _3568 = _3862 + _3581;
                            if (_3586 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3568;
                                _3582 = _3569;
                                _3583 = _3570;
                                _3584 = _3571;
                                _3585 = _3586;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3571;
                        frontier_phi_77_pred_1 = _3570;
                        frontier_phi_77_pred_2 = _3569;
                        frontier_phi_77_pred_3 = _3568;
                        frontier_phi_77_pred_4 = _3567;
                        frontier_phi_77_pred_5 = _3566;
                    }
                    _3208 = frontier_phi_77_pred;
                    _3206 = frontier_phi_77_pred_1;
                    _3204 = frontier_phi_77_pred_2;
                    _3202 = frontier_phi_77_pred_3;
                    _3200 = frontier_phi_77_pred_4;
                    _3198 = frontier_phi_77_pred_5;
                    uint _3364 = _3363 + 1u;
                    if (_3364 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3357 = _3198;
                        _3358 = _3200;
                        _3359 = _3202;
                        _3360 = _3204;
                        _3361 = _3206;
                        _3362 = _3208;
                        _3363 = _3364;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3202;
                frontier_phi_58_59_ladder_1 = _3208;
                frontier_phi_58_59_ladder_2 = _3206;
                frontier_phi_58_59_ladder_3 = _3204;
                frontier_phi_58_59_ladder_4 = _3200;
                frontier_phi_58_59_ladder_5 = _3198;
            }
            else
            {
                frontier_phi_58_59_ladder = _3073;
                frontier_phi_58_59_ladder_1 = _3079;
                frontier_phi_58_59_ladder_2 = _3077;
                frontier_phi_58_59_ladder_3 = _3075;
                frontier_phi_58_59_ladder_4 = _3071;
                frontier_phi_58_59_ladder_5 = _3069;
            }
            _3197 = frontier_phi_58_59_ladder_5;
            _3199 = frontier_phi_58_59_ladder_4;
            _3201 = frontier_phi_58_59_ladder;
            _3203 = frontier_phi_58_59_ladder_3;
            _3205 = frontier_phi_58_59_ladder_2;
            _3207 = frontier_phi_58_59_ladder_1;
        }
        float _3212 = isnan(1.0) ? _1171 : (isnan(_1171) ? 1.0 : min(_1171, 1.0));
        _2952 = (_3212 * _3203) + _2385;
        _2954 = (_3212 * _3205) + _2387;
        _2956 = (_3212 * _3207) + _2389;
        _2958 = ((_3197 * _1156) * _3212) + _2733;
        _2960 = ((_3199 * _1158) * _3212) + _2735;
        _2962 = ((_3201 * _1159) * _3212) + _2737;
    }
    else
    {
        _2952 = _2385;
        _2954 = _2387;
        _2956 = _2389;
        _2958 = _2733;
        _2960 = _2735;
        _2962 = _2737;
    }
    uint _2968 = _1100 + uint(cbMatDynParam._m0[0u].w);
    float _2974 = (((((cbMtdParam._m0[22u].x * _868.x) * cbMtdParam._m0[32u].x) * _889) + _641) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2968].x;
    float _2975 = (((((cbMtdParam._m0[22u].y * _868.y) * cbMtdParam._m0[32u].x) * _889) + _642) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2968].y;
    float _2976 = (((((cbMtdParam._m0[22u].z * _868.z) * cbMtdParam._m0[32u].x) * _889) + _643) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2968].z;
    float _5023 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _5034 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _5045 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
    float _2993 = (((isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0))) * (_2952 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1171))) + ((_2958 + ((isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0))) * _1999)) * cbPerFrame._m0[3u].x)) + _2974;
    float _2995 = (_2975 + ((_2960 + ((isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0))) * _1999)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0))) * (_2954 + ((isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0))) * _1171)));
    float _2997 = (_2976 + ((_2962 + ((isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0))) * _1999)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0))) * (_2956 + ((isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) * _1171)));
    float _2998 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
    float _2999 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
    float _3000 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
    float _3006 = cbMtdParam._m0[2u].x * _2974;
    float _3007 = cbMtdParam._m0[2u].y * _2975;
    float _3008 = cbMtdParam._m0[2u].z * _2976;
    float _5071 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3010 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
    uint _3011 = _1099 + 6u;
    float _3019 = _1044 / cbSceneParam._m0[86u].x;
    float _3020 = _1045 / cbSceneParam._m0[86u].y;
    vec4 _3034 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, (log2((isnan(cbSceneParam._m0[77u].w) ? _987 : (isnan(_987) ? cbSceneParam._m0[77u].w : min(_987, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3036 = _3034.x;
    float _3037 = _3034.y;
    float _3038 = _3034.z;
    float _3039 = _3034.w;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    if (_987 > cbSceneParam._m0[78u].w)
    {
        float _3094 = isnan(_987) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _987 : min(cbSceneParam._m0[80u].w, _987));
        float _3095 = _3094 / _987;
        float _3106 = _3095 * _1017;
        float _3107 = _1018 * _3095;
        float _3108 = (-0.0) - _3107;
        float _3109 = _3095 * _1019;
        float _3111 = (cbSceneParam._m0[77u].w * _3108) / _3094;
        float _3112 = _3111 + cbSceneParam._m0[79u].w;
        float _3113 = cbSceneParam._m0[79u].w - _3107;
        float _3119 = sqrt(((_3106 * _3106) + (_3107 * _3107)) + (_3109 * _3109));
        float _3122 = (1.0 - (cbSceneParam._m0[77u].w / _3094)) * _3119;
        float _3127 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3129 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3314;
        if (abs((_3108 - _3111) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3314 = ((((_3112 > 0.0) ? exp2(_3127 * _3112) : (2.0 - exp2(_3129 * _3112))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3122;
        }
        else
        {
            float _3258 = 1.0 / cbSceneParam._m0[80u].x;
            float _3259 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : max(_3112, _3113));
            float _3260 = isnan(_3113) ? _3112 : (isnan(_3112) ? _3113 : min(_3112, _3113));
            float _3269 = isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : min(_3259, 0.0));
            float _3270 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : min(_3260, 0.0));
            _3314 = ((abs(_3119 / _3108) * cbSceneParam._m0[80u].y) * ((((_3269 - _3270) * 2.0) - ((exp2(_3127 * (isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0)))) - exp2(_3127 * (isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))))) * _3258)) - ((exp2(_3129 * _3269) - exp2(_3129 * _3270)) * _3258))) + (_3122 * cbSceneParam._m0[80u].z);
        }
        vec4 _3316 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, 1.0), 0.0);
        float _3325 = exp2((_3314 * (-1.44269502162933349609375)) * (1.0 - _3316.w));
        float _3326 = log2(_3325);
        float _3342 = log2(_3039);
        _3131 = (exp2(_3342 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3326 * cbSceneParam._m0[78u].x)) * _3316.x) / cbSceneParam._m0[78u].x)) + _3036;
        _3133 = (exp2(_3342 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3326 * cbSceneParam._m0[78u].y)) * _3316.y) / cbSceneParam._m0[78u].y)) + _3037;
        _3135 = (exp2(_3342 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3326 * cbSceneParam._m0[78u].z)) * _3316.z) / cbSceneParam._m0[78u].z)) + _3038;
        _3137 = _3325 * _3039;
    }
    else
    {
        _3131 = _3036;
        _3133 = _3037;
        _3135 = _3038;
        _3137 = _3039;
    }
    bool _3352;
    vec4 _3146;
    vec4 _3168;
    float _3170;
    float _3174;
    float _3175;
    float _3176;
    float _3179;
    float _3182;
    float _3185;
    float _3186;
    bool _3196;
    for (;;)
    {
        _3146 = cbMatDynParam._m0[0u];
        float _3148 = roundEven(_3146.y);
        bool _3149 = _3148 == 3.0;
        float _3150 = log2(_3137);
        float _3154 = exp2(_3150 * cbSceneParam._m0[78u].x);
        float _3155 = exp2(_3150 * cbSceneParam._m0[78u].y);
        float _3156 = exp2(_3150 * cbSceneParam._m0[78u].z);
        float _3157 = _3154 * _2998;
        float _3158 = _3155 * _2999;
        float _3159 = _3156 * _3000;
        float _3166 = _1033 + (-0.5);
        _3168 = cbMtdParam._m0[1u];
        _3170 = _3168.y * _3166;
        float _3173 = (_3148 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3174 = _3173 * (_3149 ? _3157 : (_3157 + (cbSceneParam._m0[72u].w * _3131)));
        _3175 = _3173 * (_3149 ? _3158 : (_3158 + (cbSceneParam._m0[72u].w * _3133)));
        _3176 = _3173 * (_3149 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3135)));
        _3179 = ((_3006 * _3010) * _3154) * _3173;
        _3182 = ((_3007 * _3010) * _3155) * _3173;
        _3185 = ((_3008 * _3010) * _3156) * _3173;
        _3186 = _3166 * 0.999000012874603271484375;
        _3196 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3196)
        {
            if ((cbInstanceData._m0[_1099 + 7u].x + _3186) < 0.5)
            {
                _3352 = true;
                break;
            }
        }
        uint _3293 = _1100 + uint(_3146.w);
        if ((cbInstanceData._m0[_3293].w < 1.0) && ((cbInstanceData._m0[_3293].w + _3186) < 0.5))
        {
            _3352 = true;
            break;
        }
        if ((_3170 + 1.0) < _3168.x)
        {
            _3352 = true;
            break;
        }
        _3352 = false;
        break;
    }
    float _3557;
    if (_3352)
    {
        discard_state = true;
        _3557 = 0.0;
    }
    else
    {
        _3557 = cbInstanceData._m0[_3011].w;
    }
    SV_Target.x = _3174;
    SV_Target.y = _3175;
    SV_Target.z = _3176;
    SV_Target.w = _3557;
    SV_Target_1.x = _3179;
    SV_Target_1.y = _3182;
    SV_Target_1.z = _3185;
    SV_Target_1.w = cbInstanceData._m0[_3011].w;
    discard_exit();
}


