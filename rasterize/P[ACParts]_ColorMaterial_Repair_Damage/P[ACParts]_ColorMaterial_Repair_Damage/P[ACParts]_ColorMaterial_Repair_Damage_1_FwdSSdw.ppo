#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1520;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _225 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _226 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _227 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _233 = inversesqrt(dot(vec3(_225, _226, _227), vec3(_225, _226, _227)));
    float _240 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _247 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _269 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _274 = _269.z;
    float _275 = _269.w;
    vec4 _297 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _302 = _297.w;
    float _314 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _274) * exp2(log2(1.0 - _302) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _315 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _316 = isnan(1.0) ? _315 : (isnan(_315) ? 1.0 : min(_315, 1.0));
    vec4 _330 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _340 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _348 = (_340 - (((_330.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _340))) * (cbMtdParam._m0[36u].w + 1.0);
    float _3915 = isnan(0.0) ? _348 : (isnan(_348) ? 0.0 : max(_348, 0.0));
    float _349 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _351 = _316 - (_349 * _316);
    float _352 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    vec4 _366 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _369 = _366.y;
    float _370 = _369 * (isnan(1.0) ? _352 : (isnan(_352) ? 1.0 : min(_352, 1.0)));
    float _379 = exp2(log2(cbMtdParam._m0[32u].w * _302) * cbMtdParam._m0[31u].z);
    float _381 = _379 - (_349 * _379);
    float _382 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _383 = isnan(1.0) ? _382 : (isnan(_382) ? 1.0 : min(_382, 1.0));
    float _394 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_275) * 4.5));
    float _403 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _274) * _394)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _404 = isnan(0.0) ? _403 : (isnan(_403) ? 0.0 : max(_403, 0.0));
    float _405 = isnan(1.0) ? _404 : (isnan(_404) ? 1.0 : min(_404, 1.0));
    float _416 = exp2(log2((1.0 - (((_394 * _394) * _274) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _417 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _421 = (((isnan(1.0) ? _417 : (isnan(_417) ? 1.0 : min(_417, 1.0))) - _275) * _369) + _275;
    vec4 _433 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _446 = (_366.x + (-0.02500000037252902984619140625)) * 8.0;
    float _448 = roundEven(_446);
    float _449 = cbMtdParam._m0[10u].x * _433.x;
    float _450 = cbMtdParam._m0[10u].y * _433.y;
    float _451 = cbMtdParam._m0[10u].z * _433.z;
    vec4 _463 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _474 = cbMtdParam._m0[9u].x * _463.x;
    float _475 = cbMtdParam._m0[9u].y * _463.y;
    float _476 = cbMtdParam._m0[9u].z * _463.z;
    float _483 = ((_474 - _449) * _421) + _449;
    float _484 = ((_475 - _450) * _421) + _450;
    float _485 = ((_476 - _451) * _421) + _451;
    vec4 _497 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _517 = (((cbMtdParam._m0[20u].x * _497.x) - _483) * _405) + _483;
    float _518 = (((cbMtdParam._m0[20u].y * _497.y) - _484) * _405) + _484;
    float _519 = (((cbMtdParam._m0[20u].z * _497.z) - _485) * _405) + _485;
    vec4 _531 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _551 = (((cbMtdParam._m0[29u].x * _531.x) - _517) * _383) + _517;
    float _552 = (((cbMtdParam._m0[29u].y * _531.y) - _518) * _383) + _518;
    float _553 = (((cbMtdParam._m0[29u].z * _531.z) - _519) * _383) + _519;
    float _198[6];
    float _199[6];
    float _200[6];
    _198[0u] = cbMtdParam._m0[30u].x;
    _199[0u] = cbMtdParam._m0[30u].y;
    _200[0u] = cbMtdParam._m0[30u].z;
    _198[1u] = cbMtdParam._m0[28u].x;
    _199[1u] = cbMtdParam._m0[28u].y;
    _200[1u] = cbMtdParam._m0[28u].z;
    _198[2u] = cbMtdParam._m0[27u].x;
    _199[2u] = cbMtdParam._m0[27u].y;
    _200[2u] = cbMtdParam._m0[27u].z;
    _198[3u] = cbMtdParam._m0[26u].x;
    _199[3u] = cbMtdParam._m0[26u].y;
    _200[3u] = cbMtdParam._m0[26u].z;
    _198[4u] = cbMtdParam._m0[25u].x;
    _199[4u] = cbMtdParam._m0[25u].y;
    _200[4u] = cbMtdParam._m0[25u].z;
    _198[5u] = cbMtdParam._m0[24u].x;
    _199[5u] = cbMtdParam._m0[24u].y;
    _200[5u] = cbMtdParam._m0[24u].z;
    float _622 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    uint _625 = uint(int(isnan(5.0) ? _622 : (isnan(_622) ? 5.0 : min(_622, 5.0))));
    float _632 = _198[_625] * _369;
    float _633 = _199[_625] * _369;
    float _634 = _200[_625] * _369;
    float _635 = _632 + ((_297.x * 4.5) * (((_474 - _551) * _370) + _551));
    float _636 = _633 + ((_297.y * 4.5) * (((_475 - _552) * _370) + _552));
    float _637 = _634 + ((_297.z * 4.5) * (((_476 - _553) * _370) + _553));
    float _193[5];
    float _194[5];
    _193[0u] = cbMtdParam._m0[37u].w;
    _194[0u] = cbMtdParam._m0[38u].x;
    _193[1u] = cbMtdParam._m0[39u].w;
    _194[1u] = cbMtdParam._m0[40u].x;
    _193[2u] = cbMtdParam._m0[40u].y;
    _194[2u] = cbMtdParam._m0[40u].z;
    _193[3u] = cbMtdParam._m0[40u].w;
    _194[3u] = cbMtdParam._m0[41u].x;
    _193[4u] = cbMtdParam._m0[41u].y;
    _194[4u] = cbMtdParam._m0[41u].z;
    float _670 = roundEven(5.0 - _446);
    float _671 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _672 = isnan(4.0) ? _671 : (isnan(_671) ? 4.0 : min(_671, 4.0));
    float _674 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    uint _676 = uint(int(isnan(4.0) ? _674 : (isnan(_674) ? 4.0 : min(_674, 4.0))));
    float _688 = ((cbMtdParam._m0[42u].z - _194[_676]) * _421) + _194[_676];
    float _696 = ((cbMtdParam._m0[43u].x - _688) * _405) + _688;
    float _701 = ((cbMtdParam._m0[43u].z - _696) * _383) + _696;
    float _706 = ((cbMtdParam._m0[39u].z - _701) * _370) + _701;
    vec4 _720 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _722 = _720.x;
    float _723 = _720.y;
    float _725 = _720.z + _193[_676];
    vec4 _737 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _745 = (((cbMtdParam._m0[42u].y - _725) + _737.z) * _421) + _725;
    vec4 _758 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _766 = (((cbMtdParam._m0[42u].w - _745) + _758.z) * _405) + _745;
    float _772 = ((((_274 * 2.0) * _766) - _766) * cbMtdParam._m0[34u].x) + _766;
    vec4 _785 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _793 = (((_785.z + cbMtdParam._m0[43u].y) - _772) * _383) + _772;
    float _797 = (((cbMtdParam._m0[39u].y + _330.z) - _793) * _370) + _793;
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _860 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_829 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_833 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _875 = (-0.0) - ((_833 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _879 = (_833 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _880 = isnan(_879) ? _875 : (isnan(_875) ? _879 : min(_875, _879));
    float _4001 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _881 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _909 = ((_737.x - _722) * _421) + _722;
    float _910 = ((_737.y - _723) * _421) + _723;
    float _915 = ((_758.x - _909) * _405) + _909;
    float _916 = ((_758.y - _910) * _405) + _910;
    float _921 = ((_785.x - _915) * _383) + _915;
    float _922 = ((_785.y - _916) * _383) + _916;
    float _931 = ((((_330.x - _921) * _370) + _921) * 2.0) + (-1.0);
    float _932 = ((((_330.y - _922) * _370) + _922) * 2.0) + (-1.0);
    float _933 = dot(vec2(_931, _932), vec2(_931, _932));
    float _4012 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _938 = sqrt(1.0 - (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))));
    float _941 = (cbMtdParam._m0[34u].z * ((_269.x * 2.0) + (-1.0))) + _931;
    float _942 = (cbMtdParam._m0[34u].z * ((_269.y * 2.0) + (-1.0))) + _932;
    float _945 = fma(_938, _240 * NORMAL.x, fma(_942, _247 * TANGENT.x, (_233 * _225) * _941));
    float _948 = fma(_938, _240 * NORMAL.y, fma(_942, _247 * TANGENT.y, (_233 * _226) * _941));
    float _951 = fma(_938, _240 * NORMAL.z, fma(_942, _247 * TANGENT.z, (_233 * _227) * _941));
    float _955 = inversesqrt(dot(vec3(_945, _948, _951), vec3(_945, _948, _951)));
    float _956 = _955 * _945;
    float _957 = _955 * _948;
    float _958 = _955 * _951;
    float _4023 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _959 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4045 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _4056 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4067 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _963 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _979 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _999 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1009 = cbSceneParam._m0[71u].x - (_829 / _999);
    float _1010 = cbSceneParam._m0[71u].y - (_833 / _999);
    float _1011 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _999);
    float _1015 = inversesqrt(dot(vec3(_1009, _1010, _1011), vec3(_1009, _1010, _1011)));
    float _1016 = _1009 * _1015;
    float _1017 = _1010 * _1015;
    float _1018 = _1011 * _1015;
    float _1024 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1025 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1027 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1029 = _1027.w;
    float _1047 = fma(_958, cbSceneParam._m0[5u].z, fma(_957, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _956));
    float _1050 = fma(_958, cbSceneParam._m0[6u].z, fma(_957, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _956));
    float _1053 = fma(_958, cbSceneParam._m0[7u].z, fma(_957, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _956));
    vec4 _1055 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1066 = (((_1055.y - _959) + (_1055.w * _959)) * cbMtdParam._m0[3u].x) + _959;
    uint _1079 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1080 = _1079 + 9u;
    uint _1081 = _1080 + uint(cbMatDynParam._m0[0u].w);
    float _1087 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1081].x;
    float _1088 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * cbInstanceData._m0[_1081].y;
    float _1089 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * cbInstanceData._m0[_1081].z;
    float _4078 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
    float _1091 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _4100 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    vec4 _1093 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1098 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1109 = (((_1098.x - _963) + (_1098.w * _963)) * cbMtdParam._m0[3u].x) + _963;
    float _1122 = (cbMtdParam._m0[3u].x * (((_1090 * _1029) - _1090) + _1093.x)) + _1090;
    float _1123 = (cbMtdParam._m0[3u].x * (((_1091 * _1029) - _1091) + _1093.y)) + _1091;
    float _1124 = (cbMtdParam._m0[3u].x * (((_1092 * _1029) - _1092) + _1093.z)) + _1092;
    float _1125 = 1.0 - _1109;
    float _1126 = _1125 * _1122;
    float _1127 = _1125 * _1123;
    float _1128 = _1125 * _1124;
    float _1133 = (_1122 + (-0.039999999105930328369140625)) * _1109;
    float _1134 = (_1123 + (-0.039999999105930328369140625)) * _1109;
    float _1135 = (_1124 + (-0.039999999105930328369140625)) * _1109;
    float _1136 = _1133 + 0.039999999105930328369140625;
    float _1138 = _1134 + 0.039999999105930328369140625;
    float _1139 = _1135 + 0.039999999105930328369140625;
    vec4 _1148 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1024, cbSceneParam._m0[86u].y * _1025));
    float _1151 = _1148.x * TEXCOORD_5.w;
    float _1152 = dot(vec3(_956, _957, _958), vec3(_1016, _1017, _1018));
    float _1155 = _1152 * 2.0;
    float _1159 = (_1155 * _956) - _1016;
    float _1160 = (_1155 * _957) - _1017;
    float _1161 = (_1155 * _958) - _1018;
    float _1165 = abs(dot(vec3(_1016, _1017, _1018), vec3(_956, _957, _958)));
    float _4111 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
    float _1167 = sqrt(_1066);
    float _1178 = exp2((_1167 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1167 * 3.0));
    float _1184 = (1.0 - _1178) * ((_1167 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1185 = _1178 * _1167;
    float _1213 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1217 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1221 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1519;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1246 = fma(_1221, cbModelParam._m0[26u].z, fma(_1217, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1213));
        float _1250 = fma(_1221, cbModelParam._m0[27u].z, fma(_1217, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1213));
        float _1254 = fma(_1221, cbModelParam._m0[28u].z, fma(_1217, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1213));
        float _1278 = _1213 + _956;
        float _1279 = _1217 + _957;
        float _1280 = _1221 + _958;
        float _1290 = fma(_1280, cbModelParam._m0[26u].z, fma(_1279, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1278)) - _1246;
        float _1291 = fma(_1280, cbModelParam._m0[27u].z, fma(_1279, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1278)) - _1250;
        float _1292 = fma(_1280, cbModelParam._m0[28u].z, fma(_1279, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1278)) - _1254;
        float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
        float _1308 = ((_1296 * _1290) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1246 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1309 = ((_1296 * _1291) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1250 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1310 = ((_1296 * _1292) / cbModelParam._m0[34u].z) + ((((((_1254 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1313 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1308, _1309, _1310), 0.0);
        float _1347 = exp2((_1313.w + (-0.5)) * 20.0) * 2.0;
        float _1348 = _1347 * (_1313.x + (-0.5));
        float _1349 = _1347 * (_1313.y + (-0.5));
        float _1350 = _1347 * (_1313.z + (-0.5));
        float _1357 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1320.x + (-0.5));
        float _1359 = _1357 * (_1320.y + (-0.5));
        float _1360 = _1357 * (_1320.z + (-0.5));
        float _1367 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1327.x + (-0.5));
        float _1369 = _1367 * (_1327.y + (-0.5));
        float _1370 = _1367 * (_1327.z + (-0.5));
        float _1377 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1334.x + (-0.5));
        float _1379 = _1377 * (_1334.y + (-0.5));
        float _1380 = _1377 * (_1334.z + (-0.5));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = _1348 * 0.5;
        float _1385 = _1358 * 0.5;
        float _1386 = _1368 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1401 = (dot(vec3(_956, _957, _958), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _4137 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1411 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4148 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _4159 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0))) * (_1413 + 1.0))) + _1418) * _1381;
        float _1428 = _1349 * 0.5;
        float _1429 = _1359 * 0.5;
        float _1430 = _1369 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1444 = (dot(vec3(_956, _957, _958), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4170 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1453 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1382 + 9.9999997473787516355514526367188e-06);
        float _4181 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4192 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1455 + 1.0))) + _1460) * _1382;
        float _1470 = _1350 * 0.5;
        float _1471 = _1360 * 0.5;
        float _1472 = _1370 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_956, _957, _958), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4203 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4214 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4225 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_1497 + 1.0))) + _1502) * _1383;
        _1519 = _1350;
        _1521 = _1349;
        _1522 = _1348;
        _1523 = _1360;
        _1524 = _1359;
        _1525 = _1358;
        _1526 = _1370;
        _1527 = _1369;
        _1528 = _1368;
        _1529 = _1383;
        _1530 = _1382;
        _1531 = _1381;
        _1532 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
        _1533 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
    }
    else
    {
        _1519 = _1520;
        _1521 = _1520;
        _1522 = _1520;
        _1523 = _1520;
        _1524 = _1520;
        _1525 = _1520;
        _1526 = _1520;
        _1527 = _1520;
        _1528 = _1520;
        _1529 = _1520;
        _1530 = _1520;
        _1531 = _1520;
        _1532 = 0.0;
        _1533 = 0.0;
        _1534 = 0.0;
    }
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1557 = fma(_1221, cbModelParam._m0[30u].z, fma(_1217, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213));
        float _1561 = fma(_1221, cbModelParam._m0[31u].z, fma(_1217, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213));
        float _1565 = fma(_1221, cbModelParam._m0[32u].z, fma(_1217, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213));
        float _1587 = _1213 + _956;
        float _1588 = _1217 + _957;
        float _1589 = _1221 + _958;
        float _1599 = fma(_1589, cbModelParam._m0[30u].z, fma(_1588, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1587)) - _1557;
        float _1600 = fma(_1589, cbModelParam._m0[31u].z, fma(_1588, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1587)) - _1561;
        float _1601 = fma(_1589, cbModelParam._m0[32u].z, fma(_1588, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1587)) - _1565;
        float _1605 = inversesqrt(dot(vec3(_1599, _1600, _1601), vec3(_1599, _1600, _1601)));
        float _1617 = ((_1605 * _1599) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1557 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1618 = ((_1605 * _1600) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1561 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1619 = ((_1605 * _1601) / cbModelParam._m0[35u].z) + ((((((_1565 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1621 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1628 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1635 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        vec4 _1642 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1617, _1618, _1619), 0.0);
        float _1654 = exp2((_1621.w + (-0.5)) * 20.0) * 2.0;
        float _1655 = _1654 * (_1621.x + (-0.5));
        float _1656 = _1654 * (_1621.y + (-0.5));
        float _1657 = _1654 * (_1621.z + (-0.5));
        float _1664 = exp2((_1628.w + (-0.5)) * 20.0) * 2.0;
        float _1665 = _1664 * (_1628.x + (-0.5));
        float _1666 = _1664 * (_1628.y + (-0.5));
        float _1667 = _1664 * (_1628.z + (-0.5));
        float _1674 = exp2((_1635.w + (-0.5)) * 20.0) * 2.0;
        float _1675 = _1674 * (_1635.x + (-0.5));
        float _1676 = _1674 * (_1635.y + (-0.5));
        float _1677 = _1674 * (_1635.z + (-0.5));
        float _1684 = exp2((_1642.w + (-0.5)) * 20.0) * 2.0;
        float _1685 = _1684 * (_1642.x + (-0.5));
        float _1686 = _1684 * (_1642.y + (-0.5));
        float _1687 = _1684 * (_1642.z + (-0.5));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = _1655 * 0.5;
        float _1692 = _1665 * 0.5;
        float _1693 = _1675 * 0.5;
        float _1694 = dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693));
        float _1699 = (_1694 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1694);
        float _1707 = (dot(vec3(_956, _957, _958), vec3(_1699 * _1691, _1699 * _1692, _1699 * _1693)) + 1.0) * 0.5;
        float _4266 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
        float _1716 = sqrt(((_1692 * _1692) + (_1691 * _1691)) + (_1693 * _1693)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4277 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1717 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1718 = _1717 * 2.0;
        float _1722 = (1.0 - _1717) / (_1717 + 1.0);
        float _4288 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1732 = ((((1.0 - _1723) * (_1718 + 2.0)) * exp2(log2(isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0))) * (_1718 + 1.0))) + _1723) * _1688;
        float _1733 = _1656 * 0.5;
        float _1734 = _1666 * 0.5;
        float _1735 = _1676 * 0.5;
        float _1736 = dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735));
        float _1741 = (_1736 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1736);
        float _1749 = (dot(vec3(_956, _957, _958), vec3(_1741 * _1733, _1741 * _1734, _1741 * _1735)) + 1.0) * 0.5;
        float _4299 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1758 = sqrt(((_1734 * _1734) + (_1733 * _1733)) + (_1735 * _1735)) / (_1689 + 9.9999997473787516355514526367188e-06);
        float _4310 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1760 = _1759 * 2.0;
        float _1764 = (1.0 - _1759) / (_1759 + 1.0);
        float _4321 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1774 = ((((1.0 - _1765) * (_1760 + 2.0)) * exp2(log2(isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_1760 + 1.0))) + _1765) * _1689;
        float _1775 = _1657 * 0.5;
        float _1776 = _1667 * 0.5;
        float _1777 = _1677 * 0.5;
        float _1778 = dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777));
        float _1783 = (_1778 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1778);
        float _1791 = (dot(vec3(_956, _957, _958), vec3(_1783 * _1775, _1783 * _1776, _1783 * _1777)) + 1.0) * 0.5;
        float _4332 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
        float _1800 = sqrt(((_1776 * _1776) + (_1775 * _1775)) + (_1777 * _1777)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4343 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
        float _1801 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1802 = _1801 * 2.0;
        float _1806 = (1.0 - _1801) / (_1801 + 1.0);
        float _4354 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
        float _1816 = ((((1.0 - _1807) * (_1802 + 2.0)) * exp2(log2(isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_1802 + 1.0))) + _1807) * _1690;
        _1824 = _1657;
        _1825 = _1656;
        _1826 = _1655;
        _1827 = _1667;
        _1828 = _1666;
        _1829 = _1665;
        _1830 = _1677;
        _1831 = _1676;
        _1832 = _1675;
        _1833 = _1690;
        _1834 = _1689;
        _1835 = _1688;
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0)));
        _1837 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0)));
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0)));
    }
    else
    {
        _1824 = _1520;
        _1825 = _1520;
        _1826 = _1520;
        _1827 = _1520;
        _1828 = _1520;
        _1829 = _1520;
        _1830 = _1520;
        _1831 = _1520;
        _1832 = _1520;
        _1833 = _1520;
        _1834 = _1520;
        _1835 = _1520;
        _1836 = 0.0;
        _1837 = 0.0;
        _1838 = 0.0;
    }
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1532)) + _1532;
    float _1849 = (cbModelParam._m0[1u].x * (_1837 - _1533)) + _1533;
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1534)) + _1534;
    float _1871 = fma(_1850, cbSceneParam._m0[89u].z, fma(_1849, cbSceneParam._m0[89u].y, _1848 * cbSceneParam._m0[89u].x));
    float _1874 = fma(_1850, cbSceneParam._m0[90u].z, fma(_1849, cbSceneParam._m0[90u].y, _1848 * cbSceneParam._m0[90u].x));
    float _1877 = fma(_1850, cbSceneParam._m0[91u].z, fma(_1849, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1848));
    float _1890 = _1159 * 0.5;
    float _1891 = _1160 * 0.5;
    float _1892 = _1161 * 0.5;
    float _1893 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1896 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1825, _1828, _1831, _1834));
    float _1899 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1933;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1906 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1519, _1523, _1526, _1529));
        float _1910 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1521, _1524, _1527, _1530));
        float _1914 = dot(vec4(_1890, _1891, _1892, 1.0), vec4(_1522, _1525, _1528, _1531));
        float _1921 = dot(vec4(cbModelParam._m0[39u]), vec4(_1890, _1891, _1892, 1.0));
        _1933 = dot(vec3(isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0)), isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)), isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1921) ? 0.0 : (isnan(0.0) ? _1921 : max(0.0, _1921))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1933 = 1.0;
    }
    float _1944;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1935 = dot(vec4(cbModelParam._m0[40u]), vec4(_1890, _1891, _1892, 1.0));
        _1944 = dot(vec3(isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0)), isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0)), isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1935) ? 0.0 : (isnan(0.0) ? _1935 : max(0.0, _1935))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1944 = 1.0;
    }
    float _1948 = (_1944 * cbModelParam._m0[1u].x) + (_1933 * (1.0 - cbModelParam._m0[1u].x));
    float _1958 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1066);
    float _1959 = isnan(_1958) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1958 : min(cbModelParam._m0[25u].z, _1958));
    float _2041;
    float _2043;
    float _2045;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2008 = fma(_1221, cbModelParam._m0[13u].z, fma(_1217, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1213)) + cbModelParam._m0[13u].w;
        float _2012 = fma(_1221, cbModelParam._m0[14u].z, fma(_1217, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1213)) + cbModelParam._m0[14u].w;
        float _2016 = fma(_1221, cbModelParam._m0[15u].z, fma(_1217, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1213)) + cbModelParam._m0[15u].w;
        float _2019 = fma(_1161, cbModelParam._m0[13u].z, fma(_1160, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1159));
        float _2022 = fma(_1161, cbModelParam._m0[14u].z, fma(_1160, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1159));
        float _2025 = fma(_1161, cbModelParam._m0[15u].z, fma(_1160, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1159));
        float _2053;
        if (_2019 > 0.0)
        {
            _2053 = abs((1.0 - _2008) / _2019);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2019 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2008 + 1.0) / _2019);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2053 = frontier_phi_14_12_ladder;
        }
        float _2279;
        if (_2022 > 0.0)
        {
            _2279 = abs((1.0 - _2012) / _2022);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2022 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2012 + 1.0) / _2022);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2279 = frontier_phi_23_19_ladder;
        }
        float _2536;
        if (_2025 > 0.0)
        {
            _2536 = abs((1.0 - _2016) / _2025);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2016 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2536 = frontier_phi_35_30_ladder;
        }
        float _2538 = isnan(_2279) ? _2053 : (isnan(_2053) ? _2279 : min(_2053, _2279));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _2019) + _2008;
        float _2544 = (_2539 * _2022) + _2012;
        float _2545 = (_2539 * _2025) + _2016;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2548 = (-1.0) - _2546;
        float _2550 = _2546 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2545 > _2550) || ((_2545 < _2548) || ((_2544 > _2550) || ((_2544 < _2548) || ((_2543 < _2548) || (_2543 > _2550))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2545, cbModelParam._m0[9u].z, fma(_2544, cbModelParam._m0[9u].y, _2543 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2545, cbModelParam._m0[10u].z, fma(_2544, cbModelParam._m0[10u].y, _2543 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2545, cbModelParam._m0[11u].z, fma(_2544, cbModelParam._m0[11u].y, _2543 * cbModelParam._m0[11u].x))), _1959);
            frontier_phi_13_35_ladder = _2673.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2673.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2673.x * cbModelParam._m0[1u].y;
        }
        _2041 = frontier_phi_13_35_ladder_2;
        _2043 = frontier_phi_13_35_ladder_1;
        _2045 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2029 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1159, _1160, _1161), _1959);
        _2041 = _2029.x * cbModelParam._m0[1u].y;
        _2043 = _2029.y * cbModelParam._m0[1u].y;
        _2045 = _2029.z * cbModelParam._m0[1u].y;
    }
    float _2049 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1066);
    float _2050 = isnan(_2049) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2049 : min(cbModelParam._m0[25u].w, _2049));
    float _2142;
    float _2144;
    float _2146;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2106 = fma(_1221, cbModelParam._m0[21u].z, fma(_1217, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1213)) + cbModelParam._m0[21u].w;
        float _2110 = fma(_1221, cbModelParam._m0[22u].z, fma(_1217, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1213)) + cbModelParam._m0[22u].w;
        float _2114 = fma(_1221, cbModelParam._m0[23u].z, fma(_1217, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1213)) + cbModelParam._m0[23u].w;
        float _2117 = fma(_1161, cbModelParam._m0[21u].z, fma(_1160, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1159));
        float _2120 = fma(_1161, cbModelParam._m0[22u].z, fma(_1160, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1159));
        float _2123 = fma(_1161, cbModelParam._m0[23u].z, fma(_1160, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1159));
        float _2284;
        if (_2117 > 0.0)
        {
            _2284 = abs((1.0 - _2106) / _2117);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2117 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2106 + 1.0) / _2117);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2284 = frontier_phi_25_21_ladder;
        }
        float _2563;
        if (_2120 > 0.0)
        {
            _2563 = abs((1.0 - _2110) / _2120);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2120 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2110 + 1.0) / _2120);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2563 = frontier_phi_37_32_ladder;
        }
        float _2776;
        if (_2123 > 0.0)
        {
            _2776 = abs((1.0 - _2114) / _2123);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2114 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2776 = frontier_phi_46_43_ladder;
        }
        float _2778 = isnan(_2563) ? _2284 : (isnan(_2284) ? _2563 : min(_2284, _2563));
        float _2779 = isnan(_2776) ? _2778 : (isnan(_2778) ? _2776 : min(_2778, _2776));
        float _2783 = (_2779 * _2117) + _2106;
        float _2784 = (_2779 * _2120) + _2110;
        float _2785 = (_2779 * _2123) + _2114;
        float _2786 = _2779 * 9.9999997473787516355514526367188e-05;
        float _2787 = (-1.0) - _2786;
        float _2789 = _2786 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2785 > _2789) || ((_2785 < _2787) || ((_2784 > _2789) || ((_2784 < _2787) || ((_2783 < _2787) || (_2783 > _2789))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3013 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2785, cbModelParam._m0[17u].z, fma(_2784, cbModelParam._m0[17u].y, _2783 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2785, cbModelParam._m0[18u].z, fma(_2784, cbModelParam._m0[18u].y, _2783 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2785, cbModelParam._m0[19u].z, fma(_2784, cbModelParam._m0[19u].y, _2783 * cbModelParam._m0[19u].x))), _2050);
            frontier_phi_22_46_ladder = _3013.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3013.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3013.x * cbModelParam._m0[1u].z;
        }
        _2142 = frontier_phi_22_46_ladder_2;
        _2144 = frontier_phi_22_46_ladder_1;
        _2146 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2126 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1159, _1160, _1161), _2050);
        _2142 = _2126.x * cbModelParam._m0[1u].z;
        _2144 = _2126.y * cbModelParam._m0[1u].z;
        _2146 = _2126.z * cbModelParam._m0[1u].z;
    }
    float _2159 = (((_1184 * _1136) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2142 - _2041)) + _2041);
    float _2161 = (((_1184 * _1138) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2144 - _2043)) + _2043);
    float _2163 = (((_1184 * _1139) + _1185) * _1151) * ((cbModelParam._m0[1u].w * (_2146 - _2045)) + _2045);
    float _2166 = fma(_2163, cbSceneParam._m0[89u].z, fma(_2161, cbSceneParam._m0[89u].y, _2159 * cbSceneParam._m0[89u].x));
    float _2169 = fma(_2163, cbSceneParam._m0[90u].z, fma(_2161, cbSceneParam._m0[90u].y, _2159 * cbSceneParam._m0[90u].x));
    float _2172 = fma(_2163, cbSceneParam._m0[91u].z, fma(_2161, cbSceneParam._m0[91u].y, _2159 * cbSceneParam._m0[91u].x));
    vec4 _2180 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1024, _1025));
    float _2182 = _2180.w;
    float _2194 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2182);
    float _2195 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2182);
    float _2196 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2182);
    uvec4 _2200 = floatBitsToUint(cbInstanceData._m0[_1079 + 5u]);
    uint _2202 = _2200.x * 14u;
    uint _2203 = _2202 + 13u;
    float _2210 = _1151 + (-1.0);
    float _2215 = (cbLight._m0[_2203].x * _2210) + 1.0;
    float _2216 = (cbLight._m0[_2203].y * _2210) + 1.0;
    float _2217 = (cbLight._m0[_2203].z * _2210) + 1.0;
    float _2218 = (cbLight._m0[_2203].w * _2210) + 1.0;
    uint _2219 = _2202 + 5u;
    float _2225 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
    uint _2229 = _2202 + 4u;
    float _2238 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
    uint _2242 = _2202 | 1u;
    float _2253 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_956, _957, _958));
    float _2256 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_956, _957, _958));
    float _4490 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
    float _4501 = isnan(0.0) ? _2256 : (isnan(_2256) ? 0.0 : max(_2256, 0.0));
    float _2261 = (isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * 0.3183098733425140380859375;
    float _2263 = (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.3183098733425140380859375;
    float _2270 = ((cbLight._m0[_2219].x * _2225) * _2263) + (((cbLight._m0[_2229].x * _2194) * _2238) * _2261);
    float _2271 = ((_2225 * cbLight._m0[_2219].y) * _2263) + (((cbLight._m0[_2229].y * _2195) * _2238) * _2261);
    float _2272 = ((_2225 * cbLight._m0[_2219].z) * _2263) + (((cbLight._m0[_2229].z * _2196) * _2238) * _2261);
    uvec4 _2276 = floatBitsToUint(cbLight._m0[_2202 + 12u]);
    bool _2278 = _2276.x == 0u;
    float _2289;
    float _2291;
    float _2293;
    if (_2278)
    {
        _2289 = _2270;
        _2291 = _2271;
        _2293 = _2272;
    }
    else
    {
        uint _2297 = _2202 + 6u;
        float _2313 = (dot(vec3(cbLight._m0[_2202 + 2u].xyz), vec3(_956, _957, _958)) * 0.5) + 0.5;
        float _2314 = _2313 * _2313;
        float _4512 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        float _2315 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2316 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2289 = (((cbLight._m0[_2297].x * 0.3183098733425140380859375) * _2315) * _2316) + _2270;
        _2291 = (((cbLight._m0[_2297].y * 0.3183098733425140380859375) * _2315) * _2316) + _2271;
        _2293 = (((cbLight._m0[_2297].z * 0.3183098733425140380859375) * _2315) * _2316) + _2272;
    }
    bool _2296 = _2276.y == 0u;
    float _2334;
    float _2336;
    float _2338;
    if (_2296)
    {
        _2334 = _2289;
        _2336 = _2291;
        _2338 = _2293;
    }
    else
    {
        uint _2507 = _2202 + 7u;
        float _2523 = (dot(vec3(cbLight._m0[_2202 + 3u].xyz), vec3(_956, _957, _958)) * 0.5) + 0.5;
        float _2524 = _2523 * _2523;
        float _4528 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
        float _2525 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
        float _2526 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2334 = (((cbLight._m0[_2507].x * 0.3183098733425140380859375) * _2525) * _2526) + _2289;
        _2336 = (((cbLight._m0[_2507].y * 0.3183098733425140380859375) * _2525) * _2526) + _2291;
        _2338 = (((cbLight._m0[_2507].z * 0.3183098733425140380859375) * _2525) * _2526) + _2293;
    }
    uint _2341 = _2202 + 8u;
    float _2354 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2202].w)) * _1066) * 0.949999988079071044921875);
    float _2355 = _2354 * _2354;
    float _2356 = cbLight._m0[_2202].x + _1016;
    float _2357 = cbLight._m0[_2202].y + _1017;
    float _2358 = cbLight._m0[_2202].z + _1018;
    float _2362 = inversesqrt(dot(vec3(_2356, _2357, _2358), vec3(_2356, _2357, _2358)));
    float _2363 = _2362 * _2356;
    float _2364 = _2362 * _2357;
    float _2365 = _2362 * _2358;
    float _2366 = dot(vec3(_956, _957, _958), vec3(cbLight._m0[_2202].xyz));
    float _4544 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2369 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _4555 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
    float _2370 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
    float _2371 = dot(vec3(_956, _957, _958), vec3(_2363, _2364, _2365));
    float _4566 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    float _2374 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
    float _2375 = dot(vec3(cbLight._m0[_2202].xyz), vec3(_2363, _2364, _2365));
    float _4577 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
    float _2379 = _2355 * _2355;
    float _2383 = ((_2374 * _2374) * (_2379 + (-1.0))) + 1.0;
    float _2391 = exp2(log2(1.0 - (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) * 5.0);
    float _2392 = 0.959999978542327880859375 - _1133;
    float _2394 = 0.959999978542327880859375 - _1134;
    float _2395 = 0.959999978542327880859375 - _1135;
    float _2402 = 1.0 - _2355;
    float _2413 = (0.5 / (((_2370 * ((_2369 * _2402) + _2355)) + 9.9999999392252902907785028219223e-09) + (((_2370 * _2402) + _2355) * _2369))) * _2369;
    float _4588 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2415 = (isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_2379 / ((_2383 * _2383) * 3.141590118408203125));
    uint _2429 = _2202 + 9u;
    float _2440 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2242].w)) * _1066) * 0.949999988079071044921875);
    float _2441 = _2440 * _2440;
    float _2442 = cbLight._m0[_2242].x + _1016;
    float _2443 = cbLight._m0[_2242].y + _1017;
    float _2444 = cbLight._m0[_2242].z + _1018;
    float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
    float _2449 = _2448 * _2442;
    float _2450 = _2448 * _2443;
    float _2451 = _2448 * _2444;
    float _2452 = dot(vec3(_956, _957, _958), vec3(cbLight._m0[_2242].xyz));
    float _4599 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
    float _2455 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
    float _2456 = dot(vec3(_956, _957, _958), vec3(_2449, _2450, _2451));
    float _4610 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
    float _2459 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
    float _2460 = dot(vec3(cbLight._m0[_2242].xyz), vec3(_2449, _2450, _2451));
    float _4621 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2464 = _2441 * _2441;
    float _2468 = ((_2459 * _2459) * (_2464 + (-1.0))) + 1.0;
    float _2475 = exp2(log2(1.0 - (isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0)))) * 5.0);
    float _2482 = 1.0 - _2441;
    float _2492 = (0.5 / (((_2370 * ((_2455 * _2482) + _2441)) + 9.9999999392252902907785028219223e-09) + (((_2370 * _2482) + _2441) * _2455))) * _2455;
    float _4632 = isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0));
    float _2494 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2464 / ((_2468 * _2468) * 3.141590118408203125));
    float _2504 = (((((_2475 * _2392) + _1136) * cbLight._m0[_2429].x) * _2494) * _2225) + ((((cbLight._m0[_2341].x * _2194) * ((_2391 * _2392) + _1136)) * _2415) * _2238);
    float _2505 = (((((_2475 * _2394) + _1138) * cbLight._m0[_2429].y) * _2494) * _2225) + ((((cbLight._m0[_2341].y * _2195) * ((_2391 * _2394) + _1138)) * _2415) * _2238);
    float _2506 = (((((_2475 * _2395) + _1139) * cbLight._m0[_2429].z) * _2494) * _2225) + ((((cbLight._m0[_2341].z * _2196) * ((_2391 * _2395) + _1139)) * _2415) * _2238);
    float _2568;
    float _2570;
    float _2572;
    if (_2278)
    {
        _2568 = _2504;
        _2570 = _2505;
        _2572 = _2506;
    }
    else
    {
        uint _2574 = _2202 + 2u;
        uint _2578 = _2202 + 10u;
        float _2592 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2574].w)) * _1066) * 0.949999988079071044921875);
        float _2593 = _2592 * _2592;
        float _2594 = cbLight._m0[_2574].x + _1016;
        float _2595 = cbLight._m0[_2574].y + _1017;
        float _2596 = cbLight._m0[_2574].z + _1018;
        float _2600 = inversesqrt(dot(vec3(_2594, _2595, _2596), vec3(_2594, _2595, _2596)));
        float _2601 = _2600 * _2594;
        float _2602 = _2600 * _2595;
        float _2603 = _2600 * _2596;
        float _2604 = dot(vec3(_956, _957, _958), vec3(cbLight._m0[_2574].xyz));
        float _4643 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2608 = dot(vec3(_956, _957, _958), vec3(_2601, _2602, _2603));
        float _4654 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2611 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2612 = dot(vec3(cbLight._m0[_2574].xyz), vec3(_2601, _2602, _2603));
        float _4665 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
        float _2616 = _2593 * _2593;
        float _2620 = ((_2611 * _2611) * (_2616 + (-1.0))) + 1.0;
        float _2627 = exp2(log2(1.0 - (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) * 5.0);
        float _2634 = 1.0 - _2593;
        float _2644 = (0.5 / (((_2370 * ((_2607 * _2634) + _2593)) + 9.9999999392252902907785028219223e-09) + (((_2370 * _2634) + _2593) * _2607))) * _2607;
        float _4676 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2646 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * (_2616 / ((_2620 * _2620) * 3.141590118408203125));
        float _2647 = isnan(1.0) ? _2217 : (isnan(_2217) ? 1.0 : min(_2217, 1.0));
        _2568 = (((((_2627 * _2392) + _1136) * cbLight._m0[_2578].x) * _2646) * _2647) + _2504;
        _2570 = (((((_2627 * _2394) + _1138) * cbLight._m0[_2578].y) * _2646) * _2647) + _2505;
        _2572 = (((((_2627 * _2395) + _1139) * cbLight._m0[_2578].z) * _2646) * _2647) + _2506;
    }
    float _2682;
    float _2684;
    float _2686;
    if (_2296)
    {
        _2682 = _2568;
        _2684 = _2570;
        _2686 = _2572;
    }
    else
    {
        uint _2693 = _2202 + 3u;
        uint _2697 = _2202 + 11u;
        float _2711 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2693].w)) * _1066) * 0.949999988079071044921875);
        float _2712 = _2711 * _2711;
        float _2713 = cbLight._m0[_2693].x + _1016;
        float _2714 = cbLight._m0[_2693].y + _1017;
        float _2715 = cbLight._m0[_2693].z + _1018;
        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
        float _2720 = _2719 * _2713;
        float _2721 = _2719 * _2714;
        float _2722 = _2719 * _2715;
        float _2723 = dot(vec3(_956, _957, _958), vec3(cbLight._m0[_2693].xyz));
        float _4692 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
        float _2726 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
        float _2727 = dot(vec3(_956, _957, _958), vec3(_2720, _2721, _2722));
        float _4703 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
        float _2730 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2731 = dot(vec3(cbLight._m0[_2693].xyz), vec3(_2720, _2721, _2722));
        float _4714 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2735 = _2712 * _2712;
        float _2739 = ((_2730 * _2730) * (_2735 + (-1.0))) + 1.0;
        float _2746 = exp2(log2(1.0 - (isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0)))) * 5.0);
        float _2753 = 1.0 - _2712;
        float _2763 = (0.5 / (((_2370 * ((_2726 * _2753) + _2712)) + 9.9999999392252902907785028219223e-09) + (((_2370 * _2753) + _2712) * _2726))) * _2726;
        float _4725 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2765 = (isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0))) * (_2735 / ((_2739 * _2739) * 3.141590118408203125));
        float _2766 = isnan(1.0) ? _2218 : (isnan(_2218) ? 1.0 : min(_2218, 1.0));
        _2682 = (((((_2746 * _2392) + _1136) * cbLight._m0[_2697].x) * _2765) * _2766) + _2568;
        _2684 = (((((_2746 * _2394) + _1138) * cbLight._m0[_2697].y) * _2765) * _2766) + _2570;
        _2686 = (((((_2746 * _2395) + _1139) * cbLight._m0[_2697].z) * _2765) * _2766) + _2572;
    }
    float _2901;
    float _2903;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_2200.y == 0u)
    {
        float _2841 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2842 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2841;
        float _2843 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2841;
        float _2844 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2841;
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.x;
        uint _2868 = uint((float(_2856.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1025) / _2857))) + floor(float(uint(cbSceneParam._m0[85u].x * _1024) / _2857)));
        float _2878 = (log2(_2844 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2879 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        uint _2882 = uint(isnan(14.0) ? _2879 : (isnan(_2879) ? 14.0 : min(_2879, 14.0)));
        uvec4 _2887 = texelFetch(g_lightClusterGridBuffer, int(((_2882 << 2u) + (_2868 << 6u)) >> 2u));
        uint _2888 = _2887.x;
        uint _2889 = _2856.z;
        float _3018;
        float _3020;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        if (((((1u << ((_2889 >> 4u) & 15u)) + 4294967295u) & _2888) == 0u) || ((_2889 & 240u) == 0u))
        {
            _3018 = 0.0;
            _3020 = 0.0;
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
        }
        else
        {
            float _3019;
            float _3021;
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            float _3173 = 0.0;
            float _3174 = 0.0;
            float _3175 = 0.0;
            uint _3176 = 0u;
            uint _3185;
            bool _3186;
            for (;;)
            {
                _3185 = texelFetch(g_lightClassification, int((((_2882 << 5u) + (_2868 << 9u)) + (_3176 << 2u)) >> 2u)).x;
                _3186 = _3185 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3186)
                {
                    frontier_phi_61_pred = _3170;
                    frontier_phi_61_pred_1 = _3175;
                    frontier_phi_61_pred_2 = _3174;
                    frontier_phi_61_pred_3 = _3173;
                    frontier_phi_61_pred_4 = _3172;
                    frontier_phi_61_pred_5 = _3171;
                }
                else
                {
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    uint _3300;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3173;
                    _3298 = _3174;
                    _3299 = _3175;
                    _3300 = _3185;
                    float _3226;
                    float _3227;
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    for (;;)
                    {
                        uint _3304 = uint(findLSB(_3300)) + (_3176 << 5u);
                        uint _3301 = (_3300 + 4294967295u) & _3300;
                        uint _3306 = _3304 * 48u;
                        vec4 _3320 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3306)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3306 + 3u)).x));
                        uint _3326 = (_3304 * 48u) + 4u;
                        vec4 _3339 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3326)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3326 + 3u)).x));
                        uint _3345 = (_3304 * 48u) + 8u;
                        vec3 _3356 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3345)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3345 + 2u)).x));
                        float _3360 = _3320.x - _2842;
                        float _3361 = _3320.y - _2843;
                        float _3362 = _3320.z - _2844;
                        float _3363 = dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362));
                        float _3366 = inversesqrt(_3363);
                        float _3367 = _3366 * _3360;
                        float _3368 = _3366 * _3361;
                        float _3369 = _3366 * _3362;
                        float _3370 = dot(vec3(_1047, _1050, _1053), vec3(_3367, _3368, _3369));
                        float _3375 = 1.0 - (_3363 * _3320.w);
                        float _4751 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                        float _3376 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3377 = sqrt(_3363) * _3339.w;
                        float _3380 = 1.39999997615814208984375 / (_3377 + 1.39999997615814208984375);
                        float _3381 = _3380 * _3380;
                        float _3384 = ((1.0 - _3381) * _3370) + _3381;
                        float _3387 = _3377 * _3377;
                        float _3391 = ((isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))) * _3376) / ((_3387 * 0.699999988079071044921875) + 1.0);
                        float _3395 = (-0.0) - _2842;
                        float _3396 = (-0.0) - _2843;
                        float _3397 = (-0.0) - _2844;
                        float _3401 = inversesqrt(dot(vec3(_3395, _3396, _3397), vec3(_3395, _3396, _3397)));
                        float _3402 = _3401 * _3395;
                        float _3403 = _3401 * _3396;
                        float _3404 = _3401 * _3397;
                        float _3412 = exp2(log2(1.0 / ((_3387 * 3.5) + 5.0)) * 0.25);
                        float _3413 = 1.0 - _1167;
                        float _3420 = sqrt(1.0 - ((1.0 - (_3413 * _3413)) * (1.0 - (_3412 * _3412))));
                        float _3421 = _3420 * _3420;
                        float _3422 = _3421 * _3421;
                        float _3423 = _3402 + _3367;
                        float _3424 = _3403 + _3368;
                        float _3425 = _3404 + _3369;
                        float _3429 = inversesqrt(dot(vec3(_3423, _3424, _3425), vec3(_3423, _3424, _3425)));
                        float _3433 = dot(vec3(_1047, _1050, _1053), vec3(_3402, _3403, _3404));
                        float _4767 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3436 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3437 = dot(vec3(_1047, _1050, _1053), vec3(_3429 * _3423, _3429 * _3424, _3429 * _3425));
                        float _4778 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3440 = isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0));
                        float _3444 = ((_3440 * _3440) * (_3422 + (-1.0))) + 1.0;
                        float _3445 = _3380 * _3421;
                        float _3446 = _3445 * _3445;
                        float _3449 = ((1.0 - _3446) * _3370) + _3446;
                        float _4789 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                        float _3450 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                        float _3451 = 1.0 - _3421;
                        float _3461 = (0.5 / (((_3450 * ((_3436 * _3451) + _3421)) + 9.9999999392252902907785028219223e-09) + (((_3450 * _3451) + _3421) * _3436))) * _3450;
                        float _4800 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3472 = (((_3422 * 3.1415927410125732421875) * (isnan(1.0) ? _4800 : (isnan(_4800) ? 1.0 : min(_4800, 1.0)))) / ((_3444 * _3444) * ((_3387 * 2.1991131305694580078125) + 3.141590118408203125))) * _3376;
                        _3229 = (_3391 * _3339.x) + _3297;
                        _3230 = (_3391 * _3339.y) + _3298;
                        _3231 = (_3391 * _3339.z) + _3299;
                        _3226 = (_3472 * _3356.x) + _3294;
                        _3227 = (_3472 * _3356.y) + _3295;
                        _3228 = (_3472 * _3356.z) + _3296;
                        if (_3301 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3229;
                            _3298 = _3230;
                            _3299 = _3231;
                            _3300 = _3301;
                        }
                    }
                    frontier_phi_61_pred = _3226;
                    frontier_phi_61_pred_1 = _3231;
                    frontier_phi_61_pred_2 = _3230;
                    frontier_phi_61_pred_3 = _3229;
                    frontier_phi_61_pred_4 = _3228;
                    frontier_phi_61_pred_5 = _3227;
                }
                _3019 = frontier_phi_61_pred;
                _3029 = frontier_phi_61_pred_1;
                _3027 = frontier_phi_61_pred_2;
                _3025 = frontier_phi_61_pred_3;
                _3023 = frontier_phi_61_pred_4;
                _3021 = frontier_phi_61_pred_5;
                uint _3177 = _3176 + 1u;
                if (_3177 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3170 = _3019;
                    _3171 = _3021;
                    _3172 = _3023;
                    _3173 = _3025;
                    _3174 = _3027;
                    _3175 = _3029;
                    _3176 = _3177;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3018 = _3019;
            _3020 = _3021;
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
        }
        uvec4 _3032 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3033 = _3032.z;
        uint _3035 = (_3033 >> 8u) & 15u;
        float _3138;
        float _3140;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        if (((4294967295u << _3035) & _2888) == 0u)
        {
            _3138 = _3018;
            _3140 = _3020;
            _3142 = _3022;
            _3144 = _3024;
            _3146 = _3026;
            _3148 = _3028;
        }
        else
        {
            float _3163 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
            float _3164 = _3163 * _2842;
            float _3165 = _3163 * _2843;
            float _3166 = _3163 * _2844;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3035 < ((_3033 >> 12u) & 15u))
            {
                float _3139;
                float _3141;
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3277 = _3018;
                float _3278 = _3020;
                float _3279 = _3022;
                float _3280 = _3024;
                float _3281 = _3026;
                float _3282 = _3028;
                uint _3283 = _3035;
                uint _3292;
                bool _3293;
                for (;;)
                {
                    _3292 = texelFetch(g_lightClassification, int((((_2882 << 5u) + (_2868 << 9u)) + (_3283 << 2u)) >> 2u)).x;
                    _3293 = _3292 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3293)
                    {
                        frontier_phi_67_pred = _3280;
                        frontier_phi_67_pred_1 = _3281;
                        frontier_phi_67_pred_2 = _3282;
                        frontier_phi_67_pred_3 = _3279;
                        frontier_phi_67_pred_4 = _3278;
                        frontier_phi_67_pred_5 = _3277;
                    }
                    else
                    {
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3490 = _3277;
                        float _3491 = _3278;
                        float _3492 = _3279;
                        float _3493 = _3280;
                        float _3494 = _3281;
                        float _3495 = _3282;
                        uint _3496 = _3292;
                        uint _3497;
                        vec4 _3522;
                        float _3523;
                        vec4 _3538;
                        vec3 _3550;
                        vec4 _3566;
                        vec4 _3581;
                        float _3627;
                        bool _3628;
                        for (;;)
                        {
                            uint _3507 = ((_3283 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3496));
                            _3497 = (_3496 + 4294967295u) & _3496;
                            uint _3509 = _3507 * 40u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3523 = _3522.w;
                            uint _3525 = (_3507 * 40u) + 4u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3507 * 40u) + 8u;
                            _3550 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x));
                            uint _3553 = (_3507 * 40u) + 16u;
                            _3566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3553 + 3u)).x));
                            uint _3568 = (_3507 * 40u) + 20u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            uint _3583 = (_3507 * 40u) + 24u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3602 = (_3507 * 40u) + 28u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            _3627 = fma(_2844, _3615.z, fma(_2843, _3615.y, _3615.x * _2842)) + _3615.w;
                            _3628 = !((fma(_2844, _3596.z, fma(_2843, _3596.y, _3596.x * _2842)) + _3596.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3628)
                            {
                                float _3655 = _3522.x - _2842;
                                float _3656 = _3522.y - _2843;
                                float _3657 = _3522.z - _2844;
                                float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                                float _3661 = inversesqrt(_3658);
                                float _3662 = _3661 * _3655;
                                float _3663 = _3661 * _3656;
                                float _3664 = _3661 * _3657;
                                float _3668 = 1.0 - (_3658 / (_3523 * _3523));
                                float _4811 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3673 = sqrt(_3658) * _3538.w;
                                float _3675 = 1.39999997615814208984375 / (_3673 + 1.39999997615814208984375);
                                float _3676 = _3675 * _3675;
                                float _3679 = ((1.0 - _3676) * dot(vec3(_3662, _3663, _3664), vec3(_1047, _1050, _1053))) + _3676;
                                float _3682 = _3673 * _3673;
                                float _3686 = (fma(_2844, _3566.z, fma(_2843, _3566.y, _3566.x * _2842)) + _3566.w) / _3627;
                                float _3687 = (fma(_2844, _3581.z, fma(_2843, _3581.y, _3581.x * _2842)) + _3581.w) / _3627;
                                float _3691 = 1.0 - dot(vec2(_3686, _3687), vec2(_3686, _3687));
                                float _4827 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3693 = _3692 * (((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3669) / ((_3682 * 0.699999988079071044921875) + 1.0));
                                float _3705 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                                float _3706 = 1.0 - _1167;
                                float _3713 = sqrt(1.0 - ((1.0 - (_3706 * _3706)) * (1.0 - (_3705 * _3705))));
                                float _3714 = _3713 * _3713;
                                float _3715 = _3714 * _3714;
                                float _3716 = _3662 - _3164;
                                float _3717 = _3663 - _3165;
                                float _3718 = _3664 - _3166;
                                float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                                float _3726 = dot(vec3(_1047, _1050, _1053), vec3((-0.0) - _3164, (-0.0) - _3165, (-0.0) - _3166));
                                float _4838 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3730 = dot(vec3(_1047, _1050, _1053), vec3(_3722 * _3716, _3722 * _3717, _3722 * _3718));
                                float _4849 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0));
                                float _3737 = ((_3733 * _3733) * (_3715 + (-1.0))) + 1.0;
                                float _3738 = _3675 * _3714;
                                float _3739 = _3738 * _3738;
                                float _3745 = ((1.0 - _3739) * dot(vec3(_1047, _1050, _1053), vec3(_3662, _3663, _3664))) + _3739;
                                float _4860 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4860 : (isnan(_4860) ? 1.0 : min(_4860, 1.0));
                                float _3747 = 1.0 - _3714;
                                float _3757 = (0.5 / (((_3746 * ((_3729 * _3747) + _3714)) + 9.9999999392252902907785028219223e-09) + (((_3746 * _3747) + _3714) * _3729))) * _3746;
                                float _4871 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3767 = (_3692 * _3669) * (((_3715 * 3.1415927410125732421875) * (isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0)))) / ((_3737 * _3737) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3767 * _3550.x;
                                frontier_phi_73_pred_1 = _3767 * _3550.y;
                                frontier_phi_73_pred_2 = _3693 * _3538.z;
                                frontier_phi_73_pred_3 = _3693 * _3538.y;
                                frontier_phi_73_pred_4 = _3693 * _3538.x;
                                frontier_phi_73_pred_5 = _3767 * _3550.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_73_pred;
                            _3772 = frontier_phi_73_pred_1;
                            _3776 = frontier_phi_73_pred_2;
                            _3775 = frontier_phi_73_pred_3;
                            _3774 = frontier_phi_73_pred_4;
                            _3773 = frontier_phi_73_pred_5;
                            _3480 = _3774 + _3493;
                            _3481 = _3775 + _3494;
                            _3482 = _3776 + _3495;
                            _3477 = _3771 + _3490;
                            _3478 = _3772 + _3491;
                            _3479 = _3773 + _3492;
                            if (_3497 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3497;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3480;
                        frontier_phi_67_pred_1 = _3481;
                        frontier_phi_67_pred_2 = _3482;
                        frontier_phi_67_pred_3 = _3479;
                        frontier_phi_67_pred_4 = _3478;
                        frontier_phi_67_pred_5 = _3477;
                    }
                    _3145 = frontier_phi_67_pred;
                    _3147 = frontier_phi_67_pred_1;
                    _3149 = frontier_phi_67_pred_2;
                    _3143 = frontier_phi_67_pred_3;
                    _3141 = frontier_phi_67_pred_4;
                    _3139 = frontier_phi_67_pred_5;
                    uint _3284 = _3283 + 1u;
                    if (_3284 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3277 = _3139;
                        _3278 = _3141;
                        _3279 = _3143;
                        _3280 = _3145;
                        _3281 = _3147;
                        _3282 = _3149;
                        _3283 = _3284;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3147;
                frontier_phi_55_56_ladder_1 = _3149;
                frontier_phi_55_56_ladder_2 = _3145;
                frontier_phi_55_56_ladder_3 = _3143;
                frontier_phi_55_56_ladder_4 = _3141;
                frontier_phi_55_56_ladder_5 = _3139;
            }
            else
            {
                frontier_phi_55_56_ladder = _3026;
                frontier_phi_55_56_ladder_1 = _3028;
                frontier_phi_55_56_ladder_2 = _3024;
                frontier_phi_55_56_ladder_3 = _3022;
                frontier_phi_55_56_ladder_4 = _3020;
                frontier_phi_55_56_ladder_5 = _3018;
            }
            _3138 = frontier_phi_55_56_ladder_5;
            _3140 = frontier_phi_55_56_ladder_4;
            _3142 = frontier_phi_55_56_ladder_3;
            _3144 = frontier_phi_55_56_ladder_2;
            _3146 = frontier_phi_55_56_ladder;
            _3148 = frontier_phi_55_56_ladder_1;
        }
        float _3153 = isnan(1.0) ? _1151 : (isnan(_1151) ? 1.0 : min(_1151, 1.0));
        _2901 = (_3153 * _3144) + _2334;
        _2903 = (_3153 * _3146) + _2336;
        _2905 = (_3153 * _3148) + _2338;
        _2907 = ((_3138 * _1136) * _3153) + _2682;
        _2909 = ((_3140 * _1138) * _3153) + _2684;
        _2911 = ((_3142 * _1139) * _3153) + _2686;
    }
    else
    {
        _2901 = _2334;
        _2903 = _2336;
        _2905 = _2338;
        _2907 = _2682;
        _2909 = _2684;
        _2911 = _2686;
    }
    uint _2917 = _1080 + uint(cbMatDynParam._m0[0u].w);
    float _2923 = (((((cbMtdParam._m0[22u].x * _860.x) * cbMtdParam._m0[32u].x) * _881) + _632) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2917].x;
    float _2924 = (((((cbMtdParam._m0[22u].y * _860.y) * cbMtdParam._m0[32u].x) * _881) + _633) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2917].y;
    float _2925 = (((((cbMtdParam._m0[22u].z * _860.z) * cbMtdParam._m0[32u].x) * _881) + _634) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2917].z;
    float _4887 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _4898 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
    float _4909 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _2942 = (((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2901 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1151))) + ((_2907 + ((isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0))) * _1948)) * cbPerFrame._m0[3u].x)) + _2923;
    float _2944 = (_2924 + ((_2909 + ((isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0))) * _1948)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4898 : (isnan(_4898) ? 1.0 : min(_4898, 1.0))) * (_2903 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1151)));
    float _2946 = (_2925 + ((_2911 + ((isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0))) * _1948)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0))) * (_2905 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1151)));
    float _4935 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2959 = isnan(1.0) ? _4935 : (isnan(_4935) ? 1.0 : min(_4935, 1.0));
    uint _2960 = _1079 + 6u;
    float _2968 = _1024 / cbSceneParam._m0[86u].x;
    float _2969 = _1025 / cbSceneParam._m0[86u].y;
    vec4 _2983 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2968, _2969, (log2((isnan(cbSceneParam._m0[77u].w) ? _979 : (isnan(_979) ? cbSceneParam._m0[77u].w : min(_979, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2985 = _2983.x;
    float _2986 = _2983.y;
    float _2987 = _2983.z;
    float _2988 = _2983.w;
    float _3080;
    float _3082;
    float _3084;
    float _3086;
    if (_979 > cbSceneParam._m0[78u].w)
    {
        float _3043 = isnan(_979) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _979 : min(cbSceneParam._m0[80u].w, _979));
        float _3044 = _3043 / _979;
        float _3055 = _3044 * _1009;
        float _3056 = _1010 * _3044;
        float _3057 = (-0.0) - _3056;
        float _3058 = _3044 * _1011;
        float _3060 = (cbSceneParam._m0[77u].w * _3057) / _3043;
        float _3061 = _3060 + cbSceneParam._m0[79u].w;
        float _3062 = cbSceneParam._m0[79u].w - _3056;
        float _3068 = sqrt(((_3055 * _3055) + (_3056 * _3056)) + (_3058 * _3058));
        float _3071 = (1.0 - (cbSceneParam._m0[77u].w / _3043)) * _3068;
        float _3076 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3078 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3239;
        if (abs((_3057 - _3060) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3239 = ((((_3061 > 0.0) ? exp2(_3076 * _3061) : (2.0 - exp2(_3078 * _3061))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3071;
        }
        else
        {
            float _3199 = 1.0 / cbSceneParam._m0[80u].x;
            float _3200 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : max(_3061, _3062));
            float _3201 = isnan(_3062) ? _3061 : (isnan(_3061) ? _3062 : min(_3061, _3062));
            float _3210 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : min(_3200, 0.0));
            float _3211 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : min(_3201, 0.0));
            _3239 = ((abs(_3068 / _3057) * cbSceneParam._m0[80u].y) * ((((_3210 - _3211) * 2.0) - ((exp2(_3076 * (isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0)))) - exp2(_3076 * (isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))))) * _3199)) - ((exp2(_3078 * _3210) - exp2(_3078 * _3211)) * _3199))) + (_3071 * cbSceneParam._m0[80u].z);
        }
        vec4 _3241 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2968, _2969, 1.0), 0.0);
        float _3250 = exp2((_3239 * (-1.44269502162933349609375)) * (1.0 - _3241.w));
        float _3251 = log2(_3250);
        float _3267 = log2(_2988);
        _3080 = (exp2(_3267 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].x)) * _3241.x) / cbSceneParam._m0[78u].x)) + _2985;
        _3082 = (exp2(_3267 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].y)) * _3241.y) / cbSceneParam._m0[78u].y)) + _2986;
        _3084 = (exp2(_3267 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3251 * cbSceneParam._m0[78u].z)) * _3241.z) / cbSceneParam._m0[78u].z)) + _2987;
        _3086 = _3250 * _2988;
    }
    else
    {
        _3080 = _2985;
        _3082 = _2986;
        _3084 = _2987;
        _3086 = _2988;
    }
    float _3097 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3098 = _3097 == 3.0;
    float _3099 = log2(_3086);
    float _3103 = exp2(_3099 * cbSceneParam._m0[78u].x);
    float _3104 = exp2(_3099 * cbSceneParam._m0[78u].y);
    float _3105 = exp2(_3099 * cbSceneParam._m0[78u].z);
    float _3106 = _3103 * (isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0)));
    float _3107 = _3104 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0)));
    float _3108 = _3105 * (isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0)));
    float _3117 = (_3097 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3117 * (_3098 ? _3106 : (_3106 + (cbSceneParam._m0[72u].w * _3080)));
    SV_Target.y = _3117 * (_3098 ? _3107 : (_3107 + (cbSceneParam._m0[72u].w * _3082)));
    SV_Target.z = _3117 * (_3098 ? _3108 : (_3108 + (cbSceneParam._m0[72u].w * _3084)));
    SV_Target.w = cbInstanceData._m0[_2960].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2923) * _2959) * _3103) * _3117;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2924) * _2959) * _3104) * _3117;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2925) * _2959) * _3105) * _3117;
    SV_Target_1.w = cbInstanceData._m0[_2960].w;
}


