#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1526;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _263 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _276 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_263 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _281 = _276.z;
    float _282 = _276.w;
    vec4 _304 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _263) + cbTextureTilingScale._m0[11u].w));
    float _309 = _304.w;
    float _321 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _281) * exp2(log2(1.0 - _309) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _322 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _323 = isnan(1.0) ? _322 : (isnan(_322) ? 1.0 : min(_322, 1.0));
    vec4 _337 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _263) + cbTextureTilingScale._m0[2u].w));
    float _347 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _355 = (_347 - (((_337.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _347))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4177 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _358 = _323 - (_356 * _323);
    float _359 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    vec4 _373 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _376 = _373.y;
    float _377 = _376 * (isnan(1.0) ? _359 : (isnan(_359) ? 1.0 : min(_359, 1.0)));
    float _386 = exp2(log2(cbMtdParam._m0[32u].w * _309) * cbMtdParam._m0[31u].z);
    float _388 = _386 - (_356 * _386);
    float _389 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _390 = isnan(1.0) ? _389 : (isnan(_389) ? 1.0 : min(_389, 1.0));
    float _401 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_282) * 4.5));
    float _410 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _281) * _401)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _411 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _412 = isnan(1.0) ? _411 : (isnan(_411) ? 1.0 : min(_411, 1.0));
    float _423 = exp2(log2((1.0 - (((_401 * _401) * _281) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _424 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _428 = (((isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0))) - _282) * _376) + _282;
    vec4 _440 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _263) + cbTextureTilingScale._m0[5u].w));
    float _453 = (_373.x + (-0.02500000037252902984619140625)) * 8.0;
    float _455 = roundEven(_453);
    float _456 = cbMtdParam._m0[10u].x * _440.x;
    float _457 = cbMtdParam._m0[10u].y * _440.y;
    float _458 = cbMtdParam._m0[10u].z * _440.z;
    vec4 _470 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _263) + cbTextureTilingScale._m0[1u].w));
    float _481 = cbMtdParam._m0[9u].x * _470.x;
    float _482 = cbMtdParam._m0[9u].y * _470.y;
    float _483 = cbMtdParam._m0[9u].z * _470.z;
    float _490 = ((_481 - _456) * _428) + _456;
    float _491 = ((_482 - _457) * _428) + _457;
    float _492 = ((_483 - _458) * _428) + _458;
    vec4 _504 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _263) + cbTextureTilingScale._m0[6u].w));
    float _524 = (((cbMtdParam._m0[20u].x * _504.x) - _490) * _412) + _490;
    float _525 = (((cbMtdParam._m0[20u].y * _504.y) - _491) * _412) + _491;
    float _526 = (((cbMtdParam._m0[20u].z * _504.z) - _492) * _412) + _492;
    vec4 _538 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _263) + cbTextureTilingScale._m0[9u].w));
    float _558 = (((cbMtdParam._m0[29u].x * _538.x) - _524) * _390) + _524;
    float _559 = (((cbMtdParam._m0[29u].y * _538.y) - _525) * _390) + _525;
    float _560 = (((cbMtdParam._m0[29u].z * _538.z) - _526) * _390) + _526;
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[30u].x;
    _201[0u] = cbMtdParam._m0[30u].y;
    _202[0u] = cbMtdParam._m0[30u].z;
    _200[1u] = cbMtdParam._m0[28u].x;
    _201[1u] = cbMtdParam._m0[28u].y;
    _202[1u] = cbMtdParam._m0[28u].z;
    _200[2u] = cbMtdParam._m0[27u].x;
    _201[2u] = cbMtdParam._m0[27u].y;
    _202[2u] = cbMtdParam._m0[27u].z;
    _200[3u] = cbMtdParam._m0[26u].x;
    _201[3u] = cbMtdParam._m0[26u].y;
    _202[3u] = cbMtdParam._m0[26u].z;
    _200[4u] = cbMtdParam._m0[25u].x;
    _201[4u] = cbMtdParam._m0[25u].y;
    _202[4u] = cbMtdParam._m0[25u].z;
    _200[5u] = cbMtdParam._m0[24u].x;
    _201[5u] = cbMtdParam._m0[24u].y;
    _202[5u] = cbMtdParam._m0[24u].z;
    float _629 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    uint _632 = uint(int(isnan(5.0) ? _629 : (isnan(_629) ? 5.0 : min(_629, 5.0))));
    float _639 = _200[_632] * _376;
    float _640 = _201[_632] * _376;
    float _641 = _202[_632] * _376;
    float _642 = _639 + ((_304.x * 4.5) * (((_481 - _558) * _377) + _558));
    float _643 = _640 + ((_304.y * 4.5) * (((_482 - _559) * _377) + _559));
    float _644 = _641 + ((_304.z * 4.5) * (((_483 - _560) * _377) + _560));
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[37u].w;
    _196[0u] = cbMtdParam._m0[38u].x;
    _195[1u] = cbMtdParam._m0[39u].w;
    _196[1u] = cbMtdParam._m0[40u].x;
    _195[2u] = cbMtdParam._m0[40u].y;
    _196[2u] = cbMtdParam._m0[40u].z;
    _195[3u] = cbMtdParam._m0[40u].w;
    _196[3u] = cbMtdParam._m0[41u].x;
    _195[4u] = cbMtdParam._m0[41u].y;
    _196[4u] = cbMtdParam._m0[41u].z;
    float _677 = roundEven(5.0 - _453);
    float _678 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _679 = isnan(4.0) ? _678 : (isnan(_678) ? 4.0 : min(_678, 4.0));
    float _681 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    uint _683 = uint(int(isnan(4.0) ? _681 : (isnan(_681) ? 4.0 : min(_681, 4.0))));
    float _695 = ((cbMtdParam._m0[42u].z - _196[_683]) * _428) + _196[_683];
    float _703 = ((cbMtdParam._m0[43u].x - _695) * _412) + _695;
    float _708 = ((cbMtdParam._m0[43u].z - _703) * _390) + _703;
    float _713 = ((cbMtdParam._m0[39u].z - _708) * _377) + _708;
    vec4 _727 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _263) + cbTextureTilingScale._m0[7u].w));
    float _729 = _727.x;
    float _730 = _727.y;
    float _732 = _727.z + _195[_683];
    vec4 _744 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _263) + cbTextureTilingScale._m0[10u].w));
    float _752 = (((cbMtdParam._m0[42u].y - _732) + _744.z) * _428) + _732;
    vec4 _765 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _263) + cbTextureTilingScale._m0[12u].w));
    float _773 = (((cbMtdParam._m0[42u].w - _752) + _765.z) * _412) + _752;
    float _779 = ((((_281 * 2.0) * _773) - _773) * cbMtdParam._m0[34u].x) + _773;
    vec4 _792 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _263) + cbTextureTilingScale._m0[13u].w));
    float _800 = (((_792.z + cbMtdParam._m0[43u].y) - _779) * _390) + _779;
    float _804 = (((cbMtdParam._m0[39u].y + _337.z) - _800) * _377) + _800;
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _866 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_835 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_839 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _881 = (-0.0) - ((_839 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _885 = (_839 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _886 = isnan(_885) ? _881 : (isnan(_881) ? _885 : min(_881, _885));
    float _4263 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _887 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _915 = ((_744.x - _729) * _428) + _729;
    float _916 = ((_744.y - _730) * _428) + _730;
    float _921 = ((_765.x - _915) * _412) + _915;
    float _922 = ((_765.y - _916) * _412) + _916;
    float _927 = ((_792.x - _921) * _390) + _921;
    float _928 = ((_792.y - _922) * _390) + _922;
    float _937 = ((((_337.x - _927) * _377) + _927) * 2.0) + (-1.0);
    float _938 = ((((_337.y - _928) * _377) + _928) * 2.0) + (-1.0);
    float _939 = dot(vec2(_937, _938), vec2(_937, _938));
    float _4274 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _944 = sqrt(1.0 - (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))));
    float _947 = (cbMtdParam._m0[34u].z * ((_276.x * 2.0) + (-1.0))) + _937;
    float _948 = (cbMtdParam._m0[34u].z * ((_276.y * 2.0) + (-1.0))) + _938;
    float _951 = fma(_944, _242 * NORMAL.x, fma(_948, _249 * TANGENT.x, (_235 * _227) * _947));
    float _954 = fma(_944, _242 * NORMAL.y, fma(_948, _249 * TANGENT.y, (_235 * _228) * _947));
    float _957 = fma(_944, _242 * NORMAL.z, fma(_948, _249 * TANGENT.z, (_235 * _229) * _947));
    float _961 = inversesqrt(dot(vec3(_951, _954, _957), vec3(_951, _954, _957)));
    float _962 = _961 * _951;
    float _963 = _961 * _954;
    float _964 = _961 * _957;
    float _4285 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _965 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4307 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4318 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _4329 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _969 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
    float _985 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (_835 / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (_839 / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    float _1030 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1031 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1033 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1035 = _1033.w;
    float _1053 = fma(_964, cbSceneParam._m0[5u].z, fma(_963, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _962));
    float _1056 = fma(_964, cbSceneParam._m0[6u].z, fma(_963, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _962));
    float _1059 = fma(_964, cbSceneParam._m0[7u].z, fma(_963, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _962));
    vec4 _1061 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1072 = (((_1061.y - _965) + (_1061.w * _965)) * cbMtdParam._m0[3u].x) + _965;
    uint _1085 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1086 = _1085 + 9u;
    uint _1087 = _1086 + uint(cbMatDynParam._m0[0u].w);
    float _1093 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0)))) * cbInstanceData._m0[_1087].x;
    float _1094 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) * cbInstanceData._m0[_1087].y;
    float _1095 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0)))) * cbInstanceData._m0[_1087].z;
    float _4340 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
    float _1096 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
    float _4351 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
    float _1097 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
    float _4362 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
    float _1098 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    vec4 _1099 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1104 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1115 = (((_1104.x - _969) + (_1104.w * _969)) * cbMtdParam._m0[3u].x) + _969;
    float _1128 = (cbMtdParam._m0[3u].x * (((_1096 * _1035) - _1096) + _1099.x)) + _1096;
    float _1129 = (cbMtdParam._m0[3u].x * (((_1097 * _1035) - _1097) + _1099.y)) + _1097;
    float _1130 = (cbMtdParam._m0[3u].x * (((_1098 * _1035) - _1098) + _1099.z)) + _1098;
    float _1131 = 1.0 - _1115;
    float _1132 = _1131 * _1128;
    float _1133 = _1131 * _1129;
    float _1134 = _1131 * _1130;
    float _1139 = (_1128 + (-0.039999999105930328369140625)) * _1115;
    float _1140 = (_1129 + (-0.039999999105930328369140625)) * _1115;
    float _1141 = (_1130 + (-0.039999999105930328369140625)) * _1115;
    float _1142 = _1139 + 0.039999999105930328369140625;
    float _1144 = _1140 + 0.039999999105930328369140625;
    float _1145 = _1141 + 0.039999999105930328369140625;
    vec4 _1154 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1030, cbSceneParam._m0[86u].y * _1031));
    float _1157 = _1154.x * TEXCOORD_5.w;
    float _1158 = dot(vec3(_962, _963, _964), vec3(_1022, _1023, _1024));
    float _1161 = _1158 * 2.0;
    float _1165 = (_1161 * _962) - _1022;
    float _1166 = (_1161 * _963) - _1023;
    float _1167 = (_1161 * _964) - _1024;
    float _1171 = abs(dot(vec3(_1022, _1023, _1024), vec3(_962, _963, _964)));
    float _4373 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
    float _1173 = sqrt(_1072);
    float _1184 = exp2((_1173 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1173 * 3.0));
    float _1190 = (1.0 - _1184) * ((_1173 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1191 = _1184 * _1173;
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1525;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1252 = fma(_1227, cbModelParam._m0[26u].z, fma(_1223, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1219));
        float _1256 = fma(_1227, cbModelParam._m0[27u].z, fma(_1223, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1219));
        float _1260 = fma(_1227, cbModelParam._m0[28u].z, fma(_1223, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1219));
        float _1284 = _1219 + _962;
        float _1285 = _1223 + _963;
        float _1286 = _1227 + _964;
        float _1296 = fma(_1286, cbModelParam._m0[26u].z, fma(_1285, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1284)) - _1252;
        float _1297 = fma(_1286, cbModelParam._m0[27u].z, fma(_1285, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1284)) - _1256;
        float _1298 = fma(_1286, cbModelParam._m0[28u].z, fma(_1285, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1284)) - _1260;
        float _1302 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
        float _1314 = ((_1302 * _1296) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1252 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1302 * _1297) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1256 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1316 = ((_1302 * _1298) / cbModelParam._m0[34u].z) + ((((((_1260 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1319 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1326 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1333 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        vec4 _1340 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1314, _1315, _1316), 0.0);
        float _1353 = exp2((_1319.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1319.x + (-0.5));
        float _1355 = _1353 * (_1319.y + (-0.5));
        float _1356 = _1353 * (_1319.z + (-0.5));
        float _1363 = exp2((_1326.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1326.x + (-0.5));
        float _1365 = _1363 * (_1326.y + (-0.5));
        float _1366 = _1363 * (_1326.z + (-0.5));
        float _1373 = exp2((_1333.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1333.x + (-0.5));
        float _1375 = _1373 * (_1333.y + (-0.5));
        float _1376 = _1373 * (_1333.z + (-0.5));
        float _1383 = exp2((_1340.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1340.x + (-0.5));
        float _1385 = _1383 * (_1340.y + (-0.5));
        float _1386 = _1383 * (_1340.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1407 = (dot(vec3(_962, _963, _964), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1417 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _4421 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1419 + 1.0))) + _1424) * _1387;
        float _1434 = _1355 * 0.5;
        float _1435 = _1365 * 0.5;
        float _1436 = _1375 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_962, _963, _964), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _4454 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1461 + 1.0))) + _1466) * _1388;
        float _1476 = _1356 * 0.5;
        float _1477 = _1366 * 0.5;
        float _1478 = _1376 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_962, _963, _964), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _4487 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1503 + 1.0))) + _1508) * _1389;
        _1525 = _1356;
        _1527 = _1355;
        _1528 = _1354;
        _1529 = _1366;
        _1530 = _1365;
        _1531 = _1364;
        _1532 = _1376;
        _1533 = _1375;
        _1534 = _1374;
        _1535 = _1389;
        _1536 = _1388;
        _1537 = _1387;
        _1538 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1539 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1540 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1526;
        _1527 = _1526;
        _1528 = _1526;
        _1529 = _1526;
        _1530 = _1526;
        _1531 = _1526;
        _1532 = _1526;
        _1533 = _1526;
        _1534 = _1526;
        _1535 = _1526;
        _1536 = _1526;
        _1537 = _1526;
        _1538 = 0.0;
        _1539 = 0.0;
        _1540 = 0.0;
    }
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    float _1841;
    float _1842;
    float _1843;
    float _1844;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1563 = fma(_1227, cbModelParam._m0[30u].z, fma(_1223, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1219));
        float _1567 = fma(_1227, cbModelParam._m0[31u].z, fma(_1223, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1219));
        float _1571 = fma(_1227, cbModelParam._m0[32u].z, fma(_1223, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1219));
        float _1593 = _1219 + _962;
        float _1594 = _1223 + _963;
        float _1595 = _1227 + _964;
        float _1605 = fma(_1595, cbModelParam._m0[30u].z, fma(_1594, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1593)) - _1563;
        float _1606 = fma(_1595, cbModelParam._m0[31u].z, fma(_1594, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1593)) - _1567;
        float _1607 = fma(_1595, cbModelParam._m0[32u].z, fma(_1594, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1593)) - _1571;
        float _1611 = inversesqrt(dot(vec3(_1605, _1606, _1607), vec3(_1605, _1606, _1607)));
        float _1623 = ((_1611 * _1605) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1563 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1624 = ((_1611 * _1606) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1567 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1625 = ((_1611 * _1607) / cbModelParam._m0[35u].z) + ((((((_1571 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1627 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1634 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1641 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        vec4 _1648 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1623, _1624, _1625), 0.0);
        float _1660 = exp2((_1627.w + (-0.5)) * 20.0) * 2.0;
        float _1661 = _1660 * (_1627.x + (-0.5));
        float _1662 = _1660 * (_1627.y + (-0.5));
        float _1663 = _1660 * (_1627.z + (-0.5));
        float _1670 = exp2((_1634.w + (-0.5)) * 20.0) * 2.0;
        float _1671 = _1670 * (_1634.x + (-0.5));
        float _1672 = _1670 * (_1634.y + (-0.5));
        float _1673 = _1670 * (_1634.z + (-0.5));
        float _1680 = exp2((_1641.w + (-0.5)) * 20.0) * 2.0;
        float _1681 = _1680 * (_1641.x + (-0.5));
        float _1682 = _1680 * (_1641.y + (-0.5));
        float _1683 = _1680 * (_1641.z + (-0.5));
        float _1690 = exp2((_1648.w + (-0.5)) * 20.0) * 2.0;
        float _1691 = _1690 * (_1648.x + (-0.5));
        float _1692 = _1690 * (_1648.y + (-0.5));
        float _1693 = _1690 * (_1648.z + (-0.5));
        float _1694 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1695 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1696 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1697 = _1661 * 0.5;
        float _1698 = _1671 * 0.5;
        float _1699 = _1681 * 0.5;
        float _1700 = dot(vec3(_1697, _1698, _1699), vec3(_1697, _1698, _1699));
        float _1705 = (_1700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1700);
        float _1713 = (dot(vec3(_962, _963, _964), vec3(_1705 * _1697, _1705 * _1698, _1705 * _1699)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
        float _1722 = sqrt(((_1698 * _1698) + (_1697 * _1697)) + (_1699 * _1699)) / (_1694 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1723 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1724 = _1723 * 2.0;
        float _1728 = (1.0 - _1723) / (_1723 + 1.0);
        float _4550 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
        float _1729 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _1738 = ((((1.0 - _1729) * (_1724 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1724 + 1.0))) + _1729) * _1694;
        float _1739 = _1662 * 0.5;
        float _1740 = _1672 * 0.5;
        float _1741 = _1682 * 0.5;
        float _1742 = dot(vec3(_1739, _1740, _1741), vec3(_1739, _1740, _1741));
        float _1747 = (_1742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1742);
        float _1755 = (dot(vec3(_962, _963, _964), vec3(_1747 * _1739, _1747 * _1740, _1747 * _1741)) + 1.0) * 0.5;
        float _4561 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        float _1764 = sqrt(((_1740 * _1740) + (_1739 * _1739)) + (_1741 * _1741)) / (_1695 + 9.9999997473787516355514526367188e-06);
        float _4572 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
        float _1765 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
        float _1766 = _1765 * 2.0;
        float _1770 = (1.0 - _1765) / (_1765 + 1.0);
        float _4583 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
        float _1771 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
        float _1780 = ((((1.0 - _1771) * (_1766 + 2.0)) * exp2(log2(isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_1766 + 1.0))) + _1771) * _1695;
        float _1781 = _1663 * 0.5;
        float _1782 = _1673 * 0.5;
        float _1783 = _1683 * 0.5;
        float _1784 = dot(vec3(_1781, _1782, _1783), vec3(_1781, _1782, _1783));
        float _1789 = (_1784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1784);
        float _1797 = (dot(vec3(_962, _963, _964), vec3(_1789 * _1781, _1789 * _1782, _1789 * _1783)) + 1.0) * 0.5;
        float _4594 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
        float _1806 = sqrt(((_1782 * _1782) + (_1781 * _1781)) + (_1783 * _1783)) / (_1696 + 9.9999997473787516355514526367188e-06);
        float _4605 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
        float _1807 = isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0));
        float _1808 = _1807 * 2.0;
        float _1812 = (1.0 - _1807) / (_1807 + 1.0);
        float _4616 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _1822 = ((((1.0 - _1813) * (_1808 + 2.0)) * exp2(log2(isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_1808 + 1.0))) + _1813) * _1696;
        _1830 = _1663;
        _1831 = _1662;
        _1832 = _1661;
        _1833 = _1673;
        _1834 = _1672;
        _1835 = _1671;
        _1836 = _1683;
        _1837 = _1682;
        _1838 = _1681;
        _1839 = _1696;
        _1840 = _1695;
        _1841 = _1694;
        _1842 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)));
        _1843 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)));
        _1844 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0)));
    }
    else
    {
        _1830 = _1526;
        _1831 = _1526;
        _1832 = _1526;
        _1833 = _1526;
        _1834 = _1526;
        _1835 = _1526;
        _1836 = _1526;
        _1837 = _1526;
        _1838 = _1526;
        _1839 = _1526;
        _1840 = _1526;
        _1841 = _1526;
        _1842 = 0.0;
        _1843 = 0.0;
        _1844 = 0.0;
    }
    float _1854 = (cbModelParam._m0[1u].x * (_1842 - _1538)) + _1538;
    float _1855 = (cbModelParam._m0[1u].x * (_1843 - _1539)) + _1539;
    float _1856 = (cbModelParam._m0[1u].x * (_1844 - _1540)) + _1540;
    float _1877 = fma(_1856, cbSceneParam._m0[89u].z, fma(_1855, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1880 = fma(_1856, cbSceneParam._m0[90u].z, fma(_1855, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1883 = fma(_1856, cbSceneParam._m0[91u].z, fma(_1855, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1854));
    float _1896 = _1165 * 0.5;
    float _1897 = _1166 * 0.5;
    float _1898 = _1167 * 0.5;
    float _1899 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1832, _1835, _1838, _1841));
    float _1902 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1831, _1834, _1837, _1840));
    float _1905 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1830, _1833, _1836, _1839));
    float _1939;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1912 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1525, _1529, _1532, _1535));
        float _1916 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1527, _1530, _1533, _1536));
        float _1920 = dot(vec4(_1896, _1897, _1898, 1.0), vec4(_1528, _1531, _1534, _1537));
        float _1927 = dot(vec4(cbModelParam._m0[39u]), vec4(_1896, _1897, _1898, 1.0));
        _1939 = dot(vec3(isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)), isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1927) ? 0.0 : (isnan(0.0) ? _1927 : max(0.0, _1927))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1939 = 1.0;
    }
    float _1950;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1941 = dot(vec4(cbModelParam._m0[40u]), vec4(_1896, _1897, _1898, 1.0));
        _1950 = dot(vec3(isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0)), isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0)), isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1941) ? 0.0 : (isnan(0.0) ? _1941 : max(0.0, _1941))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1950 = 1.0;
    }
    float _1954 = (_1950 * cbModelParam._m0[1u].x) + (_1939 * (1.0 - cbModelParam._m0[1u].x));
    float _1964 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1072);
    float _1965 = isnan(_1964) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1964 : min(cbModelParam._m0[25u].z, _1964));
    float _2047;
    float _2049;
    float _2051;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2014 = fma(_1227, cbModelParam._m0[13u].z, fma(_1223, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1219)) + cbModelParam._m0[13u].w;
        float _2018 = fma(_1227, cbModelParam._m0[14u].z, fma(_1223, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1219)) + cbModelParam._m0[14u].w;
        float _2022 = fma(_1227, cbModelParam._m0[15u].z, fma(_1223, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1219)) + cbModelParam._m0[15u].w;
        float _2025 = fma(_1167, cbModelParam._m0[13u].z, fma(_1166, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1165));
        float _2028 = fma(_1167, cbModelParam._m0[14u].z, fma(_1166, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1165));
        float _2031 = fma(_1167, cbModelParam._m0[15u].z, fma(_1166, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1165));
        float _2059;
        if (_2025 > 0.0)
        {
            _2059 = abs((1.0 - _2014) / _2025);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2025 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2014 + 1.0) / _2025);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2059 = frontier_phi_14_12_ladder;
        }
        float _2233;
        if (_2028 > 0.0)
        {
            _2233 = abs((1.0 - _2018) / _2028);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2028 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2018 + 1.0) / _2028);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2233 = frontier_phi_23_19_ladder;
        }
        float _2525;
        if (_2031 > 0.0)
        {
            _2525 = abs((1.0 - _2022) / _2031);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2031 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2022 + 1.0) / _2031);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2525 = frontier_phi_35_30_ladder;
        }
        float _2527 = isnan(_2233) ? _2059 : (isnan(_2059) ? _2233 : min(_2059, _2233));
        float _2528 = isnan(_2525) ? _2527 : (isnan(_2527) ? _2525 : min(_2527, _2525));
        float _2532 = (_2528 * _2025) + _2014;
        float _2533 = (_2528 * _2028) + _2018;
        float _2534 = (_2528 * _2031) + _2022;
        float _2535 = _2528 * 9.9999997473787516355514526367188e-05;
        float _2537 = (-1.0) - _2535;
        float _2539 = _2535 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2534 > _2539) || ((_2534 < _2537) || ((_2533 > _2539) || ((_2533 < _2537) || ((_2532 < _2537) || (_2532 > _2539))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2679 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2534, cbModelParam._m0[9u].z, fma(_2533, cbModelParam._m0[9u].y, _2532 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2534, cbModelParam._m0[10u].z, fma(_2533, cbModelParam._m0[10u].y, _2532 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2534, cbModelParam._m0[11u].z, fma(_2533, cbModelParam._m0[11u].y, _2532 * cbModelParam._m0[11u].x))), _1965);
            frontier_phi_13_35_ladder = _2679.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2679.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2679.x * cbModelParam._m0[1u].y;
        }
        _2047 = frontier_phi_13_35_ladder_2;
        _2049 = frontier_phi_13_35_ladder_1;
        _2051 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2035 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1165, _1166, _1167), _1965);
        _2047 = _2035.x * cbModelParam._m0[1u].y;
        _2049 = _2035.y * cbModelParam._m0[1u].y;
        _2051 = _2035.z * cbModelParam._m0[1u].y;
    }
    float _2055 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1072);
    float _2056 = isnan(_2055) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2055 : min(cbModelParam._m0[25u].w, _2055));
    float _2148;
    float _2150;
    float _2152;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2112 = fma(_1227, cbModelParam._m0[21u].z, fma(_1223, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1219)) + cbModelParam._m0[21u].w;
        float _2116 = fma(_1227, cbModelParam._m0[22u].z, fma(_1223, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1219)) + cbModelParam._m0[22u].w;
        float _2120 = fma(_1227, cbModelParam._m0[23u].z, fma(_1223, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1219)) + cbModelParam._m0[23u].w;
        float _2123 = fma(_1167, cbModelParam._m0[21u].z, fma(_1166, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1165));
        float _2126 = fma(_1167, cbModelParam._m0[22u].z, fma(_1166, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1165));
        float _2129 = fma(_1167, cbModelParam._m0[23u].z, fma(_1166, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1165));
        float _2238;
        if (_2123 > 0.0)
        {
            _2238 = abs((1.0 - _2112) / _2123);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2123 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2112 + 1.0) / _2123);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2238 = frontier_phi_25_21_ladder;
        }
        float _2552;
        if (_2126 > 0.0)
        {
            _2552 = abs((1.0 - _2116) / _2126);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2126 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2116 + 1.0) / _2126);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2552 = frontier_phi_37_32_ladder;
        }
        float _2890;
        if (_2129 > 0.0)
        {
            _2890 = abs((1.0 - _2120) / _2129);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2129 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2120 + 1.0) / _2129);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2890 = frontier_phi_47_44_ladder;
        }
        float _2892 = isnan(_2552) ? _2238 : (isnan(_2238) ? _2552 : min(_2238, _2552));
        float _2893 = isnan(_2890) ? _2892 : (isnan(_2892) ? _2890 : min(_2892, _2890));
        float _2897 = (_2893 * _2123) + _2112;
        float _2898 = (_2893 * _2126) + _2116;
        float _2899 = (_2893 * _2129) + _2120;
        float _2900 = _2893 * 9.9999997473787516355514526367188e-05;
        float _2901 = (-1.0) - _2900;
        float _2903 = _2900 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2899 > _2903) || ((_2899 < _2901) || ((_2898 > _2903) || ((_2898 < _2901) || ((_2897 < _2901) || (_2897 > _2903))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3021 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2899, cbModelParam._m0[17u].z, fma(_2898, cbModelParam._m0[17u].y, _2897 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2899, cbModelParam._m0[18u].z, fma(_2898, cbModelParam._m0[18u].y, _2897 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2899, cbModelParam._m0[19u].z, fma(_2898, cbModelParam._m0[19u].y, _2897 * cbModelParam._m0[19u].x))), _2056);
            frontier_phi_22_47_ladder = _3021.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3021.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3021.x * cbModelParam._m0[1u].z;
        }
        _2148 = frontier_phi_22_47_ladder_2;
        _2150 = frontier_phi_22_47_ladder_1;
        _2152 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2132 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1165, _1166, _1167), _2056);
        _2148 = _2132.x * cbModelParam._m0[1u].z;
        _2150 = _2132.y * cbModelParam._m0[1u].z;
        _2152 = _2132.z * cbModelParam._m0[1u].z;
    }
    float _2165 = (((_1190 * _1142) + _1191) * _1157) * ((cbModelParam._m0[1u].w * (_2148 - _2047)) + _2047);
    float _2167 = (((_1190 * _1144) + _1191) * _1157) * ((cbModelParam._m0[1u].w * (_2150 - _2049)) + _2049);
    float _2169 = (((_1190 * _1145) + _1191) * _1157) * ((cbModelParam._m0[1u].w * (_2152 - _2051)) + _2051);
    float _2172 = fma(_2169, cbSceneParam._m0[89u].z, fma(_2167, cbSceneParam._m0[89u].y, _2165 * cbSceneParam._m0[89u].x));
    float _2175 = fma(_2169, cbSceneParam._m0[90u].z, fma(_2167, cbSceneParam._m0[90u].y, _2165 * cbSceneParam._m0[90u].x));
    float _2178 = fma(_2169, cbSceneParam._m0[91u].z, fma(_2167, cbSceneParam._m0[91u].y, _2165 * cbSceneParam._m0[91u].x));
    float _2212 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2216 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2224 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2225 = _2212 / _2224;
    float _2226 = _2216 / _2224;
    float _2227 = _2220 / _2224;
    float _2371;
    float _2372;
    float _2373;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2254 = ((uint(_2227 > cbSceneParam._m0[59u].y) + uint(_2227 > cbSceneParam._m0[59u].x)) + uint(_2227 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2255 = _2254 + 43u;
        uint _2262 = _2254 + 44u;
        uint _2269 = _2254 + 45u;
        uint _2277 = _2254 + 46u;
        float _2288 = fma(_2224, cbSceneParam._m0[_2255].w, fma(_2220, cbSceneParam._m0[_2255].z, fma(_2216, cbSceneParam._m0[_2255].y, _2212 * cbSceneParam._m0[_2255].x)));
        float _2292 = fma(_2224, cbSceneParam._m0[_2262].w, fma(_2220, cbSceneParam._m0[_2262].z, fma(_2216, cbSceneParam._m0[_2262].y, _2212 * cbSceneParam._m0[_2262].x)));
        float _2300 = fma(_2224, cbSceneParam._m0[_2277].w, fma(_2220, cbSceneParam._m0[_2277].z, fma(_2216, cbSceneParam._m0[_2277].y, _2212 * cbSceneParam._m0[_2277].x)));
        float _2304 = cbSceneParam._m0[33u].z * _2300;
        float _2306 = cbSceneParam._m0[33u].w * _2300;
        float _2309 = fma(_2224, cbSceneParam._m0[_2269].w, fma(_2220, cbSceneParam._m0[_2269].z, fma(_2216, cbSceneParam._m0[_2269].y, _2212 * cbSceneParam._m0[_2269].x))) / _2300;
        float _2357 = (cbSceneParam._m0[33u].x - sqrt(((_2226 * _2226) + (_2225 * _2225)) + (_2227 * _2227))) * cbSceneParam._m0[33u].y;
        float _4742 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2364 = (isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2304 + _2288) / _2300, (_2306 + _2292) / _2300), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2306 + _2288) / _2300, (_2292 - _2304) / _2300), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2288 - _2304) / _2300, (_2292 - _2306) / _2300), _2309), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2288 - _2306) / _2300, (_2304 + _2292) / _2300), _2309), 0.0)).x), vec4(0.25)));
        _2371 = 1.0 - (_2364 * cbSceneParam._m0[34u].x);
        _2372 = 1.0 - (_2364 * cbSceneParam._m0[34u].y);
        _2373 = 1.0 - (_2364 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2371 = 1.0;
        _2372 = 1.0;
        _2373 = 1.0;
    }
    float _2437;
    float _2439;
    float _2441;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2425 = fma(_2224, cbSceneParam._m0[63u].w, fma(_2220, cbSceneParam._m0[63u].z, fma(_2216, cbSceneParam._m0[63u].y, _2212 * cbSceneParam._m0[63u].x)));
        float _2426 = fma(_2224, cbSceneParam._m0[60u].w, fma(_2220, cbSceneParam._m0[60u].z, fma(_2216, cbSceneParam._m0[60u].y, _2212 * cbSceneParam._m0[60u].x))) / _2425;
        float _2427 = fma(_2224, cbSceneParam._m0[61u].w, fma(_2220, cbSceneParam._m0[61u].z, fma(_2216, cbSceneParam._m0[61u].y, _2212 * cbSceneParam._m0[61u].x))) / _2425;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2426 >= cbSceneParam._m0[64u].x) && (_2427 >= cbSceneParam._m0[64u].y)) && (_2426 <= cbSceneParam._m0[64u].z)) && (_2427 <= cbSceneParam._m0[64u].w))
        {
            float _2565 = fma(_2224, cbSceneParam._m0[62u].w, fma(_2220, cbSceneParam._m0[62u].z, fma(_2216, cbSceneParam._m0[62u].y, _2212 * cbSceneParam._m0[62u].x))) / _2425;
            float _2569 = isnan(cbSceneParam._m0[41u].w) ? _2565 : (isnan(_2565) ? cbSceneParam._m0[41u].w : max(_2565, cbSceneParam._m0[41u].w));
            float _2612 = (cbSceneParam._m0[33u].x - sqrt(((_2226 * _2226) + (_2225 * _2225)) + (_2227 * _2227))) * cbSceneParam._m0[33u].y;
            float _4758 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
            float _2619 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2426, cbSceneParam._m0[33u].w + _2427), _2569), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2426, _2427 - cbSceneParam._m0[33u].z), _2569), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2426 - cbSceneParam._m0[33u].z, _2427 - cbSceneParam._m0[33u].w), _2569), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2426 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2427), _2569), 0.0)).x), vec4(0.25)));
            float _2623 = 1.0 - (_2619 * cbSceneParam._m0[34u].x);
            float _2624 = 1.0 - (_2619 * cbSceneParam._m0[34u].y);
            float _2625 = 1.0 - (_2619 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2625) ? _2373 : (isnan(_2373) ? _2625 : min(_2373, _2625));
            frontier_phi_34_33_ladder_1 = isnan(_2624) ? _2372 : (isnan(_2372) ? _2624 : min(_2372, _2624));
            frontier_phi_34_33_ladder_2 = isnan(_2623) ? _2371 : (isnan(_2371) ? _2623 : min(_2371, _2623));
        }
        else
        {
            frontier_phi_34_33_ladder = _2373;
            frontier_phi_34_33_ladder_1 = _2372;
            frontier_phi_34_33_ladder_2 = _2371;
        }
        _2437 = frontier_phi_34_33_ladder_2;
        _2439 = frontier_phi_34_33_ladder_1;
        _2441 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2437 = _2371;
        _2439 = _2372;
        _2441 = _2373;
    }
    uvec4 _2446 = floatBitsToUint(cbInstanceData._m0[_1085 + 5u]);
    uint _2448 = _2446.x * 14u;
    uint _2449 = _2448 + 13u;
    float _2456 = _1157 + (-1.0);
    float _2461 = (cbLight._m0[_2449].x * _2456) + 1.0;
    float _2462 = (cbLight._m0[_2449].y * _2456) + 1.0;
    float _2463 = (cbLight._m0[_2449].z * _2456) + 1.0;
    float _2464 = (cbLight._m0[_2449].w * _2456) + 1.0;
    uint _2465 = _2448 + 5u;
    float _2471 = isnan(1.0) ? _2462 : (isnan(_2462) ? 1.0 : min(_2462, 1.0));
    uint _2475 = _2448 + 4u;
    float _2484 = isnan(1.0) ? _2461 : (isnan(_2461) ? 1.0 : min(_2461, 1.0));
    uint _2488 = _2448 | 1u;
    float _2499 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_962, _963, _964));
    float _2502 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_962, _963, _964));
    float _4794 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _4805 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2507 = (isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0))) * 0.3183098733425140380859375;
    float _2509 = (isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0))) * 0.3183098733425140380859375;
    float _2516 = ((cbLight._m0[_2465].x * _2471) * _2509) + (((cbLight._m0[_2475].x * _2437) * _2484) * _2507);
    float _2517 = ((_2471 * cbLight._m0[_2465].y) * _2509) + (((cbLight._m0[_2475].y * _2439) * _2484) * _2507);
    float _2518 = ((_2471 * cbLight._m0[_2465].z) * _2509) + (((cbLight._m0[_2475].z * _2441) * _2484) * _2507);
    uvec4 _2522 = floatBitsToUint(cbLight._m0[_2448 + 12u]);
    bool _2524 = _2522.x == 0u;
    float _2626;
    float _2628;
    float _2630;
    if (_2524)
    {
        _2626 = _2516;
        _2628 = _2517;
        _2630 = _2518;
    }
    else
    {
        uint _2634 = _2448 + 6u;
        float _2650 = (dot(vec3(cbLight._m0[_2448 + 2u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2651 = _2650 * _2650;
        float _4816 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2652 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
        float _2653 = isnan(1.0) ? _2463 : (isnan(_2463) ? 1.0 : min(_2463, 1.0));
        _2626 = (((cbLight._m0[_2634].x * 0.3183098733425140380859375) * _2652) * _2653) + _2516;
        _2628 = (((cbLight._m0[_2634].y * 0.3183098733425140380859375) * _2652) * _2653) + _2517;
        _2630 = (((cbLight._m0[_2634].z * 0.3183098733425140380859375) * _2652) * _2653) + _2518;
    }
    bool _2633 = _2522.y == 0u;
    float _2688;
    float _2690;
    float _2692;
    if (_2633)
    {
        _2688 = _2626;
        _2690 = _2628;
        _2692 = _2630;
    }
    else
    {
        uint _2861 = _2448 + 7u;
        float _2877 = (dot(vec3(cbLight._m0[_2448 + 3u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2878 = _2877 * _2877;
        float _4832 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
        float _2879 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
        float _2880 = isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0));
        _2688 = (((cbLight._m0[_2861].x * 0.3183098733425140380859375) * _2879) * _2880) + _2626;
        _2690 = (((cbLight._m0[_2861].y * 0.3183098733425140380859375) * _2879) * _2880) + _2628;
        _2692 = (((cbLight._m0[_2861].z * 0.3183098733425140380859375) * _2879) * _2880) + _2630;
    }
    uint _2695 = _2448 + 8u;
    float _2708 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2448].w)) * _1072) * 0.949999988079071044921875);
    float _2709 = _2708 * _2708;
    float _2710 = cbLight._m0[_2448].x + _1022;
    float _2711 = cbLight._m0[_2448].y + _1023;
    float _2712 = cbLight._m0[_2448].z + _1024;
    float _2716 = inversesqrt(dot(vec3(_2710, _2711, _2712), vec3(_2710, _2711, _2712)));
    float _2717 = _2716 * _2710;
    float _2718 = _2716 * _2711;
    float _2719 = _2716 * _2712;
    float _2720 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2448].xyz));
    float _4848 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2723 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
    float _4859 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
    float _2724 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
    float _2725 = dot(vec3(_962, _963, _964), vec3(_2717, _2718, _2719));
    float _4870 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2728 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
    float _2729 = dot(vec3(cbLight._m0[_2448].xyz), vec3(_2717, _2718, _2719));
    float _4881 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
    float _2733 = _2709 * _2709;
    float _2737 = ((_2728 * _2728) * (_2733 + (-1.0))) + 1.0;
    float _2745 = exp2(log2(1.0 - (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) * 5.0);
    float _2746 = 0.959999978542327880859375 - _1139;
    float _2748 = 0.959999978542327880859375 - _1140;
    float _2749 = 0.959999978542327880859375 - _1141;
    float _2756 = 1.0 - _2709;
    float _2767 = (0.5 / (((_2724 * ((_2723 * _2756) + _2709)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _2756) + _2709) * _2723))) * _2723;
    float _4892 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
    float _2769 = (isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0))) * (_2733 / ((_2737 * _2737) * 3.141590118408203125));
    uint _2783 = _2448 + 9u;
    float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2488].w)) * _1072) * 0.949999988079071044921875);
    float _2795 = _2794 * _2794;
    float _2796 = cbLight._m0[_2488].x + _1022;
    float _2797 = cbLight._m0[_2488].y + _1023;
    float _2798 = cbLight._m0[_2488].z + _1024;
    float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
    float _2803 = _2802 * _2796;
    float _2804 = _2802 * _2797;
    float _2805 = _2802 * _2798;
    float _2806 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2488].xyz));
    float _4903 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2809 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
    float _2810 = dot(vec3(_962, _963, _964), vec3(_2803, _2804, _2805));
    float _4914 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2813 = isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0));
    float _2814 = dot(vec3(cbLight._m0[_2488].xyz), vec3(_2803, _2804, _2805));
    float _4925 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
    float _2818 = _2795 * _2795;
    float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
    float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _4925 : (isnan(_4925) ? 1.0 : min(_4925, 1.0)))) * 5.0);
    float _2836 = 1.0 - _2795;
    float _2846 = (0.5 / (((_2724 * ((_2809 * _2836) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _2836) + _2795) * _2809))) * _2809;
    float _4936 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
    float _2848 = (isnan(1.0) ? _4936 : (isnan(_4936) ? 1.0 : min(_4936, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
    float _2858 = (((((_2829 * _2746) + _1142) * cbLight._m0[_2783].x) * _2848) * _2471) + ((((cbLight._m0[_2695].x * _2437) * ((_2745 * _2746) + _1142)) * _2769) * _2484);
    float _2859 = (((((_2829 * _2748) + _1144) * cbLight._m0[_2783].y) * _2848) * _2471) + ((((cbLight._m0[_2695].y * _2439) * ((_2745 * _2748) + _1144)) * _2769) * _2484);
    float _2860 = (((((_2829 * _2749) + _1145) * cbLight._m0[_2783].z) * _2848) * _2471) + ((((cbLight._m0[_2695].z * _2441) * ((_2745 * _2749) + _1145)) * _2769) * _2484);
    float _2916;
    float _2918;
    float _2920;
    if (_2524)
    {
        _2916 = _2858;
        _2918 = _2859;
        _2920 = _2860;
    }
    else
    {
        uint _2922 = _2448 + 2u;
        uint _2926 = _2448 + 10u;
        float _2940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2922].w)) * _1072) * 0.949999988079071044921875);
        float _2941 = _2940 * _2940;
        float _2942 = cbLight._m0[_2922].x + _1022;
        float _2943 = cbLight._m0[_2922].y + _1023;
        float _2944 = cbLight._m0[_2922].z + _1024;
        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
        float _2949 = _2948 * _2942;
        float _2950 = _2948 * _2943;
        float _2951 = _2948 * _2944;
        float _2952 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2922].xyz));
        float _4947 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2955 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
        float _2956 = dot(vec3(_962, _963, _964), vec3(_2949, _2950, _2951));
        float _4958 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4958 : (isnan(_4958) ? 1.0 : min(_4958, 1.0));
        float _2960 = dot(vec3(cbLight._m0[_2922].xyz), vec3(_2949, _2950, _2951));
        float _4969 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2964 = _2941 * _2941;
        float _2968 = ((_2959 * _2959) * (_2964 + (-1.0))) + 1.0;
        float _2975 = exp2(log2(1.0 - (isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0)))) * 5.0);
        float _2982 = 1.0 - _2941;
        float _2992 = (0.5 / (((_2724 * ((_2955 * _2982) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _2982) + _2941) * _2955))) * _2955;
        float _4980 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2994 = (isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0))) * (_2964 / ((_2968 * _2968) * 3.141590118408203125));
        float _2995 = isnan(1.0) ? _2463 : (isnan(_2463) ? 1.0 : min(_2463, 1.0));
        _2916 = (((((_2975 * _2746) + _1142) * cbLight._m0[_2926].x) * _2994) * _2995) + _2858;
        _2918 = (((((_2975 * _2748) + _1144) * cbLight._m0[_2926].y) * _2994) * _2995) + _2859;
        _2920 = (((((_2975 * _2749) + _1145) * cbLight._m0[_2926].z) * _2994) * _2995) + _2860;
    }
    float _3026;
    float _3028;
    float _3030;
    if (_2633)
    {
        _3026 = _2916;
        _3028 = _2918;
        _3030 = _2920;
    }
    else
    {
        uint _3037 = _2448 + 3u;
        uint _3041 = _2448 + 11u;
        float _3055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3037].w)) * _1072) * 0.949999988079071044921875);
        float _3056 = _3055 * _3055;
        float _3057 = cbLight._m0[_3037].x + _1022;
        float _3058 = cbLight._m0[_3037].y + _1023;
        float _3059 = cbLight._m0[_3037].z + _1024;
        float _3063 = inversesqrt(dot(vec3(_3057, _3058, _3059), vec3(_3057, _3058, _3059)));
        float _3064 = _3063 * _3057;
        float _3065 = _3063 * _3058;
        float _3066 = _3063 * _3059;
        float _3067 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_3037].xyz));
        float _4996 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        float _3070 = isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0));
        float _3071 = dot(vec3(_962, _963, _964), vec3(_3064, _3065, _3066));
        float _5007 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        float _3074 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
        float _3075 = dot(vec3(cbLight._m0[_3037].xyz), vec3(_3064, _3065, _3066));
        float _5018 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
        float _3079 = _3056 * _3056;
        float _3083 = ((_3074 * _3074) * (_3079 + (-1.0))) + 1.0;
        float _3090 = exp2(log2(1.0 - (isnan(1.0) ? _5018 : (isnan(_5018) ? 1.0 : min(_5018, 1.0)))) * 5.0);
        float _3097 = 1.0 - _3056;
        float _3107 = (0.5 / (((_2724 * ((_3070 * _3097) + _3056)) + 9.9999999392252902907785028219223e-09) + (((_2724 * _3097) + _3056) * _3070))) * _3070;
        float _5029 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
        float _3109 = (isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_3079 / ((_3083 * _3083) * 3.141590118408203125));
        float _3110 = isnan(1.0) ? _2464 : (isnan(_2464) ? 1.0 : min(_2464, 1.0));
        _3026 = (((((_3090 * _2746) + _1142) * cbLight._m0[_3041].x) * _3109) * _3110) + _2916;
        _3028 = (((((_3090 * _2748) + _1144) * cbLight._m0[_3041].y) * _3109) * _3110) + _2918;
        _3030 = (((((_3090 * _2749) + _1145) * cbLight._m0[_3041].z) * _3109) * _3110) + _2920;
    }
    float _3176;
    float _3178;
    float _3180;
    float _3182;
    float _3184;
    float _3186;
    if (_2446.y == 0u)
    {
        uvec4 _3131 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3132 = _3131.x;
        uint _3143 = uint((float(_3131.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1031) / _3132))) + floor(float(uint(cbSceneParam._m0[85u].x * _1030) / _3132)));
        float _3153 = (log2(_2227 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3154 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
        uint _3157 = uint(isnan(14.0) ? _3154 : (isnan(_3154) ? 14.0 : min(_3154, 14.0)));
        uvec4 _3162 = texelFetch(g_lightClusterGridBuffer, int(((_3157 << 2u) + (_3143 << 6u)) >> 2u));
        uint _3163 = _3162.x;
        uint _3164 = _3131.z;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        float _3280;
        float _3282;
        if (((((1u << ((_3164 >> 4u) & 15u)) + 4294967295u) & _3163) == 0u) || ((_3164 & 240u) == 0u))
        {
            _3272 = 0.0;
            _3274 = 0.0;
            _3276 = 0.0;
            _3278 = 0.0;
            _3280 = 0.0;
            _3282 = 0.0;
        }
        else
        {
            float _3273;
            float _3275;
            float _3277;
            float _3279;
            float _3281;
            float _3283;
            float _3424 = 0.0;
            float _3425 = 0.0;
            float _3426 = 0.0;
            float _3427 = 0.0;
            float _3428 = 0.0;
            float _3429 = 0.0;
            uint _3430 = 0u;
            uint _3439;
            bool _3440;
            for (;;)
            {
                _3439 = texelFetch(g_lightClassification, int((((_3157 << 5u) + (_3143 << 9u)) + (_3430 << 2u)) >> 2u)).x;
                _3440 = _3439 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3440)
                {
                    frontier_phi_66_pred = _3429;
                    frontier_phi_66_pred_1 = _3428;
                    frontier_phi_66_pred_2 = _3427;
                    frontier_phi_66_pred_3 = _3426;
                    frontier_phi_66_pred_4 = _3425;
                    frontier_phi_66_pred_5 = _3424;
                }
                else
                {
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    float _3553;
                    uint _3554;
                    _3548 = _3424;
                    _3549 = _3425;
                    _3550 = _3426;
                    _3551 = _3427;
                    _3552 = _3428;
                    _3553 = _3429;
                    _3554 = _3439;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    for (;;)
                    {
                        uint _3558 = uint(findLSB(_3554)) + (_3430 << 5u);
                        uint _3555 = (_3554 + 4294967295u) & _3554;
                        uint _3560 = _3558 * 48u;
                        vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3560)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3560 + 3u)).x));
                        uint _3580 = (_3558 * 48u) + 4u;
                        vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3580)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 3u)).x));
                        uint _3599 = (_3558 * 48u) + 8u;
                        vec3 _3610 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3599)).x, texelFetch(g_PointLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3599 + 2u)).x));
                        float _3614 = _3574.x - _2225;
                        float _3615 = _3574.y - _2226;
                        float _3616 = _3574.z - _2227;
                        float _3617 = dot(vec3(_3614, _3615, _3616), vec3(_3614, _3615, _3616));
                        float _3620 = inversesqrt(_3617);
                        float _3621 = _3620 * _3614;
                        float _3622 = _3620 * _3615;
                        float _3623 = _3620 * _3616;
                        float _3624 = dot(vec3(_1053, _1056, _1059), vec3(_3621, _3622, _3623));
                        float _3629 = 1.0 - (_3617 * _3574.w);
                        float _5055 = isnan(0.0) ? _3629 : (isnan(_3629) ? 0.0 : max(_3629, 0.0));
                        float _3630 = isnan(1.0) ? _5055 : (isnan(_5055) ? 1.0 : min(_5055, 1.0));
                        float _3631 = sqrt(_3617) * _3593.w;
                        float _3634 = 1.39999997615814208984375 / (_3631 + 1.39999997615814208984375);
                        float _3635 = _3634 * _3634;
                        float _3638 = ((1.0 - _3635) * _3624) + _3635;
                        float _3641 = _3631 * _3631;
                        float _3645 = ((isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0))) * _3630) / ((_3641 * 0.699999988079071044921875) + 1.0);
                        float _3649 = (-0.0) - _2225;
                        float _3650 = (-0.0) - _2226;
                        float _3651 = (-0.0) - _2227;
                        float _3655 = inversesqrt(dot(vec3(_3649, _3650, _3651), vec3(_3649, _3650, _3651)));
                        float _3656 = _3655 * _3649;
                        float _3657 = _3655 * _3650;
                        float _3658 = _3655 * _3651;
                        float _3665 = exp2(log2(1.0 / ((_3641 * 3.5) + 5.0)) * 0.25);
                        float _3666 = 1.0 - _1173;
                        float _3673 = sqrt(1.0 - ((1.0 - (_3666 * _3666)) * (1.0 - (_3665 * _3665))));
                        float _3674 = _3673 * _3673;
                        float _3675 = _3674 * _3674;
                        float _3676 = _3656 + _3621;
                        float _3677 = _3657 + _3622;
                        float _3678 = _3658 + _3623;
                        float _3682 = inversesqrt(dot(vec3(_3676, _3677, _3678), vec3(_3676, _3677, _3678)));
                        float _3686 = dot(vec3(_1053, _1056, _1059), vec3(_3656, _3657, _3658));
                        float _5071 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3689 = isnan(1.0) ? _5071 : (isnan(_5071) ? 1.0 : min(_5071, 1.0));
                        float _3690 = dot(vec3(_1053, _1056, _1059), vec3(_3682 * _3676, _3682 * _3677, _3682 * _3678));
                        float _5082 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                        float _3693 = isnan(1.0) ? _5082 : (isnan(_5082) ? 1.0 : min(_5082, 1.0));
                        float _3697 = ((_3693 * _3693) * (_3675 + (-1.0))) + 1.0;
                        float _3698 = _3634 * _3674;
                        float _3699 = _3698 * _3698;
                        float _3702 = ((1.0 - _3699) * _3624) + _3699;
                        float _5093 = isnan(0.0) ? _3702 : (isnan(_3702) ? 0.0 : max(_3702, 0.0));
                        float _3703 = isnan(1.0) ? _5093 : (isnan(_5093) ? 1.0 : min(_5093, 1.0));
                        float _3704 = 1.0 - _3674;
                        float _3714 = (0.5 / (((_3703 * ((_3689 * _3704) + _3674)) + 9.9999999392252902907785028219223e-09) + (((_3703 * _3704) + _3674) * _3689))) * _3703;
                        float _5104 = isnan(0.0) ? _3714 : (isnan(_3714) ? 0.0 : max(_3714, 0.0));
                        float _3725 = (((_3675 * 3.1415927410125732421875) * (isnan(1.0) ? _5104 : (isnan(_5104) ? 1.0 : min(_5104, 1.0)))) / ((_3697 * _3697) * ((_3641 * 2.1991131305694580078125) + 3.141590118408203125))) * _3630;
                        _3483 = (_3645 * _3593.x) + _3551;
                        _3484 = (_3645 * _3593.y) + _3552;
                        _3485 = (_3645 * _3593.z) + _3553;
                        _3480 = (_3725 * _3610.x) + _3548;
                        _3481 = (_3725 * _3610.y) + _3549;
                        _3482 = (_3725 * _3610.z) + _3550;
                        if (_3555 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3548 = _3480;
                            _3549 = _3481;
                            _3550 = _3482;
                            _3551 = _3483;
                            _3552 = _3484;
                            _3553 = _3485;
                            _3554 = _3555;
                        }
                    }
                    frontier_phi_66_pred = _3485;
                    frontier_phi_66_pred_1 = _3484;
                    frontier_phi_66_pred_2 = _3483;
                    frontier_phi_66_pred_3 = _3482;
                    frontier_phi_66_pred_4 = _3481;
                    frontier_phi_66_pred_5 = _3480;
                }
                _3283 = frontier_phi_66_pred;
                _3281 = frontier_phi_66_pred_1;
                _3279 = frontier_phi_66_pred_2;
                _3277 = frontier_phi_66_pred_3;
                _3275 = frontier_phi_66_pred_4;
                _3273 = frontier_phi_66_pred_5;
                uint _3431 = _3430 + 1u;
                if (_3431 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3424 = _3273;
                    _3425 = _3275;
                    _3426 = _3277;
                    _3427 = _3279;
                    _3428 = _3281;
                    _3429 = _3283;
                    _3430 = _3431;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3272 = _3273;
            _3274 = _3275;
            _3276 = _3277;
            _3278 = _3279;
            _3280 = _3281;
            _3282 = _3283;
        }
        uvec4 _3286 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3287 = _3286.z;
        uint _3289 = (_3287 >> 8u) & 15u;
        float _3392;
        float _3394;
        float _3396;
        float _3398;
        float _3400;
        float _3402;
        if (((4294967295u << _3289) & _3163) == 0u)
        {
            _3392 = _3272;
            _3394 = _3274;
            _3396 = _3276;
            _3398 = _3278;
            _3400 = _3280;
            _3402 = _3282;
        }
        else
        {
            float _3417 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
            float _3418 = _3417 * _2225;
            float _3419 = _3417 * _2226;
            float _3420 = _3417 * _2227;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3289 < ((_3287 >> 12u) & 15u))
            {
                float _3393;
                float _3395;
                float _3397;
                float _3399;
                float _3401;
                float _3403;
                float _3531 = _3272;
                float _3532 = _3274;
                float _3533 = _3276;
                float _3534 = _3278;
                float _3535 = _3280;
                float _3536 = _3282;
                uint _3537 = _3289;
                uint _3546;
                bool _3547;
                for (;;)
                {
                    _3546 = texelFetch(g_lightClassification, int((((_3157 << 5u) + (_3143 << 9u)) + (_3537 << 2u)) >> 2u)).x;
                    _3547 = _3546 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3547)
                    {
                        frontier_phi_72_pred = _3536;
                        frontier_phi_72_pred_1 = _3535;
                        frontier_phi_72_pred_2 = _3534;
                        frontier_phi_72_pred_3 = _3533;
                        frontier_phi_72_pred_4 = _3532;
                        frontier_phi_72_pred_5 = _3531;
                    }
                    else
                    {
                        float _3730;
                        float _3731;
                        float _3732;
                        float _3733;
                        float _3734;
                        float _3735;
                        float _4024;
                        float _4025;
                        float _4026;
                        float _4027;
                        float _4028;
                        float _4029;
                        float _3743 = _3531;
                        float _3744 = _3532;
                        float _3745 = _3533;
                        float _3746 = _3534;
                        float _3747 = _3535;
                        float _3748 = _3536;
                        uint _3749 = _3546;
                        uint _3750;
                        vec4 _3775;
                        float _3776;
                        vec4 _3791;
                        vec3 _3803;
                        vec4 _3819;
                        vec4 _3834;
                        float _3880;
                        bool _3881;
                        for (;;)
                        {
                            uint _3760 = ((_3537 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3749));
                            _3750 = (_3749 + 4294967295u) & _3749;
                            uint _3762 = _3760 * 40u;
                            _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            _3776 = _3775.w;
                            uint _3778 = (_3760 * 40u) + 4u;
                            _3791 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3778)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3778 + 3u)).x));
                            uint _3793 = (_3760 * 40u) + 8u;
                            _3803 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3793)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3793 + 2u)).x));
                            uint _3806 = (_3760 * 40u) + 16u;
                            _3819 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 3u)).x));
                            uint _3821 = (_3760 * 40u) + 20u;
                            _3834 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3821)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3821 + 3u)).x));
                            uint _3836 = (_3760 * 40u) + 24u;
                            vec4 _3849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3836 + 3u)).x));
                            uint _3855 = (_3760 * 40u) + 28u;
                            vec4 _3868 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3855)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3855 + 3u)).x));
                            _3880 = fma(_2227, _3868.z, fma(_2226, _3868.y, _3868.x * _2225)) + _3868.w;
                            _3881 = !((fma(_2227, _3849.z, fma(_2226, _3849.y, _3849.x * _2225)) + _3849.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3881)
                            {
                                float _3908 = _3775.x - _2225;
                                float _3909 = _3775.y - _2226;
                                float _3910 = _3775.z - _2227;
                                float _3911 = dot(vec3(_3908, _3909, _3910), vec3(_3908, _3909, _3910));
                                float _3914 = inversesqrt(_3911);
                                float _3915 = _3914 * _3908;
                                float _3916 = _3914 * _3909;
                                float _3917 = _3914 * _3910;
                                float _3921 = 1.0 - (_3911 / (_3776 * _3776));
                                float _5115 = isnan(0.0) ? _3921 : (isnan(_3921) ? 0.0 : max(_3921, 0.0));
                                float _3922 = isnan(1.0) ? _5115 : (isnan(_5115) ? 1.0 : min(_5115, 1.0));
                                float _3926 = sqrt(_3911) * _3791.w;
                                float _3928 = 1.39999997615814208984375 / (_3926 + 1.39999997615814208984375);
                                float _3929 = _3928 * _3928;
                                float _3932 = ((1.0 - _3929) * dot(vec3(_3915, _3916, _3917), vec3(_1053, _1056, _1059))) + _3929;
                                float _3935 = _3926 * _3926;
                                float _3939 = (fma(_2227, _3819.z, fma(_2226, _3819.y, _3819.x * _2225)) + _3819.w) / _3880;
                                float _3940 = (fma(_2227, _3834.z, fma(_2226, _3834.y, _3834.x * _2225)) + _3834.w) / _3880;
                                float _3944 = 1.0 - dot(vec2(_3939, _3940), vec2(_3939, _3940));
                                float _5131 = isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0));
                                float _3945 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
                                float _3946 = _3945 * (((isnan(0.0) ? _3932 : (isnan(_3932) ? 0.0 : max(_3932, 0.0))) * _3922) / ((_3935 * 0.699999988079071044921875) + 1.0));
                                float _3958 = exp2(log2(1.0 / ((_3935 * 3.5) + 5.0)) * 0.25);
                                float _3959 = 1.0 - _1173;
                                float _3966 = sqrt(1.0 - ((1.0 - (_3959 * _3959)) * (1.0 - (_3958 * _3958))));
                                float _3967 = _3966 * _3966;
                                float _3968 = _3967 * _3967;
                                float _3969 = _3915 - _3418;
                                float _3970 = _3916 - _3419;
                                float _3971 = _3917 - _3420;
                                float _3975 = inversesqrt(dot(vec3(_3969, _3970, _3971), vec3(_3969, _3970, _3971)));
                                float _3979 = dot(vec3(_1053, _1056, _1059), vec3((-0.0) - _3418, (-0.0) - _3419, (-0.0) - _3420));
                                float _5142 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3982 = isnan(1.0) ? _5142 : (isnan(_5142) ? 1.0 : min(_5142, 1.0));
                                float _3983 = dot(vec3(_1053, _1056, _1059), vec3(_3975 * _3969, _3975 * _3970, _3975 * _3971));
                                float _5153 = isnan(0.0) ? _3983 : (isnan(_3983) ? 0.0 : max(_3983, 0.0));
                                float _3986 = isnan(1.0) ? _5153 : (isnan(_5153) ? 1.0 : min(_5153, 1.0));
                                float _3990 = ((_3986 * _3986) * (_3968 + (-1.0))) + 1.0;
                                float _3991 = _3928 * _3967;
                                float _3992 = _3991 * _3991;
                                float _3998 = ((1.0 - _3992) * dot(vec3(_1053, _1056, _1059), vec3(_3915, _3916, _3917))) + _3992;
                                float _5164 = isnan(0.0) ? _3998 : (isnan(_3998) ? 0.0 : max(_3998, 0.0));
                                float _3999 = isnan(1.0) ? _5164 : (isnan(_5164) ? 1.0 : min(_5164, 1.0));
                                float _4000 = 1.0 - _3967;
                                float _4010 = (0.5 / (((_3999 * ((_3982 * _4000) + _3967)) + 9.9999999392252902907785028219223e-09) + (((_3999 * _4000) + _3967) * _3982))) * _3999;
                                float _5175 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4020 = (_3945 * _3922) * (((_3968 * 3.1415927410125732421875) * (isnan(1.0) ? _5175 : (isnan(_5175) ? 1.0 : min(_5175, 1.0)))) / ((_3990 * _3990) * ((_3935 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3946 * _3791.y;
                                frontier_phi_78_pred_1 = _3946 * _3791.x;
                                frontier_phi_78_pred_2 = _4020 * _3803.z;
                                frontier_phi_78_pred_3 = _4020 * _3803.y;
                                frontier_phi_78_pred_4 = _4020 * _3803.x;
                                frontier_phi_78_pred_5 = _3946 * _3791.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4028 = frontier_phi_78_pred;
                            _4027 = frontier_phi_78_pred_1;
                            _4026 = frontier_phi_78_pred_2;
                            _4025 = frontier_phi_78_pred_3;
                            _4024 = frontier_phi_78_pred_4;
                            _4029 = frontier_phi_78_pred_5;
                            _3733 = _4027 + _3746;
                            _3734 = _4028 + _3747;
                            _3735 = _4029 + _3748;
                            _3730 = _4024 + _3743;
                            _3731 = _4025 + _3744;
                            _3732 = _4026 + _3745;
                            if (_3750 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3743 = _3730;
                                _3744 = _3731;
                                _3745 = _3732;
                                _3746 = _3733;
                                _3747 = _3734;
                                _3748 = _3735;
                                _3749 = _3750;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3735;
                        frontier_phi_72_pred_1 = _3734;
                        frontier_phi_72_pred_2 = _3733;
                        frontier_phi_72_pred_3 = _3732;
                        frontier_phi_72_pred_4 = _3731;
                        frontier_phi_72_pred_5 = _3730;
                    }
                    _3403 = frontier_phi_72_pred;
                    _3401 = frontier_phi_72_pred_1;
                    _3399 = frontier_phi_72_pred_2;
                    _3397 = frontier_phi_72_pred_3;
                    _3395 = frontier_phi_72_pred_4;
                    _3393 = frontier_phi_72_pred_5;
                    uint _3538 = _3537 + 1u;
                    if (_3538 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3531 = _3393;
                        _3532 = _3395;
                        _3533 = _3397;
                        _3534 = _3399;
                        _3535 = _3401;
                        _3536 = _3403;
                        _3537 = _3538;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3403;
                frontier_phi_60_61_ladder_1 = _3401;
                frontier_phi_60_61_ladder_2 = _3397;
                frontier_phi_60_61_ladder_3 = _3395;
                frontier_phi_60_61_ladder_4 = _3393;
                frontier_phi_60_61_ladder_5 = _3399;
            }
            else
            {
                frontier_phi_60_61_ladder = _3282;
                frontier_phi_60_61_ladder_1 = _3280;
                frontier_phi_60_61_ladder_2 = _3276;
                frontier_phi_60_61_ladder_3 = _3274;
                frontier_phi_60_61_ladder_4 = _3272;
                frontier_phi_60_61_ladder_5 = _3278;
            }
            _3392 = frontier_phi_60_61_ladder_4;
            _3394 = frontier_phi_60_61_ladder_3;
            _3396 = frontier_phi_60_61_ladder_2;
            _3398 = frontier_phi_60_61_ladder_5;
            _3400 = frontier_phi_60_61_ladder_1;
            _3402 = frontier_phi_60_61_ladder;
        }
        float _3407 = isnan(1.0) ? _1157 : (isnan(_1157) ? 1.0 : min(_1157, 1.0));
        _3176 = (_3407 * _3398) + _2688;
        _3178 = (_3407 * _3400) + _2690;
        _3180 = (_3407 * _3402) + _2692;
        _3182 = ((_3392 * _1142) * _3407) + _3026;
        _3184 = ((_3394 * _1144) * _3407) + _3028;
        _3186 = ((_3396 * _1145) * _3407) + _3030;
    }
    else
    {
        _3176 = _2688;
        _3178 = _2690;
        _3180 = _2692;
        _3182 = _3026;
        _3184 = _3028;
        _3186 = _3030;
    }
    uint _3192 = _1086 + uint(cbMatDynParam._m0[0u].w);
    float _3198 = (((((cbMtdParam._m0[22u].x * _866.x) * cbMtdParam._m0[32u].x) * _887) + _639) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3192].x;
    float _3199 = (((((cbMtdParam._m0[22u].y * _866.y) * cbMtdParam._m0[32u].x) * _887) + _640) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3192].y;
    float _3200 = (((((cbMtdParam._m0[22u].z * _866.z) * cbMtdParam._m0[32u].x) * _887) + _641) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3192].z;
    float _5191 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
    float _5202 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
    float _5213 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
    float _3217 = (((isnan(1.0) ? _5191 : (isnan(_5191) ? 1.0 : min(_5191, 1.0))) * (_3176 + ((isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0))) * _1157))) + ((_3182 + ((isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0))) * _1954)) * cbPerFrame._m0[3u].x)) + _3198;
    float _3219 = (_3199 + ((_3184 + ((isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0))) * _1954)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5202 : (isnan(_5202) ? 1.0 : min(_5202, 1.0))) * (_3178 + ((isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0))) * _1157)));
    float _3221 = (_3200 + ((_3186 + ((isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0))) * _1954)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5213 : (isnan(_5213) ? 1.0 : min(_5213, 1.0))) * (_3180 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1157)));
    float _5239 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3234 = isnan(1.0) ? _5239 : (isnan(_5239) ? 1.0 : min(_5239, 1.0));
    uint _3235 = _1085 + 6u;
    float _3243 = _1030 / cbSceneParam._m0[86u].x;
    float _3244 = _1031 / cbSceneParam._m0[86u].y;
    vec4 _3258 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3243, _3244, (log2((isnan(cbSceneParam._m0[77u].w) ? _985 : (isnan(_985) ? cbSceneParam._m0[77u].w : min(_985, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3260 = _3258.x;
    float _3261 = _3258.y;
    float _3262 = _3258.z;
    float _3263 = _3258.w;
    float _3334;
    float _3336;
    float _3338;
    float _3340;
    if (_985 > cbSceneParam._m0[78u].w)
    {
        float _3297 = isnan(_985) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _985 : min(cbSceneParam._m0[80u].w, _985));
        float _3298 = _3297 / _985;
        float _3309 = _3298 * _1015;
        float _3310 = _1016 * _3298;
        float _3311 = (-0.0) - _3310;
        float _3312 = _3298 * _1017;
        float _3314 = (cbSceneParam._m0[77u].w * _3311) / _3297;
        float _3315 = _3314 + cbSceneParam._m0[79u].w;
        float _3316 = cbSceneParam._m0[79u].w - _3310;
        float _3322 = sqrt(((_3309 * _3309) + (_3310 * _3310)) + (_3312 * _3312));
        float _3325 = (1.0 - (cbSceneParam._m0[77u].w / _3297)) * _3322;
        float _3330 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3332 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3493;
        if (abs((_3311 - _3314) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3493 = ((((_3315 > 0.0) ? exp2(_3330 * _3315) : (2.0 - exp2(_3332 * _3315))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3325;
        }
        else
        {
            float _3453 = 1.0 / cbSceneParam._m0[80u].x;
            float _3454 = isnan(_3316) ? _3315 : (isnan(_3315) ? _3316 : max(_3315, _3316));
            float _3455 = isnan(_3316) ? _3315 : (isnan(_3315) ? _3316 : min(_3315, _3316));
            float _3464 = isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : min(_3454, 0.0));
            float _3465 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : min(_3455, 0.0));
            _3493 = ((abs(_3322 / _3311) * cbSceneParam._m0[80u].y) * ((((_3464 - _3465) * 2.0) - ((exp2(_3330 * (isnan(0.0) ? _3454 : (isnan(_3454) ? 0.0 : max(_3454, 0.0)))) - exp2(_3330 * (isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0))))) * _3453)) - ((exp2(_3332 * _3464) - exp2(_3332 * _3465)) * _3453))) + (_3325 * cbSceneParam._m0[80u].z);
        }
        vec4 _3495 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3243, _3244, 1.0), 0.0);
        float _3504 = exp2((_3493 * (-1.44269502162933349609375)) * (1.0 - _3495.w));
        float _3505 = log2(_3504);
        float _3521 = log2(_3263);
        _3334 = (exp2(_3521 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].x)) * _3495.x) / cbSceneParam._m0[78u].x)) + _3260;
        _3336 = (exp2(_3521 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].y)) * _3495.y) / cbSceneParam._m0[78u].y)) + _3261;
        _3338 = (exp2(_3521 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3505 * cbSceneParam._m0[78u].z)) * _3495.z) / cbSceneParam._m0[78u].z)) + _3262;
        _3340 = _3504 * _3263;
    }
    else
    {
        _3334 = _3260;
        _3336 = _3261;
        _3338 = _3262;
        _3340 = _3263;
    }
    float _3351 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3352 = _3351 == 3.0;
    float _3353 = log2(_3340);
    float _3357 = exp2(_3353 * cbSceneParam._m0[78u].x);
    float _3358 = exp2(_3353 * cbSceneParam._m0[78u].y);
    float _3359 = exp2(_3353 * cbSceneParam._m0[78u].z);
    float _3360 = _3357 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0)));
    float _3361 = _3358 * (isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0)));
    float _3362 = _3359 * (isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0)));
    float _3371 = (_3351 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3371 * (_3352 ? _3360 : (_3360 + (cbSceneParam._m0[72u].w * _3334)));
    SV_Target.y = _3371 * (_3352 ? _3361 : (_3361 + (cbSceneParam._m0[72u].w * _3336)));
    SV_Target.z = _3371 * (_3352 ? _3362 : (_3362 + (cbSceneParam._m0[72u].w * _3338)));
    SV_Target.w = cbInstanceData._m0[_3235].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3198) * _3234) * _3357) * _3371;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3199) * _3234) * _3358) * _3371;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3200) * _3234) * _3359) * _3371;
    SV_Target_1.w = cbInstanceData._m0[_3235].w;
}


