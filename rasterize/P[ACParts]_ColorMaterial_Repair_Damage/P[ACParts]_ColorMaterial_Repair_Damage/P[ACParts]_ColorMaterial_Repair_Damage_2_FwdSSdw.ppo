#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1712;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _285 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_272 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _285.z;
    float _291 = _285.w;
    vec4 _313 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _318 = _313.w;
    float _330 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _290) * exp2(log2(1.0 - _318) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    vec4 _346 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _272) + cbTextureTilingScale._m0[2u].w));
    float _356 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _364 = (_356 - (((_346.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _356))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4101 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _367 = _332 - (_365 * _332);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    vec4 _382 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _385 = _382.y;
    float _386 = _385 * (isnan(1.0) ? _368 : (isnan(_368) ? 1.0 : min(_368, 1.0)));
    float _395 = exp2(log2(cbMtdParam._m0[32u].w * _318) * cbMtdParam._m0[31u].z);
    float _397 = _395 - (_365 * _395);
    float _398 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
    float _410 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_291) * 4.5));
    float _419 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _290) * _410)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _420 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _421 = isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0));
    float _432 = exp2(log2((1.0 - (((_410 * _410) * _290) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _433 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = (((isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0))) - _291) * _385) + _291;
    vec4 _449 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _272) + cbTextureTilingScale._m0[5u].w));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = cbMtdParam._m0[12u].x;
    _210[0u] = cbMtdParam._m0[12u].y;
    _211[0u] = cbMtdParam._m0[12u].z;
    _209[1u] = cbMtdParam._m0[13u].x;
    _210[1u] = cbMtdParam._m0[13u].y;
    _211[1u] = cbMtdParam._m0[13u].z;
    _209[2u] = cbMtdParam._m0[14u].x;
    _210[2u] = cbMtdParam._m0[14u].y;
    _211[2u] = cbMtdParam._m0[14u].z;
    _209[3u] = cbMtdParam._m0[15u].x;
    _210[3u] = cbMtdParam._m0[15u].y;
    _211[3u] = cbMtdParam._m0[15u].z;
    _209[4u] = cbMtdParam._m0[16u].x;
    _210[4u] = cbMtdParam._m0[16u].y;
    _211[4u] = cbMtdParam._m0[16u].z;
    _209[5u] = cbMtdParam._m0[11u].x;
    _210[5u] = cbMtdParam._m0[11u].y;
    _211[5u] = cbMtdParam._m0[11u].z;
    float _517 = (_382.x + (-0.02500000037252902984619140625)) * 8.0;
    float _519 = roundEven(_517);
    float _520 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    uint _523 = uint(int(isnan(5.0) ? _520 : (isnan(_520) ? 5.0 : min(_520, 5.0))));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = 1.0;
    _206[0u] = 1.0;
    _207[0u] = 1.0;
    _205[1u] = cbMtdParam._m0[23u].x;
    _206[1u] = cbMtdParam._m0[23u].y;
    _207[1u] = cbMtdParam._m0[23u].z;
    _205[2u] = cbMtdParam._m0[21u].x;
    _206[2u] = cbMtdParam._m0[21u].y;
    _207[2u] = cbMtdParam._m0[21u].z;
    _205[3u] = cbMtdParam._m0[19u].x;
    _206[3u] = cbMtdParam._m0[19u].y;
    _207[3u] = cbMtdParam._m0[19u].z;
    _205[4u] = cbMtdParam._m0[18u].x;
    _206[4u] = cbMtdParam._m0[18u].y;
    _207[4u] = cbMtdParam._m0[18u].z;
    _205[5u] = cbMtdParam._m0[17u].x;
    _206[5u] = cbMtdParam._m0[17u].y;
    _207[5u] = cbMtdParam._m0[17u].z;
    float _609 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _610 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    uint _612 = uint(int(isnan(5.0) ? _610 : (isnan(_610) ? 5.0 : min(_610, 5.0))));
    float _208[6];
    _208[0u] = 1.0;
    _208[1u] = cbMtdParam._m0[23u].w;
    _208[2u] = cbMtdParam._m0[21u].w;
    _208[3u] = cbMtdParam._m0[19u].w;
    _208[4u] = cbMtdParam._m0[18u].w;
    _208[5u] = cbMtdParam._m0[17u].w;
    float _649 = ((((_209[_523] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_205[_612] - _209[_523])) * _208[_523])) * _385) + cbMtdParam._m0[10u].x) * _449.x;
    float _650 = ((((_210[_523] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_206[_612] - _210[_523])) * _208[_523])) * _385) + cbMtdParam._m0[10u].y) * _449.y;
    float _651 = ((((_211[_523] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_207[_612] - _211[_523])) * _208[_523])) * _385) + cbMtdParam._m0[10u].z) * _449.z;
    vec4 _663 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _272) + cbTextureTilingScale._m0[1u].w));
    float _674 = cbMtdParam._m0[9u].x * _663.x;
    float _675 = cbMtdParam._m0[9u].y * _663.y;
    float _676 = cbMtdParam._m0[9u].z * _663.z;
    float _683 = ((_674 - _649) * _437) + _649;
    float _684 = ((_675 - _650) * _437) + _650;
    float _685 = ((_676 - _651) * _437) + _651;
    vec4 _697 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _272) + cbTextureTilingScale._m0[6u].w));
    float _717 = (((cbMtdParam._m0[20u].x * _697.x) - _683) * _421) + _683;
    float _718 = (((cbMtdParam._m0[20u].y * _697.y) - _684) * _421) + _684;
    float _719 = (((cbMtdParam._m0[20u].z * _697.z) - _685) * _421) + _685;
    vec4 _731 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _272) + cbTextureTilingScale._m0[9u].w));
    float _751 = (((cbMtdParam._m0[29u].x * _731.x) - _717) * _399) + _717;
    float _752 = (((cbMtdParam._m0[29u].y * _731.y) - _718) * _399) + _718;
    float _753 = (((cbMtdParam._m0[29u].z * _731.z) - _719) * _399) + _719;
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[30u].x;
    _203[0u] = cbMtdParam._m0[30u].y;
    _204[0u] = cbMtdParam._m0[30u].z;
    _202[1u] = cbMtdParam._m0[28u].x;
    _203[1u] = cbMtdParam._m0[28u].y;
    _204[1u] = cbMtdParam._m0[28u].z;
    _202[2u] = cbMtdParam._m0[27u].x;
    _203[2u] = cbMtdParam._m0[27u].y;
    _204[2u] = cbMtdParam._m0[27u].z;
    _202[3u] = cbMtdParam._m0[26u].x;
    _203[3u] = cbMtdParam._m0[26u].y;
    _204[3u] = cbMtdParam._m0[26u].z;
    _202[4u] = cbMtdParam._m0[25u].x;
    _203[4u] = cbMtdParam._m0[25u].y;
    _204[4u] = cbMtdParam._m0[25u].z;
    _202[5u] = cbMtdParam._m0[24u].x;
    _203[5u] = cbMtdParam._m0[24u].y;
    _204[5u] = cbMtdParam._m0[24u].z;
    float _826 = _202[_523] * _385;
    float _827 = _203[_523] * _385;
    float _828 = _204[_523] * _385;
    float _829 = _826 + ((_313.x * 4.5) * (((_674 - _751) * _386) + _751));
    float _830 = _827 + ((_313.y * 4.5) * (((_675 - _752) * _386) + _752));
    float _831 = _828 + ((_313.z * 4.5) * (((_676 - _753) * _386) + _753));
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[37u].w;
    _198[0u] = cbMtdParam._m0[38u].x;
    _197[1u] = cbMtdParam._m0[39u].w;
    _198[1u] = cbMtdParam._m0[40u].x;
    _197[2u] = cbMtdParam._m0[40u].y;
    _198[2u] = cbMtdParam._m0[40u].z;
    _197[3u] = cbMtdParam._m0[40u].w;
    _198[3u] = cbMtdParam._m0[41u].x;
    _197[4u] = cbMtdParam._m0[41u].y;
    _198[4u] = cbMtdParam._m0[41u].z;
    float _864 = roundEven(5.0 - _517);
    float _865 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _866 = isnan(4.0) ? _865 : (isnan(_865) ? 4.0 : min(_865, 4.0));
    float _868 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    uint _870 = uint(int(isnan(4.0) ? _868 : (isnan(_868) ? 4.0 : min(_868, 4.0))));
    float _879 = ((cbMtdParam._m0[42u].z - _198[_870]) * _437) + _198[_870];
    float _887 = ((cbMtdParam._m0[43u].x - _879) * _421) + _879;
    float _892 = ((cbMtdParam._m0[43u].z - _887) * _399) + _887;
    float _897 = ((cbMtdParam._m0[39u].z - _892) * _386) + _892;
    vec4 _913 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _272) + cbTextureTilingScale._m0[7u].w));
    float _915 = _913.x;
    float _916 = _913.y;
    float _918 = _913.z + _197[_870];
    vec4 _930 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _272) + cbTextureTilingScale._m0[10u].w));
    float _938 = (((cbMtdParam._m0[42u].y - _918) + _930.z) * _437) + _918;
    vec4 _950 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _272) + cbTextureTilingScale._m0[12u].w));
    float _958 = (((cbMtdParam._m0[42u].w - _938) + _950.z) * _421) + _938;
    float _964 = ((((_290 * 2.0) * _958) - _958) * cbMtdParam._m0[34u].x) + _958;
    vec4 _976 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    float _984 = (((_976.z + cbMtdParam._m0[43u].y) - _964) * _399) + _964;
    float _988 = (((cbMtdParam._m0[39u].y + _346.z) - _984) * _386) + _984;
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1052 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1021 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1025 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1069 = (-0.0) - ((_1025 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1073 = (_1025 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1074 = isnan(_1073) ? _1069 : (isnan(_1069) ? _1073 : min(_1069, _1073));
    float _4197 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1075 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _1101 = ((_930.x - _915) * _437) + _915;
    float _1102 = ((_930.y - _916) * _437) + _916;
    float _1107 = ((_950.x - _1101) * _421) + _1101;
    float _1108 = ((_950.y - _1102) * _421) + _1102;
    float _1113 = ((_976.x - _1107) * _399) + _1107;
    float _1114 = ((_976.y - _1108) * _399) + _1108;
    float _1123 = ((((_346.x - _1113) * _386) + _1113) * 2.0) + (-1.0);
    float _1124 = ((((_346.y - _1114) * _386) + _1114) * 2.0) + (-1.0);
    float _1125 = dot(vec2(_1123, _1124), vec2(_1123, _1124));
    float _4208 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1130 = sqrt(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))));
    float _1133 = (cbMtdParam._m0[34u].z * ((_285.x * 2.0) + (-1.0))) + _1123;
    float _1134 = (cbMtdParam._m0[34u].z * ((_285.y * 2.0) + (-1.0))) + _1124;
    float _1137 = fma(_1130, _251 * NORMAL.x, fma(_1134, _258 * TANGENT.x, (_244 * _236) * _1133));
    float _1140 = fma(_1130, _251 * NORMAL.y, fma(_1134, _258 * TANGENT.y, (_244 * _237) * _1133));
    float _1143 = fma(_1130, _251 * NORMAL.z, fma(_1134, _258 * TANGENT.z, (_244 * _238) * _1133));
    float _1147 = inversesqrt(dot(vec3(_1137, _1140, _1143), vec3(_1137, _1140, _1143)));
    float _1148 = _1147 * _1137;
    float _1149 = _1147 * _1140;
    float _1150 = _1147 * _1143;
    float _4219 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _1151 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
    float _4230 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4241 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4252 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4263 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _1155 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
    float _1171 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1201 = cbSceneParam._m0[71u].x - (_1021 / _1191);
    float _1202 = cbSceneParam._m0[71u].y - (_1025 / _1191);
    float _1203 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1191);
    float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
    float _1208 = _1201 * _1207;
    float _1209 = _1202 * _1207;
    float _1210 = _1203 * _1207;
    float _1216 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1217 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1219 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1221 = _1219.w;
    float _1239 = fma(_1150, cbSceneParam._m0[5u].z, fma(_1149, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1148));
    float _1242 = fma(_1150, cbSceneParam._m0[6u].z, fma(_1149, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1148));
    float _1245 = fma(_1150, cbSceneParam._m0[7u].z, fma(_1149, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1148));
    vec4 _1247 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1258 = (((_1247.y - _1151) + (_1247.w * _1151)) * cbMtdParam._m0[3u].x) + _1151;
    uint _1271 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1272 = _1271 + 9u;
    uint _1273 = _1272 + uint(cbMatDynParam._m0[0u].w);
    float _1279 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * cbInstanceData._m0[_1273].x;
    float _1280 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0)))) * cbInstanceData._m0[_1273].y;
    float _1281 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) * cbInstanceData._m0[_1273].z;
    float _4274 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
    float _1282 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
    float _4285 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
    float _1283 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
    float _4296 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    float _1284 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
    vec4 _1285 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1290 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1301 = (((_1290.x - _1155) + (_1290.w * _1155)) * cbMtdParam._m0[3u].x) + _1155;
    float _1314 = (cbMtdParam._m0[3u].x * (((_1282 * _1221) - _1282) + _1285.x)) + _1282;
    float _1315 = (cbMtdParam._m0[3u].x * (((_1283 * _1221) - _1283) + _1285.y)) + _1283;
    float _1316 = (cbMtdParam._m0[3u].x * (((_1284 * _1221) - _1284) + _1285.z)) + _1284;
    float _1317 = 1.0 - _1301;
    float _1318 = _1317 * _1314;
    float _1319 = _1317 * _1315;
    float _1320 = _1317 * _1316;
    float _1325 = (_1314 + (-0.039999999105930328369140625)) * _1301;
    float _1326 = (_1315 + (-0.039999999105930328369140625)) * _1301;
    float _1327 = (_1316 + (-0.039999999105930328369140625)) * _1301;
    float _1328 = _1325 + 0.039999999105930328369140625;
    float _1330 = _1326 + 0.039999999105930328369140625;
    float _1331 = _1327 + 0.039999999105930328369140625;
    vec4 _1340 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1216, cbSceneParam._m0[86u].y * _1217));
    float _1343 = _1340.x * TEXCOORD_5.w;
    float _1344 = dot(vec3(_1148, _1149, _1150), vec3(_1208, _1209, _1210));
    float _1347 = _1344 * 2.0;
    float _1351 = (_1347 * _1148) - _1208;
    float _1352 = (_1347 * _1149) - _1209;
    float _1353 = (_1347 * _1150) - _1210;
    float _1357 = abs(dot(vec3(_1208, _1209, _1210), vec3(_1148, _1149, _1150)));
    float _4307 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
    float _1359 = sqrt(_1258);
    float _1370 = exp2((_1359 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1359 * 3.0));
    float _1376 = (1.0 - _1370) * ((_1359 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1377 = _1370 * _1359;
    float _1405 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1409 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1413 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1711;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1438 = fma(_1413, cbModelParam._m0[26u].z, fma(_1409, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1405));
        float _1442 = fma(_1413, cbModelParam._m0[27u].z, fma(_1409, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1405));
        float _1446 = fma(_1413, cbModelParam._m0[28u].z, fma(_1409, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1405));
        float _1470 = _1405 + _1148;
        float _1471 = _1409 + _1149;
        float _1472 = _1413 + _1150;
        float _1482 = fma(_1472, cbModelParam._m0[26u].z, fma(_1471, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1470)) - _1438;
        float _1483 = fma(_1472, cbModelParam._m0[27u].z, fma(_1471, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1470)) - _1442;
        float _1484 = fma(_1472, cbModelParam._m0[28u].z, fma(_1471, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1470)) - _1446;
        float _1488 = inversesqrt(dot(vec3(_1482, _1483, _1484), vec3(_1482, _1483, _1484)));
        float _1500 = ((_1488 * _1482) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1438 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1501 = ((_1488 * _1483) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1442 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1502 = ((_1488 * _1484) / cbModelParam._m0[34u].z) + ((((((_1446 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1512 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1519 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        vec4 _1526 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1500, _1501, _1502), 0.0);
        float _1539 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1505.x + (-0.5));
        float _1541 = _1539 * (_1505.y + (-0.5));
        float _1542 = _1539 * (_1505.z + (-0.5));
        float _1549 = exp2((_1512.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1512.x + (-0.5));
        float _1551 = _1549 * (_1512.y + (-0.5));
        float _1552 = _1549 * (_1512.z + (-0.5));
        float _1559 = exp2((_1519.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1519.x + (-0.5));
        float _1561 = _1559 * (_1519.y + (-0.5));
        float _1562 = _1559 * (_1519.z + (-0.5));
        float _1569 = exp2((_1526.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1526.x + (-0.5));
        float _1571 = _1569 * (_1526.y + (-0.5));
        float _1572 = _1569 * (_1526.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1593 = (dot(vec3(_1148, _1149, _1150), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1603 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4355 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1605 + 1.0))) + _1610) * _1573;
        float _1620 = _1541 * 0.5;
        float _1621 = _1551 * 0.5;
        float _1622 = _1561 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_1148, _1149, _1150), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4388 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1647 + 1.0))) + _1652) * _1574;
        float _1662 = _1542 * 0.5;
        float _1663 = _1552 * 0.5;
        float _1664 = _1562 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_1148, _1149, _1150), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4421 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1689 + 1.0))) + _1694) * _1575;
        _1711 = _1542;
        _1713 = _1541;
        _1714 = _1540;
        _1715 = _1552;
        _1716 = _1551;
        _1717 = _1550;
        _1718 = _1562;
        _1719 = _1561;
        _1720 = _1560;
        _1721 = _1575;
        _1722 = _1574;
        _1723 = _1573;
        _1724 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1725 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1726 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1712;
        _1713 = _1712;
        _1714 = _1712;
        _1715 = _1712;
        _1716 = _1712;
        _1717 = _1712;
        _1718 = _1712;
        _1719 = _1712;
        _1720 = _1712;
        _1721 = _1712;
        _1722 = _1712;
        _1723 = _1712;
        _1724 = 0.0;
        _1725 = 0.0;
        _1726 = 0.0;
    }
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    float _2020;
    float _2021;
    float _2022;
    float _2023;
    float _2024;
    float _2025;
    float _2026;
    float _2027;
    float _2028;
    float _2029;
    float _2030;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1749 = fma(_1413, cbModelParam._m0[30u].z, fma(_1409, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1405));
        float _1753 = fma(_1413, cbModelParam._m0[31u].z, fma(_1409, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1405));
        float _1757 = fma(_1413, cbModelParam._m0[32u].z, fma(_1409, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1405));
        float _1779 = _1405 + _1148;
        float _1780 = _1409 + _1149;
        float _1781 = _1413 + _1150;
        float _1791 = fma(_1781, cbModelParam._m0[30u].z, fma(_1780, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1779)) - _1749;
        float _1792 = fma(_1781, cbModelParam._m0[31u].z, fma(_1780, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1779)) - _1753;
        float _1793 = fma(_1781, cbModelParam._m0[32u].z, fma(_1780, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1779)) - _1757;
        float _1797 = inversesqrt(dot(vec3(_1791, _1792, _1793), vec3(_1791, _1792, _1793)));
        float _1809 = ((_1797 * _1791) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1749 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1810 = ((_1797 * _1792) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1753 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1811 = ((_1797 * _1793) / cbModelParam._m0[35u].z) + ((((((_1757 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1813 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1809, _1810, _1811), 0.0);
        vec4 _1820 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1809, _1810, _1811), 0.0);
        vec4 _1827 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1809, _1810, _1811), 0.0);
        vec4 _1834 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1809, _1810, _1811), 0.0);
        float _1846 = exp2((_1813.w + (-0.5)) * 20.0) * 2.0;
        float _1847 = _1846 * (_1813.x + (-0.5));
        float _1848 = _1846 * (_1813.y + (-0.5));
        float _1849 = _1846 * (_1813.z + (-0.5));
        float _1856 = exp2((_1820.w + (-0.5)) * 20.0) * 2.0;
        float _1857 = _1856 * (_1820.x + (-0.5));
        float _1858 = _1856 * (_1820.y + (-0.5));
        float _1859 = _1856 * (_1820.z + (-0.5));
        float _1866 = exp2((_1827.w + (-0.5)) * 20.0) * 2.0;
        float _1867 = _1866 * (_1827.x + (-0.5));
        float _1868 = _1866 * (_1827.y + (-0.5));
        float _1869 = _1866 * (_1827.z + (-0.5));
        float _1876 = exp2((_1834.w + (-0.5)) * 20.0) * 2.0;
        float _1877 = _1876 * (_1834.x + (-0.5));
        float _1878 = _1876 * (_1834.y + (-0.5));
        float _1879 = _1876 * (_1834.z + (-0.5));
        float _1880 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1881 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
        float _1882 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1883 = _1847 * 0.5;
        float _1884 = _1857 * 0.5;
        float _1885 = _1867 * 0.5;
        float _1886 = dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885));
        float _1891 = (_1886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1886);
        float _1899 = (dot(vec3(_1148, _1149, _1150), vec3(_1891 * _1883, _1891 * _1884, _1891 * _1885)) + 1.0) * 0.5;
        float _4462 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
        float _1908 = sqrt(((_1884 * _1884) + (_1883 * _1883)) + (_1885 * _1885)) / (_1880 + 9.9999997473787516355514526367188e-06);
        float _4473 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
        float _1910 = _1909 * 2.0;
        float _1914 = (1.0 - _1909) / (_1909 + 1.0);
        float _4484 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
        float _1915 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
        float _1924 = ((((1.0 - _1915) * (_1910 + 2.0)) * exp2(log2(isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (_1910 + 1.0))) + _1915) * _1880;
        float _1925 = _1848 * 0.5;
        float _1926 = _1858 * 0.5;
        float _1927 = _1868 * 0.5;
        float _1928 = dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927));
        float _1933 = (_1928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1928);
        float _1941 = (dot(vec3(_1148, _1149, _1150), vec3(_1933 * _1925, _1933 * _1926, _1933 * _1927)) + 1.0) * 0.5;
        float _4495 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
        float _1950 = sqrt(((_1926 * _1926) + (_1925 * _1925)) + (_1927 * _1927)) / (_1881 + 9.9999997473787516355514526367188e-06);
        float _4506 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _1952 = _1951 * 2.0;
        float _1956 = (1.0 - _1951) / (_1951 + 1.0);
        float _4517 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1957 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
        float _1966 = ((((1.0 - _1957) * (_1952 + 2.0)) * exp2(log2(isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (_1952 + 1.0))) + _1957) * _1881;
        float _1967 = _1849 * 0.5;
        float _1968 = _1859 * 0.5;
        float _1969 = _1869 * 0.5;
        float _1970 = dot(vec3(_1967, _1968, _1969), vec3(_1967, _1968, _1969));
        float _1975 = (_1970 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1970);
        float _1983 = (dot(vec3(_1148, _1149, _1150), vec3(_1975 * _1967, _1975 * _1968, _1975 * _1969)) + 1.0) * 0.5;
        float _4528 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
        float _1992 = sqrt(((_1968 * _1968) + (_1967 * _1967)) + (_1969 * _1969)) / (_1882 + 9.9999997473787516355514526367188e-06);
        float _4539 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
        float _1994 = _1993 * 2.0;
        float _1998 = (1.0 - _1993) / (_1993 + 1.0);
        float _4550 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _1999 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
        float _2008 = ((((1.0 - _1999) * (_1994 + 2.0)) * exp2(log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))) * (_1994 + 1.0))) + _1999) * _1882;
        _2016 = _1849;
        _2017 = _1848;
        _2018 = _1847;
        _2019 = _1859;
        _2020 = _1858;
        _2021 = _1857;
        _2022 = _1869;
        _2023 = _1868;
        _2024 = _1867;
        _2025 = _1882;
        _2026 = _1881;
        _2027 = _1880;
        _2028 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0)));
        _2029 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0)));
        _2030 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)));
    }
    else
    {
        _2016 = _1712;
        _2017 = _1712;
        _2018 = _1712;
        _2019 = _1712;
        _2020 = _1712;
        _2021 = _1712;
        _2022 = _1712;
        _2023 = _1712;
        _2024 = _1712;
        _2025 = _1712;
        _2026 = _1712;
        _2027 = _1712;
        _2028 = 0.0;
        _2029 = 0.0;
        _2030 = 0.0;
    }
    float _2040 = (cbModelParam._m0[1u].x * (_2028 - _1724)) + _1724;
    float _2041 = (cbModelParam._m0[1u].x * (_2029 - _1725)) + _1725;
    float _2042 = (cbModelParam._m0[1u].x * (_2030 - _1726)) + _1726;
    float _2063 = fma(_2042, cbSceneParam._m0[89u].z, fma(_2041, cbSceneParam._m0[89u].y, _2040 * cbSceneParam._m0[89u].x));
    float _2066 = fma(_2042, cbSceneParam._m0[90u].z, fma(_2041, cbSceneParam._m0[90u].y, _2040 * cbSceneParam._m0[90u].x));
    float _2069 = fma(_2042, cbSceneParam._m0[91u].z, fma(_2041, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2040));
    float _2082 = _1351 * 0.5;
    float _2083 = _1352 * 0.5;
    float _2084 = _1353 * 0.5;
    float _2085 = dot(vec4(_2082, _2083, _2084, 1.0), vec4(_2018, _2021, _2024, _2027));
    float _2088 = dot(vec4(_2082, _2083, _2084, 1.0), vec4(_2017, _2020, _2023, _2026));
    float _2091 = dot(vec4(_2082, _2083, _2084, 1.0), vec4(_2016, _2019, _2022, _2025));
    float _2125;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2098 = dot(vec4(_2082, _2083, _2084, 1.0), vec4(_1711, _1715, _1718, _1721));
        float _2102 = dot(vec4(_2082, _2083, _2084, 1.0), vec4(_1713, _1716, _1719, _1722));
        float _2106 = dot(vec4(_2082, _2083, _2084, 1.0), vec4(_1714, _1717, _1720, _1723));
        float _2113 = dot(vec4(cbModelParam._m0[39u]), vec4(_2082, _2083, _2084, 1.0));
        _2125 = dot(vec3(isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0)), isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0)), isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2113) ? 0.0 : (isnan(0.0) ? _2113 : max(0.0, _2113))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2125 = 1.0;
    }
    float _2136;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2127 = dot(vec4(cbModelParam._m0[40u]), vec4(_2082, _2083, _2084, 1.0));
        _2136 = dot(vec3(isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0)), isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0)), isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2127) ? 0.0 : (isnan(0.0) ? _2127 : max(0.0, _2127))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2136 = 1.0;
    }
    float _2140 = (_2136 * cbModelParam._m0[1u].x) + (_2125 * (1.0 - cbModelParam._m0[1u].x));
    float _2150 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1258);
    float _2151 = isnan(_2150) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2150 : min(cbModelParam._m0[25u].z, _2150));
    float _2231;
    float _2233;
    float _2235;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2198 = fma(_1413, cbModelParam._m0[13u].z, fma(_1409, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1405)) + cbModelParam._m0[13u].w;
        float _2202 = fma(_1413, cbModelParam._m0[14u].z, fma(_1409, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1405)) + cbModelParam._m0[14u].w;
        float _2206 = fma(_1413, cbModelParam._m0[15u].z, fma(_1409, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1405)) + cbModelParam._m0[15u].w;
        float _2209 = fma(_1353, cbModelParam._m0[13u].z, fma(_1352, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1351));
        float _2212 = fma(_1353, cbModelParam._m0[14u].z, fma(_1352, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1351));
        float _2215 = fma(_1353, cbModelParam._m0[15u].z, fma(_1352, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1351));
        float _2243;
        if (_2209 > 0.0)
        {
            _2243 = abs((1.0 - _2198) / _2209);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2198 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2243 = frontier_phi_14_12_ladder;
        }
        float _2466;
        if (_2212 > 0.0)
        {
            _2466 = abs((1.0 - _2202) / _2212);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2212 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2202 + 1.0) / _2212);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2466 = frontier_phi_23_19_ladder;
        }
        float _2723;
        if (_2215 > 0.0)
        {
            _2723 = abs((1.0 - _2206) / _2215);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2215 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2206 + 1.0) / _2215);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2723 = frontier_phi_35_30_ladder;
        }
        float _2725 = isnan(_2466) ? _2243 : (isnan(_2243) ? _2466 : min(_2243, _2466));
        float _2726 = isnan(_2723) ? _2725 : (isnan(_2725) ? _2723 : min(_2725, _2723));
        float _2730 = (_2726 * _2209) + _2198;
        float _2731 = (_2726 * _2212) + _2202;
        float _2732 = (_2726 * _2215) + _2206;
        float _2733 = _2726 * 9.9999997473787516355514526367188e-05;
        float _2735 = (-1.0) - _2733;
        float _2737 = _2733 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2732 > _2737) || ((_2732 < _2735) || ((_2731 > _2737) || ((_2731 < _2735) || ((_2730 < _2735) || (_2730 > _2737))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2860 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2732, cbModelParam._m0[9u].z, fma(_2731, cbModelParam._m0[9u].y, _2730 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2732, cbModelParam._m0[10u].z, fma(_2731, cbModelParam._m0[10u].y, _2730 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2732, cbModelParam._m0[11u].z, fma(_2731, cbModelParam._m0[11u].y, _2730 * cbModelParam._m0[11u].x))), _2151);
            frontier_phi_13_35_ladder = _2860.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2860.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2860.x * cbModelParam._m0[1u].y;
        }
        _2231 = frontier_phi_13_35_ladder_2;
        _2233 = frontier_phi_13_35_ladder_1;
        _2235 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2219 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1351, _1352, _1353), _2151);
        _2231 = _2219.x * cbModelParam._m0[1u].y;
        _2233 = _2219.y * cbModelParam._m0[1u].y;
        _2235 = _2219.z * cbModelParam._m0[1u].y;
    }
    float _2239 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1258);
    float _2240 = isnan(_2239) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2239 : min(cbModelParam._m0[25u].w, _2239));
    float _2329;
    float _2331;
    float _2333;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2293 = fma(_1413, cbModelParam._m0[21u].z, fma(_1409, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1405)) + cbModelParam._m0[21u].w;
        float _2297 = fma(_1413, cbModelParam._m0[22u].z, fma(_1409, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1405)) + cbModelParam._m0[22u].w;
        float _2301 = fma(_1413, cbModelParam._m0[23u].z, fma(_1409, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1405)) + cbModelParam._m0[23u].w;
        float _2304 = fma(_1353, cbModelParam._m0[21u].z, fma(_1352, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1351));
        float _2307 = fma(_1353, cbModelParam._m0[22u].z, fma(_1352, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1351));
        float _2310 = fma(_1353, cbModelParam._m0[23u].z, fma(_1352, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1351));
        float _2471;
        if (_2304 > 0.0)
        {
            _2471 = abs((1.0 - _2293) / _2304);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2304 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2293 + 1.0) / _2304);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2471 = frontier_phi_25_21_ladder;
        }
        float _2750;
        if (_2307 > 0.0)
        {
            _2750 = abs((1.0 - _2297) / _2307);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2307 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2297 + 1.0) / _2307);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2750 = frontier_phi_37_32_ladder;
        }
        float _2963;
        if (_2310 > 0.0)
        {
            _2963 = abs((1.0 - _2301) / _2310);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2310 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2301 + 1.0) / _2310);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2963 = frontier_phi_46_43_ladder;
        }
        float _2965 = isnan(_2750) ? _2471 : (isnan(_2471) ? _2750 : min(_2471, _2750));
        float _2966 = isnan(_2963) ? _2965 : (isnan(_2965) ? _2963 : min(_2965, _2963));
        float _2970 = (_2966 * _2304) + _2293;
        float _2971 = (_2966 * _2307) + _2297;
        float _2972 = (_2966 * _2310) + _2301;
        float _2973 = _2966 * 9.9999997473787516355514526367188e-05;
        float _2974 = (-1.0) - _2973;
        float _2976 = _2973 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2972 > _2976) || ((_2972 < _2974) || ((_2971 > _2976) || ((_2971 < _2974) || ((_2970 < _2974) || (_2970 > _2976))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3200 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2972, cbModelParam._m0[17u].z, fma(_2971, cbModelParam._m0[17u].y, _2970 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2972, cbModelParam._m0[18u].z, fma(_2971, cbModelParam._m0[18u].y, _2970 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2972, cbModelParam._m0[19u].z, fma(_2971, cbModelParam._m0[19u].y, _2970 * cbModelParam._m0[19u].x))), _2240);
            frontier_phi_22_46_ladder = _3200.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3200.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3200.x * cbModelParam._m0[1u].z;
        }
        _2329 = frontier_phi_22_46_ladder_2;
        _2331 = frontier_phi_22_46_ladder_1;
        _2333 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2313 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1351, _1352, _1353), _2240);
        _2329 = _2313.x * cbModelParam._m0[1u].z;
        _2331 = _2313.y * cbModelParam._m0[1u].z;
        _2333 = _2313.z * cbModelParam._m0[1u].z;
    }
    float _2346 = (((_1376 * _1328) + _1377) * _1343) * ((cbModelParam._m0[1u].w * (_2329 - _2231)) + _2231);
    float _2348 = (((_1376 * _1330) + _1377) * _1343) * ((cbModelParam._m0[1u].w * (_2331 - _2233)) + _2233);
    float _2350 = (((_1376 * _1331) + _1377) * _1343) * ((cbModelParam._m0[1u].w * (_2333 - _2235)) + _2235);
    float _2353 = fma(_2350, cbSceneParam._m0[89u].z, fma(_2348, cbSceneParam._m0[89u].y, _2346 * cbSceneParam._m0[89u].x));
    float _2356 = fma(_2350, cbSceneParam._m0[90u].z, fma(_2348, cbSceneParam._m0[90u].y, _2346 * cbSceneParam._m0[90u].x));
    float _2359 = fma(_2350, cbSceneParam._m0[91u].z, fma(_2348, cbSceneParam._m0[91u].y, _2346 * cbSceneParam._m0[91u].x));
    vec4 _2367 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1216, _1217));
    float _2369 = _2367.w;
    float _2381 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2369);
    float _2382 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2369);
    float _2383 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2369);
    uvec4 _2387 = floatBitsToUint(cbInstanceData._m0[_1271 + 5u]);
    uint _2389 = _2387.x * 14u;
    uint _2390 = _2389 + 13u;
    float _2397 = _1343 + (-1.0);
    float _2402 = (cbLight._m0[_2390].x * _2397) + 1.0;
    float _2403 = (cbLight._m0[_2390].y * _2397) + 1.0;
    float _2404 = (cbLight._m0[_2390].z * _2397) + 1.0;
    float _2405 = (cbLight._m0[_2390].w * _2397) + 1.0;
    uint _2406 = _2389 + 5u;
    float _2412 = isnan(1.0) ? _2403 : (isnan(_2403) ? 1.0 : min(_2403, 1.0));
    uint _2416 = _2389 + 4u;
    float _2425 = isnan(1.0) ? _2402 : (isnan(_2402) ? 1.0 : min(_2402, 1.0));
    uint _2429 = _2389 | 1u;
    float _2440 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_1148, _1149, _1150));
    float _2443 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_1148, _1149, _1150));
    float _4686 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _4697 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2448 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * 0.3183098733425140380859375;
    float _2450 = (isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0))) * 0.3183098733425140380859375;
    float _2457 = ((cbLight._m0[_2406].x * _2412) * _2450) + (((cbLight._m0[_2416].x * _2381) * _2425) * _2448);
    float _2458 = ((_2412 * cbLight._m0[_2406].y) * _2450) + (((cbLight._m0[_2416].y * _2382) * _2425) * _2448);
    float _2459 = ((_2412 * cbLight._m0[_2406].z) * _2450) + (((cbLight._m0[_2416].z * _2383) * _2425) * _2448);
    uvec4 _2463 = floatBitsToUint(cbLight._m0[_2389 + 12u]);
    bool _2465 = _2463.x == 0u;
    float _2476;
    float _2478;
    float _2480;
    if (_2465)
    {
        _2476 = _2457;
        _2478 = _2458;
        _2480 = _2459;
    }
    else
    {
        uint _2484 = _2389 + 6u;
        float _2500 = (dot(vec3(cbLight._m0[_2389 + 2u].xyz), vec3(_1148, _1149, _1150)) * 0.5) + 0.5;
        float _2501 = _2500 * _2500;
        float _4708 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
        float _2502 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
        float _2503 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2476 = (((cbLight._m0[_2484].x * 0.3183098733425140380859375) * _2502) * _2503) + _2457;
        _2478 = (((cbLight._m0[_2484].y * 0.3183098733425140380859375) * _2502) * _2503) + _2458;
        _2480 = (((cbLight._m0[_2484].z * 0.3183098733425140380859375) * _2502) * _2503) + _2459;
    }
    bool _2483 = _2463.y == 0u;
    float _2521;
    float _2523;
    float _2525;
    if (_2483)
    {
        _2521 = _2476;
        _2523 = _2478;
        _2525 = _2480;
    }
    else
    {
        uint _2694 = _2389 + 7u;
        float _2710 = (dot(vec3(cbLight._m0[_2389 + 3u].xyz), vec3(_1148, _1149, _1150)) * 0.5) + 0.5;
        float _2711 = _2710 * _2710;
        float _4724 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2712 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
        float _2713 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
        _2521 = (((cbLight._m0[_2694].x * 0.3183098733425140380859375) * _2712) * _2713) + _2476;
        _2523 = (((cbLight._m0[_2694].y * 0.3183098733425140380859375) * _2712) * _2713) + _2478;
        _2525 = (((cbLight._m0[_2694].z * 0.3183098733425140380859375) * _2712) * _2713) + _2480;
    }
    uint _2528 = _2389 + 8u;
    float _2541 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2389].w)) * _1258) * 0.949999988079071044921875);
    float _2542 = _2541 * _2541;
    float _2543 = cbLight._m0[_2389].x + _1208;
    float _2544 = cbLight._m0[_2389].y + _1209;
    float _2545 = cbLight._m0[_2389].z + _1210;
    float _2549 = inversesqrt(dot(vec3(_2543, _2544, _2545), vec3(_2543, _2544, _2545)));
    float _2550 = _2549 * _2543;
    float _2551 = _2549 * _2544;
    float _2552 = _2549 * _2545;
    float _2553 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2389].xyz));
    float _4740 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
    float _2556 = isnan(1.0) ? _4740 : (isnan(_4740) ? 1.0 : min(_4740, 1.0));
    float _4751 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
    float _2557 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
    float _2558 = dot(vec3(_1148, _1149, _1150), vec3(_2550, _2551, _2552));
    float _4762 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
    float _2562 = dot(vec3(cbLight._m0[_2389].xyz), vec3(_2550, _2551, _2552));
    float _4773 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2566 = _2542 * _2542;
    float _2570 = ((_2561 * _2561) * (_2566 + (-1.0))) + 1.0;
    float _2578 = exp2(log2(1.0 - (isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0)))) * 5.0);
    float _2579 = 0.959999978542327880859375 - _1325;
    float _2581 = 0.959999978542327880859375 - _1326;
    float _2582 = 0.959999978542327880859375 - _1327;
    float _2589 = 1.0 - _2542;
    float _2600 = (0.5 / (((_2557 * ((_2556 * _2589) + _2542)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2589) + _2542) * _2556))) * _2556;
    float _4784 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
    float _2602 = (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2566 / ((_2570 * _2570) * 3.141590118408203125));
    uint _2616 = _2389 + 9u;
    float _2627 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2429].w)) * _1258) * 0.949999988079071044921875);
    float _2628 = _2627 * _2627;
    float _2629 = cbLight._m0[_2429].x + _1208;
    float _2630 = cbLight._m0[_2429].y + _1209;
    float _2631 = cbLight._m0[_2429].z + _1210;
    float _2635 = inversesqrt(dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631)));
    float _2636 = _2635 * _2629;
    float _2637 = _2635 * _2630;
    float _2638 = _2635 * _2631;
    float _2639 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2429].xyz));
    float _4795 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
    float _2643 = dot(vec3(_1148, _1149, _1150), vec3(_2636, _2637, _2638));
    float _4806 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2646 = isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0));
    float _2647 = dot(vec3(cbLight._m0[_2429].xyz), vec3(_2636, _2637, _2638));
    float _4817 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
    float _2651 = _2628 * _2628;
    float _2655 = ((_2646 * _2646) * (_2651 + (-1.0))) + 1.0;
    float _2662 = exp2(log2(1.0 - (isnan(1.0) ? _4817 : (isnan(_4817) ? 1.0 : min(_4817, 1.0)))) * 5.0);
    float _2669 = 1.0 - _2628;
    float _2679 = (0.5 / (((_2557 * ((_2642 * _2669) + _2628)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2669) + _2628) * _2642))) * _2642;
    float _4828 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
    float _2681 = (isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0))) * (_2651 / ((_2655 * _2655) * 3.141590118408203125));
    float _2691 = (((((_2662 * _2579) + _1328) * cbLight._m0[_2616].x) * _2681) * _2412) + ((((cbLight._m0[_2528].x * _2381) * ((_2578 * _2579) + _1328)) * _2602) * _2425);
    float _2692 = (((((_2662 * _2581) + _1330) * cbLight._m0[_2616].y) * _2681) * _2412) + ((((cbLight._m0[_2528].y * _2382) * ((_2578 * _2581) + _1330)) * _2602) * _2425);
    float _2693 = (((((_2662 * _2582) + _1331) * cbLight._m0[_2616].z) * _2681) * _2412) + ((((cbLight._m0[_2528].z * _2383) * ((_2578 * _2582) + _1331)) * _2602) * _2425);
    float _2755;
    float _2757;
    float _2759;
    if (_2465)
    {
        _2755 = _2691;
        _2757 = _2692;
        _2759 = _2693;
    }
    else
    {
        uint _2761 = _2389 + 2u;
        uint _2765 = _2389 + 10u;
        float _2779 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2761].w)) * _1258) * 0.949999988079071044921875);
        float _2780 = _2779 * _2779;
        float _2781 = cbLight._m0[_2761].x + _1208;
        float _2782 = cbLight._m0[_2761].y + _1209;
        float _2783 = cbLight._m0[_2761].z + _1210;
        float _2787 = inversesqrt(dot(vec3(_2781, _2782, _2783), vec3(_2781, _2782, _2783)));
        float _2788 = _2787 * _2781;
        float _2789 = _2787 * _2782;
        float _2790 = _2787 * _2783;
        float _2791 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2761].xyz));
        float _4839 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4839 : (isnan(_4839) ? 1.0 : min(_4839, 1.0));
        float _2795 = dot(vec3(_1148, _1149, _1150), vec3(_2788, _2789, _2790));
        float _4850 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2798 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2799 = dot(vec3(cbLight._m0[_2761].xyz), vec3(_2788, _2789, _2790));
        float _4861 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
        float _2803 = _2780 * _2780;
        float _2807 = ((_2798 * _2798) * (_2803 + (-1.0))) + 1.0;
        float _2814 = exp2(log2(1.0 - (isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0)))) * 5.0);
        float _2821 = 1.0 - _2780;
        float _2831 = (0.5 / (((_2557 * ((_2794 * _2821) + _2780)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2821) + _2780) * _2794))) * _2794;
        float _4872 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
        float _2833 = (isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2803 / ((_2807 * _2807) * 3.141590118408203125));
        float _2834 = isnan(1.0) ? _2404 : (isnan(_2404) ? 1.0 : min(_2404, 1.0));
        _2755 = (((((_2814 * _2579) + _1328) * cbLight._m0[_2765].x) * _2833) * _2834) + _2691;
        _2757 = (((((_2814 * _2581) + _1330) * cbLight._m0[_2765].y) * _2833) * _2834) + _2692;
        _2759 = (((((_2814 * _2582) + _1331) * cbLight._m0[_2765].z) * _2833) * _2834) + _2693;
    }
    float _2869;
    float _2871;
    float _2873;
    if (_2483)
    {
        _2869 = _2755;
        _2871 = _2757;
        _2873 = _2759;
    }
    else
    {
        uint _2880 = _2389 + 3u;
        uint _2884 = _2389 + 11u;
        float _2898 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2880].w)) * _1258) * 0.949999988079071044921875);
        float _2899 = _2898 * _2898;
        float _2900 = cbLight._m0[_2880].x + _1208;
        float _2901 = cbLight._m0[_2880].y + _1209;
        float _2902 = cbLight._m0[_2880].z + _1210;
        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
        float _2907 = _2906 * _2900;
        float _2908 = _2906 * _2901;
        float _2909 = _2906 * _2902;
        float _2910 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2880].xyz));
        float _4888 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
        float _2914 = dot(vec3(_1148, _1149, _1150), vec3(_2907, _2908, _2909));
        float _4899 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2917 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
        float _2918 = dot(vec3(cbLight._m0[_2880].xyz), vec3(_2907, _2908, _2909));
        float _4910 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0));
        float _2922 = _2899 * _2899;
        float _2926 = ((_2917 * _2917) * (_2922 + (-1.0))) + 1.0;
        float _2933 = exp2(log2(1.0 - (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0)))) * 5.0);
        float _2940 = 1.0 - _2899;
        float _2950 = (0.5 / (((_2557 * ((_2913 * _2940) + _2899)) + 9.9999999392252902907785028219223e-09) + (((_2557 * _2940) + _2899) * _2913))) * _2913;
        float _4921 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
        float _2952 = (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0))) * (_2922 / ((_2926 * _2926) * 3.141590118408203125));
        float _2953 = isnan(1.0) ? _2405 : (isnan(_2405) ? 1.0 : min(_2405, 1.0));
        _2869 = (((((_2933 * _2579) + _1328) * cbLight._m0[_2884].x) * _2952) * _2953) + _2755;
        _2871 = (((((_2933 * _2581) + _1330) * cbLight._m0[_2884].y) * _2952) * _2953) + _2757;
        _2873 = (((((_2933 * _2582) + _1331) * cbLight._m0[_2884].z) * _2952) * _2953) + _2759;
    }
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    float _3096;
    float _3098;
    if (_2387.y == 0u)
    {
        float _3028 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3029 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3028;
        float _3030 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3028;
        float _3031 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3028;
        uvec4 _3043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3044 = _3043.x;
        uint _3055 = uint((float(_3043.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1217) / _3044))) + floor(float(uint(cbSceneParam._m0[85u].x * _1216) / _3044)));
        float _3065 = (log2(_3031 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3066 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
        uint _3069 = uint(isnan(14.0) ? _3066 : (isnan(_3066) ? 14.0 : min(_3066, 14.0)));
        uvec4 _3074 = texelFetch(g_lightClusterGridBuffer, int(((_3069 << 2u) + (_3055 << 6u)) >> 2u));
        uint _3075 = _3074.x;
        uint _3076 = _3043.z;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        float _3213;
        float _3215;
        if (((((1u << ((_3076 >> 4u) & 15u)) + 4294967295u) & _3075) == 0u) || ((_3076 & 240u) == 0u))
        {
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
            _3213 = 0.0;
            _3215 = 0.0;
        }
        else
        {
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3214;
            float _3216;
            float _3357 = 0.0;
            float _3358 = 0.0;
            float _3359 = 0.0;
            float _3360 = 0.0;
            float _3361 = 0.0;
            float _3362 = 0.0;
            uint _3363 = 0u;
            uint _3372;
            bool _3373;
            for (;;)
            {
                _3372 = texelFetch(g_lightClassification, int((((_3069 << 5u) + (_3055 << 9u)) + (_3363 << 2u)) >> 2u)).x;
                _3373 = _3372 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3373)
                {
                    frontier_phi_61_pred = _3357;
                    frontier_phi_61_pred_1 = _3362;
                    frontier_phi_61_pred_2 = _3361;
                    frontier_phi_61_pred_3 = _3360;
                    frontier_phi_61_pred_4 = _3359;
                    frontier_phi_61_pred_5 = _3358;
                }
                else
                {
                    float _3481;
                    float _3482;
                    float _3483;
                    float _3484;
                    float _3485;
                    float _3486;
                    uint _3487;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3359;
                    _3484 = _3360;
                    _3485 = _3361;
                    _3486 = _3362;
                    _3487 = _3372;
                    float _3413;
                    float _3414;
                    float _3415;
                    float _3416;
                    float _3417;
                    float _3418;
                    for (;;)
                    {
                        uint _3491 = uint(findLSB(_3487)) + (_3363 << 5u);
                        uint _3488 = (_3487 + 4294967295u) & _3487;
                        uint _3493 = _3491 * 48u;
                        vec4 _3507 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3493)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3493 + 3u)).x));
                        uint _3513 = (_3491 * 48u) + 4u;
                        vec4 _3526 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3513)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3513 + 3u)).x));
                        uint _3532 = (_3491 * 48u) + 8u;
                        vec3 _3543 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3532)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3532 + 2u)).x));
                        float _3547 = _3507.x - _3029;
                        float _3548 = _3507.y - _3030;
                        float _3549 = _3507.z - _3031;
                        float _3550 = dot(vec3(_3547, _3548, _3549), vec3(_3547, _3548, _3549));
                        float _3553 = inversesqrt(_3550);
                        float _3554 = _3553 * _3547;
                        float _3555 = _3553 * _3548;
                        float _3556 = _3553 * _3549;
                        float _3557 = dot(vec3(_1239, _1242, _1245), vec3(_3554, _3555, _3556));
                        float _3562 = 1.0 - (_3550 * _3507.w);
                        float _4947 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                        float _3563 = isnan(1.0) ? _4947 : (isnan(_4947) ? 1.0 : min(_4947, 1.0));
                        float _3564 = sqrt(_3550) * _3526.w;
                        float _3567 = 1.39999997615814208984375 / (_3564 + 1.39999997615814208984375);
                        float _3568 = _3567 * _3567;
                        float _3571 = ((1.0 - _3568) * _3557) + _3568;
                        float _3574 = _3564 * _3564;
                        float _3578 = ((isnan(0.0) ? _3571 : (isnan(_3571) ? 0.0 : max(_3571, 0.0))) * _3563) / ((_3574 * 0.699999988079071044921875) + 1.0);
                        float _3582 = (-0.0) - _3029;
                        float _3583 = (-0.0) - _3030;
                        float _3584 = (-0.0) - _3031;
                        float _3588 = inversesqrt(dot(vec3(_3582, _3583, _3584), vec3(_3582, _3583, _3584)));
                        float _3589 = _3588 * _3582;
                        float _3590 = _3588 * _3583;
                        float _3591 = _3588 * _3584;
                        float _3599 = exp2(log2(1.0 / ((_3574 * 3.5) + 5.0)) * 0.25);
                        float _3600 = 1.0 - _1359;
                        float _3607 = sqrt(1.0 - ((1.0 - (_3600 * _3600)) * (1.0 - (_3599 * _3599))));
                        float _3608 = _3607 * _3607;
                        float _3609 = _3608 * _3608;
                        float _3610 = _3589 + _3554;
                        float _3611 = _3590 + _3555;
                        float _3612 = _3591 + _3556;
                        float _3616 = inversesqrt(dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612)));
                        float _3620 = dot(vec3(_1239, _1242, _1245), vec3(_3589, _3590, _3591));
                        float _4963 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3623 = isnan(1.0) ? _4963 : (isnan(_4963) ? 1.0 : min(_4963, 1.0));
                        float _3624 = dot(vec3(_1239, _1242, _1245), vec3(_3616 * _3610, _3616 * _3611, _3616 * _3612));
                        float _4974 = isnan(0.0) ? _3624 : (isnan(_3624) ? 0.0 : max(_3624, 0.0));
                        float _3627 = isnan(1.0) ? _4974 : (isnan(_4974) ? 1.0 : min(_4974, 1.0));
                        float _3631 = ((_3627 * _3627) * (_3609 + (-1.0))) + 1.0;
                        float _3632 = _3567 * _3608;
                        float _3633 = _3632 * _3632;
                        float _3636 = ((1.0 - _3633) * _3557) + _3633;
                        float _4985 = isnan(0.0) ? _3636 : (isnan(_3636) ? 0.0 : max(_3636, 0.0));
                        float _3637 = isnan(1.0) ? _4985 : (isnan(_4985) ? 1.0 : min(_4985, 1.0));
                        float _3638 = 1.0 - _3608;
                        float _3648 = (0.5 / (((_3637 * ((_3623 * _3638) + _3608)) + 9.9999999392252902907785028219223e-09) + (((_3637 * _3638) + _3608) * _3623))) * _3637;
                        float _4996 = isnan(0.0) ? _3648 : (isnan(_3648) ? 0.0 : max(_3648, 0.0));
                        float _3659 = (((_3609 * 3.1415927410125732421875) * (isnan(1.0) ? _4996 : (isnan(_4996) ? 1.0 : min(_4996, 1.0)))) / ((_3631 * _3631) * ((_3574 * 2.1991131305694580078125) + 3.141590118408203125))) * _3563;
                        _3416 = (_3578 * _3526.x) + _3484;
                        _3417 = (_3578 * _3526.y) + _3485;
                        _3418 = (_3578 * _3526.z) + _3486;
                        _3413 = (_3659 * _3543.x) + _3481;
                        _3414 = (_3659 * _3543.y) + _3482;
                        _3415 = (_3659 * _3543.z) + _3483;
                        if (_3488 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3415;
                            _3484 = _3416;
                            _3485 = _3417;
                            _3486 = _3418;
                            _3487 = _3488;
                        }
                    }
                    frontier_phi_61_pred = _3413;
                    frontier_phi_61_pred_1 = _3418;
                    frontier_phi_61_pred_2 = _3417;
                    frontier_phi_61_pred_3 = _3416;
                    frontier_phi_61_pred_4 = _3415;
                    frontier_phi_61_pred_5 = _3414;
                }
                _3206 = frontier_phi_61_pred;
                _3216 = frontier_phi_61_pred_1;
                _3214 = frontier_phi_61_pred_2;
                _3212 = frontier_phi_61_pred_3;
                _3210 = frontier_phi_61_pred_4;
                _3208 = frontier_phi_61_pred_5;
                uint _3364 = _3363 + 1u;
                if (_3364 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3357 = _3206;
                    _3358 = _3208;
                    _3359 = _3210;
                    _3360 = _3212;
                    _3361 = _3214;
                    _3362 = _3216;
                    _3363 = _3364;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
            _3213 = _3214;
            _3215 = _3216;
        }
        uvec4 _3219 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3220 = _3219.z;
        uint _3222 = (_3220 >> 8u) & 15u;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        float _3333;
        float _3335;
        if (((4294967295u << _3222) & _3075) == 0u)
        {
            _3325 = _3205;
            _3327 = _3207;
            _3329 = _3209;
            _3331 = _3211;
            _3333 = _3213;
            _3335 = _3215;
        }
        else
        {
            float _3350 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
            float _3351 = _3350 * _3029;
            float _3352 = _3350 * _3030;
            float _3353 = _3350 * _3031;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3222 < ((_3220 >> 12u) & 15u))
            {
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3334;
                float _3336;
                float _3464 = _3205;
                float _3465 = _3207;
                float _3466 = _3209;
                float _3467 = _3211;
                float _3468 = _3213;
                float _3469 = _3215;
                uint _3470 = _3222;
                uint _3479;
                bool _3480;
                for (;;)
                {
                    _3479 = texelFetch(g_lightClassification, int((((_3069 << 5u) + (_3055 << 9u)) + (_3470 << 2u)) >> 2u)).x;
                    _3480 = _3479 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3480)
                    {
                        frontier_phi_67_pred = _3467;
                        frontier_phi_67_pred_1 = _3468;
                        frontier_phi_67_pred_2 = _3469;
                        frontier_phi_67_pred_3 = _3466;
                        frontier_phi_67_pred_4 = _3465;
                        frontier_phi_67_pred_5 = _3464;
                    }
                    else
                    {
                        float _3664;
                        float _3665;
                        float _3666;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3957;
                        float _3958;
                        float _3959;
                        float _3960;
                        float _3961;
                        float _3962;
                        float _3677 = _3464;
                        float _3678 = _3465;
                        float _3679 = _3466;
                        float _3680 = _3467;
                        float _3681 = _3468;
                        float _3682 = _3469;
                        uint _3683 = _3479;
                        uint _3684;
                        vec4 _3709;
                        float _3710;
                        vec4 _3725;
                        vec3 _3737;
                        vec4 _3752;
                        vec4 _3767;
                        float _3813;
                        bool _3814;
                        for (;;)
                        {
                            uint _3694 = ((_3470 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3683));
                            _3684 = (_3683 + 4294967295u) & _3683;
                            uint _3696 = _3694 * 40u;
                            _3709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3696 + 3u)).x));
                            _3710 = _3709.w;
                            uint _3712 = (_3694 * 40u) + 4u;
                            _3725 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3712)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3712 + 3u)).x));
                            uint _3727 = (_3694 * 40u) + 8u;
                            _3737 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3727 + 2u)).x));
                            uint _3739 = (_3694 * 40u) + 16u;
                            _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            uint _3754 = (_3694 * 40u) + 20u;
                            _3767 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3754)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3754 + 3u)).x));
                            uint _3769 = (_3694 * 40u) + 24u;
                            vec4 _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3788 = (_3694 * 40u) + 28u;
                            vec4 _3801 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3788)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3788 + 3u)).x));
                            _3813 = fma(_3031, _3801.z, fma(_3030, _3801.y, _3801.x * _3029)) + _3801.w;
                            _3814 = !((fma(_3031, _3782.z, fma(_3030, _3782.y, _3782.x * _3029)) + _3782.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3814)
                            {
                                float _3841 = _3709.x - _3029;
                                float _3842 = _3709.y - _3030;
                                float _3843 = _3709.z - _3031;
                                float _3844 = dot(vec3(_3841, _3842, _3843), vec3(_3841, _3842, _3843));
                                float _3847 = inversesqrt(_3844);
                                float _3848 = _3847 * _3841;
                                float _3849 = _3847 * _3842;
                                float _3850 = _3847 * _3843;
                                float _3854 = 1.0 - (_3844 / (_3710 * _3710));
                                float _5007 = isnan(0.0) ? _3854 : (isnan(_3854) ? 0.0 : max(_3854, 0.0));
                                float _3855 = isnan(1.0) ? _5007 : (isnan(_5007) ? 1.0 : min(_5007, 1.0));
                                float _3859 = sqrt(_3844) * _3725.w;
                                float _3861 = 1.39999997615814208984375 / (_3859 + 1.39999997615814208984375);
                                float _3862 = _3861 * _3861;
                                float _3865 = ((1.0 - _3862) * dot(vec3(_3848, _3849, _3850), vec3(_1239, _1242, _1245))) + _3862;
                                float _3868 = _3859 * _3859;
                                float _3872 = (fma(_3031, _3752.z, fma(_3030, _3752.y, _3752.x * _3029)) + _3752.w) / _3813;
                                float _3873 = (fma(_3031, _3767.z, fma(_3030, _3767.y, _3767.x * _3029)) + _3767.w) / _3813;
                                float _3877 = 1.0 - dot(vec2(_3872, _3873), vec2(_3872, _3873));
                                float _5023 = isnan(0.0) ? _3877 : (isnan(_3877) ? 0.0 : max(_3877, 0.0));
                                float _3878 = isnan(1.0) ? _5023 : (isnan(_5023) ? 1.0 : min(_5023, 1.0));
                                float _3879 = _3878 * (((isnan(0.0) ? _3865 : (isnan(_3865) ? 0.0 : max(_3865, 0.0))) * _3855) / ((_3868 * 0.699999988079071044921875) + 1.0));
                                float _3891 = exp2(log2(1.0 / ((_3868 * 3.5) + 5.0)) * 0.25);
                                float _3892 = 1.0 - _1359;
                                float _3899 = sqrt(1.0 - ((1.0 - (_3892 * _3892)) * (1.0 - (_3891 * _3891))));
                                float _3900 = _3899 * _3899;
                                float _3901 = _3900 * _3900;
                                float _3902 = _3848 - _3351;
                                float _3903 = _3849 - _3352;
                                float _3904 = _3850 - _3353;
                                float _3908 = inversesqrt(dot(vec3(_3902, _3903, _3904), vec3(_3902, _3903, _3904)));
                                float _3912 = dot(vec3(_1239, _1242, _1245), vec3((-0.0) - _3351, (-0.0) - _3352, (-0.0) - _3353));
                                float _5034 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3915 = isnan(1.0) ? _5034 : (isnan(_5034) ? 1.0 : min(_5034, 1.0));
                                float _3916 = dot(vec3(_1239, _1242, _1245), vec3(_3908 * _3902, _3908 * _3903, _3908 * _3904));
                                float _5045 = isnan(0.0) ? _3916 : (isnan(_3916) ? 0.0 : max(_3916, 0.0));
                                float _3919 = isnan(1.0) ? _5045 : (isnan(_5045) ? 1.0 : min(_5045, 1.0));
                                float _3923 = ((_3919 * _3919) * (_3901 + (-1.0))) + 1.0;
                                float _3924 = _3861 * _3900;
                                float _3925 = _3924 * _3924;
                                float _3931 = ((1.0 - _3925) * dot(vec3(_1239, _1242, _1245), vec3(_3848, _3849, _3850))) + _3925;
                                float _5056 = isnan(0.0) ? _3931 : (isnan(_3931) ? 0.0 : max(_3931, 0.0));
                                float _3932 = isnan(1.0) ? _5056 : (isnan(_5056) ? 1.0 : min(_5056, 1.0));
                                float _3933 = 1.0 - _3900;
                                float _3943 = (0.5 / (((_3932 * ((_3915 * _3933) + _3900)) + 9.9999999392252902907785028219223e-09) + (((_3932 * _3933) + _3900) * _3915))) * _3932;
                                float _5067 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                                float _3953 = (_3878 * _3855) * (((_3901 * 3.1415927410125732421875) * (isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0)))) / ((_3923 * _3923) * ((_3868 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3953 * _3737.x;
                                frontier_phi_73_pred_1 = _3953 * _3737.y;
                                frontier_phi_73_pred_2 = _3879 * _3725.z;
                                frontier_phi_73_pred_3 = _3879 * _3725.y;
                                frontier_phi_73_pred_4 = _3879 * _3725.x;
                                frontier_phi_73_pred_5 = _3953 * _3737.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3957 = frontier_phi_73_pred;
                            _3958 = frontier_phi_73_pred_1;
                            _3962 = frontier_phi_73_pred_2;
                            _3961 = frontier_phi_73_pred_3;
                            _3960 = frontier_phi_73_pred_4;
                            _3959 = frontier_phi_73_pred_5;
                            _3667 = _3960 + _3680;
                            _3668 = _3961 + _3681;
                            _3669 = _3962 + _3682;
                            _3664 = _3957 + _3677;
                            _3665 = _3958 + _3678;
                            _3666 = _3959 + _3679;
                            if (_3684 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3666;
                                _3680 = _3667;
                                _3681 = _3668;
                                _3682 = _3669;
                                _3683 = _3684;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3667;
                        frontier_phi_67_pred_1 = _3668;
                        frontier_phi_67_pred_2 = _3669;
                        frontier_phi_67_pred_3 = _3666;
                        frontier_phi_67_pred_4 = _3665;
                        frontier_phi_67_pred_5 = _3664;
                    }
                    _3332 = frontier_phi_67_pred;
                    _3334 = frontier_phi_67_pred_1;
                    _3336 = frontier_phi_67_pred_2;
                    _3330 = frontier_phi_67_pred_3;
                    _3328 = frontier_phi_67_pred_4;
                    _3326 = frontier_phi_67_pred_5;
                    uint _3471 = _3470 + 1u;
                    if (_3471 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3464 = _3326;
                        _3465 = _3328;
                        _3466 = _3330;
                        _3467 = _3332;
                        _3468 = _3334;
                        _3469 = _3336;
                        _3470 = _3471;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3334;
                frontier_phi_55_56_ladder_1 = _3336;
                frontier_phi_55_56_ladder_2 = _3332;
                frontier_phi_55_56_ladder_3 = _3330;
                frontier_phi_55_56_ladder_4 = _3328;
                frontier_phi_55_56_ladder_5 = _3326;
            }
            else
            {
                frontier_phi_55_56_ladder = _3213;
                frontier_phi_55_56_ladder_1 = _3215;
                frontier_phi_55_56_ladder_2 = _3211;
                frontier_phi_55_56_ladder_3 = _3209;
                frontier_phi_55_56_ladder_4 = _3207;
                frontier_phi_55_56_ladder_5 = _3205;
            }
            _3325 = frontier_phi_55_56_ladder_5;
            _3327 = frontier_phi_55_56_ladder_4;
            _3329 = frontier_phi_55_56_ladder_3;
            _3331 = frontier_phi_55_56_ladder_2;
            _3333 = frontier_phi_55_56_ladder;
            _3335 = frontier_phi_55_56_ladder_1;
        }
        float _3340 = isnan(1.0) ? _1343 : (isnan(_1343) ? 1.0 : min(_1343, 1.0));
        _3088 = (_3340 * _3331) + _2521;
        _3090 = (_3340 * _3333) + _2523;
        _3092 = (_3340 * _3335) + _2525;
        _3094 = ((_3325 * _1328) * _3340) + _2869;
        _3096 = ((_3327 * _1330) * _3340) + _2871;
        _3098 = ((_3329 * _1331) * _3340) + _2873;
    }
    else
    {
        _3088 = _2521;
        _3090 = _2523;
        _3092 = _2525;
        _3094 = _2869;
        _3096 = _2871;
        _3098 = _2873;
    }
    uint _3104 = _1272 + uint(cbMatDynParam._m0[0u].w);
    float _3110 = (((((cbMtdParam._m0[22u].x * _1052.x) * cbMtdParam._m0[32u].x) * _1075) + _826) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3104].x;
    float _3111 = (((((cbMtdParam._m0[22u].y * _1052.y) * cbMtdParam._m0[32u].x) * _1075) + _827) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3104].y;
    float _3112 = (((((cbMtdParam._m0[22u].z * _1052.z) * cbMtdParam._m0[32u].x) * _1075) + _828) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3104].z;
    float _5083 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _5094 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
    float _5105 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
    float _3129 = (((isnan(1.0) ? _5083 : (isnan(_5083) ? 1.0 : min(_5083, 1.0))) * (_3088 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1343))) + ((_3094 + ((isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))) * _2140)) * cbPerFrame._m0[3u].x)) + _3110;
    float _3131 = (_3111 + ((_3096 + ((isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0))) * _2140)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5094 : (isnan(_5094) ? 1.0 : min(_5094, 1.0))) * (_3090 + ((isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0))) * _1343)));
    float _3133 = (_3112 + ((_3098 + ((isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0))) * _2140)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0))) * (_3092 + ((isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0))) * _1343)));
    float _5131 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3146 = isnan(1.0) ? _5131 : (isnan(_5131) ? 1.0 : min(_5131, 1.0));
    uint _3147 = _1271 + 6u;
    float _3155 = _1216 / cbSceneParam._m0[86u].x;
    float _3156 = _1217 / cbSceneParam._m0[86u].y;
    vec4 _3170 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3155, _3156, (log2((isnan(cbSceneParam._m0[77u].w) ? _1171 : (isnan(_1171) ? cbSceneParam._m0[77u].w : min(_1171, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3172 = _3170.x;
    float _3173 = _3170.y;
    float _3174 = _3170.z;
    float _3175 = _3170.w;
    float _3267;
    float _3269;
    float _3271;
    float _3273;
    if (_1171 > cbSceneParam._m0[78u].w)
    {
        float _3230 = isnan(_1171) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1171 : min(cbSceneParam._m0[80u].w, _1171));
        float _3231 = _3230 / _1171;
        float _3242 = _3231 * _1201;
        float _3243 = _1202 * _3231;
        float _3244 = (-0.0) - _3243;
        float _3245 = _3231 * _1203;
        float _3247 = (cbSceneParam._m0[77u].w * _3244) / _3230;
        float _3248 = _3247 + cbSceneParam._m0[79u].w;
        float _3249 = cbSceneParam._m0[79u].w - _3243;
        float _3255 = sqrt(((_3242 * _3242) + (_3243 * _3243)) + (_3245 * _3245));
        float _3258 = (1.0 - (cbSceneParam._m0[77u].w / _3230)) * _3255;
        float _3263 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3265 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3426;
        if (abs((_3244 - _3247) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3426 = ((((_3248 > 0.0) ? exp2(_3263 * _3248) : (2.0 - exp2(_3265 * _3248))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3258;
        }
        else
        {
            float _3386 = 1.0 / cbSceneParam._m0[80u].x;
            float _3387 = isnan(_3249) ? _3248 : (isnan(_3248) ? _3249 : max(_3248, _3249));
            float _3388 = isnan(_3249) ? _3248 : (isnan(_3248) ? _3249 : min(_3248, _3249));
            float _3397 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : min(_3387, 0.0));
            float _3398 = isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : min(_3388, 0.0));
            _3426 = ((abs(_3255 / _3244) * cbSceneParam._m0[80u].y) * ((((_3397 - _3398) * 2.0) - ((exp2(_3263 * (isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0)))) - exp2(_3263 * (isnan(0.0) ? _3388 : (isnan(_3388) ? 0.0 : max(_3388, 0.0))))) * _3386)) - ((exp2(_3265 * _3397) - exp2(_3265 * _3398)) * _3386))) + (_3258 * cbSceneParam._m0[80u].z);
        }
        vec4 _3428 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3155, _3156, 1.0), 0.0);
        float _3437 = exp2((_3426 * (-1.44269502162933349609375)) * (1.0 - _3428.w));
        float _3438 = log2(_3437);
        float _3454 = log2(_3175);
        _3267 = (exp2(_3454 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].x)) * _3428.x) / cbSceneParam._m0[78u].x)) + _3172;
        _3269 = (exp2(_3454 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].y)) * _3428.y) / cbSceneParam._m0[78u].y)) + _3173;
        _3271 = (exp2(_3454 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3438 * cbSceneParam._m0[78u].z)) * _3428.z) / cbSceneParam._m0[78u].z)) + _3174;
        _3273 = _3437 * _3175;
    }
    else
    {
        _3267 = _3172;
        _3269 = _3173;
        _3271 = _3174;
        _3273 = _3175;
    }
    float _3284 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3285 = _3284 == 3.0;
    float _3286 = log2(_3273);
    float _3290 = exp2(_3286 * cbSceneParam._m0[78u].x);
    float _3291 = exp2(_3286 * cbSceneParam._m0[78u].y);
    float _3292 = exp2(_3286 * cbSceneParam._m0[78u].z);
    float _3293 = _3290 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0)));
    float _3294 = _3291 * (isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0)));
    float _3295 = _3292 * (isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0)));
    float _3304 = (_3284 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3304 * (_3285 ? _3293 : (_3293 + (cbSceneParam._m0[72u].w * _3267)));
    SV_Target.y = _3304 * (_3285 ? _3294 : (_3294 + (cbSceneParam._m0[72u].w * _3269)));
    SV_Target.z = _3304 * (_3285 ? _3295 : (_3295 + (cbSceneParam._m0[72u].w * _3271)));
    SV_Target.w = cbInstanceData._m0[_3147].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3110) * _3146) * _3290) * _3304;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3111) * _3146) * _3291) * _3304;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3112) * _3146) * _3292) * _3304;
    SV_Target_1.w = cbInstanceData._m0[_3147].w;
}


