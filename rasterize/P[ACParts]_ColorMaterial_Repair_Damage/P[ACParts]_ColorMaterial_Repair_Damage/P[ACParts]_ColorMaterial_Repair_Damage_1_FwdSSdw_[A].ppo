#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1564;
float _4003;
float _4004;
float _4005;
float _4006;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _229 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _230 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _231 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _237 = inversesqrt(dot(vec3(_229, _230, _231), vec3(_229, _230, _231)));
    float _244 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _251 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _273 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _278 = _273.z;
    float _279 = _273.w;
    vec4 _301 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _306 = _301.w;
    float _318 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _278) * exp2(log2(1.0 - _306) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _319 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _320 = isnan(1.0) ? _319 : (isnan(_319) ? 1.0 : min(_319, 1.0));
    vec4 _334 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _344 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _352 = (_344 - (((_334.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _344))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4025 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _353 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _355 = _320 - (_353 * _320);
    float _356 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    vec4 _370 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _373 = _370.y;
    float _374 = _373 * (isnan(1.0) ? _356 : (isnan(_356) ? 1.0 : min(_356, 1.0)));
    float _383 = exp2(log2(cbMtdParam._m0[32u].w * _306) * cbMtdParam._m0[31u].z);
    float _385 = _383 - (_353 * _383);
    float _386 = isnan(0.0) ? _385 : (isnan(_385) ? 0.0 : max(_385, 0.0));
    float _387 = isnan(1.0) ? _386 : (isnan(_386) ? 1.0 : min(_386, 1.0));
    float _398 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_279) * 4.5));
    float _407 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _278) * _398)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _408 = isnan(0.0) ? _407 : (isnan(_407) ? 0.0 : max(_407, 0.0));
    float _409 = isnan(1.0) ? _408 : (isnan(_408) ? 1.0 : min(_408, 1.0));
    float _420 = exp2(log2((1.0 - (((_398 * _398) * _278) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _421 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _425 = (((isnan(1.0) ? _421 : (isnan(_421) ? 1.0 : min(_421, 1.0))) - _279) * _373) + _279;
    vec4 _437 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _450 = (_370.x + (-0.02500000037252902984619140625)) * 8.0;
    float _452 = roundEven(_450);
    float _453 = cbMtdParam._m0[10u].x * _437.x;
    float _454 = cbMtdParam._m0[10u].y * _437.y;
    float _455 = cbMtdParam._m0[10u].z * _437.z;
    vec4 _467 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _478 = cbMtdParam._m0[9u].x * _467.x;
    float _479 = cbMtdParam._m0[9u].y * _467.y;
    float _480 = cbMtdParam._m0[9u].z * _467.z;
    float _487 = ((_478 - _453) * _425) + _453;
    float _488 = ((_479 - _454) * _425) + _454;
    float _489 = ((_480 - _455) * _425) + _455;
    vec4 _501 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _521 = (((cbMtdParam._m0[20u].x * _501.x) - _487) * _409) + _487;
    float _522 = (((cbMtdParam._m0[20u].y * _501.y) - _488) * _409) + _488;
    float _523 = (((cbMtdParam._m0[20u].z * _501.z) - _489) * _409) + _489;
    vec4 _535 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _555 = (((cbMtdParam._m0[29u].x * _535.x) - _521) * _387) + _521;
    float _556 = (((cbMtdParam._m0[29u].y * _535.y) - _522) * _387) + _522;
    float _557 = (((cbMtdParam._m0[29u].z * _535.z) - _523) * _387) + _523;
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[30u].x;
    _203[0u] = cbMtdParam._m0[30u].y;
    _204[0u] = cbMtdParam._m0[30u].z;
    _202[1u] = cbMtdParam._m0[28u].x;
    _203[1u] = cbMtdParam._m0[28u].y;
    _204[1u] = cbMtdParam._m0[28u].z;
    _202[2u] = cbMtdParam._m0[27u].x;
    _203[2u] = cbMtdParam._m0[27u].y;
    _204[2u] = cbMtdParam._m0[27u].z;
    _202[3u] = cbMtdParam._m0[26u].x;
    _203[3u] = cbMtdParam._m0[26u].y;
    _204[3u] = cbMtdParam._m0[26u].z;
    _202[4u] = cbMtdParam._m0[25u].x;
    _203[4u] = cbMtdParam._m0[25u].y;
    _204[4u] = cbMtdParam._m0[25u].z;
    _202[5u] = cbMtdParam._m0[24u].x;
    _203[5u] = cbMtdParam._m0[24u].y;
    _204[5u] = cbMtdParam._m0[24u].z;
    float _626 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    uint _629 = uint(int(isnan(5.0) ? _626 : (isnan(_626) ? 5.0 : min(_626, 5.0))));
    float _636 = _202[_629] * _373;
    float _637 = _203[_629] * _373;
    float _638 = _204[_629] * _373;
    float _639 = _636 + ((_301.x * 4.5) * (((_478 - _555) * _374) + _555));
    float _640 = _637 + ((_301.y * 4.5) * (((_479 - _556) * _374) + _556));
    float _641 = _638 + ((_301.z * 4.5) * (((_480 - _557) * _374) + _557));
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[37u].w;
    _198[0u] = cbMtdParam._m0[38u].x;
    _197[1u] = cbMtdParam._m0[39u].w;
    _198[1u] = cbMtdParam._m0[40u].x;
    _197[2u] = cbMtdParam._m0[40u].y;
    _198[2u] = cbMtdParam._m0[40u].z;
    _197[3u] = cbMtdParam._m0[40u].w;
    _198[3u] = cbMtdParam._m0[41u].x;
    _197[4u] = cbMtdParam._m0[41u].y;
    _198[4u] = cbMtdParam._m0[41u].z;
    float _674 = roundEven(5.0 - _450);
    float _675 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _676 = isnan(4.0) ? _675 : (isnan(_675) ? 4.0 : min(_675, 4.0));
    float _678 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    uint _680 = uint(int(isnan(4.0) ? _678 : (isnan(_678) ? 4.0 : min(_678, 4.0))));
    float _692 = ((cbMtdParam._m0[42u].z - _198[_680]) * _425) + _198[_680];
    float _700 = ((cbMtdParam._m0[43u].x - _692) * _409) + _692;
    float _705 = ((cbMtdParam._m0[43u].z - _700) * _387) + _700;
    float _710 = ((cbMtdParam._m0[39u].z - _705) * _374) + _705;
    vec4 _724 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _726 = _724.x;
    float _727 = _724.y;
    float _729 = _724.z + _197[_680];
    vec4 _741 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _749 = (((cbMtdParam._m0[42u].y - _729) + _741.z) * _425) + _729;
    vec4 _762 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _770 = (((cbMtdParam._m0[42u].w - _749) + _762.z) * _409) + _749;
    float _776 = ((((_278 * 2.0) * _770) - _770) * cbMtdParam._m0[34u].x) + _770;
    vec4 _789 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _797 = (((_789.z + cbMtdParam._m0[43u].y) - _776) * _387) + _776;
    float _801 = (((cbMtdParam._m0[39u].y + _334.z) - _797) * _374) + _797;
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _864 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_833 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_837 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _879 = (-0.0) - ((_837 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _883 = (_837 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _884 = isnan(_883) ? _879 : (isnan(_879) ? _883 : min(_879, _883));
    float _4111 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _885 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _913 = ((_741.x - _726) * _425) + _726;
    float _914 = ((_741.y - _727) * _425) + _727;
    float _919 = ((_762.x - _913) * _409) + _913;
    float _920 = ((_762.y - _914) * _409) + _914;
    float _925 = ((_789.x - _919) * _387) + _919;
    float _926 = ((_789.y - _920) * _387) + _920;
    float _935 = ((((_334.x - _925) * _374) + _925) * 2.0) + (-1.0);
    float _936 = ((((_334.y - _926) * _374) + _926) * 2.0) + (-1.0);
    float _937 = dot(vec2(_935, _936), vec2(_935, _936));
    float _4122 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _942 = sqrt(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))));
    float _945 = (cbMtdParam._m0[34u].z * ((_273.x * 2.0) + (-1.0))) + _935;
    float _946 = (cbMtdParam._m0[34u].z * ((_273.y * 2.0) + (-1.0))) + _936;
    float _949 = fma(_942, _244 * NORMAL.x, fma(_946, _251 * TANGENT.x, (_237 * _229) * _945));
    float _952 = fma(_942, _244 * NORMAL.y, fma(_946, _251 * TANGENT.y, (_237 * _230) * _945));
    float _955 = fma(_942, _244 * NORMAL.z, fma(_946, _251 * TANGENT.z, (_237 * _231) * _945));
    float _959 = inversesqrt(dot(vec3(_949, _952, _955), vec3(_949, _952, _955)));
    float _960 = _959 * _949;
    float _961 = _959 * _952;
    float _962 = _959 * _955;
    float _4133 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _963 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _4144 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4155 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4166 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4177 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _967 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
    float _983 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1003 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1013 = cbSceneParam._m0[71u].x - (_833 / _1003);
    float _1014 = cbSceneParam._m0[71u].y - (_837 / _1003);
    float _1015 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1003);
    float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
    float _1020 = _1013 * _1019;
    float _1021 = _1014 * _1019;
    float _1022 = _1015 * _1019;
    vec4 _1027 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1029 = _1027.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1247 = sqrt(((_1013 * _1013) + (_1014 * _1014)) + (_1015 * _1015));
        float _1253 = (cbMatDynParam._m0[5u].x * _1247) + cbMatDynParam._m0[5u].y;
        float _4188 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1258 = (cbMatDynParam._m0[5u].z * _1247) + cbMatDynParam._m0[5u].w;
        float _4199 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) - _1254)) + _1254) < ((_1029 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1040 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1041 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1043 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1045 = _1043.w;
    float _1063 = fma(_962, cbSceneParam._m0[5u].z, fma(_961, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _960));
    float _1066 = fma(_962, cbSceneParam._m0[6u].z, fma(_961, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _960));
    float _1069 = fma(_962, cbSceneParam._m0[7u].z, fma(_961, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _960));
    vec4 _1071 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1082 = (((_1071.y - _963) + (_1071.w * _963)) * cbMtdParam._m0[3u].x) + _963;
    uint _1095 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1096 = _1095 + 9u;
    uint _1097 = _1096 + uint(cbMatDynParam._m0[0u].w);
    float _1103 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0)))) * cbInstanceData._m0[_1097].x;
    float _1104 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * cbInstanceData._m0[_1097].y;
    float _1105 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * cbInstanceData._m0[_1097].z;
    float _4210 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
    float _4221 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
    float _1107 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
    float _4232 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
    vec4 _1109 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1114 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1125 = (((_1114.x - _967) + (_1114.w * _967)) * cbMtdParam._m0[3u].x) + _967;
    float _1138 = (cbMtdParam._m0[3u].x * (((_1106 * _1045) - _1106) + _1109.x)) + _1106;
    float _1139 = (cbMtdParam._m0[3u].x * (((_1107 * _1045) - _1107) + _1109.y)) + _1107;
    float _1140 = (cbMtdParam._m0[3u].x * (((_1108 * _1045) - _1108) + _1109.z)) + _1108;
    float _1141 = 1.0 - _1125;
    float _1142 = _1141 * _1138;
    float _1143 = _1141 * _1139;
    float _1144 = _1141 * _1140;
    float _1149 = (_1138 + (-0.039999999105930328369140625)) * _1125;
    float _1150 = (_1139 + (-0.039999999105930328369140625)) * _1125;
    float _1151 = (_1140 + (-0.039999999105930328369140625)) * _1125;
    float _1152 = _1149 + 0.039999999105930328369140625;
    float _1154 = _1150 + 0.039999999105930328369140625;
    float _1155 = _1151 + 0.039999999105930328369140625;
    vec4 _1164 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1040, cbSceneParam._m0[86u].y * _1041));
    float _1167 = _1164.x * TEXCOORD_5.w;
    float _1168 = dot(vec3(_960, _961, _962), vec3(_1020, _1021, _1022));
    float _1171 = _1168 * 2.0;
    float _1175 = (_1171 * _960) - _1020;
    float _1176 = (_1171 * _961) - _1021;
    float _1177 = (_1171 * _962) - _1022;
    float _1181 = abs(dot(vec3(_1020, _1021, _1022), vec3(_960, _961, _962)));
    float _4243 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
    float _1183 = sqrt(_1082);
    float _1194 = exp2((_1183 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1183 * 3.0));
    float _1200 = (1.0 - _1194) * ((_1183 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1201 = _1194 * _1183;
    float _1229 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1233 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1237 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1563;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1290 = fma(_1237, cbModelParam._m0[26u].z, fma(_1233, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1229));
        float _1294 = fma(_1237, cbModelParam._m0[27u].z, fma(_1233, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1229));
        float _1298 = fma(_1237, cbModelParam._m0[28u].z, fma(_1233, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1229));
        float _1322 = _1229 + _960;
        float _1323 = _1233 + _961;
        float _1324 = _1237 + _962;
        float _1334 = fma(_1324, cbModelParam._m0[26u].z, fma(_1323, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1322)) - _1290;
        float _1335 = fma(_1324, cbModelParam._m0[27u].z, fma(_1323, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1322)) - _1294;
        float _1336 = fma(_1324, cbModelParam._m0[28u].z, fma(_1323, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1322)) - _1298;
        float _1340 = inversesqrt(dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336)));
        float _1352 = ((_1340 * _1334) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1290 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1340 * _1335) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1294 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1354 = ((_1340 * _1336) / cbModelParam._m0[34u].z) + ((((((_1298 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1371 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1352, _1353, _1354), 0.0);
        float _1391 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1392 = _1391 * (_1357.x + (-0.5));
        float _1393 = _1391 * (_1357.y + (-0.5));
        float _1394 = _1391 * (_1357.z + (-0.5));
        float _1401 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1402 = _1401 * (_1364.x + (-0.5));
        float _1403 = _1401 * (_1364.y + (-0.5));
        float _1404 = _1401 * (_1364.z + (-0.5));
        float _1411 = exp2((_1371.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1371.x + (-0.5));
        float _1413 = _1411 * (_1371.y + (-0.5));
        float _1414 = _1411 * (_1371.z + (-0.5));
        float _1421 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1378.x + (-0.5));
        float _1423 = _1421 * (_1378.y + (-0.5));
        float _1424 = _1421 * (_1378.z + (-0.5));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = _1392 * 0.5;
        float _1429 = _1402 * 0.5;
        float _1430 = _1412 * 0.5;
        float _1431 = dot(vec3(_1428, _1429, _1430), vec3(_1428, _1429, _1430));
        float _1436 = (_1431 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1431);
        float _1445 = (dot(vec3(_960, _961, _962), vec3(_1436 * _1428, _1436 * _1429, _1436 * _1430)) + 1.0) * 0.5;
        float _4269 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1455 = sqrt(((_1429 * _1429) + (_1428 * _1428)) + (_1430 * _1430)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4280 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4291 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_1457 + 1.0))) + _1462) * _1425;
        float _1472 = _1393 * 0.5;
        float _1473 = _1403 * 0.5;
        float _1474 = _1413 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_960, _961, _962), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4302 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1426 + 9.9999997473787516355514526367188e-06);
        float _4313 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4324 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_1499 + 1.0))) + _1504) * _1426;
        float _1514 = _1394 * 0.5;
        float _1515 = _1404 * 0.5;
        float _1516 = _1414 * 0.5;
        float _1517 = dot(vec3(_1514, _1515, _1516), vec3(_1514, _1515, _1516));
        float _1522 = (_1517 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1517);
        float _1530 = (dot(vec3(_960, _961, _962), vec3(_1522 * _1514, _1522 * _1515, _1522 * _1516)) + 1.0) * 0.5;
        float _4335 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1539 = sqrt(((_1515 * _1515) + (_1514 * _1514)) + (_1516 * _1516)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4346 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1540 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _1541 = _1540 * 2.0;
        float _1545 = (1.0 - _1540) / (_1540 + 1.0);
        float _4357 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _1555 = ((((1.0 - _1546) * (_1541 + 2.0)) * exp2(log2(isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_1541 + 1.0))) + _1546) * _1427;
        _1563 = _1394;
        _1565 = _1393;
        _1566 = _1392;
        _1567 = _1404;
        _1568 = _1403;
        _1569 = _1402;
        _1570 = _1414;
        _1571 = _1413;
        _1572 = _1412;
        _1573 = _1427;
        _1574 = _1426;
        _1575 = _1425;
        _1576 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1577 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
        _1578 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)));
    }
    else
    {
        _1563 = _1564;
        _1565 = _1564;
        _1566 = _1564;
        _1567 = _1564;
        _1568 = _1564;
        _1569 = _1564;
        _1570 = _1564;
        _1571 = _1564;
        _1572 = _1564;
        _1573 = _1564;
        _1574 = _1564;
        _1575 = _1564;
        _1576 = 0.0;
        _1577 = 0.0;
        _1578 = 0.0;
    }
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1604 = fma(_1237, cbModelParam._m0[30u].z, fma(_1233, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1229));
        float _1608 = fma(_1237, cbModelParam._m0[31u].z, fma(_1233, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1229));
        float _1612 = fma(_1237, cbModelParam._m0[32u].z, fma(_1233, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1229));
        float _1634 = _1229 + _960;
        float _1635 = _1233 + _961;
        float _1636 = _1237 + _962;
        float _1646 = fma(_1636, cbModelParam._m0[30u].z, fma(_1635, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1634)) - _1604;
        float _1647 = fma(_1636, cbModelParam._m0[31u].z, fma(_1635, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1634)) - _1608;
        float _1648 = fma(_1636, cbModelParam._m0[32u].z, fma(_1635, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1634)) - _1612;
        float _1652 = inversesqrt(dot(vec3(_1646, _1647, _1648), vec3(_1646, _1647, _1648)));
        float _1664 = ((_1652 * _1646) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1604 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1665 = ((_1652 * _1647) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1608 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1666 = ((_1652 * _1648) / cbModelParam._m0[35u].z) + ((((((_1612 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1668 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1675 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1682 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        vec4 _1689 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1664, _1665, _1666), 0.0);
        float _1701 = exp2((_1668.w + (-0.5)) * 20.0) * 2.0;
        float _1702 = _1701 * (_1668.x + (-0.5));
        float _1703 = _1701 * (_1668.y + (-0.5));
        float _1704 = _1701 * (_1668.z + (-0.5));
        float _1711 = exp2((_1675.w + (-0.5)) * 20.0) * 2.0;
        float _1712 = _1711 * (_1675.x + (-0.5));
        float _1713 = _1711 * (_1675.y + (-0.5));
        float _1714 = _1711 * (_1675.z + (-0.5));
        float _1721 = exp2((_1682.w + (-0.5)) * 20.0) * 2.0;
        float _1722 = _1721 * (_1682.x + (-0.5));
        float _1723 = _1721 * (_1682.y + (-0.5));
        float _1724 = _1721 * (_1682.z + (-0.5));
        float _1731 = exp2((_1689.w + (-0.5)) * 20.0) * 2.0;
        float _1732 = _1731 * (_1689.x + (-0.5));
        float _1733 = _1731 * (_1689.y + (-0.5));
        float _1734 = _1731 * (_1689.z + (-0.5));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = _1702 * 0.5;
        float _1739 = _1712 * 0.5;
        float _1740 = _1722 * 0.5;
        float _1741 = dot(vec3(_1738, _1739, _1740), vec3(_1738, _1739, _1740));
        float _1746 = (_1741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1741);
        float _1754 = (dot(vec3(_960, _961, _962), vec3(_1746 * _1738, _1746 * _1739, _1746 * _1740)) + 1.0) * 0.5;
        float _4398 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
        float _1763 = sqrt(((_1739 * _1739) + (_1738 * _1738)) + (_1740 * _1740)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4409 = isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0));
        float _1764 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
        float _1765 = _1764 * 2.0;
        float _1769 = (1.0 - _1764) / (_1764 + 1.0);
        float _4420 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
        float _1770 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _1779 = ((((1.0 - _1770) * (_1765 + 2.0)) * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * (_1765 + 1.0))) + _1770) * _1735;
        float _1780 = _1703 * 0.5;
        float _1781 = _1713 * 0.5;
        float _1782 = _1723 * 0.5;
        float _1783 = dot(vec3(_1780, _1781, _1782), vec3(_1780, _1781, _1782));
        float _1788 = (_1783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1783);
        float _1796 = (dot(vec3(_960, _961, _962), vec3(_1788 * _1780, _1788 * _1781, _1788 * _1782)) + 1.0) * 0.5;
        float _4431 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
        float _1805 = sqrt(((_1781 * _1781) + (_1780 * _1780)) + (_1782 * _1782)) / (_1736 + 9.9999997473787516355514526367188e-06);
        float _4442 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
        float _1806 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
        float _1807 = _1806 * 2.0;
        float _1811 = (1.0 - _1806) / (_1806 + 1.0);
        float _4453 = isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0));
        float _1812 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _1821 = ((((1.0 - _1812) * (_1807 + 2.0)) * exp2(log2(isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0))) * (_1807 + 1.0))) + _1812) * _1736;
        float _1822 = _1704 * 0.5;
        float _1823 = _1714 * 0.5;
        float _1824 = _1724 * 0.5;
        float _1825 = dot(vec3(_1822, _1823, _1824), vec3(_1822, _1823, _1824));
        float _1830 = (_1825 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1825);
        float _1838 = (dot(vec3(_960, _961, _962), vec3(_1830 * _1822, _1830 * _1823, _1830 * _1824)) + 1.0) * 0.5;
        float _4464 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1847 = sqrt(((_1823 * _1823) + (_1822 * _1822)) + (_1824 * _1824)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4475 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
        float _1848 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
        float _1849 = _1848 * 2.0;
        float _1853 = (1.0 - _1848) / (_1848 + 1.0);
        float _4486 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
        float _1854 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _1863 = ((((1.0 - _1854) * (_1849 + 2.0)) * exp2(log2(isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_1849 + 1.0))) + _1854) * _1737;
        _1871 = _1704;
        _1872 = _1703;
        _1873 = _1702;
        _1874 = _1714;
        _1875 = _1713;
        _1876 = _1712;
        _1877 = _1724;
        _1878 = _1723;
        _1879 = _1722;
        _1880 = _1737;
        _1881 = _1736;
        _1882 = _1735;
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)));
        _1884 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0)));
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0)));
    }
    else
    {
        _1871 = _1564;
        _1872 = _1564;
        _1873 = _1564;
        _1874 = _1564;
        _1875 = _1564;
        _1876 = _1564;
        _1877 = _1564;
        _1878 = _1564;
        _1879 = _1564;
        _1880 = _1564;
        _1881 = _1564;
        _1882 = _1564;
        _1883 = 0.0;
        _1884 = 0.0;
        _1885 = 0.0;
    }
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1576)) + _1576;
    float _1896 = (cbModelParam._m0[1u].x * (_1884 - _1577)) + _1577;
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1578)) + _1578;
    float _1918 = fma(_1897, cbSceneParam._m0[89u].z, fma(_1896, cbSceneParam._m0[89u].y, _1895 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1897, cbSceneParam._m0[90u].z, fma(_1896, cbSceneParam._m0[90u].y, _1895 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1897, cbSceneParam._m0[91u].z, fma(_1896, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1895));
    float _1937 = _1175 * 0.5;
    float _1938 = _1176 * 0.5;
    float _1939 = _1177 * 0.5;
    float _1940 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1943 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1872, _1875, _1878, _1881));
    float _1946 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1980;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1953 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1563, _1567, _1570, _1573));
        float _1957 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1565, _1568, _1571, _1574));
        float _1961 = dot(vec4(_1937, _1938, _1939, 1.0), vec4(_1566, _1569, _1572, _1575));
        float _1968 = dot(vec4(cbModelParam._m0[39u]), vec4(_1937, _1938, _1939, 1.0));
        _1980 = dot(vec3(isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0)), isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0)), isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1968) ? 0.0 : (isnan(0.0) ? _1968 : max(0.0, _1968))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1980 = 1.0;
    }
    float _1991;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1982 = dot(vec4(cbModelParam._m0[40u]), vec4(_1937, _1938, _1939, 1.0));
        _1991 = dot(vec3(isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0)), isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0)), isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1982) ? 0.0 : (isnan(0.0) ? _1982 : max(0.0, _1982))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1991 = 1.0;
    }
    float _1995 = (_1991 * cbModelParam._m0[1u].x) + (_1980 * (1.0 - cbModelParam._m0[1u].x));
    float _2005 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1082);
    float _2006 = isnan(_2005) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2005 : min(cbModelParam._m0[25u].z, _2005));
    float _2088;
    float _2090;
    float _2092;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2055 = fma(_1237, cbModelParam._m0[13u].z, fma(_1233, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1229)) + cbModelParam._m0[13u].w;
        float _2059 = fma(_1237, cbModelParam._m0[14u].z, fma(_1233, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1229)) + cbModelParam._m0[14u].w;
        float _2063 = fma(_1237, cbModelParam._m0[15u].z, fma(_1233, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1229)) + cbModelParam._m0[15u].w;
        float _2066 = fma(_1177, cbModelParam._m0[13u].z, fma(_1176, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1175));
        float _2069 = fma(_1177, cbModelParam._m0[14u].z, fma(_1176, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1175));
        float _2072 = fma(_1177, cbModelParam._m0[15u].z, fma(_1176, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1175));
        float _2100;
        if (_2066 > 0.0)
        {
            _2100 = abs((1.0 - _2055) / _2066);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2066 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2055 + 1.0) / _2066);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2100 = frontier_phi_17_15_ladder;
        }
        float _2326;
        if (_2069 > 0.0)
        {
            _2326 = abs((1.0 - _2059) / _2069);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2069 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2059 + 1.0) / _2069);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2326 = frontier_phi_26_22_ladder;
        }
        float _2583;
        if (_2072 > 0.0)
        {
            _2583 = abs((1.0 - _2063) / _2072);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2072 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2063 + 1.0) / _2072);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2583 = frontier_phi_38_33_ladder;
        }
        float _2585 = isnan(_2326) ? _2100 : (isnan(_2100) ? _2326 : min(_2100, _2326));
        float _2586 = isnan(_2583) ? _2585 : (isnan(_2585) ? _2583 : min(_2585, _2583));
        float _2590 = (_2586 * _2066) + _2055;
        float _2591 = (_2586 * _2069) + _2059;
        float _2592 = (_2586 * _2072) + _2063;
        float _2593 = _2586 * 9.9999997473787516355514526367188e-05;
        float _2595 = (-1.0) - _2593;
        float _2597 = _2593 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2592 > _2597) || ((_2592 < _2595) || ((_2591 > _2597) || ((_2591 < _2595) || ((_2590 < _2595) || (_2590 > _2597))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2592, cbModelParam._m0[9u].z, fma(_2591, cbModelParam._m0[9u].y, _2590 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2592, cbModelParam._m0[10u].z, fma(_2591, cbModelParam._m0[10u].y, _2590 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2592, cbModelParam._m0[11u].z, fma(_2591, cbModelParam._m0[11u].y, _2590 * cbModelParam._m0[11u].x))), _2006);
            frontier_phi_16_38_ladder = _2720.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2720.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2720.x * cbModelParam._m0[1u].y;
        }
        _2088 = frontier_phi_16_38_ladder_2;
        _2090 = frontier_phi_16_38_ladder_1;
        _2092 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2076 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1175, _1176, _1177), _2006);
        _2088 = _2076.x * cbModelParam._m0[1u].y;
        _2090 = _2076.y * cbModelParam._m0[1u].y;
        _2092 = _2076.z * cbModelParam._m0[1u].y;
    }
    float _2096 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1082);
    float _2097 = isnan(_2096) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2096 : min(cbModelParam._m0[25u].w, _2096));
    float _2189;
    float _2191;
    float _2193;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2153 = fma(_1237, cbModelParam._m0[21u].z, fma(_1233, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1229)) + cbModelParam._m0[21u].w;
        float _2157 = fma(_1237, cbModelParam._m0[22u].z, fma(_1233, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1229)) + cbModelParam._m0[22u].w;
        float _2161 = fma(_1237, cbModelParam._m0[23u].z, fma(_1233, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1229)) + cbModelParam._m0[23u].w;
        float _2164 = fma(_1177, cbModelParam._m0[21u].z, fma(_1176, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1175));
        float _2167 = fma(_1177, cbModelParam._m0[22u].z, fma(_1176, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1175));
        float _2170 = fma(_1177, cbModelParam._m0[23u].z, fma(_1176, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1175));
        float _2331;
        if (_2164 > 0.0)
        {
            _2331 = abs((1.0 - _2153) / _2164);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2164 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2153 + 1.0) / _2164);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2331 = frontier_phi_28_24_ladder;
        }
        float _2610;
        if (_2167 > 0.0)
        {
            _2610 = abs((1.0 - _2157) / _2167);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2167 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2157 + 1.0) / _2167);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2610 = frontier_phi_40_35_ladder;
        }
        float _2823;
        if (_2170 > 0.0)
        {
            _2823 = abs((1.0 - _2161) / _2170);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2170 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2161 + 1.0) / _2170);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2823 = frontier_phi_49_46_ladder;
        }
        float _2825 = isnan(_2610) ? _2331 : (isnan(_2331) ? _2610 : min(_2331, _2610));
        float _2826 = isnan(_2823) ? _2825 : (isnan(_2825) ? _2823 : min(_2825, _2823));
        float _2830 = (_2826 * _2164) + _2153;
        float _2831 = (_2826 * _2167) + _2157;
        float _2832 = (_2826 * _2170) + _2161;
        float _2833 = _2826 * 9.9999997473787516355514526367188e-05;
        float _2834 = (-1.0) - _2833;
        float _2836 = _2833 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2832 > _2836) || ((_2832 < _2834) || ((_2831 > _2836) || ((_2831 < _2834) || ((_2830 < _2834) || (_2830 > _2836))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2832, cbModelParam._m0[17u].z, fma(_2831, cbModelParam._m0[17u].y, _2830 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2832, cbModelParam._m0[18u].z, fma(_2831, cbModelParam._m0[18u].y, _2830 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2832, cbModelParam._m0[19u].z, fma(_2831, cbModelParam._m0[19u].y, _2830 * cbModelParam._m0[19u].x))), _2097);
            frontier_phi_25_49_ladder = _3060.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3060.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3060.x * cbModelParam._m0[1u].z;
        }
        _2189 = frontier_phi_25_49_ladder_2;
        _2191 = frontier_phi_25_49_ladder_1;
        _2193 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2173 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1175, _1176, _1177), _2097);
        _2189 = _2173.x * cbModelParam._m0[1u].z;
        _2191 = _2173.y * cbModelParam._m0[1u].z;
        _2193 = _2173.z * cbModelParam._m0[1u].z;
    }
    float _2206 = (((_1200 * _1152) + _1201) * _1167) * ((cbModelParam._m0[1u].w * (_2189 - _2088)) + _2088);
    float _2208 = (((_1200 * _1154) + _1201) * _1167) * ((cbModelParam._m0[1u].w * (_2191 - _2090)) + _2090);
    float _2210 = (((_1200 * _1155) + _1201) * _1167) * ((cbModelParam._m0[1u].w * (_2193 - _2092)) + _2092);
    float _2213 = fma(_2210, cbSceneParam._m0[89u].z, fma(_2208, cbSceneParam._m0[89u].y, _2206 * cbSceneParam._m0[89u].x));
    float _2216 = fma(_2210, cbSceneParam._m0[90u].z, fma(_2208, cbSceneParam._m0[90u].y, _2206 * cbSceneParam._m0[90u].x));
    float _2219 = fma(_2210, cbSceneParam._m0[91u].z, fma(_2208, cbSceneParam._m0[91u].y, _2206 * cbSceneParam._m0[91u].x));
    vec4 _2227 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1040, _1041));
    float _2229 = _2227.w;
    float _2241 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2229);
    float _2242 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2229);
    float _2243 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2229);
    uvec4 _2247 = floatBitsToUint(cbInstanceData._m0[_1095 + 5u]);
    uint _2249 = _2247.x * 14u;
    uint _2250 = _2249 + 13u;
    float _2257 = _1167 + (-1.0);
    float _2262 = (cbLight._m0[_2250].x * _2257) + 1.0;
    float _2263 = (cbLight._m0[_2250].y * _2257) + 1.0;
    float _2264 = (cbLight._m0[_2250].z * _2257) + 1.0;
    float _2265 = (cbLight._m0[_2250].w * _2257) + 1.0;
    uint _2266 = _2249 + 5u;
    float _2272 = isnan(1.0) ? _2263 : (isnan(_2263) ? 1.0 : min(_2263, 1.0));
    uint _2276 = _2249 + 4u;
    float _2285 = isnan(1.0) ? _2262 : (isnan(_2262) ? 1.0 : min(_2262, 1.0));
    uint _2289 = _2249 | 1u;
    float _2300 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_960, _961, _962));
    float _2303 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_960, _961, _962));
    float _4622 = isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0));
    float _4633 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
    float _2308 = (isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0))) * 0.3183098733425140380859375;
    float _2310 = (isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0))) * 0.3183098733425140380859375;
    float _2317 = ((cbLight._m0[_2266].x * _2272) * _2310) + (((cbLight._m0[_2276].x * _2241) * _2285) * _2308);
    float _2318 = ((_2272 * cbLight._m0[_2266].y) * _2310) + (((cbLight._m0[_2276].y * _2242) * _2285) * _2308);
    float _2319 = ((_2272 * cbLight._m0[_2266].z) * _2310) + (((cbLight._m0[_2276].z * _2243) * _2285) * _2308);
    uvec4 _2323 = floatBitsToUint(cbLight._m0[_2249 + 12u]);
    bool _2325 = _2323.x == 0u;
    float _2336;
    float _2338;
    float _2340;
    if (_2325)
    {
        _2336 = _2317;
        _2338 = _2318;
        _2340 = _2319;
    }
    else
    {
        uint _2344 = _2249 + 6u;
        float _2360 = (dot(vec3(cbLight._m0[_2249 + 2u].xyz), vec3(_960, _961, _962)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4644 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2363 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2336 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2317;
        _2338 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2318;
        _2340 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2319;
    }
    bool _2343 = _2323.y == 0u;
    float _2381;
    float _2383;
    float _2385;
    if (_2343)
    {
        _2381 = _2336;
        _2383 = _2338;
        _2385 = _2340;
    }
    else
    {
        uint _2554 = _2249 + 7u;
        float _2570 = (dot(vec3(cbLight._m0[_2249 + 3u].xyz), vec3(_960, _961, _962)) * 0.5) + 0.5;
        float _2571 = _2570 * _2570;
        float _4660 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        float _2572 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
        float _2573 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
        _2381 = (((cbLight._m0[_2554].x * 0.3183098733425140380859375) * _2572) * _2573) + _2336;
        _2383 = (((cbLight._m0[_2554].y * 0.3183098733425140380859375) * _2572) * _2573) + _2338;
        _2385 = (((cbLight._m0[_2554].z * 0.3183098733425140380859375) * _2572) * _2573) + _2340;
    }
    uint _2388 = _2249 + 8u;
    float _2401 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2249].w)) * _1082) * 0.949999988079071044921875);
    float _2402 = _2401 * _2401;
    float _2403 = cbLight._m0[_2249].x + _1020;
    float _2404 = cbLight._m0[_2249].y + _1021;
    float _2405 = cbLight._m0[_2249].z + _1022;
    float _2409 = inversesqrt(dot(vec3(_2403, _2404, _2405), vec3(_2403, _2404, _2405)));
    float _2410 = _2409 * _2403;
    float _2411 = _2409 * _2404;
    float _2412 = _2409 * _2405;
    float _2413 = dot(vec3(_960, _961, _962), vec3(cbLight._m0[_2249].xyz));
    float _4676 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _2416 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
    float _4687 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _2417 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
    float _2418 = dot(vec3(_960, _961, _962), vec3(_2410, _2411, _2412));
    float _4698 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
    float _2421 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
    float _2422 = dot(vec3(cbLight._m0[_2249].xyz), vec3(_2410, _2411, _2412));
    float _4709 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
    float _2426 = _2402 * _2402;
    float _2430 = ((_2421 * _2421) * (_2426 + (-1.0))) + 1.0;
    float _2438 = exp2(log2(1.0 - (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) * 5.0);
    float _2439 = 0.959999978542327880859375 - _1149;
    float _2441 = 0.959999978542327880859375 - _1150;
    float _2442 = 0.959999978542327880859375 - _1151;
    float _2449 = 1.0 - _2402;
    float _2460 = (0.5 / (((_2417 * ((_2416 * _2449) + _2402)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2449) + _2402) * _2416))) * _2416;
    float _4720 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
    float _2462 = (isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0))) * (_2426 / ((_2430 * _2430) * 3.141590118408203125));
    uint _2476 = _2249 + 9u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2289].w)) * _1082) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2289].x + _1020;
    float _2490 = cbLight._m0[_2289].y + _1021;
    float _2491 = cbLight._m0[_2289].z + _1022;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_960, _961, _962), vec3(cbLight._m0[_2289].xyz));
    float _4731 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0));
    float _2503 = dot(vec3(_960, _961, _962), vec3(_2496, _2497, _2498));
    float _4742 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4742 : (isnan(_4742) ? 1.0 : min(_4742, 1.0));
    float _2507 = dot(vec3(cbLight._m0[_2289].xyz), vec3(_2496, _2497, _2498));
    float _4753 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2511 = _2488 * _2488;
    float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
    float _2522 = exp2(log2(1.0 - (isnan(1.0) ? _4753 : (isnan(_4753) ? 1.0 : min(_4753, 1.0)))) * 5.0);
    float _2529 = 1.0 - _2488;
    float _2539 = (0.5 / (((_2417 * ((_2502 * _2529) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2529) + _2488) * _2502))) * _2502;
    float _4764 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2541 = (isnan(1.0) ? _4764 : (isnan(_4764) ? 1.0 : min(_4764, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
    float _2551 = (((((_2522 * _2439) + _1152) * cbLight._m0[_2476].x) * _2541) * _2272) + ((((cbLight._m0[_2388].x * _2241) * ((_2438 * _2439) + _1152)) * _2462) * _2285);
    float _2552 = (((((_2522 * _2441) + _1154) * cbLight._m0[_2476].y) * _2541) * _2272) + ((((cbLight._m0[_2388].y * _2242) * ((_2438 * _2441) + _1154)) * _2462) * _2285);
    float _2553 = (((((_2522 * _2442) + _1155) * cbLight._m0[_2476].z) * _2541) * _2272) + ((((cbLight._m0[_2388].z * _2243) * ((_2438 * _2442) + _1155)) * _2462) * _2285);
    float _2615;
    float _2617;
    float _2619;
    if (_2325)
    {
        _2615 = _2551;
        _2617 = _2552;
        _2619 = _2553;
    }
    else
    {
        uint _2621 = _2249 + 2u;
        uint _2625 = _2249 + 10u;
        float _2639 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2621].w)) * _1082) * 0.949999988079071044921875);
        float _2640 = _2639 * _2639;
        float _2641 = cbLight._m0[_2621].x + _1020;
        float _2642 = cbLight._m0[_2621].y + _1021;
        float _2643 = cbLight._m0[_2621].z + _1022;
        float _2647 = inversesqrt(dot(vec3(_2641, _2642, _2643), vec3(_2641, _2642, _2643)));
        float _2648 = _2647 * _2641;
        float _2649 = _2647 * _2642;
        float _2650 = _2647 * _2643;
        float _2651 = dot(vec3(_960, _961, _962), vec3(cbLight._m0[_2621].xyz));
        float _4775 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
        float _2655 = dot(vec3(_960, _961, _962), vec3(_2648, _2649, _2650));
        float _4786 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2658 = isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0));
        float _2659 = dot(vec3(cbLight._m0[_2621].xyz), vec3(_2648, _2649, _2650));
        float _4797 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
        float _2663 = _2640 * _2640;
        float _2667 = ((_2658 * _2658) * (_2663 + (-1.0))) + 1.0;
        float _2674 = exp2(log2(1.0 - (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0)))) * 5.0);
        float _2681 = 1.0 - _2640;
        float _2691 = (0.5 / (((_2417 * ((_2654 * _2681) + _2640)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2681) + _2640) * _2654))) * _2654;
        float _4808 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        float _2693 = (isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0))) * (_2663 / ((_2667 * _2667) * 3.141590118408203125));
        float _2694 = isnan(1.0) ? _2264 : (isnan(_2264) ? 1.0 : min(_2264, 1.0));
        _2615 = (((((_2674 * _2439) + _1152) * cbLight._m0[_2625].x) * _2693) * _2694) + _2551;
        _2617 = (((((_2674 * _2441) + _1154) * cbLight._m0[_2625].y) * _2693) * _2694) + _2552;
        _2619 = (((((_2674 * _2442) + _1155) * cbLight._m0[_2625].z) * _2693) * _2694) + _2553;
    }
    float _2729;
    float _2731;
    float _2733;
    if (_2343)
    {
        _2729 = _2615;
        _2731 = _2617;
        _2733 = _2619;
    }
    else
    {
        uint _2740 = _2249 + 3u;
        uint _2744 = _2249 + 11u;
        float _2758 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2740].w)) * _1082) * 0.949999988079071044921875);
        float _2759 = _2758 * _2758;
        float _2760 = cbLight._m0[_2740].x + _1020;
        float _2761 = cbLight._m0[_2740].y + _1021;
        float _2762 = cbLight._m0[_2740].z + _1022;
        float _2766 = inversesqrt(dot(vec3(_2760, _2761, _2762), vec3(_2760, _2761, _2762)));
        float _2767 = _2766 * _2760;
        float _2768 = _2766 * _2761;
        float _2769 = _2766 * _2762;
        float _2770 = dot(vec3(_960, _961, _962), vec3(cbLight._m0[_2740].xyz));
        float _4824 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2773 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2774 = dot(vec3(_960, _961, _962), vec3(_2767, _2768, _2769));
        float _4835 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
        float _2777 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2778 = dot(vec3(cbLight._m0[_2740].xyz), vec3(_2767, _2768, _2769));
        float _4846 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2782 = _2759 * _2759;
        float _2786 = ((_2777 * _2777) * (_2782 + (-1.0))) + 1.0;
        float _2793 = exp2(log2(1.0 - (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0)))) * 5.0);
        float _2800 = 1.0 - _2759;
        float _2810 = (0.5 / (((_2417 * ((_2773 * _2800) + _2759)) + 9.9999999392252902907785028219223e-09) + (((_2417 * _2800) + _2759) * _2773))) * _2773;
        float _4857 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2812 = (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0))) * (_2782 / ((_2786 * _2786) * 3.141590118408203125));
        float _2813 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
        _2729 = (((((_2793 * _2439) + _1152) * cbLight._m0[_2744].x) * _2812) * _2813) + _2615;
        _2731 = (((((_2793 * _2441) + _1154) * cbLight._m0[_2744].y) * _2812) * _2813) + _2617;
        _2733 = (((((_2793 * _2442) + _1155) * cbLight._m0[_2744].z) * _2812) * _2813) + _2619;
    }
    float _2948;
    float _2950;
    float _2952;
    float _2954;
    float _2956;
    float _2958;
    if (_2247.y == 0u)
    {
        float _2888 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2889 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2888;
        float _2890 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2888;
        float _2891 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2888;
        uvec4 _2903 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2904 = _2903.x;
        uint _2915 = uint((float(_2903.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1041) / _2904))) + floor(float(uint(cbSceneParam._m0[85u].x * _1040) / _2904)));
        float _2925 = (log2(_2891 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2926 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        uint _2929 = uint(isnan(14.0) ? _2926 : (isnan(_2926) ? 14.0 : min(_2926, 14.0)));
        uvec4 _2934 = texelFetch(g_lightClusterGridBuffer, int(((_2929 << 2u) + (_2915 << 6u)) >> 2u));
        uint _2935 = _2934.x;
        uint _2936 = _2903.z;
        float _3065;
        float _3067;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        if (((((1u << ((_2936 >> 4u) & 15u)) + 4294967295u) & _2935) == 0u) || ((_2936 & 240u) == 0u))
        {
            _3065 = 0.0;
            _3067 = 0.0;
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
        }
        else
        {
            float _3066;
            float _3068;
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            uint _3231 = 0u;
            uint _3240;
            bool _3241;
            for (;;)
            {
                _3240 = texelFetch(g_lightClassification, int((((_2929 << 5u) + (_2915 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                _3241 = _3240 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3241)
                {
                    frontier_phi_66_pred = _3225;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                else
                {
                    float _3370;
                    float _3371;
                    float _3372;
                    float _3373;
                    float _3374;
                    float _3375;
                    uint _3376;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3228;
                    _3374 = _3229;
                    _3375 = _3230;
                    _3376 = _3240;
                    float _3297;
                    float _3298;
                    float _3299;
                    float _3300;
                    float _3301;
                    float _3302;
                    for (;;)
                    {
                        uint _3380 = uint(findLSB(_3376)) + (_3231 << 5u);
                        uint _3377 = (_3376 + 4294967295u) & _3376;
                        uint _3382 = _3380 * 48u;
                        vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3402 = (_3380 * 48u) + 4u;
                        vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3402)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3402 + 3u)).x));
                        uint _3421 = (_3380 * 48u) + 8u;
                        vec3 _3432 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3421)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3421 + 2u)).x));
                        float _3436 = _3396.x - _2889;
                        float _3437 = _3396.y - _2890;
                        float _3438 = _3396.z - _2891;
                        float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                        float _3442 = inversesqrt(_3439);
                        float _3443 = _3442 * _3436;
                        float _3444 = _3442 * _3437;
                        float _3445 = _3442 * _3438;
                        float _3446 = dot(vec3(_1063, _1066, _1069), vec3(_3443, _3444, _3445));
                        float _3451 = 1.0 - (_3439 * _3396.w);
                        float _4883 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                        float _3452 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3453 = sqrt(_3439) * _3415.w;
                        float _3456 = 1.39999997615814208984375 / (_3453 + 1.39999997615814208984375);
                        float _3457 = _3456 * _3456;
                        float _3460 = ((1.0 - _3457) * _3446) + _3457;
                        float _3463 = _3453 * _3453;
                        float _3467 = ((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3452) / ((_3463 * 0.699999988079071044921875) + 1.0);
                        float _3471 = (-0.0) - _2889;
                        float _3472 = (-0.0) - _2890;
                        float _3473 = (-0.0) - _2891;
                        float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                        float _3478 = _3477 * _3471;
                        float _3479 = _3477 * _3472;
                        float _3480 = _3477 * _3473;
                        float _3488 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                        float _3489 = 1.0 - _1183;
                        float _3496 = sqrt(1.0 - ((1.0 - (_3489 * _3489)) * (1.0 - (_3488 * _3488))));
                        float _3497 = _3496 * _3496;
                        float _3498 = _3497 * _3497;
                        float _3499 = _3478 + _3443;
                        float _3500 = _3479 + _3444;
                        float _3501 = _3480 + _3445;
                        float _3505 = inversesqrt(dot(vec3(_3499, _3500, _3501), vec3(_3499, _3500, _3501)));
                        float _3509 = dot(vec3(_1063, _1066, _1069), vec3(_3478, _3479, _3480));
                        float _4899 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
                        float _3513 = dot(vec3(_1063, _1066, _1069), vec3(_3505 * _3499, _3505 * _3500, _3505 * _3501));
                        float _4910 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                        float _3516 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
                        float _3520 = ((_3516 * _3516) * (_3498 + (-1.0))) + 1.0;
                        float _3521 = _3456 * _3497;
                        float _3522 = _3521 * _3521;
                        float _3525 = ((1.0 - _3522) * _3446) + _3522;
                        float _4921 = isnan(0.0) ? _3525 : (isnan(_3525) ? 0.0 : max(_3525, 0.0));
                        float _3526 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3527 = 1.0 - _3497;
                        float _3537 = (0.5 / (((_3526 * ((_3512 * _3527) + _3497)) + 9.9999999392252902907785028219223e-09) + (((_3526 * _3527) + _3497) * _3512))) * _3526;
                        float _4932 = isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0));
                        float _3548 = (((_3498 * 3.1415927410125732421875) * (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0)))) / ((_3520 * _3520) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125))) * _3452;
                        _3300 = (_3467 * _3415.x) + _3373;
                        _3301 = (_3467 * _3415.y) + _3374;
                        _3302 = (_3467 * _3415.z) + _3375;
                        _3297 = (_3548 * _3432.x) + _3370;
                        _3298 = (_3548 * _3432.y) + _3371;
                        _3299 = (_3548 * _3432.z) + _3372;
                        if (_3377 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3300;
                            _3374 = _3301;
                            _3375 = _3302;
                            _3376 = _3377;
                        }
                    }
                    frontier_phi_66_pred = _3297;
                    frontier_phi_66_pred_1 = _3302;
                    frontier_phi_66_pred_2 = _3301;
                    frontier_phi_66_pred_3 = _3300;
                    frontier_phi_66_pred_4 = _3299;
                    frontier_phi_66_pred_5 = _3298;
                }
                _3066 = frontier_phi_66_pred;
                _3076 = frontier_phi_66_pred_1;
                _3074 = frontier_phi_66_pred_2;
                _3072 = frontier_phi_66_pred_3;
                _3070 = frontier_phi_66_pred_4;
                _3068 = frontier_phi_66_pred_5;
                uint _3232 = _3231 + 1u;
                if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3225 = _3066;
                    _3226 = _3068;
                    _3227 = _3070;
                    _3228 = _3072;
                    _3229 = _3074;
                    _3230 = _3076;
                    _3231 = _3232;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3065 = _3066;
            _3067 = _3068;
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
        }
        uvec4 _3079 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3080 = _3079.z;
        uint _3082 = (_3080 >> 8u) & 15u;
        float _3193;
        float _3195;
        float _3197;
        float _3199;
        float _3201;
        float _3203;
        if (((4294967295u << _3082) & _2935) == 0u)
        {
            _3193 = _3065;
            _3195 = _3067;
            _3197 = _3069;
            _3199 = _3071;
            _3201 = _3073;
            _3203 = _3075;
        }
        else
        {
            float _3218 = inversesqrt(dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891)));
            float _3219 = _3218 * _2889;
            float _3220 = _3218 * _2890;
            float _3221 = _3218 * _2891;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3082 < ((_3080 >> 12u) & 15u))
            {
                float _3194;
                float _3196;
                float _3198;
                float _3200;
                float _3202;
                float _3204;
                float _3353 = _3065;
                float _3354 = _3067;
                float _3355 = _3069;
                float _3356 = _3071;
                float _3357 = _3073;
                float _3358 = _3075;
                uint _3359 = _3082;
                uint _3368;
                bool _3369;
                for (;;)
                {
                    _3368 = texelFetch(g_lightClassification, int((((_2929 << 5u) + (_2915 << 9u)) + (_3359 << 2u)) >> 2u)).x;
                    _3369 = _3368 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3369)
                    {
                        frontier_phi_77_pred = _3358;
                        frontier_phi_77_pred_1 = _3357;
                        frontier_phi_77_pred_2 = _3356;
                        frontier_phi_77_pred_3 = _3355;
                        frontier_phi_77_pred_4 = _3354;
                        frontier_phi_77_pred_5 = _3353;
                    }
                    else
                    {
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3565;
                        float _3566;
                        float _3567;
                        float _3856;
                        float _3857;
                        float _3858;
                        float _3859;
                        float _3860;
                        float _3861;
                        float _3575 = _3353;
                        float _3576 = _3354;
                        float _3577 = _3355;
                        float _3578 = _3356;
                        float _3579 = _3357;
                        float _3580 = _3358;
                        uint _3581 = _3368;
                        uint _3582;
                        vec4 _3607;
                        float _3608;
                        vec4 _3623;
                        vec3 _3635;
                        vec4 _3651;
                        vec4 _3666;
                        float _3712;
                        bool _3713;
                        for (;;)
                        {
                            uint _3592 = ((_3359 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3581));
                            _3582 = (_3581 + 4294967295u) & _3581;
                            uint _3594 = _3592 * 40u;
                            _3607 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3594)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3594 + 3u)).x));
                            _3608 = _3607.w;
                            uint _3610 = (_3592 * 40u) + 4u;
                            _3623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3610 + 3u)).x));
                            uint _3625 = (_3592 * 40u) + 8u;
                            _3635 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3625 + 2u)).x));
                            uint _3638 = (_3592 * 40u) + 16u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3592 * 40u) + 20u;
                            _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3668 = (_3592 * 40u) + 24u;
                            vec4 _3681 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3668)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3668 + 3u)).x));
                            uint _3687 = (_3592 * 40u) + 28u;
                            vec4 _3700 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3687)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3687 + 3u)).x));
                            _3712 = fma(_2891, _3700.z, fma(_2890, _3700.y, _3700.x * _2889)) + _3700.w;
                            _3713 = !((fma(_2891, _3681.z, fma(_2890, _3681.y, _3681.x * _2889)) + _3681.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3713)
                            {
                                float _3740 = _3607.x - _2889;
                                float _3741 = _3607.y - _2890;
                                float _3742 = _3607.z - _2891;
                                float _3743 = dot(vec3(_3740, _3741, _3742), vec3(_3740, _3741, _3742));
                                float _3746 = inversesqrt(_3743);
                                float _3747 = _3746 * _3740;
                                float _3748 = _3746 * _3741;
                                float _3749 = _3746 * _3742;
                                float _3753 = 1.0 - (_3743 / (_3608 * _3608));
                                float _4943 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3754 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3758 = sqrt(_3743) * _3623.w;
                                float _3760 = 1.39999997615814208984375 / (_3758 + 1.39999997615814208984375);
                                float _3761 = _3760 * _3760;
                                float _3764 = ((1.0 - _3761) * dot(vec3(_3747, _3748, _3749), vec3(_1063, _1066, _1069))) + _3761;
                                float _3767 = _3758 * _3758;
                                float _3771 = (fma(_2891, _3651.z, fma(_2890, _3651.y, _3651.x * _2889)) + _3651.w) / _3712;
                                float _3772 = (fma(_2891, _3666.z, fma(_2890, _3666.y, _3666.x * _2889)) + _3666.w) / _3712;
                                float _3776 = 1.0 - dot(vec2(_3771, _3772), vec2(_3771, _3772));
                                float _4959 = isnan(0.0) ? _3776 : (isnan(_3776) ? 0.0 : max(_3776, 0.0));
                                float _3777 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                                float _3778 = _3777 * (((isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0))) * _3754) / ((_3767 * 0.699999988079071044921875) + 1.0));
                                float _3790 = exp2(log2(1.0 / ((_3767 * 3.5) + 5.0)) * 0.25);
                                float _3791 = 1.0 - _1183;
                                float _3798 = sqrt(1.0 - ((1.0 - (_3791 * _3791)) * (1.0 - (_3790 * _3790))));
                                float _3799 = _3798 * _3798;
                                float _3800 = _3799 * _3799;
                                float _3801 = _3747 - _3219;
                                float _3802 = _3748 - _3220;
                                float _3803 = _3749 - _3221;
                                float _3807 = inversesqrt(dot(vec3(_3801, _3802, _3803), vec3(_3801, _3802, _3803)));
                                float _3811 = dot(vec3(_1063, _1066, _1069), vec3((-0.0) - _3219, (-0.0) - _3220, (-0.0) - _3221));
                                float _4970 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                                float _3815 = dot(vec3(_1063, _1066, _1069), vec3(_3807 * _3801, _3807 * _3802, _3807 * _3803));
                                float _4981 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3818 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3822 = ((_3818 * _3818) * (_3800 + (-1.0))) + 1.0;
                                float _3823 = _3760 * _3799;
                                float _3824 = _3823 * _3823;
                                float _3830 = ((1.0 - _3824) * dot(vec3(_1063, _1066, _1069), vec3(_3747, _3748, _3749))) + _3824;
                                float _4992 = isnan(0.0) ? _3830 : (isnan(_3830) ? 0.0 : max(_3830, 0.0));
                                float _3831 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
                                float _3832 = 1.0 - _3799;
                                float _3842 = (0.5 / (((_3831 * ((_3814 * _3832) + _3799)) + 9.9999999392252902907785028219223e-09) + (((_3831 * _3832) + _3799) * _3814))) * _3831;
                                float _5003 = isnan(0.0) ? _3842 : (isnan(_3842) ? 0.0 : max(_3842, 0.0));
                                float _3852 = (_3777 * _3754) * (((_3800 * 3.1415927410125732421875) * (isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0)))) / ((_3822 * _3822) * ((_3767 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3778 * _3623.y;
                                frontier_phi_83_pred_1 = _3778 * _3623.x;
                                frontier_phi_83_pred_2 = _3852 * _3635.z;
                                frontier_phi_83_pred_3 = _3852 * _3635.y;
                                frontier_phi_83_pred_4 = _3852 * _3635.x;
                                frontier_phi_83_pred_5 = _3778 * _3623.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3860 = frontier_phi_83_pred;
                            _3859 = frontier_phi_83_pred_1;
                            _3858 = frontier_phi_83_pred_2;
                            _3857 = frontier_phi_83_pred_3;
                            _3856 = frontier_phi_83_pred_4;
                            _3861 = frontier_phi_83_pred_5;
                            _3565 = _3859 + _3578;
                            _3566 = _3860 + _3579;
                            _3567 = _3861 + _3580;
                            _3562 = _3856 + _3575;
                            _3563 = _3857 + _3576;
                            _3564 = _3858 + _3577;
                            if (_3582 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3564;
                                _3578 = _3565;
                                _3579 = _3566;
                                _3580 = _3567;
                                _3581 = _3582;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3567;
                        frontier_phi_77_pred_1 = _3566;
                        frontier_phi_77_pred_2 = _3565;
                        frontier_phi_77_pred_3 = _3564;
                        frontier_phi_77_pred_4 = _3563;
                        frontier_phi_77_pred_5 = _3562;
                    }
                    _3204 = frontier_phi_77_pred;
                    _3202 = frontier_phi_77_pred_1;
                    _3200 = frontier_phi_77_pred_2;
                    _3198 = frontier_phi_77_pred_3;
                    _3196 = frontier_phi_77_pred_4;
                    _3194 = frontier_phi_77_pred_5;
                    uint _3360 = _3359 + 1u;
                    if (_3360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3353 = _3194;
                        _3354 = _3196;
                        _3355 = _3198;
                        _3356 = _3200;
                        _3357 = _3202;
                        _3358 = _3204;
                        _3359 = _3360;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3198;
                frontier_phi_58_59_ladder_1 = _3204;
                frontier_phi_58_59_ladder_2 = _3202;
                frontier_phi_58_59_ladder_3 = _3200;
                frontier_phi_58_59_ladder_4 = _3196;
                frontier_phi_58_59_ladder_5 = _3194;
            }
            else
            {
                frontier_phi_58_59_ladder = _3069;
                frontier_phi_58_59_ladder_1 = _3075;
                frontier_phi_58_59_ladder_2 = _3073;
                frontier_phi_58_59_ladder_3 = _3071;
                frontier_phi_58_59_ladder_4 = _3067;
                frontier_phi_58_59_ladder_5 = _3065;
            }
            _3193 = frontier_phi_58_59_ladder_5;
            _3195 = frontier_phi_58_59_ladder_4;
            _3197 = frontier_phi_58_59_ladder;
            _3199 = frontier_phi_58_59_ladder_3;
            _3201 = frontier_phi_58_59_ladder_2;
            _3203 = frontier_phi_58_59_ladder_1;
        }
        float _3208 = isnan(1.0) ? _1167 : (isnan(_1167) ? 1.0 : min(_1167, 1.0));
        _2948 = (_3208 * _3199) + _2381;
        _2950 = (_3208 * _3201) + _2383;
        _2952 = (_3208 * _3203) + _2385;
        _2954 = ((_3193 * _1152) * _3208) + _2729;
        _2956 = ((_3195 * _1154) * _3208) + _2731;
        _2958 = ((_3197 * _1155) * _3208) + _2733;
    }
    else
    {
        _2948 = _2381;
        _2950 = _2383;
        _2952 = _2385;
        _2954 = _2729;
        _2956 = _2731;
        _2958 = _2733;
    }
    uint _2964 = _1096 + uint(cbMatDynParam._m0[0u].w);
    float _2970 = (((((cbMtdParam._m0[22u].x * _864.x) * cbMtdParam._m0[32u].x) * _885) + _636) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2964].x;
    float _2971 = (((((cbMtdParam._m0[22u].y * _864.y) * cbMtdParam._m0[32u].x) * _885) + _637) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2964].y;
    float _2972 = (((((cbMtdParam._m0[22u].z * _864.z) * cbMtdParam._m0[32u].x) * _885) + _638) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2964].z;
    float _5019 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _5030 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _5041 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _2989 = (((isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0))) * (_2948 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1167))) + ((_2954 + ((isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0))) * _1995)) * cbPerFrame._m0[3u].x)) + _2970;
    float _2991 = (_2971 + ((_2956 + ((isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0))) * _1995)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0))) * (_2950 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1167)));
    float _2993 = (_2972 + ((_2958 + ((isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0))) * _1995)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0))) * (_2952 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1167)));
    float _2994 = isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0));
    float _2995 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
    float _2996 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
    float _3002 = cbMtdParam._m0[2u].x * _2970;
    float _3003 = cbMtdParam._m0[2u].y * _2971;
    float _3004 = cbMtdParam._m0[2u].z * _2972;
    float _5067 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3006 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
    uint _3007 = _1095 + 6u;
    float _3015 = _1040 / cbSceneParam._m0[86u].x;
    float _3016 = _1041 / cbSceneParam._m0[86u].y;
    vec4 _3030 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3015, _3016, (log2((isnan(cbSceneParam._m0[77u].w) ? _983 : (isnan(_983) ? cbSceneParam._m0[77u].w : min(_983, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3032 = _3030.x;
    float _3033 = _3030.y;
    float _3034 = _3030.z;
    float _3035 = _3030.w;
    float _3127;
    float _3129;
    float _3131;
    float _3133;
    if (_983 > cbSceneParam._m0[78u].w)
    {
        float _3090 = isnan(_983) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _983 : min(cbSceneParam._m0[80u].w, _983));
        float _3091 = _3090 / _983;
        float _3102 = _3091 * _1013;
        float _3103 = _1014 * _3091;
        float _3104 = (-0.0) - _3103;
        float _3105 = _3091 * _1015;
        float _3107 = (cbSceneParam._m0[77u].w * _3104) / _3090;
        float _3108 = _3107 + cbSceneParam._m0[79u].w;
        float _3109 = cbSceneParam._m0[79u].w - _3103;
        float _3115 = sqrt(((_3102 * _3102) + (_3103 * _3103)) + (_3105 * _3105));
        float _3118 = (1.0 - (cbSceneParam._m0[77u].w / _3090)) * _3115;
        float _3123 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3125 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3310;
        if (abs((_3104 - _3107) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3310 = ((((_3108 > 0.0) ? exp2(_3123 * _3108) : (2.0 - exp2(_3125 * _3108))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3118;
        }
        else
        {
            float _3254 = 1.0 / cbSceneParam._m0[80u].x;
            float _3255 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : max(_3108, _3109));
            float _3256 = isnan(_3109) ? _3108 : (isnan(_3108) ? _3109 : min(_3108, _3109));
            float _3265 = isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : min(_3255, 0.0));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            _3310 = ((abs(_3115 / _3104) * cbSceneParam._m0[80u].y) * ((((_3265 - _3266) * 2.0) - ((exp2(_3123 * (isnan(0.0) ? _3255 : (isnan(_3255) ? 0.0 : max(_3255, 0.0)))) - exp2(_3123 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0))))) * _3254)) - ((exp2(_3125 * _3265) - exp2(_3125 * _3266)) * _3254))) + (_3118 * cbSceneParam._m0[80u].z);
        }
        vec4 _3312 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3015, _3016, 1.0), 0.0);
        float _3321 = exp2((_3310 * (-1.44269502162933349609375)) * (1.0 - _3312.w));
        float _3322 = log2(_3321);
        float _3338 = log2(_3035);
        _3127 = (exp2(_3338 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].x)) * _3312.x) / cbSceneParam._m0[78u].x)) + _3032;
        _3129 = (exp2(_3338 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].y)) * _3312.y) / cbSceneParam._m0[78u].y)) + _3033;
        _3131 = (exp2(_3338 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3322 * cbSceneParam._m0[78u].z)) * _3312.z) / cbSceneParam._m0[78u].z)) + _3034;
        _3133 = _3321 * _3035;
    }
    else
    {
        _3127 = _3032;
        _3129 = _3033;
        _3131 = _3034;
        _3133 = _3035;
    }
    bool _3348;
    vec4 _3142;
    vec4 _3164;
    float _3166;
    float _3170;
    float _3171;
    float _3172;
    float _3175;
    float _3178;
    float _3181;
    float _3182;
    bool _3192;
    for (;;)
    {
        _3142 = cbMatDynParam._m0[0u];
        float _3144 = roundEven(_3142.y);
        bool _3145 = _3144 == 3.0;
        float _3146 = log2(_3133);
        float _3150 = exp2(_3146 * cbSceneParam._m0[78u].x);
        float _3151 = exp2(_3146 * cbSceneParam._m0[78u].y);
        float _3152 = exp2(_3146 * cbSceneParam._m0[78u].z);
        float _3153 = _3150 * _2994;
        float _3154 = _3151 * _2995;
        float _3155 = _3152 * _2996;
        float _3162 = _1029 + (-0.5);
        _3164 = cbMtdParam._m0[1u];
        _3166 = _3164.y * _3162;
        float _3169 = (_3144 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3170 = _3169 * (_3145 ? _3153 : (_3153 + (cbSceneParam._m0[72u].w * _3127)));
        _3171 = _3169 * (_3145 ? _3154 : (_3154 + (cbSceneParam._m0[72u].w * _3129)));
        _3172 = _3169 * (_3145 ? _3155 : (_3155 + (cbSceneParam._m0[72u].w * _3131)));
        _3175 = ((_3002 * _3006) * _3150) * _3169;
        _3178 = ((_3003 * _3006) * _3151) * _3169;
        _3181 = ((_3004 * _3006) * _3152) * _3169;
        _3182 = _3162 * 0.999000012874603271484375;
        _3192 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3192)
        {
            if ((cbInstanceData._m0[_1095 + 7u].x + _3182) < 0.5)
            {
                _3348 = true;
                break;
            }
        }
        uint _3289 = _1096 + uint(_3142.w);
        if ((cbInstanceData._m0[_3289].w < 1.0) && ((cbInstanceData._m0[_3289].w + _3182) < 0.5))
        {
            _3348 = true;
            break;
        }
        if ((_3166 + 1.0) < _3164.x)
        {
            _3348 = true;
            break;
        }
        _3348 = false;
        break;
    }
    float _3553;
    if (_3348)
    {
        discard_state = true;
        _3553 = 0.0;
    }
    else
    {
        _3553 = cbInstanceData._m0[_3007].w;
    }
    SV_Target.x = _3170;
    SV_Target.y = _3171;
    SV_Target.z = _3172;
    SV_Target.w = _3553;
    SV_Target_1.x = _3175;
    SV_Target_1.y = _3178;
    SV_Target_1.z = _3181;
    SV_Target_1.w = cbInstanceData._m0[_3007].w;
    discard_exit();
}


