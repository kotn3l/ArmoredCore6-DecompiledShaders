#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1710;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _270 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _283 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_270 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _288 = _283.z;
    float _289 = _283.w;
    vec4 _311 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _270) + cbTextureTilingScale._m0[11u].w));
    float _316 = _311.w;
    float _328 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _288) * exp2(log2(1.0 - _316) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _329 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _330 = isnan(1.0) ? _329 : (isnan(_329) ? 1.0 : min(_329, 1.0));
    vec4 _344 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _270) + cbTextureTilingScale._m0[2u].w));
    float _354 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _362 = (_354 - (((_344.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _354))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4075 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _363 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _365 = _330 - (_363 * _330);
    float _366 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    vec4 _380 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _383 = _380.y;
    float _384 = _383 * (isnan(1.0) ? _366 : (isnan(_366) ? 1.0 : min(_366, 1.0)));
    float _393 = exp2(log2(cbMtdParam._m0[32u].w * _316) * cbMtdParam._m0[31u].z);
    float _395 = _393 - (_363 * _393);
    float _396 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _397 = isnan(1.0) ? _396 : (isnan(_396) ? 1.0 : min(_396, 1.0));
    float _408 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_289) * 4.5));
    float _417 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _288) * _408)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _418 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _419 = isnan(1.0) ? _418 : (isnan(_418) ? 1.0 : min(_418, 1.0));
    float _430 = exp2(log2((1.0 - (((_408 * _408) * _288) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _431 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _435 = (((isnan(1.0) ? _431 : (isnan(_431) ? 1.0 : min(_431, 1.0))) - _289) * _383) + _289;
    vec4 _447 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _270) + cbTextureTilingScale._m0[5u].w));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = cbMtdParam._m0[12u].x;
    _208[0u] = cbMtdParam._m0[12u].y;
    _209[0u] = cbMtdParam._m0[12u].z;
    _207[1u] = cbMtdParam._m0[13u].x;
    _208[1u] = cbMtdParam._m0[13u].y;
    _209[1u] = cbMtdParam._m0[13u].z;
    _207[2u] = cbMtdParam._m0[14u].x;
    _208[2u] = cbMtdParam._m0[14u].y;
    _209[2u] = cbMtdParam._m0[14u].z;
    _207[3u] = cbMtdParam._m0[15u].x;
    _208[3u] = cbMtdParam._m0[15u].y;
    _209[3u] = cbMtdParam._m0[15u].z;
    _207[4u] = cbMtdParam._m0[16u].x;
    _208[4u] = cbMtdParam._m0[16u].y;
    _209[4u] = cbMtdParam._m0[16u].z;
    _207[5u] = cbMtdParam._m0[11u].x;
    _208[5u] = cbMtdParam._m0[11u].y;
    _209[5u] = cbMtdParam._m0[11u].z;
    float _515 = (_380.x + (-0.02500000037252902984619140625)) * 8.0;
    float _517 = roundEven(_515);
    float _518 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    uint _521 = uint(int(isnan(5.0) ? _518 : (isnan(_518) ? 5.0 : min(_518, 5.0))));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = 1.0;
    _204[0u] = 1.0;
    _205[0u] = 1.0;
    _203[1u] = cbMtdParam._m0[23u].x;
    _204[1u] = cbMtdParam._m0[23u].y;
    _205[1u] = cbMtdParam._m0[23u].z;
    _203[2u] = cbMtdParam._m0[21u].x;
    _204[2u] = cbMtdParam._m0[21u].y;
    _205[2u] = cbMtdParam._m0[21u].z;
    _203[3u] = cbMtdParam._m0[19u].x;
    _204[3u] = cbMtdParam._m0[19u].y;
    _205[3u] = cbMtdParam._m0[19u].z;
    _203[4u] = cbMtdParam._m0[18u].x;
    _204[4u] = cbMtdParam._m0[18u].y;
    _205[4u] = cbMtdParam._m0[18u].z;
    _203[5u] = cbMtdParam._m0[17u].x;
    _204[5u] = cbMtdParam._m0[17u].y;
    _205[5u] = cbMtdParam._m0[17u].z;
    float _607 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _608 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    uint _610 = uint(int(isnan(5.0) ? _608 : (isnan(_608) ? 5.0 : min(_608, 5.0))));
    float _206[6];
    _206[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[23u].w;
    _206[2u] = cbMtdParam._m0[21u].w;
    _206[3u] = cbMtdParam._m0[19u].w;
    _206[4u] = cbMtdParam._m0[18u].w;
    _206[5u] = cbMtdParam._m0[17u].w;
    float _647 = ((((_207[_521] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_203[_610] - _207[_521])) * _206[_521])) * _383) + cbMtdParam._m0[10u].x) * _447.x;
    float _648 = ((((_208[_521] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_204[_610] - _208[_521])) * _206[_521])) * _383) + cbMtdParam._m0[10u].y) * _447.y;
    float _649 = ((((_209[_521] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_205[_610] - _209[_521])) * _206[_521])) * _383) + cbMtdParam._m0[10u].z) * _447.z;
    vec4 _661 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _270) + cbTextureTilingScale._m0[1u].w));
    float _672 = cbMtdParam._m0[9u].x * _661.x;
    float _673 = cbMtdParam._m0[9u].y * _661.y;
    float _674 = cbMtdParam._m0[9u].z * _661.z;
    float _681 = ((_672 - _647) * _435) + _647;
    float _682 = ((_673 - _648) * _435) + _648;
    float _683 = ((_674 - _649) * _435) + _649;
    vec4 _695 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _270) + cbTextureTilingScale._m0[6u].w));
    float _715 = (((cbMtdParam._m0[20u].x * _695.x) - _681) * _419) + _681;
    float _716 = (((cbMtdParam._m0[20u].y * _695.y) - _682) * _419) + _682;
    float _717 = (((cbMtdParam._m0[20u].z * _695.z) - _683) * _419) + _683;
    vec4 _729 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _270) + cbTextureTilingScale._m0[9u].w));
    float _749 = (((cbMtdParam._m0[29u].x * _729.x) - _715) * _397) + _715;
    float _750 = (((cbMtdParam._m0[29u].y * _729.y) - _716) * _397) + _716;
    float _751 = (((cbMtdParam._m0[29u].z * _729.z) - _717) * _397) + _717;
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[30u].x;
    _201[0u] = cbMtdParam._m0[30u].y;
    _202[0u] = cbMtdParam._m0[30u].z;
    _200[1u] = cbMtdParam._m0[28u].x;
    _201[1u] = cbMtdParam._m0[28u].y;
    _202[1u] = cbMtdParam._m0[28u].z;
    _200[2u] = cbMtdParam._m0[27u].x;
    _201[2u] = cbMtdParam._m0[27u].y;
    _202[2u] = cbMtdParam._m0[27u].z;
    _200[3u] = cbMtdParam._m0[26u].x;
    _201[3u] = cbMtdParam._m0[26u].y;
    _202[3u] = cbMtdParam._m0[26u].z;
    _200[4u] = cbMtdParam._m0[25u].x;
    _201[4u] = cbMtdParam._m0[25u].y;
    _202[4u] = cbMtdParam._m0[25u].z;
    _200[5u] = cbMtdParam._m0[24u].x;
    _201[5u] = cbMtdParam._m0[24u].y;
    _202[5u] = cbMtdParam._m0[24u].z;
    float _824 = _200[_521] * _383;
    float _825 = _201[_521] * _383;
    float _826 = _202[_521] * _383;
    float _827 = _824 + ((_311.x * 4.5) * (((_672 - _749) * _384) + _749));
    float _828 = _825 + ((_311.y * 4.5) * (((_673 - _750) * _384) + _750));
    float _829 = _826 + ((_311.z * 4.5) * (((_674 - _751) * _384) + _751));
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[37u].w;
    _196[0u] = cbMtdParam._m0[38u].x;
    _195[1u] = cbMtdParam._m0[39u].w;
    _196[1u] = cbMtdParam._m0[40u].x;
    _195[2u] = cbMtdParam._m0[40u].y;
    _196[2u] = cbMtdParam._m0[40u].z;
    _195[3u] = cbMtdParam._m0[40u].w;
    _196[3u] = cbMtdParam._m0[41u].x;
    _195[4u] = cbMtdParam._m0[41u].y;
    _196[4u] = cbMtdParam._m0[41u].z;
    float _862 = roundEven(5.0 - _515);
    float _863 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _864 = isnan(4.0) ? _863 : (isnan(_863) ? 4.0 : min(_863, 4.0));
    float _866 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    uint _868 = uint(int(isnan(4.0) ? _866 : (isnan(_866) ? 4.0 : min(_866, 4.0))));
    float _877 = ((cbMtdParam._m0[42u].z - _196[_868]) * _435) + _196[_868];
    float _885 = ((cbMtdParam._m0[43u].x - _877) * _419) + _877;
    float _890 = ((cbMtdParam._m0[43u].z - _885) * _397) + _885;
    float _895 = ((cbMtdParam._m0[39u].z - _890) * _384) + _890;
    vec4 _911 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _270) + cbTextureTilingScale._m0[7u].w));
    float _913 = _911.x;
    float _914 = _911.y;
    float _916 = _911.z + _195[_868];
    vec4 _928 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _270) + cbTextureTilingScale._m0[10u].w));
    float _936 = (((cbMtdParam._m0[42u].y - _916) + _928.z) * _435) + _916;
    vec4 _948 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _270) + cbTextureTilingScale._m0[12u].w));
    float _956 = (((cbMtdParam._m0[42u].w - _936) + _948.z) * _419) + _936;
    float _962 = ((((_288 * 2.0) * _956) - _956) * cbMtdParam._m0[34u].x) + _956;
    vec4 _974 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _270) + cbTextureTilingScale._m0[13u].w));
    float _982 = (((_974.z + cbMtdParam._m0[43u].y) - _962) * _397) + _962;
    float _986 = (((cbMtdParam._m0[39u].y + _344.z) - _982) * _384) + _982;
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1050 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1019 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1023 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1067 = (-0.0) - ((_1023 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1071 = (_1023 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1072 = isnan(_1071) ? _1067 : (isnan(_1067) ? _1071 : min(_1067, _1071));
    float _4171 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1073 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _1099 = ((_928.x - _913) * _435) + _913;
    float _1100 = ((_928.y - _914) * _435) + _914;
    float _1105 = ((_948.x - _1099) * _419) + _1099;
    float _1106 = ((_948.y - _1100) * _419) + _1100;
    float _1111 = ((_974.x - _1105) * _397) + _1105;
    float _1112 = ((_974.y - _1106) * _397) + _1106;
    float _1121 = ((((_344.x - _1111) * _384) + _1111) * 2.0) + (-1.0);
    float _1122 = ((((_344.y - _1112) * _384) + _1112) * 2.0) + (-1.0);
    float _1123 = dot(vec2(_1121, _1122), vec2(_1121, _1122));
    float _4182 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1128 = sqrt(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))));
    float _1131 = (cbMtdParam._m0[34u].z * ((_283.x * 2.0) + (-1.0))) + _1121;
    float _1132 = (cbMtdParam._m0[34u].z * ((_283.y * 2.0) + (-1.0))) + _1122;
    float _1135 = fma(_1128, _249 * NORMAL.x, fma(_1132, _256 * TANGENT.x, (_242 * _234) * _1131));
    float _1138 = fma(_1128, _249 * NORMAL.y, fma(_1132, _256 * TANGENT.y, (_242 * _235) * _1131));
    float _1141 = fma(_1128, _249 * NORMAL.z, fma(_1132, _256 * TANGENT.z, (_242 * _236) * _1131));
    float _1145 = inversesqrt(dot(vec3(_1135, _1138, _1141), vec3(_1135, _1138, _1141)));
    float _1146 = _1145 * _1135;
    float _1147 = _1145 * _1138;
    float _1148 = _1145 * _1141;
    float _4193 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _1149 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4215 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4226 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4237 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _1153 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _1169 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1189 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1199 = cbSceneParam._m0[71u].x - (_1019 / _1189);
    float _1200 = cbSceneParam._m0[71u].y - (_1023 / _1189);
    float _1201 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1189);
    float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
    float _1206 = _1199 * _1205;
    float _1207 = _1200 * _1205;
    float _1208 = _1201 * _1205;
    float _1214 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1215 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1217 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1219 = _1217.w;
    float _1237 = fma(_1148, cbSceneParam._m0[5u].z, fma(_1147, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1146));
    float _1240 = fma(_1148, cbSceneParam._m0[6u].z, fma(_1147, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1146));
    float _1243 = fma(_1148, cbSceneParam._m0[7u].z, fma(_1147, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1146));
    vec4 _1245 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1256 = (((_1245.y - _1149) + (_1245.w * _1149)) * cbMtdParam._m0[3u].x) + _1149;
    uint _1269 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1270 = _1269 + 9u;
    uint _1271 = _1270 + uint(cbMatDynParam._m0[0u].w);
    float _1277 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * cbInstanceData._m0[_1271].x;
    float _1278 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * cbInstanceData._m0[_1271].y;
    float _1279 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * cbInstanceData._m0[_1271].z;
    float _4248 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _1280 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
    float _1281 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _4270 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
    float _1282 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    vec4 _1283 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1288 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1299 = (((_1288.x - _1153) + (_1288.w * _1153)) * cbMtdParam._m0[3u].x) + _1153;
    float _1312 = (cbMtdParam._m0[3u].x * (((_1280 * _1219) - _1280) + _1283.x)) + _1280;
    float _1313 = (cbMtdParam._m0[3u].x * (((_1281 * _1219) - _1281) + _1283.y)) + _1281;
    float _1314 = (cbMtdParam._m0[3u].x * (((_1282 * _1219) - _1282) + _1283.z)) + _1282;
    float _1315 = 1.0 - _1299;
    float _1316 = _1315 * _1312;
    float _1317 = _1315 * _1313;
    float _1318 = _1315 * _1314;
    float _1323 = (_1312 + (-0.039999999105930328369140625)) * _1299;
    float _1324 = (_1313 + (-0.039999999105930328369140625)) * _1299;
    float _1325 = (_1314 + (-0.039999999105930328369140625)) * _1299;
    float _1326 = _1323 + 0.039999999105930328369140625;
    float _1328 = _1324 + 0.039999999105930328369140625;
    float _1329 = _1325 + 0.039999999105930328369140625;
    vec4 _1338 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1214, cbSceneParam._m0[86u].y * _1215));
    float _1341 = _1338.x * TEXCOORD_5.w;
    float _1342 = dot(vec3(_1146, _1147, _1148), vec3(_1206, _1207, _1208));
    float _1345 = _1342 * 2.0;
    float _1349 = (_1345 * _1146) - _1206;
    float _1350 = (_1345 * _1147) - _1207;
    float _1351 = (_1345 * _1148) - _1208;
    float _1355 = abs(dot(vec3(_1206, _1207, _1208), vec3(_1146, _1147, _1148)));
    float _4281 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
    float _1357 = sqrt(_1256);
    float _1368 = exp2((_1357 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1357 * 3.0));
    float _1374 = (1.0 - _1368) * ((_1357 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1375 = _1368 * _1357;
    float _1403 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1411 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1709;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1436 = fma(_1411, cbModelParam._m0[26u].z, fma(_1407, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1403));
        float _1440 = fma(_1411, cbModelParam._m0[27u].z, fma(_1407, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1403));
        float _1444 = fma(_1411, cbModelParam._m0[28u].z, fma(_1407, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1403));
        float _1468 = _1403 + _1146;
        float _1469 = _1407 + _1147;
        float _1470 = _1411 + _1148;
        float _1480 = fma(_1470, cbModelParam._m0[26u].z, fma(_1469, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1468)) - _1436;
        float _1481 = fma(_1470, cbModelParam._m0[27u].z, fma(_1469, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1468)) - _1440;
        float _1482 = fma(_1470, cbModelParam._m0[28u].z, fma(_1469, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1468)) - _1444;
        float _1486 = inversesqrt(dot(vec3(_1480, _1481, _1482), vec3(_1480, _1481, _1482)));
        float _1498 = ((_1486 * _1480) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1436 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1499 = ((_1486 * _1481) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1440 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1500 = ((_1486 * _1482) / cbModelParam._m0[34u].z) + ((((((_1444 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1503 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1498, _1499, _1500), 0.0);
        float _1537 = exp2((_1503.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1503.x + (-0.5));
        float _1539 = _1537 * (_1503.y + (-0.5));
        float _1540 = _1537 * (_1503.z + (-0.5));
        float _1547 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1510.x + (-0.5));
        float _1549 = _1547 * (_1510.y + (-0.5));
        float _1550 = _1547 * (_1510.z + (-0.5));
        float _1557 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1558 = _1557 * (_1517.x + (-0.5));
        float _1559 = _1557 * (_1517.y + (-0.5));
        float _1560 = _1557 * (_1517.z + (-0.5));
        float _1567 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1568 = _1567 * (_1524.x + (-0.5));
        float _1569 = _1567 * (_1524.y + (-0.5));
        float _1570 = _1567 * (_1524.z + (-0.5));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = _1538 * 0.5;
        float _1575 = _1548 * 0.5;
        float _1576 = _1558 * 0.5;
        float _1577 = dot(vec3(_1574, _1575, _1576), vec3(_1574, _1575, _1576));
        float _1582 = (_1577 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1577);
        float _1591 = (dot(vec3(_1146, _1147, _1148), vec3(_1582 * _1574, _1582 * _1575, _1582 * _1576)) + 1.0) * 0.5;
        float _4307 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1601 = sqrt(((_1575 * _1575) + (_1574 * _1574)) + (_1576 * _1576)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4318 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4329 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (_1603 + 1.0))) + _1608) * _1571;
        float _1618 = _1539 * 0.5;
        float _1619 = _1549 * 0.5;
        float _1620 = _1559 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_1146, _1147, _1148), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1572 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4362 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1645 + 1.0))) + _1650) * _1572;
        float _1660 = _1540 * 0.5;
        float _1661 = _1550 * 0.5;
        float _1662 = _1560 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_1146, _1147, _1148), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4395 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1687 + 1.0))) + _1692) * _1573;
        _1709 = _1540;
        _1711 = _1539;
        _1712 = _1538;
        _1713 = _1550;
        _1714 = _1549;
        _1715 = _1548;
        _1716 = _1560;
        _1717 = _1559;
        _1718 = _1558;
        _1719 = _1573;
        _1720 = _1572;
        _1721 = _1571;
        _1722 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1723 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1724 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1710;
        _1711 = _1710;
        _1712 = _1710;
        _1713 = _1710;
        _1714 = _1710;
        _1715 = _1710;
        _1716 = _1710;
        _1717 = _1710;
        _1718 = _1710;
        _1719 = _1710;
        _1720 = _1710;
        _1721 = _1710;
        _1722 = 0.0;
        _1723 = 0.0;
        _1724 = 0.0;
    }
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    float _2020;
    float _2021;
    float _2022;
    float _2023;
    float _2024;
    float _2025;
    float _2026;
    float _2027;
    float _2028;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1747 = fma(_1411, cbModelParam._m0[30u].z, fma(_1407, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1403));
        float _1751 = fma(_1411, cbModelParam._m0[31u].z, fma(_1407, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1403));
        float _1755 = fma(_1411, cbModelParam._m0[32u].z, fma(_1407, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1403));
        float _1777 = _1403 + _1146;
        float _1778 = _1407 + _1147;
        float _1779 = _1411 + _1148;
        float _1789 = fma(_1779, cbModelParam._m0[30u].z, fma(_1778, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1777)) - _1747;
        float _1790 = fma(_1779, cbModelParam._m0[31u].z, fma(_1778, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1777)) - _1751;
        float _1791 = fma(_1779, cbModelParam._m0[32u].z, fma(_1778, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1777)) - _1755;
        float _1795 = inversesqrt(dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791)));
        float _1807 = ((_1795 * _1789) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1747 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1808 = ((_1795 * _1790) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1751 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1809 = ((_1795 * _1791) / cbModelParam._m0[35u].z) + ((((((_1755 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1811 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1807, _1808, _1809), 0.0);
        vec4 _1818 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1807, _1808, _1809), 0.0);
        vec4 _1825 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1807, _1808, _1809), 0.0);
        vec4 _1832 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1807, _1808, _1809), 0.0);
        float _1844 = exp2((_1811.w + (-0.5)) * 20.0) * 2.0;
        float _1845 = _1844 * (_1811.x + (-0.5));
        float _1846 = _1844 * (_1811.y + (-0.5));
        float _1847 = _1844 * (_1811.z + (-0.5));
        float _1854 = exp2((_1818.w + (-0.5)) * 20.0) * 2.0;
        float _1855 = _1854 * (_1818.x + (-0.5));
        float _1856 = _1854 * (_1818.y + (-0.5));
        float _1857 = _1854 * (_1818.z + (-0.5));
        float _1864 = exp2((_1825.w + (-0.5)) * 20.0) * 2.0;
        float _1865 = _1864 * (_1825.x + (-0.5));
        float _1866 = _1864 * (_1825.y + (-0.5));
        float _1867 = _1864 * (_1825.z + (-0.5));
        float _1874 = exp2((_1832.w + (-0.5)) * 20.0) * 2.0;
        float _1875 = _1874 * (_1832.x + (-0.5));
        float _1876 = _1874 * (_1832.y + (-0.5));
        float _1877 = _1874 * (_1832.z + (-0.5));
        float _1878 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1879 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1880 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        float _1881 = _1845 * 0.5;
        float _1882 = _1855 * 0.5;
        float _1883 = _1865 * 0.5;
        float _1884 = dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883));
        float _1889 = (_1884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1884);
        float _1897 = (dot(vec3(_1146, _1147, _1148), vec3(_1889 * _1881, _1889 * _1882, _1889 * _1883)) + 1.0) * 0.5;
        float _4436 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
        float _1906 = sqrt(((_1882 * _1882) + (_1881 * _1881)) + (_1883 * _1883)) / (_1878 + 9.9999997473787516355514526367188e-06);
        float _4447 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
        float _1907 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
        float _1908 = _1907 * 2.0;
        float _1912 = (1.0 - _1907) / (_1907 + 1.0);
        float _4458 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
        float _1913 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
        float _1922 = ((((1.0 - _1913) * (_1908 + 2.0)) * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (_1908 + 1.0))) + _1913) * _1878;
        float _1923 = _1846 * 0.5;
        float _1924 = _1856 * 0.5;
        float _1925 = _1866 * 0.5;
        float _1926 = dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925));
        float _1931 = (_1926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1926);
        float _1939 = (dot(vec3(_1146, _1147, _1148), vec3(_1931 * _1923, _1931 * _1924, _1931 * _1925)) + 1.0) * 0.5;
        float _4469 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1948 = sqrt(((_1924 * _1924) + (_1923 * _1923)) + (_1925 * _1925)) / (_1879 + 9.9999997473787516355514526367188e-06);
        float _4480 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1949 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1950 = _1949 * 2.0;
        float _1954 = (1.0 - _1949) / (_1949 + 1.0);
        float _4491 = isnan(0.0) ? _1954 : (isnan(_1954) ? 0.0 : max(_1954, 0.0));
        float _1955 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
        float _1964 = ((((1.0 - _1955) * (_1950 + 2.0)) * exp2(log2(isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_1950 + 1.0))) + _1955) * _1879;
        float _1965 = _1847 * 0.5;
        float _1966 = _1857 * 0.5;
        float _1967 = _1867 * 0.5;
        float _1968 = dot(vec3(_1965, _1966, _1967), vec3(_1965, _1966, _1967));
        float _1973 = (_1968 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1968);
        float _1981 = (dot(vec3(_1146, _1147, _1148), vec3(_1973 * _1965, _1973 * _1966, _1973 * _1967)) + 1.0) * 0.5;
        float _4502 = isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0));
        float _1990 = sqrt(((_1966 * _1966) + (_1965 * _1965)) + (_1967 * _1967)) / (_1880 + 9.9999997473787516355514526367188e-06);
        float _4513 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
        float _1991 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1992 = _1991 * 2.0;
        float _1996 = (1.0 - _1991) / (_1991 + 1.0);
        float _4524 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1997 = isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0));
        float _2006 = ((((1.0 - _1997) * (_1992 + 2.0)) * exp2(log2(isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_1992 + 1.0))) + _1997) * _1880;
        _2014 = _1847;
        _2015 = _1846;
        _2016 = _1845;
        _2017 = _1857;
        _2018 = _1856;
        _2019 = _1855;
        _2020 = _1867;
        _2021 = _1866;
        _2022 = _1865;
        _2023 = _1880;
        _2024 = _1879;
        _2025 = _1878;
        _2026 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0)));
        _2027 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0)));
        _2028 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0)));
    }
    else
    {
        _2014 = _1710;
        _2015 = _1710;
        _2016 = _1710;
        _2017 = _1710;
        _2018 = _1710;
        _2019 = _1710;
        _2020 = _1710;
        _2021 = _1710;
        _2022 = _1710;
        _2023 = _1710;
        _2024 = _1710;
        _2025 = _1710;
        _2026 = 0.0;
        _2027 = 0.0;
        _2028 = 0.0;
    }
    float _2038 = (cbModelParam._m0[1u].x * (_2026 - _1722)) + _1722;
    float _2039 = (cbModelParam._m0[1u].x * (_2027 - _1723)) + _1723;
    float _2040 = (cbModelParam._m0[1u].x * (_2028 - _1724)) + _1724;
    float _2061 = fma(_2040, cbSceneParam._m0[89u].z, fma(_2039, cbSceneParam._m0[89u].y, _2038 * cbSceneParam._m0[89u].x));
    float _2064 = fma(_2040, cbSceneParam._m0[90u].z, fma(_2039, cbSceneParam._m0[90u].y, _2038 * cbSceneParam._m0[90u].x));
    float _2067 = fma(_2040, cbSceneParam._m0[91u].z, fma(_2039, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2038));
    float _2080 = _1349 * 0.5;
    float _2081 = _1350 * 0.5;
    float _2082 = _1351 * 0.5;
    float _2083 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_2016, _2019, _2022, _2025));
    float _2086 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_2015, _2018, _2021, _2024));
    float _2089 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_2014, _2017, _2020, _2023));
    float _2123;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2096 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_1709, _1713, _1716, _1719));
        float _2100 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_1711, _1714, _1717, _1720));
        float _2104 = dot(vec4(_2080, _2081, _2082, 1.0), vec4(_1712, _1715, _1718, _1721));
        float _2111 = dot(vec4(cbModelParam._m0[39u]), vec4(_2080, _2081, _2082, 1.0));
        _2123 = dot(vec3(isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0)), isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)), isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2111) ? 0.0 : (isnan(0.0) ? _2111 : max(0.0, _2111))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2123 = 1.0;
    }
    float _2134;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2125 = dot(vec4(cbModelParam._m0[40u]), vec4(_2080, _2081, _2082, 1.0));
        _2134 = dot(vec3(isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0)), isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0)), isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2125) ? 0.0 : (isnan(0.0) ? _2125 : max(0.0, _2125))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2134 = 1.0;
    }
    float _2138 = (_2134 * cbModelParam._m0[1u].x) + (_2123 * (1.0 - cbModelParam._m0[1u].x));
    float _2148 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1256);
    float _2149 = isnan(_2148) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2148 : min(cbModelParam._m0[25u].z, _2148));
    float _2229;
    float _2231;
    float _2233;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2196 = fma(_1411, cbModelParam._m0[13u].z, fma(_1407, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1403)) + cbModelParam._m0[13u].w;
        float _2200 = fma(_1411, cbModelParam._m0[14u].z, fma(_1407, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1403)) + cbModelParam._m0[14u].w;
        float _2204 = fma(_1411, cbModelParam._m0[15u].z, fma(_1407, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1403)) + cbModelParam._m0[15u].w;
        float _2207 = fma(_1351, cbModelParam._m0[13u].z, fma(_1350, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1349));
        float _2210 = fma(_1351, cbModelParam._m0[14u].z, fma(_1350, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1349));
        float _2213 = fma(_1351, cbModelParam._m0[15u].z, fma(_1350, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1349));
        float _2241;
        if (_2207 > 0.0)
        {
            _2241 = abs((1.0 - _2196) / _2207);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2207 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2196 + 1.0) / _2207);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2241 = frontier_phi_14_12_ladder;
        }
        float _2443;
        if (_2210 > 0.0)
        {
            _2443 = abs((1.0 - _2200) / _2210);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2200 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2443 = frontier_phi_23_19_ladder;
        }
        float _2697;
        if (_2213 > 0.0)
        {
            _2697 = abs((1.0 - _2204) / _2213);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2213 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2204 + 1.0) / _2213);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2697 = frontier_phi_35_30_ladder;
        }
        float _2699 = isnan(_2443) ? _2241 : (isnan(_2241) ? _2443 : min(_2241, _2443));
        float _2700 = isnan(_2697) ? _2699 : (isnan(_2699) ? _2697 : min(_2699, _2697));
        float _2704 = (_2700 * _2207) + _2196;
        float _2705 = (_2700 * _2210) + _2200;
        float _2706 = (_2700 * _2213) + _2204;
        float _2707 = _2700 * 9.9999997473787516355514526367188e-05;
        float _2709 = (-1.0) - _2707;
        float _2711 = _2707 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2706 > _2711) || ((_2706 < _2709) || ((_2705 > _2711) || ((_2705 < _2709) || ((_2704 < _2709) || (_2704 > _2711))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2834 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2706, cbModelParam._m0[9u].z, fma(_2705, cbModelParam._m0[9u].y, _2704 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2706, cbModelParam._m0[10u].z, fma(_2705, cbModelParam._m0[10u].y, _2704 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2706, cbModelParam._m0[11u].z, fma(_2705, cbModelParam._m0[11u].y, _2704 * cbModelParam._m0[11u].x))), _2149);
            frontier_phi_13_35_ladder = _2834.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2834.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2834.x * cbModelParam._m0[1u].y;
        }
        _2229 = frontier_phi_13_35_ladder_2;
        _2231 = frontier_phi_13_35_ladder_1;
        _2233 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2217 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1349, _1350, _1351), _2149);
        _2229 = _2217.x * cbModelParam._m0[1u].y;
        _2231 = _2217.y * cbModelParam._m0[1u].y;
        _2233 = _2217.z * cbModelParam._m0[1u].y;
    }
    float _2237 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1256);
    float _2238 = isnan(_2237) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2237 : min(cbModelParam._m0[25u].w, _2237));
    float _2327;
    float _2329;
    float _2331;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2291 = fma(_1411, cbModelParam._m0[21u].z, fma(_1407, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1403)) + cbModelParam._m0[21u].w;
        float _2295 = fma(_1411, cbModelParam._m0[22u].z, fma(_1407, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1403)) + cbModelParam._m0[22u].w;
        float _2299 = fma(_1411, cbModelParam._m0[23u].z, fma(_1407, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1403)) + cbModelParam._m0[23u].w;
        float _2302 = fma(_1351, cbModelParam._m0[21u].z, fma(_1350, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1349));
        float _2305 = fma(_1351, cbModelParam._m0[22u].z, fma(_1350, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1349));
        float _2308 = fma(_1351, cbModelParam._m0[23u].z, fma(_1350, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1349));
        float _2448;
        if (_2302 > 0.0)
        {
            _2448 = abs((1.0 - _2291) / _2302);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2302 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2291 + 1.0) / _2302);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2448 = frontier_phi_25_21_ladder;
        }
        float _2724;
        if (_2305 > 0.0)
        {
            _2724 = abs((1.0 - _2295) / _2305);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2305 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2295 + 1.0) / _2305);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2724 = frontier_phi_37_32_ladder;
        }
        float _2937;
        if (_2308 > 0.0)
        {
            _2937 = abs((1.0 - _2299) / _2308);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2308 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2299 + 1.0) / _2308);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2937 = frontier_phi_46_43_ladder;
        }
        float _2939 = isnan(_2724) ? _2448 : (isnan(_2448) ? _2724 : min(_2448, _2724));
        float _2940 = isnan(_2937) ? _2939 : (isnan(_2939) ? _2937 : min(_2939, _2937));
        float _2944 = (_2940 * _2302) + _2291;
        float _2945 = (_2940 * _2305) + _2295;
        float _2946 = (_2940 * _2308) + _2299;
        float _2947 = _2940 * 9.9999997473787516355514526367188e-05;
        float _2948 = (-1.0) - _2947;
        float _2950 = _2947 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2946 > _2950) || ((_2946 < _2948) || ((_2945 > _2950) || ((_2945 < _2948) || ((_2944 < _2948) || (_2944 > _2950))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3174 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2946, cbModelParam._m0[17u].z, fma(_2945, cbModelParam._m0[17u].y, _2944 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2946, cbModelParam._m0[18u].z, fma(_2945, cbModelParam._m0[18u].y, _2944 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2946, cbModelParam._m0[19u].z, fma(_2945, cbModelParam._m0[19u].y, _2944 * cbModelParam._m0[19u].x))), _2238);
            frontier_phi_22_46_ladder = _3174.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3174.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3174.x * cbModelParam._m0[1u].z;
        }
        _2327 = frontier_phi_22_46_ladder_2;
        _2329 = frontier_phi_22_46_ladder_1;
        _2331 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2311 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1349, _1350, _1351), _2238);
        _2327 = _2311.x * cbModelParam._m0[1u].z;
        _2329 = _2311.y * cbModelParam._m0[1u].z;
        _2331 = _2311.z * cbModelParam._m0[1u].z;
    }
    float _2344 = (((_1374 * _1326) + _1375) * _1341) * ((cbModelParam._m0[1u].w * (_2327 - _2229)) + _2229);
    float _2346 = (((_1374 * _1328) + _1375) * _1341) * ((cbModelParam._m0[1u].w * (_2329 - _2231)) + _2231);
    float _2348 = (((_1374 * _1329) + _1375) * _1341) * ((cbModelParam._m0[1u].w * (_2331 - _2233)) + _2233);
    float _2351 = fma(_2348, cbSceneParam._m0[89u].z, fma(_2346, cbSceneParam._m0[89u].y, _2344 * cbSceneParam._m0[89u].x));
    float _2354 = fma(_2348, cbSceneParam._m0[90u].z, fma(_2346, cbSceneParam._m0[90u].y, _2344 * cbSceneParam._m0[90u].x));
    float _2357 = fma(_2348, cbSceneParam._m0[91u].z, fma(_2346, cbSceneParam._m0[91u].y, _2344 * cbSceneParam._m0[91u].x));
    uvec4 _2367 = floatBitsToUint(cbInstanceData._m0[_1269 + 5u]);
    uint _2369 = _2367.x * 14u;
    uint _2370 = _2369 + 13u;
    float _2377 = _1341 + (-1.0);
    float _2382 = (cbLight._m0[_2370].x * _2377) + 1.0;
    float _2383 = (cbLight._m0[_2370].y * _2377) + 1.0;
    float _2384 = (cbLight._m0[_2370].z * _2377) + 1.0;
    float _2385 = (cbLight._m0[_2370].w * _2377) + 1.0;
    uint _2386 = _2369 + 5u;
    float _2392 = isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0));
    uint _2396 = _2369 + 4u;
    float _2402 = isnan(1.0) ? _2382 : (isnan(_2382) ? 1.0 : min(_2382, 1.0));
    uint _2406 = _2369 | 1u;
    float _2417 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_1146, _1147, _1148));
    float _2420 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_1146, _1147, _1148));
    float _4660 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _4671 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
    float _2425 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * 0.3183098733425140380859375;
    float _2427 = (isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0))) * 0.3183098733425140380859375;
    float _2434 = ((cbLight._m0[_2386].x * _2392) * _2427) + ((cbLight._m0[_2396].x * _2402) * _2425);
    float _2435 = ((_2392 * cbLight._m0[_2386].y) * _2427) + ((_2402 * cbLight._m0[_2396].y) * _2425);
    float _2436 = ((_2392 * cbLight._m0[_2386].z) * _2427) + ((_2402 * cbLight._m0[_2396].z) * _2425);
    uvec4 _2440 = floatBitsToUint(cbLight._m0[_2369 + 12u]);
    bool _2442 = _2440.x == 0u;
    float _2453;
    float _2455;
    float _2457;
    if (_2442)
    {
        _2453 = _2434;
        _2455 = _2435;
        _2457 = _2436;
    }
    else
    {
        uint _2461 = _2369 + 6u;
        float _2477 = (dot(vec3(cbLight._m0[_2369 + 2u].xyz), vec3(_1146, _1147, _1148)) * 0.5) + 0.5;
        float _2478 = _2477 * _2477;
        float _4682 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2479 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
        float _2480 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
        _2453 = (((cbLight._m0[_2461].x * 0.3183098733425140380859375) * _2479) * _2480) + _2434;
        _2455 = (((cbLight._m0[_2461].y * 0.3183098733425140380859375) * _2479) * _2480) + _2435;
        _2457 = (((cbLight._m0[_2461].z * 0.3183098733425140380859375) * _2479) * _2480) + _2436;
    }
    bool _2460 = _2440.y == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2460)
    {
        _2498 = _2453;
        _2500 = _2455;
        _2502 = _2457;
    }
    else
    {
        uint _2668 = _2369 + 7u;
        float _2684 = (dot(vec3(cbLight._m0[_2369 + 3u].xyz), vec3(_1146, _1147, _1148)) * 0.5) + 0.5;
        float _2685 = _2684 * _2684;
        float _4698 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
        float _2686 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
        float _2687 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        _2498 = (((cbLight._m0[_2668].x * 0.3183098733425140380859375) * _2686) * _2687) + _2453;
        _2500 = (((cbLight._m0[_2668].y * 0.3183098733425140380859375) * _2686) * _2687) + _2455;
        _2502 = (((cbLight._m0[_2668].z * 0.3183098733425140380859375) * _2686) * _2687) + _2457;
    }
    uint _2505 = _2369 + 8u;
    float _2518 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2369].w)) * _1256) * 0.949999988079071044921875);
    float _2519 = _2518 * _2518;
    float _2520 = cbLight._m0[_2369].x + _1206;
    float _2521 = cbLight._m0[_2369].y + _1207;
    float _2522 = cbLight._m0[_2369].z + _1208;
    float _2526 = inversesqrt(dot(vec3(_2520, _2521, _2522), vec3(_2520, _2521, _2522)));
    float _2527 = _2526 * _2520;
    float _2528 = _2526 * _2521;
    float _2529 = _2526 * _2522;
    float _2530 = dot(vec3(_1146, _1147, _1148), vec3(cbLight._m0[_2369].xyz));
    float _4714 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
    float _4725 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
    float _2534 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
    float _2535 = dot(vec3(_1146, _1147, _1148), vec3(_2527, _2528, _2529));
    float _4736 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2538 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _2539 = dot(vec3(cbLight._m0[_2369].xyz), vec3(_2527, _2528, _2529));
    float _4747 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
    float _2543 = _2519 * _2519;
    float _2547 = ((_2538 * _2538) * (_2543 + (-1.0))) + 1.0;
    float _2555 = exp2(log2(1.0 - (isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0)))) * 5.0);
    float _2556 = 0.959999978542327880859375 - _1323;
    float _2558 = 0.959999978542327880859375 - _1324;
    float _2559 = 0.959999978542327880859375 - _1325;
    float _2566 = 1.0 - _2519;
    float _2577 = (0.5 / (((_2534 * ((_2533 * _2566) + _2519)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2566) + _2519) * _2533))) * _2533;
    float _4758 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2579 = (isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0))) * (_2543 / ((_2547 * _2547) * 3.141590118408203125));
    uint _2590 = _2369 + 9u;
    float _2601 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2406].w)) * _1256) * 0.949999988079071044921875);
    float _2602 = _2601 * _2601;
    float _2603 = cbLight._m0[_2406].x + _1206;
    float _2604 = cbLight._m0[_2406].y + _1207;
    float _2605 = cbLight._m0[_2406].z + _1208;
    float _2609 = inversesqrt(dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605)));
    float _2610 = _2609 * _2603;
    float _2611 = _2609 * _2604;
    float _2612 = _2609 * _2605;
    float _2613 = dot(vec3(_1146, _1147, _1148), vec3(cbLight._m0[_2406].xyz));
    float _4769 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
    float _2617 = dot(vec3(_1146, _1147, _1148), vec3(_2610, _2611, _2612));
    float _4780 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2620 = isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0));
    float _2621 = dot(vec3(cbLight._m0[_2406].xyz), vec3(_2610, _2611, _2612));
    float _4791 = isnan(0.0) ? _2621 : (isnan(_2621) ? 0.0 : max(_2621, 0.0));
    float _2625 = _2602 * _2602;
    float _2629 = ((_2620 * _2620) * (_2625 + (-1.0))) + 1.0;
    float _2636 = exp2(log2(1.0 - (isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0)))) * 5.0);
    float _2643 = 1.0 - _2602;
    float _2653 = (0.5 / (((_2534 * ((_2616 * _2643) + _2602)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2643) + _2602) * _2616))) * _2616;
    float _4802 = isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0));
    float _2655 = (isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0))) * (_2625 / ((_2629 * _2629) * 3.141590118408203125));
    float _2665 = (((((_2636 * _2556) + _1326) * cbLight._m0[_2590].x) * _2655) * _2392) + (((((_2555 * _2556) + _1326) * cbLight._m0[_2505].x) * _2579) * _2402);
    float _2666 = (((((_2636 * _2558) + _1328) * cbLight._m0[_2590].y) * _2655) * _2392) + (((((_2555 * _2558) + _1328) * cbLight._m0[_2505].y) * _2579) * _2402);
    float _2667 = (((((_2636 * _2559) + _1329) * cbLight._m0[_2590].z) * _2655) * _2392) + (((((_2555 * _2559) + _1329) * cbLight._m0[_2505].z) * _2579) * _2402);
    float _2729;
    float _2731;
    float _2733;
    if (_2442)
    {
        _2729 = _2665;
        _2731 = _2666;
        _2733 = _2667;
    }
    else
    {
        uint _2735 = _2369 + 2u;
        uint _2739 = _2369 + 10u;
        float _2753 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2735].w)) * _1256) * 0.949999988079071044921875);
        float _2754 = _2753 * _2753;
        float _2755 = cbLight._m0[_2735].x + _1206;
        float _2756 = cbLight._m0[_2735].y + _1207;
        float _2757 = cbLight._m0[_2735].z + _1208;
        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
        float _2762 = _2761 * _2755;
        float _2763 = _2761 * _2756;
        float _2764 = _2761 * _2757;
        float _2765 = dot(vec3(_1146, _1147, _1148), vec3(cbLight._m0[_2735].xyz));
        float _4813 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
        float _2769 = dot(vec3(_1146, _1147, _1148), vec3(_2762, _2763, _2764));
        float _4824 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2772 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2773 = dot(vec3(cbLight._m0[_2735].xyz), vec3(_2762, _2763, _2764));
        float _4835 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
        float _2777 = _2754 * _2754;
        float _2781 = ((_2772 * _2772) * (_2777 + (-1.0))) + 1.0;
        float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0)))) * 5.0);
        float _2795 = 1.0 - _2754;
        float _2805 = (0.5 / (((_2534 * ((_2768 * _2795) + _2754)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2795) + _2754) * _2768))) * _2768;
        float _4846 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2807 = (isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_2777 / ((_2781 * _2781) * 3.141590118408203125));
        float _2808 = isnan(1.0) ? _2384 : (isnan(_2384) ? 1.0 : min(_2384, 1.0));
        _2729 = (((((_2788 * _2556) + _1326) * cbLight._m0[_2739].x) * _2807) * _2808) + _2665;
        _2731 = (((((_2788 * _2558) + _1328) * cbLight._m0[_2739].y) * _2807) * _2808) + _2666;
        _2733 = (((((_2788 * _2559) + _1329) * cbLight._m0[_2739].z) * _2807) * _2808) + _2667;
    }
    float _2843;
    float _2845;
    float _2847;
    if (_2460)
    {
        _2843 = _2729;
        _2845 = _2731;
        _2847 = _2733;
    }
    else
    {
        uint _2854 = _2369 + 3u;
        uint _2858 = _2369 + 11u;
        float _2872 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2854].w)) * _1256) * 0.949999988079071044921875);
        float _2873 = _2872 * _2872;
        float _2874 = cbLight._m0[_2854].x + _1206;
        float _2875 = cbLight._m0[_2854].y + _1207;
        float _2876 = cbLight._m0[_2854].z + _1208;
        float _2880 = inversesqrt(dot(vec3(_2874, _2875, _2876), vec3(_2874, _2875, _2876)));
        float _2881 = _2880 * _2874;
        float _2882 = _2880 * _2875;
        float _2883 = _2880 * _2876;
        float _2884 = dot(vec3(_1146, _1147, _1148), vec3(cbLight._m0[_2854].xyz));
        float _4862 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
        float _2888 = dot(vec3(_1146, _1147, _1148), vec3(_2881, _2882, _2883));
        float _4873 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2891 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
        float _2892 = dot(vec3(cbLight._m0[_2854].xyz), vec3(_2881, _2882, _2883));
        float _4884 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0));
        float _2896 = _2873 * _2873;
        float _2900 = ((_2891 * _2891) * (_2896 + (-1.0))) + 1.0;
        float _2907 = exp2(log2(1.0 - (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0)))) * 5.0);
        float _2914 = 1.0 - _2873;
        float _2924 = (0.5 / (((_2534 * ((_2887 * _2914) + _2873)) + 9.9999999392252902907785028219223e-09) + (((_2534 * _2914) + _2873) * _2887))) * _2887;
        float _4895 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
        float _2926 = (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0))) * (_2896 / ((_2900 * _2900) * 3.141590118408203125));
        float _2927 = isnan(1.0) ? _2385 : (isnan(_2385) ? 1.0 : min(_2385, 1.0));
        _2843 = (((((_2907 * _2556) + _1326) * cbLight._m0[_2858].x) * _2926) * _2927) + _2729;
        _2845 = (((((_2907 * _2558) + _1328) * cbLight._m0[_2858].y) * _2926) * _2927) + _2731;
        _2847 = (((((_2907 * _2559) + _1329) * cbLight._m0[_2858].z) * _2926) * _2927) + _2733;
    }
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    float _3070;
    float _3072;
    if (_2367.y == 0u)
    {
        float _3002 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3003 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3002;
        float _3004 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3002;
        float _3005 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3002;
        uvec4 _3017 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3018 = _3017.x;
        uint _3029 = uint((float(_3017.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1215) / _3018))) + floor(float(uint(cbSceneParam._m0[85u].x * _1214) / _3018)));
        float _3039 = (log2(_3005 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3040 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
        uint _3043 = uint(isnan(14.0) ? _3040 : (isnan(_3040) ? 14.0 : min(_3040, 14.0)));
        uvec4 _3048 = texelFetch(g_lightClusterGridBuffer, int(((_3043 << 2u) + (_3029 << 6u)) >> 2u));
        uint _3049 = _3048.x;
        uint _3050 = _3017.z;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((((1u << ((_3050 >> 4u) & 15u)) + 4294967295u) & _3049) == 0u) || ((_3050 & 240u) == 0u))
        {
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
            _3187 = 0.0;
            _3189 = 0.0;
        }
        else
        {
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3188;
            float _3190;
            float _3331 = 0.0;
            float _3332 = 0.0;
            float _3333 = 0.0;
            float _3334 = 0.0;
            float _3335 = 0.0;
            float _3336 = 0.0;
            uint _3337 = 0u;
            uint _3346;
            bool _3347;
            for (;;)
            {
                _3346 = texelFetch(g_lightClassification, int((((_3043 << 5u) + (_3029 << 9u)) + (_3337 << 2u)) >> 2u)).x;
                _3347 = _3346 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3347)
                {
                    frontier_phi_61_pred = _3331;
                    frontier_phi_61_pred_1 = _3336;
                    frontier_phi_61_pred_2 = _3335;
                    frontier_phi_61_pred_3 = _3334;
                    frontier_phi_61_pred_4 = _3333;
                    frontier_phi_61_pred_5 = _3332;
                }
                else
                {
                    float _3455;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    uint _3461;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3333;
                    _3458 = _3334;
                    _3459 = _3335;
                    _3460 = _3336;
                    _3461 = _3346;
                    float _3387;
                    float _3388;
                    float _3389;
                    float _3390;
                    float _3391;
                    float _3392;
                    for (;;)
                    {
                        uint _3465 = uint(findLSB(_3461)) + (_3337 << 5u);
                        uint _3462 = (_3461 + 4294967295u) & _3461;
                        uint _3467 = _3465 * 48u;
                        vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3467)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3467 + 3u)).x));
                        uint _3487 = (_3465 * 48u) + 4u;
                        vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3487)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3487 + 3u)).x));
                        uint _3506 = (_3465 * 48u) + 8u;
                        vec3 _3517 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3506)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3506 + 2u)).x));
                        float _3521 = _3481.x - _3003;
                        float _3522 = _3481.y - _3004;
                        float _3523 = _3481.z - _3005;
                        float _3524 = dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523));
                        float _3527 = inversesqrt(_3524);
                        float _3528 = _3527 * _3521;
                        float _3529 = _3527 * _3522;
                        float _3530 = _3527 * _3523;
                        float _3531 = dot(vec3(_1237, _1240, _1243), vec3(_3528, _3529, _3530));
                        float _3536 = 1.0 - (_3524 * _3481.w);
                        float _4921 = isnan(0.0) ? _3536 : (isnan(_3536) ? 0.0 : max(_3536, 0.0));
                        float _3537 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
                        float _3538 = sqrt(_3524) * _3500.w;
                        float _3541 = 1.39999997615814208984375 / (_3538 + 1.39999997615814208984375);
                        float _3542 = _3541 * _3541;
                        float _3545 = ((1.0 - _3542) * _3531) + _3542;
                        float _3548 = _3538 * _3538;
                        float _3552 = ((isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0))) * _3537) / ((_3548 * 0.699999988079071044921875) + 1.0);
                        float _3556 = (-0.0) - _3003;
                        float _3557 = (-0.0) - _3004;
                        float _3558 = (-0.0) - _3005;
                        float _3562 = inversesqrt(dot(vec3(_3556, _3557, _3558), vec3(_3556, _3557, _3558)));
                        float _3563 = _3562 * _3556;
                        float _3564 = _3562 * _3557;
                        float _3565 = _3562 * _3558;
                        float _3573 = exp2(log2(1.0 / ((_3548 * 3.5) + 5.0)) * 0.25);
                        float _3574 = 1.0 - _1357;
                        float _3581 = sqrt(1.0 - ((1.0 - (_3574 * _3574)) * (1.0 - (_3573 * _3573))));
                        float _3582 = _3581 * _3581;
                        float _3583 = _3582 * _3582;
                        float _3584 = _3563 + _3528;
                        float _3585 = _3564 + _3529;
                        float _3586 = _3565 + _3530;
                        float _3590 = inversesqrt(dot(vec3(_3584, _3585, _3586), vec3(_3584, _3585, _3586)));
                        float _3594 = dot(vec3(_1237, _1240, _1243), vec3(_3563, _3564, _3565));
                        float _4937 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3597 = isnan(1.0) ? _4937 : (isnan(_4937) ? 1.0 : min(_4937, 1.0));
                        float _3598 = dot(vec3(_1237, _1240, _1243), vec3(_3590 * _3584, _3590 * _3585, _3590 * _3586));
                        float _4948 = isnan(0.0) ? _3598 : (isnan(_3598) ? 0.0 : max(_3598, 0.0));
                        float _3601 = isnan(1.0) ? _4948 : (isnan(_4948) ? 1.0 : min(_4948, 1.0));
                        float _3605 = ((_3601 * _3601) * (_3583 + (-1.0))) + 1.0;
                        float _3606 = _3541 * _3582;
                        float _3607 = _3606 * _3606;
                        float _3610 = ((1.0 - _3607) * _3531) + _3607;
                        float _4959 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3611 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3612 = 1.0 - _3582;
                        float _3622 = (0.5 / (((_3611 * ((_3597 * _3612) + _3582)) + 9.9999999392252902907785028219223e-09) + (((_3611 * _3612) + _3582) * _3597))) * _3611;
                        float _4970 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                        float _3633 = (((_3583 * 3.1415927410125732421875) * (isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0)))) / ((_3605 * _3605) * ((_3548 * 2.1991131305694580078125) + 3.141590118408203125))) * _3537;
                        _3390 = (_3552 * _3500.x) + _3458;
                        _3391 = (_3552 * _3500.y) + _3459;
                        _3392 = (_3552 * _3500.z) + _3460;
                        _3387 = (_3633 * _3517.x) + _3455;
                        _3388 = (_3633 * _3517.y) + _3456;
                        _3389 = (_3633 * _3517.z) + _3457;
                        if (_3462 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3389;
                            _3458 = _3390;
                            _3459 = _3391;
                            _3460 = _3392;
                            _3461 = _3462;
                        }
                    }
                    frontier_phi_61_pred = _3387;
                    frontier_phi_61_pred_1 = _3392;
                    frontier_phi_61_pred_2 = _3391;
                    frontier_phi_61_pred_3 = _3390;
                    frontier_phi_61_pred_4 = _3389;
                    frontier_phi_61_pred_5 = _3388;
                }
                _3180 = frontier_phi_61_pred;
                _3190 = frontier_phi_61_pred_1;
                _3188 = frontier_phi_61_pred_2;
                _3186 = frontier_phi_61_pred_3;
                _3184 = frontier_phi_61_pred_4;
                _3182 = frontier_phi_61_pred_5;
                uint _3338 = _3337 + 1u;
                if (_3338 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3331 = _3180;
                    _3332 = _3182;
                    _3333 = _3184;
                    _3334 = _3186;
                    _3335 = _3188;
                    _3336 = _3190;
                    _3337 = _3338;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
            _3187 = _3188;
            _3189 = _3190;
        }
        uvec4 _3193 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3194 = _3193.z;
        uint _3196 = (_3194 >> 8u) & 15u;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        float _3307;
        float _3309;
        if (((4294967295u << _3196) & _3049) == 0u)
        {
            _3299 = _3179;
            _3301 = _3181;
            _3303 = _3183;
            _3305 = _3185;
            _3307 = _3187;
            _3309 = _3189;
        }
        else
        {
            float _3324 = inversesqrt(dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005)));
            float _3325 = _3324 * _3003;
            float _3326 = _3324 * _3004;
            float _3327 = _3324 * _3005;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3196 < ((_3194 >> 12u) & 15u))
            {
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3308;
                float _3310;
                float _3438 = _3179;
                float _3439 = _3181;
                float _3440 = _3183;
                float _3441 = _3185;
                float _3442 = _3187;
                float _3443 = _3189;
                uint _3444 = _3196;
                uint _3453;
                bool _3454;
                for (;;)
                {
                    _3453 = texelFetch(g_lightClassification, int((((_3043 << 5u) + (_3029 << 9u)) + (_3444 << 2u)) >> 2u)).x;
                    _3454 = _3453 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3454)
                    {
                        frontier_phi_67_pred = _3441;
                        frontier_phi_67_pred_1 = _3442;
                        frontier_phi_67_pred_2 = _3443;
                        frontier_phi_67_pred_3 = _3440;
                        frontier_phi_67_pred_4 = _3439;
                        frontier_phi_67_pred_5 = _3438;
                    }
                    else
                    {
                        float _3638;
                        float _3639;
                        float _3640;
                        float _3641;
                        float _3642;
                        float _3643;
                        float _3931;
                        float _3932;
                        float _3933;
                        float _3934;
                        float _3935;
                        float _3936;
                        float _3651 = _3438;
                        float _3652 = _3439;
                        float _3653 = _3440;
                        float _3654 = _3441;
                        float _3655 = _3442;
                        float _3656 = _3443;
                        uint _3657 = _3453;
                        uint _3658;
                        vec4 _3683;
                        float _3684;
                        vec4 _3699;
                        vec3 _3711;
                        vec4 _3726;
                        vec4 _3741;
                        float _3787;
                        bool _3788;
                        for (;;)
                        {
                            uint _3668 = ((_3444 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3657));
                            _3658 = (_3657 + 4294967295u) & _3657;
                            uint _3670 = _3668 * 40u;
                            _3683 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3670)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3670 + 3u)).x));
                            _3684 = _3683.w;
                            uint _3686 = (_3668 * 40u) + 4u;
                            _3699 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3686)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3686 + 3u)).x));
                            uint _3701 = (_3668 * 40u) + 8u;
                            _3711 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3701 + 2u)).x));
                            uint _3713 = (_3668 * 40u) + 16u;
                            _3726 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3713)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3713 + 3u)).x));
                            uint _3728 = (_3668 * 40u) + 20u;
                            _3741 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3728)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3728 + 3u)).x));
                            uint _3743 = (_3668 * 40u) + 24u;
                            vec4 _3756 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3743)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3743 + 3u)).x));
                            uint _3762 = (_3668 * 40u) + 28u;
                            vec4 _3775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3762 + 3u)).x));
                            _3787 = fma(_3005, _3775.z, fma(_3004, _3775.y, _3775.x * _3003)) + _3775.w;
                            _3788 = !((fma(_3005, _3756.z, fma(_3004, _3756.y, _3756.x * _3003)) + _3756.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3788)
                            {
                                float _3815 = _3683.x - _3003;
                                float _3816 = _3683.y - _3004;
                                float _3817 = _3683.z - _3005;
                                float _3818 = dot(vec3(_3815, _3816, _3817), vec3(_3815, _3816, _3817));
                                float _3821 = inversesqrt(_3818);
                                float _3822 = _3821 * _3815;
                                float _3823 = _3821 * _3816;
                                float _3824 = _3821 * _3817;
                                float _3828 = 1.0 - (_3818 / (_3684 * _3684));
                                float _4981 = isnan(0.0) ? _3828 : (isnan(_3828) ? 0.0 : max(_3828, 0.0));
                                float _3829 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                                float _3833 = sqrt(_3818) * _3699.w;
                                float _3835 = 1.39999997615814208984375 / (_3833 + 1.39999997615814208984375);
                                float _3836 = _3835 * _3835;
                                float _3839 = ((1.0 - _3836) * dot(vec3(_3822, _3823, _3824), vec3(_1237, _1240, _1243))) + _3836;
                                float _3842 = _3833 * _3833;
                                float _3846 = (fma(_3005, _3726.z, fma(_3004, _3726.y, _3726.x * _3003)) + _3726.w) / _3787;
                                float _3847 = (fma(_3005, _3741.z, fma(_3004, _3741.y, _3741.x * _3003)) + _3741.w) / _3787;
                                float _3851 = 1.0 - dot(vec2(_3846, _3847), vec2(_3846, _3847));
                                float _4997 = isnan(0.0) ? _3851 : (isnan(_3851) ? 0.0 : max(_3851, 0.0));
                                float _3852 = isnan(1.0) ? _4997 : (isnan(_4997) ? 1.0 : min(_4997, 1.0));
                                float _3853 = _3852 * (((isnan(0.0) ? _3839 : (isnan(_3839) ? 0.0 : max(_3839, 0.0))) * _3829) / ((_3842 * 0.699999988079071044921875) + 1.0));
                                float _3865 = exp2(log2(1.0 / ((_3842 * 3.5) + 5.0)) * 0.25);
                                float _3866 = 1.0 - _1357;
                                float _3873 = sqrt(1.0 - ((1.0 - (_3866 * _3866)) * (1.0 - (_3865 * _3865))));
                                float _3874 = _3873 * _3873;
                                float _3875 = _3874 * _3874;
                                float _3876 = _3822 - _3325;
                                float _3877 = _3823 - _3326;
                                float _3878 = _3824 - _3327;
                                float _3882 = inversesqrt(dot(vec3(_3876, _3877, _3878), vec3(_3876, _3877, _3878)));
                                float _3886 = dot(vec3(_1237, _1240, _1243), vec3((-0.0) - _3325, (-0.0) - _3326, (-0.0) - _3327));
                                float _5008 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3889 = isnan(1.0) ? _5008 : (isnan(_5008) ? 1.0 : min(_5008, 1.0));
                                float _3890 = dot(vec3(_1237, _1240, _1243), vec3(_3882 * _3876, _3882 * _3877, _3882 * _3878));
                                float _5019 = isnan(0.0) ? _3890 : (isnan(_3890) ? 0.0 : max(_3890, 0.0));
                                float _3893 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3897 = ((_3893 * _3893) * (_3875 + (-1.0))) + 1.0;
                                float _3898 = _3835 * _3874;
                                float _3899 = _3898 * _3898;
                                float _3905 = ((1.0 - _3899) * dot(vec3(_1237, _1240, _1243), vec3(_3822, _3823, _3824))) + _3899;
                                float _5030 = isnan(0.0) ? _3905 : (isnan(_3905) ? 0.0 : max(_3905, 0.0));
                                float _3906 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3907 = 1.0 - _3874;
                                float _3917 = (0.5 / (((_3906 * ((_3889 * _3907) + _3874)) + 9.9999999392252902907785028219223e-09) + (((_3906 * _3907) + _3874) * _3889))) * _3906;
                                float _5041 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3927 = (_3852 * _3829) * (((_3875 * 3.1415927410125732421875) * (isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0)))) / ((_3897 * _3897) * ((_3842 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3927 * _3711.x;
                                frontier_phi_73_pred_1 = _3927 * _3711.y;
                                frontier_phi_73_pred_2 = _3853 * _3699.z;
                                frontier_phi_73_pred_3 = _3853 * _3699.y;
                                frontier_phi_73_pred_4 = _3853 * _3699.x;
                                frontier_phi_73_pred_5 = _3927 * _3711.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3931 = frontier_phi_73_pred;
                            _3932 = frontier_phi_73_pred_1;
                            _3936 = frontier_phi_73_pred_2;
                            _3935 = frontier_phi_73_pred_3;
                            _3934 = frontier_phi_73_pred_4;
                            _3933 = frontier_phi_73_pred_5;
                            _3641 = _3934 + _3654;
                            _3642 = _3935 + _3655;
                            _3643 = _3936 + _3656;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            _3640 = _3933 + _3653;
                            if (_3658 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3640;
                                _3654 = _3641;
                                _3655 = _3642;
                                _3656 = _3643;
                                _3657 = _3658;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3641;
                        frontier_phi_67_pred_1 = _3642;
                        frontier_phi_67_pred_2 = _3643;
                        frontier_phi_67_pred_3 = _3640;
                        frontier_phi_67_pred_4 = _3639;
                        frontier_phi_67_pred_5 = _3638;
                    }
                    _3306 = frontier_phi_67_pred;
                    _3308 = frontier_phi_67_pred_1;
                    _3310 = frontier_phi_67_pred_2;
                    _3304 = frontier_phi_67_pred_3;
                    _3302 = frontier_phi_67_pred_4;
                    _3300 = frontier_phi_67_pred_5;
                    uint _3445 = _3444 + 1u;
                    if (_3445 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3438 = _3300;
                        _3439 = _3302;
                        _3440 = _3304;
                        _3441 = _3306;
                        _3442 = _3308;
                        _3443 = _3310;
                        _3444 = _3445;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3308;
                frontier_phi_55_56_ladder_1 = _3310;
                frontier_phi_55_56_ladder_2 = _3306;
                frontier_phi_55_56_ladder_3 = _3304;
                frontier_phi_55_56_ladder_4 = _3302;
                frontier_phi_55_56_ladder_5 = _3300;
            }
            else
            {
                frontier_phi_55_56_ladder = _3187;
                frontier_phi_55_56_ladder_1 = _3189;
                frontier_phi_55_56_ladder_2 = _3185;
                frontier_phi_55_56_ladder_3 = _3183;
                frontier_phi_55_56_ladder_4 = _3181;
                frontier_phi_55_56_ladder_5 = _3179;
            }
            _3299 = frontier_phi_55_56_ladder_5;
            _3301 = frontier_phi_55_56_ladder_4;
            _3303 = frontier_phi_55_56_ladder_3;
            _3305 = frontier_phi_55_56_ladder_2;
            _3307 = frontier_phi_55_56_ladder;
            _3309 = frontier_phi_55_56_ladder_1;
        }
        float _3314 = isnan(1.0) ? _1341 : (isnan(_1341) ? 1.0 : min(_1341, 1.0));
        _3062 = (_3314 * _3305) + _2498;
        _3064 = (_3314 * _3307) + _2500;
        _3066 = (_3314 * _3309) + _2502;
        _3068 = ((_3299 * _1326) * _3314) + _2843;
        _3070 = ((_3301 * _1328) * _3314) + _2845;
        _3072 = ((_3303 * _1329) * _3314) + _2847;
    }
    else
    {
        _3062 = _2498;
        _3064 = _2500;
        _3066 = _2502;
        _3068 = _2843;
        _3070 = _2845;
        _3072 = _2847;
    }
    uint _3078 = _1270 + uint(cbMatDynParam._m0[0u].w);
    float _3084 = (((((cbMtdParam._m0[22u].x * _1050.x) * cbMtdParam._m0[32u].x) * _1073) + _824) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3078].x;
    float _3085 = (((((cbMtdParam._m0[22u].y * _1050.y) * cbMtdParam._m0[32u].x) * _1073) + _825) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3078].y;
    float _3086 = (((((cbMtdParam._m0[22u].z * _1050.z) * cbMtdParam._m0[32u].x) * _1073) + _826) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3078].z;
    float _5057 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _5068 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _5079 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
    float _3103 = (((isnan(1.0) ? _5057 : (isnan(_5057) ? 1.0 : min(_5057, 1.0))) * (_3062 + ((isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0))) * _1341))) + ((_3068 + ((isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0))) * _2138)) * cbPerFrame._m0[3u].x)) + _3084;
    float _3105 = (_3085 + ((_3070 + ((isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0))) * _2138)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5068 : (isnan(_5068) ? 1.0 : min(_5068, 1.0))) * (_3064 + ((isnan(0.0) ? _2064 : (isnan(_2064) ? 0.0 : max(_2064, 0.0))) * _1341)));
    float _3107 = (_3086 + ((_3072 + ((isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0))) * _2138)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3066 + ((isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0))) * _1341)));
    float _5105 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3120 = isnan(1.0) ? _5105 : (isnan(_5105) ? 1.0 : min(_5105, 1.0));
    uint _3121 = _1269 + 6u;
    float _3129 = _1214 / cbSceneParam._m0[86u].x;
    float _3130 = _1215 / cbSceneParam._m0[86u].y;
    vec4 _3144 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3129, _3130, (log2((isnan(cbSceneParam._m0[77u].w) ? _1169 : (isnan(_1169) ? cbSceneParam._m0[77u].w : min(_1169, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3146 = _3144.x;
    float _3147 = _3144.y;
    float _3148 = _3144.z;
    float _3149 = _3144.w;
    float _3241;
    float _3243;
    float _3245;
    float _3247;
    if (_1169 > cbSceneParam._m0[78u].w)
    {
        float _3204 = isnan(_1169) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1169 : min(cbSceneParam._m0[80u].w, _1169));
        float _3205 = _3204 / _1169;
        float _3216 = _3205 * _1199;
        float _3217 = _1200 * _3205;
        float _3218 = (-0.0) - _3217;
        float _3219 = _3205 * _1201;
        float _3221 = (cbSceneParam._m0[77u].w * _3218) / _3204;
        float _3222 = _3221 + cbSceneParam._m0[79u].w;
        float _3223 = cbSceneParam._m0[79u].w - _3217;
        float _3229 = sqrt(((_3216 * _3216) + (_3217 * _3217)) + (_3219 * _3219));
        float _3232 = (1.0 - (cbSceneParam._m0[77u].w / _3204)) * _3229;
        float _3237 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3239 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3400;
        if (abs((_3218 - _3221) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3400 = ((((_3222 > 0.0) ? exp2(_3237 * _3222) : (2.0 - exp2(_3239 * _3222))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3232;
        }
        else
        {
            float _3360 = 1.0 / cbSceneParam._m0[80u].x;
            float _3361 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : max(_3222, _3223));
            float _3362 = isnan(_3223) ? _3222 : (isnan(_3222) ? _3223 : min(_3222, _3223));
            float _3371 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : min(_3361, 0.0));
            float _3372 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : min(_3362, 0.0));
            _3400 = ((abs(_3229 / _3218) * cbSceneParam._m0[80u].y) * ((((_3371 - _3372) * 2.0) - ((exp2(_3237 * (isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0)))) - exp2(_3237 * (isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))))) * _3360)) - ((exp2(_3239 * _3371) - exp2(_3239 * _3372)) * _3360))) + (_3232 * cbSceneParam._m0[80u].z);
        }
        vec4 _3402 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3129, _3130, 1.0), 0.0);
        float _3411 = exp2((_3400 * (-1.44269502162933349609375)) * (1.0 - _3402.w));
        float _3412 = log2(_3411);
        float _3428 = log2(_3149);
        _3241 = (exp2(_3428 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].x)) * _3402.x) / cbSceneParam._m0[78u].x)) + _3146;
        _3243 = (exp2(_3428 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].y)) * _3402.y) / cbSceneParam._m0[78u].y)) + _3147;
        _3245 = (exp2(_3428 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3412 * cbSceneParam._m0[78u].z)) * _3402.z) / cbSceneParam._m0[78u].z)) + _3148;
        _3247 = _3411 * _3149;
    }
    else
    {
        _3241 = _3146;
        _3243 = _3147;
        _3245 = _3148;
        _3247 = _3149;
    }
    float _3258 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3259 = _3258 == 3.0;
    float _3260 = log2(_3247);
    float _3264 = exp2(_3260 * cbSceneParam._m0[78u].x);
    float _3265 = exp2(_3260 * cbSceneParam._m0[78u].y);
    float _3266 = exp2(_3260 * cbSceneParam._m0[78u].z);
    float _3267 = _3264 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0)));
    float _3268 = _3265 * (isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0)));
    float _3269 = _3266 * (isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0)));
    float _3278 = (_3258 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3278 * (_3259 ? _3267 : (_3267 + (cbSceneParam._m0[72u].w * _3241)));
    SV_Target.y = _3278 * (_3259 ? _3268 : (_3268 + (cbSceneParam._m0[72u].w * _3243)));
    SV_Target.z = _3278 * (_3259 ? _3269 : (_3269 + (cbSceneParam._m0[72u].w * _3245)));
    SV_Target.w = cbInstanceData._m0[_3121].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3084) * _3120) * _3264) * _3278;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3085) * _3120) * _3265) * _3278;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3086) * _3120) * _3266) * _3278;
    SV_Target_1.w = cbInstanceData._m0[_3121].w;
}


