#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1708;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _280 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _285 = _280.z;
    float _286 = _280.w;
    vec4 _308 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _313 = _308.w;
    float _325 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _285) * exp2(log2(1.0 - _313) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    vec4 _341 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _351 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _359 = (_351 - (((_341.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _351))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4097 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
    float _362 = _327 - (_360 * _327);
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    vec4 _377 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _380 = _377.y;
    float _381 = _380 * (isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0)));
    float _390 = exp2(log2(cbMtdParam._m0[32u].w * _313) * cbMtdParam._m0[31u].z);
    float _392 = _390 - (_360 * _390);
    float _393 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _394 = isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0));
    float _405 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_286) * 4.5));
    float _414 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _285) * _405)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _415 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _416 = isnan(1.0) ? _415 : (isnan(_415) ? 1.0 : min(_415, 1.0));
    float _427 = exp2(log2((1.0 - (((_405 * _405) * _285) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _428 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = (((isnan(1.0) ? _428 : (isnan(_428) ? 1.0 : min(_428, 1.0))) - _286) * _380) + _286;
    vec4 _444 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = cbMtdParam._m0[12u].x;
    _210[0u] = cbMtdParam._m0[12u].y;
    _211[0u] = cbMtdParam._m0[12u].z;
    _209[1u] = cbMtdParam._m0[13u].x;
    _210[1u] = cbMtdParam._m0[13u].y;
    _211[1u] = cbMtdParam._m0[13u].z;
    _209[2u] = cbMtdParam._m0[14u].x;
    _210[2u] = cbMtdParam._m0[14u].y;
    _211[2u] = cbMtdParam._m0[14u].z;
    _209[3u] = cbMtdParam._m0[15u].x;
    _210[3u] = cbMtdParam._m0[15u].y;
    _211[3u] = cbMtdParam._m0[15u].z;
    _209[4u] = cbMtdParam._m0[16u].x;
    _210[4u] = cbMtdParam._m0[16u].y;
    _211[4u] = cbMtdParam._m0[16u].z;
    _209[5u] = cbMtdParam._m0[11u].x;
    _210[5u] = cbMtdParam._m0[11u].y;
    _211[5u] = cbMtdParam._m0[11u].z;
    float _512 = (_377.x + (-0.02500000037252902984619140625)) * 8.0;
    float _514 = roundEven(_512);
    float _515 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    uint _518 = uint(int(isnan(5.0) ? _515 : (isnan(_515) ? 5.0 : min(_515, 5.0))));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = 1.0;
    _206[0u] = 1.0;
    _207[0u] = 1.0;
    _205[1u] = cbMtdParam._m0[23u].x;
    _206[1u] = cbMtdParam._m0[23u].y;
    _207[1u] = cbMtdParam._m0[23u].z;
    _205[2u] = cbMtdParam._m0[21u].x;
    _206[2u] = cbMtdParam._m0[21u].y;
    _207[2u] = cbMtdParam._m0[21u].z;
    _205[3u] = cbMtdParam._m0[19u].x;
    _206[3u] = cbMtdParam._m0[19u].y;
    _207[3u] = cbMtdParam._m0[19u].z;
    _205[4u] = cbMtdParam._m0[18u].x;
    _206[4u] = cbMtdParam._m0[18u].y;
    _207[4u] = cbMtdParam._m0[18u].z;
    _205[5u] = cbMtdParam._m0[17u].x;
    _206[5u] = cbMtdParam._m0[17u].y;
    _207[5u] = cbMtdParam._m0[17u].z;
    float _607 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _608 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    uint _610 = uint(int(isnan(5.0) ? _608 : (isnan(_608) ? 5.0 : min(_608, 5.0))));
    float _208[6];
    _208[0u] = 1.0;
    _208[1u] = cbMtdParam._m0[23u].w;
    _208[2u] = cbMtdParam._m0[21u].w;
    _208[3u] = cbMtdParam._m0[19u].w;
    _208[4u] = cbMtdParam._m0[18u].w;
    _208[5u] = cbMtdParam._m0[17u].w;
    float _647 = ((((_209[_518] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_205[_610] - _209[_518])) * _208[_518])) * _380) + cbMtdParam._m0[10u].x) * _444.x;
    float _648 = ((((_210[_518] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_206[_610] - _210[_518])) * _208[_518])) * _380) + cbMtdParam._m0[10u].y) * _444.y;
    float _649 = ((((_211[_518] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_207[_610] - _211[_518])) * _208[_518])) * _380) + cbMtdParam._m0[10u].z) * _444.z;
    vec4 _661 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _672 = cbMtdParam._m0[9u].x * _661.x;
    float _673 = cbMtdParam._m0[9u].y * _661.y;
    float _674 = cbMtdParam._m0[9u].z * _661.z;
    float _681 = ((_672 - _647) * _432) + _647;
    float _682 = ((_673 - _648) * _432) + _648;
    float _683 = ((_674 - _649) * _432) + _649;
    vec4 _695 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _715 = (((cbMtdParam._m0[20u].x * _695.x) - _681) * _416) + _681;
    float _716 = (((cbMtdParam._m0[20u].y * _695.y) - _682) * _416) + _682;
    float _717 = (((cbMtdParam._m0[20u].z * _695.z) - _683) * _416) + _683;
    vec4 _729 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _749 = (((cbMtdParam._m0[29u].x * _729.x) - _715) * _394) + _715;
    float _750 = (((cbMtdParam._m0[29u].y * _729.y) - _716) * _394) + _716;
    float _751 = (((cbMtdParam._m0[29u].z * _729.z) - _717) * _394) + _717;
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[30u].x;
    _203[0u] = cbMtdParam._m0[30u].y;
    _204[0u] = cbMtdParam._m0[30u].z;
    _202[1u] = cbMtdParam._m0[28u].x;
    _203[1u] = cbMtdParam._m0[28u].y;
    _204[1u] = cbMtdParam._m0[28u].z;
    _202[2u] = cbMtdParam._m0[27u].x;
    _203[2u] = cbMtdParam._m0[27u].y;
    _204[2u] = cbMtdParam._m0[27u].z;
    _202[3u] = cbMtdParam._m0[26u].x;
    _203[3u] = cbMtdParam._m0[26u].y;
    _204[3u] = cbMtdParam._m0[26u].z;
    _202[4u] = cbMtdParam._m0[25u].x;
    _203[4u] = cbMtdParam._m0[25u].y;
    _204[4u] = cbMtdParam._m0[25u].z;
    _202[5u] = cbMtdParam._m0[24u].x;
    _203[5u] = cbMtdParam._m0[24u].y;
    _204[5u] = cbMtdParam._m0[24u].z;
    float _824 = _202[_518] * _380;
    float _825 = _203[_518] * _380;
    float _826 = _204[_518] * _380;
    float _827 = _824 + ((_308.x * 4.5) * (((_672 - _749) * _381) + _749));
    float _828 = _825 + ((_308.y * 4.5) * (((_673 - _750) * _381) + _750));
    float _829 = _826 + ((_308.z * 4.5) * (((_674 - _751) * _381) + _751));
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[37u].w;
    _198[0u] = cbMtdParam._m0[38u].x;
    _197[1u] = cbMtdParam._m0[39u].w;
    _198[1u] = cbMtdParam._m0[40u].x;
    _197[2u] = cbMtdParam._m0[40u].y;
    _198[2u] = cbMtdParam._m0[40u].z;
    _197[3u] = cbMtdParam._m0[40u].w;
    _198[3u] = cbMtdParam._m0[41u].x;
    _197[4u] = cbMtdParam._m0[41u].y;
    _198[4u] = cbMtdParam._m0[41u].z;
    float _862 = roundEven(5.0 - _512);
    float _863 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _864 = isnan(4.0) ? _863 : (isnan(_863) ? 4.0 : min(_863, 4.0));
    float _866 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    uint _868 = uint(int(isnan(4.0) ? _866 : (isnan(_866) ? 4.0 : min(_866, 4.0))));
    float _877 = ((cbMtdParam._m0[42u].z - _198[_868]) * _432) + _198[_868];
    float _885 = ((cbMtdParam._m0[43u].x - _877) * _416) + _877;
    float _890 = ((cbMtdParam._m0[43u].z - _885) * _394) + _885;
    float _895 = ((cbMtdParam._m0[39u].z - _890) * _381) + _890;
    vec4 _911 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _913 = _911.x;
    float _914 = _911.y;
    float _916 = _911.z + _197[_868];
    vec4 _928 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _936 = (((cbMtdParam._m0[42u].y - _916) + _928.z) * _432) + _916;
    vec4 _948 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _956 = (((cbMtdParam._m0[42u].w - _936) + _948.z) * _416) + _936;
    float _962 = ((((_285 * 2.0) * _956) - _956) * cbMtdParam._m0[34u].x) + _956;
    vec4 _974 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _982 = (((_974.z + cbMtdParam._m0[43u].y) - _962) * _394) + _962;
    float _986 = (((cbMtdParam._m0[39u].y + _341.z) - _982) * _381) + _982;
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1048 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1017 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1021 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1065 = (-0.0) - ((_1021 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1069 = (_1021 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1070 = isnan(_1069) ? _1065 : (isnan(_1065) ? _1069 : min(_1065, _1069));
    float _4193 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1071 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _1097 = ((_928.x - _913) * _432) + _913;
    float _1098 = ((_928.y - _914) * _432) + _914;
    float _1103 = ((_948.x - _1097) * _416) + _1097;
    float _1104 = ((_948.y - _1098) * _416) + _1098;
    float _1109 = ((_974.x - _1103) * _394) + _1103;
    float _1110 = ((_974.y - _1104) * _394) + _1104;
    float _1119 = ((((_341.x - _1109) * _381) + _1109) * 2.0) + (-1.0);
    float _1120 = ((((_341.y - _1110) * _381) + _1110) * 2.0) + (-1.0);
    float _1121 = dot(vec2(_1119, _1120), vec2(_1119, _1120));
    float _4204 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1126 = sqrt(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))));
    float _1129 = (cbMtdParam._m0[34u].z * ((_280.x * 2.0) + (-1.0))) + _1119;
    float _1130 = (cbMtdParam._m0[34u].z * ((_280.y * 2.0) + (-1.0))) + _1120;
    float _1133 = fma(_1126, _251 * NORMAL.x, fma(_1130, _258 * TANGENT.x, (_244 * _236) * _1129));
    float _1136 = fma(_1126, _251 * NORMAL.y, fma(_1130, _258 * TANGENT.y, (_244 * _237) * _1129));
    float _1139 = fma(_1126, _251 * NORMAL.z, fma(_1130, _258 * TANGENT.z, (_244 * _238) * _1129));
    float _1143 = inversesqrt(dot(vec3(_1133, _1136, _1139), vec3(_1133, _1136, _1139)));
    float _1144 = _1143 * _1133;
    float _1145 = _1143 * _1136;
    float _1146 = _1143 * _1139;
    float _4215 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _1147 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _4226 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4237 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4248 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4259 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _1151 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _1167 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1187 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1197 = cbSceneParam._m0[71u].x - (_1017 / _1187);
    float _1198 = cbSceneParam._m0[71u].y - (_1021 / _1187);
    float _1199 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1187);
    float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
    float _1204 = _1197 * _1203;
    float _1205 = _1198 * _1203;
    float _1206 = _1199 * _1203;
    float _1212 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1213 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1215 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1217 = _1215.w;
    float _1235 = fma(_1146, cbSceneParam._m0[5u].z, fma(_1145, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1144));
    float _1238 = fma(_1146, cbSceneParam._m0[6u].z, fma(_1145, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1144));
    float _1241 = fma(_1146, cbSceneParam._m0[7u].z, fma(_1145, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1144));
    vec4 _1243 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1254 = (((_1243.y - _1147) + (_1243.w * _1147)) * cbMtdParam._m0[3u].x) + _1147;
    uint _1267 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1268 = _1267 + 9u;
    uint _1269 = _1268 + uint(cbMatDynParam._m0[0u].w);
    float _1275 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * cbInstanceData._m0[_1269].x;
    float _1276 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0)))) * cbInstanceData._m0[_1269].y;
    float _1277 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * cbInstanceData._m0[_1269].z;
    float _4270 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
    float _1278 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _4281 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
    float _1279 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _4292 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _1280 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
    vec4 _1281 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1286 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1297 = (((_1286.x - _1151) + (_1286.w * _1151)) * cbMtdParam._m0[3u].x) + _1151;
    float _1310 = (cbMtdParam._m0[3u].x * (((_1278 * _1217) - _1278) + _1281.x)) + _1278;
    float _1311 = (cbMtdParam._m0[3u].x * (((_1279 * _1217) - _1279) + _1281.y)) + _1279;
    float _1312 = (cbMtdParam._m0[3u].x * (((_1280 * _1217) - _1280) + _1281.z)) + _1280;
    float _1313 = 1.0 - _1297;
    float _1314 = _1313 * _1310;
    float _1315 = _1313 * _1311;
    float _1316 = _1313 * _1312;
    float _1321 = (_1310 + (-0.039999999105930328369140625)) * _1297;
    float _1322 = (_1311 + (-0.039999999105930328369140625)) * _1297;
    float _1323 = (_1312 + (-0.039999999105930328369140625)) * _1297;
    float _1324 = _1321 + 0.039999999105930328369140625;
    float _1326 = _1322 + 0.039999999105930328369140625;
    float _1327 = _1323 + 0.039999999105930328369140625;
    vec4 _1336 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1212, cbSceneParam._m0[86u].y * _1213));
    float _1339 = _1336.x * TEXCOORD_5.w;
    float _1340 = dot(vec3(_1144, _1145, _1146), vec3(_1204, _1205, _1206));
    float _1343 = _1340 * 2.0;
    float _1347 = (_1343 * _1144) - _1204;
    float _1348 = (_1343 * _1145) - _1205;
    float _1349 = (_1343 * _1146) - _1206;
    float _1353 = abs(dot(vec3(_1204, _1205, _1206), vec3(_1144, _1145, _1146)));
    float _4303 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
    float _1355 = sqrt(_1254);
    float _1366 = exp2((_1355 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1355 * 3.0));
    float _1372 = (1.0 - _1366) * ((_1355 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1373 = _1366 * _1355;
    float _1401 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1405 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1409 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1707;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1434 = fma(_1409, cbModelParam._m0[26u].z, fma(_1405, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1401));
        float _1438 = fma(_1409, cbModelParam._m0[27u].z, fma(_1405, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1401));
        float _1442 = fma(_1409, cbModelParam._m0[28u].z, fma(_1405, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1401));
        float _1466 = _1401 + _1144;
        float _1467 = _1405 + _1145;
        float _1468 = _1409 + _1146;
        float _1478 = fma(_1468, cbModelParam._m0[26u].z, fma(_1467, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1466)) - _1434;
        float _1479 = fma(_1468, cbModelParam._m0[27u].z, fma(_1467, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1466)) - _1438;
        float _1480 = fma(_1468, cbModelParam._m0[28u].z, fma(_1467, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1466)) - _1442;
        float _1484 = inversesqrt(dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480)));
        float _1496 = ((_1484 * _1478) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1434 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1497 = ((_1484 * _1479) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1438 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1498 = ((_1484 * _1480) / cbModelParam._m0[34u].z) + ((((((_1442 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1496, _1497, _1498), 0.0);
        float _1535 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1501.x + (-0.5));
        float _1537 = _1535 * (_1501.y + (-0.5));
        float _1538 = _1535 * (_1501.z + (-0.5));
        float _1545 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1546 = _1545 * (_1508.x + (-0.5));
        float _1547 = _1545 * (_1508.y + (-0.5));
        float _1548 = _1545 * (_1508.z + (-0.5));
        float _1555 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1556 = _1555 * (_1515.x + (-0.5));
        float _1557 = _1555 * (_1515.y + (-0.5));
        float _1558 = _1555 * (_1515.z + (-0.5));
        float _1565 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1566 = _1565 * (_1522.x + (-0.5));
        float _1567 = _1565 * (_1522.y + (-0.5));
        float _1568 = _1565 * (_1522.z + (-0.5));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1571 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1572 = _1536 * 0.5;
        float _1573 = _1546 * 0.5;
        float _1574 = _1556 * 0.5;
        float _1575 = dot(vec3(_1572, _1573, _1574), vec3(_1572, _1573, _1574));
        float _1580 = (_1575 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1575);
        float _1589 = (dot(vec3(_1144, _1145, _1146), vec3(_1580 * _1572, _1580 * _1573, _1580 * _1574)) + 1.0) * 0.5;
        float _4329 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1599 = sqrt(((_1573 * _1573) + (_1572 * _1572)) + (_1574 * _1574)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4340 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1600 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
        float _1601 = _1600 * 2.0;
        float _1605 = (1.0 - _1600) / (_1600 + 1.0);
        float _4351 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1615 = ((((1.0 - _1606) * (_1601 + 2.0)) * exp2(log2(isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_1601 + 1.0))) + _1606) * _1569;
        float _1616 = _1537 * 0.5;
        float _1617 = _1547 * 0.5;
        float _1618 = _1557 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1632 = (dot(vec3(_1144, _1145, _1146), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4362 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
        float _1641 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1570 + 9.9999997473787516355514526367188e-06);
        float _4373 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4384 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (_1643 + 1.0))) + _1648) * _1570;
        float _1658 = _1538 * 0.5;
        float _1659 = _1548 * 0.5;
        float _1660 = _1558 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_1144, _1145, _1146), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1571 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4417 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1685 + 1.0))) + _1690) * _1571;
        _1707 = _1538;
        _1709 = _1537;
        _1710 = _1536;
        _1711 = _1548;
        _1712 = _1547;
        _1713 = _1546;
        _1714 = _1558;
        _1715 = _1557;
        _1716 = _1556;
        _1717 = _1571;
        _1718 = _1570;
        _1719 = _1569;
        _1720 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)));
        _1721 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1722 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
    }
    else
    {
        _1707 = _1708;
        _1709 = _1708;
        _1710 = _1708;
        _1711 = _1708;
        _1712 = _1708;
        _1713 = _1708;
        _1714 = _1708;
        _1715 = _1708;
        _1716 = _1708;
        _1717 = _1708;
        _1718 = _1708;
        _1719 = _1708;
        _1720 = 0.0;
        _1721 = 0.0;
        _1722 = 0.0;
    }
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    float _2020;
    float _2021;
    float _2022;
    float _2023;
    float _2024;
    float _2025;
    float _2026;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1745 = fma(_1409, cbModelParam._m0[30u].z, fma(_1405, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1401));
        float _1749 = fma(_1409, cbModelParam._m0[31u].z, fma(_1405, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1401));
        float _1753 = fma(_1409, cbModelParam._m0[32u].z, fma(_1405, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1401));
        float _1775 = _1401 + _1144;
        float _1776 = _1405 + _1145;
        float _1777 = _1409 + _1146;
        float _1787 = fma(_1777, cbModelParam._m0[30u].z, fma(_1776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1775)) - _1745;
        float _1788 = fma(_1777, cbModelParam._m0[31u].z, fma(_1776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1775)) - _1749;
        float _1789 = fma(_1777, cbModelParam._m0[32u].z, fma(_1776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1775)) - _1753;
        float _1793 = inversesqrt(dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789)));
        float _1805 = ((_1793 * _1787) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1745 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1806 = ((_1793 * _1788) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1749 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1807 = ((_1793 * _1789) / cbModelParam._m0[35u].z) + ((((((_1753 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1809 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1805, _1806, _1807), 0.0);
        vec4 _1816 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1805, _1806, _1807), 0.0);
        vec4 _1823 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1805, _1806, _1807), 0.0);
        vec4 _1830 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1805, _1806, _1807), 0.0);
        float _1842 = exp2((_1809.w + (-0.5)) * 20.0) * 2.0;
        float _1843 = _1842 * (_1809.x + (-0.5));
        float _1844 = _1842 * (_1809.y + (-0.5));
        float _1845 = _1842 * (_1809.z + (-0.5));
        float _1852 = exp2((_1816.w + (-0.5)) * 20.0) * 2.0;
        float _1853 = _1852 * (_1816.x + (-0.5));
        float _1854 = _1852 * (_1816.y + (-0.5));
        float _1855 = _1852 * (_1816.z + (-0.5));
        float _1862 = exp2((_1823.w + (-0.5)) * 20.0) * 2.0;
        float _1863 = _1862 * (_1823.x + (-0.5));
        float _1864 = _1862 * (_1823.y + (-0.5));
        float _1865 = _1862 * (_1823.z + (-0.5));
        float _1872 = exp2((_1830.w + (-0.5)) * 20.0) * 2.0;
        float _1873 = _1872 * (_1830.x + (-0.5));
        float _1874 = _1872 * (_1830.y + (-0.5));
        float _1875 = _1872 * (_1830.z + (-0.5));
        float _1876 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1877 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
        float _1878 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1879 = _1843 * 0.5;
        float _1880 = _1853 * 0.5;
        float _1881 = _1863 * 0.5;
        float _1882 = dot(vec3(_1879, _1880, _1881), vec3(_1879, _1880, _1881));
        float _1887 = (_1882 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1882);
        float _1895 = (dot(vec3(_1144, _1145, _1146), vec3(_1887 * _1879, _1887 * _1880, _1887 * _1881)) + 1.0) * 0.5;
        float _4458 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1904 = sqrt(((_1880 * _1880) + (_1879 * _1879)) + (_1881 * _1881)) / (_1876 + 9.9999997473787516355514526367188e-06);
        float _4469 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
        float _1905 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _1906 = _1905 * 2.0;
        float _1910 = (1.0 - _1905) / (_1905 + 1.0);
        float _4480 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
        float _1911 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _1920 = ((((1.0 - _1911) * (_1906 + 2.0)) * exp2(log2(isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0))) * (_1906 + 1.0))) + _1911) * _1876;
        float _1921 = _1844 * 0.5;
        float _1922 = _1854 * 0.5;
        float _1923 = _1864 * 0.5;
        float _1924 = dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923));
        float _1929 = (_1924 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1924);
        float _1937 = (dot(vec3(_1144, _1145, _1146), vec3(_1929 * _1921, _1929 * _1922, _1929 * _1923)) + 1.0) * 0.5;
        float _4491 = isnan(0.0) ? _1937 : (isnan(_1937) ? 0.0 : max(_1937, 0.0));
        float _1946 = sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923)) / (_1877 + 9.9999997473787516355514526367188e-06);
        float _4502 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1947 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _1948 = _1947 * 2.0;
        float _1952 = (1.0 - _1947) / (_1947 + 1.0);
        float _4513 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1953 = isnan(1.0) ? _4513 : (isnan(_4513) ? 1.0 : min(_4513, 1.0));
        float _1962 = ((((1.0 - _1953) * (_1948 + 2.0)) * exp2(log2(isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0))) * (_1948 + 1.0))) + _1953) * _1877;
        float _1963 = _1845 * 0.5;
        float _1964 = _1855 * 0.5;
        float _1965 = _1865 * 0.5;
        float _1966 = dot(vec3(_1963, _1964, _1965), vec3(_1963, _1964, _1965));
        float _1971 = (_1966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1966);
        float _1979 = (dot(vec3(_1144, _1145, _1146), vec3(_1971 * _1963, _1971 * _1964, _1971 * _1965)) + 1.0) * 0.5;
        float _4524 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1988 = sqrt(((_1964 * _1964) + (_1963 * _1963)) + (_1965 * _1965)) / (_1878 + 9.9999997473787516355514526367188e-06);
        float _4535 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1989 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1990 = _1989 * 2.0;
        float _1994 = (1.0 - _1989) / (_1989 + 1.0);
        float _4546 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
        float _1995 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _2004 = ((((1.0 - _1995) * (_1990 + 2.0)) * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_1990 + 1.0))) + _1995) * _1878;
        _2012 = _1845;
        _2013 = _1844;
        _2014 = _1843;
        _2015 = _1855;
        _2016 = _1854;
        _2017 = _1853;
        _2018 = _1865;
        _2019 = _1864;
        _2020 = _1863;
        _2021 = _1878;
        _2022 = _1877;
        _2023 = _1876;
        _2024 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0)));
        _2025 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1962 : (isnan(_1962) ? 0.0 : max(_1962, 0.0)));
        _2026 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0)));
    }
    else
    {
        _2012 = _1708;
        _2013 = _1708;
        _2014 = _1708;
        _2015 = _1708;
        _2016 = _1708;
        _2017 = _1708;
        _2018 = _1708;
        _2019 = _1708;
        _2020 = _1708;
        _2021 = _1708;
        _2022 = _1708;
        _2023 = _1708;
        _2024 = 0.0;
        _2025 = 0.0;
        _2026 = 0.0;
    }
    float _2036 = (cbModelParam._m0[1u].x * (_2024 - _1720)) + _1720;
    float _2037 = (cbModelParam._m0[1u].x * (_2025 - _1721)) + _1721;
    float _2038 = (cbModelParam._m0[1u].x * (_2026 - _1722)) + _1722;
    float _2059 = fma(_2038, cbSceneParam._m0[89u].z, fma(_2037, cbSceneParam._m0[89u].y, _2036 * cbSceneParam._m0[89u].x));
    float _2062 = fma(_2038, cbSceneParam._m0[90u].z, fma(_2037, cbSceneParam._m0[90u].y, _2036 * cbSceneParam._m0[90u].x));
    float _2065 = fma(_2038, cbSceneParam._m0[91u].z, fma(_2037, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2036));
    float _2078 = _1347 * 0.5;
    float _2079 = _1348 * 0.5;
    float _2080 = _1349 * 0.5;
    float _2081 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_2014, _2017, _2020, _2023));
    float _2084 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_2013, _2016, _2019, _2022));
    float _2087 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_2012, _2015, _2018, _2021));
    float _2121;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2094 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_1707, _1711, _1714, _1717));
        float _2098 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_1709, _1712, _1715, _1718));
        float _2102 = dot(vec4(_2078, _2079, _2080, 1.0), vec4(_1710, _1713, _1716, _1719));
        float _2109 = dot(vec4(cbModelParam._m0[39u]), vec4(_2078, _2079, _2080, 1.0));
        _2121 = dot(vec3(isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0)), isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0)), isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2109) ? 0.0 : (isnan(0.0) ? _2109 : max(0.0, _2109))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2121 = 1.0;
    }
    float _2132;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2123 = dot(vec4(cbModelParam._m0[40u]), vec4(_2078, _2079, _2080, 1.0));
        _2132 = dot(vec3(isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0)), isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0)), isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2123) ? 0.0 : (isnan(0.0) ? _2123 : max(0.0, _2123))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2132 = 1.0;
    }
    float _2136 = (_2132 * cbModelParam._m0[1u].x) + (_2121 * (1.0 - cbModelParam._m0[1u].x));
    float _2146 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1254);
    float _2147 = isnan(_2146) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2146 : min(cbModelParam._m0[25u].z, _2146));
    float _2227;
    float _2229;
    float _2231;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2194 = fma(_1409, cbModelParam._m0[13u].z, fma(_1405, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1401)) + cbModelParam._m0[13u].w;
        float _2198 = fma(_1409, cbModelParam._m0[14u].z, fma(_1405, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1401)) + cbModelParam._m0[14u].w;
        float _2202 = fma(_1409, cbModelParam._m0[15u].z, fma(_1405, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1401)) + cbModelParam._m0[15u].w;
        float _2205 = fma(_1349, cbModelParam._m0[13u].z, fma(_1348, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1347));
        float _2208 = fma(_1349, cbModelParam._m0[14u].z, fma(_1348, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1347));
        float _2211 = fma(_1349, cbModelParam._m0[15u].z, fma(_1348, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1347));
        float _2239;
        if (_2205 > 0.0)
        {
            _2239 = abs((1.0 - _2194) / _2205);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2205 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2194 + 1.0) / _2205);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2239 = frontier_phi_14_12_ladder;
        }
        float _2462;
        if (_2208 > 0.0)
        {
            _2462 = abs((1.0 - _2198) / _2208);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2208 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2198 + 1.0) / _2208);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2462 = frontier_phi_23_19_ladder;
        }
        float _2719;
        if (_2211 > 0.0)
        {
            _2719 = abs((1.0 - _2202) / _2211);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2211 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2202 + 1.0) / _2211);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2719 = frontier_phi_35_30_ladder;
        }
        float _2721 = isnan(_2462) ? _2239 : (isnan(_2239) ? _2462 : min(_2239, _2462));
        float _2722 = isnan(_2719) ? _2721 : (isnan(_2721) ? _2719 : min(_2721, _2719));
        float _2726 = (_2722 * _2205) + _2194;
        float _2727 = (_2722 * _2208) + _2198;
        float _2728 = (_2722 * _2211) + _2202;
        float _2729 = _2722 * 9.9999997473787516355514526367188e-05;
        float _2731 = (-1.0) - _2729;
        float _2733 = _2729 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2728 > _2733) || ((_2728 < _2731) || ((_2727 > _2733) || ((_2727 < _2731) || ((_2726 < _2731) || (_2726 > _2733))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2856 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2728, cbModelParam._m0[9u].z, fma(_2727, cbModelParam._m0[9u].y, _2726 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2728, cbModelParam._m0[10u].z, fma(_2727, cbModelParam._m0[10u].y, _2726 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2728, cbModelParam._m0[11u].z, fma(_2727, cbModelParam._m0[11u].y, _2726 * cbModelParam._m0[11u].x))), _2147);
            frontier_phi_13_35_ladder = _2856.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2856.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2856.x * cbModelParam._m0[1u].y;
        }
        _2227 = frontier_phi_13_35_ladder_2;
        _2229 = frontier_phi_13_35_ladder_1;
        _2231 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2215 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1347, _1348, _1349), _2147);
        _2227 = _2215.x * cbModelParam._m0[1u].y;
        _2229 = _2215.y * cbModelParam._m0[1u].y;
        _2231 = _2215.z * cbModelParam._m0[1u].y;
    }
    float _2235 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1254);
    float _2236 = isnan(_2235) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2235 : min(cbModelParam._m0[25u].w, _2235));
    float _2325;
    float _2327;
    float _2329;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2289 = fma(_1409, cbModelParam._m0[21u].z, fma(_1405, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1401)) + cbModelParam._m0[21u].w;
        float _2293 = fma(_1409, cbModelParam._m0[22u].z, fma(_1405, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1401)) + cbModelParam._m0[22u].w;
        float _2297 = fma(_1409, cbModelParam._m0[23u].z, fma(_1405, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1401)) + cbModelParam._m0[23u].w;
        float _2300 = fma(_1349, cbModelParam._m0[21u].z, fma(_1348, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1347));
        float _2303 = fma(_1349, cbModelParam._m0[22u].z, fma(_1348, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1347));
        float _2306 = fma(_1349, cbModelParam._m0[23u].z, fma(_1348, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1347));
        float _2467;
        if (_2300 > 0.0)
        {
            _2467 = abs((1.0 - _2289) / _2300);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2300 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2289 + 1.0) / _2300);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2467 = frontier_phi_25_21_ladder;
        }
        float _2746;
        if (_2303 > 0.0)
        {
            _2746 = abs((1.0 - _2293) / _2303);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2303 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2293 + 1.0) / _2303);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2746 = frontier_phi_37_32_ladder;
        }
        float _2959;
        if (_2306 > 0.0)
        {
            _2959 = abs((1.0 - _2297) / _2306);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2306 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2297 + 1.0) / _2306);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2959 = frontier_phi_46_43_ladder;
        }
        float _2961 = isnan(_2746) ? _2467 : (isnan(_2467) ? _2746 : min(_2467, _2746));
        float _2962 = isnan(_2959) ? _2961 : (isnan(_2961) ? _2959 : min(_2961, _2959));
        float _2966 = (_2962 * _2300) + _2289;
        float _2967 = (_2962 * _2303) + _2293;
        float _2968 = (_2962 * _2306) + _2297;
        float _2969 = _2962 * 9.9999997473787516355514526367188e-05;
        float _2970 = (-1.0) - _2969;
        float _2972 = _2969 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2968 > _2972) || ((_2968 < _2970) || ((_2967 > _2972) || ((_2967 < _2970) || ((_2966 < _2970) || (_2966 > _2972))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3196 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2968, cbModelParam._m0[17u].z, fma(_2967, cbModelParam._m0[17u].y, _2966 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2968, cbModelParam._m0[18u].z, fma(_2967, cbModelParam._m0[18u].y, _2966 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2968, cbModelParam._m0[19u].z, fma(_2967, cbModelParam._m0[19u].y, _2966 * cbModelParam._m0[19u].x))), _2236);
            frontier_phi_22_46_ladder = _3196.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3196.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3196.x * cbModelParam._m0[1u].z;
        }
        _2325 = frontier_phi_22_46_ladder_2;
        _2327 = frontier_phi_22_46_ladder_1;
        _2329 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2309 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1347, _1348, _1349), _2236);
        _2325 = _2309.x * cbModelParam._m0[1u].z;
        _2327 = _2309.y * cbModelParam._m0[1u].z;
        _2329 = _2309.z * cbModelParam._m0[1u].z;
    }
    float _2342 = (((_1372 * _1324) + _1373) * _1339) * ((cbModelParam._m0[1u].w * (_2325 - _2227)) + _2227);
    float _2344 = (((_1372 * _1326) + _1373) * _1339) * ((cbModelParam._m0[1u].w * (_2327 - _2229)) + _2229);
    float _2346 = (((_1372 * _1327) + _1373) * _1339) * ((cbModelParam._m0[1u].w * (_2329 - _2231)) + _2231);
    float _2349 = fma(_2346, cbSceneParam._m0[89u].z, fma(_2344, cbSceneParam._m0[89u].y, _2342 * cbSceneParam._m0[89u].x));
    float _2352 = fma(_2346, cbSceneParam._m0[90u].z, fma(_2344, cbSceneParam._m0[90u].y, _2342 * cbSceneParam._m0[90u].x));
    float _2355 = fma(_2346, cbSceneParam._m0[91u].z, fma(_2344, cbSceneParam._m0[91u].y, _2342 * cbSceneParam._m0[91u].x));
    vec4 _2363 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1212, _1213));
    float _2365 = _2363.w;
    float _2377 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2365);
    float _2378 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2365);
    float _2379 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2365);
    uvec4 _2383 = floatBitsToUint(cbInstanceData._m0[_1267 + 5u]);
    uint _2385 = _2383.x * 14u;
    uint _2386 = _2385 + 13u;
    float _2393 = _1339 + (-1.0);
    float _2398 = (cbLight._m0[_2386].x * _2393) + 1.0;
    float _2399 = (cbLight._m0[_2386].y * _2393) + 1.0;
    float _2400 = (cbLight._m0[_2386].z * _2393) + 1.0;
    float _2401 = (cbLight._m0[_2386].w * _2393) + 1.0;
    uint _2402 = _2385 + 5u;
    float _2408 = isnan(1.0) ? _2399 : (isnan(_2399) ? 1.0 : min(_2399, 1.0));
    uint _2412 = _2385 + 4u;
    float _2421 = isnan(1.0) ? _2398 : (isnan(_2398) ? 1.0 : min(_2398, 1.0));
    uint _2425 = _2385 | 1u;
    float _2436 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_1144, _1145, _1146));
    float _2439 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_1144, _1145, _1146));
    float _4682 = isnan(0.0) ? _2436 : (isnan(_2436) ? 0.0 : max(_2436, 0.0));
    float _4693 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2444 = (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))) * 0.3183098733425140380859375;
    float _2446 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * 0.3183098733425140380859375;
    float _2453 = ((cbLight._m0[_2402].x * _2408) * _2446) + (((cbLight._m0[_2412].x * _2377) * _2421) * _2444);
    float _2454 = ((_2408 * cbLight._m0[_2402].y) * _2446) + (((cbLight._m0[_2412].y * _2378) * _2421) * _2444);
    float _2455 = ((_2408 * cbLight._m0[_2402].z) * _2446) + (((cbLight._m0[_2412].z * _2379) * _2421) * _2444);
    uvec4 _2459 = floatBitsToUint(cbLight._m0[_2385 + 12u]);
    bool _2461 = _2459.x == 0u;
    float _2472;
    float _2474;
    float _2476;
    if (_2461)
    {
        _2472 = _2453;
        _2474 = _2454;
        _2476 = _2455;
    }
    else
    {
        uint _2480 = _2385 + 6u;
        float _2496 = (dot(vec3(cbLight._m0[_2385 + 2u].xyz), vec3(_1144, _1145, _1146)) * 0.5) + 0.5;
        float _2497 = _2496 * _2496;
        float _4704 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2498 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
        float _2499 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2472 = (((cbLight._m0[_2480].x * 0.3183098733425140380859375) * _2498) * _2499) + _2453;
        _2474 = (((cbLight._m0[_2480].y * 0.3183098733425140380859375) * _2498) * _2499) + _2454;
        _2476 = (((cbLight._m0[_2480].z * 0.3183098733425140380859375) * _2498) * _2499) + _2455;
    }
    bool _2479 = _2459.y == 0u;
    float _2517;
    float _2519;
    float _2521;
    if (_2479)
    {
        _2517 = _2472;
        _2519 = _2474;
        _2521 = _2476;
    }
    else
    {
        uint _2690 = _2385 + 7u;
        float _2706 = (dot(vec3(cbLight._m0[_2385 + 3u].xyz), vec3(_1144, _1145, _1146)) * 0.5) + 0.5;
        float _2707 = _2706 * _2706;
        float _4720 = isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0));
        float _2708 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
        float _2709 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
        _2517 = (((cbLight._m0[_2690].x * 0.3183098733425140380859375) * _2708) * _2709) + _2472;
        _2519 = (((cbLight._m0[_2690].y * 0.3183098733425140380859375) * _2708) * _2709) + _2474;
        _2521 = (((cbLight._m0[_2690].z * 0.3183098733425140380859375) * _2708) * _2709) + _2476;
    }
    uint _2524 = _2385 + 8u;
    float _2537 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2385].w)) * _1254) * 0.949999988079071044921875);
    float _2538 = _2537 * _2537;
    float _2539 = cbLight._m0[_2385].x + _1204;
    float _2540 = cbLight._m0[_2385].y + _1205;
    float _2541 = cbLight._m0[_2385].z + _1206;
    float _2545 = inversesqrt(dot(vec3(_2539, _2540, _2541), vec3(_2539, _2540, _2541)));
    float _2546 = _2545 * _2539;
    float _2547 = _2545 * _2540;
    float _2548 = _2545 * _2541;
    float _2549 = dot(vec3(_1144, _1145, _1146), vec3(cbLight._m0[_2385].xyz));
    float _4736 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
    float _2552 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    float _4747 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
    float _2553 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
    float _2554 = dot(vec3(_1144, _1145, _1146), vec3(_2546, _2547, _2548));
    float _4758 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
    float _2557 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
    float _2558 = dot(vec3(cbLight._m0[_2385].xyz), vec3(_2546, _2547, _2548));
    float _4769 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2562 = _2538 * _2538;
    float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
    float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0)))) * 5.0);
    float _2575 = 0.959999978542327880859375 - _1321;
    float _2577 = 0.959999978542327880859375 - _1322;
    float _2578 = 0.959999978542327880859375 - _1323;
    float _2585 = 1.0 - _2538;
    float _2596 = (0.5 / (((_2553 * ((_2552 * _2585) + _2538)) + 9.9999999392252902907785028219223e-09) + (((_2553 * _2585) + _2538) * _2552))) * _2552;
    float _4780 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
    float _2598 = (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
    uint _2612 = _2385 + 9u;
    float _2623 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2425].w)) * _1254) * 0.949999988079071044921875);
    float _2624 = _2623 * _2623;
    float _2625 = cbLight._m0[_2425].x + _1204;
    float _2626 = cbLight._m0[_2425].y + _1205;
    float _2627 = cbLight._m0[_2425].z + _1206;
    float _2631 = inversesqrt(dot(vec3(_2625, _2626, _2627), vec3(_2625, _2626, _2627)));
    float _2632 = _2631 * _2625;
    float _2633 = _2631 * _2626;
    float _2634 = _2631 * _2627;
    float _2635 = dot(vec3(_1144, _1145, _1146), vec3(cbLight._m0[_2425].xyz));
    float _4791 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0));
    float _2638 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
    float _2639 = dot(vec3(_1144, _1145, _1146), vec3(_2632, _2633, _2634));
    float _4802 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
    float _2642 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
    float _2643 = dot(vec3(cbLight._m0[_2425].xyz), vec3(_2632, _2633, _2634));
    float _4813 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
    float _2647 = _2624 * _2624;
    float _2651 = ((_2642 * _2642) * (_2647 + (-1.0))) + 1.0;
    float _2658 = exp2(log2(1.0 - (isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0)))) * 5.0);
    float _2665 = 1.0 - _2624;
    float _2675 = (0.5 / (((_2553 * ((_2638 * _2665) + _2624)) + 9.9999999392252902907785028219223e-09) + (((_2553 * _2665) + _2624) * _2638))) * _2638;
    float _4824 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
    float _2677 = (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0))) * (_2647 / ((_2651 * _2651) * 3.141590118408203125));
    float _2687 = (((((_2658 * _2575) + _1324) * cbLight._m0[_2612].x) * _2677) * _2408) + ((((cbLight._m0[_2524].x * _2377) * ((_2574 * _2575) + _1324)) * _2598) * _2421);
    float _2688 = (((((_2658 * _2577) + _1326) * cbLight._m0[_2612].y) * _2677) * _2408) + ((((cbLight._m0[_2524].y * _2378) * ((_2574 * _2577) + _1326)) * _2598) * _2421);
    float _2689 = (((((_2658 * _2578) + _1327) * cbLight._m0[_2612].z) * _2677) * _2408) + ((((cbLight._m0[_2524].z * _2379) * ((_2574 * _2578) + _1327)) * _2598) * _2421);
    float _2751;
    float _2753;
    float _2755;
    if (_2461)
    {
        _2751 = _2687;
        _2753 = _2688;
        _2755 = _2689;
    }
    else
    {
        uint _2757 = _2385 + 2u;
        uint _2761 = _2385 + 10u;
        float _2775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2757].w)) * _1254) * 0.949999988079071044921875);
        float _2776 = _2775 * _2775;
        float _2777 = cbLight._m0[_2757].x + _1204;
        float _2778 = cbLight._m0[_2757].y + _1205;
        float _2779 = cbLight._m0[_2757].z + _1206;
        float _2783 = inversesqrt(dot(vec3(_2777, _2778, _2779), vec3(_2777, _2778, _2779)));
        float _2784 = _2783 * _2777;
        float _2785 = _2783 * _2778;
        float _2786 = _2783 * _2779;
        float _2787 = dot(vec3(_1144, _1145, _1146), vec3(cbLight._m0[_2757].xyz));
        float _4835 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2790 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
        float _2791 = dot(vec3(_1144, _1145, _1146), vec3(_2784, _2785, _2786));
        float _4846 = isnan(0.0) ? _2791 : (isnan(_2791) ? 0.0 : max(_2791, 0.0));
        float _2794 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
        float _2795 = dot(vec3(cbLight._m0[_2757].xyz), vec3(_2784, _2785, _2786));
        float _4857 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
        float _2799 = _2776 * _2776;
        float _2803 = ((_2794 * _2794) * (_2799 + (-1.0))) + 1.0;
        float _2810 = exp2(log2(1.0 - (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) * 5.0);
        float _2817 = 1.0 - _2776;
        float _2827 = (0.5 / (((_2553 * ((_2790 * _2817) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2553 * _2817) + _2776) * _2790))) * _2790;
        float _4868 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2829 = (isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0))) * (_2799 / ((_2803 * _2803) * 3.141590118408203125));
        float _2830 = isnan(1.0) ? _2400 : (isnan(_2400) ? 1.0 : min(_2400, 1.0));
        _2751 = (((((_2810 * _2575) + _1324) * cbLight._m0[_2761].x) * _2829) * _2830) + _2687;
        _2753 = (((((_2810 * _2577) + _1326) * cbLight._m0[_2761].y) * _2829) * _2830) + _2688;
        _2755 = (((((_2810 * _2578) + _1327) * cbLight._m0[_2761].z) * _2829) * _2830) + _2689;
    }
    float _2865;
    float _2867;
    float _2869;
    if (_2479)
    {
        _2865 = _2751;
        _2867 = _2753;
        _2869 = _2755;
    }
    else
    {
        uint _2876 = _2385 + 3u;
        uint _2880 = _2385 + 11u;
        float _2894 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2876].w)) * _1254) * 0.949999988079071044921875);
        float _2895 = _2894 * _2894;
        float _2896 = cbLight._m0[_2876].x + _1204;
        float _2897 = cbLight._m0[_2876].y + _1205;
        float _2898 = cbLight._m0[_2876].z + _1206;
        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
        float _2903 = _2902 * _2896;
        float _2904 = _2902 * _2897;
        float _2905 = _2902 * _2898;
        float _2906 = dot(vec3(_1144, _1145, _1146), vec3(cbLight._m0[_2876].xyz));
        float _4884 = isnan(0.0) ? _2906 : (isnan(_2906) ? 0.0 : max(_2906, 0.0));
        float _2909 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
        float _2910 = dot(vec3(_1144, _1145, _1146), vec3(_2903, _2904, _2905));
        float _4895 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
        float _2913 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
        float _2914 = dot(vec3(cbLight._m0[_2876].xyz), vec3(_2903, _2904, _2905));
        float _4906 = isnan(0.0) ? _2914 : (isnan(_2914) ? 0.0 : max(_2914, 0.0));
        float _2918 = _2895 * _2895;
        float _2922 = ((_2913 * _2913) * (_2918 + (-1.0))) + 1.0;
        float _2929 = exp2(log2(1.0 - (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) * 5.0);
        float _2936 = 1.0 - _2895;
        float _2946 = (0.5 / (((_2553 * ((_2909 * _2936) + _2895)) + 9.9999999392252902907785028219223e-09) + (((_2553 * _2936) + _2895) * _2909))) * _2909;
        float _4917 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
        float _2948 = (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0))) * (_2918 / ((_2922 * _2922) * 3.141590118408203125));
        float _2949 = isnan(1.0) ? _2401 : (isnan(_2401) ? 1.0 : min(_2401, 1.0));
        _2865 = (((((_2929 * _2575) + _1324) * cbLight._m0[_2880].x) * _2948) * _2949) + _2751;
        _2867 = (((((_2929 * _2577) + _1326) * cbLight._m0[_2880].y) * _2948) * _2949) + _2753;
        _2869 = (((((_2929 * _2578) + _1327) * cbLight._m0[_2880].z) * _2948) * _2949) + _2755;
    }
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    float _3092;
    float _3094;
    if (_2383.y == 0u)
    {
        float _3024 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3025 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3024;
        float _3026 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3024;
        float _3027 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3024;
        uvec4 _3039 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3040 = _3039.x;
        uint _3051 = uint((float(_3039.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1213) / _3040))) + floor(float(uint(cbSceneParam._m0[85u].x * _1212) / _3040)));
        float _3061 = (log2(_3027 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3062 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
        uint _3065 = uint(isnan(14.0) ? _3062 : (isnan(_3062) ? 14.0 : min(_3062, 14.0)));
        uvec4 _3070 = texelFetch(g_lightClusterGridBuffer, int(((_3065 << 2u) + (_3051 << 6u)) >> 2u));
        uint _3071 = _3070.x;
        uint _3072 = _3039.z;
        float _3201;
        float _3203;
        float _3205;
        float _3207;
        float _3209;
        float _3211;
        if (((((1u << ((_3072 >> 4u) & 15u)) + 4294967295u) & _3071) == 0u) || ((_3072 & 240u) == 0u))
        {
            _3201 = 0.0;
            _3203 = 0.0;
            _3205 = 0.0;
            _3207 = 0.0;
            _3209 = 0.0;
            _3211 = 0.0;
        }
        else
        {
            float _3202;
            float _3204;
            float _3206;
            float _3208;
            float _3210;
            float _3212;
            float _3353 = 0.0;
            float _3354 = 0.0;
            float _3355 = 0.0;
            float _3356 = 0.0;
            float _3357 = 0.0;
            float _3358 = 0.0;
            uint _3359 = 0u;
            uint _3368;
            bool _3369;
            for (;;)
            {
                _3368 = texelFetch(g_lightClassification, int((((_3065 << 5u) + (_3051 << 9u)) + (_3359 << 2u)) >> 2u)).x;
                _3369 = _3368 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3369)
                {
                    frontier_phi_61_pred = _3353;
                    frontier_phi_61_pred_1 = _3358;
                    frontier_phi_61_pred_2 = _3357;
                    frontier_phi_61_pred_3 = _3356;
                    frontier_phi_61_pred_4 = _3355;
                    frontier_phi_61_pred_5 = _3354;
                }
                else
                {
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    uint _3483;
                    _3477 = _3353;
                    _3478 = _3354;
                    _3479 = _3355;
                    _3480 = _3356;
                    _3481 = _3357;
                    _3482 = _3358;
                    _3483 = _3368;
                    float _3409;
                    float _3410;
                    float _3411;
                    float _3412;
                    float _3413;
                    float _3414;
                    for (;;)
                    {
                        uint _3487 = uint(findLSB(_3483)) + (_3359 << 5u);
                        uint _3484 = (_3483 + 4294967295u) & _3483;
                        uint _3489 = _3487 * 48u;
                        vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3489)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3489 + 3u)).x));
                        uint _3509 = (_3487 * 48u) + 4u;
                        vec4 _3522 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3509)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3509 + 3u)).x));
                        uint _3528 = (_3487 * 48u) + 8u;
                        vec3 _3539 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3528)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3528 + 2u)).x));
                        float _3543 = _3503.x - _3025;
                        float _3544 = _3503.y - _3026;
                        float _3545 = _3503.z - _3027;
                        float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                        float _3549 = inversesqrt(_3546);
                        float _3550 = _3549 * _3543;
                        float _3551 = _3549 * _3544;
                        float _3552 = _3549 * _3545;
                        float _3553 = dot(vec3(_1235, _1238, _1241), vec3(_3550, _3551, _3552));
                        float _3558 = 1.0 - (_3546 * _3503.w);
                        float _4943 = isnan(0.0) ? _3558 : (isnan(_3558) ? 0.0 : max(_3558, 0.0));
                        float _3559 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                        float _3560 = sqrt(_3546) * _3522.w;
                        float _3563 = 1.39999997615814208984375 / (_3560 + 1.39999997615814208984375);
                        float _3564 = _3563 * _3563;
                        float _3567 = ((1.0 - _3564) * _3553) + _3564;
                        float _3570 = _3560 * _3560;
                        float _3574 = ((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3559) / ((_3570 * 0.699999988079071044921875) + 1.0);
                        float _3578 = (-0.0) - _3025;
                        float _3579 = (-0.0) - _3026;
                        float _3580 = (-0.0) - _3027;
                        float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                        float _3585 = _3584 * _3578;
                        float _3586 = _3584 * _3579;
                        float _3587 = _3584 * _3580;
                        float _3595 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                        float _3596 = 1.0 - _1355;
                        float _3603 = sqrt(1.0 - ((1.0 - (_3596 * _3596)) * (1.0 - (_3595 * _3595))));
                        float _3604 = _3603 * _3603;
                        float _3605 = _3604 * _3604;
                        float _3606 = _3585 + _3550;
                        float _3607 = _3586 + _3551;
                        float _3608 = _3587 + _3552;
                        float _3612 = inversesqrt(dot(vec3(_3606, _3607, _3608), vec3(_3606, _3607, _3608)));
                        float _3616 = dot(vec3(_1235, _1238, _1241), vec3(_3585, _3586, _3587));
                        float _4959 = isnan(0.0) ? _3616 : (isnan(_3616) ? 0.0 : max(_3616, 0.0));
                        float _3619 = isnan(1.0) ? _4959 : (isnan(_4959) ? 1.0 : min(_4959, 1.0));
                        float _3620 = dot(vec3(_1235, _1238, _1241), vec3(_3612 * _3606, _3612 * _3607, _3612 * _3608));
                        float _4970 = isnan(0.0) ? _3620 : (isnan(_3620) ? 0.0 : max(_3620, 0.0));
                        float _3623 = isnan(1.0) ? _4970 : (isnan(_4970) ? 1.0 : min(_4970, 1.0));
                        float _3627 = ((_3623 * _3623) * (_3605 + (-1.0))) + 1.0;
                        float _3628 = _3563 * _3604;
                        float _3629 = _3628 * _3628;
                        float _3632 = ((1.0 - _3629) * _3553) + _3629;
                        float _4981 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3633 = isnan(1.0) ? _4981 : (isnan(_4981) ? 1.0 : min(_4981, 1.0));
                        float _3634 = 1.0 - _3604;
                        float _3644 = (0.5 / (((_3633 * ((_3619 * _3634) + _3604)) + 9.9999999392252902907785028219223e-09) + (((_3633 * _3634) + _3604) * _3619))) * _3633;
                        float _4992 = isnan(0.0) ? _3644 : (isnan(_3644) ? 0.0 : max(_3644, 0.0));
                        float _3655 = (((_3605 * 3.1415927410125732421875) * (isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0)))) / ((_3627 * _3627) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125))) * _3559;
                        _3412 = (_3574 * _3522.x) + _3480;
                        _3413 = (_3574 * _3522.y) + _3481;
                        _3414 = (_3574 * _3522.z) + _3482;
                        _3409 = (_3655 * _3539.x) + _3477;
                        _3410 = (_3655 * _3539.y) + _3478;
                        _3411 = (_3655 * _3539.z) + _3479;
                        if (_3484 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3477 = _3409;
                            _3478 = _3410;
                            _3479 = _3411;
                            _3480 = _3412;
                            _3481 = _3413;
                            _3482 = _3414;
                            _3483 = _3484;
                        }
                    }
                    frontier_phi_61_pred = _3409;
                    frontier_phi_61_pred_1 = _3414;
                    frontier_phi_61_pred_2 = _3413;
                    frontier_phi_61_pred_3 = _3412;
                    frontier_phi_61_pred_4 = _3411;
                    frontier_phi_61_pred_5 = _3410;
                }
                _3202 = frontier_phi_61_pred;
                _3212 = frontier_phi_61_pred_1;
                _3210 = frontier_phi_61_pred_2;
                _3208 = frontier_phi_61_pred_3;
                _3206 = frontier_phi_61_pred_4;
                _3204 = frontier_phi_61_pred_5;
                uint _3360 = _3359 + 1u;
                if (_3360 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3353 = _3202;
                    _3354 = _3204;
                    _3355 = _3206;
                    _3356 = _3208;
                    _3357 = _3210;
                    _3358 = _3212;
                    _3359 = _3360;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3201 = _3202;
            _3203 = _3204;
            _3205 = _3206;
            _3207 = _3208;
            _3209 = _3210;
            _3211 = _3212;
        }
        uvec4 _3215 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3216 = _3215.z;
        uint _3218 = (_3216 >> 8u) & 15u;
        float _3321;
        float _3323;
        float _3325;
        float _3327;
        float _3329;
        float _3331;
        if (((4294967295u << _3218) & _3071) == 0u)
        {
            _3321 = _3201;
            _3323 = _3203;
            _3325 = _3205;
            _3327 = _3207;
            _3329 = _3209;
            _3331 = _3211;
        }
        else
        {
            float _3346 = inversesqrt(dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027)));
            float _3347 = _3346 * _3025;
            float _3348 = _3346 * _3026;
            float _3349 = _3346 * _3027;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3218 < ((_3216 >> 12u) & 15u))
            {
                float _3322;
                float _3324;
                float _3326;
                float _3328;
                float _3330;
                float _3332;
                float _3460 = _3201;
                float _3461 = _3203;
                float _3462 = _3205;
                float _3463 = _3207;
                float _3464 = _3209;
                float _3465 = _3211;
                uint _3466 = _3218;
                uint _3475;
                bool _3476;
                for (;;)
                {
                    _3475 = texelFetch(g_lightClassification, int((((_3065 << 5u) + (_3051 << 9u)) + (_3466 << 2u)) >> 2u)).x;
                    _3476 = _3475 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3476)
                    {
                        frontier_phi_67_pred = _3463;
                        frontier_phi_67_pred_1 = _3464;
                        frontier_phi_67_pred_2 = _3465;
                        frontier_phi_67_pred_3 = _3462;
                        frontier_phi_67_pred_4 = _3461;
                        frontier_phi_67_pred_5 = _3460;
                    }
                    else
                    {
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3665;
                        float _3953;
                        float _3954;
                        float _3955;
                        float _3956;
                        float _3957;
                        float _3958;
                        float _3673 = _3460;
                        float _3674 = _3461;
                        float _3675 = _3462;
                        float _3676 = _3463;
                        float _3677 = _3464;
                        float _3678 = _3465;
                        uint _3679 = _3475;
                        uint _3680;
                        vec4 _3705;
                        float _3706;
                        vec4 _3721;
                        vec3 _3733;
                        vec4 _3748;
                        vec4 _3763;
                        float _3809;
                        bool _3810;
                        for (;;)
                        {
                            uint _3690 = ((_3466 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3679));
                            _3680 = (_3679 + 4294967295u) & _3679;
                            uint _3692 = _3690 * 40u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            _3706 = _3705.w;
                            uint _3708 = (_3690 * 40u) + 4u;
                            _3721 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3708)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3708 + 3u)).x));
                            uint _3723 = (_3690 * 40u) + 8u;
                            _3733 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x));
                            uint _3735 = (_3690 * 40u) + 16u;
                            _3748 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3735)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3735 + 3u)).x));
                            uint _3750 = (_3690 * 40u) + 20u;
                            _3763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3750 + 3u)).x));
                            uint _3765 = (_3690 * 40u) + 24u;
                            vec4 _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3784 = (_3690 * 40u) + 28u;
                            vec4 _3797 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 3u)).x));
                            _3809 = fma(_3027, _3797.z, fma(_3026, _3797.y, _3797.x * _3025)) + _3797.w;
                            _3810 = !((fma(_3027, _3778.z, fma(_3026, _3778.y, _3778.x * _3025)) + _3778.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3810)
                            {
                                float _3837 = _3705.x - _3025;
                                float _3838 = _3705.y - _3026;
                                float _3839 = _3705.z - _3027;
                                float _3840 = dot(vec3(_3837, _3838, _3839), vec3(_3837, _3838, _3839));
                                float _3843 = inversesqrt(_3840);
                                float _3844 = _3843 * _3837;
                                float _3845 = _3843 * _3838;
                                float _3846 = _3843 * _3839;
                                float _3850 = 1.0 - (_3840 / (_3706 * _3706));
                                float _5003 = isnan(0.0) ? _3850 : (isnan(_3850) ? 0.0 : max(_3850, 0.0));
                                float _3851 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
                                float _3855 = sqrt(_3840) * _3721.w;
                                float _3857 = 1.39999997615814208984375 / (_3855 + 1.39999997615814208984375);
                                float _3858 = _3857 * _3857;
                                float _3861 = ((1.0 - _3858) * dot(vec3(_3844, _3845, _3846), vec3(_1235, _1238, _1241))) + _3858;
                                float _3864 = _3855 * _3855;
                                float _3868 = (fma(_3027, _3748.z, fma(_3026, _3748.y, _3748.x * _3025)) + _3748.w) / _3809;
                                float _3869 = (fma(_3027, _3763.z, fma(_3026, _3763.y, _3763.x * _3025)) + _3763.w) / _3809;
                                float _3873 = 1.0 - dot(vec2(_3868, _3869), vec2(_3868, _3869));
                                float _5019 = isnan(0.0) ? _3873 : (isnan(_3873) ? 0.0 : max(_3873, 0.0));
                                float _3874 = isnan(1.0) ? _5019 : (isnan(_5019) ? 1.0 : min(_5019, 1.0));
                                float _3875 = _3874 * (((isnan(0.0) ? _3861 : (isnan(_3861) ? 0.0 : max(_3861, 0.0))) * _3851) / ((_3864 * 0.699999988079071044921875) + 1.0));
                                float _3887 = exp2(log2(1.0 / ((_3864 * 3.5) + 5.0)) * 0.25);
                                float _3888 = 1.0 - _1355;
                                float _3895 = sqrt(1.0 - ((1.0 - (_3888 * _3888)) * (1.0 - (_3887 * _3887))));
                                float _3896 = _3895 * _3895;
                                float _3897 = _3896 * _3896;
                                float _3898 = _3844 - _3347;
                                float _3899 = _3845 - _3348;
                                float _3900 = _3846 - _3349;
                                float _3904 = inversesqrt(dot(vec3(_3898, _3899, _3900), vec3(_3898, _3899, _3900)));
                                float _3908 = dot(vec3(_1235, _1238, _1241), vec3((-0.0) - _3347, (-0.0) - _3348, (-0.0) - _3349));
                                float _5030 = isnan(0.0) ? _3908 : (isnan(_3908) ? 0.0 : max(_3908, 0.0));
                                float _3911 = isnan(1.0) ? _5030 : (isnan(_5030) ? 1.0 : min(_5030, 1.0));
                                float _3912 = dot(vec3(_1235, _1238, _1241), vec3(_3904 * _3898, _3904 * _3899, _3904 * _3900));
                                float _5041 = isnan(0.0) ? _3912 : (isnan(_3912) ? 0.0 : max(_3912, 0.0));
                                float _3915 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
                                float _3919 = ((_3915 * _3915) * (_3897 + (-1.0))) + 1.0;
                                float _3920 = _3857 * _3896;
                                float _3921 = _3920 * _3920;
                                float _3927 = ((1.0 - _3921) * dot(vec3(_1235, _1238, _1241), vec3(_3844, _3845, _3846))) + _3921;
                                float _5052 = isnan(0.0) ? _3927 : (isnan(_3927) ? 0.0 : max(_3927, 0.0));
                                float _3928 = isnan(1.0) ? _5052 : (isnan(_5052) ? 1.0 : min(_5052, 1.0));
                                float _3929 = 1.0 - _3896;
                                float _3939 = (0.5 / (((_3928 * ((_3911 * _3929) + _3896)) + 9.9999999392252902907785028219223e-09) + (((_3928 * _3929) + _3896) * _3911))) * _3928;
                                float _5063 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                                float _3949 = (_3874 * _3851) * (((_3897 * 3.1415927410125732421875) * (isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0)))) / ((_3919 * _3919) * ((_3864 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3949 * _3733.x;
                                frontier_phi_73_pred_1 = _3949 * _3733.y;
                                frontier_phi_73_pred_2 = _3875 * _3721.z;
                                frontier_phi_73_pred_3 = _3875 * _3721.y;
                                frontier_phi_73_pred_4 = _3875 * _3721.x;
                                frontier_phi_73_pred_5 = _3949 * _3733.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3953 = frontier_phi_73_pred;
                            _3954 = frontier_phi_73_pred_1;
                            _3958 = frontier_phi_73_pred_2;
                            _3957 = frontier_phi_73_pred_3;
                            _3956 = frontier_phi_73_pred_4;
                            _3955 = frontier_phi_73_pred_5;
                            _3663 = _3956 + _3676;
                            _3664 = _3957 + _3677;
                            _3665 = _3958 + _3678;
                            _3660 = _3953 + _3673;
                            _3661 = _3954 + _3674;
                            _3662 = _3955 + _3675;
                            if (_3680 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3673 = _3660;
                                _3674 = _3661;
                                _3675 = _3662;
                                _3676 = _3663;
                                _3677 = _3664;
                                _3678 = _3665;
                                _3679 = _3680;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3663;
                        frontier_phi_67_pred_1 = _3664;
                        frontier_phi_67_pred_2 = _3665;
                        frontier_phi_67_pred_3 = _3662;
                        frontier_phi_67_pred_4 = _3661;
                        frontier_phi_67_pred_5 = _3660;
                    }
                    _3328 = frontier_phi_67_pred;
                    _3330 = frontier_phi_67_pred_1;
                    _3332 = frontier_phi_67_pred_2;
                    _3326 = frontier_phi_67_pred_3;
                    _3324 = frontier_phi_67_pred_4;
                    _3322 = frontier_phi_67_pred_5;
                    uint _3467 = _3466 + 1u;
                    if (_3467 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3460 = _3322;
                        _3461 = _3324;
                        _3462 = _3326;
                        _3463 = _3328;
                        _3464 = _3330;
                        _3465 = _3332;
                        _3466 = _3467;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3330;
                frontier_phi_55_56_ladder_1 = _3332;
                frontier_phi_55_56_ladder_2 = _3328;
                frontier_phi_55_56_ladder_3 = _3326;
                frontier_phi_55_56_ladder_4 = _3324;
                frontier_phi_55_56_ladder_5 = _3322;
            }
            else
            {
                frontier_phi_55_56_ladder = _3209;
                frontier_phi_55_56_ladder_1 = _3211;
                frontier_phi_55_56_ladder_2 = _3207;
                frontier_phi_55_56_ladder_3 = _3205;
                frontier_phi_55_56_ladder_4 = _3203;
                frontier_phi_55_56_ladder_5 = _3201;
            }
            _3321 = frontier_phi_55_56_ladder_5;
            _3323 = frontier_phi_55_56_ladder_4;
            _3325 = frontier_phi_55_56_ladder_3;
            _3327 = frontier_phi_55_56_ladder_2;
            _3329 = frontier_phi_55_56_ladder;
            _3331 = frontier_phi_55_56_ladder_1;
        }
        float _3336 = isnan(1.0) ? _1339 : (isnan(_1339) ? 1.0 : min(_1339, 1.0));
        _3084 = (_3336 * _3327) + _2517;
        _3086 = (_3336 * _3329) + _2519;
        _3088 = (_3336 * _3331) + _2521;
        _3090 = ((_3321 * _1324) * _3336) + _2865;
        _3092 = ((_3323 * _1326) * _3336) + _2867;
        _3094 = ((_3325 * _1327) * _3336) + _2869;
    }
    else
    {
        _3084 = _2517;
        _3086 = _2519;
        _3088 = _2521;
        _3090 = _2865;
        _3092 = _2867;
        _3094 = _2869;
    }
    uint _3100 = _1268 + uint(cbMatDynParam._m0[0u].w);
    float _3106 = (((((cbMtdParam._m0[22u].x * _1048.x) * cbMtdParam._m0[32u].x) * _1071) + _824) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3100].x;
    float _3107 = (((((cbMtdParam._m0[22u].y * _1048.y) * cbMtdParam._m0[32u].x) * _1071) + _825) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3100].y;
    float _3108 = (((((cbMtdParam._m0[22u].z * _1048.z) * cbMtdParam._m0[32u].x) * _1071) + _826) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3100].z;
    float _5079 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _5090 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _5101 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
    float _3125 = (((isnan(1.0) ? _5079 : (isnan(_5079) ? 1.0 : min(_5079, 1.0))) * (_3084 + ((isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0))) * _1339))) + ((_3090 + ((isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0))) * _2136)) * cbPerFrame._m0[3u].x)) + _3106;
    float _3127 = (_3107 + ((_3092 + ((isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0))) * _2136)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5090 : (isnan(_5090) ? 1.0 : min(_5090, 1.0))) * (_3086 + ((isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))) * _1339)));
    float _3129 = (_3108 + ((_3094 + ((isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0))) * _2136)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0))) * (_3088 + ((isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0))) * _1339)));
    float _5127 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3142 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
    uint _3143 = _1267 + 6u;
    float _3151 = _1212 / cbSceneParam._m0[86u].x;
    float _3152 = _1213 / cbSceneParam._m0[86u].y;
    vec4 _3166 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3151, _3152, (log2((isnan(cbSceneParam._m0[77u].w) ? _1167 : (isnan(_1167) ? cbSceneParam._m0[77u].w : min(_1167, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3168 = _3166.x;
    float _3169 = _3166.y;
    float _3170 = _3166.z;
    float _3171 = _3166.w;
    float _3263;
    float _3265;
    float _3267;
    float _3269;
    if (_1167 > cbSceneParam._m0[78u].w)
    {
        float _3226 = isnan(_1167) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1167 : min(cbSceneParam._m0[80u].w, _1167));
        float _3227 = _3226 / _1167;
        float _3238 = _3227 * _1197;
        float _3239 = _1198 * _3227;
        float _3240 = (-0.0) - _3239;
        float _3241 = _3227 * _1199;
        float _3243 = (cbSceneParam._m0[77u].w * _3240) / _3226;
        float _3244 = _3243 + cbSceneParam._m0[79u].w;
        float _3245 = cbSceneParam._m0[79u].w - _3239;
        float _3251 = sqrt(((_3238 * _3238) + (_3239 * _3239)) + (_3241 * _3241));
        float _3254 = (1.0 - (cbSceneParam._m0[77u].w / _3226)) * _3251;
        float _3259 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3261 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3422;
        if (abs((_3240 - _3243) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3422 = ((((_3244 > 0.0) ? exp2(_3259 * _3244) : (2.0 - exp2(_3261 * _3244))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3254;
        }
        else
        {
            float _3382 = 1.0 / cbSceneParam._m0[80u].x;
            float _3383 = isnan(_3245) ? _3244 : (isnan(_3244) ? _3245 : max(_3244, _3245));
            float _3384 = isnan(_3245) ? _3244 : (isnan(_3244) ? _3245 : min(_3244, _3245));
            float _3393 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : min(_3383, 0.0));
            float _3394 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : min(_3384, 0.0));
            _3422 = ((abs(_3251 / _3240) * cbSceneParam._m0[80u].y) * ((((_3393 - _3394) * 2.0) - ((exp2(_3259 * (isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0)))) - exp2(_3259 * (isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0))))) * _3382)) - ((exp2(_3261 * _3393) - exp2(_3261 * _3394)) * _3382))) + (_3254 * cbSceneParam._m0[80u].z);
        }
        vec4 _3424 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3151, _3152, 1.0), 0.0);
        float _3433 = exp2((_3422 * (-1.44269502162933349609375)) * (1.0 - _3424.w));
        float _3434 = log2(_3433);
        float _3450 = log2(_3171);
        _3263 = (exp2(_3450 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].x)) * _3424.x) / cbSceneParam._m0[78u].x)) + _3168;
        _3265 = (exp2(_3450 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].y)) * _3424.y) / cbSceneParam._m0[78u].y)) + _3169;
        _3267 = (exp2(_3450 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3434 * cbSceneParam._m0[78u].z)) * _3424.z) / cbSceneParam._m0[78u].z)) + _3170;
        _3269 = _3433 * _3171;
    }
    else
    {
        _3263 = _3168;
        _3265 = _3169;
        _3267 = _3170;
        _3269 = _3171;
    }
    float _3280 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3281 = _3280 == 3.0;
    float _3282 = log2(_3269);
    float _3286 = exp2(_3282 * cbSceneParam._m0[78u].x);
    float _3287 = exp2(_3282 * cbSceneParam._m0[78u].y);
    float _3288 = exp2(_3282 * cbSceneParam._m0[78u].z);
    float _3289 = _3286 * (isnan(0.0) ? _3125 : (isnan(_3125) ? 0.0 : max(_3125, 0.0)));
    float _3290 = _3287 * (isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0)));
    float _3291 = _3288 * (isnan(0.0) ? _3129 : (isnan(_3129) ? 0.0 : max(_3129, 0.0)));
    float _3300 = (_3280 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3300 * (_3281 ? _3289 : (_3289 + (cbSceneParam._m0[72u].w * _3263)));
    SV_Target.y = _3300 * (_3281 ? _3290 : (_3290 + (cbSceneParam._m0[72u].w * _3265)));
    SV_Target.z = _3300 * (_3281 ? _3291 : (_3291 + (cbSceneParam._m0[72u].w * _3267)));
    SV_Target.w = cbInstanceData._m0[_3143].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3106) * _3142) * _3286) * _3300;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3107) * _3142) * _3287) * _3300;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3108) * _3142) * _3288) * _3300;
    SV_Target_1.w = cbInstanceData._m0[_3143].w;
}


