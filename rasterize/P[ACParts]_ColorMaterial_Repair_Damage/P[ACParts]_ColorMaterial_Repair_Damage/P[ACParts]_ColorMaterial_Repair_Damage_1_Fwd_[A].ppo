#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1562;
float _3977;
float _3978;
float _3979;
float _3980;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _271 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _271.z;
    float _277 = _271.w;
    vec4 _299 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _304 = _299.w;
    float _316 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _276) * exp2(log2(1.0 - _304) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(1.0) ? _317 : (isnan(_317) ? 1.0 : min(_317, 1.0));
    vec4 _332 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _342 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _350 = (_342 - (((_332.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _342))) * (cbMtdParam._m0[36u].w + 1.0);
    float _3999 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _353 = _318 - (_351 * _318);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    vec4 _368 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _371 = _368.y;
    float _372 = _371 * (isnan(1.0) ? _354 : (isnan(_354) ? 1.0 : min(_354, 1.0)));
    float _381 = exp2(log2(cbMtdParam._m0[32u].w * _304) * cbMtdParam._m0[31u].z);
    float _383 = _381 - (_351 * _381);
    float _384 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
    float _396 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_277) * 4.5));
    float _405 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _276) * _396)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _407 = isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0));
    float _418 = exp2(log2((1.0 - (((_396 * _396) * _276) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _419 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = (((isnan(1.0) ? _419 : (isnan(_419) ? 1.0 : min(_419, 1.0))) - _277) * _371) + _277;
    vec4 _435 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _448 = (_368.x + (-0.02500000037252902984619140625)) * 8.0;
    float _450 = roundEven(_448);
    float _451 = cbMtdParam._m0[10u].x * _435.x;
    float _452 = cbMtdParam._m0[10u].y * _435.y;
    float _453 = cbMtdParam._m0[10u].z * _435.z;
    vec4 _465 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _476 = cbMtdParam._m0[9u].x * _465.x;
    float _477 = cbMtdParam._m0[9u].y * _465.y;
    float _478 = cbMtdParam._m0[9u].z * _465.z;
    float _485 = ((_476 - _451) * _423) + _451;
    float _486 = ((_477 - _452) * _423) + _452;
    float _487 = ((_478 - _453) * _423) + _453;
    vec4 _499 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _519 = (((cbMtdParam._m0[20u].x * _499.x) - _485) * _407) + _485;
    float _520 = (((cbMtdParam._m0[20u].y * _499.y) - _486) * _407) + _486;
    float _521 = (((cbMtdParam._m0[20u].z * _499.z) - _487) * _407) + _487;
    vec4 _533 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _553 = (((cbMtdParam._m0[29u].x * _533.x) - _519) * _385) + _519;
    float _554 = (((cbMtdParam._m0[29u].y * _533.y) - _520) * _385) + _520;
    float _555 = (((cbMtdParam._m0[29u].z * _533.z) - _521) * _385) + _521;
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[30u].x;
    _201[0u] = cbMtdParam._m0[30u].y;
    _202[0u] = cbMtdParam._m0[30u].z;
    _200[1u] = cbMtdParam._m0[28u].x;
    _201[1u] = cbMtdParam._m0[28u].y;
    _202[1u] = cbMtdParam._m0[28u].z;
    _200[2u] = cbMtdParam._m0[27u].x;
    _201[2u] = cbMtdParam._m0[27u].y;
    _202[2u] = cbMtdParam._m0[27u].z;
    _200[3u] = cbMtdParam._m0[26u].x;
    _201[3u] = cbMtdParam._m0[26u].y;
    _202[3u] = cbMtdParam._m0[26u].z;
    _200[4u] = cbMtdParam._m0[25u].x;
    _201[4u] = cbMtdParam._m0[25u].y;
    _202[4u] = cbMtdParam._m0[25u].z;
    _200[5u] = cbMtdParam._m0[24u].x;
    _201[5u] = cbMtdParam._m0[24u].y;
    _202[5u] = cbMtdParam._m0[24u].z;
    float _624 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    uint _627 = uint(int(isnan(5.0) ? _624 : (isnan(_624) ? 5.0 : min(_624, 5.0))));
    float _634 = _200[_627] * _371;
    float _635 = _201[_627] * _371;
    float _636 = _202[_627] * _371;
    float _637 = _634 + ((_299.x * 4.5) * (((_476 - _553) * _372) + _553));
    float _638 = _635 + ((_299.y * 4.5) * (((_477 - _554) * _372) + _554));
    float _639 = _636 + ((_299.z * 4.5) * (((_478 - _555) * _372) + _555));
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[37u].w;
    _196[0u] = cbMtdParam._m0[38u].x;
    _195[1u] = cbMtdParam._m0[39u].w;
    _196[1u] = cbMtdParam._m0[40u].x;
    _195[2u] = cbMtdParam._m0[40u].y;
    _196[2u] = cbMtdParam._m0[40u].z;
    _195[3u] = cbMtdParam._m0[40u].w;
    _196[3u] = cbMtdParam._m0[41u].x;
    _195[4u] = cbMtdParam._m0[41u].y;
    _196[4u] = cbMtdParam._m0[41u].z;
    float _672 = roundEven(5.0 - _448);
    float _673 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _674 = isnan(4.0) ? _673 : (isnan(_673) ? 4.0 : min(_673, 4.0));
    float _676 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    uint _678 = uint(int(isnan(4.0) ? _676 : (isnan(_676) ? 4.0 : min(_676, 4.0))));
    float _690 = ((cbMtdParam._m0[42u].z - _196[_678]) * _423) + _196[_678];
    float _698 = ((cbMtdParam._m0[43u].x - _690) * _407) + _690;
    float _703 = ((cbMtdParam._m0[43u].z - _698) * _385) + _698;
    float _708 = ((cbMtdParam._m0[39u].z - _703) * _372) + _703;
    vec4 _722 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _724 = _722.x;
    float _725 = _722.y;
    float _727 = _722.z + _195[_678];
    vec4 _739 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _747 = (((cbMtdParam._m0[42u].y - _727) + _739.z) * _423) + _727;
    vec4 _760 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _768 = (((cbMtdParam._m0[42u].w - _747) + _760.z) * _407) + _747;
    float _774 = ((((_276 * 2.0) * _768) - _768) * cbMtdParam._m0[34u].x) + _768;
    vec4 _787 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _795 = (((_787.z + cbMtdParam._m0[43u].y) - _774) * _385) + _774;
    float _799 = (((cbMtdParam._m0[39u].y + _332.z) - _795) * _372) + _795;
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _862 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_831 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_835 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _877 = (-0.0) - ((_835 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _881 = (_835 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _882 = isnan(_881) ? _877 : (isnan(_877) ? _881 : min(_877, _881));
    float _4085 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _883 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
    float _911 = ((_739.x - _724) * _423) + _724;
    float _912 = ((_739.y - _725) * _423) + _725;
    float _917 = ((_760.x - _911) * _407) + _911;
    float _918 = ((_760.y - _912) * _407) + _912;
    float _923 = ((_787.x - _917) * _385) + _917;
    float _924 = ((_787.y - _918) * _385) + _918;
    float _933 = ((((_332.x - _923) * _372) + _923) * 2.0) + (-1.0);
    float _934 = ((((_332.y - _924) * _372) + _924) * 2.0) + (-1.0);
    float _935 = dot(vec2(_933, _934), vec2(_933, _934));
    float _4096 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _940 = sqrt(1.0 - (isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0))));
    float _943 = (cbMtdParam._m0[34u].z * ((_271.x * 2.0) + (-1.0))) + _933;
    float _944 = (cbMtdParam._m0[34u].z * ((_271.y * 2.0) + (-1.0))) + _934;
    float _947 = fma(_940, _242 * NORMAL.x, fma(_944, _249 * TANGENT.x, (_235 * _227) * _943));
    float _950 = fma(_940, _242 * NORMAL.y, fma(_944, _249 * TANGENT.y, (_235 * _228) * _943));
    float _953 = fma(_940, _242 * NORMAL.z, fma(_944, _249 * TANGENT.z, (_235 * _229) * _943));
    float _957 = inversesqrt(dot(vec3(_947, _950, _953), vec3(_947, _950, _953)));
    float _958 = _957 * _947;
    float _959 = _957 * _950;
    float _960 = _957 * _953;
    float _4107 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _961 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
    float _4118 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4129 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4140 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4151 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _965 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
    float _981 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1011 = cbSceneParam._m0[71u].x - (_831 / _1001);
    float _1012 = cbSceneParam._m0[71u].y - (_835 / _1001);
    float _1013 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1001);
    float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
    float _1018 = _1011 * _1017;
    float _1019 = _1012 * _1017;
    float _1020 = _1013 * _1017;
    vec4 _1025 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1027 = _1025.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1245 = sqrt(((_1011 * _1011) + (_1012 * _1012)) + (_1013 * _1013));
        float _1251 = (cbMatDynParam._m0[5u].x * _1245) + cbMatDynParam._m0[5u].y;
        float _4162 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0));
        float _1256 = (cbMatDynParam._m0[5u].z * _1245) + cbMatDynParam._m0[5u].w;
        float _4173 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) - _1252)) + _1252) < ((_1027 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1038 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1039 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1041 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1043 = _1041.w;
    float _1061 = fma(_960, cbSceneParam._m0[5u].z, fma(_959, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _958));
    float _1064 = fma(_960, cbSceneParam._m0[6u].z, fma(_959, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _958));
    float _1067 = fma(_960, cbSceneParam._m0[7u].z, fma(_959, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _958));
    vec4 _1069 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1080 = (((_1069.y - _961) + (_1069.w * _961)) * cbMtdParam._m0[3u].x) + _961;
    uint _1093 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1094 = _1093 + 9u;
    uint _1095 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _1101 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0)))) * cbInstanceData._m0[_1095].x;
    float _1102 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) * cbInstanceData._m0[_1095].y;
    float _1103 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) * cbInstanceData._m0[_1095].z;
    float _4184 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
    float _1104 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
    float _4195 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
    float _1105 = isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0));
    float _4206 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
    float _1106 = isnan(1.0) ? _4206 : (isnan(_4206) ? 1.0 : min(_4206, 1.0));
    vec4 _1107 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1112 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1123 = (((_1112.x - _965) + (_1112.w * _965)) * cbMtdParam._m0[3u].x) + _965;
    float _1136 = (cbMtdParam._m0[3u].x * (((_1104 * _1043) - _1104) + _1107.x)) + _1104;
    float _1137 = (cbMtdParam._m0[3u].x * (((_1105 * _1043) - _1105) + _1107.y)) + _1105;
    float _1138 = (cbMtdParam._m0[3u].x * (((_1106 * _1043) - _1106) + _1107.z)) + _1106;
    float _1139 = 1.0 - _1123;
    float _1140 = _1139 * _1136;
    float _1141 = _1139 * _1137;
    float _1142 = _1139 * _1138;
    float _1147 = (_1136 + (-0.039999999105930328369140625)) * _1123;
    float _1148 = (_1137 + (-0.039999999105930328369140625)) * _1123;
    float _1149 = (_1138 + (-0.039999999105930328369140625)) * _1123;
    float _1150 = _1147 + 0.039999999105930328369140625;
    float _1152 = _1148 + 0.039999999105930328369140625;
    float _1153 = _1149 + 0.039999999105930328369140625;
    vec4 _1162 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1038, cbSceneParam._m0[86u].y * _1039));
    float _1165 = _1162.x * TEXCOORD_5.w;
    float _1166 = dot(vec3(_958, _959, _960), vec3(_1018, _1019, _1020));
    float _1169 = _1166 * 2.0;
    float _1173 = (_1169 * _958) - _1018;
    float _1174 = (_1169 * _959) - _1019;
    float _1175 = (_1169 * _960) - _1020;
    float _1179 = abs(dot(vec3(_1018, _1019, _1020), vec3(_958, _959, _960)));
    float _4217 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
    float _1181 = sqrt(_1080);
    float _1192 = exp2((_1181 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4217 : (isnan(_4217) ? 1.0 : min(_4217, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1181 * 3.0));
    float _1198 = (1.0 - _1192) * ((_1181 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1199 = _1192 * _1181;
    float _1227 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1561;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1288 = fma(_1235, cbModelParam._m0[26u].z, fma(_1231, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1227));
        float _1292 = fma(_1235, cbModelParam._m0[27u].z, fma(_1231, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1227));
        float _1296 = fma(_1235, cbModelParam._m0[28u].z, fma(_1231, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1227));
        float _1320 = _1227 + _958;
        float _1321 = _1231 + _959;
        float _1322 = _1235 + _960;
        float _1332 = fma(_1322, cbModelParam._m0[26u].z, fma(_1321, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1320)) - _1288;
        float _1333 = fma(_1322, cbModelParam._m0[27u].z, fma(_1321, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1320)) - _1292;
        float _1334 = fma(_1322, cbModelParam._m0[28u].z, fma(_1321, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1320)) - _1296;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1350 = ((_1338 * _1332) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1288 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1338 * _1333) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1292 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1334) / cbModelParam._m0[34u].z) + ((((((_1296 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1350, _1351, _1352), 0.0);
        float _1389 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1390 = _1389 * (_1355.x + (-0.5));
        float _1391 = _1389 * (_1355.y + (-0.5));
        float _1392 = _1389 * (_1355.z + (-0.5));
        float _1399 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1400 = _1399 * (_1362.x + (-0.5));
        float _1401 = _1399 * (_1362.y + (-0.5));
        float _1402 = _1399 * (_1362.z + (-0.5));
        float _1409 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1369.x + (-0.5));
        float _1411 = _1409 * (_1369.y + (-0.5));
        float _1412 = _1409 * (_1369.z + (-0.5));
        float _1419 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1376.x + (-0.5));
        float _1421 = _1419 * (_1376.y + (-0.5));
        float _1422 = _1419 * (_1376.z + (-0.5));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1426 = _1390 * 0.5;
        float _1427 = _1400 * 0.5;
        float _1428 = _1410 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1443 = (dot(vec3(_958, _959, _960), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4243 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1453 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4254 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1454 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _1455 = _1454 * 2.0;
        float _1459 = (1.0 - _1454) / (_1454 + 1.0);
        float _4265 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _1469 = ((((1.0 - _1460) * (_1455 + 2.0)) * exp2(log2(isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_1455 + 1.0))) + _1460) * _1423;
        float _1470 = _1391 * 0.5;
        float _1471 = _1401 * 0.5;
        float _1472 = _1411 * 0.5;
        float _1473 = dot(vec3(_1470, _1471, _1472), vec3(_1470, _1471, _1472));
        float _1478 = (_1473 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1473);
        float _1486 = (dot(vec3(_958, _959, _960), vec3(_1478 * _1470, _1478 * _1471, _1478 * _1472)) + 1.0) * 0.5;
        float _4276 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1495 = sqrt(((_1471 * _1471) + (_1470 * _1470)) + (_1472 * _1472)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4287 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1496 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
        float _1497 = _1496 * 2.0;
        float _1501 = (1.0 - _1496) / (_1496 + 1.0);
        float _4298 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
        float _1511 = ((((1.0 - _1502) * (_1497 + 2.0)) * exp2(log2(isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0))) * (_1497 + 1.0))) + _1502) * _1424;
        float _1512 = _1392 * 0.5;
        float _1513 = _1402 * 0.5;
        float _1514 = _1412 * 0.5;
        float _1515 = dot(vec3(_1512, _1513, _1514), vec3(_1512, _1513, _1514));
        float _1520 = (_1515 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1515);
        float _1528 = (dot(vec3(_958, _959, _960), vec3(_1520 * _1512, _1520 * _1513, _1520 * _1514)) + 1.0) * 0.5;
        float _4309 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1537 = sqrt(((_1513 * _1513) + (_1512 * _1512)) + (_1514 * _1514)) / (_1425 + 9.9999997473787516355514526367188e-06);
        float _4320 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1538 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
        float _1539 = _1538 * 2.0;
        float _1543 = (1.0 - _1538) / (_1538 + 1.0);
        float _4331 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1544 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
        float _1553 = ((((1.0 - _1544) * (_1539 + 2.0)) * exp2(log2(isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_1539 + 1.0))) + _1544) * _1425;
        _1561 = _1392;
        _1563 = _1391;
        _1564 = _1390;
        _1565 = _1402;
        _1566 = _1401;
        _1567 = _1400;
        _1568 = _1412;
        _1569 = _1411;
        _1570 = _1410;
        _1571 = _1425;
        _1572 = _1424;
        _1573 = _1423;
        _1574 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0)));
        _1575 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0)));
        _1576 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0)));
    }
    else
    {
        _1561 = _1562;
        _1563 = _1562;
        _1564 = _1562;
        _1565 = _1562;
        _1566 = _1562;
        _1567 = _1562;
        _1568 = _1562;
        _1569 = _1562;
        _1570 = _1562;
        _1571 = _1562;
        _1572 = _1562;
        _1573 = _1562;
        _1574 = 0.0;
        _1575 = 0.0;
        _1576 = 0.0;
    }
    float _1869;
    float _1870;
    float _1871;
    float _1872;
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1602 = fma(_1235, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1227));
        float _1606 = fma(_1235, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1227));
        float _1610 = fma(_1235, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1227));
        float _1632 = _1227 + _958;
        float _1633 = _1231 + _959;
        float _1634 = _1235 + _960;
        float _1644 = fma(_1634, cbModelParam._m0[30u].z, fma(_1633, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1632)) - _1602;
        float _1645 = fma(_1634, cbModelParam._m0[31u].z, fma(_1633, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1632)) - _1606;
        float _1646 = fma(_1634, cbModelParam._m0[32u].z, fma(_1633, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1632)) - _1610;
        float _1650 = inversesqrt(dot(vec3(_1644, _1645, _1646), vec3(_1644, _1645, _1646)));
        float _1662 = ((_1650 * _1644) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1602 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1663 = ((_1650 * _1645) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1606 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1664 = ((_1650 * _1646) / cbModelParam._m0[35u].z) + ((((((_1610 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1666 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1673 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1680 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        vec4 _1687 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1662, _1663, _1664), 0.0);
        float _1699 = exp2((_1666.w + (-0.5)) * 20.0) * 2.0;
        float _1700 = _1699 * (_1666.x + (-0.5));
        float _1701 = _1699 * (_1666.y + (-0.5));
        float _1702 = _1699 * (_1666.z + (-0.5));
        float _1709 = exp2((_1673.w + (-0.5)) * 20.0) * 2.0;
        float _1710 = _1709 * (_1673.x + (-0.5));
        float _1711 = _1709 * (_1673.y + (-0.5));
        float _1712 = _1709 * (_1673.z + (-0.5));
        float _1719 = exp2((_1680.w + (-0.5)) * 20.0) * 2.0;
        float _1720 = _1719 * (_1680.x + (-0.5));
        float _1721 = _1719 * (_1680.y + (-0.5));
        float _1722 = _1719 * (_1680.z + (-0.5));
        float _1729 = exp2((_1687.w + (-0.5)) * 20.0) * 2.0;
        float _1730 = _1729 * (_1687.x + (-0.5));
        float _1731 = _1729 * (_1687.y + (-0.5));
        float _1732 = _1729 * (_1687.z + (-0.5));
        float _1733 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
        float _1734 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1735 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
        float _1736 = _1700 * 0.5;
        float _1737 = _1710 * 0.5;
        float _1738 = _1720 * 0.5;
        float _1739 = dot(vec3(_1736, _1737, _1738), vec3(_1736, _1737, _1738));
        float _1744 = (_1739 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1739);
        float _1752 = (dot(vec3(_958, _959, _960), vec3(_1744 * _1736, _1744 * _1737, _1744 * _1738)) + 1.0) * 0.5;
        float _4372 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
        float _1761 = sqrt(((_1737 * _1737) + (_1736 * _1736)) + (_1738 * _1738)) / (_1733 + 9.9999997473787516355514526367188e-06);
        float _4383 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
        float _1762 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _1763 = _1762 * 2.0;
        float _1767 = (1.0 - _1762) / (_1762 + 1.0);
        float _4394 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
        float _1768 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _1777 = ((((1.0 - _1768) * (_1763 + 2.0)) * exp2(log2(isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_1763 + 1.0))) + _1768) * _1733;
        float _1778 = _1701 * 0.5;
        float _1779 = _1711 * 0.5;
        float _1780 = _1721 * 0.5;
        float _1781 = dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780));
        float _1786 = (_1781 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1781);
        float _1794 = (dot(vec3(_958, _959, _960), vec3(_1786 * _1778, _1786 * _1779, _1786 * _1780)) + 1.0) * 0.5;
        float _4405 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
        float _1803 = sqrt(((_1779 * _1779) + (_1778 * _1778)) + (_1780 * _1780)) / (_1734 + 9.9999997473787516355514526367188e-06);
        float _4416 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1804 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
        float _1805 = _1804 * 2.0;
        float _1809 = (1.0 - _1804) / (_1804 + 1.0);
        float _4427 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
        float _1810 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
        float _1819 = ((((1.0 - _1810) * (_1805 + 2.0)) * exp2(log2(isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0))) * (_1805 + 1.0))) + _1810) * _1734;
        float _1820 = _1702 * 0.5;
        float _1821 = _1712 * 0.5;
        float _1822 = _1722 * 0.5;
        float _1823 = dot(vec3(_1820, _1821, _1822), vec3(_1820, _1821, _1822));
        float _1828 = (_1823 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1823);
        float _1836 = (dot(vec3(_958, _959, _960), vec3(_1828 * _1820, _1828 * _1821, _1828 * _1822)) + 1.0) * 0.5;
        float _4438 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
        float _1845 = sqrt(((_1821 * _1821) + (_1820 * _1820)) + (_1822 * _1822)) / (_1735 + 9.9999997473787516355514526367188e-06);
        float _4449 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1846 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
        float _1847 = _1846 * 2.0;
        float _1851 = (1.0 - _1846) / (_1846 + 1.0);
        float _4460 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
        float _1852 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
        float _1861 = ((((1.0 - _1852) * (_1847 + 2.0)) * exp2(log2(isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_1847 + 1.0))) + _1852) * _1735;
        _1869 = _1702;
        _1870 = _1701;
        _1871 = _1700;
        _1872 = _1712;
        _1873 = _1711;
        _1874 = _1710;
        _1875 = _1722;
        _1876 = _1721;
        _1877 = _1720;
        _1878 = _1735;
        _1879 = _1734;
        _1880 = _1733;
        _1881 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0)));
        _1882 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0)));
        _1883 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0)));
    }
    else
    {
        _1869 = _1562;
        _1870 = _1562;
        _1871 = _1562;
        _1872 = _1562;
        _1873 = _1562;
        _1874 = _1562;
        _1875 = _1562;
        _1876 = _1562;
        _1877 = _1562;
        _1878 = _1562;
        _1879 = _1562;
        _1880 = _1562;
        _1881 = 0.0;
        _1882 = 0.0;
        _1883 = 0.0;
    }
    float _1893 = (cbModelParam._m0[1u].x * (_1881 - _1574)) + _1574;
    float _1894 = (cbModelParam._m0[1u].x * (_1882 - _1575)) + _1575;
    float _1895 = (cbModelParam._m0[1u].x * (_1883 - _1576)) + _1576;
    float _1916 = fma(_1895, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1893 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1895, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1893 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1895, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1893));
    float _1935 = _1173 * 0.5;
    float _1936 = _1174 * 0.5;
    float _1937 = _1175 * 0.5;
    float _1938 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1871, _1874, _1877, _1880));
    float _1941 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1870, _1873, _1876, _1879));
    float _1944 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1869, _1872, _1875, _1878));
    float _1978;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1951 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1561, _1565, _1568, _1571));
        float _1955 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1563, _1566, _1569, _1572));
        float _1959 = dot(vec4(_1935, _1936, _1937, 1.0), vec4(_1564, _1567, _1570, _1573));
        float _1966 = dot(vec4(cbModelParam._m0[39u]), vec4(_1935, _1936, _1937, 1.0));
        _1978 = dot(vec3(isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0)), isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1966) ? 0.0 : (isnan(0.0) ? _1966 : max(0.0, _1966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1978 = 1.0;
    }
    float _1989;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1980 = dot(vec4(cbModelParam._m0[40u]), vec4(_1935, _1936, _1937, 1.0));
        _1989 = dot(vec3(isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0)), isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0)), isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1980) ? 0.0 : (isnan(0.0) ? _1980 : max(0.0, _1980))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1989 = 1.0;
    }
    float _1993 = (_1989 * cbModelParam._m0[1u].x) + (_1978 * (1.0 - cbModelParam._m0[1u].x));
    float _2003 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1080);
    float _2004 = isnan(_2003) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2003 : min(cbModelParam._m0[25u].z, _2003));
    float _2086;
    float _2088;
    float _2090;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2053 = fma(_1235, cbModelParam._m0[13u].z, fma(_1231, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1227)) + cbModelParam._m0[13u].w;
        float _2057 = fma(_1235, cbModelParam._m0[14u].z, fma(_1231, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1227)) + cbModelParam._m0[14u].w;
        float _2061 = fma(_1235, cbModelParam._m0[15u].z, fma(_1231, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1227)) + cbModelParam._m0[15u].w;
        float _2064 = fma(_1175, cbModelParam._m0[13u].z, fma(_1174, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1173));
        float _2067 = fma(_1175, cbModelParam._m0[14u].z, fma(_1174, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1173));
        float _2070 = fma(_1175, cbModelParam._m0[15u].z, fma(_1174, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1173));
        float _2098;
        if (_2064 > 0.0)
        {
            _2098 = abs((1.0 - _2053) / _2064);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2064 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2053 + 1.0) / _2064);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2098 = frontier_phi_17_15_ladder;
        }
        float _2303;
        if (_2067 > 0.0)
        {
            _2303 = abs((1.0 - _2057) / _2067);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2067 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2057 + 1.0) / _2067);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2303 = frontier_phi_26_22_ladder;
        }
        float _2557;
        if (_2070 > 0.0)
        {
            _2557 = abs((1.0 - _2061) / _2070);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2070 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2061 + 1.0) / _2070);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2557 = frontier_phi_38_33_ladder;
        }
        float _2559 = isnan(_2303) ? _2098 : (isnan(_2098) ? _2303 : min(_2098, _2303));
        float _2560 = isnan(_2557) ? _2559 : (isnan(_2559) ? _2557 : min(_2559, _2557));
        float _2564 = (_2560 * _2064) + _2053;
        float _2565 = (_2560 * _2067) + _2057;
        float _2566 = (_2560 * _2070) + _2061;
        float _2567 = _2560 * 9.9999997473787516355514526367188e-05;
        float _2569 = (-1.0) - _2567;
        float _2571 = _2567 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2566 > _2571) || ((_2566 < _2569) || ((_2565 > _2571) || ((_2565 < _2569) || ((_2564 < _2569) || (_2564 > _2571))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2694 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2566, cbModelParam._m0[9u].z, fma(_2565, cbModelParam._m0[9u].y, _2564 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2566, cbModelParam._m0[10u].z, fma(_2565, cbModelParam._m0[10u].y, _2564 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2566, cbModelParam._m0[11u].z, fma(_2565, cbModelParam._m0[11u].y, _2564 * cbModelParam._m0[11u].x))), _2004);
            frontier_phi_16_38_ladder = _2694.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2694.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2694.x * cbModelParam._m0[1u].y;
        }
        _2086 = frontier_phi_16_38_ladder_2;
        _2088 = frontier_phi_16_38_ladder_1;
        _2090 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2074 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1173, _1174, _1175), _2004);
        _2086 = _2074.x * cbModelParam._m0[1u].y;
        _2088 = _2074.y * cbModelParam._m0[1u].y;
        _2090 = _2074.z * cbModelParam._m0[1u].y;
    }
    float _2094 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1080);
    float _2095 = isnan(_2094) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2094 : min(cbModelParam._m0[25u].w, _2094));
    float _2187;
    float _2189;
    float _2191;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2151 = fma(_1235, cbModelParam._m0[21u].z, fma(_1231, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1227)) + cbModelParam._m0[21u].w;
        float _2155 = fma(_1235, cbModelParam._m0[22u].z, fma(_1231, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1227)) + cbModelParam._m0[22u].w;
        float _2159 = fma(_1235, cbModelParam._m0[23u].z, fma(_1231, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1227)) + cbModelParam._m0[23u].w;
        float _2162 = fma(_1175, cbModelParam._m0[21u].z, fma(_1174, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1173));
        float _2165 = fma(_1175, cbModelParam._m0[22u].z, fma(_1174, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1173));
        float _2168 = fma(_1175, cbModelParam._m0[23u].z, fma(_1174, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1173));
        float _2308;
        if (_2162 > 0.0)
        {
            _2308 = abs((1.0 - _2151) / _2162);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2162 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2151 + 1.0) / _2162);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2308 = frontier_phi_28_24_ladder;
        }
        float _2584;
        if (_2165 > 0.0)
        {
            _2584 = abs((1.0 - _2155) / _2165);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2165 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2155 + 1.0) / _2165);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2584 = frontier_phi_40_35_ladder;
        }
        float _2797;
        if (_2168 > 0.0)
        {
            _2797 = abs((1.0 - _2159) / _2168);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2168 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2159 + 1.0) / _2168);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2797 = frontier_phi_49_46_ladder;
        }
        float _2799 = isnan(_2584) ? _2308 : (isnan(_2308) ? _2584 : min(_2308, _2584));
        float _2800 = isnan(_2797) ? _2799 : (isnan(_2799) ? _2797 : min(_2799, _2797));
        float _2804 = (_2800 * _2162) + _2151;
        float _2805 = (_2800 * _2165) + _2155;
        float _2806 = (_2800 * _2168) + _2159;
        float _2807 = _2800 * 9.9999997473787516355514526367188e-05;
        float _2808 = (-1.0) - _2807;
        float _2810 = _2807 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2806 > _2810) || ((_2806 < _2808) || ((_2805 > _2810) || ((_2805 < _2808) || ((_2804 < _2808) || (_2804 > _2810))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2806, cbModelParam._m0[17u].z, fma(_2805, cbModelParam._m0[17u].y, _2804 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2806, cbModelParam._m0[18u].z, fma(_2805, cbModelParam._m0[18u].y, _2804 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2806, cbModelParam._m0[19u].z, fma(_2805, cbModelParam._m0[19u].y, _2804 * cbModelParam._m0[19u].x))), _2095);
            frontier_phi_25_49_ladder = _3034.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3034.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3034.x * cbModelParam._m0[1u].z;
        }
        _2187 = frontier_phi_25_49_ladder_2;
        _2189 = frontier_phi_25_49_ladder_1;
        _2191 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2171 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1173, _1174, _1175), _2095);
        _2187 = _2171.x * cbModelParam._m0[1u].z;
        _2189 = _2171.y * cbModelParam._m0[1u].z;
        _2191 = _2171.z * cbModelParam._m0[1u].z;
    }
    float _2204 = (((_1198 * _1150) + _1199) * _1165) * ((cbModelParam._m0[1u].w * (_2187 - _2086)) + _2086);
    float _2206 = (((_1198 * _1152) + _1199) * _1165) * ((cbModelParam._m0[1u].w * (_2189 - _2088)) + _2088);
    float _2208 = (((_1198 * _1153) + _1199) * _1165) * ((cbModelParam._m0[1u].w * (_2191 - _2090)) + _2090);
    float _2211 = fma(_2208, cbSceneParam._m0[89u].z, fma(_2206, cbSceneParam._m0[89u].y, _2204 * cbSceneParam._m0[89u].x));
    float _2214 = fma(_2208, cbSceneParam._m0[90u].z, fma(_2206, cbSceneParam._m0[90u].y, _2204 * cbSceneParam._m0[90u].x));
    float _2217 = fma(_2208, cbSceneParam._m0[91u].z, fma(_2206, cbSceneParam._m0[91u].y, _2204 * cbSceneParam._m0[91u].x));
    uvec4 _2227 = floatBitsToUint(cbInstanceData._m0[_1093 + 5u]);
    uint _2229 = _2227.x * 14u;
    uint _2230 = _2229 + 13u;
    float _2237 = _1165 + (-1.0);
    float _2242 = (cbLight._m0[_2230].x * _2237) + 1.0;
    float _2243 = (cbLight._m0[_2230].y * _2237) + 1.0;
    float _2244 = (cbLight._m0[_2230].z * _2237) + 1.0;
    float _2245 = (cbLight._m0[_2230].w * _2237) + 1.0;
    uint _2246 = _2229 + 5u;
    float _2252 = isnan(1.0) ? _2243 : (isnan(_2243) ? 1.0 : min(_2243, 1.0));
    uint _2256 = _2229 + 4u;
    float _2262 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
    uint _2266 = _2229 | 1u;
    float _2277 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_958, _959, _960));
    float _2280 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_958, _959, _960));
    float _4596 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _4607 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2285 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * 0.3183098733425140380859375;
    float _2287 = (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0))) * 0.3183098733425140380859375;
    float _2294 = ((cbLight._m0[_2246].x * _2252) * _2287) + ((cbLight._m0[_2256].x * _2262) * _2285);
    float _2295 = ((_2252 * cbLight._m0[_2246].y) * _2287) + ((_2262 * cbLight._m0[_2256].y) * _2285);
    float _2296 = ((_2252 * cbLight._m0[_2246].z) * _2287) + ((_2262 * cbLight._m0[_2256].z) * _2285);
    uvec4 _2300 = floatBitsToUint(cbLight._m0[_2229 + 12u]);
    bool _2302 = _2300.x == 0u;
    float _2313;
    float _2315;
    float _2317;
    if (_2302)
    {
        _2313 = _2294;
        _2315 = _2295;
        _2317 = _2296;
    }
    else
    {
        uint _2321 = _2229 + 6u;
        float _2337 = (dot(vec3(cbLight._m0[_2229 + 2u].xyz), vec3(_958, _959, _960)) * 0.5) + 0.5;
        float _2338 = _2337 * _2337;
        float _4618 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2339 = isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0));
        float _2340 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2313 = (((cbLight._m0[_2321].x * 0.3183098733425140380859375) * _2339) * _2340) + _2294;
        _2315 = (((cbLight._m0[_2321].y * 0.3183098733425140380859375) * _2339) * _2340) + _2295;
        _2317 = (((cbLight._m0[_2321].z * 0.3183098733425140380859375) * _2339) * _2340) + _2296;
    }
    bool _2320 = _2300.y == 0u;
    float _2358;
    float _2360;
    float _2362;
    if (_2320)
    {
        _2358 = _2313;
        _2360 = _2315;
        _2362 = _2317;
    }
    else
    {
        uint _2528 = _2229 + 7u;
        float _2544 = (dot(vec3(cbLight._m0[_2229 + 3u].xyz), vec3(_958, _959, _960)) * 0.5) + 0.5;
        float _2545 = _2544 * _2544;
        float _4634 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
        float _2546 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
        float _2547 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2358 = (((cbLight._m0[_2528].x * 0.3183098733425140380859375) * _2546) * _2547) + _2313;
        _2360 = (((cbLight._m0[_2528].y * 0.3183098733425140380859375) * _2546) * _2547) + _2315;
        _2362 = (((cbLight._m0[_2528].z * 0.3183098733425140380859375) * _2546) * _2547) + _2317;
    }
    uint _2365 = _2229 + 8u;
    float _2378 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _1080) * 0.949999988079071044921875);
    float _2379 = _2378 * _2378;
    float _2380 = cbLight._m0[_2229].x + _1018;
    float _2381 = cbLight._m0[_2229].y + _1019;
    float _2382 = cbLight._m0[_2229].z + _1020;
    float _2386 = inversesqrt(dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382)));
    float _2387 = _2386 * _2380;
    float _2388 = _2386 * _2381;
    float _2389 = _2386 * _2382;
    float _2390 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2229].xyz));
    float _4650 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2393 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
    float _4661 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
    float _2394 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
    float _2395 = dot(vec3(_958, _959, _960), vec3(_2387, _2388, _2389));
    float _4672 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
    float _2398 = isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0));
    float _2399 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2387, _2388, _2389));
    float _4683 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
    float _2403 = _2379 * _2379;
    float _2407 = ((_2398 * _2398) * (_2403 + (-1.0))) + 1.0;
    float _2415 = exp2(log2(1.0 - (isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0)))) * 5.0);
    float _2416 = 0.959999978542327880859375 - _1147;
    float _2418 = 0.959999978542327880859375 - _1148;
    float _2419 = 0.959999978542327880859375 - _1149;
    float _2426 = 1.0 - _2379;
    float _2437 = (0.5 / (((_2394 * ((_2393 * _2426) + _2379)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2426) + _2379) * _2393))) * _2393;
    float _4694 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
    float _2439 = (isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0))) * (_2403 / ((_2407 * _2407) * 3.141590118408203125));
    uint _2450 = _2229 + 9u;
    float _2461 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _1080) * 0.949999988079071044921875);
    float _2462 = _2461 * _2461;
    float _2463 = cbLight._m0[_2266].x + _1018;
    float _2464 = cbLight._m0[_2266].y + _1019;
    float _2465 = cbLight._m0[_2266].z + _1020;
    float _2469 = inversesqrt(dot(vec3(_2463, _2464, _2465), vec3(_2463, _2464, _2465)));
    float _2470 = _2469 * _2463;
    float _2471 = _2469 * _2464;
    float _2472 = _2469 * _2465;
    float _2473 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2266].xyz));
    float _4705 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
    float _2476 = isnan(1.0) ? _4705 : (isnan(_4705) ? 1.0 : min(_4705, 1.0));
    float _2477 = dot(vec3(_958, _959, _960), vec3(_2470, _2471, _2472));
    float _4716 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2470, _2471, _2472));
    float _4727 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2462 * _2462;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2496 = exp2(log2(1.0 - (isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0)))) * 5.0);
    float _2503 = 1.0 - _2462;
    float _2513 = (0.5 / (((_2394 * ((_2476 * _2503) + _2462)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2503) + _2462) * _2476))) * _2476;
    float _4738 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
    float _2515 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    float _2525 = (((((_2496 * _2416) + _1150) * cbLight._m0[_2450].x) * _2515) * _2252) + (((((_2415 * _2416) + _1150) * cbLight._m0[_2365].x) * _2439) * _2262);
    float _2526 = (((((_2496 * _2418) + _1152) * cbLight._m0[_2450].y) * _2515) * _2252) + (((((_2415 * _2418) + _1152) * cbLight._m0[_2365].y) * _2439) * _2262);
    float _2527 = (((((_2496 * _2419) + _1153) * cbLight._m0[_2450].z) * _2515) * _2252) + (((((_2415 * _2419) + _1153) * cbLight._m0[_2365].z) * _2439) * _2262);
    float _2589;
    float _2591;
    float _2593;
    if (_2302)
    {
        _2589 = _2525;
        _2591 = _2526;
        _2593 = _2527;
    }
    else
    {
        uint _2595 = _2229 + 2u;
        uint _2599 = _2229 + 10u;
        float _2613 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2595].w)) * _1080) * 0.949999988079071044921875);
        float _2614 = _2613 * _2613;
        float _2615 = cbLight._m0[_2595].x + _1018;
        float _2616 = cbLight._m0[_2595].y + _1019;
        float _2617 = cbLight._m0[_2595].z + _1020;
        float _2621 = inversesqrt(dot(vec3(_2615, _2616, _2617), vec3(_2615, _2616, _2617)));
        float _2622 = _2621 * _2615;
        float _2623 = _2621 * _2616;
        float _2624 = _2621 * _2617;
        float _2625 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2595].xyz));
        float _4749 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
        float _2628 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2629 = dot(vec3(_958, _959, _960), vec3(_2622, _2623, _2624));
        float _4760 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0));
        float _2632 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2633 = dot(vec3(cbLight._m0[_2595].xyz), vec3(_2622, _2623, _2624));
        float _4771 = isnan(0.0) ? _2633 : (isnan(_2633) ? 0.0 : max(_2633, 0.0));
        float _2637 = _2614 * _2614;
        float _2641 = ((_2632 * _2632) * (_2637 + (-1.0))) + 1.0;
        float _2648 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
        float _2655 = 1.0 - _2614;
        float _2665 = (0.5 / (((_2394 * ((_2628 * _2655) + _2614)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2655) + _2614) * _2628))) * _2628;
        float _4782 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
        float _2667 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2637 / ((_2641 * _2641) * 3.141590118408203125));
        float _2668 = isnan(1.0) ? _2244 : (isnan(_2244) ? 1.0 : min(_2244, 1.0));
        _2589 = (((((_2648 * _2416) + _1150) * cbLight._m0[_2599].x) * _2667) * _2668) + _2525;
        _2591 = (((((_2648 * _2418) + _1152) * cbLight._m0[_2599].y) * _2667) * _2668) + _2526;
        _2593 = (((((_2648 * _2419) + _1153) * cbLight._m0[_2599].z) * _2667) * _2668) + _2527;
    }
    float _2703;
    float _2705;
    float _2707;
    if (_2320)
    {
        _2703 = _2589;
        _2705 = _2591;
        _2707 = _2593;
    }
    else
    {
        uint _2714 = _2229 + 3u;
        uint _2718 = _2229 + 11u;
        float _2732 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2714].w)) * _1080) * 0.949999988079071044921875);
        float _2733 = _2732 * _2732;
        float _2734 = cbLight._m0[_2714].x + _1018;
        float _2735 = cbLight._m0[_2714].y + _1019;
        float _2736 = cbLight._m0[_2714].z + _1020;
        float _2740 = inversesqrt(dot(vec3(_2734, _2735, _2736), vec3(_2734, _2735, _2736)));
        float _2741 = _2740 * _2734;
        float _2742 = _2740 * _2735;
        float _2743 = _2740 * _2736;
        float _2744 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2714].xyz));
        float _4798 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2747 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _2748 = dot(vec3(_958, _959, _960), vec3(_2741, _2742, _2743));
        float _4809 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0));
        float _2751 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2752 = dot(vec3(cbLight._m0[_2714].xyz), vec3(_2741, _2742, _2743));
        float _4820 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2756 = _2733 * _2733;
        float _2760 = ((_2751 * _2751) * (_2756 + (-1.0))) + 1.0;
        float _2767 = exp2(log2(1.0 - (isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0)))) * 5.0);
        float _2774 = 1.0 - _2733;
        float _2784 = (0.5 / (((_2394 * ((_2747 * _2774) + _2733)) + 9.9999999392252902907785028219223e-09) + (((_2394 * _2774) + _2733) * _2747))) * _2747;
        float _4831 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
        float _2786 = (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0))) * (_2756 / ((_2760 * _2760) * 3.141590118408203125));
        float _2787 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
        _2703 = (((((_2767 * _2416) + _1150) * cbLight._m0[_2718].x) * _2786) * _2787) + _2589;
        _2705 = (((((_2767 * _2418) + _1152) * cbLight._m0[_2718].y) * _2786) * _2787) + _2591;
        _2707 = (((((_2767 * _2419) + _1153) * cbLight._m0[_2718].z) * _2786) * _2787) + _2593;
    }
    float _2922;
    float _2924;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_2227.y == 0u)
    {
        float _2862 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2863 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2862;
        float _2864 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2862;
        float _2865 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2862;
        uvec4 _2877 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2878 = _2877.x;
        uint _2889 = uint((float(_2877.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1039) / _2878))) + floor(float(uint(cbSceneParam._m0[85u].x * _1038) / _2878)));
        float _2899 = (log2(_2865 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2900 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
        uint _2903 = uint(isnan(14.0) ? _2900 : (isnan(_2900) ? 14.0 : min(_2900, 14.0)));
        uvec4 _2908 = texelFetch(g_lightClusterGridBuffer, int(((_2903 << 2u) + (_2889 << 6u)) >> 2u));
        uint _2909 = _2908.x;
        uint _2910 = _2877.z;
        float _3039;
        float _3041;
        float _3043;
        float _3045;
        float _3047;
        float _3049;
        if (((((1u << ((_2910 >> 4u) & 15u)) + 4294967295u) & _2909) == 0u) || ((_2910 & 240u) == 0u))
        {
            _3039 = 0.0;
            _3041 = 0.0;
            _3043 = 0.0;
            _3045 = 0.0;
            _3047 = 0.0;
            _3049 = 0.0;
        }
        else
        {
            float _3040;
            float _3042;
            float _3044;
            float _3046;
            float _3048;
            float _3050;
            float _3199 = 0.0;
            float _3200 = 0.0;
            float _3201 = 0.0;
            float _3202 = 0.0;
            float _3203 = 0.0;
            float _3204 = 0.0;
            uint _3205 = 0u;
            uint _3214;
            bool _3215;
            for (;;)
            {
                _3214 = texelFetch(g_lightClassification, int((((_2903 << 5u) + (_2889 << 9u)) + (_3205 << 2u)) >> 2u)).x;
                _3215 = _3214 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3215)
                {
                    frontier_phi_66_pred = _3199;
                    frontier_phi_66_pred_1 = _3204;
                    frontier_phi_66_pred_2 = _3203;
                    frontier_phi_66_pred_3 = _3202;
                    frontier_phi_66_pred_4 = _3201;
                    frontier_phi_66_pred_5 = _3200;
                }
                else
                {
                    float _3344;
                    float _3345;
                    float _3346;
                    float _3347;
                    float _3348;
                    float _3349;
                    uint _3350;
                    _3344 = _3199;
                    _3345 = _3200;
                    _3346 = _3201;
                    _3347 = _3202;
                    _3348 = _3203;
                    _3349 = _3204;
                    _3350 = _3214;
                    float _3271;
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    for (;;)
                    {
                        uint _3354 = uint(findLSB(_3350)) + (_3205 << 5u);
                        uint _3351 = (_3350 + 4294967295u) & _3350;
                        uint _3356 = _3354 * 48u;
                        vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3356)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3356 + 3u)).x));
                        uint _3376 = (_3354 * 48u) + 4u;
                        vec4 _3389 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3376)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3376 + 3u)).x));
                        uint _3395 = (_3354 * 48u) + 8u;
                        vec3 _3406 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3395)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3395 + 2u)).x));
                        float _3410 = _3370.x - _2863;
                        float _3411 = _3370.y - _2864;
                        float _3412 = _3370.z - _2865;
                        float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                        float _3416 = inversesqrt(_3413);
                        float _3417 = _3416 * _3410;
                        float _3418 = _3416 * _3411;
                        float _3419 = _3416 * _3412;
                        float _3420 = dot(vec3(_1061, _1064, _1067), vec3(_3417, _3418, _3419));
                        float _3425 = 1.0 - (_3413 * _3370.w);
                        float _4857 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                        float _3426 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
                        float _3427 = sqrt(_3413) * _3389.w;
                        float _3430 = 1.39999997615814208984375 / (_3427 + 1.39999997615814208984375);
                        float _3431 = _3430 * _3430;
                        float _3434 = ((1.0 - _3431) * _3420) + _3431;
                        float _3437 = _3427 * _3427;
                        float _3441 = ((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3426) / ((_3437 * 0.699999988079071044921875) + 1.0);
                        float _3445 = (-0.0) - _2863;
                        float _3446 = (-0.0) - _2864;
                        float _3447 = (-0.0) - _2865;
                        float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                        float _3452 = _3451 * _3445;
                        float _3453 = _3451 * _3446;
                        float _3454 = _3451 * _3447;
                        float _3462 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                        float _3463 = 1.0 - _1181;
                        float _3470 = sqrt(1.0 - ((1.0 - (_3463 * _3463)) * (1.0 - (_3462 * _3462))));
                        float _3471 = _3470 * _3470;
                        float _3472 = _3471 * _3471;
                        float _3473 = _3452 + _3417;
                        float _3474 = _3453 + _3418;
                        float _3475 = _3454 + _3419;
                        float _3479 = inversesqrt(dot(vec3(_3473, _3474, _3475), vec3(_3473, _3474, _3475)));
                        float _3483 = dot(vec3(_1061, _1064, _1067), vec3(_3452, _3453, _3454));
                        float _4873 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3486 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                        float _3487 = dot(vec3(_1061, _1064, _1067), vec3(_3479 * _3473, _3479 * _3474, _3479 * _3475));
                        float _4884 = isnan(0.0) ? _3487 : (isnan(_3487) ? 0.0 : max(_3487, 0.0));
                        float _3490 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                        float _3494 = ((_3490 * _3490) * (_3472 + (-1.0))) + 1.0;
                        float _3495 = _3430 * _3471;
                        float _3496 = _3495 * _3495;
                        float _3499 = ((1.0 - _3496) * _3420) + _3496;
                        float _4895 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3500 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                        float _3501 = 1.0 - _3471;
                        float _3511 = (0.5 / (((_3500 * ((_3486 * _3501) + _3471)) + 9.9999999392252902907785028219223e-09) + (((_3500 * _3501) + _3471) * _3486))) * _3500;
                        float _4906 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3522 = (((_3472 * 3.1415927410125732421875) * (isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0)))) / ((_3494 * _3494) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125))) * _3426;
                        _3274 = (_3441 * _3389.x) + _3347;
                        _3275 = (_3441 * _3389.y) + _3348;
                        _3276 = (_3441 * _3389.z) + _3349;
                        _3271 = (_3522 * _3406.x) + _3344;
                        _3272 = (_3522 * _3406.y) + _3345;
                        _3273 = (_3522 * _3406.z) + _3346;
                        if (_3351 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3344 = _3271;
                            _3345 = _3272;
                            _3346 = _3273;
                            _3347 = _3274;
                            _3348 = _3275;
                            _3349 = _3276;
                            _3350 = _3351;
                        }
                    }
                    frontier_phi_66_pred = _3271;
                    frontier_phi_66_pred_1 = _3276;
                    frontier_phi_66_pred_2 = _3275;
                    frontier_phi_66_pred_3 = _3274;
                    frontier_phi_66_pred_4 = _3273;
                    frontier_phi_66_pred_5 = _3272;
                }
                _3040 = frontier_phi_66_pred;
                _3050 = frontier_phi_66_pred_1;
                _3048 = frontier_phi_66_pred_2;
                _3046 = frontier_phi_66_pred_3;
                _3044 = frontier_phi_66_pred_4;
                _3042 = frontier_phi_66_pred_5;
                uint _3206 = _3205 + 1u;
                if (_3206 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3199 = _3040;
                    _3200 = _3042;
                    _3201 = _3044;
                    _3202 = _3046;
                    _3203 = _3048;
                    _3204 = _3050;
                    _3205 = _3206;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3039 = _3040;
            _3041 = _3042;
            _3043 = _3044;
            _3045 = _3046;
            _3047 = _3048;
            _3049 = _3050;
        }
        uvec4 _3053 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3054 = _3053.z;
        uint _3056 = (_3054 >> 8u) & 15u;
        float _3167;
        float _3169;
        float _3171;
        float _3173;
        float _3175;
        float _3177;
        if (((4294967295u << _3056) & _2909) == 0u)
        {
            _3167 = _3039;
            _3169 = _3041;
            _3171 = _3043;
            _3173 = _3045;
            _3175 = _3047;
            _3177 = _3049;
        }
        else
        {
            float _3192 = inversesqrt(dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865)));
            float _3193 = _3192 * _2863;
            float _3194 = _3192 * _2864;
            float _3195 = _3192 * _2865;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3056 < ((_3054 >> 12u) & 15u))
            {
                float _3168;
                float _3170;
                float _3172;
                float _3174;
                float _3176;
                float _3178;
                float _3327 = _3039;
                float _3328 = _3041;
                float _3329 = _3043;
                float _3330 = _3045;
                float _3331 = _3047;
                float _3332 = _3049;
                uint _3333 = _3056;
                uint _3342;
                bool _3343;
                for (;;)
                {
                    _3342 = texelFetch(g_lightClassification, int((((_2903 << 5u) + (_2889 << 9u)) + (_3333 << 2u)) >> 2u)).x;
                    _3343 = _3342 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3343)
                    {
                        frontier_phi_77_pred = _3332;
                        frontier_phi_77_pred_1 = _3331;
                        frontier_phi_77_pred_2 = _3330;
                        frontier_phi_77_pred_3 = _3329;
                        frontier_phi_77_pred_4 = _3328;
                        frontier_phi_77_pred_5 = _3327;
                    }
                    else
                    {
                        float _3536;
                        float _3537;
                        float _3538;
                        float _3539;
                        float _3540;
                        float _3541;
                        float _3830;
                        float _3831;
                        float _3832;
                        float _3833;
                        float _3834;
                        float _3835;
                        float _3549 = _3327;
                        float _3550 = _3328;
                        float _3551 = _3329;
                        float _3552 = _3330;
                        float _3553 = _3331;
                        float _3554 = _3332;
                        uint _3555 = _3342;
                        uint _3556;
                        vec4 _3581;
                        float _3582;
                        vec4 _3597;
                        vec3 _3609;
                        vec4 _3625;
                        vec4 _3640;
                        float _3686;
                        bool _3687;
                        for (;;)
                        {
                            uint _3566 = ((_3333 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3555));
                            _3556 = (_3555 + 4294967295u) & _3555;
                            uint _3568 = _3566 * 40u;
                            _3581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3568 + 3u)).x));
                            _3582 = _3581.w;
                            uint _3584 = (_3566 * 40u) + 4u;
                            _3597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3584 + 3u)).x));
                            uint _3599 = (_3566 * 40u) + 8u;
                            _3609 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3599)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3599 + 2u)).x));
                            uint _3612 = (_3566 * 40u) + 16u;
                            _3625 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3612)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3612 + 3u)).x));
                            uint _3627 = (_3566 * 40u) + 20u;
                            _3640 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3627)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3627 + 3u)).x));
                            uint _3642 = (_3566 * 40u) + 24u;
                            vec4 _3655 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3642)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3642 + 3u)).x));
                            uint _3661 = (_3566 * 40u) + 28u;
                            vec4 _3674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3661 + 3u)).x));
                            _3686 = fma(_2865, _3674.z, fma(_2864, _3674.y, _3674.x * _2863)) + _3674.w;
                            _3687 = !((fma(_2865, _3655.z, fma(_2864, _3655.y, _3655.x * _2863)) + _3655.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3687)
                            {
                                float _3714 = _3581.x - _2863;
                                float _3715 = _3581.y - _2864;
                                float _3716 = _3581.z - _2865;
                                float _3717 = dot(vec3(_3714, _3715, _3716), vec3(_3714, _3715, _3716));
                                float _3720 = inversesqrt(_3717);
                                float _3721 = _3720 * _3714;
                                float _3722 = _3720 * _3715;
                                float _3723 = _3720 * _3716;
                                float _3727 = 1.0 - (_3717 / (_3582 * _3582));
                                float _4917 = isnan(0.0) ? _3727 : (isnan(_3727) ? 0.0 : max(_3727, 0.0));
                                float _3728 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3732 = sqrt(_3717) * _3597.w;
                                float _3734 = 1.39999997615814208984375 / (_3732 + 1.39999997615814208984375);
                                float _3735 = _3734 * _3734;
                                float _3738 = ((1.0 - _3735) * dot(vec3(_3721, _3722, _3723), vec3(_1061, _1064, _1067))) + _3735;
                                float _3741 = _3732 * _3732;
                                float _3745 = (fma(_2865, _3625.z, fma(_2864, _3625.y, _3625.x * _2863)) + _3625.w) / _3686;
                                float _3746 = (fma(_2865, _3640.z, fma(_2864, _3640.y, _3640.x * _2863)) + _3640.w) / _3686;
                                float _3750 = 1.0 - dot(vec2(_3745, _3746), vec2(_3745, _3746));
                                float _4933 = isnan(0.0) ? _3750 : (isnan(_3750) ? 0.0 : max(_3750, 0.0));
                                float _3751 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                                float _3752 = _3751 * (((isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0))) * _3728) / ((_3741 * 0.699999988079071044921875) + 1.0));
                                float _3764 = exp2(log2(1.0 / ((_3741 * 3.5) + 5.0)) * 0.25);
                                float _3765 = 1.0 - _1181;
                                float _3772 = sqrt(1.0 - ((1.0 - (_3765 * _3765)) * (1.0 - (_3764 * _3764))));
                                float _3773 = _3772 * _3772;
                                float _3774 = _3773 * _3773;
                                float _3775 = _3721 - _3193;
                                float _3776 = _3722 - _3194;
                                float _3777 = _3723 - _3195;
                                float _3781 = inversesqrt(dot(vec3(_3775, _3776, _3777), vec3(_3775, _3776, _3777)));
                                float _3785 = dot(vec3(_1061, _1064, _1067), vec3((-0.0) - _3193, (-0.0) - _3194, (-0.0) - _3195));
                                float _4944 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3788 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                                float _3789 = dot(vec3(_1061, _1064, _1067), vec3(_3781 * _3775, _3781 * _3776, _3781 * _3777));
                                float _4955 = isnan(0.0) ? _3789 : (isnan(_3789) ? 0.0 : max(_3789, 0.0));
                                float _3792 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                                float _3796 = ((_3792 * _3792) * (_3774 + (-1.0))) + 1.0;
                                float _3797 = _3734 * _3773;
                                float _3798 = _3797 * _3797;
                                float _3804 = ((1.0 - _3798) * dot(vec3(_1061, _1064, _1067), vec3(_3721, _3722, _3723))) + _3798;
                                float _4966 = isnan(0.0) ? _3804 : (isnan(_3804) ? 0.0 : max(_3804, 0.0));
                                float _3805 = isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0));
                                float _3806 = 1.0 - _3773;
                                float _3816 = (0.5 / (((_3805 * ((_3788 * _3806) + _3773)) + 9.9999999392252902907785028219223e-09) + (((_3805 * _3806) + _3773) * _3788))) * _3805;
                                float _4977 = isnan(0.0) ? _3816 : (isnan(_3816) ? 0.0 : max(_3816, 0.0));
                                float _3826 = (_3751 * _3728) * (((_3774 * 3.1415927410125732421875) * (isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0)))) / ((_3796 * _3796) * ((_3741 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3752 * _3597.y;
                                frontier_phi_83_pred_1 = _3752 * _3597.x;
                                frontier_phi_83_pred_2 = _3826 * _3609.z;
                                frontier_phi_83_pred_3 = _3826 * _3609.y;
                                frontier_phi_83_pred_4 = _3826 * _3609.x;
                                frontier_phi_83_pred_5 = _3752 * _3597.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3834 = frontier_phi_83_pred;
                            _3833 = frontier_phi_83_pred_1;
                            _3832 = frontier_phi_83_pred_2;
                            _3831 = frontier_phi_83_pred_3;
                            _3830 = frontier_phi_83_pred_4;
                            _3835 = frontier_phi_83_pred_5;
                            _3539 = _3833 + _3552;
                            _3540 = _3834 + _3553;
                            _3541 = _3835 + _3554;
                            _3536 = _3830 + _3549;
                            _3537 = _3831 + _3550;
                            _3538 = _3832 + _3551;
                            if (_3556 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3538;
                                _3552 = _3539;
                                _3553 = _3540;
                                _3554 = _3541;
                                _3555 = _3556;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3541;
                        frontier_phi_77_pred_1 = _3540;
                        frontier_phi_77_pred_2 = _3539;
                        frontier_phi_77_pred_3 = _3538;
                        frontier_phi_77_pred_4 = _3537;
                        frontier_phi_77_pred_5 = _3536;
                    }
                    _3178 = frontier_phi_77_pred;
                    _3176 = frontier_phi_77_pred_1;
                    _3174 = frontier_phi_77_pred_2;
                    _3172 = frontier_phi_77_pred_3;
                    _3170 = frontier_phi_77_pred_4;
                    _3168 = frontier_phi_77_pred_5;
                    uint _3334 = _3333 + 1u;
                    if (_3334 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3327 = _3168;
                        _3328 = _3170;
                        _3329 = _3172;
                        _3330 = _3174;
                        _3331 = _3176;
                        _3332 = _3178;
                        _3333 = _3334;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3172;
                frontier_phi_58_59_ladder_1 = _3178;
                frontier_phi_58_59_ladder_2 = _3176;
                frontier_phi_58_59_ladder_3 = _3174;
                frontier_phi_58_59_ladder_4 = _3170;
                frontier_phi_58_59_ladder_5 = _3168;
            }
            else
            {
                frontier_phi_58_59_ladder = _3043;
                frontier_phi_58_59_ladder_1 = _3049;
                frontier_phi_58_59_ladder_2 = _3047;
                frontier_phi_58_59_ladder_3 = _3045;
                frontier_phi_58_59_ladder_4 = _3041;
                frontier_phi_58_59_ladder_5 = _3039;
            }
            _3167 = frontier_phi_58_59_ladder_5;
            _3169 = frontier_phi_58_59_ladder_4;
            _3171 = frontier_phi_58_59_ladder;
            _3173 = frontier_phi_58_59_ladder_3;
            _3175 = frontier_phi_58_59_ladder_2;
            _3177 = frontier_phi_58_59_ladder_1;
        }
        float _3182 = isnan(1.0) ? _1165 : (isnan(_1165) ? 1.0 : min(_1165, 1.0));
        _2922 = (_3182 * _3173) + _2358;
        _2924 = (_3182 * _3175) + _2360;
        _2926 = (_3182 * _3177) + _2362;
        _2928 = ((_3167 * _1150) * _3182) + _2703;
        _2930 = ((_3169 * _1152) * _3182) + _2705;
        _2932 = ((_3171 * _1153) * _3182) + _2707;
    }
    else
    {
        _2922 = _2358;
        _2924 = _2360;
        _2926 = _2362;
        _2928 = _2703;
        _2930 = _2705;
        _2932 = _2707;
    }
    uint _2938 = _1094 + uint(cbMatDynParam._m0[0u].w);
    float _2944 = (((((cbMtdParam._m0[22u].x * _862.x) * cbMtdParam._m0[32u].x) * _883) + _634) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2938].x;
    float _2945 = (((((cbMtdParam._m0[22u].y * _862.y) * cbMtdParam._m0[32u].x) * _883) + _635) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2938].y;
    float _2946 = (((((cbMtdParam._m0[22u].z * _862.z) * cbMtdParam._m0[32u].x) * _883) + _636) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2938].z;
    float _4993 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
    float _5004 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
    float _5015 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
    float _2963 = (((isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0))) * (_2922 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1165))) + ((_2928 + ((isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0))) * _1993)) * cbPerFrame._m0[3u].x)) + _2944;
    float _2965 = (_2945 + ((_2930 + ((isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0))) * _1993)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0))) * (_2924 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1165)));
    float _2967 = (_2946 + ((_2932 + ((isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0))) * _1993)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0))) * (_2926 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1165)));
    float _2968 = isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0));
    float _2969 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
    float _2970 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
    float _2976 = cbMtdParam._m0[2u].x * _2944;
    float _2977 = cbMtdParam._m0[2u].y * _2945;
    float _2978 = cbMtdParam._m0[2u].z * _2946;
    float _5041 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2980 = isnan(1.0) ? _5041 : (isnan(_5041) ? 1.0 : min(_5041, 1.0));
    uint _2981 = _1093 + 6u;
    float _2989 = _1038 / cbSceneParam._m0[86u].x;
    float _2990 = _1039 / cbSceneParam._m0[86u].y;
    vec4 _3004 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2989, _2990, (log2((isnan(cbSceneParam._m0[77u].w) ? _981 : (isnan(_981) ? cbSceneParam._m0[77u].w : min(_981, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3006 = _3004.x;
    float _3007 = _3004.y;
    float _3008 = _3004.z;
    float _3009 = _3004.w;
    float _3101;
    float _3103;
    float _3105;
    float _3107;
    if (_981 > cbSceneParam._m0[78u].w)
    {
        float _3064 = isnan(_981) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _981 : min(cbSceneParam._m0[80u].w, _981));
        float _3065 = _3064 / _981;
        float _3076 = _3065 * _1011;
        float _3077 = _1012 * _3065;
        float _3078 = (-0.0) - _3077;
        float _3079 = _3065 * _1013;
        float _3081 = (cbSceneParam._m0[77u].w * _3078) / _3064;
        float _3082 = _3081 + cbSceneParam._m0[79u].w;
        float _3083 = cbSceneParam._m0[79u].w - _3077;
        float _3089 = sqrt(((_3076 * _3076) + (_3077 * _3077)) + (_3079 * _3079));
        float _3092 = (1.0 - (cbSceneParam._m0[77u].w / _3064)) * _3089;
        float _3097 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3099 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3284;
        if (abs((_3078 - _3081) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3284 = ((((_3082 > 0.0) ? exp2(_3097 * _3082) : (2.0 - exp2(_3099 * _3082))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3092;
        }
        else
        {
            float _3228 = 1.0 / cbSceneParam._m0[80u].x;
            float _3229 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : max(_3082, _3083));
            float _3230 = isnan(_3083) ? _3082 : (isnan(_3082) ? _3083 : min(_3082, _3083));
            float _3239 = isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : min(_3229, 0.0));
            float _3240 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : min(_3230, 0.0));
            _3284 = ((abs(_3089 / _3078) * cbSceneParam._m0[80u].y) * ((((_3239 - _3240) * 2.0) - ((exp2(_3097 * (isnan(0.0) ? _3229 : (isnan(_3229) ? 0.0 : max(_3229, 0.0)))) - exp2(_3097 * (isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))))) * _3228)) - ((exp2(_3099 * _3239) - exp2(_3099 * _3240)) * _3228))) + (_3092 * cbSceneParam._m0[80u].z);
        }
        vec4 _3286 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2989, _2990, 1.0), 0.0);
        float _3295 = exp2((_3284 * (-1.44269502162933349609375)) * (1.0 - _3286.w));
        float _3296 = log2(_3295);
        float _3312 = log2(_3009);
        _3101 = (exp2(_3312 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].x)) * _3286.x) / cbSceneParam._m0[78u].x)) + _3006;
        _3103 = (exp2(_3312 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].y)) * _3286.y) / cbSceneParam._m0[78u].y)) + _3007;
        _3105 = (exp2(_3312 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3296 * cbSceneParam._m0[78u].z)) * _3286.z) / cbSceneParam._m0[78u].z)) + _3008;
        _3107 = _3295 * _3009;
    }
    else
    {
        _3101 = _3006;
        _3103 = _3007;
        _3105 = _3008;
        _3107 = _3009;
    }
    bool _3322;
    vec4 _3116;
    vec4 _3138;
    float _3140;
    float _3144;
    float _3145;
    float _3146;
    float _3149;
    float _3152;
    float _3155;
    float _3156;
    bool _3166;
    for (;;)
    {
        _3116 = cbMatDynParam._m0[0u];
        float _3118 = roundEven(_3116.y);
        bool _3119 = _3118 == 3.0;
        float _3120 = log2(_3107);
        float _3124 = exp2(_3120 * cbSceneParam._m0[78u].x);
        float _3125 = exp2(_3120 * cbSceneParam._m0[78u].y);
        float _3126 = exp2(_3120 * cbSceneParam._m0[78u].z);
        float _3127 = _3124 * _2968;
        float _3128 = _3125 * _2969;
        float _3129 = _3126 * _2970;
        float _3136 = _1027 + (-0.5);
        _3138 = cbMtdParam._m0[1u];
        _3140 = _3138.y * _3136;
        float _3143 = (_3118 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3144 = _3143 * (_3119 ? _3127 : (_3127 + (cbSceneParam._m0[72u].w * _3101)));
        _3145 = _3143 * (_3119 ? _3128 : (_3128 + (cbSceneParam._m0[72u].w * _3103)));
        _3146 = _3143 * (_3119 ? _3129 : (_3129 + (cbSceneParam._m0[72u].w * _3105)));
        _3149 = ((_2976 * _2980) * _3124) * _3143;
        _3152 = ((_2977 * _2980) * _3125) * _3143;
        _3155 = ((_2978 * _2980) * _3126) * _3143;
        _3156 = _3136 * 0.999000012874603271484375;
        _3166 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3166)
        {
            if ((cbInstanceData._m0[_1093 + 7u].x + _3156) < 0.5)
            {
                _3322 = true;
                break;
            }
        }
        uint _3263 = _1094 + uint(_3116.w);
        if ((cbInstanceData._m0[_3263].w < 1.0) && ((cbInstanceData._m0[_3263].w + _3156) < 0.5))
        {
            _3322 = true;
            break;
        }
        if ((_3140 + 1.0) < _3138.x)
        {
            _3322 = true;
            break;
        }
        _3322 = false;
        break;
    }
    float _3527;
    if (_3322)
    {
        discard_state = true;
        _3527 = 0.0;
    }
    else
    {
        _3527 = cbInstanceData._m0[_2981].w;
    }
    SV_Target.x = _3144;
    SV_Target.y = _3145;
    SV_Target.z = _3146;
    SV_Target.w = _3527;
    SV_Target_1.x = _3149;
    SV_Target_1.y = _3152;
    SV_Target_1.z = _3155;
    SV_Target_1.w = cbInstanceData._m0[_2981].w;
    discard_exit();
}


