#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1752;
float _4161;
float _4162;
float _4163;
float _4164;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _272 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _285 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_272 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _290 = _285.z;
    float _291 = _285.w;
    vec4 _313 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _272) + cbTextureTilingScale._m0[11u].w));
    float _318 = _313.w;
    float _330 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _290) * exp2(log2(1.0 - _318) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _331 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _332 = isnan(1.0) ? _331 : (isnan(_331) ? 1.0 : min(_331, 1.0));
    vec4 _346 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _272) + cbTextureTilingScale._m0[2u].w));
    float _356 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _364 = (_356 - (((_346.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _356))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4183 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _365 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _367 = _332 - (_365 * _332);
    float _368 = isnan(0.0) ? _367 : (isnan(_367) ? 0.0 : max(_367, 0.0));
    vec4 _382 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _385 = _382.y;
    float _386 = _385 * (isnan(1.0) ? _368 : (isnan(_368) ? 1.0 : min(_368, 1.0)));
    float _395 = exp2(log2(cbMtdParam._m0[32u].w * _318) * cbMtdParam._m0[31u].z);
    float _397 = _395 - (_365 * _395);
    float _398 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    float _399 = isnan(1.0) ? _398 : (isnan(_398) ? 1.0 : min(_398, 1.0));
    float _410 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_291) * 4.5));
    float _419 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _290) * _410)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _420 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _421 = isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0));
    float _432 = exp2(log2((1.0 - (((_410 * _410) * _290) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _433 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _437 = (((isnan(1.0) ? _433 : (isnan(_433) ? 1.0 : min(_433, 1.0))) - _291) * _385) + _291;
    vec4 _449 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _272) + cbTextureTilingScale._m0[5u].w));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = cbMtdParam._m0[12u].x;
    _210[0u] = cbMtdParam._m0[12u].y;
    _211[0u] = cbMtdParam._m0[12u].z;
    _209[1u] = cbMtdParam._m0[13u].x;
    _210[1u] = cbMtdParam._m0[13u].y;
    _211[1u] = cbMtdParam._m0[13u].z;
    _209[2u] = cbMtdParam._m0[14u].x;
    _210[2u] = cbMtdParam._m0[14u].y;
    _211[2u] = cbMtdParam._m0[14u].z;
    _209[3u] = cbMtdParam._m0[15u].x;
    _210[3u] = cbMtdParam._m0[15u].y;
    _211[3u] = cbMtdParam._m0[15u].z;
    _209[4u] = cbMtdParam._m0[16u].x;
    _210[4u] = cbMtdParam._m0[16u].y;
    _211[4u] = cbMtdParam._m0[16u].z;
    _209[5u] = cbMtdParam._m0[11u].x;
    _210[5u] = cbMtdParam._m0[11u].y;
    _211[5u] = cbMtdParam._m0[11u].z;
    float _517 = (_382.x + (-0.02500000037252902984619140625)) * 8.0;
    float _519 = roundEven(_517);
    float _520 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    uint _523 = uint(int(isnan(5.0) ? _520 : (isnan(_520) ? 5.0 : min(_520, 5.0))));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = 1.0;
    _206[0u] = 1.0;
    _207[0u] = 1.0;
    _205[1u] = cbMtdParam._m0[23u].x;
    _206[1u] = cbMtdParam._m0[23u].y;
    _207[1u] = cbMtdParam._m0[23u].z;
    _205[2u] = cbMtdParam._m0[21u].x;
    _206[2u] = cbMtdParam._m0[21u].y;
    _207[2u] = cbMtdParam._m0[21u].z;
    _205[3u] = cbMtdParam._m0[19u].x;
    _206[3u] = cbMtdParam._m0[19u].y;
    _207[3u] = cbMtdParam._m0[19u].z;
    _205[4u] = cbMtdParam._m0[18u].x;
    _206[4u] = cbMtdParam._m0[18u].y;
    _207[4u] = cbMtdParam._m0[18u].z;
    _205[5u] = cbMtdParam._m0[17u].x;
    _206[5u] = cbMtdParam._m0[17u].y;
    _207[5u] = cbMtdParam._m0[17u].z;
    float _609 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _610 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    uint _612 = uint(int(isnan(5.0) ? _610 : (isnan(_610) ? 5.0 : min(_610, 5.0))));
    float _208[6];
    _208[0u] = 1.0;
    _208[1u] = cbMtdParam._m0[23u].w;
    _208[2u] = cbMtdParam._m0[21u].w;
    _208[3u] = cbMtdParam._m0[19u].w;
    _208[4u] = cbMtdParam._m0[18u].w;
    _208[5u] = cbMtdParam._m0[17u].w;
    float _649 = ((((_209[_523] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_205[_612] - _209[_523])) * _208[_523])) * _385) + cbMtdParam._m0[10u].x) * _449.x;
    float _650 = ((((_210[_523] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_206[_612] - _210[_523])) * _208[_523])) * _385) + cbMtdParam._m0[10u].y) * _449.y;
    float _651 = ((((_211[_523] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_207[_612] - _211[_523])) * _208[_523])) * _385) + cbMtdParam._m0[10u].z) * _449.z;
    vec4 _663 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _272) + cbTextureTilingScale._m0[1u].w));
    float _674 = cbMtdParam._m0[9u].x * _663.x;
    float _675 = cbMtdParam._m0[9u].y * _663.y;
    float _676 = cbMtdParam._m0[9u].z * _663.z;
    float _683 = ((_674 - _649) * _437) + _649;
    float _684 = ((_675 - _650) * _437) + _650;
    float _685 = ((_676 - _651) * _437) + _651;
    vec4 _697 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _272) + cbTextureTilingScale._m0[6u].w));
    float _717 = (((cbMtdParam._m0[20u].x * _697.x) - _683) * _421) + _683;
    float _718 = (((cbMtdParam._m0[20u].y * _697.y) - _684) * _421) + _684;
    float _719 = (((cbMtdParam._m0[20u].z * _697.z) - _685) * _421) + _685;
    vec4 _731 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _272) + cbTextureTilingScale._m0[9u].w));
    float _751 = (((cbMtdParam._m0[29u].x * _731.x) - _717) * _399) + _717;
    float _752 = (((cbMtdParam._m0[29u].y * _731.y) - _718) * _399) + _718;
    float _753 = (((cbMtdParam._m0[29u].z * _731.z) - _719) * _399) + _719;
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[30u].x;
    _203[0u] = cbMtdParam._m0[30u].y;
    _204[0u] = cbMtdParam._m0[30u].z;
    _202[1u] = cbMtdParam._m0[28u].x;
    _203[1u] = cbMtdParam._m0[28u].y;
    _204[1u] = cbMtdParam._m0[28u].z;
    _202[2u] = cbMtdParam._m0[27u].x;
    _203[2u] = cbMtdParam._m0[27u].y;
    _204[2u] = cbMtdParam._m0[27u].z;
    _202[3u] = cbMtdParam._m0[26u].x;
    _203[3u] = cbMtdParam._m0[26u].y;
    _204[3u] = cbMtdParam._m0[26u].z;
    _202[4u] = cbMtdParam._m0[25u].x;
    _203[4u] = cbMtdParam._m0[25u].y;
    _204[4u] = cbMtdParam._m0[25u].z;
    _202[5u] = cbMtdParam._m0[24u].x;
    _203[5u] = cbMtdParam._m0[24u].y;
    _204[5u] = cbMtdParam._m0[24u].z;
    float _826 = _202[_523] * _385;
    float _827 = _203[_523] * _385;
    float _828 = _204[_523] * _385;
    float _829 = _826 + ((_313.x * 4.5) * (((_674 - _751) * _386) + _751));
    float _830 = _827 + ((_313.y * 4.5) * (((_675 - _752) * _386) + _752));
    float _831 = _828 + ((_313.z * 4.5) * (((_676 - _753) * _386) + _753));
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[37u].w;
    _198[0u] = cbMtdParam._m0[38u].x;
    _197[1u] = cbMtdParam._m0[39u].w;
    _198[1u] = cbMtdParam._m0[40u].x;
    _197[2u] = cbMtdParam._m0[40u].y;
    _198[2u] = cbMtdParam._m0[40u].z;
    _197[3u] = cbMtdParam._m0[40u].w;
    _198[3u] = cbMtdParam._m0[41u].x;
    _197[4u] = cbMtdParam._m0[41u].y;
    _198[4u] = cbMtdParam._m0[41u].z;
    float _864 = roundEven(5.0 - _517);
    float _865 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _866 = isnan(4.0) ? _865 : (isnan(_865) ? 4.0 : min(_865, 4.0));
    float _868 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    uint _870 = uint(int(isnan(4.0) ? _868 : (isnan(_868) ? 4.0 : min(_868, 4.0))));
    float _879 = ((cbMtdParam._m0[42u].z - _198[_870]) * _437) + _198[_870];
    float _887 = ((cbMtdParam._m0[43u].x - _879) * _421) + _879;
    float _892 = ((cbMtdParam._m0[43u].z - _887) * _399) + _887;
    float _897 = ((cbMtdParam._m0[39u].z - _892) * _386) + _892;
    vec4 _913 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _272) + cbTextureTilingScale._m0[7u].w));
    float _915 = _913.x;
    float _916 = _913.y;
    float _918 = _913.z + _197[_870];
    vec4 _930 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _272) + cbTextureTilingScale._m0[10u].w));
    float _938 = (((cbMtdParam._m0[42u].y - _918) + _930.z) * _437) + _918;
    vec4 _950 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _272) + cbTextureTilingScale._m0[12u].w));
    float _958 = (((cbMtdParam._m0[42u].w - _938) + _950.z) * _421) + _938;
    float _964 = ((((_290 * 2.0) * _958) - _958) * cbMtdParam._m0[34u].x) + _958;
    vec4 _976 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _272) + cbTextureTilingScale._m0[13u].w));
    float _984 = (((_976.z + cbMtdParam._m0[43u].y) - _964) * _399) + _964;
    float _988 = (((cbMtdParam._m0[39u].y + _346.z) - _984) * _386) + _984;
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1052 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1021 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1025 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1069 = (-0.0) - ((_1025 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1073 = (_1025 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1074 = isnan(_1073) ? _1069 : (isnan(_1069) ? _1073 : min(_1069, _1073));
    float _4279 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1075 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _1101 = ((_930.x - _915) * _437) + _915;
    float _1102 = ((_930.y - _916) * _437) + _916;
    float _1107 = ((_950.x - _1101) * _421) + _1101;
    float _1108 = ((_950.y - _1102) * _421) + _1102;
    float _1113 = ((_976.x - _1107) * _399) + _1107;
    float _1114 = ((_976.y - _1108) * _399) + _1108;
    float _1123 = ((((_346.x - _1113) * _386) + _1113) * 2.0) + (-1.0);
    float _1124 = ((((_346.y - _1114) * _386) + _1114) * 2.0) + (-1.0);
    float _1125 = dot(vec2(_1123, _1124), vec2(_1123, _1124));
    float _4290 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1130 = sqrt(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))));
    float _1133 = (cbMtdParam._m0[34u].z * ((_285.x * 2.0) + (-1.0))) + _1123;
    float _1134 = (cbMtdParam._m0[34u].z * ((_285.y * 2.0) + (-1.0))) + _1124;
    float _1137 = fma(_1130, _251 * NORMAL.x, fma(_1134, _258 * TANGENT.x, (_244 * _236) * _1133));
    float _1140 = fma(_1130, _251 * NORMAL.y, fma(_1134, _258 * TANGENT.y, (_244 * _237) * _1133));
    float _1143 = fma(_1130, _251 * NORMAL.z, fma(_1134, _258 * TANGENT.z, (_244 * _238) * _1133));
    float _1147 = inversesqrt(dot(vec3(_1137, _1140, _1143), vec3(_1137, _1140, _1143)));
    float _1148 = _1147 * _1137;
    float _1149 = _1147 * _1140;
    float _1150 = _1147 * _1143;
    float _4301 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _1151 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _4312 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4323 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4334 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4345 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _1155 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _1171 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1201 = cbSceneParam._m0[71u].x - (_1021 / _1191);
    float _1202 = cbSceneParam._m0[71u].y - (_1025 / _1191);
    float _1203 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1191);
    float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
    float _1208 = _1201 * _1207;
    float _1209 = _1202 * _1207;
    float _1210 = _1203 * _1207;
    vec4 _1215 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1217 = _1215.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1435 = sqrt(((_1201 * _1201) + (_1202 * _1202)) + (_1203 * _1203));
        float _1441 = (cbMatDynParam._m0[5u].x * _1435) + cbMatDynParam._m0[5u].y;
        float _4356 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
        float _1446 = (cbMatDynParam._m0[5u].z * _1435) + cbMatDynParam._m0[5u].w;
        float _4367 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0))) - _1442)) + _1442) < ((_1217 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1228 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1229 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1231 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1233 = _1231.w;
    float _1251 = fma(_1150, cbSceneParam._m0[5u].z, fma(_1149, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1148));
    float _1254 = fma(_1150, cbSceneParam._m0[6u].z, fma(_1149, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1148));
    float _1257 = fma(_1150, cbSceneParam._m0[7u].z, fma(_1149, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1148));
    vec4 _1259 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1270 = (((_1259.y - _1151) + (_1259.w * _1151)) * cbMtdParam._m0[3u].x) + _1151;
    uint _1283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1284 = _1283 + 9u;
    uint _1285 = _1284 + uint(cbMatDynParam._m0[0u].w);
    float _1291 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) * cbInstanceData._m0[_1285].x;
    float _1292 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0)))) * cbInstanceData._m0[_1285].y;
    float _1293 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * cbInstanceData._m0[_1285].z;
    float _4378 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _1294 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
    float _4389 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
    float _1295 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
    float _4400 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _1296 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    vec4 _1297 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1302 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1313 = (((_1302.x - _1155) + (_1302.w * _1155)) * cbMtdParam._m0[3u].x) + _1155;
    float _1326 = (cbMtdParam._m0[3u].x * (((_1294 * _1233) - _1294) + _1297.x)) + _1294;
    float _1327 = (cbMtdParam._m0[3u].x * (((_1295 * _1233) - _1295) + _1297.y)) + _1295;
    float _1328 = (cbMtdParam._m0[3u].x * (((_1296 * _1233) - _1296) + _1297.z)) + _1296;
    float _1329 = 1.0 - _1313;
    float _1330 = _1329 * _1326;
    float _1331 = _1329 * _1327;
    float _1332 = _1329 * _1328;
    float _1337 = (_1326 + (-0.039999999105930328369140625)) * _1313;
    float _1338 = (_1327 + (-0.039999999105930328369140625)) * _1313;
    float _1339 = (_1328 + (-0.039999999105930328369140625)) * _1313;
    float _1340 = _1337 + 0.039999999105930328369140625;
    float _1342 = _1338 + 0.039999999105930328369140625;
    float _1343 = _1339 + 0.039999999105930328369140625;
    vec4 _1352 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1228, cbSceneParam._m0[86u].y * _1229));
    float _1355 = _1352.x * TEXCOORD_5.w;
    float _1356 = dot(vec3(_1148, _1149, _1150), vec3(_1208, _1209, _1210));
    float _1359 = _1356 * 2.0;
    float _1363 = (_1359 * _1148) - _1208;
    float _1364 = (_1359 * _1149) - _1209;
    float _1365 = (_1359 * _1150) - _1210;
    float _1369 = abs(dot(vec3(_1208, _1209, _1210), vec3(_1148, _1149, _1150)));
    float _4411 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _1371 = sqrt(_1270);
    float _1382 = exp2((_1371 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1371 * 3.0));
    float _1388 = (1.0 - _1382) * ((_1371 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1389 = _1382 * _1371;
    float _1417 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1425 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1751;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1478 = fma(_1425, cbModelParam._m0[26u].z, fma(_1421, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1417));
        float _1482 = fma(_1425, cbModelParam._m0[27u].z, fma(_1421, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1417));
        float _1486 = fma(_1425, cbModelParam._m0[28u].z, fma(_1421, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1417));
        float _1510 = _1417 + _1148;
        float _1511 = _1421 + _1149;
        float _1512 = _1425 + _1150;
        float _1522 = fma(_1512, cbModelParam._m0[26u].z, fma(_1511, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1510)) - _1478;
        float _1523 = fma(_1512, cbModelParam._m0[27u].z, fma(_1511, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1510)) - _1482;
        float _1524 = fma(_1512, cbModelParam._m0[28u].z, fma(_1511, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1510)) - _1486;
        float _1528 = inversesqrt(dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524)));
        float _1540 = ((_1528 * _1522) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1478 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1528 * _1523) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1482 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1528 * _1524) / cbModelParam._m0[34u].z) + ((((((_1486 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        float _1579 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1545.x + (-0.5));
        float _1581 = _1579 * (_1545.y + (-0.5));
        float _1582 = _1579 * (_1545.z + (-0.5));
        float _1589 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1552.x + (-0.5));
        float _1591 = _1589 * (_1552.y + (-0.5));
        float _1592 = _1589 * (_1552.z + (-0.5));
        float _1599 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1559.x + (-0.5));
        float _1601 = _1599 * (_1559.y + (-0.5));
        float _1602 = _1599 * (_1559.z + (-0.5));
        float _1609 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1566.x + (-0.5));
        float _1611 = _1609 * (_1566.y + (-0.5));
        float _1612 = _1609 * (_1566.z + (-0.5));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = _1580 * 0.5;
        float _1617 = _1590 * 0.5;
        float _1618 = _1600 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1633 = (dot(vec3(_1148, _1149, _1150), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1643 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4459 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1645 + 1.0))) + _1650) * _1613;
        float _1660 = _1581 * 0.5;
        float _1661 = _1591 * 0.5;
        float _1662 = _1601 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_1148, _1149, _1150), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4470 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4481 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4492 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_1687 + 1.0))) + _1692) * _1614;
        float _1702 = _1582 * 0.5;
        float _1703 = _1592 * 0.5;
        float _1704 = _1602 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_1148, _1149, _1150), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4503 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4514 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4525 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0))) * (_1729 + 1.0))) + _1734) * _1615;
        _1751 = _1582;
        _1753 = _1581;
        _1754 = _1580;
        _1755 = _1592;
        _1756 = _1591;
        _1757 = _1590;
        _1758 = _1602;
        _1759 = _1601;
        _1760 = _1600;
        _1761 = _1615;
        _1762 = _1614;
        _1763 = _1613;
        _1764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
    }
    else
    {
        _1751 = _1752;
        _1753 = _1752;
        _1754 = _1752;
        _1755 = _1752;
        _1756 = _1752;
        _1757 = _1752;
        _1758 = _1752;
        _1759 = _1752;
        _1760 = _1752;
        _1761 = _1752;
        _1762 = _1752;
        _1763 = _1752;
        _1764 = 0.0;
        _1765 = 0.0;
        _1766 = 0.0;
    }
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    float _2072;
    float _2073;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1792 = fma(_1425, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1417));
        float _1796 = fma(_1425, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1417));
        float _1800 = fma(_1425, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1417));
        float _1822 = _1417 + _1148;
        float _1823 = _1421 + _1149;
        float _1824 = _1425 + _1150;
        float _1834 = fma(_1824, cbModelParam._m0[30u].z, fma(_1823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1822)) - _1792;
        float _1835 = fma(_1824, cbModelParam._m0[31u].z, fma(_1823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1822)) - _1796;
        float _1836 = fma(_1824, cbModelParam._m0[32u].z, fma(_1823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1822)) - _1800;
        float _1840 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
        float _1852 = ((_1840 * _1834) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1792 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1853 = ((_1840 * _1835) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1796 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1854 = ((_1840 * _1836) / cbModelParam._m0[35u].z) + ((((((_1800 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1856 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1863 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1870 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1877 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        float _1889 = exp2((_1856.w + (-0.5)) * 20.0) * 2.0;
        float _1890 = _1889 * (_1856.x + (-0.5));
        float _1891 = _1889 * (_1856.y + (-0.5));
        float _1892 = _1889 * (_1856.z + (-0.5));
        float _1899 = exp2((_1863.w + (-0.5)) * 20.0) * 2.0;
        float _1900 = _1899 * (_1863.x + (-0.5));
        float _1901 = _1899 * (_1863.y + (-0.5));
        float _1902 = _1899 * (_1863.z + (-0.5));
        float _1909 = exp2((_1870.w + (-0.5)) * 20.0) * 2.0;
        float _1910 = _1909 * (_1870.x + (-0.5));
        float _1911 = _1909 * (_1870.y + (-0.5));
        float _1912 = _1909 * (_1870.z + (-0.5));
        float _1919 = exp2((_1877.w + (-0.5)) * 20.0) * 2.0;
        float _1920 = _1919 * (_1877.x + (-0.5));
        float _1921 = _1919 * (_1877.y + (-0.5));
        float _1922 = _1919 * (_1877.z + (-0.5));
        float _1923 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1924 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1925 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = _1890 * 0.5;
        float _1927 = _1900 * 0.5;
        float _1928 = _1910 * 0.5;
        float _1929 = dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928));
        float _1934 = (_1929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1929);
        float _1942 = (dot(vec3(_1148, _1149, _1150), vec3(_1934 * _1926, _1934 * _1927, _1934 * _1928)) + 1.0) * 0.5;
        float _4566 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1951 = sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928)) / (_1923 + 9.9999997473787516355514526367188e-06);
        float _4577 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
        float _1953 = _1952 * 2.0;
        float _1957 = (1.0 - _1952) / (_1952 + 1.0);
        float _4588 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1958 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
        float _1967 = ((((1.0 - _1958) * (_1953 + 2.0)) * exp2(log2(isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_1953 + 1.0))) + _1958) * _1923;
        float _1968 = _1891 * 0.5;
        float _1969 = _1901 * 0.5;
        float _1970 = _1911 * 0.5;
        float _1971 = dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970));
        float _1976 = (_1971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1971);
        float _1984 = (dot(vec3(_1148, _1149, _1150), vec3(_1976 * _1968, _1976 * _1969, _1976 * _1970)) + 1.0) * 0.5;
        float _4599 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1993 = sqrt(((_1969 * _1969) + (_1968 * _1968)) + (_1970 * _1970)) / (_1924 + 9.9999997473787516355514526367188e-06);
        float _4610 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _1995 = _1994 * 2.0;
        float _1999 = (1.0 - _1994) / (_1994 + 1.0);
        float _4621 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2009 = ((((1.0 - _2000) * (_1995 + 2.0)) * exp2(log2(isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0))) * (_1995 + 1.0))) + _2000) * _1924;
        float _2010 = _1892 * 0.5;
        float _2011 = _1902 * 0.5;
        float _2012 = _1912 * 0.5;
        float _2013 = dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012));
        float _2018 = (_2013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2013);
        float _2026 = (dot(vec3(_1148, _1149, _1150), vec3(_2018 * _2010, _2018 * _2011, _2018 * _2012)) + 1.0) * 0.5;
        float _4632 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2035 = sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012)) / (_1925 + 9.9999997473787516355514526367188e-06);
        float _4643 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2037 = _2036 * 2.0;
        float _2041 = (1.0 - _2036) / (_2036 + 1.0);
        float _4654 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2051 = ((((1.0 - _2042) * (_2037 + 2.0)) * exp2(log2(isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2037 + 1.0))) + _2042) * _1925;
        _2059 = _1892;
        _2060 = _1891;
        _2061 = _1890;
        _2062 = _1902;
        _2063 = _1901;
        _2064 = _1900;
        _2065 = _1912;
        _2066 = _1911;
        _2067 = _1910;
        _2068 = _1925;
        _2069 = _1924;
        _2070 = _1923;
        _2071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)));
        _2072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)));
        _2073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    }
    else
    {
        _2059 = _1752;
        _2060 = _1752;
        _2061 = _1752;
        _2062 = _1752;
        _2063 = _1752;
        _2064 = _1752;
        _2065 = _1752;
        _2066 = _1752;
        _2067 = _1752;
        _2068 = _1752;
        _2069 = _1752;
        _2070 = _1752;
        _2071 = 0.0;
        _2072 = 0.0;
        _2073 = 0.0;
    }
    float _2083 = (cbModelParam._m0[1u].x * (_2071 - _1764)) + _1764;
    float _2084 = (cbModelParam._m0[1u].x * (_2072 - _1765)) + _1765;
    float _2085 = (cbModelParam._m0[1u].x * (_2073 - _1766)) + _1766;
    float _2106 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2109 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2112 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2083));
    float _2125 = _1363 * 0.5;
    float _2126 = _1364 * 0.5;
    float _2127 = _1365 * 0.5;
    float _2128 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2061, _2064, _2067, _2070));
    float _2131 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2060, _2063, _2066, _2069));
    float _2134 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2059, _2062, _2065, _2068));
    float _2168;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2141 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1751, _1755, _1758, _1761));
        float _2145 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1753, _1756, _1759, _1762));
        float _2149 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1754, _1757, _1760, _1763));
        float _2156 = dot(vec4(cbModelParam._m0[39u]), vec4(_2125, _2126, _2127, 1.0));
        _2168 = dot(vec3(isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0)), isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)), isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2156) ? 0.0 : (isnan(0.0) ? _2156 : max(0.0, _2156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2168 = 1.0;
    }
    float _2179;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2170 = dot(vec4(cbModelParam._m0[40u]), vec4(_2125, _2126, _2127, 1.0));
        _2179 = dot(vec3(isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0)), isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0)), isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2170) ? 0.0 : (isnan(0.0) ? _2170 : max(0.0, _2170))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2179 = 1.0;
    }
    float _2183 = (_2179 * cbModelParam._m0[1u].x) + (_2168 * (1.0 - cbModelParam._m0[1u].x));
    float _2193 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1270);
    float _2194 = isnan(_2193) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2193 : min(cbModelParam._m0[25u].z, _2193));
    float _2274;
    float _2276;
    float _2278;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2241 = fma(_1425, cbModelParam._m0[13u].z, fma(_1421, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1417)) + cbModelParam._m0[13u].w;
        float _2245 = fma(_1425, cbModelParam._m0[14u].z, fma(_1421, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1417)) + cbModelParam._m0[14u].w;
        float _2249 = fma(_1425, cbModelParam._m0[15u].z, fma(_1421, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1417)) + cbModelParam._m0[15u].w;
        float _2252 = fma(_1365, cbModelParam._m0[13u].z, fma(_1364, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1363));
        float _2255 = fma(_1365, cbModelParam._m0[14u].z, fma(_1364, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1363));
        float _2258 = fma(_1365, cbModelParam._m0[15u].z, fma(_1364, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1363));
        float _2286;
        if (_2252 > 0.0)
        {
            _2286 = abs((1.0 - _2241) / _2252);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2252 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2241 + 1.0) / _2252);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2286 = frontier_phi_17_15_ladder;
        }
        float _2488;
        if (_2255 > 0.0)
        {
            _2488 = abs((1.0 - _2245) / _2255);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2245 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2488 = frontier_phi_26_22_ladder;
        }
        float _2742;
        if (_2258 > 0.0)
        {
            _2742 = abs((1.0 - _2249) / _2258);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2249 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2742 = frontier_phi_38_33_ladder;
        }
        float _2744 = isnan(_2488) ? _2286 : (isnan(_2286) ? _2488 : min(_2286, _2488));
        float _2745 = isnan(_2742) ? _2744 : (isnan(_2744) ? _2742 : min(_2744, _2742));
        float _2749 = (_2745 * _2252) + _2241;
        float _2750 = (_2745 * _2255) + _2245;
        float _2751 = (_2745 * _2258) + _2249;
        float _2752 = _2745 * 9.9999997473787516355514526367188e-05;
        float _2754 = (-1.0) - _2752;
        float _2756 = _2752 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2751 > _2756) || ((_2751 < _2754) || ((_2750 > _2756) || ((_2750 < _2754) || ((_2749 < _2754) || (_2749 > _2756))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2879 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2751, cbModelParam._m0[9u].z, fma(_2750, cbModelParam._m0[9u].y, _2749 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2751, cbModelParam._m0[10u].z, fma(_2750, cbModelParam._m0[10u].y, _2749 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2751, cbModelParam._m0[11u].z, fma(_2750, cbModelParam._m0[11u].y, _2749 * cbModelParam._m0[11u].x))), _2194);
            frontier_phi_16_38_ladder = _2879.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2879.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2879.x * cbModelParam._m0[1u].y;
        }
        _2274 = frontier_phi_16_38_ladder_2;
        _2276 = frontier_phi_16_38_ladder_1;
        _2278 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1363, _1364, _1365), _2194);
        _2274 = _2262.x * cbModelParam._m0[1u].y;
        _2276 = _2262.y * cbModelParam._m0[1u].y;
        _2278 = _2262.z * cbModelParam._m0[1u].y;
    }
    float _2282 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1270);
    float _2283 = isnan(_2282) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2282 : min(cbModelParam._m0[25u].w, _2282));
    float _2372;
    float _2374;
    float _2376;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2336 = fma(_1425, cbModelParam._m0[21u].z, fma(_1421, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1417)) + cbModelParam._m0[21u].w;
        float _2340 = fma(_1425, cbModelParam._m0[22u].z, fma(_1421, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1417)) + cbModelParam._m0[22u].w;
        float _2344 = fma(_1425, cbModelParam._m0[23u].z, fma(_1421, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1417)) + cbModelParam._m0[23u].w;
        float _2347 = fma(_1365, cbModelParam._m0[21u].z, fma(_1364, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1363));
        float _2350 = fma(_1365, cbModelParam._m0[22u].z, fma(_1364, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1363));
        float _2353 = fma(_1365, cbModelParam._m0[23u].z, fma(_1364, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1363));
        float _2493;
        if (_2347 > 0.0)
        {
            _2493 = abs((1.0 - _2336) / _2347);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2347 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2336 + 1.0) / _2347);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2493 = frontier_phi_28_24_ladder;
        }
        float _2769;
        if (_2350 > 0.0)
        {
            _2769 = abs((1.0 - _2340) / _2350);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2350 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2340 + 1.0) / _2350);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2769 = frontier_phi_40_35_ladder;
        }
        float _2982;
        if (_2353 > 0.0)
        {
            _2982 = abs((1.0 - _2344) / _2353);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2353 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2344 + 1.0) / _2353);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2982 = frontier_phi_49_46_ladder;
        }
        float _2984 = isnan(_2769) ? _2493 : (isnan(_2493) ? _2769 : min(_2493, _2769));
        float _2985 = isnan(_2982) ? _2984 : (isnan(_2984) ? _2982 : min(_2984, _2982));
        float _2989 = (_2985 * _2347) + _2336;
        float _2990 = (_2985 * _2350) + _2340;
        float _2991 = (_2985 * _2353) + _2344;
        float _2992 = _2985 * 9.9999997473787516355514526367188e-05;
        float _2993 = (-1.0) - _2992;
        float _2995 = _2992 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2991 > _2995) || ((_2991 < _2993) || ((_2990 > _2995) || ((_2990 < _2993) || ((_2989 < _2993) || (_2989 > _2995))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3219 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2991, cbModelParam._m0[17u].z, fma(_2990, cbModelParam._m0[17u].y, _2989 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2991, cbModelParam._m0[18u].z, fma(_2990, cbModelParam._m0[18u].y, _2989 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2991, cbModelParam._m0[19u].z, fma(_2990, cbModelParam._m0[19u].y, _2989 * cbModelParam._m0[19u].x))), _2283);
            frontier_phi_25_49_ladder = _3219.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3219.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3219.x * cbModelParam._m0[1u].z;
        }
        _2372 = frontier_phi_25_49_ladder_2;
        _2374 = frontier_phi_25_49_ladder_1;
        _2376 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1363, _1364, _1365), _2283);
        _2372 = _2356.x * cbModelParam._m0[1u].z;
        _2374 = _2356.y * cbModelParam._m0[1u].z;
        _2376 = _2356.z * cbModelParam._m0[1u].z;
    }
    float _2389 = (((_1388 * _1340) + _1389) * _1355) * ((cbModelParam._m0[1u].w * (_2372 - _2274)) + _2274);
    float _2391 = (((_1388 * _1342) + _1389) * _1355) * ((cbModelParam._m0[1u].w * (_2374 - _2276)) + _2276);
    float _2393 = (((_1388 * _1343) + _1389) * _1355) * ((cbModelParam._m0[1u].w * (_2376 - _2278)) + _2278);
    float _2396 = fma(_2393, cbSceneParam._m0[89u].z, fma(_2391, cbSceneParam._m0[89u].y, _2389 * cbSceneParam._m0[89u].x));
    float _2399 = fma(_2393, cbSceneParam._m0[90u].z, fma(_2391, cbSceneParam._m0[90u].y, _2389 * cbSceneParam._m0[90u].x));
    float _2402 = fma(_2393, cbSceneParam._m0[91u].z, fma(_2391, cbSceneParam._m0[91u].y, _2389 * cbSceneParam._m0[91u].x));
    uvec4 _2412 = floatBitsToUint(cbInstanceData._m0[_1283 + 5u]);
    uint _2414 = _2412.x * 14u;
    uint _2415 = _2414 + 13u;
    float _2422 = _1355 + (-1.0);
    float _2427 = (cbLight._m0[_2415].x * _2422) + 1.0;
    float _2428 = (cbLight._m0[_2415].y * _2422) + 1.0;
    float _2429 = (cbLight._m0[_2415].z * _2422) + 1.0;
    float _2430 = (cbLight._m0[_2415].w * _2422) + 1.0;
    uint _2431 = _2414 + 5u;
    float _2437 = isnan(1.0) ? _2428 : (isnan(_2428) ? 1.0 : min(_2428, 1.0));
    uint _2441 = _2414 + 4u;
    float _2447 = isnan(1.0) ? _2427 : (isnan(_2427) ? 1.0 : min(_2427, 1.0));
    uint _2451 = _2414 | 1u;
    float _2462 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_1148, _1149, _1150));
    float _2465 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_1148, _1149, _1150));
    float _4790 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
    float _4801 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2470 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * 0.3183098733425140380859375;
    float _2472 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * 0.3183098733425140380859375;
    float _2479 = ((cbLight._m0[_2431].x * _2437) * _2472) + ((cbLight._m0[_2441].x * _2447) * _2470);
    float _2480 = ((_2437 * cbLight._m0[_2431].y) * _2472) + ((_2447 * cbLight._m0[_2441].y) * _2470);
    float _2481 = ((_2437 * cbLight._m0[_2431].z) * _2472) + ((_2447 * cbLight._m0[_2441].z) * _2470);
    uvec4 _2485 = floatBitsToUint(cbLight._m0[_2414 + 12u]);
    bool _2487 = _2485.x == 0u;
    float _2498;
    float _2500;
    float _2502;
    if (_2487)
    {
        _2498 = _2479;
        _2500 = _2480;
        _2502 = _2481;
    }
    else
    {
        uint _2506 = _2414 + 6u;
        float _2522 = (dot(vec3(cbLight._m0[_2414 + 2u].xyz), vec3(_1148, _1149, _1150)) * 0.5) + 0.5;
        float _2523 = _2522 * _2522;
        float _4812 = isnan(0.0) ? _2523 : (isnan(_2523) ? 0.0 : max(_2523, 0.0));
        float _2524 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2525 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2498 = (((cbLight._m0[_2506].x * 0.3183098733425140380859375) * _2524) * _2525) + _2479;
        _2500 = (((cbLight._m0[_2506].y * 0.3183098733425140380859375) * _2524) * _2525) + _2480;
        _2502 = (((cbLight._m0[_2506].z * 0.3183098733425140380859375) * _2524) * _2525) + _2481;
    }
    bool _2505 = _2485.y == 0u;
    float _2543;
    float _2545;
    float _2547;
    if (_2505)
    {
        _2543 = _2498;
        _2545 = _2500;
        _2547 = _2502;
    }
    else
    {
        uint _2713 = _2414 + 7u;
        float _2729 = (dot(vec3(cbLight._m0[_2414 + 3u].xyz), vec3(_1148, _1149, _1150)) * 0.5) + 0.5;
        float _2730 = _2729 * _2729;
        float _4828 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2731 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2732 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2543 = (((cbLight._m0[_2713].x * 0.3183098733425140380859375) * _2731) * _2732) + _2498;
        _2545 = (((cbLight._m0[_2713].y * 0.3183098733425140380859375) * _2731) * _2732) + _2500;
        _2547 = (((cbLight._m0[_2713].z * 0.3183098733425140380859375) * _2731) * _2732) + _2502;
    }
    uint _2550 = _2414 + 8u;
    float _2563 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2414].w)) * _1270) * 0.949999988079071044921875);
    float _2564 = _2563 * _2563;
    float _2565 = cbLight._m0[_2414].x + _1208;
    float _2566 = cbLight._m0[_2414].y + _1209;
    float _2567 = cbLight._m0[_2414].z + _1210;
    float _2571 = inversesqrt(dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567)));
    float _2572 = _2571 * _2565;
    float _2573 = _2571 * _2566;
    float _2574 = _2571 * _2567;
    float _2575 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2414].xyz));
    float _4844 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
    float _2578 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    float _4855 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
    float _2579 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
    float _2580 = dot(vec3(_1148, _1149, _1150), vec3(_2572, _2573, _2574));
    float _4866 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2583 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _2584 = dot(vec3(cbLight._m0[_2414].xyz), vec3(_2572, _2573, _2574));
    float _4877 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2588 = _2564 * _2564;
    float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
    float _2600 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
    float _2601 = 0.959999978542327880859375 - _1337;
    float _2603 = 0.959999978542327880859375 - _1338;
    float _2604 = 0.959999978542327880859375 - _1339;
    float _2611 = 1.0 - _2564;
    float _2622 = (0.5 / (((_2579 * ((_2578 * _2611) + _2564)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2611) + _2564) * _2578))) * _2578;
    float _4888 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
    float _2624 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
    uint _2635 = _2414 + 9u;
    float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2451].w)) * _1270) * 0.949999988079071044921875);
    float _2647 = _2646 * _2646;
    float _2648 = cbLight._m0[_2451].x + _1208;
    float _2649 = cbLight._m0[_2451].y + _1209;
    float _2650 = cbLight._m0[_2451].z + _1210;
    float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
    float _2655 = _2654 * _2648;
    float _2656 = _2654 * _2649;
    float _2657 = _2654 * _2650;
    float _2658 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2451].xyz));
    float _4899 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2662 = dot(vec3(_1148, _1149, _1150), vec3(_2655, _2656, _2657));
    float _4910 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2665 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2666 = dot(vec3(cbLight._m0[_2451].xyz), vec3(_2655, _2656, _2657));
    float _4921 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2670 = _2647 * _2647;
    float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
    float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
    float _2688 = 1.0 - _2647;
    float _2698 = (0.5 / (((_2579 * ((_2661 * _2688) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2688) + _2647) * _2661))) * _2661;
    float _4932 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2700 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
    float _2710 = (((((_2681 * _2601) + _1340) * cbLight._m0[_2635].x) * _2700) * _2437) + (((((_2600 * _2601) + _1340) * cbLight._m0[_2550].x) * _2624) * _2447);
    float _2711 = (((((_2681 * _2603) + _1342) * cbLight._m0[_2635].y) * _2700) * _2437) + (((((_2600 * _2603) + _1342) * cbLight._m0[_2550].y) * _2624) * _2447);
    float _2712 = (((((_2681 * _2604) + _1343) * cbLight._m0[_2635].z) * _2700) * _2437) + (((((_2600 * _2604) + _1343) * cbLight._m0[_2550].z) * _2624) * _2447);
    float _2774;
    float _2776;
    float _2778;
    if (_2487)
    {
        _2774 = _2710;
        _2776 = _2711;
        _2778 = _2712;
    }
    else
    {
        uint _2780 = _2414 + 2u;
        uint _2784 = _2414 + 10u;
        float _2798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2780].w)) * _1270) * 0.949999988079071044921875);
        float _2799 = _2798 * _2798;
        float _2800 = cbLight._m0[_2780].x + _1208;
        float _2801 = cbLight._m0[_2780].y + _1209;
        float _2802 = cbLight._m0[_2780].z + _1210;
        float _2806 = inversesqrt(dot(vec3(_2800, _2801, _2802), vec3(_2800, _2801, _2802)));
        float _2807 = _2806 * _2800;
        float _2808 = _2806 * _2801;
        float _2809 = _2806 * _2802;
        float _2810 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2780].xyz));
        float _4943 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
        float _2814 = dot(vec3(_1148, _1149, _1150), vec3(_2807, _2808, _2809));
        float _4954 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2817 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
        float _2818 = dot(vec3(cbLight._m0[_2780].xyz), vec3(_2807, _2808, _2809));
        float _4965 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2822 = _2799 * _2799;
        float _2826 = ((_2817 * _2817) * (_2822 + (-1.0))) + 1.0;
        float _2833 = exp2(log2(1.0 - (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) * 5.0);
        float _2840 = 1.0 - _2799;
        float _2850 = (0.5 / (((_2579 * ((_2813 * _2840) + _2799)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2840) + _2799) * _2813))) * _2813;
        float _4976 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2852 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2822 / ((_2826 * _2826) * 3.141590118408203125));
        float _2853 = isnan(1.0) ? _2429 : (isnan(_2429) ? 1.0 : min(_2429, 1.0));
        _2774 = (((((_2833 * _2601) + _1340) * cbLight._m0[_2784].x) * _2852) * _2853) + _2710;
        _2776 = (((((_2833 * _2603) + _1342) * cbLight._m0[_2784].y) * _2852) * _2853) + _2711;
        _2778 = (((((_2833 * _2604) + _1343) * cbLight._m0[_2784].z) * _2852) * _2853) + _2712;
    }
    float _2888;
    float _2890;
    float _2892;
    if (_2505)
    {
        _2888 = _2774;
        _2890 = _2776;
        _2892 = _2778;
    }
    else
    {
        uint _2899 = _2414 + 3u;
        uint _2903 = _2414 + 11u;
        float _2917 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2899].w)) * _1270) * 0.949999988079071044921875);
        float _2918 = _2917 * _2917;
        float _2919 = cbLight._m0[_2899].x + _1208;
        float _2920 = cbLight._m0[_2899].y + _1209;
        float _2921 = cbLight._m0[_2899].z + _1210;
        float _2925 = inversesqrt(dot(vec3(_2919, _2920, _2921), vec3(_2919, _2920, _2921)));
        float _2926 = _2925 * _2919;
        float _2927 = _2925 * _2920;
        float _2928 = _2925 * _2921;
        float _2929 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2899].xyz));
        float _4992 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
        float _2933 = dot(vec3(_1148, _1149, _1150), vec3(_2926, _2927, _2928));
        float _5003 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2936 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
        float _2937 = dot(vec3(cbLight._m0[_2899].xyz), vec3(_2926, _2927, _2928));
        float _5014 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
        float _2941 = _2918 * _2918;
        float _2945 = ((_2936 * _2936) * (_2941 + (-1.0))) + 1.0;
        float _2952 = exp2(log2(1.0 - (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) * 5.0);
        float _2959 = 1.0 - _2918;
        float _2969 = (0.5 / (((_2579 * ((_2932 * _2959) + _2918)) + 9.9999999392252902907785028219223e-09) + (((_2579 * _2959) + _2918) * _2932))) * _2932;
        float _5025 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
        float _2971 = (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_2941 / ((_2945 * _2945) * 3.141590118408203125));
        float _2972 = isnan(1.0) ? _2430 : (isnan(_2430) ? 1.0 : min(_2430, 1.0));
        _2888 = (((((_2952 * _2601) + _1340) * cbLight._m0[_2903].x) * _2971) * _2972) + _2774;
        _2890 = (((((_2952 * _2603) + _1342) * cbLight._m0[_2903].y) * _2971) * _2972) + _2776;
        _2892 = (((((_2952 * _2604) + _1343) * cbLight._m0[_2903].z) * _2971) * _2972) + _2778;
    }
    float _3107;
    float _3109;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_2412.y == 0u)
    {
        float _3047 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3048 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3047;
        float _3049 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3047;
        float _3050 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3047;
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.x;
        uint _3074 = uint((float(_3062.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1229) / _3063))) + floor(float(uint(cbSceneParam._m0[85u].x * _1228) / _3063)));
        float _3084 = (log2(_3050 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3085 = isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0));
        uint _3088 = uint(isnan(14.0) ? _3085 : (isnan(_3085) ? 14.0 : min(_3085, 14.0)));
        uvec4 _3093 = texelFetch(g_lightClusterGridBuffer, int(((_3088 << 2u) + (_3074 << 6u)) >> 2u));
        uint _3094 = _3093.x;
        uint _3095 = _3062.z;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        float _3232;
        float _3234;
        if (((((1u << ((_3095 >> 4u) & 15u)) + 4294967295u) & _3094) == 0u) || ((_3095 & 240u) == 0u))
        {
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
            _3232 = 0.0;
            _3234 = 0.0;
        }
        else
        {
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3233;
            float _3235;
            float _3384 = 0.0;
            float _3385 = 0.0;
            float _3386 = 0.0;
            float _3387 = 0.0;
            float _3388 = 0.0;
            float _3389 = 0.0;
            uint _3390 = 0u;
            uint _3399;
            bool _3400;
            for (;;)
            {
                _3399 = texelFetch(g_lightClassification, int((((_3088 << 5u) + (_3074 << 9u)) + (_3390 << 2u)) >> 2u)).x;
                _3400 = _3399 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3400)
                {
                    frontier_phi_66_pred = _3384;
                    frontier_phi_66_pred_1 = _3389;
                    frontier_phi_66_pred_2 = _3388;
                    frontier_phi_66_pred_3 = _3387;
                    frontier_phi_66_pred_4 = _3386;
                    frontier_phi_66_pred_5 = _3385;
                }
                else
                {
                    float _3529;
                    float _3530;
                    float _3531;
                    float _3532;
                    float _3533;
                    float _3534;
                    uint _3535;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3386;
                    _3532 = _3387;
                    _3533 = _3388;
                    _3534 = _3389;
                    _3535 = _3399;
                    float _3456;
                    float _3457;
                    float _3458;
                    float _3459;
                    float _3460;
                    float _3461;
                    for (;;)
                    {
                        uint _3539 = uint(findLSB(_3535)) + (_3390 << 5u);
                        uint _3536 = (_3535 + 4294967295u) & _3535;
                        uint _3541 = _3539 * 48u;
                        vec4 _3555 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3541)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3541 + 3u)).x));
                        uint _3561 = (_3539 * 48u) + 4u;
                        vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3561)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3561 + 3u)).x));
                        uint _3580 = (_3539 * 48u) + 8u;
                        vec3 _3591 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3580)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3580 + 2u)).x));
                        float _3595 = _3555.x - _3048;
                        float _3596 = _3555.y - _3049;
                        float _3597 = _3555.z - _3050;
                        float _3598 = dot(vec3(_3595, _3596, _3597), vec3(_3595, _3596, _3597));
                        float _3601 = inversesqrt(_3598);
                        float _3602 = _3601 * _3595;
                        float _3603 = _3601 * _3596;
                        float _3604 = _3601 * _3597;
                        float _3605 = dot(vec3(_1251, _1254, _1257), vec3(_3602, _3603, _3604));
                        float _3610 = 1.0 - (_3598 * _3555.w);
                        float _5051 = isnan(0.0) ? _3610 : (isnan(_3610) ? 0.0 : max(_3610, 0.0));
                        float _3611 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                        float _3612 = sqrt(_3598) * _3574.w;
                        float _3615 = 1.39999997615814208984375 / (_3612 + 1.39999997615814208984375);
                        float _3616 = _3615 * _3615;
                        float _3619 = ((1.0 - _3616) * _3605) + _3616;
                        float _3622 = _3612 * _3612;
                        float _3626 = ((isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0))) * _3611) / ((_3622 * 0.699999988079071044921875) + 1.0);
                        float _3630 = (-0.0) - _3048;
                        float _3631 = (-0.0) - _3049;
                        float _3632 = (-0.0) - _3050;
                        float _3636 = inversesqrt(dot(vec3(_3630, _3631, _3632), vec3(_3630, _3631, _3632)));
                        float _3637 = _3636 * _3630;
                        float _3638 = _3636 * _3631;
                        float _3639 = _3636 * _3632;
                        float _3647 = exp2(log2(1.0 / ((_3622 * 3.5) + 5.0)) * 0.25);
                        float _3648 = 1.0 - _1371;
                        float _3655 = sqrt(1.0 - ((1.0 - (_3648 * _3648)) * (1.0 - (_3647 * _3647))));
                        float _3656 = _3655 * _3655;
                        float _3657 = _3656 * _3656;
                        float _3658 = _3637 + _3602;
                        float _3659 = _3638 + _3603;
                        float _3660 = _3639 + _3604;
                        float _3664 = inversesqrt(dot(vec3(_3658, _3659, _3660), vec3(_3658, _3659, _3660)));
                        float _3668 = dot(vec3(_1251, _1254, _1257), vec3(_3637, _3638, _3639));
                        float _5067 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3671 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3672 = dot(vec3(_1251, _1254, _1257), vec3(_3664 * _3658, _3664 * _3659, _3664 * _3660));
                        float _5078 = isnan(0.0) ? _3672 : (isnan(_3672) ? 0.0 : max(_3672, 0.0));
                        float _3675 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                        float _3679 = ((_3675 * _3675) * (_3657 + (-1.0))) + 1.0;
                        float _3680 = _3615 * _3656;
                        float _3681 = _3680 * _3680;
                        float _3684 = ((1.0 - _3681) * _3605) + _3681;
                        float _5089 = isnan(0.0) ? _3684 : (isnan(_3684) ? 0.0 : max(_3684, 0.0));
                        float _3685 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3686 = 1.0 - _3656;
                        float _3696 = (0.5 / (((_3685 * ((_3671 * _3686) + _3656)) + 9.9999999392252902907785028219223e-09) + (((_3685 * _3686) + _3656) * _3671))) * _3685;
                        float _5100 = isnan(0.0) ? _3696 : (isnan(_3696) ? 0.0 : max(_3696, 0.0));
                        float _3707 = (((_3657 * 3.1415927410125732421875) * (isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0)))) / ((_3679 * _3679) * ((_3622 * 2.1991131305694580078125) + 3.141590118408203125))) * _3611;
                        _3459 = (_3626 * _3574.x) + _3532;
                        _3460 = (_3626 * _3574.y) + _3533;
                        _3461 = (_3626 * _3574.z) + _3534;
                        _3456 = (_3707 * _3591.x) + _3529;
                        _3457 = (_3707 * _3591.y) + _3530;
                        _3458 = (_3707 * _3591.z) + _3531;
                        if (_3536 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3458;
                            _3532 = _3459;
                            _3533 = _3460;
                            _3534 = _3461;
                            _3535 = _3536;
                        }
                    }
                    frontier_phi_66_pred = _3456;
                    frontier_phi_66_pred_1 = _3461;
                    frontier_phi_66_pred_2 = _3460;
                    frontier_phi_66_pred_3 = _3459;
                    frontier_phi_66_pred_4 = _3458;
                    frontier_phi_66_pred_5 = _3457;
                }
                _3225 = frontier_phi_66_pred;
                _3235 = frontier_phi_66_pred_1;
                _3233 = frontier_phi_66_pred_2;
                _3231 = frontier_phi_66_pred_3;
                _3229 = frontier_phi_66_pred_4;
                _3227 = frontier_phi_66_pred_5;
                uint _3391 = _3390 + 1u;
                if (_3391 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3384 = _3225;
                    _3385 = _3227;
                    _3386 = _3229;
                    _3387 = _3231;
                    _3388 = _3233;
                    _3389 = _3235;
                    _3390 = _3391;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
            _3232 = _3233;
            _3234 = _3235;
        }
        uvec4 _3238 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3239 = _3238.z;
        uint _3241 = (_3239 >> 8u) & 15u;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        float _3360;
        float _3362;
        if (((4294967295u << _3241) & _3094) == 0u)
        {
            _3352 = _3224;
            _3354 = _3226;
            _3356 = _3228;
            _3358 = _3230;
            _3360 = _3232;
            _3362 = _3234;
        }
        else
        {
            float _3377 = inversesqrt(dot(vec3(_3048, _3049, _3050), vec3(_3048, _3049, _3050)));
            float _3378 = _3377 * _3048;
            float _3379 = _3377 * _3049;
            float _3380 = _3377 * _3050;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3241 < ((_3239 >> 12u) & 15u))
            {
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3361;
                float _3363;
                float _3512 = _3224;
                float _3513 = _3226;
                float _3514 = _3228;
                float _3515 = _3230;
                float _3516 = _3232;
                float _3517 = _3234;
                uint _3518 = _3241;
                uint _3527;
                bool _3528;
                for (;;)
                {
                    _3527 = texelFetch(g_lightClassification, int((((_3088 << 5u) + (_3074 << 9u)) + (_3518 << 2u)) >> 2u)).x;
                    _3528 = _3527 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3528)
                    {
                        frontier_phi_77_pred = _3517;
                        frontier_phi_77_pred_1 = _3516;
                        frontier_phi_77_pred_2 = _3515;
                        frontier_phi_77_pred_3 = _3514;
                        frontier_phi_77_pred_4 = _3513;
                        frontier_phi_77_pred_5 = _3512;
                    }
                    else
                    {
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3724;
                        float _3725;
                        float _3726;
                        float _4014;
                        float _4015;
                        float _4016;
                        float _4017;
                        float _4018;
                        float _4019;
                        float _3734 = _3512;
                        float _3735 = _3513;
                        float _3736 = _3514;
                        float _3737 = _3515;
                        float _3738 = _3516;
                        float _3739 = _3517;
                        uint _3740 = _3527;
                        uint _3741;
                        vec4 _3766;
                        float _3767;
                        vec4 _3782;
                        vec3 _3794;
                        vec4 _3809;
                        vec4 _3824;
                        float _3870;
                        bool _3871;
                        for (;;)
                        {
                            uint _3751 = ((_3518 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3740));
                            _3741 = (_3740 + 4294967295u) & _3740;
                            uint _3753 = _3751 * 40u;
                            _3766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3753 + 3u)).x));
                            _3767 = _3766.w;
                            uint _3769 = (_3751 * 40u) + 4u;
                            _3782 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3769)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3769 + 3u)).x));
                            uint _3784 = (_3751 * 40u) + 8u;
                            _3794 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3784)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3784 + 2u)).x));
                            uint _3796 = (_3751 * 40u) + 16u;
                            _3809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3796 + 3u)).x));
                            uint _3811 = (_3751 * 40u) + 20u;
                            _3824 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3811)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3811 + 3u)).x));
                            uint _3826 = (_3751 * 40u) + 24u;
                            vec4 _3839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3826 + 3u)).x));
                            uint _3845 = (_3751 * 40u) + 28u;
                            vec4 _3858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3845 + 3u)).x));
                            _3870 = fma(_3050, _3858.z, fma(_3049, _3858.y, _3858.x * _3048)) + _3858.w;
                            _3871 = !((fma(_3050, _3839.z, fma(_3049, _3839.y, _3839.x * _3048)) + _3839.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3871)
                            {
                                float _3898 = _3766.x - _3048;
                                float _3899 = _3766.y - _3049;
                                float _3900 = _3766.z - _3050;
                                float _3901 = dot(vec3(_3898, _3899, _3900), vec3(_3898, _3899, _3900));
                                float _3904 = inversesqrt(_3901);
                                float _3905 = _3904 * _3898;
                                float _3906 = _3904 * _3899;
                                float _3907 = _3904 * _3900;
                                float _3911 = 1.0 - (_3901 / (_3767 * _3767));
                                float _5111 = isnan(0.0) ? _3911 : (isnan(_3911) ? 0.0 : max(_3911, 0.0));
                                float _3912 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                                float _3916 = sqrt(_3901) * _3782.w;
                                float _3918 = 1.39999997615814208984375 / (_3916 + 1.39999997615814208984375);
                                float _3919 = _3918 * _3918;
                                float _3922 = ((1.0 - _3919) * dot(vec3(_3905, _3906, _3907), vec3(_1251, _1254, _1257))) + _3919;
                                float _3925 = _3916 * _3916;
                                float _3929 = (fma(_3050, _3809.z, fma(_3049, _3809.y, _3809.x * _3048)) + _3809.w) / _3870;
                                float _3930 = (fma(_3050, _3824.z, fma(_3049, _3824.y, _3824.x * _3048)) + _3824.w) / _3870;
                                float _3934 = 1.0 - dot(vec2(_3929, _3930), vec2(_3929, _3930));
                                float _5127 = isnan(0.0) ? _3934 : (isnan(_3934) ? 0.0 : max(_3934, 0.0));
                                float _3935 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3936 = _3935 * (((isnan(0.0) ? _3922 : (isnan(_3922) ? 0.0 : max(_3922, 0.0))) * _3912) / ((_3925 * 0.699999988079071044921875) + 1.0));
                                float _3948 = exp2(log2(1.0 / ((_3925 * 3.5) + 5.0)) * 0.25);
                                float _3949 = 1.0 - _1371;
                                float _3956 = sqrt(1.0 - ((1.0 - (_3949 * _3949)) * (1.0 - (_3948 * _3948))));
                                float _3957 = _3956 * _3956;
                                float _3958 = _3957 * _3957;
                                float _3959 = _3905 - _3378;
                                float _3960 = _3906 - _3379;
                                float _3961 = _3907 - _3380;
                                float _3965 = inversesqrt(dot(vec3(_3959, _3960, _3961), vec3(_3959, _3960, _3961)));
                                float _3969 = dot(vec3(_1251, _1254, _1257), vec3((-0.0) - _3378, (-0.0) - _3379, (-0.0) - _3380));
                                float _5138 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3972 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3973 = dot(vec3(_1251, _1254, _1257), vec3(_3965 * _3959, _3965 * _3960, _3965 * _3961));
                                float _5149 = isnan(0.0) ? _3973 : (isnan(_3973) ? 0.0 : max(_3973, 0.0));
                                float _3976 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3980 = ((_3976 * _3976) * (_3958 + (-1.0))) + 1.0;
                                float _3981 = _3918 * _3957;
                                float _3982 = _3981 * _3981;
                                float _3988 = ((1.0 - _3982) * dot(vec3(_1251, _1254, _1257), vec3(_3905, _3906, _3907))) + _3982;
                                float _5160 = isnan(0.0) ? _3988 : (isnan(_3988) ? 0.0 : max(_3988, 0.0));
                                float _3989 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3990 = 1.0 - _3957;
                                float _4000 = (0.5 / (((_3989 * ((_3972 * _3990) + _3957)) + 9.9999999392252902907785028219223e-09) + (((_3989 * _3990) + _3957) * _3972))) * _3989;
                                float _5171 = isnan(0.0) ? _4000 : (isnan(_4000) ? 0.0 : max(_4000, 0.0));
                                float _4010 = (_3935 * _3912) * (((_3958 * 3.1415927410125732421875) * (isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0)))) / ((_3980 * _3980) * ((_3925 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3936 * _3782.y;
                                frontier_phi_83_pred_1 = _3936 * _3782.x;
                                frontier_phi_83_pred_2 = _4010 * _3794.z;
                                frontier_phi_83_pred_3 = _4010 * _3794.y;
                                frontier_phi_83_pred_4 = _4010 * _3794.x;
                                frontier_phi_83_pred_5 = _3936 * _3782.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4018 = frontier_phi_83_pred;
                            _4017 = frontier_phi_83_pred_1;
                            _4016 = frontier_phi_83_pred_2;
                            _4015 = frontier_phi_83_pred_3;
                            _4014 = frontier_phi_83_pred_4;
                            _4019 = frontier_phi_83_pred_5;
                            _3724 = _4017 + _3737;
                            _3725 = _4018 + _3738;
                            _3726 = _4019 + _3739;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            _3723 = _4016 + _3736;
                            if (_3741 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3723;
                                _3737 = _3724;
                                _3738 = _3725;
                                _3739 = _3726;
                                _3740 = _3741;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3726;
                        frontier_phi_77_pred_1 = _3725;
                        frontier_phi_77_pred_2 = _3724;
                        frontier_phi_77_pred_3 = _3723;
                        frontier_phi_77_pred_4 = _3722;
                        frontier_phi_77_pred_5 = _3721;
                    }
                    _3363 = frontier_phi_77_pred;
                    _3361 = frontier_phi_77_pred_1;
                    _3359 = frontier_phi_77_pred_2;
                    _3357 = frontier_phi_77_pred_3;
                    _3355 = frontier_phi_77_pred_4;
                    _3353 = frontier_phi_77_pred_5;
                    uint _3519 = _3518 + 1u;
                    if (_3519 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3512 = _3353;
                        _3513 = _3355;
                        _3514 = _3357;
                        _3515 = _3359;
                        _3516 = _3361;
                        _3517 = _3363;
                        _3518 = _3519;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3357;
                frontier_phi_58_59_ladder_1 = _3363;
                frontier_phi_58_59_ladder_2 = _3361;
                frontier_phi_58_59_ladder_3 = _3359;
                frontier_phi_58_59_ladder_4 = _3355;
                frontier_phi_58_59_ladder_5 = _3353;
            }
            else
            {
                frontier_phi_58_59_ladder = _3228;
                frontier_phi_58_59_ladder_1 = _3234;
                frontier_phi_58_59_ladder_2 = _3232;
                frontier_phi_58_59_ladder_3 = _3230;
                frontier_phi_58_59_ladder_4 = _3226;
                frontier_phi_58_59_ladder_5 = _3224;
            }
            _3352 = frontier_phi_58_59_ladder_5;
            _3354 = frontier_phi_58_59_ladder_4;
            _3356 = frontier_phi_58_59_ladder;
            _3358 = frontier_phi_58_59_ladder_3;
            _3360 = frontier_phi_58_59_ladder_2;
            _3362 = frontier_phi_58_59_ladder_1;
        }
        float _3367 = isnan(1.0) ? _1355 : (isnan(_1355) ? 1.0 : min(_1355, 1.0));
        _3107 = (_3367 * _3358) + _2543;
        _3109 = (_3367 * _3360) + _2545;
        _3111 = (_3367 * _3362) + _2547;
        _3113 = ((_3352 * _1340) * _3367) + _2888;
        _3115 = ((_3354 * _1342) * _3367) + _2890;
        _3117 = ((_3356 * _1343) * _3367) + _2892;
    }
    else
    {
        _3107 = _2543;
        _3109 = _2545;
        _3111 = _2547;
        _3113 = _2888;
        _3115 = _2890;
        _3117 = _2892;
    }
    uint _3123 = _1284 + uint(cbMatDynParam._m0[0u].w);
    float _3129 = (((((cbMtdParam._m0[22u].x * _1052.x) * cbMtdParam._m0[32u].x) * _1075) + _826) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3123].x;
    float _3130 = (((((cbMtdParam._m0[22u].y * _1052.y) * cbMtdParam._m0[32u].x) * _1075) + _827) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3123].y;
    float _3131 = (((((cbMtdParam._m0[22u].z * _1052.z) * cbMtdParam._m0[32u].x) * _1075) + _828) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3123].z;
    float _5187 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _5198 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _5209 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _3148 = (((isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_3107 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1355))) + ((_3113 + ((isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0))) * _2183)) * cbPerFrame._m0[3u].x)) + _3129;
    float _3150 = (_3130 + ((_3115 + ((isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0))) * _2183)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_3109 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1355)));
    float _3152 = (_3131 + ((_3117 + ((isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0))) * _2183)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_3111 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1355)));
    float _3153 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
    float _3154 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
    float _3155 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
    float _3161 = cbMtdParam._m0[2u].x * _3129;
    float _3162 = cbMtdParam._m0[2u].y * _3130;
    float _3163 = cbMtdParam._m0[2u].z * _3131;
    float _5235 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3165 = isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0));
    uint _3166 = _1283 + 6u;
    float _3174 = _1228 / cbSceneParam._m0[86u].x;
    float _3175 = _1229 / cbSceneParam._m0[86u].y;
    vec4 _3189 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3174, _3175, (log2((isnan(cbSceneParam._m0[77u].w) ? _1171 : (isnan(_1171) ? cbSceneParam._m0[77u].w : min(_1171, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3191 = _3189.x;
    float _3192 = _3189.y;
    float _3193 = _3189.z;
    float _3194 = _3189.w;
    float _3286;
    float _3288;
    float _3290;
    float _3292;
    if (_1171 > cbSceneParam._m0[78u].w)
    {
        float _3249 = isnan(_1171) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1171 : min(cbSceneParam._m0[80u].w, _1171));
        float _3250 = _3249 / _1171;
        float _3261 = _3250 * _1201;
        float _3262 = _1202 * _3250;
        float _3263 = (-0.0) - _3262;
        float _3264 = _3250 * _1203;
        float _3266 = (cbSceneParam._m0[77u].w * _3263) / _3249;
        float _3267 = _3266 + cbSceneParam._m0[79u].w;
        float _3268 = cbSceneParam._m0[79u].w - _3262;
        float _3274 = sqrt(((_3261 * _3261) + (_3262 * _3262)) + (_3264 * _3264));
        float _3277 = (1.0 - (cbSceneParam._m0[77u].w / _3249)) * _3274;
        float _3282 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3284 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3469;
        if (abs((_3263 - _3266) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3469 = ((((_3267 > 0.0) ? exp2(_3282 * _3267) : (2.0 - exp2(_3284 * _3267))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3277;
        }
        else
        {
            float _3413 = 1.0 / cbSceneParam._m0[80u].x;
            float _3414 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : max(_3267, _3268));
            float _3415 = isnan(_3268) ? _3267 : (isnan(_3267) ? _3268 : min(_3267, _3268));
            float _3424 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : min(_3414, 0.0));
            float _3425 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : min(_3415, 0.0));
            _3469 = ((abs(_3274 / _3263) * cbSceneParam._m0[80u].y) * ((((_3424 - _3425) * 2.0) - ((exp2(_3282 * (isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0)))) - exp2(_3282 * (isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0))))) * _3413)) - ((exp2(_3284 * _3424) - exp2(_3284 * _3425)) * _3413))) + (_3277 * cbSceneParam._m0[80u].z);
        }
        vec4 _3471 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3174, _3175, 1.0), 0.0);
        float _3480 = exp2((_3469 * (-1.44269502162933349609375)) * (1.0 - _3471.w));
        float _3481 = log2(_3480);
        float _3497 = log2(_3194);
        _3286 = (exp2(_3497 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].x)) * _3471.x) / cbSceneParam._m0[78u].x)) + _3191;
        _3288 = (exp2(_3497 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].y)) * _3471.y) / cbSceneParam._m0[78u].y)) + _3192;
        _3290 = (exp2(_3497 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3481 * cbSceneParam._m0[78u].z)) * _3471.z) / cbSceneParam._m0[78u].z)) + _3193;
        _3292 = _3480 * _3194;
    }
    else
    {
        _3286 = _3191;
        _3288 = _3192;
        _3290 = _3193;
        _3292 = _3194;
    }
    bool _3507;
    vec4 _3301;
    vec4 _3323;
    float _3325;
    float _3329;
    float _3330;
    float _3331;
    float _3334;
    float _3337;
    float _3340;
    float _3341;
    bool _3351;
    for (;;)
    {
        _3301 = cbMatDynParam._m0[0u];
        float _3303 = roundEven(_3301.y);
        bool _3304 = _3303 == 3.0;
        float _3305 = log2(_3292);
        float _3309 = exp2(_3305 * cbSceneParam._m0[78u].x);
        float _3310 = exp2(_3305 * cbSceneParam._m0[78u].y);
        float _3311 = exp2(_3305 * cbSceneParam._m0[78u].z);
        float _3312 = _3309 * _3153;
        float _3313 = _3310 * _3154;
        float _3314 = _3311 * _3155;
        float _3321 = _1217 + (-0.5);
        _3323 = cbMtdParam._m0[1u];
        _3325 = _3323.y * _3321;
        float _3328 = (_3303 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3329 = _3328 * (_3304 ? _3312 : (_3312 + (cbSceneParam._m0[72u].w * _3286)));
        _3330 = _3328 * (_3304 ? _3313 : (_3313 + (cbSceneParam._m0[72u].w * _3288)));
        _3331 = _3328 * (_3304 ? _3314 : (_3314 + (cbSceneParam._m0[72u].w * _3290)));
        _3334 = ((_3161 * _3165) * _3309) * _3328;
        _3337 = ((_3162 * _3165) * _3310) * _3328;
        _3340 = ((_3163 * _3165) * _3311) * _3328;
        _3341 = _3321 * 0.999000012874603271484375;
        _3351 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3351)
        {
            if ((cbInstanceData._m0[_1283 + 7u].x + _3341) < 0.5)
            {
                _3507 = true;
                break;
            }
        }
        uint _3448 = _1284 + uint(_3301.w);
        if ((cbInstanceData._m0[_3448].w < 1.0) && ((cbInstanceData._m0[_3448].w + _3341) < 0.5))
        {
            _3507 = true;
            break;
        }
        if ((_3325 + 1.0) < _3323.x)
        {
            _3507 = true;
            break;
        }
        _3507 = false;
        break;
    }
    float _3712;
    if (_3507)
    {
        discard_state = true;
        _3712 = 0.0;
    }
    else
    {
        _3712 = cbInstanceData._m0[_3166].w;
    }
    SV_Target.x = _3329;
    SV_Target.y = _3330;
    SV_Target.z = _3331;
    SV_Target.w = _3712;
    SV_Target_1.x = _3334;
    SV_Target_1.y = _3337;
    SV_Target_1.z = _3340;
    SV_Target_1.w = cbInstanceData._m0[_3166].w;
    discard_exit();
}


