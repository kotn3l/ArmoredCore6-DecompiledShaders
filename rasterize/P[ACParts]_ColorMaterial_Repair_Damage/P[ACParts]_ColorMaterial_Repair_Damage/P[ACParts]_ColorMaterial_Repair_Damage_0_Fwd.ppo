#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1706;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _234 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _235 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _236 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _242 = inversesqrt(dot(vec3(_234, _235, _236), vec3(_234, _235, _236)));
    float _249 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _256 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _278 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _283 = _278.z;
    float _284 = _278.w;
    vec4 _306 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _311 = _306.w;
    float _323 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _283) * exp2(log2(1.0 - _311) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _324 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _325 = isnan(1.0) ? _324 : (isnan(_324) ? 1.0 : min(_324, 1.0));
    vec4 _339 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _349 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _357 = (_349 - (((_339.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _349))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4071 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _358 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _360 = _325 - (_358 * _325);
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    vec4 _375 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _378 = _375.y;
    float _379 = _378 * (isnan(1.0) ? _361 : (isnan(_361) ? 1.0 : min(_361, 1.0)));
    float _388 = exp2(log2(cbMtdParam._m0[32u].w * _311) * cbMtdParam._m0[31u].z);
    float _390 = _388 - (_358 * _388);
    float _391 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _392 = isnan(1.0) ? _391 : (isnan(_391) ? 1.0 : min(_391, 1.0));
    float _403 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_284) * 4.5));
    float _412 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _283) * _403)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _413 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _414 = isnan(1.0) ? _413 : (isnan(_413) ? 1.0 : min(_413, 1.0));
    float _425 = exp2(log2((1.0 - (((_403 * _403) * _283) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _426 = isnan(0.0) ? _425 : (isnan(_425) ? 0.0 : max(_425, 0.0));
    float _430 = (((isnan(1.0) ? _426 : (isnan(_426) ? 1.0 : min(_426, 1.0))) - _284) * _378) + _284;
    vec4 _442 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = cbMtdParam._m0[12u].x;
    _208[0u] = cbMtdParam._m0[12u].y;
    _209[0u] = cbMtdParam._m0[12u].z;
    _207[1u] = cbMtdParam._m0[13u].x;
    _208[1u] = cbMtdParam._m0[13u].y;
    _209[1u] = cbMtdParam._m0[13u].z;
    _207[2u] = cbMtdParam._m0[14u].x;
    _208[2u] = cbMtdParam._m0[14u].y;
    _209[2u] = cbMtdParam._m0[14u].z;
    _207[3u] = cbMtdParam._m0[15u].x;
    _208[3u] = cbMtdParam._m0[15u].y;
    _209[3u] = cbMtdParam._m0[15u].z;
    _207[4u] = cbMtdParam._m0[16u].x;
    _208[4u] = cbMtdParam._m0[16u].y;
    _209[4u] = cbMtdParam._m0[16u].z;
    _207[5u] = cbMtdParam._m0[11u].x;
    _208[5u] = cbMtdParam._m0[11u].y;
    _209[5u] = cbMtdParam._m0[11u].z;
    float _510 = (_375.x + (-0.02500000037252902984619140625)) * 8.0;
    float _512 = roundEven(_510);
    float _513 = isnan(0.0) ? _512 : (isnan(_512) ? 0.0 : max(_512, 0.0));
    uint _516 = uint(int(isnan(5.0) ? _513 : (isnan(_513) ? 5.0 : min(_513, 5.0))));
    float _203[6];
    float _204[6];
    float _205[6];
    _203[0u] = 1.0;
    _204[0u] = 1.0;
    _205[0u] = 1.0;
    _203[1u] = cbMtdParam._m0[23u].x;
    _204[1u] = cbMtdParam._m0[23u].y;
    _205[1u] = cbMtdParam._m0[23u].z;
    _203[2u] = cbMtdParam._m0[21u].x;
    _204[2u] = cbMtdParam._m0[21u].y;
    _205[2u] = cbMtdParam._m0[21u].z;
    _203[3u] = cbMtdParam._m0[19u].x;
    _204[3u] = cbMtdParam._m0[19u].y;
    _205[3u] = cbMtdParam._m0[19u].z;
    _203[4u] = cbMtdParam._m0[18u].x;
    _204[4u] = cbMtdParam._m0[18u].y;
    _205[4u] = cbMtdParam._m0[18u].z;
    _203[5u] = cbMtdParam._m0[17u].x;
    _204[5u] = cbMtdParam._m0[17u].y;
    _205[5u] = cbMtdParam._m0[17u].z;
    float _605 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _606 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    uint _608 = uint(int(isnan(5.0) ? _606 : (isnan(_606) ? 5.0 : min(_606, 5.0))));
    float _206[6];
    _206[0u] = 1.0;
    _206[1u] = cbMtdParam._m0[23u].w;
    _206[2u] = cbMtdParam._m0[21u].w;
    _206[3u] = cbMtdParam._m0[19u].w;
    _206[4u] = cbMtdParam._m0[18u].w;
    _206[5u] = cbMtdParam._m0[17u].w;
    float _645 = ((((_207[_516] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_203[_608] - _207[_516])) * _206[_516])) * _378) + cbMtdParam._m0[10u].x) * _442.x;
    float _646 = ((((_208[_516] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_204[_608] - _208[_516])) * _206[_516])) * _378) + cbMtdParam._m0[10u].y) * _442.y;
    float _647 = ((((_209[_516] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_205[_608] - _209[_516])) * _206[_516])) * _378) + cbMtdParam._m0[10u].z) * _442.z;
    vec4 _659 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _670 = cbMtdParam._m0[9u].x * _659.x;
    float _671 = cbMtdParam._m0[9u].y * _659.y;
    float _672 = cbMtdParam._m0[9u].z * _659.z;
    float _679 = ((_670 - _645) * _430) + _645;
    float _680 = ((_671 - _646) * _430) + _646;
    float _681 = ((_672 - _647) * _430) + _647;
    vec4 _693 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _713 = (((cbMtdParam._m0[20u].x * _693.x) - _679) * _414) + _679;
    float _714 = (((cbMtdParam._m0[20u].y * _693.y) - _680) * _414) + _680;
    float _715 = (((cbMtdParam._m0[20u].z * _693.z) - _681) * _414) + _681;
    vec4 _727 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _747 = (((cbMtdParam._m0[29u].x * _727.x) - _713) * _392) + _713;
    float _748 = (((cbMtdParam._m0[29u].y * _727.y) - _714) * _392) + _714;
    float _749 = (((cbMtdParam._m0[29u].z * _727.z) - _715) * _392) + _715;
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[30u].x;
    _201[0u] = cbMtdParam._m0[30u].y;
    _202[0u] = cbMtdParam._m0[30u].z;
    _200[1u] = cbMtdParam._m0[28u].x;
    _201[1u] = cbMtdParam._m0[28u].y;
    _202[1u] = cbMtdParam._m0[28u].z;
    _200[2u] = cbMtdParam._m0[27u].x;
    _201[2u] = cbMtdParam._m0[27u].y;
    _202[2u] = cbMtdParam._m0[27u].z;
    _200[3u] = cbMtdParam._m0[26u].x;
    _201[3u] = cbMtdParam._m0[26u].y;
    _202[3u] = cbMtdParam._m0[26u].z;
    _200[4u] = cbMtdParam._m0[25u].x;
    _201[4u] = cbMtdParam._m0[25u].y;
    _202[4u] = cbMtdParam._m0[25u].z;
    _200[5u] = cbMtdParam._m0[24u].x;
    _201[5u] = cbMtdParam._m0[24u].y;
    _202[5u] = cbMtdParam._m0[24u].z;
    float _822 = _200[_516] * _378;
    float _823 = _201[_516] * _378;
    float _824 = _202[_516] * _378;
    float _825 = _822 + ((_306.x * 4.5) * (((_670 - _747) * _379) + _747));
    float _826 = _823 + ((_306.y * 4.5) * (((_671 - _748) * _379) + _748));
    float _827 = _824 + ((_306.z * 4.5) * (((_672 - _749) * _379) + _749));
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[37u].w;
    _196[0u] = cbMtdParam._m0[38u].x;
    _195[1u] = cbMtdParam._m0[39u].w;
    _196[1u] = cbMtdParam._m0[40u].x;
    _195[2u] = cbMtdParam._m0[40u].y;
    _196[2u] = cbMtdParam._m0[40u].z;
    _195[3u] = cbMtdParam._m0[40u].w;
    _196[3u] = cbMtdParam._m0[41u].x;
    _195[4u] = cbMtdParam._m0[41u].y;
    _196[4u] = cbMtdParam._m0[41u].z;
    float _860 = roundEven(5.0 - _510);
    float _861 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _862 = isnan(4.0) ? _861 : (isnan(_861) ? 4.0 : min(_861, 4.0));
    float _864 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    uint _866 = uint(int(isnan(4.0) ? _864 : (isnan(_864) ? 4.0 : min(_864, 4.0))));
    float _875 = ((cbMtdParam._m0[42u].z - _196[_866]) * _430) + _196[_866];
    float _883 = ((cbMtdParam._m0[43u].x - _875) * _414) + _875;
    float _888 = ((cbMtdParam._m0[43u].z - _883) * _392) + _883;
    float _893 = ((cbMtdParam._m0[39u].z - _888) * _379) + _888;
    vec4 _909 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _911 = _909.x;
    float _912 = _909.y;
    float _914 = _909.z + _195[_866];
    vec4 _926 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _934 = (((cbMtdParam._m0[42u].y - _914) + _926.z) * _430) + _914;
    vec4 _946 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _954 = (((cbMtdParam._m0[42u].w - _934) + _946.z) * _414) + _934;
    float _960 = ((((_283 * 2.0) * _954) - _954) * cbMtdParam._m0[34u].x) + _954;
    vec4 _972 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _980 = (((_972.z + cbMtdParam._m0[43u].y) - _960) * _392) + _960;
    float _984 = (((cbMtdParam._m0[39u].y + _339.z) - _980) * _379) + _980;
    float _1015 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1046 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1015 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1019 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1063 = (-0.0) - ((_1019 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1067 = (_1019 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1068 = isnan(_1067) ? _1063 : (isnan(_1063) ? _1067 : min(_1063, _1067));
    float _4167 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
    float _1069 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _1095 = ((_926.x - _911) * _430) + _911;
    float _1096 = ((_926.y - _912) * _430) + _912;
    float _1101 = ((_946.x - _1095) * _414) + _1095;
    float _1102 = ((_946.y - _1096) * _414) + _1096;
    float _1107 = ((_972.x - _1101) * _392) + _1101;
    float _1108 = ((_972.y - _1102) * _392) + _1102;
    float _1117 = ((((_339.x - _1107) * _379) + _1107) * 2.0) + (-1.0);
    float _1118 = ((((_339.y - _1108) * _379) + _1108) * 2.0) + (-1.0);
    float _1119 = dot(vec2(_1117, _1118), vec2(_1117, _1118));
    float _4178 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
    float _1124 = sqrt(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))));
    float _1127 = (cbMtdParam._m0[34u].z * ((_278.x * 2.0) + (-1.0))) + _1117;
    float _1128 = (cbMtdParam._m0[34u].z * ((_278.y * 2.0) + (-1.0))) + _1118;
    float _1131 = fma(_1124, _249 * NORMAL.x, fma(_1128, _256 * TANGENT.x, (_242 * _234) * _1127));
    float _1134 = fma(_1124, _249 * NORMAL.y, fma(_1128, _256 * TANGENT.y, (_242 * _235) * _1127));
    float _1137 = fma(_1124, _249 * NORMAL.z, fma(_1128, _256 * TANGENT.z, (_242 * _236) * _1127));
    float _1141 = inversesqrt(dot(vec3(_1131, _1134, _1137), vec3(_1131, _1134, _1137)));
    float _1142 = _1141 * _1131;
    float _1143 = _1141 * _1134;
    float _1144 = _1141 * _1137;
    float _4189 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
    float _1145 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _4211 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _4222 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4233 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _1149 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _1165 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1185 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1195 = cbSceneParam._m0[71u].x - (_1015 / _1185);
    float _1196 = cbSceneParam._m0[71u].y - (_1019 / _1185);
    float _1197 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1185);
    float _1201 = inversesqrt(dot(vec3(_1195, _1196, _1197), vec3(_1195, _1196, _1197)));
    float _1202 = _1195 * _1201;
    float _1203 = _1196 * _1201;
    float _1204 = _1197 * _1201;
    float _1210 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1211 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1213 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1215 = _1213.w;
    float _1233 = fma(_1144, cbSceneParam._m0[5u].z, fma(_1143, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1142));
    float _1236 = fma(_1144, cbSceneParam._m0[6u].z, fma(_1143, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1142));
    float _1239 = fma(_1144, cbSceneParam._m0[7u].z, fma(_1143, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1142));
    vec4 _1241 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1252 = (((_1241.y - _1145) + (_1241.w * _1145)) * cbMtdParam._m0[3u].x) + _1145;
    uint _1265 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1266 = _1265 + 9u;
    uint _1267 = _1266 + uint(cbMatDynParam._m0[0u].w);
    float _1273 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0)))) * cbInstanceData._m0[_1267].x;
    float _1274 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) * cbInstanceData._m0[_1267].y;
    float _1275 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * cbInstanceData._m0[_1267].z;
    float _4244 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _1276 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
    float _4255 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
    float _1277 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
    float _4266 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
    float _1278 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
    vec4 _1279 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1284 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1295 = (((_1284.x - _1149) + (_1284.w * _1149)) * cbMtdParam._m0[3u].x) + _1149;
    float _1308 = (cbMtdParam._m0[3u].x * (((_1276 * _1215) - _1276) + _1279.x)) + _1276;
    float _1309 = (cbMtdParam._m0[3u].x * (((_1277 * _1215) - _1277) + _1279.y)) + _1277;
    float _1310 = (cbMtdParam._m0[3u].x * (((_1278 * _1215) - _1278) + _1279.z)) + _1278;
    float _1311 = 1.0 - _1295;
    float _1312 = _1311 * _1308;
    float _1313 = _1311 * _1309;
    float _1314 = _1311 * _1310;
    float _1319 = (_1308 + (-0.039999999105930328369140625)) * _1295;
    float _1320 = (_1309 + (-0.039999999105930328369140625)) * _1295;
    float _1321 = (_1310 + (-0.039999999105930328369140625)) * _1295;
    float _1322 = _1319 + 0.039999999105930328369140625;
    float _1324 = _1320 + 0.039999999105930328369140625;
    float _1325 = _1321 + 0.039999999105930328369140625;
    vec4 _1334 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1210, cbSceneParam._m0[86u].y * _1211));
    float _1337 = _1334.x * TEXCOORD_5.w;
    float _1338 = dot(vec3(_1142, _1143, _1144), vec3(_1202, _1203, _1204));
    float _1341 = _1338 * 2.0;
    float _1345 = (_1341 * _1142) - _1202;
    float _1346 = (_1341 * _1143) - _1203;
    float _1347 = (_1341 * _1144) - _1204;
    float _1351 = abs(dot(vec3(_1202, _1203, _1204), vec3(_1142, _1143, _1144)));
    float _4277 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
    float _1353 = sqrt(_1252);
    float _1364 = exp2((_1353 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1353 * 3.0));
    float _1370 = (1.0 - _1364) * ((_1353 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1371 = _1364 * _1353;
    float _1399 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1403 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1407 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1705;
    float _1707;
    float _1708;
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1432 = fma(_1407, cbModelParam._m0[26u].z, fma(_1403, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1399));
        float _1436 = fma(_1407, cbModelParam._m0[27u].z, fma(_1403, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1399));
        float _1440 = fma(_1407, cbModelParam._m0[28u].z, fma(_1403, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1399));
        float _1464 = _1399 + _1142;
        float _1465 = _1403 + _1143;
        float _1466 = _1407 + _1144;
        float _1476 = fma(_1466, cbModelParam._m0[26u].z, fma(_1465, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1464)) - _1432;
        float _1477 = fma(_1466, cbModelParam._m0[27u].z, fma(_1465, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1464)) - _1436;
        float _1478 = fma(_1466, cbModelParam._m0[28u].z, fma(_1465, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1464)) - _1440;
        float _1482 = inversesqrt(dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478)));
        float _1494 = ((_1482 * _1476) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1432 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1495 = ((_1482 * _1477) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1436 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1496 = ((_1482 * _1478) / cbModelParam._m0[34u].z) + ((((((_1440 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1499 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1494, _1495, _1496), 0.0);
        float _1533 = exp2((_1499.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1499.x + (-0.5));
        float _1535 = _1533 * (_1499.y + (-0.5));
        float _1536 = _1533 * (_1499.z + (-0.5));
        float _1543 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1506.x + (-0.5));
        float _1545 = _1543 * (_1506.y + (-0.5));
        float _1546 = _1543 * (_1506.z + (-0.5));
        float _1553 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1513.x + (-0.5));
        float _1555 = _1553 * (_1513.y + (-0.5));
        float _1556 = _1553 * (_1513.z + (-0.5));
        float _1563 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1520.x + (-0.5));
        float _1565 = _1563 * (_1520.y + (-0.5));
        float _1566 = _1563 * (_1520.z + (-0.5));
        float _1567 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1568 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1569 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1570 = _1534 * 0.5;
        float _1571 = _1544 * 0.5;
        float _1572 = _1554 * 0.5;
        float _1573 = dot(vec3(_1570, _1571, _1572), vec3(_1570, _1571, _1572));
        float _1578 = (_1573 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1573);
        float _1587 = (dot(vec3(_1142, _1143, _1144), vec3(_1578 * _1570, _1578 * _1571, _1578 * _1572)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1597 = sqrt(((_1571 * _1571) + (_1570 * _1570)) + (_1572 * _1572)) / (_1567 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1598 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1599 = _1598 * 2.0;
        float _1603 = (1.0 - _1598) / (_1598 + 1.0);
        float _4325 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1613 = ((((1.0 - _1604) * (_1599 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1599 + 1.0))) + _1604) * _1567;
        float _1614 = _1535 * 0.5;
        float _1615 = _1545 * 0.5;
        float _1616 = _1555 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1630 = (dot(vec3(_1142, _1143, _1144), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
        float _1639 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1568 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4358 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1641 + 1.0))) + _1646) * _1568;
        float _1656 = _1536 * 0.5;
        float _1657 = _1546 * 0.5;
        float _1658 = _1556 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_1142, _1143, _1144), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4369 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1569 + 9.9999997473787516355514526367188e-06);
        float _4380 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4391 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * (_1683 + 1.0))) + _1688) * _1569;
        _1705 = _1536;
        _1707 = _1535;
        _1708 = _1534;
        _1709 = _1546;
        _1710 = _1545;
        _1711 = _1544;
        _1712 = _1556;
        _1713 = _1555;
        _1714 = _1554;
        _1715 = _1569;
        _1716 = _1568;
        _1717 = _1567;
        _1718 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)));
        _1719 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1720 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
    }
    else
    {
        _1705 = _1706;
        _1707 = _1706;
        _1708 = _1706;
        _1709 = _1706;
        _1710 = _1706;
        _1711 = _1706;
        _1712 = _1706;
        _1713 = _1706;
        _1714 = _1706;
        _1715 = _1706;
        _1716 = _1706;
        _1717 = _1706;
        _1718 = 0.0;
        _1719 = 0.0;
        _1720 = 0.0;
    }
    float _2010;
    float _2011;
    float _2012;
    float _2013;
    float _2014;
    float _2015;
    float _2016;
    float _2017;
    float _2018;
    float _2019;
    float _2020;
    float _2021;
    float _2022;
    float _2023;
    float _2024;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1743 = fma(_1407, cbModelParam._m0[30u].z, fma(_1403, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1399));
        float _1747 = fma(_1407, cbModelParam._m0[31u].z, fma(_1403, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1399));
        float _1751 = fma(_1407, cbModelParam._m0[32u].z, fma(_1403, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1399));
        float _1773 = _1399 + _1142;
        float _1774 = _1403 + _1143;
        float _1775 = _1407 + _1144;
        float _1785 = fma(_1775, cbModelParam._m0[30u].z, fma(_1774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1773)) - _1743;
        float _1786 = fma(_1775, cbModelParam._m0[31u].z, fma(_1774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1773)) - _1747;
        float _1787 = fma(_1775, cbModelParam._m0[32u].z, fma(_1774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1773)) - _1751;
        float _1791 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
        float _1803 = ((_1791 * _1785) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1743 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1804 = ((_1791 * _1786) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1747 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1805 = ((_1791 * _1787) / cbModelParam._m0[35u].z) + ((((((_1751 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1807 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1803, _1804, _1805), 0.0);
        vec4 _1814 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1803, _1804, _1805), 0.0);
        vec4 _1821 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1803, _1804, _1805), 0.0);
        vec4 _1828 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1803, _1804, _1805), 0.0);
        float _1840 = exp2((_1807.w + (-0.5)) * 20.0) * 2.0;
        float _1841 = _1840 * (_1807.x + (-0.5));
        float _1842 = _1840 * (_1807.y + (-0.5));
        float _1843 = _1840 * (_1807.z + (-0.5));
        float _1850 = exp2((_1814.w + (-0.5)) * 20.0) * 2.0;
        float _1851 = _1850 * (_1814.x + (-0.5));
        float _1852 = _1850 * (_1814.y + (-0.5));
        float _1853 = _1850 * (_1814.z + (-0.5));
        float _1860 = exp2((_1821.w + (-0.5)) * 20.0) * 2.0;
        float _1861 = _1860 * (_1821.x + (-0.5));
        float _1862 = _1860 * (_1821.y + (-0.5));
        float _1863 = _1860 * (_1821.z + (-0.5));
        float _1870 = exp2((_1828.w + (-0.5)) * 20.0) * 2.0;
        float _1871 = _1870 * (_1828.x + (-0.5));
        float _1872 = _1870 * (_1828.y + (-0.5));
        float _1873 = _1870 * (_1828.z + (-0.5));
        float _1874 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
        float _1875 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
        float _1876 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
        float _1877 = _1841 * 0.5;
        float _1878 = _1851 * 0.5;
        float _1879 = _1861 * 0.5;
        float _1880 = dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879));
        float _1885 = (_1880 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1880);
        float _1893 = (dot(vec3(_1142, _1143, _1144), vec3(_1885 * _1877, _1885 * _1878, _1885 * _1879)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
        float _1902 = sqrt(((_1878 * _1878) + (_1877 * _1877)) + (_1879 * _1879)) / (_1874 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1904 = _1903 * 2.0;
        float _1908 = (1.0 - _1903) / (_1903 + 1.0);
        float _4454 = isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0));
        float _1909 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1918 = ((((1.0 - _1909) * (_1904 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1904 + 1.0))) + _1909) * _1874;
        float _1919 = _1842 * 0.5;
        float _1920 = _1852 * 0.5;
        float _1921 = _1862 * 0.5;
        float _1922 = dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921));
        float _1927 = (_1922 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1922);
        float _1935 = (dot(vec3(_1142, _1143, _1144), vec3(_1927 * _1919, _1927 * _1920, _1927 * _1921)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
        float _1944 = sqrt(((_1920 * _1920) + (_1919 * _1919)) + (_1921 * _1921)) / (_1875 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1946 = _1945 * 2.0;
        float _1950 = (1.0 - _1945) / (_1945 + 1.0);
        float _4487 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1951 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1960 = ((((1.0 - _1951) * (_1946 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1946 + 1.0))) + _1951) * _1875;
        float _1961 = _1843 * 0.5;
        float _1962 = _1853 * 0.5;
        float _1963 = _1863 * 0.5;
        float _1964 = dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963));
        float _1969 = (_1964 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1964);
        float _1977 = (dot(vec3(_1142, _1143, _1144), vec3(_1969 * _1961, _1969 * _1962, _1969 * _1963)) + 1.0) * 0.5;
        float _4498 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1986 = sqrt(((_1962 * _1962) + (_1961 * _1961)) + (_1963 * _1963)) / (_1876 + 9.9999997473787516355514526367188e-06);
        float _4509 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1987 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
        float _1988 = _1987 * 2.0;
        float _1992 = (1.0 - _1987) / (_1987 + 1.0);
        float _4520 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        float _1993 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2002 = ((((1.0 - _1993) * (_1988 + 2.0)) * exp2(log2(isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0))) * (_1988 + 1.0))) + _1993) * _1876;
        _2010 = _1843;
        _2011 = _1842;
        _2012 = _1841;
        _2013 = _1853;
        _2014 = _1852;
        _2015 = _1851;
        _2016 = _1863;
        _2017 = _1862;
        _2018 = _1861;
        _2019 = _1876;
        _2020 = _1875;
        _2021 = _1874;
        _2022 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0)));
        _2023 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0)));
        _2024 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0)));
    }
    else
    {
        _2010 = _1706;
        _2011 = _1706;
        _2012 = _1706;
        _2013 = _1706;
        _2014 = _1706;
        _2015 = _1706;
        _2016 = _1706;
        _2017 = _1706;
        _2018 = _1706;
        _2019 = _1706;
        _2020 = _1706;
        _2021 = _1706;
        _2022 = 0.0;
        _2023 = 0.0;
        _2024 = 0.0;
    }
    float _2034 = (cbModelParam._m0[1u].x * (_2022 - _1718)) + _1718;
    float _2035 = (cbModelParam._m0[1u].x * (_2023 - _1719)) + _1719;
    float _2036 = (cbModelParam._m0[1u].x * (_2024 - _1720)) + _1720;
    float _2057 = fma(_2036, cbSceneParam._m0[89u].z, fma(_2035, cbSceneParam._m0[89u].y, _2034 * cbSceneParam._m0[89u].x));
    float _2060 = fma(_2036, cbSceneParam._m0[90u].z, fma(_2035, cbSceneParam._m0[90u].y, _2034 * cbSceneParam._m0[90u].x));
    float _2063 = fma(_2036, cbSceneParam._m0[91u].z, fma(_2035, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2034));
    float _2076 = _1345 * 0.5;
    float _2077 = _1346 * 0.5;
    float _2078 = _1347 * 0.5;
    float _2079 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_2012, _2015, _2018, _2021));
    float _2082 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_2011, _2014, _2017, _2020));
    float _2085 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_2010, _2013, _2016, _2019));
    float _2119;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2092 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_1705, _1709, _1712, _1715));
        float _2096 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_1707, _1710, _1713, _1716));
        float _2100 = dot(vec4(_2076, _2077, _2078, 1.0), vec4(_1708, _1711, _1714, _1717));
        float _2107 = dot(vec4(cbModelParam._m0[39u]), vec4(_2076, _2077, _2078, 1.0));
        _2119 = dot(vec3(isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0)), isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0)), isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2107) ? 0.0 : (isnan(0.0) ? _2107 : max(0.0, _2107))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2119 = 1.0;
    }
    float _2130;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2121 = dot(vec4(cbModelParam._m0[40u]), vec4(_2076, _2077, _2078, 1.0));
        _2130 = dot(vec3(isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0)), isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0)), isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2121) ? 0.0 : (isnan(0.0) ? _2121 : max(0.0, _2121))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2130 = 1.0;
    }
    float _2134 = (_2130 * cbModelParam._m0[1u].x) + (_2119 * (1.0 - cbModelParam._m0[1u].x));
    float _2144 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1252);
    float _2145 = isnan(_2144) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2144 : min(cbModelParam._m0[25u].z, _2144));
    float _2225;
    float _2227;
    float _2229;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2192 = fma(_1407, cbModelParam._m0[13u].z, fma(_1403, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1399)) + cbModelParam._m0[13u].w;
        float _2196 = fma(_1407, cbModelParam._m0[14u].z, fma(_1403, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1399)) + cbModelParam._m0[14u].w;
        float _2200 = fma(_1407, cbModelParam._m0[15u].z, fma(_1403, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1399)) + cbModelParam._m0[15u].w;
        float _2203 = fma(_1347, cbModelParam._m0[13u].z, fma(_1346, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1345));
        float _2206 = fma(_1347, cbModelParam._m0[14u].z, fma(_1346, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1345));
        float _2209 = fma(_1347, cbModelParam._m0[15u].z, fma(_1346, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1345));
        float _2237;
        if (_2203 > 0.0)
        {
            _2237 = abs((1.0 - _2192) / _2203);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2203 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2192 + 1.0) / _2203);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2237 = frontier_phi_14_12_ladder;
        }
        float _2439;
        if (_2206 > 0.0)
        {
            _2439 = abs((1.0 - _2196) / _2206);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2206 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2196 + 1.0) / _2206);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2439 = frontier_phi_23_19_ladder;
        }
        float _2693;
        if (_2209 > 0.0)
        {
            _2693 = abs((1.0 - _2200) / _2209);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2209 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2200 + 1.0) / _2209);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2693 = frontier_phi_35_30_ladder;
        }
        float _2695 = isnan(_2439) ? _2237 : (isnan(_2237) ? _2439 : min(_2237, _2439));
        float _2696 = isnan(_2693) ? _2695 : (isnan(_2695) ? _2693 : min(_2695, _2693));
        float _2700 = (_2696 * _2203) + _2192;
        float _2701 = (_2696 * _2206) + _2196;
        float _2702 = (_2696 * _2209) + _2200;
        float _2703 = _2696 * 9.9999997473787516355514526367188e-05;
        float _2705 = (-1.0) - _2703;
        float _2707 = _2703 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2702 > _2707) || ((_2702 < _2705) || ((_2701 > _2707) || ((_2701 < _2705) || ((_2700 < _2705) || (_2700 > _2707))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2830 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2702, cbModelParam._m0[9u].z, fma(_2701, cbModelParam._m0[9u].y, _2700 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2702, cbModelParam._m0[10u].z, fma(_2701, cbModelParam._m0[10u].y, _2700 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2702, cbModelParam._m0[11u].z, fma(_2701, cbModelParam._m0[11u].y, _2700 * cbModelParam._m0[11u].x))), _2145);
            frontier_phi_13_35_ladder = _2830.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2830.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2830.x * cbModelParam._m0[1u].y;
        }
        _2225 = frontier_phi_13_35_ladder_2;
        _2227 = frontier_phi_13_35_ladder_1;
        _2229 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2213 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1345, _1346, _1347), _2145);
        _2225 = _2213.x * cbModelParam._m0[1u].y;
        _2227 = _2213.y * cbModelParam._m0[1u].y;
        _2229 = _2213.z * cbModelParam._m0[1u].y;
    }
    float _2233 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1252);
    float _2234 = isnan(_2233) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2233 : min(cbModelParam._m0[25u].w, _2233));
    float _2323;
    float _2325;
    float _2327;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2287 = fma(_1407, cbModelParam._m0[21u].z, fma(_1403, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1399)) + cbModelParam._m0[21u].w;
        float _2291 = fma(_1407, cbModelParam._m0[22u].z, fma(_1403, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1399)) + cbModelParam._m0[22u].w;
        float _2295 = fma(_1407, cbModelParam._m0[23u].z, fma(_1403, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1399)) + cbModelParam._m0[23u].w;
        float _2298 = fma(_1347, cbModelParam._m0[21u].z, fma(_1346, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1345));
        float _2301 = fma(_1347, cbModelParam._m0[22u].z, fma(_1346, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1345));
        float _2304 = fma(_1347, cbModelParam._m0[23u].z, fma(_1346, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1345));
        float _2444;
        if (_2298 > 0.0)
        {
            _2444 = abs((1.0 - _2287) / _2298);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2298 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2287 + 1.0) / _2298);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2444 = frontier_phi_25_21_ladder;
        }
        float _2720;
        if (_2301 > 0.0)
        {
            _2720 = abs((1.0 - _2291) / _2301);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2301 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2291 + 1.0) / _2301);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2720 = frontier_phi_37_32_ladder;
        }
        float _2933;
        if (_2304 > 0.0)
        {
            _2933 = abs((1.0 - _2295) / _2304);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2304 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2295 + 1.0) / _2304);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2933 = frontier_phi_46_43_ladder;
        }
        float _2935 = isnan(_2720) ? _2444 : (isnan(_2444) ? _2720 : min(_2444, _2720));
        float _2936 = isnan(_2933) ? _2935 : (isnan(_2935) ? _2933 : min(_2935, _2933));
        float _2940 = (_2936 * _2298) + _2287;
        float _2941 = (_2936 * _2301) + _2291;
        float _2942 = (_2936 * _2304) + _2295;
        float _2943 = _2936 * 9.9999997473787516355514526367188e-05;
        float _2944 = (-1.0) - _2943;
        float _2946 = _2943 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2942 > _2946) || ((_2942 < _2944) || ((_2941 > _2946) || ((_2941 < _2944) || ((_2940 < _2944) || (_2940 > _2946))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3170 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2942, cbModelParam._m0[17u].z, fma(_2941, cbModelParam._m0[17u].y, _2940 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2942, cbModelParam._m0[18u].z, fma(_2941, cbModelParam._m0[18u].y, _2940 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2942, cbModelParam._m0[19u].z, fma(_2941, cbModelParam._m0[19u].y, _2940 * cbModelParam._m0[19u].x))), _2234);
            frontier_phi_22_46_ladder = _3170.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _3170.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _3170.x * cbModelParam._m0[1u].z;
        }
        _2323 = frontier_phi_22_46_ladder_2;
        _2325 = frontier_phi_22_46_ladder_1;
        _2327 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2307 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1345, _1346, _1347), _2234);
        _2323 = _2307.x * cbModelParam._m0[1u].z;
        _2325 = _2307.y * cbModelParam._m0[1u].z;
        _2327 = _2307.z * cbModelParam._m0[1u].z;
    }
    float _2340 = (((_1370 * _1322) + _1371) * _1337) * ((cbModelParam._m0[1u].w * (_2323 - _2225)) + _2225);
    float _2342 = (((_1370 * _1324) + _1371) * _1337) * ((cbModelParam._m0[1u].w * (_2325 - _2227)) + _2227);
    float _2344 = (((_1370 * _1325) + _1371) * _1337) * ((cbModelParam._m0[1u].w * (_2327 - _2229)) + _2229);
    float _2347 = fma(_2344, cbSceneParam._m0[89u].z, fma(_2342, cbSceneParam._m0[89u].y, _2340 * cbSceneParam._m0[89u].x));
    float _2350 = fma(_2344, cbSceneParam._m0[90u].z, fma(_2342, cbSceneParam._m0[90u].y, _2340 * cbSceneParam._m0[90u].x));
    float _2353 = fma(_2344, cbSceneParam._m0[91u].z, fma(_2342, cbSceneParam._m0[91u].y, _2340 * cbSceneParam._m0[91u].x));
    uvec4 _2363 = floatBitsToUint(cbInstanceData._m0[_1265 + 5u]);
    uint _2365 = _2363.x * 14u;
    uint _2366 = _2365 + 13u;
    float _2373 = _1337 + (-1.0);
    float _2378 = (cbLight._m0[_2366].x * _2373) + 1.0;
    float _2379 = (cbLight._m0[_2366].y * _2373) + 1.0;
    float _2380 = (cbLight._m0[_2366].z * _2373) + 1.0;
    float _2381 = (cbLight._m0[_2366].w * _2373) + 1.0;
    uint _2382 = _2365 + 5u;
    float _2388 = isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0));
    uint _2392 = _2365 + 4u;
    float _2398 = isnan(1.0) ? _2378 : (isnan(_2378) ? 1.0 : min(_2378, 1.0));
    uint _2402 = _2365 | 1u;
    float _2413 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_1142, _1143, _1144));
    float _2416 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_1142, _1143, _1144));
    float _4656 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
    float _4667 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
    float _2421 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * 0.3183098733425140380859375;
    float _2423 = (isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0))) * 0.3183098733425140380859375;
    float _2430 = ((cbLight._m0[_2382].x * _2388) * _2423) + ((cbLight._m0[_2392].x * _2398) * _2421);
    float _2431 = ((_2388 * cbLight._m0[_2382].y) * _2423) + ((_2398 * cbLight._m0[_2392].y) * _2421);
    float _2432 = ((_2388 * cbLight._m0[_2382].z) * _2423) + ((_2398 * cbLight._m0[_2392].z) * _2421);
    uvec4 _2436 = floatBitsToUint(cbLight._m0[_2365 + 12u]);
    bool _2438 = _2436.x == 0u;
    float _2449;
    float _2451;
    float _2453;
    if (_2438)
    {
        _2449 = _2430;
        _2451 = _2431;
        _2453 = _2432;
    }
    else
    {
        uint _2457 = _2365 + 6u;
        float _2473 = (dot(vec3(cbLight._m0[_2365 + 2u].xyz), vec3(_1142, _1143, _1144)) * 0.5) + 0.5;
        float _2474 = _2473 * _2473;
        float _4678 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
        float _2475 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2476 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
        _2449 = (((cbLight._m0[_2457].x * 0.3183098733425140380859375) * _2475) * _2476) + _2430;
        _2451 = (((cbLight._m0[_2457].y * 0.3183098733425140380859375) * _2475) * _2476) + _2431;
        _2453 = (((cbLight._m0[_2457].z * 0.3183098733425140380859375) * _2475) * _2476) + _2432;
    }
    bool _2456 = _2436.y == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2456)
    {
        _2494 = _2449;
        _2496 = _2451;
        _2498 = _2453;
    }
    else
    {
        uint _2664 = _2365 + 7u;
        float _2680 = (dot(vec3(cbLight._m0[_2365 + 3u].xyz), vec3(_1142, _1143, _1144)) * 0.5) + 0.5;
        float _2681 = _2680 * _2680;
        float _4694 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2682 = isnan(1.0) ? _4694 : (isnan(_4694) ? 1.0 : min(_4694, 1.0));
        float _2683 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
        _2494 = (((cbLight._m0[_2664].x * 0.3183098733425140380859375) * _2682) * _2683) + _2449;
        _2496 = (((cbLight._m0[_2664].y * 0.3183098733425140380859375) * _2682) * _2683) + _2451;
        _2498 = (((cbLight._m0[_2664].z * 0.3183098733425140380859375) * _2682) * _2683) + _2453;
    }
    uint _2501 = _2365 + 8u;
    float _2514 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _1252) * 0.949999988079071044921875);
    float _2515 = _2514 * _2514;
    float _2516 = cbLight._m0[_2365].x + _1202;
    float _2517 = cbLight._m0[_2365].y + _1203;
    float _2518 = cbLight._m0[_2365].z + _1204;
    float _2522 = inversesqrt(dot(vec3(_2516, _2517, _2518), vec3(_2516, _2517, _2518)));
    float _2523 = _2522 * _2516;
    float _2524 = _2522 * _2517;
    float _2525 = _2522 * _2518;
    float _2526 = dot(vec3(_1142, _1143, _1144), vec3(cbLight._m0[_2365].xyz));
    float _4710 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
    float _2529 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
    float _4721 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
    float _2530 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
    float _2531 = dot(vec3(_1142, _1143, _1144), vec3(_2523, _2524, _2525));
    float _4732 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0));
    float _2534 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
    float _2535 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2523, _2524, _2525));
    float _4743 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
    float _2539 = _2515 * _2515;
    float _2543 = ((_2534 * _2534) * (_2539 + (-1.0))) + 1.0;
    float _2551 = exp2(log2(1.0 - (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) * 5.0);
    float _2552 = 0.959999978542327880859375 - _1319;
    float _2554 = 0.959999978542327880859375 - _1320;
    float _2555 = 0.959999978542327880859375 - _1321;
    float _2562 = 1.0 - _2515;
    float _2573 = (0.5 / (((_2530 * ((_2529 * _2562) + _2515)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2562) + _2515) * _2529))) * _2529;
    float _4754 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
    float _2575 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_2539 / ((_2543 * _2543) * 3.141590118408203125));
    uint _2586 = _2365 + 9u;
    float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2402].w)) * _1252) * 0.949999988079071044921875);
    float _2598 = _2597 * _2597;
    float _2599 = cbLight._m0[_2402].x + _1202;
    float _2600 = cbLight._m0[_2402].y + _1203;
    float _2601 = cbLight._m0[_2402].z + _1204;
    float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
    float _2606 = _2605 * _2599;
    float _2607 = _2605 * _2600;
    float _2608 = _2605 * _2601;
    float _2609 = dot(vec3(_1142, _1143, _1144), vec3(cbLight._m0[_2402].xyz));
    float _4765 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2612 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
    float _2613 = dot(vec3(_1142, _1143, _1144), vec3(_2606, _2607, _2608));
    float _4776 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
    float _2616 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
    float _2617 = dot(vec3(cbLight._m0[_2402].xyz), vec3(_2606, _2607, _2608));
    float _4787 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
    float _2621 = _2598 * _2598;
    float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
    float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0)))) * 5.0);
    float _2639 = 1.0 - _2598;
    float _2649 = (0.5 / (((_2530 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2639) + _2598) * _2612))) * _2612;
    float _4798 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
    float _2651 = (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
    float _2661 = (((((_2632 * _2552) + _1322) * cbLight._m0[_2586].x) * _2651) * _2388) + (((((_2551 * _2552) + _1322) * cbLight._m0[_2501].x) * _2575) * _2398);
    float _2662 = (((((_2632 * _2554) + _1324) * cbLight._m0[_2586].y) * _2651) * _2388) + (((((_2551 * _2554) + _1324) * cbLight._m0[_2501].y) * _2575) * _2398);
    float _2663 = (((((_2632 * _2555) + _1325) * cbLight._m0[_2586].z) * _2651) * _2388) + (((((_2551 * _2555) + _1325) * cbLight._m0[_2501].z) * _2575) * _2398);
    float _2725;
    float _2727;
    float _2729;
    if (_2438)
    {
        _2725 = _2661;
        _2727 = _2662;
        _2729 = _2663;
    }
    else
    {
        uint _2731 = _2365 + 2u;
        uint _2735 = _2365 + 10u;
        float _2749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2731].w)) * _1252) * 0.949999988079071044921875);
        float _2750 = _2749 * _2749;
        float _2751 = cbLight._m0[_2731].x + _1202;
        float _2752 = cbLight._m0[_2731].y + _1203;
        float _2753 = cbLight._m0[_2731].z + _1204;
        float _2757 = inversesqrt(dot(vec3(_2751, _2752, _2753), vec3(_2751, _2752, _2753)));
        float _2758 = _2757 * _2751;
        float _2759 = _2757 * _2752;
        float _2760 = _2757 * _2753;
        float _2761 = dot(vec3(_1142, _1143, _1144), vec3(cbLight._m0[_2731].xyz));
        float _4809 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _2765 = dot(vec3(_1142, _1143, _1144), vec3(_2758, _2759, _2760));
        float _4820 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2768 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
        float _2769 = dot(vec3(cbLight._m0[_2731].xyz), vec3(_2758, _2759, _2760));
        float _4831 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
        float _2773 = _2750 * _2750;
        float _2777 = ((_2768 * _2768) * (_2773 + (-1.0))) + 1.0;
        float _2784 = exp2(log2(1.0 - (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) * 5.0);
        float _2791 = 1.0 - _2750;
        float _2801 = (0.5 / (((_2530 * ((_2764 * _2791) + _2750)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2791) + _2750) * _2764))) * _2764;
        float _4842 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2803 = (isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0))) * (_2773 / ((_2777 * _2777) * 3.141590118408203125));
        float _2804 = isnan(1.0) ? _2380 : (isnan(_2380) ? 1.0 : min(_2380, 1.0));
        _2725 = (((((_2784 * _2552) + _1322) * cbLight._m0[_2735].x) * _2803) * _2804) + _2661;
        _2727 = (((((_2784 * _2554) + _1324) * cbLight._m0[_2735].y) * _2803) * _2804) + _2662;
        _2729 = (((((_2784 * _2555) + _1325) * cbLight._m0[_2735].z) * _2803) * _2804) + _2663;
    }
    float _2839;
    float _2841;
    float _2843;
    if (_2456)
    {
        _2839 = _2725;
        _2841 = _2727;
        _2843 = _2729;
    }
    else
    {
        uint _2850 = _2365 + 3u;
        uint _2854 = _2365 + 11u;
        float _2868 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2850].w)) * _1252) * 0.949999988079071044921875);
        float _2869 = _2868 * _2868;
        float _2870 = cbLight._m0[_2850].x + _1202;
        float _2871 = cbLight._m0[_2850].y + _1203;
        float _2872 = cbLight._m0[_2850].z + _1204;
        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
        float _2877 = _2876 * _2870;
        float _2878 = _2876 * _2871;
        float _2879 = _2876 * _2872;
        float _2880 = dot(vec3(_1142, _1143, _1144), vec3(cbLight._m0[_2850].xyz));
        float _4858 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2883 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
        float _2884 = dot(vec3(_1142, _1143, _1144), vec3(_2877, _2878, _2879));
        float _4869 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
        float _2887 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
        float _2888 = dot(vec3(cbLight._m0[_2850].xyz), vec3(_2877, _2878, _2879));
        float _4880 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
        float _2892 = _2869 * _2869;
        float _2896 = ((_2887 * _2887) * (_2892 + (-1.0))) + 1.0;
        float _2903 = exp2(log2(1.0 - (isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0)))) * 5.0);
        float _2910 = 1.0 - _2869;
        float _2920 = (0.5 / (((_2530 * ((_2883 * _2910) + _2869)) + 9.9999999392252902907785028219223e-09) + (((_2530 * _2910) + _2869) * _2883))) * _2883;
        float _4891 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
        float _2922 = (isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0))) * (_2892 / ((_2896 * _2896) * 3.141590118408203125));
        float _2923 = isnan(1.0) ? _2381 : (isnan(_2381) ? 1.0 : min(_2381, 1.0));
        _2839 = (((((_2903 * _2552) + _1322) * cbLight._m0[_2854].x) * _2922) * _2923) + _2725;
        _2841 = (((((_2903 * _2554) + _1324) * cbLight._m0[_2854].y) * _2922) * _2923) + _2727;
        _2843 = (((((_2903 * _2555) + _1325) * cbLight._m0[_2854].z) * _2922) * _2923) + _2729;
    }
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    float _3066;
    float _3068;
    if (_2363.y == 0u)
    {
        float _2998 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2999 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2998;
        float _3000 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2998;
        float _3001 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2998;
        uvec4 _3013 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3014 = _3013.x;
        uint _3025 = uint((float(_3013.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1211) / _3014))) + floor(float(uint(cbSceneParam._m0[85u].x * _1210) / _3014)));
        float _3035 = (log2(_3001 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3036 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        uint _3039 = uint(isnan(14.0) ? _3036 : (isnan(_3036) ? 14.0 : min(_3036, 14.0)));
        uvec4 _3044 = texelFetch(g_lightClusterGridBuffer, int(((_3039 << 2u) + (_3025 << 6u)) >> 2u));
        uint _3045 = _3044.x;
        uint _3046 = _3013.z;
        float _3175;
        float _3177;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        if (((((1u << ((_3046 >> 4u) & 15u)) + 4294967295u) & _3045) == 0u) || ((_3046 & 240u) == 0u))
        {
            _3175 = 0.0;
            _3177 = 0.0;
            _3179 = 0.0;
            _3181 = 0.0;
            _3183 = 0.0;
            _3185 = 0.0;
        }
        else
        {
            float _3176;
            float _3178;
            float _3180;
            float _3182;
            float _3184;
            float _3186;
            float _3327 = 0.0;
            float _3328 = 0.0;
            float _3329 = 0.0;
            float _3330 = 0.0;
            float _3331 = 0.0;
            float _3332 = 0.0;
            uint _3333 = 0u;
            uint _3342;
            bool _3343;
            for (;;)
            {
                _3342 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3333 << 2u)) >> 2u)).x;
                _3343 = _3342 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3343)
                {
                    frontier_phi_61_pred = _3327;
                    frontier_phi_61_pred_1 = _3332;
                    frontier_phi_61_pred_2 = _3331;
                    frontier_phi_61_pred_3 = _3330;
                    frontier_phi_61_pred_4 = _3329;
                    frontier_phi_61_pred_5 = _3328;
                }
                else
                {
                    float _3451;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    uint _3457;
                    _3451 = _3327;
                    _3452 = _3328;
                    _3453 = _3329;
                    _3454 = _3330;
                    _3455 = _3331;
                    _3456 = _3332;
                    _3457 = _3342;
                    float _3383;
                    float _3384;
                    float _3385;
                    float _3386;
                    float _3387;
                    float _3388;
                    for (;;)
                    {
                        uint _3461 = uint(findLSB(_3457)) + (_3333 << 5u);
                        uint _3458 = (_3457 + 4294967295u) & _3457;
                        uint _3463 = _3461 * 48u;
                        vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3463)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3463 + 3u)).x));
                        uint _3483 = (_3461 * 48u) + 4u;
                        vec4 _3496 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3483)).x, texelFetch(g_PointLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3483 + 3u)).x));
                        uint _3502 = (_3461 * 48u) + 8u;
                        vec3 _3513 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3502)).x, texelFetch(g_PointLightRenderingBuffer, int(_3502 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3502 + 2u)).x));
                        float _3517 = _3477.x - _2999;
                        float _3518 = _3477.y - _3000;
                        float _3519 = _3477.z - _3001;
                        float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                        float _3523 = inversesqrt(_3520);
                        float _3524 = _3523 * _3517;
                        float _3525 = _3523 * _3518;
                        float _3526 = _3523 * _3519;
                        float _3527 = dot(vec3(_1233, _1236, _1239), vec3(_3524, _3525, _3526));
                        float _3532 = 1.0 - (_3520 * _3477.w);
                        float _4917 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                        float _3533 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                        float _3534 = sqrt(_3520) * _3496.w;
                        float _3537 = 1.39999997615814208984375 / (_3534 + 1.39999997615814208984375);
                        float _3538 = _3537 * _3537;
                        float _3541 = ((1.0 - _3538) * _3527) + _3538;
                        float _3544 = _3534 * _3534;
                        float _3548 = ((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3533) / ((_3544 * 0.699999988079071044921875) + 1.0);
                        float _3552 = (-0.0) - _2999;
                        float _3553 = (-0.0) - _3000;
                        float _3554 = (-0.0) - _3001;
                        float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                        float _3559 = _3558 * _3552;
                        float _3560 = _3558 * _3553;
                        float _3561 = _3558 * _3554;
                        float _3569 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                        float _3570 = 1.0 - _1353;
                        float _3577 = sqrt(1.0 - ((1.0 - (_3570 * _3570)) * (1.0 - (_3569 * _3569))));
                        float _3578 = _3577 * _3577;
                        float _3579 = _3578 * _3578;
                        float _3580 = _3559 + _3524;
                        float _3581 = _3560 + _3525;
                        float _3582 = _3561 + _3526;
                        float _3586 = inversesqrt(dot(vec3(_3580, _3581, _3582), vec3(_3580, _3581, _3582)));
                        float _3590 = dot(vec3(_1233, _1236, _1239), vec3(_3559, _3560, _3561));
                        float _4933 = isnan(0.0) ? _3590 : (isnan(_3590) ? 0.0 : max(_3590, 0.0));
                        float _3593 = isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0));
                        float _3594 = dot(vec3(_1233, _1236, _1239), vec3(_3586 * _3580, _3586 * _3581, _3586 * _3582));
                        float _4944 = isnan(0.0) ? _3594 : (isnan(_3594) ? 0.0 : max(_3594, 0.0));
                        float _3597 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
                        float _3601 = ((_3597 * _3597) * (_3579 + (-1.0))) + 1.0;
                        float _3602 = _3537 * _3578;
                        float _3603 = _3602 * _3602;
                        float _3606 = ((1.0 - _3603) * _3527) + _3603;
                        float _4955 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0));
                        float _3608 = 1.0 - _3578;
                        float _3618 = (0.5 / (((_3607 * ((_3593 * _3608) + _3578)) + 9.9999999392252902907785028219223e-09) + (((_3607 * _3608) + _3578) * _3593))) * _3607;
                        float _4966 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                        float _3629 = (((_3579 * 3.1415927410125732421875) * (isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0)))) / ((_3601 * _3601) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125))) * _3533;
                        _3386 = (_3548 * _3496.x) + _3454;
                        _3387 = (_3548 * _3496.y) + _3455;
                        _3388 = (_3548 * _3496.z) + _3456;
                        _3383 = (_3629 * _3513.x) + _3451;
                        _3384 = (_3629 * _3513.y) + _3452;
                        _3385 = (_3629 * _3513.z) + _3453;
                        if (_3458 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3451 = _3383;
                            _3452 = _3384;
                            _3453 = _3385;
                            _3454 = _3386;
                            _3455 = _3387;
                            _3456 = _3388;
                            _3457 = _3458;
                        }
                    }
                    frontier_phi_61_pred = _3383;
                    frontier_phi_61_pred_1 = _3388;
                    frontier_phi_61_pred_2 = _3387;
                    frontier_phi_61_pred_3 = _3386;
                    frontier_phi_61_pred_4 = _3385;
                    frontier_phi_61_pred_5 = _3384;
                }
                _3176 = frontier_phi_61_pred;
                _3186 = frontier_phi_61_pred_1;
                _3184 = frontier_phi_61_pred_2;
                _3182 = frontier_phi_61_pred_3;
                _3180 = frontier_phi_61_pred_4;
                _3178 = frontier_phi_61_pred_5;
                uint _3334 = _3333 + 1u;
                if (_3334 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3327 = _3176;
                    _3328 = _3178;
                    _3329 = _3180;
                    _3330 = _3182;
                    _3331 = _3184;
                    _3332 = _3186;
                    _3333 = _3334;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3175 = _3176;
            _3177 = _3178;
            _3179 = _3180;
            _3181 = _3182;
            _3183 = _3184;
            _3185 = _3186;
        }
        uvec4 _3189 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3190 = _3189.z;
        uint _3192 = (_3190 >> 8u) & 15u;
        float _3295;
        float _3297;
        float _3299;
        float _3301;
        float _3303;
        float _3305;
        if (((4294967295u << _3192) & _3045) == 0u)
        {
            _3295 = _3175;
            _3297 = _3177;
            _3299 = _3179;
            _3301 = _3181;
            _3303 = _3183;
            _3305 = _3185;
        }
        else
        {
            float _3320 = inversesqrt(dot(vec3(_2999, _3000, _3001), vec3(_2999, _3000, _3001)));
            float _3321 = _3320 * _2999;
            float _3322 = _3320 * _3000;
            float _3323 = _3320 * _3001;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3192 < ((_3190 >> 12u) & 15u))
            {
                float _3296;
                float _3298;
                float _3300;
                float _3302;
                float _3304;
                float _3306;
                float _3434 = _3175;
                float _3435 = _3177;
                float _3436 = _3179;
                float _3437 = _3181;
                float _3438 = _3183;
                float _3439 = _3185;
                uint _3440 = _3192;
                uint _3449;
                bool _3450;
                for (;;)
                {
                    _3449 = texelFetch(g_lightClassification, int((((_3039 << 5u) + (_3025 << 9u)) + (_3440 << 2u)) >> 2u)).x;
                    _3450 = _3449 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3450)
                    {
                        frontier_phi_67_pred = _3437;
                        frontier_phi_67_pred_1 = _3438;
                        frontier_phi_67_pred_2 = _3439;
                        frontier_phi_67_pred_3 = _3436;
                        frontier_phi_67_pred_4 = _3435;
                        frontier_phi_67_pred_5 = _3434;
                    }
                    else
                    {
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3639;
                        float _3927;
                        float _3928;
                        float _3929;
                        float _3930;
                        float _3931;
                        float _3932;
                        float _3647 = _3434;
                        float _3648 = _3435;
                        float _3649 = _3436;
                        float _3650 = _3437;
                        float _3651 = _3438;
                        float _3652 = _3439;
                        uint _3653 = _3449;
                        uint _3654;
                        vec4 _3679;
                        float _3680;
                        vec4 _3695;
                        vec3 _3707;
                        vec4 _3722;
                        vec4 _3737;
                        float _3783;
                        bool _3784;
                        for (;;)
                        {
                            uint _3664 = ((_3440 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3653));
                            _3654 = (_3653 + 4294967295u) & _3653;
                            uint _3666 = _3664 * 40u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            _3680 = _3679.w;
                            uint _3682 = (_3664 * 40u) + 4u;
                            _3695 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3682)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3682 + 3u)).x));
                            uint _3697 = (_3664 * 40u) + 8u;
                            _3707 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x));
                            uint _3709 = (_3664 * 40u) + 16u;
                            _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            uint _3724 = (_3664 * 40u) + 20u;
                            _3737 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3724)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3724 + 3u)).x));
                            uint _3739 = (_3664 * 40u) + 24u;
                            vec4 _3752 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3739)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3739 + 3u)).x));
                            uint _3758 = (_3664 * 40u) + 28u;
                            vec4 _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            _3783 = fma(_3001, _3771.z, fma(_3000, _3771.y, _3771.x * _2999)) + _3771.w;
                            _3784 = !((fma(_3001, _3752.z, fma(_3000, _3752.y, _3752.x * _2999)) + _3752.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3784)
                            {
                                float _3811 = _3679.x - _2999;
                                float _3812 = _3679.y - _3000;
                                float _3813 = _3679.z - _3001;
                                float _3814 = dot(vec3(_3811, _3812, _3813), vec3(_3811, _3812, _3813));
                                float _3817 = inversesqrt(_3814);
                                float _3818 = _3817 * _3811;
                                float _3819 = _3817 * _3812;
                                float _3820 = _3817 * _3813;
                                float _3824 = 1.0 - (_3814 / (_3680 * _3680));
                                float _4977 = isnan(0.0) ? _3824 : (isnan(_3824) ? 0.0 : max(_3824, 0.0));
                                float _3825 = isnan(1.0) ? _4977 : (isnan(_4977) ? 1.0 : min(_4977, 1.0));
                                float _3829 = sqrt(_3814) * _3695.w;
                                float _3831 = 1.39999997615814208984375 / (_3829 + 1.39999997615814208984375);
                                float _3832 = _3831 * _3831;
                                float _3835 = ((1.0 - _3832) * dot(vec3(_3818, _3819, _3820), vec3(_1233, _1236, _1239))) + _3832;
                                float _3838 = _3829 * _3829;
                                float _3842 = (fma(_3001, _3722.z, fma(_3000, _3722.y, _3722.x * _2999)) + _3722.w) / _3783;
                                float _3843 = (fma(_3001, _3737.z, fma(_3000, _3737.y, _3737.x * _2999)) + _3737.w) / _3783;
                                float _3847 = 1.0 - dot(vec2(_3842, _3843), vec2(_3842, _3843));
                                float _4993 = isnan(0.0) ? _3847 : (isnan(_3847) ? 0.0 : max(_3847, 0.0));
                                float _3848 = isnan(1.0) ? _4993 : (isnan(_4993) ? 1.0 : min(_4993, 1.0));
                                float _3849 = _3848 * (((isnan(0.0) ? _3835 : (isnan(_3835) ? 0.0 : max(_3835, 0.0))) * _3825) / ((_3838 * 0.699999988079071044921875) + 1.0));
                                float _3861 = exp2(log2(1.0 / ((_3838 * 3.5) + 5.0)) * 0.25);
                                float _3862 = 1.0 - _1353;
                                float _3869 = sqrt(1.0 - ((1.0 - (_3862 * _3862)) * (1.0 - (_3861 * _3861))));
                                float _3870 = _3869 * _3869;
                                float _3871 = _3870 * _3870;
                                float _3872 = _3818 - _3321;
                                float _3873 = _3819 - _3322;
                                float _3874 = _3820 - _3323;
                                float _3878 = inversesqrt(dot(vec3(_3872, _3873, _3874), vec3(_3872, _3873, _3874)));
                                float _3882 = dot(vec3(_1233, _1236, _1239), vec3((-0.0) - _3321, (-0.0) - _3322, (-0.0) - _3323));
                                float _5004 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                                float _3885 = isnan(1.0) ? _5004 : (isnan(_5004) ? 1.0 : min(_5004, 1.0));
                                float _3886 = dot(vec3(_1233, _1236, _1239), vec3(_3878 * _3872, _3878 * _3873, _3878 * _3874));
                                float _5015 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                                float _3889 = isnan(1.0) ? _5015 : (isnan(_5015) ? 1.0 : min(_5015, 1.0));
                                float _3893 = ((_3889 * _3889) * (_3871 + (-1.0))) + 1.0;
                                float _3894 = _3831 * _3870;
                                float _3895 = _3894 * _3894;
                                float _3901 = ((1.0 - _3895) * dot(vec3(_1233, _1236, _1239), vec3(_3818, _3819, _3820))) + _3895;
                                float _5026 = isnan(0.0) ? _3901 : (isnan(_3901) ? 0.0 : max(_3901, 0.0));
                                float _3902 = isnan(1.0) ? _5026 : (isnan(_5026) ? 1.0 : min(_5026, 1.0));
                                float _3903 = 1.0 - _3870;
                                float _3913 = (0.5 / (((_3902 * ((_3885 * _3903) + _3870)) + 9.9999999392252902907785028219223e-09) + (((_3902 * _3903) + _3870) * _3885))) * _3902;
                                float _5037 = isnan(0.0) ? _3913 : (isnan(_3913) ? 0.0 : max(_3913, 0.0));
                                float _3923 = (_3848 * _3825) * (((_3871 * 3.1415927410125732421875) * (isnan(1.0) ? _5037 : (isnan(_5037) ? 1.0 : min(_5037, 1.0)))) / ((_3893 * _3893) * ((_3838 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3923 * _3707.x;
                                frontier_phi_73_pred_1 = _3923 * _3707.y;
                                frontier_phi_73_pred_2 = _3849 * _3695.z;
                                frontier_phi_73_pred_3 = _3849 * _3695.y;
                                frontier_phi_73_pred_4 = _3849 * _3695.x;
                                frontier_phi_73_pred_5 = _3923 * _3707.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3927 = frontier_phi_73_pred;
                            _3928 = frontier_phi_73_pred_1;
                            _3932 = frontier_phi_73_pred_2;
                            _3931 = frontier_phi_73_pred_3;
                            _3930 = frontier_phi_73_pred_4;
                            _3929 = frontier_phi_73_pred_5;
                            _3637 = _3930 + _3650;
                            _3638 = _3931 + _3651;
                            _3639 = _3932 + _3652;
                            _3634 = _3927 + _3647;
                            _3635 = _3928 + _3648;
                            _3636 = _3929 + _3649;
                            if (_3654 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3647 = _3634;
                                _3648 = _3635;
                                _3649 = _3636;
                                _3650 = _3637;
                                _3651 = _3638;
                                _3652 = _3639;
                                _3653 = _3654;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3637;
                        frontier_phi_67_pred_1 = _3638;
                        frontier_phi_67_pred_2 = _3639;
                        frontier_phi_67_pred_3 = _3636;
                        frontier_phi_67_pred_4 = _3635;
                        frontier_phi_67_pred_5 = _3634;
                    }
                    _3302 = frontier_phi_67_pred;
                    _3304 = frontier_phi_67_pred_1;
                    _3306 = frontier_phi_67_pred_2;
                    _3300 = frontier_phi_67_pred_3;
                    _3298 = frontier_phi_67_pred_4;
                    _3296 = frontier_phi_67_pred_5;
                    uint _3441 = _3440 + 1u;
                    if (_3441 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3434 = _3296;
                        _3435 = _3298;
                        _3436 = _3300;
                        _3437 = _3302;
                        _3438 = _3304;
                        _3439 = _3306;
                        _3440 = _3441;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3304;
                frontier_phi_55_56_ladder_1 = _3306;
                frontier_phi_55_56_ladder_2 = _3302;
                frontier_phi_55_56_ladder_3 = _3300;
                frontier_phi_55_56_ladder_4 = _3298;
                frontier_phi_55_56_ladder_5 = _3296;
            }
            else
            {
                frontier_phi_55_56_ladder = _3183;
                frontier_phi_55_56_ladder_1 = _3185;
                frontier_phi_55_56_ladder_2 = _3181;
                frontier_phi_55_56_ladder_3 = _3179;
                frontier_phi_55_56_ladder_4 = _3177;
                frontier_phi_55_56_ladder_5 = _3175;
            }
            _3295 = frontier_phi_55_56_ladder_5;
            _3297 = frontier_phi_55_56_ladder_4;
            _3299 = frontier_phi_55_56_ladder_3;
            _3301 = frontier_phi_55_56_ladder_2;
            _3303 = frontier_phi_55_56_ladder;
            _3305 = frontier_phi_55_56_ladder_1;
        }
        float _3310 = isnan(1.0) ? _1337 : (isnan(_1337) ? 1.0 : min(_1337, 1.0));
        _3058 = (_3310 * _3301) + _2494;
        _3060 = (_3310 * _3303) + _2496;
        _3062 = (_3310 * _3305) + _2498;
        _3064 = ((_3295 * _1322) * _3310) + _2839;
        _3066 = ((_3297 * _1324) * _3310) + _2841;
        _3068 = ((_3299 * _1325) * _3310) + _2843;
    }
    else
    {
        _3058 = _2494;
        _3060 = _2496;
        _3062 = _2498;
        _3064 = _2839;
        _3066 = _2841;
        _3068 = _2843;
    }
    uint _3074 = _1266 + uint(cbMatDynParam._m0[0u].w);
    float _3080 = (((((cbMtdParam._m0[22u].x * _1046.x) * cbMtdParam._m0[32u].x) * _1069) + _822) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3074].x;
    float _3081 = (((((cbMtdParam._m0[22u].y * _1046.y) * cbMtdParam._m0[32u].x) * _1069) + _823) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3074].y;
    float _3082 = (((((cbMtdParam._m0[22u].z * _1046.z) * cbMtdParam._m0[32u].x) * _1069) + _824) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3074].z;
    float _5053 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
    float _5064 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _5075 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
    float _3099 = (((isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0))) * (_3058 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1337))) + ((_3064 + ((isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0))) * _2134)) * cbPerFrame._m0[3u].x)) + _3080;
    float _3101 = (_3081 + ((_3066 + ((isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0))) * _2134)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_3060 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1337)));
    float _3103 = (_3082 + ((_3068 + ((isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))) * _2134)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0))) * (_3062 + ((isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0))) * _1337)));
    float _5101 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3116 = isnan(1.0) ? _5101 : (isnan(_5101) ? 1.0 : min(_5101, 1.0));
    uint _3117 = _1265 + 6u;
    float _3125 = _1210 / cbSceneParam._m0[86u].x;
    float _3126 = _1211 / cbSceneParam._m0[86u].y;
    vec4 _3140 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, (log2((isnan(cbSceneParam._m0[77u].w) ? _1165 : (isnan(_1165) ? cbSceneParam._m0[77u].w : min(_1165, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3142 = _3140.x;
    float _3143 = _3140.y;
    float _3144 = _3140.z;
    float _3145 = _3140.w;
    float _3237;
    float _3239;
    float _3241;
    float _3243;
    if (_1165 > cbSceneParam._m0[78u].w)
    {
        float _3200 = isnan(_1165) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1165 : min(cbSceneParam._m0[80u].w, _1165));
        float _3201 = _3200 / _1165;
        float _3212 = _3201 * _1195;
        float _3213 = _1196 * _3201;
        float _3214 = (-0.0) - _3213;
        float _3215 = _3201 * _1197;
        float _3217 = (cbSceneParam._m0[77u].w * _3214) / _3200;
        float _3218 = _3217 + cbSceneParam._m0[79u].w;
        float _3219 = cbSceneParam._m0[79u].w - _3213;
        float _3225 = sqrt(((_3212 * _3212) + (_3213 * _3213)) + (_3215 * _3215));
        float _3228 = (1.0 - (cbSceneParam._m0[77u].w / _3200)) * _3225;
        float _3233 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3235 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3396;
        if (abs((_3214 - _3217) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3396 = ((((_3218 > 0.0) ? exp2(_3233 * _3218) : (2.0 - exp2(_3235 * _3218))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3228;
        }
        else
        {
            float _3356 = 1.0 / cbSceneParam._m0[80u].x;
            float _3357 = isnan(_3219) ? _3218 : (isnan(_3218) ? _3219 : max(_3218, _3219));
            float _3358 = isnan(_3219) ? _3218 : (isnan(_3218) ? _3219 : min(_3218, _3219));
            float _3367 = isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : min(_3357, 0.0));
            float _3368 = isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : min(_3358, 0.0));
            _3396 = ((abs(_3225 / _3214) * cbSceneParam._m0[80u].y) * ((((_3367 - _3368) * 2.0) - ((exp2(_3233 * (isnan(0.0) ? _3357 : (isnan(_3357) ? 0.0 : max(_3357, 0.0)))) - exp2(_3233 * (isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))))) * _3356)) - ((exp2(_3235 * _3367) - exp2(_3235 * _3368)) * _3356))) + (_3228 * cbSceneParam._m0[80u].z);
        }
        vec4 _3398 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3125, _3126, 1.0), 0.0);
        float _3407 = exp2((_3396 * (-1.44269502162933349609375)) * (1.0 - _3398.w));
        float _3408 = log2(_3407);
        float _3424 = log2(_3145);
        _3237 = (exp2(_3424 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].x)) * _3398.x) / cbSceneParam._m0[78u].x)) + _3142;
        _3239 = (exp2(_3424 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].y)) * _3398.y) / cbSceneParam._m0[78u].y)) + _3143;
        _3241 = (exp2(_3424 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3408 * cbSceneParam._m0[78u].z)) * _3398.z) / cbSceneParam._m0[78u].z)) + _3144;
        _3243 = _3407 * _3145;
    }
    else
    {
        _3237 = _3142;
        _3239 = _3143;
        _3241 = _3144;
        _3243 = _3145;
    }
    float _3254 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3255 = _3254 == 3.0;
    float _3256 = log2(_3243);
    float _3260 = exp2(_3256 * cbSceneParam._m0[78u].x);
    float _3261 = exp2(_3256 * cbSceneParam._m0[78u].y);
    float _3262 = exp2(_3256 * cbSceneParam._m0[78u].z);
    float _3263 = _3260 * (isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0)));
    float _3264 = _3261 * (isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0)));
    float _3265 = _3262 * (isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0)));
    float _3274 = (_3254 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3274 * (_3255 ? _3263 : (_3263 + (cbSceneParam._m0[72u].w * _3237)));
    SV_Target.y = _3274 * (_3255 ? _3264 : (_3264 + (cbSceneParam._m0[72u].w * _3239)));
    SV_Target.z = _3274 * (_3255 ? _3265 : (_3265 + (cbSceneParam._m0[72u].w * _3241)));
    SV_Target.w = cbInstanceData._m0[_3117].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3080) * _3116) * _3260) * _3274;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3081) * _3116) * _3261) * _3274;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3082) * _3116) * _3262) * _3274;
    SV_Target_1.w = cbInstanceData._m0[_3117].w;
}


