#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1518;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _267 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _272 = _267.z;
    float _273 = _267.w;
    vec4 _295 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _300 = _295.w;
    float _312 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _272) * exp2(log2(1.0 - _300) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _313 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _314 = isnan(1.0) ? _313 : (isnan(_313) ? 1.0 : min(_313, 1.0));
    vec4 _328 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _338 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _346 = (_338 - (((_328.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _338))) * (cbMtdParam._m0[36u].w + 1.0);
    float _3889 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _349 = _314 - (_347 * _314);
    float _350 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    vec4 _364 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _367 = _364.y;
    float _368 = _367 * (isnan(1.0) ? _350 : (isnan(_350) ? 1.0 : min(_350, 1.0)));
    float _377 = exp2(log2(cbMtdParam._m0[32u].w * _300) * cbMtdParam._m0[31u].z);
    float _379 = _377 - (_347 * _377);
    float _380 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _381 = isnan(1.0) ? _380 : (isnan(_380) ? 1.0 : min(_380, 1.0));
    float _392 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_273) * 4.5));
    float _401 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _272) * _392)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
    float _414 = exp2(log2((1.0 - (((_392 * _392) * _272) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _415 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _419 = (((isnan(1.0) ? _415 : (isnan(_415) ? 1.0 : min(_415, 1.0))) - _273) * _367) + _273;
    vec4 _431 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _444 = (_364.x + (-0.02500000037252902984619140625)) * 8.0;
    float _446 = roundEven(_444);
    float _447 = cbMtdParam._m0[10u].x * _431.x;
    float _448 = cbMtdParam._m0[10u].y * _431.y;
    float _449 = cbMtdParam._m0[10u].z * _431.z;
    vec4 _461 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _472 = cbMtdParam._m0[9u].x * _461.x;
    float _473 = cbMtdParam._m0[9u].y * _461.y;
    float _474 = cbMtdParam._m0[9u].z * _461.z;
    float _481 = ((_472 - _447) * _419) + _447;
    float _482 = ((_473 - _448) * _419) + _448;
    float _483 = ((_474 - _449) * _419) + _449;
    vec4 _495 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _515 = (((cbMtdParam._m0[20u].x * _495.x) - _481) * _403) + _481;
    float _516 = (((cbMtdParam._m0[20u].y * _495.y) - _482) * _403) + _482;
    float _517 = (((cbMtdParam._m0[20u].z * _495.z) - _483) * _403) + _483;
    vec4 _529 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _549 = (((cbMtdParam._m0[29u].x * _529.x) - _515) * _381) + _515;
    float _550 = (((cbMtdParam._m0[29u].y * _529.y) - _516) * _381) + _516;
    float _551 = (((cbMtdParam._m0[29u].z * _529.z) - _517) * _381) + _517;
    float _196[6];
    float _197[6];
    float _198[6];
    _196[0u] = cbMtdParam._m0[30u].x;
    _197[0u] = cbMtdParam._m0[30u].y;
    _198[0u] = cbMtdParam._m0[30u].z;
    _196[1u] = cbMtdParam._m0[28u].x;
    _197[1u] = cbMtdParam._m0[28u].y;
    _198[1u] = cbMtdParam._m0[28u].z;
    _196[2u] = cbMtdParam._m0[27u].x;
    _197[2u] = cbMtdParam._m0[27u].y;
    _198[2u] = cbMtdParam._m0[27u].z;
    _196[3u] = cbMtdParam._m0[26u].x;
    _197[3u] = cbMtdParam._m0[26u].y;
    _198[3u] = cbMtdParam._m0[26u].z;
    _196[4u] = cbMtdParam._m0[25u].x;
    _197[4u] = cbMtdParam._m0[25u].y;
    _198[4u] = cbMtdParam._m0[25u].z;
    _196[5u] = cbMtdParam._m0[24u].x;
    _197[5u] = cbMtdParam._m0[24u].y;
    _198[5u] = cbMtdParam._m0[24u].z;
    float _620 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    uint _623 = uint(int(isnan(5.0) ? _620 : (isnan(_620) ? 5.0 : min(_620, 5.0))));
    float _630 = _196[_623] * _367;
    float _631 = _197[_623] * _367;
    float _632 = _198[_623] * _367;
    float _633 = _630 + ((_295.x * 4.5) * (((_472 - _549) * _368) + _549));
    float _634 = _631 + ((_295.y * 4.5) * (((_473 - _550) * _368) + _550));
    float _635 = _632 + ((_295.z * 4.5) * (((_474 - _551) * _368) + _551));
    float _191[5];
    float _192[5];
    _191[0u] = cbMtdParam._m0[37u].w;
    _192[0u] = cbMtdParam._m0[38u].x;
    _191[1u] = cbMtdParam._m0[39u].w;
    _192[1u] = cbMtdParam._m0[40u].x;
    _191[2u] = cbMtdParam._m0[40u].y;
    _192[2u] = cbMtdParam._m0[40u].z;
    _191[3u] = cbMtdParam._m0[40u].w;
    _192[3u] = cbMtdParam._m0[41u].x;
    _191[4u] = cbMtdParam._m0[41u].y;
    _192[4u] = cbMtdParam._m0[41u].z;
    float _668 = roundEven(5.0 - _444);
    float _669 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
    float _670 = isnan(4.0) ? _669 : (isnan(_669) ? 4.0 : min(_669, 4.0));
    float _672 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    uint _674 = uint(int(isnan(4.0) ? _672 : (isnan(_672) ? 4.0 : min(_672, 4.0))));
    float _686 = ((cbMtdParam._m0[42u].z - _192[_674]) * _419) + _192[_674];
    float _694 = ((cbMtdParam._m0[43u].x - _686) * _403) + _686;
    float _699 = ((cbMtdParam._m0[43u].z - _694) * _381) + _694;
    float _704 = ((cbMtdParam._m0[39u].z - _699) * _368) + _699;
    vec4 _718 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _720 = _718.x;
    float _721 = _718.y;
    float _723 = _718.z + _191[_674];
    vec4 _735 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _743 = (((cbMtdParam._m0[42u].y - _723) + _735.z) * _419) + _723;
    vec4 _756 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _764 = (((cbMtdParam._m0[42u].w - _743) + _756.z) * _403) + _743;
    float _770 = ((((_272 * 2.0) * _764) - _764) * cbMtdParam._m0[34u].x) + _764;
    vec4 _783 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _791 = (((_783.z + cbMtdParam._m0[43u].y) - _770) * _381) + _770;
    float _795 = (((cbMtdParam._m0[39u].y + _328.z) - _791) * _368) + _791;
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _858 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_827 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_831 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _873 = (-0.0) - ((_831 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _877 = (_831 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _878 = isnan(_877) ? _873 : (isnan(_873) ? _877 : min(_873, _877));
    float _3975 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _879 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
    float _907 = ((_735.x - _720) * _419) + _720;
    float _908 = ((_735.y - _721) * _419) + _721;
    float _913 = ((_756.x - _907) * _403) + _907;
    float _914 = ((_756.y - _908) * _403) + _908;
    float _919 = ((_783.x - _913) * _381) + _913;
    float _920 = ((_783.y - _914) * _381) + _914;
    float _929 = ((((_328.x - _919) * _368) + _919) * 2.0) + (-1.0);
    float _930 = ((((_328.y - _920) * _368) + _920) * 2.0) + (-1.0);
    float _931 = dot(vec2(_929, _930), vec2(_929, _930));
    float _3986 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _936 = sqrt(1.0 - (isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))));
    float _939 = (cbMtdParam._m0[34u].z * ((_267.x * 2.0) + (-1.0))) + _929;
    float _940 = (cbMtdParam._m0[34u].z * ((_267.y * 2.0) + (-1.0))) + _930;
    float _943 = fma(_936, _238 * NORMAL.x, fma(_940, _245 * TANGENT.x, (_231 * _223) * _939));
    float _946 = fma(_936, _238 * NORMAL.y, fma(_940, _245 * TANGENT.y, (_231 * _224) * _939));
    float _949 = fma(_936, _238 * NORMAL.z, fma(_940, _245 * TANGENT.z, (_231 * _225) * _939));
    float _953 = inversesqrt(dot(vec3(_943, _946, _949), vec3(_943, _946, _949)));
    float _954 = _953 * _943;
    float _955 = _953 * _946;
    float _956 = _953 * _949;
    float _3997 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _957 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
    float _4008 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4019 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4030 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _4041 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _961 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _977 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _997 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1007 = cbSceneParam._m0[71u].x - (_827 / _997);
    float _1008 = cbSceneParam._m0[71u].y - (_831 / _997);
    float _1009 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _997);
    float _1013 = inversesqrt(dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009)));
    float _1014 = _1007 * _1013;
    float _1015 = _1008 * _1013;
    float _1016 = _1009 * _1013;
    float _1022 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1023 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1025 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1027 = _1025.w;
    float _1045 = fma(_956, cbSceneParam._m0[5u].z, fma(_955, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _954));
    float _1048 = fma(_956, cbSceneParam._m0[6u].z, fma(_955, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _954));
    float _1051 = fma(_956, cbSceneParam._m0[7u].z, fma(_955, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _954));
    vec4 _1053 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1064 = (((_1053.y - _957) + (_1053.w * _957)) * cbMtdParam._m0[3u].x) + _957;
    uint _1077 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1078 = _1077 + 9u;
    uint _1079 = _1078 + uint(cbMatDynParam._m0[0u].w);
    float _1085 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0)))) * cbInstanceData._m0[_1079].x;
    float _1086 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * cbInstanceData._m0[_1079].y;
    float _1087 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0)))) * cbInstanceData._m0[_1079].z;
    float _4052 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
    float _1088 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _4063 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
    float _1089 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _4074 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
    float _1090 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
    vec4 _1091 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1096 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1107 = (((_1096.x - _961) + (_1096.w * _961)) * cbMtdParam._m0[3u].x) + _961;
    float _1120 = (cbMtdParam._m0[3u].x * (((_1088 * _1027) - _1088) + _1091.x)) + _1088;
    float _1121 = (cbMtdParam._m0[3u].x * (((_1089 * _1027) - _1089) + _1091.y)) + _1089;
    float _1122 = (cbMtdParam._m0[3u].x * (((_1090 * _1027) - _1090) + _1091.z)) + _1090;
    float _1123 = 1.0 - _1107;
    float _1124 = _1123 * _1120;
    float _1125 = _1123 * _1121;
    float _1126 = _1123 * _1122;
    float _1131 = (_1120 + (-0.039999999105930328369140625)) * _1107;
    float _1132 = (_1121 + (-0.039999999105930328369140625)) * _1107;
    float _1133 = (_1122 + (-0.039999999105930328369140625)) * _1107;
    float _1134 = _1131 + 0.039999999105930328369140625;
    float _1136 = _1132 + 0.039999999105930328369140625;
    float _1137 = _1133 + 0.039999999105930328369140625;
    vec4 _1146 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1022, cbSceneParam._m0[86u].y * _1023));
    float _1149 = _1146.x * TEXCOORD_5.w;
    float _1150 = dot(vec3(_954, _955, _956), vec3(_1014, _1015, _1016));
    float _1153 = _1150 * 2.0;
    float _1157 = (_1153 * _954) - _1014;
    float _1158 = (_1153 * _955) - _1015;
    float _1159 = (_1153 * _956) - _1016;
    float _1163 = abs(dot(vec3(_1014, _1015, _1016), vec3(_954, _955, _956)));
    float _4085 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
    float _1165 = sqrt(_1064);
    float _1176 = exp2((_1165 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1165 * 3.0));
    float _1182 = (1.0 - _1176) * ((_1165 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1183 = _1176 * _1165;
    float _1211 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1517;
    float _1519;
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1244 = fma(_1219, cbModelParam._m0[26u].z, fma(_1215, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1211));
        float _1248 = fma(_1219, cbModelParam._m0[27u].z, fma(_1215, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1211));
        float _1252 = fma(_1219, cbModelParam._m0[28u].z, fma(_1215, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1211));
        float _1276 = _1211 + _954;
        float _1277 = _1215 + _955;
        float _1278 = _1219 + _956;
        float _1288 = fma(_1278, cbModelParam._m0[26u].z, fma(_1277, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1276)) - _1244;
        float _1289 = fma(_1278, cbModelParam._m0[27u].z, fma(_1277, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1276)) - _1248;
        float _1290 = fma(_1278, cbModelParam._m0[28u].z, fma(_1277, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1276)) - _1252;
        float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
        float _1306 = ((_1294 * _1288) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1244 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1307 = ((_1294 * _1289) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1248 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1308 = ((_1294 * _1290) / cbModelParam._m0[34u].z) + ((((((_1252 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1311 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1318 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1325 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        vec4 _1332 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1306, _1307, _1308), 0.0);
        float _1345 = exp2((_1311.w + (-0.5)) * 20.0) * 2.0;
        float _1346 = _1345 * (_1311.x + (-0.5));
        float _1347 = _1345 * (_1311.y + (-0.5));
        float _1348 = _1345 * (_1311.z + (-0.5));
        float _1355 = exp2((_1318.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1318.x + (-0.5));
        float _1357 = _1355 * (_1318.y + (-0.5));
        float _1358 = _1355 * (_1318.z + (-0.5));
        float _1365 = exp2((_1325.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1325.x + (-0.5));
        float _1367 = _1365 * (_1325.y + (-0.5));
        float _1368 = _1365 * (_1325.z + (-0.5));
        float _1375 = exp2((_1332.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1332.x + (-0.5));
        float _1377 = _1375 * (_1332.y + (-0.5));
        float _1378 = _1375 * (_1332.z + (-0.5));
        float _1379 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1380 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1381 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1382 = _1346 * 0.5;
        float _1383 = _1356 * 0.5;
        float _1384 = _1366 * 0.5;
        float _1385 = dot(vec3(_1382, _1383, _1384), vec3(_1382, _1383, _1384));
        float _1390 = (_1385 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1385);
        float _1399 = (dot(vec3(_954, _955, _956), vec3(_1390 * _1382, _1390 * _1383, _1390 * _1384)) + 1.0) * 0.5;
        float _4111 = isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0));
        float _1409 = sqrt(((_1383 * _1383) + (_1382 * _1382)) + (_1384 * _1384)) / (_1379 + 9.9999997473787516355514526367188e-06);
        float _4122 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _4133 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_1411 + 1.0))) + _1416) * _1379;
        float _1426 = _1347 * 0.5;
        float _1427 = _1357 * 0.5;
        float _1428 = _1367 * 0.5;
        float _1429 = dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428));
        float _1434 = (_1429 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1429);
        float _1442 = (dot(vec3(_954, _955, _956), vec3(_1434 * _1426, _1434 * _1427, _1434 * _1428)) + 1.0) * 0.5;
        float _4144 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1451 = sqrt(((_1427 * _1427) + (_1426 * _1426)) + (_1428 * _1428)) / (_1380 + 9.9999997473787516355514526367188e-06);
        float _4155 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1452 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1453 = _1452 * 2.0;
        float _1457 = (1.0 - _1452) / (_1452 + 1.0);
        float _4166 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1467 = ((((1.0 - _1458) * (_1453 + 2.0)) * exp2(log2(isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0))) * (_1453 + 1.0))) + _1458) * _1380;
        float _1468 = _1348 * 0.5;
        float _1469 = _1358 * 0.5;
        float _1470 = _1368 * 0.5;
        float _1471 = dot(vec3(_1468, _1469, _1470), vec3(_1468, _1469, _1470));
        float _1476 = (_1471 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1471);
        float _1484 = (dot(vec3(_954, _955, _956), vec3(_1476 * _1468, _1476 * _1469, _1476 * _1470)) + 1.0) * 0.5;
        float _4177 = isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0));
        float _1493 = sqrt(((_1469 * _1469) + (_1468 * _1468)) + (_1470 * _1470)) / (_1381 + 9.9999997473787516355514526367188e-06);
        float _4188 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1494 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1495 = _1494 * 2.0;
        float _1499 = (1.0 - _1494) / (_1494 + 1.0);
        float _4199 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _1509 = ((((1.0 - _1500) * (_1495 + 2.0)) * exp2(log2(isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_1495 + 1.0))) + _1500) * _1381;
        _1517 = _1348;
        _1519 = _1347;
        _1520 = _1346;
        _1521 = _1358;
        _1522 = _1357;
        _1523 = _1356;
        _1524 = _1368;
        _1525 = _1367;
        _1526 = _1366;
        _1527 = _1381;
        _1528 = _1380;
        _1529 = _1379;
        _1530 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
        _1531 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0)));
        _1532 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)));
    }
    else
    {
        _1517 = _1518;
        _1519 = _1518;
        _1520 = _1518;
        _1521 = _1518;
        _1522 = _1518;
        _1523 = _1518;
        _1524 = _1518;
        _1525 = _1518;
        _1526 = _1518;
        _1527 = _1518;
        _1528 = _1518;
        _1529 = _1518;
        _1530 = 0.0;
        _1531 = 0.0;
        _1532 = 0.0;
    }
    float _1822;
    float _1823;
    float _1824;
    float _1825;
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1555 = fma(_1219, cbModelParam._m0[30u].z, fma(_1215, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1211));
        float _1559 = fma(_1219, cbModelParam._m0[31u].z, fma(_1215, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1211));
        float _1563 = fma(_1219, cbModelParam._m0[32u].z, fma(_1215, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1211));
        float _1585 = _1211 + _954;
        float _1586 = _1215 + _955;
        float _1587 = _1219 + _956;
        float _1597 = fma(_1587, cbModelParam._m0[30u].z, fma(_1586, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1585)) - _1555;
        float _1598 = fma(_1587, cbModelParam._m0[31u].z, fma(_1586, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1585)) - _1559;
        float _1599 = fma(_1587, cbModelParam._m0[32u].z, fma(_1586, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1585)) - _1563;
        float _1603 = inversesqrt(dot(vec3(_1597, _1598, _1599), vec3(_1597, _1598, _1599)));
        float _1615 = ((_1603 * _1597) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1555 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1616 = ((_1603 * _1598) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1559 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1617 = ((_1603 * _1599) / cbModelParam._m0[35u].z) + ((((((_1563 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1619 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1626 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1633 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        vec4 _1640 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1615, _1616, _1617), 0.0);
        float _1652 = exp2((_1619.w + (-0.5)) * 20.0) * 2.0;
        float _1653 = _1652 * (_1619.x + (-0.5));
        float _1654 = _1652 * (_1619.y + (-0.5));
        float _1655 = _1652 * (_1619.z + (-0.5));
        float _1662 = exp2((_1626.w + (-0.5)) * 20.0) * 2.0;
        float _1663 = _1662 * (_1626.x + (-0.5));
        float _1664 = _1662 * (_1626.y + (-0.5));
        float _1665 = _1662 * (_1626.z + (-0.5));
        float _1672 = exp2((_1633.w + (-0.5)) * 20.0) * 2.0;
        float _1673 = _1672 * (_1633.x + (-0.5));
        float _1674 = _1672 * (_1633.y + (-0.5));
        float _1675 = _1672 * (_1633.z + (-0.5));
        float _1682 = exp2((_1640.w + (-0.5)) * 20.0) * 2.0;
        float _1683 = _1682 * (_1640.x + (-0.5));
        float _1684 = _1682 * (_1640.y + (-0.5));
        float _1685 = _1682 * (_1640.z + (-0.5));
        float _1686 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1687 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
        float _1688 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1689 = _1653 * 0.5;
        float _1690 = _1663 * 0.5;
        float _1691 = _1673 * 0.5;
        float _1692 = dot(vec3(_1689, _1690, _1691), vec3(_1689, _1690, _1691));
        float _1697 = (_1692 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1692);
        float _1705 = (dot(vec3(_954, _955, _956), vec3(_1697 * _1689, _1697 * _1690, _1697 * _1691)) + 1.0) * 0.5;
        float _4240 = isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0));
        float _1714 = sqrt(((_1690 * _1690) + (_1689 * _1689)) + (_1691 * _1691)) / (_1686 + 9.9999997473787516355514526367188e-06);
        float _4251 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
        float _1716 = _1715 * 2.0;
        float _1720 = (1.0 - _1715) / (_1715 + 1.0);
        float _4262 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1721 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
        float _1730 = ((((1.0 - _1721) * (_1716 + 2.0)) * exp2(log2(isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0))) * (_1716 + 1.0))) + _1721) * _1686;
        float _1731 = _1654 * 0.5;
        float _1732 = _1664 * 0.5;
        float _1733 = _1674 * 0.5;
        float _1734 = dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733));
        float _1739 = (_1734 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1734);
        float _1747 = (dot(vec3(_954, _955, _956), vec3(_1739 * _1731, _1739 * _1732, _1739 * _1733)) + 1.0) * 0.5;
        float _4273 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        float _1756 = sqrt(((_1732 * _1732) + (_1731 * _1731)) + (_1733 * _1733)) / (_1687 + 9.9999997473787516355514526367188e-06);
        float _4284 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1757 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _1758 = _1757 * 2.0;
        float _1762 = (1.0 - _1757) / (_1757 + 1.0);
        float _4295 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
        float _1763 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _1772 = ((((1.0 - _1763) * (_1758 + 2.0)) * exp2(log2(isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0))) * (_1758 + 1.0))) + _1763) * _1687;
        float _1773 = _1655 * 0.5;
        float _1774 = _1665 * 0.5;
        float _1775 = _1675 * 0.5;
        float _1776 = dot(vec3(_1773, _1774, _1775), vec3(_1773, _1774, _1775));
        float _1781 = (_1776 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1776);
        float _1789 = (dot(vec3(_954, _955, _956), vec3(_1781 * _1773, _1781 * _1774, _1781 * _1775)) + 1.0) * 0.5;
        float _4306 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
        float _1798 = sqrt(((_1774 * _1774) + (_1773 * _1773)) + (_1775 * _1775)) / (_1688 + 9.9999997473787516355514526367188e-06);
        float _4317 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1799 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _1800 = _1799 * 2.0;
        float _1804 = (1.0 - _1799) / (_1799 + 1.0);
        float _4328 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
        float _1805 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _1814 = ((((1.0 - _1805) * (_1800 + 2.0)) * exp2(log2(isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_1800 + 1.0))) + _1805) * _1688;
        _1822 = _1655;
        _1823 = _1654;
        _1824 = _1653;
        _1825 = _1665;
        _1826 = _1664;
        _1827 = _1663;
        _1828 = _1675;
        _1829 = _1674;
        _1830 = _1673;
        _1831 = _1688;
        _1832 = _1687;
        _1833 = _1686;
        _1834 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0)));
        _1835 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0)));
        _1836 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0)));
    }
    else
    {
        _1822 = _1518;
        _1823 = _1518;
        _1824 = _1518;
        _1825 = _1518;
        _1826 = _1518;
        _1827 = _1518;
        _1828 = _1518;
        _1829 = _1518;
        _1830 = _1518;
        _1831 = _1518;
        _1832 = _1518;
        _1833 = _1518;
        _1834 = 0.0;
        _1835 = 0.0;
        _1836 = 0.0;
    }
    float _1846 = (cbModelParam._m0[1u].x * (_1834 - _1530)) + _1530;
    float _1847 = (cbModelParam._m0[1u].x * (_1835 - _1531)) + _1531;
    float _1848 = (cbModelParam._m0[1u].x * (_1836 - _1532)) + _1532;
    float _1869 = fma(_1848, cbSceneParam._m0[89u].z, fma(_1847, cbSceneParam._m0[89u].y, _1846 * cbSceneParam._m0[89u].x));
    float _1872 = fma(_1848, cbSceneParam._m0[90u].z, fma(_1847, cbSceneParam._m0[90u].y, _1846 * cbSceneParam._m0[90u].x));
    float _1875 = fma(_1848, cbSceneParam._m0[91u].z, fma(_1847, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1846));
    float _1888 = _1157 * 0.5;
    float _1889 = _1158 * 0.5;
    float _1890 = _1159 * 0.5;
    float _1891 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1824, _1827, _1830, _1833));
    float _1894 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1823, _1826, _1829, _1832));
    float _1897 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1822, _1825, _1828, _1831));
    float _1931;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1904 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1517, _1521, _1524, _1527));
        float _1908 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1519, _1522, _1525, _1528));
        float _1912 = dot(vec4(_1888, _1889, _1890, 1.0), vec4(_1520, _1523, _1526, _1529));
        float _1919 = dot(vec4(cbModelParam._m0[39u]), vec4(_1888, _1889, _1890, 1.0));
        _1931 = dot(vec3(isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0)), isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1919) ? 0.0 : (isnan(0.0) ? _1919 : max(0.0, _1919))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1931 = 1.0;
    }
    float _1942;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1933 = dot(vec4(cbModelParam._m0[40u]), vec4(_1888, _1889, _1890, 1.0));
        _1942 = dot(vec3(isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0)), isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0)), isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1933) ? 0.0 : (isnan(0.0) ? _1933 : max(0.0, _1933))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1942 = 1.0;
    }
    float _1946 = (_1942 * cbModelParam._m0[1u].x) + (_1931 * (1.0 - cbModelParam._m0[1u].x));
    float _1956 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1064);
    float _1957 = isnan(_1956) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1956 : min(cbModelParam._m0[25u].z, _1956));
    float _2039;
    float _2041;
    float _2043;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2006 = fma(_1219, cbModelParam._m0[13u].z, fma(_1215, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1211)) + cbModelParam._m0[13u].w;
        float _2010 = fma(_1219, cbModelParam._m0[14u].z, fma(_1215, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1211)) + cbModelParam._m0[14u].w;
        float _2014 = fma(_1219, cbModelParam._m0[15u].z, fma(_1215, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1211)) + cbModelParam._m0[15u].w;
        float _2017 = fma(_1159, cbModelParam._m0[13u].z, fma(_1158, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1157));
        float _2020 = fma(_1159, cbModelParam._m0[14u].z, fma(_1158, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1157));
        float _2023 = fma(_1159, cbModelParam._m0[15u].z, fma(_1158, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1157));
        float _2051;
        if (_2017 > 0.0)
        {
            _2051 = abs((1.0 - _2006) / _2017);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2017 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2006 + 1.0) / _2017);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2051 = frontier_phi_14_12_ladder;
        }
        float _2256;
        if (_2020 > 0.0)
        {
            _2256 = abs((1.0 - _2010) / _2020);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2020 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2010 + 1.0) / _2020);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2256 = frontier_phi_23_19_ladder;
        }
        float _2510;
        if (_2023 > 0.0)
        {
            _2510 = abs((1.0 - _2014) / _2023);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2023 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2014 + 1.0) / _2023);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2510 = frontier_phi_35_30_ladder;
        }
        float _2512 = isnan(_2256) ? _2051 : (isnan(_2051) ? _2256 : min(_2051, _2256));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _2017) + _2006;
        float _2518 = (_2513 * _2020) + _2010;
        float _2519 = (_2513 * _2023) + _2014;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2522 = (-1.0) - _2520;
        float _2524 = _2520 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2519 > _2524) || ((_2519 < _2522) || ((_2518 > _2524) || ((_2518 < _2522) || ((_2517 < _2522) || (_2517 > _2524))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2519, cbModelParam._m0[9u].z, fma(_2518, cbModelParam._m0[9u].y, _2517 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2519, cbModelParam._m0[10u].z, fma(_2518, cbModelParam._m0[10u].y, _2517 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2519, cbModelParam._m0[11u].z, fma(_2518, cbModelParam._m0[11u].y, _2517 * cbModelParam._m0[11u].x))), _1957);
            frontier_phi_13_35_ladder = _2647.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2647.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2647.x * cbModelParam._m0[1u].y;
        }
        _2039 = frontier_phi_13_35_ladder_2;
        _2041 = frontier_phi_13_35_ladder_1;
        _2043 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2027 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1157, _1158, _1159), _1957);
        _2039 = _2027.x * cbModelParam._m0[1u].y;
        _2041 = _2027.y * cbModelParam._m0[1u].y;
        _2043 = _2027.z * cbModelParam._m0[1u].y;
    }
    float _2047 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1064);
    float _2048 = isnan(_2047) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2047 : min(cbModelParam._m0[25u].w, _2047));
    float _2140;
    float _2142;
    float _2144;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2104 = fma(_1219, cbModelParam._m0[21u].z, fma(_1215, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1211)) + cbModelParam._m0[21u].w;
        float _2108 = fma(_1219, cbModelParam._m0[22u].z, fma(_1215, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1211)) + cbModelParam._m0[22u].w;
        float _2112 = fma(_1219, cbModelParam._m0[23u].z, fma(_1215, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1211)) + cbModelParam._m0[23u].w;
        float _2115 = fma(_1159, cbModelParam._m0[21u].z, fma(_1158, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1157));
        float _2118 = fma(_1159, cbModelParam._m0[22u].z, fma(_1158, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1157));
        float _2121 = fma(_1159, cbModelParam._m0[23u].z, fma(_1158, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1157));
        float _2261;
        if (_2115 > 0.0)
        {
            _2261 = abs((1.0 - _2104) / _2115);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2104 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2261 = frontier_phi_25_21_ladder;
        }
        float _2537;
        if (_2118 > 0.0)
        {
            _2537 = abs((1.0 - _2108) / _2118);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2108 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2537 = frontier_phi_37_32_ladder;
        }
        float _2750;
        if (_2121 > 0.0)
        {
            _2750 = abs((1.0 - _2112) / _2121);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2112 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2750 = frontier_phi_46_43_ladder;
        }
        float _2752 = isnan(_2537) ? _2261 : (isnan(_2261) ? _2537 : min(_2261, _2537));
        float _2753 = isnan(_2750) ? _2752 : (isnan(_2752) ? _2750 : min(_2752, _2750));
        float _2757 = (_2753 * _2115) + _2104;
        float _2758 = (_2753 * _2118) + _2108;
        float _2759 = (_2753 * _2121) + _2112;
        float _2760 = _2753 * 9.9999997473787516355514526367188e-05;
        float _2761 = (-1.0) - _2760;
        float _2763 = _2760 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2759 > _2763) || ((_2759 < _2761) || ((_2758 > _2763) || ((_2758 < _2761) || ((_2757 < _2761) || (_2757 > _2763))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2987 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2759, cbModelParam._m0[17u].z, fma(_2758, cbModelParam._m0[17u].y, _2757 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2759, cbModelParam._m0[18u].z, fma(_2758, cbModelParam._m0[18u].y, _2757 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2759, cbModelParam._m0[19u].z, fma(_2758, cbModelParam._m0[19u].y, _2757 * cbModelParam._m0[19u].x))), _2048);
            frontier_phi_22_46_ladder = _2987.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2987.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2987.x * cbModelParam._m0[1u].z;
        }
        _2140 = frontier_phi_22_46_ladder_2;
        _2142 = frontier_phi_22_46_ladder_1;
        _2144 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2124 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1157, _1158, _1159), _2048);
        _2140 = _2124.x * cbModelParam._m0[1u].z;
        _2142 = _2124.y * cbModelParam._m0[1u].z;
        _2144 = _2124.z * cbModelParam._m0[1u].z;
    }
    float _2157 = (((_1182 * _1134) + _1183) * _1149) * ((cbModelParam._m0[1u].w * (_2140 - _2039)) + _2039);
    float _2159 = (((_1182 * _1136) + _1183) * _1149) * ((cbModelParam._m0[1u].w * (_2142 - _2041)) + _2041);
    float _2161 = (((_1182 * _1137) + _1183) * _1149) * ((cbModelParam._m0[1u].w * (_2144 - _2043)) + _2043);
    float _2164 = fma(_2161, cbSceneParam._m0[89u].z, fma(_2159, cbSceneParam._m0[89u].y, _2157 * cbSceneParam._m0[89u].x));
    float _2167 = fma(_2161, cbSceneParam._m0[90u].z, fma(_2159, cbSceneParam._m0[90u].y, _2157 * cbSceneParam._m0[90u].x));
    float _2170 = fma(_2161, cbSceneParam._m0[91u].z, fma(_2159, cbSceneParam._m0[91u].y, _2157 * cbSceneParam._m0[91u].x));
    uvec4 _2180 = floatBitsToUint(cbInstanceData._m0[_1077 + 5u]);
    uint _2182 = _2180.x * 14u;
    uint _2183 = _2182 + 13u;
    float _2190 = _1149 + (-1.0);
    float _2195 = (cbLight._m0[_2183].x * _2190) + 1.0;
    float _2196 = (cbLight._m0[_2183].y * _2190) + 1.0;
    float _2197 = (cbLight._m0[_2183].z * _2190) + 1.0;
    float _2198 = (cbLight._m0[_2183].w * _2190) + 1.0;
    uint _2199 = _2182 + 5u;
    float _2205 = isnan(1.0) ? _2196 : (isnan(_2196) ? 1.0 : min(_2196, 1.0));
    uint _2209 = _2182 + 4u;
    float _2215 = isnan(1.0) ? _2195 : (isnan(_2195) ? 1.0 : min(_2195, 1.0));
    uint _2219 = _2182 | 1u;
    float _2230 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_954, _955, _956));
    float _2233 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_954, _955, _956));
    float _4464 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _4475 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2238 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * 0.3183098733425140380859375;
    float _2240 = (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0))) * 0.3183098733425140380859375;
    float _2247 = ((cbLight._m0[_2199].x * _2205) * _2240) + ((cbLight._m0[_2209].x * _2215) * _2238);
    float _2248 = ((_2205 * cbLight._m0[_2199].y) * _2240) + ((_2215 * cbLight._m0[_2209].y) * _2238);
    float _2249 = ((_2205 * cbLight._m0[_2199].z) * _2240) + ((_2215 * cbLight._m0[_2209].z) * _2238);
    uvec4 _2253 = floatBitsToUint(cbLight._m0[_2182 + 12u]);
    bool _2255 = _2253.x == 0u;
    float _2266;
    float _2268;
    float _2270;
    if (_2255)
    {
        _2266 = _2247;
        _2268 = _2248;
        _2270 = _2249;
    }
    else
    {
        uint _2274 = _2182 + 6u;
        float _2290 = (dot(vec3(cbLight._m0[_2182 + 2u].xyz), vec3(_954, _955, _956)) * 0.5) + 0.5;
        float _2291 = _2290 * _2290;
        float _4486 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
        float _2292 = isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0));
        float _2293 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2266 = (((cbLight._m0[_2274].x * 0.3183098733425140380859375) * _2292) * _2293) + _2247;
        _2268 = (((cbLight._m0[_2274].y * 0.3183098733425140380859375) * _2292) * _2293) + _2248;
        _2270 = (((cbLight._m0[_2274].z * 0.3183098733425140380859375) * _2292) * _2293) + _2249;
    }
    bool _2273 = _2253.y == 0u;
    float _2311;
    float _2313;
    float _2315;
    if (_2273)
    {
        _2311 = _2266;
        _2313 = _2268;
        _2315 = _2270;
    }
    else
    {
        uint _2481 = _2182 + 7u;
        float _2497 = (dot(vec3(cbLight._m0[_2182 + 3u].xyz), vec3(_954, _955, _956)) * 0.5) + 0.5;
        float _2498 = _2497 * _2497;
        float _4502 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2499 = isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0));
        float _2500 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2311 = (((cbLight._m0[_2481].x * 0.3183098733425140380859375) * _2499) * _2500) + _2266;
        _2313 = (((cbLight._m0[_2481].y * 0.3183098733425140380859375) * _2499) * _2500) + _2268;
        _2315 = (((cbLight._m0[_2481].z * 0.3183098733425140380859375) * _2499) * _2500) + _2270;
    }
    uint _2318 = _2182 + 8u;
    float _2331 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2182].w)) * _1064) * 0.949999988079071044921875);
    float _2332 = _2331 * _2331;
    float _2333 = cbLight._m0[_2182].x + _1014;
    float _2334 = cbLight._m0[_2182].y + _1015;
    float _2335 = cbLight._m0[_2182].z + _1016;
    float _2339 = inversesqrt(dot(vec3(_2333, _2334, _2335), vec3(_2333, _2334, _2335)));
    float _2340 = _2339 * _2333;
    float _2341 = _2339 * _2334;
    float _2342 = _2339 * _2335;
    float _2343 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2182].xyz));
    float _4518 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
    float _4529 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
    float _2347 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
    float _2348 = dot(vec3(_954, _955, _956), vec3(_2340, _2341, _2342));
    float _4540 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2351 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
    float _2352 = dot(vec3(cbLight._m0[_2182].xyz), vec3(_2340, _2341, _2342));
    float _4551 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2356 = _2332 * _2332;
    float _2360 = ((_2351 * _2351) * (_2356 + (-1.0))) + 1.0;
    float _2368 = exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0);
    float _2369 = 0.959999978542327880859375 - _1131;
    float _2371 = 0.959999978542327880859375 - _1132;
    float _2372 = 0.959999978542327880859375 - _1133;
    float _2379 = 1.0 - _2332;
    float _2390 = (0.5 / (((_2347 * ((_2346 * _2379) + _2332)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2379) + _2332) * _2346))) * _2346;
    float _4562 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2392 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2356 / ((_2360 * _2360) * 3.141590118408203125));
    uint _2403 = _2182 + 9u;
    float _2414 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2219].w)) * _1064) * 0.949999988079071044921875);
    float _2415 = _2414 * _2414;
    float _2416 = cbLight._m0[_2219].x + _1014;
    float _2417 = cbLight._m0[_2219].y + _1015;
    float _2418 = cbLight._m0[_2219].z + _1016;
    float _2422 = inversesqrt(dot(vec3(_2416, _2417, _2418), vec3(_2416, _2417, _2418)));
    float _2423 = _2422 * _2416;
    float _2424 = _2422 * _2417;
    float _2425 = _2422 * _2418;
    float _2426 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2219].xyz));
    float _4573 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
    float _2429 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
    float _2430 = dot(vec3(_954, _955, _956), vec3(_2423, _2424, _2425));
    float _4584 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    float _2434 = dot(vec3(cbLight._m0[_2219].xyz), vec3(_2423, _2424, _2425));
    float _4595 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2438 = _2415 * _2415;
    float _2442 = ((_2433 * _2433) * (_2438 + (-1.0))) + 1.0;
    float _2449 = exp2(log2(1.0 - (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0)))) * 5.0);
    float _2456 = 1.0 - _2415;
    float _2466 = (0.5 / (((_2347 * ((_2429 * _2456) + _2415)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2456) + _2415) * _2429))) * _2429;
    float _4606 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
    float _2468 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * (_2438 / ((_2442 * _2442) * 3.141590118408203125));
    float _2478 = (((((_2449 * _2369) + _1134) * cbLight._m0[_2403].x) * _2468) * _2205) + (((((_2368 * _2369) + _1134) * cbLight._m0[_2318].x) * _2392) * _2215);
    float _2479 = (((((_2449 * _2371) + _1136) * cbLight._m0[_2403].y) * _2468) * _2205) + (((((_2368 * _2371) + _1136) * cbLight._m0[_2318].y) * _2392) * _2215);
    float _2480 = (((((_2449 * _2372) + _1137) * cbLight._m0[_2403].z) * _2468) * _2205) + (((((_2368 * _2372) + _1137) * cbLight._m0[_2318].z) * _2392) * _2215);
    float _2542;
    float _2544;
    float _2546;
    if (_2255)
    {
        _2542 = _2478;
        _2544 = _2479;
        _2546 = _2480;
    }
    else
    {
        uint _2548 = _2182 + 2u;
        uint _2552 = _2182 + 10u;
        float _2566 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2548].w)) * _1064) * 0.949999988079071044921875);
        float _2567 = _2566 * _2566;
        float _2568 = cbLight._m0[_2548].x + _1014;
        float _2569 = cbLight._m0[_2548].y + _1015;
        float _2570 = cbLight._m0[_2548].z + _1016;
        float _2574 = inversesqrt(dot(vec3(_2568, _2569, _2570), vec3(_2568, _2569, _2570)));
        float _2575 = _2574 * _2568;
        float _2576 = _2574 * _2569;
        float _2577 = _2574 * _2570;
        float _2578 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2548].xyz));
        float _4617 = isnan(0.0) ? _2578 : (isnan(_2578) ? 0.0 : max(_2578, 0.0));
        float _2581 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2582 = dot(vec3(_954, _955, _956), vec3(_2575, _2576, _2577));
        float _4628 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2586 = dot(vec3(cbLight._m0[_2548].xyz), vec3(_2575, _2576, _2577));
        float _4639 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2590 = _2567 * _2567;
        float _2594 = ((_2585 * _2585) * (_2590 + (-1.0))) + 1.0;
        float _2601 = exp2(log2(1.0 - (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) * 5.0);
        float _2608 = 1.0 - _2567;
        float _2618 = (0.5 / (((_2347 * ((_2581 * _2608) + _2567)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2608) + _2567) * _2581))) * _2581;
        float _4650 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
        float _2620 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * (_2590 / ((_2594 * _2594) * 3.141590118408203125));
        float _2621 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
        _2542 = (((((_2601 * _2369) + _1134) * cbLight._m0[_2552].x) * _2620) * _2621) + _2478;
        _2544 = (((((_2601 * _2371) + _1136) * cbLight._m0[_2552].y) * _2620) * _2621) + _2479;
        _2546 = (((((_2601 * _2372) + _1137) * cbLight._m0[_2552].z) * _2620) * _2621) + _2480;
    }
    float _2656;
    float _2658;
    float _2660;
    if (_2273)
    {
        _2656 = _2542;
        _2658 = _2544;
        _2660 = _2546;
    }
    else
    {
        uint _2667 = _2182 + 3u;
        uint _2671 = _2182 + 11u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _1064) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _1014;
        float _2688 = cbLight._m0[_2667].y + _1015;
        float _2689 = cbLight._m0[_2667].z + _1016;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_954, _955, _956), vec3(cbLight._m0[_2667].xyz));
        float _4666 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
        float _2701 = dot(vec3(_954, _955, _956), vec3(_2694, _2695, _2696));
        float _4677 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4688 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0)))) * 5.0);
        float _2727 = 1.0 - _2686;
        float _2737 = (0.5 / (((_2347 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2347 * _2727) + _2686) * _2700))) * _2700;
        float _4699 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
        _2656 = (((((_2720 * _2369) + _1134) * cbLight._m0[_2671].x) * _2739) * _2740) + _2542;
        _2658 = (((((_2720 * _2371) + _1136) * cbLight._m0[_2671].y) * _2739) * _2740) + _2544;
        _2660 = (((((_2720 * _2372) + _1137) * cbLight._m0[_2671].z) * _2739) * _2740) + _2546;
    }
    float _2875;
    float _2877;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_2180.y == 0u)
    {
        float _2815 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2816 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2815;
        float _2817 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2815;
        float _2818 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2815;
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.x;
        uint _2842 = uint((float(_2830.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1023) / _2831))) + floor(float(uint(cbSceneParam._m0[85u].x * _1022) / _2831)));
        float _2852 = (log2(_2818 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2853 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        uint _2856 = uint(isnan(14.0) ? _2853 : (isnan(_2853) ? 14.0 : min(_2853, 14.0)));
        uvec4 _2861 = texelFetch(g_lightClusterGridBuffer, int(((_2856 << 2u) + (_2842 << 6u)) >> 2u));
        uint _2862 = _2861.x;
        uint _2863 = _2830.z;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        if (((((1u << ((_2863 >> 4u) & 15u)) + 4294967295u) & _2862) == 0u) || ((_2863 & 240u) == 0u))
        {
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
        }
        else
        {
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            float _3147 = 0.0;
            float _3148 = 0.0;
            float _3149 = 0.0;
            uint _3150 = 0u;
            uint _3159;
            bool _3160;
            for (;;)
            {
                _3159 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3150 << 2u)) >> 2u)).x;
                _3160 = _3159 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3160)
                {
                    frontier_phi_61_pred = _3144;
                    frontier_phi_61_pred_1 = _3149;
                    frontier_phi_61_pred_2 = _3148;
                    frontier_phi_61_pred_3 = _3147;
                    frontier_phi_61_pred_4 = _3146;
                    frontier_phi_61_pred_5 = _3145;
                }
                else
                {
                    float _3268;
                    float _3269;
                    float _3270;
                    float _3271;
                    float _3272;
                    float _3273;
                    uint _3274;
                    _3268 = _3144;
                    _3269 = _3145;
                    _3270 = _3146;
                    _3271 = _3147;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3159;
                    float _3200;
                    float _3201;
                    float _3202;
                    float _3203;
                    float _3204;
                    float _3205;
                    for (;;)
                    {
                        uint _3278 = uint(findLSB(_3274)) + (_3150 << 5u);
                        uint _3275 = (_3274 + 4294967295u) & _3274;
                        uint _3280 = _3278 * 48u;
                        vec4 _3294 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3280)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3280 + 3u)).x));
                        uint _3300 = (_3278 * 48u) + 4u;
                        vec4 _3313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3300)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3300 + 3u)).x));
                        uint _3319 = (_3278 * 48u) + 8u;
                        vec3 _3330 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3319)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3319 + 2u)).x));
                        float _3334 = _3294.x - _2816;
                        float _3335 = _3294.y - _2817;
                        float _3336 = _3294.z - _2818;
                        float _3337 = dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336));
                        float _3340 = inversesqrt(_3337);
                        float _3341 = _3340 * _3334;
                        float _3342 = _3340 * _3335;
                        float _3343 = _3340 * _3336;
                        float _3344 = dot(vec3(_1045, _1048, _1051), vec3(_3341, _3342, _3343));
                        float _3349 = 1.0 - (_3337 * _3294.w);
                        float _4725 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3350 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                        float _3351 = sqrt(_3337) * _3313.w;
                        float _3354 = 1.39999997615814208984375 / (_3351 + 1.39999997615814208984375);
                        float _3355 = _3354 * _3354;
                        float _3358 = ((1.0 - _3355) * _3344) + _3355;
                        float _3361 = _3351 * _3351;
                        float _3365 = ((isnan(0.0) ? _3358 : (isnan(_3358) ? 0.0 : max(_3358, 0.0))) * _3350) / ((_3361 * 0.699999988079071044921875) + 1.0);
                        float _3369 = (-0.0) - _2816;
                        float _3370 = (-0.0) - _2817;
                        float _3371 = (-0.0) - _2818;
                        float _3375 = inversesqrt(dot(vec3(_3369, _3370, _3371), vec3(_3369, _3370, _3371)));
                        float _3376 = _3375 * _3369;
                        float _3377 = _3375 * _3370;
                        float _3378 = _3375 * _3371;
                        float _3386 = exp2(log2(1.0 / ((_3361 * 3.5) + 5.0)) * 0.25);
                        float _3387 = 1.0 - _1165;
                        float _3394 = sqrt(1.0 - ((1.0 - (_3387 * _3387)) * (1.0 - (_3386 * _3386))));
                        float _3395 = _3394 * _3394;
                        float _3396 = _3395 * _3395;
                        float _3397 = _3376 + _3341;
                        float _3398 = _3377 + _3342;
                        float _3399 = _3378 + _3343;
                        float _3403 = inversesqrt(dot(vec3(_3397, _3398, _3399), vec3(_3397, _3398, _3399)));
                        float _3407 = dot(vec3(_1045, _1048, _1051), vec3(_3376, _3377, _3378));
                        float _4741 = isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0));
                        float _3410 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
                        float _3411 = dot(vec3(_1045, _1048, _1051), vec3(_3403 * _3397, _3403 * _3398, _3403 * _3399));
                        float _4752 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
                        float _3418 = ((_3414 * _3414) * (_3396 + (-1.0))) + 1.0;
                        float _3419 = _3354 * _3395;
                        float _3420 = _3419 * _3419;
                        float _3423 = ((1.0 - _3420) * _3344) + _3420;
                        float _4763 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                        float _3424 = isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0));
                        float _3425 = 1.0 - _3395;
                        float _3435 = (0.5 / (((_3424 * ((_3410 * _3425) + _3395)) + 9.9999999392252902907785028219223e-09) + (((_3424 * _3425) + _3395) * _3410))) * _3424;
                        float _4774 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3446 = (((_3396 * 3.1415927410125732421875) * (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0)))) / ((_3418 * _3418) * ((_3361 * 2.1991131305694580078125) + 3.141590118408203125))) * _3350;
                        _3203 = (_3365 * _3313.x) + _3271;
                        _3204 = (_3365 * _3313.y) + _3272;
                        _3205 = (_3365 * _3313.z) + _3273;
                        _3200 = (_3446 * _3330.x) + _3268;
                        _3201 = (_3446 * _3330.y) + _3269;
                        _3202 = (_3446 * _3330.z) + _3270;
                        if (_3275 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3268 = _3200;
                            _3269 = _3201;
                            _3270 = _3202;
                            _3271 = _3203;
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3275;
                        }
                    }
                    frontier_phi_61_pred = _3200;
                    frontier_phi_61_pred_1 = _3205;
                    frontier_phi_61_pred_2 = _3204;
                    frontier_phi_61_pred_3 = _3203;
                    frontier_phi_61_pred_4 = _3202;
                    frontier_phi_61_pred_5 = _3201;
                }
                _2993 = frontier_phi_61_pred;
                _3003 = frontier_phi_61_pred_1;
                _3001 = frontier_phi_61_pred_2;
                _2999 = frontier_phi_61_pred_3;
                _2997 = frontier_phi_61_pred_4;
                _2995 = frontier_phi_61_pred_5;
                uint _3151 = _3150 + 1u;
                if (_3151 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3144 = _2993;
                    _3145 = _2995;
                    _3146 = _2997;
                    _3147 = _2999;
                    _3148 = _3001;
                    _3149 = _3003;
                    _3150 = _3151;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
        }
        uvec4 _3006 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3007 = _3006.z;
        uint _3009 = (_3007 >> 8u) & 15u;
        float _3112;
        float _3114;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        if (((4294967295u << _3009) & _2862) == 0u)
        {
            _3112 = _2992;
            _3114 = _2994;
            _3116 = _2996;
            _3118 = _2998;
            _3120 = _3000;
            _3122 = _3002;
        }
        else
        {
            float _3137 = inversesqrt(dot(vec3(_2816, _2817, _2818), vec3(_2816, _2817, _2818)));
            float _3138 = _3137 * _2816;
            float _3139 = _3137 * _2817;
            float _3140 = _3137 * _2818;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3009 < ((_3007 >> 12u) & 15u))
            {
                float _3113;
                float _3115;
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3251 = _2992;
                float _3252 = _2994;
                float _3253 = _2996;
                float _3254 = _2998;
                float _3255 = _3000;
                float _3256 = _3002;
                uint _3257 = _3009;
                uint _3266;
                bool _3267;
                for (;;)
                {
                    _3266 = texelFetch(g_lightClassification, int((((_2856 << 5u) + (_2842 << 9u)) + (_3257 << 2u)) >> 2u)).x;
                    _3267 = _3266 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3267)
                    {
                        frontier_phi_67_pred = _3254;
                        frontier_phi_67_pred_1 = _3255;
                        frontier_phi_67_pred_2 = _3256;
                        frontier_phi_67_pred_3 = _3253;
                        frontier_phi_67_pred_4 = _3252;
                        frontier_phi_67_pred_5 = _3251;
                    }
                    else
                    {
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3464 = _3251;
                        float _3465 = _3252;
                        float _3466 = _3253;
                        float _3467 = _3254;
                        float _3468 = _3255;
                        float _3469 = _3256;
                        uint _3470 = _3266;
                        uint _3471;
                        vec4 _3496;
                        float _3497;
                        vec4 _3512;
                        vec3 _3524;
                        vec4 _3540;
                        vec4 _3555;
                        float _3601;
                        bool _3602;
                        for (;;)
                        {
                            uint _3481 = ((_3257 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3470));
                            _3471 = (_3470 + 4294967295u) & _3470;
                            uint _3483 = _3481 * 40u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3497 = _3496.w;
                            uint _3499 = (_3481 * 40u) + 4u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3481 * 40u) + 8u;
                            _3524 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x));
                            uint _3527 = (_3481 * 40u) + 16u;
                            _3540 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3527)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3527 + 3u)).x));
                            uint _3542 = (_3481 * 40u) + 20u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            uint _3557 = (_3481 * 40u) + 24u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3576 = (_3481 * 40u) + 28u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            _3601 = fma(_2818, _3589.z, fma(_2817, _3589.y, _3589.x * _2816)) + _3589.w;
                            _3602 = !((fma(_2818, _3570.z, fma(_2817, _3570.y, _3570.x * _2816)) + _3570.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3602)
                            {
                                float _3629 = _3496.x - _2816;
                                float _3630 = _3496.y - _2817;
                                float _3631 = _3496.z - _2818;
                                float _3632 = dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631));
                                float _3635 = inversesqrt(_3632);
                                float _3636 = _3635 * _3629;
                                float _3637 = _3635 * _3630;
                                float _3638 = _3635 * _3631;
                                float _3642 = 1.0 - (_3632 / (_3497 * _3497));
                                float _4785 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
                                float _3647 = sqrt(_3632) * _3512.w;
                                float _3649 = 1.39999997615814208984375 / (_3647 + 1.39999997615814208984375);
                                float _3650 = _3649 * _3649;
                                float _3653 = ((1.0 - _3650) * dot(vec3(_3636, _3637, _3638), vec3(_1045, _1048, _1051))) + _3650;
                                float _3656 = _3647 * _3647;
                                float _3660 = (fma(_2818, _3540.z, fma(_2817, _3540.y, _3540.x * _2816)) + _3540.w) / _3601;
                                float _3661 = (fma(_2818, _3555.z, fma(_2817, _3555.y, _3555.x * _2816)) + _3555.w) / _3601;
                                float _3665 = 1.0 - dot(vec2(_3660, _3661), vec2(_3660, _3661));
                                float _4801 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0));
                                float _3667 = _3666 * (((isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0))) * _3643) / ((_3656 * 0.699999988079071044921875) + 1.0));
                                float _3679 = exp2(log2(1.0 / ((_3656 * 3.5) + 5.0)) * 0.25);
                                float _3680 = 1.0 - _1165;
                                float _3687 = sqrt(1.0 - ((1.0 - (_3680 * _3680)) * (1.0 - (_3679 * _3679))));
                                float _3688 = _3687 * _3687;
                                float _3689 = _3688 * _3688;
                                float _3690 = _3636 - _3138;
                                float _3691 = _3637 - _3139;
                                float _3692 = _3638 - _3140;
                                float _3696 = inversesqrt(dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692)));
                                float _3700 = dot(vec3(_1045, _1048, _1051), vec3((-0.0) - _3138, (-0.0) - _3139, (-0.0) - _3140));
                                float _4812 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
                                float _3704 = dot(vec3(_1045, _1048, _1051), vec3(_3696 * _3690, _3696 * _3691, _3696 * _3692));
                                float _4823 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0));
                                float _3711 = ((_3707 * _3707) * (_3689 + (-1.0))) + 1.0;
                                float _3712 = _3649 * _3688;
                                float _3713 = _3712 * _3712;
                                float _3719 = ((1.0 - _3713) * dot(vec3(_1045, _1048, _1051), vec3(_3636, _3637, _3638))) + _3713;
                                float _4834 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
                                float _3721 = 1.0 - _3688;
                                float _3731 = (0.5 / (((_3720 * ((_3703 * _3721) + _3688)) + 9.9999999392252902907785028219223e-09) + (((_3720 * _3721) + _3688) * _3703))) * _3720;
                                float _4845 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3741 = (_3666 * _3643) * (((_3689 * 3.1415927410125732421875) * (isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0)))) / ((_3711 * _3711) * ((_3656 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3741 * _3524.x;
                                frontier_phi_73_pred_1 = _3741 * _3524.y;
                                frontier_phi_73_pred_2 = _3667 * _3512.z;
                                frontier_phi_73_pred_3 = _3667 * _3512.y;
                                frontier_phi_73_pred_4 = _3667 * _3512.x;
                                frontier_phi_73_pred_5 = _3741 * _3524.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3745 = frontier_phi_73_pred;
                            _3746 = frontier_phi_73_pred_1;
                            _3750 = frontier_phi_73_pred_2;
                            _3749 = frontier_phi_73_pred_3;
                            _3748 = frontier_phi_73_pred_4;
                            _3747 = frontier_phi_73_pred_5;
                            _3454 = _3748 + _3467;
                            _3455 = _3749 + _3468;
                            _3456 = _3750 + _3469;
                            _3451 = _3745 + _3464;
                            _3452 = _3746 + _3465;
                            _3453 = _3747 + _3466;
                            if (_3471 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3471;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3454;
                        frontier_phi_67_pred_1 = _3455;
                        frontier_phi_67_pred_2 = _3456;
                        frontier_phi_67_pred_3 = _3453;
                        frontier_phi_67_pred_4 = _3452;
                        frontier_phi_67_pred_5 = _3451;
                    }
                    _3119 = frontier_phi_67_pred;
                    _3121 = frontier_phi_67_pred_1;
                    _3123 = frontier_phi_67_pred_2;
                    _3117 = frontier_phi_67_pred_3;
                    _3115 = frontier_phi_67_pred_4;
                    _3113 = frontier_phi_67_pred_5;
                    uint _3258 = _3257 + 1u;
                    if (_3258 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3251 = _3113;
                        _3252 = _3115;
                        _3253 = _3117;
                        _3254 = _3119;
                        _3255 = _3121;
                        _3256 = _3123;
                        _3257 = _3258;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3121;
                frontier_phi_55_56_ladder_1 = _3123;
                frontier_phi_55_56_ladder_2 = _3119;
                frontier_phi_55_56_ladder_3 = _3117;
                frontier_phi_55_56_ladder_4 = _3115;
                frontier_phi_55_56_ladder_5 = _3113;
            }
            else
            {
                frontier_phi_55_56_ladder = _3000;
                frontier_phi_55_56_ladder_1 = _3002;
                frontier_phi_55_56_ladder_2 = _2998;
                frontier_phi_55_56_ladder_3 = _2996;
                frontier_phi_55_56_ladder_4 = _2994;
                frontier_phi_55_56_ladder_5 = _2992;
            }
            _3112 = frontier_phi_55_56_ladder_5;
            _3114 = frontier_phi_55_56_ladder_4;
            _3116 = frontier_phi_55_56_ladder_3;
            _3118 = frontier_phi_55_56_ladder_2;
            _3120 = frontier_phi_55_56_ladder;
            _3122 = frontier_phi_55_56_ladder_1;
        }
        float _3127 = isnan(1.0) ? _1149 : (isnan(_1149) ? 1.0 : min(_1149, 1.0));
        _2875 = (_3127 * _3118) + _2311;
        _2877 = (_3127 * _3120) + _2313;
        _2879 = (_3127 * _3122) + _2315;
        _2881 = ((_3112 * _1134) * _3127) + _2656;
        _2883 = ((_3114 * _1136) * _3127) + _2658;
        _2885 = ((_3116 * _1137) * _3127) + _2660;
    }
    else
    {
        _2875 = _2311;
        _2877 = _2313;
        _2879 = _2315;
        _2881 = _2656;
        _2883 = _2658;
        _2885 = _2660;
    }
    uint _2891 = _1078 + uint(cbMatDynParam._m0[0u].w);
    float _2897 = (((((cbMtdParam._m0[22u].x * _858.x) * cbMtdParam._m0[32u].x) * _879) + _630) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2891].x;
    float _2898 = (((((cbMtdParam._m0[22u].y * _858.y) * cbMtdParam._m0[32u].x) * _879) + _631) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2891].y;
    float _2899 = (((((cbMtdParam._m0[22u].z * _858.z) * cbMtdParam._m0[32u].x) * _879) + _632) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2891].z;
    float _4861 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
    float _4872 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _4883 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _2916 = (((isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0))) * (_2875 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1149))) + ((_2881 + ((isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0))) * _1946)) * cbPerFrame._m0[3u].x)) + _2897;
    float _2918 = (_2898 + ((_2883 + ((isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0))) * _1946)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0))) * (_2877 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1149)));
    float _2920 = (_2899 + ((_2885 + ((isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0))) * _1946)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_2879 + ((isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0))) * _1149)));
    float _4909 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2933 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
    uint _2934 = _1077 + 6u;
    float _2942 = _1022 / cbSceneParam._m0[86u].x;
    float _2943 = _1023 / cbSceneParam._m0[86u].y;
    vec4 _2957 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2942, _2943, (log2((isnan(cbSceneParam._m0[77u].w) ? _977 : (isnan(_977) ? cbSceneParam._m0[77u].w : min(_977, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2959 = _2957.x;
    float _2960 = _2957.y;
    float _2961 = _2957.z;
    float _2962 = _2957.w;
    float _3054;
    float _3056;
    float _3058;
    float _3060;
    if (_977 > cbSceneParam._m0[78u].w)
    {
        float _3017 = isnan(_977) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _977 : min(cbSceneParam._m0[80u].w, _977));
        float _3018 = _3017 / _977;
        float _3029 = _3018 * _1007;
        float _3030 = _1008 * _3018;
        float _3031 = (-0.0) - _3030;
        float _3032 = _3018 * _1009;
        float _3034 = (cbSceneParam._m0[77u].w * _3031) / _3017;
        float _3035 = _3034 + cbSceneParam._m0[79u].w;
        float _3036 = cbSceneParam._m0[79u].w - _3030;
        float _3042 = sqrt(((_3029 * _3029) + (_3030 * _3030)) + (_3032 * _3032));
        float _3045 = (1.0 - (cbSceneParam._m0[77u].w / _3017)) * _3042;
        float _3050 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3052 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3213;
        if (abs((_3031 - _3034) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3213 = ((((_3035 > 0.0) ? exp2(_3050 * _3035) : (2.0 - exp2(_3052 * _3035))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3045;
        }
        else
        {
            float _3173 = 1.0 / cbSceneParam._m0[80u].x;
            float _3174 = isnan(_3036) ? _3035 : (isnan(_3035) ? _3036 : max(_3035, _3036));
            float _3175 = isnan(_3036) ? _3035 : (isnan(_3035) ? _3036 : min(_3035, _3036));
            float _3184 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : min(_3174, 0.0));
            float _3185 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : min(_3175, 0.0));
            _3213 = ((abs(_3042 / _3031) * cbSceneParam._m0[80u].y) * ((((_3184 - _3185) * 2.0) - ((exp2(_3050 * (isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0)))) - exp2(_3050 * (isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0))))) * _3173)) - ((exp2(_3052 * _3184) - exp2(_3052 * _3185)) * _3173))) + (_3045 * cbSceneParam._m0[80u].z);
        }
        vec4 _3215 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2942, _2943, 1.0), 0.0);
        float _3224 = exp2((_3213 * (-1.44269502162933349609375)) * (1.0 - _3215.w));
        float _3225 = log2(_3224);
        float _3241 = log2(_2962);
        _3054 = (exp2(_3241 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].x)) * _3215.x) / cbSceneParam._m0[78u].x)) + _2959;
        _3056 = (exp2(_3241 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].y)) * _3215.y) / cbSceneParam._m0[78u].y)) + _2960;
        _3058 = (exp2(_3241 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3225 * cbSceneParam._m0[78u].z)) * _3215.z) / cbSceneParam._m0[78u].z)) + _2961;
        _3060 = _3224 * _2962;
    }
    else
    {
        _3054 = _2959;
        _3056 = _2960;
        _3058 = _2961;
        _3060 = _2962;
    }
    float _3071 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3072 = _3071 == 3.0;
    float _3073 = log2(_3060);
    float _3077 = exp2(_3073 * cbSceneParam._m0[78u].x);
    float _3078 = exp2(_3073 * cbSceneParam._m0[78u].y);
    float _3079 = exp2(_3073 * cbSceneParam._m0[78u].z);
    float _3080 = _3077 * (isnan(0.0) ? _2916 : (isnan(_2916) ? 0.0 : max(_2916, 0.0)));
    float _3081 = _3078 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)));
    float _3082 = _3079 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0)));
    float _3091 = (_3071 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3091 * (_3072 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3054)));
    SV_Target.y = _3091 * (_3072 ? _3081 : (_3081 + (cbSceneParam._m0[72u].w * _3056)));
    SV_Target.z = _3091 * (_3072 ? _3082 : (_3082 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.w = cbInstanceData._m0[_2934].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2897) * _2933) * _3077) * _3091;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2898) * _2933) * _3078) * _3091;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2899) * _2933) * _3079) * _3091;
    SV_Target_1.w = cbInstanceData._m0[_2934].w;
}


