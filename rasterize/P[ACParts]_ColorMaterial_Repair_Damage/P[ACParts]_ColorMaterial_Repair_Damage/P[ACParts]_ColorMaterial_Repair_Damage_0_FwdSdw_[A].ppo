#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1752;
float _4441;
float _4442;
float _4443;
float _4444;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _284 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _289 = _284.z;
    float _290 = _284.w;
    vec4 _312 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _317 = _312.w;
    float _329 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _289) * exp2(log2(1.0 - _317) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _330 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _331 = isnan(1.0) ? _330 : (isnan(_330) ? 1.0 : min(_330, 1.0));
    vec4 _345 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _355 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _363 = (_355 - (((_345.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _355))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4463 = isnan(0.0) ? _363 : (isnan(_363) ? 0.0 : max(_363, 0.0));
    float _364 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
    float _366 = _331 - (_364 * _331);
    float _367 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    vec4 _381 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _384 = _381.y;
    float _385 = _384 * (isnan(1.0) ? _367 : (isnan(_367) ? 1.0 : min(_367, 1.0)));
    float _394 = exp2(log2(cbMtdParam._m0[32u].w * _317) * cbMtdParam._m0[31u].z);
    float _396 = _394 - (_364 * _394);
    float _397 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _398 = isnan(1.0) ? _397 : (isnan(_397) ? 1.0 : min(_397, 1.0));
    float _409 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_290) * 4.5));
    float _418 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _289) * _409)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _419 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _420 = isnan(1.0) ? _419 : (isnan(_419) ? 1.0 : min(_419, 1.0));
    float _431 = exp2(log2((1.0 - (((_409 * _409) * _289) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _432 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _436 = (((isnan(1.0) ? _432 : (isnan(_432) ? 1.0 : min(_432, 1.0))) - _290) * _384) + _290;
    vec4 _448 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _213[6];
    float _214[6];
    float _215[6];
    _213[0u] = cbMtdParam._m0[12u].x;
    _214[0u] = cbMtdParam._m0[12u].y;
    _215[0u] = cbMtdParam._m0[12u].z;
    _213[1u] = cbMtdParam._m0[13u].x;
    _214[1u] = cbMtdParam._m0[13u].y;
    _215[1u] = cbMtdParam._m0[13u].z;
    _213[2u] = cbMtdParam._m0[14u].x;
    _214[2u] = cbMtdParam._m0[14u].y;
    _215[2u] = cbMtdParam._m0[14u].z;
    _213[3u] = cbMtdParam._m0[15u].x;
    _214[3u] = cbMtdParam._m0[15u].y;
    _215[3u] = cbMtdParam._m0[15u].z;
    _213[4u] = cbMtdParam._m0[16u].x;
    _214[4u] = cbMtdParam._m0[16u].y;
    _215[4u] = cbMtdParam._m0[16u].z;
    _213[5u] = cbMtdParam._m0[11u].x;
    _214[5u] = cbMtdParam._m0[11u].y;
    _215[5u] = cbMtdParam._m0[11u].z;
    float _516 = (_381.x + (-0.02500000037252902984619140625)) * 8.0;
    float _518 = roundEven(_516);
    float _519 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    uint _522 = uint(int(isnan(5.0) ? _519 : (isnan(_519) ? 5.0 : min(_519, 5.0))));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = 1.0;
    _210[0u] = 1.0;
    _211[0u] = 1.0;
    _209[1u] = cbMtdParam._m0[23u].x;
    _210[1u] = cbMtdParam._m0[23u].y;
    _211[1u] = cbMtdParam._m0[23u].z;
    _209[2u] = cbMtdParam._m0[21u].x;
    _210[2u] = cbMtdParam._m0[21u].y;
    _211[2u] = cbMtdParam._m0[21u].z;
    _209[3u] = cbMtdParam._m0[19u].x;
    _210[3u] = cbMtdParam._m0[19u].y;
    _211[3u] = cbMtdParam._m0[19u].z;
    _209[4u] = cbMtdParam._m0[18u].x;
    _210[4u] = cbMtdParam._m0[18u].y;
    _211[4u] = cbMtdParam._m0[18u].z;
    _209[5u] = cbMtdParam._m0[17u].x;
    _210[5u] = cbMtdParam._m0[17u].y;
    _211[5u] = cbMtdParam._m0[17u].z;
    float _611 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _612 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    uint _614 = uint(int(isnan(5.0) ? _612 : (isnan(_612) ? 5.0 : min(_612, 5.0))));
    float _212[6];
    _212[0u] = 1.0;
    _212[1u] = cbMtdParam._m0[23u].w;
    _212[2u] = cbMtdParam._m0[21u].w;
    _212[3u] = cbMtdParam._m0[19u].w;
    _212[4u] = cbMtdParam._m0[18u].w;
    _212[5u] = cbMtdParam._m0[17u].w;
    float _651 = ((((_213[_522] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_209[_614] - _213[_522])) * _212[_522])) * _384) + cbMtdParam._m0[10u].x) * _448.x;
    float _652 = ((((_214[_522] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_210[_614] - _214[_522])) * _212[_522])) * _384) + cbMtdParam._m0[10u].y) * _448.y;
    float _653 = ((((_215[_522] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_211[_614] - _215[_522])) * _212[_522])) * _384) + cbMtdParam._m0[10u].z) * _448.z;
    vec4 _665 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _676 = cbMtdParam._m0[9u].x * _665.x;
    float _677 = cbMtdParam._m0[9u].y * _665.y;
    float _678 = cbMtdParam._m0[9u].z * _665.z;
    float _685 = ((_676 - _651) * _436) + _651;
    float _686 = ((_677 - _652) * _436) + _652;
    float _687 = ((_678 - _653) * _436) + _653;
    vec4 _699 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _719 = (((cbMtdParam._m0[20u].x * _699.x) - _685) * _420) + _685;
    float _720 = (((cbMtdParam._m0[20u].y * _699.y) - _686) * _420) + _686;
    float _721 = (((cbMtdParam._m0[20u].z * _699.z) - _687) * _420) + _687;
    vec4 _733 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _753 = (((cbMtdParam._m0[29u].x * _733.x) - _719) * _398) + _719;
    float _754 = (((cbMtdParam._m0[29u].y * _733.y) - _720) * _398) + _720;
    float _755 = (((cbMtdParam._m0[29u].z * _733.z) - _721) * _398) + _721;
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[30u].x;
    _207[0u] = cbMtdParam._m0[30u].y;
    _208[0u] = cbMtdParam._m0[30u].z;
    _206[1u] = cbMtdParam._m0[28u].x;
    _207[1u] = cbMtdParam._m0[28u].y;
    _208[1u] = cbMtdParam._m0[28u].z;
    _206[2u] = cbMtdParam._m0[27u].x;
    _207[2u] = cbMtdParam._m0[27u].y;
    _208[2u] = cbMtdParam._m0[27u].z;
    _206[3u] = cbMtdParam._m0[26u].x;
    _207[3u] = cbMtdParam._m0[26u].y;
    _208[3u] = cbMtdParam._m0[26u].z;
    _206[4u] = cbMtdParam._m0[25u].x;
    _207[4u] = cbMtdParam._m0[25u].y;
    _208[4u] = cbMtdParam._m0[25u].z;
    _206[5u] = cbMtdParam._m0[24u].x;
    _207[5u] = cbMtdParam._m0[24u].y;
    _208[5u] = cbMtdParam._m0[24u].z;
    float _828 = _206[_522] * _384;
    float _829 = _207[_522] * _384;
    float _830 = _208[_522] * _384;
    float _831 = _828 + ((_312.x * 4.5) * (((_676 - _753) * _385) + _753));
    float _832 = _829 + ((_312.y * 4.5) * (((_677 - _754) * _385) + _754));
    float _833 = _830 + ((_312.z * 4.5) * (((_678 - _755) * _385) + _755));
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[37u].w;
    _202[0u] = cbMtdParam._m0[38u].x;
    _201[1u] = cbMtdParam._m0[39u].w;
    _202[1u] = cbMtdParam._m0[40u].x;
    _201[2u] = cbMtdParam._m0[40u].y;
    _202[2u] = cbMtdParam._m0[40u].z;
    _201[3u] = cbMtdParam._m0[40u].w;
    _202[3u] = cbMtdParam._m0[41u].x;
    _201[4u] = cbMtdParam._m0[41u].y;
    _202[4u] = cbMtdParam._m0[41u].z;
    float _866 = roundEven(5.0 - _516);
    float _867 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _868 = isnan(4.0) ? _867 : (isnan(_867) ? 4.0 : min(_867, 4.0));
    float _870 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    uint _872 = uint(int(isnan(4.0) ? _870 : (isnan(_870) ? 4.0 : min(_870, 4.0))));
    float _881 = ((cbMtdParam._m0[42u].z - _202[_872]) * _436) + _202[_872];
    float _889 = ((cbMtdParam._m0[43u].x - _881) * _420) + _881;
    float _894 = ((cbMtdParam._m0[43u].z - _889) * _398) + _889;
    float _899 = ((cbMtdParam._m0[39u].z - _894) * _385) + _894;
    vec4 _915 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _917 = _915.x;
    float _918 = _915.y;
    float _920 = _915.z + _201[_872];
    vec4 _932 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _940 = (((cbMtdParam._m0[42u].y - _920) + _932.z) * _436) + _920;
    vec4 _952 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _960 = (((cbMtdParam._m0[42u].w - _940) + _952.z) * _420) + _940;
    float _966 = ((((_289 * 2.0) * _960) - _960) * cbMtdParam._m0[34u].x) + _960;
    vec4 _978 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _986 = (((_978.z + cbMtdParam._m0[43u].y) - _966) * _398) + _966;
    float _990 = (((cbMtdParam._m0[39u].y + _345.z) - _986) * _385) + _986;
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1052 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1021 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1025 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1069 = (-0.0) - ((_1025 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1073 = (_1025 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1074 = isnan(_1073) ? _1069 : (isnan(_1069) ? _1073 : min(_1069, _1073));
    float _4559 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
    float _1075 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
    float _1101 = ((_932.x - _917) * _436) + _917;
    float _1102 = ((_932.y - _918) * _436) + _918;
    float _1107 = ((_952.x - _1101) * _420) + _1101;
    float _1108 = ((_952.y - _1102) * _420) + _1102;
    float _1113 = ((_978.x - _1107) * _398) + _1107;
    float _1114 = ((_978.y - _1108) * _398) + _1108;
    float _1123 = ((((_345.x - _1113) * _385) + _1113) * 2.0) + (-1.0);
    float _1124 = ((((_345.y - _1114) * _385) + _1114) * 2.0) + (-1.0);
    float _1125 = dot(vec2(_1123, _1124), vec2(_1123, _1124));
    float _4570 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
    float _1130 = sqrt(1.0 - (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))));
    float _1133 = (cbMtdParam._m0[34u].z * ((_284.x * 2.0) + (-1.0))) + _1123;
    float _1134 = (cbMtdParam._m0[34u].z * ((_284.y * 2.0) + (-1.0))) + _1124;
    float _1137 = fma(_1130, _255 * NORMAL.x, fma(_1134, _262 * TANGENT.x, (_248 * _240) * _1133));
    float _1140 = fma(_1130, _255 * NORMAL.y, fma(_1134, _262 * TANGENT.y, (_248 * _241) * _1133));
    float _1143 = fma(_1130, _255 * NORMAL.z, fma(_1134, _262 * TANGENT.z, (_248 * _242) * _1133));
    float _1147 = inversesqrt(dot(vec3(_1137, _1140, _1143), vec3(_1137, _1140, _1143)));
    float _1148 = _1147 * _1137;
    float _1149 = _1147 * _1140;
    float _1150 = _1147 * _1143;
    float _4581 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
    float _1151 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
    float _4592 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4603 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4614 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4625 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _1155 = isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0));
    float _1171 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1191 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1201 = cbSceneParam._m0[71u].x - (_1021 / _1191);
    float _1202 = cbSceneParam._m0[71u].y - (_1025 / _1191);
    float _1203 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1191);
    float _1207 = inversesqrt(dot(vec3(_1201, _1202, _1203), vec3(_1201, _1202, _1203)));
    float _1208 = _1201 * _1207;
    float _1209 = _1202 * _1207;
    float _1210 = _1203 * _1207;
    vec4 _1215 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1217 = _1215.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1435 = sqrt(((_1201 * _1201) + (_1202 * _1202)) + (_1203 * _1203));
        float _1441 = (cbMatDynParam._m0[5u].x * _1435) + cbMatDynParam._m0[5u].y;
        float _4636 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1442 = isnan(1.0) ? _4636 : (isnan(_4636) ? 1.0 : min(_4636, 1.0));
        float _1446 = (cbMatDynParam._m0[5u].z * _1435) + cbMatDynParam._m0[5u].w;
        float _4647 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0))) - _1442)) + _1442) < ((_1217 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1228 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1229 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1231 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1233 = _1231.w;
    float _1251 = fma(_1150, cbSceneParam._m0[5u].z, fma(_1149, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1148));
    float _1254 = fma(_1150, cbSceneParam._m0[6u].z, fma(_1149, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1148));
    float _1257 = fma(_1150, cbSceneParam._m0[7u].z, fma(_1149, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1148));
    vec4 _1259 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1270 = (((_1259.y - _1151) + (_1259.w * _1151)) * cbMtdParam._m0[3u].x) + _1151;
    uint _1283 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1284 = _1283 + 9u;
    uint _1285 = _1284 + uint(cbMatDynParam._m0[0u].w);
    float _1291 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) * cbInstanceData._m0[_1285].x;
    float _1292 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0)))) * cbInstanceData._m0[_1285].y;
    float _1293 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0)))) * cbInstanceData._m0[_1285].z;
    float _4658 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _1294 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
    float _4669 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
    float _1295 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
    float _4680 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
    float _1296 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
    vec4 _1297 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1302 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1313 = (((_1302.x - _1155) + (_1302.w * _1155)) * cbMtdParam._m0[3u].x) + _1155;
    float _1326 = (cbMtdParam._m0[3u].x * (((_1294 * _1233) - _1294) + _1297.x)) + _1294;
    float _1327 = (cbMtdParam._m0[3u].x * (((_1295 * _1233) - _1295) + _1297.y)) + _1295;
    float _1328 = (cbMtdParam._m0[3u].x * (((_1296 * _1233) - _1296) + _1297.z)) + _1296;
    float _1329 = 1.0 - _1313;
    float _1330 = _1329 * _1326;
    float _1331 = _1329 * _1327;
    float _1332 = _1329 * _1328;
    float _1337 = (_1326 + (-0.039999999105930328369140625)) * _1313;
    float _1338 = (_1327 + (-0.039999999105930328369140625)) * _1313;
    float _1339 = (_1328 + (-0.039999999105930328369140625)) * _1313;
    float _1340 = _1337 + 0.039999999105930328369140625;
    float _1342 = _1338 + 0.039999999105930328369140625;
    float _1343 = _1339 + 0.039999999105930328369140625;
    vec4 _1352 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1228, cbSceneParam._m0[86u].y * _1229));
    float _1355 = _1352.x * TEXCOORD_5.w;
    float _1356 = dot(vec3(_1148, _1149, _1150), vec3(_1208, _1209, _1210));
    float _1359 = _1356 * 2.0;
    float _1363 = (_1359 * _1148) - _1208;
    float _1364 = (_1359 * _1149) - _1209;
    float _1365 = (_1359 * _1150) - _1210;
    float _1369 = abs(dot(vec3(_1208, _1209, _1210), vec3(_1148, _1149, _1150)));
    float _4691 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
    float _1371 = sqrt(_1270);
    float _1382 = exp2((_1371 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1371 * 3.0));
    float _1388 = (1.0 - _1382) * ((_1371 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1389 = _1382 * _1371;
    float _1417 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1425 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1751;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1478 = fma(_1425, cbModelParam._m0[26u].z, fma(_1421, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1417));
        float _1482 = fma(_1425, cbModelParam._m0[27u].z, fma(_1421, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1417));
        float _1486 = fma(_1425, cbModelParam._m0[28u].z, fma(_1421, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1417));
        float _1510 = _1417 + _1148;
        float _1511 = _1421 + _1149;
        float _1512 = _1425 + _1150;
        float _1522 = fma(_1512, cbModelParam._m0[26u].z, fma(_1511, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1510)) - _1478;
        float _1523 = fma(_1512, cbModelParam._m0[27u].z, fma(_1511, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1510)) - _1482;
        float _1524 = fma(_1512, cbModelParam._m0[28u].z, fma(_1511, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1510)) - _1486;
        float _1528 = inversesqrt(dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524)));
        float _1540 = ((_1528 * _1522) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1478 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1541 = ((_1528 * _1523) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1482 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1542 = ((_1528 * _1524) / cbModelParam._m0[34u].z) + ((((((_1486 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1545 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1552 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1559 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        vec4 _1566 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1540, _1541, _1542), 0.0);
        float _1579 = exp2((_1545.w + (-0.5)) * 20.0) * 2.0;
        float _1580 = _1579 * (_1545.x + (-0.5));
        float _1581 = _1579 * (_1545.y + (-0.5));
        float _1582 = _1579 * (_1545.z + (-0.5));
        float _1589 = exp2((_1552.w + (-0.5)) * 20.0) * 2.0;
        float _1590 = _1589 * (_1552.x + (-0.5));
        float _1591 = _1589 * (_1552.y + (-0.5));
        float _1592 = _1589 * (_1552.z + (-0.5));
        float _1599 = exp2((_1559.w + (-0.5)) * 20.0) * 2.0;
        float _1600 = _1599 * (_1559.x + (-0.5));
        float _1601 = _1599 * (_1559.y + (-0.5));
        float _1602 = _1599 * (_1559.z + (-0.5));
        float _1609 = exp2((_1566.w + (-0.5)) * 20.0) * 2.0;
        float _1610 = _1609 * (_1566.x + (-0.5));
        float _1611 = _1609 * (_1566.y + (-0.5));
        float _1612 = _1609 * (_1566.z + (-0.5));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1615 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1616 = _1580 * 0.5;
        float _1617 = _1590 * 0.5;
        float _1618 = _1600 * 0.5;
        float _1619 = dot(vec3(_1616, _1617, _1618), vec3(_1616, _1617, _1618));
        float _1624 = (_1619 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1619);
        float _1633 = (dot(vec3(_1148, _1149, _1150), vec3(_1624 * _1616, _1624 * _1617, _1624 * _1618)) + 1.0) * 0.5;
        float _4717 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1643 = sqrt(((_1617 * _1617) + (_1616 * _1616)) + (_1618 * _1618)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4728 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4739 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * (_1645 + 1.0))) + _1650) * _1613;
        float _1660 = _1581 * 0.5;
        float _1661 = _1591 * 0.5;
        float _1662 = _1601 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_1148, _1149, _1150), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4750 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1614 + 9.9999997473787516355514526367188e-06);
        float _4761 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4772 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4772 : (isnan(_4772) ? 1.0 : min(_4772, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4750 : (isnan(_4750) ? 1.0 : min(_4750, 1.0))) * (_1687 + 1.0))) + _1692) * _1614;
        float _1702 = _1582 * 0.5;
        float _1703 = _1592 * 0.5;
        float _1704 = _1602 * 0.5;
        float _1705 = dot(vec3(_1702, _1703, _1704), vec3(_1702, _1703, _1704));
        float _1710 = (_1705 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1705);
        float _1718 = (dot(vec3(_1148, _1149, _1150), vec3(_1710 * _1702, _1710 * _1703, _1710 * _1704)) + 1.0) * 0.5;
        float _4783 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1727 = sqrt(((_1703 * _1703) + (_1702 * _1702)) + (_1704 * _1704)) / (_1615 + 9.9999997473787516355514526367188e-06);
        float _4794 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
        float _1728 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
        float _1729 = _1728 * 2.0;
        float _1733 = (1.0 - _1728) / (_1728 + 1.0);
        float _4805 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
        float _1743 = ((((1.0 - _1734) * (_1729 + 2.0)) * exp2(log2(isnan(1.0) ? _4783 : (isnan(_4783) ? 1.0 : min(_4783, 1.0))) * (_1729 + 1.0))) + _1734) * _1615;
        _1751 = _1582;
        _1753 = _1581;
        _1754 = _1580;
        _1755 = _1592;
        _1756 = _1591;
        _1757 = _1590;
        _1758 = _1602;
        _1759 = _1601;
        _1760 = _1600;
        _1761 = _1615;
        _1762 = _1614;
        _1763 = _1613;
        _1764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1765 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
        _1766 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0)));
    }
    else
    {
        _1751 = _1752;
        _1753 = _1752;
        _1754 = _1752;
        _1755 = _1752;
        _1756 = _1752;
        _1757 = _1752;
        _1758 = _1752;
        _1759 = _1752;
        _1760 = _1752;
        _1761 = _1752;
        _1762 = _1752;
        _1763 = _1752;
        _1764 = 0.0;
        _1765 = 0.0;
        _1766 = 0.0;
    }
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    float _2072;
    float _2073;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1792 = fma(_1425, cbModelParam._m0[30u].z, fma(_1421, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1417));
        float _1796 = fma(_1425, cbModelParam._m0[31u].z, fma(_1421, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1417));
        float _1800 = fma(_1425, cbModelParam._m0[32u].z, fma(_1421, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1417));
        float _1822 = _1417 + _1148;
        float _1823 = _1421 + _1149;
        float _1824 = _1425 + _1150;
        float _1834 = fma(_1824, cbModelParam._m0[30u].z, fma(_1823, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1822)) - _1792;
        float _1835 = fma(_1824, cbModelParam._m0[31u].z, fma(_1823, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1822)) - _1796;
        float _1836 = fma(_1824, cbModelParam._m0[32u].z, fma(_1823, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1822)) - _1800;
        float _1840 = inversesqrt(dot(vec3(_1834, _1835, _1836), vec3(_1834, _1835, _1836)));
        float _1852 = ((_1840 * _1834) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1792 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1853 = ((_1840 * _1835) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1796 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1854 = ((_1840 * _1836) / cbModelParam._m0[35u].z) + ((((((_1800 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1856 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1863 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1870 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        vec4 _1877 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1852, _1853, _1854), 0.0);
        float _1889 = exp2((_1856.w + (-0.5)) * 20.0) * 2.0;
        float _1890 = _1889 * (_1856.x + (-0.5));
        float _1891 = _1889 * (_1856.y + (-0.5));
        float _1892 = _1889 * (_1856.z + (-0.5));
        float _1899 = exp2((_1863.w + (-0.5)) * 20.0) * 2.0;
        float _1900 = _1899 * (_1863.x + (-0.5));
        float _1901 = _1899 * (_1863.y + (-0.5));
        float _1902 = _1899 * (_1863.z + (-0.5));
        float _1909 = exp2((_1870.w + (-0.5)) * 20.0) * 2.0;
        float _1910 = _1909 * (_1870.x + (-0.5));
        float _1911 = _1909 * (_1870.y + (-0.5));
        float _1912 = _1909 * (_1870.z + (-0.5));
        float _1919 = exp2((_1877.w + (-0.5)) * 20.0) * 2.0;
        float _1920 = _1919 * (_1877.x + (-0.5));
        float _1921 = _1919 * (_1877.y + (-0.5));
        float _1922 = _1919 * (_1877.z + (-0.5));
        float _1923 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1924 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1925 = isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0));
        float _1926 = _1890 * 0.5;
        float _1927 = _1900 * 0.5;
        float _1928 = _1910 * 0.5;
        float _1929 = dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928));
        float _1934 = (_1929 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1929);
        float _1942 = (dot(vec3(_1148, _1149, _1150), vec3(_1934 * _1926, _1934 * _1927, _1934 * _1928)) + 1.0) * 0.5;
        float _4846 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
        float _1951 = sqrt(((_1927 * _1927) + (_1926 * _1926)) + (_1928 * _1928)) / (_1923 + 9.9999997473787516355514526367188e-06);
        float _4857 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
        float _1952 = isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0));
        float _1953 = _1952 * 2.0;
        float _1957 = (1.0 - _1952) / (_1952 + 1.0);
        float _4868 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        float _1958 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
        float _1967 = ((((1.0 - _1958) * (_1953 + 2.0)) * exp2(log2(isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0))) * (_1953 + 1.0))) + _1958) * _1923;
        float _1968 = _1891 * 0.5;
        float _1969 = _1901 * 0.5;
        float _1970 = _1911 * 0.5;
        float _1971 = dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970));
        float _1976 = (_1971 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1971);
        float _1984 = (dot(vec3(_1148, _1149, _1150), vec3(_1976 * _1968, _1976 * _1969, _1976 * _1970)) + 1.0) * 0.5;
        float _4879 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
        float _1993 = sqrt(((_1969 * _1969) + (_1968 * _1968)) + (_1970 * _1970)) / (_1924 + 9.9999997473787516355514526367188e-06);
        float _4890 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
        float _1994 = isnan(1.0) ? _4890 : (isnan(_4890) ? 1.0 : min(_4890, 1.0));
        float _1995 = _1994 * 2.0;
        float _1999 = (1.0 - _1994) / (_1994 + 1.0);
        float _4901 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2000 = isnan(1.0) ? _4901 : (isnan(_4901) ? 1.0 : min(_4901, 1.0));
        float _2009 = ((((1.0 - _2000) * (_1995 + 2.0)) * exp2(log2(isnan(1.0) ? _4879 : (isnan(_4879) ? 1.0 : min(_4879, 1.0))) * (_1995 + 1.0))) + _2000) * _1924;
        float _2010 = _1892 * 0.5;
        float _2011 = _1902 * 0.5;
        float _2012 = _1912 * 0.5;
        float _2013 = dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012));
        float _2018 = (_2013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2013);
        float _2026 = (dot(vec3(_1148, _1149, _1150), vec3(_2018 * _2010, _2018 * _2011, _2018 * _2012)) + 1.0) * 0.5;
        float _4912 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2035 = sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012)) / (_1925 + 9.9999997473787516355514526367188e-06);
        float _4923 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
        float _2036 = isnan(1.0) ? _4923 : (isnan(_4923) ? 1.0 : min(_4923, 1.0));
        float _2037 = _2036 * 2.0;
        float _2041 = (1.0 - _2036) / (_2036 + 1.0);
        float _4934 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
        float _2042 = isnan(1.0) ? _4934 : (isnan(_4934) ? 1.0 : min(_4934, 1.0));
        float _2051 = ((((1.0 - _2042) * (_2037 + 2.0)) * exp2(log2(isnan(1.0) ? _4912 : (isnan(_4912) ? 1.0 : min(_4912, 1.0))) * (_2037 + 1.0))) + _2042) * _1925;
        _2059 = _1892;
        _2060 = _1891;
        _2061 = _1890;
        _2062 = _1902;
        _2063 = _1901;
        _2064 = _1900;
        _2065 = _1912;
        _2066 = _1911;
        _2067 = _1910;
        _2068 = _1925;
        _2069 = _1924;
        _2070 = _1923;
        _2071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0)));
        _2072 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)));
        _2073 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    }
    else
    {
        _2059 = _1752;
        _2060 = _1752;
        _2061 = _1752;
        _2062 = _1752;
        _2063 = _1752;
        _2064 = _1752;
        _2065 = _1752;
        _2066 = _1752;
        _2067 = _1752;
        _2068 = _1752;
        _2069 = _1752;
        _2070 = _1752;
        _2071 = 0.0;
        _2072 = 0.0;
        _2073 = 0.0;
    }
    float _2083 = (cbModelParam._m0[1u].x * (_2071 - _1764)) + _1764;
    float _2084 = (cbModelParam._m0[1u].x * (_2072 - _1765)) + _1765;
    float _2085 = (cbModelParam._m0[1u].x * (_2073 - _1766)) + _1766;
    float _2106 = fma(_2085, cbSceneParam._m0[89u].z, fma(_2084, cbSceneParam._m0[89u].y, _2083 * cbSceneParam._m0[89u].x));
    float _2109 = fma(_2085, cbSceneParam._m0[90u].z, fma(_2084, cbSceneParam._m0[90u].y, _2083 * cbSceneParam._m0[90u].x));
    float _2112 = fma(_2085, cbSceneParam._m0[91u].z, fma(_2084, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2083));
    float _2125 = _1363 * 0.5;
    float _2126 = _1364 * 0.5;
    float _2127 = _1365 * 0.5;
    float _2128 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2061, _2064, _2067, _2070));
    float _2131 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2060, _2063, _2066, _2069));
    float _2134 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_2059, _2062, _2065, _2068));
    float _2168;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2141 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1751, _1755, _1758, _1761));
        float _2145 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1753, _1756, _1759, _1762));
        float _2149 = dot(vec4(_2125, _2126, _2127, 1.0), vec4(_1754, _1757, _1760, _1763));
        float _2156 = dot(vec4(cbModelParam._m0[39u]), vec4(_2125, _2126, _2127, 1.0));
        _2168 = dot(vec3(isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0)), isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)), isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2156) ? 0.0 : (isnan(0.0) ? _2156 : max(0.0, _2156))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2168 = 1.0;
    }
    float _2179;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2170 = dot(vec4(cbModelParam._m0[40u]), vec4(_2125, _2126, _2127, 1.0));
        _2179 = dot(vec3(isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0)), isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0)), isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2170) ? 0.0 : (isnan(0.0) ? _2170 : max(0.0, _2170))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2179 = 1.0;
    }
    float _2183 = (_2179 * cbModelParam._m0[1u].x) + (_2168 * (1.0 - cbModelParam._m0[1u].x));
    float _2193 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1270);
    float _2194 = isnan(_2193) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2193 : min(cbModelParam._m0[25u].z, _2193));
    float _2274;
    float _2276;
    float _2278;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2241 = fma(_1425, cbModelParam._m0[13u].z, fma(_1421, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1417)) + cbModelParam._m0[13u].w;
        float _2245 = fma(_1425, cbModelParam._m0[14u].z, fma(_1421, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1417)) + cbModelParam._m0[14u].w;
        float _2249 = fma(_1425, cbModelParam._m0[15u].z, fma(_1421, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1417)) + cbModelParam._m0[15u].w;
        float _2252 = fma(_1365, cbModelParam._m0[13u].z, fma(_1364, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1363));
        float _2255 = fma(_1365, cbModelParam._m0[14u].z, fma(_1364, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1363));
        float _2258 = fma(_1365, cbModelParam._m0[15u].z, fma(_1364, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1363));
        float _2286;
        if (_2252 > 0.0)
        {
            _2286 = abs((1.0 - _2241) / _2252);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2252 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2241 + 1.0) / _2252);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2286 = frontier_phi_17_15_ladder;
        }
        float _2457;
        if (_2255 > 0.0)
        {
            _2457 = abs((1.0 - _2245) / _2255);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2255 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2245 + 1.0) / _2255);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2457 = frontier_phi_26_22_ladder;
        }
        float _2749;
        if (_2258 > 0.0)
        {
            _2749 = abs((1.0 - _2249) / _2258);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2258 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2249 + 1.0) / _2258);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2749 = frontier_phi_38_33_ladder;
        }
        float _2751 = isnan(_2457) ? _2286 : (isnan(_2286) ? _2457 : min(_2286, _2457));
        float _2752 = isnan(_2749) ? _2751 : (isnan(_2751) ? _2749 : min(_2751, _2749));
        float _2756 = (_2752 * _2252) + _2241;
        float _2757 = (_2752 * _2255) + _2245;
        float _2758 = (_2752 * _2258) + _2249;
        float _2759 = _2752 * 9.9999997473787516355514526367188e-05;
        float _2761 = (-1.0) - _2759;
        float _2763 = _2759 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2758 > _2763) || ((_2758 < _2761) || ((_2757 > _2763) || ((_2757 < _2761) || ((_2756 < _2761) || (_2756 > _2763))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2903 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2758, cbModelParam._m0[9u].z, fma(_2757, cbModelParam._m0[9u].y, _2756 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2758, cbModelParam._m0[10u].z, fma(_2757, cbModelParam._m0[10u].y, _2756 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2758, cbModelParam._m0[11u].z, fma(_2757, cbModelParam._m0[11u].y, _2756 * cbModelParam._m0[11u].x))), _2194);
            frontier_phi_16_38_ladder = _2903.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2903.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2903.x * cbModelParam._m0[1u].y;
        }
        _2274 = frontier_phi_16_38_ladder_2;
        _2276 = frontier_phi_16_38_ladder_1;
        _2278 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2262 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1363, _1364, _1365), _2194);
        _2274 = _2262.x * cbModelParam._m0[1u].y;
        _2276 = _2262.y * cbModelParam._m0[1u].y;
        _2278 = _2262.z * cbModelParam._m0[1u].y;
    }
    float _2282 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1270);
    float _2283 = isnan(_2282) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2282 : min(cbModelParam._m0[25u].w, _2282));
    float _2372;
    float _2374;
    float _2376;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2336 = fma(_1425, cbModelParam._m0[21u].z, fma(_1421, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1417)) + cbModelParam._m0[21u].w;
        float _2340 = fma(_1425, cbModelParam._m0[22u].z, fma(_1421, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1417)) + cbModelParam._m0[22u].w;
        float _2344 = fma(_1425, cbModelParam._m0[23u].z, fma(_1421, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1417)) + cbModelParam._m0[23u].w;
        float _2347 = fma(_1365, cbModelParam._m0[21u].z, fma(_1364, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1363));
        float _2350 = fma(_1365, cbModelParam._m0[22u].z, fma(_1364, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1363));
        float _2353 = fma(_1365, cbModelParam._m0[23u].z, fma(_1364, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1363));
        float _2462;
        if (_2347 > 0.0)
        {
            _2462 = abs((1.0 - _2336) / _2347);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2347 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2336 + 1.0) / _2347);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2462 = frontier_phi_28_24_ladder;
        }
        float _2776;
        if (_2350 > 0.0)
        {
            _2776 = abs((1.0 - _2340) / _2350);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2350 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2340 + 1.0) / _2350);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2776 = frontier_phi_40_35_ladder;
        }
        float _3114;
        if (_2353 > 0.0)
        {
            _3114 = abs((1.0 - _2344) / _2353);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2353 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2344 + 1.0) / _2353);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3114 = frontier_phi_50_47_ladder;
        }
        float _3116 = isnan(_2776) ? _2462 : (isnan(_2462) ? _2776 : min(_2462, _2776));
        float _3117 = isnan(_3114) ? _3116 : (isnan(_3116) ? _3114 : min(_3116, _3114));
        float _3121 = (_3117 * _2347) + _2336;
        float _3122 = (_3117 * _2350) + _2340;
        float _3123 = (_3117 * _2353) + _2344;
        float _3124 = _3117 * 9.9999997473787516355514526367188e-05;
        float _3125 = (-1.0) - _3124;
        float _3127 = _3124 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3123 > _3127) || ((_3123 < _3125) || ((_3122 > _3127) || ((_3122 < _3125) || ((_3121 < _3125) || (_3121 > _3127))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3245 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3123, cbModelParam._m0[17u].z, fma(_3122, cbModelParam._m0[17u].y, _3121 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3123, cbModelParam._m0[18u].z, fma(_3122, cbModelParam._m0[18u].y, _3121 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3123, cbModelParam._m0[19u].z, fma(_3122, cbModelParam._m0[19u].y, _3121 * cbModelParam._m0[19u].x))), _2283);
            frontier_phi_25_50_ladder = _3245.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3245.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3245.x * cbModelParam._m0[1u].z;
        }
        _2372 = frontier_phi_25_50_ladder_2;
        _2374 = frontier_phi_25_50_ladder_1;
        _2376 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2356 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1363, _1364, _1365), _2283);
        _2372 = _2356.x * cbModelParam._m0[1u].z;
        _2374 = _2356.y * cbModelParam._m0[1u].z;
        _2376 = _2356.z * cbModelParam._m0[1u].z;
    }
    float _2389 = (((_1388 * _1340) + _1389) * _1355) * ((cbModelParam._m0[1u].w * (_2372 - _2274)) + _2274);
    float _2391 = (((_1388 * _1342) + _1389) * _1355) * ((cbModelParam._m0[1u].w * (_2374 - _2276)) + _2276);
    float _2393 = (((_1388 * _1343) + _1389) * _1355) * ((cbModelParam._m0[1u].w * (_2376 - _2278)) + _2278);
    float _2396 = fma(_2393, cbSceneParam._m0[89u].z, fma(_2391, cbSceneParam._m0[89u].y, _2389 * cbSceneParam._m0[89u].x));
    float _2399 = fma(_2393, cbSceneParam._m0[90u].z, fma(_2391, cbSceneParam._m0[90u].y, _2389 * cbSceneParam._m0[90u].x));
    float _2402 = fma(_2393, cbSceneParam._m0[91u].z, fma(_2391, cbSceneParam._m0[91u].y, _2389 * cbSceneParam._m0[91u].x));
    float _2436 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2440 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2444 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2448 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2449 = _2436 / _2448;
    float _2450 = _2440 / _2448;
    float _2451 = _2444 / _2448;
    float _2595;
    float _2596;
    float _2597;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2478 = ((uint(_2451 > cbSceneParam._m0[59u].y) + uint(_2451 > cbSceneParam._m0[59u].x)) + uint(_2451 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2479 = _2478 + 43u;
        uint _2486 = _2478 + 44u;
        uint _2493 = _2478 + 45u;
        uint _2501 = _2478 + 46u;
        float _2512 = fma(_2448, cbSceneParam._m0[_2479].w, fma(_2444, cbSceneParam._m0[_2479].z, fma(_2440, cbSceneParam._m0[_2479].y, _2436 * cbSceneParam._m0[_2479].x)));
        float _2516 = fma(_2448, cbSceneParam._m0[_2486].w, fma(_2444, cbSceneParam._m0[_2486].z, fma(_2440, cbSceneParam._m0[_2486].y, _2436 * cbSceneParam._m0[_2486].x)));
        float _2524 = fma(_2448, cbSceneParam._m0[_2501].w, fma(_2444, cbSceneParam._m0[_2501].z, fma(_2440, cbSceneParam._m0[_2501].y, _2436 * cbSceneParam._m0[_2501].x)));
        float _2528 = cbSceneParam._m0[33u].z * _2524;
        float _2530 = cbSceneParam._m0[33u].w * _2524;
        float _2533 = fma(_2448, cbSceneParam._m0[_2493].w, fma(_2444, cbSceneParam._m0[_2493].z, fma(_2440, cbSceneParam._m0[_2493].y, _2436 * cbSceneParam._m0[_2493].x))) / _2524;
        float _2581 = (cbSceneParam._m0[33u].x - sqrt(((_2450 * _2450) + (_2449 * _2449)) + (_2451 * _2451))) * cbSceneParam._m0[33u].y;
        float _5060 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
        float _2588 = (isnan(1.0) ? _5060 : (isnan(_5060) ? 1.0 : min(_5060, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2528 + _2512) / _2524, (_2530 + _2516) / _2524), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2530 + _2512) / _2524, (_2516 - _2528) / _2524), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2512 - _2528) / _2524, (_2516 - _2530) / _2524), _2533), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2512 - _2530) / _2524, (_2528 + _2516) / _2524), _2533), 0.0)).x), vec4(0.25)));
        _2595 = 1.0 - (_2588 * cbSceneParam._m0[34u].x);
        _2596 = 1.0 - (_2588 * cbSceneParam._m0[34u].y);
        _2597 = 1.0 - (_2588 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2595 = 1.0;
        _2596 = 1.0;
        _2597 = 1.0;
    }
    float _2661;
    float _2663;
    float _2665;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2649 = fma(_2448, cbSceneParam._m0[63u].w, fma(_2444, cbSceneParam._m0[63u].z, fma(_2440, cbSceneParam._m0[63u].y, _2436 * cbSceneParam._m0[63u].x)));
        float _2650 = fma(_2448, cbSceneParam._m0[60u].w, fma(_2444, cbSceneParam._m0[60u].z, fma(_2440, cbSceneParam._m0[60u].y, _2436 * cbSceneParam._m0[60u].x))) / _2649;
        float _2651 = fma(_2448, cbSceneParam._m0[61u].w, fma(_2444, cbSceneParam._m0[61u].z, fma(_2440, cbSceneParam._m0[61u].y, _2436 * cbSceneParam._m0[61u].x))) / _2649;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2650 >= cbSceneParam._m0[64u].x) && (_2651 >= cbSceneParam._m0[64u].y)) && (_2650 <= cbSceneParam._m0[64u].z)) && (_2651 <= cbSceneParam._m0[64u].w))
        {
            float _2789 = fma(_2448, cbSceneParam._m0[62u].w, fma(_2444, cbSceneParam._m0[62u].z, fma(_2440, cbSceneParam._m0[62u].y, _2436 * cbSceneParam._m0[62u].x))) / _2649;
            float _2793 = isnan(cbSceneParam._m0[41u].w) ? _2789 : (isnan(_2789) ? cbSceneParam._m0[41u].w : max(_2789, cbSceneParam._m0[41u].w));
            float _2836 = (cbSceneParam._m0[33u].x - sqrt(((_2450 * _2450) + (_2449 * _2449)) + (_2451 * _2451))) * cbSceneParam._m0[33u].y;
            float _5076 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
            float _2843 = (isnan(1.0) ? _5076 : (isnan(_5076) ? 1.0 : min(_5076, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2650, cbSceneParam._m0[33u].w + _2651), _2793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2650, _2651 - cbSceneParam._m0[33u].z), _2793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2650 - cbSceneParam._m0[33u].z, _2651 - cbSceneParam._m0[33u].w), _2793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2650 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2651), _2793), 0.0)).x), vec4(0.25)));
            float _2847 = 1.0 - (_2843 * cbSceneParam._m0[34u].x);
            float _2848 = 1.0 - (_2843 * cbSceneParam._m0[34u].y);
            float _2849 = 1.0 - (_2843 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2849) ? _2597 : (isnan(_2597) ? _2849 : min(_2597, _2849));
            frontier_phi_37_36_ladder_1 = isnan(_2848) ? _2596 : (isnan(_2596) ? _2848 : min(_2596, _2848));
            frontier_phi_37_36_ladder_2 = isnan(_2847) ? _2595 : (isnan(_2595) ? _2847 : min(_2595, _2847));
        }
        else
        {
            frontier_phi_37_36_ladder = _2597;
            frontier_phi_37_36_ladder_1 = _2596;
            frontier_phi_37_36_ladder_2 = _2595;
        }
        _2661 = frontier_phi_37_36_ladder_2;
        _2663 = frontier_phi_37_36_ladder_1;
        _2665 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2661 = _2595;
        _2663 = _2596;
        _2665 = _2597;
    }
    uvec4 _2670 = floatBitsToUint(cbInstanceData._m0[_1283 + 5u]);
    uint _2672 = _2670.x * 14u;
    uint _2673 = _2672 + 13u;
    float _2680 = _1355 + (-1.0);
    float _2685 = (cbLight._m0[_2673].x * _2680) + 1.0;
    float _2686 = (cbLight._m0[_2673].y * _2680) + 1.0;
    float _2687 = (cbLight._m0[_2673].z * _2680) + 1.0;
    float _2688 = (cbLight._m0[_2673].w * _2680) + 1.0;
    uint _2689 = _2672 + 5u;
    float _2695 = isnan(1.0) ? _2686 : (isnan(_2686) ? 1.0 : min(_2686, 1.0));
    uint _2699 = _2672 + 4u;
    float _2708 = isnan(1.0) ? _2685 : (isnan(_2685) ? 1.0 : min(_2685, 1.0));
    uint _2712 = _2672 | 1u;
    float _2723 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_1148, _1149, _1150));
    float _2726 = dot(vec3(cbLight._m0[_2712].xyz), vec3(_1148, _1149, _1150));
    float _5112 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
    float _5123 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
    float _2731 = (isnan(1.0) ? _5112 : (isnan(_5112) ? 1.0 : min(_5112, 1.0))) * 0.3183098733425140380859375;
    float _2733 = (isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0))) * 0.3183098733425140380859375;
    float _2740 = ((cbLight._m0[_2689].x * _2695) * _2733) + (((cbLight._m0[_2699].x * _2661) * _2708) * _2731);
    float _2741 = ((_2695 * cbLight._m0[_2689].y) * _2733) + (((cbLight._m0[_2699].y * _2663) * _2708) * _2731);
    float _2742 = ((_2695 * cbLight._m0[_2689].z) * _2733) + (((cbLight._m0[_2699].z * _2665) * _2708) * _2731);
    uvec4 _2746 = floatBitsToUint(cbLight._m0[_2672 + 12u]);
    bool _2748 = _2746.x == 0u;
    float _2850;
    float _2852;
    float _2854;
    if (_2748)
    {
        _2850 = _2740;
        _2852 = _2741;
        _2854 = _2742;
    }
    else
    {
        uint _2858 = _2672 + 6u;
        float _2874 = (dot(vec3(cbLight._m0[_2672 + 2u].xyz), vec3(_1148, _1149, _1150)) * 0.5) + 0.5;
        float _2875 = _2874 * _2874;
        float _5134 = isnan(0.0) ? _2875 : (isnan(_2875) ? 0.0 : max(_2875, 0.0));
        float _2876 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
        float _2877 = isnan(1.0) ? _2687 : (isnan(_2687) ? 1.0 : min(_2687, 1.0));
        _2850 = (((cbLight._m0[_2858].x * 0.3183098733425140380859375) * _2876) * _2877) + _2740;
        _2852 = (((cbLight._m0[_2858].y * 0.3183098733425140380859375) * _2876) * _2877) + _2741;
        _2854 = (((cbLight._m0[_2858].z * 0.3183098733425140380859375) * _2876) * _2877) + _2742;
    }
    bool _2857 = _2746.y == 0u;
    float _2912;
    float _2914;
    float _2916;
    if (_2857)
    {
        _2912 = _2850;
        _2914 = _2852;
        _2916 = _2854;
    }
    else
    {
        uint _3085 = _2672 + 7u;
        float _3101 = (dot(vec3(cbLight._m0[_2672 + 3u].xyz), vec3(_1148, _1149, _1150)) * 0.5) + 0.5;
        float _3102 = _3101 * _3101;
        float _5150 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
        float _3103 = isnan(1.0) ? _5150 : (isnan(_5150) ? 1.0 : min(_5150, 1.0));
        float _3104 = isnan(1.0) ? _2688 : (isnan(_2688) ? 1.0 : min(_2688, 1.0));
        _2912 = (((cbLight._m0[_3085].x * 0.3183098733425140380859375) * _3103) * _3104) + _2850;
        _2914 = (((cbLight._m0[_3085].y * 0.3183098733425140380859375) * _3103) * _3104) + _2852;
        _2916 = (((cbLight._m0[_3085].z * 0.3183098733425140380859375) * _3103) * _3104) + _2854;
    }
    uint _2919 = _2672 + 8u;
    float _2932 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2672].w)) * _1270) * 0.949999988079071044921875);
    float _2933 = _2932 * _2932;
    float _2934 = cbLight._m0[_2672].x + _1208;
    float _2935 = cbLight._m0[_2672].y + _1209;
    float _2936 = cbLight._m0[_2672].z + _1210;
    float _2940 = inversesqrt(dot(vec3(_2934, _2935, _2936), vec3(_2934, _2935, _2936)));
    float _2941 = _2940 * _2934;
    float _2942 = _2940 * _2935;
    float _2943 = _2940 * _2936;
    float _2944 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2672].xyz));
    float _5166 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0));
    float _2947 = isnan(1.0) ? _5166 : (isnan(_5166) ? 1.0 : min(_5166, 1.0));
    float _5177 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
    float _2948 = isnan(1.0) ? _5177 : (isnan(_5177) ? 1.0 : min(_5177, 1.0));
    float _2949 = dot(vec3(_1148, _1149, _1150), vec3(_2941, _2942, _2943));
    float _5188 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
    float _2952 = isnan(1.0) ? _5188 : (isnan(_5188) ? 1.0 : min(_5188, 1.0));
    float _2953 = dot(vec3(cbLight._m0[_2672].xyz), vec3(_2941, _2942, _2943));
    float _5199 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
    float _2957 = _2933 * _2933;
    float _2961 = ((_2952 * _2952) * (_2957 + (-1.0))) + 1.0;
    float _2969 = exp2(log2(1.0 - (isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0)))) * 5.0);
    float _2970 = 0.959999978542327880859375 - _1337;
    float _2972 = 0.959999978542327880859375 - _1338;
    float _2973 = 0.959999978542327880859375 - _1339;
    float _2980 = 1.0 - _2933;
    float _2991 = (0.5 / (((_2948 * ((_2947 * _2980) + _2933)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _2980) + _2933) * _2947))) * _2947;
    float _5210 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
    float _2993 = (isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0))) * (_2957 / ((_2961 * _2961) * 3.141590118408203125));
    uint _3007 = _2672 + 9u;
    float _3018 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2712].w)) * _1270) * 0.949999988079071044921875);
    float _3019 = _3018 * _3018;
    float _3020 = cbLight._m0[_2712].x + _1208;
    float _3021 = cbLight._m0[_2712].y + _1209;
    float _3022 = cbLight._m0[_2712].z + _1210;
    float _3026 = inversesqrt(dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022)));
    float _3027 = _3026 * _3020;
    float _3028 = _3026 * _3021;
    float _3029 = _3026 * _3022;
    float _3030 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_2712].xyz));
    float _5221 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
    float _3033 = isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0));
    float _3034 = dot(vec3(_1148, _1149, _1150), vec3(_3027, _3028, _3029));
    float _5232 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
    float _3037 = isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0));
    float _3038 = dot(vec3(cbLight._m0[_2712].xyz), vec3(_3027, _3028, _3029));
    float _5243 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
    float _3042 = _3019 * _3019;
    float _3046 = ((_3037 * _3037) * (_3042 + (-1.0))) + 1.0;
    float _3053 = exp2(log2(1.0 - (isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0)))) * 5.0);
    float _3060 = 1.0 - _3019;
    float _3070 = (0.5 / (((_2948 * ((_3033 * _3060) + _3019)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _3060) + _3019) * _3033))) * _3033;
    float _5254 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
    float _3072 = (isnan(1.0) ? _5254 : (isnan(_5254) ? 1.0 : min(_5254, 1.0))) * (_3042 / ((_3046 * _3046) * 3.141590118408203125));
    float _3082 = (((((_3053 * _2970) + _1340) * cbLight._m0[_3007].x) * _3072) * _2695) + ((((cbLight._m0[_2919].x * _2661) * ((_2969 * _2970) + _1340)) * _2993) * _2708);
    float _3083 = (((((_3053 * _2972) + _1342) * cbLight._m0[_3007].y) * _3072) * _2695) + ((((cbLight._m0[_2919].y * _2663) * ((_2969 * _2972) + _1342)) * _2993) * _2708);
    float _3084 = (((((_3053 * _2973) + _1343) * cbLight._m0[_3007].z) * _3072) * _2695) + ((((cbLight._m0[_2919].z * _2665) * ((_2969 * _2973) + _1343)) * _2993) * _2708);
    float _3140;
    float _3142;
    float _3144;
    if (_2748)
    {
        _3140 = _3082;
        _3142 = _3083;
        _3144 = _3084;
    }
    else
    {
        uint _3146 = _2672 + 2u;
        uint _3150 = _2672 + 10u;
        float _3164 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3146].w)) * _1270) * 0.949999988079071044921875);
        float _3165 = _3164 * _3164;
        float _3166 = cbLight._m0[_3146].x + _1208;
        float _3167 = cbLight._m0[_3146].y + _1209;
        float _3168 = cbLight._m0[_3146].z + _1210;
        float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
        float _3173 = _3172 * _3166;
        float _3174 = _3172 * _3167;
        float _3175 = _3172 * _3168;
        float _3176 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_3146].xyz));
        float _5265 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
        float _3179 = isnan(1.0) ? _5265 : (isnan(_5265) ? 1.0 : min(_5265, 1.0));
        float _3180 = dot(vec3(_1148, _1149, _1150), vec3(_3173, _3174, _3175));
        float _5276 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
        float _3183 = isnan(1.0) ? _5276 : (isnan(_5276) ? 1.0 : min(_5276, 1.0));
        float _3184 = dot(vec3(cbLight._m0[_3146].xyz), vec3(_3173, _3174, _3175));
        float _5287 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
        float _3188 = _3165 * _3165;
        float _3192 = ((_3183 * _3183) * (_3188 + (-1.0))) + 1.0;
        float _3199 = exp2(log2(1.0 - (isnan(1.0) ? _5287 : (isnan(_5287) ? 1.0 : min(_5287, 1.0)))) * 5.0);
        float _3206 = 1.0 - _3165;
        float _3216 = (0.5 / (((_2948 * ((_3179 * _3206) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _3206) + _3165) * _3179))) * _3179;
        float _5298 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
        float _3218 = (isnan(1.0) ? _5298 : (isnan(_5298) ? 1.0 : min(_5298, 1.0))) * (_3188 / ((_3192 * _3192) * 3.141590118408203125));
        float _3219 = isnan(1.0) ? _2687 : (isnan(_2687) ? 1.0 : min(_2687, 1.0));
        _3140 = (((((_3199 * _2970) + _1340) * cbLight._m0[_3150].x) * _3218) * _3219) + _3082;
        _3142 = (((((_3199 * _2972) + _1342) * cbLight._m0[_3150].y) * _3218) * _3219) + _3083;
        _3144 = (((((_3199 * _2973) + _1343) * cbLight._m0[_3150].z) * _3218) * _3219) + _3084;
    }
    float _3250;
    float _3252;
    float _3254;
    if (_2857)
    {
        _3250 = _3140;
        _3252 = _3142;
        _3254 = _3144;
    }
    else
    {
        uint _3261 = _2672 + 3u;
        uint _3265 = _2672 + 11u;
        float _3279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3261].w)) * _1270) * 0.949999988079071044921875);
        float _3280 = _3279 * _3279;
        float _3281 = cbLight._m0[_3261].x + _1208;
        float _3282 = cbLight._m0[_3261].y + _1209;
        float _3283 = cbLight._m0[_3261].z + _1210;
        float _3287 = inversesqrt(dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283)));
        float _3288 = _3287 * _3281;
        float _3289 = _3287 * _3282;
        float _3290 = _3287 * _3283;
        float _3291 = dot(vec3(_1148, _1149, _1150), vec3(cbLight._m0[_3261].xyz));
        float _5314 = isnan(0.0) ? _3291 : (isnan(_3291) ? 0.0 : max(_3291, 0.0));
        float _3294 = isnan(1.0) ? _5314 : (isnan(_5314) ? 1.0 : min(_5314, 1.0));
        float _3295 = dot(vec3(_1148, _1149, _1150), vec3(_3288, _3289, _3290));
        float _5325 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
        float _3298 = isnan(1.0) ? _5325 : (isnan(_5325) ? 1.0 : min(_5325, 1.0));
        float _3299 = dot(vec3(cbLight._m0[_3261].xyz), vec3(_3288, _3289, _3290));
        float _5336 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
        float _3303 = _3280 * _3280;
        float _3307 = ((_3298 * _3298) * (_3303 + (-1.0))) + 1.0;
        float _3314 = exp2(log2(1.0 - (isnan(1.0) ? _5336 : (isnan(_5336) ? 1.0 : min(_5336, 1.0)))) * 5.0);
        float _3321 = 1.0 - _3280;
        float _3331 = (0.5 / (((_2948 * ((_3294 * _3321) + _3280)) + 9.9999999392252902907785028219223e-09) + (((_2948 * _3321) + _3280) * _3294))) * _3294;
        float _5347 = isnan(0.0) ? _3331 : (isnan(_3331) ? 0.0 : max(_3331, 0.0));
        float _3333 = (isnan(1.0) ? _5347 : (isnan(_5347) ? 1.0 : min(_5347, 1.0))) * (_3303 / ((_3307 * _3307) * 3.141590118408203125));
        float _3334 = isnan(1.0) ? _2688 : (isnan(_2688) ? 1.0 : min(_2688, 1.0));
        _3250 = (((((_3314 * _2970) + _1340) * cbLight._m0[_3265].x) * _3333) * _3334) + _3140;
        _3252 = (((((_3314 * _2972) + _1342) * cbLight._m0[_3265].y) * _3333) * _3334) + _3142;
        _3254 = (((((_3314 * _2973) + _1343) * cbLight._m0[_3265].z) * _3333) * _3334) + _3144;
    }
    float _3400;
    float _3402;
    float _3404;
    float _3406;
    float _3408;
    float _3410;
    if (_2670.y == 0u)
    {
        uvec4 _3355 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3356 = _3355.x;
        uint _3367 = uint((float(_3355.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1229) / _3356))) + floor(float(uint(cbSceneParam._m0[85u].x * _1228) / _3356)));
        float _3377 = (log2(_2451 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3378 = isnan(0.0) ? _3377 : (isnan(_3377) ? 0.0 : max(_3377, 0.0));
        uint _3381 = uint(isnan(14.0) ? _3378 : (isnan(_3378) ? 14.0 : min(_3378, 14.0)));
        uvec4 _3386 = texelFetch(g_lightClusterGridBuffer, int(((_3381 << 2u) + (_3367 << 6u)) >> 2u));
        uint _3387 = _3386.x;
        uint _3388 = _3355.z;
        float _3496;
        float _3498;
        float _3500;
        float _3502;
        float _3504;
        float _3506;
        if (((((1u << ((_3388 >> 4u) & 15u)) + 4294967295u) & _3387) == 0u) || ((_3388 & 240u) == 0u))
        {
            _3496 = 0.0;
            _3498 = 0.0;
            _3500 = 0.0;
            _3502 = 0.0;
            _3504 = 0.0;
            _3506 = 0.0;
        }
        else
        {
            float _3497;
            float _3499;
            float _3501;
            float _3503;
            float _3505;
            float _3507;
            float _3656 = 0.0;
            float _3657 = 0.0;
            float _3658 = 0.0;
            float _3659 = 0.0;
            float _3660 = 0.0;
            float _3661 = 0.0;
            uint _3662 = 0u;
            uint _3671;
            bool _3672;
            for (;;)
            {
                _3671 = texelFetch(g_lightClassification, int((((_3381 << 5u) + (_3367 << 9u)) + (_3662 << 2u)) >> 2u)).x;
                _3672 = _3671 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3672)
                {
                    frontier_phi_71_pred = _3661;
                    frontier_phi_71_pred_1 = _3660;
                    frontier_phi_71_pred_2 = _3659;
                    frontier_phi_71_pred_3 = _3658;
                    frontier_phi_71_pred_4 = _3657;
                    frontier_phi_71_pred_5 = _3656;
                }
                else
                {
                    float _3801;
                    float _3802;
                    float _3803;
                    float _3804;
                    float _3805;
                    float _3806;
                    uint _3807;
                    _3801 = _3656;
                    _3802 = _3657;
                    _3803 = _3658;
                    _3804 = _3659;
                    _3805 = _3660;
                    _3806 = _3661;
                    _3807 = _3671;
                    float _3728;
                    float _3729;
                    float _3730;
                    float _3731;
                    float _3732;
                    float _3733;
                    for (;;)
                    {
                        uint _3811 = uint(findLSB(_3807)) + (_3662 << 5u);
                        uint _3808 = (_3807 + 4294967295u) & _3807;
                        uint _3813 = _3811 * 48u;
                        vec4 _3827 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3813)).x, texelFetch(g_PointLightRenderingBuffer, int(_3813 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3813 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3813 + 3u)).x));
                        uint _3833 = (_3811 * 48u) + 4u;
                        vec4 _3846 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3833)).x, texelFetch(g_PointLightRenderingBuffer, int(_3833 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3833 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3833 + 3u)).x));
                        uint _3852 = (_3811 * 48u) + 8u;
                        vec3 _3863 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3852)).x, texelFetch(g_PointLightRenderingBuffer, int(_3852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3852 + 2u)).x));
                        float _3867 = _3827.x - _2449;
                        float _3868 = _3827.y - _2450;
                        float _3869 = _3827.z - _2451;
                        float _3870 = dot(vec3(_3867, _3868, _3869), vec3(_3867, _3868, _3869));
                        float _3873 = inversesqrt(_3870);
                        float _3874 = _3873 * _3867;
                        float _3875 = _3873 * _3868;
                        float _3876 = _3873 * _3869;
                        float _3877 = dot(vec3(_1251, _1254, _1257), vec3(_3874, _3875, _3876));
                        float _3882 = 1.0 - (_3870 * _3827.w);
                        float _5373 = isnan(0.0) ? _3882 : (isnan(_3882) ? 0.0 : max(_3882, 0.0));
                        float _3883 = isnan(1.0) ? _5373 : (isnan(_5373) ? 1.0 : min(_5373, 1.0));
                        float _3884 = sqrt(_3870) * _3846.w;
                        float _3887 = 1.39999997615814208984375 / (_3884 + 1.39999997615814208984375);
                        float _3888 = _3887 * _3887;
                        float _3891 = ((1.0 - _3888) * _3877) + _3888;
                        float _3894 = _3884 * _3884;
                        float _3898 = ((isnan(0.0) ? _3891 : (isnan(_3891) ? 0.0 : max(_3891, 0.0))) * _3883) / ((_3894 * 0.699999988079071044921875) + 1.0);
                        float _3902 = (-0.0) - _2449;
                        float _3903 = (-0.0) - _2450;
                        float _3904 = (-0.0) - _2451;
                        float _3908 = inversesqrt(dot(vec3(_3902, _3903, _3904), vec3(_3902, _3903, _3904)));
                        float _3909 = _3908 * _3902;
                        float _3910 = _3908 * _3903;
                        float _3911 = _3908 * _3904;
                        float _3918 = exp2(log2(1.0 / ((_3894 * 3.5) + 5.0)) * 0.25);
                        float _3919 = 1.0 - _1371;
                        float _3926 = sqrt(1.0 - ((1.0 - (_3919 * _3919)) * (1.0 - (_3918 * _3918))));
                        float _3927 = _3926 * _3926;
                        float _3928 = _3927 * _3927;
                        float _3929 = _3909 + _3874;
                        float _3930 = _3910 + _3875;
                        float _3931 = _3911 + _3876;
                        float _3935 = inversesqrt(dot(vec3(_3929, _3930, _3931), vec3(_3929, _3930, _3931)));
                        float _3939 = dot(vec3(_1251, _1254, _1257), vec3(_3909, _3910, _3911));
                        float _5389 = isnan(0.0) ? _3939 : (isnan(_3939) ? 0.0 : max(_3939, 0.0));
                        float _3942 = isnan(1.0) ? _5389 : (isnan(_5389) ? 1.0 : min(_5389, 1.0));
                        float _3943 = dot(vec3(_1251, _1254, _1257), vec3(_3935 * _3929, _3935 * _3930, _3935 * _3931));
                        float _5400 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                        float _3946 = isnan(1.0) ? _5400 : (isnan(_5400) ? 1.0 : min(_5400, 1.0));
                        float _3950 = ((_3946 * _3946) * (_3928 + (-1.0))) + 1.0;
                        float _3951 = _3887 * _3927;
                        float _3952 = _3951 * _3951;
                        float _3955 = ((1.0 - _3952) * _3877) + _3952;
                        float _5411 = isnan(0.0) ? _3955 : (isnan(_3955) ? 0.0 : max(_3955, 0.0));
                        float _3956 = isnan(1.0) ? _5411 : (isnan(_5411) ? 1.0 : min(_5411, 1.0));
                        float _3957 = 1.0 - _3927;
                        float _3967 = (0.5 / (((_3956 * ((_3942 * _3957) + _3927)) + 9.9999999392252902907785028219223e-09) + (((_3956 * _3957) + _3927) * _3942))) * _3956;
                        float _5422 = isnan(0.0) ? _3967 : (isnan(_3967) ? 0.0 : max(_3967, 0.0));
                        float _3978 = (((_3928 * 3.1415927410125732421875) * (isnan(1.0) ? _5422 : (isnan(_5422) ? 1.0 : min(_5422, 1.0)))) / ((_3950 * _3950) * ((_3894 * 2.1991131305694580078125) + 3.141590118408203125))) * _3883;
                        _3731 = (_3898 * _3846.x) + _3804;
                        _3732 = (_3898 * _3846.y) + _3805;
                        _3733 = (_3898 * _3846.z) + _3806;
                        _3728 = (_3978 * _3863.x) + _3801;
                        _3729 = (_3978 * _3863.y) + _3802;
                        _3730 = (_3978 * _3863.z) + _3803;
                        if (_3808 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3801 = _3728;
                            _3802 = _3729;
                            _3803 = _3730;
                            _3804 = _3731;
                            _3805 = _3732;
                            _3806 = _3733;
                            _3807 = _3808;
                        }
                    }
                    frontier_phi_71_pred = _3733;
                    frontier_phi_71_pred_1 = _3732;
                    frontier_phi_71_pred_2 = _3731;
                    frontier_phi_71_pred_3 = _3730;
                    frontier_phi_71_pred_4 = _3729;
                    frontier_phi_71_pred_5 = _3728;
                }
                _3507 = frontier_phi_71_pred;
                _3505 = frontier_phi_71_pred_1;
                _3503 = frontier_phi_71_pred_2;
                _3501 = frontier_phi_71_pred_3;
                _3499 = frontier_phi_71_pred_4;
                _3497 = frontier_phi_71_pred_5;
                uint _3663 = _3662 + 1u;
                if (_3663 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3656 = _3497;
                    _3657 = _3499;
                    _3658 = _3501;
                    _3659 = _3503;
                    _3660 = _3505;
                    _3661 = _3507;
                    _3662 = _3663;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3496 = _3497;
            _3498 = _3499;
            _3500 = _3501;
            _3502 = _3503;
            _3504 = _3505;
            _3506 = _3507;
        }
        uvec4 _3510 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3511 = _3510.z;
        uint _3513 = (_3511 >> 8u) & 15u;
        float _3624;
        float _3626;
        float _3628;
        float _3630;
        float _3632;
        float _3634;
        if (((4294967295u << _3513) & _3387) == 0u)
        {
            _3624 = _3496;
            _3626 = _3498;
            _3628 = _3500;
            _3630 = _3502;
            _3632 = _3504;
            _3634 = _3506;
        }
        else
        {
            float _3649 = inversesqrt(dot(vec3(_2449, _2450, _2451), vec3(_2449, _2450, _2451)));
            float _3650 = _3649 * _2449;
            float _3651 = _3649 * _2450;
            float _3652 = _3649 * _2451;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3513 < ((_3511 >> 12u) & 15u))
            {
                float _3625;
                float _3627;
                float _3629;
                float _3631;
                float _3633;
                float _3635;
                float _3784 = _3496;
                float _3785 = _3498;
                float _3786 = _3500;
                float _3787 = _3502;
                float _3788 = _3504;
                float _3789 = _3506;
                uint _3790 = _3513;
                uint _3799;
                bool _3800;
                for (;;)
                {
                    _3799 = texelFetch(g_lightClassification, int((((_3381 << 5u) + (_3367 << 9u)) + (_3790 << 2u)) >> 2u)).x;
                    _3800 = _3799 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3800)
                    {
                        frontier_phi_82_pred = _3789;
                        frontier_phi_82_pred_1 = _3788;
                        frontier_phi_82_pred_2 = _3787;
                        frontier_phi_82_pred_3 = _3786;
                        frontier_phi_82_pred_4 = _3785;
                        frontier_phi_82_pred_5 = _3784;
                    }
                    else
                    {
                        float _3992;
                        float _3993;
                        float _3994;
                        float _3995;
                        float _3996;
                        float _3997;
                        float _4285;
                        float _4286;
                        float _4287;
                        float _4288;
                        float _4289;
                        float _4290;
                        float _4005 = _3784;
                        float _4006 = _3785;
                        float _4007 = _3786;
                        float _4008 = _3787;
                        float _4009 = _3788;
                        float _4010 = _3789;
                        uint _4011 = _3799;
                        uint _4012;
                        vec4 _4037;
                        float _4038;
                        vec4 _4053;
                        vec3 _4065;
                        vec4 _4080;
                        vec4 _4095;
                        float _4141;
                        bool _4142;
                        for (;;)
                        {
                            uint _4022 = ((_3790 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4011));
                            _4012 = (_4011 + 4294967295u) & _4011;
                            uint _4024 = _4022 * 40u;
                            _4037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4024 + 3u)).x));
                            _4038 = _4037.w;
                            uint _4040 = (_4022 * 40u) + 4u;
                            _4053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4040 + 3u)).x));
                            uint _4055 = (_4022 * 40u) + 8u;
                            _4065 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4055)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4055 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4055 + 2u)).x));
                            uint _4067 = (_4022 * 40u) + 16u;
                            _4080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4067 + 3u)).x));
                            uint _4082 = (_4022 * 40u) + 20u;
                            _4095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4082 + 3u)).x));
                            uint _4097 = (_4022 * 40u) + 24u;
                            vec4 _4110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4097 + 3u)).x));
                            uint _4116 = (_4022 * 40u) + 28u;
                            vec4 _4129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4116 + 3u)).x));
                            _4141 = fma(_2451, _4129.z, fma(_2450, _4129.y, _4129.x * _2449)) + _4129.w;
                            _4142 = !((fma(_2451, _4110.z, fma(_2450, _4110.y, _4110.x * _2449)) + _4110.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4142)
                            {
                                float _4169 = _4037.x - _2449;
                                float _4170 = _4037.y - _2450;
                                float _4171 = _4037.z - _2451;
                                float _4172 = dot(vec3(_4169, _4170, _4171), vec3(_4169, _4170, _4171));
                                float _4175 = inversesqrt(_4172);
                                float _4176 = _4175 * _4169;
                                float _4177 = _4175 * _4170;
                                float _4178 = _4175 * _4171;
                                float _4182 = 1.0 - (_4172 / (_4038 * _4038));
                                float _5433 = isnan(0.0) ? _4182 : (isnan(_4182) ? 0.0 : max(_4182, 0.0));
                                float _4183 = isnan(1.0) ? _5433 : (isnan(_5433) ? 1.0 : min(_5433, 1.0));
                                float _4187 = sqrt(_4172) * _4053.w;
                                float _4189 = 1.39999997615814208984375 / (_4187 + 1.39999997615814208984375);
                                float _4190 = _4189 * _4189;
                                float _4193 = ((1.0 - _4190) * dot(vec3(_4176, _4177, _4178), vec3(_1251, _1254, _1257))) + _4190;
                                float _4196 = _4187 * _4187;
                                float _4200 = (fma(_2451, _4080.z, fma(_2450, _4080.y, _4080.x * _2449)) + _4080.w) / _4141;
                                float _4201 = (fma(_2451, _4095.z, fma(_2450, _4095.y, _4095.x * _2449)) + _4095.w) / _4141;
                                float _4205 = 1.0 - dot(vec2(_4200, _4201), vec2(_4200, _4201));
                                float _5449 = isnan(0.0) ? _4205 : (isnan(_4205) ? 0.0 : max(_4205, 0.0));
                                float _4206 = isnan(1.0) ? _5449 : (isnan(_5449) ? 1.0 : min(_5449, 1.0));
                                float _4207 = _4206 * (((isnan(0.0) ? _4193 : (isnan(_4193) ? 0.0 : max(_4193, 0.0))) * _4183) / ((_4196 * 0.699999988079071044921875) + 1.0));
                                float _4219 = exp2(log2(1.0 / ((_4196 * 3.5) + 5.0)) * 0.25);
                                float _4220 = 1.0 - _1371;
                                float _4227 = sqrt(1.0 - ((1.0 - (_4220 * _4220)) * (1.0 - (_4219 * _4219))));
                                float _4228 = _4227 * _4227;
                                float _4229 = _4228 * _4228;
                                float _4230 = _4176 - _3650;
                                float _4231 = _4177 - _3651;
                                float _4232 = _4178 - _3652;
                                float _4236 = inversesqrt(dot(vec3(_4230, _4231, _4232), vec3(_4230, _4231, _4232)));
                                float _4240 = dot(vec3(_1251, _1254, _1257), vec3((-0.0) - _3650, (-0.0) - _3651, (-0.0) - _3652));
                                float _5460 = isnan(0.0) ? _4240 : (isnan(_4240) ? 0.0 : max(_4240, 0.0));
                                float _4243 = isnan(1.0) ? _5460 : (isnan(_5460) ? 1.0 : min(_5460, 1.0));
                                float _4244 = dot(vec3(_1251, _1254, _1257), vec3(_4236 * _4230, _4236 * _4231, _4236 * _4232));
                                float _5471 = isnan(0.0) ? _4244 : (isnan(_4244) ? 0.0 : max(_4244, 0.0));
                                float _4247 = isnan(1.0) ? _5471 : (isnan(_5471) ? 1.0 : min(_5471, 1.0));
                                float _4251 = ((_4247 * _4247) * (_4229 + (-1.0))) + 1.0;
                                float _4252 = _4189 * _4228;
                                float _4253 = _4252 * _4252;
                                float _4259 = ((1.0 - _4253) * dot(vec3(_1251, _1254, _1257), vec3(_4176, _4177, _4178))) + _4253;
                                float _5482 = isnan(0.0) ? _4259 : (isnan(_4259) ? 0.0 : max(_4259, 0.0));
                                float _4260 = isnan(1.0) ? _5482 : (isnan(_5482) ? 1.0 : min(_5482, 1.0));
                                float _4261 = 1.0 - _4228;
                                float _4271 = (0.5 / (((_4260 * ((_4243 * _4261) + _4228)) + 9.9999999392252902907785028219223e-09) + (((_4260 * _4261) + _4228) * _4243))) * _4260;
                                float _5493 = isnan(0.0) ? _4271 : (isnan(_4271) ? 0.0 : max(_4271, 0.0));
                                float _4281 = (_4206 * _4183) * (((_4229 * 3.1415927410125732421875) * (isnan(1.0) ? _5493 : (isnan(_5493) ? 1.0 : min(_5493, 1.0)))) / ((_4251 * _4251) * ((_4196 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4207 * _4053.z;
                                frontier_phi_88_pred_1 = _4207 * _4053.y;
                                frontier_phi_88_pred_2 = _4207 * _4053.x;
                                frontier_phi_88_pred_3 = _4281 * _4065.z;
                                frontier_phi_88_pred_4 = _4281 * _4065.y;
                                frontier_phi_88_pred_5 = _4281 * _4065.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4290 = frontier_phi_88_pred;
                            _4289 = frontier_phi_88_pred_1;
                            _4288 = frontier_phi_88_pred_2;
                            _4287 = frontier_phi_88_pred_3;
                            _4286 = frontier_phi_88_pred_4;
                            _4285 = frontier_phi_88_pred_5;
                            _3995 = _4288 + _4008;
                            _3996 = _4289 + _4009;
                            _3997 = _4290 + _4010;
                            _3992 = _4285 + _4005;
                            _3993 = _4286 + _4006;
                            _3994 = _4287 + _4007;
                            if (_4012 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4005 = _3992;
                                _4006 = _3993;
                                _4007 = _3994;
                                _4008 = _3995;
                                _4009 = _3996;
                                _4010 = _3997;
                                _4011 = _4012;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3997;
                        frontier_phi_82_pred_1 = _3996;
                        frontier_phi_82_pred_2 = _3995;
                        frontier_phi_82_pred_3 = _3994;
                        frontier_phi_82_pred_4 = _3993;
                        frontier_phi_82_pred_5 = _3992;
                    }
                    _3635 = frontier_phi_82_pred;
                    _3633 = frontier_phi_82_pred_1;
                    _3631 = frontier_phi_82_pred_2;
                    _3629 = frontier_phi_82_pred_3;
                    _3627 = frontier_phi_82_pred_4;
                    _3625 = frontier_phi_82_pred_5;
                    uint _3791 = _3790 + 1u;
                    if (_3791 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3784 = _3625;
                        _3785 = _3627;
                        _3786 = _3629;
                        _3787 = _3631;
                        _3788 = _3633;
                        _3789 = _3635;
                        _3790 = _3791;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3631;
                frontier_phi_63_64_ladder_1 = _3635;
                frontier_phi_63_64_ladder_2 = _3633;
                frontier_phi_63_64_ladder_3 = _3629;
                frontier_phi_63_64_ladder_4 = _3627;
                frontier_phi_63_64_ladder_5 = _3625;
            }
            else
            {
                frontier_phi_63_64_ladder = _3502;
                frontier_phi_63_64_ladder_1 = _3506;
                frontier_phi_63_64_ladder_2 = _3504;
                frontier_phi_63_64_ladder_3 = _3500;
                frontier_phi_63_64_ladder_4 = _3498;
                frontier_phi_63_64_ladder_5 = _3496;
            }
            _3624 = frontier_phi_63_64_ladder_5;
            _3626 = frontier_phi_63_64_ladder_4;
            _3628 = frontier_phi_63_64_ladder_3;
            _3630 = frontier_phi_63_64_ladder;
            _3632 = frontier_phi_63_64_ladder_2;
            _3634 = frontier_phi_63_64_ladder_1;
        }
        float _3639 = isnan(1.0) ? _1355 : (isnan(_1355) ? 1.0 : min(_1355, 1.0));
        _3400 = (_3639 * _3630) + _2912;
        _3402 = (_3639 * _3632) + _2914;
        _3404 = (_3639 * _3634) + _2916;
        _3406 = ((_3624 * _1340) * _3639) + _3250;
        _3408 = ((_3626 * _1342) * _3639) + _3252;
        _3410 = ((_3628 * _1343) * _3639) + _3254;
    }
    else
    {
        _3400 = _2912;
        _3402 = _2914;
        _3404 = _2916;
        _3406 = _3250;
        _3408 = _3252;
        _3410 = _3254;
    }
    uint _3416 = _1284 + uint(cbMatDynParam._m0[0u].w);
    float _3422 = (((((cbMtdParam._m0[22u].x * _1052.x) * cbMtdParam._m0[32u].x) * _1075) + _828) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3416].x;
    float _3423 = (((((cbMtdParam._m0[22u].y * _1052.y) * cbMtdParam._m0[32u].x) * _1075) + _829) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3416].y;
    float _3424 = (((((cbMtdParam._m0[22u].z * _1052.z) * cbMtdParam._m0[32u].x) * _1075) + _830) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3416].z;
    float _5509 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _5520 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
    float _5531 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
    float _3441 = (((isnan(1.0) ? _5509 : (isnan(_5509) ? 1.0 : min(_5509, 1.0))) * (_3400 + ((isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0))) * _1355))) + ((_3406 + ((isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0))) * _2183)) * cbPerFrame._m0[3u].x)) + _3422;
    float _3443 = (_3423 + ((_3408 + ((isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0))) * _2183)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5520 : (isnan(_5520) ? 1.0 : min(_5520, 1.0))) * (_3402 + ((isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0))) * _1355)));
    float _3445 = (_3424 + ((_3410 + ((isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0))) * _2183)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5531 : (isnan(_5531) ? 1.0 : min(_5531, 1.0))) * (_3404 + ((isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0))) * _1355)));
    float _3446 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
    float _3447 = isnan(0.0) ? _3443 : (isnan(_3443) ? 0.0 : max(_3443, 0.0));
    float _3448 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
    float _3454 = cbMtdParam._m0[2u].x * _3422;
    float _3455 = cbMtdParam._m0[2u].y * _3423;
    float _3456 = cbMtdParam._m0[2u].z * _3424;
    float _5557 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3458 = isnan(1.0) ? _5557 : (isnan(_5557) ? 1.0 : min(_5557, 1.0));
    uint _3459 = _1283 + 6u;
    float _3467 = _1228 / cbSceneParam._m0[86u].x;
    float _3468 = _1229 / cbSceneParam._m0[86u].y;
    vec4 _3482 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3467, _3468, (log2((isnan(cbSceneParam._m0[77u].w) ? _1171 : (isnan(_1171) ? cbSceneParam._m0[77u].w : min(_1171, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3484 = _3482.x;
    float _3485 = _3482.y;
    float _3486 = _3482.z;
    float _3487 = _3482.w;
    float _3558;
    float _3560;
    float _3562;
    float _3564;
    if (_1171 > cbSceneParam._m0[78u].w)
    {
        float _3521 = isnan(_1171) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1171 : min(cbSceneParam._m0[80u].w, _1171));
        float _3522 = _3521 / _1171;
        float _3533 = _3522 * _1201;
        float _3534 = _1202 * _3522;
        float _3535 = (-0.0) - _3534;
        float _3536 = _3522 * _1203;
        float _3538 = (cbSceneParam._m0[77u].w * _3535) / _3521;
        float _3539 = _3538 + cbSceneParam._m0[79u].w;
        float _3540 = cbSceneParam._m0[79u].w - _3534;
        float _3546 = sqrt(((_3533 * _3533) + (_3534 * _3534)) + (_3536 * _3536));
        float _3549 = (1.0 - (cbSceneParam._m0[77u].w / _3521)) * _3546;
        float _3554 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3556 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3741;
        if (abs((_3535 - _3538) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3741 = ((((_3539 > 0.0) ? exp2(_3554 * _3539) : (2.0 - exp2(_3556 * _3539))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3549;
        }
        else
        {
            float _3685 = 1.0 / cbSceneParam._m0[80u].x;
            float _3686 = isnan(_3540) ? _3539 : (isnan(_3539) ? _3540 : max(_3539, _3540));
            float _3687 = isnan(_3540) ? _3539 : (isnan(_3539) ? _3540 : min(_3539, _3540));
            float _3696 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : min(_3686, 0.0));
            float _3697 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : min(_3687, 0.0));
            _3741 = ((abs(_3546 / _3535) * cbSceneParam._m0[80u].y) * ((((_3696 - _3697) * 2.0) - ((exp2(_3554 * (isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0)))) - exp2(_3554 * (isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0))))) * _3685)) - ((exp2(_3556 * _3696) - exp2(_3556 * _3697)) * _3685))) + (_3549 * cbSceneParam._m0[80u].z);
        }
        vec4 _3743 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3467, _3468, 1.0), 0.0);
        float _3752 = exp2((_3741 * (-1.44269502162933349609375)) * (1.0 - _3743.w));
        float _3753 = log2(_3752);
        float _3769 = log2(_3487);
        _3558 = (exp2(_3769 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3753 * cbSceneParam._m0[78u].x)) * _3743.x) / cbSceneParam._m0[78u].x)) + _3484;
        _3560 = (exp2(_3769 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3753 * cbSceneParam._m0[78u].y)) * _3743.y) / cbSceneParam._m0[78u].y)) + _3485;
        _3562 = (exp2(_3769 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3753 * cbSceneParam._m0[78u].z)) * _3743.z) / cbSceneParam._m0[78u].z)) + _3486;
        _3564 = _3752 * _3487;
    }
    else
    {
        _3558 = _3484;
        _3560 = _3485;
        _3562 = _3486;
        _3564 = _3487;
    }
    bool _3779;
    vec4 _3573;
    vec4 _3595;
    float _3597;
    float _3601;
    float _3602;
    float _3603;
    float _3606;
    float _3609;
    float _3612;
    float _3613;
    bool _3623;
    for (;;)
    {
        _3573 = cbMatDynParam._m0[0u];
        float _3575 = roundEven(_3573.y);
        bool _3576 = _3575 == 3.0;
        float _3577 = log2(_3564);
        float _3581 = exp2(_3577 * cbSceneParam._m0[78u].x);
        float _3582 = exp2(_3577 * cbSceneParam._m0[78u].y);
        float _3583 = exp2(_3577 * cbSceneParam._m0[78u].z);
        float _3584 = _3581 * _3446;
        float _3585 = _3582 * _3447;
        float _3586 = _3583 * _3448;
        float _3593 = _1217 + (-0.5);
        _3595 = cbMtdParam._m0[1u];
        _3597 = _3595.y * _3593;
        float _3600 = (_3575 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3601 = _3600 * (_3576 ? _3584 : (_3584 + (cbSceneParam._m0[72u].w * _3558)));
        _3602 = _3600 * (_3576 ? _3585 : (_3585 + (cbSceneParam._m0[72u].w * _3560)));
        _3603 = _3600 * (_3576 ? _3586 : (_3586 + (cbSceneParam._m0[72u].w * _3562)));
        _3606 = ((_3454 * _3458) * _3581) * _3600;
        _3609 = ((_3455 * _3458) * _3582) * _3600;
        _3612 = ((_3456 * _3458) * _3583) * _3600;
        _3613 = _3593 * 0.999000012874603271484375;
        _3623 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3623)
        {
            if ((cbInstanceData._m0[_1283 + 7u].x + _3613) < 0.5)
            {
                _3779 = true;
                break;
            }
        }
        uint _3720 = _1284 + uint(_3573.w);
        if ((cbInstanceData._m0[_3720].w < 1.0) && ((cbInstanceData._m0[_3720].w + _3613) < 0.5))
        {
            _3779 = true;
            break;
        }
        if ((_3597 + 1.0) < _3595.x)
        {
            _3779 = true;
            break;
        }
        _3779 = false;
        break;
    }
    float _3983;
    if (_3779)
    {
        discard_state = true;
        _3983 = 0.0;
    }
    else
    {
        _3983 = cbInstanceData._m0[_3459].w;
    }
    SV_Target.x = _3601;
    SV_Target.y = _3602;
    SV_Target.z = _3603;
    SV_Target.w = _3983;
    SV_Target_1.x = _3606;
    SV_Target_1.y = _3609;
    SV_Target_1.z = _3612;
    SV_Target_1.w = cbInstanceData._m0[_3459].w;
    discard_exit();
}


