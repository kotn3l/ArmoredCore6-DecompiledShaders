#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1522;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _227 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _228 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _229 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _235 = inversesqrt(dot(vec3(_227, _228, _229), vec3(_227, _228, _229)));
    float _242 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _249 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _271 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _276 = _271.z;
    float _277 = _271.w;
    vec4 _299 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _304 = _299.w;
    float _316 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _276) * exp2(log2(1.0 - _304) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _317 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _318 = isnan(1.0) ? _317 : (isnan(_317) ? 1.0 : min(_317, 1.0));
    vec4 _332 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _342 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _350 = (_342 - (((_332.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _342))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4173 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    float _353 = _318 - (_351 * _318);
    float _354 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    vec4 _368 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _371 = _368.y;
    float _372 = _371 * (isnan(1.0) ? _354 : (isnan(_354) ? 1.0 : min(_354, 1.0)));
    float _381 = exp2(log2(cbMtdParam._m0[32u].w * _304) * cbMtdParam._m0[31u].z);
    float _383 = _381 - (_351 * _381);
    float _384 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _385 = isnan(1.0) ? _384 : (isnan(_384) ? 1.0 : min(_384, 1.0));
    float _396 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_277) * 4.5));
    float _405 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _276) * _396)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _406 = isnan(0.0) ? _405 : (isnan(_405) ? 0.0 : max(_405, 0.0));
    float _407 = isnan(1.0) ? _406 : (isnan(_406) ? 1.0 : min(_406, 1.0));
    float _418 = exp2(log2((1.0 - (((_396 * _396) * _276) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _419 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _423 = (((isnan(1.0) ? _419 : (isnan(_419) ? 1.0 : min(_419, 1.0))) - _277) * _371) + _277;
    vec4 _435 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _448 = (_368.x + (-0.02500000037252902984619140625)) * 8.0;
    float _450 = roundEven(_448);
    float _451 = cbMtdParam._m0[10u].x * _435.x;
    float _452 = cbMtdParam._m0[10u].y * _435.y;
    float _453 = cbMtdParam._m0[10u].z * _435.z;
    vec4 _465 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _476 = cbMtdParam._m0[9u].x * _465.x;
    float _477 = cbMtdParam._m0[9u].y * _465.y;
    float _478 = cbMtdParam._m0[9u].z * _465.z;
    float _485 = ((_476 - _451) * _423) + _451;
    float _486 = ((_477 - _452) * _423) + _452;
    float _487 = ((_478 - _453) * _423) + _453;
    vec4 _499 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _519 = (((cbMtdParam._m0[20u].x * _499.x) - _485) * _407) + _485;
    float _520 = (((cbMtdParam._m0[20u].y * _499.y) - _486) * _407) + _486;
    float _521 = (((cbMtdParam._m0[20u].z * _499.z) - _487) * _407) + _487;
    vec4 _533 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _553 = (((cbMtdParam._m0[29u].x * _533.x) - _519) * _385) + _519;
    float _554 = (((cbMtdParam._m0[29u].y * _533.y) - _520) * _385) + _520;
    float _555 = (((cbMtdParam._m0[29u].z * _533.z) - _521) * _385) + _521;
    float _200[6];
    float _201[6];
    float _202[6];
    _200[0u] = cbMtdParam._m0[30u].x;
    _201[0u] = cbMtdParam._m0[30u].y;
    _202[0u] = cbMtdParam._m0[30u].z;
    _200[1u] = cbMtdParam._m0[28u].x;
    _201[1u] = cbMtdParam._m0[28u].y;
    _202[1u] = cbMtdParam._m0[28u].z;
    _200[2u] = cbMtdParam._m0[27u].x;
    _201[2u] = cbMtdParam._m0[27u].y;
    _202[2u] = cbMtdParam._m0[27u].z;
    _200[3u] = cbMtdParam._m0[26u].x;
    _201[3u] = cbMtdParam._m0[26u].y;
    _202[3u] = cbMtdParam._m0[26u].z;
    _200[4u] = cbMtdParam._m0[25u].x;
    _201[4u] = cbMtdParam._m0[25u].y;
    _202[4u] = cbMtdParam._m0[25u].z;
    _200[5u] = cbMtdParam._m0[24u].x;
    _201[5u] = cbMtdParam._m0[24u].y;
    _202[5u] = cbMtdParam._m0[24u].z;
    float _624 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    uint _627 = uint(int(isnan(5.0) ? _624 : (isnan(_624) ? 5.0 : min(_624, 5.0))));
    float _634 = _200[_627] * _371;
    float _635 = _201[_627] * _371;
    float _636 = _202[_627] * _371;
    float _637 = _634 + ((_299.x * 4.5) * (((_476 - _553) * _372) + _553));
    float _638 = _635 + ((_299.y * 4.5) * (((_477 - _554) * _372) + _554));
    float _639 = _636 + ((_299.z * 4.5) * (((_478 - _555) * _372) + _555));
    float _195[5];
    float _196[5];
    _195[0u] = cbMtdParam._m0[37u].w;
    _196[0u] = cbMtdParam._m0[38u].x;
    _195[1u] = cbMtdParam._m0[39u].w;
    _196[1u] = cbMtdParam._m0[40u].x;
    _195[2u] = cbMtdParam._m0[40u].y;
    _196[2u] = cbMtdParam._m0[40u].z;
    _195[3u] = cbMtdParam._m0[40u].w;
    _196[3u] = cbMtdParam._m0[41u].x;
    _195[4u] = cbMtdParam._m0[41u].y;
    _196[4u] = cbMtdParam._m0[41u].z;
    float _672 = roundEven(5.0 - _448);
    float _673 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _674 = isnan(4.0) ? _673 : (isnan(_673) ? 4.0 : min(_673, 4.0));
    float _676 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    uint _678 = uint(int(isnan(4.0) ? _676 : (isnan(_676) ? 4.0 : min(_676, 4.0))));
    float _690 = ((cbMtdParam._m0[42u].z - _196[_678]) * _423) + _196[_678];
    float _698 = ((cbMtdParam._m0[43u].x - _690) * _407) + _690;
    float _703 = ((cbMtdParam._m0[43u].z - _698) * _385) + _698;
    float _708 = ((cbMtdParam._m0[39u].z - _703) * _372) + _703;
    vec4 _722 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _724 = _722.x;
    float _725 = _722.y;
    float _727 = _722.z + _195[_678];
    vec4 _739 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _747 = (((cbMtdParam._m0[42u].y - _727) + _739.z) * _423) + _727;
    vec4 _760 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _768 = (((cbMtdParam._m0[42u].w - _747) + _760.z) * _407) + _747;
    float _774 = ((((_276 * 2.0) * _768) - _768) * cbMtdParam._m0[34u].x) + _768;
    vec4 _787 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _795 = (((_787.z + cbMtdParam._m0[43u].y) - _774) * _385) + _774;
    float _799 = (((cbMtdParam._m0[39u].y + _332.z) - _795) * _372) + _795;
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _862 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_831 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_835 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _877 = (-0.0) - ((_835 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _881 = (_835 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _882 = isnan(_881) ? _877 : (isnan(_877) ? _881 : min(_877, _881));
    float _4259 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _883 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _911 = ((_739.x - _724) * _423) + _724;
    float _912 = ((_739.y - _725) * _423) + _725;
    float _917 = ((_760.x - _911) * _407) + _911;
    float _918 = ((_760.y - _912) * _407) + _912;
    float _923 = ((_787.x - _917) * _385) + _917;
    float _924 = ((_787.y - _918) * _385) + _918;
    float _933 = ((((_332.x - _923) * _372) + _923) * 2.0) + (-1.0);
    float _934 = ((((_332.y - _924) * _372) + _924) * 2.0) + (-1.0);
    float _935 = dot(vec2(_933, _934), vec2(_933, _934));
    float _4270 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _940 = sqrt(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))));
    float _943 = (cbMtdParam._m0[34u].z * ((_271.x * 2.0) + (-1.0))) + _933;
    float _944 = (cbMtdParam._m0[34u].z * ((_271.y * 2.0) + (-1.0))) + _934;
    float _947 = fma(_940, _242 * NORMAL.x, fma(_944, _249 * TANGENT.x, (_235 * _227) * _943));
    float _950 = fma(_940, _242 * NORMAL.y, fma(_944, _249 * TANGENT.y, (_235 * _228) * _943));
    float _953 = fma(_940, _242 * NORMAL.z, fma(_944, _249 * TANGENT.z, (_235 * _229) * _943));
    float _957 = inversesqrt(dot(vec3(_947, _950, _953), vec3(_947, _950, _953)));
    float _958 = _957 * _947;
    float _959 = _957 * _950;
    float _960 = _957 * _953;
    float _4281 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _961 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
    float _4292 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _4303 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4314 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4325 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _965 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
    float _981 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1011 = cbSceneParam._m0[71u].x - (_831 / _1001);
    float _1012 = cbSceneParam._m0[71u].y - (_835 / _1001);
    float _1013 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1001);
    float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
    float _1018 = _1011 * _1017;
    float _1019 = _1012 * _1017;
    float _1020 = _1013 * _1017;
    float _1026 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1027 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1029 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1031 = _1029.w;
    float _1049 = fma(_960, cbSceneParam._m0[5u].z, fma(_959, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _958));
    float _1052 = fma(_960, cbSceneParam._m0[6u].z, fma(_959, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _958));
    float _1055 = fma(_960, cbSceneParam._m0[7u].z, fma(_959, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _958));
    vec4 _1057 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1068 = (((_1057.y - _961) + (_1057.w * _961)) * cbMtdParam._m0[3u].x) + _961;
    uint _1081 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1082 = _1081 + 9u;
    uint _1083 = _1082 + uint(cbMatDynParam._m0[0u].w);
    float _1089 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0)))) * cbInstanceData._m0[_1083].x;
    float _1090 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0)))) * cbInstanceData._m0[_1083].y;
    float _1091 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * cbInstanceData._m0[_1083].z;
    float _4336 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
    float _4347 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
    float _4358 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
    vec4 _1095 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1100 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1111 = (((_1100.x - _965) + (_1100.w * _965)) * cbMtdParam._m0[3u].x) + _965;
    float _1124 = (cbMtdParam._m0[3u].x * (((_1092 * _1031) - _1092) + _1095.x)) + _1092;
    float _1125 = (cbMtdParam._m0[3u].x * (((_1093 * _1031) - _1093) + _1095.y)) + _1093;
    float _1126 = (cbMtdParam._m0[3u].x * (((_1094 * _1031) - _1094) + _1095.z)) + _1094;
    float _1127 = 1.0 - _1111;
    float _1128 = _1127 * _1124;
    float _1129 = _1127 * _1125;
    float _1130 = _1127 * _1126;
    float _1135 = (_1124 + (-0.039999999105930328369140625)) * _1111;
    float _1136 = (_1125 + (-0.039999999105930328369140625)) * _1111;
    float _1137 = (_1126 + (-0.039999999105930328369140625)) * _1111;
    float _1138 = _1135 + 0.039999999105930328369140625;
    float _1140 = _1136 + 0.039999999105930328369140625;
    float _1141 = _1137 + 0.039999999105930328369140625;
    vec4 _1150 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1026, cbSceneParam._m0[86u].y * _1027));
    float _1153 = _1150.x * TEXCOORD_5.w;
    float _1154 = dot(vec3(_958, _959, _960), vec3(_1018, _1019, _1020));
    float _1157 = _1154 * 2.0;
    float _1161 = (_1157 * _958) - _1018;
    float _1162 = (_1157 * _959) - _1019;
    float _1163 = (_1157 * _960) - _1020;
    float _1167 = abs(dot(vec3(_1018, _1019, _1020), vec3(_958, _959, _960)));
    float _4369 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1169 = sqrt(_1068);
    float _1180 = exp2((_1169 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1169 * 3.0));
    float _1186 = (1.0 - _1180) * ((_1169 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1187 = _1180 * _1169;
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1521;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1248 = fma(_1223, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215));
        float _1252 = fma(_1223, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215));
        float _1256 = fma(_1223, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215));
        float _1280 = _1215 + _958;
        float _1281 = _1219 + _959;
        float _1282 = _1223 + _960;
        float _1292 = fma(_1282, cbModelParam._m0[26u].z, fma(_1281, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1280)) - _1248;
        float _1293 = fma(_1282, cbModelParam._m0[27u].z, fma(_1281, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1280)) - _1252;
        float _1294 = fma(_1282, cbModelParam._m0[28u].z, fma(_1281, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1280)) - _1256;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1310 = ((_1298 * _1292) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1248 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1298 * _1293) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1252 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1294) / cbModelParam._m0[34u].z) + ((((((_1256 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1349 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1315.x + (-0.5));
        float _1351 = _1349 * (_1315.y + (-0.5));
        float _1352 = _1349 * (_1315.z + (-0.5));
        float _1359 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1322.x + (-0.5));
        float _1361 = _1359 * (_1322.y + (-0.5));
        float _1362 = _1359 * (_1322.z + (-0.5));
        float _1369 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1329.x + (-0.5));
        float _1371 = _1369 * (_1329.y + (-0.5));
        float _1372 = _1369 * (_1329.z + (-0.5));
        float _1379 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1336.x + (-0.5));
        float _1381 = _1379 * (_1336.y + (-0.5));
        float _1382 = _1379 * (_1336.z + (-0.5));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = _1350 * 0.5;
        float _1387 = _1360 * 0.5;
        float _1388 = _1370 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1403 = (dot(vec3(_958, _959, _960), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4395 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1413 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4406 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4417 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0))) * (_1415 + 1.0))) + _1420) * _1383;
        float _1430 = _1351 * 0.5;
        float _1431 = _1361 * 0.5;
        float _1432 = _1371 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_958, _959, _960), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4428 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4439 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4450 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0))) * (_1457 + 1.0))) + _1462) * _1384;
        float _1472 = _1352 * 0.5;
        float _1473 = _1362 * 0.5;
        float _1474 = _1372 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_958, _959, _960), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4461 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4472 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4483 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4483 : (isnan(_4483) ? 1.0 : min(_4483, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_1499 + 1.0))) + _1504) * _1385;
        _1521 = _1352;
        _1523 = _1351;
        _1524 = _1350;
        _1525 = _1362;
        _1526 = _1361;
        _1527 = _1360;
        _1528 = _1372;
        _1529 = _1371;
        _1530 = _1370;
        _1531 = _1385;
        _1532 = _1384;
        _1533 = _1383;
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    }
    else
    {
        _1521 = _1522;
        _1523 = _1522;
        _1524 = _1522;
        _1525 = _1522;
        _1526 = _1522;
        _1527 = _1522;
        _1528 = _1522;
        _1529 = _1522;
        _1530 = _1522;
        _1531 = _1522;
        _1532 = _1522;
        _1533 = _1522;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1559 = fma(_1223, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215));
        float _1563 = fma(_1223, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215));
        float _1567 = fma(_1223, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215));
        float _1589 = _1215 + _958;
        float _1590 = _1219 + _959;
        float _1591 = _1223 + _960;
        float _1601 = fma(_1591, cbModelParam._m0[30u].z, fma(_1590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1589)) - _1559;
        float _1602 = fma(_1591, cbModelParam._m0[31u].z, fma(_1590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1589)) - _1563;
        float _1603 = fma(_1591, cbModelParam._m0[32u].z, fma(_1590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1589)) - _1567;
        float _1607 = inversesqrt(dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603)));
        float _1619 = ((_1607 * _1601) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1559 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1620 = ((_1607 * _1602) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1563 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1621 = ((_1607 * _1603) / cbModelParam._m0[35u].z) + ((((((_1567 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        float _1656 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1623.x + (-0.5));
        float _1658 = _1656 * (_1623.y + (-0.5));
        float _1659 = _1656 * (_1623.z + (-0.5));
        float _1666 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1630.x + (-0.5));
        float _1668 = _1666 * (_1630.y + (-0.5));
        float _1669 = _1666 * (_1630.z + (-0.5));
        float _1676 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1637.x + (-0.5));
        float _1678 = _1676 * (_1637.y + (-0.5));
        float _1679 = _1676 * (_1637.z + (-0.5));
        float _1686 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1644.x + (-0.5));
        float _1688 = _1686 * (_1644.y + (-0.5));
        float _1689 = _1686 * (_1644.z + (-0.5));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = _1657 * 0.5;
        float _1694 = _1667 * 0.5;
        float _1695 = _1677 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_958, _959, _960), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4524 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4535 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4535 : (isnan(_4535) ? 1.0 : min(_4535, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4546 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4546 : (isnan(_4546) ? 1.0 : min(_4546, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4524 : (isnan(_4524) ? 1.0 : min(_4524, 1.0))) * (_1720 + 1.0))) + _1725) * _1690;
        float _1735 = _1658 * 0.5;
        float _1736 = _1668 * 0.5;
        float _1737 = _1678 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_958, _959, _960), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4557 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1691 + 9.9999997473787516355514526367188e-06);
        float _4568 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4579 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0))) * (_1762 + 1.0))) + _1767) * _1691;
        float _1777 = _1659 * 0.5;
        float _1778 = _1669 * 0.5;
        float _1779 = _1679 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_958, _959, _960), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4590 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4601 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4612 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_1804 + 1.0))) + _1809) * _1692;
        _1826 = _1659;
        _1827 = _1658;
        _1828 = _1657;
        _1829 = _1669;
        _1830 = _1668;
        _1831 = _1667;
        _1832 = _1679;
        _1833 = _1678;
        _1834 = _1677;
        _1835 = _1692;
        _1836 = _1691;
        _1837 = _1690;
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1839 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
    }
    else
    {
        _1826 = _1522;
        _1827 = _1522;
        _1828 = _1522;
        _1829 = _1522;
        _1830 = _1522;
        _1831 = _1522;
        _1832 = _1522;
        _1833 = _1522;
        _1834 = _1522;
        _1835 = _1522;
        _1836 = _1522;
        _1837 = _1522;
        _1838 = 0.0;
        _1839 = 0.0;
        _1840 = 0.0;
    }
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1534)) + _1534;
    float _1851 = (cbModelParam._m0[1u].x * (_1839 - _1535)) + _1535;
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1536)) + _1536;
    float _1873 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1850));
    float _1892 = _1161 * 0.5;
    float _1893 = _1162 * 0.5;
    float _1894 = _1163 * 0.5;
    float _1895 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1898 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1827, _1830, _1833, _1836));
    float _1901 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1935;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1908 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1521, _1525, _1528, _1531));
        float _1912 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1523, _1526, _1529, _1532));
        float _1916 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1524, _1527, _1530, _1533));
        float _1923 = dot(vec4(cbModelParam._m0[39u]), vec4(_1892, _1893, _1894, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1946;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1937 = dot(vec4(cbModelParam._m0[40u]), vec4(_1892, _1893, _1894, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1950 = (_1946 * cbModelParam._m0[1u].x) + (_1935 * (1.0 - cbModelParam._m0[1u].x));
    float _1960 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1068);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1960 : min(cbModelParam._m0[25u].z, _1960));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2010 = fma(_1223, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215)) + cbModelParam._m0[13u].w;
        float _2014 = fma(_1223, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215)) + cbModelParam._m0[14u].w;
        float _2018 = fma(_1223, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215)) + cbModelParam._m0[15u].w;
        float _2021 = fma(_1163, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161));
        float _2024 = fma(_1163, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161));
        float _2027 = fma(_1163, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161));
        float _2055;
        if (_2021 > 0.0)
        {
            _2055 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2055 = frontier_phi_14_12_ladder;
        }
        float _2229;
        if (_2024 > 0.0)
        {
            _2229 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2229 = frontier_phi_23_19_ladder;
        }
        float _2521;
        if (_2027 > 0.0)
        {
            _2521 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2521 = frontier_phi_35_30_ladder;
        }
        float _2523 = isnan(_2229) ? _2055 : (isnan(_2055) ? _2229 : min(_2055, _2229));
        float _2524 = isnan(_2521) ? _2523 : (isnan(_2523) ? _2521 : min(_2523, _2521));
        float _2528 = (_2524 * _2021) + _2010;
        float _2529 = (_2524 * _2024) + _2014;
        float _2530 = (_2524 * _2027) + _2018;
        float _2531 = _2524 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2531;
        float _2535 = _2531 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 > _2535) || ((_2529 < _2533) || ((_2528 < _2533) || (_2528 > _2535))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2675 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2530, cbModelParam._m0[9u].z, fma(_2529, cbModelParam._m0[9u].y, _2528 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2530, cbModelParam._m0[10u].z, fma(_2529, cbModelParam._m0[10u].y, _2528 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2530, cbModelParam._m0[11u].z, fma(_2529, cbModelParam._m0[11u].y, _2528 * cbModelParam._m0[11u].x))), _1961);
            frontier_phi_13_35_ladder = _2675.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2675.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2675.x * cbModelParam._m0[1u].y;
        }
        _2043 = frontier_phi_13_35_ladder_2;
        _2045 = frontier_phi_13_35_ladder_1;
        _2047 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1161, _1162, _1163), _1961);
        _2043 = _2031.x * cbModelParam._m0[1u].y;
        _2045 = _2031.y * cbModelParam._m0[1u].y;
        _2047 = _2031.z * cbModelParam._m0[1u].y;
    }
    float _2051 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1068);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2051 : min(cbModelParam._m0[25u].w, _2051));
    float _2144;
    float _2146;
    float _2148;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2108 = fma(_1223, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215)) + cbModelParam._m0[21u].w;
        float _2112 = fma(_1223, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215)) + cbModelParam._m0[22u].w;
        float _2116 = fma(_1223, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215)) + cbModelParam._m0[23u].w;
        float _2119 = fma(_1163, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161));
        float _2122 = fma(_1163, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161));
        float _2125 = fma(_1163, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161));
        float _2234;
        if (_2119 > 0.0)
        {
            _2234 = abs((1.0 - _2108) / _2119);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2108 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2234 = frontier_phi_25_21_ladder;
        }
        float _2548;
        if (_2122 > 0.0)
        {
            _2548 = abs((1.0 - _2112) / _2122);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2112 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2548 = frontier_phi_37_32_ladder;
        }
        float _2886;
        if (_2125 > 0.0)
        {
            _2886 = abs((1.0 - _2116) / _2125);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_2116 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2886 = frontier_phi_47_44_ladder;
        }
        float _2888 = isnan(_2548) ? _2234 : (isnan(_2234) ? _2548 : min(_2234, _2548));
        float _2889 = isnan(_2886) ? _2888 : (isnan(_2888) ? _2886 : min(_2888, _2886));
        float _2893 = (_2889 * _2119) + _2108;
        float _2894 = (_2889 * _2122) + _2112;
        float _2895 = (_2889 * _2125) + _2116;
        float _2896 = _2889 * 9.9999997473787516355514526367188e-05;
        float _2897 = (-1.0) - _2896;
        float _2899 = _2896 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2895 > _2899) || ((_2895 < _2897) || ((_2894 > _2899) || ((_2894 < _2897) || ((_2893 < _2897) || (_2893 > _2899))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2895, cbModelParam._m0[17u].z, fma(_2894, cbModelParam._m0[17u].y, _2893 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2895, cbModelParam._m0[18u].z, fma(_2894, cbModelParam._m0[18u].y, _2893 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2895, cbModelParam._m0[19u].z, fma(_2894, cbModelParam._m0[19u].y, _2893 * cbModelParam._m0[19u].x))), _2052);
            frontier_phi_22_47_ladder = _3017.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _3017.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _3017.x * cbModelParam._m0[1u].z;
        }
        _2144 = frontier_phi_22_47_ladder_2;
        _2146 = frontier_phi_22_47_ladder_1;
        _2148 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _2128 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1161, _1162, _1163), _2052);
        _2144 = _2128.x * cbModelParam._m0[1u].z;
        _2146 = _2128.y * cbModelParam._m0[1u].z;
        _2148 = _2128.z * cbModelParam._m0[1u].z;
    }
    float _2161 = (((_1186 * _1138) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2144 - _2043)) + _2043);
    float _2163 = (((_1186 * _1140) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2146 - _2045)) + _2045);
    float _2165 = (((_1186 * _1141) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2148 - _2047)) + _2047);
    float _2168 = fma(_2165, cbSceneParam._m0[89u].z, fma(_2163, cbSceneParam._m0[89u].y, _2161 * cbSceneParam._m0[89u].x));
    float _2171 = fma(_2165, cbSceneParam._m0[90u].z, fma(_2163, cbSceneParam._m0[90u].y, _2161 * cbSceneParam._m0[90u].x));
    float _2174 = fma(_2165, cbSceneParam._m0[91u].z, fma(_2163, cbSceneParam._m0[91u].y, _2161 * cbSceneParam._m0[91u].x));
    float _2208 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2212 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2216 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2220 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2221 = _2208 / _2220;
    float _2222 = _2212 / _2220;
    float _2223 = _2216 / _2220;
    float _2367;
    float _2368;
    float _2369;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2250 = ((uint(_2223 > cbSceneParam._m0[59u].y) + uint(_2223 > cbSceneParam._m0[59u].x)) + uint(_2223 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2251 = _2250 + 43u;
        uint _2258 = _2250 + 44u;
        uint _2265 = _2250 + 45u;
        uint _2273 = _2250 + 46u;
        float _2284 = fma(_2220, cbSceneParam._m0[_2251].w, fma(_2216, cbSceneParam._m0[_2251].z, fma(_2212, cbSceneParam._m0[_2251].y, _2208 * cbSceneParam._m0[_2251].x)));
        float _2288 = fma(_2220, cbSceneParam._m0[_2258].w, fma(_2216, cbSceneParam._m0[_2258].z, fma(_2212, cbSceneParam._m0[_2258].y, _2208 * cbSceneParam._m0[_2258].x)));
        float _2296 = fma(_2220, cbSceneParam._m0[_2273].w, fma(_2216, cbSceneParam._m0[_2273].z, fma(_2212, cbSceneParam._m0[_2273].y, _2208 * cbSceneParam._m0[_2273].x)));
        float _2300 = cbSceneParam._m0[33u].z * _2296;
        float _2302 = cbSceneParam._m0[33u].w * _2296;
        float _2305 = fma(_2220, cbSceneParam._m0[_2265].w, fma(_2216, cbSceneParam._m0[_2265].z, fma(_2212, cbSceneParam._m0[_2265].y, _2208 * cbSceneParam._m0[_2265].x))) / _2296;
        float _2353 = (cbSceneParam._m0[33u].x - sqrt(((_2222 * _2222) + (_2221 * _2221)) + (_2223 * _2223))) * cbSceneParam._m0[33u].y;
        float _4738 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
        float _2360 = (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2300 + _2284) / _2296, (_2302 + _2288) / _2296), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2302 + _2284) / _2296, (_2288 - _2300) / _2296), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2284 - _2300) / _2296, (_2288 - _2302) / _2296), _2305), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2284 - _2302) / _2296, (_2300 + _2288) / _2296), _2305), 0.0)).x), vec4(0.25)));
        _2367 = 1.0 - (_2360 * cbSceneParam._m0[34u].x);
        _2368 = 1.0 - (_2360 * cbSceneParam._m0[34u].y);
        _2369 = 1.0 - (_2360 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2367 = 1.0;
        _2368 = 1.0;
        _2369 = 1.0;
    }
    float _2433;
    float _2435;
    float _2437;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2421 = fma(_2220, cbSceneParam._m0[63u].w, fma(_2216, cbSceneParam._m0[63u].z, fma(_2212, cbSceneParam._m0[63u].y, _2208 * cbSceneParam._m0[63u].x)));
        float _2422 = fma(_2220, cbSceneParam._m0[60u].w, fma(_2216, cbSceneParam._m0[60u].z, fma(_2212, cbSceneParam._m0[60u].y, _2208 * cbSceneParam._m0[60u].x))) / _2421;
        float _2423 = fma(_2220, cbSceneParam._m0[61u].w, fma(_2216, cbSceneParam._m0[61u].z, fma(_2212, cbSceneParam._m0[61u].y, _2208 * cbSceneParam._m0[61u].x))) / _2421;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2422 >= cbSceneParam._m0[64u].x) && (_2423 >= cbSceneParam._m0[64u].y)) && (_2422 <= cbSceneParam._m0[64u].z)) && (_2423 <= cbSceneParam._m0[64u].w))
        {
            float _2561 = fma(_2220, cbSceneParam._m0[62u].w, fma(_2216, cbSceneParam._m0[62u].z, fma(_2212, cbSceneParam._m0[62u].y, _2208 * cbSceneParam._m0[62u].x))) / _2421;
            float _2565 = isnan(cbSceneParam._m0[41u].w) ? _2561 : (isnan(_2561) ? cbSceneParam._m0[41u].w : max(_2561, cbSceneParam._m0[41u].w));
            float _2608 = (cbSceneParam._m0[33u].x - sqrt(((_2222 * _2222) + (_2221 * _2221)) + (_2223 * _2223))) * cbSceneParam._m0[33u].y;
            float _4754 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
            float _2615 = (isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2422, cbSceneParam._m0[33u].w + _2423), _2565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2422, _2423 - cbSceneParam._m0[33u].z), _2565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2422 - cbSceneParam._m0[33u].z, _2423 - cbSceneParam._m0[33u].w), _2565), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2422 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2423), _2565), 0.0)).x), vec4(0.25)));
            float _2619 = 1.0 - (_2615 * cbSceneParam._m0[34u].x);
            float _2620 = 1.0 - (_2615 * cbSceneParam._m0[34u].y);
            float _2621 = 1.0 - (_2615 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2621) ? _2369 : (isnan(_2369) ? _2621 : min(_2369, _2621));
            frontier_phi_34_33_ladder_1 = isnan(_2620) ? _2368 : (isnan(_2368) ? _2620 : min(_2368, _2620));
            frontier_phi_34_33_ladder_2 = isnan(_2619) ? _2367 : (isnan(_2367) ? _2619 : min(_2367, _2619));
        }
        else
        {
            frontier_phi_34_33_ladder = _2369;
            frontier_phi_34_33_ladder_1 = _2368;
            frontier_phi_34_33_ladder_2 = _2367;
        }
        _2433 = frontier_phi_34_33_ladder_2;
        _2435 = frontier_phi_34_33_ladder_1;
        _2437 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2433 = _2367;
        _2435 = _2368;
        _2437 = _2369;
    }
    uvec4 _2442 = floatBitsToUint(cbInstanceData._m0[_1081 + 5u]);
    uint _2444 = _2442.x * 14u;
    uint _2445 = _2444 + 13u;
    float _2452 = _1153 + (-1.0);
    float _2457 = (cbLight._m0[_2445].x * _2452) + 1.0;
    float _2458 = (cbLight._m0[_2445].y * _2452) + 1.0;
    float _2459 = (cbLight._m0[_2445].z * _2452) + 1.0;
    float _2460 = (cbLight._m0[_2445].w * _2452) + 1.0;
    uint _2461 = _2444 + 5u;
    float _2467 = isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0));
    uint _2471 = _2444 + 4u;
    float _2480 = isnan(1.0) ? _2457 : (isnan(_2457) ? 1.0 : min(_2457, 1.0));
    uint _2484 = _2444 | 1u;
    float _2495 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_958, _959, _960));
    float _2498 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_958, _959, _960));
    float _4790 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0));
    float _4801 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2503 = (isnan(1.0) ? _4790 : (isnan(_4790) ? 1.0 : min(_4790, 1.0))) * 0.3183098733425140380859375;
    float _2505 = (isnan(1.0) ? _4801 : (isnan(_4801) ? 1.0 : min(_4801, 1.0))) * 0.3183098733425140380859375;
    float _2512 = ((cbLight._m0[_2461].x * _2467) * _2505) + (((cbLight._m0[_2471].x * _2433) * _2480) * _2503);
    float _2513 = ((_2467 * cbLight._m0[_2461].y) * _2505) + (((cbLight._m0[_2471].y * _2435) * _2480) * _2503);
    float _2514 = ((_2467 * cbLight._m0[_2461].z) * _2505) + (((cbLight._m0[_2471].z * _2437) * _2480) * _2503);
    uvec4 _2518 = floatBitsToUint(cbLight._m0[_2444 + 12u]);
    bool _2520 = _2518.x == 0u;
    float _2622;
    float _2624;
    float _2626;
    if (_2520)
    {
        _2622 = _2512;
        _2624 = _2513;
        _2626 = _2514;
    }
    else
    {
        uint _2630 = _2444 + 6u;
        float _2646 = (dot(vec3(cbLight._m0[_2444 + 2u].xyz), vec3(_958, _959, _960)) * 0.5) + 0.5;
        float _2647 = _2646 * _2646;
        float _4812 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2648 = isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0));
        float _2649 = isnan(1.0) ? _2459 : (isnan(_2459) ? 1.0 : min(_2459, 1.0));
        _2622 = (((cbLight._m0[_2630].x * 0.3183098733425140380859375) * _2648) * _2649) + _2512;
        _2624 = (((cbLight._m0[_2630].y * 0.3183098733425140380859375) * _2648) * _2649) + _2513;
        _2626 = (((cbLight._m0[_2630].z * 0.3183098733425140380859375) * _2648) * _2649) + _2514;
    }
    bool _2629 = _2518.y == 0u;
    float _2684;
    float _2686;
    float _2688;
    if (_2629)
    {
        _2684 = _2622;
        _2686 = _2624;
        _2688 = _2626;
    }
    else
    {
        uint _2857 = _2444 + 7u;
        float _2873 = (dot(vec3(cbLight._m0[_2444 + 3u].xyz), vec3(_958, _959, _960)) * 0.5) + 0.5;
        float _2874 = _2873 * _2873;
        float _4828 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
        float _2875 = isnan(1.0) ? _4828 : (isnan(_4828) ? 1.0 : min(_4828, 1.0));
        float _2876 = isnan(1.0) ? _2460 : (isnan(_2460) ? 1.0 : min(_2460, 1.0));
        _2684 = (((cbLight._m0[_2857].x * 0.3183098733425140380859375) * _2875) * _2876) + _2622;
        _2686 = (((cbLight._m0[_2857].y * 0.3183098733425140380859375) * _2875) * _2876) + _2624;
        _2688 = (((cbLight._m0[_2857].z * 0.3183098733425140380859375) * _2875) * _2876) + _2626;
    }
    uint _2691 = _2444 + 8u;
    float _2704 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2444].w)) * _1068) * 0.949999988079071044921875);
    float _2705 = _2704 * _2704;
    float _2706 = cbLight._m0[_2444].x + _1018;
    float _2707 = cbLight._m0[_2444].y + _1019;
    float _2708 = cbLight._m0[_2444].z + _1020;
    float _2712 = inversesqrt(dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708)));
    float _2713 = _2712 * _2706;
    float _2714 = _2712 * _2707;
    float _2715 = _2712 * _2708;
    float _2716 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2444].xyz));
    float _4844 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2719 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    float _4855 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _2720 = isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0));
    float _2721 = dot(vec3(_958, _959, _960), vec3(_2713, _2714, _2715));
    float _4866 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
    float _2724 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _2725 = dot(vec3(cbLight._m0[_2444].xyz), vec3(_2713, _2714, _2715));
    float _4877 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
    float _2729 = _2705 * _2705;
    float _2733 = ((_2724 * _2724) * (_2729 + (-1.0))) + 1.0;
    float _2741 = exp2(log2(1.0 - (isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0)))) * 5.0);
    float _2742 = 0.959999978542327880859375 - _1135;
    float _2744 = 0.959999978542327880859375 - _1136;
    float _2745 = 0.959999978542327880859375 - _1137;
    float _2752 = 1.0 - _2705;
    float _2763 = (0.5 / (((_2720 * ((_2719 * _2752) + _2705)) + 9.9999999392252902907785028219223e-09) + (((_2720 * _2752) + _2705) * _2719))) * _2719;
    float _4888 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2765 = (isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0))) * (_2729 / ((_2733 * _2733) * 3.141590118408203125));
    uint _2779 = _2444 + 9u;
    float _2790 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2484].w)) * _1068) * 0.949999988079071044921875);
    float _2791 = _2790 * _2790;
    float _2792 = cbLight._m0[_2484].x + _1018;
    float _2793 = cbLight._m0[_2484].y + _1019;
    float _2794 = cbLight._m0[_2484].z + _1020;
    float _2798 = inversesqrt(dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794)));
    float _2799 = _2798 * _2792;
    float _2800 = _2798 * _2793;
    float _2801 = _2798 * _2794;
    float _2802 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2484].xyz));
    float _4899 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
    float _2805 = isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0));
    float _2806 = dot(vec3(_958, _959, _960), vec3(_2799, _2800, _2801));
    float _4910 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
    float _2809 = isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0));
    float _2810 = dot(vec3(cbLight._m0[_2484].xyz), vec3(_2799, _2800, _2801));
    float _4921 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2814 = _2791 * _2791;
    float _2818 = ((_2809 * _2809) * (_2814 + (-1.0))) + 1.0;
    float _2825 = exp2(log2(1.0 - (isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0)))) * 5.0);
    float _2832 = 1.0 - _2791;
    float _2842 = (0.5 / (((_2720 * ((_2805 * _2832) + _2791)) + 9.9999999392252902907785028219223e-09) + (((_2720 * _2832) + _2791) * _2805))) * _2805;
    float _4932 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
    float _2844 = (isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0))) * (_2814 / ((_2818 * _2818) * 3.141590118408203125));
    float _2854 = (((((_2825 * _2742) + _1138) * cbLight._m0[_2779].x) * _2844) * _2467) + ((((cbLight._m0[_2691].x * _2433) * ((_2741 * _2742) + _1138)) * _2765) * _2480);
    float _2855 = (((((_2825 * _2744) + _1140) * cbLight._m0[_2779].y) * _2844) * _2467) + ((((cbLight._m0[_2691].y * _2435) * ((_2741 * _2744) + _1140)) * _2765) * _2480);
    float _2856 = (((((_2825 * _2745) + _1141) * cbLight._m0[_2779].z) * _2844) * _2467) + ((((cbLight._m0[_2691].z * _2437) * ((_2741 * _2745) + _1141)) * _2765) * _2480);
    float _2912;
    float _2914;
    float _2916;
    if (_2520)
    {
        _2912 = _2854;
        _2914 = _2855;
        _2916 = _2856;
    }
    else
    {
        uint _2918 = _2444 + 2u;
        uint _2922 = _2444 + 10u;
        float _2936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2918].w)) * _1068) * 0.949999988079071044921875);
        float _2937 = _2936 * _2936;
        float _2938 = cbLight._m0[_2918].x + _1018;
        float _2939 = cbLight._m0[_2918].y + _1019;
        float _2940 = cbLight._m0[_2918].z + _1020;
        float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
        float _2945 = _2944 * _2938;
        float _2946 = _2944 * _2939;
        float _2947 = _2944 * _2940;
        float _2948 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2918].xyz));
        float _4943 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
        float _2951 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
        float _2952 = dot(vec3(_958, _959, _960), vec3(_2945, _2946, _2947));
        float _4954 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2955 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
        float _2956 = dot(vec3(cbLight._m0[_2918].xyz), vec3(_2945, _2946, _2947));
        float _4965 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2960 = _2937 * _2937;
        float _2964 = ((_2955 * _2955) * (_2960 + (-1.0))) + 1.0;
        float _2971 = exp2(log2(1.0 - (isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0)))) * 5.0);
        float _2978 = 1.0 - _2937;
        float _2988 = (0.5 / (((_2720 * ((_2951 * _2978) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2720 * _2978) + _2937) * _2951))) * _2951;
        float _4976 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
        float _2990 = (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0))) * (_2960 / ((_2964 * _2964) * 3.141590118408203125));
        float _2991 = isnan(1.0) ? _2459 : (isnan(_2459) ? 1.0 : min(_2459, 1.0));
        _2912 = (((((_2971 * _2742) + _1138) * cbLight._m0[_2922].x) * _2990) * _2991) + _2854;
        _2914 = (((((_2971 * _2744) + _1140) * cbLight._m0[_2922].y) * _2990) * _2991) + _2855;
        _2916 = (((((_2971 * _2745) + _1141) * cbLight._m0[_2922].z) * _2990) * _2991) + _2856;
    }
    float _3022;
    float _3024;
    float _3026;
    if (_2629)
    {
        _3022 = _2912;
        _3024 = _2914;
        _3026 = _2916;
    }
    else
    {
        uint _3033 = _2444 + 3u;
        uint _3037 = _2444 + 11u;
        float _3051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3033].w)) * _1068) * 0.949999988079071044921875);
        float _3052 = _3051 * _3051;
        float _3053 = cbLight._m0[_3033].x + _1018;
        float _3054 = cbLight._m0[_3033].y + _1019;
        float _3055 = cbLight._m0[_3033].z + _1020;
        float _3059 = inversesqrt(dot(vec3(_3053, _3054, _3055), vec3(_3053, _3054, _3055)));
        float _3060 = _3059 * _3053;
        float _3061 = _3059 * _3054;
        float _3062 = _3059 * _3055;
        float _3063 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_3033].xyz));
        float _4992 = isnan(0.0) ? _3063 : (isnan(_3063) ? 0.0 : max(_3063, 0.0));
        float _3066 = isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0));
        float _3067 = dot(vec3(_958, _959, _960), vec3(_3060, _3061, _3062));
        float _5003 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
        float _3070 = isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0));
        float _3071 = dot(vec3(cbLight._m0[_3033].xyz), vec3(_3060, _3061, _3062));
        float _5014 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
        float _3075 = _3052 * _3052;
        float _3079 = ((_3070 * _3070) * (_3075 + (-1.0))) + 1.0;
        float _3086 = exp2(log2(1.0 - (isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0)))) * 5.0);
        float _3093 = 1.0 - _3052;
        float _3103 = (0.5 / (((_2720 * ((_3066 * _3093) + _3052)) + 9.9999999392252902907785028219223e-09) + (((_2720 * _3093) + _3052) * _3066))) * _3066;
        float _5025 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
        float _3105 = (isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_3075 / ((_3079 * _3079) * 3.141590118408203125));
        float _3106 = isnan(1.0) ? _2460 : (isnan(_2460) ? 1.0 : min(_2460, 1.0));
        _3022 = (((((_3086 * _2742) + _1138) * cbLight._m0[_3037].x) * _3105) * _3106) + _2912;
        _3024 = (((((_3086 * _2744) + _1140) * cbLight._m0[_3037].y) * _3105) * _3106) + _2914;
        _3026 = (((((_3086 * _2745) + _1141) * cbLight._m0[_3037].z) * _3105) * _3106) + _2916;
    }
    float _3172;
    float _3174;
    float _3176;
    float _3178;
    float _3180;
    float _3182;
    if (_2442.y == 0u)
    {
        uvec4 _3127 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3128 = _3127.x;
        uint _3139 = uint((float(_3127.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1027) / _3128))) + floor(float(uint(cbSceneParam._m0[85u].x * _1026) / _3128)));
        float _3149 = (log2(_2223 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3150 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
        uint _3153 = uint(isnan(14.0) ? _3150 : (isnan(_3150) ? 14.0 : min(_3150, 14.0)));
        uvec4 _3158 = texelFetch(g_lightClusterGridBuffer, int(((_3153 << 2u) + (_3139 << 6u)) >> 2u));
        uint _3159 = _3158.x;
        uint _3160 = _3127.z;
        float _3268;
        float _3270;
        float _3272;
        float _3274;
        float _3276;
        float _3278;
        if (((((1u << ((_3160 >> 4u) & 15u)) + 4294967295u) & _3159) == 0u) || ((_3160 & 240u) == 0u))
        {
            _3268 = 0.0;
            _3270 = 0.0;
            _3272 = 0.0;
            _3274 = 0.0;
            _3276 = 0.0;
            _3278 = 0.0;
        }
        else
        {
            float _3269;
            float _3271;
            float _3273;
            float _3275;
            float _3277;
            float _3279;
            float _3420 = 0.0;
            float _3421 = 0.0;
            float _3422 = 0.0;
            float _3423 = 0.0;
            float _3424 = 0.0;
            float _3425 = 0.0;
            uint _3426 = 0u;
            uint _3435;
            bool _3436;
            for (;;)
            {
                _3435 = texelFetch(g_lightClassification, int((((_3153 << 5u) + (_3139 << 9u)) + (_3426 << 2u)) >> 2u)).x;
                _3436 = _3435 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3436)
                {
                    frontier_phi_66_pred = _3425;
                    frontier_phi_66_pred_1 = _3424;
                    frontier_phi_66_pred_2 = _3423;
                    frontier_phi_66_pred_3 = _3422;
                    frontier_phi_66_pred_4 = _3421;
                    frontier_phi_66_pred_5 = _3420;
                }
                else
                {
                    float _3544;
                    float _3545;
                    float _3546;
                    float _3547;
                    float _3548;
                    float _3549;
                    uint _3550;
                    _3544 = _3420;
                    _3545 = _3421;
                    _3546 = _3422;
                    _3547 = _3423;
                    _3548 = _3424;
                    _3549 = _3425;
                    _3550 = _3435;
                    float _3476;
                    float _3477;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    for (;;)
                    {
                        uint _3554 = uint(findLSB(_3550)) + (_3426 << 5u);
                        uint _3551 = (_3550 + 4294967295u) & _3550;
                        uint _3556 = _3554 * 48u;
                        vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3556)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3556 + 3u)).x));
                        uint _3576 = (_3554 * 48u) + 4u;
                        vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3576)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 3u)).x));
                        uint _3595 = (_3554 * 48u) + 8u;
                        vec3 _3606 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3595)).x, texelFetch(g_PointLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3595 + 2u)).x));
                        float _3610 = _3570.x - _2221;
                        float _3611 = _3570.y - _2222;
                        float _3612 = _3570.z - _2223;
                        float _3613 = dot(vec3(_3610, _3611, _3612), vec3(_3610, _3611, _3612));
                        float _3616 = inversesqrt(_3613);
                        float _3617 = _3616 * _3610;
                        float _3618 = _3616 * _3611;
                        float _3619 = _3616 * _3612;
                        float _3620 = dot(vec3(_1049, _1052, _1055), vec3(_3617, _3618, _3619));
                        float _3625 = 1.0 - (_3613 * _3570.w);
                        float _5051 = isnan(0.0) ? _3625 : (isnan(_3625) ? 0.0 : max(_3625, 0.0));
                        float _3626 = isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0));
                        float _3627 = sqrt(_3613) * _3589.w;
                        float _3630 = 1.39999997615814208984375 / (_3627 + 1.39999997615814208984375);
                        float _3631 = _3630 * _3630;
                        float _3634 = ((1.0 - _3631) * _3620) + _3631;
                        float _3637 = _3627 * _3627;
                        float _3641 = ((isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0))) * _3626) / ((_3637 * 0.699999988079071044921875) + 1.0);
                        float _3645 = (-0.0) - _2221;
                        float _3646 = (-0.0) - _2222;
                        float _3647 = (-0.0) - _2223;
                        float _3651 = inversesqrt(dot(vec3(_3645, _3646, _3647), vec3(_3645, _3646, _3647)));
                        float _3652 = _3651 * _3645;
                        float _3653 = _3651 * _3646;
                        float _3654 = _3651 * _3647;
                        float _3661 = exp2(log2(1.0 / ((_3637 * 3.5) + 5.0)) * 0.25);
                        float _3662 = 1.0 - _1169;
                        float _3669 = sqrt(1.0 - ((1.0 - (_3662 * _3662)) * (1.0 - (_3661 * _3661))));
                        float _3670 = _3669 * _3669;
                        float _3671 = _3670 * _3670;
                        float _3672 = _3652 + _3617;
                        float _3673 = _3653 + _3618;
                        float _3674 = _3654 + _3619;
                        float _3678 = inversesqrt(dot(vec3(_3672, _3673, _3674), vec3(_3672, _3673, _3674)));
                        float _3682 = dot(vec3(_1049, _1052, _1055), vec3(_3652, _3653, _3654));
                        float _5067 = isnan(0.0) ? _3682 : (isnan(_3682) ? 0.0 : max(_3682, 0.0));
                        float _3685 = isnan(1.0) ? _5067 : (isnan(_5067) ? 1.0 : min(_5067, 1.0));
                        float _3686 = dot(vec3(_1049, _1052, _1055), vec3(_3678 * _3672, _3678 * _3673, _3678 * _3674));
                        float _5078 = isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0));
                        float _3689 = isnan(1.0) ? _5078 : (isnan(_5078) ? 1.0 : min(_5078, 1.0));
                        float _3693 = ((_3689 * _3689) * (_3671 + (-1.0))) + 1.0;
                        float _3694 = _3630 * _3670;
                        float _3695 = _3694 * _3694;
                        float _3698 = ((1.0 - _3695) * _3620) + _3695;
                        float _5089 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                        float _3699 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3700 = 1.0 - _3670;
                        float _3710 = (0.5 / (((_3699 * ((_3685 * _3700) + _3670)) + 9.9999999392252902907785028219223e-09) + (((_3699 * _3700) + _3670) * _3685))) * _3699;
                        float _5100 = isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0));
                        float _3721 = (((_3671 * 3.1415927410125732421875) * (isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0)))) / ((_3693 * _3693) * ((_3637 * 2.1991131305694580078125) + 3.141590118408203125))) * _3626;
                        _3479 = (_3641 * _3589.x) + _3547;
                        _3480 = (_3641 * _3589.y) + _3548;
                        _3481 = (_3641 * _3589.z) + _3549;
                        _3476 = (_3721 * _3606.x) + _3544;
                        _3477 = (_3721 * _3606.y) + _3545;
                        _3478 = (_3721 * _3606.z) + _3546;
                        if (_3551 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3544 = _3476;
                            _3545 = _3477;
                            _3546 = _3478;
                            _3547 = _3479;
                            _3548 = _3480;
                            _3549 = _3481;
                            _3550 = _3551;
                        }
                    }
                    frontier_phi_66_pred = _3481;
                    frontier_phi_66_pred_1 = _3480;
                    frontier_phi_66_pred_2 = _3479;
                    frontier_phi_66_pred_3 = _3478;
                    frontier_phi_66_pred_4 = _3477;
                    frontier_phi_66_pred_5 = _3476;
                }
                _3279 = frontier_phi_66_pred;
                _3277 = frontier_phi_66_pred_1;
                _3275 = frontier_phi_66_pred_2;
                _3273 = frontier_phi_66_pred_3;
                _3271 = frontier_phi_66_pred_4;
                _3269 = frontier_phi_66_pred_5;
                uint _3427 = _3426 + 1u;
                if (_3427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3420 = _3269;
                    _3421 = _3271;
                    _3422 = _3273;
                    _3423 = _3275;
                    _3424 = _3277;
                    _3425 = _3279;
                    _3426 = _3427;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3268 = _3269;
            _3270 = _3271;
            _3272 = _3273;
            _3274 = _3275;
            _3276 = _3277;
            _3278 = _3279;
        }
        uvec4 _3282 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3283 = _3282.z;
        uint _3285 = (_3283 >> 8u) & 15u;
        float _3388;
        float _3390;
        float _3392;
        float _3394;
        float _3396;
        float _3398;
        if (((4294967295u << _3285) & _3159) == 0u)
        {
            _3388 = _3268;
            _3390 = _3270;
            _3392 = _3272;
            _3394 = _3274;
            _3396 = _3276;
            _3398 = _3278;
        }
        else
        {
            float _3413 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
            float _3414 = _3413 * _2221;
            float _3415 = _3413 * _2222;
            float _3416 = _3413 * _2223;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3285 < ((_3283 >> 12u) & 15u))
            {
                float _3389;
                float _3391;
                float _3393;
                float _3395;
                float _3397;
                float _3399;
                float _3527 = _3268;
                float _3528 = _3270;
                float _3529 = _3272;
                float _3530 = _3274;
                float _3531 = _3276;
                float _3532 = _3278;
                uint _3533 = _3285;
                uint _3542;
                bool _3543;
                for (;;)
                {
                    _3542 = texelFetch(g_lightClassification, int((((_3153 << 5u) + (_3139 << 9u)) + (_3533 << 2u)) >> 2u)).x;
                    _3543 = _3542 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3543)
                    {
                        frontier_phi_72_pred = _3532;
                        frontier_phi_72_pred_1 = _3531;
                        frontier_phi_72_pred_2 = _3530;
                        frontier_phi_72_pred_3 = _3529;
                        frontier_phi_72_pred_4 = _3528;
                        frontier_phi_72_pred_5 = _3527;
                    }
                    else
                    {
                        float _3726;
                        float _3727;
                        float _3728;
                        float _3729;
                        float _3730;
                        float _3731;
                        float _4020;
                        float _4021;
                        float _4022;
                        float _4023;
                        float _4024;
                        float _4025;
                        float _3739 = _3527;
                        float _3740 = _3528;
                        float _3741 = _3529;
                        float _3742 = _3530;
                        float _3743 = _3531;
                        float _3744 = _3532;
                        uint _3745 = _3542;
                        uint _3746;
                        vec4 _3771;
                        float _3772;
                        vec4 _3787;
                        vec3 _3799;
                        vec4 _3815;
                        vec4 _3830;
                        float _3876;
                        bool _3877;
                        for (;;)
                        {
                            uint _3756 = ((_3533 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3745));
                            _3746 = (_3745 + 4294967295u) & _3745;
                            uint _3758 = _3756 * 40u;
                            _3771 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3758)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3758 + 3u)).x));
                            _3772 = _3771.w;
                            uint _3774 = (_3756 * 40u) + 4u;
                            _3787 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3774)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3774 + 3u)).x));
                            uint _3789 = (_3756 * 40u) + 8u;
                            _3799 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3789 + 2u)).x));
                            uint _3802 = (_3756 * 40u) + 16u;
                            _3815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3802 + 3u)).x));
                            uint _3817 = (_3756 * 40u) + 20u;
                            _3830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3817 + 3u)).x));
                            uint _3832 = (_3756 * 40u) + 24u;
                            vec4 _3845 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3832)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3832 + 3u)).x));
                            uint _3851 = (_3756 * 40u) + 28u;
                            vec4 _3864 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3851 + 3u)).x));
                            _3876 = fma(_2223, _3864.z, fma(_2222, _3864.y, _3864.x * _2221)) + _3864.w;
                            _3877 = !((fma(_2223, _3845.z, fma(_2222, _3845.y, _3845.x * _2221)) + _3845.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3877)
                            {
                                float _3904 = _3771.x - _2221;
                                float _3905 = _3771.y - _2222;
                                float _3906 = _3771.z - _2223;
                                float _3907 = dot(vec3(_3904, _3905, _3906), vec3(_3904, _3905, _3906));
                                float _3910 = inversesqrt(_3907);
                                float _3911 = _3910 * _3904;
                                float _3912 = _3910 * _3905;
                                float _3913 = _3910 * _3906;
                                float _3917 = 1.0 - (_3907 / (_3772 * _3772));
                                float _5111 = isnan(0.0) ? _3917 : (isnan(_3917) ? 0.0 : max(_3917, 0.0));
                                float _3918 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                                float _3922 = sqrt(_3907) * _3787.w;
                                float _3924 = 1.39999997615814208984375 / (_3922 + 1.39999997615814208984375);
                                float _3925 = _3924 * _3924;
                                float _3928 = ((1.0 - _3925) * dot(vec3(_3911, _3912, _3913), vec3(_1049, _1052, _1055))) + _3925;
                                float _3931 = _3922 * _3922;
                                float _3935 = (fma(_2223, _3815.z, fma(_2222, _3815.y, _3815.x * _2221)) + _3815.w) / _3876;
                                float _3936 = (fma(_2223, _3830.z, fma(_2222, _3830.y, _3830.x * _2221)) + _3830.w) / _3876;
                                float _3940 = 1.0 - dot(vec2(_3935, _3936), vec2(_3935, _3936));
                                float _5127 = isnan(0.0) ? _3940 : (isnan(_3940) ? 0.0 : max(_3940, 0.0));
                                float _3941 = isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0));
                                float _3942 = _3941 * (((isnan(0.0) ? _3928 : (isnan(_3928) ? 0.0 : max(_3928, 0.0))) * _3918) / ((_3931 * 0.699999988079071044921875) + 1.0));
                                float _3954 = exp2(log2(1.0 / ((_3931 * 3.5) + 5.0)) * 0.25);
                                float _3955 = 1.0 - _1169;
                                float _3962 = sqrt(1.0 - ((1.0 - (_3955 * _3955)) * (1.0 - (_3954 * _3954))));
                                float _3963 = _3962 * _3962;
                                float _3964 = _3963 * _3963;
                                float _3965 = _3911 - _3414;
                                float _3966 = _3912 - _3415;
                                float _3967 = _3913 - _3416;
                                float _3971 = inversesqrt(dot(vec3(_3965, _3966, _3967), vec3(_3965, _3966, _3967)));
                                float _3975 = dot(vec3(_1049, _1052, _1055), vec3((-0.0) - _3414, (-0.0) - _3415, (-0.0) - _3416));
                                float _5138 = isnan(0.0) ? _3975 : (isnan(_3975) ? 0.0 : max(_3975, 0.0));
                                float _3978 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
                                float _3979 = dot(vec3(_1049, _1052, _1055), vec3(_3971 * _3965, _3971 * _3966, _3971 * _3967));
                                float _5149 = isnan(0.0) ? _3979 : (isnan(_3979) ? 0.0 : max(_3979, 0.0));
                                float _3982 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3986 = ((_3982 * _3982) * (_3964 + (-1.0))) + 1.0;
                                float _3987 = _3924 * _3963;
                                float _3988 = _3987 * _3987;
                                float _3994 = ((1.0 - _3988) * dot(vec3(_1049, _1052, _1055), vec3(_3911, _3912, _3913))) + _3988;
                                float _5160 = isnan(0.0) ? _3994 : (isnan(_3994) ? 0.0 : max(_3994, 0.0));
                                float _3995 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3996 = 1.0 - _3963;
                                float _4006 = (0.5 / (((_3995 * ((_3978 * _3996) + _3963)) + 9.9999999392252902907785028219223e-09) + (((_3995 * _3996) + _3963) * _3978))) * _3995;
                                float _5171 = isnan(0.0) ? _4006 : (isnan(_4006) ? 0.0 : max(_4006, 0.0));
                                float _4016 = (_3941 * _3918) * (((_3964 * 3.1415927410125732421875) * (isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0)))) / ((_3986 * _3986) * ((_3931 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3942 * _3787.y;
                                frontier_phi_78_pred_1 = _3942 * _3787.x;
                                frontier_phi_78_pred_2 = _4016 * _3799.z;
                                frontier_phi_78_pred_3 = _4016 * _3799.y;
                                frontier_phi_78_pred_4 = _4016 * _3799.x;
                                frontier_phi_78_pred_5 = _3942 * _3787.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _4024 = frontier_phi_78_pred;
                            _4023 = frontier_phi_78_pred_1;
                            _4022 = frontier_phi_78_pred_2;
                            _4021 = frontier_phi_78_pred_3;
                            _4020 = frontier_phi_78_pred_4;
                            _4025 = frontier_phi_78_pred_5;
                            _3729 = _4023 + _3742;
                            _3730 = _4024 + _3743;
                            _3731 = _4025 + _3744;
                            _3726 = _4020 + _3739;
                            _3727 = _4021 + _3740;
                            _3728 = _4022 + _3741;
                            if (_3746 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3739 = _3726;
                                _3740 = _3727;
                                _3741 = _3728;
                                _3742 = _3729;
                                _3743 = _3730;
                                _3744 = _3731;
                                _3745 = _3746;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3731;
                        frontier_phi_72_pred_1 = _3730;
                        frontier_phi_72_pred_2 = _3729;
                        frontier_phi_72_pred_3 = _3728;
                        frontier_phi_72_pred_4 = _3727;
                        frontier_phi_72_pred_5 = _3726;
                    }
                    _3399 = frontier_phi_72_pred;
                    _3397 = frontier_phi_72_pred_1;
                    _3395 = frontier_phi_72_pred_2;
                    _3393 = frontier_phi_72_pred_3;
                    _3391 = frontier_phi_72_pred_4;
                    _3389 = frontier_phi_72_pred_5;
                    uint _3534 = _3533 + 1u;
                    if (_3534 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3527 = _3389;
                        _3528 = _3391;
                        _3529 = _3393;
                        _3530 = _3395;
                        _3531 = _3397;
                        _3532 = _3399;
                        _3533 = _3534;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3399;
                frontier_phi_60_61_ladder_1 = _3397;
                frontier_phi_60_61_ladder_2 = _3393;
                frontier_phi_60_61_ladder_3 = _3391;
                frontier_phi_60_61_ladder_4 = _3389;
                frontier_phi_60_61_ladder_5 = _3395;
            }
            else
            {
                frontier_phi_60_61_ladder = _3278;
                frontier_phi_60_61_ladder_1 = _3276;
                frontier_phi_60_61_ladder_2 = _3272;
                frontier_phi_60_61_ladder_3 = _3270;
                frontier_phi_60_61_ladder_4 = _3268;
                frontier_phi_60_61_ladder_5 = _3274;
            }
            _3388 = frontier_phi_60_61_ladder_4;
            _3390 = frontier_phi_60_61_ladder_3;
            _3392 = frontier_phi_60_61_ladder_2;
            _3394 = frontier_phi_60_61_ladder_5;
            _3396 = frontier_phi_60_61_ladder_1;
            _3398 = frontier_phi_60_61_ladder;
        }
        float _3403 = isnan(1.0) ? _1153 : (isnan(_1153) ? 1.0 : min(_1153, 1.0));
        _3172 = (_3403 * _3394) + _2684;
        _3174 = (_3403 * _3396) + _2686;
        _3176 = (_3403 * _3398) + _2688;
        _3178 = ((_3388 * _1138) * _3403) + _3022;
        _3180 = ((_3390 * _1140) * _3403) + _3024;
        _3182 = ((_3392 * _1141) * _3403) + _3026;
    }
    else
    {
        _3172 = _2684;
        _3174 = _2686;
        _3176 = _2688;
        _3178 = _3022;
        _3180 = _3024;
        _3182 = _3026;
    }
    uint _3188 = _1082 + uint(cbMatDynParam._m0[0u].w);
    float _3194 = (((((cbMtdParam._m0[22u].x * _862.x) * cbMtdParam._m0[32u].x) * _883) + _634) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3188].x;
    float _3195 = (((((cbMtdParam._m0[22u].y * _862.y) * cbMtdParam._m0[32u].x) * _883) + _635) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3188].y;
    float _3196 = (((((cbMtdParam._m0[22u].z * _862.z) * cbMtdParam._m0[32u].x) * _883) + _636) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3188].z;
    float _5187 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _5198 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _5209 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _3213 = (((isnan(1.0) ? _5187 : (isnan(_5187) ? 1.0 : min(_5187, 1.0))) * (_3172 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1153))) + ((_3178 + ((isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))) * _1950)) * cbPerFrame._m0[3u].x)) + _3194;
    float _3215 = (_3195 + ((_3180 + ((isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0))) * _1950)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5198 : (isnan(_5198) ? 1.0 : min(_5198, 1.0))) * (_3174 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1153)));
    float _3217 = (_3196 + ((_3182 + ((isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0))) * _1950)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_3176 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1153)));
    float _5235 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3230 = isnan(1.0) ? _5235 : (isnan(_5235) ? 1.0 : min(_5235, 1.0));
    uint _3231 = _1081 + 6u;
    float _3239 = _1026 / cbSceneParam._m0[86u].x;
    float _3240 = _1027 / cbSceneParam._m0[86u].y;
    vec4 _3254 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3239, _3240, (log2((isnan(cbSceneParam._m0[77u].w) ? _981 : (isnan(_981) ? cbSceneParam._m0[77u].w : min(_981, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3256 = _3254.x;
    float _3257 = _3254.y;
    float _3258 = _3254.z;
    float _3259 = _3254.w;
    float _3330;
    float _3332;
    float _3334;
    float _3336;
    if (_981 > cbSceneParam._m0[78u].w)
    {
        float _3293 = isnan(_981) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _981 : min(cbSceneParam._m0[80u].w, _981));
        float _3294 = _3293 / _981;
        float _3305 = _3294 * _1011;
        float _3306 = _1012 * _3294;
        float _3307 = (-0.0) - _3306;
        float _3308 = _3294 * _1013;
        float _3310 = (cbSceneParam._m0[77u].w * _3307) / _3293;
        float _3311 = _3310 + cbSceneParam._m0[79u].w;
        float _3312 = cbSceneParam._m0[79u].w - _3306;
        float _3318 = sqrt(((_3305 * _3305) + (_3306 * _3306)) + (_3308 * _3308));
        float _3321 = (1.0 - (cbSceneParam._m0[77u].w / _3293)) * _3318;
        float _3326 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3328 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3489;
        if (abs((_3307 - _3310) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3489 = ((((_3311 > 0.0) ? exp2(_3326 * _3311) : (2.0 - exp2(_3328 * _3311))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3321;
        }
        else
        {
            float _3449 = 1.0 / cbSceneParam._m0[80u].x;
            float _3450 = isnan(_3312) ? _3311 : (isnan(_3311) ? _3312 : max(_3311, _3312));
            float _3451 = isnan(_3312) ? _3311 : (isnan(_3311) ? _3312 : min(_3311, _3312));
            float _3460 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : min(_3450, 0.0));
            float _3461 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : min(_3451, 0.0));
            _3489 = ((abs(_3318 / _3307) * cbSceneParam._m0[80u].y) * ((((_3460 - _3461) * 2.0) - ((exp2(_3326 * (isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0)))) - exp2(_3326 * (isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0))))) * _3449)) - ((exp2(_3328 * _3460) - exp2(_3328 * _3461)) * _3449))) + (_3321 * cbSceneParam._m0[80u].z);
        }
        vec4 _3491 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3239, _3240, 1.0), 0.0);
        float _3500 = exp2((_3489 * (-1.44269502162933349609375)) * (1.0 - _3491.w));
        float _3501 = log2(_3500);
        float _3517 = log2(_3259);
        _3330 = (exp2(_3517 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3501 * cbSceneParam._m0[78u].x)) * _3491.x) / cbSceneParam._m0[78u].x)) + _3256;
        _3332 = (exp2(_3517 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3501 * cbSceneParam._m0[78u].y)) * _3491.y) / cbSceneParam._m0[78u].y)) + _3257;
        _3334 = (exp2(_3517 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3501 * cbSceneParam._m0[78u].z)) * _3491.z) / cbSceneParam._m0[78u].z)) + _3258;
        _3336 = _3500 * _3259;
    }
    else
    {
        _3330 = _3256;
        _3332 = _3257;
        _3334 = _3258;
        _3336 = _3259;
    }
    float _3347 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3348 = _3347 == 3.0;
    float _3349 = log2(_3336);
    float _3353 = exp2(_3349 * cbSceneParam._m0[78u].x);
    float _3354 = exp2(_3349 * cbSceneParam._m0[78u].y);
    float _3355 = exp2(_3349 * cbSceneParam._m0[78u].z);
    float _3356 = _3353 * (isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0)));
    float _3357 = _3354 * (isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0)));
    float _3358 = _3355 * (isnan(0.0) ? _3217 : (isnan(_3217) ? 0.0 : max(_3217, 0.0)));
    float _3367 = (_3347 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3367 * (_3348 ? _3356 : (_3356 + (cbSceneParam._m0[72u].w * _3330)));
    SV_Target.y = _3367 * (_3348 ? _3357 : (_3357 + (cbSceneParam._m0[72u].w * _3332)));
    SV_Target.z = _3367 * (_3348 ? _3358 : (_3358 + (cbSceneParam._m0[72u].w * _3334)));
    SV_Target.w = cbInstanceData._m0[_3231].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _3194) * _3230) * _3353) * _3367;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _3195) * _3230) * _3354) * _3367;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _3196) * _3230) * _3355) * _3367;
    SV_Target_1.w = cbInstanceData._m0[_3231].w;
}


