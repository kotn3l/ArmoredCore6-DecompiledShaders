#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1750;
float _4183;
float _4184;
float _4185;
float _4186;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _238 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _239 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _240 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _246 = inversesqrt(dot(vec3(_238, _239, _240), vec3(_238, _239, _240)));
    float _253 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _260 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _282 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _287 = _282.z;
    float _288 = _282.w;
    vec4 _310 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _315 = _310.w;
    float _327 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _287) * exp2(log2(1.0 - _315) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _328 = isnan(0.0) ? _327 : (isnan(_327) ? 0.0 : max(_327, 0.0));
    float _329 = isnan(1.0) ? _328 : (isnan(_328) ? 1.0 : min(_328, 1.0));
    vec4 _343 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _353 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _361 = (_353 - (((_343.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _353))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4205 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _362 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _364 = _329 - (_362 * _329);
    float _365 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    vec4 _379 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _382 = _379.y;
    float _383 = _382 * (isnan(1.0) ? _365 : (isnan(_365) ? 1.0 : min(_365, 1.0)));
    float _392 = exp2(log2(cbMtdParam._m0[32u].w * _315) * cbMtdParam._m0[31u].z);
    float _394 = _392 - (_362 * _392);
    float _395 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _396 = isnan(1.0) ? _395 : (isnan(_395) ? 1.0 : min(_395, 1.0));
    float _407 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_288) * 4.5));
    float _416 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _287) * _407)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _417 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _418 = isnan(1.0) ? _417 : (isnan(_417) ? 1.0 : min(_417, 1.0));
    float _429 = exp2(log2((1.0 - (((_407 * _407) * _287) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _430 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _434 = (((isnan(1.0) ? _430 : (isnan(_430) ? 1.0 : min(_430, 1.0))) - _288) * _382) + _288;
    vec4 _446 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _211[6];
    float _212[6];
    float _213[6];
    _211[0u] = cbMtdParam._m0[12u].x;
    _212[0u] = cbMtdParam._m0[12u].y;
    _213[0u] = cbMtdParam._m0[12u].z;
    _211[1u] = cbMtdParam._m0[13u].x;
    _212[1u] = cbMtdParam._m0[13u].y;
    _213[1u] = cbMtdParam._m0[13u].z;
    _211[2u] = cbMtdParam._m0[14u].x;
    _212[2u] = cbMtdParam._m0[14u].y;
    _213[2u] = cbMtdParam._m0[14u].z;
    _211[3u] = cbMtdParam._m0[15u].x;
    _212[3u] = cbMtdParam._m0[15u].y;
    _213[3u] = cbMtdParam._m0[15u].z;
    _211[4u] = cbMtdParam._m0[16u].x;
    _212[4u] = cbMtdParam._m0[16u].y;
    _213[4u] = cbMtdParam._m0[16u].z;
    _211[5u] = cbMtdParam._m0[11u].x;
    _212[5u] = cbMtdParam._m0[11u].y;
    _213[5u] = cbMtdParam._m0[11u].z;
    float _514 = (_379.x + (-0.02500000037252902984619140625)) * 8.0;
    float _516 = roundEven(_514);
    float _517 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    uint _520 = uint(int(isnan(5.0) ? _517 : (isnan(_517) ? 5.0 : min(_517, 5.0))));
    float _207[6];
    float _208[6];
    float _209[6];
    _207[0u] = 1.0;
    _208[0u] = 1.0;
    _209[0u] = 1.0;
    _207[1u] = cbMtdParam._m0[23u].x;
    _208[1u] = cbMtdParam._m0[23u].y;
    _209[1u] = cbMtdParam._m0[23u].z;
    _207[2u] = cbMtdParam._m0[21u].x;
    _208[2u] = cbMtdParam._m0[21u].y;
    _209[2u] = cbMtdParam._m0[21u].z;
    _207[3u] = cbMtdParam._m0[19u].x;
    _208[3u] = cbMtdParam._m0[19u].y;
    _209[3u] = cbMtdParam._m0[19u].z;
    _207[4u] = cbMtdParam._m0[18u].x;
    _208[4u] = cbMtdParam._m0[18u].y;
    _209[4u] = cbMtdParam._m0[18u].z;
    _207[5u] = cbMtdParam._m0[17u].x;
    _208[5u] = cbMtdParam._m0[17u].y;
    _209[5u] = cbMtdParam._m0[17u].z;
    float _609 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _610 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    uint _612 = uint(int(isnan(5.0) ? _610 : (isnan(_610) ? 5.0 : min(_610, 5.0))));
    float _210[6];
    _210[0u] = 1.0;
    _210[1u] = cbMtdParam._m0[23u].w;
    _210[2u] = cbMtdParam._m0[21u].w;
    _210[3u] = cbMtdParam._m0[19u].w;
    _210[4u] = cbMtdParam._m0[18u].w;
    _210[5u] = cbMtdParam._m0[17u].w;
    float _649 = ((((_211[_520] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_207[_612] - _211[_520])) * _210[_520])) * _382) + cbMtdParam._m0[10u].x) * _446.x;
    float _650 = ((((_212[_520] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_208[_612] - _212[_520])) * _210[_520])) * _382) + cbMtdParam._m0[10u].y) * _446.y;
    float _651 = ((((_213[_520] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_209[_612] - _213[_520])) * _210[_520])) * _382) + cbMtdParam._m0[10u].z) * _446.z;
    vec4 _663 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _674 = cbMtdParam._m0[9u].x * _663.x;
    float _675 = cbMtdParam._m0[9u].y * _663.y;
    float _676 = cbMtdParam._m0[9u].z * _663.z;
    float _683 = ((_674 - _649) * _434) + _649;
    float _684 = ((_675 - _650) * _434) + _650;
    float _685 = ((_676 - _651) * _434) + _651;
    vec4 _697 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _717 = (((cbMtdParam._m0[20u].x * _697.x) - _683) * _418) + _683;
    float _718 = (((cbMtdParam._m0[20u].y * _697.y) - _684) * _418) + _684;
    float _719 = (((cbMtdParam._m0[20u].z * _697.z) - _685) * _418) + _685;
    vec4 _731 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _751 = (((cbMtdParam._m0[29u].x * _731.x) - _717) * _396) + _717;
    float _752 = (((cbMtdParam._m0[29u].y * _731.y) - _718) * _396) + _718;
    float _753 = (((cbMtdParam._m0[29u].z * _731.z) - _719) * _396) + _719;
    float _204[6];
    float _205[6];
    float _206[6];
    _204[0u] = cbMtdParam._m0[30u].x;
    _205[0u] = cbMtdParam._m0[30u].y;
    _206[0u] = cbMtdParam._m0[30u].z;
    _204[1u] = cbMtdParam._m0[28u].x;
    _205[1u] = cbMtdParam._m0[28u].y;
    _206[1u] = cbMtdParam._m0[28u].z;
    _204[2u] = cbMtdParam._m0[27u].x;
    _205[2u] = cbMtdParam._m0[27u].y;
    _206[2u] = cbMtdParam._m0[27u].z;
    _204[3u] = cbMtdParam._m0[26u].x;
    _205[3u] = cbMtdParam._m0[26u].y;
    _206[3u] = cbMtdParam._m0[26u].z;
    _204[4u] = cbMtdParam._m0[25u].x;
    _205[4u] = cbMtdParam._m0[25u].y;
    _206[4u] = cbMtdParam._m0[25u].z;
    _204[5u] = cbMtdParam._m0[24u].x;
    _205[5u] = cbMtdParam._m0[24u].y;
    _206[5u] = cbMtdParam._m0[24u].z;
    float _826 = _204[_520] * _382;
    float _827 = _205[_520] * _382;
    float _828 = _206[_520] * _382;
    float _829 = _826 + ((_310.x * 4.5) * (((_674 - _751) * _383) + _751));
    float _830 = _827 + ((_310.y * 4.5) * (((_675 - _752) * _383) + _752));
    float _831 = _828 + ((_310.z * 4.5) * (((_676 - _753) * _383) + _753));
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[37u].w;
    _200[0u] = cbMtdParam._m0[38u].x;
    _199[1u] = cbMtdParam._m0[39u].w;
    _200[1u] = cbMtdParam._m0[40u].x;
    _199[2u] = cbMtdParam._m0[40u].y;
    _200[2u] = cbMtdParam._m0[40u].z;
    _199[3u] = cbMtdParam._m0[40u].w;
    _200[3u] = cbMtdParam._m0[41u].x;
    _199[4u] = cbMtdParam._m0[41u].y;
    _200[4u] = cbMtdParam._m0[41u].z;
    float _864 = roundEven(5.0 - _514);
    float _865 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _866 = isnan(4.0) ? _865 : (isnan(_865) ? 4.0 : min(_865, 4.0));
    float _868 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    uint _870 = uint(int(isnan(4.0) ? _868 : (isnan(_868) ? 4.0 : min(_868, 4.0))));
    float _879 = ((cbMtdParam._m0[42u].z - _200[_870]) * _434) + _200[_870];
    float _887 = ((cbMtdParam._m0[43u].x - _879) * _418) + _879;
    float _892 = ((cbMtdParam._m0[43u].z - _887) * _396) + _887;
    float _897 = ((cbMtdParam._m0[39u].z - _892) * _383) + _892;
    vec4 _913 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _915 = _913.x;
    float _916 = _913.y;
    float _918 = _913.z + _199[_870];
    vec4 _930 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _938 = (((cbMtdParam._m0[42u].y - _918) + _930.z) * _434) + _918;
    vec4 _950 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _958 = (((cbMtdParam._m0[42u].w - _938) + _950.z) * _418) + _938;
    float _964 = ((((_287 * 2.0) * _958) - _958) * cbMtdParam._m0[34u].x) + _958;
    vec4 _976 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _984 = (((_976.z + cbMtdParam._m0[43u].y) - _964) * _396) + _964;
    float _988 = (((cbMtdParam._m0[39u].y + _343.z) - _984) * _383) + _984;
    float _1019 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1023 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1050 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1019 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1023 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1067 = (-0.0) - ((_1023 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1071 = (_1023 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1072 = isnan(_1071) ? _1067 : (isnan(_1067) ? _1071 : min(_1067, _1071));
    float _4301 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
    float _1073 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
    float _1099 = ((_930.x - _915) * _434) + _915;
    float _1100 = ((_930.y - _916) * _434) + _916;
    float _1105 = ((_950.x - _1099) * _418) + _1099;
    float _1106 = ((_950.y - _1100) * _418) + _1100;
    float _1111 = ((_976.x - _1105) * _396) + _1105;
    float _1112 = ((_976.y - _1106) * _396) + _1106;
    float _1121 = ((((_343.x - _1111) * _383) + _1111) * 2.0) + (-1.0);
    float _1122 = ((((_343.y - _1112) * _383) + _1112) * 2.0) + (-1.0);
    float _1123 = dot(vec2(_1121, _1122), vec2(_1121, _1122));
    float _4312 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
    float _1128 = sqrt(1.0 - (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))));
    float _1131 = (cbMtdParam._m0[34u].z * ((_282.x * 2.0) + (-1.0))) + _1121;
    float _1132 = (cbMtdParam._m0[34u].z * ((_282.y * 2.0) + (-1.0))) + _1122;
    float _1135 = fma(_1128, _253 * NORMAL.x, fma(_1132, _260 * TANGENT.x, (_246 * _238) * _1131));
    float _1138 = fma(_1128, _253 * NORMAL.y, fma(_1132, _260 * TANGENT.y, (_246 * _239) * _1131));
    float _1141 = fma(_1128, _253 * NORMAL.z, fma(_1132, _260 * TANGENT.z, (_246 * _240) * _1131));
    float _1145 = inversesqrt(dot(vec3(_1135, _1138, _1141), vec3(_1135, _1138, _1141)));
    float _1146 = _1145 * _1135;
    float _1147 = _1145 * _1138;
    float _1148 = _1145 * _1141;
    float _4323 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
    float _1149 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    float _4334 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4345 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4356 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4367 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _1153 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _1169 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1189 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1199 = cbSceneParam._m0[71u].x - (_1019 / _1189);
    float _1200 = cbSceneParam._m0[71u].y - (_1023 / _1189);
    float _1201 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1189);
    float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
    float _1206 = _1199 * _1205;
    float _1207 = _1200 * _1205;
    float _1208 = _1201 * _1205;
    vec4 _1213 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1215 = _1213.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1433 = sqrt(((_1199 * _1199) + (_1200 * _1200)) + (_1201 * _1201));
        float _1439 = (cbMatDynParam._m0[5u].x * _1433) + cbMatDynParam._m0[5u].y;
        float _4378 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1440 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
        float _1444 = (cbMatDynParam._m0[5u].z * _1433) + cbMatDynParam._m0[5u].w;
        float _4389 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) - _1440)) + _1440) < ((_1215 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1226 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1227 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1229 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1231 = _1229.w;
    float _1249 = fma(_1148, cbSceneParam._m0[5u].z, fma(_1147, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1146));
    float _1252 = fma(_1148, cbSceneParam._m0[6u].z, fma(_1147, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1146));
    float _1255 = fma(_1148, cbSceneParam._m0[7u].z, fma(_1147, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1146));
    vec4 _1257 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1268 = (((_1257.y - _1149) + (_1257.w * _1149)) * cbMtdParam._m0[3u].x) + _1149;
    uint _1281 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1282 = _1281 + 9u;
    uint _1283 = _1282 + uint(cbMatDynParam._m0[0u].w);
    float _1289 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * cbInstanceData._m0[_1283].x;
    float _1290 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) * cbInstanceData._m0[_1283].y;
    float _1291 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0)))) * cbInstanceData._m0[_1283].z;
    float _4400 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
    float _1292 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _4411 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
    float _1293 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _4422 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
    float _1294 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    vec4 _1295 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1300 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1311 = (((_1300.x - _1153) + (_1300.w * _1153)) * cbMtdParam._m0[3u].x) + _1153;
    float _1324 = (cbMtdParam._m0[3u].x * (((_1292 * _1231) - _1292) + _1295.x)) + _1292;
    float _1325 = (cbMtdParam._m0[3u].x * (((_1293 * _1231) - _1293) + _1295.y)) + _1293;
    float _1326 = (cbMtdParam._m0[3u].x * (((_1294 * _1231) - _1294) + _1295.z)) + _1294;
    float _1327 = 1.0 - _1311;
    float _1328 = _1327 * _1324;
    float _1329 = _1327 * _1325;
    float _1330 = _1327 * _1326;
    float _1335 = (_1324 + (-0.039999999105930328369140625)) * _1311;
    float _1336 = (_1325 + (-0.039999999105930328369140625)) * _1311;
    float _1337 = (_1326 + (-0.039999999105930328369140625)) * _1311;
    float _1338 = _1335 + 0.039999999105930328369140625;
    float _1340 = _1336 + 0.039999999105930328369140625;
    float _1341 = _1337 + 0.039999999105930328369140625;
    vec4 _1350 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1226, cbSceneParam._m0[86u].y * _1227));
    float _1353 = _1350.x * TEXCOORD_5.w;
    float _1354 = dot(vec3(_1146, _1147, _1148), vec3(_1206, _1207, _1208));
    float _1357 = _1354 * 2.0;
    float _1361 = (_1357 * _1146) - _1206;
    float _1362 = (_1357 * _1147) - _1207;
    float _1363 = (_1357 * _1148) - _1208;
    float _1367 = abs(dot(vec3(_1206, _1207, _1208), vec3(_1146, _1147, _1148)));
    float _4433 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
    float _1369 = sqrt(_1268);
    float _1380 = exp2((_1369 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1369 * 3.0));
    float _1386 = (1.0 - _1380) * ((_1369 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1387 = _1380 * _1369;
    float _1415 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1419 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1423 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1749;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1476 = fma(_1423, cbModelParam._m0[26u].z, fma(_1419, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1415));
        float _1480 = fma(_1423, cbModelParam._m0[27u].z, fma(_1419, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1415));
        float _1484 = fma(_1423, cbModelParam._m0[28u].z, fma(_1419, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1415));
        float _1508 = _1415 + _1146;
        float _1509 = _1419 + _1147;
        float _1510 = _1423 + _1148;
        float _1520 = fma(_1510, cbModelParam._m0[26u].z, fma(_1509, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1508)) - _1476;
        float _1521 = fma(_1510, cbModelParam._m0[27u].z, fma(_1509, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1508)) - _1480;
        float _1522 = fma(_1510, cbModelParam._m0[28u].z, fma(_1509, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1508)) - _1484;
        float _1526 = inversesqrt(dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522)));
        float _1538 = ((_1526 * _1520) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1476 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1539 = ((_1526 * _1521) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1480 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1540 = ((_1526 * _1522) / cbModelParam._m0[34u].z) + ((((((_1484 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1543 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1550 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1557 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        vec4 _1564 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1538, _1539, _1540), 0.0);
        float _1577 = exp2((_1543.w + (-0.5)) * 20.0) * 2.0;
        float _1578 = _1577 * (_1543.x + (-0.5));
        float _1579 = _1577 * (_1543.y + (-0.5));
        float _1580 = _1577 * (_1543.z + (-0.5));
        float _1587 = exp2((_1550.w + (-0.5)) * 20.0) * 2.0;
        float _1588 = _1587 * (_1550.x + (-0.5));
        float _1589 = _1587 * (_1550.y + (-0.5));
        float _1590 = _1587 * (_1550.z + (-0.5));
        float _1597 = exp2((_1557.w + (-0.5)) * 20.0) * 2.0;
        float _1598 = _1597 * (_1557.x + (-0.5));
        float _1599 = _1597 * (_1557.y + (-0.5));
        float _1600 = _1597 * (_1557.z + (-0.5));
        float _1607 = exp2((_1564.w + (-0.5)) * 20.0) * 2.0;
        float _1608 = _1607 * (_1564.x + (-0.5));
        float _1609 = _1607 * (_1564.y + (-0.5));
        float _1610 = _1607 * (_1564.z + (-0.5));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1613 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1614 = _1578 * 0.5;
        float _1615 = _1588 * 0.5;
        float _1616 = _1598 * 0.5;
        float _1617 = dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616));
        float _1622 = (_1617 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1617);
        float _1631 = (dot(vec3(_1146, _1147, _1148), vec3(_1622 * _1614, _1622 * _1615, _1622 * _1616)) + 1.0) * 0.5;
        float _4459 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1641 = sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4470 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
        float _1642 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
        float _1643 = _1642 * 2.0;
        float _1647 = (1.0 - _1642) / (_1642 + 1.0);
        float _4481 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
        float _1657 = ((((1.0 - _1648) * (_1643 + 2.0)) * exp2(log2(isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0))) * (_1643 + 1.0))) + _1648) * _1611;
        float _1658 = _1579 * 0.5;
        float _1659 = _1589 * 0.5;
        float _1660 = _1599 * 0.5;
        float _1661 = dot(vec3(_1658, _1659, _1660), vec3(_1658, _1659, _1660));
        float _1666 = (_1661 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1661);
        float _1674 = (dot(vec3(_1146, _1147, _1148), vec3(_1666 * _1658, _1666 * _1659, _1666 * _1660)) + 1.0) * 0.5;
        float _4492 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1683 = sqrt(((_1659 * _1659) + (_1658 * _1658)) + (_1660 * _1660)) / (_1612 + 9.9999997473787516355514526367188e-06);
        float _4503 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
        float _1684 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
        float _1685 = _1684 * 2.0;
        float _1689 = (1.0 - _1684) / (_1684 + 1.0);
        float _4514 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
        float _1699 = ((((1.0 - _1690) * (_1685 + 2.0)) * exp2(log2(isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_1685 + 1.0))) + _1690) * _1612;
        float _1700 = _1580 * 0.5;
        float _1701 = _1590 * 0.5;
        float _1702 = _1600 * 0.5;
        float _1703 = dot(vec3(_1700, _1701, _1702), vec3(_1700, _1701, _1702));
        float _1708 = (_1703 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1703);
        float _1716 = (dot(vec3(_1146, _1147, _1148), vec3(_1708 * _1700, _1708 * _1701, _1708 * _1702)) + 1.0) * 0.5;
        float _4525 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
        float _1725 = sqrt(((_1701 * _1701) + (_1700 * _1700)) + (_1702 * _1702)) / (_1613 + 9.9999997473787516355514526367188e-06);
        float _4536 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
        float _1726 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _1727 = _1726 * 2.0;
        float _1731 = (1.0 - _1726) / (_1726 + 1.0);
        float _4547 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
        float _1741 = ((((1.0 - _1732) * (_1727 + 2.0)) * exp2(log2(isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * (_1727 + 1.0))) + _1732) * _1613;
        _1749 = _1580;
        _1751 = _1579;
        _1752 = _1578;
        _1753 = _1590;
        _1754 = _1589;
        _1755 = _1588;
        _1756 = _1600;
        _1757 = _1599;
        _1758 = _1598;
        _1759 = _1613;
        _1760 = _1612;
        _1761 = _1611;
        _1762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0)));
        _1763 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)));
        _1764 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)));
    }
    else
    {
        _1749 = _1750;
        _1751 = _1750;
        _1752 = _1750;
        _1753 = _1750;
        _1754 = _1750;
        _1755 = _1750;
        _1756 = _1750;
        _1757 = _1750;
        _1758 = _1750;
        _1759 = _1750;
        _1760 = _1750;
        _1761 = _1750;
        _1762 = 0.0;
        _1763 = 0.0;
        _1764 = 0.0;
    }
    float _2057;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1790 = fma(_1423, cbModelParam._m0[30u].z, fma(_1419, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1415));
        float _1794 = fma(_1423, cbModelParam._m0[31u].z, fma(_1419, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1415));
        float _1798 = fma(_1423, cbModelParam._m0[32u].z, fma(_1419, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1415));
        float _1820 = _1415 + _1146;
        float _1821 = _1419 + _1147;
        float _1822 = _1423 + _1148;
        float _1832 = fma(_1822, cbModelParam._m0[30u].z, fma(_1821, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1820)) - _1790;
        float _1833 = fma(_1822, cbModelParam._m0[31u].z, fma(_1821, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1820)) - _1794;
        float _1834 = fma(_1822, cbModelParam._m0[32u].z, fma(_1821, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1820)) - _1798;
        float _1838 = inversesqrt(dot(vec3(_1832, _1833, _1834), vec3(_1832, _1833, _1834)));
        float _1850 = ((_1838 * _1832) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1790 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1851 = ((_1838 * _1833) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1794 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1852 = ((_1838 * _1834) / cbModelParam._m0[35u].z) + ((((((_1798 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1854 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1861 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1868 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        vec4 _1875 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1850, _1851, _1852), 0.0);
        float _1887 = exp2((_1854.w + (-0.5)) * 20.0) * 2.0;
        float _1888 = _1887 * (_1854.x + (-0.5));
        float _1889 = _1887 * (_1854.y + (-0.5));
        float _1890 = _1887 * (_1854.z + (-0.5));
        float _1897 = exp2((_1861.w + (-0.5)) * 20.0) * 2.0;
        float _1898 = _1897 * (_1861.x + (-0.5));
        float _1899 = _1897 * (_1861.y + (-0.5));
        float _1900 = _1897 * (_1861.z + (-0.5));
        float _1907 = exp2((_1868.w + (-0.5)) * 20.0) * 2.0;
        float _1908 = _1907 * (_1868.x + (-0.5));
        float _1909 = _1907 * (_1868.y + (-0.5));
        float _1910 = _1907 * (_1868.z + (-0.5));
        float _1917 = exp2((_1875.w + (-0.5)) * 20.0) * 2.0;
        float _1918 = _1917 * (_1875.x + (-0.5));
        float _1919 = _1917 * (_1875.y + (-0.5));
        float _1920 = _1917 * (_1875.z + (-0.5));
        float _1921 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1922 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
        float _1923 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
        float _1924 = _1888 * 0.5;
        float _1925 = _1898 * 0.5;
        float _1926 = _1908 * 0.5;
        float _1927 = dot(vec3(_1924, _1925, _1926), vec3(_1924, _1925, _1926));
        float _1932 = (_1927 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1927);
        float _1940 = (dot(vec3(_1146, _1147, _1148), vec3(_1932 * _1924, _1932 * _1925, _1932 * _1926)) + 1.0) * 0.5;
        float _4588 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
        float _1949 = sqrt(((_1925 * _1925) + (_1924 * _1924)) + (_1926 * _1926)) / (_1921 + 9.9999997473787516355514526367188e-06);
        float _4599 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
        float _1950 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
        float _1951 = _1950 * 2.0;
        float _1955 = (1.0 - _1950) / (_1950 + 1.0);
        float _4610 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0));
        float _1965 = ((((1.0 - _1956) * (_1951 + 2.0)) * exp2(log2(isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0))) * (_1951 + 1.0))) + _1956) * _1921;
        float _1966 = _1889 * 0.5;
        float _1967 = _1899 * 0.5;
        float _1968 = _1909 * 0.5;
        float _1969 = dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968));
        float _1974 = (_1969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1969);
        float _1982 = (dot(vec3(_1146, _1147, _1148), vec3(_1974 * _1966, _1974 * _1967, _1974 * _1968)) + 1.0) * 0.5;
        float _4621 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1991 = sqrt(((_1967 * _1967) + (_1966 * _1966)) + (_1968 * _1968)) / (_1922 + 9.9999997473787516355514526367188e-06);
        float _4632 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _1993 = _1992 * 2.0;
        float _1997 = (1.0 - _1992) / (_1992 + 1.0);
        float _4643 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
        float _2007 = ((((1.0 - _1998) * (_1993 + 2.0)) * exp2(log2(isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_1993 + 1.0))) + _1998) * _1922;
        float _2008 = _1890 * 0.5;
        float _2009 = _1900 * 0.5;
        float _2010 = _1910 * 0.5;
        float _2011 = dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010));
        float _2016 = (_2011 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2011);
        float _2024 = (dot(vec3(_1146, _1147, _1148), vec3(_2016 * _2008, _2016 * _2009, _2016 * _2010)) + 1.0) * 0.5;
        float _4654 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
        float _2033 = sqrt(((_2009 * _2009) + (_2008 * _2008)) + (_2010 * _2010)) / (_1923 + 9.9999997473787516355514526367188e-06);
        float _4665 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0));
        float _2035 = _2034 * 2.0;
        float _2039 = (1.0 - _2034) / (_2034 + 1.0);
        float _4676 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2049 = ((((1.0 - _2040) * (_2035 + 2.0)) * exp2(log2(isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2035 + 1.0))) + _2040) * _1923;
        _2057 = _1890;
        _2058 = _1889;
        _2059 = _1888;
        _2060 = _1900;
        _2061 = _1899;
        _2062 = _1898;
        _2063 = _1910;
        _2064 = _1909;
        _2065 = _1908;
        _2066 = _1923;
        _2067 = _1922;
        _2068 = _1921;
        _2069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0)));
        _2070 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)));
        _2071 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)));
    }
    else
    {
        _2057 = _1750;
        _2058 = _1750;
        _2059 = _1750;
        _2060 = _1750;
        _2061 = _1750;
        _2062 = _1750;
        _2063 = _1750;
        _2064 = _1750;
        _2065 = _1750;
        _2066 = _1750;
        _2067 = _1750;
        _2068 = _1750;
        _2069 = 0.0;
        _2070 = 0.0;
        _2071 = 0.0;
    }
    float _2081 = (cbModelParam._m0[1u].x * (_2069 - _1762)) + _1762;
    float _2082 = (cbModelParam._m0[1u].x * (_2070 - _1763)) + _1763;
    float _2083 = (cbModelParam._m0[1u].x * (_2071 - _1764)) + _1764;
    float _2104 = fma(_2083, cbSceneParam._m0[89u].z, fma(_2082, cbSceneParam._m0[89u].y, _2081 * cbSceneParam._m0[89u].x));
    float _2107 = fma(_2083, cbSceneParam._m0[90u].z, fma(_2082, cbSceneParam._m0[90u].y, _2081 * cbSceneParam._m0[90u].x));
    float _2110 = fma(_2083, cbSceneParam._m0[91u].z, fma(_2082, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2081));
    float _2123 = _1361 * 0.5;
    float _2124 = _1362 * 0.5;
    float _2125 = _1363 * 0.5;
    float _2126 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_2059, _2062, _2065, _2068));
    float _2129 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_2058, _2061, _2064, _2067));
    float _2132 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_2057, _2060, _2063, _2066));
    float _2166;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2139 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_1749, _1753, _1756, _1759));
        float _2143 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_1751, _1754, _1757, _1760));
        float _2147 = dot(vec4(_2123, _2124, _2125, 1.0), vec4(_1752, _1755, _1758, _1761));
        float _2154 = dot(vec4(cbModelParam._m0[39u]), vec4(_2123, _2124, _2125, 1.0));
        _2166 = dot(vec3(isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0)), isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0)), isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2154) ? 0.0 : (isnan(0.0) ? _2154 : max(0.0, _2154))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2166 = 1.0;
    }
    float _2177;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2168 = dot(vec4(cbModelParam._m0[40u]), vec4(_2123, _2124, _2125, 1.0));
        _2177 = dot(vec3(isnan(0.0) ? _2126 : (isnan(_2126) ? 0.0 : max(_2126, 0.0)), isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0)), isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2168) ? 0.0 : (isnan(0.0) ? _2168 : max(0.0, _2168))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2177 = 1.0;
    }
    float _2181 = (_2177 * cbModelParam._m0[1u].x) + (_2166 * (1.0 - cbModelParam._m0[1u].x));
    float _2191 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1268);
    float _2192 = isnan(_2191) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2191 : min(cbModelParam._m0[25u].z, _2191));
    float _2272;
    float _2274;
    float _2276;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2239 = fma(_1423, cbModelParam._m0[13u].z, fma(_1419, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1415)) + cbModelParam._m0[13u].w;
        float _2243 = fma(_1423, cbModelParam._m0[14u].z, fma(_1419, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1415)) + cbModelParam._m0[14u].w;
        float _2247 = fma(_1423, cbModelParam._m0[15u].z, fma(_1419, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1415)) + cbModelParam._m0[15u].w;
        float _2250 = fma(_1363, cbModelParam._m0[13u].z, fma(_1362, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1361));
        float _2253 = fma(_1363, cbModelParam._m0[14u].z, fma(_1362, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1361));
        float _2256 = fma(_1363, cbModelParam._m0[15u].z, fma(_1362, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1361));
        float _2284;
        if (_2250 > 0.0)
        {
            _2284 = abs((1.0 - _2239) / _2250);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2250 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2239 + 1.0) / _2250);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2284 = frontier_phi_17_15_ladder;
        }
        float _2507;
        if (_2253 > 0.0)
        {
            _2507 = abs((1.0 - _2243) / _2253);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2253 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2243 + 1.0) / _2253);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2507 = frontier_phi_26_22_ladder;
        }
        float _2764;
        if (_2256 > 0.0)
        {
            _2764 = abs((1.0 - _2247) / _2256);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2247 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2764 = frontier_phi_38_33_ladder;
        }
        float _2766 = isnan(_2507) ? _2284 : (isnan(_2284) ? _2507 : min(_2284, _2507));
        float _2767 = isnan(_2764) ? _2766 : (isnan(_2766) ? _2764 : min(_2766, _2764));
        float _2771 = (_2767 * _2250) + _2239;
        float _2772 = (_2767 * _2253) + _2243;
        float _2773 = (_2767 * _2256) + _2247;
        float _2774 = _2767 * 9.9999997473787516355514526367188e-05;
        float _2776 = (-1.0) - _2774;
        float _2778 = _2774 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2773 > _2778) || ((_2773 < _2776) || ((_2772 > _2778) || ((_2772 < _2776) || ((_2771 < _2776) || (_2771 > _2778))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2901 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2773, cbModelParam._m0[9u].z, fma(_2772, cbModelParam._m0[9u].y, _2771 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2773, cbModelParam._m0[10u].z, fma(_2772, cbModelParam._m0[10u].y, _2771 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2773, cbModelParam._m0[11u].z, fma(_2772, cbModelParam._m0[11u].y, _2771 * cbModelParam._m0[11u].x))), _2192);
            frontier_phi_16_38_ladder = _2901.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2901.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2901.x * cbModelParam._m0[1u].y;
        }
        _2272 = frontier_phi_16_38_ladder_2;
        _2274 = frontier_phi_16_38_ladder_1;
        _2276 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2260 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1361, _1362, _1363), _2192);
        _2272 = _2260.x * cbModelParam._m0[1u].y;
        _2274 = _2260.y * cbModelParam._m0[1u].y;
        _2276 = _2260.z * cbModelParam._m0[1u].y;
    }
    float _2280 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1268);
    float _2281 = isnan(_2280) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2280 : min(cbModelParam._m0[25u].w, _2280));
    float _2370;
    float _2372;
    float _2374;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2334 = fma(_1423, cbModelParam._m0[21u].z, fma(_1419, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1415)) + cbModelParam._m0[21u].w;
        float _2338 = fma(_1423, cbModelParam._m0[22u].z, fma(_1419, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1415)) + cbModelParam._m0[22u].w;
        float _2342 = fma(_1423, cbModelParam._m0[23u].z, fma(_1419, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1415)) + cbModelParam._m0[23u].w;
        float _2345 = fma(_1363, cbModelParam._m0[21u].z, fma(_1362, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1361));
        float _2348 = fma(_1363, cbModelParam._m0[22u].z, fma(_1362, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1361));
        float _2351 = fma(_1363, cbModelParam._m0[23u].z, fma(_1362, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1361));
        float _2512;
        if (_2345 > 0.0)
        {
            _2512 = abs((1.0 - _2334) / _2345);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2345 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2334 + 1.0) / _2345);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2512 = frontier_phi_28_24_ladder;
        }
        float _2791;
        if (_2348 > 0.0)
        {
            _2791 = abs((1.0 - _2338) / _2348);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2348 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2338 + 1.0) / _2348);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2791 = frontier_phi_40_35_ladder;
        }
        float _3004;
        if (_2351 > 0.0)
        {
            _3004 = abs((1.0 - _2342) / _2351);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2351 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2342 + 1.0) / _2351);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _3004 = frontier_phi_49_46_ladder;
        }
        float _3006 = isnan(_2791) ? _2512 : (isnan(_2512) ? _2791 : min(_2512, _2791));
        float _3007 = isnan(_3004) ? _3006 : (isnan(_3006) ? _3004 : min(_3006, _3004));
        float _3011 = (_3007 * _2345) + _2334;
        float _3012 = (_3007 * _2348) + _2338;
        float _3013 = (_3007 * _2351) + _2342;
        float _3014 = _3007 * 9.9999997473787516355514526367188e-05;
        float _3015 = (-1.0) - _3014;
        float _3017 = _3014 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_3013 > _3017) || ((_3013 < _3015) || ((_3012 > _3017) || ((_3012 < _3015) || ((_3011 < _3015) || (_3011 > _3017))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3241 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3013, cbModelParam._m0[17u].z, fma(_3012, cbModelParam._m0[17u].y, _3011 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3013, cbModelParam._m0[18u].z, fma(_3012, cbModelParam._m0[18u].y, _3011 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3013, cbModelParam._m0[19u].z, fma(_3012, cbModelParam._m0[19u].y, _3011 * cbModelParam._m0[19u].x))), _2281);
            frontier_phi_25_49_ladder = _3241.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3241.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3241.x * cbModelParam._m0[1u].z;
        }
        _2370 = frontier_phi_25_49_ladder_2;
        _2372 = frontier_phi_25_49_ladder_1;
        _2374 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1361, _1362, _1363), _2281);
        _2370 = _2354.x * cbModelParam._m0[1u].z;
        _2372 = _2354.y * cbModelParam._m0[1u].z;
        _2374 = _2354.z * cbModelParam._m0[1u].z;
    }
    float _2387 = (((_1386 * _1338) + _1387) * _1353) * ((cbModelParam._m0[1u].w * (_2370 - _2272)) + _2272);
    float _2389 = (((_1386 * _1340) + _1387) * _1353) * ((cbModelParam._m0[1u].w * (_2372 - _2274)) + _2274);
    float _2391 = (((_1386 * _1341) + _1387) * _1353) * ((cbModelParam._m0[1u].w * (_2374 - _2276)) + _2276);
    float _2394 = fma(_2391, cbSceneParam._m0[89u].z, fma(_2389, cbSceneParam._m0[89u].y, _2387 * cbSceneParam._m0[89u].x));
    float _2397 = fma(_2391, cbSceneParam._m0[90u].z, fma(_2389, cbSceneParam._m0[90u].y, _2387 * cbSceneParam._m0[90u].x));
    float _2400 = fma(_2391, cbSceneParam._m0[91u].z, fma(_2389, cbSceneParam._m0[91u].y, _2387 * cbSceneParam._m0[91u].x));
    vec4 _2408 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_1226, _1227));
    float _2410 = _2408.w;
    float _2422 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2410);
    float _2423 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2410);
    float _2424 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2410);
    uvec4 _2428 = floatBitsToUint(cbInstanceData._m0[_1281 + 5u]);
    uint _2430 = _2428.x * 14u;
    uint _2431 = _2430 + 13u;
    float _2438 = _1353 + (-1.0);
    float _2443 = (cbLight._m0[_2431].x * _2438) + 1.0;
    float _2444 = (cbLight._m0[_2431].y * _2438) + 1.0;
    float _2445 = (cbLight._m0[_2431].z * _2438) + 1.0;
    float _2446 = (cbLight._m0[_2431].w * _2438) + 1.0;
    uint _2447 = _2430 + 5u;
    float _2453 = isnan(1.0) ? _2444 : (isnan(_2444) ? 1.0 : min(_2444, 1.0));
    uint _2457 = _2430 + 4u;
    float _2466 = isnan(1.0) ? _2443 : (isnan(_2443) ? 1.0 : min(_2443, 1.0));
    uint _2470 = _2430 | 1u;
    float _2481 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_1146, _1147, _1148));
    float _2484 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_1146, _1147, _1148));
    float _4812 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _4823 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
    float _2489 = (isnan(1.0) ? _4812 : (isnan(_4812) ? 1.0 : min(_4812, 1.0))) * 0.3183098733425140380859375;
    float _2491 = (isnan(1.0) ? _4823 : (isnan(_4823) ? 1.0 : min(_4823, 1.0))) * 0.3183098733425140380859375;
    float _2498 = ((cbLight._m0[_2447].x * _2453) * _2491) + (((cbLight._m0[_2457].x * _2422) * _2466) * _2489);
    float _2499 = ((_2453 * cbLight._m0[_2447].y) * _2491) + (((cbLight._m0[_2457].y * _2423) * _2466) * _2489);
    float _2500 = ((_2453 * cbLight._m0[_2447].z) * _2491) + (((cbLight._m0[_2457].z * _2424) * _2466) * _2489);
    uvec4 _2504 = floatBitsToUint(cbLight._m0[_2430 + 12u]);
    bool _2506 = _2504.x == 0u;
    float _2517;
    float _2519;
    float _2521;
    if (_2506)
    {
        _2517 = _2498;
        _2519 = _2499;
        _2521 = _2500;
    }
    else
    {
        uint _2525 = _2430 + 6u;
        float _2541 = (dot(vec3(cbLight._m0[_2430 + 2u].xyz), vec3(_1146, _1147, _1148)) * 0.5) + 0.5;
        float _2542 = _2541 * _2541;
        float _4834 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2543 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2544 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2517 = (((cbLight._m0[_2525].x * 0.3183098733425140380859375) * _2543) * _2544) + _2498;
        _2519 = (((cbLight._m0[_2525].y * 0.3183098733425140380859375) * _2543) * _2544) + _2499;
        _2521 = (((cbLight._m0[_2525].z * 0.3183098733425140380859375) * _2543) * _2544) + _2500;
    }
    bool _2524 = _2504.y == 0u;
    float _2562;
    float _2564;
    float _2566;
    if (_2524)
    {
        _2562 = _2517;
        _2564 = _2519;
        _2566 = _2521;
    }
    else
    {
        uint _2735 = _2430 + 7u;
        float _2751 = (dot(vec3(cbLight._m0[_2430 + 3u].xyz), vec3(_1146, _1147, _1148)) * 0.5) + 0.5;
        float _2752 = _2751 * _2751;
        float _4850 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
        float _2753 = isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0));
        float _2754 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        _2562 = (((cbLight._m0[_2735].x * 0.3183098733425140380859375) * _2753) * _2754) + _2517;
        _2564 = (((cbLight._m0[_2735].y * 0.3183098733425140380859375) * _2753) * _2754) + _2519;
        _2566 = (((cbLight._m0[_2735].z * 0.3183098733425140380859375) * _2753) * _2754) + _2521;
    }
    uint _2569 = _2430 + 8u;
    float _2582 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2430].w)) * _1268) * 0.949999988079071044921875);
    float _2583 = _2582 * _2582;
    float _2584 = cbLight._m0[_2430].x + _1206;
    float _2585 = cbLight._m0[_2430].y + _1207;
    float _2586 = cbLight._m0[_2430].z + _1208;
    float _2590 = inversesqrt(dot(vec3(_2584, _2585, _2586), vec3(_2584, _2585, _2586)));
    float _2591 = _2590 * _2584;
    float _2592 = _2590 * _2585;
    float _2593 = _2590 * _2586;
    float _2594 = dot(vec3(_1146, _1147, _1148), vec3(cbLight._m0[_2430].xyz));
    float _4866 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
    float _2597 = isnan(1.0) ? _4866 : (isnan(_4866) ? 1.0 : min(_4866, 1.0));
    float _4877 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _2598 = isnan(1.0) ? _4877 : (isnan(_4877) ? 1.0 : min(_4877, 1.0));
    float _2599 = dot(vec3(_1146, _1147, _1148), vec3(_2591, _2592, _2593));
    float _4888 = isnan(0.0) ? _2599 : (isnan(_2599) ? 0.0 : max(_2599, 0.0));
    float _2602 = isnan(1.0) ? _4888 : (isnan(_4888) ? 1.0 : min(_4888, 1.0));
    float _2603 = dot(vec3(cbLight._m0[_2430].xyz), vec3(_2591, _2592, _2593));
    float _4899 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
    float _2607 = _2583 * _2583;
    float _2611 = ((_2602 * _2602) * (_2607 + (-1.0))) + 1.0;
    float _2619 = exp2(log2(1.0 - (isnan(1.0) ? _4899 : (isnan(_4899) ? 1.0 : min(_4899, 1.0)))) * 5.0);
    float _2620 = 0.959999978542327880859375 - _1335;
    float _2622 = 0.959999978542327880859375 - _1336;
    float _2623 = 0.959999978542327880859375 - _1337;
    float _2630 = 1.0 - _2583;
    float _2641 = (0.5 / (((_2598 * ((_2597 * _2630) + _2583)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2630) + _2583) * _2597))) * _2597;
    float _4910 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
    float _2643 = (isnan(1.0) ? _4910 : (isnan(_4910) ? 1.0 : min(_4910, 1.0))) * (_2607 / ((_2611 * _2611) * 3.141590118408203125));
    uint _2657 = _2430 + 9u;
    float _2668 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2470].w)) * _1268) * 0.949999988079071044921875);
    float _2669 = _2668 * _2668;
    float _2670 = cbLight._m0[_2470].x + _1206;
    float _2671 = cbLight._m0[_2470].y + _1207;
    float _2672 = cbLight._m0[_2470].z + _1208;
    float _2676 = inversesqrt(dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672)));
    float _2677 = _2676 * _2670;
    float _2678 = _2676 * _2671;
    float _2679 = _2676 * _2672;
    float _2680 = dot(vec3(_1146, _1147, _1148), vec3(cbLight._m0[_2470].xyz));
    float _4921 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
    float _2683 = isnan(1.0) ? _4921 : (isnan(_4921) ? 1.0 : min(_4921, 1.0));
    float _2684 = dot(vec3(_1146, _1147, _1148), vec3(_2677, _2678, _2679));
    float _4932 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2687 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
    float _2688 = dot(vec3(cbLight._m0[_2470].xyz), vec3(_2677, _2678, _2679));
    float _4943 = isnan(0.0) ? _2688 : (isnan(_2688) ? 0.0 : max(_2688, 0.0));
    float _2692 = _2669 * _2669;
    float _2696 = ((_2687 * _2687) * (_2692 + (-1.0))) + 1.0;
    float _2703 = exp2(log2(1.0 - (isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0)))) * 5.0);
    float _2710 = 1.0 - _2669;
    float _2720 = (0.5 / (((_2598 * ((_2683 * _2710) + _2669)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2710) + _2669) * _2683))) * _2683;
    float _4954 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0));
    float _2722 = (isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0))) * (_2692 / ((_2696 * _2696) * 3.141590118408203125));
    float _2732 = (((((_2703 * _2620) + _1338) * cbLight._m0[_2657].x) * _2722) * _2453) + ((((cbLight._m0[_2569].x * _2422) * ((_2619 * _2620) + _1338)) * _2643) * _2466);
    float _2733 = (((((_2703 * _2622) + _1340) * cbLight._m0[_2657].y) * _2722) * _2453) + ((((cbLight._m0[_2569].y * _2423) * ((_2619 * _2622) + _1340)) * _2643) * _2466);
    float _2734 = (((((_2703 * _2623) + _1341) * cbLight._m0[_2657].z) * _2722) * _2453) + ((((cbLight._m0[_2569].z * _2424) * ((_2619 * _2623) + _1341)) * _2643) * _2466);
    float _2796;
    float _2798;
    float _2800;
    if (_2506)
    {
        _2796 = _2732;
        _2798 = _2733;
        _2800 = _2734;
    }
    else
    {
        uint _2802 = _2430 + 2u;
        uint _2806 = _2430 + 10u;
        float _2820 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2802].w)) * _1268) * 0.949999988079071044921875);
        float _2821 = _2820 * _2820;
        float _2822 = cbLight._m0[_2802].x + _1206;
        float _2823 = cbLight._m0[_2802].y + _1207;
        float _2824 = cbLight._m0[_2802].z + _1208;
        float _2828 = inversesqrt(dot(vec3(_2822, _2823, _2824), vec3(_2822, _2823, _2824)));
        float _2829 = _2828 * _2822;
        float _2830 = _2828 * _2823;
        float _2831 = _2828 * _2824;
        float _2832 = dot(vec3(_1146, _1147, _1148), vec3(cbLight._m0[_2802].xyz));
        float _4965 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2835 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
        float _2836 = dot(vec3(_1146, _1147, _1148), vec3(_2829, _2830, _2831));
        float _4976 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
        float _2839 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
        float _2840 = dot(vec3(cbLight._m0[_2802].xyz), vec3(_2829, _2830, _2831));
        float _4987 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
        float _2844 = _2821 * _2821;
        float _2848 = ((_2839 * _2839) * (_2844 + (-1.0))) + 1.0;
        float _2855 = exp2(log2(1.0 - (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) * 5.0);
        float _2862 = 1.0 - _2821;
        float _2872 = (0.5 / (((_2598 * ((_2835 * _2862) + _2821)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2862) + _2821) * _2835))) * _2835;
        float _4998 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2874 = (isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0))) * (_2844 / ((_2848 * _2848) * 3.141590118408203125));
        float _2875 = isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0));
        _2796 = (((((_2855 * _2620) + _1338) * cbLight._m0[_2806].x) * _2874) * _2875) + _2732;
        _2798 = (((((_2855 * _2622) + _1340) * cbLight._m0[_2806].y) * _2874) * _2875) + _2733;
        _2800 = (((((_2855 * _2623) + _1341) * cbLight._m0[_2806].z) * _2874) * _2875) + _2734;
    }
    float _2910;
    float _2912;
    float _2914;
    if (_2524)
    {
        _2910 = _2796;
        _2912 = _2798;
        _2914 = _2800;
    }
    else
    {
        uint _2921 = _2430 + 3u;
        uint _2925 = _2430 + 11u;
        float _2939 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2921].w)) * _1268) * 0.949999988079071044921875);
        float _2940 = _2939 * _2939;
        float _2941 = cbLight._m0[_2921].x + _1206;
        float _2942 = cbLight._m0[_2921].y + _1207;
        float _2943 = cbLight._m0[_2921].z + _1208;
        float _2947 = inversesqrt(dot(vec3(_2941, _2942, _2943), vec3(_2941, _2942, _2943)));
        float _2948 = _2947 * _2941;
        float _2949 = _2947 * _2942;
        float _2950 = _2947 * _2943;
        float _2951 = dot(vec3(_1146, _1147, _1148), vec3(cbLight._m0[_2921].xyz));
        float _5014 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
        float _2954 = isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0));
        float _2955 = dot(vec3(_1146, _1147, _1148), vec3(_2948, _2949, _2950));
        float _5025 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
        float _2958 = isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0));
        float _2959 = dot(vec3(cbLight._m0[_2921].xyz), vec3(_2948, _2949, _2950));
        float _5036 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2963 = _2940 * _2940;
        float _2967 = ((_2958 * _2958) * (_2963 + (-1.0))) + 1.0;
        float _2974 = exp2(log2(1.0 - (isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0)))) * 5.0);
        float _2981 = 1.0 - _2940;
        float _2991 = (0.5 / (((_2598 * ((_2954 * _2981) + _2940)) + 9.9999999392252902907785028219223e-09) + (((_2598 * _2981) + _2940) * _2954))) * _2954;
        float _5047 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        float _2993 = (isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_2963 / ((_2967 * _2967) * 3.141590118408203125));
        float _2994 = isnan(1.0) ? _2446 : (isnan(_2446) ? 1.0 : min(_2446, 1.0));
        _2910 = (((((_2974 * _2620) + _1338) * cbLight._m0[_2925].x) * _2993) * _2994) + _2796;
        _2912 = (((((_2974 * _2622) + _1340) * cbLight._m0[_2925].y) * _2993) * _2994) + _2798;
        _2914 = (((((_2974 * _2623) + _1341) * cbLight._m0[_2925].z) * _2993) * _2994) + _2800;
    }
    float _3129;
    float _3131;
    float _3133;
    float _3135;
    float _3137;
    float _3139;
    if (_2428.y == 0u)
    {
        float _3069 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3070 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3069;
        float _3071 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3069;
        float _3072 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3069;
        uvec4 _3084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3085 = _3084.x;
        uint _3096 = uint((float(_3084.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1227) / _3085))) + floor(float(uint(cbSceneParam._m0[85u].x * _1226) / _3085)));
        float _3106 = (log2(_3072 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3107 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
        uint _3110 = uint(isnan(14.0) ? _3107 : (isnan(_3107) ? 14.0 : min(_3107, 14.0)));
        uvec4 _3115 = texelFetch(g_lightClusterGridBuffer, int(((_3110 << 2u) + (_3096 << 6u)) >> 2u));
        uint _3116 = _3115.x;
        uint _3117 = _3084.z;
        float _3246;
        float _3248;
        float _3250;
        float _3252;
        float _3254;
        float _3256;
        if (((((1u << ((_3117 >> 4u) & 15u)) + 4294967295u) & _3116) == 0u) || ((_3117 & 240u) == 0u))
        {
            _3246 = 0.0;
            _3248 = 0.0;
            _3250 = 0.0;
            _3252 = 0.0;
            _3254 = 0.0;
            _3256 = 0.0;
        }
        else
        {
            float _3247;
            float _3249;
            float _3251;
            float _3253;
            float _3255;
            float _3257;
            float _3406 = 0.0;
            float _3407 = 0.0;
            float _3408 = 0.0;
            float _3409 = 0.0;
            float _3410 = 0.0;
            float _3411 = 0.0;
            uint _3412 = 0u;
            uint _3421;
            bool _3422;
            for (;;)
            {
                _3421 = texelFetch(g_lightClassification, int((((_3110 << 5u) + (_3096 << 9u)) + (_3412 << 2u)) >> 2u)).x;
                _3422 = _3421 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3422)
                {
                    frontier_phi_66_pred = _3406;
                    frontier_phi_66_pred_1 = _3411;
                    frontier_phi_66_pred_2 = _3410;
                    frontier_phi_66_pred_3 = _3409;
                    frontier_phi_66_pred_4 = _3408;
                    frontier_phi_66_pred_5 = _3407;
                }
                else
                {
                    float _3551;
                    float _3552;
                    float _3553;
                    float _3554;
                    float _3555;
                    float _3556;
                    uint _3557;
                    _3551 = _3406;
                    _3552 = _3407;
                    _3553 = _3408;
                    _3554 = _3409;
                    _3555 = _3410;
                    _3556 = _3411;
                    _3557 = _3421;
                    float _3478;
                    float _3479;
                    float _3480;
                    float _3481;
                    float _3482;
                    float _3483;
                    for (;;)
                    {
                        uint _3561 = uint(findLSB(_3557)) + (_3412 << 5u);
                        uint _3558 = (_3557 + 4294967295u) & _3557;
                        uint _3563 = _3561 * 48u;
                        vec4 _3577 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3563)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3563 + 3u)).x));
                        uint _3583 = (_3561 * 48u) + 4u;
                        vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3583)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3583 + 3u)).x));
                        uint _3602 = (_3561 * 48u) + 8u;
                        vec3 _3613 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3602)).x, texelFetch(g_PointLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3602 + 2u)).x));
                        float _3617 = _3577.x - _3070;
                        float _3618 = _3577.y - _3071;
                        float _3619 = _3577.z - _3072;
                        float _3620 = dot(vec3(_3617, _3618, _3619), vec3(_3617, _3618, _3619));
                        float _3623 = inversesqrt(_3620);
                        float _3624 = _3623 * _3617;
                        float _3625 = _3623 * _3618;
                        float _3626 = _3623 * _3619;
                        float _3627 = dot(vec3(_1249, _1252, _1255), vec3(_3624, _3625, _3626));
                        float _3632 = 1.0 - (_3620 * _3577.w);
                        float _5073 = isnan(0.0) ? _3632 : (isnan(_3632) ? 0.0 : max(_3632, 0.0));
                        float _3633 = isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0));
                        float _3634 = sqrt(_3620) * _3596.w;
                        float _3637 = 1.39999997615814208984375 / (_3634 + 1.39999997615814208984375);
                        float _3638 = _3637 * _3637;
                        float _3641 = ((1.0 - _3638) * _3627) + _3638;
                        float _3644 = _3634 * _3634;
                        float _3648 = ((isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0))) * _3633) / ((_3644 * 0.699999988079071044921875) + 1.0);
                        float _3652 = (-0.0) - _3070;
                        float _3653 = (-0.0) - _3071;
                        float _3654 = (-0.0) - _3072;
                        float _3658 = inversesqrt(dot(vec3(_3652, _3653, _3654), vec3(_3652, _3653, _3654)));
                        float _3659 = _3658 * _3652;
                        float _3660 = _3658 * _3653;
                        float _3661 = _3658 * _3654;
                        float _3669 = exp2(log2(1.0 / ((_3644 * 3.5) + 5.0)) * 0.25);
                        float _3670 = 1.0 - _1369;
                        float _3677 = sqrt(1.0 - ((1.0 - (_3670 * _3670)) * (1.0 - (_3669 * _3669))));
                        float _3678 = _3677 * _3677;
                        float _3679 = _3678 * _3678;
                        float _3680 = _3659 + _3624;
                        float _3681 = _3660 + _3625;
                        float _3682 = _3661 + _3626;
                        float _3686 = inversesqrt(dot(vec3(_3680, _3681, _3682), vec3(_3680, _3681, _3682)));
                        float _3690 = dot(vec3(_1249, _1252, _1255), vec3(_3659, _3660, _3661));
                        float _5089 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                        float _3693 = isnan(1.0) ? _5089 : (isnan(_5089) ? 1.0 : min(_5089, 1.0));
                        float _3694 = dot(vec3(_1249, _1252, _1255), vec3(_3686 * _3680, _3686 * _3681, _3686 * _3682));
                        float _5100 = isnan(0.0) ? _3694 : (isnan(_3694) ? 0.0 : max(_3694, 0.0));
                        float _3697 = isnan(1.0) ? _5100 : (isnan(_5100) ? 1.0 : min(_5100, 1.0));
                        float _3701 = ((_3697 * _3697) * (_3679 + (-1.0))) + 1.0;
                        float _3702 = _3637 * _3678;
                        float _3703 = _3702 * _3702;
                        float _3706 = ((1.0 - _3703) * _3627) + _3703;
                        float _5111 = isnan(0.0) ? _3706 : (isnan(_3706) ? 0.0 : max(_3706, 0.0));
                        float _3707 = isnan(1.0) ? _5111 : (isnan(_5111) ? 1.0 : min(_5111, 1.0));
                        float _3708 = 1.0 - _3678;
                        float _3718 = (0.5 / (((_3707 * ((_3693 * _3708) + _3678)) + 9.9999999392252902907785028219223e-09) + (((_3707 * _3708) + _3678) * _3693))) * _3707;
                        float _5122 = isnan(0.0) ? _3718 : (isnan(_3718) ? 0.0 : max(_3718, 0.0));
                        float _3729 = (((_3679 * 3.1415927410125732421875) * (isnan(1.0) ? _5122 : (isnan(_5122) ? 1.0 : min(_5122, 1.0)))) / ((_3701 * _3701) * ((_3644 * 2.1991131305694580078125) + 3.141590118408203125))) * _3633;
                        _3481 = (_3648 * _3596.x) + _3554;
                        _3482 = (_3648 * _3596.y) + _3555;
                        _3483 = (_3648 * _3596.z) + _3556;
                        _3478 = (_3729 * _3613.x) + _3551;
                        _3479 = (_3729 * _3613.y) + _3552;
                        _3480 = (_3729 * _3613.z) + _3553;
                        if (_3558 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3551 = _3478;
                            _3552 = _3479;
                            _3553 = _3480;
                            _3554 = _3481;
                            _3555 = _3482;
                            _3556 = _3483;
                            _3557 = _3558;
                        }
                    }
                    frontier_phi_66_pred = _3478;
                    frontier_phi_66_pred_1 = _3483;
                    frontier_phi_66_pred_2 = _3482;
                    frontier_phi_66_pred_3 = _3481;
                    frontier_phi_66_pred_4 = _3480;
                    frontier_phi_66_pred_5 = _3479;
                }
                _3247 = frontier_phi_66_pred;
                _3257 = frontier_phi_66_pred_1;
                _3255 = frontier_phi_66_pred_2;
                _3253 = frontier_phi_66_pred_3;
                _3251 = frontier_phi_66_pred_4;
                _3249 = frontier_phi_66_pred_5;
                uint _3413 = _3412 + 1u;
                if (_3413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3406 = _3247;
                    _3407 = _3249;
                    _3408 = _3251;
                    _3409 = _3253;
                    _3410 = _3255;
                    _3411 = _3257;
                    _3412 = _3413;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3246 = _3247;
            _3248 = _3249;
            _3250 = _3251;
            _3252 = _3253;
            _3254 = _3255;
            _3256 = _3257;
        }
        uvec4 _3260 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3261 = _3260.z;
        uint _3263 = (_3261 >> 8u) & 15u;
        float _3374;
        float _3376;
        float _3378;
        float _3380;
        float _3382;
        float _3384;
        if (((4294967295u << _3263) & _3116) == 0u)
        {
            _3374 = _3246;
            _3376 = _3248;
            _3378 = _3250;
            _3380 = _3252;
            _3382 = _3254;
            _3384 = _3256;
        }
        else
        {
            float _3399 = inversesqrt(dot(vec3(_3070, _3071, _3072), vec3(_3070, _3071, _3072)));
            float _3400 = _3399 * _3070;
            float _3401 = _3399 * _3071;
            float _3402 = _3399 * _3072;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3263 < ((_3261 >> 12u) & 15u))
            {
                float _3375;
                float _3377;
                float _3379;
                float _3381;
                float _3383;
                float _3385;
                float _3534 = _3246;
                float _3535 = _3248;
                float _3536 = _3250;
                float _3537 = _3252;
                float _3538 = _3254;
                float _3539 = _3256;
                uint _3540 = _3263;
                uint _3549;
                bool _3550;
                for (;;)
                {
                    _3549 = texelFetch(g_lightClassification, int((((_3110 << 5u) + (_3096 << 9u)) + (_3540 << 2u)) >> 2u)).x;
                    _3550 = _3549 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3550)
                    {
                        frontier_phi_77_pred = _3539;
                        frontier_phi_77_pred_1 = _3538;
                        frontier_phi_77_pred_2 = _3537;
                        frontier_phi_77_pred_3 = _3536;
                        frontier_phi_77_pred_4 = _3535;
                        frontier_phi_77_pred_5 = _3534;
                    }
                    else
                    {
                        float _3743;
                        float _3744;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _4036;
                        float _4037;
                        float _4038;
                        float _4039;
                        float _4040;
                        float _4041;
                        float _3756 = _3534;
                        float _3757 = _3535;
                        float _3758 = _3536;
                        float _3759 = _3537;
                        float _3760 = _3538;
                        float _3761 = _3539;
                        uint _3762 = _3549;
                        uint _3763;
                        vec4 _3788;
                        float _3789;
                        vec4 _3804;
                        vec3 _3816;
                        vec4 _3831;
                        vec4 _3846;
                        float _3892;
                        bool _3893;
                        for (;;)
                        {
                            uint _3773 = ((_3540 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3762));
                            _3763 = (_3762 + 4294967295u) & _3762;
                            uint _3775 = _3773 * 40u;
                            _3788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3775 + 3u)).x));
                            _3789 = _3788.w;
                            uint _3791 = (_3773 * 40u) + 4u;
                            _3804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3791 + 3u)).x));
                            uint _3806 = (_3773 * 40u) + 8u;
                            _3816 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3806 + 2u)).x));
                            uint _3818 = (_3773 * 40u) + 16u;
                            _3831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3818 + 3u)).x));
                            uint _3833 = (_3773 * 40u) + 20u;
                            _3846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3833 + 3u)).x));
                            uint _3848 = (_3773 * 40u) + 24u;
                            vec4 _3861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3848 + 3u)).x));
                            uint _3867 = (_3773 * 40u) + 28u;
                            vec4 _3880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3867 + 3u)).x));
                            _3892 = fma(_3072, _3880.z, fma(_3071, _3880.y, _3880.x * _3070)) + _3880.w;
                            _3893 = !((fma(_3072, _3861.z, fma(_3071, _3861.y, _3861.x * _3070)) + _3861.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3893)
                            {
                                float _3920 = _3788.x - _3070;
                                float _3921 = _3788.y - _3071;
                                float _3922 = _3788.z - _3072;
                                float _3923 = dot(vec3(_3920, _3921, _3922), vec3(_3920, _3921, _3922));
                                float _3926 = inversesqrt(_3923);
                                float _3927 = _3926 * _3920;
                                float _3928 = _3926 * _3921;
                                float _3929 = _3926 * _3922;
                                float _3933 = 1.0 - (_3923 / (_3789 * _3789));
                                float _5133 = isnan(0.0) ? _3933 : (isnan(_3933) ? 0.0 : max(_3933, 0.0));
                                float _3934 = isnan(1.0) ? _5133 : (isnan(_5133) ? 1.0 : min(_5133, 1.0));
                                float _3938 = sqrt(_3923) * _3804.w;
                                float _3940 = 1.39999997615814208984375 / (_3938 + 1.39999997615814208984375);
                                float _3941 = _3940 * _3940;
                                float _3944 = ((1.0 - _3941) * dot(vec3(_3927, _3928, _3929), vec3(_1249, _1252, _1255))) + _3941;
                                float _3947 = _3938 * _3938;
                                float _3951 = (fma(_3072, _3831.z, fma(_3071, _3831.y, _3831.x * _3070)) + _3831.w) / _3892;
                                float _3952 = (fma(_3072, _3846.z, fma(_3071, _3846.y, _3846.x * _3070)) + _3846.w) / _3892;
                                float _3956 = 1.0 - dot(vec2(_3951, _3952), vec2(_3951, _3952));
                                float _5149 = isnan(0.0) ? _3956 : (isnan(_3956) ? 0.0 : max(_3956, 0.0));
                                float _3957 = isnan(1.0) ? _5149 : (isnan(_5149) ? 1.0 : min(_5149, 1.0));
                                float _3958 = _3957 * (((isnan(0.0) ? _3944 : (isnan(_3944) ? 0.0 : max(_3944, 0.0))) * _3934) / ((_3947 * 0.699999988079071044921875) + 1.0));
                                float _3970 = exp2(log2(1.0 / ((_3947 * 3.5) + 5.0)) * 0.25);
                                float _3971 = 1.0 - _1369;
                                float _3978 = sqrt(1.0 - ((1.0 - (_3971 * _3971)) * (1.0 - (_3970 * _3970))));
                                float _3979 = _3978 * _3978;
                                float _3980 = _3979 * _3979;
                                float _3981 = _3927 - _3400;
                                float _3982 = _3928 - _3401;
                                float _3983 = _3929 - _3402;
                                float _3987 = inversesqrt(dot(vec3(_3981, _3982, _3983), vec3(_3981, _3982, _3983)));
                                float _3991 = dot(vec3(_1249, _1252, _1255), vec3((-0.0) - _3400, (-0.0) - _3401, (-0.0) - _3402));
                                float _5160 = isnan(0.0) ? _3991 : (isnan(_3991) ? 0.0 : max(_3991, 0.0));
                                float _3994 = isnan(1.0) ? _5160 : (isnan(_5160) ? 1.0 : min(_5160, 1.0));
                                float _3995 = dot(vec3(_1249, _1252, _1255), vec3(_3987 * _3981, _3987 * _3982, _3987 * _3983));
                                float _5171 = isnan(0.0) ? _3995 : (isnan(_3995) ? 0.0 : max(_3995, 0.0));
                                float _3998 = isnan(1.0) ? _5171 : (isnan(_5171) ? 1.0 : min(_5171, 1.0));
                                float _4002 = ((_3998 * _3998) * (_3980 + (-1.0))) + 1.0;
                                float _4003 = _3940 * _3979;
                                float _4004 = _4003 * _4003;
                                float _4010 = ((1.0 - _4004) * dot(vec3(_1249, _1252, _1255), vec3(_3927, _3928, _3929))) + _4004;
                                float _5182 = isnan(0.0) ? _4010 : (isnan(_4010) ? 0.0 : max(_4010, 0.0));
                                float _4011 = isnan(1.0) ? _5182 : (isnan(_5182) ? 1.0 : min(_5182, 1.0));
                                float _4012 = 1.0 - _3979;
                                float _4022 = (0.5 / (((_4011 * ((_3994 * _4012) + _3979)) + 9.9999999392252902907785028219223e-09) + (((_4011 * _4012) + _3979) * _3994))) * _4011;
                                float _5193 = isnan(0.0) ? _4022 : (isnan(_4022) ? 0.0 : max(_4022, 0.0));
                                float _4032 = (_3957 * _3934) * (((_3980 * 3.1415927410125732421875) * (isnan(1.0) ? _5193 : (isnan(_5193) ? 1.0 : min(_5193, 1.0)))) / ((_4002 * _4002) * ((_3947 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3958 * _3804.y;
                                frontier_phi_83_pred_1 = _3958 * _3804.x;
                                frontier_phi_83_pred_2 = _4032 * _3816.z;
                                frontier_phi_83_pred_3 = _4032 * _3816.y;
                                frontier_phi_83_pred_4 = _4032 * _3816.x;
                                frontier_phi_83_pred_5 = _3958 * _3804.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4040 = frontier_phi_83_pred;
                            _4039 = frontier_phi_83_pred_1;
                            _4038 = frontier_phi_83_pred_2;
                            _4037 = frontier_phi_83_pred_3;
                            _4036 = frontier_phi_83_pred_4;
                            _4041 = frontier_phi_83_pred_5;
                            _3746 = _4039 + _3759;
                            _3747 = _4040 + _3760;
                            _3748 = _4041 + _3761;
                            _3743 = _4036 + _3756;
                            _3744 = _4037 + _3757;
                            _3745 = _4038 + _3758;
                            if (_3763 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3756 = _3743;
                                _3757 = _3744;
                                _3758 = _3745;
                                _3759 = _3746;
                                _3760 = _3747;
                                _3761 = _3748;
                                _3762 = _3763;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3748;
                        frontier_phi_77_pred_1 = _3747;
                        frontier_phi_77_pred_2 = _3746;
                        frontier_phi_77_pred_3 = _3745;
                        frontier_phi_77_pred_4 = _3744;
                        frontier_phi_77_pred_5 = _3743;
                    }
                    _3385 = frontier_phi_77_pred;
                    _3383 = frontier_phi_77_pred_1;
                    _3381 = frontier_phi_77_pred_2;
                    _3379 = frontier_phi_77_pred_3;
                    _3377 = frontier_phi_77_pred_4;
                    _3375 = frontier_phi_77_pred_5;
                    uint _3541 = _3540 + 1u;
                    if (_3541 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3534 = _3375;
                        _3535 = _3377;
                        _3536 = _3379;
                        _3537 = _3381;
                        _3538 = _3383;
                        _3539 = _3385;
                        _3540 = _3541;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3379;
                frontier_phi_58_59_ladder_1 = _3385;
                frontier_phi_58_59_ladder_2 = _3383;
                frontier_phi_58_59_ladder_3 = _3381;
                frontier_phi_58_59_ladder_4 = _3377;
                frontier_phi_58_59_ladder_5 = _3375;
            }
            else
            {
                frontier_phi_58_59_ladder = _3250;
                frontier_phi_58_59_ladder_1 = _3256;
                frontier_phi_58_59_ladder_2 = _3254;
                frontier_phi_58_59_ladder_3 = _3252;
                frontier_phi_58_59_ladder_4 = _3248;
                frontier_phi_58_59_ladder_5 = _3246;
            }
            _3374 = frontier_phi_58_59_ladder_5;
            _3376 = frontier_phi_58_59_ladder_4;
            _3378 = frontier_phi_58_59_ladder;
            _3380 = frontier_phi_58_59_ladder_3;
            _3382 = frontier_phi_58_59_ladder_2;
            _3384 = frontier_phi_58_59_ladder_1;
        }
        float _3389 = isnan(1.0) ? _1353 : (isnan(_1353) ? 1.0 : min(_1353, 1.0));
        _3129 = (_3389 * _3380) + _2562;
        _3131 = (_3389 * _3382) + _2564;
        _3133 = (_3389 * _3384) + _2566;
        _3135 = ((_3374 * _1338) * _3389) + _2910;
        _3137 = ((_3376 * _1340) * _3389) + _2912;
        _3139 = ((_3378 * _1341) * _3389) + _2914;
    }
    else
    {
        _3129 = _2562;
        _3131 = _2564;
        _3133 = _2566;
        _3135 = _2910;
        _3137 = _2912;
        _3139 = _2914;
    }
    uint _3145 = _1282 + uint(cbMatDynParam._m0[0u].w);
    float _3151 = (((((cbMtdParam._m0[22u].x * _1050.x) * cbMtdParam._m0[32u].x) * _1073) + _826) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3145].x;
    float _3152 = (((((cbMtdParam._m0[22u].y * _1050.y) * cbMtdParam._m0[32u].x) * _1073) + _827) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3145].y;
    float _3153 = (((((cbMtdParam._m0[22u].z * _1050.z) * cbMtdParam._m0[32u].x) * _1073) + _828) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3145].z;
    float _5209 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _5220 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _5231 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _3170 = (((isnan(1.0) ? _5209 : (isnan(_5209) ? 1.0 : min(_5209, 1.0))) * (_3129 + ((isnan(0.0) ? _2104 : (isnan(_2104) ? 0.0 : max(_2104, 0.0))) * _1353))) + ((_3135 + ((isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0))) * _2181)) * cbPerFrame._m0[3u].x)) + _3151;
    float _3172 = (_3152 + ((_3137 + ((isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0))) * _2181)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5220 : (isnan(_5220) ? 1.0 : min(_5220, 1.0))) * (_3131 + ((isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0))) * _1353)));
    float _3174 = (_3153 + ((_3139 + ((isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0))) * _2181)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0))) * (_3133 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1353)));
    float _3175 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
    float _3176 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
    float _3177 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
    float _3183 = cbMtdParam._m0[2u].x * _3151;
    float _3184 = cbMtdParam._m0[2u].y * _3152;
    float _3185 = cbMtdParam._m0[2u].z * _3153;
    float _5257 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3187 = isnan(1.0) ? _5257 : (isnan(_5257) ? 1.0 : min(_5257, 1.0));
    uint _3188 = _1281 + 6u;
    float _3196 = _1226 / cbSceneParam._m0[86u].x;
    float _3197 = _1227 / cbSceneParam._m0[86u].y;
    vec4 _3211 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3196, _3197, (log2((isnan(cbSceneParam._m0[77u].w) ? _1169 : (isnan(_1169) ? cbSceneParam._m0[77u].w : min(_1169, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3213 = _3211.x;
    float _3214 = _3211.y;
    float _3215 = _3211.z;
    float _3216 = _3211.w;
    float _3308;
    float _3310;
    float _3312;
    float _3314;
    if (_1169 > cbSceneParam._m0[78u].w)
    {
        float _3271 = isnan(_1169) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1169 : min(cbSceneParam._m0[80u].w, _1169));
        float _3272 = _3271 / _1169;
        float _3283 = _3272 * _1199;
        float _3284 = _1200 * _3272;
        float _3285 = (-0.0) - _3284;
        float _3286 = _3272 * _1201;
        float _3288 = (cbSceneParam._m0[77u].w * _3285) / _3271;
        float _3289 = _3288 + cbSceneParam._m0[79u].w;
        float _3290 = cbSceneParam._m0[79u].w - _3284;
        float _3296 = sqrt(((_3283 * _3283) + (_3284 * _3284)) + (_3286 * _3286));
        float _3299 = (1.0 - (cbSceneParam._m0[77u].w / _3271)) * _3296;
        float _3304 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3306 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3491;
        if (abs((_3285 - _3288) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3491 = ((((_3289 > 0.0) ? exp2(_3304 * _3289) : (2.0 - exp2(_3306 * _3289))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3299;
        }
        else
        {
            float _3435 = 1.0 / cbSceneParam._m0[80u].x;
            float _3436 = isnan(_3290) ? _3289 : (isnan(_3289) ? _3290 : max(_3289, _3290));
            float _3437 = isnan(_3290) ? _3289 : (isnan(_3289) ? _3290 : min(_3289, _3290));
            float _3446 = isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : min(_3436, 0.0));
            float _3447 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : min(_3437, 0.0));
            _3491 = ((abs(_3296 / _3285) * cbSceneParam._m0[80u].y) * ((((_3446 - _3447) * 2.0) - ((exp2(_3304 * (isnan(0.0) ? _3436 : (isnan(_3436) ? 0.0 : max(_3436, 0.0)))) - exp2(_3304 * (isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0))))) * _3435)) - ((exp2(_3306 * _3446) - exp2(_3306 * _3447)) * _3435))) + (_3299 * cbSceneParam._m0[80u].z);
        }
        vec4 _3493 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3196, _3197, 1.0), 0.0);
        float _3502 = exp2((_3491 * (-1.44269502162933349609375)) * (1.0 - _3493.w));
        float _3503 = log2(_3502);
        float _3519 = log2(_3216);
        _3308 = (exp2(_3519 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].x)) * _3493.x) / cbSceneParam._m0[78u].x)) + _3213;
        _3310 = (exp2(_3519 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].y)) * _3493.y) / cbSceneParam._m0[78u].y)) + _3214;
        _3312 = (exp2(_3519 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3503 * cbSceneParam._m0[78u].z)) * _3493.z) / cbSceneParam._m0[78u].z)) + _3215;
        _3314 = _3502 * _3216;
    }
    else
    {
        _3308 = _3213;
        _3310 = _3214;
        _3312 = _3215;
        _3314 = _3216;
    }
    bool _3529;
    vec4 _3323;
    vec4 _3345;
    float _3347;
    float _3351;
    float _3352;
    float _3353;
    float _3356;
    float _3359;
    float _3362;
    float _3363;
    bool _3373;
    for (;;)
    {
        _3323 = cbMatDynParam._m0[0u];
        float _3325 = roundEven(_3323.y);
        bool _3326 = _3325 == 3.0;
        float _3327 = log2(_3314);
        float _3331 = exp2(_3327 * cbSceneParam._m0[78u].x);
        float _3332 = exp2(_3327 * cbSceneParam._m0[78u].y);
        float _3333 = exp2(_3327 * cbSceneParam._m0[78u].z);
        float _3334 = _3331 * _3175;
        float _3335 = _3332 * _3176;
        float _3336 = _3333 * _3177;
        float _3343 = _1215 + (-0.5);
        _3345 = cbMtdParam._m0[1u];
        _3347 = _3345.y * _3343;
        float _3350 = (_3325 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3351 = _3350 * (_3326 ? _3334 : (_3334 + (cbSceneParam._m0[72u].w * _3308)));
        _3352 = _3350 * (_3326 ? _3335 : (_3335 + (cbSceneParam._m0[72u].w * _3310)));
        _3353 = _3350 * (_3326 ? _3336 : (_3336 + (cbSceneParam._m0[72u].w * _3312)));
        _3356 = ((_3183 * _3187) * _3331) * _3350;
        _3359 = ((_3184 * _3187) * _3332) * _3350;
        _3362 = ((_3185 * _3187) * _3333) * _3350;
        _3363 = _3343 * 0.999000012874603271484375;
        _3373 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3373)
        {
            if ((cbInstanceData._m0[_1281 + 7u].x + _3363) < 0.5)
            {
                _3529 = true;
                break;
            }
        }
        uint _3470 = _1282 + uint(_3323.w);
        if ((cbInstanceData._m0[_3470].w < 1.0) && ((cbInstanceData._m0[_3470].w + _3363) < 0.5))
        {
            _3529 = true;
            break;
        }
        if ((_3347 + 1.0) < _3345.x)
        {
            _3529 = true;
            break;
        }
        _3529 = false;
        break;
    }
    float _3734;
    if (_3529)
    {
        discard_state = true;
        _3734 = 0.0;
    }
    else
    {
        _3734 = cbInstanceData._m0[_3188].w;
    }
    SV_Target.x = _3351;
    SV_Target.y = _3352;
    SV_Target.z = _3353;
    SV_Target.w = _3734;
    SV_Target_1.x = _3356;
    SV_Target_1.y = _3359;
    SV_Target_1.z = _3362;
    SV_Target_1.w = cbInstanceData._m0[_3188].w;
    discard_exit();
}


