#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1522;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _272 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_259 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _277 = _272.z;
    float _278 = _272.w;
    vec4 _300 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _259) + cbTextureTilingScale._m0[11u].w));
    float _305 = _300.w;
    float _317 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _277) * exp2(log2(1.0 - _305) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _318 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _319 = isnan(1.0) ? _318 : (isnan(_318) ? 1.0 : min(_318, 1.0));
    vec4 _333 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _259) + cbTextureTilingScale._m0[2u].w));
    float _343 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _351 = (_343 - (((_333.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _343))) * (cbMtdParam._m0[36u].w + 1.0);
    float _3893 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _354 = _319 - (_352 * _319);
    float _355 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    vec4 _369 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _372 = _369.y;
    float _373 = _372 * (isnan(1.0) ? _355 : (isnan(_355) ? 1.0 : min(_355, 1.0)));
    float _382 = exp2(log2(cbMtdParam._m0[32u].w * _305) * cbMtdParam._m0[31u].z);
    float _384 = _382 - (_352 * _382);
    float _385 = isnan(0.0) ? _384 : (isnan(_384) ? 0.0 : max(_384, 0.0));
    float _386 = isnan(1.0) ? _385 : (isnan(_385) ? 1.0 : min(_385, 1.0));
    float _397 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_278) * 4.5));
    float _406 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _277) * _397)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _407 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _408 = isnan(1.0) ? _407 : (isnan(_407) ? 1.0 : min(_407, 1.0));
    float _419 = exp2(log2((1.0 - (((_397 * _397) * _277) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _420 = isnan(0.0) ? _419 : (isnan(_419) ? 0.0 : max(_419, 0.0));
    float _424 = (((isnan(1.0) ? _420 : (isnan(_420) ? 1.0 : min(_420, 1.0))) - _278) * _372) + _278;
    vec4 _436 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _259) + cbTextureTilingScale._m0[5u].w));
    float _449 = (_369.x + (-0.02500000037252902984619140625)) * 8.0;
    float _451 = roundEven(_449);
    float _452 = cbMtdParam._m0[10u].x * _436.x;
    float _453 = cbMtdParam._m0[10u].y * _436.y;
    float _454 = cbMtdParam._m0[10u].z * _436.z;
    vec4 _466 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _259) + cbTextureTilingScale._m0[1u].w));
    float _477 = cbMtdParam._m0[9u].x * _466.x;
    float _478 = cbMtdParam._m0[9u].y * _466.y;
    float _479 = cbMtdParam._m0[9u].z * _466.z;
    float _486 = ((_477 - _452) * _424) + _452;
    float _487 = ((_478 - _453) * _424) + _453;
    float _488 = ((_479 - _454) * _424) + _454;
    vec4 _500 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _259) + cbTextureTilingScale._m0[6u].w));
    float _520 = (((cbMtdParam._m0[20u].x * _500.x) - _486) * _408) + _486;
    float _521 = (((cbMtdParam._m0[20u].y * _500.y) - _487) * _408) + _487;
    float _522 = (((cbMtdParam._m0[20u].z * _500.z) - _488) * _408) + _488;
    vec4 _534 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _259) + cbTextureTilingScale._m0[9u].w));
    float _554 = (((cbMtdParam._m0[29u].x * _534.x) - _520) * _386) + _520;
    float _555 = (((cbMtdParam._m0[29u].y * _534.y) - _521) * _386) + _521;
    float _556 = (((cbMtdParam._m0[29u].z * _534.z) - _522) * _386) + _522;
    float _196[6];
    float _197[6];
    float _198[6];
    _196[0u] = cbMtdParam._m0[30u].x;
    _197[0u] = cbMtdParam._m0[30u].y;
    _198[0u] = cbMtdParam._m0[30u].z;
    _196[1u] = cbMtdParam._m0[28u].x;
    _197[1u] = cbMtdParam._m0[28u].y;
    _198[1u] = cbMtdParam._m0[28u].z;
    _196[2u] = cbMtdParam._m0[27u].x;
    _197[2u] = cbMtdParam._m0[27u].y;
    _198[2u] = cbMtdParam._m0[27u].z;
    _196[3u] = cbMtdParam._m0[26u].x;
    _197[3u] = cbMtdParam._m0[26u].y;
    _198[3u] = cbMtdParam._m0[26u].z;
    _196[4u] = cbMtdParam._m0[25u].x;
    _197[4u] = cbMtdParam._m0[25u].y;
    _198[4u] = cbMtdParam._m0[25u].z;
    _196[5u] = cbMtdParam._m0[24u].x;
    _197[5u] = cbMtdParam._m0[24u].y;
    _198[5u] = cbMtdParam._m0[24u].z;
    float _625 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    uint _628 = uint(int(isnan(5.0) ? _625 : (isnan(_625) ? 5.0 : min(_625, 5.0))));
    float _635 = _196[_628] * _372;
    float _636 = _197[_628] * _372;
    float _637 = _198[_628] * _372;
    float _638 = _635 + ((_300.x * 4.5) * (((_477 - _554) * _373) + _554));
    float _639 = _636 + ((_300.y * 4.5) * (((_478 - _555) * _373) + _555));
    float _640 = _637 + ((_300.z * 4.5) * (((_479 - _556) * _373) + _556));
    float _191[5];
    float _192[5];
    _191[0u] = cbMtdParam._m0[37u].w;
    _192[0u] = cbMtdParam._m0[38u].x;
    _191[1u] = cbMtdParam._m0[39u].w;
    _192[1u] = cbMtdParam._m0[40u].x;
    _191[2u] = cbMtdParam._m0[40u].y;
    _192[2u] = cbMtdParam._m0[40u].z;
    _191[3u] = cbMtdParam._m0[40u].w;
    _192[3u] = cbMtdParam._m0[41u].x;
    _191[4u] = cbMtdParam._m0[41u].y;
    _192[4u] = cbMtdParam._m0[41u].z;
    float _673 = roundEven(5.0 - _449);
    float _674 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _675 = isnan(4.0) ? _674 : (isnan(_674) ? 4.0 : min(_674, 4.0));
    float _677 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    uint _679 = uint(int(isnan(4.0) ? _677 : (isnan(_677) ? 4.0 : min(_677, 4.0))));
    float _691 = ((cbMtdParam._m0[42u].z - _192[_679]) * _424) + _192[_679];
    float _699 = ((cbMtdParam._m0[43u].x - _691) * _408) + _691;
    float _704 = ((cbMtdParam._m0[43u].z - _699) * _386) + _699;
    float _709 = ((cbMtdParam._m0[39u].z - _704) * _373) + _704;
    vec4 _723 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _259) + cbTextureTilingScale._m0[7u].w));
    float _725 = _723.x;
    float _726 = _723.y;
    float _728 = _723.z + _191[_679];
    vec4 _740 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _259) + cbTextureTilingScale._m0[10u].w));
    float _748 = (((cbMtdParam._m0[42u].y - _728) + _740.z) * _424) + _728;
    vec4 _761 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _259) + cbTextureTilingScale._m0[12u].w));
    float _769 = (((cbMtdParam._m0[42u].w - _748) + _761.z) * _408) + _748;
    float _775 = ((((_277 * 2.0) * _769) - _769) * cbMtdParam._m0[34u].x) + _769;
    vec4 _788 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _259) + cbTextureTilingScale._m0[13u].w));
    float _796 = (((_788.z + cbMtdParam._m0[43u].y) - _775) * _386) + _775;
    float _800 = (((cbMtdParam._m0[39u].y + _333.z) - _796) * _373) + _796;
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _862 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_831 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_835 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _877 = (-0.0) - ((_835 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _881 = (_835 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _882 = isnan(_881) ? _877 : (isnan(_877) ? _881 : min(_877, _881));
    float _3979 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _883 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
    float _911 = ((_740.x - _725) * _424) + _725;
    float _912 = ((_740.y - _726) * _424) + _726;
    float _917 = ((_761.x - _911) * _408) + _911;
    float _918 = ((_761.y - _912) * _408) + _912;
    float _923 = ((_788.x - _917) * _386) + _917;
    float _924 = ((_788.y - _918) * _386) + _918;
    float _933 = ((((_333.x - _923) * _373) + _923) * 2.0) + (-1.0);
    float _934 = ((((_333.y - _924) * _373) + _924) * 2.0) + (-1.0);
    float _935 = dot(vec2(_933, _934), vec2(_933, _934));
    float _3990 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _940 = sqrt(1.0 - (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))));
    float _943 = (cbMtdParam._m0[34u].z * ((_272.x * 2.0) + (-1.0))) + _933;
    float _944 = (cbMtdParam._m0[34u].z * ((_272.y * 2.0) + (-1.0))) + _934;
    float _947 = fma(_940, _238 * NORMAL.x, fma(_944, _245 * TANGENT.x, (_231 * _223) * _943));
    float _950 = fma(_940, _238 * NORMAL.y, fma(_944, _245 * TANGENT.y, (_231 * _224) * _943));
    float _953 = fma(_940, _238 * NORMAL.z, fma(_944, _245 * TANGENT.z, (_231 * _225) * _943));
    float _957 = inversesqrt(dot(vec3(_947, _950, _953), vec3(_947, _950, _953)));
    float _958 = _957 * _947;
    float _959 = _957 * _950;
    float _960 = _957 * _953;
    float _4001 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _961 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _4012 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _4023 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _4034 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _4045 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _965 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _981 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1001 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1011 = cbSceneParam._m0[71u].x - (_831 / _1001);
    float _1012 = cbSceneParam._m0[71u].y - (_835 / _1001);
    float _1013 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1001);
    float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
    float _1018 = _1011 * _1017;
    float _1019 = _1012 * _1017;
    float _1020 = _1013 * _1017;
    float _1026 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1027 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1029 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1031 = _1029.w;
    float _1049 = fma(_960, cbSceneParam._m0[5u].z, fma(_959, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _958));
    float _1052 = fma(_960, cbSceneParam._m0[6u].z, fma(_959, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _958));
    float _1055 = fma(_960, cbSceneParam._m0[7u].z, fma(_959, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _958));
    vec4 _1057 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1068 = (((_1057.y - _961) + (_1057.w * _961)) * cbMtdParam._m0[3u].x) + _961;
    uint _1081 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1082 = _1081 + 9u;
    uint _1083 = _1082 + uint(cbMatDynParam._m0[0u].w);
    float _1089 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_1083].x;
    float _1090 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_1083].y;
    float _1091 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0)))) * cbInstanceData._m0[_1083].z;
    float _4056 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
    float _1092 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _4067 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
    float _1093 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
    float _1094 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    vec4 _1095 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1100 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1111 = (((_1100.x - _965) + (_1100.w * _965)) * cbMtdParam._m0[3u].x) + _965;
    float _1124 = (cbMtdParam._m0[3u].x * (((_1092 * _1031) - _1092) + _1095.x)) + _1092;
    float _1125 = (cbMtdParam._m0[3u].x * (((_1093 * _1031) - _1093) + _1095.y)) + _1093;
    float _1126 = (cbMtdParam._m0[3u].x * (((_1094 * _1031) - _1094) + _1095.z)) + _1094;
    float _1127 = 1.0 - _1111;
    float _1128 = _1127 * _1124;
    float _1129 = _1127 * _1125;
    float _1130 = _1127 * _1126;
    float _1135 = (_1124 + (-0.039999999105930328369140625)) * _1111;
    float _1136 = (_1125 + (-0.039999999105930328369140625)) * _1111;
    float _1137 = (_1126 + (-0.039999999105930328369140625)) * _1111;
    float _1138 = _1135 + 0.039999999105930328369140625;
    float _1140 = _1136 + 0.039999999105930328369140625;
    float _1141 = _1137 + 0.039999999105930328369140625;
    vec4 _1150 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1026, cbSceneParam._m0[86u].y * _1027));
    float _1153 = _1150.x * TEXCOORD_5.w;
    float _1154 = dot(vec3(_958, _959, _960), vec3(_1018, _1019, _1020));
    float _1157 = _1154 * 2.0;
    float _1161 = (_1157 * _958) - _1018;
    float _1162 = (_1157 * _959) - _1019;
    float _1163 = (_1157 * _960) - _1020;
    float _1167 = abs(dot(vec3(_1018, _1019, _1020), vec3(_958, _959, _960)));
    float _4089 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
    float _1169 = sqrt(_1068);
    float _1180 = exp2((_1169 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1169 * 3.0));
    float _1186 = (1.0 - _1180) * ((_1169 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1187 = _1180 * _1169;
    float _1215 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1219 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1223 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1521;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1248 = fma(_1223, cbModelParam._m0[26u].z, fma(_1219, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1215));
        float _1252 = fma(_1223, cbModelParam._m0[27u].z, fma(_1219, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1215));
        float _1256 = fma(_1223, cbModelParam._m0[28u].z, fma(_1219, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1215));
        float _1280 = _1215 + _958;
        float _1281 = _1219 + _959;
        float _1282 = _1223 + _960;
        float _1292 = fma(_1282, cbModelParam._m0[26u].z, fma(_1281, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1280)) - _1248;
        float _1293 = fma(_1282, cbModelParam._m0[27u].z, fma(_1281, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1280)) - _1252;
        float _1294 = fma(_1282, cbModelParam._m0[28u].z, fma(_1281, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1280)) - _1256;
        float _1298 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
        float _1310 = ((_1298 * _1292) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1248 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1311 = ((_1298 * _1293) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1252 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1312 = ((_1298 * _1294) / cbModelParam._m0[34u].z) + ((((((_1256 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1315 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1310, _1311, _1312), 0.0);
        float _1349 = exp2((_1315.w + (-0.5)) * 20.0) * 2.0;
        float _1350 = _1349 * (_1315.x + (-0.5));
        float _1351 = _1349 * (_1315.y + (-0.5));
        float _1352 = _1349 * (_1315.z + (-0.5));
        float _1359 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1360 = _1359 * (_1322.x + (-0.5));
        float _1361 = _1359 * (_1322.y + (-0.5));
        float _1362 = _1359 * (_1322.z + (-0.5));
        float _1369 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1370 = _1369 * (_1329.x + (-0.5));
        float _1371 = _1369 * (_1329.y + (-0.5));
        float _1372 = _1369 * (_1329.z + (-0.5));
        float _1379 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1380 = _1379 * (_1336.x + (-0.5));
        float _1381 = _1379 * (_1336.y + (-0.5));
        float _1382 = _1379 * (_1336.z + (-0.5));
        float _1383 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = _1350 * 0.5;
        float _1387 = _1360 * 0.5;
        float _1388 = _1370 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1403 = (dot(vec3(_958, _959, _960), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _4115 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1413 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1383 + 9.9999997473787516355514526367188e-06);
        float _4126 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1414 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
        float _1415 = _1414 * 2.0;
        float _1419 = (1.0 - _1414) / (_1414 + 1.0);
        float _4137 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1429 = ((((1.0 - _1420) * (_1415 + 2.0)) * exp2(log2(isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0))) * (_1415 + 1.0))) + _1420) * _1383;
        float _1430 = _1351 * 0.5;
        float _1431 = _1361 * 0.5;
        float _1432 = _1371 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1446 = (dot(vec3(_958, _959, _960), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1455 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1456 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1457 = _1456 * 2.0;
        float _1461 = (1.0 - _1456) / (_1456 + 1.0);
        float _4170 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1471 = ((((1.0 - _1462) * (_1457 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1457 + 1.0))) + _1462) * _1384;
        float _1472 = _1352 * 0.5;
        float _1473 = _1362 * 0.5;
        float _1474 = _1372 * 0.5;
        float _1475 = dot(vec3(_1472, _1473, _1474), vec3(_1472, _1473, _1474));
        float _1480 = (_1475 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1475);
        float _1488 = (dot(vec3(_958, _959, _960), vec3(_1480 * _1472, _1480 * _1473, _1480 * _1474)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1497 = sqrt(((_1473 * _1473) + (_1472 * _1472)) + (_1474 * _1474)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1498 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1499 = _1498 * 2.0;
        float _1503 = (1.0 - _1498) / (_1498 + 1.0);
        float _4203 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1513 = ((((1.0 - _1504) * (_1499 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1499 + 1.0))) + _1504) * _1385;
        _1521 = _1352;
        _1523 = _1351;
        _1524 = _1350;
        _1525 = _1362;
        _1526 = _1361;
        _1527 = _1360;
        _1528 = _1372;
        _1529 = _1371;
        _1530 = _1370;
        _1531 = _1385;
        _1532 = _1384;
        _1533 = _1383;
        _1534 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)));
        _1535 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0)));
        _1536 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    }
    else
    {
        _1521 = _1522;
        _1523 = _1522;
        _1524 = _1522;
        _1525 = _1522;
        _1526 = _1522;
        _1527 = _1522;
        _1528 = _1522;
        _1529 = _1522;
        _1530 = _1522;
        _1531 = _1522;
        _1532 = _1522;
        _1533 = _1522;
        _1534 = 0.0;
        _1535 = 0.0;
        _1536 = 0.0;
    }
    float _1826;
    float _1827;
    float _1828;
    float _1829;
    float _1830;
    float _1831;
    float _1832;
    float _1833;
    float _1834;
    float _1835;
    float _1836;
    float _1837;
    float _1838;
    float _1839;
    float _1840;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1559 = fma(_1223, cbModelParam._m0[30u].z, fma(_1219, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215));
        float _1563 = fma(_1223, cbModelParam._m0[31u].z, fma(_1219, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215));
        float _1567 = fma(_1223, cbModelParam._m0[32u].z, fma(_1219, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215));
        float _1589 = _1215 + _958;
        float _1590 = _1219 + _959;
        float _1591 = _1223 + _960;
        float _1601 = fma(_1591, cbModelParam._m0[30u].z, fma(_1590, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1589)) - _1559;
        float _1602 = fma(_1591, cbModelParam._m0[31u].z, fma(_1590, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1589)) - _1563;
        float _1603 = fma(_1591, cbModelParam._m0[32u].z, fma(_1590, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1589)) - _1567;
        float _1607 = inversesqrt(dot(vec3(_1601, _1602, _1603), vec3(_1601, _1602, _1603)));
        float _1619 = ((_1607 * _1601) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1559 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1620 = ((_1607 * _1602) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1563 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1621 = ((_1607 * _1603) / cbModelParam._m0[35u].z) + ((((((_1567 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1623 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1630 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1637 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        vec4 _1644 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1619, _1620, _1621), 0.0);
        float _1656 = exp2((_1623.w + (-0.5)) * 20.0) * 2.0;
        float _1657 = _1656 * (_1623.x + (-0.5));
        float _1658 = _1656 * (_1623.y + (-0.5));
        float _1659 = _1656 * (_1623.z + (-0.5));
        float _1666 = exp2((_1630.w + (-0.5)) * 20.0) * 2.0;
        float _1667 = _1666 * (_1630.x + (-0.5));
        float _1668 = _1666 * (_1630.y + (-0.5));
        float _1669 = _1666 * (_1630.z + (-0.5));
        float _1676 = exp2((_1637.w + (-0.5)) * 20.0) * 2.0;
        float _1677 = _1676 * (_1637.x + (-0.5));
        float _1678 = _1676 * (_1637.y + (-0.5));
        float _1679 = _1676 * (_1637.z + (-0.5));
        float _1686 = exp2((_1644.w + (-0.5)) * 20.0) * 2.0;
        float _1687 = _1686 * (_1644.x + (-0.5));
        float _1688 = _1686 * (_1644.y + (-0.5));
        float _1689 = _1686 * (_1644.z + (-0.5));
        float _1690 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1691 = isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0));
        float _1692 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1693 = _1657 * 0.5;
        float _1694 = _1667 * 0.5;
        float _1695 = _1677 * 0.5;
        float _1696 = dot(vec3(_1693, _1694, _1695), vec3(_1693, _1694, _1695));
        float _1701 = (_1696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1696);
        float _1709 = (dot(vec3(_958, _959, _960), vec3(_1701 * _1693, _1701 * _1694, _1701 * _1695)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
        float _1718 = sqrt(((_1694 * _1694) + (_1693 * _1693)) + (_1695 * _1695)) / (_1690 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1720 = _1719 * 2.0;
        float _1724 = (1.0 - _1719) / (_1719 + 1.0);
        float _4266 = isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0));
        float _1725 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1734 = ((((1.0 - _1725) * (_1720 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1720 + 1.0))) + _1725) * _1690;
        float _1735 = _1658 * 0.5;
        float _1736 = _1668 * 0.5;
        float _1737 = _1678 * 0.5;
        float _1738 = dot(vec3(_1735, _1736, _1737), vec3(_1735, _1736, _1737));
        float _1743 = (_1738 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1738);
        float _1751 = (dot(vec3(_958, _959, _960), vec3(_1743 * _1735, _1743 * _1736, _1743 * _1737)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0));
        float _1760 = sqrt(((_1736 * _1736) + (_1735 * _1735)) + (_1737 * _1737)) / (_1691 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
        float _1761 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1762 = _1761 * 2.0;
        float _1766 = (1.0 - _1761) / (_1761 + 1.0);
        float _4299 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
        float _1767 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1776 = ((((1.0 - _1767) * (_1762 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1762 + 1.0))) + _1767) * _1691;
        float _1777 = _1659 * 0.5;
        float _1778 = _1669 * 0.5;
        float _1779 = _1679 * 0.5;
        float _1780 = dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779));
        float _1785 = (_1780 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1780);
        float _1793 = (dot(vec3(_958, _959, _960), vec3(_1785 * _1777, _1785 * _1778, _1785 * _1779)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0));
        float _1802 = sqrt(((_1778 * _1778) + (_1777 * _1777)) + (_1779 * _1779)) / (_1692 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        float _1803 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1804 = _1803 * 2.0;
        float _1808 = (1.0 - _1803) / (_1803 + 1.0);
        float _4332 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
        float _1809 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1818 = ((((1.0 - _1809) * (_1804 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1804 + 1.0))) + _1809) * _1692;
        _1826 = _1659;
        _1827 = _1658;
        _1828 = _1657;
        _1829 = _1669;
        _1830 = _1668;
        _1831 = _1667;
        _1832 = _1679;
        _1833 = _1678;
        _1834 = _1677;
        _1835 = _1692;
        _1836 = _1691;
        _1837 = _1690;
        _1838 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0)));
        _1839 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0)));
        _1840 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0)));
    }
    else
    {
        _1826 = _1522;
        _1827 = _1522;
        _1828 = _1522;
        _1829 = _1522;
        _1830 = _1522;
        _1831 = _1522;
        _1832 = _1522;
        _1833 = _1522;
        _1834 = _1522;
        _1835 = _1522;
        _1836 = _1522;
        _1837 = _1522;
        _1838 = 0.0;
        _1839 = 0.0;
        _1840 = 0.0;
    }
    float _1850 = (cbModelParam._m0[1u].x * (_1838 - _1534)) + _1534;
    float _1851 = (cbModelParam._m0[1u].x * (_1839 - _1535)) + _1535;
    float _1852 = (cbModelParam._m0[1u].x * (_1840 - _1536)) + _1536;
    float _1873 = fma(_1852, cbSceneParam._m0[89u].z, fma(_1851, cbSceneParam._m0[89u].y, _1850 * cbSceneParam._m0[89u].x));
    float _1876 = fma(_1852, cbSceneParam._m0[90u].z, fma(_1851, cbSceneParam._m0[90u].y, _1850 * cbSceneParam._m0[90u].x));
    float _1879 = fma(_1852, cbSceneParam._m0[91u].z, fma(_1851, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1850));
    float _1892 = _1161 * 0.5;
    float _1893 = _1162 * 0.5;
    float _1894 = _1163 * 0.5;
    float _1895 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1828, _1831, _1834, _1837));
    float _1898 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1827, _1830, _1833, _1836));
    float _1901 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1826, _1829, _1832, _1835));
    float _1935;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1908 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1521, _1525, _1528, _1531));
        float _1912 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1523, _1526, _1529, _1532));
        float _1916 = dot(vec4(_1892, _1893, _1894, 1.0), vec4(_1524, _1527, _1530, _1533));
        float _1923 = dot(vec4(cbModelParam._m0[39u]), vec4(_1892, _1893, _1894, 1.0));
        _1935 = dot(vec3(isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0)), isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)), isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1923) ? 0.0 : (isnan(0.0) ? _1923 : max(0.0, _1923))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1935 = 1.0;
    }
    float _1946;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1937 = dot(vec4(cbModelParam._m0[40u]), vec4(_1892, _1893, _1894, 1.0));
        _1946 = dot(vec3(isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0)), isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0)), isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1937) ? 0.0 : (isnan(0.0) ? _1937 : max(0.0, _1937))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1946 = 1.0;
    }
    float _1950 = (_1946 * cbModelParam._m0[1u].x) + (_1935 * (1.0 - cbModelParam._m0[1u].x));
    float _1960 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1068);
    float _1961 = isnan(_1960) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1960 : min(cbModelParam._m0[25u].z, _1960));
    float _2043;
    float _2045;
    float _2047;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2010 = fma(_1223, cbModelParam._m0[13u].z, fma(_1219, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1215)) + cbModelParam._m0[13u].w;
        float _2014 = fma(_1223, cbModelParam._m0[14u].z, fma(_1219, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1215)) + cbModelParam._m0[14u].w;
        float _2018 = fma(_1223, cbModelParam._m0[15u].z, fma(_1219, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1215)) + cbModelParam._m0[15u].w;
        float _2021 = fma(_1163, cbModelParam._m0[13u].z, fma(_1162, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1161));
        float _2024 = fma(_1163, cbModelParam._m0[14u].z, fma(_1162, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1161));
        float _2027 = fma(_1163, cbModelParam._m0[15u].z, fma(_1162, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1161));
        float _2055;
        if (_2021 > 0.0)
        {
            _2055 = abs((1.0 - _2010) / _2021);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_2021 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_2010 + 1.0) / _2021);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _2055 = frontier_phi_14_12_ladder;
        }
        float _2260;
        if (_2024 > 0.0)
        {
            _2260 = abs((1.0 - _2014) / _2024);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_2024 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_2014 + 1.0) / _2024);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2260 = frontier_phi_23_19_ladder;
        }
        float _2514;
        if (_2027 > 0.0)
        {
            _2514 = abs((1.0 - _2018) / _2027);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_2027 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_2018 + 1.0) / _2027);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2514 = frontier_phi_35_30_ladder;
        }
        float _2516 = isnan(_2260) ? _2055 : (isnan(_2055) ? _2260 : min(_2055, _2260));
        float _2517 = isnan(_2514) ? _2516 : (isnan(_2516) ? _2514 : min(_2516, _2514));
        float _2521 = (_2517 * _2021) + _2010;
        float _2522 = (_2517 * _2024) + _2014;
        float _2523 = (_2517 * _2027) + _2018;
        float _2524 = _2517 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2524;
        float _2528 = _2524 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 > _2528) || ((_2522 < _2526) || ((_2521 < _2526) || (_2521 > _2528))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2523, cbModelParam._m0[9u].z, fma(_2522, cbModelParam._m0[9u].y, _2521 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2523, cbModelParam._m0[10u].z, fma(_2522, cbModelParam._m0[10u].y, _2521 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2523, cbModelParam._m0[11u].z, fma(_2522, cbModelParam._m0[11u].y, _2521 * cbModelParam._m0[11u].x))), _1961);
            frontier_phi_13_35_ladder = _2651.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2651.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2651.x * cbModelParam._m0[1u].y;
        }
        _2043 = frontier_phi_13_35_ladder_2;
        _2045 = frontier_phi_13_35_ladder_1;
        _2047 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _2031 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1161, _1162, _1163), _1961);
        _2043 = _2031.x * cbModelParam._m0[1u].y;
        _2045 = _2031.y * cbModelParam._m0[1u].y;
        _2047 = _2031.z * cbModelParam._m0[1u].y;
    }
    float _2051 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1068);
    float _2052 = isnan(_2051) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2051 : min(cbModelParam._m0[25u].w, _2051));
    float _2144;
    float _2146;
    float _2148;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2108 = fma(_1223, cbModelParam._m0[21u].z, fma(_1219, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1215)) + cbModelParam._m0[21u].w;
        float _2112 = fma(_1223, cbModelParam._m0[22u].z, fma(_1219, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1215)) + cbModelParam._m0[22u].w;
        float _2116 = fma(_1223, cbModelParam._m0[23u].z, fma(_1219, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1215)) + cbModelParam._m0[23u].w;
        float _2119 = fma(_1163, cbModelParam._m0[21u].z, fma(_1162, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1161));
        float _2122 = fma(_1163, cbModelParam._m0[22u].z, fma(_1162, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1161));
        float _2125 = fma(_1163, cbModelParam._m0[23u].z, fma(_1162, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1161));
        float _2265;
        if (_2119 > 0.0)
        {
            _2265 = abs((1.0 - _2108) / _2119);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_2119 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_2108 + 1.0) / _2119);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2265 = frontier_phi_25_21_ladder;
        }
        float _2541;
        if (_2122 > 0.0)
        {
            _2541 = abs((1.0 - _2112) / _2122);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_2122 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_2112 + 1.0) / _2122);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2541 = frontier_phi_37_32_ladder;
        }
        float _2754;
        if (_2125 > 0.0)
        {
            _2754 = abs((1.0 - _2116) / _2125);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_2125 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_2116 + 1.0) / _2125);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2754 = frontier_phi_46_43_ladder;
        }
        float _2756 = isnan(_2541) ? _2265 : (isnan(_2265) ? _2541 : min(_2265, _2541));
        float _2757 = isnan(_2754) ? _2756 : (isnan(_2756) ? _2754 : min(_2756, _2754));
        float _2761 = (_2757 * _2119) + _2108;
        float _2762 = (_2757 * _2122) + _2112;
        float _2763 = (_2757 * _2125) + _2116;
        float _2764 = _2757 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2764;
        float _2767 = _2764 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2763 > _2767) || ((_2763 < _2765) || ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 < _2765) || (_2761 > _2767))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2763, cbModelParam._m0[17u].z, fma(_2762, cbModelParam._m0[17u].y, _2761 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2763, cbModelParam._m0[18u].z, fma(_2762, cbModelParam._m0[18u].y, _2761 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2763, cbModelParam._m0[19u].z, fma(_2762, cbModelParam._m0[19u].y, _2761 * cbModelParam._m0[19u].x))), _2052);
            frontier_phi_22_46_ladder = _2991.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2991.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2991.x * cbModelParam._m0[1u].z;
        }
        _2144 = frontier_phi_22_46_ladder_2;
        _2146 = frontier_phi_22_46_ladder_1;
        _2148 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _2128 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1161, _1162, _1163), _2052);
        _2144 = _2128.x * cbModelParam._m0[1u].z;
        _2146 = _2128.y * cbModelParam._m0[1u].z;
        _2148 = _2128.z * cbModelParam._m0[1u].z;
    }
    float _2161 = (((_1186 * _1138) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2144 - _2043)) + _2043);
    float _2163 = (((_1186 * _1140) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2146 - _2045)) + _2045);
    float _2165 = (((_1186 * _1141) + _1187) * _1153) * ((cbModelParam._m0[1u].w * (_2148 - _2047)) + _2047);
    float _2168 = fma(_2165, cbSceneParam._m0[89u].z, fma(_2163, cbSceneParam._m0[89u].y, _2161 * cbSceneParam._m0[89u].x));
    float _2171 = fma(_2165, cbSceneParam._m0[90u].z, fma(_2163, cbSceneParam._m0[90u].y, _2161 * cbSceneParam._m0[90u].x));
    float _2174 = fma(_2165, cbSceneParam._m0[91u].z, fma(_2163, cbSceneParam._m0[91u].y, _2161 * cbSceneParam._m0[91u].x));
    uvec4 _2184 = floatBitsToUint(cbInstanceData._m0[_1081 + 5u]);
    uint _2186 = _2184.x * 14u;
    uint _2187 = _2186 + 13u;
    float _2194 = _1153 + (-1.0);
    float _2199 = (cbLight._m0[_2187].x * _2194) + 1.0;
    float _2200 = (cbLight._m0[_2187].y * _2194) + 1.0;
    float _2201 = (cbLight._m0[_2187].z * _2194) + 1.0;
    float _2202 = (cbLight._m0[_2187].w * _2194) + 1.0;
    uint _2203 = _2186 + 5u;
    float _2209 = isnan(1.0) ? _2200 : (isnan(_2200) ? 1.0 : min(_2200, 1.0));
    uint _2213 = _2186 + 4u;
    float _2219 = isnan(1.0) ? _2199 : (isnan(_2199) ? 1.0 : min(_2199, 1.0));
    uint _2223 = _2186 | 1u;
    float _2234 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_958, _959, _960));
    float _2237 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_958, _959, _960));
    float _4468 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _4479 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    float _2242 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2244 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2251 = ((cbLight._m0[_2203].x * _2209) * _2244) + ((cbLight._m0[_2213].x * _2219) * _2242);
    float _2252 = ((_2209 * cbLight._m0[_2203].y) * _2244) + ((_2219 * cbLight._m0[_2213].y) * _2242);
    float _2253 = ((_2209 * cbLight._m0[_2203].z) * _2244) + ((_2219 * cbLight._m0[_2213].z) * _2242);
    uvec4 _2257 = floatBitsToUint(cbLight._m0[_2186 + 12u]);
    bool _2259 = _2257.x == 0u;
    float _2270;
    float _2272;
    float _2274;
    if (_2259)
    {
        _2270 = _2251;
        _2272 = _2252;
        _2274 = _2253;
    }
    else
    {
        uint _2278 = _2186 + 6u;
        float _2294 = (dot(vec3(cbLight._m0[_2186 + 2u].xyz), vec3(_958, _959, _960)) * 0.5) + 0.5;
        float _2295 = _2294 * _2294;
        float _4490 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
        float _2296 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2297 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2270 = (((cbLight._m0[_2278].x * 0.3183098733425140380859375) * _2296) * _2297) + _2251;
        _2272 = (((cbLight._m0[_2278].y * 0.3183098733425140380859375) * _2296) * _2297) + _2252;
        _2274 = (((cbLight._m0[_2278].z * 0.3183098733425140380859375) * _2296) * _2297) + _2253;
    }
    bool _2277 = _2257.y == 0u;
    float _2315;
    float _2317;
    float _2319;
    if (_2277)
    {
        _2315 = _2270;
        _2317 = _2272;
        _2319 = _2274;
    }
    else
    {
        uint _2485 = _2186 + 7u;
        float _2501 = (dot(vec3(cbLight._m0[_2186 + 3u].xyz), vec3(_958, _959, _960)) * 0.5) + 0.5;
        float _2502 = _2501 * _2501;
        float _4506 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2503 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2504 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2315 = (((cbLight._m0[_2485].x * 0.3183098733425140380859375) * _2503) * _2504) + _2270;
        _2317 = (((cbLight._m0[_2485].y * 0.3183098733425140380859375) * _2503) * _2504) + _2272;
        _2319 = (((cbLight._m0[_2485].z * 0.3183098733425140380859375) * _2503) * _2504) + _2274;
    }
    uint _2322 = _2186 + 8u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2186].w)) * _1068) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2186].x + _1018;
    float _2338 = cbLight._m0[_2186].y + _1019;
    float _2339 = cbLight._m0[_2186].z + _1020;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2186].xyz));
    float _4522 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _4533 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
    float _2351 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2352 = dot(vec3(_958, _959, _960), vec3(_2344, _2345, _2346));
    float _4544 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2355 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2356 = dot(vec3(cbLight._m0[_2186].xyz), vec3(_2344, _2345, _2346));
    float _4555 = isnan(0.0) ? _2356 : (isnan(_2356) ? 0.0 : max(_2356, 0.0));
    float _2360 = _2336 * _2336;
    float _2364 = ((_2355 * _2355) * (_2360 + (-1.0))) + 1.0;
    float _2372 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
    float _2373 = 0.959999978542327880859375 - _1135;
    float _2375 = 0.959999978542327880859375 - _1136;
    float _2376 = 0.959999978542327880859375 - _1137;
    float _2383 = 1.0 - _2336;
    float _2394 = (0.5 / (((_2351 * ((_2350 * _2383) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2383) + _2336) * _2350))) * _2350;
    float _4566 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2360 / ((_2364 * _2364) * 3.141590118408203125));
    uint _2407 = _2186 + 9u;
    float _2418 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2223].w)) * _1068) * 0.949999988079071044921875);
    float _2419 = _2418 * _2418;
    float _2420 = cbLight._m0[_2223].x + _1018;
    float _2421 = cbLight._m0[_2223].y + _1019;
    float _2422 = cbLight._m0[_2223].z + _1020;
    float _2426 = inversesqrt(dot(vec3(_2420, _2421, _2422), vec3(_2420, _2421, _2422)));
    float _2427 = _2426 * _2420;
    float _2428 = _2426 * _2421;
    float _2429 = _2426 * _2422;
    float _2430 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2223].xyz));
    float _4577 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2433 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2434 = dot(vec3(_958, _959, _960), vec3(_2427, _2428, _2429));
    float _4588 = isnan(0.0) ? _2434 : (isnan(_2434) ? 0.0 : max(_2434, 0.0));
    float _2437 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2438 = dot(vec3(cbLight._m0[_2223].xyz), vec3(_2427, _2428, _2429));
    float _4599 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2442 = _2419 * _2419;
    float _2446 = ((_2437 * _2437) * (_2442 + (-1.0))) + 1.0;
    float _2453 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
    float _2460 = 1.0 - _2419;
    float _2470 = (0.5 / (((_2351 * ((_2433 * _2460) + _2419)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2460) + _2419) * _2433))) * _2433;
    float _4610 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2472 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2442 / ((_2446 * _2446) * 3.141590118408203125));
    float _2482 = (((((_2453 * _2373) + _1138) * cbLight._m0[_2407].x) * _2472) * _2209) + (((((_2372 * _2373) + _1138) * cbLight._m0[_2322].x) * _2396) * _2219);
    float _2483 = (((((_2453 * _2375) + _1140) * cbLight._m0[_2407].y) * _2472) * _2209) + (((((_2372 * _2375) + _1140) * cbLight._m0[_2322].y) * _2396) * _2219);
    float _2484 = (((((_2453 * _2376) + _1141) * cbLight._m0[_2407].z) * _2472) * _2209) + (((((_2372 * _2376) + _1141) * cbLight._m0[_2322].z) * _2396) * _2219);
    float _2546;
    float _2548;
    float _2550;
    if (_2259)
    {
        _2546 = _2482;
        _2548 = _2483;
        _2550 = _2484;
    }
    else
    {
        uint _2552 = _2186 + 2u;
        uint _2556 = _2186 + 10u;
        float _2570 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2552].w)) * _1068) * 0.949999988079071044921875);
        float _2571 = _2570 * _2570;
        float _2572 = cbLight._m0[_2552].x + _1018;
        float _2573 = cbLight._m0[_2552].y + _1019;
        float _2574 = cbLight._m0[_2552].z + _1020;
        float _2578 = inversesqrt(dot(vec3(_2572, _2573, _2574), vec3(_2572, _2573, _2574)));
        float _2579 = _2578 * _2572;
        float _2580 = _2578 * _2573;
        float _2581 = _2578 * _2574;
        float _2582 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2552].xyz));
        float _4621 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
        float _2585 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2586 = dot(vec3(_958, _959, _960), vec3(_2579, _2580, _2581));
        float _4632 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2590 = dot(vec3(cbLight._m0[_2552].xyz), vec3(_2579, _2580, _2581));
        float _4643 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2594 = _2571 * _2571;
        float _2598 = ((_2589 * _2589) * (_2594 + (-1.0))) + 1.0;
        float _2605 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
        float _2612 = 1.0 - _2571;
        float _2622 = (0.5 / (((_2351 * ((_2585 * _2612) + _2571)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2612) + _2571) * _2585))) * _2585;
        float _4654 = isnan(0.0) ? _2622 : (isnan(_2622) ? 0.0 : max(_2622, 0.0));
        float _2624 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2594 / ((_2598 * _2598) * 3.141590118408203125));
        float _2625 = isnan(1.0) ? _2201 : (isnan(_2201) ? 1.0 : min(_2201, 1.0));
        _2546 = (((((_2605 * _2373) + _1138) * cbLight._m0[_2556].x) * _2624) * _2625) + _2482;
        _2548 = (((((_2605 * _2375) + _1140) * cbLight._m0[_2556].y) * _2624) * _2625) + _2483;
        _2550 = (((((_2605 * _2376) + _1141) * cbLight._m0[_2556].z) * _2624) * _2625) + _2484;
    }
    float _2660;
    float _2662;
    float _2664;
    if (_2277)
    {
        _2660 = _2546;
        _2662 = _2548;
        _2664 = _2550;
    }
    else
    {
        uint _2671 = _2186 + 3u;
        uint _2675 = _2186 + 11u;
        float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _1068) * 0.949999988079071044921875);
        float _2690 = _2689 * _2689;
        float _2691 = cbLight._m0[_2671].x + _1018;
        float _2692 = cbLight._m0[_2671].y + _1019;
        float _2693 = cbLight._m0[_2671].z + _1020;
        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
        float _2698 = _2697 * _2691;
        float _2699 = _2697 * _2692;
        float _2700 = _2697 * _2693;
        float _2701 = dot(vec3(_958, _959, _960), vec3(cbLight._m0[_2671].xyz));
        float _4670 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2705 = dot(vec3(_958, _959, _960), vec3(_2698, _2699, _2700));
        float _4681 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2709 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2698, _2699, _2700));
        float _4692 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2713 = _2690 * _2690;
        float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
        float _2724 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
        float _2731 = 1.0 - _2690;
        float _2741 = (0.5 / (((_2351 * ((_2704 * _2731) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2351 * _2731) + _2690) * _2704))) * _2704;
        float _4703 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2743 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
        float _2744 = isnan(1.0) ? _2202 : (isnan(_2202) ? 1.0 : min(_2202, 1.0));
        _2660 = (((((_2724 * _2373) + _1138) * cbLight._m0[_2675].x) * _2743) * _2744) + _2546;
        _2662 = (((((_2724 * _2375) + _1140) * cbLight._m0[_2675].y) * _2743) * _2744) + _2548;
        _2664 = (((((_2724 * _2376) + _1141) * cbLight._m0[_2675].z) * _2743) * _2744) + _2550;
    }
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    float _2887;
    float _2889;
    if (_2184.y == 0u)
    {
        float _2819 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2820 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2819;
        float _2821 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2819;
        float _2822 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2819;
        uvec4 _2834 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2835 = _2834.x;
        uint _2846 = uint((float(_2834.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1027) / _2835))) + floor(float(uint(cbSceneParam._m0[85u].x * _1026) / _2835)));
        float _2856 = (log2(_2822 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2857 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
        uint _2860 = uint(isnan(14.0) ? _2857 : (isnan(_2857) ? 14.0 : min(_2857, 14.0)));
        uvec4 _2865 = texelFetch(g_lightClusterGridBuffer, int(((_2860 << 2u) + (_2846 << 6u)) >> 2u));
        uint _2866 = _2865.x;
        uint _2867 = _2834.z;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((((1u << ((_2867 >> 4u) & 15u)) + 4294967295u) & _2866) == 0u) || ((_2867 & 240u) == 0u))
        {
            _2996 = 0.0;
            _2998 = 0.0;
            _3000 = 0.0;
            _3002 = 0.0;
            _3004 = 0.0;
            _3006 = 0.0;
        }
        else
        {
            float _2997;
            float _2999;
            float _3001;
            float _3003;
            float _3005;
            float _3007;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            uint _3154 = 0u;
            uint _3163;
            bool _3164;
            for (;;)
            {
                _3163 = texelFetch(g_lightClassification, int((((_2860 << 5u) + (_2846 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                _3164 = _3163 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_3164)
                {
                    frontier_phi_61_pred = _3148;
                    frontier_phi_61_pred_1 = _3153;
                    frontier_phi_61_pred_2 = _3152;
                    frontier_phi_61_pred_3 = _3151;
                    frontier_phi_61_pred_4 = _3150;
                    frontier_phi_61_pred_5 = _3149;
                }
                else
                {
                    float _3272;
                    float _3273;
                    float _3274;
                    float _3275;
                    float _3276;
                    float _3277;
                    uint _3278;
                    _3272 = _3148;
                    _3273 = _3149;
                    _3274 = _3150;
                    _3275 = _3151;
                    _3276 = _3152;
                    _3277 = _3153;
                    _3278 = _3163;
                    float _3204;
                    float _3205;
                    float _3206;
                    float _3207;
                    float _3208;
                    float _3209;
                    for (;;)
                    {
                        uint _3282 = uint(findLSB(_3278)) + (_3154 << 5u);
                        uint _3279 = (_3278 + 4294967295u) & _3278;
                        uint _3284 = _3282 * 48u;
                        vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3284)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3284 + 3u)).x));
                        uint _3304 = (_3282 * 48u) + 4u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3304)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3304 + 3u)).x));
                        uint _3323 = (_3282 * 48u) + 8u;
                        vec3 _3334 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x));
                        float _3338 = _3298.x - _2820;
                        float _3339 = _3298.y - _2821;
                        float _3340 = _3298.z - _2822;
                        float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                        float _3344 = inversesqrt(_3341);
                        float _3345 = _3344 * _3338;
                        float _3346 = _3344 * _3339;
                        float _3347 = _3344 * _3340;
                        float _3348 = dot(vec3(_1049, _1052, _1055), vec3(_3345, _3346, _3347));
                        float _3353 = 1.0 - (_3341 * _3298.w);
                        float _4729 = isnan(0.0) ? _3353 : (isnan(_3353) ? 0.0 : max(_3353, 0.0));
                        float _3354 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3355 = sqrt(_3341) * _3317.w;
                        float _3358 = 1.39999997615814208984375 / (_3355 + 1.39999997615814208984375);
                        float _3359 = _3358 * _3358;
                        float _3362 = ((1.0 - _3359) * _3348) + _3359;
                        float _3365 = _3355 * _3355;
                        float _3369 = ((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3354) / ((_3365 * 0.699999988079071044921875) + 1.0);
                        float _3373 = (-0.0) - _2820;
                        float _3374 = (-0.0) - _2821;
                        float _3375 = (-0.0) - _2822;
                        float _3379 = inversesqrt(dot(vec3(_3373, _3374, _3375), vec3(_3373, _3374, _3375)));
                        float _3380 = _3379 * _3373;
                        float _3381 = _3379 * _3374;
                        float _3382 = _3379 * _3375;
                        float _3390 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                        float _3391 = 1.0 - _1169;
                        float _3398 = sqrt(1.0 - ((1.0 - (_3391 * _3391)) * (1.0 - (_3390 * _3390))));
                        float _3399 = _3398 * _3398;
                        float _3400 = _3399 * _3399;
                        float _3401 = _3380 + _3345;
                        float _3402 = _3381 + _3346;
                        float _3403 = _3382 + _3347;
                        float _3407 = inversesqrt(dot(vec3(_3401, _3402, _3403), vec3(_3401, _3402, _3403)));
                        float _3411 = dot(vec3(_1049, _1052, _1055), vec3(_3380, _3381, _3382));
                        float _4745 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0));
                        float _3414 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3415 = dot(vec3(_1049, _1052, _1055), vec3(_3407 * _3401, _3407 * _3402, _3407 * _3403));
                        float _4756 = isnan(0.0) ? _3415 : (isnan(_3415) ? 0.0 : max(_3415, 0.0));
                        float _3418 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3422 = ((_3418 * _3418) * (_3400 + (-1.0))) + 1.0;
                        float _3423 = _3358 * _3399;
                        float _3424 = _3423 * _3423;
                        float _3427 = ((1.0 - _3424) * _3348) + _3424;
                        float _4767 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                        float _3428 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3429 = 1.0 - _3399;
                        float _3439 = (0.5 / (((_3428 * ((_3414 * _3429) + _3399)) + 9.9999999392252902907785028219223e-09) + (((_3428 * _3429) + _3399) * _3414))) * _3428;
                        float _4778 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                        float _3450 = (((_3400 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3422 * _3422) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125))) * _3354;
                        _3207 = (_3369 * _3317.x) + _3275;
                        _3208 = (_3369 * _3317.y) + _3276;
                        _3209 = (_3369 * _3317.z) + _3277;
                        _3204 = (_3450 * _3334.x) + _3272;
                        _3205 = (_3450 * _3334.y) + _3273;
                        _3206 = (_3450 * _3334.z) + _3274;
                        if (_3279 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3272 = _3204;
                            _3273 = _3205;
                            _3274 = _3206;
                            _3275 = _3207;
                            _3276 = _3208;
                            _3277 = _3209;
                            _3278 = _3279;
                        }
                    }
                    frontier_phi_61_pred = _3204;
                    frontier_phi_61_pred_1 = _3209;
                    frontier_phi_61_pred_2 = _3208;
                    frontier_phi_61_pred_3 = _3207;
                    frontier_phi_61_pred_4 = _3206;
                    frontier_phi_61_pred_5 = _3205;
                }
                _2997 = frontier_phi_61_pred;
                _3007 = frontier_phi_61_pred_1;
                _3005 = frontier_phi_61_pred_2;
                _3003 = frontier_phi_61_pred_3;
                _3001 = frontier_phi_61_pred_4;
                _2999 = frontier_phi_61_pred_5;
                uint _3155 = _3154 + 1u;
                if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3148 = _2997;
                    _3149 = _2999;
                    _3150 = _3001;
                    _3151 = _3003;
                    _3152 = _3005;
                    _3153 = _3007;
                    _3154 = _3155;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2996 = _2997;
            _2998 = _2999;
            _3000 = _3001;
            _3002 = _3003;
            _3004 = _3005;
            _3006 = _3007;
        }
        uvec4 _3010 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3011 = _3010.z;
        uint _3013 = (_3011 >> 8u) & 15u;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((4294967295u << _3013) & _2866) == 0u)
        {
            _3116 = _2996;
            _3118 = _2998;
            _3120 = _3000;
            _3122 = _3002;
            _3124 = _3004;
            _3126 = _3006;
        }
        else
        {
            float _3141 = inversesqrt(dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822)));
            float _3142 = _3141 * _2820;
            float _3143 = _3141 * _2821;
            float _3144 = _3141 * _2822;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_3013 < ((_3011 >> 12u) & 15u))
            {
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3255 = _2996;
                float _3256 = _2998;
                float _3257 = _3000;
                float _3258 = _3002;
                float _3259 = _3004;
                float _3260 = _3006;
                uint _3261 = _3013;
                uint _3270;
                bool _3271;
                for (;;)
                {
                    _3270 = texelFetch(g_lightClassification, int((((_2860 << 5u) + (_2846 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                    _3271 = _3270 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3271)
                    {
                        frontier_phi_67_pred = _3258;
                        frontier_phi_67_pred_1 = _3259;
                        frontier_phi_67_pred_2 = _3260;
                        frontier_phi_67_pred_3 = _3257;
                        frontier_phi_67_pred_4 = _3256;
                        frontier_phi_67_pred_5 = _3255;
                    }
                    else
                    {
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3460;
                        float _3749;
                        float _3750;
                        float _3751;
                        float _3752;
                        float _3753;
                        float _3754;
                        float _3468 = _3255;
                        float _3469 = _3256;
                        float _3470 = _3257;
                        float _3471 = _3258;
                        float _3472 = _3259;
                        float _3473 = _3260;
                        uint _3474 = _3270;
                        uint _3475;
                        vec4 _3500;
                        float _3501;
                        vec4 _3516;
                        vec3 _3528;
                        vec4 _3544;
                        vec4 _3559;
                        float _3605;
                        bool _3606;
                        for (;;)
                        {
                            uint _3485 = ((_3261 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3474));
                            _3475 = (_3474 + 4294967295u) & _3474;
                            uint _3487 = _3485 * 40u;
                            _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3501 = _3500.w;
                            uint _3503 = (_3485 * 40u) + 4u;
                            _3516 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3503)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3503 + 3u)).x));
                            uint _3518 = (_3485 * 40u) + 8u;
                            _3528 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3518)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3518 + 2u)).x));
                            uint _3531 = (_3485 * 40u) + 16u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            uint _3546 = (_3485 * 40u) + 20u;
                            _3559 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3546)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3546 + 3u)).x));
                            uint _3561 = (_3485 * 40u) + 24u;
                            vec4 _3574 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3561)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3561 + 3u)).x));
                            uint _3580 = (_3485 * 40u) + 28u;
                            vec4 _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3605 = fma(_2822, _3593.z, fma(_2821, _3593.y, _3593.x * _2820)) + _3593.w;
                            _3606 = !((fma(_2822, _3574.z, fma(_2821, _3574.y, _3574.x * _2820)) + _3574.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3606)
                            {
                                float _3633 = _3500.x - _2820;
                                float _3634 = _3500.y - _2821;
                                float _3635 = _3500.z - _2822;
                                float _3636 = dot(vec3(_3633, _3634, _3635), vec3(_3633, _3634, _3635));
                                float _3639 = inversesqrt(_3636);
                                float _3640 = _3639 * _3633;
                                float _3641 = _3639 * _3634;
                                float _3642 = _3639 * _3635;
                                float _3646 = 1.0 - (_3636 / (_3501 * _3501));
                                float _4789 = isnan(0.0) ? _3646 : (isnan(_3646) ? 0.0 : max(_3646, 0.0));
                                float _3647 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3651 = sqrt(_3636) * _3516.w;
                                float _3653 = 1.39999997615814208984375 / (_3651 + 1.39999997615814208984375);
                                float _3654 = _3653 * _3653;
                                float _3657 = ((1.0 - _3654) * dot(vec3(_3640, _3641, _3642), vec3(_1049, _1052, _1055))) + _3654;
                                float _3660 = _3651 * _3651;
                                float _3664 = (fma(_2822, _3544.z, fma(_2821, _3544.y, _3544.x * _2820)) + _3544.w) / _3605;
                                float _3665 = (fma(_2822, _3559.z, fma(_2821, _3559.y, _3559.x * _2820)) + _3559.w) / _3605;
                                float _3669 = 1.0 - dot(vec2(_3664, _3665), vec2(_3664, _3665));
                                float _4805 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3670 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3671 = _3670 * (((isnan(0.0) ? _3657 : (isnan(_3657) ? 0.0 : max(_3657, 0.0))) * _3647) / ((_3660 * 0.699999988079071044921875) + 1.0));
                                float _3683 = exp2(log2(1.0 / ((_3660 * 3.5) + 5.0)) * 0.25);
                                float _3684 = 1.0 - _1169;
                                float _3691 = sqrt(1.0 - ((1.0 - (_3684 * _3684)) * (1.0 - (_3683 * _3683))));
                                float _3692 = _3691 * _3691;
                                float _3693 = _3692 * _3692;
                                float _3694 = _3640 - _3142;
                                float _3695 = _3641 - _3143;
                                float _3696 = _3642 - _3144;
                                float _3700 = inversesqrt(dot(vec3(_3694, _3695, _3696), vec3(_3694, _3695, _3696)));
                                float _3704 = dot(vec3(_1049, _1052, _1055), vec3((-0.0) - _3142, (-0.0) - _3143, (-0.0) - _3144));
                                float _4816 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3708 = dot(vec3(_1049, _1052, _1055), vec3(_3700 * _3694, _3700 * _3695, _3700 * _3696));
                                float _4827 = isnan(0.0) ? _3708 : (isnan(_3708) ? 0.0 : max(_3708, 0.0));
                                float _3711 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3715 = ((_3711 * _3711) * (_3693 + (-1.0))) + 1.0;
                                float _3716 = _3653 * _3692;
                                float _3717 = _3716 * _3716;
                                float _3723 = ((1.0 - _3717) * dot(vec3(_1049, _1052, _1055), vec3(_3640, _3641, _3642))) + _3717;
                                float _4838 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3725 = 1.0 - _3692;
                                float _3735 = (0.5 / (((_3724 * ((_3707 * _3725) + _3692)) + 9.9999999392252902907785028219223e-09) + (((_3724 * _3725) + _3692) * _3707))) * _3724;
                                float _4849 = isnan(0.0) ? _3735 : (isnan(_3735) ? 0.0 : max(_3735, 0.0));
                                float _3745 = (_3670 * _3647) * (((_3693 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3715 * _3715) * ((_3660 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3745 * _3528.x;
                                frontier_phi_73_pred_1 = _3745 * _3528.y;
                                frontier_phi_73_pred_2 = _3671 * _3516.z;
                                frontier_phi_73_pred_3 = _3671 * _3516.y;
                                frontier_phi_73_pred_4 = _3671 * _3516.x;
                                frontier_phi_73_pred_5 = _3745 * _3528.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3749 = frontier_phi_73_pred;
                            _3750 = frontier_phi_73_pred_1;
                            _3754 = frontier_phi_73_pred_2;
                            _3753 = frontier_phi_73_pred_3;
                            _3752 = frontier_phi_73_pred_4;
                            _3751 = frontier_phi_73_pred_5;
                            _3458 = _3752 + _3471;
                            _3459 = _3753 + _3472;
                            _3460 = _3754 + _3473;
                            _3455 = _3749 + _3468;
                            _3456 = _3750 + _3469;
                            _3457 = _3751 + _3470;
                            if (_3475 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3457;
                                _3471 = _3458;
                                _3472 = _3459;
                                _3473 = _3460;
                                _3474 = _3475;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3458;
                        frontier_phi_67_pred_1 = _3459;
                        frontier_phi_67_pred_2 = _3460;
                        frontier_phi_67_pred_3 = _3457;
                        frontier_phi_67_pred_4 = _3456;
                        frontier_phi_67_pred_5 = _3455;
                    }
                    _3123 = frontier_phi_67_pred;
                    _3125 = frontier_phi_67_pred_1;
                    _3127 = frontier_phi_67_pred_2;
                    _3121 = frontier_phi_67_pred_3;
                    _3119 = frontier_phi_67_pred_4;
                    _3117 = frontier_phi_67_pred_5;
                    uint _3262 = _3261 + 1u;
                    if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3255 = _3117;
                        _3256 = _3119;
                        _3257 = _3121;
                        _3258 = _3123;
                        _3259 = _3125;
                        _3260 = _3127;
                        _3261 = _3262;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _3125;
                frontier_phi_55_56_ladder_1 = _3127;
                frontier_phi_55_56_ladder_2 = _3123;
                frontier_phi_55_56_ladder_3 = _3121;
                frontier_phi_55_56_ladder_4 = _3119;
                frontier_phi_55_56_ladder_5 = _3117;
            }
            else
            {
                frontier_phi_55_56_ladder = _3004;
                frontier_phi_55_56_ladder_1 = _3006;
                frontier_phi_55_56_ladder_2 = _3002;
                frontier_phi_55_56_ladder_3 = _3000;
                frontier_phi_55_56_ladder_4 = _2998;
                frontier_phi_55_56_ladder_5 = _2996;
            }
            _3116 = frontier_phi_55_56_ladder_5;
            _3118 = frontier_phi_55_56_ladder_4;
            _3120 = frontier_phi_55_56_ladder_3;
            _3122 = frontier_phi_55_56_ladder_2;
            _3124 = frontier_phi_55_56_ladder;
            _3126 = frontier_phi_55_56_ladder_1;
        }
        float _3131 = isnan(1.0) ? _1153 : (isnan(_1153) ? 1.0 : min(_1153, 1.0));
        _2879 = (_3131 * _3122) + _2315;
        _2881 = (_3131 * _3124) + _2317;
        _2883 = (_3131 * _3126) + _2319;
        _2885 = ((_3116 * _1138) * _3131) + _2660;
        _2887 = ((_3118 * _1140) * _3131) + _2662;
        _2889 = ((_3120 * _1141) * _3131) + _2664;
    }
    else
    {
        _2879 = _2315;
        _2881 = _2317;
        _2883 = _2319;
        _2885 = _2660;
        _2887 = _2662;
        _2889 = _2664;
    }
    uint _2895 = _1082 + uint(cbMatDynParam._m0[0u].w);
    float _2901 = (((((cbMtdParam._m0[22u].x * _862.x) * cbMtdParam._m0[32u].x) * _883) + _635) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2895].x;
    float _2902 = (((((cbMtdParam._m0[22u].y * _862.y) * cbMtdParam._m0[32u].x) * _883) + _636) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2895].y;
    float _2903 = (((((cbMtdParam._m0[22u].z * _862.z) * cbMtdParam._m0[32u].x) * _883) + _637) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_2895].z;
    float _4865 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
    float _4876 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _4887 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _2920 = (((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2879 + ((isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0))) * _1153))) + ((_2885 + ((isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0))) * _1950)) * cbPerFrame._m0[3u].x)) + _2901;
    float _2922 = (_2902 + ((_2887 + ((isnan(0.0) ? _2171 : (isnan(_2171) ? 0.0 : max(_2171, 0.0))) * _1950)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2881 + ((isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0))) * _1153)));
    float _2924 = (_2903 + ((_2889 + ((isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0))) * _1950)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2883 + ((isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0))) * _1153)));
    float _4913 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2937 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
    uint _2938 = _1081 + 6u;
    float _2946 = _1026 / cbSceneParam._m0[86u].x;
    float _2947 = _1027 / cbSceneParam._m0[86u].y;
    vec4 _2961 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, (log2((isnan(cbSceneParam._m0[77u].w) ? _981 : (isnan(_981) ? cbSceneParam._m0[77u].w : min(_981, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2963 = _2961.x;
    float _2964 = _2961.y;
    float _2965 = _2961.z;
    float _2966 = _2961.w;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    if (_981 > cbSceneParam._m0[78u].w)
    {
        float _3021 = isnan(_981) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _981 : min(cbSceneParam._m0[80u].w, _981));
        float _3022 = _3021 / _981;
        float _3033 = _3022 * _1011;
        float _3034 = _1012 * _3022;
        float _3035 = (-0.0) - _3034;
        float _3036 = _3022 * _1013;
        float _3038 = (cbSceneParam._m0[77u].w * _3035) / _3021;
        float _3039 = _3038 + cbSceneParam._m0[79u].w;
        float _3040 = cbSceneParam._m0[79u].w - _3034;
        float _3046 = sqrt(((_3033 * _3033) + (_3034 * _3034)) + (_3036 * _3036));
        float _3049 = (1.0 - (cbSceneParam._m0[77u].w / _3021)) * _3046;
        float _3054 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3056 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3217;
        if (abs((_3035 - _3038) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3217 = ((((_3039 > 0.0) ? exp2(_3054 * _3039) : (2.0 - exp2(_3056 * _3039))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3049;
        }
        else
        {
            float _3177 = 1.0 / cbSceneParam._m0[80u].x;
            float _3178 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : max(_3039, _3040));
            float _3179 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : min(_3039, _3040));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            _3217 = ((abs(_3046 / _3035) * cbSceneParam._m0[80u].y) * ((((_3188 - _3189) * 2.0) - ((exp2(_3054 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0)))) - exp2(_3054 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))))) * _3177)) - ((exp2(_3056 * _3188) - exp2(_3056 * _3189)) * _3177))) + (_3049 * cbSceneParam._m0[80u].z);
        }
        vec4 _3219 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2946, _2947, 1.0), 0.0);
        float _3228 = exp2((_3217 * (-1.44269502162933349609375)) * (1.0 - _3219.w));
        float _3229 = log2(_3228);
        float _3245 = log2(_2966);
        _3058 = (exp2(_3245 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].x)) * _3219.x) / cbSceneParam._m0[78u].x)) + _2963;
        _3060 = (exp2(_3245 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].y)) * _3219.y) / cbSceneParam._m0[78u].y)) + _2964;
        _3062 = (exp2(_3245 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3229 * cbSceneParam._m0[78u].z)) * _3219.z) / cbSceneParam._m0[78u].z)) + _2965;
        _3064 = _3228 * _2966;
    }
    else
    {
        _3058 = _2963;
        _3060 = _2964;
        _3062 = _2965;
        _3064 = _2966;
    }
    float _3075 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3076 = _3075 == 3.0;
    float _3077 = log2(_3064);
    float _3081 = exp2(_3077 * cbSceneParam._m0[78u].x);
    float _3082 = exp2(_3077 * cbSceneParam._m0[78u].y);
    float _3083 = exp2(_3077 * cbSceneParam._m0[78u].z);
    float _3084 = _3081 * (isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0)));
    float _3085 = _3082 * (isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0)));
    float _3086 = _3083 * (isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0)));
    float _3095 = (_3075 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3095 * (_3076 ? _3084 : (_3084 + (cbSceneParam._m0[72u].w * _3058)));
    SV_Target.y = _3095 * (_3076 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3060)));
    SV_Target.z = _3095 * (_3076 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3062)));
    SV_Target.w = cbInstanceData._m0[_2938].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2901) * _2937) * _3081) * _3095;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2902) * _2937) * _3082) * _3095;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2903) * _2937) * _3083) * _3095;
    SV_Target_1.w = cbInstanceData._m0[_2938].w;
}


