#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1756;
float _4445;
float _4446;
float _4447;
float _4448;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _240 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _241 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _242 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _248 = inversesqrt(dot(vec3(_240, _241, _242), vec3(_240, _241, _242)));
    float _255 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _262 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _276 = cbMtdParam._m0[33u].z + TEXCOORD.y;
    vec4 _289 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (_276 * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w));
    float _294 = _289.z;
    float _295 = _289.w;
    vec4 _317 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * _276) + cbTextureTilingScale._m0[11u].w));
    float _322 = _317.w;
    float _334 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _294) * exp2(log2(1.0 - _322) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _335 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _336 = isnan(1.0) ? _335 : (isnan(_335) ? 1.0 : min(_335, 1.0));
    vec4 _350 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * _276) + cbTextureTilingScale._m0[2u].w));
    float _360 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _368 = (_360 - (((_350.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _360))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4467 = isnan(0.0) ? _368 : (isnan(_368) ? 0.0 : max(_368, 0.0));
    float _369 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
    float _371 = _336 - (_369 * _336);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    vec4 _386 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _389 = _386.y;
    float _390 = _389 * (isnan(1.0) ? _372 : (isnan(_372) ? 1.0 : min(_372, 1.0)));
    float _399 = exp2(log2(cbMtdParam._m0[32u].w * _322) * cbMtdParam._m0[31u].z);
    float _401 = _399 - (_369 * _399);
    float _402 = isnan(0.0) ? _401 : (isnan(_401) ? 0.0 : max(_401, 0.0));
    float _403 = isnan(1.0) ? _402 : (isnan(_402) ? 1.0 : min(_402, 1.0));
    float _414 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_295) * 4.5));
    float _423 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _294) * _414)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _424 = isnan(0.0) ? _423 : (isnan(_423) ? 0.0 : max(_423, 0.0));
    float _425 = isnan(1.0) ? _424 : (isnan(_424) ? 1.0 : min(_424, 1.0));
    float _436 = exp2(log2((1.0 - (((_414 * _414) * _294) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _437 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _441 = (((isnan(1.0) ? _437 : (isnan(_437) ? 1.0 : min(_437, 1.0))) - _295) * _389) + _295;
    vec4 _453 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _276) + cbTextureTilingScale._m0[5u].w));
    float _213[6];
    float _214[6];
    float _215[6];
    _213[0u] = cbMtdParam._m0[12u].x;
    _214[0u] = cbMtdParam._m0[12u].y;
    _215[0u] = cbMtdParam._m0[12u].z;
    _213[1u] = cbMtdParam._m0[13u].x;
    _214[1u] = cbMtdParam._m0[13u].y;
    _215[1u] = cbMtdParam._m0[13u].z;
    _213[2u] = cbMtdParam._m0[14u].x;
    _214[2u] = cbMtdParam._m0[14u].y;
    _215[2u] = cbMtdParam._m0[14u].z;
    _213[3u] = cbMtdParam._m0[15u].x;
    _214[3u] = cbMtdParam._m0[15u].y;
    _215[3u] = cbMtdParam._m0[15u].z;
    _213[4u] = cbMtdParam._m0[16u].x;
    _214[4u] = cbMtdParam._m0[16u].y;
    _215[4u] = cbMtdParam._m0[16u].z;
    _213[5u] = cbMtdParam._m0[11u].x;
    _214[5u] = cbMtdParam._m0[11u].y;
    _215[5u] = cbMtdParam._m0[11u].z;
    float _521 = (_386.x + (-0.02500000037252902984619140625)) * 8.0;
    float _523 = roundEven(_521);
    float _524 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    uint _527 = uint(int(isnan(5.0) ? _524 : (isnan(_524) ? 5.0 : min(_524, 5.0))));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = 1.0;
    _210[0u] = 1.0;
    _211[0u] = 1.0;
    _209[1u] = cbMtdParam._m0[23u].x;
    _210[1u] = cbMtdParam._m0[23u].y;
    _211[1u] = cbMtdParam._m0[23u].z;
    _209[2u] = cbMtdParam._m0[21u].x;
    _210[2u] = cbMtdParam._m0[21u].y;
    _211[2u] = cbMtdParam._m0[21u].z;
    _209[3u] = cbMtdParam._m0[19u].x;
    _210[3u] = cbMtdParam._m0[19u].y;
    _211[3u] = cbMtdParam._m0[19u].z;
    _209[4u] = cbMtdParam._m0[18u].x;
    _210[4u] = cbMtdParam._m0[18u].y;
    _211[4u] = cbMtdParam._m0[18u].z;
    _209[5u] = cbMtdParam._m0[17u].x;
    _210[5u] = cbMtdParam._m0[17u].y;
    _211[5u] = cbMtdParam._m0[17u].z;
    float _613 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _614 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    uint _616 = uint(int(isnan(5.0) ? _614 : (isnan(_614) ? 5.0 : min(_614, 5.0))));
    float _212[6];
    _212[0u] = 1.0;
    _212[1u] = cbMtdParam._m0[23u].w;
    _212[2u] = cbMtdParam._m0[21u].w;
    _212[3u] = cbMtdParam._m0[19u].w;
    _212[4u] = cbMtdParam._m0[18u].w;
    _212[5u] = cbMtdParam._m0[17u].w;
    float _653 = ((((_213[_527] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_209[_616] - _213[_527])) * _212[_527])) * _389) + cbMtdParam._m0[10u].x) * _453.x;
    float _654 = ((((_214[_527] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_210[_616] - _214[_527])) * _212[_527])) * _389) + cbMtdParam._m0[10u].y) * _453.y;
    float _655 = ((((_215[_527] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_211[_616] - _215[_527])) * _212[_527])) * _389) + cbMtdParam._m0[10u].z) * _453.z;
    vec4 _667 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * _276) + cbTextureTilingScale._m0[1u].w));
    float _678 = cbMtdParam._m0[9u].x * _667.x;
    float _679 = cbMtdParam._m0[9u].y * _667.y;
    float _680 = cbMtdParam._m0[9u].z * _667.z;
    float _687 = ((_678 - _653) * _441) + _653;
    float _688 = ((_679 - _654) * _441) + _654;
    float _689 = ((_680 - _655) * _441) + _655;
    vec4 _701 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * _276) + cbTextureTilingScale._m0[6u].w));
    float _721 = (((cbMtdParam._m0[20u].x * _701.x) - _687) * _425) + _687;
    float _722 = (((cbMtdParam._m0[20u].y * _701.y) - _688) * _425) + _688;
    float _723 = (((cbMtdParam._m0[20u].z * _701.z) - _689) * _425) + _689;
    vec4 _735 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * _276) + cbTextureTilingScale._m0[9u].w));
    float _755 = (((cbMtdParam._m0[29u].x * _735.x) - _721) * _403) + _721;
    float _756 = (((cbMtdParam._m0[29u].y * _735.y) - _722) * _403) + _722;
    float _757 = (((cbMtdParam._m0[29u].z * _735.z) - _723) * _403) + _723;
    float _206[6];
    float _207[6];
    float _208[6];
    _206[0u] = cbMtdParam._m0[30u].x;
    _207[0u] = cbMtdParam._m0[30u].y;
    _208[0u] = cbMtdParam._m0[30u].z;
    _206[1u] = cbMtdParam._m0[28u].x;
    _207[1u] = cbMtdParam._m0[28u].y;
    _208[1u] = cbMtdParam._m0[28u].z;
    _206[2u] = cbMtdParam._m0[27u].x;
    _207[2u] = cbMtdParam._m0[27u].y;
    _208[2u] = cbMtdParam._m0[27u].z;
    _206[3u] = cbMtdParam._m0[26u].x;
    _207[3u] = cbMtdParam._m0[26u].y;
    _208[3u] = cbMtdParam._m0[26u].z;
    _206[4u] = cbMtdParam._m0[25u].x;
    _207[4u] = cbMtdParam._m0[25u].y;
    _208[4u] = cbMtdParam._m0[25u].z;
    _206[5u] = cbMtdParam._m0[24u].x;
    _207[5u] = cbMtdParam._m0[24u].y;
    _208[5u] = cbMtdParam._m0[24u].z;
    float _830 = _206[_527] * _389;
    float _831 = _207[_527] * _389;
    float _832 = _208[_527] * _389;
    float _833 = _830 + ((_317.x * 4.5) * (((_678 - _755) * _390) + _755));
    float _834 = _831 + ((_317.y * 4.5) * (((_679 - _756) * _390) + _756));
    float _835 = _832 + ((_317.z * 4.5) * (((_680 - _757) * _390) + _757));
    float _201[5];
    float _202[5];
    _201[0u] = cbMtdParam._m0[37u].w;
    _202[0u] = cbMtdParam._m0[38u].x;
    _201[1u] = cbMtdParam._m0[39u].w;
    _202[1u] = cbMtdParam._m0[40u].x;
    _201[2u] = cbMtdParam._m0[40u].y;
    _202[2u] = cbMtdParam._m0[40u].z;
    _201[3u] = cbMtdParam._m0[40u].w;
    _202[3u] = cbMtdParam._m0[41u].x;
    _201[4u] = cbMtdParam._m0[41u].y;
    _202[4u] = cbMtdParam._m0[41u].z;
    float _868 = roundEven(5.0 - _521);
    float _869 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = isnan(4.0) ? _869 : (isnan(_869) ? 4.0 : min(_869, 4.0));
    float _872 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    uint _874 = uint(int(isnan(4.0) ? _872 : (isnan(_872) ? 4.0 : min(_872, 4.0))));
    float _883 = ((cbMtdParam._m0[42u].z - _202[_874]) * _441) + _202[_874];
    float _891 = ((cbMtdParam._m0[43u].x - _883) * _425) + _883;
    float _896 = ((cbMtdParam._m0[43u].z - _891) * _403) + _891;
    float _901 = ((cbMtdParam._m0[39u].z - _896) * _390) + _896;
    vec4 _917 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * _276) + cbTextureTilingScale._m0[7u].w));
    float _919 = _917.x;
    float _920 = _917.y;
    float _922 = _917.z + _201[_874];
    vec4 _934 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * _276) + cbTextureTilingScale._m0[10u].w));
    float _942 = (((cbMtdParam._m0[42u].y - _922) + _934.z) * _441) + _922;
    vec4 _954 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * _276) + cbTextureTilingScale._m0[12u].w));
    float _962 = (((cbMtdParam._m0[42u].w - _942) + _954.z) * _425) + _942;
    float _968 = ((((_294 * 2.0) * _962) - _962) * cbMtdParam._m0[34u].x) + _962;
    vec4 _980 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * _276) + cbTextureTilingScale._m0[13u].w));
    float _988 = (((_980.z + cbMtdParam._m0[43u].y) - _968) * _403) + _968;
    float _992 = (((cbMtdParam._m0[39u].y + _350.z) - _988) * _390) + _988;
    float _1025 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1029 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1056 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1025 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1029 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1073 = (-0.0) - ((_1029 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1077 = (_1029 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1078 = isnan(_1077) ? _1073 : (isnan(_1073) ? _1077 : min(_1073, _1077));
    float _4563 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
    float _1079 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
    float _1105 = ((_934.x - _919) * _441) + _919;
    float _1106 = ((_934.y - _920) * _441) + _920;
    float _1111 = ((_954.x - _1105) * _425) + _1105;
    float _1112 = ((_954.y - _1106) * _425) + _1106;
    float _1117 = ((_980.x - _1111) * _403) + _1111;
    float _1118 = ((_980.y - _1112) * _403) + _1112;
    float _1127 = ((((_350.x - _1117) * _390) + _1117) * 2.0) + (-1.0);
    float _1128 = ((((_350.y - _1118) * _390) + _1118) * 2.0) + (-1.0);
    float _1129 = dot(vec2(_1127, _1128), vec2(_1127, _1128));
    float _4574 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
    float _1134 = sqrt(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0))));
    float _1137 = (cbMtdParam._m0[34u].z * ((_289.x * 2.0) + (-1.0))) + _1127;
    float _1138 = (cbMtdParam._m0[34u].z * ((_289.y * 2.0) + (-1.0))) + _1128;
    float _1141 = fma(_1134, _255 * NORMAL.x, fma(_1138, _262 * TANGENT.x, (_248 * _240) * _1137));
    float _1144 = fma(_1134, _255 * NORMAL.y, fma(_1138, _262 * TANGENT.y, (_248 * _241) * _1137));
    float _1147 = fma(_1134, _255 * NORMAL.z, fma(_1138, _262 * TANGENT.z, (_248 * _242) * _1137));
    float _1151 = inversesqrt(dot(vec3(_1141, _1144, _1147), vec3(_1141, _1144, _1147)));
    float _1152 = _1151 * _1141;
    float _1153 = _1151 * _1144;
    float _1154 = _1151 * _1147;
    float _4585 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _1155 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
    float _4596 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4607 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _4618 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
    float _4629 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _1159 = isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0));
    float _1175 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1195 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1205 = cbSceneParam._m0[71u].x - (_1025 / _1195);
    float _1206 = cbSceneParam._m0[71u].y - (_1029 / _1195);
    float _1207 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1195);
    float _1211 = inversesqrt(dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207)));
    float _1212 = _1205 * _1211;
    float _1213 = _1206 * _1211;
    float _1214 = _1207 * _1211;
    vec4 _1219 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1221 = _1219.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1439 = sqrt(((_1205 * _1205) + (_1206 * _1206)) + (_1207 * _1207));
        float _1445 = (cbMatDynParam._m0[5u].x * _1439) + cbMatDynParam._m0[5u].y;
        float _4640 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1446 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
        float _1450 = (cbMatDynParam._m0[5u].z * _1439) + cbMatDynParam._m0[5u].w;
        float _4651 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0))) - _1446)) + _1446) < ((_1221 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1232 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1233 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1235 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1237 = _1235.w;
    float _1255 = fma(_1154, cbSceneParam._m0[5u].z, fma(_1153, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1152));
    float _1258 = fma(_1154, cbSceneParam._m0[6u].z, fma(_1153, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1152));
    float _1261 = fma(_1154, cbSceneParam._m0[7u].z, fma(_1153, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1152));
    vec4 _1263 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1274 = (((_1263.y - _1155) + (_1263.w * _1155)) * cbMtdParam._m0[3u].x) + _1155;
    uint _1287 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1288 = _1287 + 9u;
    uint _1289 = _1288 + uint(cbMatDynParam._m0[0u].w);
    float _1295 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0)))) * cbInstanceData._m0[_1289].x;
    float _1296 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) * cbInstanceData._m0[_1289].y;
    float _1297 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4618 : (isnan(_4618) ? 1.0 : min(_4618, 1.0)))) * cbInstanceData._m0[_1289].z;
    float _4662 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
    float _1298 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
    float _4673 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
    float _1299 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
    float _4684 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
    float _1300 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
    vec4 _1301 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1306 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1317 = (((_1306.x - _1159) + (_1306.w * _1159)) * cbMtdParam._m0[3u].x) + _1159;
    float _1330 = (cbMtdParam._m0[3u].x * (((_1298 * _1237) - _1298) + _1301.x)) + _1298;
    float _1331 = (cbMtdParam._m0[3u].x * (((_1299 * _1237) - _1299) + _1301.y)) + _1299;
    float _1332 = (cbMtdParam._m0[3u].x * (((_1300 * _1237) - _1300) + _1301.z)) + _1300;
    float _1333 = 1.0 - _1317;
    float _1334 = _1333 * _1330;
    float _1335 = _1333 * _1331;
    float _1336 = _1333 * _1332;
    float _1341 = (_1330 + (-0.039999999105930328369140625)) * _1317;
    float _1342 = (_1331 + (-0.039999999105930328369140625)) * _1317;
    float _1343 = (_1332 + (-0.039999999105930328369140625)) * _1317;
    float _1344 = _1341 + 0.039999999105930328369140625;
    float _1346 = _1342 + 0.039999999105930328369140625;
    float _1347 = _1343 + 0.039999999105930328369140625;
    vec4 _1356 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1232, cbSceneParam._m0[86u].y * _1233));
    float _1359 = _1356.x * TEXCOORD_5.w;
    float _1360 = dot(vec3(_1152, _1153, _1154), vec3(_1212, _1213, _1214));
    float _1363 = _1360 * 2.0;
    float _1367 = (_1363 * _1152) - _1212;
    float _1368 = (_1363 * _1153) - _1213;
    float _1369 = (_1363 * _1154) - _1214;
    float _1373 = abs(dot(vec3(_1212, _1213, _1214), vec3(_1152, _1153, _1154)));
    float _4695 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
    float _1375 = sqrt(_1274);
    float _1386 = exp2((_1375 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1375 * 3.0));
    float _1392 = (1.0 - _1386) * ((_1375 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1393 = _1386 * _1375;
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1425 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1429 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1755;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    float _1763;
    float _1764;
    float _1765;
    float _1766;
    float _1767;
    float _1768;
    float _1769;
    float _1770;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1482 = fma(_1429, cbModelParam._m0[26u].z, fma(_1425, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1421));
        float _1486 = fma(_1429, cbModelParam._m0[27u].z, fma(_1425, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1421));
        float _1490 = fma(_1429, cbModelParam._m0[28u].z, fma(_1425, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1421));
        float _1514 = _1421 + _1152;
        float _1515 = _1425 + _1153;
        float _1516 = _1429 + _1154;
        float _1526 = fma(_1516, cbModelParam._m0[26u].z, fma(_1515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1514)) - _1482;
        float _1527 = fma(_1516, cbModelParam._m0[27u].z, fma(_1515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1514)) - _1486;
        float _1528 = fma(_1516, cbModelParam._m0[28u].z, fma(_1515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1514)) - _1490;
        float _1532 = inversesqrt(dot(vec3(_1526, _1527, _1528), vec3(_1526, _1527, _1528)));
        float _1544 = ((_1532 * _1526) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1482 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1545 = ((_1532 * _1527) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1486 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1546 = ((_1532 * _1528) / cbModelParam._m0[34u].z) + ((((((_1490 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1549 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1556 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1563 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        vec4 _1570 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1544, _1545, _1546), 0.0);
        float _1583 = exp2((_1549.w + (-0.5)) * 20.0) * 2.0;
        float _1584 = _1583 * (_1549.x + (-0.5));
        float _1585 = _1583 * (_1549.y + (-0.5));
        float _1586 = _1583 * (_1549.z + (-0.5));
        float _1593 = exp2((_1556.w + (-0.5)) * 20.0) * 2.0;
        float _1594 = _1593 * (_1556.x + (-0.5));
        float _1595 = _1593 * (_1556.y + (-0.5));
        float _1596 = _1593 * (_1556.z + (-0.5));
        float _1603 = exp2((_1563.w + (-0.5)) * 20.0) * 2.0;
        float _1604 = _1603 * (_1563.x + (-0.5));
        float _1605 = _1603 * (_1563.y + (-0.5));
        float _1606 = _1603 * (_1563.z + (-0.5));
        float _1613 = exp2((_1570.w + (-0.5)) * 20.0) * 2.0;
        float _1614 = _1613 * (_1570.x + (-0.5));
        float _1615 = _1613 * (_1570.y + (-0.5));
        float _1616 = _1613 * (_1570.z + (-0.5));
        float _1617 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1618 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1619 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
        float _1620 = _1584 * 0.5;
        float _1621 = _1594 * 0.5;
        float _1622 = _1604 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1637 = (dot(vec3(_1152, _1153, _1154), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4721 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
        float _1647 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1617 + 9.9999997473787516355514526367188e-06);
        float _4732 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4743 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0))) * (_1649 + 1.0))) + _1654) * _1617;
        float _1664 = _1585 * 0.5;
        float _1665 = _1595 * 0.5;
        float _1666 = _1605 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_1152, _1153, _1154), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4754 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1618 + 9.9999997473787516355514526367188e-06);
        float _4765 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4776 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4754 : (isnan(_4754) ? 1.0 : min(_4754, 1.0))) * (_1691 + 1.0))) + _1696) * _1618;
        float _1706 = _1586 * 0.5;
        float _1707 = _1596 * 0.5;
        float _1708 = _1606 * 0.5;
        float _1709 = dot(vec3(_1706, _1707, _1708), vec3(_1706, _1707, _1708));
        float _1714 = (_1709 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1709);
        float _1722 = (dot(vec3(_1152, _1153, _1154), vec3(_1714 * _1706, _1714 * _1707, _1714 * _1708)) + 1.0) * 0.5;
        float _4787 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
        float _1731 = sqrt(((_1707 * _1707) + (_1706 * _1706)) + (_1708 * _1708)) / (_1619 + 9.9999997473787516355514526367188e-06);
        float _4798 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
        float _1732 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
        float _1733 = _1732 * 2.0;
        float _1737 = (1.0 - _1732) / (_1732 + 1.0);
        float _4809 = isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0));
        float _1738 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
        float _1747 = ((((1.0 - _1738) * (_1733 + 2.0)) * exp2(log2(isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0))) * (_1733 + 1.0))) + _1738) * _1619;
        _1755 = _1586;
        _1757 = _1585;
        _1758 = _1584;
        _1759 = _1596;
        _1760 = _1595;
        _1761 = _1594;
        _1762 = _1606;
        _1763 = _1605;
        _1764 = _1604;
        _1765 = _1619;
        _1766 = _1618;
        _1767 = _1617;
        _1768 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1769 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
        _1770 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0)));
    }
    else
    {
        _1755 = _1756;
        _1757 = _1756;
        _1758 = _1756;
        _1759 = _1756;
        _1760 = _1756;
        _1761 = _1756;
        _1762 = _1756;
        _1763 = _1756;
        _1764 = _1756;
        _1765 = _1756;
        _1766 = _1756;
        _1767 = _1756;
        _1768 = 0.0;
        _1769 = 0.0;
        _1770 = 0.0;
    }
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    float _2070;
    float _2071;
    float _2072;
    float _2073;
    float _2074;
    float _2075;
    float _2076;
    float _2077;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1796 = fma(_1429, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1421));
        float _1800 = fma(_1429, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1421));
        float _1804 = fma(_1429, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1421));
        float _1826 = _1421 + _1152;
        float _1827 = _1425 + _1153;
        float _1828 = _1429 + _1154;
        float _1838 = fma(_1828, cbModelParam._m0[30u].z, fma(_1827, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1826)) - _1796;
        float _1839 = fma(_1828, cbModelParam._m0[31u].z, fma(_1827, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1826)) - _1800;
        float _1840 = fma(_1828, cbModelParam._m0[32u].z, fma(_1827, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1826)) - _1804;
        float _1844 = inversesqrt(dot(vec3(_1838, _1839, _1840), vec3(_1838, _1839, _1840)));
        float _1856 = ((_1844 * _1838) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1796 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1857 = ((_1844 * _1839) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1800 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1858 = ((_1844 * _1840) / cbModelParam._m0[35u].z) + ((((((_1804 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1860 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1856, _1857, _1858), 0.0);
        vec4 _1867 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1856, _1857, _1858), 0.0);
        vec4 _1874 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1856, _1857, _1858), 0.0);
        vec4 _1881 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1856, _1857, _1858), 0.0);
        float _1893 = exp2((_1860.w + (-0.5)) * 20.0) * 2.0;
        float _1894 = _1893 * (_1860.x + (-0.5));
        float _1895 = _1893 * (_1860.y + (-0.5));
        float _1896 = _1893 * (_1860.z + (-0.5));
        float _1903 = exp2((_1867.w + (-0.5)) * 20.0) * 2.0;
        float _1904 = _1903 * (_1867.x + (-0.5));
        float _1905 = _1903 * (_1867.y + (-0.5));
        float _1906 = _1903 * (_1867.z + (-0.5));
        float _1913 = exp2((_1874.w + (-0.5)) * 20.0) * 2.0;
        float _1914 = _1913 * (_1874.x + (-0.5));
        float _1915 = _1913 * (_1874.y + (-0.5));
        float _1916 = _1913 * (_1874.z + (-0.5));
        float _1923 = exp2((_1881.w + (-0.5)) * 20.0) * 2.0;
        float _1924 = _1923 * (_1881.x + (-0.5));
        float _1925 = _1923 * (_1881.y + (-0.5));
        float _1926 = _1923 * (_1881.z + (-0.5));
        float _1927 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1928 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
        float _1929 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1930 = _1894 * 0.5;
        float _1931 = _1904 * 0.5;
        float _1932 = _1914 * 0.5;
        float _1933 = dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932));
        float _1938 = (_1933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1933);
        float _1946 = (dot(vec3(_1152, _1153, _1154), vec3(_1938 * _1930, _1938 * _1931, _1938 * _1932)) + 1.0) * 0.5;
        float _4850 = isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0));
        float _1955 = sqrt(((_1931 * _1931) + (_1930 * _1930)) + (_1932 * _1932)) / (_1927 + 9.9999997473787516355514526367188e-06);
        float _4861 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
        float _1956 = isnan(1.0) ? _4861 : (isnan(_4861) ? 1.0 : min(_4861, 1.0));
        float _1957 = _1956 * 2.0;
        float _1961 = (1.0 - _1956) / (_1956 + 1.0);
        float _4872 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1962 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
        float _1971 = ((((1.0 - _1962) * (_1957 + 2.0)) * exp2(log2(isnan(1.0) ? _4850 : (isnan(_4850) ? 1.0 : min(_4850, 1.0))) * (_1957 + 1.0))) + _1962) * _1927;
        float _1972 = _1895 * 0.5;
        float _1973 = _1905 * 0.5;
        float _1974 = _1915 * 0.5;
        float _1975 = dot(vec3(_1972, _1973, _1974), vec3(_1972, _1973, _1974));
        float _1980 = (_1975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1975);
        float _1988 = (dot(vec3(_1152, _1153, _1154), vec3(_1980 * _1972, _1980 * _1973, _1980 * _1974)) + 1.0) * 0.5;
        float _4883 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1997 = sqrt(((_1973 * _1973) + (_1972 * _1972)) + (_1974 * _1974)) / (_1928 + 9.9999997473787516355514526367188e-06);
        float _4894 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _1998 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
        float _1999 = _1998 * 2.0;
        float _2003 = (1.0 - _1998) / (_1998 + 1.0);
        float _4905 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2004 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
        float _2013 = ((((1.0 - _2004) * (_1999 + 2.0)) * exp2(log2(isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0))) * (_1999 + 1.0))) + _2004) * _1928;
        float _2014 = _1896 * 0.5;
        float _2015 = _1906 * 0.5;
        float _2016 = _1916 * 0.5;
        float _2017 = dot(vec3(_2014, _2015, _2016), vec3(_2014, _2015, _2016));
        float _2022 = (_2017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2017);
        float _2030 = (dot(vec3(_1152, _1153, _1154), vec3(_2022 * _2014, _2022 * _2015, _2022 * _2016)) + 1.0) * 0.5;
        float _4916 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
        float _2039 = sqrt(((_2015 * _2015) + (_2014 * _2014)) + (_2016 * _2016)) / (_1929 + 9.9999997473787516355514526367188e-06);
        float _4927 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
        float _2041 = _2040 * 2.0;
        float _2045 = (1.0 - _2040) / (_2040 + 1.0);
        float _4938 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
        float _2055 = ((((1.0 - _2046) * (_2041 + 2.0)) * exp2(log2(isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0))) * (_2041 + 1.0))) + _2046) * _1929;
        _2063 = _1896;
        _2064 = _1895;
        _2065 = _1894;
        _2066 = _1906;
        _2067 = _1905;
        _2068 = _1904;
        _2069 = _1916;
        _2070 = _1915;
        _2071 = _1914;
        _2072 = _1929;
        _2073 = _1928;
        _2074 = _1927;
        _2075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0)));
        _2076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0)));
        _2077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0)));
    }
    else
    {
        _2063 = _1756;
        _2064 = _1756;
        _2065 = _1756;
        _2066 = _1756;
        _2067 = _1756;
        _2068 = _1756;
        _2069 = _1756;
        _2070 = _1756;
        _2071 = _1756;
        _2072 = _1756;
        _2073 = _1756;
        _2074 = _1756;
        _2075 = 0.0;
        _2076 = 0.0;
        _2077 = 0.0;
    }
    float _2087 = (cbModelParam._m0[1u].x * (_2075 - _1768)) + _1768;
    float _2088 = (cbModelParam._m0[1u].x * (_2076 - _1769)) + _1769;
    float _2089 = (cbModelParam._m0[1u].x * (_2077 - _1770)) + _1770;
    float _2110 = fma(_2089, cbSceneParam._m0[89u].z, fma(_2088, cbSceneParam._m0[89u].y, _2087 * cbSceneParam._m0[89u].x));
    float _2113 = fma(_2089, cbSceneParam._m0[90u].z, fma(_2088, cbSceneParam._m0[90u].y, _2087 * cbSceneParam._m0[90u].x));
    float _2116 = fma(_2089, cbSceneParam._m0[91u].z, fma(_2088, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2087));
    float _2129 = _1367 * 0.5;
    float _2130 = _1368 * 0.5;
    float _2131 = _1369 * 0.5;
    float _2132 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_2065, _2068, _2071, _2074));
    float _2135 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_2064, _2067, _2070, _2073));
    float _2138 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_2063, _2066, _2069, _2072));
    float _2172;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2145 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_1755, _1759, _1762, _1765));
        float _2149 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_1757, _1760, _1763, _1766));
        float _2153 = dot(vec4(_2129, _2130, _2131, 1.0), vec4(_1758, _1761, _1764, _1767));
        float _2160 = dot(vec4(cbModelParam._m0[39u]), vec4(_2129, _2130, _2131, 1.0));
        _2172 = dot(vec3(isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0)), isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0)), isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2160) ? 0.0 : (isnan(0.0) ? _2160 : max(0.0, _2160))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2172 = 1.0;
    }
    float _2183;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2174 = dot(vec4(cbModelParam._m0[40u]), vec4(_2129, _2130, _2131, 1.0));
        _2183 = dot(vec3(isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0)), isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0)), isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2174) ? 0.0 : (isnan(0.0) ? _2174 : max(0.0, _2174))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2183 = 1.0;
    }
    float _2187 = (_2183 * cbModelParam._m0[1u].x) + (_2172 * (1.0 - cbModelParam._m0[1u].x));
    float _2197 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1274);
    float _2198 = isnan(_2197) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2197 : min(cbModelParam._m0[25u].z, _2197));
    float _2278;
    float _2280;
    float _2282;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2245 = fma(_1429, cbModelParam._m0[13u].z, fma(_1425, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1421)) + cbModelParam._m0[13u].w;
        float _2249 = fma(_1429, cbModelParam._m0[14u].z, fma(_1425, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1421)) + cbModelParam._m0[14u].w;
        float _2253 = fma(_1429, cbModelParam._m0[15u].z, fma(_1425, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1421)) + cbModelParam._m0[15u].w;
        float _2256 = fma(_1369, cbModelParam._m0[13u].z, fma(_1368, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1367));
        float _2259 = fma(_1369, cbModelParam._m0[14u].z, fma(_1368, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1367));
        float _2262 = fma(_1369, cbModelParam._m0[15u].z, fma(_1368, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1367));
        float _2290;
        if (_2256 > 0.0)
        {
            _2290 = abs((1.0 - _2245) / _2256);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2256 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2245 + 1.0) / _2256);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2290 = frontier_phi_17_15_ladder;
        }
        float _2461;
        if (_2259 > 0.0)
        {
            _2461 = abs((1.0 - _2249) / _2259);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2259 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2249 + 1.0) / _2259);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2461 = frontier_phi_26_22_ladder;
        }
        float _2753;
        if (_2262 > 0.0)
        {
            _2753 = abs((1.0 - _2253) / _2262);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2262 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2253 + 1.0) / _2262);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2753 = frontier_phi_38_33_ladder;
        }
        float _2755 = isnan(_2461) ? _2290 : (isnan(_2290) ? _2461 : min(_2290, _2461));
        float _2756 = isnan(_2753) ? _2755 : (isnan(_2755) ? _2753 : min(_2755, _2753));
        float _2760 = (_2756 * _2256) + _2245;
        float _2761 = (_2756 * _2259) + _2249;
        float _2762 = (_2756 * _2262) + _2253;
        float _2763 = _2756 * 9.9999997473787516355514526367188e-05;
        float _2765 = (-1.0) - _2763;
        float _2767 = _2763 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2762 > _2767) || ((_2762 < _2765) || ((_2761 > _2767) || ((_2761 < _2765) || ((_2760 < _2765) || (_2760 > _2767))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2907 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2762, cbModelParam._m0[9u].z, fma(_2761, cbModelParam._m0[9u].y, _2760 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2762, cbModelParam._m0[10u].z, fma(_2761, cbModelParam._m0[10u].y, _2760 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2762, cbModelParam._m0[11u].z, fma(_2761, cbModelParam._m0[11u].y, _2760 * cbModelParam._m0[11u].x))), _2198);
            frontier_phi_16_38_ladder = _2907.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2907.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2907.x * cbModelParam._m0[1u].y;
        }
        _2278 = frontier_phi_16_38_ladder_2;
        _2280 = frontier_phi_16_38_ladder_1;
        _2282 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1367, _1368, _1369), _2198);
        _2278 = _2266.x * cbModelParam._m0[1u].y;
        _2280 = _2266.y * cbModelParam._m0[1u].y;
        _2282 = _2266.z * cbModelParam._m0[1u].y;
    }
    float _2286 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1274);
    float _2287 = isnan(_2286) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2286 : min(cbModelParam._m0[25u].w, _2286));
    float _2376;
    float _2378;
    float _2380;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2340 = fma(_1429, cbModelParam._m0[21u].z, fma(_1425, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1421)) + cbModelParam._m0[21u].w;
        float _2344 = fma(_1429, cbModelParam._m0[22u].z, fma(_1425, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1421)) + cbModelParam._m0[22u].w;
        float _2348 = fma(_1429, cbModelParam._m0[23u].z, fma(_1425, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1421)) + cbModelParam._m0[23u].w;
        float _2351 = fma(_1369, cbModelParam._m0[21u].z, fma(_1368, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1367));
        float _2354 = fma(_1369, cbModelParam._m0[22u].z, fma(_1368, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1367));
        float _2357 = fma(_1369, cbModelParam._m0[23u].z, fma(_1368, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1367));
        float _2466;
        if (_2351 > 0.0)
        {
            _2466 = abs((1.0 - _2340) / _2351);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2351 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2340 + 1.0) / _2351);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2466 = frontier_phi_28_24_ladder;
        }
        float _2780;
        if (_2354 > 0.0)
        {
            _2780 = abs((1.0 - _2344) / _2354);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2354 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2344 + 1.0) / _2354);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2780 = frontier_phi_40_35_ladder;
        }
        float _3118;
        if (_2357 > 0.0)
        {
            _3118 = abs((1.0 - _2348) / _2357);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2357 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2348 + 1.0) / _2357);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _3118 = frontier_phi_50_47_ladder;
        }
        float _3120 = isnan(_2780) ? _2466 : (isnan(_2466) ? _2780 : min(_2466, _2780));
        float _3121 = isnan(_3118) ? _3120 : (isnan(_3120) ? _3118 : min(_3120, _3118));
        float _3125 = (_3121 * _2351) + _2340;
        float _3126 = (_3121 * _2354) + _2344;
        float _3127 = (_3121 * _2357) + _2348;
        float _3128 = _3121 * 9.9999997473787516355514526367188e-05;
        float _3129 = (-1.0) - _3128;
        float _3131 = _3128 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_3127 > _3131) || ((_3127 < _3129) || ((_3126 > _3131) || ((_3126 < _3129) || ((_3125 < _3129) || (_3125 > _3131))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3249 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_3127, cbModelParam._m0[17u].z, fma(_3126, cbModelParam._m0[17u].y, _3125 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_3127, cbModelParam._m0[18u].z, fma(_3126, cbModelParam._m0[18u].y, _3125 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_3127, cbModelParam._m0[19u].z, fma(_3126, cbModelParam._m0[19u].y, _3125 * cbModelParam._m0[19u].x))), _2287);
            frontier_phi_25_50_ladder = _3249.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3249.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3249.x * cbModelParam._m0[1u].z;
        }
        _2376 = frontier_phi_25_50_ladder_2;
        _2378 = frontier_phi_25_50_ladder_1;
        _2380 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2360 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1367, _1368, _1369), _2287);
        _2376 = _2360.x * cbModelParam._m0[1u].z;
        _2378 = _2360.y * cbModelParam._m0[1u].z;
        _2380 = _2360.z * cbModelParam._m0[1u].z;
    }
    float _2393 = (((_1392 * _1344) + _1393) * _1359) * ((cbModelParam._m0[1u].w * (_2376 - _2278)) + _2278);
    float _2395 = (((_1392 * _1346) + _1393) * _1359) * ((cbModelParam._m0[1u].w * (_2378 - _2280)) + _2280);
    float _2397 = (((_1392 * _1347) + _1393) * _1359) * ((cbModelParam._m0[1u].w * (_2380 - _2282)) + _2282);
    float _2400 = fma(_2397, cbSceneParam._m0[89u].z, fma(_2395, cbSceneParam._m0[89u].y, _2393 * cbSceneParam._m0[89u].x));
    float _2403 = fma(_2397, cbSceneParam._m0[90u].z, fma(_2395, cbSceneParam._m0[90u].y, _2393 * cbSceneParam._m0[90u].x));
    float _2406 = fma(_2397, cbSceneParam._m0[91u].z, fma(_2395, cbSceneParam._m0[91u].y, _2393 * cbSceneParam._m0[91u].x));
    float _2440 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2444 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2448 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2452 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2453 = _2440 / _2452;
    float _2454 = _2444 / _2452;
    float _2455 = _2448 / _2452;
    float _2599;
    float _2600;
    float _2601;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2482 = ((uint(_2455 > cbSceneParam._m0[59u].y) + uint(_2455 > cbSceneParam._m0[59u].x)) + uint(_2455 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2483 = _2482 + 43u;
        uint _2490 = _2482 + 44u;
        uint _2497 = _2482 + 45u;
        uint _2505 = _2482 + 46u;
        float _2516 = fma(_2452, cbSceneParam._m0[_2483].w, fma(_2448, cbSceneParam._m0[_2483].z, fma(_2444, cbSceneParam._m0[_2483].y, _2440 * cbSceneParam._m0[_2483].x)));
        float _2520 = fma(_2452, cbSceneParam._m0[_2490].w, fma(_2448, cbSceneParam._m0[_2490].z, fma(_2444, cbSceneParam._m0[_2490].y, _2440 * cbSceneParam._m0[_2490].x)));
        float _2528 = fma(_2452, cbSceneParam._m0[_2505].w, fma(_2448, cbSceneParam._m0[_2505].z, fma(_2444, cbSceneParam._m0[_2505].y, _2440 * cbSceneParam._m0[_2505].x)));
        float _2532 = cbSceneParam._m0[33u].z * _2528;
        float _2534 = cbSceneParam._m0[33u].w * _2528;
        float _2537 = fma(_2452, cbSceneParam._m0[_2497].w, fma(_2448, cbSceneParam._m0[_2497].z, fma(_2444, cbSceneParam._m0[_2497].y, _2440 * cbSceneParam._m0[_2497].x))) / _2528;
        float _2585 = (cbSceneParam._m0[33u].x - sqrt(((_2454 * _2454) + (_2453 * _2453)) + (_2455 * _2455))) * cbSceneParam._m0[33u].y;
        float _5064 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2592 = (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2532 + _2516) / _2528, (_2534 + _2520) / _2528), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2534 + _2516) / _2528, (_2520 - _2532) / _2528), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2516 - _2532) / _2528, (_2520 - _2534) / _2528), _2537), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2516 - _2534) / _2528, (_2532 + _2520) / _2528), _2537), 0.0)).x), vec4(0.25)));
        _2599 = 1.0 - (_2592 * cbSceneParam._m0[34u].x);
        _2600 = 1.0 - (_2592 * cbSceneParam._m0[34u].y);
        _2601 = 1.0 - (_2592 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2599 = 1.0;
        _2600 = 1.0;
        _2601 = 1.0;
    }
    float _2665;
    float _2667;
    float _2669;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2653 = fma(_2452, cbSceneParam._m0[63u].w, fma(_2448, cbSceneParam._m0[63u].z, fma(_2444, cbSceneParam._m0[63u].y, _2440 * cbSceneParam._m0[63u].x)));
        float _2654 = fma(_2452, cbSceneParam._m0[60u].w, fma(_2448, cbSceneParam._m0[60u].z, fma(_2444, cbSceneParam._m0[60u].y, _2440 * cbSceneParam._m0[60u].x))) / _2653;
        float _2655 = fma(_2452, cbSceneParam._m0[61u].w, fma(_2448, cbSceneParam._m0[61u].z, fma(_2444, cbSceneParam._m0[61u].y, _2440 * cbSceneParam._m0[61u].x))) / _2653;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2654 >= cbSceneParam._m0[64u].x) && (_2655 >= cbSceneParam._m0[64u].y)) && (_2654 <= cbSceneParam._m0[64u].z)) && (_2655 <= cbSceneParam._m0[64u].w))
        {
            float _2793 = fma(_2452, cbSceneParam._m0[62u].w, fma(_2448, cbSceneParam._m0[62u].z, fma(_2444, cbSceneParam._m0[62u].y, _2440 * cbSceneParam._m0[62u].x))) / _2653;
            float _2797 = isnan(cbSceneParam._m0[41u].w) ? _2793 : (isnan(_2793) ? cbSceneParam._m0[41u].w : max(_2793, cbSceneParam._m0[41u].w));
            float _2840 = (cbSceneParam._m0[33u].x - sqrt(((_2454 * _2454) + (_2453 * _2453)) + (_2455 * _2455))) * cbSceneParam._m0[33u].y;
            float _5080 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
            float _2847 = (isnan(1.0) ? _5080 : (isnan(_5080) ? 1.0 : min(_5080, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2654, cbSceneParam._m0[33u].w + _2655), _2797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2654, _2655 - cbSceneParam._m0[33u].z), _2797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2654 - cbSceneParam._m0[33u].z, _2655 - cbSceneParam._m0[33u].w), _2797), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2654 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2655), _2797), 0.0)).x), vec4(0.25)));
            float _2851 = 1.0 - (_2847 * cbSceneParam._m0[34u].x);
            float _2852 = 1.0 - (_2847 * cbSceneParam._m0[34u].y);
            float _2853 = 1.0 - (_2847 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2853) ? _2601 : (isnan(_2601) ? _2853 : min(_2601, _2853));
            frontier_phi_37_36_ladder_1 = isnan(_2852) ? _2600 : (isnan(_2600) ? _2852 : min(_2600, _2852));
            frontier_phi_37_36_ladder_2 = isnan(_2851) ? _2599 : (isnan(_2599) ? _2851 : min(_2599, _2851));
        }
        else
        {
            frontier_phi_37_36_ladder = _2601;
            frontier_phi_37_36_ladder_1 = _2600;
            frontier_phi_37_36_ladder_2 = _2599;
        }
        _2665 = frontier_phi_37_36_ladder_2;
        _2667 = frontier_phi_37_36_ladder_1;
        _2669 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2665 = _2599;
        _2667 = _2600;
        _2669 = _2601;
    }
    uvec4 _2674 = floatBitsToUint(cbInstanceData._m0[_1287 + 5u]);
    uint _2676 = _2674.x * 14u;
    uint _2677 = _2676 + 13u;
    float _2684 = _1359 + (-1.0);
    float _2689 = (cbLight._m0[_2677].x * _2684) + 1.0;
    float _2690 = (cbLight._m0[_2677].y * _2684) + 1.0;
    float _2691 = (cbLight._m0[_2677].z * _2684) + 1.0;
    float _2692 = (cbLight._m0[_2677].w * _2684) + 1.0;
    uint _2693 = _2676 + 5u;
    float _2699 = isnan(1.0) ? _2690 : (isnan(_2690) ? 1.0 : min(_2690, 1.0));
    uint _2703 = _2676 + 4u;
    float _2712 = isnan(1.0) ? _2689 : (isnan(_2689) ? 1.0 : min(_2689, 1.0));
    uint _2716 = _2676 | 1u;
    float _2727 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_1152, _1153, _1154));
    float _2730 = dot(vec3(cbLight._m0[_2716].xyz), vec3(_1152, _1153, _1154));
    float _5116 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
    float _5127 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
    float _2735 = (isnan(1.0) ? _5116 : (isnan(_5116) ? 1.0 : min(_5116, 1.0))) * 0.3183098733425140380859375;
    float _2737 = (isnan(1.0) ? _5127 : (isnan(_5127) ? 1.0 : min(_5127, 1.0))) * 0.3183098733425140380859375;
    float _2744 = ((cbLight._m0[_2693].x * _2699) * _2737) + (((cbLight._m0[_2703].x * _2665) * _2712) * _2735);
    float _2745 = ((_2699 * cbLight._m0[_2693].y) * _2737) + (((cbLight._m0[_2703].y * _2667) * _2712) * _2735);
    float _2746 = ((_2699 * cbLight._m0[_2693].z) * _2737) + (((cbLight._m0[_2703].z * _2669) * _2712) * _2735);
    uvec4 _2750 = floatBitsToUint(cbLight._m0[_2676 + 12u]);
    bool _2752 = _2750.x == 0u;
    float _2854;
    float _2856;
    float _2858;
    if (_2752)
    {
        _2854 = _2744;
        _2856 = _2745;
        _2858 = _2746;
    }
    else
    {
        uint _2862 = _2676 + 6u;
        float _2878 = (dot(vec3(cbLight._m0[_2676 + 2u].xyz), vec3(_1152, _1153, _1154)) * 0.5) + 0.5;
        float _2879 = _2878 * _2878;
        float _5138 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
        float _2880 = isnan(1.0) ? _5138 : (isnan(_5138) ? 1.0 : min(_5138, 1.0));
        float _2881 = isnan(1.0) ? _2691 : (isnan(_2691) ? 1.0 : min(_2691, 1.0));
        _2854 = (((cbLight._m0[_2862].x * 0.3183098733425140380859375) * _2880) * _2881) + _2744;
        _2856 = (((cbLight._m0[_2862].y * 0.3183098733425140380859375) * _2880) * _2881) + _2745;
        _2858 = (((cbLight._m0[_2862].z * 0.3183098733425140380859375) * _2880) * _2881) + _2746;
    }
    bool _2861 = _2750.y == 0u;
    float _2916;
    float _2918;
    float _2920;
    if (_2861)
    {
        _2916 = _2854;
        _2918 = _2856;
        _2920 = _2858;
    }
    else
    {
        uint _3089 = _2676 + 7u;
        float _3105 = (dot(vec3(cbLight._m0[_2676 + 3u].xyz), vec3(_1152, _1153, _1154)) * 0.5) + 0.5;
        float _3106 = _3105 * _3105;
        float _5154 = isnan(0.0) ? _3106 : (isnan(_3106) ? 0.0 : max(_3106, 0.0));
        float _3107 = isnan(1.0) ? _5154 : (isnan(_5154) ? 1.0 : min(_5154, 1.0));
        float _3108 = isnan(1.0) ? _2692 : (isnan(_2692) ? 1.0 : min(_2692, 1.0));
        _2916 = (((cbLight._m0[_3089].x * 0.3183098733425140380859375) * _3107) * _3108) + _2854;
        _2918 = (((cbLight._m0[_3089].y * 0.3183098733425140380859375) * _3107) * _3108) + _2856;
        _2920 = (((cbLight._m0[_3089].z * 0.3183098733425140380859375) * _3107) * _3108) + _2858;
    }
    uint _2923 = _2676 + 8u;
    float _2936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2676].w)) * _1274) * 0.949999988079071044921875);
    float _2937 = _2936 * _2936;
    float _2938 = cbLight._m0[_2676].x + _1212;
    float _2939 = cbLight._m0[_2676].y + _1213;
    float _2940 = cbLight._m0[_2676].z + _1214;
    float _2944 = inversesqrt(dot(vec3(_2938, _2939, _2940), vec3(_2938, _2939, _2940)));
    float _2945 = _2944 * _2938;
    float _2946 = _2944 * _2939;
    float _2947 = _2944 * _2940;
    float _2948 = dot(vec3(_1152, _1153, _1154), vec3(cbLight._m0[_2676].xyz));
    float _5170 = isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0));
    float _2951 = isnan(1.0) ? _5170 : (isnan(_5170) ? 1.0 : min(_5170, 1.0));
    float _5181 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
    float _2952 = isnan(1.0) ? _5181 : (isnan(_5181) ? 1.0 : min(_5181, 1.0));
    float _2953 = dot(vec3(_1152, _1153, _1154), vec3(_2945, _2946, _2947));
    float _5192 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
    float _2956 = isnan(1.0) ? _5192 : (isnan(_5192) ? 1.0 : min(_5192, 1.0));
    float _2957 = dot(vec3(cbLight._m0[_2676].xyz), vec3(_2945, _2946, _2947));
    float _5203 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
    float _2961 = _2937 * _2937;
    float _2965 = ((_2956 * _2956) * (_2961 + (-1.0))) + 1.0;
    float _2973 = exp2(log2(1.0 - (isnan(1.0) ? _5203 : (isnan(_5203) ? 1.0 : min(_5203, 1.0)))) * 5.0);
    float _2974 = 0.959999978542327880859375 - _1341;
    float _2976 = 0.959999978542327880859375 - _1342;
    float _2977 = 0.959999978542327880859375 - _1343;
    float _2984 = 1.0 - _2937;
    float _2995 = (0.5 / (((_2952 * ((_2951 * _2984) + _2937)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _2984) + _2937) * _2951))) * _2951;
    float _5214 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
    float _2997 = (isnan(1.0) ? _5214 : (isnan(_5214) ? 1.0 : min(_5214, 1.0))) * (_2961 / ((_2965 * _2965) * 3.141590118408203125));
    uint _3011 = _2676 + 9u;
    float _3022 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2716].w)) * _1274) * 0.949999988079071044921875);
    float _3023 = _3022 * _3022;
    float _3024 = cbLight._m0[_2716].x + _1212;
    float _3025 = cbLight._m0[_2716].y + _1213;
    float _3026 = cbLight._m0[_2716].z + _1214;
    float _3030 = inversesqrt(dot(vec3(_3024, _3025, _3026), vec3(_3024, _3025, _3026)));
    float _3031 = _3030 * _3024;
    float _3032 = _3030 * _3025;
    float _3033 = _3030 * _3026;
    float _3034 = dot(vec3(_1152, _1153, _1154), vec3(cbLight._m0[_2716].xyz));
    float _5225 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
    float _3037 = isnan(1.0) ? _5225 : (isnan(_5225) ? 1.0 : min(_5225, 1.0));
    float _3038 = dot(vec3(_1152, _1153, _1154), vec3(_3031, _3032, _3033));
    float _5236 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
    float _3041 = isnan(1.0) ? _5236 : (isnan(_5236) ? 1.0 : min(_5236, 1.0));
    float _3042 = dot(vec3(cbLight._m0[_2716].xyz), vec3(_3031, _3032, _3033));
    float _5247 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
    float _3046 = _3023 * _3023;
    float _3050 = ((_3041 * _3041) * (_3046 + (-1.0))) + 1.0;
    float _3057 = exp2(log2(1.0 - (isnan(1.0) ? _5247 : (isnan(_5247) ? 1.0 : min(_5247, 1.0)))) * 5.0);
    float _3064 = 1.0 - _3023;
    float _3074 = (0.5 / (((_2952 * ((_3037 * _3064) + _3023)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _3064) + _3023) * _3037))) * _3037;
    float _5258 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
    float _3076 = (isnan(1.0) ? _5258 : (isnan(_5258) ? 1.0 : min(_5258, 1.0))) * (_3046 / ((_3050 * _3050) * 3.141590118408203125));
    float _3086 = (((((_3057 * _2974) + _1344) * cbLight._m0[_3011].x) * _3076) * _2699) + ((((cbLight._m0[_2923].x * _2665) * ((_2973 * _2974) + _1344)) * _2997) * _2712);
    float _3087 = (((((_3057 * _2976) + _1346) * cbLight._m0[_3011].y) * _3076) * _2699) + ((((cbLight._m0[_2923].y * _2667) * ((_2973 * _2976) + _1346)) * _2997) * _2712);
    float _3088 = (((((_3057 * _2977) + _1347) * cbLight._m0[_3011].z) * _3076) * _2699) + ((((cbLight._m0[_2923].z * _2669) * ((_2973 * _2977) + _1347)) * _2997) * _2712);
    float _3144;
    float _3146;
    float _3148;
    if (_2752)
    {
        _3144 = _3086;
        _3146 = _3087;
        _3148 = _3088;
    }
    else
    {
        uint _3150 = _2676 + 2u;
        uint _3154 = _2676 + 10u;
        float _3168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3150].w)) * _1274) * 0.949999988079071044921875);
        float _3169 = _3168 * _3168;
        float _3170 = cbLight._m0[_3150].x + _1212;
        float _3171 = cbLight._m0[_3150].y + _1213;
        float _3172 = cbLight._m0[_3150].z + _1214;
        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
        float _3177 = _3176 * _3170;
        float _3178 = _3176 * _3171;
        float _3179 = _3176 * _3172;
        float _3180 = dot(vec3(_1152, _1153, _1154), vec3(cbLight._m0[_3150].xyz));
        float _5269 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
        float _3183 = isnan(1.0) ? _5269 : (isnan(_5269) ? 1.0 : min(_5269, 1.0));
        float _3184 = dot(vec3(_1152, _1153, _1154), vec3(_3177, _3178, _3179));
        float _5280 = isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0));
        float _3187 = isnan(1.0) ? _5280 : (isnan(_5280) ? 1.0 : min(_5280, 1.0));
        float _3188 = dot(vec3(cbLight._m0[_3150].xyz), vec3(_3177, _3178, _3179));
        float _5291 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
        float _3192 = _3169 * _3169;
        float _3196 = ((_3187 * _3187) * (_3192 + (-1.0))) + 1.0;
        float _3203 = exp2(log2(1.0 - (isnan(1.0) ? _5291 : (isnan(_5291) ? 1.0 : min(_5291, 1.0)))) * 5.0);
        float _3210 = 1.0 - _3169;
        float _3220 = (0.5 / (((_2952 * ((_3183 * _3210) + _3169)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _3210) + _3169) * _3183))) * _3183;
        float _5302 = isnan(0.0) ? _3220 : (isnan(_3220) ? 0.0 : max(_3220, 0.0));
        float _3222 = (isnan(1.0) ? _5302 : (isnan(_5302) ? 1.0 : min(_5302, 1.0))) * (_3192 / ((_3196 * _3196) * 3.141590118408203125));
        float _3223 = isnan(1.0) ? _2691 : (isnan(_2691) ? 1.0 : min(_2691, 1.0));
        _3144 = (((((_3203 * _2974) + _1344) * cbLight._m0[_3154].x) * _3222) * _3223) + _3086;
        _3146 = (((((_3203 * _2976) + _1346) * cbLight._m0[_3154].y) * _3222) * _3223) + _3087;
        _3148 = (((((_3203 * _2977) + _1347) * cbLight._m0[_3154].z) * _3222) * _3223) + _3088;
    }
    float _3254;
    float _3256;
    float _3258;
    if (_2861)
    {
        _3254 = _3144;
        _3256 = _3146;
        _3258 = _3148;
    }
    else
    {
        uint _3265 = _2676 + 3u;
        uint _3269 = _2676 + 11u;
        float _3283 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3265].w)) * _1274) * 0.949999988079071044921875);
        float _3284 = _3283 * _3283;
        float _3285 = cbLight._m0[_3265].x + _1212;
        float _3286 = cbLight._m0[_3265].y + _1213;
        float _3287 = cbLight._m0[_3265].z + _1214;
        float _3291 = inversesqrt(dot(vec3(_3285, _3286, _3287), vec3(_3285, _3286, _3287)));
        float _3292 = _3291 * _3285;
        float _3293 = _3291 * _3286;
        float _3294 = _3291 * _3287;
        float _3295 = dot(vec3(_1152, _1153, _1154), vec3(cbLight._m0[_3265].xyz));
        float _5318 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
        float _3298 = isnan(1.0) ? _5318 : (isnan(_5318) ? 1.0 : min(_5318, 1.0));
        float _3299 = dot(vec3(_1152, _1153, _1154), vec3(_3292, _3293, _3294));
        float _5329 = isnan(0.0) ? _3299 : (isnan(_3299) ? 0.0 : max(_3299, 0.0));
        float _3302 = isnan(1.0) ? _5329 : (isnan(_5329) ? 1.0 : min(_5329, 1.0));
        float _3303 = dot(vec3(cbLight._m0[_3265].xyz), vec3(_3292, _3293, _3294));
        float _5340 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
        float _3307 = _3284 * _3284;
        float _3311 = ((_3302 * _3302) * (_3307 + (-1.0))) + 1.0;
        float _3318 = exp2(log2(1.0 - (isnan(1.0) ? _5340 : (isnan(_5340) ? 1.0 : min(_5340, 1.0)))) * 5.0);
        float _3325 = 1.0 - _3284;
        float _3335 = (0.5 / (((_2952 * ((_3298 * _3325) + _3284)) + 9.9999999392252902907785028219223e-09) + (((_2952 * _3325) + _3284) * _3298))) * _3298;
        float _5351 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
        float _3337 = (isnan(1.0) ? _5351 : (isnan(_5351) ? 1.0 : min(_5351, 1.0))) * (_3307 / ((_3311 * _3311) * 3.141590118408203125));
        float _3338 = isnan(1.0) ? _2692 : (isnan(_2692) ? 1.0 : min(_2692, 1.0));
        _3254 = (((((_3318 * _2974) + _1344) * cbLight._m0[_3269].x) * _3337) * _3338) + _3144;
        _3256 = (((((_3318 * _2976) + _1346) * cbLight._m0[_3269].y) * _3337) * _3338) + _3146;
        _3258 = (((((_3318 * _2977) + _1347) * cbLight._m0[_3269].z) * _3337) * _3338) + _3148;
    }
    float _3404;
    float _3406;
    float _3408;
    float _3410;
    float _3412;
    float _3414;
    if (_2674.y == 0u)
    {
        uvec4 _3359 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3360 = _3359.x;
        uint _3371 = uint((float(_3359.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1233) / _3360))) + floor(float(uint(cbSceneParam._m0[85u].x * _1232) / _3360)));
        float _3381 = (log2(_2455 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3382 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
        uint _3385 = uint(isnan(14.0) ? _3382 : (isnan(_3382) ? 14.0 : min(_3382, 14.0)));
        uvec4 _3390 = texelFetch(g_lightClusterGridBuffer, int(((_3385 << 2u) + (_3371 << 6u)) >> 2u));
        uint _3391 = _3390.x;
        uint _3392 = _3359.z;
        float _3500;
        float _3502;
        float _3504;
        float _3506;
        float _3508;
        float _3510;
        if (((((1u << ((_3392 >> 4u) & 15u)) + 4294967295u) & _3391) == 0u) || ((_3392 & 240u) == 0u))
        {
            _3500 = 0.0;
            _3502 = 0.0;
            _3504 = 0.0;
            _3506 = 0.0;
            _3508 = 0.0;
            _3510 = 0.0;
        }
        else
        {
            float _3501;
            float _3503;
            float _3505;
            float _3507;
            float _3509;
            float _3511;
            float _3660 = 0.0;
            float _3661 = 0.0;
            float _3662 = 0.0;
            float _3663 = 0.0;
            float _3664 = 0.0;
            float _3665 = 0.0;
            uint _3666 = 0u;
            uint _3675;
            bool _3676;
            for (;;)
            {
                _3675 = texelFetch(g_lightClassification, int((((_3385 << 5u) + (_3371 << 9u)) + (_3666 << 2u)) >> 2u)).x;
                _3676 = _3675 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3676)
                {
                    frontier_phi_71_pred = _3665;
                    frontier_phi_71_pred_1 = _3664;
                    frontier_phi_71_pred_2 = _3663;
                    frontier_phi_71_pred_3 = _3662;
                    frontier_phi_71_pred_4 = _3661;
                    frontier_phi_71_pred_5 = _3660;
                }
                else
                {
                    float _3805;
                    float _3806;
                    float _3807;
                    float _3808;
                    float _3809;
                    float _3810;
                    uint _3811;
                    _3805 = _3660;
                    _3806 = _3661;
                    _3807 = _3662;
                    _3808 = _3663;
                    _3809 = _3664;
                    _3810 = _3665;
                    _3811 = _3675;
                    float _3732;
                    float _3733;
                    float _3734;
                    float _3735;
                    float _3736;
                    float _3737;
                    for (;;)
                    {
                        uint _3815 = uint(findLSB(_3811)) + (_3666 << 5u);
                        uint _3812 = (_3811 + 4294967295u) & _3811;
                        uint _3817 = _3815 * 48u;
                        vec4 _3831 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3817)).x, texelFetch(g_PointLightRenderingBuffer, int(_3817 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3817 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3817 + 3u)).x));
                        uint _3837 = (_3815 * 48u) + 4u;
                        vec4 _3850 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3837)).x, texelFetch(g_PointLightRenderingBuffer, int(_3837 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3837 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3837 + 3u)).x));
                        uint _3856 = (_3815 * 48u) + 8u;
                        vec3 _3867 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3856)).x, texelFetch(g_PointLightRenderingBuffer, int(_3856 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3856 + 2u)).x));
                        float _3871 = _3831.x - _2453;
                        float _3872 = _3831.y - _2454;
                        float _3873 = _3831.z - _2455;
                        float _3874 = dot(vec3(_3871, _3872, _3873), vec3(_3871, _3872, _3873));
                        float _3877 = inversesqrt(_3874);
                        float _3878 = _3877 * _3871;
                        float _3879 = _3877 * _3872;
                        float _3880 = _3877 * _3873;
                        float _3881 = dot(vec3(_1255, _1258, _1261), vec3(_3878, _3879, _3880));
                        float _3886 = 1.0 - (_3874 * _3831.w);
                        float _5377 = isnan(0.0) ? _3886 : (isnan(_3886) ? 0.0 : max(_3886, 0.0));
                        float _3887 = isnan(1.0) ? _5377 : (isnan(_5377) ? 1.0 : min(_5377, 1.0));
                        float _3888 = sqrt(_3874) * _3850.w;
                        float _3891 = 1.39999997615814208984375 / (_3888 + 1.39999997615814208984375);
                        float _3892 = _3891 * _3891;
                        float _3895 = ((1.0 - _3892) * _3881) + _3892;
                        float _3898 = _3888 * _3888;
                        float _3902 = ((isnan(0.0) ? _3895 : (isnan(_3895) ? 0.0 : max(_3895, 0.0))) * _3887) / ((_3898 * 0.699999988079071044921875) + 1.0);
                        float _3906 = (-0.0) - _2453;
                        float _3907 = (-0.0) - _2454;
                        float _3908 = (-0.0) - _2455;
                        float _3912 = inversesqrt(dot(vec3(_3906, _3907, _3908), vec3(_3906, _3907, _3908)));
                        float _3913 = _3912 * _3906;
                        float _3914 = _3912 * _3907;
                        float _3915 = _3912 * _3908;
                        float _3922 = exp2(log2(1.0 / ((_3898 * 3.5) + 5.0)) * 0.25);
                        float _3923 = 1.0 - _1375;
                        float _3930 = sqrt(1.0 - ((1.0 - (_3923 * _3923)) * (1.0 - (_3922 * _3922))));
                        float _3931 = _3930 * _3930;
                        float _3932 = _3931 * _3931;
                        float _3933 = _3913 + _3878;
                        float _3934 = _3914 + _3879;
                        float _3935 = _3915 + _3880;
                        float _3939 = inversesqrt(dot(vec3(_3933, _3934, _3935), vec3(_3933, _3934, _3935)));
                        float _3943 = dot(vec3(_1255, _1258, _1261), vec3(_3913, _3914, _3915));
                        float _5393 = isnan(0.0) ? _3943 : (isnan(_3943) ? 0.0 : max(_3943, 0.0));
                        float _3946 = isnan(1.0) ? _5393 : (isnan(_5393) ? 1.0 : min(_5393, 1.0));
                        float _3947 = dot(vec3(_1255, _1258, _1261), vec3(_3939 * _3933, _3939 * _3934, _3939 * _3935));
                        float _5404 = isnan(0.0) ? _3947 : (isnan(_3947) ? 0.0 : max(_3947, 0.0));
                        float _3950 = isnan(1.0) ? _5404 : (isnan(_5404) ? 1.0 : min(_5404, 1.0));
                        float _3954 = ((_3950 * _3950) * (_3932 + (-1.0))) + 1.0;
                        float _3955 = _3891 * _3931;
                        float _3956 = _3955 * _3955;
                        float _3959 = ((1.0 - _3956) * _3881) + _3956;
                        float _5415 = isnan(0.0) ? _3959 : (isnan(_3959) ? 0.0 : max(_3959, 0.0));
                        float _3960 = isnan(1.0) ? _5415 : (isnan(_5415) ? 1.0 : min(_5415, 1.0));
                        float _3961 = 1.0 - _3931;
                        float _3971 = (0.5 / (((_3960 * ((_3946 * _3961) + _3931)) + 9.9999999392252902907785028219223e-09) + (((_3960 * _3961) + _3931) * _3946))) * _3960;
                        float _5426 = isnan(0.0) ? _3971 : (isnan(_3971) ? 0.0 : max(_3971, 0.0));
                        float _3982 = (((_3932 * 3.1415927410125732421875) * (isnan(1.0) ? _5426 : (isnan(_5426) ? 1.0 : min(_5426, 1.0)))) / ((_3954 * _3954) * ((_3898 * 2.1991131305694580078125) + 3.141590118408203125))) * _3887;
                        _3735 = (_3902 * _3850.x) + _3808;
                        _3736 = (_3902 * _3850.y) + _3809;
                        _3737 = (_3902 * _3850.z) + _3810;
                        _3732 = (_3982 * _3867.x) + _3805;
                        _3733 = (_3982 * _3867.y) + _3806;
                        _3734 = (_3982 * _3867.z) + _3807;
                        if (_3812 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3805 = _3732;
                            _3806 = _3733;
                            _3807 = _3734;
                            _3808 = _3735;
                            _3809 = _3736;
                            _3810 = _3737;
                            _3811 = _3812;
                        }
                    }
                    frontier_phi_71_pred = _3737;
                    frontier_phi_71_pred_1 = _3736;
                    frontier_phi_71_pred_2 = _3735;
                    frontier_phi_71_pred_3 = _3734;
                    frontier_phi_71_pred_4 = _3733;
                    frontier_phi_71_pred_5 = _3732;
                }
                _3511 = frontier_phi_71_pred;
                _3509 = frontier_phi_71_pred_1;
                _3507 = frontier_phi_71_pred_2;
                _3505 = frontier_phi_71_pred_3;
                _3503 = frontier_phi_71_pred_4;
                _3501 = frontier_phi_71_pred_5;
                uint _3667 = _3666 + 1u;
                if (_3667 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3660 = _3501;
                    _3661 = _3503;
                    _3662 = _3505;
                    _3663 = _3507;
                    _3664 = _3509;
                    _3665 = _3511;
                    _3666 = _3667;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3500 = _3501;
            _3502 = _3503;
            _3504 = _3505;
            _3506 = _3507;
            _3508 = _3509;
            _3510 = _3511;
        }
        uvec4 _3514 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3515 = _3514.z;
        uint _3517 = (_3515 >> 8u) & 15u;
        float _3628;
        float _3630;
        float _3632;
        float _3634;
        float _3636;
        float _3638;
        if (((4294967295u << _3517) & _3391) == 0u)
        {
            _3628 = _3500;
            _3630 = _3502;
            _3632 = _3504;
            _3634 = _3506;
            _3636 = _3508;
            _3638 = _3510;
        }
        else
        {
            float _3653 = inversesqrt(dot(vec3(_2453, _2454, _2455), vec3(_2453, _2454, _2455)));
            float _3654 = _3653 * _2453;
            float _3655 = _3653 * _2454;
            float _3656 = _3653 * _2455;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3517 < ((_3515 >> 12u) & 15u))
            {
                float _3629;
                float _3631;
                float _3633;
                float _3635;
                float _3637;
                float _3639;
                float _3788 = _3500;
                float _3789 = _3502;
                float _3790 = _3504;
                float _3791 = _3506;
                float _3792 = _3508;
                float _3793 = _3510;
                uint _3794 = _3517;
                uint _3803;
                bool _3804;
                for (;;)
                {
                    _3803 = texelFetch(g_lightClassification, int((((_3385 << 5u) + (_3371 << 9u)) + (_3794 << 2u)) >> 2u)).x;
                    _3804 = _3803 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3804)
                    {
                        frontier_phi_82_pred = _3793;
                        frontier_phi_82_pred_1 = _3792;
                        frontier_phi_82_pred_2 = _3791;
                        frontier_phi_82_pred_3 = _3790;
                        frontier_phi_82_pred_4 = _3789;
                        frontier_phi_82_pred_5 = _3788;
                    }
                    else
                    {
                        float _3996;
                        float _3997;
                        float _3998;
                        float _3999;
                        float _4000;
                        float _4001;
                        float _4289;
                        float _4290;
                        float _4291;
                        float _4292;
                        float _4293;
                        float _4294;
                        float _4009 = _3788;
                        float _4010 = _3789;
                        float _4011 = _3790;
                        float _4012 = _3791;
                        float _4013 = _3792;
                        float _4014 = _3793;
                        uint _4015 = _3803;
                        uint _4016;
                        vec4 _4041;
                        float _4042;
                        vec4 _4057;
                        vec3 _4069;
                        vec4 _4084;
                        vec4 _4099;
                        float _4145;
                        bool _4146;
                        for (;;)
                        {
                            uint _4026 = ((_3794 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_4015));
                            _4016 = (_4015 + 4294967295u) & _4015;
                            uint _4028 = _4026 * 40u;
                            _4041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4028 + 3u)).x));
                            _4042 = _4041.w;
                            uint _4044 = (_4026 * 40u) + 4u;
                            _4057 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4044)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4044 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4044 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4044 + 3u)).x));
                            uint _4059 = (_4026 * 40u) + 8u;
                            _4069 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_4059)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4059 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4059 + 2u)).x));
                            uint _4071 = (_4026 * 40u) + 16u;
                            _4084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4071 + 3u)).x));
                            uint _4086 = (_4026 * 40u) + 20u;
                            _4099 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4086)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4086 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4086 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4086 + 3u)).x));
                            uint _4101 = (_4026 * 40u) + 24u;
                            vec4 _4114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4101 + 3u)).x));
                            uint _4120 = (_4026 * 40u) + 28u;
                            vec4 _4133 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_4120)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4120 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4120 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_4120 + 3u)).x));
                            _4145 = fma(_2455, _4133.z, fma(_2454, _4133.y, _4133.x * _2453)) + _4133.w;
                            _4146 = !((fma(_2455, _4114.z, fma(_2454, _4114.y, _4114.x * _2453)) + _4114.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_4146)
                            {
                                float _4173 = _4041.x - _2453;
                                float _4174 = _4041.y - _2454;
                                float _4175 = _4041.z - _2455;
                                float _4176 = dot(vec3(_4173, _4174, _4175), vec3(_4173, _4174, _4175));
                                float _4179 = inversesqrt(_4176);
                                float _4180 = _4179 * _4173;
                                float _4181 = _4179 * _4174;
                                float _4182 = _4179 * _4175;
                                float _4186 = 1.0 - (_4176 / (_4042 * _4042));
                                float _5437 = isnan(0.0) ? _4186 : (isnan(_4186) ? 0.0 : max(_4186, 0.0));
                                float _4187 = isnan(1.0) ? _5437 : (isnan(_5437) ? 1.0 : min(_5437, 1.0));
                                float _4191 = sqrt(_4176) * _4057.w;
                                float _4193 = 1.39999997615814208984375 / (_4191 + 1.39999997615814208984375);
                                float _4194 = _4193 * _4193;
                                float _4197 = ((1.0 - _4194) * dot(vec3(_4180, _4181, _4182), vec3(_1255, _1258, _1261))) + _4194;
                                float _4200 = _4191 * _4191;
                                float _4204 = (fma(_2455, _4084.z, fma(_2454, _4084.y, _4084.x * _2453)) + _4084.w) / _4145;
                                float _4205 = (fma(_2455, _4099.z, fma(_2454, _4099.y, _4099.x * _2453)) + _4099.w) / _4145;
                                float _4209 = 1.0 - dot(vec2(_4204, _4205), vec2(_4204, _4205));
                                float _5453 = isnan(0.0) ? _4209 : (isnan(_4209) ? 0.0 : max(_4209, 0.0));
                                float _4210 = isnan(1.0) ? _5453 : (isnan(_5453) ? 1.0 : min(_5453, 1.0));
                                float _4211 = _4210 * (((isnan(0.0) ? _4197 : (isnan(_4197) ? 0.0 : max(_4197, 0.0))) * _4187) / ((_4200 * 0.699999988079071044921875) + 1.0));
                                float _4223 = exp2(log2(1.0 / ((_4200 * 3.5) + 5.0)) * 0.25);
                                float _4224 = 1.0 - _1375;
                                float _4231 = sqrt(1.0 - ((1.0 - (_4224 * _4224)) * (1.0 - (_4223 * _4223))));
                                float _4232 = _4231 * _4231;
                                float _4233 = _4232 * _4232;
                                float _4234 = _4180 - _3654;
                                float _4235 = _4181 - _3655;
                                float _4236 = _4182 - _3656;
                                float _4240 = inversesqrt(dot(vec3(_4234, _4235, _4236), vec3(_4234, _4235, _4236)));
                                float _4244 = dot(vec3(_1255, _1258, _1261), vec3((-0.0) - _3654, (-0.0) - _3655, (-0.0) - _3656));
                                float _5464 = isnan(0.0) ? _4244 : (isnan(_4244) ? 0.0 : max(_4244, 0.0));
                                float _4247 = isnan(1.0) ? _5464 : (isnan(_5464) ? 1.0 : min(_5464, 1.0));
                                float _4248 = dot(vec3(_1255, _1258, _1261), vec3(_4240 * _4234, _4240 * _4235, _4240 * _4236));
                                float _5475 = isnan(0.0) ? _4248 : (isnan(_4248) ? 0.0 : max(_4248, 0.0));
                                float _4251 = isnan(1.0) ? _5475 : (isnan(_5475) ? 1.0 : min(_5475, 1.0));
                                float _4255 = ((_4251 * _4251) * (_4233 + (-1.0))) + 1.0;
                                float _4256 = _4193 * _4232;
                                float _4257 = _4256 * _4256;
                                float _4263 = ((1.0 - _4257) * dot(vec3(_1255, _1258, _1261), vec3(_4180, _4181, _4182))) + _4257;
                                float _5486 = isnan(0.0) ? _4263 : (isnan(_4263) ? 0.0 : max(_4263, 0.0));
                                float _4264 = isnan(1.0) ? _5486 : (isnan(_5486) ? 1.0 : min(_5486, 1.0));
                                float _4265 = 1.0 - _4232;
                                float _4275 = (0.5 / (((_4264 * ((_4247 * _4265) + _4232)) + 9.9999999392252902907785028219223e-09) + (((_4264 * _4265) + _4232) * _4247))) * _4264;
                                float _5497 = isnan(0.0) ? _4275 : (isnan(_4275) ? 0.0 : max(_4275, 0.0));
                                float _4285 = (_4210 * _4187) * (((_4233 * 3.1415927410125732421875) * (isnan(1.0) ? _5497 : (isnan(_5497) ? 1.0 : min(_5497, 1.0)))) / ((_4255 * _4255) * ((_4200 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4211 * _4057.z;
                                frontier_phi_88_pred_1 = _4211 * _4057.y;
                                frontier_phi_88_pred_2 = _4211 * _4057.x;
                                frontier_phi_88_pred_3 = _4285 * _4069.z;
                                frontier_phi_88_pred_4 = _4285 * _4069.y;
                                frontier_phi_88_pred_5 = _4285 * _4069.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4294 = frontier_phi_88_pred;
                            _4293 = frontier_phi_88_pred_1;
                            _4292 = frontier_phi_88_pred_2;
                            _4291 = frontier_phi_88_pred_3;
                            _4290 = frontier_phi_88_pred_4;
                            _4289 = frontier_phi_88_pred_5;
                            _3999 = _4292 + _4012;
                            _4000 = _4293 + _4013;
                            _4001 = _4294 + _4014;
                            _3996 = _4289 + _4009;
                            _3997 = _4290 + _4010;
                            _3998 = _4291 + _4011;
                            if (_4016 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _4009 = _3996;
                                _4010 = _3997;
                                _4011 = _3998;
                                _4012 = _3999;
                                _4013 = _4000;
                                _4014 = _4001;
                                _4015 = _4016;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _4001;
                        frontier_phi_82_pred_1 = _4000;
                        frontier_phi_82_pred_2 = _3999;
                        frontier_phi_82_pred_3 = _3998;
                        frontier_phi_82_pred_4 = _3997;
                        frontier_phi_82_pred_5 = _3996;
                    }
                    _3639 = frontier_phi_82_pred;
                    _3637 = frontier_phi_82_pred_1;
                    _3635 = frontier_phi_82_pred_2;
                    _3633 = frontier_phi_82_pred_3;
                    _3631 = frontier_phi_82_pred_4;
                    _3629 = frontier_phi_82_pred_5;
                    uint _3795 = _3794 + 1u;
                    if (_3795 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3788 = _3629;
                        _3789 = _3631;
                        _3790 = _3633;
                        _3791 = _3635;
                        _3792 = _3637;
                        _3793 = _3639;
                        _3794 = _3795;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3635;
                frontier_phi_63_64_ladder_1 = _3639;
                frontier_phi_63_64_ladder_2 = _3637;
                frontier_phi_63_64_ladder_3 = _3633;
                frontier_phi_63_64_ladder_4 = _3631;
                frontier_phi_63_64_ladder_5 = _3629;
            }
            else
            {
                frontier_phi_63_64_ladder = _3506;
                frontier_phi_63_64_ladder_1 = _3510;
                frontier_phi_63_64_ladder_2 = _3508;
                frontier_phi_63_64_ladder_3 = _3504;
                frontier_phi_63_64_ladder_4 = _3502;
                frontier_phi_63_64_ladder_5 = _3500;
            }
            _3628 = frontier_phi_63_64_ladder_5;
            _3630 = frontier_phi_63_64_ladder_4;
            _3632 = frontier_phi_63_64_ladder_3;
            _3634 = frontier_phi_63_64_ladder;
            _3636 = frontier_phi_63_64_ladder_2;
            _3638 = frontier_phi_63_64_ladder_1;
        }
        float _3643 = isnan(1.0) ? _1359 : (isnan(_1359) ? 1.0 : min(_1359, 1.0));
        _3404 = (_3643 * _3634) + _2916;
        _3406 = (_3643 * _3636) + _2918;
        _3408 = (_3643 * _3638) + _2920;
        _3410 = ((_3628 * _1344) * _3643) + _3254;
        _3412 = ((_3630 * _1346) * _3643) + _3256;
        _3414 = ((_3632 * _1347) * _3643) + _3258;
    }
    else
    {
        _3404 = _2916;
        _3406 = _2918;
        _3408 = _2920;
        _3410 = _3254;
        _3412 = _3256;
        _3414 = _3258;
    }
    uint _3420 = _1288 + uint(cbMatDynParam._m0[0u].w);
    float _3426 = (((((cbMtdParam._m0[22u].x * _1056.x) * cbMtdParam._m0[32u].x) * _1079) + _830) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3420].x;
    float _3427 = (((((cbMtdParam._m0[22u].y * _1056.y) * cbMtdParam._m0[32u].x) * _1079) + _831) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3420].y;
    float _3428 = (((((cbMtdParam._m0[22u].z * _1056.z) * cbMtdParam._m0[32u].x) * _1079) + _832) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3420].z;
    float _5513 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
    float _5524 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
    float _5535 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
    float _3445 = (((isnan(1.0) ? _5513 : (isnan(_5513) ? 1.0 : min(_5513, 1.0))) * (_3404 + ((isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0))) * _1359))) + ((_3410 + ((isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0))) * _2187)) * cbPerFrame._m0[3u].x)) + _3426;
    float _3447 = (_3427 + ((_3412 + ((isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0))) * _2187)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5524 : (isnan(_5524) ? 1.0 : min(_5524, 1.0))) * (_3406 + ((isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0))) * _1359)));
    float _3449 = (_3428 + ((_3414 + ((isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0))) * _2187)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5535 : (isnan(_5535) ? 1.0 : min(_5535, 1.0))) * (_3408 + ((isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0))) * _1359)));
    float _3450 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
    float _3451 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
    float _3452 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
    float _3458 = cbMtdParam._m0[2u].x * _3426;
    float _3459 = cbMtdParam._m0[2u].y * _3427;
    float _3460 = cbMtdParam._m0[2u].z * _3428;
    float _5561 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3462 = isnan(1.0) ? _5561 : (isnan(_5561) ? 1.0 : min(_5561, 1.0));
    uint _3463 = _1287 + 6u;
    float _3471 = _1232 / cbSceneParam._m0[86u].x;
    float _3472 = _1233 / cbSceneParam._m0[86u].y;
    vec4 _3486 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3471, _3472, (log2((isnan(cbSceneParam._m0[77u].w) ? _1175 : (isnan(_1175) ? cbSceneParam._m0[77u].w : min(_1175, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3488 = _3486.x;
    float _3489 = _3486.y;
    float _3490 = _3486.z;
    float _3491 = _3486.w;
    float _3562;
    float _3564;
    float _3566;
    float _3568;
    if (_1175 > cbSceneParam._m0[78u].w)
    {
        float _3525 = isnan(_1175) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1175 : min(cbSceneParam._m0[80u].w, _1175));
        float _3526 = _3525 / _1175;
        float _3537 = _3526 * _1205;
        float _3538 = _1206 * _3526;
        float _3539 = (-0.0) - _3538;
        float _3540 = _3526 * _1207;
        float _3542 = (cbSceneParam._m0[77u].w * _3539) / _3525;
        float _3543 = _3542 + cbSceneParam._m0[79u].w;
        float _3544 = cbSceneParam._m0[79u].w - _3538;
        float _3550 = sqrt(((_3537 * _3537) + (_3538 * _3538)) + (_3540 * _3540));
        float _3553 = (1.0 - (cbSceneParam._m0[77u].w / _3525)) * _3550;
        float _3558 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3560 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3745;
        if (abs((_3539 - _3542) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3745 = ((((_3543 > 0.0) ? exp2(_3558 * _3543) : (2.0 - exp2(_3560 * _3543))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3553;
        }
        else
        {
            float _3689 = 1.0 / cbSceneParam._m0[80u].x;
            float _3690 = isnan(_3544) ? _3543 : (isnan(_3543) ? _3544 : max(_3543, _3544));
            float _3691 = isnan(_3544) ? _3543 : (isnan(_3543) ? _3544 : min(_3543, _3544));
            float _3700 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : min(_3690, 0.0));
            float _3701 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : min(_3691, 0.0));
            _3745 = ((abs(_3550 / _3539) * cbSceneParam._m0[80u].y) * ((((_3700 - _3701) * 2.0) - ((exp2(_3558 * (isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0)))) - exp2(_3558 * (isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0))))) * _3689)) - ((exp2(_3560 * _3700) - exp2(_3560 * _3701)) * _3689))) + (_3553 * cbSceneParam._m0[80u].z);
        }
        vec4 _3747 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3471, _3472, 1.0), 0.0);
        float _3756 = exp2((_3745 * (-1.44269502162933349609375)) * (1.0 - _3747.w));
        float _3757 = log2(_3756);
        float _3773 = log2(_3491);
        _3562 = (exp2(_3773 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3757 * cbSceneParam._m0[78u].x)) * _3747.x) / cbSceneParam._m0[78u].x)) + _3488;
        _3564 = (exp2(_3773 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3757 * cbSceneParam._m0[78u].y)) * _3747.y) / cbSceneParam._m0[78u].y)) + _3489;
        _3566 = (exp2(_3773 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3757 * cbSceneParam._m0[78u].z)) * _3747.z) / cbSceneParam._m0[78u].z)) + _3490;
        _3568 = _3756 * _3491;
    }
    else
    {
        _3562 = _3488;
        _3564 = _3489;
        _3566 = _3490;
        _3568 = _3491;
    }
    bool _3783;
    vec4 _3577;
    vec4 _3599;
    float _3601;
    float _3605;
    float _3606;
    float _3607;
    float _3610;
    float _3613;
    float _3616;
    float _3617;
    bool _3627;
    for (;;)
    {
        _3577 = cbMatDynParam._m0[0u];
        float _3579 = roundEven(_3577.y);
        bool _3580 = _3579 == 3.0;
        float _3581 = log2(_3568);
        float _3585 = exp2(_3581 * cbSceneParam._m0[78u].x);
        float _3586 = exp2(_3581 * cbSceneParam._m0[78u].y);
        float _3587 = exp2(_3581 * cbSceneParam._m0[78u].z);
        float _3588 = _3585 * _3450;
        float _3589 = _3586 * _3451;
        float _3590 = _3587 * _3452;
        float _3597 = _1221 + (-0.5);
        _3599 = cbMtdParam._m0[1u];
        _3601 = _3599.y * _3597;
        float _3604 = (_3579 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3605 = _3604 * (_3580 ? _3588 : (_3588 + (cbSceneParam._m0[72u].w * _3562)));
        _3606 = _3604 * (_3580 ? _3589 : (_3589 + (cbSceneParam._m0[72u].w * _3564)));
        _3607 = _3604 * (_3580 ? _3590 : (_3590 + (cbSceneParam._m0[72u].w * _3566)));
        _3610 = ((_3458 * _3462) * _3585) * _3604;
        _3613 = ((_3459 * _3462) * _3586) * _3604;
        _3616 = ((_3460 * _3462) * _3587) * _3604;
        _3617 = _3597 * 0.999000012874603271484375;
        _3627 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3627)
        {
            if ((cbInstanceData._m0[_1287 + 7u].x + _3617) < 0.5)
            {
                _3783 = true;
                break;
            }
        }
        uint _3724 = _1288 + uint(_3577.w);
        if ((cbInstanceData._m0[_3724].w < 1.0) && ((cbInstanceData._m0[_3724].w + _3617) < 0.5))
        {
            _3783 = true;
            break;
        }
        if ((_3601 + 1.0) < _3599.x)
        {
            _3783 = true;
            break;
        }
        _3783 = false;
        break;
    }
    float _3987;
    if (_3783)
    {
        discard_state = true;
        _3987 = 0.0;
    }
    else
    {
        _3987 = cbInstanceData._m0[_3463].w;
    }
    SV_Target.x = _3605;
    SV_Target.y = _3606;
    SV_Target.z = _3607;
    SV_Target.w = _3987;
    SV_Target_1.x = _3610;
    SV_Target_1.y = _3613;
    SV_Target_1.z = _3616;
    SV_Target_1.w = cbInstanceData._m0[_3463].w;
    discard_exit();
}


