#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1566;
float _4261;
float _4262;
float _4263;
float _4264;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _231 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _232 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _233 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _239 = inversesqrt(dot(vec3(_231, _232, _233), vec3(_231, _232, _233)));
    float _246 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _253 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _275 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _280 = _275.z;
    float _281 = _275.w;
    vec4 _303 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _308 = _303.w;
    float _320 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _280) * exp2(log2(1.0 - _308) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _321 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _322 = isnan(1.0) ? _321 : (isnan(_321) ? 1.0 : min(_321, 1.0));
    vec4 _336 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _346 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _354 = (_346 - (((_336.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _346))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4283 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _355 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _357 = _322 - (_355 * _322);
    float _358 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    vec4 _372 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _375 = _372.y;
    float _376 = _375 * (isnan(1.0) ? _358 : (isnan(_358) ? 1.0 : min(_358, 1.0)));
    float _385 = exp2(log2(cbMtdParam._m0[32u].w * _308) * cbMtdParam._m0[31u].z);
    float _387 = _385 - (_355 * _385);
    float _388 = isnan(0.0) ? _387 : (isnan(_387) ? 0.0 : max(_387, 0.0));
    float _389 = isnan(1.0) ? _388 : (isnan(_388) ? 1.0 : min(_388, 1.0));
    float _400 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_281) * 4.5));
    float _409 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _280) * _400)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _410 = isnan(0.0) ? _409 : (isnan(_409) ? 0.0 : max(_409, 0.0));
    float _411 = isnan(1.0) ? _410 : (isnan(_410) ? 1.0 : min(_410, 1.0));
    float _422 = exp2(log2((1.0 - (((_400 * _400) * _280) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _423 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _427 = (((isnan(1.0) ? _423 : (isnan(_423) ? 1.0 : min(_423, 1.0))) - _281) * _375) + _281;
    vec4 _439 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _452 = (_372.x + (-0.02500000037252902984619140625)) * 8.0;
    float _454 = roundEven(_452);
    float _455 = cbMtdParam._m0[10u].x * _439.x;
    float _456 = cbMtdParam._m0[10u].y * _439.y;
    float _457 = cbMtdParam._m0[10u].z * _439.z;
    vec4 _469 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _480 = cbMtdParam._m0[9u].x * _469.x;
    float _481 = cbMtdParam._m0[9u].y * _469.y;
    float _482 = cbMtdParam._m0[9u].z * _469.z;
    float _489 = ((_480 - _455) * _427) + _455;
    float _490 = ((_481 - _456) * _427) + _456;
    float _491 = ((_482 - _457) * _427) + _457;
    vec4 _503 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _523 = (((cbMtdParam._m0[20u].x * _503.x) - _489) * _411) + _489;
    float _524 = (((cbMtdParam._m0[20u].y * _503.y) - _490) * _411) + _490;
    float _525 = (((cbMtdParam._m0[20u].z * _503.z) - _491) * _411) + _491;
    vec4 _537 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _557 = (((cbMtdParam._m0[29u].x * _537.x) - _523) * _389) + _523;
    float _558 = (((cbMtdParam._m0[29u].y * _537.y) - _524) * _389) + _524;
    float _559 = (((cbMtdParam._m0[29u].z * _537.z) - _525) * _389) + _525;
    float _204[6];
    float _205[6];
    float _206[6];
    _204[0u] = cbMtdParam._m0[30u].x;
    _205[0u] = cbMtdParam._m0[30u].y;
    _206[0u] = cbMtdParam._m0[30u].z;
    _204[1u] = cbMtdParam._m0[28u].x;
    _205[1u] = cbMtdParam._m0[28u].y;
    _206[1u] = cbMtdParam._m0[28u].z;
    _204[2u] = cbMtdParam._m0[27u].x;
    _205[2u] = cbMtdParam._m0[27u].y;
    _206[2u] = cbMtdParam._m0[27u].z;
    _204[3u] = cbMtdParam._m0[26u].x;
    _205[3u] = cbMtdParam._m0[26u].y;
    _206[3u] = cbMtdParam._m0[26u].z;
    _204[4u] = cbMtdParam._m0[25u].x;
    _205[4u] = cbMtdParam._m0[25u].y;
    _206[4u] = cbMtdParam._m0[25u].z;
    _204[5u] = cbMtdParam._m0[24u].x;
    _205[5u] = cbMtdParam._m0[24u].y;
    _206[5u] = cbMtdParam._m0[24u].z;
    float _628 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    uint _631 = uint(int(isnan(5.0) ? _628 : (isnan(_628) ? 5.0 : min(_628, 5.0))));
    float _638 = _204[_631] * _375;
    float _639 = _205[_631] * _375;
    float _640 = _206[_631] * _375;
    float _641 = _638 + ((_303.x * 4.5) * (((_480 - _557) * _376) + _557));
    float _642 = _639 + ((_303.y * 4.5) * (((_481 - _558) * _376) + _558));
    float _643 = _640 + ((_303.z * 4.5) * (((_482 - _559) * _376) + _559));
    float _199[5];
    float _200[5];
    _199[0u] = cbMtdParam._m0[37u].w;
    _200[0u] = cbMtdParam._m0[38u].x;
    _199[1u] = cbMtdParam._m0[39u].w;
    _200[1u] = cbMtdParam._m0[40u].x;
    _199[2u] = cbMtdParam._m0[40u].y;
    _200[2u] = cbMtdParam._m0[40u].z;
    _199[3u] = cbMtdParam._m0[40u].w;
    _200[3u] = cbMtdParam._m0[41u].x;
    _199[4u] = cbMtdParam._m0[41u].y;
    _200[4u] = cbMtdParam._m0[41u].z;
    float _676 = roundEven(5.0 - _452);
    float _677 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _678 = isnan(4.0) ? _677 : (isnan(_677) ? 4.0 : min(_677, 4.0));
    float _680 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    uint _682 = uint(int(isnan(4.0) ? _680 : (isnan(_680) ? 4.0 : min(_680, 4.0))));
    float _694 = ((cbMtdParam._m0[42u].z - _200[_682]) * _427) + _200[_682];
    float _702 = ((cbMtdParam._m0[43u].x - _694) * _411) + _694;
    float _707 = ((cbMtdParam._m0[43u].z - _702) * _389) + _702;
    float _712 = ((cbMtdParam._m0[39u].z - _707) * _376) + _707;
    vec4 _726 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _728 = _726.x;
    float _729 = _726.y;
    float _731 = _726.z + _199[_682];
    vec4 _743 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _751 = (((cbMtdParam._m0[42u].y - _731) + _743.z) * _427) + _731;
    vec4 _764 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _772 = (((cbMtdParam._m0[42u].w - _751) + _764.z) * _411) + _751;
    float _778 = ((((_280 * 2.0) * _772) - _772) * cbMtdParam._m0[34u].x) + _772;
    vec4 _791 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _799 = (((_791.z + cbMtdParam._m0[43u].y) - _778) * _389) + _778;
    float _803 = (((cbMtdParam._m0[39u].y + _336.z) - _799) * _376) + _799;
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _866 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_835 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_839 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _881 = (-0.0) - ((_839 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _885 = (_839 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _886 = isnan(_885) ? _881 : (isnan(_881) ? _885 : min(_881, _885));
    float _4369 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _887 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
    float _915 = ((_743.x - _728) * _427) + _728;
    float _916 = ((_743.y - _729) * _427) + _729;
    float _921 = ((_764.x - _915) * _411) + _915;
    float _922 = ((_764.y - _916) * _411) + _916;
    float _927 = ((_791.x - _921) * _389) + _921;
    float _928 = ((_791.y - _922) * _389) + _922;
    float _937 = ((((_336.x - _927) * _376) + _927) * 2.0) + (-1.0);
    float _938 = ((((_336.y - _928) * _376) + _928) * 2.0) + (-1.0);
    float _939 = dot(vec2(_937, _938), vec2(_937, _938));
    float _4380 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _944 = sqrt(1.0 - (isnan(1.0) ? _4380 : (isnan(_4380) ? 1.0 : min(_4380, 1.0))));
    float _947 = (cbMtdParam._m0[34u].z * ((_275.x * 2.0) + (-1.0))) + _937;
    float _948 = (cbMtdParam._m0[34u].z * ((_275.y * 2.0) + (-1.0))) + _938;
    float _951 = fma(_944, _246 * NORMAL.x, fma(_948, _253 * TANGENT.x, (_239 * _231) * _947));
    float _954 = fma(_944, _246 * NORMAL.y, fma(_948, _253 * TANGENT.y, (_239 * _232) * _947));
    float _957 = fma(_944, _246 * NORMAL.z, fma(_948, _253 * TANGENT.z, (_239 * _233) * _947));
    float _961 = inversesqrt(dot(vec3(_951, _954, _957), vec3(_951, _954, _957)));
    float _962 = _961 * _951;
    float _963 = _961 * _954;
    float _964 = _961 * _957;
    float _4391 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _965 = isnan(1.0) ? _4391 : (isnan(_4391) ? 1.0 : min(_4391, 1.0));
    float _4402 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _4413 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _4424 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _4435 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _969 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
    float _985 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1005 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1015 = cbSceneParam._m0[71u].x - (_835 / _1005);
    float _1016 = cbSceneParam._m0[71u].y - (_839 / _1005);
    float _1017 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1005);
    float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
    float _1022 = _1015 * _1021;
    float _1023 = _1016 * _1021;
    float _1024 = _1017 * _1021;
    vec4 _1029 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1031 = _1029.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1249 = sqrt(((_1015 * _1015) + (_1016 * _1016)) + (_1017 * _1017));
        float _1255 = (cbMatDynParam._m0[5u].x * _1249) + cbMatDynParam._m0[5u].y;
        float _4446 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1256 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _1260 = (cbMatDynParam._m0[5u].z * _1249) + cbMatDynParam._m0[5u].w;
        float _4457 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0))) - _1256)) + _1256) < ((_1031 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1042 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1043 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1045 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1047 = _1045.w;
    float _1065 = fma(_964, cbSceneParam._m0[5u].z, fma(_963, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _962));
    float _1068 = fma(_964, cbSceneParam._m0[6u].z, fma(_963, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _962));
    float _1071 = fma(_964, cbSceneParam._m0[7u].z, fma(_963, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _962));
    vec4 _1073 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1084 = (((_1073.y - _965) + (_1073.w * _965)) * cbMtdParam._m0[3u].x) + _965;
    uint _1097 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1098 = _1097 + 9u;
    uint _1099 = _1098 + uint(cbMatDynParam._m0[0u].w);
    float _1105 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4402 : (isnan(_4402) ? 1.0 : min(_4402, 1.0)))) * cbInstanceData._m0[_1099].x;
    float _1106 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0)))) * cbInstanceData._m0[_1099].y;
    float _1107 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0)))) * cbInstanceData._m0[_1099].z;
    float _4468 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
    float _1108 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
    float _1109 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _4490 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
    float _1110 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    vec4 _1111 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1116 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1127 = (((_1116.x - _969) + (_1116.w * _969)) * cbMtdParam._m0[3u].x) + _969;
    float _1140 = (cbMtdParam._m0[3u].x * (((_1108 * _1047) - _1108) + _1111.x)) + _1108;
    float _1141 = (cbMtdParam._m0[3u].x * (((_1109 * _1047) - _1109) + _1111.y)) + _1109;
    float _1142 = (cbMtdParam._m0[3u].x * (((_1110 * _1047) - _1110) + _1111.z)) + _1110;
    float _1143 = 1.0 - _1127;
    float _1144 = _1143 * _1140;
    float _1145 = _1143 * _1141;
    float _1146 = _1143 * _1142;
    float _1151 = (_1140 + (-0.039999999105930328369140625)) * _1127;
    float _1152 = (_1141 + (-0.039999999105930328369140625)) * _1127;
    float _1153 = (_1142 + (-0.039999999105930328369140625)) * _1127;
    float _1154 = _1151 + 0.039999999105930328369140625;
    float _1156 = _1152 + 0.039999999105930328369140625;
    float _1157 = _1153 + 0.039999999105930328369140625;
    vec4 _1166 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1042, cbSceneParam._m0[86u].y * _1043));
    float _1169 = _1166.x * TEXCOORD_5.w;
    float _1170 = dot(vec3(_962, _963, _964), vec3(_1022, _1023, _1024));
    float _1173 = _1170 * 2.0;
    float _1177 = (_1173 * _962) - _1022;
    float _1178 = (_1173 * _963) - _1023;
    float _1179 = (_1173 * _964) - _1024;
    float _1183 = abs(dot(vec3(_1022, _1023, _1024), vec3(_962, _963, _964)));
    float _4501 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1185 = sqrt(_1084);
    float _1196 = exp2((_1185 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1185 * 3.0));
    float _1202 = (1.0 - _1196) * ((_1185 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1203 = _1196 * _1185;
    float _1231 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1235 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1239 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1565;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1292 = fma(_1239, cbModelParam._m0[26u].z, fma(_1235, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1231));
        float _1296 = fma(_1239, cbModelParam._m0[27u].z, fma(_1235, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1231));
        float _1300 = fma(_1239, cbModelParam._m0[28u].z, fma(_1235, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1231));
        float _1324 = _1231 + _962;
        float _1325 = _1235 + _963;
        float _1326 = _1239 + _964;
        float _1336 = fma(_1326, cbModelParam._m0[26u].z, fma(_1325, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1324)) - _1292;
        float _1337 = fma(_1326, cbModelParam._m0[27u].z, fma(_1325, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1324)) - _1296;
        float _1338 = fma(_1326, cbModelParam._m0[28u].z, fma(_1325, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1324)) - _1300;
        float _1342 = inversesqrt(dot(vec3(_1336, _1337, _1338), vec3(_1336, _1337, _1338)));
        float _1354 = ((_1342 * _1336) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1292 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1355 = ((_1342 * _1337) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1296 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1356 = ((_1342 * _1338) / cbModelParam._m0[34u].z) + ((((((_1300 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1359 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1366 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1373 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        vec4 _1380 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1354, _1355, _1356), 0.0);
        float _1393 = exp2((_1359.w + (-0.5)) * 20.0) * 2.0;
        float _1394 = _1393 * (_1359.x + (-0.5));
        float _1395 = _1393 * (_1359.y + (-0.5));
        float _1396 = _1393 * (_1359.z + (-0.5));
        float _1403 = exp2((_1366.w + (-0.5)) * 20.0) * 2.0;
        float _1404 = _1403 * (_1366.x + (-0.5));
        float _1405 = _1403 * (_1366.y + (-0.5));
        float _1406 = _1403 * (_1366.z + (-0.5));
        float _1413 = exp2((_1373.w + (-0.5)) * 20.0) * 2.0;
        float _1414 = _1413 * (_1373.x + (-0.5));
        float _1415 = _1413 * (_1373.y + (-0.5));
        float _1416 = _1413 * (_1373.z + (-0.5));
        float _1423 = exp2((_1380.w + (-0.5)) * 20.0) * 2.0;
        float _1424 = _1423 * (_1380.x + (-0.5));
        float _1425 = _1423 * (_1380.y + (-0.5));
        float _1426 = _1423 * (_1380.z + (-0.5));
        float _1427 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1428 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1429 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1430 = _1394 * 0.5;
        float _1431 = _1404 * 0.5;
        float _1432 = _1414 * 0.5;
        float _1433 = dot(vec3(_1430, _1431, _1432), vec3(_1430, _1431, _1432));
        float _1438 = (_1433 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1433);
        float _1447 = (dot(vec3(_962, _963, _964), vec3(_1438 * _1430, _1438 * _1431, _1438 * _1432)) + 1.0) * 0.5;
        float _4527 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        float _1457 = sqrt(((_1431 * _1431) + (_1430 * _1430)) + (_1432 * _1432)) / (_1427 + 9.9999997473787516355514526367188e-06);
        float _4538 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _4549 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0))) * (_1459 + 1.0))) + _1464) * _1427;
        float _1474 = _1395 * 0.5;
        float _1475 = _1405 * 0.5;
        float _1476 = _1415 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_962, _963, _964), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _4560 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1428 + 9.9999997473787516355514526367188e-06);
        float _4571 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _4582 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4582 : (isnan(_4582) ? 1.0 : min(_4582, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0))) * (_1501 + 1.0))) + _1506) * _1428;
        float _1516 = _1396 * 0.5;
        float _1517 = _1406 * 0.5;
        float _1518 = _1416 * 0.5;
        float _1519 = dot(vec3(_1516, _1517, _1518), vec3(_1516, _1517, _1518));
        float _1524 = (_1519 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1519);
        float _1532 = (dot(vec3(_962, _963, _964), vec3(_1524 * _1516, _1524 * _1517, _1524 * _1518)) + 1.0) * 0.5;
        float _4593 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1541 = sqrt(((_1517 * _1517) + (_1516 * _1516)) + (_1518 * _1518)) / (_1429 + 9.9999997473787516355514526367188e-06);
        float _4604 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1542 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
        float _1543 = _1542 * 2.0;
        float _1547 = (1.0 - _1542) / (_1542 + 1.0);
        float _4615 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
        float _1557 = ((((1.0 - _1548) * (_1543 + 2.0)) * exp2(log2(isnan(1.0) ? _4593 : (isnan(_4593) ? 1.0 : min(_4593, 1.0))) * (_1543 + 1.0))) + _1548) * _1429;
        _1565 = _1396;
        _1567 = _1395;
        _1568 = _1394;
        _1569 = _1406;
        _1570 = _1405;
        _1571 = _1404;
        _1572 = _1416;
        _1573 = _1415;
        _1574 = _1414;
        _1575 = _1429;
        _1576 = _1428;
        _1577 = _1427;
        _1578 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1579 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
        _1580 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)));
    }
    else
    {
        _1565 = _1566;
        _1567 = _1566;
        _1568 = _1566;
        _1569 = _1566;
        _1570 = _1566;
        _1571 = _1566;
        _1572 = _1566;
        _1573 = _1566;
        _1574 = _1566;
        _1575 = _1566;
        _1576 = _1566;
        _1577 = _1566;
        _1578 = 0.0;
        _1579 = 0.0;
        _1580 = 0.0;
    }
    float _1873;
    float _1874;
    float _1875;
    float _1876;
    float _1877;
    float _1878;
    float _1879;
    float _1880;
    float _1881;
    float _1882;
    float _1883;
    float _1884;
    float _1885;
    float _1886;
    float _1887;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1606 = fma(_1239, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1231));
        float _1610 = fma(_1239, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1231));
        float _1614 = fma(_1239, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1231));
        float _1636 = _1231 + _962;
        float _1637 = _1235 + _963;
        float _1638 = _1239 + _964;
        float _1648 = fma(_1638, cbModelParam._m0[30u].z, fma(_1637, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1636)) - _1606;
        float _1649 = fma(_1638, cbModelParam._m0[31u].z, fma(_1637, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1636)) - _1610;
        float _1650 = fma(_1638, cbModelParam._m0[32u].z, fma(_1637, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1636)) - _1614;
        float _1654 = inversesqrt(dot(vec3(_1648, _1649, _1650), vec3(_1648, _1649, _1650)));
        float _1666 = ((_1654 * _1648) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1606 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1667 = ((_1654 * _1649) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1610 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1668 = ((_1654 * _1650) / cbModelParam._m0[35u].z) + ((((((_1614 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1670 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1677 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1684 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        vec4 _1691 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1666, _1667, _1668), 0.0);
        float _1703 = exp2((_1670.w + (-0.5)) * 20.0) * 2.0;
        float _1704 = _1703 * (_1670.x + (-0.5));
        float _1705 = _1703 * (_1670.y + (-0.5));
        float _1706 = _1703 * (_1670.z + (-0.5));
        float _1713 = exp2((_1677.w + (-0.5)) * 20.0) * 2.0;
        float _1714 = _1713 * (_1677.x + (-0.5));
        float _1715 = _1713 * (_1677.y + (-0.5));
        float _1716 = _1713 * (_1677.z + (-0.5));
        float _1723 = exp2((_1684.w + (-0.5)) * 20.0) * 2.0;
        float _1724 = _1723 * (_1684.x + (-0.5));
        float _1725 = _1723 * (_1684.y + (-0.5));
        float _1726 = _1723 * (_1684.z + (-0.5));
        float _1733 = exp2((_1691.w + (-0.5)) * 20.0) * 2.0;
        float _1734 = _1733 * (_1691.x + (-0.5));
        float _1735 = _1733 * (_1691.y + (-0.5));
        float _1736 = _1733 * (_1691.z + (-0.5));
        float _1737 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0));
        float _1738 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
        float _1739 = isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0));
        float _1740 = _1704 * 0.5;
        float _1741 = _1714 * 0.5;
        float _1742 = _1724 * 0.5;
        float _1743 = dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742));
        float _1748 = (_1743 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1743);
        float _1756 = (dot(vec3(_962, _963, _964), vec3(_1748 * _1740, _1748 * _1741, _1748 * _1742)) + 1.0) * 0.5;
        float _4656 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
        float _1765 = sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742)) / (_1737 + 9.9999997473787516355514526367188e-06);
        float _4667 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
        float _1766 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _1767 = _1766 * 2.0;
        float _1771 = (1.0 - _1766) / (_1766 + 1.0);
        float _4678 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
        float _1772 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _1781 = ((((1.0 - _1772) * (_1767 + 2.0)) * exp2(log2(isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_1767 + 1.0))) + _1772) * _1737;
        float _1782 = _1705 * 0.5;
        float _1783 = _1715 * 0.5;
        float _1784 = _1725 * 0.5;
        float _1785 = dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784));
        float _1790 = (_1785 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1785);
        float _1798 = (dot(vec3(_962, _963, _964), vec3(_1790 * _1782, _1790 * _1783, _1790 * _1784)) + 1.0) * 0.5;
        float _4689 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
        float _1807 = sqrt(((_1783 * _1783) + (_1782 * _1782)) + (_1784 * _1784)) / (_1738 + 9.9999997473787516355514526367188e-06);
        float _4700 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0));
        float _1808 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _1809 = _1808 * 2.0;
        float _1813 = (1.0 - _1808) / (_1808 + 1.0);
        float _4711 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
        float _1814 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _1823 = ((((1.0 - _1814) * (_1809 + 2.0)) * exp2(log2(isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_1809 + 1.0))) + _1814) * _1738;
        float _1824 = _1706 * 0.5;
        float _1825 = _1716 * 0.5;
        float _1826 = _1726 * 0.5;
        float _1827 = dot(vec3(_1824, _1825, _1826), vec3(_1824, _1825, _1826));
        float _1832 = (_1827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1827);
        float _1840 = (dot(vec3(_962, _963, _964), vec3(_1832 * _1824, _1832 * _1825, _1832 * _1826)) + 1.0) * 0.5;
        float _4722 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1849 = sqrt(((_1825 * _1825) + (_1824 * _1824)) + (_1826 * _1826)) / (_1739 + 9.9999997473787516355514526367188e-06);
        float _4733 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
        float _1850 = isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0));
        float _1851 = _1850 * 2.0;
        float _1855 = (1.0 - _1850) / (_1850 + 1.0);
        float _4744 = isnan(0.0) ? _1855 : (isnan(_1855) ? 0.0 : max(_1855, 0.0));
        float _1856 = isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0));
        float _1865 = ((((1.0 - _1856) * (_1851 + 2.0)) * exp2(log2(isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_1851 + 1.0))) + _1856) * _1739;
        _1873 = _1706;
        _1874 = _1705;
        _1875 = _1704;
        _1876 = _1716;
        _1877 = _1715;
        _1878 = _1714;
        _1879 = _1726;
        _1880 = _1725;
        _1881 = _1724;
        _1882 = _1739;
        _1883 = _1738;
        _1884 = _1737;
        _1885 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0)));
        _1886 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0)));
        _1887 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
    }
    else
    {
        _1873 = _1566;
        _1874 = _1566;
        _1875 = _1566;
        _1876 = _1566;
        _1877 = _1566;
        _1878 = _1566;
        _1879 = _1566;
        _1880 = _1566;
        _1881 = _1566;
        _1882 = _1566;
        _1883 = _1566;
        _1884 = _1566;
        _1885 = 0.0;
        _1886 = 0.0;
        _1887 = 0.0;
    }
    float _1897 = (cbModelParam._m0[1u].x * (_1885 - _1578)) + _1578;
    float _1898 = (cbModelParam._m0[1u].x * (_1886 - _1579)) + _1579;
    float _1899 = (cbModelParam._m0[1u].x * (_1887 - _1580)) + _1580;
    float _1920 = fma(_1899, cbSceneParam._m0[89u].z, fma(_1898, cbSceneParam._m0[89u].y, _1897 * cbSceneParam._m0[89u].x));
    float _1923 = fma(_1899, cbSceneParam._m0[90u].z, fma(_1898, cbSceneParam._m0[90u].y, _1897 * cbSceneParam._m0[90u].x));
    float _1926 = fma(_1899, cbSceneParam._m0[91u].z, fma(_1898, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1897));
    float _1939 = _1177 * 0.5;
    float _1940 = _1178 * 0.5;
    float _1941 = _1179 * 0.5;
    float _1942 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1875, _1878, _1881, _1884));
    float _1945 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1874, _1877, _1880, _1883));
    float _1948 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1873, _1876, _1879, _1882));
    float _1982;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1955 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1565, _1569, _1572, _1575));
        float _1959 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1567, _1570, _1573, _1576));
        float _1963 = dot(vec4(_1939, _1940, _1941, 1.0), vec4(_1568, _1571, _1574, _1577));
        float _1970 = dot(vec4(cbModelParam._m0[39u]), vec4(_1939, _1940, _1941, 1.0));
        _1982 = dot(vec3(isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)), isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0)), isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1970) ? 0.0 : (isnan(0.0) ? _1970 : max(0.0, _1970))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1982 = 1.0;
    }
    float _1993;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1984 = dot(vec4(cbModelParam._m0[40u]), vec4(_1939, _1940, _1941, 1.0));
        _1993 = dot(vec3(isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0)), isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0)), isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1984) ? 0.0 : (isnan(0.0) ? _1984 : max(0.0, _1984))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1993 = 1.0;
    }
    float _1997 = (_1993 * cbModelParam._m0[1u].x) + (_1982 * (1.0 - cbModelParam._m0[1u].x));
    float _2007 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1084);
    float _2008 = isnan(_2007) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2007 : min(cbModelParam._m0[25u].z, _2007));
    float _2090;
    float _2092;
    float _2094;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2057 = fma(_1239, cbModelParam._m0[13u].z, fma(_1235, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1231)) + cbModelParam._m0[13u].w;
        float _2061 = fma(_1239, cbModelParam._m0[14u].z, fma(_1235, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1231)) + cbModelParam._m0[14u].w;
        float _2065 = fma(_1239, cbModelParam._m0[15u].z, fma(_1235, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1231)) + cbModelParam._m0[15u].w;
        float _2068 = fma(_1179, cbModelParam._m0[13u].z, fma(_1178, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1177));
        float _2071 = fma(_1179, cbModelParam._m0[14u].z, fma(_1178, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1177));
        float _2074 = fma(_1179, cbModelParam._m0[15u].z, fma(_1178, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1177));
        float _2102;
        if (_2068 > 0.0)
        {
            _2102 = abs((1.0 - _2057) / _2068);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2068 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2057 + 1.0) / _2068);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2102 = frontier_phi_17_15_ladder;
        }
        float _2276;
        if (_2071 > 0.0)
        {
            _2276 = abs((1.0 - _2061) / _2071);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2071 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2061 + 1.0) / _2071);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2276 = frontier_phi_26_22_ladder;
        }
        float _2568;
        if (_2074 > 0.0)
        {
            _2568 = abs((1.0 - _2065) / _2074);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2074 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2065 + 1.0) / _2074);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2568 = frontier_phi_38_33_ladder;
        }
        float _2570 = isnan(_2276) ? _2102 : (isnan(_2102) ? _2276 : min(_2102, _2276));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _2068) + _2057;
        float _2576 = (_2571 * _2071) + _2061;
        float _2577 = (_2571 * _2074) + _2065;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2580 = (-1.0) - _2578;
        float _2582 = _2578 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2577 > _2582) || ((_2577 < _2580) || ((_2576 > _2582) || ((_2576 < _2580) || ((_2575 < _2580) || (_2575 > _2582))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2722 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2577, cbModelParam._m0[9u].z, fma(_2576, cbModelParam._m0[9u].y, _2575 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2577, cbModelParam._m0[10u].z, fma(_2576, cbModelParam._m0[10u].y, _2575 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2577, cbModelParam._m0[11u].z, fma(_2576, cbModelParam._m0[11u].y, _2575 * cbModelParam._m0[11u].x))), _2008);
            frontier_phi_16_38_ladder = _2722.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2722.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2722.x * cbModelParam._m0[1u].y;
        }
        _2090 = frontier_phi_16_38_ladder_2;
        _2092 = frontier_phi_16_38_ladder_1;
        _2094 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2078 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1177, _1178, _1179), _2008);
        _2090 = _2078.x * cbModelParam._m0[1u].y;
        _2092 = _2078.y * cbModelParam._m0[1u].y;
        _2094 = _2078.z * cbModelParam._m0[1u].y;
    }
    float _2098 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1084);
    float _2099 = isnan(_2098) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2098 : min(cbModelParam._m0[25u].w, _2098));
    float _2191;
    float _2193;
    float _2195;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2155 = fma(_1239, cbModelParam._m0[21u].z, fma(_1235, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1231)) + cbModelParam._m0[21u].w;
        float _2159 = fma(_1239, cbModelParam._m0[22u].z, fma(_1235, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1231)) + cbModelParam._m0[22u].w;
        float _2163 = fma(_1239, cbModelParam._m0[23u].z, fma(_1235, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1231)) + cbModelParam._m0[23u].w;
        float _2166 = fma(_1179, cbModelParam._m0[21u].z, fma(_1178, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1177));
        float _2169 = fma(_1179, cbModelParam._m0[22u].z, fma(_1178, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1177));
        float _2172 = fma(_1179, cbModelParam._m0[23u].z, fma(_1178, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1177));
        float _2281;
        if (_2166 > 0.0)
        {
            _2281 = abs((1.0 - _2155) / _2166);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2166 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2155 + 1.0) / _2166);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2281 = frontier_phi_28_24_ladder;
        }
        float _2595;
        if (_2169 > 0.0)
        {
            _2595 = abs((1.0 - _2159) / _2169);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2169 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2159 + 1.0) / _2169);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2595 = frontier_phi_40_35_ladder;
        }
        float _2933;
        if (_2172 > 0.0)
        {
            _2933 = abs((1.0 - _2163) / _2172);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2172 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2163 + 1.0) / _2172);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2933 = frontier_phi_50_47_ladder;
        }
        float _2935 = isnan(_2595) ? _2281 : (isnan(_2281) ? _2595 : min(_2281, _2595));
        float _2936 = isnan(_2933) ? _2935 : (isnan(_2935) ? _2933 : min(_2935, _2933));
        float _2940 = (_2936 * _2166) + _2155;
        float _2941 = (_2936 * _2169) + _2159;
        float _2942 = (_2936 * _2172) + _2163;
        float _2943 = _2936 * 9.9999997473787516355514526367188e-05;
        float _2944 = (-1.0) - _2943;
        float _2946 = _2943 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2942 > _2946) || ((_2942 < _2944) || ((_2941 > _2946) || ((_2941 < _2944) || ((_2940 < _2944) || (_2940 > _2946))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2942, cbModelParam._m0[17u].z, fma(_2941, cbModelParam._m0[17u].y, _2940 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2942, cbModelParam._m0[18u].z, fma(_2941, cbModelParam._m0[18u].y, _2940 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2942, cbModelParam._m0[19u].z, fma(_2941, cbModelParam._m0[19u].y, _2940 * cbModelParam._m0[19u].x))), _2099);
            frontier_phi_25_50_ladder = _3064.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _3064.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _3064.x * cbModelParam._m0[1u].z;
        }
        _2191 = frontier_phi_25_50_ladder_2;
        _2193 = frontier_phi_25_50_ladder_1;
        _2195 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2175 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1177, _1178, _1179), _2099);
        _2191 = _2175.x * cbModelParam._m0[1u].z;
        _2193 = _2175.y * cbModelParam._m0[1u].z;
        _2195 = _2175.z * cbModelParam._m0[1u].z;
    }
    float _2208 = (((_1202 * _1154) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2191 - _2090)) + _2090);
    float _2210 = (((_1202 * _1156) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2193 - _2092)) + _2092);
    float _2212 = (((_1202 * _1157) + _1203) * _1169) * ((cbModelParam._m0[1u].w * (_2195 - _2094)) + _2094);
    float _2215 = fma(_2212, cbSceneParam._m0[89u].z, fma(_2210, cbSceneParam._m0[89u].y, _2208 * cbSceneParam._m0[89u].x));
    float _2218 = fma(_2212, cbSceneParam._m0[90u].z, fma(_2210, cbSceneParam._m0[90u].y, _2208 * cbSceneParam._m0[90u].x));
    float _2221 = fma(_2212, cbSceneParam._m0[91u].z, fma(_2210, cbSceneParam._m0[91u].y, _2208 * cbSceneParam._m0[91u].x));
    float _2255 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2259 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2263 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2267 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2268 = _2255 / _2267;
    float _2269 = _2259 / _2267;
    float _2270 = _2263 / _2267;
    float _2414;
    float _2415;
    float _2416;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2297 = ((uint(_2270 > cbSceneParam._m0[59u].y) + uint(_2270 > cbSceneParam._m0[59u].x)) + uint(_2270 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2298 = _2297 + 43u;
        uint _2305 = _2297 + 44u;
        uint _2312 = _2297 + 45u;
        uint _2320 = _2297 + 46u;
        float _2331 = fma(_2267, cbSceneParam._m0[_2298].w, fma(_2263, cbSceneParam._m0[_2298].z, fma(_2259, cbSceneParam._m0[_2298].y, _2255 * cbSceneParam._m0[_2298].x)));
        float _2335 = fma(_2267, cbSceneParam._m0[_2305].w, fma(_2263, cbSceneParam._m0[_2305].z, fma(_2259, cbSceneParam._m0[_2305].y, _2255 * cbSceneParam._m0[_2305].x)));
        float _2343 = fma(_2267, cbSceneParam._m0[_2320].w, fma(_2263, cbSceneParam._m0[_2320].z, fma(_2259, cbSceneParam._m0[_2320].y, _2255 * cbSceneParam._m0[_2320].x)));
        float _2347 = cbSceneParam._m0[33u].z * _2343;
        float _2349 = cbSceneParam._m0[33u].w * _2343;
        float _2352 = fma(_2267, cbSceneParam._m0[_2312].w, fma(_2263, cbSceneParam._m0[_2312].z, fma(_2259, cbSceneParam._m0[_2312].y, _2255 * cbSceneParam._m0[_2312].x))) / _2343;
        float _2400 = (cbSceneParam._m0[33u].x - sqrt(((_2269 * _2269) + (_2268 * _2268)) + (_2270 * _2270))) * cbSceneParam._m0[33u].y;
        float _4870 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2407 = (isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2347 + _2331) / _2343, (_2349 + _2335) / _2343), _2352), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2349 + _2331) / _2343, (_2335 - _2347) / _2343), _2352), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2331 - _2347) / _2343, (_2335 - _2349) / _2343), _2352), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2331 - _2349) / _2343, (_2347 + _2335) / _2343), _2352), 0.0)).x), vec4(0.25)));
        _2414 = 1.0 - (_2407 * cbSceneParam._m0[34u].x);
        _2415 = 1.0 - (_2407 * cbSceneParam._m0[34u].y);
        _2416 = 1.0 - (_2407 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2414 = 1.0;
        _2415 = 1.0;
        _2416 = 1.0;
    }
    float _2480;
    float _2482;
    float _2484;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2468 = fma(_2267, cbSceneParam._m0[63u].w, fma(_2263, cbSceneParam._m0[63u].z, fma(_2259, cbSceneParam._m0[63u].y, _2255 * cbSceneParam._m0[63u].x)));
        float _2469 = fma(_2267, cbSceneParam._m0[60u].w, fma(_2263, cbSceneParam._m0[60u].z, fma(_2259, cbSceneParam._m0[60u].y, _2255 * cbSceneParam._m0[60u].x))) / _2468;
        float _2470 = fma(_2267, cbSceneParam._m0[61u].w, fma(_2263, cbSceneParam._m0[61u].z, fma(_2259, cbSceneParam._m0[61u].y, _2255 * cbSceneParam._m0[61u].x))) / _2468;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2469 >= cbSceneParam._m0[64u].x) && (_2470 >= cbSceneParam._m0[64u].y)) && (_2469 <= cbSceneParam._m0[64u].z)) && (_2470 <= cbSceneParam._m0[64u].w))
        {
            float _2608 = fma(_2267, cbSceneParam._m0[62u].w, fma(_2263, cbSceneParam._m0[62u].z, fma(_2259, cbSceneParam._m0[62u].y, _2255 * cbSceneParam._m0[62u].x))) / _2468;
            float _2612 = isnan(cbSceneParam._m0[41u].w) ? _2608 : (isnan(_2608) ? cbSceneParam._m0[41u].w : max(_2608, cbSceneParam._m0[41u].w));
            float _2655 = (cbSceneParam._m0[33u].x - sqrt(((_2269 * _2269) + (_2268 * _2268)) + (_2270 * _2270))) * cbSceneParam._m0[33u].y;
            float _4886 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
            float _2662 = (isnan(1.0) ? _4886 : (isnan(_4886) ? 1.0 : min(_4886, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2469, cbSceneParam._m0[33u].w + _2470), _2612), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2469, _2470 - cbSceneParam._m0[33u].z), _2612), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2469 - cbSceneParam._m0[33u].z, _2470 - cbSceneParam._m0[33u].w), _2612), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2469 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2470), _2612), 0.0)).x), vec4(0.25)));
            float _2666 = 1.0 - (_2662 * cbSceneParam._m0[34u].x);
            float _2667 = 1.0 - (_2662 * cbSceneParam._m0[34u].y);
            float _2668 = 1.0 - (_2662 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2668) ? _2416 : (isnan(_2416) ? _2668 : min(_2416, _2668));
            frontier_phi_37_36_ladder_1 = isnan(_2667) ? _2415 : (isnan(_2415) ? _2667 : min(_2415, _2667));
            frontier_phi_37_36_ladder_2 = isnan(_2666) ? _2414 : (isnan(_2414) ? _2666 : min(_2414, _2666));
        }
        else
        {
            frontier_phi_37_36_ladder = _2416;
            frontier_phi_37_36_ladder_1 = _2415;
            frontier_phi_37_36_ladder_2 = _2414;
        }
        _2480 = frontier_phi_37_36_ladder_2;
        _2482 = frontier_phi_37_36_ladder_1;
        _2484 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2480 = _2414;
        _2482 = _2415;
        _2484 = _2416;
    }
    uvec4 _2489 = floatBitsToUint(cbInstanceData._m0[_1097 + 5u]);
    uint _2491 = _2489.x * 14u;
    uint _2492 = _2491 + 13u;
    float _2499 = _1169 + (-1.0);
    float _2504 = (cbLight._m0[_2492].x * _2499) + 1.0;
    float _2505 = (cbLight._m0[_2492].y * _2499) + 1.0;
    float _2506 = (cbLight._m0[_2492].z * _2499) + 1.0;
    float _2507 = (cbLight._m0[_2492].w * _2499) + 1.0;
    uint _2508 = _2491 + 5u;
    float _2514 = isnan(1.0) ? _2505 : (isnan(_2505) ? 1.0 : min(_2505, 1.0));
    uint _2518 = _2491 + 4u;
    float _2527 = isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0));
    uint _2531 = _2491 | 1u;
    float _2542 = dot(vec3(cbLight._m0[_2491].xyz), vec3(_962, _963, _964));
    float _2545 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_962, _963, _964));
    float _4922 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
    float _4933 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2550 = (isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * 0.3183098733425140380859375;
    float _2552 = (isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * 0.3183098733425140380859375;
    float _2559 = ((cbLight._m0[_2508].x * _2514) * _2552) + (((cbLight._m0[_2518].x * _2480) * _2527) * _2550);
    float _2560 = ((_2514 * cbLight._m0[_2508].y) * _2552) + (((cbLight._m0[_2518].y * _2482) * _2527) * _2550);
    float _2561 = ((_2514 * cbLight._m0[_2508].z) * _2552) + (((cbLight._m0[_2518].z * _2484) * _2527) * _2550);
    uvec4 _2565 = floatBitsToUint(cbLight._m0[_2491 + 12u]);
    bool _2567 = _2565.x == 0u;
    float _2669;
    float _2671;
    float _2673;
    if (_2567)
    {
        _2669 = _2559;
        _2671 = _2560;
        _2673 = _2561;
    }
    else
    {
        uint _2677 = _2491 + 6u;
        float _2693 = (dot(vec3(cbLight._m0[_2491 + 2u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2694 = _2693 * _2693;
        float _4944 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2695 = isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0));
        float _2696 = isnan(1.0) ? _2506 : (isnan(_2506) ? 1.0 : min(_2506, 1.0));
        _2669 = (((cbLight._m0[_2677].x * 0.3183098733425140380859375) * _2695) * _2696) + _2559;
        _2671 = (((cbLight._m0[_2677].y * 0.3183098733425140380859375) * _2695) * _2696) + _2560;
        _2673 = (((cbLight._m0[_2677].z * 0.3183098733425140380859375) * _2695) * _2696) + _2561;
    }
    bool _2676 = _2565.y == 0u;
    float _2731;
    float _2733;
    float _2735;
    if (_2676)
    {
        _2731 = _2669;
        _2733 = _2671;
        _2735 = _2673;
    }
    else
    {
        uint _2904 = _2491 + 7u;
        float _2920 = (dot(vec3(cbLight._m0[_2491 + 3u].xyz), vec3(_962, _963, _964)) * 0.5) + 0.5;
        float _2921 = _2920 * _2920;
        float _4960 = isnan(0.0) ? _2921 : (isnan(_2921) ? 0.0 : max(_2921, 0.0));
        float _2922 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
        float _2923 = isnan(1.0) ? _2507 : (isnan(_2507) ? 1.0 : min(_2507, 1.0));
        _2731 = (((cbLight._m0[_2904].x * 0.3183098733425140380859375) * _2922) * _2923) + _2669;
        _2733 = (((cbLight._m0[_2904].y * 0.3183098733425140380859375) * _2922) * _2923) + _2671;
        _2735 = (((cbLight._m0[_2904].z * 0.3183098733425140380859375) * _2922) * _2923) + _2673;
    }
    uint _2738 = _2491 + 8u;
    float _2751 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2491].w)) * _1084) * 0.949999988079071044921875);
    float _2752 = _2751 * _2751;
    float _2753 = cbLight._m0[_2491].x + _1022;
    float _2754 = cbLight._m0[_2491].y + _1023;
    float _2755 = cbLight._m0[_2491].z + _1024;
    float _2759 = inversesqrt(dot(vec3(_2753, _2754, _2755), vec3(_2753, _2754, _2755)));
    float _2760 = _2759 * _2753;
    float _2761 = _2759 * _2754;
    float _2762 = _2759 * _2755;
    float _2763 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2491].xyz));
    float _4976 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
    float _2766 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
    float _4987 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _2767 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
    float _2768 = dot(vec3(_962, _963, _964), vec3(_2760, _2761, _2762));
    float _4998 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
    float _2771 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
    float _2772 = dot(vec3(cbLight._m0[_2491].xyz), vec3(_2760, _2761, _2762));
    float _5009 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
    float _2776 = _2752 * _2752;
    float _2780 = ((_2771 * _2771) * (_2776 + (-1.0))) + 1.0;
    float _2788 = exp2(log2(1.0 - (isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0)))) * 5.0);
    float _2789 = 0.959999978542327880859375 - _1151;
    float _2791 = 0.959999978542327880859375 - _1152;
    float _2792 = 0.959999978542327880859375 - _1153;
    float _2799 = 1.0 - _2752;
    float _2810 = (0.5 / (((_2767 * ((_2766 * _2799) + _2752)) + 9.9999999392252902907785028219223e-09) + (((_2767 * _2799) + _2752) * _2766))) * _2766;
    float _5020 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
    float _2812 = (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0))) * (_2776 / ((_2780 * _2780) * 3.141590118408203125));
    uint _2826 = _2491 + 9u;
    float _2837 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2531].w)) * _1084) * 0.949999988079071044921875);
    float _2838 = _2837 * _2837;
    float _2839 = cbLight._m0[_2531].x + _1022;
    float _2840 = cbLight._m0[_2531].y + _1023;
    float _2841 = cbLight._m0[_2531].z + _1024;
    float _2845 = inversesqrt(dot(vec3(_2839, _2840, _2841), vec3(_2839, _2840, _2841)));
    float _2846 = _2845 * _2839;
    float _2847 = _2845 * _2840;
    float _2848 = _2845 * _2841;
    float _2849 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2531].xyz));
    float _5031 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
    float _2852 = isnan(1.0) ? _5031 : (isnan(_5031) ? 1.0 : min(_5031, 1.0));
    float _2853 = dot(vec3(_962, _963, _964), vec3(_2846, _2847, _2848));
    float _5042 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
    float _2856 = isnan(1.0) ? _5042 : (isnan(_5042) ? 1.0 : min(_5042, 1.0));
    float _2857 = dot(vec3(cbLight._m0[_2531].xyz), vec3(_2846, _2847, _2848));
    float _5053 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
    float _2861 = _2838 * _2838;
    float _2865 = ((_2856 * _2856) * (_2861 + (-1.0))) + 1.0;
    float _2872 = exp2(log2(1.0 - (isnan(1.0) ? _5053 : (isnan(_5053) ? 1.0 : min(_5053, 1.0)))) * 5.0);
    float _2879 = 1.0 - _2838;
    float _2889 = (0.5 / (((_2767 * ((_2852 * _2879) + _2838)) + 9.9999999392252902907785028219223e-09) + (((_2767 * _2879) + _2838) * _2852))) * _2852;
    float _5064 = isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0));
    float _2891 = (isnan(1.0) ? _5064 : (isnan(_5064) ? 1.0 : min(_5064, 1.0))) * (_2861 / ((_2865 * _2865) * 3.141590118408203125));
    float _2901 = (((((_2872 * _2789) + _1154) * cbLight._m0[_2826].x) * _2891) * _2514) + ((((cbLight._m0[_2738].x * _2480) * ((_2788 * _2789) + _1154)) * _2812) * _2527);
    float _2902 = (((((_2872 * _2791) + _1156) * cbLight._m0[_2826].y) * _2891) * _2514) + ((((cbLight._m0[_2738].y * _2482) * ((_2788 * _2791) + _1156)) * _2812) * _2527);
    float _2903 = (((((_2872 * _2792) + _1157) * cbLight._m0[_2826].z) * _2891) * _2514) + ((((cbLight._m0[_2738].z * _2484) * ((_2788 * _2792) + _1157)) * _2812) * _2527);
    float _2959;
    float _2961;
    float _2963;
    if (_2567)
    {
        _2959 = _2901;
        _2961 = _2902;
        _2963 = _2903;
    }
    else
    {
        uint _2965 = _2491 + 2u;
        uint _2969 = _2491 + 10u;
        float _2983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2965].w)) * _1084) * 0.949999988079071044921875);
        float _2984 = _2983 * _2983;
        float _2985 = cbLight._m0[_2965].x + _1022;
        float _2986 = cbLight._m0[_2965].y + _1023;
        float _2987 = cbLight._m0[_2965].z + _1024;
        float _2991 = inversesqrt(dot(vec3(_2985, _2986, _2987), vec3(_2985, _2986, _2987)));
        float _2992 = _2991 * _2985;
        float _2993 = _2991 * _2986;
        float _2994 = _2991 * _2987;
        float _2995 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_2965].xyz));
        float _5075 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
        float _2998 = isnan(1.0) ? _5075 : (isnan(_5075) ? 1.0 : min(_5075, 1.0));
        float _2999 = dot(vec3(_962, _963, _964), vec3(_2992, _2993, _2994));
        float _5086 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0));
        float _3002 = isnan(1.0) ? _5086 : (isnan(_5086) ? 1.0 : min(_5086, 1.0));
        float _3003 = dot(vec3(cbLight._m0[_2965].xyz), vec3(_2992, _2993, _2994));
        float _5097 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0));
        float _3007 = _2984 * _2984;
        float _3011 = ((_3002 * _3002) * (_3007 + (-1.0))) + 1.0;
        float _3018 = exp2(log2(1.0 - (isnan(1.0) ? _5097 : (isnan(_5097) ? 1.0 : min(_5097, 1.0)))) * 5.0);
        float _3025 = 1.0 - _2984;
        float _3035 = (0.5 / (((_2767 * ((_2998 * _3025) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_2767 * _3025) + _2984) * _2998))) * _2998;
        float _5108 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
        float _3037 = (isnan(1.0) ? _5108 : (isnan(_5108) ? 1.0 : min(_5108, 1.0))) * (_3007 / ((_3011 * _3011) * 3.141590118408203125));
        float _3038 = isnan(1.0) ? _2506 : (isnan(_2506) ? 1.0 : min(_2506, 1.0));
        _2959 = (((((_3018 * _2789) + _1154) * cbLight._m0[_2969].x) * _3037) * _3038) + _2901;
        _2961 = (((((_3018 * _2791) + _1156) * cbLight._m0[_2969].y) * _3037) * _3038) + _2902;
        _2963 = (((((_3018 * _2792) + _1157) * cbLight._m0[_2969].z) * _3037) * _3038) + _2903;
    }
    float _3069;
    float _3071;
    float _3073;
    if (_2676)
    {
        _3069 = _2959;
        _3071 = _2961;
        _3073 = _2963;
    }
    else
    {
        uint _3080 = _2491 + 3u;
        uint _3084 = _2491 + 11u;
        float _3098 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_3080].w)) * _1084) * 0.949999988079071044921875);
        float _3099 = _3098 * _3098;
        float _3100 = cbLight._m0[_3080].x + _1022;
        float _3101 = cbLight._m0[_3080].y + _1023;
        float _3102 = cbLight._m0[_3080].z + _1024;
        float _3106 = inversesqrt(dot(vec3(_3100, _3101, _3102), vec3(_3100, _3101, _3102)));
        float _3107 = _3106 * _3100;
        float _3108 = _3106 * _3101;
        float _3109 = _3106 * _3102;
        float _3110 = dot(vec3(_962, _963, _964), vec3(cbLight._m0[_3080].xyz));
        float _5124 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
        float _3113 = isnan(1.0) ? _5124 : (isnan(_5124) ? 1.0 : min(_5124, 1.0));
        float _3114 = dot(vec3(_962, _963, _964), vec3(_3107, _3108, _3109));
        float _5135 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
        float _3117 = isnan(1.0) ? _5135 : (isnan(_5135) ? 1.0 : min(_5135, 1.0));
        float _3118 = dot(vec3(cbLight._m0[_3080].xyz), vec3(_3107, _3108, _3109));
        float _5146 = isnan(0.0) ? _3118 : (isnan(_3118) ? 0.0 : max(_3118, 0.0));
        float _3122 = _3099 * _3099;
        float _3126 = ((_3117 * _3117) * (_3122 + (-1.0))) + 1.0;
        float _3133 = exp2(log2(1.0 - (isnan(1.0) ? _5146 : (isnan(_5146) ? 1.0 : min(_5146, 1.0)))) * 5.0);
        float _3140 = 1.0 - _3099;
        float _3150 = (0.5 / (((_2767 * ((_3113 * _3140) + _3099)) + 9.9999999392252902907785028219223e-09) + (((_2767 * _3140) + _3099) * _3113))) * _3113;
        float _5157 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
        float _3152 = (isnan(1.0) ? _5157 : (isnan(_5157) ? 1.0 : min(_5157, 1.0))) * (_3122 / ((_3126 * _3126) * 3.141590118408203125));
        float _3153 = isnan(1.0) ? _2507 : (isnan(_2507) ? 1.0 : min(_2507, 1.0));
        _3069 = (((((_3133 * _2789) + _1154) * cbLight._m0[_3084].x) * _3152) * _3153) + _2959;
        _3071 = (((((_3133 * _2791) + _1156) * cbLight._m0[_3084].y) * _3152) * _3153) + _2961;
        _3073 = (((((_3133 * _2792) + _1157) * cbLight._m0[_3084].z) * _3152) * _3153) + _2963;
    }
    float _3219;
    float _3221;
    float _3223;
    float _3225;
    float _3227;
    float _3229;
    if (_2489.y == 0u)
    {
        uvec4 _3174 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3175 = _3174.x;
        uint _3186 = uint((float(_3174.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1043) / _3175))) + floor(float(uint(cbSceneParam._m0[85u].x * _1042) / _3175)));
        float _3196 = (log2(_2270 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3197 = isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0));
        uint _3200 = uint(isnan(14.0) ? _3197 : (isnan(_3197) ? 14.0 : min(_3197, 14.0)));
        uvec4 _3205 = texelFetch(g_lightClusterGridBuffer, int(((_3200 << 2u) + (_3186 << 6u)) >> 2u));
        uint _3206 = _3205.x;
        uint _3207 = _3174.z;
        float _3315;
        float _3317;
        float _3319;
        float _3321;
        float _3323;
        float _3325;
        if (((((1u << ((_3207 >> 4u) & 15u)) + 4294967295u) & _3206) == 0u) || ((_3207 & 240u) == 0u))
        {
            _3315 = 0.0;
            _3317 = 0.0;
            _3319 = 0.0;
            _3321 = 0.0;
            _3323 = 0.0;
            _3325 = 0.0;
        }
        else
        {
            float _3316;
            float _3318;
            float _3320;
            float _3322;
            float _3324;
            float _3326;
            float _3475 = 0.0;
            float _3476 = 0.0;
            float _3477 = 0.0;
            float _3478 = 0.0;
            float _3479 = 0.0;
            float _3480 = 0.0;
            uint _3481 = 0u;
            uint _3490;
            bool _3491;
            for (;;)
            {
                _3490 = texelFetch(g_lightClassification, int((((_3200 << 5u) + (_3186 << 9u)) + (_3481 << 2u)) >> 2u)).x;
                _3491 = _3490 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3491)
                {
                    frontier_phi_71_pred = _3480;
                    frontier_phi_71_pred_1 = _3479;
                    frontier_phi_71_pred_2 = _3478;
                    frontier_phi_71_pred_3 = _3477;
                    frontier_phi_71_pred_4 = _3476;
                    frontier_phi_71_pred_5 = _3475;
                }
                else
                {
                    float _3620;
                    float _3621;
                    float _3622;
                    float _3623;
                    float _3624;
                    float _3625;
                    uint _3626;
                    _3620 = _3475;
                    _3621 = _3476;
                    _3622 = _3477;
                    _3623 = _3478;
                    _3624 = _3479;
                    _3625 = _3480;
                    _3626 = _3490;
                    float _3547;
                    float _3548;
                    float _3549;
                    float _3550;
                    float _3551;
                    float _3552;
                    for (;;)
                    {
                        uint _3630 = uint(findLSB(_3626)) + (_3481 << 5u);
                        uint _3627 = (_3626 + 4294967295u) & _3626;
                        uint _3632 = _3630 * 48u;
                        vec4 _3646 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3632)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3632 + 3u)).x));
                        uint _3652 = (_3630 * 48u) + 4u;
                        vec4 _3665 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3652)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3652 + 3u)).x));
                        uint _3671 = (_3630 * 48u) + 8u;
                        vec3 _3682 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3671)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3671 + 2u)).x));
                        float _3686 = _3646.x - _2268;
                        float _3687 = _3646.y - _2269;
                        float _3688 = _3646.z - _2270;
                        float _3689 = dot(vec3(_3686, _3687, _3688), vec3(_3686, _3687, _3688));
                        float _3692 = inversesqrt(_3689);
                        float _3693 = _3692 * _3686;
                        float _3694 = _3692 * _3687;
                        float _3695 = _3692 * _3688;
                        float _3696 = dot(vec3(_1065, _1068, _1071), vec3(_3693, _3694, _3695));
                        float _3701 = 1.0 - (_3689 * _3646.w);
                        float _5183 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                        float _3702 = isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0));
                        float _3703 = sqrt(_3689) * _3665.w;
                        float _3706 = 1.39999997615814208984375 / (_3703 + 1.39999997615814208984375);
                        float _3707 = _3706 * _3706;
                        float _3710 = ((1.0 - _3707) * _3696) + _3707;
                        float _3713 = _3703 * _3703;
                        float _3717 = ((isnan(0.0) ? _3710 : (isnan(_3710) ? 0.0 : max(_3710, 0.0))) * _3702) / ((_3713 * 0.699999988079071044921875) + 1.0);
                        float _3721 = (-0.0) - _2268;
                        float _3722 = (-0.0) - _2269;
                        float _3723 = (-0.0) - _2270;
                        float _3727 = inversesqrt(dot(vec3(_3721, _3722, _3723), vec3(_3721, _3722, _3723)));
                        float _3728 = _3727 * _3721;
                        float _3729 = _3727 * _3722;
                        float _3730 = _3727 * _3723;
                        float _3737 = exp2(log2(1.0 / ((_3713 * 3.5) + 5.0)) * 0.25);
                        float _3738 = 1.0 - _1185;
                        float _3745 = sqrt(1.0 - ((1.0 - (_3738 * _3738)) * (1.0 - (_3737 * _3737))));
                        float _3746 = _3745 * _3745;
                        float _3747 = _3746 * _3746;
                        float _3748 = _3728 + _3693;
                        float _3749 = _3729 + _3694;
                        float _3750 = _3730 + _3695;
                        float _3754 = inversesqrt(dot(vec3(_3748, _3749, _3750), vec3(_3748, _3749, _3750)));
                        float _3758 = dot(vec3(_1065, _1068, _1071), vec3(_3728, _3729, _3730));
                        float _5199 = isnan(0.0) ? _3758 : (isnan(_3758) ? 0.0 : max(_3758, 0.0));
                        float _3761 = isnan(1.0) ? _5199 : (isnan(_5199) ? 1.0 : min(_5199, 1.0));
                        float _3762 = dot(vec3(_1065, _1068, _1071), vec3(_3754 * _3748, _3754 * _3749, _3754 * _3750));
                        float _5210 = isnan(0.0) ? _3762 : (isnan(_3762) ? 0.0 : max(_3762, 0.0));
                        float _3765 = isnan(1.0) ? _5210 : (isnan(_5210) ? 1.0 : min(_5210, 1.0));
                        float _3769 = ((_3765 * _3765) * (_3747 + (-1.0))) + 1.0;
                        float _3770 = _3706 * _3746;
                        float _3771 = _3770 * _3770;
                        float _3774 = ((1.0 - _3771) * _3696) + _3771;
                        float _5221 = isnan(0.0) ? _3774 : (isnan(_3774) ? 0.0 : max(_3774, 0.0));
                        float _3775 = isnan(1.0) ? _5221 : (isnan(_5221) ? 1.0 : min(_5221, 1.0));
                        float _3776 = 1.0 - _3746;
                        float _3786 = (0.5 / (((_3775 * ((_3761 * _3776) + _3746)) + 9.9999999392252902907785028219223e-09) + (((_3775 * _3776) + _3746) * _3761))) * _3775;
                        float _5232 = isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0));
                        float _3797 = (((_3747 * 3.1415927410125732421875) * (isnan(1.0) ? _5232 : (isnan(_5232) ? 1.0 : min(_5232, 1.0)))) / ((_3769 * _3769) * ((_3713 * 2.1991131305694580078125) + 3.141590118408203125))) * _3702;
                        _3550 = (_3717 * _3665.x) + _3623;
                        _3551 = (_3717 * _3665.y) + _3624;
                        _3552 = (_3717 * _3665.z) + _3625;
                        _3547 = (_3797 * _3682.x) + _3620;
                        _3548 = (_3797 * _3682.y) + _3621;
                        _3549 = (_3797 * _3682.z) + _3622;
                        if (_3627 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3620 = _3547;
                            _3621 = _3548;
                            _3622 = _3549;
                            _3623 = _3550;
                            _3624 = _3551;
                            _3625 = _3552;
                            _3626 = _3627;
                        }
                    }
                    frontier_phi_71_pred = _3552;
                    frontier_phi_71_pred_1 = _3551;
                    frontier_phi_71_pred_2 = _3550;
                    frontier_phi_71_pred_3 = _3549;
                    frontier_phi_71_pred_4 = _3548;
                    frontier_phi_71_pred_5 = _3547;
                }
                _3326 = frontier_phi_71_pred;
                _3324 = frontier_phi_71_pred_1;
                _3322 = frontier_phi_71_pred_2;
                _3320 = frontier_phi_71_pred_3;
                _3318 = frontier_phi_71_pred_4;
                _3316 = frontier_phi_71_pred_5;
                uint _3482 = _3481 + 1u;
                if (_3482 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3475 = _3316;
                    _3476 = _3318;
                    _3477 = _3320;
                    _3478 = _3322;
                    _3479 = _3324;
                    _3480 = _3326;
                    _3481 = _3482;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3315 = _3316;
            _3317 = _3318;
            _3319 = _3320;
            _3321 = _3322;
            _3323 = _3324;
            _3325 = _3326;
        }
        uvec4 _3329 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3330 = _3329.z;
        uint _3332 = (_3330 >> 8u) & 15u;
        float _3443;
        float _3445;
        float _3447;
        float _3449;
        float _3451;
        float _3453;
        if (((4294967295u << _3332) & _3206) == 0u)
        {
            _3443 = _3315;
            _3445 = _3317;
            _3447 = _3319;
            _3449 = _3321;
            _3451 = _3323;
            _3453 = _3325;
        }
        else
        {
            float _3468 = inversesqrt(dot(vec3(_2268, _2269, _2270), vec3(_2268, _2269, _2270)));
            float _3469 = _3468 * _2268;
            float _3470 = _3468 * _2269;
            float _3471 = _3468 * _2270;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3332 < ((_3330 >> 12u) & 15u))
            {
                float _3444;
                float _3446;
                float _3448;
                float _3450;
                float _3452;
                float _3454;
                float _3603 = _3315;
                float _3604 = _3317;
                float _3605 = _3319;
                float _3606 = _3321;
                float _3607 = _3323;
                float _3608 = _3325;
                uint _3609 = _3332;
                uint _3618;
                bool _3619;
                for (;;)
                {
                    _3618 = texelFetch(g_lightClassification, int((((_3200 << 5u) + (_3186 << 9u)) + (_3609 << 2u)) >> 2u)).x;
                    _3619 = _3618 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3619)
                    {
                        frontier_phi_82_pred = _3608;
                        frontier_phi_82_pred_1 = _3607;
                        frontier_phi_82_pred_2 = _3606;
                        frontier_phi_82_pred_3 = _3605;
                        frontier_phi_82_pred_4 = _3604;
                        frontier_phi_82_pred_5 = _3603;
                    }
                    else
                    {
                        float _3811;
                        float _3812;
                        float _3813;
                        float _3814;
                        float _3815;
                        float _3816;
                        float _4105;
                        float _4106;
                        float _4107;
                        float _4108;
                        float _4109;
                        float _4110;
                        float _3824 = _3603;
                        float _3825 = _3604;
                        float _3826 = _3605;
                        float _3827 = _3606;
                        float _3828 = _3607;
                        float _3829 = _3608;
                        uint _3830 = _3618;
                        uint _3831;
                        vec4 _3856;
                        float _3857;
                        vec4 _3872;
                        vec3 _3884;
                        vec4 _3900;
                        vec4 _3915;
                        float _3961;
                        bool _3962;
                        for (;;)
                        {
                            uint _3841 = ((_3609 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3830));
                            _3831 = (_3830 + 4294967295u) & _3830;
                            uint _3843 = _3841 * 40u;
                            _3856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3843 + 3u)).x));
                            _3857 = _3856.w;
                            uint _3859 = (_3841 * 40u) + 4u;
                            _3872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3859 + 3u)).x));
                            uint _3874 = (_3841 * 40u) + 8u;
                            _3884 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3874 + 2u)).x));
                            uint _3887 = (_3841 * 40u) + 16u;
                            _3900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3887 + 3u)).x));
                            uint _3902 = (_3841 * 40u) + 20u;
                            _3915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3902 + 3u)).x));
                            uint _3917 = (_3841 * 40u) + 24u;
                            vec4 _3930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3917 + 3u)).x));
                            uint _3936 = (_3841 * 40u) + 28u;
                            vec4 _3949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3936 + 3u)).x));
                            _3961 = fma(_2270, _3949.z, fma(_2269, _3949.y, _3949.x * _2268)) + _3949.w;
                            _3962 = !((fma(_2270, _3930.z, fma(_2269, _3930.y, _3930.x * _2268)) + _3930.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3962)
                            {
                                float _3989 = _3856.x - _2268;
                                float _3990 = _3856.y - _2269;
                                float _3991 = _3856.z - _2270;
                                float _3992 = dot(vec3(_3989, _3990, _3991), vec3(_3989, _3990, _3991));
                                float _3995 = inversesqrt(_3992);
                                float _3996 = _3995 * _3989;
                                float _3997 = _3995 * _3990;
                                float _3998 = _3995 * _3991;
                                float _4002 = 1.0 - (_3992 / (_3857 * _3857));
                                float _5243 = isnan(0.0) ? _4002 : (isnan(_4002) ? 0.0 : max(_4002, 0.0));
                                float _4003 = isnan(1.0) ? _5243 : (isnan(_5243) ? 1.0 : min(_5243, 1.0));
                                float _4007 = sqrt(_3992) * _3872.w;
                                float _4009 = 1.39999997615814208984375 / (_4007 + 1.39999997615814208984375);
                                float _4010 = _4009 * _4009;
                                float _4013 = ((1.0 - _4010) * dot(vec3(_3996, _3997, _3998), vec3(_1065, _1068, _1071))) + _4010;
                                float _4016 = _4007 * _4007;
                                float _4020 = (fma(_2270, _3900.z, fma(_2269, _3900.y, _3900.x * _2268)) + _3900.w) / _3961;
                                float _4021 = (fma(_2270, _3915.z, fma(_2269, _3915.y, _3915.x * _2268)) + _3915.w) / _3961;
                                float _4025 = 1.0 - dot(vec2(_4020, _4021), vec2(_4020, _4021));
                                float _5259 = isnan(0.0) ? _4025 : (isnan(_4025) ? 0.0 : max(_4025, 0.0));
                                float _4026 = isnan(1.0) ? _5259 : (isnan(_5259) ? 1.0 : min(_5259, 1.0));
                                float _4027 = _4026 * (((isnan(0.0) ? _4013 : (isnan(_4013) ? 0.0 : max(_4013, 0.0))) * _4003) / ((_4016 * 0.699999988079071044921875) + 1.0));
                                float _4039 = exp2(log2(1.0 / ((_4016 * 3.5) + 5.0)) * 0.25);
                                float _4040 = 1.0 - _1185;
                                float _4047 = sqrt(1.0 - ((1.0 - (_4040 * _4040)) * (1.0 - (_4039 * _4039))));
                                float _4048 = _4047 * _4047;
                                float _4049 = _4048 * _4048;
                                float _4050 = _3996 - _3469;
                                float _4051 = _3997 - _3470;
                                float _4052 = _3998 - _3471;
                                float _4056 = inversesqrt(dot(vec3(_4050, _4051, _4052), vec3(_4050, _4051, _4052)));
                                float _4060 = dot(vec3(_1065, _1068, _1071), vec3((-0.0) - _3469, (-0.0) - _3470, (-0.0) - _3471));
                                float _5270 = isnan(0.0) ? _4060 : (isnan(_4060) ? 0.0 : max(_4060, 0.0));
                                float _4063 = isnan(1.0) ? _5270 : (isnan(_5270) ? 1.0 : min(_5270, 1.0));
                                float _4064 = dot(vec3(_1065, _1068, _1071), vec3(_4056 * _4050, _4056 * _4051, _4056 * _4052));
                                float _5281 = isnan(0.0) ? _4064 : (isnan(_4064) ? 0.0 : max(_4064, 0.0));
                                float _4067 = isnan(1.0) ? _5281 : (isnan(_5281) ? 1.0 : min(_5281, 1.0));
                                float _4071 = ((_4067 * _4067) * (_4049 + (-1.0))) + 1.0;
                                float _4072 = _4009 * _4048;
                                float _4073 = _4072 * _4072;
                                float _4079 = ((1.0 - _4073) * dot(vec3(_1065, _1068, _1071), vec3(_3996, _3997, _3998))) + _4073;
                                float _5292 = isnan(0.0) ? _4079 : (isnan(_4079) ? 0.0 : max(_4079, 0.0));
                                float _4080 = isnan(1.0) ? _5292 : (isnan(_5292) ? 1.0 : min(_5292, 1.0));
                                float _4081 = 1.0 - _4048;
                                float _4091 = (0.5 / (((_4080 * ((_4063 * _4081) + _4048)) + 9.9999999392252902907785028219223e-09) + (((_4080 * _4081) + _4048) * _4063))) * _4080;
                                float _5303 = isnan(0.0) ? _4091 : (isnan(_4091) ? 0.0 : max(_4091, 0.0));
                                float _4101 = (_4026 * _4003) * (((_4049 * 3.1415927410125732421875) * (isnan(1.0) ? _5303 : (isnan(_5303) ? 1.0 : min(_5303, 1.0)))) / ((_4071 * _4071) * ((_4016 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _4027 * _3872.z;
                                frontier_phi_88_pred_1 = _4027 * _3872.y;
                                frontier_phi_88_pred_2 = _4027 * _3872.x;
                                frontier_phi_88_pred_3 = _4101 * _3884.z;
                                frontier_phi_88_pred_4 = _4101 * _3884.y;
                                frontier_phi_88_pred_5 = _4101 * _3884.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _4110 = frontier_phi_88_pred;
                            _4109 = frontier_phi_88_pred_1;
                            _4108 = frontier_phi_88_pred_2;
                            _4107 = frontier_phi_88_pred_3;
                            _4106 = frontier_phi_88_pred_4;
                            _4105 = frontier_phi_88_pred_5;
                            _3814 = _4108 + _3827;
                            _3815 = _4109 + _3828;
                            _3816 = _4110 + _3829;
                            _3811 = _4105 + _3824;
                            _3812 = _4106 + _3825;
                            _3813 = _4107 + _3826;
                            if (_3831 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3824 = _3811;
                                _3825 = _3812;
                                _3826 = _3813;
                                _3827 = _3814;
                                _3828 = _3815;
                                _3829 = _3816;
                                _3830 = _3831;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3816;
                        frontier_phi_82_pred_1 = _3815;
                        frontier_phi_82_pred_2 = _3814;
                        frontier_phi_82_pred_3 = _3813;
                        frontier_phi_82_pred_4 = _3812;
                        frontier_phi_82_pred_5 = _3811;
                    }
                    _3454 = frontier_phi_82_pred;
                    _3452 = frontier_phi_82_pred_1;
                    _3450 = frontier_phi_82_pred_2;
                    _3448 = frontier_phi_82_pred_3;
                    _3446 = frontier_phi_82_pred_4;
                    _3444 = frontier_phi_82_pred_5;
                    uint _3610 = _3609 + 1u;
                    if (_3610 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3603 = _3444;
                        _3604 = _3446;
                        _3605 = _3448;
                        _3606 = _3450;
                        _3607 = _3452;
                        _3608 = _3454;
                        _3609 = _3610;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3450;
                frontier_phi_63_64_ladder_1 = _3454;
                frontier_phi_63_64_ladder_2 = _3452;
                frontier_phi_63_64_ladder_3 = _3448;
                frontier_phi_63_64_ladder_4 = _3446;
                frontier_phi_63_64_ladder_5 = _3444;
            }
            else
            {
                frontier_phi_63_64_ladder = _3321;
                frontier_phi_63_64_ladder_1 = _3325;
                frontier_phi_63_64_ladder_2 = _3323;
                frontier_phi_63_64_ladder_3 = _3319;
                frontier_phi_63_64_ladder_4 = _3317;
                frontier_phi_63_64_ladder_5 = _3315;
            }
            _3443 = frontier_phi_63_64_ladder_5;
            _3445 = frontier_phi_63_64_ladder_4;
            _3447 = frontier_phi_63_64_ladder_3;
            _3449 = frontier_phi_63_64_ladder;
            _3451 = frontier_phi_63_64_ladder_2;
            _3453 = frontier_phi_63_64_ladder_1;
        }
        float _3458 = isnan(1.0) ? _1169 : (isnan(_1169) ? 1.0 : min(_1169, 1.0));
        _3219 = (_3458 * _3449) + _2731;
        _3221 = (_3458 * _3451) + _2733;
        _3223 = (_3458 * _3453) + _2735;
        _3225 = ((_3443 * _1154) * _3458) + _3069;
        _3227 = ((_3445 * _1156) * _3458) + _3071;
        _3229 = ((_3447 * _1157) * _3458) + _3073;
    }
    else
    {
        _3219 = _2731;
        _3221 = _2733;
        _3223 = _2735;
        _3225 = _3069;
        _3227 = _3071;
        _3229 = _3073;
    }
    uint _3235 = _1098 + uint(cbMatDynParam._m0[0u].w);
    float _3241 = (((((cbMtdParam._m0[22u].x * _866.x) * cbMtdParam._m0[32u].x) * _887) + _638) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3235].x;
    float _3242 = (((((cbMtdParam._m0[22u].y * _866.y) * cbMtdParam._m0[32u].x) * _887) + _639) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3235].y;
    float _3243 = (((((cbMtdParam._m0[22u].z * _866.z) * cbMtdParam._m0[32u].x) * _887) + _640) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3235].z;
    float _5319 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
    float _5330 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
    float _5341 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
    float _3260 = (((isnan(1.0) ? _5319 : (isnan(_5319) ? 1.0 : min(_5319, 1.0))) * (_3219 + ((isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0))) * _1169))) + ((_3225 + ((isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0))) * _1997)) * cbPerFrame._m0[3u].x)) + _3241;
    float _3262 = (_3242 + ((_3227 + ((isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0))) * _1997)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5330 : (isnan(_5330) ? 1.0 : min(_5330, 1.0))) * (_3221 + ((isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0))) * _1169)));
    float _3264 = (_3243 + ((_3229 + ((isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0))) * _1997)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5341 : (isnan(_5341) ? 1.0 : min(_5341, 1.0))) * (_3223 + ((isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0))) * _1169)));
    float _3265 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
    float _3266 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
    float _3267 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
    float _3273 = cbMtdParam._m0[2u].x * _3241;
    float _3274 = cbMtdParam._m0[2u].y * _3242;
    float _3275 = cbMtdParam._m0[2u].z * _3243;
    float _5367 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3277 = isnan(1.0) ? _5367 : (isnan(_5367) ? 1.0 : min(_5367, 1.0));
    uint _3278 = _1097 + 6u;
    float _3286 = _1042 / cbSceneParam._m0[86u].x;
    float _3287 = _1043 / cbSceneParam._m0[86u].y;
    vec4 _3301 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3286, _3287, (log2((isnan(cbSceneParam._m0[77u].w) ? _985 : (isnan(_985) ? cbSceneParam._m0[77u].w : min(_985, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3303 = _3301.x;
    float _3304 = _3301.y;
    float _3305 = _3301.z;
    float _3306 = _3301.w;
    float _3377;
    float _3379;
    float _3381;
    float _3383;
    if (_985 > cbSceneParam._m0[78u].w)
    {
        float _3340 = isnan(_985) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _985 : min(cbSceneParam._m0[80u].w, _985));
        float _3341 = _3340 / _985;
        float _3352 = _3341 * _1015;
        float _3353 = _1016 * _3341;
        float _3354 = (-0.0) - _3353;
        float _3355 = _3341 * _1017;
        float _3357 = (cbSceneParam._m0[77u].w * _3354) / _3340;
        float _3358 = _3357 + cbSceneParam._m0[79u].w;
        float _3359 = cbSceneParam._m0[79u].w - _3353;
        float _3365 = sqrt(((_3352 * _3352) + (_3353 * _3353)) + (_3355 * _3355));
        float _3368 = (1.0 - (cbSceneParam._m0[77u].w / _3340)) * _3365;
        float _3373 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3375 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3560;
        if (abs((_3354 - _3357) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3560 = ((((_3358 > 0.0) ? exp2(_3373 * _3358) : (2.0 - exp2(_3375 * _3358))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3368;
        }
        else
        {
            float _3504 = 1.0 / cbSceneParam._m0[80u].x;
            float _3505 = isnan(_3359) ? _3358 : (isnan(_3358) ? _3359 : max(_3358, _3359));
            float _3506 = isnan(_3359) ? _3358 : (isnan(_3358) ? _3359 : min(_3358, _3359));
            float _3515 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : min(_3505, 0.0));
            float _3516 = isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : min(_3506, 0.0));
            _3560 = ((abs(_3365 / _3354) * cbSceneParam._m0[80u].y) * ((((_3515 - _3516) * 2.0) - ((exp2(_3373 * (isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0)))) - exp2(_3373 * (isnan(0.0) ? _3506 : (isnan(_3506) ? 0.0 : max(_3506, 0.0))))) * _3504)) - ((exp2(_3375 * _3515) - exp2(_3375 * _3516)) * _3504))) + (_3368 * cbSceneParam._m0[80u].z);
        }
        vec4 _3562 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3286, _3287, 1.0), 0.0);
        float _3571 = exp2((_3560 * (-1.44269502162933349609375)) * (1.0 - _3562.w));
        float _3572 = log2(_3571);
        float _3588 = log2(_3306);
        _3377 = (exp2(_3588 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].x)) * _3562.x) / cbSceneParam._m0[78u].x)) + _3303;
        _3379 = (exp2(_3588 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].y)) * _3562.y) / cbSceneParam._m0[78u].y)) + _3304;
        _3381 = (exp2(_3588 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3572 * cbSceneParam._m0[78u].z)) * _3562.z) / cbSceneParam._m0[78u].z)) + _3305;
        _3383 = _3571 * _3306;
    }
    else
    {
        _3377 = _3303;
        _3379 = _3304;
        _3381 = _3305;
        _3383 = _3306;
    }
    bool _3598;
    vec4 _3392;
    vec4 _3414;
    float _3416;
    float _3420;
    float _3421;
    float _3422;
    float _3425;
    float _3428;
    float _3431;
    float _3432;
    bool _3442;
    for (;;)
    {
        _3392 = cbMatDynParam._m0[0u];
        float _3394 = roundEven(_3392.y);
        bool _3395 = _3394 == 3.0;
        float _3396 = log2(_3383);
        float _3400 = exp2(_3396 * cbSceneParam._m0[78u].x);
        float _3401 = exp2(_3396 * cbSceneParam._m0[78u].y);
        float _3402 = exp2(_3396 * cbSceneParam._m0[78u].z);
        float _3403 = _3400 * _3265;
        float _3404 = _3401 * _3266;
        float _3405 = _3402 * _3267;
        float _3412 = _1031 + (-0.5);
        _3414 = cbMtdParam._m0[1u];
        _3416 = _3414.y * _3412;
        float _3419 = (_3394 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3420 = _3419 * (_3395 ? _3403 : (_3403 + (cbSceneParam._m0[72u].w * _3377)));
        _3421 = _3419 * (_3395 ? _3404 : (_3404 + (cbSceneParam._m0[72u].w * _3379)));
        _3422 = _3419 * (_3395 ? _3405 : (_3405 + (cbSceneParam._m0[72u].w * _3381)));
        _3425 = ((_3273 * _3277) * _3400) * _3419;
        _3428 = ((_3274 * _3277) * _3401) * _3419;
        _3431 = ((_3275 * _3277) * _3402) * _3419;
        _3432 = _3412 * 0.999000012874603271484375;
        _3442 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3442)
        {
            if ((cbInstanceData._m0[_1097 + 7u].x + _3432) < 0.5)
            {
                _3598 = true;
                break;
            }
        }
        uint _3539 = _1098 + uint(_3392.w);
        if ((cbInstanceData._m0[_3539].w < 1.0) && ((cbInstanceData._m0[_3539].w + _3432) < 0.5))
        {
            _3598 = true;
            break;
        }
        if ((_3416 + 1.0) < _3414.x)
        {
            _3598 = true;
            break;
        }
        _3598 = false;
        break;
    }
    float _3802;
    if (_3598)
    {
        discard_state = true;
        _3802 = 0.0;
    }
    else
    {
        _3802 = cbInstanceData._m0[_3278].w;
    }
    SV_Target.x = _3420;
    SV_Target.y = _3421;
    SV_Target.z = _3422;
    SV_Target.w = _3802;
    SV_Target_1.x = _3425;
    SV_Target_1.y = _3428;
    SV_Target_1.z = _3431;
    SV_Target_1.w = cbInstanceData._m0[_3278].w;
    discard_exit();
}


