#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[44];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 40) uniform texture2D g_DecalDiffuseTexture;
layout(set = 0, binding = 41) uniform texture2D g_DecalSpecularTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15;
layout(set = 0, binding = 5) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19;
layout(set = 0, binding = 6) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2;
layout(set = 0, binding = 7) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20;
layout(set = 0, binding = 8) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 1) uniform sampler SS_SpecularMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1748;
float _4157;
float _4158;
float _4159;
float _4160;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _236 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _237 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _238 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _244 = inversesqrt(dot(vec3(_236, _237, _238), vec3(_236, _237, _238)));
    float _251 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _258 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _280 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _285 = _280.z;
    float _286 = _280.w;
    vec4 _308 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _313 = _308.w;
    float _325 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].x * _285) * exp2(log2(1.0 - _313) * cbMtdParam._m0[36u].x))) * exp2(log2(cbMtdParam._m0[34u].y))) * cbMtdParam._m0[34u].w);
    float _326 = isnan(0.0) ? _325 : (isnan(_325) ? 0.0 : max(_325, 0.0));
    float _327 = isnan(1.0) ? _326 : (isnan(_326) ? 1.0 : min(_326, 1.0));
    vec4 _341 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_11, SS_BumpMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _351 = cbMtdParam._m0[31u].x * TEXCOORD_5.x;
    float _359 = (_351 - (((_341.w + 0.00999999977648258209228515625) * cbMtdParam._m0[36u].z) * (1.0 - _351))) * (cbMtdParam._m0[36u].w + 1.0);
    float _4179 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _360 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
    float _362 = _327 - (_360 * _327);
    float _363 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    vec4 _377 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w), -5.0);
    float _380 = _377.y;
    float _381 = _380 * (isnan(1.0) ? _363 : (isnan(_363) ? 1.0 : min(_363, 1.0)));
    float _390 = exp2(log2(cbMtdParam._m0[32u].w * _313) * cbMtdParam._m0[31u].z);
    float _392 = _390 - (_360 * _390);
    float _393 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _394 = isnan(1.0) ? _393 : (isnan(_393) ? 1.0 : min(_393, 1.0));
    float _405 = 1.0 - (cbMtdParam._m0[37u].y * exp2(log2(_286) * 4.5));
    float _414 = exp2(log2((1.0 - ((cbMtdParam._m0[37u].z * _285) * _405)) * cbMtdParam._m0[35u].x) * cbMtdParam._m0[35u].y);
    float _415 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _416 = isnan(1.0) ? _415 : (isnan(_415) ? 1.0 : min(_415, 1.0));
    float _427 = exp2(log2((1.0 - (((_405 * _405) * _285) * cbMtdParam._m0[36u].y)) * cbMtdParam._m0[35u].w) * cbMtdParam._m0[35u].z);
    float _428 = isnan(0.0) ? _427 : (isnan(_427) ? 0.0 : max(_427, 0.0));
    float _432 = (((isnan(1.0) ? _428 : (isnan(_428) ? 1.0 : min(_428, 1.0))) - _286) * _380) + _286;
    vec4 _444 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _209[6];
    float _210[6];
    float _211[6];
    _209[0u] = cbMtdParam._m0[12u].x;
    _210[0u] = cbMtdParam._m0[12u].y;
    _211[0u] = cbMtdParam._m0[12u].z;
    _209[1u] = cbMtdParam._m0[13u].x;
    _210[1u] = cbMtdParam._m0[13u].y;
    _211[1u] = cbMtdParam._m0[13u].z;
    _209[2u] = cbMtdParam._m0[14u].x;
    _210[2u] = cbMtdParam._m0[14u].y;
    _211[2u] = cbMtdParam._m0[14u].z;
    _209[3u] = cbMtdParam._m0[15u].x;
    _210[3u] = cbMtdParam._m0[15u].y;
    _211[3u] = cbMtdParam._m0[15u].z;
    _209[4u] = cbMtdParam._m0[16u].x;
    _210[4u] = cbMtdParam._m0[16u].y;
    _211[4u] = cbMtdParam._m0[16u].z;
    _209[5u] = cbMtdParam._m0[11u].x;
    _210[5u] = cbMtdParam._m0[11u].y;
    _211[5u] = cbMtdParam._m0[11u].z;
    float _512 = (_377.x + (-0.02500000037252902984619140625)) * 8.0;
    float _514 = roundEven(_512);
    float _515 = isnan(0.0) ? _514 : (isnan(_514) ? 0.0 : max(_514, 0.0));
    uint _518 = uint(int(isnan(5.0) ? _515 : (isnan(_515) ? 5.0 : min(_515, 5.0))));
    float _205[6];
    float _206[6];
    float _207[6];
    _205[0u] = 1.0;
    _206[0u] = 1.0;
    _207[0u] = 1.0;
    _205[1u] = cbMtdParam._m0[23u].x;
    _206[1u] = cbMtdParam._m0[23u].y;
    _207[1u] = cbMtdParam._m0[23u].z;
    _205[2u] = cbMtdParam._m0[21u].x;
    _206[2u] = cbMtdParam._m0[21u].y;
    _207[2u] = cbMtdParam._m0[21u].z;
    _205[3u] = cbMtdParam._m0[19u].x;
    _206[3u] = cbMtdParam._m0[19u].y;
    _207[3u] = cbMtdParam._m0[19u].z;
    _205[4u] = cbMtdParam._m0[18u].x;
    _206[4u] = cbMtdParam._m0[18u].y;
    _207[4u] = cbMtdParam._m0[18u].z;
    _205[5u] = cbMtdParam._m0[17u].x;
    _206[5u] = cbMtdParam._m0[17u].y;
    _207[5u] = cbMtdParam._m0[17u].z;
    float _607 = roundEven((texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_15, SS_WrapPoint), vec2((((cbMtdParam._m0[41u].w * TEXCOORD.x) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].x) + cbTextureTilingScale._m0[4u].z, (((cbMtdParam._m0[42u].x * TEXCOORD.y) * cbMtdParam._m0[33u].y) * cbTextureTilingScale._m0[4u].y) + cbTextureTilingScale._m0[4u].w)).x + (-0.02500000037252902984619140625)) * 8.0);
    float _608 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    uint _610 = uint(int(isnan(5.0) ? _608 : (isnan(_608) ? 5.0 : min(_608, 5.0))));
    float _208[6];
    _208[0u] = 1.0;
    _208[1u] = cbMtdParam._m0[23u].w;
    _208[2u] = cbMtdParam._m0[21u].w;
    _208[3u] = cbMtdParam._m0[19u].w;
    _208[4u] = cbMtdParam._m0[18u].w;
    _208[5u] = cbMtdParam._m0[17u].w;
    float _647 = ((((_209[_518] - cbMtdParam._m0[10u].x) + ((cbMtdParam._m0[31u].w * (_205[_610] - _209[_518])) * _208[_518])) * _380) + cbMtdParam._m0[10u].x) * _444.x;
    float _648 = ((((_210[_518] - cbMtdParam._m0[10u].y) + ((cbMtdParam._m0[31u].w * (_206[_610] - _210[_518])) * _208[_518])) * _380) + cbMtdParam._m0[10u].y) * _444.y;
    float _649 = ((((_211[_518] - cbMtdParam._m0[10u].z) + ((cbMtdParam._m0[31u].w * (_207[_610] - _211[_518])) * _208[_518])) * _380) + cbMtdParam._m0[10u].z) * _444.z;
    vec4 _661 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _672 = cbMtdParam._m0[9u].x * _661.x;
    float _673 = cbMtdParam._m0[9u].y * _661.y;
    float _674 = cbMtdParam._m0[9u].z * _661.z;
    float _681 = ((_672 - _647) * _432) + _647;
    float _682 = ((_673 - _648) * _432) + _648;
    float _683 = ((_674 - _649) * _432) + _649;
    vec4 _695 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _715 = (((cbMtdParam._m0[20u].x * _695.x) - _681) * _416) + _681;
    float _716 = (((cbMtdParam._m0[20u].y * _695.y) - _682) * _416) + _682;
    float _717 = (((cbMtdParam._m0[20u].z * _695.z) - _683) * _416) + _683;
    vec4 _729 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _749 = (((cbMtdParam._m0[29u].x * _729.x) - _715) * _394) + _715;
    float _750 = (((cbMtdParam._m0[29u].y * _729.y) - _716) * _394) + _716;
    float _751 = (((cbMtdParam._m0[29u].z * _729.z) - _717) * _394) + _717;
    float _202[6];
    float _203[6];
    float _204[6];
    _202[0u] = cbMtdParam._m0[30u].x;
    _203[0u] = cbMtdParam._m0[30u].y;
    _204[0u] = cbMtdParam._m0[30u].z;
    _202[1u] = cbMtdParam._m0[28u].x;
    _203[1u] = cbMtdParam._m0[28u].y;
    _204[1u] = cbMtdParam._m0[28u].z;
    _202[2u] = cbMtdParam._m0[27u].x;
    _203[2u] = cbMtdParam._m0[27u].y;
    _204[2u] = cbMtdParam._m0[27u].z;
    _202[3u] = cbMtdParam._m0[26u].x;
    _203[3u] = cbMtdParam._m0[26u].y;
    _204[3u] = cbMtdParam._m0[26u].z;
    _202[4u] = cbMtdParam._m0[25u].x;
    _203[4u] = cbMtdParam._m0[25u].y;
    _204[4u] = cbMtdParam._m0[25u].z;
    _202[5u] = cbMtdParam._m0[24u].x;
    _203[5u] = cbMtdParam._m0[24u].y;
    _204[5u] = cbMtdParam._m0[24u].z;
    float _824 = _202[_518] * _380;
    float _825 = _203[_518] * _380;
    float _826 = _204[_518] * _380;
    float _827 = _824 + ((_308.x * 4.5) * (((_672 - _749) * _381) + _749));
    float _828 = _825 + ((_308.y * 4.5) * (((_673 - _750) * _381) + _750));
    float _829 = _826 + ((_308.z * 4.5) * (((_674 - _751) * _381) + _751));
    float _197[5];
    float _198[5];
    _197[0u] = cbMtdParam._m0[37u].w;
    _198[0u] = cbMtdParam._m0[38u].x;
    _197[1u] = cbMtdParam._m0[39u].w;
    _198[1u] = cbMtdParam._m0[40u].x;
    _197[2u] = cbMtdParam._m0[40u].y;
    _198[2u] = cbMtdParam._m0[40u].z;
    _197[3u] = cbMtdParam._m0[40u].w;
    _198[3u] = cbMtdParam._m0[41u].x;
    _197[4u] = cbMtdParam._m0[41u].y;
    _198[4u] = cbMtdParam._m0[41u].z;
    float _862 = roundEven(5.0 - _512);
    float _863 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _864 = isnan(4.0) ? _863 : (isnan(_863) ? 4.0 : min(_863, 4.0));
    float _866 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    uint _868 = uint(int(isnan(4.0) ? _866 : (isnan(_866) ? 4.0 : min(_866, 4.0))));
    float _877 = ((cbMtdParam._m0[42u].z - _198[_868]) * _432) + _198[_868];
    float _885 = ((cbMtdParam._m0[43u].x - _877) * _416) + _877;
    float _890 = ((cbMtdParam._m0[43u].z - _885) * _394) + _885;
    float _895 = ((cbMtdParam._m0[39u].z - _890) * _381) + _890;
    vec4 _911 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _913 = _911.x;
    float _914 = _911.y;
    float _916 = _911.z + _197[_868];
    vec4 _928 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _936 = (((cbMtdParam._m0[42u].y - _916) + _928.z) * _432) + _916;
    vec4 _948 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.x) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.y) + cbTextureTilingScale._m0[12u].w));
    float _956 = (((cbMtdParam._m0[42u].w - _936) + _948.z) * _416) + _936;
    float _962 = ((((_285 * 2.0) * _956) - _956) * cbMtdParam._m0[34u].x) + _956;
    vec4 _974 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w));
    float _982 = (((_974.z + cbMtdParam._m0[43u].y) - _962) * _394) + _962;
    float _986 = (((cbMtdParam._m0[39u].y + _341.z) - _982) * _381) + _982;
    float _1017 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1021 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    vec4 _1048 = texture(sampler2D(P_ACParts_ColorMaterial_Repair_Damage_snp_0_Texture2D_3, SS_DiffuseMap), vec2((((cbMtdParam._m0[38u].w * ((_1017 - cbSceneParam._m0[92u].x) / cbMtdParam._m0[33u].x)) + ((cbMtdParam._m0[38u].y * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y)) * cbTextureTilingScale._m0[8u].x) + cbTextureTilingScale._m0[8u].z, ((((cbMtdParam._m0[38u].z * cbPerFrame._m0[22u].x) * cbMtdParam._m0[31u].y) - (cbMtdParam._m0[39u].x * ((_1021 - cbSceneParam._m0[92u].y) / cbMtdParam._m0[33u].x))) * cbTextureTilingScale._m0[8u].y) + cbTextureTilingScale._m0[8u].w));
    float _1065 = (-0.0) - ((_1021 - cbMtdParam._m0[32u].y) / cbMtdParam._m0[33u].w);
    float _1069 = (_1021 - cbMtdParam._m0[32u].z) / cbMtdParam._m0[33u].w;
    float _1070 = isnan(_1069) ? _1065 : (isnan(_1065) ? _1069 : min(_1065, _1069));
    float _4275 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
    float _1071 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    float _1097 = ((_928.x - _913) * _432) + _913;
    float _1098 = ((_928.y - _914) * _432) + _914;
    float _1103 = ((_948.x - _1097) * _416) + _1097;
    float _1104 = ((_948.y - _1098) * _416) + _1098;
    float _1109 = ((_974.x - _1103) * _394) + _1103;
    float _1110 = ((_974.y - _1104) * _394) + _1104;
    float _1119 = ((((_341.x - _1109) * _381) + _1109) * 2.0) + (-1.0);
    float _1120 = ((((_341.y - _1110) * _381) + _1110) * 2.0) + (-1.0);
    float _1121 = dot(vec2(_1119, _1120), vec2(_1119, _1120));
    float _4286 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
    float _1126 = sqrt(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))));
    float _1129 = (cbMtdParam._m0[34u].z * ((_280.x * 2.0) + (-1.0))) + _1119;
    float _1130 = (cbMtdParam._m0[34u].z * ((_280.y * 2.0) + (-1.0))) + _1120;
    float _1133 = fma(_1126, _251 * NORMAL.x, fma(_1130, _258 * TANGENT.x, (_244 * _236) * _1129));
    float _1136 = fma(_1126, _251 * NORMAL.y, fma(_1130, _258 * TANGENT.y, (_244 * _237) * _1129));
    float _1139 = fma(_1126, _251 * NORMAL.z, fma(_1130, _258 * TANGENT.z, (_244 * _238) * _1129));
    float _1143 = inversesqrt(dot(vec3(_1133, _1136, _1139), vec3(_1133, _1136, _1139)));
    float _1144 = _1143 * _1133;
    float _1145 = _1143 * _1136;
    float _1146 = _1143 * _1139;
    float _4297 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _1147 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    float _4308 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _4319 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4330 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4341 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _1151 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
    float _1167 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1187 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1197 = cbSceneParam._m0[71u].x - (_1017 / _1187);
    float _1198 = cbSceneParam._m0[71u].y - (_1021 / _1187);
    float _1199 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1187);
    float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
    float _1204 = _1197 * _1203;
    float _1205 = _1198 * _1203;
    float _1206 = _1199 * _1203;
    vec4 _1211 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _1213 = _1211.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1431 = sqrt(((_1197 * _1197) + (_1198 * _1198)) + (_1199 * _1199));
        float _1437 = (cbMatDynParam._m0[5u].x * _1431) + cbMatDynParam._m0[5u].y;
        float _4352 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1438 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _1442 = (cbMatDynParam._m0[5u].z * _1431) + cbMatDynParam._m0[5u].w;
        float _4363 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) - _1438)) + _1438) < ((_1213 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1224 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1225 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _1227 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1229 = _1227.w;
    float _1247 = fma(_1146, cbSceneParam._m0[5u].z, fma(_1145, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1144));
    float _1250 = fma(_1146, cbSceneParam._m0[6u].z, fma(_1145, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1144));
    float _1253 = fma(_1146, cbSceneParam._m0[7u].z, fma(_1145, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1144));
    vec4 _1255 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1266 = (((_1255.y - _1147) + (_1255.w * _1147)) * cbMtdParam._m0[3u].x) + _1147;
    uint _1279 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1280 = _1279 + 9u;
    uint _1281 = _1280 + uint(cbMatDynParam._m0[0u].w);
    float _1287 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0)))) * cbInstanceData._m0[_1281].x;
    float _1288 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) * cbInstanceData._m0[_1281].y;
    float _1289 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0)))) * cbInstanceData._m0[_1281].z;
    float _4374 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
    float _1290 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
    float _4385 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
    float _1291 = isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0));
    float _4396 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
    float _1292 = isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0));
    vec4 _1293 = texture(sampler2D(g_DecalDiffuseTexture, SS_DiffuseMap), vec2(TEXCOORD.z, TEXCOORD.w));
    vec4 _1298 = texture(sampler2D(g_DecalSpecularTexture, SS_SpecularMap), vec2(TEXCOORD.z, TEXCOORD.w));
    float _1309 = (((_1298.x - _1151) + (_1298.w * _1151)) * cbMtdParam._m0[3u].x) + _1151;
    float _1322 = (cbMtdParam._m0[3u].x * (((_1290 * _1229) - _1290) + _1293.x)) + _1290;
    float _1323 = (cbMtdParam._m0[3u].x * (((_1291 * _1229) - _1291) + _1293.y)) + _1291;
    float _1324 = (cbMtdParam._m0[3u].x * (((_1292 * _1229) - _1292) + _1293.z)) + _1292;
    float _1325 = 1.0 - _1309;
    float _1326 = _1325 * _1322;
    float _1327 = _1325 * _1323;
    float _1328 = _1325 * _1324;
    float _1333 = (_1322 + (-0.039999999105930328369140625)) * _1309;
    float _1334 = (_1323 + (-0.039999999105930328369140625)) * _1309;
    float _1335 = (_1324 + (-0.039999999105930328369140625)) * _1309;
    float _1336 = _1333 + 0.039999999105930328369140625;
    float _1338 = _1334 + 0.039999999105930328369140625;
    float _1339 = _1335 + 0.039999999105930328369140625;
    vec4 _1348 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1224, cbSceneParam._m0[86u].y * _1225));
    float _1351 = _1348.x * TEXCOORD_5.w;
    float _1352 = dot(vec3(_1144, _1145, _1146), vec3(_1204, _1205, _1206));
    float _1355 = _1352 * 2.0;
    float _1359 = (_1355 * _1144) - _1204;
    float _1360 = (_1355 * _1145) - _1205;
    float _1361 = (_1355 * _1146) - _1206;
    float _1365 = abs(dot(vec3(_1204, _1205, _1206), vec3(_1144, _1145, _1146)));
    float _4407 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
    float _1367 = sqrt(_1266);
    float _1378 = exp2((_1367 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1367 * 3.0));
    float _1384 = (1.0 - _1378) * ((_1367 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1385 = _1378 * _1367;
    float _1413 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1417 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1421 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1747;
    float _1749;
    float _1750;
    float _1751;
    float _1752;
    float _1753;
    float _1754;
    float _1755;
    float _1756;
    float _1757;
    float _1758;
    float _1759;
    float _1760;
    float _1761;
    float _1762;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1474 = fma(_1421, cbModelParam._m0[26u].z, fma(_1417, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1413));
        float _1478 = fma(_1421, cbModelParam._m0[27u].z, fma(_1417, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1413));
        float _1482 = fma(_1421, cbModelParam._m0[28u].z, fma(_1417, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1413));
        float _1506 = _1413 + _1144;
        float _1507 = _1417 + _1145;
        float _1508 = _1421 + _1146;
        float _1518 = fma(_1508, cbModelParam._m0[26u].z, fma(_1507, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1506)) - _1474;
        float _1519 = fma(_1508, cbModelParam._m0[27u].z, fma(_1507, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1506)) - _1478;
        float _1520 = fma(_1508, cbModelParam._m0[28u].z, fma(_1507, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1506)) - _1482;
        float _1524 = inversesqrt(dot(vec3(_1518, _1519, _1520), vec3(_1518, _1519, _1520)));
        float _1536 = ((_1524 * _1518) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1474 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1537 = ((_1524 * _1519) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1478 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1538 = ((_1524 * _1520) / cbModelParam._m0[34u].z) + ((((((_1482 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1541 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1548 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1555 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        vec4 _1562 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1536, _1537, _1538), 0.0);
        float _1575 = exp2((_1541.w + (-0.5)) * 20.0) * 2.0;
        float _1576 = _1575 * (_1541.x + (-0.5));
        float _1577 = _1575 * (_1541.y + (-0.5));
        float _1578 = _1575 * (_1541.z + (-0.5));
        float _1585 = exp2((_1548.w + (-0.5)) * 20.0) * 2.0;
        float _1586 = _1585 * (_1548.x + (-0.5));
        float _1587 = _1585 * (_1548.y + (-0.5));
        float _1588 = _1585 * (_1548.z + (-0.5));
        float _1595 = exp2((_1555.w + (-0.5)) * 20.0) * 2.0;
        float _1596 = _1595 * (_1555.x + (-0.5));
        float _1597 = _1595 * (_1555.y + (-0.5));
        float _1598 = _1595 * (_1555.z + (-0.5));
        float _1605 = exp2((_1562.w + (-0.5)) * 20.0) * 2.0;
        float _1606 = _1605 * (_1562.x + (-0.5));
        float _1607 = _1605 * (_1562.y + (-0.5));
        float _1608 = _1605 * (_1562.z + (-0.5));
        float _1609 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1610 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1611 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1612 = _1576 * 0.5;
        float _1613 = _1586 * 0.5;
        float _1614 = _1596 * 0.5;
        float _1615 = dot(vec3(_1612, _1613, _1614), vec3(_1612, _1613, _1614));
        float _1620 = (_1615 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1615);
        float _1629 = (dot(vec3(_1144, _1145, _1146), vec3(_1620 * _1612, _1620 * _1613, _1620 * _1614)) + 1.0) * 0.5;
        float _4433 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1639 = sqrt(((_1613 * _1613) + (_1612 * _1612)) + (_1614 * _1614)) / (_1609 + 9.9999997473787516355514526367188e-06);
        float _4444 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
        float _1640 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _1641 = _1640 * 2.0;
        float _1645 = (1.0 - _1640) / (_1640 + 1.0);
        float _4455 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _1655 = ((((1.0 - _1646) * (_1641 + 2.0)) * exp2(log2(isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_1641 + 1.0))) + _1646) * _1609;
        float _1656 = _1577 * 0.5;
        float _1657 = _1587 * 0.5;
        float _1658 = _1597 * 0.5;
        float _1659 = dot(vec3(_1656, _1657, _1658), vec3(_1656, _1657, _1658));
        float _1664 = (_1659 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1659);
        float _1672 = (dot(vec3(_1144, _1145, _1146), vec3(_1664 * _1656, _1664 * _1657, _1664 * _1658)) + 1.0) * 0.5;
        float _4466 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
        float _1681 = sqrt(((_1657 * _1657) + (_1656 * _1656)) + (_1658 * _1658)) / (_1610 + 9.9999997473787516355514526367188e-06);
        float _4477 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
        float _1682 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
        float _1683 = _1682 * 2.0;
        float _1687 = (1.0 - _1682) / (_1682 + 1.0);
        float _4488 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
        float _1697 = ((((1.0 - _1688) * (_1683 + 2.0)) * exp2(log2(isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_1683 + 1.0))) + _1688) * _1610;
        float _1698 = _1578 * 0.5;
        float _1699 = _1588 * 0.5;
        float _1700 = _1598 * 0.5;
        float _1701 = dot(vec3(_1698, _1699, _1700), vec3(_1698, _1699, _1700));
        float _1706 = (_1701 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1701);
        float _1714 = (dot(vec3(_1144, _1145, _1146), vec3(_1706 * _1698, _1706 * _1699, _1706 * _1700)) + 1.0) * 0.5;
        float _4499 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1723 = sqrt(((_1699 * _1699) + (_1698 * _1698)) + (_1700 * _1700)) / (_1611 + 9.9999997473787516355514526367188e-06);
        float _4510 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
        float _1724 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _1725 = _1724 * 2.0;
        float _1729 = (1.0 - _1724) / (_1724 + 1.0);
        float _4521 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
        float _1739 = ((((1.0 - _1730) * (_1725 + 2.0)) * exp2(log2(isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * (_1725 + 1.0))) + _1730) * _1611;
        _1747 = _1578;
        _1749 = _1577;
        _1750 = _1576;
        _1751 = _1588;
        _1752 = _1587;
        _1753 = _1586;
        _1754 = _1598;
        _1755 = _1597;
        _1756 = _1596;
        _1757 = _1611;
        _1758 = _1610;
        _1759 = _1609;
        _1760 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)));
        _1761 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0)));
        _1762 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0)));
    }
    else
    {
        _1747 = _1748;
        _1749 = _1748;
        _1750 = _1748;
        _1751 = _1748;
        _1752 = _1748;
        _1753 = _1748;
        _1754 = _1748;
        _1755 = _1748;
        _1756 = _1748;
        _1757 = _1748;
        _1758 = _1748;
        _1759 = _1748;
        _1760 = 0.0;
        _1761 = 0.0;
        _1762 = 0.0;
    }
    float _2055;
    float _2056;
    float _2057;
    float _2058;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    float _2063;
    float _2064;
    float _2065;
    float _2066;
    float _2067;
    float _2068;
    float _2069;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1788 = fma(_1421, cbModelParam._m0[30u].z, fma(_1417, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1413));
        float _1792 = fma(_1421, cbModelParam._m0[31u].z, fma(_1417, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1413));
        float _1796 = fma(_1421, cbModelParam._m0[32u].z, fma(_1417, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1413));
        float _1818 = _1413 + _1144;
        float _1819 = _1417 + _1145;
        float _1820 = _1421 + _1146;
        float _1830 = fma(_1820, cbModelParam._m0[30u].z, fma(_1819, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1818)) - _1788;
        float _1831 = fma(_1820, cbModelParam._m0[31u].z, fma(_1819, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1818)) - _1792;
        float _1832 = fma(_1820, cbModelParam._m0[32u].z, fma(_1819, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1818)) - _1796;
        float _1836 = inversesqrt(dot(vec3(_1830, _1831, _1832), vec3(_1830, _1831, _1832)));
        float _1848 = ((_1836 * _1830) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1788 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1849 = ((_1836 * _1831) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1792 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1850 = ((_1836 * _1832) / cbModelParam._m0[35u].z) + ((((((_1796 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1852 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1848, _1849, _1850), 0.0);
        vec4 _1859 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1848, _1849, _1850), 0.0);
        vec4 _1866 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1848, _1849, _1850), 0.0);
        vec4 _1873 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1848, _1849, _1850), 0.0);
        float _1885 = exp2((_1852.w + (-0.5)) * 20.0) * 2.0;
        float _1886 = _1885 * (_1852.x + (-0.5));
        float _1887 = _1885 * (_1852.y + (-0.5));
        float _1888 = _1885 * (_1852.z + (-0.5));
        float _1895 = exp2((_1859.w + (-0.5)) * 20.0) * 2.0;
        float _1896 = _1895 * (_1859.x + (-0.5));
        float _1897 = _1895 * (_1859.y + (-0.5));
        float _1898 = _1895 * (_1859.z + (-0.5));
        float _1905 = exp2((_1866.w + (-0.5)) * 20.0) * 2.0;
        float _1906 = _1905 * (_1866.x + (-0.5));
        float _1907 = _1905 * (_1866.y + (-0.5));
        float _1908 = _1905 * (_1866.z + (-0.5));
        float _1915 = exp2((_1873.w + (-0.5)) * 20.0) * 2.0;
        float _1916 = _1915 * (_1873.x + (-0.5));
        float _1917 = _1915 * (_1873.y + (-0.5));
        float _1918 = _1915 * (_1873.z + (-0.5));
        float _1919 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
        float _1920 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1921 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
        float _1922 = _1886 * 0.5;
        float _1923 = _1896 * 0.5;
        float _1924 = _1906 * 0.5;
        float _1925 = dot(vec3(_1922, _1923, _1924), vec3(_1922, _1923, _1924));
        float _1930 = (_1925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1925);
        float _1938 = (dot(vec3(_1144, _1145, _1146), vec3(_1930 * _1922, _1930 * _1923, _1930 * _1924)) + 1.0) * 0.5;
        float _4562 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1947 = sqrt(((_1923 * _1923) + (_1922 * _1922)) + (_1924 * _1924)) / (_1919 + 9.9999997473787516355514526367188e-06);
        float _4573 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1948 = isnan(1.0) ? _4573 : (isnan(_4573) ? 1.0 : min(_4573, 1.0));
        float _1949 = _1948 * 2.0;
        float _1953 = (1.0 - _1948) / (_1948 + 1.0);
        float _4584 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1954 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
        float _1963 = ((((1.0 - _1954) * (_1949 + 2.0)) * exp2(log2(isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_1949 + 1.0))) + _1954) * _1919;
        float _1964 = _1887 * 0.5;
        float _1965 = _1897 * 0.5;
        float _1966 = _1907 * 0.5;
        float _1967 = dot(vec3(_1964, _1965, _1966), vec3(_1964, _1965, _1966));
        float _1972 = (_1967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1967);
        float _1980 = (dot(vec3(_1144, _1145, _1146), vec3(_1972 * _1964, _1972 * _1965, _1972 * _1966)) + 1.0) * 0.5;
        float _4595 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
        float _1989 = sqrt(((_1965 * _1965) + (_1964 * _1964)) + (_1966 * _1966)) / (_1920 + 9.9999997473787516355514526367188e-06);
        float _4606 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
        float _1991 = _1990 * 2.0;
        float _1995 = (1.0 - _1990) / (_1990 + 1.0);
        float _4617 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1996 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2005 = ((((1.0 - _1996) * (_1991 + 2.0)) * exp2(log2(isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * (_1991 + 1.0))) + _1996) * _1920;
        float _2006 = _1888 * 0.5;
        float _2007 = _1898 * 0.5;
        float _2008 = _1908 * 0.5;
        float _2009 = dot(vec3(_2006, _2007, _2008), vec3(_2006, _2007, _2008));
        float _2014 = (_2009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_2009);
        float _2022 = (dot(vec3(_1144, _1145, _1146), vec3(_2014 * _2006, _2014 * _2007, _2014 * _2008)) + 1.0) * 0.5;
        float _4628 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2031 = sqrt(((_2007 * _2007) + (_2006 * _2006)) + (_2008 * _2008)) / (_1921 + 9.9999997473787516355514526367188e-06);
        float _4639 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2032 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
        float _2033 = _2032 * 2.0;
        float _2037 = (1.0 - _2032) / (_2032 + 1.0);
        float _4650 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2038 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
        float _2047 = ((((1.0 - _2038) * (_2033 + 2.0)) * exp2(log2(isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0))) * (_2033 + 1.0))) + _2038) * _1921;
        _2055 = _1888;
        _2056 = _1887;
        _2057 = _1886;
        _2058 = _1898;
        _2059 = _1897;
        _2060 = _1896;
        _2061 = _1908;
        _2062 = _1907;
        _2063 = _1906;
        _2064 = _1921;
        _2065 = _1920;
        _2066 = _1919;
        _2067 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0)));
        _2068 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0)));
        _2069 = cbModelParam._m0[36u].w * (isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)));
    }
    else
    {
        _2055 = _1748;
        _2056 = _1748;
        _2057 = _1748;
        _2058 = _1748;
        _2059 = _1748;
        _2060 = _1748;
        _2061 = _1748;
        _2062 = _1748;
        _2063 = _1748;
        _2064 = _1748;
        _2065 = _1748;
        _2066 = _1748;
        _2067 = 0.0;
        _2068 = 0.0;
        _2069 = 0.0;
    }
    float _2079 = (cbModelParam._m0[1u].x * (_2067 - _1760)) + _1760;
    float _2080 = (cbModelParam._m0[1u].x * (_2068 - _1761)) + _1761;
    float _2081 = (cbModelParam._m0[1u].x * (_2069 - _1762)) + _1762;
    float _2102 = fma(_2081, cbSceneParam._m0[89u].z, fma(_2080, cbSceneParam._m0[89u].y, _2079 * cbSceneParam._m0[89u].x));
    float _2105 = fma(_2081, cbSceneParam._m0[90u].z, fma(_2080, cbSceneParam._m0[90u].y, _2079 * cbSceneParam._m0[90u].x));
    float _2108 = fma(_2081, cbSceneParam._m0[91u].z, fma(_2080, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _2079));
    float _2121 = _1359 * 0.5;
    float _2122 = _1360 * 0.5;
    float _2123 = _1361 * 0.5;
    float _2124 = dot(vec4(_2121, _2122, _2123, 1.0), vec4(_2057, _2060, _2063, _2066));
    float _2127 = dot(vec4(_2121, _2122, _2123, 1.0), vec4(_2056, _2059, _2062, _2065));
    float _2130 = dot(vec4(_2121, _2122, _2123, 1.0), vec4(_2055, _2058, _2061, _2064));
    float _2164;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2137 = dot(vec4(_2121, _2122, _2123, 1.0), vec4(_1747, _1751, _1754, _1757));
        float _2141 = dot(vec4(_2121, _2122, _2123, 1.0), vec4(_1749, _1752, _1755, _1758));
        float _2145 = dot(vec4(_2121, _2122, _2123, 1.0), vec4(_1750, _1753, _1756, _1759));
        float _2152 = dot(vec4(cbModelParam._m0[39u]), vec4(_2121, _2122, _2123, 1.0));
        _2164 = dot(vec3(isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0)), isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0)), isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2152) ? 0.0 : (isnan(0.0) ? _2152 : max(0.0, _2152))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2164 = 1.0;
    }
    float _2175;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2166 = dot(vec4(cbModelParam._m0[40u]), vec4(_2121, _2122, _2123, 1.0));
        _2175 = dot(vec3(isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0)), isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0)), isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2166) ? 0.0 : (isnan(0.0) ? _2166 : max(0.0, _2166))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2175 = 1.0;
    }
    float _2179 = (_2175 * cbModelParam._m0[1u].x) + (_2164 * (1.0 - cbModelParam._m0[1u].x));
    float _2189 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1266);
    float _2190 = isnan(_2189) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2189 : min(cbModelParam._m0[25u].z, _2189));
    float _2270;
    float _2272;
    float _2274;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2237 = fma(_1421, cbModelParam._m0[13u].z, fma(_1417, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1413)) + cbModelParam._m0[13u].w;
        float _2241 = fma(_1421, cbModelParam._m0[14u].z, fma(_1417, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1413)) + cbModelParam._m0[14u].w;
        float _2245 = fma(_1421, cbModelParam._m0[15u].z, fma(_1417, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1413)) + cbModelParam._m0[15u].w;
        float _2248 = fma(_1361, cbModelParam._m0[13u].z, fma(_1360, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1359));
        float _2251 = fma(_1361, cbModelParam._m0[14u].z, fma(_1360, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1359));
        float _2254 = fma(_1361, cbModelParam._m0[15u].z, fma(_1360, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1359));
        float _2282;
        if (_2248 > 0.0)
        {
            _2282 = abs((1.0 - _2237) / _2248);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_2248 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_2237 + 1.0) / _2248);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _2282 = frontier_phi_17_15_ladder;
        }
        float _2484;
        if (_2251 > 0.0)
        {
            _2484 = abs((1.0 - _2241) / _2251);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_2251 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_2241 + 1.0) / _2251);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2484 = frontier_phi_26_22_ladder;
        }
        float _2738;
        if (_2254 > 0.0)
        {
            _2738 = abs((1.0 - _2245) / _2254);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_2254 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_2245 + 1.0) / _2254);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2738 = frontier_phi_38_33_ladder;
        }
        float _2740 = isnan(_2484) ? _2282 : (isnan(_2282) ? _2484 : min(_2282, _2484));
        float _2741 = isnan(_2738) ? _2740 : (isnan(_2740) ? _2738 : min(_2740, _2738));
        float _2745 = (_2741 * _2248) + _2237;
        float _2746 = (_2741 * _2251) + _2241;
        float _2747 = (_2741 * _2254) + _2245;
        float _2748 = _2741 * 9.9999997473787516355514526367188e-05;
        float _2750 = (-1.0) - _2748;
        float _2752 = _2748 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2747 > _2752) || ((_2747 < _2750) || ((_2746 > _2752) || ((_2746 < _2750) || ((_2745 < _2750) || (_2745 > _2752))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2875 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2747, cbModelParam._m0[9u].z, fma(_2746, cbModelParam._m0[9u].y, _2745 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2747, cbModelParam._m0[10u].z, fma(_2746, cbModelParam._m0[10u].y, _2745 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2747, cbModelParam._m0[11u].z, fma(_2746, cbModelParam._m0[11u].y, _2745 * cbModelParam._m0[11u].x))), _2190);
            frontier_phi_16_38_ladder = _2875.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2875.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2875.x * cbModelParam._m0[1u].y;
        }
        _2270 = frontier_phi_16_38_ladder_2;
        _2272 = frontier_phi_16_38_ladder_1;
        _2274 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _2258 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1359, _1360, _1361), _2190);
        _2270 = _2258.x * cbModelParam._m0[1u].y;
        _2272 = _2258.y * cbModelParam._m0[1u].y;
        _2274 = _2258.z * cbModelParam._m0[1u].y;
    }
    float _2278 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1266);
    float _2279 = isnan(_2278) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2278 : min(cbModelParam._m0[25u].w, _2278));
    float _2368;
    float _2370;
    float _2372;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2332 = fma(_1421, cbModelParam._m0[21u].z, fma(_1417, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1413)) + cbModelParam._m0[21u].w;
        float _2336 = fma(_1421, cbModelParam._m0[22u].z, fma(_1417, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1413)) + cbModelParam._m0[22u].w;
        float _2340 = fma(_1421, cbModelParam._m0[23u].z, fma(_1417, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1413)) + cbModelParam._m0[23u].w;
        float _2343 = fma(_1361, cbModelParam._m0[21u].z, fma(_1360, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1359));
        float _2346 = fma(_1361, cbModelParam._m0[22u].z, fma(_1360, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1359));
        float _2349 = fma(_1361, cbModelParam._m0[23u].z, fma(_1360, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1359));
        float _2489;
        if (_2343 > 0.0)
        {
            _2489 = abs((1.0 - _2332) / _2343);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2343 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2332 + 1.0) / _2343);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2489 = frontier_phi_28_24_ladder;
        }
        float _2765;
        if (_2346 > 0.0)
        {
            _2765 = abs((1.0 - _2336) / _2346);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2346 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2336 + 1.0) / _2346);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2765 = frontier_phi_40_35_ladder;
        }
        float _2978;
        if (_2349 > 0.0)
        {
            _2978 = abs((1.0 - _2340) / _2349);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2349 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2340 + 1.0) / _2349);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2978 = frontier_phi_49_46_ladder;
        }
        float _2980 = isnan(_2765) ? _2489 : (isnan(_2489) ? _2765 : min(_2489, _2765));
        float _2981 = isnan(_2978) ? _2980 : (isnan(_2980) ? _2978 : min(_2980, _2978));
        float _2985 = (_2981 * _2343) + _2332;
        float _2986 = (_2981 * _2346) + _2336;
        float _2987 = (_2981 * _2349) + _2340;
        float _2988 = _2981 * 9.9999997473787516355514526367188e-05;
        float _2989 = (-1.0) - _2988;
        float _2991 = _2988 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2987 > _2991) || ((_2987 < _2989) || ((_2986 > _2991) || ((_2986 < _2989) || ((_2985 < _2989) || (_2985 > _2991))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3215 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2987, cbModelParam._m0[17u].z, fma(_2986, cbModelParam._m0[17u].y, _2985 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2987, cbModelParam._m0[18u].z, fma(_2986, cbModelParam._m0[18u].y, _2985 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2987, cbModelParam._m0[19u].z, fma(_2986, cbModelParam._m0[19u].y, _2985 * cbModelParam._m0[19u].x))), _2279);
            frontier_phi_25_49_ladder = _3215.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _3215.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _3215.x * cbModelParam._m0[1u].z;
        }
        _2368 = frontier_phi_25_49_ladder_2;
        _2370 = frontier_phi_25_49_ladder_1;
        _2372 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2352 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1359, _1360, _1361), _2279);
        _2368 = _2352.x * cbModelParam._m0[1u].z;
        _2370 = _2352.y * cbModelParam._m0[1u].z;
        _2372 = _2352.z * cbModelParam._m0[1u].z;
    }
    float _2385 = (((_1384 * _1336) + _1385) * _1351) * ((cbModelParam._m0[1u].w * (_2368 - _2270)) + _2270);
    float _2387 = (((_1384 * _1338) + _1385) * _1351) * ((cbModelParam._m0[1u].w * (_2370 - _2272)) + _2272);
    float _2389 = (((_1384 * _1339) + _1385) * _1351) * ((cbModelParam._m0[1u].w * (_2372 - _2274)) + _2274);
    float _2392 = fma(_2389, cbSceneParam._m0[89u].z, fma(_2387, cbSceneParam._m0[89u].y, _2385 * cbSceneParam._m0[89u].x));
    float _2395 = fma(_2389, cbSceneParam._m0[90u].z, fma(_2387, cbSceneParam._m0[90u].y, _2385 * cbSceneParam._m0[90u].x));
    float _2398 = fma(_2389, cbSceneParam._m0[91u].z, fma(_2387, cbSceneParam._m0[91u].y, _2385 * cbSceneParam._m0[91u].x));
    uvec4 _2408 = floatBitsToUint(cbInstanceData._m0[_1279 + 5u]);
    uint _2410 = _2408.x * 14u;
    uint _2411 = _2410 + 13u;
    float _2418 = _1351 + (-1.0);
    float _2423 = (cbLight._m0[_2411].x * _2418) + 1.0;
    float _2424 = (cbLight._m0[_2411].y * _2418) + 1.0;
    float _2425 = (cbLight._m0[_2411].z * _2418) + 1.0;
    float _2426 = (cbLight._m0[_2411].w * _2418) + 1.0;
    uint _2427 = _2410 + 5u;
    float _2433 = isnan(1.0) ? _2424 : (isnan(_2424) ? 1.0 : min(_2424, 1.0));
    uint _2437 = _2410 + 4u;
    float _2443 = isnan(1.0) ? _2423 : (isnan(_2423) ? 1.0 : min(_2423, 1.0));
    uint _2447 = _2410 | 1u;
    float _2458 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_1144, _1145, _1146));
    float _2461 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_1144, _1145, _1146));
    float _4786 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
    float _4797 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
    float _2466 = (isnan(1.0) ? _4786 : (isnan(_4786) ? 1.0 : min(_4786, 1.0))) * 0.3183098733425140380859375;
    float _2468 = (isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0))) * 0.3183098733425140380859375;
    float _2475 = ((cbLight._m0[_2427].x * _2433) * _2468) + ((cbLight._m0[_2437].x * _2443) * _2466);
    float _2476 = ((_2433 * cbLight._m0[_2427].y) * _2468) + ((_2443 * cbLight._m0[_2437].y) * _2466);
    float _2477 = ((_2433 * cbLight._m0[_2427].z) * _2468) + ((_2443 * cbLight._m0[_2437].z) * _2466);
    uvec4 _2481 = floatBitsToUint(cbLight._m0[_2410 + 12u]);
    bool _2483 = _2481.x == 0u;
    float _2494;
    float _2496;
    float _2498;
    if (_2483)
    {
        _2494 = _2475;
        _2496 = _2476;
        _2498 = _2477;
    }
    else
    {
        uint _2502 = _2410 + 6u;
        float _2518 = (dot(vec3(cbLight._m0[_2410 + 2u].xyz), vec3(_1144, _1145, _1146)) * 0.5) + 0.5;
        float _2519 = _2518 * _2518;
        float _4808 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
        float _2520 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2521 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2494 = (((cbLight._m0[_2502].x * 0.3183098733425140380859375) * _2520) * _2521) + _2475;
        _2496 = (((cbLight._m0[_2502].y * 0.3183098733425140380859375) * _2520) * _2521) + _2476;
        _2498 = (((cbLight._m0[_2502].z * 0.3183098733425140380859375) * _2520) * _2521) + _2477;
    }
    bool _2501 = _2481.y == 0u;
    float _2539;
    float _2541;
    float _2543;
    if (_2501)
    {
        _2539 = _2494;
        _2541 = _2496;
        _2543 = _2498;
    }
    else
    {
        uint _2709 = _2410 + 7u;
        float _2725 = (dot(vec3(cbLight._m0[_2410 + 3u].xyz), vec3(_1144, _1145, _1146)) * 0.5) + 0.5;
        float _2726 = _2725 * _2725;
        float _4824 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
        float _2727 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
        float _2728 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2539 = (((cbLight._m0[_2709].x * 0.3183098733425140380859375) * _2727) * _2728) + _2494;
        _2541 = (((cbLight._m0[_2709].y * 0.3183098733425140380859375) * _2727) * _2728) + _2496;
        _2543 = (((cbLight._m0[_2709].z * 0.3183098733425140380859375) * _2727) * _2728) + _2498;
    }
    uint _2546 = _2410 + 8u;
    float _2559 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _1266) * 0.949999988079071044921875);
    float _2560 = _2559 * _2559;
    float _2561 = cbLight._m0[_2410].x + _1204;
    float _2562 = cbLight._m0[_2410].y + _1205;
    float _2563 = cbLight._m0[_2410].z + _1206;
    float _2567 = inversesqrt(dot(vec3(_2561, _2562, _2563), vec3(_2561, _2562, _2563)));
    float _2568 = _2567 * _2561;
    float _2569 = _2567 * _2562;
    float _2570 = _2567 * _2563;
    float _2571 = dot(vec3(_1144, _1145, _1146), vec3(cbLight._m0[_2410].xyz));
    float _4840 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2574 = isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0));
    float _4851 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
    float _2575 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
    float _2576 = dot(vec3(_1144, _1145, _1146), vec3(_2568, _2569, _2570));
    float _4862 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2579 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
    float _2580 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2568, _2569, _2570));
    float _4873 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
    float _2584 = _2560 * _2560;
    float _2588 = ((_2579 * _2579) * (_2584 + (-1.0))) + 1.0;
    float _2596 = exp2(log2(1.0 - (isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0)))) * 5.0);
    float _2597 = 0.959999978542327880859375 - _1333;
    float _2599 = 0.959999978542327880859375 - _1334;
    float _2600 = 0.959999978542327880859375 - _1335;
    float _2607 = 1.0 - _2560;
    float _2618 = (0.5 / (((_2575 * ((_2574 * _2607) + _2560)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2607) + _2560) * _2574))) * _2574;
    float _4884 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
    float _2620 = (isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0))) * (_2584 / ((_2588 * _2588) * 3.141590118408203125));
    uint _2631 = _2410 + 9u;
    float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2447].w)) * _1266) * 0.949999988079071044921875);
    float _2643 = _2642 * _2642;
    float _2644 = cbLight._m0[_2447].x + _1204;
    float _2645 = cbLight._m0[_2447].y + _1205;
    float _2646 = cbLight._m0[_2447].z + _1206;
    float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
    float _2651 = _2650 * _2644;
    float _2652 = _2650 * _2645;
    float _2653 = _2650 * _2646;
    float _2654 = dot(vec3(_1144, _1145, _1146), vec3(cbLight._m0[_2447].xyz));
    float _4895 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
    float _2657 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
    float _2658 = dot(vec3(_1144, _1145, _1146), vec3(_2651, _2652, _2653));
    float _4906 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
    float _2662 = dot(vec3(cbLight._m0[_2447].xyz), vec3(_2651, _2652, _2653));
    float _4917 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2666 = _2643 * _2643;
    float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
    float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0)))) * 5.0);
    float _2684 = 1.0 - _2643;
    float _2694 = (0.5 / (((_2575 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2684) + _2643) * _2657))) * _2657;
    float _4928 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
    float _2696 = (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
    float _2706 = (((((_2677 * _2597) + _1336) * cbLight._m0[_2631].x) * _2696) * _2433) + (((((_2596 * _2597) + _1336) * cbLight._m0[_2546].x) * _2620) * _2443);
    float _2707 = (((((_2677 * _2599) + _1338) * cbLight._m0[_2631].y) * _2696) * _2433) + (((((_2596 * _2599) + _1338) * cbLight._m0[_2546].y) * _2620) * _2443);
    float _2708 = (((((_2677 * _2600) + _1339) * cbLight._m0[_2631].z) * _2696) * _2433) + (((((_2596 * _2600) + _1339) * cbLight._m0[_2546].z) * _2620) * _2443);
    float _2770;
    float _2772;
    float _2774;
    if (_2483)
    {
        _2770 = _2706;
        _2772 = _2707;
        _2774 = _2708;
    }
    else
    {
        uint _2776 = _2410 + 2u;
        uint _2780 = _2410 + 10u;
        float _2794 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2776].w)) * _1266) * 0.949999988079071044921875);
        float _2795 = _2794 * _2794;
        float _2796 = cbLight._m0[_2776].x + _1204;
        float _2797 = cbLight._m0[_2776].y + _1205;
        float _2798 = cbLight._m0[_2776].z + _1206;
        float _2802 = inversesqrt(dot(vec3(_2796, _2797, _2798), vec3(_2796, _2797, _2798)));
        float _2803 = _2802 * _2796;
        float _2804 = _2802 * _2797;
        float _2805 = _2802 * _2798;
        float _2806 = dot(vec3(_1144, _1145, _1146), vec3(cbLight._m0[_2776].xyz));
        float _4939 = isnan(0.0) ? _2806 : (isnan(_2806) ? 0.0 : max(_2806, 0.0));
        float _2809 = isnan(1.0) ? _4939 : (isnan(_4939) ? 1.0 : min(_4939, 1.0));
        float _2810 = dot(vec3(_1144, _1145, _1146), vec3(_2803, _2804, _2805));
        float _4950 = isnan(0.0) ? _2810 : (isnan(_2810) ? 0.0 : max(_2810, 0.0));
        float _2813 = isnan(1.0) ? _4950 : (isnan(_4950) ? 1.0 : min(_4950, 1.0));
        float _2814 = dot(vec3(cbLight._m0[_2776].xyz), vec3(_2803, _2804, _2805));
        float _4961 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
        float _2818 = _2795 * _2795;
        float _2822 = ((_2813 * _2813) * (_2818 + (-1.0))) + 1.0;
        float _2829 = exp2(log2(1.0 - (isnan(1.0) ? _4961 : (isnan(_4961) ? 1.0 : min(_4961, 1.0)))) * 5.0);
        float _2836 = 1.0 - _2795;
        float _2846 = (0.5 / (((_2575 * ((_2809 * _2836) + _2795)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2836) + _2795) * _2809))) * _2809;
        float _4972 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2848 = (isnan(1.0) ? _4972 : (isnan(_4972) ? 1.0 : min(_4972, 1.0))) * (_2818 / ((_2822 * _2822) * 3.141590118408203125));
        float _2849 = isnan(1.0) ? _2425 : (isnan(_2425) ? 1.0 : min(_2425, 1.0));
        _2770 = (((((_2829 * _2597) + _1336) * cbLight._m0[_2780].x) * _2848) * _2849) + _2706;
        _2772 = (((((_2829 * _2599) + _1338) * cbLight._m0[_2780].y) * _2848) * _2849) + _2707;
        _2774 = (((((_2829 * _2600) + _1339) * cbLight._m0[_2780].z) * _2848) * _2849) + _2708;
    }
    float _2884;
    float _2886;
    float _2888;
    if (_2501)
    {
        _2884 = _2770;
        _2886 = _2772;
        _2888 = _2774;
    }
    else
    {
        uint _2895 = _2410 + 3u;
        uint _2899 = _2410 + 11u;
        float _2913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2895].w)) * _1266) * 0.949999988079071044921875);
        float _2914 = _2913 * _2913;
        float _2915 = cbLight._m0[_2895].x + _1204;
        float _2916 = cbLight._m0[_2895].y + _1205;
        float _2917 = cbLight._m0[_2895].z + _1206;
        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
        float _2922 = _2921 * _2915;
        float _2923 = _2921 * _2916;
        float _2924 = _2921 * _2917;
        float _2925 = dot(vec3(_1144, _1145, _1146), vec3(cbLight._m0[_2895].xyz));
        float _4988 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
        float _2928 = isnan(1.0) ? _4988 : (isnan(_4988) ? 1.0 : min(_4988, 1.0));
        float _2929 = dot(vec3(_1144, _1145, _1146), vec3(_2922, _2923, _2924));
        float _4999 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
        float _2932 = isnan(1.0) ? _4999 : (isnan(_4999) ? 1.0 : min(_4999, 1.0));
        float _2933 = dot(vec3(cbLight._m0[_2895].xyz), vec3(_2922, _2923, _2924));
        float _5010 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2937 = _2914 * _2914;
        float _2941 = ((_2932 * _2932) * (_2937 + (-1.0))) + 1.0;
        float _2948 = exp2(log2(1.0 - (isnan(1.0) ? _5010 : (isnan(_5010) ? 1.0 : min(_5010, 1.0)))) * 5.0);
        float _2955 = 1.0 - _2914;
        float _2965 = (0.5 / (((_2575 * ((_2928 * _2955) + _2914)) + 9.9999999392252902907785028219223e-09) + (((_2575 * _2955) + _2914) * _2928))) * _2928;
        float _5021 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
        float _2967 = (isnan(1.0) ? _5021 : (isnan(_5021) ? 1.0 : min(_5021, 1.0))) * (_2937 / ((_2941 * _2941) * 3.141590118408203125));
        float _2968 = isnan(1.0) ? _2426 : (isnan(_2426) ? 1.0 : min(_2426, 1.0));
        _2884 = (((((_2948 * _2597) + _1336) * cbLight._m0[_2899].x) * _2967) * _2968) + _2770;
        _2886 = (((((_2948 * _2599) + _1338) * cbLight._m0[_2899].y) * _2967) * _2968) + _2772;
        _2888 = (((((_2948 * _2600) + _1339) * cbLight._m0[_2899].z) * _2967) * _2968) + _2774;
    }
    float _3103;
    float _3105;
    float _3107;
    float _3109;
    float _3111;
    float _3113;
    if (_2408.y == 0u)
    {
        float _3043 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _3044 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _3043;
        float _3045 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _3043;
        float _3046 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _3043;
        uvec4 _3058 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3059 = _3058.x;
        uint _3070 = uint((float(_3058.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1225) / _3059))) + floor(float(uint(cbSceneParam._m0[85u].x * _1224) / _3059)));
        float _3080 = (log2(_3046 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3081 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
        uint _3084 = uint(isnan(14.0) ? _3081 : (isnan(_3081) ? 14.0 : min(_3081, 14.0)));
        uvec4 _3089 = texelFetch(g_lightClusterGridBuffer, int(((_3084 << 2u) + (_3070 << 6u)) >> 2u));
        uint _3090 = _3089.x;
        uint _3091 = _3058.z;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        float _3228;
        float _3230;
        if (((((1u << ((_3091 >> 4u) & 15u)) + 4294967295u) & _3090) == 0u) || ((_3091 & 240u) == 0u))
        {
            _3220 = 0.0;
            _3222 = 0.0;
            _3224 = 0.0;
            _3226 = 0.0;
            _3228 = 0.0;
            _3230 = 0.0;
        }
        else
        {
            float _3221;
            float _3223;
            float _3225;
            float _3227;
            float _3229;
            float _3231;
            float _3380 = 0.0;
            float _3381 = 0.0;
            float _3382 = 0.0;
            float _3383 = 0.0;
            float _3384 = 0.0;
            float _3385 = 0.0;
            uint _3386 = 0u;
            uint _3395;
            bool _3396;
            for (;;)
            {
                _3395 = texelFetch(g_lightClassification, int((((_3084 << 5u) + (_3070 << 9u)) + (_3386 << 2u)) >> 2u)).x;
                _3396 = _3395 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3396)
                {
                    frontier_phi_66_pred = _3380;
                    frontier_phi_66_pred_1 = _3385;
                    frontier_phi_66_pred_2 = _3384;
                    frontier_phi_66_pred_3 = _3383;
                    frontier_phi_66_pred_4 = _3382;
                    frontier_phi_66_pred_5 = _3381;
                }
                else
                {
                    float _3525;
                    float _3526;
                    float _3527;
                    float _3528;
                    float _3529;
                    float _3530;
                    uint _3531;
                    _3525 = _3380;
                    _3526 = _3381;
                    _3527 = _3382;
                    _3528 = _3383;
                    _3529 = _3384;
                    _3530 = _3385;
                    _3531 = _3395;
                    float _3452;
                    float _3453;
                    float _3454;
                    float _3455;
                    float _3456;
                    float _3457;
                    for (;;)
                    {
                        uint _3535 = uint(findLSB(_3531)) + (_3386 << 5u);
                        uint _3532 = (_3531 + 4294967295u) & _3531;
                        uint _3537 = _3535 * 48u;
                        vec4 _3551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3537)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3537 + 3u)).x));
                        uint _3557 = (_3535 * 48u) + 4u;
                        vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3557)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3557 + 3u)).x));
                        uint _3576 = (_3535 * 48u) + 8u;
                        vec3 _3587 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3576)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3576 + 2u)).x));
                        float _3591 = _3551.x - _3044;
                        float _3592 = _3551.y - _3045;
                        float _3593 = _3551.z - _3046;
                        float _3594 = dot(vec3(_3591, _3592, _3593), vec3(_3591, _3592, _3593));
                        float _3597 = inversesqrt(_3594);
                        float _3598 = _3597 * _3591;
                        float _3599 = _3597 * _3592;
                        float _3600 = _3597 * _3593;
                        float _3601 = dot(vec3(_1247, _1250, _1253), vec3(_3598, _3599, _3600));
                        float _3606 = 1.0 - (_3594 * _3551.w);
                        float _5047 = isnan(0.0) ? _3606 : (isnan(_3606) ? 0.0 : max(_3606, 0.0));
                        float _3607 = isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0));
                        float _3608 = sqrt(_3594) * _3570.w;
                        float _3611 = 1.39999997615814208984375 / (_3608 + 1.39999997615814208984375);
                        float _3612 = _3611 * _3611;
                        float _3615 = ((1.0 - _3612) * _3601) + _3612;
                        float _3618 = _3608 * _3608;
                        float _3622 = ((isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0))) * _3607) / ((_3618 * 0.699999988079071044921875) + 1.0);
                        float _3626 = (-0.0) - _3044;
                        float _3627 = (-0.0) - _3045;
                        float _3628 = (-0.0) - _3046;
                        float _3632 = inversesqrt(dot(vec3(_3626, _3627, _3628), vec3(_3626, _3627, _3628)));
                        float _3633 = _3632 * _3626;
                        float _3634 = _3632 * _3627;
                        float _3635 = _3632 * _3628;
                        float _3643 = exp2(log2(1.0 / ((_3618 * 3.5) + 5.0)) * 0.25);
                        float _3644 = 1.0 - _1367;
                        float _3651 = sqrt(1.0 - ((1.0 - (_3644 * _3644)) * (1.0 - (_3643 * _3643))));
                        float _3652 = _3651 * _3651;
                        float _3653 = _3652 * _3652;
                        float _3654 = _3633 + _3598;
                        float _3655 = _3634 + _3599;
                        float _3656 = _3635 + _3600;
                        float _3660 = inversesqrt(dot(vec3(_3654, _3655, _3656), vec3(_3654, _3655, _3656)));
                        float _3664 = dot(vec3(_1247, _1250, _1253), vec3(_3633, _3634, _3635));
                        float _5063 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                        float _3667 = isnan(1.0) ? _5063 : (isnan(_5063) ? 1.0 : min(_5063, 1.0));
                        float _3668 = dot(vec3(_1247, _1250, _1253), vec3(_3660 * _3654, _3660 * _3655, _3660 * _3656));
                        float _5074 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                        float _3671 = isnan(1.0) ? _5074 : (isnan(_5074) ? 1.0 : min(_5074, 1.0));
                        float _3675 = ((_3671 * _3671) * (_3653 + (-1.0))) + 1.0;
                        float _3676 = _3611 * _3652;
                        float _3677 = _3676 * _3676;
                        float _3680 = ((1.0 - _3677) * _3601) + _3677;
                        float _5085 = isnan(0.0) ? _3680 : (isnan(_3680) ? 0.0 : max(_3680, 0.0));
                        float _3681 = isnan(1.0) ? _5085 : (isnan(_5085) ? 1.0 : min(_5085, 1.0));
                        float _3682 = 1.0 - _3652;
                        float _3692 = (0.5 / (((_3681 * ((_3667 * _3682) + _3652)) + 9.9999999392252902907785028219223e-09) + (((_3681 * _3682) + _3652) * _3667))) * _3681;
                        float _5096 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                        float _3703 = (((_3653 * 3.1415927410125732421875) * (isnan(1.0) ? _5096 : (isnan(_5096) ? 1.0 : min(_5096, 1.0)))) / ((_3675 * _3675) * ((_3618 * 2.1991131305694580078125) + 3.141590118408203125))) * _3607;
                        _3455 = (_3622 * _3570.x) + _3528;
                        _3456 = (_3622 * _3570.y) + _3529;
                        _3457 = (_3622 * _3570.z) + _3530;
                        _3452 = (_3703 * _3587.x) + _3525;
                        _3453 = (_3703 * _3587.y) + _3526;
                        _3454 = (_3703 * _3587.z) + _3527;
                        if (_3532 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3525 = _3452;
                            _3526 = _3453;
                            _3527 = _3454;
                            _3528 = _3455;
                            _3529 = _3456;
                            _3530 = _3457;
                            _3531 = _3532;
                        }
                    }
                    frontier_phi_66_pred = _3452;
                    frontier_phi_66_pred_1 = _3457;
                    frontier_phi_66_pred_2 = _3456;
                    frontier_phi_66_pred_3 = _3455;
                    frontier_phi_66_pred_4 = _3454;
                    frontier_phi_66_pred_5 = _3453;
                }
                _3221 = frontier_phi_66_pred;
                _3231 = frontier_phi_66_pred_1;
                _3229 = frontier_phi_66_pred_2;
                _3227 = frontier_phi_66_pred_3;
                _3225 = frontier_phi_66_pred_4;
                _3223 = frontier_phi_66_pred_5;
                uint _3387 = _3386 + 1u;
                if (_3387 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3380 = _3221;
                    _3381 = _3223;
                    _3382 = _3225;
                    _3383 = _3227;
                    _3384 = _3229;
                    _3385 = _3231;
                    _3386 = _3387;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3220 = _3221;
            _3222 = _3223;
            _3224 = _3225;
            _3226 = _3227;
            _3228 = _3229;
            _3230 = _3231;
        }
        uvec4 _3234 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3235 = _3234.z;
        uint _3237 = (_3235 >> 8u) & 15u;
        float _3348;
        float _3350;
        float _3352;
        float _3354;
        float _3356;
        float _3358;
        if (((4294967295u << _3237) & _3090) == 0u)
        {
            _3348 = _3220;
            _3350 = _3222;
            _3352 = _3224;
            _3354 = _3226;
            _3356 = _3228;
            _3358 = _3230;
        }
        else
        {
            float _3373 = inversesqrt(dot(vec3(_3044, _3045, _3046), vec3(_3044, _3045, _3046)));
            float _3374 = _3373 * _3044;
            float _3375 = _3373 * _3045;
            float _3376 = _3373 * _3046;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_3237 < ((_3235 >> 12u) & 15u))
            {
                float _3349;
                float _3351;
                float _3353;
                float _3355;
                float _3357;
                float _3359;
                float _3508 = _3220;
                float _3509 = _3222;
                float _3510 = _3224;
                float _3511 = _3226;
                float _3512 = _3228;
                float _3513 = _3230;
                uint _3514 = _3237;
                uint _3523;
                bool _3524;
                for (;;)
                {
                    _3523 = texelFetch(g_lightClassification, int((((_3084 << 5u) + (_3070 << 9u)) + (_3514 << 2u)) >> 2u)).x;
                    _3524 = _3523 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3524)
                    {
                        frontier_phi_77_pred = _3513;
                        frontier_phi_77_pred_1 = _3512;
                        frontier_phi_77_pred_2 = _3511;
                        frontier_phi_77_pred_3 = _3510;
                        frontier_phi_77_pred_4 = _3509;
                        frontier_phi_77_pred_5 = _3508;
                    }
                    else
                    {
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _4010;
                        float _4011;
                        float _4012;
                        float _4013;
                        float _4014;
                        float _4015;
                        float _3730 = _3508;
                        float _3731 = _3509;
                        float _3732 = _3510;
                        float _3733 = _3511;
                        float _3734 = _3512;
                        float _3735 = _3513;
                        uint _3736 = _3523;
                        uint _3737;
                        vec4 _3762;
                        float _3763;
                        vec4 _3778;
                        vec3 _3790;
                        vec4 _3805;
                        vec4 _3820;
                        float _3866;
                        bool _3867;
                        for (;;)
                        {
                            uint _3747 = ((_3514 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3736));
                            _3737 = (_3736 + 4294967295u) & _3736;
                            uint _3749 = _3747 * 40u;
                            _3762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3749 + 3u)).x));
                            _3763 = _3762.w;
                            uint _3765 = (_3747 * 40u) + 4u;
                            _3778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3765 + 3u)).x));
                            uint _3780 = (_3747 * 40u) + 8u;
                            _3790 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3780 + 2u)).x));
                            uint _3792 = (_3747 * 40u) + 16u;
                            _3805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3792 + 3u)).x));
                            uint _3807 = (_3747 * 40u) + 20u;
                            _3820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3807 + 3u)).x));
                            uint _3822 = (_3747 * 40u) + 24u;
                            vec4 _3835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3822 + 3u)).x));
                            uint _3841 = (_3747 * 40u) + 28u;
                            vec4 _3854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3841 + 3u)).x));
                            _3866 = fma(_3046, _3854.z, fma(_3045, _3854.y, _3854.x * _3044)) + _3854.w;
                            _3867 = !((fma(_3046, _3835.z, fma(_3045, _3835.y, _3835.x * _3044)) + _3835.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3867)
                            {
                                float _3894 = _3762.x - _3044;
                                float _3895 = _3762.y - _3045;
                                float _3896 = _3762.z - _3046;
                                float _3897 = dot(vec3(_3894, _3895, _3896), vec3(_3894, _3895, _3896));
                                float _3900 = inversesqrt(_3897);
                                float _3901 = _3900 * _3894;
                                float _3902 = _3900 * _3895;
                                float _3903 = _3900 * _3896;
                                float _3907 = 1.0 - (_3897 / (_3763 * _3763));
                                float _5107 = isnan(0.0) ? _3907 : (isnan(_3907) ? 0.0 : max(_3907, 0.0));
                                float _3908 = isnan(1.0) ? _5107 : (isnan(_5107) ? 1.0 : min(_5107, 1.0));
                                float _3912 = sqrt(_3897) * _3778.w;
                                float _3914 = 1.39999997615814208984375 / (_3912 + 1.39999997615814208984375);
                                float _3915 = _3914 * _3914;
                                float _3918 = ((1.0 - _3915) * dot(vec3(_3901, _3902, _3903), vec3(_1247, _1250, _1253))) + _3915;
                                float _3921 = _3912 * _3912;
                                float _3925 = (fma(_3046, _3805.z, fma(_3045, _3805.y, _3805.x * _3044)) + _3805.w) / _3866;
                                float _3926 = (fma(_3046, _3820.z, fma(_3045, _3820.y, _3820.x * _3044)) + _3820.w) / _3866;
                                float _3930 = 1.0 - dot(vec2(_3925, _3926), vec2(_3925, _3926));
                                float _5123 = isnan(0.0) ? _3930 : (isnan(_3930) ? 0.0 : max(_3930, 0.0));
                                float _3931 = isnan(1.0) ? _5123 : (isnan(_5123) ? 1.0 : min(_5123, 1.0));
                                float _3932 = _3931 * (((isnan(0.0) ? _3918 : (isnan(_3918) ? 0.0 : max(_3918, 0.0))) * _3908) / ((_3921 * 0.699999988079071044921875) + 1.0));
                                float _3944 = exp2(log2(1.0 / ((_3921 * 3.5) + 5.0)) * 0.25);
                                float _3945 = 1.0 - _1367;
                                float _3952 = sqrt(1.0 - ((1.0 - (_3945 * _3945)) * (1.0 - (_3944 * _3944))));
                                float _3953 = _3952 * _3952;
                                float _3954 = _3953 * _3953;
                                float _3955 = _3901 - _3374;
                                float _3956 = _3902 - _3375;
                                float _3957 = _3903 - _3376;
                                float _3961 = inversesqrt(dot(vec3(_3955, _3956, _3957), vec3(_3955, _3956, _3957)));
                                float _3965 = dot(vec3(_1247, _1250, _1253), vec3((-0.0) - _3374, (-0.0) - _3375, (-0.0) - _3376));
                                float _5134 = isnan(0.0) ? _3965 : (isnan(_3965) ? 0.0 : max(_3965, 0.0));
                                float _3968 = isnan(1.0) ? _5134 : (isnan(_5134) ? 1.0 : min(_5134, 1.0));
                                float _3969 = dot(vec3(_1247, _1250, _1253), vec3(_3961 * _3955, _3961 * _3956, _3961 * _3957));
                                float _5145 = isnan(0.0) ? _3969 : (isnan(_3969) ? 0.0 : max(_3969, 0.0));
                                float _3972 = isnan(1.0) ? _5145 : (isnan(_5145) ? 1.0 : min(_5145, 1.0));
                                float _3976 = ((_3972 * _3972) * (_3954 + (-1.0))) + 1.0;
                                float _3977 = _3914 * _3953;
                                float _3978 = _3977 * _3977;
                                float _3984 = ((1.0 - _3978) * dot(vec3(_1247, _1250, _1253), vec3(_3901, _3902, _3903))) + _3978;
                                float _5156 = isnan(0.0) ? _3984 : (isnan(_3984) ? 0.0 : max(_3984, 0.0));
                                float _3985 = isnan(1.0) ? _5156 : (isnan(_5156) ? 1.0 : min(_5156, 1.0));
                                float _3986 = 1.0 - _3953;
                                float _3996 = (0.5 / (((_3985 * ((_3968 * _3986) + _3953)) + 9.9999999392252902907785028219223e-09) + (((_3985 * _3986) + _3953) * _3968))) * _3985;
                                float _5167 = isnan(0.0) ? _3996 : (isnan(_3996) ? 0.0 : max(_3996, 0.0));
                                float _4006 = (_3931 * _3908) * (((_3954 * 3.1415927410125732421875) * (isnan(1.0) ? _5167 : (isnan(_5167) ? 1.0 : min(_5167, 1.0)))) / ((_3976 * _3976) * ((_3921 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3932 * _3778.y;
                                frontier_phi_83_pred_1 = _3932 * _3778.x;
                                frontier_phi_83_pred_2 = _4006 * _3790.z;
                                frontier_phi_83_pred_3 = _4006 * _3790.y;
                                frontier_phi_83_pred_4 = _4006 * _3790.x;
                                frontier_phi_83_pred_5 = _3932 * _3778.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _4014 = frontier_phi_83_pred;
                            _4013 = frontier_phi_83_pred_1;
                            _4012 = frontier_phi_83_pred_2;
                            _4011 = frontier_phi_83_pred_3;
                            _4010 = frontier_phi_83_pred_4;
                            _4015 = frontier_phi_83_pred_5;
                            _3720 = _4013 + _3733;
                            _3721 = _4014 + _3734;
                            _3722 = _4015 + _3735;
                            _3717 = _4010 + _3730;
                            _3718 = _4011 + _3731;
                            _3719 = _4012 + _3732;
                            if (_3737 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3730 = _3717;
                                _3731 = _3718;
                                _3732 = _3719;
                                _3733 = _3720;
                                _3734 = _3721;
                                _3735 = _3722;
                                _3736 = _3737;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3722;
                        frontier_phi_77_pred_1 = _3721;
                        frontier_phi_77_pred_2 = _3720;
                        frontier_phi_77_pred_3 = _3719;
                        frontier_phi_77_pred_4 = _3718;
                        frontier_phi_77_pred_5 = _3717;
                    }
                    _3359 = frontier_phi_77_pred;
                    _3357 = frontier_phi_77_pred_1;
                    _3355 = frontier_phi_77_pred_2;
                    _3353 = frontier_phi_77_pred_3;
                    _3351 = frontier_phi_77_pred_4;
                    _3349 = frontier_phi_77_pred_5;
                    uint _3515 = _3514 + 1u;
                    if (_3515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3508 = _3349;
                        _3509 = _3351;
                        _3510 = _3353;
                        _3511 = _3355;
                        _3512 = _3357;
                        _3513 = _3359;
                        _3514 = _3515;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3353;
                frontier_phi_58_59_ladder_1 = _3359;
                frontier_phi_58_59_ladder_2 = _3357;
                frontier_phi_58_59_ladder_3 = _3355;
                frontier_phi_58_59_ladder_4 = _3351;
                frontier_phi_58_59_ladder_5 = _3349;
            }
            else
            {
                frontier_phi_58_59_ladder = _3224;
                frontier_phi_58_59_ladder_1 = _3230;
                frontier_phi_58_59_ladder_2 = _3228;
                frontier_phi_58_59_ladder_3 = _3226;
                frontier_phi_58_59_ladder_4 = _3222;
                frontier_phi_58_59_ladder_5 = _3220;
            }
            _3348 = frontier_phi_58_59_ladder_5;
            _3350 = frontier_phi_58_59_ladder_4;
            _3352 = frontier_phi_58_59_ladder;
            _3354 = frontier_phi_58_59_ladder_3;
            _3356 = frontier_phi_58_59_ladder_2;
            _3358 = frontier_phi_58_59_ladder_1;
        }
        float _3363 = isnan(1.0) ? _1351 : (isnan(_1351) ? 1.0 : min(_1351, 1.0));
        _3103 = (_3363 * _3354) + _2539;
        _3105 = (_3363 * _3356) + _2541;
        _3107 = (_3363 * _3358) + _2543;
        _3109 = ((_3348 * _1336) * _3363) + _2884;
        _3111 = ((_3350 * _1338) * _3363) + _2886;
        _3113 = ((_3352 * _1339) * _3363) + _2888;
    }
    else
    {
        _3103 = _2539;
        _3105 = _2541;
        _3107 = _2543;
        _3109 = _2884;
        _3111 = _2886;
        _3113 = _2888;
    }
    uint _3119 = _1280 + uint(cbMatDynParam._m0[0u].w);
    float _3125 = (((((cbMtdParam._m0[22u].x * _1048.x) * cbMtdParam._m0[32u].x) * _1071) + _824) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3119].x;
    float _3126 = (((((cbMtdParam._m0[22u].y * _1048.y) * cbMtdParam._m0[32u].x) * _1071) + _825) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3119].y;
    float _3127 = (((((cbMtdParam._m0[22u].z * _1048.z) * cbMtdParam._m0[32u].x) * _1071) + _826) * cbSceneParam._m0[72u].y) * cbInstanceData._m0[_3119].z;
    float _5183 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
    float _5194 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
    float _5205 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
    float _3144 = (((isnan(1.0) ? _5183 : (isnan(_5183) ? 1.0 : min(_5183, 1.0))) * (_3103 + ((isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0))) * _1351))) + ((_3109 + ((isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0))) * _2179)) * cbPerFrame._m0[3u].x)) + _3125;
    float _3146 = (_3126 + ((_3111 + ((isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0))) * _2179)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5194 : (isnan(_5194) ? 1.0 : min(_5194, 1.0))) * (_3105 + ((isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0))) * _1351)));
    float _3148 = (_3127 + ((_3113 + ((isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0))) * _2179)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _5205 : (isnan(_5205) ? 1.0 : min(_5205, 1.0))) * (_3107 + ((isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))) * _1351)));
    float _3149 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
    float _3150 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
    float _3151 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
    float _3157 = cbMtdParam._m0[2u].x * _3125;
    float _3158 = cbMtdParam._m0[2u].y * _3126;
    float _3159 = cbMtdParam._m0[2u].z * _3127;
    float _5231 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _3161 = isnan(1.0) ? _5231 : (isnan(_5231) ? 1.0 : min(_5231, 1.0));
    uint _3162 = _1279 + 6u;
    float _3170 = _1224 / cbSceneParam._m0[86u].x;
    float _3171 = _1225 / cbSceneParam._m0[86u].y;
    vec4 _3185 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3170, _3171, (log2((isnan(cbSceneParam._m0[77u].w) ? _1167 : (isnan(_1167) ? cbSceneParam._m0[77u].w : min(_1167, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3187 = _3185.x;
    float _3188 = _3185.y;
    float _3189 = _3185.z;
    float _3190 = _3185.w;
    float _3282;
    float _3284;
    float _3286;
    float _3288;
    if (_1167 > cbSceneParam._m0[78u].w)
    {
        float _3245 = isnan(_1167) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1167 : min(cbSceneParam._m0[80u].w, _1167));
        float _3246 = _3245 / _1167;
        float _3257 = _3246 * _1197;
        float _3258 = _1198 * _3246;
        float _3259 = (-0.0) - _3258;
        float _3260 = _3246 * _1199;
        float _3262 = (cbSceneParam._m0[77u].w * _3259) / _3245;
        float _3263 = _3262 + cbSceneParam._m0[79u].w;
        float _3264 = cbSceneParam._m0[79u].w - _3258;
        float _3270 = sqrt(((_3257 * _3257) + (_3258 * _3258)) + (_3260 * _3260));
        float _3273 = (1.0 - (cbSceneParam._m0[77u].w / _3245)) * _3270;
        float _3278 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3280 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3465;
        if (abs((_3259 - _3262) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3465 = ((((_3263 > 0.0) ? exp2(_3278 * _3263) : (2.0 - exp2(_3280 * _3263))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3273;
        }
        else
        {
            float _3409 = 1.0 / cbSceneParam._m0[80u].x;
            float _3410 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : max(_3263, _3264));
            float _3411 = isnan(_3264) ? _3263 : (isnan(_3263) ? _3264 : min(_3263, _3264));
            float _3420 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : min(_3410, 0.0));
            float _3421 = isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : min(_3411, 0.0));
            _3465 = ((abs(_3270 / _3259) * cbSceneParam._m0[80u].y) * ((((_3420 - _3421) * 2.0) - ((exp2(_3278 * (isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0)))) - exp2(_3278 * (isnan(0.0) ? _3411 : (isnan(_3411) ? 0.0 : max(_3411, 0.0))))) * _3409)) - ((exp2(_3280 * _3420) - exp2(_3280 * _3421)) * _3409))) + (_3273 * cbSceneParam._m0[80u].z);
        }
        vec4 _3467 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3170, _3171, 1.0), 0.0);
        float _3476 = exp2((_3465 * (-1.44269502162933349609375)) * (1.0 - _3467.w));
        float _3477 = log2(_3476);
        float _3493 = log2(_3190);
        _3282 = (exp2(_3493 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].x)) * _3467.x) / cbSceneParam._m0[78u].x)) + _3187;
        _3284 = (exp2(_3493 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].y)) * _3467.y) / cbSceneParam._m0[78u].y)) + _3188;
        _3286 = (exp2(_3493 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3477 * cbSceneParam._m0[78u].z)) * _3467.z) / cbSceneParam._m0[78u].z)) + _3189;
        _3288 = _3476 * _3190;
    }
    else
    {
        _3282 = _3187;
        _3284 = _3188;
        _3286 = _3189;
        _3288 = _3190;
    }
    bool _3503;
    vec4 _3297;
    vec4 _3319;
    float _3321;
    float _3325;
    float _3326;
    float _3327;
    float _3330;
    float _3333;
    float _3336;
    float _3337;
    bool _3347;
    for (;;)
    {
        _3297 = cbMatDynParam._m0[0u];
        float _3299 = roundEven(_3297.y);
        bool _3300 = _3299 == 3.0;
        float _3301 = log2(_3288);
        float _3305 = exp2(_3301 * cbSceneParam._m0[78u].x);
        float _3306 = exp2(_3301 * cbSceneParam._m0[78u].y);
        float _3307 = exp2(_3301 * cbSceneParam._m0[78u].z);
        float _3308 = _3305 * _3149;
        float _3309 = _3306 * _3150;
        float _3310 = _3307 * _3151;
        float _3317 = _1213 + (-0.5);
        _3319 = cbMtdParam._m0[1u];
        _3321 = _3319.y * _3317;
        float _3324 = (_3299 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3325 = _3324 * (_3300 ? _3308 : (_3308 + (cbSceneParam._m0[72u].w * _3282)));
        _3326 = _3324 * (_3300 ? _3309 : (_3309 + (cbSceneParam._m0[72u].w * _3284)));
        _3327 = _3324 * (_3300 ? _3310 : (_3310 + (cbSceneParam._m0[72u].w * _3286)));
        _3330 = ((_3157 * _3161) * _3305) * _3324;
        _3333 = ((_3158 * _3161) * _3306) * _3324;
        _3336 = ((_3159 * _3161) * _3307) * _3324;
        _3337 = _3317 * 0.999000012874603271484375;
        _3347 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3347)
        {
            if ((cbInstanceData._m0[_1279 + 7u].x + _3337) < 0.5)
            {
                _3503 = true;
                break;
            }
        }
        uint _3444 = _1280 + uint(_3297.w);
        if ((cbInstanceData._m0[_3444].w < 1.0) && ((cbInstanceData._m0[_3444].w + _3337) < 0.5))
        {
            _3503 = true;
            break;
        }
        if ((_3321 + 1.0) < _3319.x)
        {
            _3503 = true;
            break;
        }
        _3503 = false;
        break;
    }
    float _3708;
    if (_3503)
    {
        discard_state = true;
        _3708 = 0.0;
    }
    else
    {
        _3708 = cbInstanceData._m0[_3162].w;
    }
    SV_Target.x = _3325;
    SV_Target.y = _3326;
    SV_Target.z = _3327;
    SV_Target.w = _3708;
    SV_Target_1.x = _3330;
    SV_Target_1.y = _3333;
    SV_Target_1.z = _3336;
    SV_Target_1.w = cbInstanceData._m0[_3162].w;
    discard_exit();
}


