#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _820;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _246 = _242.z;
    float _250 = (_242.x * 2.0) + (-1.0);
    float _252 = (_242.y * 2.0) + (-1.0);
    float _253 = dot(vec2(_250, _252), vec2(_250, _252));
    float _3389 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _259 = sqrt(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))));
    vec4 _271 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _278 = cbMtdParam._m0[10u].x * _271.x;
    float _281 = fma(_259, _192 * NORMAL.x, fma(_252, _199 * TANGENT.x, (_185 * _178) * _250));
    float _284 = fma(_259, _192 * NORMAL.y, fma(_252, _199 * TANGENT.y, (_185 * _179) * _250));
    float _287 = fma(_259, _192 * NORMAL.z, fma(_252, _199 * TANGENT.z, (_185 * _180) * _250));
    float _291 = inversesqrt(dot(vec3(_281, _284, _287), vec3(_281, _284, _287)));
    float _292 = _291 * _281;
    float _293 = _291 * _284;
    float _294 = _291 * _287;
    float _3400 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _295 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _296 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _3416 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3427 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3438 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _315 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _356 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _366 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _356);
    float _367 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _356);
    float _368 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _356);
    float _372 = inversesqrt(dot(vec3(_366, _367, _368), vec3(_366, _367, _368)));
    float _373 = _366 * _372;
    float _374 = _367 * _372;
    float _375 = _368 * _372;
    float _381 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _382 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _403 = fma(_294, cbSceneParam._m0[5u].z, fma(_293, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _292));
    float _406 = fma(_294, cbSceneParam._m0[6u].z, fma(_293, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _292));
    float _409 = fma(_294, cbSceneParam._m0[7u].z, fma(_293, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _292));
    uint _422 = uint(roundEven(NORMAL.w)) * 13u;
    uint _425 = (_422 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _431 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0)))) * cbInstanceData._m0[_425].x;
    float _432 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0)))) * cbInstanceData._m0[_425].y;
    float _433 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0)))) * cbInstanceData._m0[_425].z;
    float _3449 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _3460 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _435 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _3471 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    vec4 _445 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _381, cbSceneParam._m0[86u].y * _382));
    float _448 = _445.x * TEXCOORD.z;
    float _449 = dot(vec3(_292, _293, _294), vec3(_373, _374, _375));
    float _452 = _449 * 2.0;
    float _456 = (_452 * _292) - _373;
    float _457 = (_452 * _293) - _374;
    float _458 = (_452 * _294) - _375;
    float _459 = dot(vec3(_373, _374, _375), vec3(_292, _293, _294));
    float _462 = abs(_459);
    float _3482 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _464 = sqrt(_295);
    float _477 = exp2((_464 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_464 * 3.0));
    float _509 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _513 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _517 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _819;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _544 = fma(_517, cbModelParam._m0[26u].z, fma(_513, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _509));
        float _548 = fma(_517, cbModelParam._m0[27u].z, fma(_513, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _509));
        float _552 = fma(_517, cbModelParam._m0[28u].z, fma(_513, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _509));
        float _577 = _509 + _292;
        float _578 = _513 + _293;
        float _579 = _517 + _294;
        float _589 = fma(_579, cbModelParam._m0[26u].z, fma(_578, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _577)) - _544;
        float _590 = fma(_579, cbModelParam._m0[27u].z, fma(_578, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _577)) - _548;
        float _591 = fma(_579, cbModelParam._m0[28u].z, fma(_578, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _577)) - _552;
        float _595 = inversesqrt(dot(vec3(_589, _590, _591), vec3(_589, _590, _591)));
        float _608 = ((_595 * _589) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_544 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _609 = ((_595 * _590) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_548 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _610 = ((_595 * _591) / cbModelParam._m0[34u].z) + ((((((_552 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_608, _609, _610), 0.0);
        vec4 _620 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_608, _609, _610), 0.0);
        vec4 _627 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_608, _609, _610), 0.0);
        vec4 _634 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_608, _609, _610), 0.0);
        float _647 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _648 = _647 * (_613.x + (-0.5));
        float _649 = _647 * (_613.y + (-0.5));
        float _650 = _647 * (_613.z + (-0.5));
        float _657 = exp2((_620.w + (-0.5)) * 20.0) * 2.0;
        float _658 = _657 * (_620.x + (-0.5));
        float _659 = _657 * (_620.y + (-0.5));
        float _660 = _657 * (_620.z + (-0.5));
        float _667 = exp2((_627.w + (-0.5)) * 20.0) * 2.0;
        float _668 = _667 * (_627.x + (-0.5));
        float _669 = _667 * (_627.y + (-0.5));
        float _670 = _667 * (_627.z + (-0.5));
        float _677 = exp2((_634.w + (-0.5)) * 20.0) * 2.0;
        float _678 = _677 * (_634.x + (-0.5));
        float _679 = _677 * (_634.y + (-0.5));
        float _680 = _677 * (_634.z + (-0.5));
        float _681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _682 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = _648 * 0.5;
        float _685 = _658 * 0.5;
        float _686 = _668 * 0.5;
        float _687 = dot(vec3(_684, _685, _686), vec3(_684, _685, _686));
        float _692 = (_687 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_687);
        float _701 = (dot(vec3(_292, _293, _294), vec3(_692 * _684, _692 * _685, _692 * _686)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
        float _711 = sqrt(((_685 * _685) + (_684 * _684)) + (_686 * _686)) / (_681 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _712 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _713 = _712 * 2.0;
        float _717 = (1.0 - _712) / (_712 + 1.0);
        float _3530 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _718 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _727 = ((((1.0 - _718) * (_713 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_713 + 1.0))) + _718) * _681;
        float _728 = _649 * 0.5;
        float _729 = _659 * 0.5;
        float _730 = _669 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _744 = (dot(vec3(_292, _293, _294), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _3541 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _753 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_682 + 9.9999997473787516355514526367188e-06);
        float _3552 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _754 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
        float _755 = _754 * 2.0;
        float _759 = (1.0 - _754) / (_754 + 1.0);
        float _3563 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
        float _769 = ((((1.0 - _760) * (_755 + 2.0)) * exp2(log2(isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (_755 + 1.0))) + _760) * _682;
        float _770 = _650 * 0.5;
        float _771 = _660 * 0.5;
        float _772 = _670 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _786 = (dot(vec3(_292, _293, _294), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3574 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _795 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3585 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _796 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
        float _797 = _796 * 2.0;
        float _801 = (1.0 - _796) / (_796 + 1.0);
        float _3596 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _811 = ((((1.0 - _802) * (_797 + 2.0)) * exp2(log2(isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))) * (_797 + 1.0))) + _802) * _683;
        _819 = _650;
        _821 = _649;
        _822 = _648;
        _823 = _660;
        _824 = _659;
        _825 = _658;
        _826 = _670;
        _827 = _669;
        _828 = _668;
        _829 = _683;
        _830 = _682;
        _831 = _681;
        _832 = cbModelParam._m0[36u].z * (isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0)));
        _833 = cbModelParam._m0[36u].z * (isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0)));
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0)));
    }
    else
    {
        _819 = _820;
        _821 = _820;
        _822 = _820;
        _823 = _820;
        _824 = _820;
        _825 = _820;
        _826 = _820;
        _827 = _820;
        _828 = _820;
        _829 = _820;
        _830 = _820;
        _831 = _820;
        _832 = 0.0;
        _833 = 0.0;
        _834 = 0.0;
    }
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _860 = fma(_517, cbModelParam._m0[30u].z, fma(_513, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _509));
        float _864 = fma(_517, cbModelParam._m0[31u].z, fma(_513, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _509));
        float _868 = fma(_517, cbModelParam._m0[32u].z, fma(_513, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _509));
        float _891 = _509 + _292;
        float _892 = _513 + _293;
        float _893 = _517 + _294;
        float _903 = fma(_893, cbModelParam._m0[30u].z, fma(_892, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _891)) - _860;
        float _904 = fma(_893, cbModelParam._m0[31u].z, fma(_892, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _891)) - _864;
        float _905 = fma(_893, cbModelParam._m0[32u].z, fma(_892, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _891)) - _868;
        float _909 = inversesqrt(dot(vec3(_903, _904, _905), vec3(_903, _904, _905)));
        float _922 = ((_909 * _903) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_860 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _923 = ((_909 * _904) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_864 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_909 * _905) / cbModelParam._m0[35u].z) + ((((((_868 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_922, _923, _924), 0.0);
        float _959 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_926.x + (-0.5));
        float _961 = _959 * (_926.y + (-0.5));
        float _962 = _959 * (_926.z + (-0.5));
        float _969 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_933.x + (-0.5));
        float _971 = _969 * (_933.y + (-0.5));
        float _972 = _969 * (_933.z + (-0.5));
        float _979 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_940.x + (-0.5));
        float _981 = _979 * (_940.y + (-0.5));
        float _982 = _979 * (_940.z + (-0.5));
        float _989 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_947.x + (-0.5));
        float _991 = _989 * (_947.y + (-0.5));
        float _992 = _989 * (_947.z + (-0.5));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = _960 * 0.5;
        float _997 = _970 * 0.5;
        float _998 = _980 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_292, _293, _294), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3659 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1023 + 1.0))) + _1028) * _993;
        float _1038 = _961 * 0.5;
        float _1039 = _971 * 0.5;
        float _1040 = _981 * 0.5;
        float _1041 = dot(vec3(_1038, _1039, _1040), vec3(_1038, _1039, _1040));
        float _1046 = (_1041 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1041);
        float _1054 = (dot(vec3(_292, _293, _294), vec3(_1046 * _1038, _1046 * _1039, _1046 * _1040)) + 1.0) * 0.5;
        float _3670 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1063 = sqrt(((_1039 * _1039) + (_1038 * _1038)) + (_1040 * _1040)) / (_994 + 9.9999997473787516355514526367188e-06);
        float _3681 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1065 = _1064 * 2.0;
        float _1069 = (1.0 - _1064) / (_1064 + 1.0);
        float _3692 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1079 = ((((1.0 - _1070) * (_1065 + 2.0)) * exp2(log2(isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1065 + 1.0))) + _1070) * _994;
        float _1080 = _962 * 0.5;
        float _1081 = _972 * 0.5;
        float _1082 = _982 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_292, _293, _294), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3725 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1107 + 1.0))) + _1112) * _995;
        _1129 = _962;
        _1130 = _961;
        _1131 = _960;
        _1132 = _972;
        _1133 = _971;
        _1134 = _970;
        _1135 = _982;
        _1136 = _981;
        _1137 = _980;
        _1138 = _995;
        _1139 = _994;
        _1140 = _993;
        _1141 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
        _1142 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0)));
        _1143 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
    }
    else
    {
        _1129 = _820;
        _1130 = _820;
        _1131 = _820;
        _1132 = _820;
        _1133 = _820;
        _1134 = _820;
        _1135 = _820;
        _1136 = _820;
        _1137 = _820;
        _1138 = _820;
        _1139 = _820;
        _1140 = _820;
        _1141 = 0.0;
        _1142 = 0.0;
        _1143 = 0.0;
    }
    float _1153 = (cbModelParam._m0[1u].x * (_1141 - _832)) + _832;
    float _1154 = (cbModelParam._m0[1u].x * (_1142 - _833)) + _833;
    float _1155 = (cbModelParam._m0[1u].x * (_1143 - _834)) + _834;
    float _1176 = fma(_1155, cbSceneParam._m0[89u].z, fma(_1154, cbSceneParam._m0[89u].y, _1153 * cbSceneParam._m0[89u].x));
    float _1179 = fma(_1155, cbSceneParam._m0[90u].z, fma(_1154, cbSceneParam._m0[90u].y, _1153 * cbSceneParam._m0[90u].x));
    float _1182 = fma(_1155, cbSceneParam._m0[91u].z, fma(_1154, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1153));
    float _1197 = _456 * 0.5;
    float _1198 = _457 * 0.5;
    float _1199 = _458 * 0.5;
    float _1200 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_1131, _1134, _1137, _1140));
    float _1203 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_1130, _1133, _1136, _1139));
    float _1206 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_1129, _1132, _1135, _1138));
    float _1240;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1213 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_819, _823, _826, _829));
        float _1217 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_821, _824, _827, _830));
        float _1221 = dot(vec4(_1197, _1198, _1199, 1.0), vec4(_822, _825, _828, _831));
        float _1228 = dot(vec4(cbModelParam._m0[39u]), vec4(_1197, _1198, _1199, 1.0));
        _1240 = dot(vec3(isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)), isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)), isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1228) ? 0.0 : (isnan(0.0) ? _1228 : max(0.0, _1228))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1240 = 1.0;
    }
    float _1251;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1242 = dot(vec4(cbModelParam._m0[40u]), vec4(_1197, _1198, _1199, 1.0));
        _1251 = dot(vec3(isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0)), isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1242) ? 0.0 : (isnan(0.0) ? _1242 : max(0.0, _1242))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1251 = 1.0;
    }
    float _1255 = (_1251 * cbModelParam._m0[1u].x) + (_1240 * (1.0 - cbModelParam._m0[1u].x));
    float _1265 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _295);
    float _1266 = isnan(_1265) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1265 : min(cbModelParam._m0[25u].z, _1265));
    float _1348;
    float _1350;
    float _1352;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1315 = fma(_517, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _509)) + cbModelParam._m0[13u].w;
        float _1319 = fma(_517, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _509)) + cbModelParam._m0[14u].w;
        float _1323 = fma(_517, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _509)) + cbModelParam._m0[15u].w;
        float _1326 = fma(_458, cbModelParam._m0[13u].z, fma(_457, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _456));
        float _1329 = fma(_458, cbModelParam._m0[14u].z, fma(_457, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _456));
        float _1332 = fma(_458, cbModelParam._m0[15u].z, fma(_457, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _456));
        float _1360;
        if (_1326 > 0.0)
        {
            _1360 = abs((1.0 - _1315) / _1326);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1326 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1315 + 1.0) / _1326);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1360 = frontier_phi_14_12_ladder;
        }
        float _1561;
        if (_1329 > 0.0)
        {
            _1561 = abs((1.0 - _1319) / _1329);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1329 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1319 + 1.0) / _1329);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1561 = frontier_phi_23_19_ladder;
        }
        float _1635;
        if (_1332 > 0.0)
        {
            _1635 = abs((1.0 - _1323) / _1332);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1332 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1323 + 1.0) / _1332);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1635 = frontier_phi_34_30_ladder;
        }
        float _1637 = isnan(_1561) ? _1360 : (isnan(_1360) ? _1561 : min(_1360, _1561));
        float _1638 = isnan(_1635) ? _1637 : (isnan(_1637) ? _1635 : min(_1637, _1635));
        float _1642 = (_1638 * _1326) + _1315;
        float _1643 = (_1638 * _1329) + _1319;
        float _1644 = (_1638 * _1332) + _1323;
        float _1645 = _1638 * 9.9999997473787516355514526367188e-05;
        float _1647 = (-1.0) - _1645;
        float _1649 = _1645 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1644 > _1649) || ((_1644 < _1647) || ((_1643 > _1649) || ((_1643 < _1647) || ((_1642 < _1647) || (_1642 > _1649))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1720 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1644, cbModelParam._m0[9u].z, fma(_1643, cbModelParam._m0[9u].y, _1642 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1644, cbModelParam._m0[10u].z, fma(_1643, cbModelParam._m0[10u].y, _1642 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1644, cbModelParam._m0[11u].z, fma(_1643, cbModelParam._m0[11u].y, _1642 * cbModelParam._m0[11u].x))), _1266);
            frontier_phi_13_34_ladder = _1720.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _1720.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _1720.x * cbModelParam._m0[1u].y;
        }
        _1348 = frontier_phi_13_34_ladder_2;
        _1350 = frontier_phi_13_34_ladder_1;
        _1352 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1336 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_456, _457, _458), _1266);
        _1348 = _1336.x * cbModelParam._m0[1u].y;
        _1350 = _1336.y * cbModelParam._m0[1u].y;
        _1352 = _1336.z * cbModelParam._m0[1u].y;
    }
    float _1356 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _295);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1356 : min(cbModelParam._m0[25u].w, _1356));
    float _1450;
    float _1452;
    float _1454;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1414 = fma(_517, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _509)) + cbModelParam._m0[21u].w;
        float _1418 = fma(_517, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _509)) + cbModelParam._m0[22u].w;
        float _1422 = fma(_517, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _509)) + cbModelParam._m0[23u].w;
        float _1425 = fma(_458, cbModelParam._m0[21u].z, fma(_457, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _456));
        float _1428 = fma(_458, cbModelParam._m0[22u].z, fma(_457, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _456));
        float _1431 = fma(_458, cbModelParam._m0[23u].z, fma(_457, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _456));
        float _1566;
        if (_1425 > 0.0)
        {
            _1566 = abs((1.0 - _1414) / _1425);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1414 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1566 = frontier_phi_25_21_ladder;
        }
        float _1662;
        if (_1428 > 0.0)
        {
            _1662 = abs((1.0 - _1418) / _1428);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1428 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1418 + 1.0) / _1428);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1662 = frontier_phi_36_32_ladder;
        }
        float _1933;
        if (_1431 > 0.0)
        {
            _1933 = abs((1.0 - _1422) / _1431);
        }
        else
        {
            float frontier_phi_45_42_ladder;
            if (_1431 < 0.0)
            {
                frontier_phi_45_42_ladder = abs((_1422 + 1.0) / _1431);
            }
            else
            {
                frontier_phi_45_42_ladder = 5000.0;
            }
            _1933 = frontier_phi_45_42_ladder;
        }
        float _1935 = isnan(_1662) ? _1566 : (isnan(_1566) ? _1662 : min(_1566, _1662));
        float _1936 = isnan(_1933) ? _1935 : (isnan(_1935) ? _1933 : min(_1935, _1933));
        float _1940 = (_1936 * _1425) + _1414;
        float _1941 = (_1936 * _1428) + _1418;
        float _1942 = (_1936 * _1431) + _1422;
        float _1943 = _1936 * 9.9999997473787516355514526367188e-05;
        float _1944 = (-1.0) - _1943;
        float _1946 = _1943 + 1.0;
        float frontier_phi_22_45_ladder;
        float frontier_phi_22_45_ladder_1;
        float frontier_phi_22_45_ladder_2;
        if ((_1942 > _1946) || ((_1942 < _1944) || ((_1941 > _1946) || ((_1941 < _1944) || ((_1940 < _1944) || (_1940 > _1946))))))
        {
            frontier_phi_22_45_ladder = 0.0;
            frontier_phi_22_45_ladder_1 = 0.0;
            frontier_phi_22_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2060 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1942, cbModelParam._m0[17u].z, fma(_1941, cbModelParam._m0[17u].y, _1940 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1942, cbModelParam._m0[18u].z, fma(_1941, cbModelParam._m0[18u].y, _1940 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1942, cbModelParam._m0[19u].z, fma(_1941, cbModelParam._m0[19u].y, _1940 * cbModelParam._m0[19u].x))), _1357);
            frontier_phi_22_45_ladder = _2060.z * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_1 = _2060.y * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_2 = _2060.x * cbModelParam._m0[1u].z;
        }
        _1450 = frontier_phi_22_45_ladder_2;
        _1452 = frontier_phi_22_45_ladder_1;
        _1454 = frontier_phi_22_45_ladder;
    }
    else
    {
        vec4 _1434 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_456, _457, _458), _1357);
        _1450 = _1434.x * cbModelParam._m0[1u].z;
        _1452 = _1434.y * cbModelParam._m0[1u].z;
        _1454 = _1434.z * cbModelParam._m0[1u].z;
    }
    float _1466 = ((((1.0 - _477) * ((_464 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_477 * _464)) * _448;
    float _1467 = _1466 * ((cbModelParam._m0[1u].w * (_1450 - _1348)) + _1348);
    float _1468 = _1466 * ((cbModelParam._m0[1u].w * (_1452 - _1350)) + _1350);
    float _1469 = _1466 * ((cbModelParam._m0[1u].w * (_1454 - _1352)) + _1352);
    float _1472 = fma(_1469, cbSceneParam._m0[89u].z, fma(_1468, cbSceneParam._m0[89u].y, _1467 * cbSceneParam._m0[89u].x));
    float _1475 = fma(_1469, cbSceneParam._m0[90u].z, fma(_1468, cbSceneParam._m0[90u].y, _1467 * cbSceneParam._m0[90u].x));
    float _1478 = fma(_1469, cbSceneParam._m0[91u].z, fma(_1468, cbSceneParam._m0[91u].y, _1467 * cbSceneParam._m0[91u].x));
    vec4 _1486 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_381, _382));
    float _1488 = _1486.w;
    float _1500 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1488);
    float _1501 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1488);
    float _1502 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1488);
    uvec4 _1506 = floatBitsToUint(cbInstanceData._m0[_422 + 5u]);
    uint _1508 = _1506.x * 14u;
    uint _1509 = _1508 + 13u;
    float _1516 = _448 + (-1.0);
    float _1521 = (cbLight._m0[_1509].x * _1516) + 1.0;
    float _1522 = (cbLight._m0[_1509].y * _1516) + 1.0;
    float _1523 = (cbLight._m0[_1509].z * _1516) + 1.0;
    float _1524 = (cbLight._m0[_1509].w * _1516) + 1.0;
    uint _1526 = _1508 + 4u;
    float _1538 = dot(vec3(cbLight._m0[_1508].xyz), vec3(_292, _293, _294));
    float _1541 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
    float _1542 = cbLight._m0[_1526].x * _1500;
    float _1543 = cbLight._m0[_1526].y * _1501;
    float _1544 = cbLight._m0[_1526].z * _1502;
    uint _1545 = _1508 + 5u;
    float _1557 = dot(vec3(cbLight._m0[_1508 | 1u].xyz), vec3(_292, _293, _294));
    float _1560 = isnan(1.0) ? _1522 : (isnan(_1522) ? 1.0 : min(_1522, 1.0));
    float _1625;
    float _1626;
    float _1627;
    if (_296 == 0.0)
    {
        float _3861 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _3872 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1579 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * 0.3183098733425140380859375;
        float _1581 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.3183098733425140380859375;
        _1625 = ((cbLight._m0[_1545].x * _1560) * _1581) + ((_1542 * _1541) * _1579);
        _1626 = ((_1560 * cbLight._m0[_1545].y) * _1581) + ((_1543 * _1541) * _1579);
        _1627 = ((_1560 * cbLight._m0[_1545].z) * _1581) + ((_1544 * _1541) * _1579);
    }
    else
    {
        float _1591 = _1538 + _296;
        float _1594 = (_296 * 2.0) + 1.0;
        float _1595 = (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0))) / _1594;
        float _1602 = _1557 + _296;
        float _1604 = (isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))) / _1594;
        _1625 = (((_1604 * cbLight._m0[_1545].x) * _1560) + ((_1542 * _1595) * _1541)) * 0.3183098733425140380859375;
        _1626 = (((_1604 * cbLight._m0[_1545].y) * _1560) + ((_1543 * _1595) * _1541)) * 0.3183098733425140380859375;
        _1627 = (((_1604 * cbLight._m0[_1545].z) * _1560) + ((_1544 * _1595) * _1541)) * 0.3183098733425140380859375;
    }
    uvec4 _1632 = floatBitsToUint(cbLight._m0[_1508 + 12u]);
    bool _1634 = _1632.x == 0u;
    float _1667;
    float _1669;
    float _1671;
    if (_1634)
    {
        _1667 = _1625;
        _1669 = _1626;
        _1671 = _1627;
    }
    else
    {
        uint _1675 = _1508 + 6u;
        float _1691 = (dot(vec3(cbLight._m0[_1508 + 2u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1692 = _1691 * _1691;
        float _3893 = isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0));
        float _1693 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1694 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
        _1667 = (((cbLight._m0[_1675].x * 0.3183098733425140380859375) * _1693) * _1694) + _1625;
        _1669 = (((cbLight._m0[_1675].y * 0.3183098733425140380859375) * _1693) * _1694) + _1626;
        _1671 = (((cbLight._m0[_1675].z * 0.3183098733425140380859375) * _1693) * _1694) + _1627;
    }
    bool _1674 = _1632.y == 0u;
    float _1729;
    float _1731;
    float _1733;
    if (_1674)
    {
        _1729 = _1667;
        _1731 = _1669;
        _1733 = _1671;
    }
    else
    {
        uint _1904 = _1508 + 7u;
        float _1920 = (dot(vec3(cbLight._m0[_1508 + 3u].xyz), vec3(_292, _293, _294)) * 0.5) + 0.5;
        float _1921 = _1920 * _1920;
        float _3909 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1922 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1923 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
        _1729 = (((cbLight._m0[_1904].x * 0.3183098733425140380859375) * _1922) * _1923) + _1667;
        _1731 = (((cbLight._m0[_1904].y * 0.3183098733425140380859375) * _1922) * _1923) + _1669;
        _1733 = (((cbLight._m0[_1904].z * 0.3183098733425140380859375) * _1922) * _1923) + _1671;
    }
    uint _1738 = _1508 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1508].w)) * _295) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1508].x + _373;
    float _1757 = cbLight._m0[_1508].y + _374;
    float _1758 = cbLight._m0[_1508].z + _375;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1508].xyz));
    float _3925 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _3936 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _1770 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _1771 = dot(vec3(_292, _293, _294), vec3(_1763, _1764, _1765));
    float _3947 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1508].xyz), vec3(_1763, _1764, _1765));
    float _3958 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1794 = (exp2(log2(1.0 - (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1795 = 1.0 - _1755;
    float _1806 = (0.5 / (((_1770 * ((_1769 * _1795) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1795) + _1755) * _1769))) * _1769;
    float _3969 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1808 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    float _1809 = isnan(1.0) ? _1521 : (isnan(_1521) ? 1.0 : min(_1521, 1.0));
    uint _1822 = _1508 | 1u;
    uint _1826 = _1508 + 9u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1822].w)) * _295) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1822].x + _373;
    float _1843 = cbLight._m0[_1822].y + _374;
    float _1844 = cbLight._m0[_1822].z + _375;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1822].xyz));
    float _3985 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1856 = dot(vec3(_292, _293, _294), vec3(_1849, _1850, _1851));
    float _3996 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_1849, _1850, _1851));
    float _4007 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1841 * _1841;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1877 = (exp2(log2(1.0 - (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1878 = 1.0 - _1841;
    float _1888 = (0.5 / (((_1770 * ((_1855 * _1878) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1878) + _1841) * _1855))) * _1855;
    float _4018 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1890 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    float _1891 = isnan(1.0) ? _1522 : (isnan(_1522) ? 1.0 : min(_1522, 1.0));
    float _1901 = (((_1877 * cbLight._m0[_1826].x) * _1890) * _1891) + ((((cbLight._m0[_1738].x * _1500) * _1794) * _1808) * _1809);
    float _1902 = (((_1877 * cbLight._m0[_1826].y) * _1890) * _1891) + ((((cbLight._m0[_1738].y * _1501) * _1794) * _1808) * _1809);
    float _1903 = (((_1877 * cbLight._m0[_1826].z) * _1890) * _1891) + ((((cbLight._m0[_1738].z * _1502) * _1794) * _1808) * _1809);
    float _1959;
    float _1961;
    float _1963;
    if (_1634)
    {
        _1959 = _1901;
        _1961 = _1902;
        _1963 = _1903;
    }
    else
    {
        uint _1965 = _1508 + 2u;
        uint _1969 = _1508 + 10u;
        float _1983 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _295) * 0.949999988079071044921875);
        float _1984 = _1983 * _1983;
        float _1985 = cbLight._m0[_1965].x + _373;
        float _1986 = cbLight._m0[_1965].y + _374;
        float _1987 = cbLight._m0[_1965].z + _375;
        float _1991 = inversesqrt(dot(vec3(_1985, _1986, _1987), vec3(_1985, _1986, _1987)));
        float _1992 = _1991 * _1985;
        float _1993 = _1991 * _1986;
        float _1994 = _1991 * _1987;
        float _1995 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_1965].xyz));
        float _4034 = isnan(0.0) ? _1995 : (isnan(_1995) ? 0.0 : max(_1995, 0.0));
        float _1998 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1999 = dot(vec3(_292, _293, _294), vec3(_1992, _1993, _1994));
        float _4045 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
        float _2002 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2003 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_1992, _1993, _1994));
        float _4056 = isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0));
        float _2007 = _1984 * _1984;
        float _2011 = ((_2002 * _2002) * (_2007 + (-1.0))) + 1.0;
        float _2020 = (exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2021 = 1.0 - _1984;
        float _2031 = (0.5 / (((_1770 * ((_1998 * _2021) + _1984)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2021) + _1984) * _1998))) * _1998;
        float _4067 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2033 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_2007 / ((_2011 * _2011) * 3.141590118408203125));
        float _2034 = isnan(1.0) ? _1523 : (isnan(_1523) ? 1.0 : min(_1523, 1.0));
        _1959 = (((_2020 * cbLight._m0[_1969].x) * _2033) * _2034) + _1901;
        _1961 = (((_2020 * cbLight._m0[_1969].y) * _2033) * _2034) + _1902;
        _1963 = (((_2020 * cbLight._m0[_1969].z) * _2033) * _2034) + _1903;
    }
    float _2065;
    float _2067;
    float _2069;
    if (_1674)
    {
        _2065 = _1959;
        _2067 = _1961;
        _2069 = _1963;
    }
    else
    {
        uint _2076 = _1508 + 3u;
        uint _2080 = _1508 + 11u;
        float _2094 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2076].w)) * _295) * 0.949999988079071044921875);
        float _2095 = _2094 * _2094;
        float _2096 = cbLight._m0[_2076].x + _373;
        float _2097 = cbLight._m0[_2076].y + _374;
        float _2098 = cbLight._m0[_2076].z + _375;
        float _2102 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
        float _2103 = _2102 * _2096;
        float _2104 = _2102 * _2097;
        float _2105 = _2102 * _2098;
        float _2106 = dot(vec3(_292, _293, _294), vec3(cbLight._m0[_2076].xyz));
        float _4083 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        float _2109 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2110 = dot(vec3(_292, _293, _294), vec3(_2103, _2104, _2105));
        float _4094 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
        float _2113 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _2114 = dot(vec3(cbLight._m0[_2076].xyz), vec3(_2103, _2104, _2105));
        float _4105 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
        float _2118 = _2095 * _2095;
        float _2122 = ((_2113 * _2113) * (_2118 + (-1.0))) + 1.0;
        float _2131 = (exp2(log2(1.0 - (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2132 = 1.0 - _2095;
        float _2142 = (0.5 / (((_1770 * ((_2109 * _2132) + _2095)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2132) + _2095) * _2109))) * _2109;
        float _4116 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2144 = (isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2118 / ((_2122 * _2122) * 3.141590118408203125));
        float _2145 = isnan(1.0) ? _1524 : (isnan(_1524) ? 1.0 : min(_1524, 1.0));
        _2065 = (((_2131 * cbLight._m0[_2080].x) * _2144) * _2145) + _1959;
        _2067 = (((_2131 * cbLight._m0[_2080].y) * _2144) * _2145) + _1961;
        _2069 = (((_2131 * cbLight._m0[_2080].z) * _2144) * _2145) + _1963;
    }
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    if (_1506.y == 0u)
    {
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2194;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2194;
        float _2197 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2194;
        uvec4 _2209 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2210 = _2209.x;
        uint _2221 = uint((float(_2209.y) * floor(float(uint(cbSceneParam._m0[85u].y * _382) / _2210))) + floor(float(uint(cbSceneParam._m0[85u].x * _381) / _2210)));
        float _2231 = (log2(_2197 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2232 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        uint _2235 = uint(isnan(14.0) ? _2232 : (isnan(_2232) ? 14.0 : min(_2232, 14.0)));
        uvec4 _2240 = texelFetch(g_lightClusterGridBuffer, int(((_2235 << 2u) + (_2221 << 6u)) >> 2u));
        uint _2241 = _2240.x;
        uint _2242 = _2209.z;
        float _2267;
        float _2269;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        if (((((1u << ((_2242 >> 4u) & 15u)) + 4294967295u) & _2241) == 0u) || ((_2242 & 240u) == 0u))
        {
            _2267 = 0.0;
            _2269 = 0.0;
            _2271 = 0.0;
            _2273 = 0.0;
            _2275 = 0.0;
            _2277 = 0.0;
        }
        else
        {
            float _2268;
            float _2270;
            float _2272;
            float _2274;
            float _2276;
            float _2278;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            uint _2455 = 0u;
            uint _2464;
            bool _2465;
            for (;;)
            {
                _2464 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2455 << 2u)) >> 2u)).x;
                _2465 = _2464 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2465)
                {
                    frontier_phi_64_pred = _2452;
                    frontier_phi_64_pred_1 = _2454;
                    frontier_phi_64_pred_2 = _2453;
                    frontier_phi_64_pred_3 = _2451;
                    frontier_phi_64_pred_4 = _2450;
                    frontier_phi_64_pred_5 = _2449;
                }
                else
                {
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    uint _2632;
                    _2626 = _2449;
                    _2627 = _2450;
                    _2628 = _2451;
                    _2629 = _2452;
                    _2630 = _2453;
                    _2631 = _2454;
                    _2632 = _2464;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    for (;;)
                    {
                        uint _2636 = uint(findLSB(_2632)) + (_2455 << 5u);
                        uint _2633 = (_2632 + 4294967295u) & _2632;
                        uint _2638 = _2636 * 48u;
                        vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2638)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2638 + 3u)).x));
                        uint _2658 = (_2636 * 48u) + 4u;
                        vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 3u)).x));
                        float _2672 = _2671.x;
                        float _2673 = _2671.y;
                        float _2674 = _2671.z;
                        uint _2677 = (_2636 * 48u) + 8u;
                        vec3 _2688 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2677)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2677 + 2u)).x));
                        uint _2693 = (_2636 * 48u) + 12u;
                        vec2 _2701 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x));
                        float _2707 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
                        float _2708 = _2707 * _2195;
                        float _2709 = _2707 * _2196;
                        float _2710 = _2707 * _2197;
                        float _2711 = _2652.x - _2195;
                        float _2712 = _2652.y - _2196;
                        float _2713 = _2652.z - _2197;
                        float _2714 = dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713));
                        float _2717 = inversesqrt(_2714);
                        float _2718 = _2717 * _2711;
                        float _2719 = _2717 * _2712;
                        float _2720 = _2717 * _2713;
                        float _2721 = dot(vec3(_403, _406, _409), vec3(_2718, _2719, _2720));
                        float _2726 = 1.0 - (_2714 * _2652.w);
                        float _4142 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _2727 = isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0));
                        float _2728 = sqrt(_2714) * _2671.w;
                        float _2731 = 1.39999997615814208984375 / (_2728 + 1.39999997615814208984375);
                        float _2732 = _2731 * _2731;
                        float _2733 = 1.0 - _2732;
                        float _2735 = (_2733 * _2733) * _296;
                        float _2738 = ((_2733 * _2721) + _2732) + _2735;
                        float _2743 = _2728 * _2728;
                        float _2748 = ((isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0))) * _2727) / (((_2735 * 2.0) + 1.0) * ((_2743 * 0.699999988079071044921875) + 1.0));
                        float _2752 = dot(vec3(_2718, _2719, _2720), vec3(_2708, _2709, _2710));
                        float _4158 = isnan(0.0) ? _2752 : (isnan(_2752) ? 0.0 : max(_2752, 0.0));
                        float _2759 = dot(vec3((-0.0) - _2708, (-0.0) - _2709, (-0.0) - _2710), vec3(_403, _406, _409)) + 1.0;
                        float _2761 = (isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0))) * 0.5;
                        float _2768 = ((_2761 * _2761) * _2701.x) * exp2((_2701.y * 32.0) * log2(isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))));
                        float _2770 = _296 / (_296 + 1.0);
                        float _2786 = (-0.0) - _2195;
                        float _2787 = (-0.0) - _2196;
                        float _2788 = (-0.0) - _2197;
                        float _2792 = inversesqrt(dot(vec3(_2786, _2787, _2788), vec3(_2786, _2787, _2788)));
                        float _2793 = _2792 * _2786;
                        float _2794 = _2792 * _2787;
                        float _2795 = _2792 * _2788;
                        float _2803 = exp2(log2(1.0 / ((_2743 * 3.5) + 5.0)) * 0.25);
                        float _2804 = 1.0 - _464;
                        float _2811 = sqrt(1.0 - ((1.0 - (_2804 * _2804)) * (1.0 - (_2803 * _2803))));
                        float _2812 = _2811 * _2811;
                        float _2813 = _2812 * _2812;
                        float _2814 = _2793 + _2718;
                        float _2815 = _2794 + _2719;
                        float _2816 = _2795 + _2720;
                        float _2820 = inversesqrt(dot(vec3(_2814, _2815, _2816), vec3(_2814, _2815, _2816)));
                        float _2824 = dot(vec3(_403, _406, _409), vec3(_2793, _2794, _2795));
                        float _4174 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
                        float _2827 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2828 = dot(vec3(_403, _406, _409), vec3(_2820 * _2814, _2820 * _2815, _2820 * _2816));
                        float _4185 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2831 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2835 = ((_2831 * _2831) * (_2813 + (-1.0))) + 1.0;
                        float _2836 = _2731 * _2812;
                        float _2837 = _2836 * _2836;
                        float _2840 = ((1.0 - _2837) * _2721) + _2837;
                        float _4196 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2841 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2842 = 1.0 - _2812;
                        float _2852 = (0.5 / (((_2841 * ((_2827 * _2842) + _2812)) + 9.9999999392252902907785028219223e-09) + (((_2841 * _2842) + _2812) * _2827))) * _2841;
                        float _4207 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2863 = (((_2813 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2835 * _2835) * ((_2743 * 2.1991131305694580078125) + 3.141590118408203125))) * _2727;
                        _2560 = (((((_2672 * 0.3183098733425140380859375) * _2770) * _2768) + _2672) * _2748) + _2629;
                        _2561 = (((((_2673 * 0.3183098733425140380859375) * _2770) * _2768) + _2673) * _2748) + _2630;
                        _2562 = (((((_2674 * 0.3183098733425140380859375) * _2770) * _2768) + _2674) * _2748) + _2631;
                        _2557 = (_2863 * _2688.x) + _2626;
                        _2558 = (_2863 * _2688.y) + _2627;
                        _2559 = (_2863 * _2688.z) + _2628;
                        if (_2633 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2626 = _2557;
                            _2627 = _2558;
                            _2628 = _2559;
                            _2629 = _2560;
                            _2630 = _2561;
                            _2631 = _2562;
                            _2632 = _2633;
                        }
                    }
                    frontier_phi_64_pred = _2560;
                    frontier_phi_64_pred_1 = _2562;
                    frontier_phi_64_pred_2 = _2561;
                    frontier_phi_64_pred_3 = _2559;
                    frontier_phi_64_pred_4 = _2558;
                    frontier_phi_64_pred_5 = _2557;
                }
                _2274 = frontier_phi_64_pred;
                _2278 = frontier_phi_64_pred_1;
                _2276 = frontier_phi_64_pred_2;
                _2272 = frontier_phi_64_pred_3;
                _2270 = frontier_phi_64_pred_4;
                _2268 = frontier_phi_64_pred_5;
                uint _2456 = _2455 + 1u;
                if (_2456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2449 = _2268;
                    _2450 = _2270;
                    _2451 = _2272;
                    _2452 = _2274;
                    _2453 = _2276;
                    _2454 = _2278;
                    _2455 = _2456;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2267 = _2268;
            _2269 = _2270;
            _2271 = _2272;
            _2273 = _2274;
            _2275 = _2276;
            _2277 = _2278;
        }
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.z;
        uint _2284 = (_2282 >> 8u) & 15u;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        float _2427;
        if (((4294967295u << _2284) & _2241) == 0u)
        {
            _2417 = _2267;
            _2419 = _2269;
            _2421 = _2271;
            _2423 = _2273;
            _2425 = _2275;
            _2427 = _2277;
        }
        else
        {
            float _2442 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
            float _2443 = _2442 * _2195;
            float _2444 = _2442 * _2196;
            float _2445 = _2442 * _2197;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2284 < ((_2282 >> 12u) & 15u))
            {
                float _2418;
                float _2420;
                float _2422;
                float _2424;
                float _2426;
                float _2428;
                float _2609 = _2267;
                float _2610 = _2269;
                float _2611 = _2271;
                float _2612 = _2273;
                float _2613 = _2275;
                float _2614 = _2277;
                uint _2615 = _2284;
                uint _2624;
                bool _2625;
                for (;;)
                {
                    _2624 = texelFetch(g_lightClassification, int((((_2235 << 5u) + (_2221 << 9u)) + (_2615 << 2u)) >> 2u)).x;
                    _2625 = _2624 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2625)
                    {
                        frontier_phi_72_pred = _2614;
                        frontier_phi_72_pred_1 = _2613;
                        frontier_phi_72_pred_2 = _2612;
                        frontier_phi_72_pred_3 = _2611;
                        frontier_phi_72_pred_4 = _2610;
                        frontier_phi_72_pred_5 = _2609;
                    }
                    else
                    {
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _2910;
                        float _2911;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3253;
                        float _3254;
                        float _3255;
                        float _2919 = _2609;
                        float _2920 = _2610;
                        float _2921 = _2611;
                        float _2922 = _2612;
                        float _2923 = _2613;
                        float _2924 = _2614;
                        uint _2925 = _2624;
                        uint _2926;
                        vec4 _2951;
                        float _2952;
                        vec4 _2967;
                        float _2968;
                        float _2969;
                        float _2970;
                        vec3 _2982;
                        vec2 _2991;
                        vec4 _3007;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2936 = ((_2615 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2925));
                            _2926 = (_2925 + 4294967295u) & _2925;
                            uint _2938 = _2936 * 40u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2952 = _2951.w;
                            uint _2954 = (_2936 * 40u) + 4u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2968 = _2967.x;
                            _2969 = _2967.y;
                            _2970 = _2967.z;
                            uint _2972 = (_2936 * 40u) + 8u;
                            _2982 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x));
                            uint _2984 = (_2936 * 40u) + 12u;
                            _2991 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x));
                            uint _2994 = (_2936 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2936 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2936 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2936 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2197, _3058.z, fma(_2196, _3058.y, _3058.x * _2195)) + _3058.w;
                            _3071 = !((fma(_2197, _3039.z, fma(_2196, _3039.y, _3039.x * _2195)) + _3039.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3071)
                            {
                                float _3097 = _2951.x - _2195;
                                float _3098 = _2951.y - _2196;
                                float _3099 = _2951.z - _2197;
                                float _3100 = dot(vec3(_3097, _3098, _3099), vec3(_3097, _3098, _3099));
                                float _3103 = inversesqrt(_3100);
                                float _3104 = _3103 * _3097;
                                float _3105 = _3103 * _3098;
                                float _3106 = _3103 * _3099;
                                float _3110 = 1.0 - (_3100 / (_2952 * _2952));
                                float _4218 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3115 = sqrt(_3100) * _2967.w;
                                float _3117 = 1.39999997615814208984375 / (_3115 + 1.39999997615814208984375);
                                float _3118 = _3117 * _3117;
                                float _3119 = 1.0 - _3118;
                                float _3121 = (_3119 * _3119) * _296;
                                float _3124 = ((_3119 * dot(vec3(_3104, _3105, _3106), vec3(_403, _406, _409))) + _3118) + _3121;
                                float _3129 = _3115 * _3115;
                                float _3134 = (fma(_2197, _3007.z, fma(_2196, _3007.y, _3007.x * _2195)) + _3007.w) / _3070;
                                float _3135 = (fma(_2197, _3023.z, fma(_2196, _3023.y, _3023.x * _2195)) + _3023.w) / _3070;
                                float _3139 = 1.0 - dot(vec2(_3134, _3135), vec2(_3134, _3135));
                                float _4234 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3141 = _3140 * (((isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0))) * _3111) / (((_3121 * 2.0) + 1.0) * ((_3129 * 0.699999988079071044921875) + 1.0)));
                                float _3142 = (-0.0) - _2443;
                                float _3143 = (-0.0) - _2444;
                                float _3144 = (-0.0) - _2445;
                                float _3145 = dot(vec3(_3104, _3105, _3106), vec3(_2443, _2444, _2445));
                                float _4245 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                                float _3152 = dot(vec3(_3142, _3143, _3144), vec3(_403, _406, _409)) + 1.0;
                                float _3154 = (isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0))) * 0.5;
                                float _3161 = ((_3154 * _3154) * _2991.x) * exp2((_2991.y * 32.0) * log2(isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0))));
                                float _3163 = _296 / (_296 + 1.0);
                                float _3184 = exp2(log2(1.0 / ((_3129 * 3.5) + 5.0)) * 0.25);
                                float _3185 = 1.0 - _464;
                                float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                                float _3193 = _3192 * _3192;
                                float _3194 = _3193 * _3193;
                                float _3195 = _3104 - _2443;
                                float _3196 = _3105 - _2444;
                                float _3197 = _3106 - _2445;
                                float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                                float _3205 = dot(vec3(_403, _406, _409), vec3(_3142, _3143, _3144));
                                float _4261 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3208 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3209 = dot(vec3(_403, _406, _409), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                                float _4272 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                                float _3212 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                                float _3217 = _3117 * _3193;
                                float _3218 = _3217 * _3217;
                                float _3224 = ((1.0 - _3218) * dot(vec3(_403, _406, _409), vec3(_3104, _3105, _3106))) + _3218;
                                float _4283 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0));
                                float _3225 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3226 = 1.0 - _3193;
                                float _3236 = (0.5 / (((_3225 * ((_3208 * _3226) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3225 * _3226) + _3193) * _3208))) * _3225;
                                float _4294 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3246 = (_3140 * _3111) * (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3216 * _3216) * ((_3129 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_2970 * 0.3183098733425140380859375) * _3163) * _3161) + _2970) * _3141;
                                frontier_phi_78_pred_1 = ((((_2969 * 0.3183098733425140380859375) * _3163) * _3161) + _2969) * _3141;
                                frontier_phi_78_pred_2 = ((((_2968 * 0.3183098733425140380859375) * _3163) * _3161) + _2968) * _3141;
                                frontier_phi_78_pred_3 = _3246 * _2982.z;
                                frontier_phi_78_pred_4 = _3246 * _2982.y;
                                frontier_phi_78_pred_5 = _3246 * _2982.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3255 = frontier_phi_78_pred;
                            _3254 = frontier_phi_78_pred_1;
                            _3253 = frontier_phi_78_pred_2;
                            _3252 = frontier_phi_78_pred_3;
                            _3251 = frontier_phi_78_pred_4;
                            _3250 = frontier_phi_78_pred_5;
                            _2909 = _3253 + _2922;
                            _2910 = _3254 + _2923;
                            _2911 = _3255 + _2924;
                            _2906 = _3250 + _2919;
                            _2907 = _3251 + _2920;
                            _2908 = _3252 + _2921;
                            if (_2926 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2926;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2911;
                        frontier_phi_72_pred_1 = _2910;
                        frontier_phi_72_pred_2 = _2909;
                        frontier_phi_72_pred_3 = _2908;
                        frontier_phi_72_pred_4 = _2907;
                        frontier_phi_72_pred_5 = _2906;
                    }
                    _2428 = frontier_phi_72_pred;
                    _2426 = frontier_phi_72_pred_1;
                    _2424 = frontier_phi_72_pred_2;
                    _2422 = frontier_phi_72_pred_3;
                    _2420 = frontier_phi_72_pred_4;
                    _2418 = frontier_phi_72_pred_5;
                    uint _2616 = _2615 + 1u;
                    if (_2616 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2609 = _2418;
                        _2610 = _2420;
                        _2611 = _2422;
                        _2612 = _2424;
                        _2613 = _2426;
                        _2614 = _2428;
                        _2615 = _2616;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2422;
                frontier_phi_58_59_ladder_1 = _2428;
                frontier_phi_58_59_ladder_2 = _2426;
                frontier_phi_58_59_ladder_3 = _2424;
                frontier_phi_58_59_ladder_4 = _2420;
                frontier_phi_58_59_ladder_5 = _2418;
            }
            else
            {
                frontier_phi_58_59_ladder = _2271;
                frontier_phi_58_59_ladder_1 = _2277;
                frontier_phi_58_59_ladder_2 = _2275;
                frontier_phi_58_59_ladder_3 = _2273;
                frontier_phi_58_59_ladder_4 = _2269;
                frontier_phi_58_59_ladder_5 = _2267;
            }
            _2417 = frontier_phi_58_59_ladder_5;
            _2419 = frontier_phi_58_59_ladder_4;
            _2421 = frontier_phi_58_59_ladder;
            _2423 = frontier_phi_58_59_ladder_3;
            _2425 = frontier_phi_58_59_ladder_2;
            _2427 = frontier_phi_58_59_ladder_1;
        }
        float _2432 = isnan(1.0) ? _448 : (isnan(_448) ? 1.0 : min(_448, 1.0));
        _2254 = (_2432 * _2423) + _1729;
        _2256 = (_2432 * _2425) + _1731;
        _2258 = (_2432 * _2427) + _1733;
        _2260 = ((_2417 * 0.039999999105930328369140625) * _2432) + _2065;
        _2262 = ((_2419 * 0.039999999105930328369140625) * _2432) + _2067;
        _2264 = ((_2421 * 0.039999999105930328369140625) * _2432) + _2069;
    }
    else
    {
        _2254 = _1729;
        _2256 = _1731;
        _2258 = _1733;
        _2260 = _2065;
        _2262 = _2067;
        _2264 = _2069;
    }
    float _2356;
    float _2357;
    float _2358;
    if (_296 > 0.0)
    {
        uint _2288 = _1508 + 4u;
        float _2294 = (-0.0) - _373;
        float _2296 = (-0.0) - _374;
        float _2297 = (-0.0) - _375;
        float _2298 = dot(vec3(cbLight._m0[_1508].xyz), vec3(_2294, _2296, _2297));
        float _4310 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2302 = _459 + 1.0;
        float _2304 = (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0))) * 0.5;
        float _2309 = _2304 * _2304;
        float _2310 = _2309 * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * 32.0);
        float _2312 = _296 / (_296 + 1.0);
        float _2313 = isnan(_1521) ? 1.0 : (isnan(1.0) ? _1521 : min(1.0, _1521));
        uint _2326 = _1508 + 5u;
        float _2332 = dot(vec3(cbLight._m0[_1822].xyz), vec3(_2294, _2296, _2297));
        float _4331 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2339 = _2309 * exp2(log2(isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * 32.0);
        float _2340 = isnan(_1522) ? 1.0 : (isnan(1.0) ? _1522 : min(1.0, _1522));
        _2356 = ((((_2339 * cbLight._m0[_2326].x) * _2312) * _2340) + ((((cbLight._m0[_2288].x * _1500) * _2310) * _2312) * _2313)) * 0.3183098733425140380859375;
        _2357 = ((((_2339 * cbLight._m0[_2326].y) * _2312) * _2340) + ((((cbLight._m0[_2288].y * _1501) * _2310) * _2312) * _2313)) * 0.3183098733425140380859375;
        _2358 = ((((_2339 * cbLight._m0[_2326].z) * _2312) * _2340) + ((((cbLight._m0[_2288].z * _1502) * _2310) * _2312) * _2313)) * 0.3183098733425140380859375;
    }
    else
    {
        _2356 = 0.0;
        _2357 = 0.0;
        _2358 = 0.0;
    }
    float _4347 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _4358 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _4369 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    uint _2380 = _422 + 6u;
    float _2388 = _381 / cbSceneParam._m0[86u].x;
    float _2389 = _382 / cbSceneParam._m0[86u].y;
    vec4 _2403 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2388, _2389, (log2((isnan(cbSceneParam._m0[77u].w) ? _315 : (isnan(_315) ? cbSceneParam._m0[77u].w : min(_315, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2405 = _2403.x;
    float _2406 = _2403.y;
    float _2407 = _2403.z;
    float _2408 = _2403.w;
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    if (_315 > cbSceneParam._m0[78u].w)
    {
        float _2470 = isnan(_315) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _315 : min(cbSceneParam._m0[80u].w, _315));
        float _2471 = _2470 / _315;
        float _2482 = _2471 * _366;
        float _2483 = _367 * _2471;
        float _2484 = (-0.0) - _2483;
        float _2485 = _2471 * _368;
        float _2487 = (cbSceneParam._m0[77u].w * _2484) / _2470;
        float _2488 = _2487 + cbSceneParam._m0[79u].w;
        float _2489 = cbSceneParam._m0[79u].w - _2483;
        float _2495 = sqrt(((_2482 * _2482) + (_2483 * _2483)) + (_2485 * _2485));
        float _2498 = (1.0 - (cbSceneParam._m0[77u].w / _2470)) * _2495;
        float _2503 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2505 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2868;
        if (abs((_2484 - _2487) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2868 = ((((_2488 > 0.0) ? exp2(_2503 * _2488) : (2.0 - exp2(_2505 * _2488))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2498;
        }
        else
        {
            float _2582 = 1.0 / cbSceneParam._m0[80u].x;
            float _2583 = isnan(_2489) ? _2488 : (isnan(_2488) ? _2489 : max(_2488, _2489));
            float _2584 = isnan(_2489) ? _2488 : (isnan(_2488) ? _2489 : min(_2488, _2489));
            float _2593 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : min(_2583, 0.0));
            float _2594 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : min(_2584, 0.0));
            _2868 = ((abs(_2495 / _2484) * cbSceneParam._m0[80u].y) * ((((_2593 - _2594) * 2.0) - ((exp2(_2503 * (isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0)))) - exp2(_2503 * (isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0))))) * _2582)) - ((exp2(_2505 * _2593) - exp2(_2505 * _2594)) * _2582))) + (_2498 * cbSceneParam._m0[80u].z);
        }
        vec4 _2870 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2388, _2389, 1.0), 0.0);
        float _2879 = exp2((_2868 * (-1.44269502162933349609375)) * (1.0 - _2870.w));
        float _2880 = log2(_2879);
        float _2896 = log2(_2408);
        _2507 = (exp2(_2896 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].x)) * _2870.x) / cbSceneParam._m0[78u].x)) + _2405;
        _2509 = (exp2(_2896 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].y)) * _2870.y) / cbSceneParam._m0[78u].y)) + _2406;
        _2511 = (exp2(_2896 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2880 * cbSceneParam._m0[78u].z)) * _2870.z) / cbSceneParam._m0[78u].z)) + _2407;
        _2513 = _2879 * _2408;
    }
    else
    {
        _2507 = _2405;
        _2509 = _2406;
        _2511 = _2407;
        _2513 = _2408;
    }
    float _2525 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2526 = _2525 == 3.0;
    float _2527 = log2(_2513);
    float _2534 = exp2(_2527 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * ((_2254 + ((isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0))) * _448)) + _2356)) + ((_2260 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _1255)) * cbPerFrame._m0[3u].x));
    float _2535 = exp2(_2527 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0))) * ((_2256 + ((isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0))) * _448)) + _2357)) + ((_2262 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _1255)) * cbPerFrame._m0[3u].x));
    float _2536 = exp2(_2527 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * ((_2258 + ((isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0))) * _448)) + _2358)) + ((_2264 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _1255)) * cbPerFrame._m0[3u].x));
    float _2545 = (_2525 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2545 * (_2526 ? _2534 : (_2534 + (cbSceneParam._m0[72u].w * _2507)));
    SV_Target.y = _2545 * (_2526 ? _2535 : (_2535 + (cbSceneParam._m0[72u].w * _2509)));
    SV_Target.z = _2545 * (_2526 ? _2536 : (_2536 + (cbSceneParam._m0[72u].w * _2511)));
    SV_Target.w = cbInstanceData._m0[_2380].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2380].w;
}


