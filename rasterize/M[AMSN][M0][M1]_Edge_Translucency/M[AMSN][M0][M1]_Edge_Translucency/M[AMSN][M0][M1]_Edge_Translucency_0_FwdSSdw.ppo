#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _855;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _246 = _244.x;
    vec4 _258 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _262 = _258.z;
    float _266 = (_258.x * 2.0) + (-1.0);
    float _268 = (_258.y * 2.0) + (-1.0);
    float _269 = dot(vec2(_266, _268), vec2(_266, _268));
    float _3445 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _275 = sqrt(1.0 - (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0))));
    vec4 _287 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _294 = cbMtdParam._m0[10u].x * _287.x;
    float _297 = fma(_275, _194 * NORMAL.x, fma(_268, _201 * TANGENT.x, (_187 * _180) * _266));
    float _300 = fma(_275, _194 * NORMAL.y, fma(_268, _201 * TANGENT.y, (_187 * _181) * _266));
    float _303 = fma(_275, _194 * NORMAL.z, fma(_268, _201 * TANGENT.z, (_187 * _182) * _266));
    float _307 = inversesqrt(dot(vec3(_297, _300, _303), vec3(_297, _300, _303)));
    float _308 = _307 * _297;
    float _309 = _307 * _300;
    float _310 = _307 * _303;
    float _3456 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _311 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _312 = isnan(0.0) ? _294 : (isnan(_294) ? 0.0 : max(_294, 0.0));
    float _3472 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3483 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3494 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3505 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _316 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
    float _332 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _373 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _383 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _373);
    float _384 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _373);
    float _385 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _373);
    float _389 = inversesqrt(dot(vec3(_383, _384, _385), vec3(_383, _384, _385)));
    float _390 = _383 * _389;
    float _391 = _384 * _389;
    float _392 = _385 * _389;
    float _398 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _399 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _420 = fma(_310, cbSceneParam._m0[5u].z, fma(_309, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _308));
    float _423 = fma(_310, cbSceneParam._m0[6u].z, fma(_309, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _308));
    float _426 = fma(_310, cbSceneParam._m0[7u].z, fma(_309, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _308));
    uint _439 = uint(roundEven(NORMAL.w)) * 13u;
    uint _442 = (_439 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _448 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0)))) * cbInstanceData._m0[_442].x;
    float _449 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0)))) * cbInstanceData._m0[_442].y;
    float _450 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0)))) * cbInstanceData._m0[_442].z;
    float _3516 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
    float _3527 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _452 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
    float _3538 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
    float _454 = 1.0 - _316;
    float _455 = _451 * _454;
    float _456 = _452 * _454;
    float _457 = _453 * _454;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _316;
    float _463 = (_452 + (-0.039999999105930328369140625)) * _316;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _316;
    float _465 = _462 + 0.039999999105930328369140625;
    float _467 = _463 + 0.039999999105930328369140625;
    float _468 = _464 + 0.039999999105930328369140625;
    vec4 _477 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _398, cbSceneParam._m0[86u].y * _399));
    float _480 = _477.x * TEXCOORD.z;
    float _481 = dot(vec3(_308, _309, _310), vec3(_390, _391, _392));
    float _484 = _481 * 2.0;
    float _488 = (_484 * _308) - _390;
    float _489 = (_484 * _309) - _391;
    float _490 = (_484 * _310) - _392;
    float _491 = dot(vec3(_390, _391, _392), vec3(_308, _309, _310));
    float _494 = abs(_491);
    float _3549 = isnan(0.0) ? _494 : (isnan(_494) ? 0.0 : max(_494, 0.0));
    float _496 = sqrt(_311);
    float _509 = exp2((_496 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_496 * 3.0));
    float _515 = (1.0 - _509) * ((_496 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _516 = _509 * _496;
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _854;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _579 = fma(_552, cbModelParam._m0[26u].z, fma(_548, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _544));
        float _583 = fma(_552, cbModelParam._m0[27u].z, fma(_548, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _544));
        float _587 = fma(_552, cbModelParam._m0[28u].z, fma(_548, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _544));
        float _612 = _544 + _308;
        float _613 = _548 + _309;
        float _614 = _552 + _310;
        float _624 = fma(_614, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _612)) - _579;
        float _625 = fma(_614, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _612)) - _583;
        float _626 = fma(_614, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _612)) - _587;
        float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
        float _643 = ((_630 * _624) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_579 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _644 = ((_630 * _625) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_583 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _645 = ((_630 * _626) / cbModelParam._m0[34u].z) + ((((((_587 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _648 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _655 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _662 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_643, _644, _645), 0.0);
        float _682 = exp2((_648.w + (-0.5)) * 20.0) * 2.0;
        float _683 = _682 * (_648.x + (-0.5));
        float _684 = _682 * (_648.y + (-0.5));
        float _685 = _682 * (_648.z + (-0.5));
        float _692 = exp2((_655.w + (-0.5)) * 20.0) * 2.0;
        float _693 = _692 * (_655.x + (-0.5));
        float _694 = _692 * (_655.y + (-0.5));
        float _695 = _692 * (_655.z + (-0.5));
        float _702 = exp2((_662.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_662.x + (-0.5));
        float _704 = _702 * (_662.y + (-0.5));
        float _705 = _702 * (_662.z + (-0.5));
        float _712 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_669.x + (-0.5));
        float _714 = _712 * (_669.y + (-0.5));
        float _715 = _712 * (_669.z + (-0.5));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = _683 * 0.5;
        float _720 = _693 * 0.5;
        float _721 = _703 * 0.5;
        float _722 = dot(vec3(_719, _720, _721), vec3(_719, _720, _721));
        float _727 = (_722 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_722);
        float _736 = (dot(vec3(_308, _309, _310), vec3(_727 * _719, _727 * _720, _727 * _721)) + 1.0) * 0.5;
        float _3575 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        float _746 = sqrt(((_720 * _720) + (_719 * _719)) + (_721 * _721)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3586 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _747 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _748 = _747 * 2.0;
        float _752 = (1.0 - _747) / (_747 + 1.0);
        float _3597 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _762 = ((((1.0 - _753) * (_748 + 2.0)) * exp2(log2(isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * (_748 + 1.0))) + _753) * _716;
        float _763 = _684 * 0.5;
        float _764 = _694 * 0.5;
        float _765 = _704 * 0.5;
        float _766 = dot(vec3(_763, _764, _765), vec3(_763, _764, _765));
        float _771 = (_766 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_766);
        float _779 = (dot(vec3(_308, _309, _310), vec3(_771 * _763, _771 * _764, _771 * _765)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _788 = sqrt(((_764 * _764) + (_763 * _763)) + (_765 * _765)) / (_717 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _789 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _790 = _789 * 2.0;
        float _794 = (1.0 - _789) / (_789 + 1.0);
        float _3630 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _804 = ((((1.0 - _795) * (_790 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_790 + 1.0))) + _795) * _717;
        float _805 = _685 * 0.5;
        float _806 = _695 * 0.5;
        float _807 = _705 * 0.5;
        float _808 = dot(vec3(_805, _806, _807), vec3(_805, _806, _807));
        float _813 = (_808 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_808);
        float _821 = (dot(vec3(_308, _309, _310), vec3(_813 * _805, _813 * _806, _813 * _807)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _830 = sqrt(((_806 * _806) + (_805 * _805)) + (_807 * _807)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _831 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _832 = _831 * 2.0;
        float _836 = (1.0 - _831) / (_831 + 1.0);
        float _3663 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _846 = ((((1.0 - _837) * (_832 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_832 + 1.0))) + _837) * _718;
        _854 = _685;
        _856 = _684;
        _857 = _683;
        _858 = _695;
        _859 = _694;
        _860 = _693;
        _861 = _705;
        _862 = _704;
        _863 = _703;
        _864 = _718;
        _865 = _717;
        _866 = _716;
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0)));
        _868 = cbModelParam._m0[36u].z * (isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)));
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0)));
    }
    else
    {
        _854 = _855;
        _856 = _855;
        _857 = _855;
        _858 = _855;
        _859 = _855;
        _860 = _855;
        _861 = _855;
        _862 = _855;
        _863 = _855;
        _864 = _855;
        _865 = _855;
        _866 = _855;
        _867 = 0.0;
        _868 = 0.0;
        _869 = 0.0;
    }
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _895 = fma(_552, cbModelParam._m0[30u].z, fma(_548, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _544));
        float _899 = fma(_552, cbModelParam._m0[31u].z, fma(_548, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _544));
        float _903 = fma(_552, cbModelParam._m0[32u].z, fma(_548, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _544));
        float _926 = _544 + _308;
        float _927 = _548 + _309;
        float _928 = _552 + _310;
        float _938 = fma(_928, cbModelParam._m0[30u].z, fma(_927, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[31u].z, fma(_927, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[32u].z, fma(_927, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_895 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_899 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[35u].z) + ((((((_903 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _994 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_961.x + (-0.5));
        float _996 = _994 * (_961.y + (-0.5));
        float _997 = _994 * (_961.z + (-0.5));
        float _1004 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_968.x + (-0.5));
        float _1006 = _1004 * (_968.y + (-0.5));
        float _1007 = _1004 * (_968.z + (-0.5));
        float _1014 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_975.x + (-0.5));
        float _1016 = _1014 * (_975.y + (-0.5));
        float _1017 = _1014 * (_975.z + (-0.5));
        float _1024 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1025 = _1024 * (_982.x + (-0.5));
        float _1026 = _1024 * (_982.y + (-0.5));
        float _1027 = _1024 * (_982.z + (-0.5));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = _995 * 0.5;
        float _1032 = _1005 * 0.5;
        float _1033 = _1015 * 0.5;
        float _1034 = dot(vec3(_1031, _1032, _1033), vec3(_1031, _1032, _1033));
        float _1039 = (_1034 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1034);
        float _1047 = (dot(vec3(_308, _309, _310), vec3(_1039 * _1031, _1039 * _1032, _1039 * _1033)) + 1.0) * 0.5;
        float _3704 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1056 = sqrt(((_1032 * _1032) + (_1031 * _1031)) + (_1033 * _1033)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3715 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1058 = _1057 * 2.0;
        float _1062 = (1.0 - _1057) / (_1057 + 1.0);
        float _3726 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1072 = ((((1.0 - _1063) * (_1058 + 2.0)) * exp2(log2(isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * (_1058 + 1.0))) + _1063) * _1028;
        float _1073 = _996 * 0.5;
        float _1074 = _1006 * 0.5;
        float _1075 = _1016 * 0.5;
        float _1076 = dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075));
        float _1081 = (_1076 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1076);
        float _1089 = (dot(vec3(_308, _309, _310), vec3(_1081 * _1073, _1081 * _1074, _1081 * _1075)) + 1.0) * 0.5;
        float _3737 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1098 = sqrt(((_1074 * _1074) + (_1073 * _1073)) + (_1075 * _1075)) / (_1029 + 9.9999997473787516355514526367188e-06);
        float _3748 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
        float _1100 = _1099 * 2.0;
        float _1104 = (1.0 - _1099) / (_1099 + 1.0);
        float _3759 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
        float _1114 = ((((1.0 - _1105) * (_1100 + 2.0)) * exp2(log2(isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) * (_1100 + 1.0))) + _1105) * _1029;
        float _1115 = _997 * 0.5;
        float _1116 = _1007 * 0.5;
        float _1117 = _1017 * 0.5;
        float _1118 = dot(vec3(_1115, _1116, _1117), vec3(_1115, _1116, _1117));
        float _1123 = (_1118 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1118);
        float _1131 = (dot(vec3(_308, _309, _310), vec3(_1123 * _1115, _1123 * _1116, _1123 * _1117)) + 1.0) * 0.5;
        float _3770 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1140 = sqrt(((_1116 * _1116) + (_1115 * _1115)) + (_1117 * _1117)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3781 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _3792 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0))) * (_1142 + 1.0))) + _1147) * _1030;
        _1164 = _997;
        _1165 = _996;
        _1166 = _995;
        _1167 = _1007;
        _1168 = _1006;
        _1169 = _1005;
        _1170 = _1017;
        _1171 = _1016;
        _1172 = _1015;
        _1173 = _1030;
        _1174 = _1029;
        _1175 = _1028;
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0)));
        _1177 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0)));
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
    }
    else
    {
        _1164 = _855;
        _1165 = _855;
        _1166 = _855;
        _1167 = _855;
        _1168 = _855;
        _1169 = _855;
        _1170 = _855;
        _1171 = _855;
        _1172 = _855;
        _1173 = _855;
        _1174 = _855;
        _1175 = _855;
        _1176 = 0.0;
        _1177 = 0.0;
        _1178 = 0.0;
    }
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1189 = (cbModelParam._m0[1u].x * (_1177 - _868)) + _868;
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1211 = fma(_1190, cbSceneParam._m0[89u].z, fma(_1189, cbSceneParam._m0[89u].y, _1188 * cbSceneParam._m0[89u].x));
    float _1214 = fma(_1190, cbSceneParam._m0[90u].z, fma(_1189, cbSceneParam._m0[90u].y, _1188 * cbSceneParam._m0[90u].x));
    float _1217 = fma(_1190, cbSceneParam._m0[91u].z, fma(_1189, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1188));
    float _1232 = _488 * 0.5;
    float _1233 = _489 * 0.5;
    float _1234 = _490 * 0.5;
    float _1235 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1238 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1165, _1168, _1171, _1174));
    float _1241 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1275;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1248 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_854, _858, _861, _864));
        float _1252 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_856, _859, _862, _865));
        float _1256 = dot(vec4(_1232, _1233, _1234, 1.0), vec4(_857, _860, _863, _866));
        float _1263 = dot(vec4(cbModelParam._m0[39u]), vec4(_1232, _1233, _1234, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)), isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1263) ? 0.0 : (isnan(0.0) ? _1263 : max(0.0, _1263))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1286;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1277 = dot(vec4(cbModelParam._m0[40u]), vec4(_1232, _1233, _1234, 1.0));
        _1286 = dot(vec3(isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)), isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1277) ? 0.0 : (isnan(0.0) ? _1277 : max(0.0, _1277))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1286 = 1.0;
    }
    float _1290 = (_1286 * cbModelParam._m0[1u].x) + (_1275 * (1.0 - cbModelParam._m0[1u].x));
    float _1300 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _311);
    float _1301 = isnan(_1300) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1300 : min(cbModelParam._m0[25u].z, _1300));
    float _1383;
    float _1385;
    float _1387;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1350 = fma(_552, cbModelParam._m0[13u].z, fma(_548, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _544)) + cbModelParam._m0[13u].w;
        float _1354 = fma(_552, cbModelParam._m0[14u].z, fma(_548, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _544)) + cbModelParam._m0[14u].w;
        float _1358 = fma(_552, cbModelParam._m0[15u].z, fma(_548, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _544)) + cbModelParam._m0[15u].w;
        float _1361 = fma(_490, cbModelParam._m0[13u].z, fma(_489, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _488));
        float _1364 = fma(_490, cbModelParam._m0[14u].z, fma(_489, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _488));
        float _1367 = fma(_490, cbModelParam._m0[15u].z, fma(_489, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _488));
        float _1395;
        if (_1361 > 0.0)
        {
            _1395 = abs((1.0 - _1350) / _1361);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1361 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1350 + 1.0) / _1361);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1395 = frontier_phi_14_12_ladder;
        }
        float _1598;
        if (_1364 > 0.0)
        {
            _1598 = abs((1.0 - _1354) / _1364);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1364 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1354 + 1.0) / _1364);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1598 = frontier_phi_23_19_ladder;
        }
        float _1672;
        if (_1367 > 0.0)
        {
            _1672 = abs((1.0 - _1358) / _1367);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1358 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1672 = frontier_phi_34_30_ladder;
        }
        float _1674 = isnan(_1598) ? _1395 : (isnan(_1395) ? _1598 : min(_1395, _1598));
        float _1675 = isnan(_1672) ? _1674 : (isnan(_1674) ? _1672 : min(_1674, _1672));
        float _1679 = (_1675 * _1361) + _1350;
        float _1680 = (_1675 * _1364) + _1354;
        float _1681 = (_1675 * _1367) + _1358;
        float _1682 = _1675 * 9.9999997473787516355514526367188e-05;
        float _1684 = (-1.0) - _1682;
        float _1686 = _1682 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1681 > _1686) || ((_1681 < _1684) || ((_1680 > _1686) || ((_1680 < _1684) || ((_1679 < _1684) || (_1679 > _1686))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1757 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1681, cbModelParam._m0[9u].z, fma(_1680, cbModelParam._m0[9u].y, _1679 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1681, cbModelParam._m0[10u].z, fma(_1680, cbModelParam._m0[10u].y, _1679 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1681, cbModelParam._m0[11u].z, fma(_1680, cbModelParam._m0[11u].y, _1679 * cbModelParam._m0[11u].x))), _1301);
            frontier_phi_13_34_ladder = _1757.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _1757.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _1757.x * cbModelParam._m0[1u].y;
        }
        _1383 = frontier_phi_13_34_ladder_2;
        _1385 = frontier_phi_13_34_ladder_1;
        _1387 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1371 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_488, _489, _490), _1301);
        _1383 = _1371.x * cbModelParam._m0[1u].y;
        _1385 = _1371.y * cbModelParam._m0[1u].y;
        _1387 = _1371.z * cbModelParam._m0[1u].y;
    }
    float _1391 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _311);
    float _1392 = isnan(_1391) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1391 : min(cbModelParam._m0[25u].w, _1391));
    float _1485;
    float _1487;
    float _1489;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1449 = fma(_552, cbModelParam._m0[21u].z, fma(_548, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _544)) + cbModelParam._m0[21u].w;
        float _1453 = fma(_552, cbModelParam._m0[22u].z, fma(_548, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _544)) + cbModelParam._m0[22u].w;
        float _1457 = fma(_552, cbModelParam._m0[23u].z, fma(_548, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _544)) + cbModelParam._m0[23u].w;
        float _1460 = fma(_490, cbModelParam._m0[21u].z, fma(_489, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _488));
        float _1463 = fma(_490, cbModelParam._m0[22u].z, fma(_489, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _488));
        float _1466 = fma(_490, cbModelParam._m0[23u].z, fma(_489, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _488));
        float _1603;
        if (_1460 > 0.0)
        {
            _1603 = abs((1.0 - _1449) / _1460);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1460 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1449 + 1.0) / _1460);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1603 = frontier_phi_25_21_ladder;
        }
        float _1699;
        if (_1463 > 0.0)
        {
            _1699 = abs((1.0 - _1453) / _1463);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1463 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1453 + 1.0) / _1463);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1699 = frontier_phi_36_32_ladder;
        }
        float _1981;
        if (_1466 > 0.0)
        {
            _1981 = abs((1.0 - _1457) / _1466);
        }
        else
        {
            float frontier_phi_45_42_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_45_42_ladder = abs((_1457 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_45_42_ladder = 5000.0;
            }
            _1981 = frontier_phi_45_42_ladder;
        }
        float _1983 = isnan(_1699) ? _1603 : (isnan(_1603) ? _1699 : min(_1603, _1699));
        float _1984 = isnan(_1981) ? _1983 : (isnan(_1983) ? _1981 : min(_1983, _1981));
        float _1988 = (_1984 * _1460) + _1449;
        float _1989 = (_1984 * _1463) + _1453;
        float _1990 = (_1984 * _1466) + _1457;
        float _1991 = _1984 * 9.9999997473787516355514526367188e-05;
        float _1992 = (-1.0) - _1991;
        float _1994 = _1991 + 1.0;
        float frontier_phi_22_45_ladder;
        float frontier_phi_22_45_ladder_1;
        float frontier_phi_22_45_ladder_2;
        if ((_1990 > _1994) || ((_1990 < _1992) || ((_1989 > _1994) || ((_1989 < _1992) || ((_1988 < _1992) || (_1988 > _1994))))))
        {
            frontier_phi_22_45_ladder = 0.0;
            frontier_phi_22_45_ladder_1 = 0.0;
            frontier_phi_22_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2112 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1990, cbModelParam._m0[17u].z, fma(_1989, cbModelParam._m0[17u].y, _1988 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1990, cbModelParam._m0[18u].z, fma(_1989, cbModelParam._m0[18u].y, _1988 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1990, cbModelParam._m0[19u].z, fma(_1989, cbModelParam._m0[19u].y, _1988 * cbModelParam._m0[19u].x))), _1392);
            frontier_phi_22_45_ladder = _2112.z * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_1 = _2112.y * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_2 = _2112.x * cbModelParam._m0[1u].z;
        }
        _1485 = frontier_phi_22_45_ladder_2;
        _1487 = frontier_phi_22_45_ladder_1;
        _1489 = frontier_phi_22_45_ladder;
    }
    else
    {
        vec4 _1469 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_488, _489, _490), _1392);
        _1485 = _1469.x * cbModelParam._m0[1u].z;
        _1487 = _1469.y * cbModelParam._m0[1u].z;
        _1489 = _1469.z * cbModelParam._m0[1u].z;
    }
    float _1502 = (((_515 * _465) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1504 = (((_515 * _467) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_515 * _468) + _516) * _480) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1509 = fma(_1506, cbSceneParam._m0[89u].z, fma(_1504, cbSceneParam._m0[89u].y, _1502 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1506, cbSceneParam._m0[90u].z, fma(_1504, cbSceneParam._m0[90u].y, _1502 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1506, cbSceneParam._m0[91u].z, fma(_1504, cbSceneParam._m0[91u].y, _1502 * cbSceneParam._m0[91u].x));
    vec4 _1523 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_398, _399));
    float _1525 = _1523.w;
    float _1537 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1525);
    float _1538 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1525);
    float _1539 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1525);
    uvec4 _1543 = floatBitsToUint(cbInstanceData._m0[_439 + 5u]);
    uint _1545 = _1543.x * 14u;
    uint _1546 = _1545 + 13u;
    float _1553 = _480 + (-1.0);
    float _1558 = (cbLight._m0[_1546].x * _1553) + 1.0;
    float _1559 = (cbLight._m0[_1546].y * _1553) + 1.0;
    float _1560 = (cbLight._m0[_1546].z * _1553) + 1.0;
    float _1561 = (cbLight._m0[_1546].w * _1553) + 1.0;
    uint _1563 = _1545 + 4u;
    float _1575 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_308, _309, _310));
    float _1578 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
    float _1579 = cbLight._m0[_1563].x * _1537;
    float _1580 = cbLight._m0[_1563].y * _1538;
    float _1581 = cbLight._m0[_1563].z * _1539;
    uint _1582 = _1545 + 5u;
    float _1594 = dot(vec3(cbLight._m0[_1545 | 1u].xyz), vec3(_308, _309, _310));
    float _1597 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    float _1662;
    float _1663;
    float _1664;
    if (_312 == 0.0)
    {
        float _3928 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _3939 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1616 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * 0.3183098733425140380859375;
        float _1618 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * 0.3183098733425140380859375;
        _1662 = ((cbLight._m0[_1582].x * _1597) * _1618) + ((_1579 * _1578) * _1616);
        _1663 = ((_1597 * cbLight._m0[_1582].y) * _1618) + ((_1580 * _1578) * _1616);
        _1664 = ((_1597 * cbLight._m0[_1582].z) * _1618) + ((_1581 * _1578) * _1616);
    }
    else
    {
        float _1628 = _1575 + _312;
        float _1631 = (_312 * 2.0) + 1.0;
        float _1632 = (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) / _1631;
        float _1639 = _1594 + _312;
        float _1641 = (isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) / _1631;
        _1662 = (((_1641 * cbLight._m0[_1582].x) * _1597) + ((_1579 * _1632) * _1578)) * 0.3183098733425140380859375;
        _1663 = (((_1641 * cbLight._m0[_1582].y) * _1597) + ((_1580 * _1632) * _1578)) * 0.3183098733425140380859375;
        _1664 = (((_1641 * cbLight._m0[_1582].z) * _1597) + ((_1581 * _1632) * _1578)) * 0.3183098733425140380859375;
    }
    uvec4 _1669 = floatBitsToUint(cbLight._m0[_1545 + 12u]);
    bool _1671 = _1669.x == 0u;
    float _1704;
    float _1706;
    float _1708;
    if (_1671)
    {
        _1704 = _1662;
        _1706 = _1663;
        _1708 = _1664;
    }
    else
    {
        uint _1712 = _1545 + 6u;
        float _1728 = (dot(vec3(cbLight._m0[_1545 + 2u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1729 = _1728 * _1728;
        float _3960 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
        float _1730 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1731 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _1704 = (((cbLight._m0[_1712].x * 0.3183098733425140380859375) * _1730) * _1731) + _1662;
        _1706 = (((cbLight._m0[_1712].y * 0.3183098733425140380859375) * _1730) * _1731) + _1663;
        _1708 = (((cbLight._m0[_1712].z * 0.3183098733425140380859375) * _1730) * _1731) + _1664;
    }
    bool _1711 = _1669.y == 0u;
    float _1766;
    float _1768;
    float _1770;
    if (_1711)
    {
        _1766 = _1704;
        _1768 = _1706;
        _1770 = _1708;
    }
    else
    {
        uint _1952 = _1545 + 7u;
        float _1968 = (dot(vec3(cbLight._m0[_1545 + 3u].xyz), vec3(_308, _309, _310)) * 0.5) + 0.5;
        float _1969 = _1968 * _1968;
        float _3976 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1970 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1971 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _1766 = (((cbLight._m0[_1952].x * 0.3183098733425140380859375) * _1970) * _1971) + _1704;
        _1768 = (((cbLight._m0[_1952].y * 0.3183098733425140380859375) * _1970) * _1971) + _1706;
        _1770 = (((cbLight._m0[_1952].z * 0.3183098733425140380859375) * _1970) * _1971) + _1708;
    }
    uint _1775 = _1545 + 8u;
    float _1791 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1545].w)) * _311) * 0.949999988079071044921875);
    float _1792 = _1791 * _1791;
    float _1793 = cbLight._m0[_1545].x + _390;
    float _1794 = cbLight._m0[_1545].y + _391;
    float _1795 = cbLight._m0[_1545].z + _392;
    float _1799 = inversesqrt(dot(vec3(_1793, _1794, _1795), vec3(_1793, _1794, _1795)));
    float _1800 = _1799 * _1793;
    float _1801 = _1799 * _1794;
    float _1802 = _1799 * _1795;
    float _1803 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1545].xyz));
    float _3992 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
    float _1806 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _1807 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1808 = dot(vec3(_308, _309, _310), vec3(_1800, _1801, _1802));
    float _4014 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_1800, _1801, _1802));
    float _4025 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1792 * _1792;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1828 = exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0);
    float _1829 = 0.959999978542327880859375 - _462;
    float _1831 = 0.959999978542327880859375 - _463;
    float _1832 = 0.959999978542327880859375 - _464;
    float _1839 = 1.0 - _1792;
    float _1850 = (0.5 / (((_1807 * ((_1806 * _1839) + _1792)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1839) + _1792) * _1806))) * _1806;
    float _4036 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1852 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    float _1853 = isnan(1.0) ? _1558 : (isnan(_1558) ? 1.0 : min(_1558, 1.0));
    uint _1866 = _1545 | 1u;
    uint _1870 = _1545 + 9u;
    float _1884 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _311) * 0.949999988079071044921875);
    float _1885 = _1884 * _1884;
    float _1886 = cbLight._m0[_1866].x + _390;
    float _1887 = cbLight._m0[_1866].y + _391;
    float _1888 = cbLight._m0[_1866].z + _392;
    float _1892 = inversesqrt(dot(vec3(_1886, _1887, _1888), vec3(_1886, _1887, _1888)));
    float _1893 = _1892 * _1886;
    float _1894 = _1892 * _1887;
    float _1895 = _1892 * _1888;
    float _1896 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_1866].xyz));
    float _4052 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1899 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1900 = dot(vec3(_308, _309, _310), vec3(_1893, _1894, _1895));
    float _4063 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _1904 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_1893, _1894, _1895));
    float _4074 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1908 = _1885 * _1885;
    float _1912 = ((_1903 * _1903) * (_1908 + (-1.0))) + 1.0;
    float _1919 = exp2(log2(1.0 - (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) * 5.0);
    float _1926 = 1.0 - _1885;
    float _1936 = (0.5 / (((_1807 * ((_1899 * _1926) + _1885)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _1926) + _1885) * _1899))) * _1899;
    float _4085 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1938 = (isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1908 / ((_1912 * _1912) * 3.141590118408203125));
    float _1939 = isnan(1.0) ? _1559 : (isnan(_1559) ? 1.0 : min(_1559, 1.0));
    float _1949 = (((((_1919 * _1829) + _465) * cbLight._m0[_1870].x) * _1938) * _1939) + ((((cbLight._m0[_1775].x * _1537) * ((_1828 * _1829) + _465)) * _1852) * _1853);
    float _1950 = (((((_1919 * _1831) + _467) * cbLight._m0[_1870].y) * _1938) * _1939) + ((((cbLight._m0[_1775].y * _1538) * ((_1828 * _1831) + _467)) * _1852) * _1853);
    float _1951 = (((((_1919 * _1832) + _468) * cbLight._m0[_1870].z) * _1938) * _1939) + ((((cbLight._m0[_1775].z * _1539) * ((_1828 * _1832) + _468)) * _1852) * _1853);
    float _2007;
    float _2009;
    float _2011;
    if (_1671)
    {
        _2007 = _1949;
        _2009 = _1950;
        _2011 = _1951;
    }
    else
    {
        uint _2013 = _1545 + 2u;
        uint _2017 = _1545 + 10u;
        float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _311) * 0.949999988079071044921875);
        float _2032 = _2031 * _2031;
        float _2033 = cbLight._m0[_2013].x + _390;
        float _2034 = cbLight._m0[_2013].y + _391;
        float _2035 = cbLight._m0[_2013].z + _392;
        float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
        float _2040 = _2039 * _2033;
        float _2041 = _2039 * _2034;
        float _2042 = _2039 * _2035;
        float _2043 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2013].xyz));
        float _4101 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
        float _2046 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _2047 = dot(vec3(_308, _309, _310), vec3(_2040, _2041, _2042));
        float _4112 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
        float _2050 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
        float _2051 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2040, _2041, _2042));
        float _4123 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
        float _2055 = _2032 * _2032;
        float _2059 = ((_2050 * _2050) * (_2055 + (-1.0))) + 1.0;
        float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * 5.0);
        float _2073 = 1.0 - _2032;
        float _2083 = (0.5 / (((_1807 * ((_2046 * _2073) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _2073) + _2032) * _2046))) * _2046;
        float _4134 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2085 = (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0))) * (_2055 / ((_2059 * _2059) * 3.141590118408203125));
        float _2086 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
        _2007 = (((((_2066 * _1829) + _465) * cbLight._m0[_2017].x) * _2085) * _2086) + _1949;
        _2009 = (((((_2066 * _1831) + _467) * cbLight._m0[_2017].y) * _2085) * _2086) + _1950;
        _2011 = (((((_2066 * _1832) + _468) * cbLight._m0[_2017].z) * _2085) * _2086) + _1951;
    }
    float _2117;
    float _2119;
    float _2121;
    if (_1711)
    {
        _2117 = _2007;
        _2119 = _2009;
        _2121 = _2011;
    }
    else
    {
        uint _2128 = _1545 + 3u;
        uint _2132 = _1545 + 11u;
        float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _311) * 0.949999988079071044921875);
        float _2147 = _2146 * _2146;
        float _2148 = cbLight._m0[_2128].x + _390;
        float _2149 = cbLight._m0[_2128].y + _391;
        float _2150 = cbLight._m0[_2128].z + _392;
        float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
        float _2155 = _2154 * _2148;
        float _2156 = _2154 * _2149;
        float _2157 = _2154 * _2150;
        float _2158 = dot(vec3(_308, _309, _310), vec3(cbLight._m0[_2128].xyz));
        float _4150 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
        float _2161 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2162 = dot(vec3(_308, _309, _310), vec3(_2155, _2156, _2157));
        float _4161 = isnan(0.0) ? _2162 : (isnan(_2162) ? 0.0 : max(_2162, 0.0));
        float _2165 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _2166 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2155, _2156, _2157));
        float _4172 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2170 = _2147 * _2147;
        float _2174 = ((_2165 * _2165) * (_2170 + (-1.0))) + 1.0;
        float _2181 = exp2(log2(1.0 - (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0)))) * 5.0);
        float _2188 = 1.0 - _2147;
        float _2198 = (0.5 / (((_1807 * ((_2161 * _2188) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_1807 * _2188) + _2147) * _2161))) * _2161;
        float _4183 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2200 = (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2170 / ((_2174 * _2174) * 3.141590118408203125));
        float _2201 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
        _2117 = (((((_2181 * _1829) + _465) * cbLight._m0[_2132].x) * _2200) * _2201) + _2007;
        _2119 = (((((_2181 * _1831) + _467) * cbLight._m0[_2132].y) * _2200) * _2201) + _2009;
        _2121 = (((((_2181 * _1832) + _468) * cbLight._m0[_2132].z) * _2200) * _2201) + _2011;
    }
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    if (_1543.y == 0u)
    {
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2250;
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2250;
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2250;
        uvec4 _2265 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2266 = _2265.x;
        uint _2277 = uint((float(_2265.y) * floor(float(uint(cbSceneParam._m0[85u].y * _399) / _2266))) + floor(float(uint(cbSceneParam._m0[85u].x * _398) / _2266)));
        float _2287 = (log2(_2253 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2288 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
        uint _2291 = uint(isnan(14.0) ? _2288 : (isnan(_2288) ? 14.0 : min(_2288, 14.0)));
        uvec4 _2296 = texelFetch(g_lightClusterGridBuffer, int(((_2291 << 2u) + (_2277 << 6u)) >> 2u));
        uint _2297 = _2296.x;
        uint _2298 = _2265.z;
        float _2323;
        float _2325;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        if (((((1u << ((_2298 >> 4u) & 15u)) + 4294967295u) & _2297) == 0u) || ((_2298 & 240u) == 0u))
        {
            _2323 = 0.0;
            _2325 = 0.0;
            _2327 = 0.0;
            _2329 = 0.0;
            _2331 = 0.0;
            _2333 = 0.0;
        }
        else
        {
            float _2324;
            float _2326;
            float _2328;
            float _2330;
            float _2332;
            float _2334;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            float _2510 = 0.0;
            uint _2511 = 0u;
            uint _2520;
            bool _2521;
            for (;;)
            {
                _2520 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2511 << 2u)) >> 2u)).x;
                _2521 = _2520 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2521)
                {
                    frontier_phi_64_pred = _2508;
                    frontier_phi_64_pred_1 = _2510;
                    frontier_phi_64_pred_2 = _2509;
                    frontier_phi_64_pred_3 = _2507;
                    frontier_phi_64_pred_4 = _2506;
                    frontier_phi_64_pred_5 = _2505;
                }
                else
                {
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    float _2687;
                    uint _2688;
                    _2682 = _2505;
                    _2683 = _2506;
                    _2684 = _2507;
                    _2685 = _2508;
                    _2686 = _2509;
                    _2687 = _2510;
                    _2688 = _2520;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    for (;;)
                    {
                        uint _2692 = uint(findLSB(_2688)) + (_2511 << 5u);
                        uint _2689 = (_2688 + 4294967295u) & _2688;
                        uint _2694 = _2692 * 48u;
                        vec4 _2708 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2694)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2694 + 3u)).x));
                        uint _2714 = (_2692 * 48u) + 4u;
                        vec4 _2727 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2714)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2714 + 3u)).x));
                        float _2728 = _2727.x;
                        float _2729 = _2727.y;
                        float _2730 = _2727.z;
                        uint _2733 = (_2692 * 48u) + 8u;
                        vec3 _2744 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2733)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2733 + 2u)).x));
                        uint _2749 = (_2692 * 48u) + 12u;
                        vec2 _2757 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2749)).x, texelFetch(g_PointLightRenderingBuffer, int(_2749 + 1u)).x));
                        float _2763 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
                        float _2764 = _2763 * _2251;
                        float _2765 = _2763 * _2252;
                        float _2766 = _2763 * _2253;
                        float _2767 = _2708.x - _2251;
                        float _2768 = _2708.y - _2252;
                        float _2769 = _2708.z - _2253;
                        float _2770 = dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769));
                        float _2773 = inversesqrt(_2770);
                        float _2774 = _2773 * _2767;
                        float _2775 = _2773 * _2768;
                        float _2776 = _2773 * _2769;
                        float _2777 = dot(vec3(_420, _423, _426), vec3(_2774, _2775, _2776));
                        float _2782 = 1.0 - (_2770 * _2708.w);
                        float _4209 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
                        float _2783 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2784 = sqrt(_2770) * _2727.w;
                        float _2787 = 1.39999997615814208984375 / (_2784 + 1.39999997615814208984375);
                        float _2788 = _2787 * _2787;
                        float _2789 = 1.0 - _2788;
                        float _2791 = (_2789 * _2789) * _312;
                        float _2794 = ((_2789 * _2777) + _2788) + _2791;
                        float _2799 = _2784 * _2784;
                        float _2804 = ((isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0))) * _2783) / (((_2791 * 2.0) + 1.0) * ((_2799 * 0.699999988079071044921875) + 1.0));
                        float _2808 = dot(vec3(_2774, _2775, _2776), vec3(_2764, _2765, _2766));
                        float _4225 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2815 = dot(vec3((-0.0) - _2764, (-0.0) - _2765, (-0.0) - _2766), vec3(_420, _423, _426)) + 1.0;
                        float _2817 = (isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0))) * 0.5;
                        float _2824 = ((_2817 * _2817) * _2757.x) * exp2((_2757.y * 32.0) * log2(isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0))));
                        float _2826 = _312 / (_312 + 1.0);
                        float _2842 = (-0.0) - _2251;
                        float _2843 = (-0.0) - _2252;
                        float _2844 = (-0.0) - _2253;
                        float _2848 = inversesqrt(dot(vec3(_2842, _2843, _2844), vec3(_2842, _2843, _2844)));
                        float _2849 = _2848 * _2842;
                        float _2850 = _2848 * _2843;
                        float _2851 = _2848 * _2844;
                        float _2859 = exp2(log2(1.0 / ((_2799 * 3.5) + 5.0)) * 0.25);
                        float _2860 = 1.0 - _496;
                        float _2867 = sqrt(1.0 - ((1.0 - (_2860 * _2860)) * (1.0 - (_2859 * _2859))));
                        float _2868 = _2867 * _2867;
                        float _2869 = _2868 * _2868;
                        float _2870 = _2849 + _2774;
                        float _2871 = _2850 + _2775;
                        float _2872 = _2851 + _2776;
                        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
                        float _2880 = dot(vec3(_420, _423, _426), vec3(_2849, _2850, _2851));
                        float _4241 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2883 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2884 = dot(vec3(_420, _423, _426), vec3(_2876 * _2870, _2876 * _2871, _2876 * _2872));
                        float _4252 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2887 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2891 = ((_2887 * _2887) * (_2869 + (-1.0))) + 1.0;
                        float _2892 = _2787 * _2868;
                        float _2893 = _2892 * _2892;
                        float _2896 = ((1.0 - _2893) * _2777) + _2893;
                        float _4263 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2898 = 1.0 - _2868;
                        float _2908 = (0.5 / (((_2897 * ((_2883 * _2898) + _2868)) + 9.9999999392252902907785028219223e-09) + (((_2897 * _2898) + _2868) * _2883))) * _2897;
                        float _4274 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2919 = (((_2869 * 3.1415927410125732421875) * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) / ((_2891 * _2891) * ((_2799 * 2.1991131305694580078125) + 3.141590118408203125))) * _2783;
                        _2616 = (((((_2728 * 0.3183098733425140380859375) * _2826) * _2824) + _2728) * _2804) + _2685;
                        _2617 = (((((_2729 * 0.3183098733425140380859375) * _2826) * _2824) + _2729) * _2804) + _2686;
                        _2618 = (((((_2730 * 0.3183098733425140380859375) * _2826) * _2824) + _2730) * _2804) + _2687;
                        _2613 = (_2919 * _2744.x) + _2682;
                        _2614 = (_2919 * _2744.y) + _2683;
                        _2615 = (_2919 * _2744.z) + _2684;
                        if (_2689 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2682 = _2613;
                            _2683 = _2614;
                            _2684 = _2615;
                            _2685 = _2616;
                            _2686 = _2617;
                            _2687 = _2618;
                            _2688 = _2689;
                        }
                    }
                    frontier_phi_64_pred = _2616;
                    frontier_phi_64_pred_1 = _2618;
                    frontier_phi_64_pred_2 = _2617;
                    frontier_phi_64_pred_3 = _2615;
                    frontier_phi_64_pred_4 = _2614;
                    frontier_phi_64_pred_5 = _2613;
                }
                _2330 = frontier_phi_64_pred;
                _2334 = frontier_phi_64_pred_1;
                _2332 = frontier_phi_64_pred_2;
                _2328 = frontier_phi_64_pred_3;
                _2326 = frontier_phi_64_pred_4;
                _2324 = frontier_phi_64_pred_5;
                uint _2512 = _2511 + 1u;
                if (_2512 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2505 = _2324;
                    _2506 = _2326;
                    _2507 = _2328;
                    _2508 = _2330;
                    _2509 = _2332;
                    _2510 = _2334;
                    _2511 = _2512;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2323 = _2324;
            _2325 = _2326;
            _2327 = _2328;
            _2329 = _2330;
            _2331 = _2332;
            _2333 = _2334;
        }
        uvec4 _2337 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2338 = _2337.z;
        uint _2340 = (_2338 >> 8u) & 15u;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        float _2481;
        float _2483;
        if (((4294967295u << _2340) & _2297) == 0u)
        {
            _2473 = _2323;
            _2475 = _2325;
            _2477 = _2327;
            _2479 = _2329;
            _2481 = _2331;
            _2483 = _2333;
        }
        else
        {
            float _2498 = inversesqrt(dot(vec3(_2251, _2252, _2253), vec3(_2251, _2252, _2253)));
            float _2499 = _2498 * _2251;
            float _2500 = _2498 * _2252;
            float _2501 = _2498 * _2253;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2340 < ((_2338 >> 12u) & 15u))
            {
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2482;
                float _2484;
                float _2665 = _2323;
                float _2666 = _2325;
                float _2667 = _2327;
                float _2668 = _2329;
                float _2669 = _2331;
                float _2670 = _2333;
                uint _2671 = _2340;
                uint _2680;
                bool _2681;
                for (;;)
                {
                    _2680 = texelFetch(g_lightClassification, int((((_2291 << 5u) + (_2277 << 9u)) + (_2671 << 2u)) >> 2u)).x;
                    _2681 = _2680 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2681)
                    {
                        frontier_phi_72_pred = _2670;
                        frontier_phi_72_pred_1 = _2669;
                        frontier_phi_72_pred_2 = _2668;
                        frontier_phi_72_pred_3 = _2667;
                        frontier_phi_72_pred_4 = _2666;
                        frontier_phi_72_pred_5 = _2665;
                    }
                    else
                    {
                        float _2962;
                        float _2963;
                        float _2964;
                        float _2965;
                        float _2966;
                        float _2967;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _2975 = _2665;
                        float _2976 = _2666;
                        float _2977 = _2667;
                        float _2978 = _2668;
                        float _2979 = _2669;
                        float _2980 = _2670;
                        uint _2981 = _2680;
                        uint _2982;
                        vec4 _3007;
                        float _3008;
                        vec4 _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        vec3 _3038;
                        vec2 _3047;
                        vec4 _3063;
                        vec4 _3079;
                        float _3126;
                        bool _3127;
                        for (;;)
                        {
                            uint _2992 = ((_2671 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2981));
                            _2982 = (_2981 + 4294967295u) & _2981;
                            uint _2994 = _2992 * 40u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            _3008 = _3007.w;
                            uint _3010 = (_2992 * 40u) + 4u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            _3024 = _3023.x;
                            _3025 = _3023.y;
                            _3026 = _3023.z;
                            uint _3028 = (_2992 * 40u) + 8u;
                            _3038 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x));
                            uint _3040 = (_2992 * 40u) + 12u;
                            _3047 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x));
                            uint _3050 = (_2992 * 40u) + 16u;
                            _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            uint _3066 = (_2992 * 40u) + 20u;
                            _3079 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3066)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3066 + 3u)).x));
                            uint _3082 = (_2992 * 40u) + 24u;
                            vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3082 + 3u)).x));
                            uint _3101 = (_2992 * 40u) + 28u;
                            vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3101 + 3u)).x));
                            _3126 = fma(_2253, _3114.z, fma(_2252, _3114.y, _3114.x * _2251)) + _3114.w;
                            _3127 = !((fma(_2253, _3095.z, fma(_2252, _3095.y, _3095.x * _2251)) + _3095.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3127)
                            {
                                float _3153 = _3007.x - _2251;
                                float _3154 = _3007.y - _2252;
                                float _3155 = _3007.z - _2253;
                                float _3156 = dot(vec3(_3153, _3154, _3155), vec3(_3153, _3154, _3155));
                                float _3159 = inversesqrt(_3156);
                                float _3160 = _3159 * _3153;
                                float _3161 = _3159 * _3154;
                                float _3162 = _3159 * _3155;
                                float _3166 = 1.0 - (_3156 / (_3008 * _3008));
                                float _4285 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3171 = sqrt(_3156) * _3023.w;
                                float _3173 = 1.39999997615814208984375 / (_3171 + 1.39999997615814208984375);
                                float _3174 = _3173 * _3173;
                                float _3175 = 1.0 - _3174;
                                float _3177 = (_3175 * _3175) * _312;
                                float _3180 = ((_3175 * dot(vec3(_3160, _3161, _3162), vec3(_420, _423, _426))) + _3174) + _3177;
                                float _3185 = _3171 * _3171;
                                float _3190 = (fma(_2253, _3063.z, fma(_2252, _3063.y, _3063.x * _2251)) + _3063.w) / _3126;
                                float _3191 = (fma(_2253, _3079.z, fma(_2252, _3079.y, _3079.x * _2251)) + _3079.w) / _3126;
                                float _3195 = 1.0 - dot(vec2(_3190, _3191), vec2(_3190, _3191));
                                float _4301 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3197 = _3196 * (((isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0))) * _3167) / (((_3177 * 2.0) + 1.0) * ((_3185 * 0.699999988079071044921875) + 1.0)));
                                float _3198 = (-0.0) - _2499;
                                float _3199 = (-0.0) - _2500;
                                float _3200 = (-0.0) - _2501;
                                float _3201 = dot(vec3(_3160, _3161, _3162), vec3(_2499, _2500, _2501));
                                float _4312 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3208 = dot(vec3(_3198, _3199, _3200), vec3(_420, _423, _426)) + 1.0;
                                float _3210 = (isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0))) * 0.5;
                                float _3217 = ((_3210 * _3210) * _3047.x) * exp2((_3047.y * 32.0) * log2(isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0))));
                                float _3219 = _312 / (_312 + 1.0);
                                float _3240 = exp2(log2(1.0 / ((_3185 * 3.5) + 5.0)) * 0.25);
                                float _3241 = 1.0 - _496;
                                float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                                float _3249 = _3248 * _3248;
                                float _3250 = _3249 * _3249;
                                float _3251 = _3160 - _2499;
                                float _3252 = _3161 - _2500;
                                float _3253 = _3162 - _2501;
                                float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                                float _3261 = dot(vec3(_420, _423, _426), vec3(_3198, _3199, _3200));
                                float _4328 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3264 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3265 = dot(vec3(_420, _423, _426), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                                float _4339 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                                float _3273 = _3173 * _3249;
                                float _3274 = _3273 * _3273;
                                float _3280 = ((1.0 - _3274) * dot(vec3(_420, _423, _426), vec3(_3160, _3161, _3162))) + _3274;
                                float _4350 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3282 = 1.0 - _3249;
                                float _3292 = (0.5 / (((_3281 * ((_3264 * _3282) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3249) * _3264))) * _3281;
                                float _4361 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3302 = (_3196 * _3167) * (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) / ((_3272 * _3272) * ((_3185 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_3026 * 0.3183098733425140380859375) * _3219) * _3217) + _3026) * _3197;
                                frontier_phi_78_pred_1 = ((((_3025 * 0.3183098733425140380859375) * _3219) * _3217) + _3025) * _3197;
                                frontier_phi_78_pred_2 = ((((_3024 * 0.3183098733425140380859375) * _3219) * _3217) + _3024) * _3197;
                                frontier_phi_78_pred_3 = _3302 * _3038.z;
                                frontier_phi_78_pred_4 = _3302 * _3038.y;
                                frontier_phi_78_pred_5 = _3302 * _3038.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3311 = frontier_phi_78_pred;
                            _3310 = frontier_phi_78_pred_1;
                            _3309 = frontier_phi_78_pred_2;
                            _3308 = frontier_phi_78_pred_3;
                            _3307 = frontier_phi_78_pred_4;
                            _3306 = frontier_phi_78_pred_5;
                            _2965 = _3309 + _2978;
                            _2966 = _3310 + _2979;
                            _2967 = _3311 + _2980;
                            _2962 = _3306 + _2975;
                            _2963 = _3307 + _2976;
                            _2964 = _3308 + _2977;
                            if (_2982 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2975 = _2962;
                                _2976 = _2963;
                                _2977 = _2964;
                                _2978 = _2965;
                                _2979 = _2966;
                                _2980 = _2967;
                                _2981 = _2982;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2967;
                        frontier_phi_72_pred_1 = _2966;
                        frontier_phi_72_pred_2 = _2965;
                        frontier_phi_72_pred_3 = _2964;
                        frontier_phi_72_pred_4 = _2963;
                        frontier_phi_72_pred_5 = _2962;
                    }
                    _2484 = frontier_phi_72_pred;
                    _2482 = frontier_phi_72_pred_1;
                    _2480 = frontier_phi_72_pred_2;
                    _2478 = frontier_phi_72_pred_3;
                    _2476 = frontier_phi_72_pred_4;
                    _2474 = frontier_phi_72_pred_5;
                    uint _2672 = _2671 + 1u;
                    if (_2672 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2665 = _2474;
                        _2666 = _2476;
                        _2667 = _2478;
                        _2668 = _2480;
                        _2669 = _2482;
                        _2670 = _2484;
                        _2671 = _2672;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2478;
                frontier_phi_58_59_ladder_1 = _2484;
                frontier_phi_58_59_ladder_2 = _2482;
                frontier_phi_58_59_ladder_3 = _2480;
                frontier_phi_58_59_ladder_4 = _2476;
                frontier_phi_58_59_ladder_5 = _2474;
            }
            else
            {
                frontier_phi_58_59_ladder = _2327;
                frontier_phi_58_59_ladder_1 = _2333;
                frontier_phi_58_59_ladder_2 = _2331;
                frontier_phi_58_59_ladder_3 = _2329;
                frontier_phi_58_59_ladder_4 = _2325;
                frontier_phi_58_59_ladder_5 = _2323;
            }
            _2473 = frontier_phi_58_59_ladder_5;
            _2475 = frontier_phi_58_59_ladder_4;
            _2477 = frontier_phi_58_59_ladder;
            _2479 = frontier_phi_58_59_ladder_3;
            _2481 = frontier_phi_58_59_ladder_2;
            _2483 = frontier_phi_58_59_ladder_1;
        }
        float _2488 = isnan(1.0) ? _480 : (isnan(_480) ? 1.0 : min(_480, 1.0));
        _2310 = (_2488 * _2479) + _1766;
        _2312 = (_2488 * _2481) + _1768;
        _2314 = (_2488 * _2483) + _1770;
        _2316 = ((_2473 * _465) * _2488) + _2117;
        _2318 = ((_2475 * _467) * _2488) + _2119;
        _2320 = ((_2477 * _468) * _2488) + _2121;
    }
    else
    {
        _2310 = _1766;
        _2312 = _1768;
        _2314 = _1770;
        _2316 = _2117;
        _2318 = _2119;
        _2320 = _2121;
    }
    float _2412;
    float _2413;
    float _2414;
    if (_312 > 0.0)
    {
        uint _2344 = _1545 + 4u;
        float _2350 = (-0.0) - _390;
        float _2352 = (-0.0) - _391;
        float _2353 = (-0.0) - _392;
        float _2354 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_2350, _2352, _2353));
        float _4377 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2358 = _491 + 1.0;
        float _2360 = (isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0))) * 0.5;
        float _2365 = _2360 * _2360;
        float _2366 = _2365 * exp2(log2(isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0))) * 32.0);
        float _2368 = _312 / (_312 + 1.0);
        float _2369 = isnan(_1558) ? 1.0 : (isnan(1.0) ? _1558 : min(1.0, _1558));
        uint _2382 = _1545 + 5u;
        float _2388 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2350, _2352, _2353));
        float _4398 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2395 = _2365 * exp2(log2(isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0))) * 32.0);
        float _2396 = isnan(_1559) ? 1.0 : (isnan(1.0) ? _1559 : min(1.0, _1559));
        _2412 = ((((_2395 * cbLight._m0[_2382].x) * _2368) * _2396) + ((((cbLight._m0[_2344].x * _1537) * _2366) * _2368) * _2369)) * 0.3183098733425140380859375;
        _2413 = ((((_2395 * cbLight._m0[_2382].y) * _2368) * _2396) + ((((cbLight._m0[_2344].y * _1538) * _2366) * _2368) * _2369)) * 0.3183098733425140380859375;
        _2414 = ((((_2395 * cbLight._m0[_2382].z) * _2368) * _2396) + ((((cbLight._m0[_2344].z * _1539) * _2366) * _2368) * _2369)) * 0.3183098733425140380859375;
    }
    else
    {
        _2412 = 0.0;
        _2413 = 0.0;
        _2414 = 0.0;
    }
    float _4414 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4425 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4436 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    uint _2436 = _439 + 6u;
    float _2444 = _398 / cbSceneParam._m0[86u].x;
    float _2445 = _399 / cbSceneParam._m0[86u].y;
    vec4 _2459 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2444, _2445, (log2((isnan(cbSceneParam._m0[77u].w) ? _332 : (isnan(_332) ? cbSceneParam._m0[77u].w : min(_332, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2461 = _2459.x;
    float _2462 = _2459.y;
    float _2463 = _2459.z;
    float _2464 = _2459.w;
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    if (_332 > cbSceneParam._m0[78u].w)
    {
        float _2526 = isnan(_332) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _332 : min(cbSceneParam._m0[80u].w, _332));
        float _2527 = _2526 / _332;
        float _2538 = _2527 * _383;
        float _2539 = _384 * _2527;
        float _2540 = (-0.0) - _2539;
        float _2541 = _2527 * _385;
        float _2543 = (cbSceneParam._m0[77u].w * _2540) / _2526;
        float _2544 = _2543 + cbSceneParam._m0[79u].w;
        float _2545 = cbSceneParam._m0[79u].w - _2539;
        float _2551 = sqrt(((_2538 * _2538) + (_2539 * _2539)) + (_2541 * _2541));
        float _2554 = (1.0 - (cbSceneParam._m0[77u].w / _2526)) * _2551;
        float _2559 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2561 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2924;
        if (abs((_2540 - _2543) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2924 = ((((_2544 > 0.0) ? exp2(_2559 * _2544) : (2.0 - exp2(_2561 * _2544))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2554;
        }
        else
        {
            float _2638 = 1.0 / cbSceneParam._m0[80u].x;
            float _2639 = isnan(_2545) ? _2544 : (isnan(_2544) ? _2545 : max(_2544, _2545));
            float _2640 = isnan(_2545) ? _2544 : (isnan(_2544) ? _2545 : min(_2544, _2545));
            float _2649 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : min(_2639, 0.0));
            float _2650 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : min(_2640, 0.0));
            _2924 = ((abs(_2551 / _2540) * cbSceneParam._m0[80u].y) * ((((_2649 - _2650) * 2.0) - ((exp2(_2559 * (isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0)))) - exp2(_2559 * (isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0))))) * _2638)) - ((exp2(_2561 * _2649) - exp2(_2561 * _2650)) * _2638))) + (_2554 * cbSceneParam._m0[80u].z);
        }
        vec4 _2926 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2444, _2445, 1.0), 0.0);
        float _2935 = exp2((_2924 * (-1.44269502162933349609375)) * (1.0 - _2926.w));
        float _2936 = log2(_2935);
        float _2952 = log2(_2464);
        _2563 = (exp2(_2952 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].x)) * _2926.x) / cbSceneParam._m0[78u].x)) + _2461;
        _2565 = (exp2(_2952 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].y)) * _2926.y) / cbSceneParam._m0[78u].y)) + _2462;
        _2567 = (exp2(_2952 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2936 * cbSceneParam._m0[78u].z)) * _2926.z) / cbSceneParam._m0[78u].z)) + _2463;
        _2569 = _2935 * _2464;
    }
    else
    {
        _2563 = _2461;
        _2565 = _2462;
        _2567 = _2463;
        _2569 = _2464;
    }
    float _2581 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2582 = _2581 == 3.0;
    float _2583 = log2(_2569);
    float _2590 = exp2(_2583 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * ((_2310 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _480)) + _2412)) + ((_2316 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2591 = exp2(_2583 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * ((_2312 + ((isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0))) * _480)) + _2413)) + ((_2318 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2592 = exp2(_2583 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * ((_2314 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _480)) + _2414)) + ((_2320 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1290)) * cbPerFrame._m0[3u].x));
    float _2601 = (_2581 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2601 * (_2582 ? _2590 : (_2590 + (cbSceneParam._m0[72u].w * _2563)));
    SV_Target.y = _2601 * (_2582 ? _2591 : (_2591 + (cbSceneParam._m0[72u].w * _2565)));
    SV_Target.z = _2601 * (_2582 ? _2592 : (_2592 + (cbSceneParam._m0[72u].w * _2567)));
    SV_Target.w = cbInstanceData._m0[_2436].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2436].w;
}


