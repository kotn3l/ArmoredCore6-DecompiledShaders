#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _822;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3650 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0))));
    vec4 _273 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _280 = cbMtdParam._m0[10u].x * _273.x;
    float _283 = fma(_261, _194 * NORMAL.x, fma(_254, _201 * TANGENT.x, (_187 * _180) * _252));
    float _286 = fma(_261, _194 * NORMAL.y, fma(_254, _201 * TANGENT.y, (_187 * _181) * _252));
    float _289 = fma(_261, _194 * NORMAL.z, fma(_254, _201 * TANGENT.z, (_187 * _182) * _252));
    float _293 = inversesqrt(dot(vec3(_283, _286, _289), vec3(_283, _286, _289)));
    float _294 = _293 * _283;
    float _295 = _293 * _286;
    float _296 = _293 * _289;
    float _3661 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _297 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _298 = isnan(0.0) ? _280 : (isnan(_280) ? 0.0 : max(_280, 0.0));
    float _3677 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3688 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3699 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _317 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _358 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _368 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _358);
    float _369 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _358);
    float _370 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _358);
    float _374 = inversesqrt(dot(vec3(_368, _369, _370), vec3(_368, _369, _370)));
    float _375 = _368 * _374;
    float _376 = _369 * _374;
    float _377 = _370 * _374;
    float _383 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _384 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _405 = fma(_296, cbSceneParam._m0[5u].z, fma(_295, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _294));
    float _408 = fma(_296, cbSceneParam._m0[6u].z, fma(_295, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _294));
    float _411 = fma(_296, cbSceneParam._m0[7u].z, fma(_295, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _294));
    uint _424 = uint(roundEven(NORMAL.w)) * 13u;
    uint _427 = (_424 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _433 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_427].x;
    float _434 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0)))) * cbInstanceData._m0[_427].y;
    float _435 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0)))) * cbInstanceData._m0[_427].z;
    float _3710 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _436 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _437 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _435 : (isnan(_435) ? 0.0 : max(_435, 0.0));
    float _438 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    vec4 _447 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _383, cbSceneParam._m0[86u].y * _384));
    float _450 = _447.x * TEXCOORD.z;
    float _451 = dot(vec3(_294, _295, _296), vec3(_375, _376, _377));
    float _454 = _451 * 2.0;
    float _458 = (_454 * _294) - _375;
    float _459 = (_454 * _295) - _376;
    float _460 = (_454 * _296) - _377;
    float _461 = dot(vec3(_375, _376, _377), vec3(_294, _295, _296));
    float _464 = abs(_461);
    float _3743 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _466 = sqrt(_297);
    float _479 = exp2((_466 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_466 * 3.0));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _821;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _546 = fma(_519, cbModelParam._m0[26u].z, fma(_515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511));
        float _550 = fma(_519, cbModelParam._m0[27u].z, fma(_515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511));
        float _554 = fma(_519, cbModelParam._m0[28u].z, fma(_515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511));
        float _579 = _511 + _294;
        float _580 = _515 + _295;
        float _581 = _519 + _296;
        float _591 = fma(_581, cbModelParam._m0[26u].z, fma(_580, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _579)) - _546;
        float _592 = fma(_581, cbModelParam._m0[27u].z, fma(_580, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _579)) - _550;
        float _593 = fma(_581, cbModelParam._m0[28u].z, fma(_580, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _579)) - _554;
        float _597 = inversesqrt(dot(vec3(_591, _592, _593), vec3(_591, _592, _593)));
        float _610 = ((_597 * _591) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_546 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _611 = ((_597 * _592) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_550 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _612 = ((_597 * _593) / cbModelParam._m0[34u].z) + ((((((_554 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_610, _611, _612), 0.0);
        float _649 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _650 = _649 * (_615.x + (-0.5));
        float _651 = _649 * (_615.y + (-0.5));
        float _652 = _649 * (_615.z + (-0.5));
        float _659 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _660 = _659 * (_622.x + (-0.5));
        float _661 = _659 * (_622.y + (-0.5));
        float _662 = _659 * (_622.z + (-0.5));
        float _669 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _670 = _669 * (_629.x + (-0.5));
        float _671 = _669 * (_629.y + (-0.5));
        float _672 = _669 * (_629.z + (-0.5));
        float _679 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _680 = _679 * (_636.x + (-0.5));
        float _681 = _679 * (_636.y + (-0.5));
        float _682 = _679 * (_636.z + (-0.5));
        float _683 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
        float _684 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _685 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
        float _686 = _650 * 0.5;
        float _687 = _660 * 0.5;
        float _688 = _670 * 0.5;
        float _689 = dot(vec3(_686, _687, _688), vec3(_686, _687, _688));
        float _694 = (_689 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_689);
        float _703 = (dot(vec3(_294, _295, _296), vec3(_694 * _686, _694 * _687, _694 * _688)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _713 = sqrt(((_687 * _687) + (_686 * _686)) + (_688 * _688)) / (_683 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _714 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _715 = _714 * 2.0;
        float _719 = (1.0 - _714) / (_714 + 1.0);
        float _3791 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _720 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _729 = ((((1.0 - _720) * (_715 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_715 + 1.0))) + _720) * _683;
        float _730 = _651 * 0.5;
        float _731 = _661 * 0.5;
        float _732 = _671 * 0.5;
        float _733 = dot(vec3(_730, _731, _732), vec3(_730, _731, _732));
        float _738 = (_733 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_733);
        float _746 = (dot(vec3(_294, _295, _296), vec3(_738 * _730, _738 * _731, _738 * _732)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        float _755 = sqrt(((_731 * _731) + (_730 * _730)) + (_732 * _732)) / (_684 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3824 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_757 + 1.0))) + _762) * _684;
        float _772 = _652 * 0.5;
        float _773 = _662 * 0.5;
        float _774 = _672 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_294, _295, _296), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_685 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3857 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_799 + 1.0))) + _804) * _685;
        _821 = _652;
        _823 = _651;
        _824 = _650;
        _825 = _662;
        _826 = _661;
        _827 = _660;
        _828 = _672;
        _829 = _671;
        _830 = _670;
        _831 = _685;
        _832 = _684;
        _833 = _683;
        _834 = cbModelParam._m0[36u].z * (isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0)));
        _835 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _836 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
    }
    else
    {
        _821 = _822;
        _823 = _822;
        _824 = _822;
        _825 = _822;
        _826 = _822;
        _827 = _822;
        _828 = _822;
        _829 = _822;
        _830 = _822;
        _831 = _822;
        _832 = _822;
        _833 = _822;
        _834 = 0.0;
        _835 = 0.0;
        _836 = 0.0;
    }
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _862 = fma(_519, cbModelParam._m0[30u].z, fma(_515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _511));
        float _866 = fma(_519, cbModelParam._m0[31u].z, fma(_515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _511));
        float _870 = fma(_519, cbModelParam._m0[32u].z, fma(_515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _511));
        float _893 = _511 + _294;
        float _894 = _515 + _295;
        float _895 = _519 + _296;
        float _905 = fma(_895, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _893)) - _862;
        float _906 = fma(_895, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _893)) - _866;
        float _907 = fma(_895, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _893)) - _870;
        float _911 = inversesqrt(dot(vec3(_905, _906, _907), vec3(_905, _906, _907)));
        float _924 = ((_911 * _905) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_862 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_911 * _906) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_866 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_911 * _907) / cbModelParam._m0[35u].z) + ((((((_870 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_924, _925, _926), 0.0);
        float _961 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_928.x + (-0.5));
        float _963 = _961 * (_928.y + (-0.5));
        float _964 = _961 * (_928.z + (-0.5));
        float _971 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_935.x + (-0.5));
        float _973 = _971 * (_935.y + (-0.5));
        float _974 = _971 * (_935.z + (-0.5));
        float _981 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_942.x + (-0.5));
        float _983 = _981 * (_942.y + (-0.5));
        float _984 = _981 * (_942.z + (-0.5));
        float _991 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _992 = _991 * (_949.x + (-0.5));
        float _993 = _991 * (_949.y + (-0.5));
        float _994 = _991 * (_949.z + (-0.5));
        float _995 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = _962 * 0.5;
        float _999 = _972 * 0.5;
        float _1000 = _982 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(_294, _295, _296), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_995 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3920 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1025 + 1.0))) + _1030) * _995;
        float _1040 = _963 * 0.5;
        float _1041 = _973 * 0.5;
        float _1042 = _983 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(_294, _295, _296), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3953 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1067 + 1.0))) + _1072) * _996;
        float _1082 = _964 * 0.5;
        float _1083 = _974 * 0.5;
        float _1084 = _984 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_294, _295, _296), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3986 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1109 + 1.0))) + _1114) * _997;
        _1131 = _964;
        _1132 = _963;
        _1133 = _962;
        _1134 = _974;
        _1135 = _973;
        _1136 = _972;
        _1137 = _984;
        _1138 = _983;
        _1139 = _982;
        _1140 = _997;
        _1141 = _996;
        _1142 = _995;
        _1143 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1144 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
        _1145 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
    }
    else
    {
        _1131 = _822;
        _1132 = _822;
        _1133 = _822;
        _1134 = _822;
        _1135 = _822;
        _1136 = _822;
        _1137 = _822;
        _1138 = _822;
        _1139 = _822;
        _1140 = _822;
        _1141 = _822;
        _1142 = _822;
        _1143 = 0.0;
        _1144 = 0.0;
        _1145 = 0.0;
    }
    float _1155 = (cbModelParam._m0[1u].x * (_1143 - _834)) + _834;
    float _1156 = (cbModelParam._m0[1u].x * (_1144 - _835)) + _835;
    float _1157 = (cbModelParam._m0[1u].x * (_1145 - _836)) + _836;
    float _1178 = fma(_1157, cbSceneParam._m0[89u].z, fma(_1156, cbSceneParam._m0[89u].y, _1155 * cbSceneParam._m0[89u].x));
    float _1181 = fma(_1157, cbSceneParam._m0[90u].z, fma(_1156, cbSceneParam._m0[90u].y, _1155 * cbSceneParam._m0[90u].x));
    float _1184 = fma(_1157, cbSceneParam._m0[91u].z, fma(_1156, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1155));
    float _1199 = _458 * 0.5;
    float _1200 = _459 * 0.5;
    float _1201 = _460 * 0.5;
    float _1202 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1133, _1136, _1139, _1142));
    float _1205 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1132, _1135, _1138, _1141));
    float _1208 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_1131, _1134, _1137, _1140));
    float _1242;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1215 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_821, _825, _828, _831));
        float _1219 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_823, _826, _829, _832));
        float _1223 = dot(vec4(_1199, _1200, _1201, 1.0), vec4(_824, _827, _830, _833));
        float _1230 = dot(vec4(cbModelParam._m0[39u]), vec4(_1199, _1200, _1201, 1.0));
        _1242 = dot(vec3(isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0)), isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1230) ? 0.0 : (isnan(0.0) ? _1230 : max(0.0, _1230))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1242 = 1.0;
    }
    float _1253;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1244 = dot(vec4(cbModelParam._m0[40u]), vec4(_1199, _1200, _1201, 1.0));
        _1253 = dot(vec3(isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)), isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)), isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1244) ? 0.0 : (isnan(0.0) ? _1244 : max(0.0, _1244))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1253 = 1.0;
    }
    float _1257 = (_1253 * cbModelParam._m0[1u].x) + (_1242 * (1.0 - cbModelParam._m0[1u].x));
    float _1267 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _297);
    float _1268 = isnan(_1267) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1267 : min(cbModelParam._m0[25u].z, _1267));
    float _1350;
    float _1352;
    float _1354;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1317 = fma(_519, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511)) + cbModelParam._m0[13u].w;
        float _1321 = fma(_519, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511)) + cbModelParam._m0[14u].w;
        float _1325 = fma(_519, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511)) + cbModelParam._m0[15u].w;
        float _1328 = fma(_460, cbModelParam._m0[13u].z, fma(_459, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _458));
        float _1331 = fma(_460, cbModelParam._m0[14u].z, fma(_459, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _458));
        float _1334 = fma(_460, cbModelParam._m0[15u].z, fma(_459, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _458));
        float _1362;
        if (_1328 > 0.0)
        {
            _1362 = abs((1.0 - _1317) / _1328);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1328 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1317 + 1.0) / _1328);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1362 = frontier_phi_14_12_ladder;
        }
        float _1536;
        if (_1331 > 0.0)
        {
            _1536 = abs((1.0 - _1321) / _1331);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1331 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1321 + 1.0) / _1331);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1536 = frontier_phi_23_19_ladder;
        }
        float _1807;
        if (_1334 > 0.0)
        {
            _1807 = abs((1.0 - _1325) / _1334);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1334 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1325 + 1.0) / _1334);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1807 = frontier_phi_35_30_ladder;
        }
        float _1809 = isnan(_1536) ? _1362 : (isnan(_1362) ? _1536 : min(_1362, _1536));
        float _1810 = isnan(_1807) ? _1809 : (isnan(_1809) ? _1807 : min(_1809, _1807));
        float _1814 = (_1810 * _1328) + _1317;
        float _1815 = (_1810 * _1331) + _1321;
        float _1816 = (_1810 * _1334) + _1325;
        float _1817 = _1810 * 9.9999997473787516355514526367188e-05;
        float _1819 = (-1.0) - _1817;
        float _1821 = _1817 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1816 > _1821) || ((_1816 < _1819) || ((_1815 > _1821) || ((_1815 < _1819) || ((_1814 < _1819) || (_1814 > _1821))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1970 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1816, cbModelParam._m0[9u].z, fma(_1815, cbModelParam._m0[9u].y, _1814 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1816, cbModelParam._m0[10u].z, fma(_1815, cbModelParam._m0[10u].y, _1814 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1816, cbModelParam._m0[11u].z, fma(_1815, cbModelParam._m0[11u].y, _1814 * cbModelParam._m0[11u].x))), _1268);
            frontier_phi_13_35_ladder = _1970.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1970.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1970.x * cbModelParam._m0[1u].y;
        }
        _1350 = frontier_phi_13_35_ladder_2;
        _1352 = frontier_phi_13_35_ladder_1;
        _1354 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1338 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_458, _459, _460), _1268);
        _1350 = _1338.x * cbModelParam._m0[1u].y;
        _1352 = _1338.y * cbModelParam._m0[1u].y;
        _1354 = _1338.z * cbModelParam._m0[1u].y;
    }
    float _1358 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _297);
    float _1359 = isnan(_1358) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1358 : min(cbModelParam._m0[25u].w, _1358));
    float _1452;
    float _1454;
    float _1456;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1416 = fma(_519, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511)) + cbModelParam._m0[21u].w;
        float _1420 = fma(_519, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511)) + cbModelParam._m0[22u].w;
        float _1424 = fma(_519, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511)) + cbModelParam._m0[23u].w;
        float _1427 = fma(_460, cbModelParam._m0[21u].z, fma(_459, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _458));
        float _1430 = fma(_460, cbModelParam._m0[22u].z, fma(_459, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _458));
        float _1433 = fma(_460, cbModelParam._m0[23u].z, fma(_459, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _458));
        float _1541;
        if (_1427 > 0.0)
        {
            _1541 = abs((1.0 - _1416) / _1427);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1416 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1541 = frontier_phi_25_21_ladder;
        }
        float _1834;
        if (_1430 > 0.0)
        {
            _1834 = abs((1.0 - _1420) / _1430);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1430 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1420 + 1.0) / _1430);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1834 = frontier_phi_37_32_ladder;
        }
        float _1988;
        if (_1433 > 0.0)
        {
            _1988 = abs((1.0 - _1424) / _1433);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1433 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1424 + 1.0) / _1433);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _1988 = frontier_phi_46_44_ladder;
        }
        float _1990 = isnan(_1834) ? _1541 : (isnan(_1541) ? _1834 : min(_1541, _1834));
        float _1991 = isnan(_1988) ? _1990 : (isnan(_1990) ? _1988 : min(_1990, _1988));
        float _1995 = (_1991 * _1427) + _1416;
        float _1996 = (_1991 * _1430) + _1420;
        float _1997 = (_1991 * _1433) + _1424;
        float _1998 = _1991 * 9.9999997473787516355514526367188e-05;
        float _1999 = (-1.0) - _1998;
        float _2001 = _1998 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_1997 > _2001) || ((_1997 < _1999) || ((_1996 > _2001) || ((_1996 < _1999) || ((_1995 < _1999) || (_1995 > _2001))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2067 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1997, cbModelParam._m0[17u].z, fma(_1996, cbModelParam._m0[17u].y, _1995 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1997, cbModelParam._m0[18u].z, fma(_1996, cbModelParam._m0[18u].y, _1995 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1997, cbModelParam._m0[19u].z, fma(_1996, cbModelParam._m0[19u].y, _1995 * cbModelParam._m0[19u].x))), _1359);
            frontier_phi_22_46_ladder = _2067.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2067.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2067.x * cbModelParam._m0[1u].z;
        }
        _1452 = frontier_phi_22_46_ladder_2;
        _1454 = frontier_phi_22_46_ladder_1;
        _1456 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1436 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_458, _459, _460), _1359);
        _1452 = _1436.x * cbModelParam._m0[1u].z;
        _1454 = _1436.y * cbModelParam._m0[1u].z;
        _1456 = _1436.z * cbModelParam._m0[1u].z;
    }
    float _1468 = ((((1.0 - _479) * ((_466 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_479 * _466)) * _450;
    float _1469 = _1468 * ((cbModelParam._m0[1u].w * (_1452 - _1350)) + _1350);
    float _1470 = _1468 * ((cbModelParam._m0[1u].w * (_1454 - _1352)) + _1352);
    float _1471 = _1468 * ((cbModelParam._m0[1u].w * (_1456 - _1354)) + _1354);
    float _1474 = fma(_1471, cbSceneParam._m0[89u].z, fma(_1470, cbSceneParam._m0[89u].y, _1469 * cbSceneParam._m0[89u].x));
    float _1477 = fma(_1471, cbSceneParam._m0[90u].z, fma(_1470, cbSceneParam._m0[90u].y, _1469 * cbSceneParam._m0[90u].x));
    float _1480 = fma(_1471, cbSceneParam._m0[91u].z, fma(_1470, cbSceneParam._m0[91u].y, _1469 * cbSceneParam._m0[91u].x));
    float _1515 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1519 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1523 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1527 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1528 = _1515 / _1527;
    float _1529 = _1519 / _1527;
    float _1530 = _1523 / _1527;
    float _1677;
    float _1678;
    float _1679;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1557 = ((uint(_1530 > cbSceneParam._m0[59u].y) + uint(_1530 > cbSceneParam._m0[59u].x)) + uint(_1530 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1558 = _1557 + 43u;
        uint _1566 = _1557 + 44u;
        uint _1574 = _1557 + 45u;
        uint _1582 = _1557 + 46u;
        float _1593 = fma(_1527, cbSceneParam._m0[_1558].w, fma(_1523, cbSceneParam._m0[_1558].z, fma(_1519, cbSceneParam._m0[_1558].y, _1515 * cbSceneParam._m0[_1558].x)));
        float _1597 = fma(_1527, cbSceneParam._m0[_1566].w, fma(_1523, cbSceneParam._m0[_1566].z, fma(_1519, cbSceneParam._m0[_1566].y, _1515 * cbSceneParam._m0[_1566].x)));
        float _1605 = fma(_1527, cbSceneParam._m0[_1582].w, fma(_1523, cbSceneParam._m0[_1582].z, fma(_1519, cbSceneParam._m0[_1582].y, _1515 * cbSceneParam._m0[_1582].x)));
        float _1610 = cbSceneParam._m0[33u].z * _1605;
        float _1612 = cbSceneParam._m0[33u].w * _1605;
        float _1615 = fma(_1527, cbSceneParam._m0[_1574].w, fma(_1523, cbSceneParam._m0[_1574].z, fma(_1519, cbSceneParam._m0[_1574].y, _1515 * cbSceneParam._m0[_1574].x))) / _1605;
        float _1663 = (cbSceneParam._m0[33u].x - sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530))) * cbSceneParam._m0[33u].y;
        float _4112 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1670 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1610 + _1593) / _1605, (_1612 + _1597) / _1605), _1615), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1612 + _1593) / _1605, (_1597 - _1610) / _1605), _1615), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1593 - _1610) / _1605, (_1597 - _1612) / _1605), _1615), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1593 - _1612) / _1605, (_1610 + _1597) / _1605), _1615), 0.0)).x), vec4(0.25)));
        _1677 = 1.0 - (_1670 * cbSceneParam._m0[34u].x);
        _1678 = 1.0 - (_1670 * cbSceneParam._m0[34u].y);
        _1679 = 1.0 - (_1670 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1677 = 1.0;
        _1678 = 1.0;
        _1679 = 1.0;
    }
    float _1743;
    float _1745;
    float _1747;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1731 = fma(_1527, cbSceneParam._m0[63u].w, fma(_1523, cbSceneParam._m0[63u].z, fma(_1519, cbSceneParam._m0[63u].y, _1515 * cbSceneParam._m0[63u].x)));
        float _1732 = fma(_1527, cbSceneParam._m0[60u].w, fma(_1523, cbSceneParam._m0[60u].z, fma(_1519, cbSceneParam._m0[60u].y, _1515 * cbSceneParam._m0[60u].x))) / _1731;
        float _1733 = fma(_1527, cbSceneParam._m0[61u].w, fma(_1523, cbSceneParam._m0[61u].z, fma(_1519, cbSceneParam._m0[61u].y, _1515 * cbSceneParam._m0[61u].x))) / _1731;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1732 >= cbSceneParam._m0[64u].x) && (_1733 >= cbSceneParam._m0[64u].y)) && (_1732 <= cbSceneParam._m0[64u].z)) && (_1733 <= cbSceneParam._m0[64u].w))
        {
            float _1847 = fma(_1527, cbSceneParam._m0[62u].w, fma(_1523, cbSceneParam._m0[62u].z, fma(_1519, cbSceneParam._m0[62u].y, _1515 * cbSceneParam._m0[62u].x))) / _1731;
            float _1851 = isnan(cbSceneParam._m0[41u].w) ? _1847 : (isnan(_1847) ? cbSceneParam._m0[41u].w : max(_1847, cbSceneParam._m0[41u].w));
            float _1894 = (cbSceneParam._m0[33u].x - sqrt(((_1529 * _1529) + (_1528 * _1528)) + (_1530 * _1530))) * cbSceneParam._m0[33u].y;
            float _4128 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
            float _1901 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1732, cbSceneParam._m0[33u].w + _1733), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1732, _1733 - cbSceneParam._m0[33u].z), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1732 - cbSceneParam._m0[33u].z, _1733 - cbSceneParam._m0[33u].w), _1851), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1732 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1733), _1851), 0.0)).x), vec4(0.25)));
            float _1905 = 1.0 - (_1901 * cbSceneParam._m0[34u].x);
            float _1906 = 1.0 - (_1901 * cbSceneParam._m0[34u].y);
            float _1907 = 1.0 - (_1901 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1907) ? _1679 : (isnan(_1679) ? _1907 : min(_1679, _1907));
            frontier_phi_34_33_ladder_1 = isnan(_1906) ? _1678 : (isnan(_1678) ? _1906 : min(_1678, _1906));
            frontier_phi_34_33_ladder_2 = isnan(_1905) ? _1677 : (isnan(_1677) ? _1905 : min(_1677, _1905));
        }
        else
        {
            frontier_phi_34_33_ladder = _1679;
            frontier_phi_34_33_ladder_1 = _1678;
            frontier_phi_34_33_ladder_2 = _1677;
        }
        _1743 = frontier_phi_34_33_ladder_2;
        _1745 = frontier_phi_34_33_ladder_1;
        _1747 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1743 = _1677;
        _1745 = _1678;
        _1747 = _1679;
    }
    uvec4 _1752 = floatBitsToUint(cbInstanceData._m0[_424 + 5u]);
    uint _1754 = _1752.x * 14u;
    uint _1755 = _1754 + 13u;
    float _1762 = _450 + (-1.0);
    float _1767 = (cbLight._m0[_1755].x * _1762) + 1.0;
    float _1768 = (cbLight._m0[_1755].y * _1762) + 1.0;
    float _1769 = (cbLight._m0[_1755].z * _1762) + 1.0;
    float _1770 = (cbLight._m0[_1755].w * _1762) + 1.0;
    uint _1772 = _1754 + 4u;
    float _1784 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_294, _295, _296));
    float _1787 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    float _1788 = cbLight._m0[_1772].x * _1743;
    float _1789 = cbLight._m0[_1772].y * _1745;
    float _1790 = cbLight._m0[_1772].z * _1747;
    uint _1791 = _1754 + 5u;
    float _1803 = dot(vec3(cbLight._m0[_1754 | 1u].xyz), vec3(_294, _295, _296));
    float _1806 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    float _1979;
    float _1980;
    float _1981;
    if (_298 == 0.0)
    {
        float _4164 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
        float _4175 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1916 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
        float _1918 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
        _1979 = ((cbLight._m0[_1791].x * _1806) * _1918) + ((_1788 * _1787) * _1916);
        _1980 = ((_1806 * cbLight._m0[_1791].y) * _1918) + ((_1789 * _1787) * _1916);
        _1981 = ((_1806 * cbLight._m0[_1791].z) * _1918) + ((_1790 * _1787) * _1916);
    }
    else
    {
        float _1928 = _1784 + _298;
        float _1931 = (_298 * 2.0) + 1.0;
        float _1932 = (isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0))) / _1931;
        float _1939 = _1803 + _298;
        float _1941 = (isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0))) / _1931;
        _1979 = (((_1941 * cbLight._m0[_1791].x) * _1806) + ((_1788 * _1932) * _1787)) * 0.3183098733425140380859375;
        _1980 = (((_1941 * cbLight._m0[_1791].y) * _1806) + ((_1789 * _1932) * _1787)) * 0.3183098733425140380859375;
        _1981 = (((_1941 * cbLight._m0[_1791].z) * _1806) + ((_1790 * _1932) * _1787)) * 0.3183098733425140380859375;
    }
    uvec4 _1985 = floatBitsToUint(cbLight._m0[_1754 + 12u]);
    bool _1987 = _1985.x == 0u;
    float _2014;
    float _2016;
    float _2018;
    if (_1987)
    {
        _2014 = _1979;
        _2016 = _1980;
        _2018 = _1981;
    }
    else
    {
        uint _2022 = _1754 + 6u;
        float _2038 = (dot(vec3(cbLight._m0[_1754 + 2u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2039 = _2038 * _2038;
        float _4196 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
        float _2040 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _2041 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2014 = (((cbLight._m0[_2022].x * 0.3183098733425140380859375) * _2040) * _2041) + _1979;
        _2016 = (((cbLight._m0[_2022].y * 0.3183098733425140380859375) * _2040) * _2041) + _1980;
        _2018 = (((cbLight._m0[_2022].z * 0.3183098733425140380859375) * _2040) * _2041) + _1981;
    }
    bool _2021 = _1985.y == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2021)
    {
        _2072 = _2014;
        _2074 = _2016;
        _2076 = _2018;
    }
    else
    {
        uint _2247 = _1754 + 7u;
        float _2263 = (dot(vec3(cbLight._m0[_1754 + 3u].xyz), vec3(_294, _295, _296)) * 0.5) + 0.5;
        float _2264 = _2263 * _2263;
        float _4212 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
        float _2265 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
        float _2266 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2072 = (((cbLight._m0[_2247].x * 0.3183098733425140380859375) * _2265) * _2266) + _2014;
        _2074 = (((cbLight._m0[_2247].y * 0.3183098733425140380859375) * _2265) * _2266) + _2016;
        _2076 = (((cbLight._m0[_2247].z * 0.3183098733425140380859375) * _2265) * _2266) + _2018;
    }
    uint _2081 = _1754 + 8u;
    float _2097 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1754].w)) * _297) * 0.949999988079071044921875);
    float _2098 = _2097 * _2097;
    float _2099 = cbLight._m0[_1754].x + _375;
    float _2100 = cbLight._m0[_1754].y + _376;
    float _2101 = cbLight._m0[_1754].z + _377;
    float _2105 = inversesqrt(dot(vec3(_2099, _2100, _2101), vec3(_2099, _2100, _2101)));
    float _2106 = _2105 * _2099;
    float _2107 = _2105 * _2100;
    float _2108 = _2105 * _2101;
    float _2109 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_1754].xyz));
    float _4228 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2112 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
    float _4239 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _2113 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
    float _2114 = dot(vec3(_294, _295, _296), vec3(_2106, _2107, _2108));
    float _4250 = isnan(0.0) ? _2114 : (isnan(_2114) ? 0.0 : max(_2114, 0.0));
    float _2117 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
    float _2118 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_2106, _2107, _2108));
    float _4261 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0));
    float _2122 = _2098 * _2098;
    float _2126 = ((_2117 * _2117) * (_2122 + (-1.0))) + 1.0;
    float _2137 = (exp2(log2(1.0 - (isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2138 = 1.0 - _2098;
    float _2149 = (0.5 / (((_2113 * ((_2112 * _2138) + _2098)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2138) + _2098) * _2112))) * _2112;
    float _4272 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0))) * (_2122 / ((_2126 * _2126) * 3.141590118408203125));
    float _2152 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
    uint _2165 = _1754 | 1u;
    uint _2169 = _1754 + 9u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2165].w)) * _297) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_2165].x + _375;
    float _2186 = cbLight._m0[_2165].y + _376;
    float _2187 = cbLight._m0[_2165].z + _377;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2165].xyz));
    float _4288 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
    float _2199 = dot(vec3(_294, _295, _296), vec3(_2192, _2193, _2194));
    float _4299 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
    float _2202 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
    float _2203 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2192, _2193, _2194));
    float _4310 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2207 = _2184 * _2184;
    float _2211 = ((_2202 * _2202) * (_2207 + (-1.0))) + 1.0;
    float _2220 = (exp2(log2(1.0 - (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2221 = 1.0 - _2184;
    float _2231 = (0.5 / (((_2113 * ((_2198 * _2221) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2221) + _2184) * _2198))) * _2198;
    float _4321 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2233 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2207 / ((_2211 * _2211) * 3.141590118408203125));
    float _2234 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    float _2244 = (((_2220 * cbLight._m0[_2169].x) * _2233) * _2234) + ((((cbLight._m0[_2081].x * _1743) * _2137) * _2151) * _2152);
    float _2245 = (((_2220 * cbLight._m0[_2169].y) * _2233) * _2234) + ((((cbLight._m0[_2081].y * _1745) * _2137) * _2151) * _2152);
    float _2246 = (((_2220 * cbLight._m0[_2169].z) * _2233) * _2234) + ((((cbLight._m0[_2081].z * _1747) * _2137) * _2151) * _2152);
    float _2276;
    float _2278;
    float _2280;
    if (_1987)
    {
        _2276 = _2244;
        _2278 = _2245;
        _2280 = _2246;
    }
    else
    {
        uint _2282 = _1754 + 2u;
        uint _2286 = _1754 + 10u;
        float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2282].w)) * _297) * 0.949999988079071044921875);
        float _2301 = _2300 * _2300;
        float _2302 = cbLight._m0[_2282].x + _375;
        float _2303 = cbLight._m0[_2282].y + _376;
        float _2304 = cbLight._m0[_2282].z + _377;
        float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
        float _2309 = _2308 * _2302;
        float _2310 = _2308 * _2303;
        float _2311 = _2308 * _2304;
        float _2312 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2282].xyz));
        float _4337 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2315 = isnan(1.0) ? _4337 : (isnan(_4337) ? 1.0 : min(_4337, 1.0));
        float _2316 = dot(vec3(_294, _295, _296), vec3(_2309, _2310, _2311));
        float _4348 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2319 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2320 = dot(vec3(cbLight._m0[_2282].xyz), vec3(_2309, _2310, _2311));
        float _4359 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
        float _2324 = _2301 * _2301;
        float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
        float _2337 = (exp2(log2(1.0 - (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2338 = 1.0 - _2301;
        float _2348 = (0.5 / (((_2113 * ((_2315 * _2338) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2338) + _2301) * _2315))) * _2315;
        float _4370 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
        float _2350 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
        float _2351 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
        _2276 = (((_2337 * cbLight._m0[_2286].x) * _2350) * _2351) + _2244;
        _2278 = (((_2337 * cbLight._m0[_2286].y) * _2350) * _2351) + _2245;
        _2280 = (((_2337 * cbLight._m0[_2286].z) * _2350) * _2351) + _2246;
    }
    float _2361;
    float _2363;
    float _2365;
    if (_2021)
    {
        _2361 = _2276;
        _2363 = _2278;
        _2365 = _2280;
    }
    else
    {
        uint _2372 = _1754 + 3u;
        uint _2376 = _1754 + 11u;
        float _2390 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2372].w)) * _297) * 0.949999988079071044921875);
        float _2391 = _2390 * _2390;
        float _2392 = cbLight._m0[_2372].x + _375;
        float _2393 = cbLight._m0[_2372].y + _376;
        float _2394 = cbLight._m0[_2372].z + _377;
        float _2398 = inversesqrt(dot(vec3(_2392, _2393, _2394), vec3(_2392, _2393, _2394)));
        float _2399 = _2398 * _2392;
        float _2400 = _2398 * _2393;
        float _2401 = _2398 * _2394;
        float _2402 = dot(vec3(_294, _295, _296), vec3(cbLight._m0[_2372].xyz));
        float _4386 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
        float _2405 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
        float _2406 = dot(vec3(_294, _295, _296), vec3(_2399, _2400, _2401));
        float _4397 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
        float _2409 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2410 = dot(vec3(cbLight._m0[_2372].xyz), vec3(_2399, _2400, _2401));
        float _4408 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2414 = _2391 * _2391;
        float _2418 = ((_2409 * _2409) * (_2414 + (-1.0))) + 1.0;
        float _2427 = (exp2(log2(1.0 - (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2428 = 1.0 - _2391;
        float _2438 = (0.5 / (((_2113 * ((_2405 * _2428) + _2391)) + 9.9999999392252902907785028219223e-09) + (((_2113 * _2428) + _2391) * _2405))) * _2405;
        float _4419 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2440 = (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0))) * (_2414 / ((_2418 * _2418) * 3.141590118408203125));
        float _2441 = isnan(1.0) ? _1770 : (isnan(_1770) ? 1.0 : min(_1770, 1.0));
        _2361 = (((_2427 * cbLight._m0[_2376].x) * _2440) * _2441) + _2276;
        _2363 = (((_2427 * cbLight._m0[_2376].y) * _2440) * _2441) + _2278;
        _2365 = (((_2427 * cbLight._m0[_2376].z) * _2440) * _2441) + _2280;
    }
    float _2507;
    float _2509;
    float _2511;
    float _2513;
    float _2515;
    float _2517;
    if (_1752.y == 0u)
    {
        uvec4 _2462 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2463 = _2462.x;
        uint _2474 = uint((float(_2462.y) * floor(float(uint(cbSceneParam._m0[85u].y * _384) / _2463))) + floor(float(uint(cbSceneParam._m0[85u].x * _383) / _2463)));
        float _2484 = (log2(_1530 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2485 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        uint _2488 = uint(isnan(14.0) ? _2485 : (isnan(_2485) ? 14.0 : min(_2485, 14.0)));
        uvec4 _2493 = texelFetch(g_lightClusterGridBuffer, int(((_2488 << 2u) + (_2474 << 6u)) >> 2u));
        uint _2494 = _2493.x;
        uint _2495 = _2462.z;
        float _2520;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        if (((((1u << ((_2495 >> 4u) & 15u)) + 4294967295u) & _2494) == 0u) || ((_2495 & 240u) == 0u))
        {
            _2520 = 0.0;
            _2522 = 0.0;
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
        }
        else
        {
            float _2521;
            float _2523;
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2702 = 0.0;
            float _2703 = 0.0;
            float _2704 = 0.0;
            float _2705 = 0.0;
            float _2706 = 0.0;
            float _2707 = 0.0;
            uint _2708 = 0u;
            uint _2717;
            bool _2718;
            for (;;)
            {
                _2717 = texelFetch(g_lightClassification, int((((_2488 << 5u) + (_2474 << 9u)) + (_2708 << 2u)) >> 2u)).x;
                _2718 = _2717 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2718)
                {
                    frontier_phi_69_pred = _2707;
                    frontier_phi_69_pred_1 = _2706;
                    frontier_phi_69_pred_2 = _2705;
                    frontier_phi_69_pred_3 = _2704;
                    frontier_phi_69_pred_4 = _2703;
                    frontier_phi_69_pred_5 = _2702;
                }
                else
                {
                    float _2879;
                    float _2880;
                    float _2881;
                    float _2882;
                    float _2883;
                    float _2884;
                    uint _2885;
                    _2879 = _2702;
                    _2880 = _2703;
                    _2881 = _2704;
                    _2882 = _2705;
                    _2883 = _2706;
                    _2884 = _2707;
                    _2885 = _2717;
                    float _2810;
                    float _2811;
                    float _2812;
                    float _2813;
                    float _2814;
                    float _2815;
                    for (;;)
                    {
                        uint _2889 = uint(findLSB(_2885)) + (_2708 << 5u);
                        uint _2886 = (_2885 + 4294967295u) & _2885;
                        uint _2891 = _2889 * 48u;
                        vec4 _2905 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2891)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2891 + 3u)).x));
                        uint _2911 = (_2889 * 48u) + 4u;
                        vec4 _2924 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2911)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2911 + 3u)).x));
                        float _2925 = _2924.x;
                        float _2926 = _2924.y;
                        float _2927 = _2924.z;
                        uint _2930 = (_2889 * 48u) + 8u;
                        vec3 _2941 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2930)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2930 + 2u)).x));
                        uint _2946 = (_2889 * 48u) + 12u;
                        vec2 _2954 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2946)).x, texelFetch(g_PointLightRenderingBuffer, int(_2946 + 1u)).x));
                        float _2960 = inversesqrt(dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530)));
                        float _2961 = _2960 * _1528;
                        float _2962 = _2960 * _1529;
                        float _2963 = _2960 * _1530;
                        float _2964 = _2905.x - _1528;
                        float _2965 = _2905.y - _1529;
                        float _2966 = _2905.z - _1530;
                        float _2967 = dot(vec3(_2964, _2965, _2966), vec3(_2964, _2965, _2966));
                        float _2970 = inversesqrt(_2967);
                        float _2971 = _2970 * _2964;
                        float _2972 = _2970 * _2965;
                        float _2973 = _2970 * _2966;
                        float _2974 = dot(vec3(_405, _408, _411), vec3(_2971, _2972, _2973));
                        float _2979 = 1.0 - (_2967 * _2905.w);
                        float _4445 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                        float _2980 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
                        float _2981 = sqrt(_2967) * _2924.w;
                        float _2984 = 1.39999997615814208984375 / (_2981 + 1.39999997615814208984375);
                        float _2985 = _2984 * _2984;
                        float _2986 = 1.0 - _2985;
                        float _2988 = (_2986 * _2986) * _298;
                        float _2991 = ((_2986 * _2974) + _2985) + _2988;
                        float _2996 = _2981 * _2981;
                        float _3001 = ((isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0))) * _2980) / (((_2988 * 2.0) + 1.0) * ((_2996 * 0.699999988079071044921875) + 1.0));
                        float _3005 = dot(vec3(_2971, _2972, _2973), vec3(_2961, _2962, _2963));
                        float _4461 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3012 = dot(vec3((-0.0) - _2961, (-0.0) - _2962, (-0.0) - _2963), vec3(_405, _408, _411)) + 1.0;
                        float _3014 = (isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0))) * 0.5;
                        float _3021 = ((_3014 * _3014) * _2954.x) * exp2((_2954.y * 32.0) * log2(isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))));
                        float _3023 = _298 / (_298 + 1.0);
                        float _3039 = (-0.0) - _1528;
                        float _3040 = (-0.0) - _1529;
                        float _3041 = (-0.0) - _1530;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3046 = _3045 * _3039;
                        float _3047 = _3045 * _3040;
                        float _3048 = _3045 * _3041;
                        float _3055 = exp2(log2(1.0 / ((_2996 * 3.5) + 5.0)) * 0.25);
                        float _3056 = 1.0 - _466;
                        float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                        float _3064 = _3063 * _3063;
                        float _3065 = _3064 * _3064;
                        float _3066 = _3046 + _2971;
                        float _3067 = _3047 + _2972;
                        float _3068 = _3048 + _2973;
                        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                        float _3076 = dot(vec3(_405, _408, _411), vec3(_3046, _3047, _3048));
                        float _4477 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0));
                        float _3080 = dot(vec3(_405, _408, _411), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                        float _4488 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                        float _3088 = _2984 * _3064;
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _2974) + _3089;
                        float _4499 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3094 = 1.0 - _3064;
                        float _3104 = (0.5 / (((_3093 * ((_3079 * _3094) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3064) * _3079))) * _3093;
                        float _4510 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3115 = (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0)))) / ((_3087 * _3087) * ((_2996 * 2.1991131305694580078125) + 3.141590118408203125))) * _2980;
                        _2813 = (((((_2925 * 0.3183098733425140380859375) * _3023) * _3021) + _2925) * _3001) + _2882;
                        _2814 = (((((_2926 * 0.3183098733425140380859375) * _3023) * _3021) + _2926) * _3001) + _2883;
                        _2815 = (((((_2927 * 0.3183098733425140380859375) * _3023) * _3021) + _2927) * _3001) + _2884;
                        _2810 = (_3115 * _2941.x) + _2879;
                        _2811 = (_3115 * _2941.y) + _2880;
                        _2812 = (_3115 * _2941.z) + _2881;
                        if (_2886 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2879 = _2810;
                            _2880 = _2811;
                            _2881 = _2812;
                            _2882 = _2813;
                            _2883 = _2814;
                            _2884 = _2815;
                            _2885 = _2886;
                        }
                    }
                    frontier_phi_69_pred = _2815;
                    frontier_phi_69_pred_1 = _2814;
                    frontier_phi_69_pred_2 = _2813;
                    frontier_phi_69_pred_3 = _2812;
                    frontier_phi_69_pred_4 = _2811;
                    frontier_phi_69_pred_5 = _2810;
                }
                _2531 = frontier_phi_69_pred;
                _2529 = frontier_phi_69_pred_1;
                _2527 = frontier_phi_69_pred_2;
                _2525 = frontier_phi_69_pred_3;
                _2523 = frontier_phi_69_pred_4;
                _2521 = frontier_phi_69_pred_5;
                uint _2709 = _2708 + 1u;
                if (_2709 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2702 = _2521;
                    _2703 = _2523;
                    _2704 = _2525;
                    _2705 = _2527;
                    _2706 = _2529;
                    _2707 = _2531;
                    _2708 = _2709;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2520 = _2521;
            _2522 = _2523;
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
        }
        uvec4 _2534 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2535 = _2534.z;
        uint _2537 = (_2535 >> 8u) & 15u;
        float _2670;
        float _2672;
        float _2674;
        float _2676;
        float _2678;
        float _2680;
        if (((4294967295u << _2537) & _2494) == 0u)
        {
            _2670 = _2520;
            _2672 = _2522;
            _2674 = _2524;
            _2676 = _2526;
            _2678 = _2528;
            _2680 = _2530;
        }
        else
        {
            float _2695 = inversesqrt(dot(vec3(_1528, _1529, _1530), vec3(_1528, _1529, _1530)));
            float _2696 = _2695 * _1528;
            float _2697 = _2695 * _1529;
            float _2698 = _2695 * _1530;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2537 < ((_2535 >> 12u) & 15u))
            {
                float _2671;
                float _2673;
                float _2675;
                float _2677;
                float _2679;
                float _2681;
                float _2862 = _2520;
                float _2863 = _2522;
                float _2864 = _2524;
                float _2865 = _2526;
                float _2866 = _2528;
                float _2867 = _2530;
                uint _2868 = _2537;
                uint _2877;
                bool _2878;
                for (;;)
                {
                    _2877 = texelFetch(g_lightClassification, int((((_2488 << 5u) + (_2474 << 9u)) + (_2868 << 2u)) >> 2u)).x;
                    _2878 = _2877 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2878)
                    {
                        frontier_phi_77_pred = _2867;
                        frontier_phi_77_pred_1 = _2866;
                        frontier_phi_77_pred_2 = _2865;
                        frontier_phi_77_pred_3 = _2864;
                        frontier_phi_77_pred_4 = _2863;
                        frontier_phi_77_pred_5 = _2862;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3505;
                        float _3506;
                        float _3507;
                        float _3171 = _2862;
                        float _3172 = _2863;
                        float _3173 = _2864;
                        float _3174 = _2865;
                        float _3175 = _2866;
                        float _3176 = _2867;
                        uint _3177 = _2877;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        vec3 _3234;
                        vec2 _3243;
                        vec4 _3259;
                        vec4 _3275;
                        float _3322;
                        bool _3323;
                        for (;;)
                        {
                            uint _3188 = ((_2868 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            _3220 = _3219.x;
                            _3221 = _3219.y;
                            _3222 = _3219.z;
                            uint _3224 = (_3188 * 40u) + 8u;
                            _3234 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3224)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3224 + 2u)).x));
                            uint _3236 = (_3188 * 40u) + 12u;
                            _3243 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x));
                            uint _3246 = (_3188 * 40u) + 16u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            uint _3262 = (_3188 * 40u) + 20u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3278 = (_3188 * 40u) + 24u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3297 = (_3188 * 40u) + 28u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3322 = fma(_1530, _3310.z, fma(_1529, _3310.y, _3310.x * _1528)) + _3310.w;
                            _3323 = !((fma(_1530, _3291.z, fma(_1529, _3291.y, _3291.x * _1528)) + _3291.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3323)
                            {
                                float _3349 = _3203.x - _1528;
                                float _3350 = _3203.y - _1529;
                                float _3351 = _3203.z - _1530;
                                float _3352 = dot(vec3(_3349, _3350, _3351), vec3(_3349, _3350, _3351));
                                float _3355 = inversesqrt(_3352);
                                float _3356 = _3355 * _3349;
                                float _3357 = _3355 * _3350;
                                float _3358 = _3355 * _3351;
                                float _3362 = 1.0 - (_3352 / (_3204 * _3204));
                                float _4521 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3363 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                                float _3367 = sqrt(_3352) * _3219.w;
                                float _3369 = 1.39999997615814208984375 / (_3367 + 1.39999997615814208984375);
                                float _3370 = _3369 * _3369;
                                float _3371 = 1.0 - _3370;
                                float _3373 = (_3371 * _3371) * _298;
                                float _3376 = ((_3371 * dot(vec3(_3356, _3357, _3358), vec3(_405, _408, _411))) + _3370) + _3373;
                                float _3381 = _3367 * _3367;
                                float _3386 = (fma(_1530, _3259.z, fma(_1529, _3259.y, _3259.x * _1528)) + _3259.w) / _3322;
                                float _3387 = (fma(_1530, _3275.z, fma(_1529, _3275.y, _3275.x * _1528)) + _3275.w) / _3322;
                                float _3391 = 1.0 - dot(vec2(_3386, _3387), vec2(_3386, _3387));
                                float _4537 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3392 = isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0));
                                float _3393 = _3392 * (((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3363) / (((_3373 * 2.0) + 1.0) * ((_3381 * 0.699999988079071044921875) + 1.0)));
                                float _3394 = (-0.0) - _2696;
                                float _3395 = (-0.0) - _2697;
                                float _3396 = (-0.0) - _2698;
                                float _3397 = dot(vec3(_3356, _3357, _3358), vec3(_2696, _2697, _2698));
                                float _4548 = isnan(0.0) ? _3397 : (isnan(_3397) ? 0.0 : max(_3397, 0.0));
                                float _3404 = dot(vec3(_3394, _3395, _3396), vec3(_405, _408, _411)) + 1.0;
                                float _3406 = (isnan(0.0) ? _3404 : (isnan(_3404) ? 0.0 : max(_3404, 0.0))) * 0.5;
                                float _3413 = ((_3406 * _3406) * _3243.x) * exp2((_3243.y * 32.0) * log2(isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))));
                                float _3415 = _298 / (_298 + 1.0);
                                float _3436 = exp2(log2(1.0 / ((_3381 * 3.5) + 5.0)) * 0.25);
                                float _3437 = 1.0 - _466;
                                float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                                float _3445 = _3444 * _3444;
                                float _3446 = _3445 * _3445;
                                float _3447 = _3356 - _2696;
                                float _3448 = _3357 - _2697;
                                float _3449 = _3358 - _2698;
                                float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                                float _3457 = dot(vec3(_405, _408, _411), vec3(_3394, _3395, _3396));
                                float _4564 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                                float _3460 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                                float _3461 = dot(vec3(_405, _408, _411), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                                float _4575 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3464 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
                                float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                                float _3469 = _3369 * _3445;
                                float _3470 = _3469 * _3469;
                                float _3476 = ((1.0 - _3470) * dot(vec3(_405, _408, _411), vec3(_3356, _3357, _3358))) + _3470;
                                float _4586 = isnan(0.0) ? _3476 : (isnan(_3476) ? 0.0 : max(_3476, 0.0));
                                float _3477 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
                                float _3478 = 1.0 - _3445;
                                float _3488 = (0.5 / (((_3477 * ((_3460 * _3478) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3477 * _3478) + _3445) * _3460))) * _3477;
                                float _4597 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                                float _3498 = (_3392 * _3363) * (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0)))) / ((_3468 * _3468) * ((_3381 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = ((((_3221 * 0.3183098733425140380859375) * _3415) * _3413) + _3221) * _3393;
                                frontier_phi_83_pred_1 = ((((_3220 * 0.3183098733425140380859375) * _3415) * _3413) + _3220) * _3393;
                                frontier_phi_83_pred_2 = _3498 * _3234.z;
                                frontier_phi_83_pred_3 = _3498 * _3234.y;
                                frontier_phi_83_pred_4 = _3498 * _3234.x;
                                frontier_phi_83_pred_5 = ((((_3222 * 0.3183098733425140380859375) * _3415) * _3413) + _3222) * _3393;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3506 = frontier_phi_83_pred;
                            _3505 = frontier_phi_83_pred_1;
                            _3504 = frontier_phi_83_pred_2;
                            _3503 = frontier_phi_83_pred_3;
                            _3502 = frontier_phi_83_pred_4;
                            _3507 = frontier_phi_83_pred_5;
                            _3161 = _3505 + _3174;
                            _3162 = _3506 + _3175;
                            _3163 = _3507 + _3176;
                            _3158 = _3502 + _3171;
                            _3159 = _3503 + _3172;
                            _3160 = _3504 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3163;
                        frontier_phi_77_pred_1 = _3162;
                        frontier_phi_77_pred_2 = _3161;
                        frontier_phi_77_pred_3 = _3160;
                        frontier_phi_77_pred_4 = _3159;
                        frontier_phi_77_pred_5 = _3158;
                    }
                    _2681 = frontier_phi_77_pred;
                    _2679 = frontier_phi_77_pred_1;
                    _2677 = frontier_phi_77_pred_2;
                    _2675 = frontier_phi_77_pred_3;
                    _2673 = frontier_phi_77_pred_4;
                    _2671 = frontier_phi_77_pred_5;
                    uint _2869 = _2868 + 1u;
                    if (_2869 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2862 = _2671;
                        _2863 = _2673;
                        _2864 = _2675;
                        _2865 = _2677;
                        _2866 = _2679;
                        _2867 = _2681;
                        _2868 = _2869;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2681;
                frontier_phi_63_64_ladder_1 = _2679;
                frontier_phi_63_64_ladder_2 = _2677;
                frontier_phi_63_64_ladder_3 = _2673;
                frontier_phi_63_64_ladder_4 = _2671;
                frontier_phi_63_64_ladder_5 = _2675;
            }
            else
            {
                frontier_phi_63_64_ladder = _2530;
                frontier_phi_63_64_ladder_1 = _2528;
                frontier_phi_63_64_ladder_2 = _2526;
                frontier_phi_63_64_ladder_3 = _2522;
                frontier_phi_63_64_ladder_4 = _2520;
                frontier_phi_63_64_ladder_5 = _2524;
            }
            _2670 = frontier_phi_63_64_ladder_4;
            _2672 = frontier_phi_63_64_ladder_3;
            _2674 = frontier_phi_63_64_ladder_5;
            _2676 = frontier_phi_63_64_ladder_2;
            _2678 = frontier_phi_63_64_ladder_1;
            _2680 = frontier_phi_63_64_ladder;
        }
        float _2685 = isnan(1.0) ? _450 : (isnan(_450) ? 1.0 : min(_450, 1.0));
        _2507 = (_2685 * _2676) + _2072;
        _2509 = (_2685 * _2678) + _2074;
        _2511 = (_2685 * _2680) + _2076;
        _2513 = ((_2670 * 0.039999999105930328369140625) * _2685) + _2361;
        _2515 = ((_2672 * 0.039999999105930328369140625) * _2685) + _2363;
        _2517 = ((_2674 * 0.039999999105930328369140625) * _2685) + _2365;
    }
    else
    {
        _2507 = _2072;
        _2509 = _2074;
        _2511 = _2076;
        _2513 = _2361;
        _2515 = _2363;
        _2517 = _2365;
    }
    float _2609;
    float _2610;
    float _2611;
    if (_298 > 0.0)
    {
        uint _2541 = _1754 + 4u;
        float _2547 = (-0.0) - _375;
        float _2549 = (-0.0) - _376;
        float _2550 = (-0.0) - _377;
        float _2551 = dot(vec3(cbLight._m0[_1754].xyz), vec3(_2547, _2549, _2550));
        float _4613 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
        float _2555 = _461 + 1.0;
        float _2557 = (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0))) * 0.5;
        float _2562 = _2557 * _2557;
        float _2563 = _2562 * exp2(log2(isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * 32.0);
        float _2565 = _298 / (_298 + 1.0);
        float _2566 = isnan(_1767) ? 1.0 : (isnan(1.0) ? _1767 : min(1.0, _1767));
        uint _2579 = _1754 + 5u;
        float _2585 = dot(vec3(cbLight._m0[_2165].xyz), vec3(_2547, _2549, _2550));
        float _4634 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
        float _2592 = _2562 * exp2(log2(isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * 32.0);
        float _2593 = isnan(_1768) ? 1.0 : (isnan(1.0) ? _1768 : min(1.0, _1768));
        _2609 = ((((_2592 * cbLight._m0[_2579].x) * _2565) * _2593) + ((((cbLight._m0[_2541].x * _1743) * _2563) * _2565) * _2566)) * 0.3183098733425140380859375;
        _2610 = ((((_2592 * cbLight._m0[_2579].y) * _2565) * _2593) + ((((cbLight._m0[_2541].y * _1745) * _2563) * _2565) * _2566)) * 0.3183098733425140380859375;
        _2611 = ((((_2592 * cbLight._m0[_2579].z) * _2565) * _2593) + ((((cbLight._m0[_2541].z * _1747) * _2563) * _2565) * _2566)) * 0.3183098733425140380859375;
    }
    else
    {
        _2609 = 0.0;
        _2610 = 0.0;
        _2611 = 0.0;
    }
    float _4650 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _4661 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _4672 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    uint _2633 = _424 + 6u;
    float _2641 = _383 / cbSceneParam._m0[86u].x;
    float _2642 = _384 / cbSceneParam._m0[86u].y;
    vec4 _2656 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, (log2((isnan(cbSceneParam._m0[77u].w) ? _317 : (isnan(_317) ? cbSceneParam._m0[77u].w : min(_317, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2658 = _2656.x;
    float _2659 = _2656.y;
    float _2660 = _2656.z;
    float _2661 = _2656.w;
    float _2760;
    float _2762;
    float _2764;
    float _2766;
    if (_317 > cbSceneParam._m0[78u].w)
    {
        float _2723 = isnan(_317) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _317 : min(cbSceneParam._m0[80u].w, _317));
        float _2724 = _2723 / _317;
        float _2735 = _2724 * _368;
        float _2736 = _369 * _2724;
        float _2737 = (-0.0) - _2736;
        float _2738 = _2724 * _370;
        float _2740 = (cbSceneParam._m0[77u].w * _2737) / _2723;
        float _2741 = _2740 + cbSceneParam._m0[79u].w;
        float _2742 = cbSceneParam._m0[79u].w - _2736;
        float _2748 = sqrt(((_2735 * _2735) + (_2736 * _2736)) + (_2738 * _2738));
        float _2751 = (1.0 - (cbSceneParam._m0[77u].w / _2723)) * _2748;
        float _2756 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2758 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3120;
        if (abs((_2737 - _2740) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3120 = ((((_2741 > 0.0) ? exp2(_2756 * _2741) : (2.0 - exp2(_2758 * _2741))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2751;
        }
        else
        {
            float _2835 = 1.0 / cbSceneParam._m0[80u].x;
            float _2836 = isnan(_2742) ? _2741 : (isnan(_2741) ? _2742 : max(_2741, _2742));
            float _2837 = isnan(_2742) ? _2741 : (isnan(_2741) ? _2742 : min(_2741, _2742));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            _3120 = ((abs(_2748 / _2737) * cbSceneParam._m0[80u].y) * ((((_2846 - _2847) * 2.0) - ((exp2(_2756 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0)))) - exp2(_2756 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))))) * _2835)) - ((exp2(_2758 * _2846) - exp2(_2758 * _2847)) * _2835))) + (_2751 * cbSceneParam._m0[80u].z);
        }
        vec4 _3122 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2641, _2642, 1.0), 0.0);
        float _3131 = exp2((_3120 * (-1.44269502162933349609375)) * (1.0 - _3122.w));
        float _3132 = log2(_3131);
        float _3148 = log2(_2661);
        _2760 = (exp2(_3148 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].x)) * _3122.x) / cbSceneParam._m0[78u].x)) + _2658;
        _2762 = (exp2(_3148 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].y)) * _3122.y) / cbSceneParam._m0[78u].y)) + _2659;
        _2764 = (exp2(_3148 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3132 * cbSceneParam._m0[78u].z)) * _3122.z) / cbSceneParam._m0[78u].z)) + _2660;
        _2766 = _3131 * _2661;
    }
    else
    {
        _2760 = _2658;
        _2762 = _2659;
        _2764 = _2660;
        _2766 = _2661;
    }
    float _2778 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2779 = _2778 == 3.0;
    float _2780 = log2(_2766);
    float _2787 = exp2(_2780 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * ((_2507 + ((isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0))) * _450)) + _2609)) + ((_2513 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2788 = exp2(_2780 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0))) * ((_2509 + ((isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0))) * _450)) + _2610)) + ((_2515 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2789 = exp2(_2780 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0))) * ((_2511 + ((isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))) * _450)) + _2611)) + ((_2517 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _1257)) * cbPerFrame._m0[3u].x));
    float _2798 = (_2778 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2798 * (_2779 ? _2787 : (_2787 + (cbSceneParam._m0[72u].w * _2760)));
    SV_Target.y = _2798 * (_2779 ? _2788 : (_2788 + (cbSceneParam._m0[72u].w * _2762)));
    SV_Target.z = _2798 * (_2779 ? _2789 : (_2789 + (cbSceneParam._m0[72u].w * _2764)));
    SV_Target.w = cbInstanceData._m0[_2633].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2633].w;
}


