#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _857;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _248 = _246.x;
    vec4 _260 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _260.z;
    float _268 = (_260.x * 2.0) + (-1.0);
    float _270 = (_260.y * 2.0) + (-1.0);
    float _271 = dot(vec2(_268, _270), vec2(_268, _270));
    float _3706 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _277 = sqrt(1.0 - (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))));
    vec4 _289 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _296 = cbMtdParam._m0[10u].x * _289.x;
    float _299 = fma(_277, _196 * NORMAL.x, fma(_270, _203 * TANGENT.x, (_189 * _182) * _268));
    float _302 = fma(_277, _196 * NORMAL.y, fma(_270, _203 * TANGENT.y, (_189 * _183) * _268));
    float _305 = fma(_277, _196 * NORMAL.z, fma(_270, _203 * TANGENT.z, (_189 * _184) * _268));
    float _309 = inversesqrt(dot(vec3(_299, _302, _305), vec3(_299, _302, _305)));
    float _310 = _309 * _299;
    float _311 = _309 * _302;
    float _312 = _309 * _305;
    float _3717 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _313 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _314 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _3733 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3744 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3755 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3766 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _318 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _334 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _375 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _385 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _375);
    float _386 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _375);
    float _387 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _375);
    float _391 = inversesqrt(dot(vec3(_385, _386, _387), vec3(_385, _386, _387)));
    float _392 = _385 * _391;
    float _393 = _386 * _391;
    float _394 = _387 * _391;
    float _400 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _401 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_312, cbSceneParam._m0[5u].z, fma(_311, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _310));
    float _425 = fma(_312, cbSceneParam._m0[6u].z, fma(_311, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _310));
    float _428 = fma(_312, cbSceneParam._m0[7u].z, fma(_311, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _310));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _444 = (_441 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _450 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * cbInstanceData._m0[_444].x;
    float _451 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_444].y;
    float _452 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_444].z;
    float _3777 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _3788 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    float _3799 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _456 = 1.0 - _318;
    float _457 = _453 * _456;
    float _458 = _454 * _456;
    float _459 = _455 * _456;
    float _464 = (_453 + (-0.039999999105930328369140625)) * _318;
    float _465 = (_454 + (-0.039999999105930328369140625)) * _318;
    float _466 = (_455 + (-0.039999999105930328369140625)) * _318;
    float _467 = _464 + 0.039999999105930328369140625;
    float _469 = _465 + 0.039999999105930328369140625;
    float _470 = _466 + 0.039999999105930328369140625;
    vec4 _479 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _400, cbSceneParam._m0[86u].y * _401));
    float _482 = _479.x * TEXCOORD.z;
    float _483 = dot(vec3(_310, _311, _312), vec3(_392, _393, _394));
    float _486 = _483 * 2.0;
    float _490 = (_486 * _310) - _392;
    float _491 = (_486 * _311) - _393;
    float _492 = (_486 * _312) - _394;
    float _493 = dot(vec3(_392, _393, _394), vec3(_310, _311, _312));
    float _496 = abs(_493);
    float _3810 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _498 = sqrt(_313);
    float _511 = exp2((_498 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_498 * 3.0));
    float _517 = (1.0 - _511) * ((_498 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _518 = _511 * _498;
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _856;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _581 = fma(_554, cbModelParam._m0[26u].z, fma(_550, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _546));
        float _585 = fma(_554, cbModelParam._m0[27u].z, fma(_550, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _546));
        float _589 = fma(_554, cbModelParam._m0[28u].z, fma(_550, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _546));
        float _614 = _546 + _310;
        float _615 = _550 + _311;
        float _616 = _554 + _312;
        float _626 = fma(_616, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _614)) - _581;
        float _627 = fma(_616, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _614)) - _585;
        float _628 = fma(_616, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _614)) - _589;
        float _632 = inversesqrt(dot(vec3(_626, _627, _628), vec3(_626, _627, _628)));
        float _645 = ((_632 * _626) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_581 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _646 = ((_632 * _627) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_585 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _647 = ((_632 * _628) / cbModelParam._m0[34u].z) + ((((((_589 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _650 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_645, _646, _647), 0.0);
        float _684 = exp2((_650.w + (-0.5)) * 20.0) * 2.0;
        float _685 = _684 * (_650.x + (-0.5));
        float _686 = _684 * (_650.y + (-0.5));
        float _687 = _684 * (_650.z + (-0.5));
        float _694 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _695 = _694 * (_657.x + (-0.5));
        float _696 = _694 * (_657.y + (-0.5));
        float _697 = _694 * (_657.z + (-0.5));
        float _704 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _705 = _704 * (_664.x + (-0.5));
        float _706 = _704 * (_664.y + (-0.5));
        float _707 = _704 * (_664.z + (-0.5));
        float _714 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _715 = _714 * (_671.x + (-0.5));
        float _716 = _714 * (_671.y + (-0.5));
        float _717 = _714 * (_671.z + (-0.5));
        float _718 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _719 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
        float _720 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
        float _721 = _685 * 0.5;
        float _722 = _695 * 0.5;
        float _723 = _705 * 0.5;
        float _724 = dot(vec3(_721, _722, _723), vec3(_721, _722, _723));
        float _729 = (_724 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_724);
        float _738 = (dot(vec3(_310, _311, _312), vec3(_729 * _721, _729 * _722, _729 * _723)) + 1.0) * 0.5;
        float _3836 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        float _748 = sqrt(((_722 * _722) + (_721 * _721)) + (_723 * _723)) / (_718 + 9.9999997473787516355514526367188e-06);
        float _3847 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
        float _750 = _749 * 2.0;
        float _754 = (1.0 - _749) / (_749 + 1.0);
        float _3858 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
        float _764 = ((((1.0 - _755) * (_750 + 2.0)) * exp2(log2(isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * (_750 + 1.0))) + _755) * _718;
        float _765 = _686 * 0.5;
        float _766 = _696 * 0.5;
        float _767 = _706 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _781 = (dot(vec3(_310, _311, _312), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3869 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        float _790 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_719 + 9.9999997473787516355514526367188e-06);
        float _3880 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _792 = _791 * 2.0;
        float _796 = (1.0 - _791) / (_791 + 1.0);
        float _3891 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
        float _806 = ((((1.0 - _797) * (_792 + 2.0)) * exp2(log2(isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0))) * (_792 + 1.0))) + _797) * _719;
        float _807 = _687 * 0.5;
        float _808 = _697 * 0.5;
        float _809 = _707 * 0.5;
        float _810 = dot(vec3(_807, _808, _809), vec3(_807, _808, _809));
        float _815 = (_810 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_810);
        float _823 = (dot(vec3(_310, _311, _312), vec3(_815 * _807, _815 * _808, _815 * _809)) + 1.0) * 0.5;
        float _3902 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _832 = sqrt(((_808 * _808) + (_807 * _807)) + (_809 * _809)) / (_720 + 9.9999997473787516355514526367188e-06);
        float _3913 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _834 = _833 * 2.0;
        float _838 = (1.0 - _833) / (_833 + 1.0);
        float _3924 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
        float _848 = ((((1.0 - _839) * (_834 + 2.0)) * exp2(log2(isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0))) * (_834 + 1.0))) + _839) * _720;
        _856 = _687;
        _858 = _686;
        _859 = _685;
        _860 = _697;
        _861 = _696;
        _862 = _695;
        _863 = _707;
        _864 = _706;
        _865 = _705;
        _866 = _720;
        _867 = _719;
        _868 = _718;
        _869 = cbModelParam._m0[36u].z * (isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0)));
        _870 = cbModelParam._m0[36u].z * (isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)));
        _871 = cbModelParam._m0[36u].z * (isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0)));
    }
    else
    {
        _856 = _857;
        _858 = _857;
        _859 = _857;
        _860 = _857;
        _861 = _857;
        _862 = _857;
        _863 = _857;
        _864 = _857;
        _865 = _857;
        _866 = _857;
        _867 = _857;
        _868 = _857;
        _869 = 0.0;
        _870 = 0.0;
        _871 = 0.0;
    }
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _897 = fma(_554, cbModelParam._m0[30u].z, fma(_550, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _546));
        float _901 = fma(_554, cbModelParam._m0[31u].z, fma(_550, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _546));
        float _905 = fma(_554, cbModelParam._m0[32u].z, fma(_550, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _546));
        float _928 = _546 + _310;
        float _929 = _550 + _311;
        float _930 = _554 + _312;
        float _940 = fma(_930, cbModelParam._m0[30u].z, fma(_929, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[31u].z, fma(_929, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[32u].z, fma(_929, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_897 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_901 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[35u].z) + ((((((_905 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _996 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_963.x + (-0.5));
        float _998 = _996 * (_963.y + (-0.5));
        float _999 = _996 * (_963.z + (-0.5));
        float _1006 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_970.x + (-0.5));
        float _1008 = _1006 * (_970.y + (-0.5));
        float _1009 = _1006 * (_970.z + (-0.5));
        float _1016 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_977.x + (-0.5));
        float _1018 = _1016 * (_977.y + (-0.5));
        float _1019 = _1016 * (_977.z + (-0.5));
        float _1026 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_984.x + (-0.5));
        float _1028 = _1026 * (_984.y + (-0.5));
        float _1029 = _1026 * (_984.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1049 = (dot(vec3(_310, _311, _312), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3965 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1058 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3976 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _1060 = _1059 * 2.0;
        float _1064 = (1.0 - _1059) / (_1059 + 1.0);
        float _3987 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1074 = ((((1.0 - _1065) * (_1060 + 2.0)) * exp2(log2(isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_1060 + 1.0))) + _1065) * _1030;
        float _1075 = _998 * 0.5;
        float _1076 = _1008 * 0.5;
        float _1077 = _1018 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1091 = (dot(vec3(_310, _311, _312), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3998 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1100 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _4009 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1102 = _1101 * 2.0;
        float _1106 = (1.0 - _1101) / (_1101 + 1.0);
        float _4020 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1116 = ((((1.0 - _1107) * (_1102 + 2.0)) * exp2(log2(isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0))) * (_1102 + 1.0))) + _1107) * _1031;
        float _1117 = _999 * 0.5;
        float _1118 = _1009 * 0.5;
        float _1119 = _1019 * 0.5;
        float _1120 = dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119));
        float _1125 = (_1120 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1120);
        float _1133 = (dot(vec3(_310, _311, _312), vec3(_1125 * _1117, _1125 * _1118, _1125 * _1119)) + 1.0) * 0.5;
        float _4031 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1142 = sqrt(((_1118 * _1118) + (_1117 * _1117)) + (_1119 * _1119)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _4042 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1144 = _1143 * 2.0;
        float _1148 = (1.0 - _1143) / (_1143 + 1.0);
        float _4053 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1158 = ((((1.0 - _1149) * (_1144 + 2.0)) * exp2(log2(isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0))) * (_1144 + 1.0))) + _1149) * _1032;
        _1166 = _999;
        _1167 = _998;
        _1168 = _997;
        _1169 = _1009;
        _1170 = _1008;
        _1171 = _1007;
        _1172 = _1019;
        _1173 = _1018;
        _1174 = _1017;
        _1175 = _1032;
        _1176 = _1031;
        _1177 = _1030;
        _1178 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0)));
        _1179 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0)));
        _1180 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0)));
    }
    else
    {
        _1166 = _857;
        _1167 = _857;
        _1168 = _857;
        _1169 = _857;
        _1170 = _857;
        _1171 = _857;
        _1172 = _857;
        _1173 = _857;
        _1174 = _857;
        _1175 = _857;
        _1176 = _857;
        _1177 = _857;
        _1178 = 0.0;
        _1179 = 0.0;
        _1180 = 0.0;
    }
    float _1190 = (cbModelParam._m0[1u].x * (_1178 - _869)) + _869;
    float _1191 = (cbModelParam._m0[1u].x * (_1179 - _870)) + _870;
    float _1192 = (cbModelParam._m0[1u].x * (_1180 - _871)) + _871;
    float _1213 = fma(_1192, cbSceneParam._m0[89u].z, fma(_1191, cbSceneParam._m0[89u].y, _1190 * cbSceneParam._m0[89u].x));
    float _1216 = fma(_1192, cbSceneParam._m0[90u].z, fma(_1191, cbSceneParam._m0[90u].y, _1190 * cbSceneParam._m0[90u].x));
    float _1219 = fma(_1192, cbSceneParam._m0[91u].z, fma(_1191, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1190));
    float _1234 = _490 * 0.5;
    float _1235 = _491 * 0.5;
    float _1236 = _492 * 0.5;
    float _1237 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1168, _1171, _1174, _1177));
    float _1240 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1167, _1170, _1173, _1176));
    float _1243 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_1166, _1169, _1172, _1175));
    float _1277;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1250 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_856, _860, _863, _866));
        float _1254 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_858, _861, _864, _867));
        float _1258 = dot(vec4(_1234, _1235, _1236, 1.0), vec4(_859, _862, _865, _868));
        float _1265 = dot(vec4(cbModelParam._m0[39u]), vec4(_1234, _1235, _1236, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1265) ? 0.0 : (isnan(0.0) ? _1265 : max(0.0, _1265))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1288;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1279 = dot(vec4(cbModelParam._m0[40u]), vec4(_1234, _1235, _1236, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)), isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1292 = (_1288 * cbModelParam._m0[1u].x) + (_1277 * (1.0 - cbModelParam._m0[1u].x));
    float _1302 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _313);
    float _1303 = isnan(_1302) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1302 : min(cbModelParam._m0[25u].z, _1302));
    float _1385;
    float _1387;
    float _1389;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1352 = fma(_554, cbModelParam._m0[13u].z, fma(_550, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _546)) + cbModelParam._m0[13u].w;
        float _1356 = fma(_554, cbModelParam._m0[14u].z, fma(_550, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _546)) + cbModelParam._m0[14u].w;
        float _1360 = fma(_554, cbModelParam._m0[15u].z, fma(_550, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _546)) + cbModelParam._m0[15u].w;
        float _1363 = fma(_492, cbModelParam._m0[13u].z, fma(_491, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _490));
        float _1366 = fma(_492, cbModelParam._m0[14u].z, fma(_491, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _490));
        float _1369 = fma(_492, cbModelParam._m0[15u].z, fma(_491, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _490));
        float _1397;
        if (_1363 > 0.0)
        {
            _1397 = abs((1.0 - _1352) / _1363);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1352 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1397 = frontier_phi_14_12_ladder;
        }
        float _1573;
        if (_1366 > 0.0)
        {
            _1573 = abs((1.0 - _1356) / _1366);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1366 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1356 + 1.0) / _1366);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1573 = frontier_phi_23_19_ladder;
        }
        float _1844;
        if (_1369 > 0.0)
        {
            _1844 = abs((1.0 - _1360) / _1369);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1360 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1844 = frontier_phi_35_30_ladder;
        }
        float _1846 = isnan(_1573) ? _1397 : (isnan(_1397) ? _1573 : min(_1397, _1573));
        float _1847 = isnan(_1844) ? _1846 : (isnan(_1846) ? _1844 : min(_1846, _1844));
        float _1851 = (_1847 * _1363) + _1352;
        float _1852 = (_1847 * _1366) + _1356;
        float _1853 = (_1847 * _1369) + _1360;
        float _1854 = _1847 * 9.9999997473787516355514526367188e-05;
        float _1856 = (-1.0) - _1854;
        float _1858 = _1854 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1853 > _1858) || ((_1853 < _1856) || ((_1852 > _1858) || ((_1852 < _1856) || ((_1851 < _1856) || (_1851 > _1858))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2007 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1853, cbModelParam._m0[9u].z, fma(_1852, cbModelParam._m0[9u].y, _1851 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1853, cbModelParam._m0[10u].z, fma(_1852, cbModelParam._m0[10u].y, _1851 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1853, cbModelParam._m0[11u].z, fma(_1852, cbModelParam._m0[11u].y, _1851 * cbModelParam._m0[11u].x))), _1303);
            frontier_phi_13_35_ladder = _2007.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2007.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2007.x * cbModelParam._m0[1u].y;
        }
        _1385 = frontier_phi_13_35_ladder_2;
        _1387 = frontier_phi_13_35_ladder_1;
        _1389 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1373 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_490, _491, _492), _1303);
        _1385 = _1373.x * cbModelParam._m0[1u].y;
        _1387 = _1373.y * cbModelParam._m0[1u].y;
        _1389 = _1373.z * cbModelParam._m0[1u].y;
    }
    float _1393 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _313);
    float _1394 = isnan(_1393) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1393 : min(cbModelParam._m0[25u].w, _1393));
    float _1487;
    float _1489;
    float _1491;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1451 = fma(_554, cbModelParam._m0[21u].z, fma(_550, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _546)) + cbModelParam._m0[21u].w;
        float _1455 = fma(_554, cbModelParam._m0[22u].z, fma(_550, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _546)) + cbModelParam._m0[22u].w;
        float _1459 = fma(_554, cbModelParam._m0[23u].z, fma(_550, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _546)) + cbModelParam._m0[23u].w;
        float _1462 = fma(_492, cbModelParam._m0[21u].z, fma(_491, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _490));
        float _1465 = fma(_492, cbModelParam._m0[22u].z, fma(_491, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _490));
        float _1468 = fma(_492, cbModelParam._m0[23u].z, fma(_491, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _490));
        float _1578;
        if (_1462 > 0.0)
        {
            _1578 = abs((1.0 - _1451) / _1462);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1451 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1578 = frontier_phi_25_21_ladder;
        }
        float _1871;
        if (_1465 > 0.0)
        {
            _1871 = abs((1.0 - _1455) / _1465);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1455 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1871 = frontier_phi_37_32_ladder;
        }
        float _2025;
        if (_1468 > 0.0)
        {
            _2025 = abs((1.0 - _1459) / _1468);
        }
        else
        {
            float frontier_phi_46_44_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_46_44_ladder = abs((_1459 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_46_44_ladder = 5000.0;
            }
            _2025 = frontier_phi_46_44_ladder;
        }
        float _2027 = isnan(_1871) ? _1578 : (isnan(_1578) ? _1871 : min(_1578, _1871));
        float _2028 = isnan(_2025) ? _2027 : (isnan(_2027) ? _2025 : min(_2027, _2025));
        float _2032 = (_2028 * _1462) + _1451;
        float _2033 = (_2028 * _1465) + _1455;
        float _2034 = (_2028 * _1468) + _1459;
        float _2035 = _2028 * 9.9999997473787516355514526367188e-05;
        float _2036 = (-1.0) - _2035;
        float _2038 = _2035 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2034 > _2038) || ((_2034 < _2036) || ((_2033 > _2038) || ((_2033 < _2036) || ((_2032 < _2036) || (_2032 > _2038))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2104 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2034, cbModelParam._m0[17u].z, fma(_2033, cbModelParam._m0[17u].y, _2032 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2034, cbModelParam._m0[18u].z, fma(_2033, cbModelParam._m0[18u].y, _2032 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2034, cbModelParam._m0[19u].z, fma(_2033, cbModelParam._m0[19u].y, _2032 * cbModelParam._m0[19u].x))), _1394);
            frontier_phi_22_46_ladder = _2104.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2104.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2104.x * cbModelParam._m0[1u].z;
        }
        _1487 = frontier_phi_22_46_ladder_2;
        _1489 = frontier_phi_22_46_ladder_1;
        _1491 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1471 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_490, _491, _492), _1394);
        _1487 = _1471.x * cbModelParam._m0[1u].z;
        _1489 = _1471.y * cbModelParam._m0[1u].z;
        _1491 = _1471.z * cbModelParam._m0[1u].z;
    }
    float _1504 = (((_517 * _467) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1506 = (((_517 * _469) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1489 - _1387)) + _1387);
    float _1508 = (((_517 * _470) + _518) * _482) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1511 = fma(_1508, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1504 * cbSceneParam._m0[89u].x));
    float _1514 = fma(_1508, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1504 * cbSceneParam._m0[90u].x));
    float _1517 = fma(_1508, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, _1504 * cbSceneParam._m0[91u].x));
    float _1552 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1556 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1560 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1565 = _1552 / _1564;
    float _1566 = _1556 / _1564;
    float _1567 = _1560 / _1564;
    float _1714;
    float _1715;
    float _1716;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1594 = ((uint(_1567 > cbSceneParam._m0[59u].y) + uint(_1567 > cbSceneParam._m0[59u].x)) + uint(_1567 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1595 = _1594 + 43u;
        uint _1603 = _1594 + 44u;
        uint _1611 = _1594 + 45u;
        uint _1619 = _1594 + 46u;
        float _1630 = fma(_1564, cbSceneParam._m0[_1595].w, fma(_1560, cbSceneParam._m0[_1595].z, fma(_1556, cbSceneParam._m0[_1595].y, _1552 * cbSceneParam._m0[_1595].x)));
        float _1634 = fma(_1564, cbSceneParam._m0[_1603].w, fma(_1560, cbSceneParam._m0[_1603].z, fma(_1556, cbSceneParam._m0[_1603].y, _1552 * cbSceneParam._m0[_1603].x)));
        float _1642 = fma(_1564, cbSceneParam._m0[_1619].w, fma(_1560, cbSceneParam._m0[_1619].z, fma(_1556, cbSceneParam._m0[_1619].y, _1552 * cbSceneParam._m0[_1619].x)));
        float _1647 = cbSceneParam._m0[33u].z * _1642;
        float _1649 = cbSceneParam._m0[33u].w * _1642;
        float _1652 = fma(_1564, cbSceneParam._m0[_1611].w, fma(_1560, cbSceneParam._m0[_1611].z, fma(_1556, cbSceneParam._m0[_1611].y, _1552 * cbSceneParam._m0[_1611].x))) / _1642;
        float _1700 = (cbSceneParam._m0[33u].x - sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567))) * cbSceneParam._m0[33u].y;
        float _4179 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
        float _1707 = (isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1647 + _1630) / _1642, (_1649 + _1634) / _1642), _1652), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1649 + _1630) / _1642, (_1634 - _1647) / _1642), _1652), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1630 - _1647) / _1642, (_1634 - _1649) / _1642), _1652), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1630 - _1649) / _1642, (_1647 + _1634) / _1642), _1652), 0.0)).x), vec4(0.25)));
        _1714 = 1.0 - (_1707 * cbSceneParam._m0[34u].x);
        _1715 = 1.0 - (_1707 * cbSceneParam._m0[34u].y);
        _1716 = 1.0 - (_1707 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1714 = 1.0;
        _1715 = 1.0;
        _1716 = 1.0;
    }
    float _1780;
    float _1782;
    float _1784;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1768 = fma(_1564, cbSceneParam._m0[63u].w, fma(_1560, cbSceneParam._m0[63u].z, fma(_1556, cbSceneParam._m0[63u].y, _1552 * cbSceneParam._m0[63u].x)));
        float _1769 = fma(_1564, cbSceneParam._m0[60u].w, fma(_1560, cbSceneParam._m0[60u].z, fma(_1556, cbSceneParam._m0[60u].y, _1552 * cbSceneParam._m0[60u].x))) / _1768;
        float _1770 = fma(_1564, cbSceneParam._m0[61u].w, fma(_1560, cbSceneParam._m0[61u].z, fma(_1556, cbSceneParam._m0[61u].y, _1552 * cbSceneParam._m0[61u].x))) / _1768;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1769 >= cbSceneParam._m0[64u].x) && (_1770 >= cbSceneParam._m0[64u].y)) && (_1769 <= cbSceneParam._m0[64u].z)) && (_1770 <= cbSceneParam._m0[64u].w))
        {
            float _1884 = fma(_1564, cbSceneParam._m0[62u].w, fma(_1560, cbSceneParam._m0[62u].z, fma(_1556, cbSceneParam._m0[62u].y, _1552 * cbSceneParam._m0[62u].x))) / _1768;
            float _1888 = isnan(cbSceneParam._m0[41u].w) ? _1884 : (isnan(_1884) ? cbSceneParam._m0[41u].w : max(_1884, cbSceneParam._m0[41u].w));
            float _1931 = (cbSceneParam._m0[33u].x - sqrt(((_1566 * _1566) + (_1565 * _1565)) + (_1567 * _1567))) * cbSceneParam._m0[33u].y;
            float _4195 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
            float _1938 = (isnan(1.0) ? _4195 : (isnan(_4195) ? 1.0 : min(_4195, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1769, cbSceneParam._m0[33u].w + _1770), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1769, _1770 - cbSceneParam._m0[33u].z), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1769 - cbSceneParam._m0[33u].z, _1770 - cbSceneParam._m0[33u].w), _1888), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1769 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1770), _1888), 0.0)).x), vec4(0.25)));
            float _1942 = 1.0 - (_1938 * cbSceneParam._m0[34u].x);
            float _1943 = 1.0 - (_1938 * cbSceneParam._m0[34u].y);
            float _1944 = 1.0 - (_1938 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_1944) ? _1716 : (isnan(_1716) ? _1944 : min(_1716, _1944));
            frontier_phi_34_33_ladder_1 = isnan(_1943) ? _1715 : (isnan(_1715) ? _1943 : min(_1715, _1943));
            frontier_phi_34_33_ladder_2 = isnan(_1942) ? _1714 : (isnan(_1714) ? _1942 : min(_1714, _1942));
        }
        else
        {
            frontier_phi_34_33_ladder = _1716;
            frontier_phi_34_33_ladder_1 = _1715;
            frontier_phi_34_33_ladder_2 = _1714;
        }
        _1780 = frontier_phi_34_33_ladder_2;
        _1782 = frontier_phi_34_33_ladder_1;
        _1784 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1780 = _1714;
        _1782 = _1715;
        _1784 = _1716;
    }
    uvec4 _1789 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1791 = _1789.x * 14u;
    uint _1792 = _1791 + 13u;
    float _1799 = _482 + (-1.0);
    float _1804 = (cbLight._m0[_1792].x * _1799) + 1.0;
    float _1805 = (cbLight._m0[_1792].y * _1799) + 1.0;
    float _1806 = (cbLight._m0[_1792].z * _1799) + 1.0;
    float _1807 = (cbLight._m0[_1792].w * _1799) + 1.0;
    uint _1809 = _1791 + 4u;
    float _1821 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_310, _311, _312));
    float _1824 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    float _1825 = cbLight._m0[_1809].x * _1780;
    float _1826 = cbLight._m0[_1809].y * _1782;
    float _1827 = cbLight._m0[_1809].z * _1784;
    uint _1828 = _1791 + 5u;
    float _1840 = dot(vec3(cbLight._m0[_1791 | 1u].xyz), vec3(_310, _311, _312));
    float _1843 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    float _2016;
    float _2017;
    float _2018;
    if (_314 == 0.0)
    {
        float _4231 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
        float _4242 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1953 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * 0.3183098733425140380859375;
        float _1955 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * 0.3183098733425140380859375;
        _2016 = ((cbLight._m0[_1828].x * _1843) * _1955) + ((_1825 * _1824) * _1953);
        _2017 = ((_1843 * cbLight._m0[_1828].y) * _1955) + ((_1826 * _1824) * _1953);
        _2018 = ((_1843 * cbLight._m0[_1828].z) * _1955) + ((_1827 * _1824) * _1953);
    }
    else
    {
        float _1965 = _1821 + _314;
        float _1968 = (_314 * 2.0) + 1.0;
        float _1969 = (isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0))) / _1968;
        float _1976 = _1840 + _314;
        float _1978 = (isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) / _1968;
        _2016 = (((_1978 * cbLight._m0[_1828].x) * _1843) + ((_1825 * _1969) * _1824)) * 0.3183098733425140380859375;
        _2017 = (((_1978 * cbLight._m0[_1828].y) * _1843) + ((_1826 * _1969) * _1824)) * 0.3183098733425140380859375;
        _2018 = (((_1978 * cbLight._m0[_1828].z) * _1843) + ((_1827 * _1969) * _1824)) * 0.3183098733425140380859375;
    }
    uvec4 _2022 = floatBitsToUint(cbLight._m0[_1791 + 12u]);
    bool _2024 = _2022.x == 0u;
    float _2051;
    float _2053;
    float _2055;
    if (_2024)
    {
        _2051 = _2016;
        _2053 = _2017;
        _2055 = _2018;
    }
    else
    {
        uint _2059 = _1791 + 6u;
        float _2075 = (dot(vec3(cbLight._m0[_1791 + 2u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _2076 = _2075 * _2075;
        float _4263 = isnan(0.0) ? _2076 : (isnan(_2076) ? 0.0 : max(_2076, 0.0));
        float _2077 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _2078 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2051 = (((cbLight._m0[_2059].x * 0.3183098733425140380859375) * _2077) * _2078) + _2016;
        _2053 = (((cbLight._m0[_2059].y * 0.3183098733425140380859375) * _2077) * _2078) + _2017;
        _2055 = (((cbLight._m0[_2059].z * 0.3183098733425140380859375) * _2077) * _2078) + _2018;
    }
    bool _2058 = _2022.y == 0u;
    float _2109;
    float _2111;
    float _2113;
    if (_2058)
    {
        _2109 = _2051;
        _2111 = _2053;
        _2113 = _2055;
    }
    else
    {
        uint _2295 = _1791 + 7u;
        float _2311 = (dot(vec3(cbLight._m0[_1791 + 3u].xyz), vec3(_310, _311, _312)) * 0.5) + 0.5;
        float _2312 = _2311 * _2311;
        float _4279 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
        float _2313 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _2314 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2109 = (((cbLight._m0[_2295].x * 0.3183098733425140380859375) * _2313) * _2314) + _2051;
        _2111 = (((cbLight._m0[_2295].y * 0.3183098733425140380859375) * _2313) * _2314) + _2053;
        _2113 = (((cbLight._m0[_2295].z * 0.3183098733425140380859375) * _2313) * _2314) + _2055;
    }
    uint _2118 = _1791 + 8u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _313) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1791].x + _392;
    float _2137 = cbLight._m0[_1791].y + _393;
    float _2138 = cbLight._m0[_1791].z + _394;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_1791].xyz));
    float _4295 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _4306 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _2150 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2151 = dot(vec3(_310, _311, _312), vec3(_2143, _2144, _2145));
    float _4317 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_2143, _2144, _2145));
    float _4328 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2135 * _2135;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2171 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2172 = 0.959999978542327880859375 - _464;
    float _2174 = 0.959999978542327880859375 - _465;
    float _2175 = 0.959999978542327880859375 - _466;
    float _2182 = 1.0 - _2135;
    float _2193 = (0.5 / (((_2150 * ((_2149 * _2182) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2182) + _2135) * _2149))) * _2149;
    float _4339 = isnan(0.0) ? _2193 : (isnan(_2193) ? 0.0 : max(_2193, 0.0));
    float _2195 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2196 = isnan(1.0) ? _1804 : (isnan(_1804) ? 1.0 : min(_1804, 1.0));
    uint _2209 = _1791 | 1u;
    uint _2213 = _1791 + 9u;
    float _2227 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2209].w)) * _313) * 0.949999988079071044921875);
    float _2228 = _2227 * _2227;
    float _2229 = cbLight._m0[_2209].x + _392;
    float _2230 = cbLight._m0[_2209].y + _393;
    float _2231 = cbLight._m0[_2209].z + _394;
    float _2235 = inversesqrt(dot(vec3(_2229, _2230, _2231), vec3(_2229, _2230, _2231)));
    float _2236 = _2235 * _2229;
    float _2237 = _2235 * _2230;
    float _2238 = _2235 * _2231;
    float _2239 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2209].xyz));
    float _4355 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
    float _2243 = dot(vec3(_310, _311, _312), vec3(_2236, _2237, _2238));
    float _4366 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2246 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
    float _2247 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2236, _2237, _2238));
    float _4377 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2251 = _2228 * _2228;
    float _2255 = ((_2246 * _2246) * (_2251 + (-1.0))) + 1.0;
    float _2262 = exp2(log2(1.0 - (isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0)))) * 5.0);
    float _2269 = 1.0 - _2228;
    float _2279 = (0.5 / (((_2150 * ((_2242 * _2269) + _2228)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2269) + _2228) * _2242))) * _2242;
    float _4388 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2281 = (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2251 / ((_2255 * _2255) * 3.141590118408203125));
    float _2282 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    float _2292 = (((((_2262 * _2172) + _467) * cbLight._m0[_2213].x) * _2281) * _2282) + ((((cbLight._m0[_2118].x * _1780) * ((_2171 * _2172) + _467)) * _2195) * _2196);
    float _2293 = (((((_2262 * _2174) + _469) * cbLight._m0[_2213].y) * _2281) * _2282) + ((((cbLight._m0[_2118].y * _1782) * ((_2171 * _2174) + _469)) * _2195) * _2196);
    float _2294 = (((((_2262 * _2175) + _470) * cbLight._m0[_2213].z) * _2281) * _2282) + ((((cbLight._m0[_2118].z * _1784) * ((_2171 * _2175) + _470)) * _2195) * _2196);
    float _2324;
    float _2326;
    float _2328;
    if (_2024)
    {
        _2324 = _2292;
        _2326 = _2293;
        _2328 = _2294;
    }
    else
    {
        uint _2330 = _1791 + 2u;
        uint _2334 = _1791 + 10u;
        float _2348 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2330].w)) * _313) * 0.949999988079071044921875);
        float _2349 = _2348 * _2348;
        float _2350 = cbLight._m0[_2330].x + _392;
        float _2351 = cbLight._m0[_2330].y + _393;
        float _2352 = cbLight._m0[_2330].z + _394;
        float _2356 = inversesqrt(dot(vec3(_2350, _2351, _2352), vec3(_2350, _2351, _2352)));
        float _2357 = _2356 * _2350;
        float _2358 = _2356 * _2351;
        float _2359 = _2356 * _2352;
        float _2360 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2330].xyz));
        float _4404 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
        float _2363 = isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0));
        float _2364 = dot(vec3(_310, _311, _312), vec3(_2357, _2358, _2359));
        float _4415 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
        float _2367 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _2368 = dot(vec3(cbLight._m0[_2330].xyz), vec3(_2357, _2358, _2359));
        float _4426 = isnan(0.0) ? _2368 : (isnan(_2368) ? 0.0 : max(_2368, 0.0));
        float _2372 = _2349 * _2349;
        float _2376 = ((_2367 * _2367) * (_2372 + (-1.0))) + 1.0;
        float _2383 = exp2(log2(1.0 - (isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0)))) * 5.0);
        float _2390 = 1.0 - _2349;
        float _2400 = (0.5 / (((_2150 * ((_2363 * _2390) + _2349)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2390) + _2349) * _2363))) * _2363;
        float _4437 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
        float _2402 = (isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_2372 / ((_2376 * _2376) * 3.141590118408203125));
        float _2403 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
        _2324 = (((((_2383 * _2172) + _467) * cbLight._m0[_2334].x) * _2402) * _2403) + _2292;
        _2326 = (((((_2383 * _2174) + _469) * cbLight._m0[_2334].y) * _2402) * _2403) + _2293;
        _2328 = (((((_2383 * _2175) + _470) * cbLight._m0[_2334].z) * _2402) * _2403) + _2294;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2058)
    {
        _2413 = _2324;
        _2415 = _2326;
        _2417 = _2328;
    }
    else
    {
        uint _2424 = _1791 + 3u;
        uint _2428 = _1791 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _313) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _392;
        float _2445 = cbLight._m0[_2424].y + _393;
        float _2446 = cbLight._m0[_2424].z + _394;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_310, _311, _312), vec3(cbLight._m0[_2424].xyz));
        float _4453 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
        float _2458 = dot(vec3(_310, _311, _312), vec3(_2451, _2452, _2453));
        float _4464 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4475 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2150 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2150 * _2484) + _2443) * _2457))) * _2457;
        float _4486 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
        _2413 = (((((_2477 * _2172) + _467) * cbLight._m0[_2428].x) * _2496) * _2497) + _2324;
        _2415 = (((((_2477 * _2174) + _469) * cbLight._m0[_2428].y) * _2496) * _2497) + _2326;
        _2417 = (((((_2477 * _2175) + _470) * cbLight._m0[_2428].z) * _2496) * _2497) + _2328;
    }
    float _2563;
    float _2565;
    float _2567;
    float _2569;
    float _2571;
    float _2573;
    if (_1789.y == 0u)
    {
        uvec4 _2518 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2519 = _2518.x;
        uint _2530 = uint((float(_2518.y) * floor(float(uint(cbSceneParam._m0[85u].y * _401) / _2519))) + floor(float(uint(cbSceneParam._m0[85u].x * _400) / _2519)));
        float _2540 = (log2(_1567 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2541 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        uint _2544 = uint(isnan(14.0) ? _2541 : (isnan(_2541) ? 14.0 : min(_2541, 14.0)));
        uvec4 _2549 = texelFetch(g_lightClusterGridBuffer, int(((_2544 << 2u) + (_2530 << 6u)) >> 2u));
        uint _2550 = _2549.x;
        uint _2551 = _2518.z;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        if (((((1u << ((_2551 >> 4u) & 15u)) + 4294967295u) & _2550) == 0u) || ((_2551 & 240u) == 0u))
        {
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
        }
        else
        {
            float _2577;
            float _2579;
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2758 = 0.0;
            float _2759 = 0.0;
            float _2760 = 0.0;
            float _2761 = 0.0;
            float _2762 = 0.0;
            float _2763 = 0.0;
            uint _2764 = 0u;
            uint _2773;
            bool _2774;
            for (;;)
            {
                _2773 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2764 << 2u)) >> 2u)).x;
                _2774 = _2773 == 0u;
                float frontier_phi_69_pred;
                float frontier_phi_69_pred_1;
                float frontier_phi_69_pred_2;
                float frontier_phi_69_pred_3;
                float frontier_phi_69_pred_4;
                float frontier_phi_69_pred_5;
                if (_2774)
                {
                    frontier_phi_69_pred = _2763;
                    frontier_phi_69_pred_1 = _2762;
                    frontier_phi_69_pred_2 = _2761;
                    frontier_phi_69_pred_3 = _2760;
                    frontier_phi_69_pred_4 = _2759;
                    frontier_phi_69_pred_5 = _2758;
                }
                else
                {
                    float _2935;
                    float _2936;
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    uint _2941;
                    _2935 = _2758;
                    _2936 = _2759;
                    _2937 = _2760;
                    _2938 = _2761;
                    _2939 = _2762;
                    _2940 = _2763;
                    _2941 = _2773;
                    float _2866;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    for (;;)
                    {
                        uint _2945 = uint(findLSB(_2941)) + (_2764 << 5u);
                        uint _2942 = (_2941 + 4294967295u) & _2941;
                        uint _2947 = _2945 * 48u;
                        vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2947)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2947 + 3u)).x));
                        uint _2967 = (_2945 * 48u) + 4u;
                        vec4 _2980 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2967)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2967 + 3u)).x));
                        float _2981 = _2980.x;
                        float _2982 = _2980.y;
                        float _2983 = _2980.z;
                        uint _2986 = (_2945 * 48u) + 8u;
                        vec3 _2997 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2986)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2986 + 2u)).x));
                        uint _3002 = (_2945 * 48u) + 12u;
                        vec2 _3010 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3002)).x, texelFetch(g_PointLightRenderingBuffer, int(_3002 + 1u)).x));
                        float _3016 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
                        float _3017 = _3016 * _1565;
                        float _3018 = _3016 * _1566;
                        float _3019 = _3016 * _1567;
                        float _3020 = _2961.x - _1565;
                        float _3021 = _2961.y - _1566;
                        float _3022 = _2961.z - _1567;
                        float _3023 = dot(vec3(_3020, _3021, _3022), vec3(_3020, _3021, _3022));
                        float _3026 = inversesqrt(_3023);
                        float _3027 = _3026 * _3020;
                        float _3028 = _3026 * _3021;
                        float _3029 = _3026 * _3022;
                        float _3030 = dot(vec3(_422, _425, _428), vec3(_3027, _3028, _3029));
                        float _3035 = 1.0 - (_3023 * _2961.w);
                        float _4512 = isnan(0.0) ? _3035 : (isnan(_3035) ? 0.0 : max(_3035, 0.0));
                        float _3036 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3037 = sqrt(_3023) * _2980.w;
                        float _3040 = 1.39999997615814208984375 / (_3037 + 1.39999997615814208984375);
                        float _3041 = _3040 * _3040;
                        float _3042 = 1.0 - _3041;
                        float _3044 = (_3042 * _3042) * _314;
                        float _3047 = ((_3042 * _3030) + _3041) + _3044;
                        float _3052 = _3037 * _3037;
                        float _3057 = ((isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0))) * _3036) / (((_3044 * 2.0) + 1.0) * ((_3052 * 0.699999988079071044921875) + 1.0));
                        float _3061 = dot(vec3(_3027, _3028, _3029), vec3(_3017, _3018, _3019));
                        float _4528 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                        float _3068 = dot(vec3((-0.0) - _3017, (-0.0) - _3018, (-0.0) - _3019), vec3(_422, _425, _428)) + 1.0;
                        float _3070 = (isnan(0.0) ? _3068 : (isnan(_3068) ? 0.0 : max(_3068, 0.0))) * 0.5;
                        float _3077 = ((_3070 * _3070) * _3010.x) * exp2((_3010.y * 32.0) * log2(isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0))));
                        float _3079 = _314 / (_314 + 1.0);
                        float _3095 = (-0.0) - _1565;
                        float _3096 = (-0.0) - _1566;
                        float _3097 = (-0.0) - _1567;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3102 = _3101 * _3095;
                        float _3103 = _3101 * _3096;
                        float _3104 = _3101 * _3097;
                        float _3111 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                        float _3112 = 1.0 - _498;
                        float _3119 = sqrt(1.0 - ((1.0 - (_3112 * _3112)) * (1.0 - (_3111 * _3111))));
                        float _3120 = _3119 * _3119;
                        float _3121 = _3120 * _3120;
                        float _3122 = _3102 + _3027;
                        float _3123 = _3103 + _3028;
                        float _3124 = _3104 + _3029;
                        float _3128 = inversesqrt(dot(vec3(_3122, _3123, _3124), vec3(_3122, _3123, _3124)));
                        float _3132 = dot(vec3(_422, _425, _428), vec3(_3102, _3103, _3104));
                        float _4544 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3136 = dot(vec3(_422, _425, _428), vec3(_3128 * _3122, _3128 * _3123, _3128 * _3124));
                        float _4555 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3139 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3143 = ((_3139 * _3139) * (_3121 + (-1.0))) + 1.0;
                        float _3144 = _3040 * _3120;
                        float _3145 = _3144 * _3144;
                        float _3148 = ((1.0 - _3145) * _3030) + _3145;
                        float _4566 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3149 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3150 = 1.0 - _3120;
                        float _3160 = (0.5 / (((_3149 * ((_3135 * _3150) + _3120)) + 9.9999999392252902907785028219223e-09) + (((_3149 * _3150) + _3120) * _3135))) * _3149;
                        float _4577 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                        float _3171 = (((_3121 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3143 * _3143) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125))) * _3036;
                        _2869 = (((((_2981 * 0.3183098733425140380859375) * _3079) * _3077) + _2981) * _3057) + _2938;
                        _2870 = (((((_2982 * 0.3183098733425140380859375) * _3079) * _3077) + _2982) * _3057) + _2939;
                        _2871 = (((((_2983 * 0.3183098733425140380859375) * _3079) * _3077) + _2983) * _3057) + _2940;
                        _2866 = (_3171 * _2997.x) + _2935;
                        _2867 = (_3171 * _2997.y) + _2936;
                        _2868 = (_3171 * _2997.z) + _2937;
                        if (_2942 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2935 = _2866;
                            _2936 = _2867;
                            _2937 = _2868;
                            _2938 = _2869;
                            _2939 = _2870;
                            _2940 = _2871;
                            _2941 = _2942;
                        }
                    }
                    frontier_phi_69_pred = _2871;
                    frontier_phi_69_pred_1 = _2870;
                    frontier_phi_69_pred_2 = _2869;
                    frontier_phi_69_pred_3 = _2868;
                    frontier_phi_69_pred_4 = _2867;
                    frontier_phi_69_pred_5 = _2866;
                }
                _2587 = frontier_phi_69_pred;
                _2585 = frontier_phi_69_pred_1;
                _2583 = frontier_phi_69_pred_2;
                _2581 = frontier_phi_69_pred_3;
                _2579 = frontier_phi_69_pred_4;
                _2577 = frontier_phi_69_pred_5;
                uint _2765 = _2764 + 1u;
                if (_2765 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2758 = _2577;
                    _2759 = _2579;
                    _2760 = _2581;
                    _2761 = _2583;
                    _2762 = _2585;
                    _2763 = _2587;
                    _2764 = _2765;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
        }
        uvec4 _2590 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2591 = _2590.z;
        uint _2593 = (_2591 >> 8u) & 15u;
        float _2726;
        float _2728;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        if (((4294967295u << _2593) & _2550) == 0u)
        {
            _2726 = _2576;
            _2728 = _2578;
            _2730 = _2580;
            _2732 = _2582;
            _2734 = _2584;
            _2736 = _2586;
        }
        else
        {
            float _2751 = inversesqrt(dot(vec3(_1565, _1566, _1567), vec3(_1565, _1566, _1567)));
            float _2752 = _2751 * _1565;
            float _2753 = _2751 * _1566;
            float _2754 = _2751 * _1567;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2593 < ((_2591 >> 12u) & 15u))
            {
                float _2727;
                float _2729;
                float _2731;
                float _2733;
                float _2735;
                float _2737;
                float _2918 = _2576;
                float _2919 = _2578;
                float _2920 = _2580;
                float _2921 = _2582;
                float _2922 = _2584;
                float _2923 = _2586;
                uint _2924 = _2593;
                uint _2933;
                bool _2934;
                for (;;)
                {
                    _2933 = texelFetch(g_lightClassification, int((((_2544 << 5u) + (_2530 << 9u)) + (_2924 << 2u)) >> 2u)).x;
                    _2934 = _2933 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2934)
                    {
                        frontier_phi_77_pred = _2923;
                        frontier_phi_77_pred_1 = _2922;
                        frontier_phi_77_pred_2 = _2921;
                        frontier_phi_77_pred_3 = _2920;
                        frontier_phi_77_pred_4 = _2919;
                        frontier_phi_77_pred_5 = _2918;
                    }
                    else
                    {
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3227 = _2918;
                        float _3228 = _2919;
                        float _3229 = _2920;
                        float _3230 = _2921;
                        float _3231 = _2922;
                        float _3232 = _2923;
                        uint _3233 = _2933;
                        uint _3234;
                        vec4 _3259;
                        float _3260;
                        vec4 _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        vec3 _3290;
                        vec2 _3299;
                        vec4 _3315;
                        vec4 _3331;
                        float _3378;
                        bool _3379;
                        for (;;)
                        {
                            uint _3244 = ((_2924 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3233));
                            _3234 = (_3233 + 4294967295u) & _3233;
                            uint _3246 = _3244 * 40u;
                            _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3260 = _3259.w;
                            uint _3262 = (_3244 * 40u) + 4u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            _3276 = _3275.x;
                            _3277 = _3275.y;
                            _3278 = _3275.z;
                            uint _3280 = (_3244 * 40u) + 8u;
                            _3290 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x));
                            uint _3292 = (_3244 * 40u) + 12u;
                            _3299 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x));
                            uint _3302 = (_3244 * 40u) + 16u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3318 = (_3244 * 40u) + 20u;
                            _3331 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3318)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3318 + 3u)).x));
                            uint _3334 = (_3244 * 40u) + 24u;
                            vec4 _3347 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3334)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3334 + 3u)).x));
                            uint _3353 = (_3244 * 40u) + 28u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            _3378 = fma(_1567, _3366.z, fma(_1566, _3366.y, _3366.x * _1565)) + _3366.w;
                            _3379 = !((fma(_1567, _3347.z, fma(_1566, _3347.y, _3347.x * _1565)) + _3347.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3379)
                            {
                                float _3405 = _3259.x - _1565;
                                float _3406 = _3259.y - _1566;
                                float _3407 = _3259.z - _1567;
                                float _3408 = dot(vec3(_3405, _3406, _3407), vec3(_3405, _3406, _3407));
                                float _3411 = inversesqrt(_3408);
                                float _3412 = _3411 * _3405;
                                float _3413 = _3411 * _3406;
                                float _3414 = _3411 * _3407;
                                float _3418 = 1.0 - (_3408 / (_3260 * _3260));
                                float _4588 = isnan(0.0) ? _3418 : (isnan(_3418) ? 0.0 : max(_3418, 0.0));
                                float _3419 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3423 = sqrt(_3408) * _3275.w;
                                float _3425 = 1.39999997615814208984375 / (_3423 + 1.39999997615814208984375);
                                float _3426 = _3425 * _3425;
                                float _3427 = 1.0 - _3426;
                                float _3429 = (_3427 * _3427) * _314;
                                float _3432 = ((_3427 * dot(vec3(_3412, _3413, _3414), vec3(_422, _425, _428))) + _3426) + _3429;
                                float _3437 = _3423 * _3423;
                                float _3442 = (fma(_1567, _3315.z, fma(_1566, _3315.y, _3315.x * _1565)) + _3315.w) / _3378;
                                float _3443 = (fma(_1567, _3331.z, fma(_1566, _3331.y, _3331.x * _1565)) + _3331.w) / _3378;
                                float _3447 = 1.0 - dot(vec2(_3442, _3443), vec2(_3442, _3443));
                                float _4604 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3448 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3449 = _3448 * (((isnan(0.0) ? _3432 : (isnan(_3432) ? 0.0 : max(_3432, 0.0))) * _3419) / (((_3429 * 2.0) + 1.0) * ((_3437 * 0.699999988079071044921875) + 1.0)));
                                float _3450 = (-0.0) - _2752;
                                float _3451 = (-0.0) - _2753;
                                float _3452 = (-0.0) - _2754;
                                float _3453 = dot(vec3(_3412, _3413, _3414), vec3(_2752, _2753, _2754));
                                float _4615 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3460 = dot(vec3(_3450, _3451, _3452), vec3(_422, _425, _428)) + 1.0;
                                float _3462 = (isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * 0.5;
                                float _3469 = ((_3462 * _3462) * _3299.x) * exp2((_3299.y * 32.0) * log2(isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))));
                                float _3471 = _314 / (_314 + 1.0);
                                float _3492 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3493 = 1.0 - _498;
                                float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                                float _3501 = _3500 * _3500;
                                float _3502 = _3501 * _3501;
                                float _3503 = _3412 - _2752;
                                float _3504 = _3413 - _2753;
                                float _3505 = _3414 - _2754;
                                float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                                float _3513 = dot(vec3(_422, _425, _428), vec3(_3450, _3451, _3452));
                                float _4631 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3517 = dot(vec3(_422, _425, _428), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                                float _4642 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
                                float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                                float _3525 = _3425 * _3501;
                                float _3526 = _3525 * _3525;
                                float _3532 = ((1.0 - _3526) * dot(vec3(_422, _425, _428), vec3(_3412, _3413, _3414))) + _3526;
                                float _4653 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                                float _3534 = 1.0 - _3501;
                                float _3544 = (0.5 / (((_3533 * ((_3516 * _3534) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3501) * _3516))) * _3533;
                                float _4664 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3554 = (_3448 * _3419) * (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) / ((_3524 * _3524) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = ((((_3277 * 0.3183098733425140380859375) * _3471) * _3469) + _3277) * _3449;
                                frontier_phi_83_pred_1 = ((((_3276 * 0.3183098733425140380859375) * _3471) * _3469) + _3276) * _3449;
                                frontier_phi_83_pred_2 = _3554 * _3290.z;
                                frontier_phi_83_pred_3 = _3554 * _3290.y;
                                frontier_phi_83_pred_4 = _3554 * _3290.x;
                                frontier_phi_83_pred_5 = ((((_3278 * 0.3183098733425140380859375) * _3471) * _3469) + _3278) * _3449;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3562 = frontier_phi_83_pred;
                            _3561 = frontier_phi_83_pred_1;
                            _3560 = frontier_phi_83_pred_2;
                            _3559 = frontier_phi_83_pred_3;
                            _3558 = frontier_phi_83_pred_4;
                            _3563 = frontier_phi_83_pred_5;
                            _3217 = _3561 + _3230;
                            _3218 = _3562 + _3231;
                            _3219 = _3563 + _3232;
                            _3214 = _3558 + _3227;
                            _3215 = _3559 + _3228;
                            _3216 = _3560 + _3229;
                            if (_3234 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3227 = _3214;
                                _3228 = _3215;
                                _3229 = _3216;
                                _3230 = _3217;
                                _3231 = _3218;
                                _3232 = _3219;
                                _3233 = _3234;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3219;
                        frontier_phi_77_pred_1 = _3218;
                        frontier_phi_77_pred_2 = _3217;
                        frontier_phi_77_pred_3 = _3216;
                        frontier_phi_77_pred_4 = _3215;
                        frontier_phi_77_pred_5 = _3214;
                    }
                    _2737 = frontier_phi_77_pred;
                    _2735 = frontier_phi_77_pred_1;
                    _2733 = frontier_phi_77_pred_2;
                    _2731 = frontier_phi_77_pred_3;
                    _2729 = frontier_phi_77_pred_4;
                    _2727 = frontier_phi_77_pred_5;
                    uint _2925 = _2924 + 1u;
                    if (_2925 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2918 = _2727;
                        _2919 = _2729;
                        _2920 = _2731;
                        _2921 = _2733;
                        _2922 = _2735;
                        _2923 = _2737;
                        _2924 = _2925;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2737;
                frontier_phi_63_64_ladder_1 = _2735;
                frontier_phi_63_64_ladder_2 = _2733;
                frontier_phi_63_64_ladder_3 = _2729;
                frontier_phi_63_64_ladder_4 = _2727;
                frontier_phi_63_64_ladder_5 = _2731;
            }
            else
            {
                frontier_phi_63_64_ladder = _2586;
                frontier_phi_63_64_ladder_1 = _2584;
                frontier_phi_63_64_ladder_2 = _2582;
                frontier_phi_63_64_ladder_3 = _2578;
                frontier_phi_63_64_ladder_4 = _2576;
                frontier_phi_63_64_ladder_5 = _2580;
            }
            _2726 = frontier_phi_63_64_ladder_4;
            _2728 = frontier_phi_63_64_ladder_3;
            _2730 = frontier_phi_63_64_ladder_5;
            _2732 = frontier_phi_63_64_ladder_2;
            _2734 = frontier_phi_63_64_ladder_1;
            _2736 = frontier_phi_63_64_ladder;
        }
        float _2741 = isnan(1.0) ? _482 : (isnan(_482) ? 1.0 : min(_482, 1.0));
        _2563 = (_2741 * _2732) + _2109;
        _2565 = (_2741 * _2734) + _2111;
        _2567 = (_2741 * _2736) + _2113;
        _2569 = ((_2726 * _467) * _2741) + _2413;
        _2571 = ((_2728 * _469) * _2741) + _2415;
        _2573 = ((_2730 * _470) * _2741) + _2417;
    }
    else
    {
        _2563 = _2109;
        _2565 = _2111;
        _2567 = _2113;
        _2569 = _2413;
        _2571 = _2415;
        _2573 = _2417;
    }
    float _2665;
    float _2666;
    float _2667;
    if (_314 > 0.0)
    {
        uint _2597 = _1791 + 4u;
        float _2603 = (-0.0) - _392;
        float _2605 = (-0.0) - _393;
        float _2606 = (-0.0) - _394;
        float _2607 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_2603, _2605, _2606));
        float _4680 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        float _2611 = _493 + 1.0;
        float _2613 = (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))) * 0.5;
        float _2618 = _2613 * _2613;
        float _2619 = _2618 * exp2(log2(isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0))) * 32.0);
        float _2621 = _314 / (_314 + 1.0);
        float _2622 = isnan(_1804) ? 1.0 : (isnan(1.0) ? _1804 : min(1.0, _1804));
        uint _2635 = _1791 + 5u;
        float _2641 = dot(vec3(cbLight._m0[_2209].xyz), vec3(_2603, _2605, _2606));
        float _4701 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        float _2648 = _2618 * exp2(log2(isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0))) * 32.0);
        float _2649 = isnan(_1805) ? 1.0 : (isnan(1.0) ? _1805 : min(1.0, _1805));
        _2665 = ((((_2648 * cbLight._m0[_2635].x) * _2621) * _2649) + ((((cbLight._m0[_2597].x * _1780) * _2619) * _2621) * _2622)) * 0.3183098733425140380859375;
        _2666 = ((((_2648 * cbLight._m0[_2635].y) * _2621) * _2649) + ((((cbLight._m0[_2597].y * _1782) * _2619) * _2621) * _2622)) * 0.3183098733425140380859375;
        _2667 = ((((_2648 * cbLight._m0[_2635].z) * _2621) * _2649) + ((((cbLight._m0[_2597].z * _1784) * _2619) * _2621) * _2622)) * 0.3183098733425140380859375;
    }
    else
    {
        _2665 = 0.0;
        _2666 = 0.0;
        _2667 = 0.0;
    }
    float _4717 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _4728 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _4739 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    uint _2689 = _441 + 6u;
    float _2697 = _400 / cbSceneParam._m0[86u].x;
    float _2698 = _401 / cbSceneParam._m0[86u].y;
    vec4 _2712 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, (log2((isnan(cbSceneParam._m0[77u].w) ? _334 : (isnan(_334) ? cbSceneParam._m0[77u].w : min(_334, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2714 = _2712.x;
    float _2715 = _2712.y;
    float _2716 = _2712.z;
    float _2717 = _2712.w;
    float _2816;
    float _2818;
    float _2820;
    float _2822;
    if (_334 > cbSceneParam._m0[78u].w)
    {
        float _2779 = isnan(_334) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _334 : min(cbSceneParam._m0[80u].w, _334));
        float _2780 = _2779 / _334;
        float _2791 = _2780 * _385;
        float _2792 = _386 * _2780;
        float _2793 = (-0.0) - _2792;
        float _2794 = _2780 * _387;
        float _2796 = (cbSceneParam._m0[77u].w * _2793) / _2779;
        float _2797 = _2796 + cbSceneParam._m0[79u].w;
        float _2798 = cbSceneParam._m0[79u].w - _2792;
        float _2804 = sqrt(((_2791 * _2791) + (_2792 * _2792)) + (_2794 * _2794));
        float _2807 = (1.0 - (cbSceneParam._m0[77u].w / _2779)) * _2804;
        float _2812 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2814 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3176;
        if (abs((_2793 - _2796) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3176 = ((((_2797 > 0.0) ? exp2(_2812 * _2797) : (2.0 - exp2(_2814 * _2797))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2807;
        }
        else
        {
            float _2891 = 1.0 / cbSceneParam._m0[80u].x;
            float _2892 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : max(_2797, _2798));
            float _2893 = isnan(_2798) ? _2797 : (isnan(_2797) ? _2798 : min(_2797, _2798));
            float _2902 = isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : min(_2892, 0.0));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            _3176 = ((abs(_2804 / _2793) * cbSceneParam._m0[80u].y) * ((((_2902 - _2903) * 2.0) - ((exp2(_2812 * (isnan(0.0) ? _2892 : (isnan(_2892) ? 0.0 : max(_2892, 0.0)))) - exp2(_2812 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0))))) * _2891)) - ((exp2(_2814 * _2902) - exp2(_2814 * _2903)) * _2891))) + (_2807 * cbSceneParam._m0[80u].z);
        }
        vec4 _3178 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2697, _2698, 1.0), 0.0);
        float _3187 = exp2((_3176 * (-1.44269502162933349609375)) * (1.0 - _3178.w));
        float _3188 = log2(_3187);
        float _3204 = log2(_2717);
        _2816 = (exp2(_3204 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].x)) * _3178.x) / cbSceneParam._m0[78u].x)) + _2714;
        _2818 = (exp2(_3204 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].y)) * _3178.y) / cbSceneParam._m0[78u].y)) + _2715;
        _2820 = (exp2(_3204 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3188 * cbSceneParam._m0[78u].z)) * _3178.z) / cbSceneParam._m0[78u].z)) + _2716;
        _2822 = _3187 * _2717;
    }
    else
    {
        _2816 = _2714;
        _2818 = _2715;
        _2820 = _2716;
        _2822 = _2717;
    }
    float _2834 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2835 = _2834 == 3.0;
    float _2836 = log2(_2822);
    float _2843 = exp2(_2836 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0))) * ((_2563 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _482)) + _2665)) + ((_2569 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2844 = exp2(_2836 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4728 : (isnan(_4728) ? 1.0 : min(_4728, 1.0))) * ((_2565 + ((isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0))) * _482)) + _2666)) + ((_2571 + ((isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2845 = exp2(_2836 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4739 : (isnan(_4739) ? 1.0 : min(_4739, 1.0))) * ((_2567 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _482)) + _2667)) + ((_2573 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1292)) * cbPerFrame._m0[3u].x));
    float _2854 = (_2834 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2854 * (_2835 ? _2843 : (_2843 + (cbSceneParam._m0[72u].w * _2816)));
    SV_Target.y = _2854 * (_2835 ? _2844 : (_2844 + (cbSceneParam._m0[72u].w * _2818)));
    SV_Target.z = _2854 * (_2835 ? _2845 : (_2845 + (cbSceneParam._m0[72u].w * _2820)));
    SV_Target.w = cbInstanceData._m0[_2689].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2689].w;
}


