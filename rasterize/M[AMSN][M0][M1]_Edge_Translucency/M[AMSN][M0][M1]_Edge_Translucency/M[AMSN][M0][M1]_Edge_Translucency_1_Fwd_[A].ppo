#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _864;
float _3460;
float _3461;
float _3462;
float _3463;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.w;
    float _231 = _224.x * cbMtdParam._m0[9u].x;
    float _232 = _224.y * cbMtdParam._m0[9u].y;
    float _233 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _245 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _249 = _245.z;
    float _253 = (_245.x * 2.0) + (-1.0);
    float _255 = (_245.y * 2.0) + (-1.0);
    float _256 = dot(vec2(_253, _255), vec2(_253, _255));
    float _3472 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _262 = sqrt(1.0 - (isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))));
    vec4 _274 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _281 = cbMtdParam._m0[10u].x * _274.x;
    float _284 = fma(_262, _194 * NORMAL.x, fma(_255, _201 * TANGENT.x, (_187 * _180) * _253));
    float _287 = fma(_262, _194 * NORMAL.y, fma(_255, _201 * TANGENT.y, (_187 * _181) * _253));
    float _290 = fma(_262, _194 * NORMAL.z, fma(_255, _201 * TANGENT.z, (_187 * _182) * _253));
    float _294 = inversesqrt(dot(vec3(_284, _287, _290), vec3(_284, _287, _290)));
    float _295 = _294 * _284;
    float _296 = _294 * _287;
    float _297 = _294 * _290;
    float _3483 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _298 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    float _299 = isnan(0.0) ? _281 : (isnan(_281) ? 0.0 : max(_281, 0.0));
    float _3499 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3510 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3521 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _318 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _359 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _369 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _359);
    float _370 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _359);
    float _371 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _359);
    float _375 = inversesqrt(dot(vec3(_369, _370, _371), vec3(_369, _370, _371)));
    float _376 = _369 * _375;
    float _377 = _370 * _375;
    float _378 = _371 * _375;
    vec4 _383 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _385 = _383.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _543 = sqrt(((_369 * _369) + (_370 * _370)) + (_371 * _371));
        float _549 = (cbMatDynParam._m0[5u].x * _543) + cbMatDynParam._m0[5u].y;
        float _3532 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        float _550 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _554 = (cbMatDynParam._m0[5u].z * _543) + cbMatDynParam._m0[5u].w;
        float _3543 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) - _550)) + _550) < ((_385 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _397 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _398 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _418 = fma(_297, cbSceneParam._m0[5u].z, fma(_296, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _295));
    float _421 = fma(_297, cbSceneParam._m0[6u].z, fma(_296, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _295));
    float _424 = fma(_297, cbSceneParam._m0[7u].z, fma(_296, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _295));
    uint _437 = uint(roundEven(NORMAL.w)) * 13u;
    uint _439 = _437 + 9u;
    uint _440 = _439 + uint(cbMatDynParam._m0[0u].w);
    float _446 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0)))) * cbInstanceData._m0[_440].x;
    float _447 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0)))) * cbInstanceData._m0[_440].y;
    float _448 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0)))) * cbInstanceData._m0[_440].z;
    float _3554 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
    float _3565 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
    float _3576 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
    vec4 _460 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _397, cbSceneParam._m0[86u].y * _398));
    float _463 = _460.x * TEXCOORD.z;
    float _464 = dot(vec3(_295, _296, _297), vec3(_376, _377, _378));
    float _467 = _464 * 2.0;
    float _471 = (_467 * _295) - _376;
    float _472 = (_467 * _296) - _377;
    float _473 = (_467 * _297) - _378;
    float _474 = dot(vec3(_376, _377, _378), vec3(_295, _296, _297));
    float _477 = abs(_474);
    float _3587 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _479 = sqrt(_298);
    float _492 = exp2((_479 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_479 * 3.0));
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _863;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _588 = fma(_532, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524));
        float _592 = fma(_532, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524));
        float _596 = fma(_532, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524));
        float _621 = _524 + _295;
        float _622 = _528 + _296;
        float _623 = _532 + _297;
        float _633 = fma(_623, cbModelParam._m0[26u].z, fma(_622, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621)) - _588;
        float _634 = fma(_623, cbModelParam._m0[27u].z, fma(_622, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621)) - _592;
        float _635 = fma(_623, cbModelParam._m0[28u].z, fma(_622, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621)) - _596;
        float _639 = inversesqrt(dot(vec3(_633, _634, _635), vec3(_633, _634, _635)));
        float _652 = ((_639 * _633) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_588 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_639 * _634) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_592 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _654 = ((_639 * _635) / cbModelParam._m0[34u].z) + ((((((_596 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _657 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _664 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _671 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        vec4 _678 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_652, _653, _654), 0.0);
        float _691 = exp2((_657.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_657.x + (-0.5));
        float _693 = _691 * (_657.y + (-0.5));
        float _694 = _691 * (_657.z + (-0.5));
        float _701 = exp2((_664.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_664.x + (-0.5));
        float _703 = _701 * (_664.y + (-0.5));
        float _704 = _701 * (_664.z + (-0.5));
        float _711 = exp2((_671.w + (-0.5)) * 20.0) * 2.0;
        float _712 = _711 * (_671.x + (-0.5));
        float _713 = _711 * (_671.y + (-0.5));
        float _714 = _711 * (_671.z + (-0.5));
        float _721 = exp2((_678.w + (-0.5)) * 20.0) * 2.0;
        float _722 = _721 * (_678.x + (-0.5));
        float _723 = _721 * (_678.y + (-0.5));
        float _724 = _721 * (_678.z + (-0.5));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _728 = _692 * 0.5;
        float _729 = _702 * 0.5;
        float _730 = _712 * 0.5;
        float _731 = dot(vec3(_728, _729, _730), vec3(_728, _729, _730));
        float _736 = (_731 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_731);
        float _745 = (dot(vec3(_295, _296, _297), vec3(_736 * _728, _736 * _729, _736 * _730)) + 1.0) * 0.5;
        float _3613 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        float _755 = sqrt(((_729 * _729) + (_728 * _728)) + (_730 * _730)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3624 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _756 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _757 = _756 * 2.0;
        float _761 = (1.0 - _756) / (_756 + 1.0);
        float _3635 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _762 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
        float _771 = ((((1.0 - _762) * (_757 + 2.0)) * exp2(log2(isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0))) * (_757 + 1.0))) + _762) * _725;
        float _772 = _693 * 0.5;
        float _773 = _703 * 0.5;
        float _774 = _713 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _788 = (dot(vec3(_295, _296, _297), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3646 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _797 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3657 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3668 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_799 + 1.0))) + _804) * _726;
        float _814 = _694 * 0.5;
        float _815 = _704 * 0.5;
        float _816 = _714 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_295, _296, _297), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3679 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_727 + 9.9999997473787516355514526367188e-06);
        float _3690 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3701 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0))) * (_841 + 1.0))) + _846) * _727;
        _863 = _694;
        _865 = _693;
        _866 = _692;
        _867 = _704;
        _868 = _703;
        _869 = _702;
        _870 = _714;
        _871 = _713;
        _872 = _712;
        _873 = _727;
        _874 = _726;
        _875 = _725;
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _878 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
    }
    else
    {
        _863 = _864;
        _865 = _864;
        _866 = _864;
        _867 = _864;
        _868 = _864;
        _869 = _864;
        _870 = _864;
        _871 = _864;
        _872 = _864;
        _873 = _864;
        _874 = _864;
        _875 = _864;
        _876 = 0.0;
        _877 = 0.0;
        _878 = 0.0;
    }
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _907 = fma(_532, cbModelParam._m0[30u].z, fma(_528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _524));
        float _911 = fma(_532, cbModelParam._m0[31u].z, fma(_528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _524));
        float _915 = fma(_532, cbModelParam._m0[32u].z, fma(_528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _524));
        float _938 = _524 + _295;
        float _939 = _528 + _296;
        float _940 = _532 + _297;
        float _950 = fma(_940, cbModelParam._m0[30u].z, fma(_939, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938)) - _907;
        float _951 = fma(_940, cbModelParam._m0[31u].z, fma(_939, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938)) - _911;
        float _952 = fma(_940, cbModelParam._m0[32u].z, fma(_939, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938)) - _915;
        float _956 = inversesqrt(dot(vec3(_950, _951, _952), vec3(_950, _951, _952)));
        float _969 = ((_956 * _950) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_907 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_956 * _951) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_911 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_956 * _952) / cbModelParam._m0[35u].z) + ((((((_915 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_969, _970, _971), 0.0);
        float _1006 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_973.x + (-0.5));
        float _1008 = _1006 * (_973.y + (-0.5));
        float _1009 = _1006 * (_973.z + (-0.5));
        float _1016 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_980.x + (-0.5));
        float _1018 = _1016 * (_980.y + (-0.5));
        float _1019 = _1016 * (_980.z + (-0.5));
        float _1026 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_987.x + (-0.5));
        float _1028 = _1026 * (_987.y + (-0.5));
        float _1029 = _1026 * (_987.z + (-0.5));
        float _1036 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_994.x + (-0.5));
        float _1038 = _1036 * (_994.y + (-0.5));
        float _1039 = _1036 * (_994.z + (-0.5));
        float _1040 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = _1007 * 0.5;
        float _1044 = _1017 * 0.5;
        float _1045 = _1027 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_295, _296, _297), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_1040 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3764 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_1070 + 1.0))) + _1075) * _1040;
        float _1085 = _1008 * 0.5;
        float _1086 = _1018 * 0.5;
        float _1087 = _1028 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_295, _296, _297), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3797 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_1112 + 1.0))) + _1117) * _1041;
        float _1127 = _1009 * 0.5;
        float _1128 = _1019 * 0.5;
        float _1129 = _1029 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_295, _296, _297), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3808 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3819 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3830 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1154 + 1.0))) + _1159) * _1042;
        _1176 = _1009;
        _1177 = _1008;
        _1178 = _1007;
        _1179 = _1019;
        _1180 = _1018;
        _1181 = _1017;
        _1182 = _1029;
        _1183 = _1028;
        _1184 = _1027;
        _1185 = _1042;
        _1186 = _1041;
        _1187 = _1040;
        _1188 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
    }
    else
    {
        _1176 = _864;
        _1177 = _864;
        _1178 = _864;
        _1179 = _864;
        _1180 = _864;
        _1181 = _864;
        _1182 = _864;
        _1183 = _864;
        _1184 = _864;
        _1185 = _864;
        _1186 = _864;
        _1187 = _864;
        _1188 = 0.0;
        _1189 = 0.0;
        _1190 = 0.0;
    }
    float _1200 = (cbModelParam._m0[1u].x * (_1188 - _876)) + _876;
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _877)) + _877;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _878)) + _878;
    float _1223 = fma(_1202, cbSceneParam._m0[89u].z, fma(_1201, cbSceneParam._m0[89u].y, _1200 * cbSceneParam._m0[89u].x));
    float _1226 = fma(_1202, cbSceneParam._m0[90u].z, fma(_1201, cbSceneParam._m0[90u].y, _1200 * cbSceneParam._m0[90u].x));
    float _1229 = fma(_1202, cbSceneParam._m0[91u].z, fma(_1201, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1200));
    float _1244 = _471 * 0.5;
    float _1245 = _472 * 0.5;
    float _1246 = _473 * 0.5;
    float _1247 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1250 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1253 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_1176, _1179, _1182, _1185));
    float _1287;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1260 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_863, _867, _870, _873));
        float _1264 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_865, _868, _871, _874));
        float _1268 = dot(vec4(_1244, _1245, _1246, 1.0), vec4(_866, _869, _872, _875));
        float _1275 = dot(vec4(cbModelParam._m0[39u]), vec4(_1244, _1245, _1246, 1.0));
        _1287 = dot(vec3(isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1287 = 1.0;
    }
    float _1298;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1289 = dot(vec4(cbModelParam._m0[40u]), vec4(_1244, _1245, _1246, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1289) ? 0.0 : (isnan(0.0) ? _1289 : max(0.0, _1289))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1302 = (_1298 * cbModelParam._m0[1u].x) + (_1287 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _298);
    float _1313 = isnan(_1312) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1312 : min(cbModelParam._m0[25u].z, _1312));
    float _1395;
    float _1397;
    float _1399;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1362 = fma(_532, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524)) + cbModelParam._m0[13u].w;
        float _1366 = fma(_532, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524)) + cbModelParam._m0[14u].w;
        float _1370 = fma(_532, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524)) + cbModelParam._m0[15u].w;
        float _1373 = fma(_473, cbModelParam._m0[13u].z, fma(_472, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _471));
        float _1376 = fma(_473, cbModelParam._m0[14u].z, fma(_472, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _471));
        float _1379 = fma(_473, cbModelParam._m0[15u].z, fma(_472, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _471));
        float _1407;
        if (_1373 > 0.0)
        {
            _1407 = abs((1.0 - _1362) / _1373);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1362 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1407 = frontier_phi_17_15_ladder;
        }
        float _1587;
        if (_1376 > 0.0)
        {
            _1587 = abs((1.0 - _1366) / _1376);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1376 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1366 + 1.0) / _1376);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1587 = frontier_phi_26_22_ladder;
        }
        float _1661;
        if (_1379 > 0.0)
        {
            _1661 = abs((1.0 - _1370) / _1379);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1379 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1370 + 1.0) / _1379);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1661 = frontier_phi_37_33_ladder;
        }
        float _1663 = isnan(_1587) ? _1407 : (isnan(_1407) ? _1587 : min(_1407, _1587));
        float _1664 = isnan(_1661) ? _1663 : (isnan(_1663) ? _1661 : min(_1663, _1661));
        float _1668 = (_1664 * _1373) + _1362;
        float _1669 = (_1664 * _1376) + _1366;
        float _1670 = (_1664 * _1379) + _1370;
        float _1671 = _1664 * 9.9999997473787516355514526367188e-05;
        float _1673 = (-1.0) - _1671;
        float _1675 = _1671 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_1670 > _1675) || ((_1670 < _1673) || ((_1669 > _1675) || ((_1669 < _1673) || ((_1668 < _1673) || (_1668 > _1675))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1746 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1670, cbModelParam._m0[9u].z, fma(_1669, cbModelParam._m0[9u].y, _1668 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1670, cbModelParam._m0[10u].z, fma(_1669, cbModelParam._m0[10u].y, _1668 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1670, cbModelParam._m0[11u].z, fma(_1669, cbModelParam._m0[11u].y, _1668 * cbModelParam._m0[11u].x))), _1313);
            frontier_phi_16_37_ladder = _1746.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _1746.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _1746.x * cbModelParam._m0[1u].y;
        }
        _1395 = frontier_phi_16_37_ladder_2;
        _1397 = frontier_phi_16_37_ladder_1;
        _1399 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1383 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_471, _472, _473), _1313);
        _1395 = _1383.x * cbModelParam._m0[1u].y;
        _1397 = _1383.y * cbModelParam._m0[1u].y;
        _1399 = _1383.z * cbModelParam._m0[1u].y;
    }
    float _1403 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _298);
    float _1404 = isnan(_1403) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1403 : min(cbModelParam._m0[25u].w, _1403));
    float _1497;
    float _1499;
    float _1501;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1461 = fma(_532, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524)) + cbModelParam._m0[21u].w;
        float _1465 = fma(_532, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524)) + cbModelParam._m0[22u].w;
        float _1469 = fma(_532, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524)) + cbModelParam._m0[23u].w;
        float _1472 = fma(_473, cbModelParam._m0[21u].z, fma(_472, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _471));
        float _1475 = fma(_473, cbModelParam._m0[22u].z, fma(_472, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _471));
        float _1478 = fma(_473, cbModelParam._m0[23u].z, fma(_472, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _471));
        float _1592;
        if (_1472 > 0.0)
        {
            _1592 = abs((1.0 - _1461) / _1472);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1461 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1592 = frontier_phi_28_24_ladder;
        }
        float _1688;
        if (_1475 > 0.0)
        {
            _1688 = abs((1.0 - _1465) / _1475);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1475 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1465 + 1.0) / _1475);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1688 = frontier_phi_39_35_ladder;
        }
        float _1956;
        if (_1478 > 0.0)
        {
            _1956 = abs((1.0 - _1469) / _1478);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1478 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1469 + 1.0) / _1478);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _1956 = frontier_phi_48_45_ladder;
        }
        float _1958 = isnan(_1688) ? _1592 : (isnan(_1592) ? _1688 : min(_1592, _1688));
        float _1959 = isnan(_1956) ? _1958 : (isnan(_1958) ? _1956 : min(_1958, _1956));
        float _1963 = (_1959 * _1472) + _1461;
        float _1964 = (_1959 * _1475) + _1465;
        float _1965 = (_1959 * _1478) + _1469;
        float _1966 = _1959 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1966;
        float _1969 = _1966 + 1.0;
        float frontier_phi_25_48_ladder;
        float frontier_phi_25_48_ladder_1;
        float frontier_phi_25_48_ladder_2;
        if ((_1965 > _1969) || ((_1965 < _1967) || ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 < _1967) || (_1963 > _1969))))))
        {
            frontier_phi_25_48_ladder = 0.0;
            frontier_phi_25_48_ladder_1 = 0.0;
            frontier_phi_25_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2083 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1965, cbModelParam._m0[17u].z, fma(_1964, cbModelParam._m0[17u].y, _1963 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1965, cbModelParam._m0[18u].z, fma(_1964, cbModelParam._m0[18u].y, _1963 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1965, cbModelParam._m0[19u].z, fma(_1964, cbModelParam._m0[19u].y, _1963 * cbModelParam._m0[19u].x))), _1404);
            frontier_phi_25_48_ladder = _2083.z * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_1 = _2083.y * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_2 = _2083.x * cbModelParam._m0[1u].z;
        }
        _1497 = frontier_phi_25_48_ladder_2;
        _1499 = frontier_phi_25_48_ladder_1;
        _1501 = frontier_phi_25_48_ladder;
    }
    else
    {
        vec4 _1481 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_471, _472, _473), _1404);
        _1497 = _1481.x * cbModelParam._m0[1u].z;
        _1499 = _1481.y * cbModelParam._m0[1u].z;
        _1501 = _1481.z * cbModelParam._m0[1u].z;
    }
    float _1513 = ((((1.0 - _492) * ((_479 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_492 * _479)) * _463;
    float _1514 = _1513 * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1515 = _1513 * ((cbModelParam._m0[1u].w * (_1499 - _1397)) + _1397);
    float _1516 = _1513 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1519 = fma(_1516, cbSceneParam._m0[89u].z, fma(_1515, cbSceneParam._m0[89u].y, _1514 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1516, cbSceneParam._m0[90u].z, fma(_1515, cbSceneParam._m0[90u].y, _1514 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1516, cbSceneParam._m0[91u].z, fma(_1515, cbSceneParam._m0[91u].y, _1514 * cbSceneParam._m0[91u].x));
    uvec4 _1535 = floatBitsToUint(cbInstanceData._m0[_437 + 5u]);
    uint _1537 = _1535.x * 14u;
    uint _1538 = _1537 + 13u;
    float _1545 = _463 + (-1.0);
    float _1550 = (cbLight._m0[_1538].x * _1545) + 1.0;
    float _1551 = (cbLight._m0[_1538].y * _1545) + 1.0;
    float _1552 = (cbLight._m0[_1538].z * _1545) + 1.0;
    float _1553 = (cbLight._m0[_1538].w * _1545) + 1.0;
    uint _1555 = _1537 + 4u;
    float _1567 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_295, _296, _297));
    float _1570 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1571 = _1537 + 5u;
    float _1583 = dot(vec3(cbLight._m0[_1537 | 1u].xyz), vec3(_295, _296, _297));
    float _1586 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    float _1651;
    float _1652;
    float _1653;
    if (_299 == 0.0)
    {
        float _3966 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _3977 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
        float _1605 = (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0))) * 0.3183098733425140380859375;
        float _1607 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * 0.3183098733425140380859375;
        _1651 = ((cbLight._m0[_1571].x * _1586) * _1607) + ((cbLight._m0[_1555].x * _1570) * _1605);
        _1652 = ((_1586 * cbLight._m0[_1571].y) * _1607) + ((_1570 * cbLight._m0[_1555].y) * _1605);
        _1653 = ((_1586 * cbLight._m0[_1571].z) * _1607) + ((_1570 * cbLight._m0[_1555].z) * _1605);
    }
    else
    {
        float _1617 = _1567 + _299;
        float _1620 = (_299 * 2.0) + 1.0;
        float _1621 = (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) / _1620;
        float _1628 = _1583 + _299;
        float _1630 = (isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) / _1620;
        _1651 = (((_1630 * cbLight._m0[_1571].x) * _1586) + ((_1621 * cbLight._m0[_1555].x) * _1570)) * 0.3183098733425140380859375;
        _1652 = (((_1630 * cbLight._m0[_1571].y) * _1586) + ((_1621 * cbLight._m0[_1555].y) * _1570)) * 0.3183098733425140380859375;
        _1653 = (((_1630 * cbLight._m0[_1571].z) * _1586) + ((_1621 * cbLight._m0[_1555].z) * _1570)) * 0.3183098733425140380859375;
    }
    uvec4 _1658 = floatBitsToUint(cbLight._m0[_1537 + 12u]);
    bool _1660 = _1658.x == 0u;
    float _1693;
    float _1695;
    float _1697;
    if (_1660)
    {
        _1693 = _1651;
        _1695 = _1652;
        _1697 = _1653;
    }
    else
    {
        uint _1701 = _1537 + 6u;
        float _1717 = (dot(vec3(cbLight._m0[_1537 + 2u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _1718 = _1717 * _1717;
        float _3998 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
        float _1719 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1720 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1693 = (((cbLight._m0[_1701].x * 0.3183098733425140380859375) * _1719) * _1720) + _1651;
        _1695 = (((cbLight._m0[_1701].y * 0.3183098733425140380859375) * _1719) * _1720) + _1652;
        _1697 = (((cbLight._m0[_1701].z * 0.3183098733425140380859375) * _1719) * _1720) + _1653;
    }
    bool _1700 = _1658.y == 0u;
    float _1755;
    float _1757;
    float _1759;
    if (_1700)
    {
        _1755 = _1693;
        _1757 = _1695;
        _1759 = _1697;
    }
    else
    {
        uint _1927 = _1537 + 7u;
        float _1943 = (dot(vec3(cbLight._m0[_1537 + 3u].xyz), vec3(_295, _296, _297)) * 0.5) + 0.5;
        float _1944 = _1943 * _1943;
        float _4014 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1945 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1946 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _1755 = (((cbLight._m0[_1927].x * 0.3183098733425140380859375) * _1945) * _1946) + _1693;
        _1757 = (((cbLight._m0[_1927].y * 0.3183098733425140380859375) * _1945) * _1946) + _1695;
        _1759 = (((cbLight._m0[_1927].z * 0.3183098733425140380859375) * _1945) * _1946) + _1697;
    }
    uint _1764 = _1537 + 8u;
    float _1780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1537].w)) * _298) * 0.949999988079071044921875);
    float _1781 = _1780 * _1780;
    float _1782 = cbLight._m0[_1537].x + _376;
    float _1783 = cbLight._m0[_1537].y + _377;
    float _1784 = cbLight._m0[_1537].z + _378;
    float _1788 = inversesqrt(dot(vec3(_1782, _1783, _1784), vec3(_1782, _1783, _1784)));
    float _1789 = _1788 * _1782;
    float _1790 = _1788 * _1783;
    float _1791 = _1788 * _1784;
    float _1792 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1537].xyz));
    float _4030 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1795 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
    float _4041 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _1796 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
    float _1797 = dot(vec3(_295, _296, _297), vec3(_1789, _1790, _1791));
    float _4052 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1800 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _1801 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_1789, _1790, _1791));
    float _4063 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1805 = _1781 * _1781;
    float _1809 = ((_1800 * _1800) * (_1805 + (-1.0))) + 1.0;
    float _1820 = (exp2(log2(1.0 - (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1821 = 1.0 - _1781;
    float _1832 = (0.5 / (((_1796 * ((_1795 * _1821) + _1781)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1821) + _1781) * _1795))) * _1795;
    float _4074 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0))) * (_1805 / ((_1809 * _1809) * 3.141590118408203125));
    float _1835 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1845 = _1537 | 1u;
    uint _1849 = _1537 + 9u;
    float _1863 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1845].w)) * _298) * 0.949999988079071044921875);
    float _1864 = _1863 * _1863;
    float _1865 = cbLight._m0[_1845].x + _376;
    float _1866 = cbLight._m0[_1845].y + _377;
    float _1867 = cbLight._m0[_1845].z + _378;
    float _1871 = inversesqrt(dot(vec3(_1865, _1866, _1867), vec3(_1865, _1866, _1867)));
    float _1872 = _1871 * _1865;
    float _1873 = _1871 * _1866;
    float _1874 = _1871 * _1867;
    float _1875 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1845].xyz));
    float _4090 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _1879 = dot(vec3(_295, _296, _297), vec3(_1872, _1873, _1874));
    float _4101 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _1883 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_1872, _1873, _1874));
    float _4112 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1887 = _1864 * _1864;
    float _1891 = ((_1882 * _1882) * (_1887 + (-1.0))) + 1.0;
    float _1900 = (exp2(log2(1.0 - (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1901 = 1.0 - _1864;
    float _1911 = (0.5 / (((_1796 * ((_1878 * _1901) + _1864)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _1901) + _1864) * _1878))) * _1878;
    float _4123 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))) * (_1887 / ((_1891 * _1891) * 3.141590118408203125));
    float _1914 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
    float _1924 = (((_1900 * cbLight._m0[_1849].x) * _1913) * _1914) + (((_1820 * cbLight._m0[_1764].x) * _1834) * _1835);
    float _1925 = (((_1900 * cbLight._m0[_1849].y) * _1913) * _1914) + (((_1820 * cbLight._m0[_1764].y) * _1834) * _1835);
    float _1926 = (((_1900 * cbLight._m0[_1849].z) * _1913) * _1914) + (((_1820 * cbLight._m0[_1764].z) * _1834) * _1835);
    float _1982;
    float _1984;
    float _1986;
    if (_1660)
    {
        _1982 = _1924;
        _1984 = _1925;
        _1986 = _1926;
    }
    else
    {
        uint _1988 = _1537 + 2u;
        uint _1992 = _1537 + 10u;
        float _2006 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _298) * 0.949999988079071044921875);
        float _2007 = _2006 * _2006;
        float _2008 = cbLight._m0[_1988].x + _376;
        float _2009 = cbLight._m0[_1988].y + _377;
        float _2010 = cbLight._m0[_1988].z + _378;
        float _2014 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
        float _2015 = _2014 * _2008;
        float _2016 = _2014 * _2009;
        float _2017 = _2014 * _2010;
        float _2018 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_1988].xyz));
        float _4139 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2021 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
        float _2022 = dot(vec3(_295, _296, _297), vec3(_2015, _2016, _2017));
        float _4150 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
        float _2025 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _2026 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2015, _2016, _2017));
        float _4161 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
        float _2030 = _2007 * _2007;
        float _2034 = ((_2025 * _2025) * (_2030 + (-1.0))) + 1.0;
        float _2043 = (exp2(log2(1.0 - (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2044 = 1.0 - _2007;
        float _2054 = (0.5 / (((_1796 * ((_2021 * _2044) + _2007)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _2044) + _2007) * _2021))) * _2021;
        float _4172 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
        float _2056 = (isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2030 / ((_2034 * _2034) * 3.141590118408203125));
        float _2057 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1982 = (((_2043 * cbLight._m0[_1992].x) * _2056) * _2057) + _1924;
        _1984 = (((_2043 * cbLight._m0[_1992].y) * _2056) * _2057) + _1925;
        _1986 = (((_2043 * cbLight._m0[_1992].z) * _2056) * _2057) + _1926;
    }
    float _2088;
    float _2090;
    float _2092;
    if (_1700)
    {
        _2088 = _1982;
        _2090 = _1984;
        _2092 = _1986;
    }
    else
    {
        uint _2099 = _1537 + 3u;
        uint _2103 = _1537 + 11u;
        float _2117 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _298) * 0.949999988079071044921875);
        float _2118 = _2117 * _2117;
        float _2119 = cbLight._m0[_2099].x + _376;
        float _2120 = cbLight._m0[_2099].y + _377;
        float _2121 = cbLight._m0[_2099].z + _378;
        float _2125 = inversesqrt(dot(vec3(_2119, _2120, _2121), vec3(_2119, _2120, _2121)));
        float _2126 = _2125 * _2119;
        float _2127 = _2125 * _2120;
        float _2128 = _2125 * _2121;
        float _2129 = dot(vec3(_295, _296, _297), vec3(cbLight._m0[_2099].xyz));
        float _4188 = isnan(0.0) ? _2129 : (isnan(_2129) ? 0.0 : max(_2129, 0.0));
        float _2132 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _2133 = dot(vec3(_295, _296, _297), vec3(_2126, _2127, _2128));
        float _4199 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2136 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
        float _2137 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2126, _2127, _2128));
        float _4210 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2141 = _2118 * _2118;
        float _2145 = ((_2136 * _2136) * (_2141 + (-1.0))) + 1.0;
        float _2154 = (exp2(log2(1.0 - (isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2155 = 1.0 - _2118;
        float _2165 = (0.5 / (((_1796 * ((_2132 * _2155) + _2118)) + 9.9999999392252902907785028219223e-09) + (((_1796 * _2155) + _2118) * _2132))) * _2132;
        float _4221 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
        float _2167 = (isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0))) * (_2141 / ((_2145 * _2145) * 3.141590118408203125));
        float _2168 = isnan(1.0) ? _1553 : (isnan(_1553) ? 1.0 : min(_1553, 1.0));
        _2088 = (((_2154 * cbLight._m0[_2103].x) * _2167) * _2168) + _1982;
        _2090 = (((_2154 * cbLight._m0[_2103].y) * _2167) * _2168) + _1984;
        _2092 = (((_2154 * cbLight._m0[_2103].z) * _2167) * _2168) + _1986;
    }
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    float _2287;
    if (_1535.y == 0u)
    {
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2217;
        float _2219 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2217;
        float _2220 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2217;
        uvec4 _2232 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2233 = _2232.x;
        uint _2244 = uint((float(_2232.y) * floor(float(uint(cbSceneParam._m0[85u].y * _398) / _2233))) + floor(float(uint(cbSceneParam._m0[85u].x * _397) / _2233)));
        float _2254 = (log2(_2220 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2255 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
        uint _2258 = uint(isnan(14.0) ? _2255 : (isnan(_2255) ? 14.0 : min(_2255, 14.0)));
        uvec4 _2263 = texelFetch(g_lightClusterGridBuffer, int(((_2258 << 2u) + (_2244 << 6u)) >> 2u));
        uint _2264 = _2263.x;
        uint _2265 = _2232.z;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        float _2298;
        float _2300;
        if (((((1u << ((_2265 >> 4u) & 15u)) + 4294967295u) & _2264) == 0u) || ((_2265 & 240u) == 0u))
        {
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
            _2298 = 0.0;
            _2300 = 0.0;
        }
        else
        {
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2299;
            float _2301;
            float _2469 = 0.0;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            uint _2475 = 0u;
            uint _2484;
            bool _2485;
            for (;;)
            {
                _2484 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2475 << 2u)) >> 2u)).x;
                _2485 = _2484 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2485)
                {
                    frontier_phi_67_pred = _2469;
                    frontier_phi_67_pred_1 = _2474;
                    frontier_phi_67_pred_2 = _2473;
                    frontier_phi_67_pred_3 = _2472;
                    frontier_phi_67_pred_4 = _2471;
                    frontier_phi_67_pred_5 = _2470;
                }
                else
                {
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    uint _2676;
                    _2670 = _2469;
                    _2671 = _2470;
                    _2672 = _2471;
                    _2673 = _2472;
                    _2674 = _2473;
                    _2675 = _2474;
                    _2676 = _2484;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    for (;;)
                    {
                        uint _2680 = uint(findLSB(_2676)) + (_2475 << 5u);
                        uint _2677 = (_2676 + 4294967295u) & _2676;
                        uint _2682 = _2680 * 48u;
                        vec4 _2696 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2682)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2682 + 3u)).x));
                        uint _2702 = (_2680 * 48u) + 4u;
                        vec4 _2715 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2702)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2702 + 3u)).x));
                        float _2716 = _2715.x;
                        float _2717 = _2715.y;
                        float _2718 = _2715.z;
                        uint _2721 = (_2680 * 48u) + 8u;
                        vec3 _2732 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2721)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2721 + 2u)).x));
                        uint _2737 = (_2680 * 48u) + 12u;
                        vec2 _2745 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x));
                        float _2751 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
                        float _2752 = _2751 * _2218;
                        float _2753 = _2751 * _2219;
                        float _2754 = _2751 * _2220;
                        float _2755 = _2696.x - _2218;
                        float _2756 = _2696.y - _2219;
                        float _2757 = _2696.z - _2220;
                        float _2758 = dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757));
                        float _2761 = inversesqrt(_2758);
                        float _2762 = _2761 * _2755;
                        float _2763 = _2761 * _2756;
                        float _2764 = _2761 * _2757;
                        float _2765 = dot(vec3(_418, _421, _424), vec3(_2762, _2763, _2764));
                        float _2770 = 1.0 - (_2758 * _2696.w);
                        float _4247 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
                        float _2771 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                        float _2772 = sqrt(_2758) * _2715.w;
                        float _2775 = 1.39999997615814208984375 / (_2772 + 1.39999997615814208984375);
                        float _2776 = _2775 * _2775;
                        float _2777 = 1.0 - _2776;
                        float _2779 = (_2777 * _2777) * _299;
                        float _2782 = ((_2777 * _2765) + _2776) + _2779;
                        float _2787 = _2772 * _2772;
                        float _2792 = ((isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))) * _2771) / (((_2779 * 2.0) + 1.0) * ((_2787 * 0.699999988079071044921875) + 1.0));
                        float _2796 = dot(vec3(_2762, _2763, _2764), vec3(_2752, _2753, _2754));
                        float _4263 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2803 = dot(vec3((-0.0) - _2752, (-0.0) - _2753, (-0.0) - _2754), vec3(_418, _421, _424)) + 1.0;
                        float _2805 = (isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0))) * 0.5;
                        float _2812 = ((_2805 * _2805) * _2745.x) * exp2((_2745.y * 32.0) * log2(isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))));
                        float _2814 = _299 / (_299 + 1.0);
                        float _2830 = (-0.0) - _2218;
                        float _2831 = (-0.0) - _2219;
                        float _2832 = (-0.0) - _2220;
                        float _2836 = inversesqrt(dot(vec3(_2830, _2831, _2832), vec3(_2830, _2831, _2832)));
                        float _2837 = _2836 * _2830;
                        float _2838 = _2836 * _2831;
                        float _2839 = _2836 * _2832;
                        float _2847 = exp2(log2(1.0 / ((_2787 * 3.5) + 5.0)) * 0.25);
                        float _2848 = 1.0 - _479;
                        float _2855 = sqrt(1.0 - ((1.0 - (_2848 * _2848)) * (1.0 - (_2847 * _2847))));
                        float _2856 = _2855 * _2855;
                        float _2857 = _2856 * _2856;
                        float _2858 = _2837 + _2762;
                        float _2859 = _2838 + _2763;
                        float _2860 = _2839 + _2764;
                        float _2864 = inversesqrt(dot(vec3(_2858, _2859, _2860), vec3(_2858, _2859, _2860)));
                        float _2868 = dot(vec3(_418, _421, _424), vec3(_2837, _2838, _2839));
                        float _4279 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                        float _2871 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2872 = dot(vec3(_418, _421, _424), vec3(_2864 * _2858, _2864 * _2859, _2864 * _2860));
                        float _4290 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2875 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _2879 = ((_2875 * _2875) * (_2857 + (-1.0))) + 1.0;
                        float _2880 = _2775 * _2856;
                        float _2881 = _2880 * _2880;
                        float _2884 = ((1.0 - _2881) * _2765) + _2881;
                        float _4301 = isnan(0.0) ? _2884 : (isnan(_2884) ? 0.0 : max(_2884, 0.0));
                        float _2885 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                        float _2886 = 1.0 - _2856;
                        float _2896 = (0.5 / (((_2885 * ((_2871 * _2886) + _2856)) + 9.9999999392252902907785028219223e-09) + (((_2885 * _2886) + _2856) * _2871))) * _2885;
                        float _4312 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2907 = (((_2857 * 3.1415927410125732421875) * (isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0)))) / ((_2879 * _2879) * ((_2787 * 2.1991131305694580078125) + 3.141590118408203125))) * _2771;
                        _2588 = (((((_2716 * 0.3183098733425140380859375) * _2814) * _2812) + _2716) * _2792) + _2673;
                        _2589 = (((((_2717 * 0.3183098733425140380859375) * _2814) * _2812) + _2717) * _2792) + _2674;
                        _2590 = (((((_2718 * 0.3183098733425140380859375) * _2814) * _2812) + _2718) * _2792) + _2675;
                        _2585 = (_2907 * _2732.x) + _2670;
                        _2586 = (_2907 * _2732.y) + _2671;
                        _2587 = (_2907 * _2732.z) + _2672;
                        if (_2677 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2670 = _2585;
                            _2671 = _2586;
                            _2672 = _2587;
                            _2673 = _2588;
                            _2674 = _2589;
                            _2675 = _2590;
                            _2676 = _2677;
                        }
                    }
                    frontier_phi_67_pred = _2585;
                    frontier_phi_67_pred_1 = _2590;
                    frontier_phi_67_pred_2 = _2589;
                    frontier_phi_67_pred_3 = _2588;
                    frontier_phi_67_pred_4 = _2587;
                    frontier_phi_67_pred_5 = _2586;
                }
                _2291 = frontier_phi_67_pred;
                _2301 = frontier_phi_67_pred_1;
                _2299 = frontier_phi_67_pred_2;
                _2297 = frontier_phi_67_pred_3;
                _2295 = frontier_phi_67_pred_4;
                _2293 = frontier_phi_67_pred_5;
                uint _2476 = _2475 + 1u;
                if (_2476 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2469 = _2291;
                    _2470 = _2293;
                    _2471 = _2295;
                    _2472 = _2297;
                    _2473 = _2299;
                    _2474 = _2301;
                    _2475 = _2476;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
            _2298 = _2299;
            _2300 = _2301;
        }
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.z;
        uint _2307 = (_2305 >> 8u) & 15u;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        if (((4294967295u << _2307) & _2264) == 0u)
        {
            _2437 = _2290;
            _2439 = _2292;
            _2441 = _2294;
            _2443 = _2296;
            _2445 = _2298;
            _2447 = _2300;
        }
        else
        {
            float _2462 = inversesqrt(dot(vec3(_2218, _2219, _2220), vec3(_2218, _2219, _2220)));
            float _2463 = _2462 * _2218;
            float _2464 = _2462 * _2219;
            float _2465 = _2462 * _2220;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2307 < ((_2305 >> 12u) & 15u))
            {
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2446;
                float _2448;
                float _2653 = _2290;
                float _2654 = _2292;
                float _2655 = _2294;
                float _2656 = _2296;
                float _2657 = _2298;
                float _2658 = _2300;
                uint _2659 = _2307;
                uint _2668;
                bool _2669;
                for (;;)
                {
                    _2668 = texelFetch(g_lightClassification, int((((_2258 << 5u) + (_2244 << 9u)) + (_2659 << 2u)) >> 2u)).x;
                    _2669 = _2668 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2669)
                    {
                        frontier_phi_79_pred = _2658;
                        frontier_phi_79_pred_1 = _2657;
                        frontier_phi_79_pred_2 = _2656;
                        frontier_phi_79_pred_3 = _2655;
                        frontier_phi_79_pred_4 = _2654;
                        frontier_phi_79_pred_5 = _2653;
                    }
                    else
                    {
                        float _2955;
                        float _2956;
                        float _2957;
                        float _2958;
                        float _2959;
                        float _2960;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _2977 = _2653;
                        float _2978 = _2654;
                        float _2979 = _2655;
                        float _2980 = _2656;
                        float _2981 = _2657;
                        float _2982 = _2658;
                        uint _2983 = _2668;
                        uint _2984;
                        vec4 _3009;
                        float _3010;
                        vec4 _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        vec3 _3040;
                        vec2 _3049;
                        vec4 _3065;
                        vec4 _3081;
                        float _3128;
                        bool _3129;
                        for (;;)
                        {
                            uint _2994 = ((_2659 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2983));
                            _2984 = (_2983 + 4294967295u) & _2983;
                            uint _2996 = _2994 * 40u;
                            _3009 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2996)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2996 + 3u)).x));
                            _3010 = _3009.w;
                            uint _3012 = (_2994 * 40u) + 4u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            _3026 = _3025.x;
                            _3027 = _3025.y;
                            _3028 = _3025.z;
                            uint _3030 = (_2994 * 40u) + 8u;
                            _3040 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x));
                            uint _3042 = (_2994 * 40u) + 12u;
                            _3049 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3042)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3042 + 1u)).x));
                            uint _3052 = (_2994 * 40u) + 16u;
                            _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3068 = (_2994 * 40u) + 20u;
                            _3081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3068 + 3u)).x));
                            uint _3084 = (_2994 * 40u) + 24u;
                            vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 3u)).x));
                            uint _3103 = (_2994 * 40u) + 28u;
                            vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            _3128 = fma(_2220, _3116.z, fma(_2219, _3116.y, _3116.x * _2218)) + _3116.w;
                            _3129 = !((fma(_2220, _3097.z, fma(_2219, _3097.y, _3097.x * _2218)) + _3097.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3129)
                            {
                                float _3155 = _3009.x - _2218;
                                float _3156 = _3009.y - _2219;
                                float _3157 = _3009.z - _2220;
                                float _3158 = dot(vec3(_3155, _3156, _3157), vec3(_3155, _3156, _3157));
                                float _3161 = inversesqrt(_3158);
                                float _3162 = _3161 * _3155;
                                float _3163 = _3161 * _3156;
                                float _3164 = _3161 * _3157;
                                float _3168 = 1.0 - (_3158 / (_3010 * _3010));
                                float _4323 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3173 = sqrt(_3158) * _3025.w;
                                float _3175 = 1.39999997615814208984375 / (_3173 + 1.39999997615814208984375);
                                float _3176 = _3175 * _3175;
                                float _3177 = 1.0 - _3176;
                                float _3179 = (_3177 * _3177) * _299;
                                float _3182 = ((_3177 * dot(vec3(_3162, _3163, _3164), vec3(_418, _421, _424))) + _3176) + _3179;
                                float _3187 = _3173 * _3173;
                                float _3192 = (fma(_2220, _3065.z, fma(_2219, _3065.y, _3065.x * _2218)) + _3065.w) / _3128;
                                float _3193 = (fma(_2220, _3081.z, fma(_2219, _3081.y, _3081.x * _2218)) + _3081.w) / _3128;
                                float _3197 = 1.0 - dot(vec2(_3192, _3193), vec2(_3192, _3193));
                                float _4339 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0));
                                float _3198 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3199 = _3198 * (((isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0))) * _3169) / (((_3179 * 2.0) + 1.0) * ((_3187 * 0.699999988079071044921875) + 1.0)));
                                float _3200 = (-0.0) - _2463;
                                float _3201 = (-0.0) - _2464;
                                float _3202 = (-0.0) - _2465;
                                float _3203 = dot(vec3(_3162, _3163, _3164), vec3(_2463, _2464, _2465));
                                float _4350 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3210 = dot(vec3(_3200, _3201, _3202), vec3(_418, _421, _424)) + 1.0;
                                float _3212 = (isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0))) * 0.5;
                                float _3219 = ((_3212 * _3212) * _3049.x) * exp2((_3049.y * 32.0) * log2(isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))));
                                float _3221 = _299 / (_299 + 1.0);
                                float _3242 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                                float _3243 = 1.0 - _479;
                                float _3250 = sqrt(1.0 - ((1.0 - (_3243 * _3243)) * (1.0 - (_3242 * _3242))));
                                float _3251 = _3250 * _3250;
                                float _3252 = _3251 * _3251;
                                float _3253 = _3162 - _2463;
                                float _3254 = _3163 - _2464;
                                float _3255 = _3164 - _2465;
                                float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                                float _3263 = dot(vec3(_418, _421, _424), vec3(_3200, _3201, _3202));
                                float _4366 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3266 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3267 = dot(vec3(_418, _421, _424), vec3(_3259 * _3253, _3259 * _3254, _3259 * _3255));
                                float _4377 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3270 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3274 = ((_3270 * _3270) * (_3252 + (-1.0))) + 1.0;
                                float _3275 = _3175 * _3251;
                                float _3276 = _3275 * _3275;
                                float _3282 = ((1.0 - _3276) * dot(vec3(_418, _421, _424), vec3(_3162, _3163, _3164))) + _3276;
                                float _4388 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                                float _3284 = 1.0 - _3251;
                                float _3294 = (0.5 / (((_3283 * ((_3266 * _3284) + _3251)) + 9.9999999392252902907785028219223e-09) + (((_3283 * _3284) + _3251) * _3266))) * _3283;
                                float _4399 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3304 = (_3198 * _3169) * (((_3252 * 3.1415927410125732421875) * (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0)))) / ((_3274 * _3274) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = ((((_3028 * 0.3183098733425140380859375) * _3221) * _3219) + _3028) * _3199;
                                frontier_phi_88_pred_1 = ((((_3026 * 0.3183098733425140380859375) * _3221) * _3219) + _3026) * _3199;
                                frontier_phi_88_pred_2 = _3304 * _3040.z;
                                frontier_phi_88_pred_3 = _3304 * _3040.y;
                                frontier_phi_88_pred_4 = _3304 * _3040.x;
                                frontier_phi_88_pred_5 = ((((_3027 * 0.3183098733425140380859375) * _3221) * _3219) + _3027) * _3199;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3313 = frontier_phi_88_pred;
                            _3311 = frontier_phi_88_pred_1;
                            _3310 = frontier_phi_88_pred_2;
                            _3309 = frontier_phi_88_pred_3;
                            _3308 = frontier_phi_88_pred_4;
                            _3312 = frontier_phi_88_pred_5;
                            _2958 = _3311 + _2980;
                            _2959 = _3312 + _2981;
                            _2960 = _3313 + _2982;
                            _2955 = _3308 + _2977;
                            _2956 = _3309 + _2978;
                            _2957 = _3310 + _2979;
                            if (_2984 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2977 = _2955;
                                _2978 = _2956;
                                _2979 = _2957;
                                _2980 = _2958;
                                _2981 = _2959;
                                _2982 = _2960;
                                _2983 = _2984;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2960;
                        frontier_phi_79_pred_1 = _2959;
                        frontier_phi_79_pred_2 = _2958;
                        frontier_phi_79_pred_3 = _2957;
                        frontier_phi_79_pred_4 = _2956;
                        frontier_phi_79_pred_5 = _2955;
                    }
                    _2448 = frontier_phi_79_pred;
                    _2446 = frontier_phi_79_pred_1;
                    _2444 = frontier_phi_79_pred_2;
                    _2442 = frontier_phi_79_pred_3;
                    _2440 = frontier_phi_79_pred_4;
                    _2438 = frontier_phi_79_pred_5;
                    uint _2660 = _2659 + 1u;
                    if (_2660 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2653 = _2438;
                        _2654 = _2440;
                        _2655 = _2442;
                        _2656 = _2444;
                        _2657 = _2446;
                        _2658 = _2448;
                        _2659 = _2660;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2438;
                frontier_phi_61_62_ladder_1 = _2448;
                frontier_phi_61_62_ladder_2 = _2446;
                frontier_phi_61_62_ladder_3 = _2444;
                frontier_phi_61_62_ladder_4 = _2442;
                frontier_phi_61_62_ladder_5 = _2440;
            }
            else
            {
                frontier_phi_61_62_ladder = _2290;
                frontier_phi_61_62_ladder_1 = _2300;
                frontier_phi_61_62_ladder_2 = _2298;
                frontier_phi_61_62_ladder_3 = _2296;
                frontier_phi_61_62_ladder_4 = _2294;
                frontier_phi_61_62_ladder_5 = _2292;
            }
            _2437 = frontier_phi_61_62_ladder;
            _2439 = frontier_phi_61_62_ladder_5;
            _2441 = frontier_phi_61_62_ladder_4;
            _2443 = frontier_phi_61_62_ladder_3;
            _2445 = frontier_phi_61_62_ladder_2;
            _2447 = frontier_phi_61_62_ladder_1;
        }
        float _2452 = isnan(1.0) ? _463 : (isnan(_463) ? 1.0 : min(_463, 1.0));
        _2277 = (_2452 * _2443) + _1755;
        _2279 = (_2452 * _2445) + _1757;
        _2281 = (_2452 * _2447) + _1759;
        _2283 = ((_2437 * 0.039999999105930328369140625) * _2452) + _2088;
        _2285 = ((_2439 * 0.039999999105930328369140625) * _2452) + _2090;
        _2287 = ((_2441 * 0.039999999105930328369140625) * _2452) + _2092;
    }
    else
    {
        _2277 = _1755;
        _2279 = _1757;
        _2281 = _1759;
        _2283 = _2088;
        _2285 = _2090;
        _2287 = _2092;
    }
    float _2376;
    float _2377;
    float _2378;
    if (_299 > 0.0)
    {
        uint _2311 = _1537 + 4u;
        float _2317 = (-0.0) - _376;
        float _2319 = (-0.0) - _377;
        float _2320 = (-0.0) - _378;
        float _2321 = dot(vec3(cbLight._m0[_1537].xyz), vec3(_2317, _2319, _2320));
        float _4415 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
        float _2325 = _474 + 1.0;
        float _2327 = (isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0))) * 0.5;
        float _2332 = _2327 * _2327;
        float _2333 = _2332 * exp2(log2(isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * 32.0);
        float _2335 = _299 / (_299 + 1.0);
        float _2336 = isnan(_1550) ? 1.0 : (isnan(1.0) ? _1550 : min(1.0, _1550));
        uint _2346 = _1537 + 5u;
        float _2352 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_2317, _2319, _2320));
        float _4436 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
        float _2359 = _2332 * exp2(log2(isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * 32.0);
        float _2360 = isnan(_1551) ? 1.0 : (isnan(1.0) ? _1551 : min(1.0, _1551));
        _2376 = ((((_2359 * cbLight._m0[_2346].x) * _2335) * _2360) + (((_2333 * cbLight._m0[_2311].x) * _2335) * _2336)) * 0.3183098733425140380859375;
        _2377 = ((((_2359 * cbLight._m0[_2346].y) * _2335) * _2360) + (((_2333 * cbLight._m0[_2311].y) * _2335) * _2336)) * 0.3183098733425140380859375;
        _2378 = ((((_2359 * cbLight._m0[_2346].z) * _2335) * _2360) + (((_2333 * cbLight._m0[_2311].z) * _2335) * _2336)) * 0.3183098733425140380859375;
    }
    else
    {
        _2376 = 0.0;
        _2377 = 0.0;
        _2378 = 0.0;
    }
    float _4452 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _4463 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _4474 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _2397 = ((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * ((_2277 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _463)) + _2376)) + ((_2283 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2398 = ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * ((_2279 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _463)) + _2377)) + ((_2285 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    float _2399 = ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * ((_2281 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _463)) + _2378)) + ((_2287 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _1302)) * cbPerFrame._m0[3u].x);
    uint _2400 = _437 + 6u;
    float _2408 = _397 / cbSceneParam._m0[86u].x;
    float _2409 = _398 / cbSceneParam._m0[86u].y;
    vec4 _2423 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, (log2((isnan(cbSceneParam._m0[77u].w) ? _318 : (isnan(_318) ? cbSceneParam._m0[77u].w : min(_318, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2425 = _2423.x;
    float _2426 = _2423.y;
    float _2427 = _2423.z;
    float _2428 = _2423.w;
    float _2527;
    float _2529;
    float _2531;
    float _2533;
    if (_318 > cbSceneParam._m0[78u].w)
    {
        float _2490 = isnan(_318) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _318 : min(cbSceneParam._m0[80u].w, _318));
        float _2491 = _2490 / _318;
        float _2502 = _2491 * _369;
        float _2503 = _370 * _2491;
        float _2504 = (-0.0) - _2503;
        float _2505 = _2491 * _371;
        float _2507 = (cbSceneParam._m0[77u].w * _2504) / _2490;
        float _2508 = _2507 + cbSceneParam._m0[79u].w;
        float _2509 = cbSceneParam._m0[79u].w - _2503;
        float _2515 = sqrt(((_2502 * _2502) + (_2503 * _2503)) + (_2505 * _2505));
        float _2518 = (1.0 - (cbSceneParam._m0[77u].w / _2490)) * _2515;
        float _2523 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2525 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2912;
        if (abs((_2504 - _2507) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2912 = ((((_2508 > 0.0) ? exp2(_2523 * _2508) : (2.0 - exp2(_2525 * _2508))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2518;
        }
        else
        {
            float _2610 = 1.0 / cbSceneParam._m0[80u].x;
            float _2611 = isnan(_2509) ? _2508 : (isnan(_2508) ? _2509 : max(_2508, _2509));
            float _2612 = isnan(_2509) ? _2508 : (isnan(_2508) ? _2509 : min(_2508, _2509));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            _2912 = ((abs(_2515 / _2504) * cbSceneParam._m0[80u].y) * ((((_2621 - _2622) * 2.0) - ((exp2(_2523 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)))) - exp2(_2523 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0))))) * _2610)) - ((exp2(_2525 * _2621) - exp2(_2525 * _2622)) * _2610))) + (_2518 * cbSceneParam._m0[80u].z);
        }
        vec4 _2914 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2408, _2409, 1.0), 0.0);
        float _2923 = exp2((_2912 * (-1.44269502162933349609375)) * (1.0 - _2914.w));
        float _2924 = log2(_2923);
        float _2940 = log2(_2428);
        _2527 = (exp2(_2940 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].x)) * _2914.x) / cbSceneParam._m0[78u].x)) + _2425;
        _2529 = (exp2(_2940 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].y)) * _2914.y) / cbSceneParam._m0[78u].y)) + _2426;
        _2531 = (exp2(_2940 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2924 * cbSceneParam._m0[78u].z)) * _2914.z) / cbSceneParam._m0[78u].z)) + _2427;
        _2533 = _2923 * _2428;
    }
    else
    {
        _2527 = _2425;
        _2529 = _2426;
        _2531 = _2427;
        _2533 = _2428;
    }
    bool _2950;
    vec4 _2543;
    vec4 _2565;
    float _2567;
    float _2571;
    float _2572;
    float _2573;
    float _2574;
    bool _2584;
    for (;;)
    {
        _2543 = cbMatDynParam._m0[0u];
        float _2545 = roundEven(_2543.y);
        bool _2546 = _2545 == 3.0;
        float _2547 = log2(_2533);
        float _2554 = exp2(_2547 * cbSceneParam._m0[78u].x) * _2397;
        float _2555 = exp2(_2547 * cbSceneParam._m0[78u].y) * _2398;
        float _2556 = exp2(_2547 * cbSceneParam._m0[78u].z) * _2399;
        float _2563 = _385 + (-0.5);
        _2565 = cbMtdParam._m0[1u];
        _2567 = _2565.y * _2563;
        float _2570 = (_2545 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2571 = _2570 * (_2546 ? _2554 : (_2554 + (cbSceneParam._m0[72u].w * _2527)));
        _2572 = _2570 * (_2546 ? _2555 : (_2555 + (cbSceneParam._m0[72u].w * _2529)));
        _2573 = _2570 * (_2546 ? _2556 : (_2556 + (cbSceneParam._m0[72u].w * _2531)));
        _2574 = _2563 * 0.999000012874603271484375;
        _2584 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2584)
        {
            if ((cbInstanceData._m0[_437 + 7u].x + _2574) < 0.5)
            {
                _2950 = true;
                break;
            }
        }
        uint _2645 = _439 + uint(_2543.w);
        if ((cbInstanceData._m0[_2645].w < 1.0) && ((cbInstanceData._m0[_2645].w + _2574) < 0.5))
        {
            _2950 = true;
            break;
        }
        if ((_2567 + _230) < _2565.x)
        {
            _2950 = true;
            break;
        }
        _2950 = false;
        break;
    }
    float _2968;
    if (_2950)
    {
        discard_state = true;
        _2968 = 0.0;
    }
    else
    {
        _2968 = cbInstanceData._m0[_2400].w;
    }
    SV_Target.x = _2571;
    SV_Target.y = _2572;
    SV_Target.z = _2573;
    SV_Target.w = _2968;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2400].w;
    discard_exit();
}


