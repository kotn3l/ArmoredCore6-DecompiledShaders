#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _903;
float _3806;
float _3807;
float _3808;
float _3809;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _230 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _236 = _230.w;
    float _237 = _230.x * cbMtdParam._m0[9u].x;
    float _238 = _230.y * cbMtdParam._m0[9u].y;
    float _239 = _230.z * cbMtdParam._m0[9u].z;
    vec4 _251 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = _251.x;
    vec4 _265 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3818 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))));
    vec4 _294 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _301 = cbMtdParam._m0[10u].x * _294.x;
    float _304 = fma(_282, _200 * NORMAL.x, fma(_275, _207 * TANGENT.x, (_193 * _186) * _273));
    float _307 = fma(_282, _200 * NORMAL.y, fma(_275, _207 * TANGENT.y, (_193 * _187) * _273));
    float _310 = fma(_282, _200 * NORMAL.z, fma(_275, _207 * TANGENT.z, (_193 * _188) * _273));
    float _314 = inversesqrt(dot(vec3(_304, _307, _310), vec3(_304, _307, _310)));
    float _315 = _314 * _304;
    float _316 = _314 * _307;
    float _317 = _314 * _310;
    float _3829 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _318 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _319 = isnan(0.0) ? _301 : (isnan(_301) ? 0.0 : max(_301, 0.0));
    float _3845 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3856 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3867 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3878 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _323 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _339 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _380 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _390 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _380);
    float _391 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _380);
    float _392 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _380);
    float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _397 = _390 * _396;
    float _398 = _391 * _396;
    float _399 = _392 * _396;
    vec4 _404 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _406 = _404.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _582 = sqrt(((_390 * _390) + (_391 * _391)) + (_392 * _392));
        float _588 = (cbMatDynParam._m0[5u].x * _582) + cbMatDynParam._m0[5u].y;
        float _3889 = isnan(0.0) ? _588 : (isnan(_588) ? 0.0 : max(_588, 0.0));
        float _589 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _593 = (cbMatDynParam._m0[5u].z * _582) + cbMatDynParam._m0[5u].w;
        float _3900 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0))) - _589)) + _589) < ((_406 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _418 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _419 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _439 = fma(_317, cbSceneParam._m0[5u].z, fma(_316, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _315));
    float _442 = fma(_317, cbSceneParam._m0[6u].z, fma(_316, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _315));
    float _445 = fma(_317, cbSceneParam._m0[7u].z, fma(_316, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _315));
    uint _458 = uint(roundEven(NORMAL.w)) * 13u;
    uint _460 = _458 + 9u;
    uint _461 = _460 + uint(cbMatDynParam._m0[0u].w);
    float _467 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_461].x;
    float _468 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_461].y;
    float _469 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_461].z;
    float _3911 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _471 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _473 = 1.0 - _323;
    float _474 = _470 * _473;
    float _475 = _471 * _473;
    float _476 = _472 * _473;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _323;
    float _482 = (_471 + (-0.039999999105930328369140625)) * _323;
    float _483 = (_472 + (-0.039999999105930328369140625)) * _323;
    float _484 = _481 + 0.039999999105930328369140625;
    float _486 = _482 + 0.039999999105930328369140625;
    float _487 = _483 + 0.039999999105930328369140625;
    vec4 _496 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _418, cbSceneParam._m0[86u].y * _419));
    float _499 = _496.x * TEXCOORD.z;
    float _500 = dot(vec3(_315, _316, _317), vec3(_397, _398, _399));
    float _503 = _500 * 2.0;
    float _507 = (_503 * _315) - _397;
    float _508 = (_503 * _316) - _398;
    float _509 = (_503 * _317) - _399;
    float _510 = dot(vec3(_397, _398, _399), vec3(_315, _316, _317));
    float _513 = abs(_510);
    float _3944 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _515 = sqrt(_318);
    float _528 = exp2((_515 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_515 * 3.0));
    float _534 = (1.0 - _528) * ((_515 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _535 = _528 * _515;
    float _563 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _567 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _571 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _902;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _627 = fma(_571, cbModelParam._m0[26u].z, fma(_567, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _563));
        float _631 = fma(_571, cbModelParam._m0[27u].z, fma(_567, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _563));
        float _635 = fma(_571, cbModelParam._m0[28u].z, fma(_567, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _563));
        float _660 = _563 + _315;
        float _661 = _567 + _316;
        float _662 = _571 + _317;
        float _672 = fma(_662, cbModelParam._m0[26u].z, fma(_661, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _660)) - _627;
        float _673 = fma(_662, cbModelParam._m0[27u].z, fma(_661, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _660)) - _631;
        float _674 = fma(_662, cbModelParam._m0[28u].z, fma(_661, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _660)) - _635;
        float _678 = inversesqrt(dot(vec3(_672, _673, _674), vec3(_672, _673, _674)));
        float _691 = ((_678 * _672) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_627 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _692 = ((_678 * _673) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_631 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _693 = ((_678 * _674) / cbModelParam._m0[34u].z) + ((((((_635 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_691, _692, _693), 0.0);
        float _730 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_696.x + (-0.5));
        float _732 = _730 * (_696.y + (-0.5));
        float _733 = _730 * (_696.z + (-0.5));
        float _740 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_703.x + (-0.5));
        float _742 = _740 * (_703.y + (-0.5));
        float _743 = _740 * (_703.z + (-0.5));
        float _750 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_710.x + (-0.5));
        float _752 = _750 * (_710.y + (-0.5));
        float _753 = _750 * (_710.z + (-0.5));
        float _760 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_717.x + (-0.5));
        float _762 = _760 * (_717.y + (-0.5));
        float _763 = _760 * (_717.z + (-0.5));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = _731 * 0.5;
        float _768 = _741 * 0.5;
        float _769 = _751 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _784 = (dot(vec3(_315, _316, _317), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _3970 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _794 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3981 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3992 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_796 + 1.0))) + _801) * _764;
        float _811 = _732 * 0.5;
        float _812 = _742 * 0.5;
        float _813 = _752 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_315, _316, _317), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _4003 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _4014 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _4025 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_838 + 1.0))) + _843) * _765;
        float _853 = _733 * 0.5;
        float _854 = _743 * 0.5;
        float _855 = _753 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _869 = (dot(vec3(_315, _316, _317), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _4036 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _878 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _4047 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _4058 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_880 + 1.0))) + _885) * _766;
        _902 = _733;
        _904 = _732;
        _905 = _731;
        _906 = _743;
        _907 = _742;
        _908 = _741;
        _909 = _753;
        _910 = _752;
        _911 = _751;
        _912 = _766;
        _913 = _765;
        _914 = _764;
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
    }
    else
    {
        _902 = _903;
        _904 = _903;
        _905 = _903;
        _906 = _903;
        _907 = _903;
        _908 = _903;
        _909 = _903;
        _910 = _903;
        _911 = _903;
        _912 = _903;
        _913 = _903;
        _914 = _903;
        _915 = 0.0;
        _916 = 0.0;
        _917 = 0.0;
    }
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _946 = fma(_571, cbModelParam._m0[30u].z, fma(_567, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _563));
        float _950 = fma(_571, cbModelParam._m0[31u].z, fma(_567, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _563));
        float _954 = fma(_571, cbModelParam._m0[32u].z, fma(_567, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _563));
        float _977 = _563 + _315;
        float _978 = _567 + _316;
        float _979 = _571 + _317;
        float _989 = fma(_979, cbModelParam._m0[30u].z, fma(_978, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977)) - _946;
        float _990 = fma(_979, cbModelParam._m0[31u].z, fma(_978, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977)) - _950;
        float _991 = fma(_979, cbModelParam._m0[32u].z, fma(_978, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977)) - _954;
        float _995 = inversesqrt(dot(vec3(_989, _990, _991), vec3(_989, _990, _991)));
        float _1008 = ((_995 * _989) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_946 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1009 = ((_995 * _990) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_950 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1010 = ((_995 * _991) / cbModelParam._m0[35u].z) + ((((((_954 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1026 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        vec4 _1033 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1008, _1009, _1010), 0.0);
        float _1045 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1012.x + (-0.5));
        float _1047 = _1045 * (_1012.y + (-0.5));
        float _1048 = _1045 * (_1012.z + (-0.5));
        float _1055 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1019.x + (-0.5));
        float _1057 = _1055 * (_1019.y + (-0.5));
        float _1058 = _1055 * (_1019.z + (-0.5));
        float _1065 = exp2((_1026.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1026.x + (-0.5));
        float _1067 = _1065 * (_1026.y + (-0.5));
        float _1068 = _1065 * (_1026.z + (-0.5));
        float _1075 = exp2((_1033.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1033.x + (-0.5));
        float _1077 = _1075 * (_1033.y + (-0.5));
        float _1078 = _1075 * (_1033.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1098 = (dot(vec3(_315, _316, _317), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _4099 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1107 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _4110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _4121 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_1109 + 1.0))) + _1114) * _1079;
        float _1124 = _1047 * 0.5;
        float _1125 = _1057 * 0.5;
        float _1126 = _1067 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_315, _316, _317), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4132 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4143 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _4154 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_1151 + 1.0))) + _1156) * _1080;
        float _1166 = _1048 * 0.5;
        float _1167 = _1058 * 0.5;
        float _1168 = _1068 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_315, _316, _317), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _4165 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4176 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _4187 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0))) * (_1193 + 1.0))) + _1198) * _1081;
        _1215 = _1048;
        _1216 = _1047;
        _1217 = _1046;
        _1218 = _1058;
        _1219 = _1057;
        _1220 = _1056;
        _1221 = _1068;
        _1222 = _1067;
        _1223 = _1066;
        _1224 = _1081;
        _1225 = _1080;
        _1226 = _1079;
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1228 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1229 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _903;
        _1216 = _903;
        _1217 = _903;
        _1218 = _903;
        _1219 = _903;
        _1220 = _903;
        _1221 = _903;
        _1222 = _903;
        _1223 = _903;
        _1224 = _903;
        _1225 = _903;
        _1226 = _903;
        _1227 = 0.0;
        _1228 = 0.0;
        _1229 = 0.0;
    }
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _915)) + _915;
    float _1240 = (cbModelParam._m0[1u].x * (_1228 - _916)) + _916;
    float _1241 = (cbModelParam._m0[1u].x * (_1229 - _917)) + _917;
    float _1262 = fma(_1241, cbSceneParam._m0[89u].z, fma(_1240, cbSceneParam._m0[89u].y, _1239 * cbSceneParam._m0[89u].x));
    float _1265 = fma(_1241, cbSceneParam._m0[90u].z, fma(_1240, cbSceneParam._m0[90u].y, _1239 * cbSceneParam._m0[90u].x));
    float _1268 = fma(_1241, cbSceneParam._m0[91u].z, fma(_1240, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1239));
    float _1283 = _507 * 0.5;
    float _1284 = _508 * 0.5;
    float _1285 = _509 * 0.5;
    float _1286 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1217, _1220, _1223, _1226));
    float _1289 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1216, _1219, _1222, _1225));
    float _1292 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1326;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1299 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_902, _906, _909, _912));
        float _1303 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_904, _907, _910, _913));
        float _1307 = dot(vec4(_1283, _1284, _1285, 1.0), vec4(_905, _908, _911, _914));
        float _1314 = dot(vec4(cbModelParam._m0[39u]), vec4(_1283, _1284, _1285, 1.0));
        _1326 = dot(vec3(isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0)), isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1326 = 1.0;
    }
    float _1337;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1328 = dot(vec4(cbModelParam._m0[40u]), vec4(_1283, _1284, _1285, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1328) ? 0.0 : (isnan(0.0) ? _1328 : max(0.0, _1328))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1341 = (_1337 * cbModelParam._m0[1u].x) + (_1326 * (1.0 - cbModelParam._m0[1u].x));
    float _1351 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _318);
    float _1352 = isnan(_1351) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1351 : min(cbModelParam._m0[25u].z, _1351));
    float _1434;
    float _1436;
    float _1438;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1401 = fma(_571, cbModelParam._m0[13u].z, fma(_567, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563)) + cbModelParam._m0[13u].w;
        float _1405 = fma(_571, cbModelParam._m0[14u].z, fma(_567, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563)) + cbModelParam._m0[14u].w;
        float _1409 = fma(_571, cbModelParam._m0[15u].z, fma(_567, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563)) + cbModelParam._m0[15u].w;
        float _1412 = fma(_509, cbModelParam._m0[13u].z, fma(_508, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _507));
        float _1415 = fma(_509, cbModelParam._m0[14u].z, fma(_508, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _507));
        float _1418 = fma(_509, cbModelParam._m0[15u].z, fma(_508, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _507));
        float _1446;
        if (_1412 > 0.0)
        {
            _1446 = abs((1.0 - _1401) / _1412);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1412 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1401 + 1.0) / _1412);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1446 = frontier_phi_17_15_ladder;
        }
        float _1622;
        if (_1415 > 0.0)
        {
            _1622 = abs((1.0 - _1405) / _1415);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1405 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1622 = frontier_phi_26_22_ladder;
        }
        float _1893;
        if (_1418 > 0.0)
        {
            _1893 = abs((1.0 - _1409) / _1418);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1409 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1893 = frontier_phi_38_33_ladder;
        }
        float _1895 = isnan(_1622) ? _1446 : (isnan(_1446) ? _1622 : min(_1446, _1622));
        float _1896 = isnan(_1893) ? _1895 : (isnan(_1895) ? _1893 : min(_1895, _1893));
        float _1900 = (_1896 * _1412) + _1401;
        float _1901 = (_1896 * _1415) + _1405;
        float _1902 = (_1896 * _1418) + _1409;
        float _1903 = _1896 * 9.9999997473787516355514526367188e-05;
        float _1905 = (-1.0) - _1903;
        float _1907 = _1903 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1902 > _1907) || ((_1902 < _1905) || ((_1901 > _1907) || ((_1901 < _1905) || ((_1900 < _1905) || (_1900 > _1907))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2056 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1902, cbModelParam._m0[9u].z, fma(_1901, cbModelParam._m0[9u].y, _1900 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1902, cbModelParam._m0[10u].z, fma(_1901, cbModelParam._m0[10u].y, _1900 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1902, cbModelParam._m0[11u].z, fma(_1901, cbModelParam._m0[11u].y, _1900 * cbModelParam._m0[11u].x))), _1352);
            frontier_phi_16_38_ladder = _2056.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2056.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2056.x * cbModelParam._m0[1u].y;
        }
        _1434 = frontier_phi_16_38_ladder_2;
        _1436 = frontier_phi_16_38_ladder_1;
        _1438 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_507, _508, _509), _1352);
        _1434 = _1422.x * cbModelParam._m0[1u].y;
        _1436 = _1422.y * cbModelParam._m0[1u].y;
        _1438 = _1422.z * cbModelParam._m0[1u].y;
    }
    float _1442 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _318);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1442 : min(cbModelParam._m0[25u].w, _1442));
    float _1536;
    float _1538;
    float _1540;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1500 = fma(_571, cbModelParam._m0[21u].z, fma(_567, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563)) + cbModelParam._m0[21u].w;
        float _1504 = fma(_571, cbModelParam._m0[22u].z, fma(_567, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563)) + cbModelParam._m0[22u].w;
        float _1508 = fma(_571, cbModelParam._m0[23u].z, fma(_567, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563)) + cbModelParam._m0[23u].w;
        float _1511 = fma(_509, cbModelParam._m0[21u].z, fma(_508, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _507));
        float _1514 = fma(_509, cbModelParam._m0[22u].z, fma(_508, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _507));
        float _1517 = fma(_509, cbModelParam._m0[23u].z, fma(_508, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _507));
        float _1627;
        if (_1511 > 0.0)
        {
            _1627 = abs((1.0 - _1500) / _1511);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1500 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1627 = frontier_phi_28_24_ladder;
        }
        float _1920;
        if (_1514 > 0.0)
        {
            _1920 = abs((1.0 - _1504) / _1514);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1504 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1920 = frontier_phi_40_35_ladder;
        }
        float _2074;
        if (_1517 > 0.0)
        {
            _2074 = abs((1.0 - _1508) / _1517);
        }
        else
        {
            float frontier_phi_49_47_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_49_47_ladder = abs((_1508 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_49_47_ladder = 5000.0;
            }
            _2074 = frontier_phi_49_47_ladder;
        }
        float _2076 = isnan(_1920) ? _1627 : (isnan(_1627) ? _1920 : min(_1627, _1920));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1511) + _1500;
        float _2082 = (_2077 * _1514) + _1504;
        float _2083 = (_2077 * _1517) + _1508;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2084;
        float _2087 = _2084 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2083 > _2087) || ((_2083 < _2085) || ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 < _2085) || (_2081 > _2087))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2153 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2083, cbModelParam._m0[17u].z, fma(_2082, cbModelParam._m0[17u].y, _2081 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2083, cbModelParam._m0[18u].z, fma(_2082, cbModelParam._m0[18u].y, _2081 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2083, cbModelParam._m0[19u].z, fma(_2082, cbModelParam._m0[19u].y, _2081 * cbModelParam._m0[19u].x))), _1443);
            frontier_phi_25_49_ladder = _2153.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2153.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2153.x * cbModelParam._m0[1u].z;
        }
        _1536 = frontier_phi_25_49_ladder_2;
        _1538 = frontier_phi_25_49_ladder_1;
        _1540 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1520 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_507, _508, _509), _1443);
        _1536 = _1520.x * cbModelParam._m0[1u].z;
        _1538 = _1520.y * cbModelParam._m0[1u].z;
        _1540 = _1520.z * cbModelParam._m0[1u].z;
    }
    float _1553 = (((_534 * _484) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1555 = (((_534 * _486) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1557 = (((_534 * _487) + _535) * _499) * ((cbModelParam._m0[1u].w * (_1540 - _1438)) + _1438);
    float _1560 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1555, cbSceneParam._m0[89u].y, _1553 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1555, cbSceneParam._m0[90u].y, _1553 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1555, cbSceneParam._m0[91u].y, _1553 * cbSceneParam._m0[91u].x));
    float _1601 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1614 = _1601 / _1613;
    float _1615 = _1605 / _1613;
    float _1616 = _1609 / _1613;
    float _1763;
    float _1764;
    float _1765;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1643 = ((uint(_1616 > cbSceneParam._m0[59u].y) + uint(_1616 > cbSceneParam._m0[59u].x)) + uint(_1616 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1644 = _1643 + 43u;
        uint _1652 = _1643 + 44u;
        uint _1660 = _1643 + 45u;
        uint _1668 = _1643 + 46u;
        float _1679 = fma(_1613, cbSceneParam._m0[_1644].w, fma(_1609, cbSceneParam._m0[_1644].z, fma(_1605, cbSceneParam._m0[_1644].y, _1601 * cbSceneParam._m0[_1644].x)));
        float _1683 = fma(_1613, cbSceneParam._m0[_1652].w, fma(_1609, cbSceneParam._m0[_1652].z, fma(_1605, cbSceneParam._m0[_1652].y, _1601 * cbSceneParam._m0[_1652].x)));
        float _1691 = fma(_1613, cbSceneParam._m0[_1668].w, fma(_1609, cbSceneParam._m0[_1668].z, fma(_1605, cbSceneParam._m0[_1668].y, _1601 * cbSceneParam._m0[_1668].x)));
        float _1696 = cbSceneParam._m0[33u].z * _1691;
        float _1698 = cbSceneParam._m0[33u].w * _1691;
        float _1701 = fma(_1613, cbSceneParam._m0[_1660].w, fma(_1609, cbSceneParam._m0[_1660].z, fma(_1605, cbSceneParam._m0[_1660].y, _1601 * cbSceneParam._m0[_1660].x))) / _1691;
        float _1749 = (cbSceneParam._m0[33u].x - sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616))) * cbSceneParam._m0[33u].y;
        float _4313 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0));
        float _1756 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1696 + _1679) / _1691, (_1698 + _1683) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1698 + _1679) / _1691, (_1683 - _1696) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 - _1696) / _1691, (_1683 - _1698) / _1691), _1701), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1679 - _1698) / _1691, (_1696 + _1683) / _1691), _1701), 0.0)).x), vec4(0.25)));
        _1763 = 1.0 - (_1756 * cbSceneParam._m0[34u].x);
        _1764 = 1.0 - (_1756 * cbSceneParam._m0[34u].y);
        _1765 = 1.0 - (_1756 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1763 = 1.0;
        _1764 = 1.0;
        _1765 = 1.0;
    }
    float _1829;
    float _1831;
    float _1833;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1817 = fma(_1613, cbSceneParam._m0[63u].w, fma(_1609, cbSceneParam._m0[63u].z, fma(_1605, cbSceneParam._m0[63u].y, _1601 * cbSceneParam._m0[63u].x)));
        float _1818 = fma(_1613, cbSceneParam._m0[60u].w, fma(_1609, cbSceneParam._m0[60u].z, fma(_1605, cbSceneParam._m0[60u].y, _1601 * cbSceneParam._m0[60u].x))) / _1817;
        float _1819 = fma(_1613, cbSceneParam._m0[61u].w, fma(_1609, cbSceneParam._m0[61u].z, fma(_1605, cbSceneParam._m0[61u].y, _1601 * cbSceneParam._m0[61u].x))) / _1817;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1818 >= cbSceneParam._m0[64u].x) && (_1819 >= cbSceneParam._m0[64u].y)) && (_1818 <= cbSceneParam._m0[64u].z)) && (_1819 <= cbSceneParam._m0[64u].w))
        {
            float _1933 = fma(_1613, cbSceneParam._m0[62u].w, fma(_1609, cbSceneParam._m0[62u].z, fma(_1605, cbSceneParam._m0[62u].y, _1601 * cbSceneParam._m0[62u].x))) / _1817;
            float _1937 = isnan(cbSceneParam._m0[41u].w) ? _1933 : (isnan(_1933) ? cbSceneParam._m0[41u].w : max(_1933, cbSceneParam._m0[41u].w));
            float _1980 = (cbSceneParam._m0[33u].x - sqrt(((_1615 * _1615) + (_1614 * _1614)) + (_1616 * _1616))) * cbSceneParam._m0[33u].y;
            float _4329 = isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0));
            float _1987 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1818, cbSceneParam._m0[33u].w + _1819), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1818, _1819 - cbSceneParam._m0[33u].z), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1818 - cbSceneParam._m0[33u].z, _1819 - cbSceneParam._m0[33u].w), _1937), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1818 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1819), _1937), 0.0)).x), vec4(0.25)));
            float _1991 = 1.0 - (_1987 * cbSceneParam._m0[34u].x);
            float _1992 = 1.0 - (_1987 * cbSceneParam._m0[34u].y);
            float _1993 = 1.0 - (_1987 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1993) ? _1765 : (isnan(_1765) ? _1993 : min(_1765, _1993));
            frontier_phi_37_36_ladder_1 = isnan(_1992) ? _1764 : (isnan(_1764) ? _1992 : min(_1764, _1992));
            frontier_phi_37_36_ladder_2 = isnan(_1991) ? _1763 : (isnan(_1763) ? _1991 : min(_1763, _1991));
        }
        else
        {
            frontier_phi_37_36_ladder = _1765;
            frontier_phi_37_36_ladder_1 = _1764;
            frontier_phi_37_36_ladder_2 = _1763;
        }
        _1829 = frontier_phi_37_36_ladder_2;
        _1831 = frontier_phi_37_36_ladder_1;
        _1833 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1829 = _1763;
        _1831 = _1764;
        _1833 = _1765;
    }
    uvec4 _1838 = floatBitsToUint(cbInstanceData._m0[_458 + 5u]);
    uint _1840 = _1838.x * 14u;
    uint _1841 = _1840 + 13u;
    float _1848 = _499 + (-1.0);
    float _1853 = (cbLight._m0[_1841].x * _1848) + 1.0;
    float _1854 = (cbLight._m0[_1841].y * _1848) + 1.0;
    float _1855 = (cbLight._m0[_1841].z * _1848) + 1.0;
    float _1856 = (cbLight._m0[_1841].w * _1848) + 1.0;
    uint _1858 = _1840 + 4u;
    float _1870 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_315, _316, _317));
    float _1873 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    float _1874 = cbLight._m0[_1858].x * _1829;
    float _1875 = cbLight._m0[_1858].y * _1831;
    float _1876 = cbLight._m0[_1858].z * _1833;
    uint _1877 = _1840 + 5u;
    float _1889 = dot(vec3(cbLight._m0[_1840 | 1u].xyz), vec3(_315, _316, _317));
    float _1892 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    float _2065;
    float _2066;
    float _2067;
    if (_319 == 0.0)
    {
        float _4365 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
        float _4376 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
        float _2002 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
        float _2004 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.3183098733425140380859375;
        _2065 = ((cbLight._m0[_1877].x * _1892) * _2004) + ((_1874 * _1873) * _2002);
        _2066 = ((_1892 * cbLight._m0[_1877].y) * _2004) + ((_1875 * _1873) * _2002);
        _2067 = ((_1892 * cbLight._m0[_1877].z) * _2004) + ((_1876 * _1873) * _2002);
    }
    else
    {
        float _2014 = _1870 + _319;
        float _2017 = (_319 * 2.0) + 1.0;
        float _2018 = (isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0))) / _2017;
        float _2025 = _1889 + _319;
        float _2027 = (isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0))) / _2017;
        _2065 = (((_2027 * cbLight._m0[_1877].x) * _1892) + ((_1874 * _2018) * _1873)) * 0.3183098733425140380859375;
        _2066 = (((_2027 * cbLight._m0[_1877].y) * _1892) + ((_1875 * _2018) * _1873)) * 0.3183098733425140380859375;
        _2067 = (((_2027 * cbLight._m0[_1877].z) * _1892) + ((_1876 * _2018) * _1873)) * 0.3183098733425140380859375;
    }
    uvec4 _2071 = floatBitsToUint(cbLight._m0[_1840 + 12u]);
    bool _2073 = _2071.x == 0u;
    float _2100;
    float _2102;
    float _2104;
    if (_2073)
    {
        _2100 = _2065;
        _2102 = _2066;
        _2104 = _2067;
    }
    else
    {
        uint _2108 = _1840 + 6u;
        float _2124 = (dot(vec3(cbLight._m0[_1840 + 2u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _2125 = _2124 * _2124;
        float _4397 = isnan(0.0) ? _2125 : (isnan(_2125) ? 0.0 : max(_2125, 0.0));
        float _2126 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2127 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2100 = (((cbLight._m0[_2108].x * 0.3183098733425140380859375) * _2126) * _2127) + _2065;
        _2102 = (((cbLight._m0[_2108].y * 0.3183098733425140380859375) * _2126) * _2127) + _2066;
        _2104 = (((cbLight._m0[_2108].z * 0.3183098733425140380859375) * _2126) * _2127) + _2067;
    }
    bool _2107 = _2071.y == 0u;
    float _2158;
    float _2160;
    float _2162;
    if (_2107)
    {
        _2158 = _2100;
        _2160 = _2102;
        _2162 = _2104;
    }
    else
    {
        uint _2344 = _1840 + 7u;
        float _2360 = (dot(vec3(cbLight._m0[_1840 + 3u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _2361 = _2360 * _2360;
        float _4413 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2362 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2363 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2158 = (((cbLight._m0[_2344].x * 0.3183098733425140380859375) * _2362) * _2363) + _2100;
        _2160 = (((cbLight._m0[_2344].y * 0.3183098733425140380859375) * _2362) * _2363) + _2102;
        _2162 = (((cbLight._m0[_2344].z * 0.3183098733425140380859375) * _2362) * _2363) + _2104;
    }
    uint _2167 = _1840 + 8u;
    float _2183 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _318) * 0.949999988079071044921875);
    float _2184 = _2183 * _2183;
    float _2185 = cbLight._m0[_1840].x + _397;
    float _2186 = cbLight._m0[_1840].y + _398;
    float _2187 = cbLight._m0[_1840].z + _399;
    float _2191 = inversesqrt(dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187)));
    float _2192 = _2191 * _2185;
    float _2193 = _2191 * _2186;
    float _2194 = _2191 * _2187;
    float _2195 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1840].xyz));
    float _4429 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2198 = isnan(1.0) ? _4429 : (isnan(_4429) ? 1.0 : min(_4429, 1.0));
    float _4440 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _2199 = isnan(1.0) ? _4440 : (isnan(_4440) ? 1.0 : min(_4440, 1.0));
    float _2200 = dot(vec3(_315, _316, _317), vec3(_2192, _2193, _2194));
    float _4451 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
    float _2203 = isnan(1.0) ? _4451 : (isnan(_4451) ? 1.0 : min(_4451, 1.0));
    float _2204 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2192, _2193, _2194));
    float _4462 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = _2184 * _2184;
    float _2212 = ((_2203 * _2203) * (_2208 + (-1.0))) + 1.0;
    float _2220 = exp2(log2(1.0 - (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0)))) * 5.0);
    float _2221 = 0.959999978542327880859375 - _481;
    float _2223 = 0.959999978542327880859375 - _482;
    float _2224 = 0.959999978542327880859375 - _483;
    float _2231 = 1.0 - _2184;
    float _2242 = (0.5 / (((_2199 * ((_2198 * _2231) + _2184)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2231) + _2184) * _2198))) * _2198;
    float _4473 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
    float _2244 = (isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0))) * (_2208 / ((_2212 * _2212) * 3.141590118408203125));
    float _2245 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _2258 = _1840 | 1u;
    uint _2262 = _1840 + 9u;
    float _2276 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2258].w)) * _318) * 0.949999988079071044921875);
    float _2277 = _2276 * _2276;
    float _2278 = cbLight._m0[_2258].x + _397;
    float _2279 = cbLight._m0[_2258].y + _398;
    float _2280 = cbLight._m0[_2258].z + _399;
    float _2284 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
    float _2285 = _2284 * _2278;
    float _2286 = _2284 * _2279;
    float _2287 = _2284 * _2280;
    float _2288 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2258].xyz));
    float _4489 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2291 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
    float _2292 = dot(vec3(_315, _316, _317), vec3(_2285, _2286, _2287));
    float _4500 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _2295 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    float _2296 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2285, _2286, _2287));
    float _4511 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
    float _2300 = _2277 * _2277;
    float _2304 = ((_2295 * _2295) * (_2300 + (-1.0))) + 1.0;
    float _2311 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
    float _2318 = 1.0 - _2277;
    float _2328 = (0.5 / (((_2199 * ((_2291 * _2318) + _2277)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2318) + _2277) * _2291))) * _2291;
    float _4522 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2330 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2300 / ((_2304 * _2304) * 3.141590118408203125));
    float _2331 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    float _2341 = (((((_2311 * _2221) + _484) * cbLight._m0[_2262].x) * _2330) * _2331) + ((((cbLight._m0[_2167].x * _1829) * ((_2220 * _2221) + _484)) * _2244) * _2245);
    float _2342 = (((((_2311 * _2223) + _486) * cbLight._m0[_2262].y) * _2330) * _2331) + ((((cbLight._m0[_2167].y * _1831) * ((_2220 * _2223) + _486)) * _2244) * _2245);
    float _2343 = (((((_2311 * _2224) + _487) * cbLight._m0[_2262].z) * _2330) * _2331) + ((((cbLight._m0[_2167].z * _1833) * ((_2220 * _2224) + _487)) * _2244) * _2245);
    float _2373;
    float _2375;
    float _2377;
    if (_2073)
    {
        _2373 = _2341;
        _2375 = _2342;
        _2377 = _2343;
    }
    else
    {
        uint _2379 = _1840 + 2u;
        uint _2383 = _1840 + 10u;
        float _2397 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2379].w)) * _318) * 0.949999988079071044921875);
        float _2398 = _2397 * _2397;
        float _2399 = cbLight._m0[_2379].x + _397;
        float _2400 = cbLight._m0[_2379].y + _398;
        float _2401 = cbLight._m0[_2379].z + _399;
        float _2405 = inversesqrt(dot(vec3(_2399, _2400, _2401), vec3(_2399, _2400, _2401)));
        float _2406 = _2405 * _2399;
        float _2407 = _2405 * _2400;
        float _2408 = _2405 * _2401;
        float _2409 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2379].xyz));
        float _4538 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2413 = dot(vec3(_315, _316, _317), vec3(_2406, _2407, _2408));
        float _4549 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2416 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2417 = dot(vec3(cbLight._m0[_2379].xyz), vec3(_2406, _2407, _2408));
        float _4560 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2421 = _2398 * _2398;
        float _2425 = ((_2416 * _2416) * (_2421 + (-1.0))) + 1.0;
        float _2432 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
        float _2439 = 1.0 - _2398;
        float _2449 = (0.5 / (((_2199 * ((_2412 * _2439) + _2398)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2439) + _2398) * _2412))) * _2412;
        float _4571 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2451 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2421 / ((_2425 * _2425) * 3.141590118408203125));
        float _2452 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
        _2373 = (((((_2432 * _2221) + _484) * cbLight._m0[_2383].x) * _2451) * _2452) + _2341;
        _2375 = (((((_2432 * _2223) + _486) * cbLight._m0[_2383].y) * _2451) * _2452) + _2342;
        _2377 = (((((_2432 * _2224) + _487) * cbLight._m0[_2383].z) * _2451) * _2452) + _2343;
    }
    float _2462;
    float _2464;
    float _2466;
    if (_2107)
    {
        _2462 = _2373;
        _2464 = _2375;
        _2466 = _2377;
    }
    else
    {
        uint _2473 = _1840 + 3u;
        uint _2477 = _1840 + 11u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _318) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _397;
        float _2494 = cbLight._m0[_2473].y + _398;
        float _2495 = cbLight._m0[_2473].z + _399;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2473].xyz));
        float _4587 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
        float _2507 = dot(vec3(_315, _316, _317), vec3(_2500, _2501, _2502));
        float _4598 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4609 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0)))) * 5.0);
        float _2533 = 1.0 - _2492;
        float _2543 = (0.5 / (((_2199 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2199 * _2533) + _2492) * _2506))) * _2506;
        float _4620 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _1856 : (isnan(_1856) ? 1.0 : min(_1856, 1.0));
        _2462 = (((((_2526 * _2221) + _484) * cbLight._m0[_2477].x) * _2545) * _2546) + _2373;
        _2464 = (((((_2526 * _2223) + _486) * cbLight._m0[_2477].y) * _2545) * _2546) + _2375;
        _2466 = (((((_2526 * _2224) + _487) * cbLight._m0[_2477].z) * _2545) * _2546) + _2377;
    }
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    float _2620;
    float _2622;
    if (_1838.y == 0u)
    {
        uvec4 _2567 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2568 = _2567.x;
        uint _2579 = uint((float(_2567.y) * floor(float(uint(cbSceneParam._m0[85u].y * _419) / _2568))) + floor(float(uint(cbSceneParam._m0[85u].x * _418) / _2568)));
        float _2589 = (log2(_1616 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2590 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
        uint _2593 = uint(isnan(14.0) ? _2590 : (isnan(_2590) ? 14.0 : min(_2590, 14.0)));
        uvec4 _2598 = texelFetch(g_lightClusterGridBuffer, int(((_2593 << 2u) + (_2579 << 6u)) >> 2u));
        uint _2599 = _2598.x;
        uint _2600 = _2567.z;
        float _2625;
        float _2627;
        float _2629;
        float _2631;
        float _2633;
        float _2635;
        if (((((1u << ((_2600 >> 4u) & 15u)) + 4294967295u) & _2599) == 0u) || ((_2600 & 240u) == 0u))
        {
            _2625 = 0.0;
            _2627 = 0.0;
            _2629 = 0.0;
            _2631 = 0.0;
            _2633 = 0.0;
            _2635 = 0.0;
        }
        else
        {
            float _2626;
            float _2628;
            float _2630;
            float _2632;
            float _2634;
            float _2636;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            float _2812 = 0.0;
            uint _2813 = 0u;
            uint _2822;
            bool _2823;
            for (;;)
            {
                _2822 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2813 << 2u)) >> 2u)).x;
                _2823 = _2822 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2823)
                {
                    frontier_phi_72_pred = _2812;
                    frontier_phi_72_pred_1 = _2811;
                    frontier_phi_72_pred_2 = _2810;
                    frontier_phi_72_pred_3 = _2809;
                    frontier_phi_72_pred_4 = _2808;
                    frontier_phi_72_pred_5 = _2807;
                }
                else
                {
                    float _3008;
                    float _3009;
                    float _3010;
                    float _3011;
                    float _3012;
                    float _3013;
                    uint _3014;
                    _3008 = _2807;
                    _3009 = _2808;
                    _3010 = _2809;
                    _3011 = _2810;
                    _3012 = _2811;
                    _3013 = _2812;
                    _3014 = _2822;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    float _2927;
                    float _2928;
                    for (;;)
                    {
                        uint _3018 = uint(findLSB(_3014)) + (_2813 << 5u);
                        uint _3015 = (_3014 + 4294967295u) & _3014;
                        uint _3020 = _3018 * 48u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3020)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3020 + 3u)).x));
                        uint _3040 = (_3018 * 48u) + 4u;
                        vec4 _3053 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 3u)).x));
                        float _3054 = _3053.x;
                        float _3055 = _3053.y;
                        float _3056 = _3053.z;
                        uint _3059 = (_3018 * 48u) + 8u;
                        vec3 _3070 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3059)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3059 + 2u)).x));
                        uint _3075 = (_3018 * 48u) + 12u;
                        vec2 _3083 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3075)).x, texelFetch(g_PointLightRenderingBuffer, int(_3075 + 1u)).x));
                        float _3089 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
                        float _3090 = _3089 * _1614;
                        float _3091 = _3089 * _1615;
                        float _3092 = _3089 * _1616;
                        float _3093 = _3034.x - _1614;
                        float _3094 = _3034.y - _1615;
                        float _3095 = _3034.z - _1616;
                        float _3096 = dot(vec3(_3093, _3094, _3095), vec3(_3093, _3094, _3095));
                        float _3099 = inversesqrt(_3096);
                        float _3100 = _3099 * _3093;
                        float _3101 = _3099 * _3094;
                        float _3102 = _3099 * _3095;
                        float _3103 = dot(vec3(_439, _442, _445), vec3(_3100, _3101, _3102));
                        float _3108 = 1.0 - (_3096 * _3034.w);
                        float _4646 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                        float _3109 = isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0));
                        float _3110 = sqrt(_3096) * _3053.w;
                        float _3113 = 1.39999997615814208984375 / (_3110 + 1.39999997615814208984375);
                        float _3114 = _3113 * _3113;
                        float _3115 = 1.0 - _3114;
                        float _3117 = (_3115 * _3115) * _319;
                        float _3120 = ((_3115 * _3103) + _3114) + _3117;
                        float _3125 = _3110 * _3110;
                        float _3130 = ((isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0))) * _3109) / (((_3117 * 2.0) + 1.0) * ((_3125 * 0.699999988079071044921875) + 1.0));
                        float _3134 = dot(vec3(_3100, _3101, _3102), vec3(_3090, _3091, _3092));
                        float _4662 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3141 = dot(vec3((-0.0) - _3090, (-0.0) - _3091, (-0.0) - _3092), vec3(_439, _442, _445)) + 1.0;
                        float _3143 = (isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0))) * 0.5;
                        float _3150 = ((_3143 * _3143) * _3083.x) * exp2((_3083.y * 32.0) * log2(isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0))));
                        float _3152 = _319 / (_319 + 1.0);
                        float _3168 = (-0.0) - _1614;
                        float _3169 = (-0.0) - _1615;
                        float _3170 = (-0.0) - _1616;
                        float _3174 = inversesqrt(dot(vec3(_3168, _3169, _3170), vec3(_3168, _3169, _3170)));
                        float _3175 = _3174 * _3168;
                        float _3176 = _3174 * _3169;
                        float _3177 = _3174 * _3170;
                        float _3184 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                        float _3185 = 1.0 - _515;
                        float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                        float _3193 = _3192 * _3192;
                        float _3194 = _3193 * _3193;
                        float _3195 = _3175 + _3100;
                        float _3196 = _3176 + _3101;
                        float _3197 = _3177 + _3102;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3205 = dot(vec3(_439, _442, _445), vec3(_3175, _3176, _3177));
                        float _4678 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
                        float _3209 = dot(vec3(_439, _442, _445), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                        float _4689 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0));
                        float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                        float _3217 = _3113 * _3193;
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3103) + _3218;
                        float _4700 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
                        float _3223 = 1.0 - _3193;
                        float _3233 = (0.5 / (((_3222 * ((_3208 * _3223) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3193) * _3208))) * _3222;
                        float _4711 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3244 = (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0)))) / ((_3216 * _3216) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125))) * _3109;
                        _2926 = (((((_3054 * 0.3183098733425140380859375) * _3152) * _3150) + _3054) * _3130) + _3011;
                        _2927 = (((((_3055 * 0.3183098733425140380859375) * _3152) * _3150) + _3055) * _3130) + _3012;
                        _2928 = (((((_3056 * 0.3183098733425140380859375) * _3152) * _3150) + _3056) * _3130) + _3013;
                        _2923 = (_3244 * _3070.x) + _3008;
                        _2924 = (_3244 * _3070.y) + _3009;
                        _2925 = (_3244 * _3070.z) + _3010;
                        if (_3015 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3008 = _2923;
                            _3009 = _2924;
                            _3010 = _2925;
                            _3011 = _2926;
                            _3012 = _2927;
                            _3013 = _2928;
                            _3014 = _3015;
                        }
                    }
                    frontier_phi_72_pred = _2928;
                    frontier_phi_72_pred_1 = _2927;
                    frontier_phi_72_pred_2 = _2926;
                    frontier_phi_72_pred_3 = _2925;
                    frontier_phi_72_pred_4 = _2924;
                    frontier_phi_72_pred_5 = _2923;
                }
                _2636 = frontier_phi_72_pred;
                _2634 = frontier_phi_72_pred_1;
                _2632 = frontier_phi_72_pred_2;
                _2630 = frontier_phi_72_pred_3;
                _2628 = frontier_phi_72_pred_4;
                _2626 = frontier_phi_72_pred_5;
                uint _2814 = _2813 + 1u;
                if (_2814 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2807 = _2626;
                    _2808 = _2628;
                    _2809 = _2630;
                    _2810 = _2632;
                    _2811 = _2634;
                    _2812 = _2636;
                    _2813 = _2814;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2625 = _2626;
            _2627 = _2628;
            _2629 = _2630;
            _2631 = _2632;
            _2633 = _2634;
            _2635 = _2636;
        }
        uvec4 _2639 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2640 = _2639.z;
        uint _2642 = (_2640 >> 8u) & 15u;
        float _2775;
        float _2777;
        float _2779;
        float _2781;
        float _2783;
        float _2785;
        if (((4294967295u << _2642) & _2599) == 0u)
        {
            _2775 = _2625;
            _2777 = _2627;
            _2779 = _2629;
            _2781 = _2631;
            _2783 = _2633;
            _2785 = _2635;
        }
        else
        {
            float _2800 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
            float _2801 = _2800 * _1614;
            float _2802 = _2800 * _1615;
            float _2803 = _2800 * _1616;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2642 < ((_2640 >> 12u) & 15u))
            {
                float _2776;
                float _2778;
                float _2780;
                float _2782;
                float _2784;
                float _2786;
                float _2991 = _2625;
                float _2992 = _2627;
                float _2993 = _2629;
                float _2994 = _2631;
                float _2995 = _2633;
                float _2996 = _2635;
                uint _2997 = _2642;
                uint _3006;
                bool _3007;
                for (;;)
                {
                    _3006 = texelFetch(g_lightClassification, int((((_2593 << 5u) + (_2579 << 9u)) + (_2997 << 2u)) >> 2u)).x;
                    _3007 = _3006 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3007)
                    {
                        frontier_phi_84_pred = _2996;
                        frontier_phi_84_pred_1 = _2995;
                        frontier_phi_84_pred_2 = _2994;
                        frontier_phi_84_pred_3 = _2993;
                        frontier_phi_84_pred_4 = _2992;
                        frontier_phi_84_pred_5 = _2991;
                    }
                    else
                    {
                        float _3292;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3645;
                        float _3646;
                        float _3647;
                        float _3648;
                        float _3649;
                        float _3650;
                        float _3314 = _2991;
                        float _3315 = _2992;
                        float _3316 = _2993;
                        float _3317 = _2994;
                        float _3318 = _2995;
                        float _3319 = _2996;
                        uint _3320 = _3006;
                        uint _3321;
                        vec4 _3346;
                        float _3347;
                        vec4 _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        vec3 _3377;
                        vec2 _3386;
                        vec4 _3402;
                        vec4 _3418;
                        float _3465;
                        bool _3466;
                        for (;;)
                        {
                            uint _3331 = ((_2997 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3320));
                            _3321 = (_3320 + 4294967295u) & _3320;
                            uint _3333 = _3331 * 40u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            _3347 = _3346.w;
                            uint _3349 = (_3331 * 40u) + 4u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            _3363 = _3362.x;
                            _3364 = _3362.y;
                            _3365 = _3362.z;
                            uint _3367 = (_3331 * 40u) + 8u;
                            _3377 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x));
                            uint _3379 = (_3331 * 40u) + 12u;
                            _3386 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x));
                            uint _3389 = (_3331 * 40u) + 16u;
                            _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            uint _3405 = (_3331 * 40u) + 20u;
                            _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            uint _3421 = (_3331 * 40u) + 24u;
                            vec4 _3434 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3421)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3421 + 3u)).x));
                            uint _3440 = (_3331 * 40u) + 28u;
                            vec4 _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            _3465 = fma(_1616, _3453.z, fma(_1615, _3453.y, _3453.x * _1614)) + _3453.w;
                            _3466 = !((fma(_1616, _3434.z, fma(_1615, _3434.y, _3434.x * _1614)) + _3434.w) <= 0.0);
                            float frontier_phi_93_pred;
                            float frontier_phi_93_pred_1;
                            float frontier_phi_93_pred_2;
                            float frontier_phi_93_pred_3;
                            float frontier_phi_93_pred_4;
                            float frontier_phi_93_pred_5;
                            if (_3466)
                            {
                                float _3492 = _3346.x - _1614;
                                float _3493 = _3346.y - _1615;
                                float _3494 = _3346.z - _1616;
                                float _3495 = dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494));
                                float _3498 = inversesqrt(_3495);
                                float _3499 = _3498 * _3492;
                                float _3500 = _3498 * _3493;
                                float _3501 = _3498 * _3494;
                                float _3505 = 1.0 - (_3495 / (_3347 * _3347));
                                float _4722 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3506 = isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0));
                                float _3510 = sqrt(_3495) * _3362.w;
                                float _3512 = 1.39999997615814208984375 / (_3510 + 1.39999997615814208984375);
                                float _3513 = _3512 * _3512;
                                float _3514 = 1.0 - _3513;
                                float _3516 = (_3514 * _3514) * _319;
                                float _3519 = ((_3514 * dot(vec3(_3499, _3500, _3501), vec3(_439, _442, _445))) + _3513) + _3516;
                                float _3524 = _3510 * _3510;
                                float _3529 = (fma(_1616, _3402.z, fma(_1615, _3402.y, _3402.x * _1614)) + _3402.w) / _3465;
                                float _3530 = (fma(_1616, _3418.z, fma(_1615, _3418.y, _3418.x * _1614)) + _3418.w) / _3465;
                                float _3534 = 1.0 - dot(vec2(_3529, _3530), vec2(_3529, _3530));
                                float _4738 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3535 = isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0));
                                float _3536 = _3535 * (((isnan(0.0) ? _3519 : (isnan(_3519) ? 0.0 : max(_3519, 0.0))) * _3506) / (((_3516 * 2.0) + 1.0) * ((_3524 * 0.699999988079071044921875) + 1.0)));
                                float _3537 = (-0.0) - _2801;
                                float _3538 = (-0.0) - _2802;
                                float _3539 = (-0.0) - _2803;
                                float _3540 = dot(vec3(_3499, _3500, _3501), vec3(_2801, _2802, _2803));
                                float _4749 = isnan(0.0) ? _3540 : (isnan(_3540) ? 0.0 : max(_3540, 0.0));
                                float _3547 = dot(vec3(_3537, _3538, _3539), vec3(_439, _442, _445)) + 1.0;
                                float _3549 = (isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0))) * 0.5;
                                float _3556 = ((_3549 * _3549) * _3386.x) * exp2((_3386.y * 32.0) * log2(isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))));
                                float _3558 = _319 / (_319 + 1.0);
                                float _3579 = exp2(log2(1.0 / ((_3524 * 3.5) + 5.0)) * 0.25);
                                float _3580 = 1.0 - _515;
                                float _3587 = sqrt(1.0 - ((1.0 - (_3580 * _3580)) * (1.0 - (_3579 * _3579))));
                                float _3588 = _3587 * _3587;
                                float _3589 = _3588 * _3588;
                                float _3590 = _3499 - _2801;
                                float _3591 = _3500 - _2802;
                                float _3592 = _3501 - _2803;
                                float _3596 = inversesqrt(dot(vec3(_3590, _3591, _3592), vec3(_3590, _3591, _3592)));
                                float _3600 = dot(vec3(_439, _442, _445), vec3(_3537, _3538, _3539));
                                float _4765 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3603 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                                float _3604 = dot(vec3(_439, _442, _445), vec3(_3596 * _3590, _3596 * _3591, _3596 * _3592));
                                float _4776 = isnan(0.0) ? _3604 : (isnan(_3604) ? 0.0 : max(_3604, 0.0));
                                float _3607 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                                float _3611 = ((_3607 * _3607) * (_3589 + (-1.0))) + 1.0;
                                float _3612 = _3512 * _3588;
                                float _3613 = _3612 * _3612;
                                float _3619 = ((1.0 - _3613) * dot(vec3(_439, _442, _445), vec3(_3499, _3500, _3501))) + _3613;
                                float _4787 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3620 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                                float _3621 = 1.0 - _3588;
                                float _3631 = (0.5 / (((_3620 * ((_3603 * _3621) + _3588)) + 9.9999999392252902907785028219223e-09) + (((_3620 * _3621) + _3588) * _3603))) * _3620;
                                float _4798 = isnan(0.0) ? _3631 : (isnan(_3631) ? 0.0 : max(_3631, 0.0));
                                float _3641 = (_3535 * _3506) * (((_3589 * 3.1415927410125732421875) * (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) / ((_3611 * _3611) * ((_3524 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_93_pred = ((((_3365 * 0.3183098733425140380859375) * _3558) * _3556) + _3365) * _3536;
                                frontier_phi_93_pred_1 = ((((_3364 * 0.3183098733425140380859375) * _3558) * _3556) + _3364) * _3536;
                                frontier_phi_93_pred_2 = ((((_3363 * 0.3183098733425140380859375) * _3558) * _3556) + _3363) * _3536;
                                frontier_phi_93_pred_3 = _3641 * _3377.z;
                                frontier_phi_93_pred_4 = _3641 * _3377.y;
                                frontier_phi_93_pred_5 = _3641 * _3377.x;
                            }
                            else
                            {
                                frontier_phi_93_pred = 0.0;
                                frontier_phi_93_pred_1 = 0.0;
                                frontier_phi_93_pred_2 = 0.0;
                                frontier_phi_93_pred_3 = 0.0;
                                frontier_phi_93_pred_4 = 0.0;
                                frontier_phi_93_pred_5 = 0.0;
                            }
                            _3650 = frontier_phi_93_pred;
                            _3649 = frontier_phi_93_pred_1;
                            _3648 = frontier_phi_93_pred_2;
                            _3647 = frontier_phi_93_pred_3;
                            _3646 = frontier_phi_93_pred_4;
                            _3645 = frontier_phi_93_pred_5;
                            _3295 = _3648 + _3317;
                            _3296 = _3649 + _3318;
                            _3297 = _3650 + _3319;
                            _3292 = _3645 + _3314;
                            _3293 = _3646 + _3315;
                            _3294 = _3647 + _3316;
                            if (_3321 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3314 = _3292;
                                _3315 = _3293;
                                _3316 = _3294;
                                _3317 = _3295;
                                _3318 = _3296;
                                _3319 = _3297;
                                _3320 = _3321;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3297;
                        frontier_phi_84_pred_1 = _3296;
                        frontier_phi_84_pred_2 = _3295;
                        frontier_phi_84_pred_3 = _3294;
                        frontier_phi_84_pred_4 = _3293;
                        frontier_phi_84_pred_5 = _3292;
                    }
                    _2786 = frontier_phi_84_pred;
                    _2784 = frontier_phi_84_pred_1;
                    _2782 = frontier_phi_84_pred_2;
                    _2780 = frontier_phi_84_pred_3;
                    _2778 = frontier_phi_84_pred_4;
                    _2776 = frontier_phi_84_pred_5;
                    uint _2998 = _2997 + 1u;
                    if (_2998 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2991 = _2776;
                        _2992 = _2778;
                        _2993 = _2780;
                        _2994 = _2782;
                        _2995 = _2784;
                        _2996 = _2786;
                        _2997 = _2998;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2782;
                frontier_phi_66_67_ladder_1 = _2780;
                frontier_phi_66_67_ladder_2 = _2786;
                frontier_phi_66_67_ladder_3 = _2784;
                frontier_phi_66_67_ladder_4 = _2778;
                frontier_phi_66_67_ladder_5 = _2776;
            }
            else
            {
                frontier_phi_66_67_ladder = _2631;
                frontier_phi_66_67_ladder_1 = _2629;
                frontier_phi_66_67_ladder_2 = _2635;
                frontier_phi_66_67_ladder_3 = _2633;
                frontier_phi_66_67_ladder_4 = _2627;
                frontier_phi_66_67_ladder_5 = _2625;
            }
            _2775 = frontier_phi_66_67_ladder_5;
            _2777 = frontier_phi_66_67_ladder_4;
            _2779 = frontier_phi_66_67_ladder_1;
            _2781 = frontier_phi_66_67_ladder;
            _2783 = frontier_phi_66_67_ladder_3;
            _2785 = frontier_phi_66_67_ladder_2;
        }
        float _2790 = isnan(1.0) ? _499 : (isnan(_499) ? 1.0 : min(_499, 1.0));
        _2612 = (_2790 * _2781) + _2158;
        _2614 = (_2790 * _2783) + _2160;
        _2616 = (_2790 * _2785) + _2162;
        _2618 = ((_2775 * _484) * _2790) + _2462;
        _2620 = ((_2777 * _486) * _2790) + _2464;
        _2622 = ((_2779 * _487) * _2790) + _2466;
    }
    else
    {
        _2612 = _2158;
        _2614 = _2160;
        _2616 = _2162;
        _2618 = _2462;
        _2620 = _2464;
        _2622 = _2466;
    }
    float _2714;
    float _2715;
    float _2716;
    if (_319 > 0.0)
    {
        uint _2646 = _1840 + 4u;
        float _2652 = (-0.0) - _397;
        float _2654 = (-0.0) - _398;
        float _2655 = (-0.0) - _399;
        float _2656 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2652, _2654, _2655));
        float _4814 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2660 = _510 + 1.0;
        float _2662 = (isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0))) * 0.5;
        float _2667 = _2662 * _2662;
        float _2668 = _2667 * exp2(log2(isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0))) * 32.0);
        float _2670 = _319 / (_319 + 1.0);
        float _2671 = isnan(_1853) ? 1.0 : (isnan(1.0) ? _1853 : min(1.0, _1853));
        uint _2684 = _1840 + 5u;
        float _2690 = dot(vec3(cbLight._m0[_2258].xyz), vec3(_2652, _2654, _2655));
        float _4835 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2697 = _2667 * exp2(log2(isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0))) * 32.0);
        float _2698 = isnan(_1854) ? 1.0 : (isnan(1.0) ? _1854 : min(1.0, _1854));
        _2714 = ((((_2697 * cbLight._m0[_2684].x) * _2670) * _2698) + ((((cbLight._m0[_2646].x * _1829) * _2668) * _2670) * _2671)) * 0.3183098733425140380859375;
        _2715 = ((((_2697 * cbLight._m0[_2684].y) * _2670) * _2698) + ((((cbLight._m0[_2646].y * _1831) * _2668) * _2670) * _2671)) * 0.3183098733425140380859375;
        _2716 = ((((_2697 * cbLight._m0[_2684].z) * _2670) * _2698) + ((((cbLight._m0[_2646].z * _1833) * _2668) * _2670) * _2671)) * 0.3183098733425140380859375;
    }
    else
    {
        _2714 = 0.0;
        _2715 = 0.0;
        _2716 = 0.0;
    }
    float _4851 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _4862 = isnan(0.0) ? _475 : (isnan(_475) ? 0.0 : max(_475, 0.0));
    float _4873 = isnan(0.0) ? _476 : (isnan(_476) ? 0.0 : max(_476, 0.0));
    float _2735 = ((isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * ((_2612 + ((isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0))) * _499)) + _2714)) + ((_2618 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    float _2736 = ((isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0))) * ((_2614 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _499)) + _2715)) + ((_2620 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    float _2737 = ((isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0))) * ((_2616 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _499)) + _2716)) + ((_2622 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1341)) * cbPerFrame._m0[3u].x);
    uint _2738 = _458 + 6u;
    float _2746 = _418 / cbSceneParam._m0[86u].x;
    float _2747 = _419 / cbSceneParam._m0[86u].y;
    vec4 _2761 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, (log2((isnan(cbSceneParam._m0[77u].w) ? _339 : (isnan(_339) ? cbSceneParam._m0[77u].w : min(_339, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2763 = _2761.x;
    float _2764 = _2761.y;
    float _2765 = _2761.z;
    float _2766 = _2761.w;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    if (_339 > cbSceneParam._m0[78u].w)
    {
        float _2828 = isnan(_339) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _339 : min(cbSceneParam._m0[80u].w, _339));
        float _2829 = _2828 / _339;
        float _2840 = _2829 * _390;
        float _2841 = _391 * _2829;
        float _2842 = (-0.0) - _2841;
        float _2843 = _2829 * _392;
        float _2845 = (cbSceneParam._m0[77u].w * _2842) / _2828;
        float _2846 = _2845 + cbSceneParam._m0[79u].w;
        float _2847 = cbSceneParam._m0[79u].w - _2841;
        float _2853 = sqrt(((_2840 * _2840) + (_2841 * _2841)) + (_2843 * _2843));
        float _2856 = (1.0 - (cbSceneParam._m0[77u].w / _2828)) * _2853;
        float _2861 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2863 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3249;
        if (abs((_2842 - _2845) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3249 = ((((_2846 > 0.0) ? exp2(_2861 * _2846) : (2.0 - exp2(_2863 * _2846))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2856;
        }
        else
        {
            float _2948 = 1.0 / cbSceneParam._m0[80u].x;
            float _2949 = isnan(_2847) ? _2846 : (isnan(_2846) ? _2847 : max(_2846, _2847));
            float _2950 = isnan(_2847) ? _2846 : (isnan(_2846) ? _2847 : min(_2846, _2847));
            float _2959 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : min(_2949, 0.0));
            float _2960 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : min(_2950, 0.0));
            _3249 = ((abs(_2853 / _2842) * cbSceneParam._m0[80u].y) * ((((_2959 - _2960) * 2.0) - ((exp2(_2861 * (isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0)))) - exp2(_2861 * (isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0))))) * _2948)) - ((exp2(_2863 * _2959) - exp2(_2863 * _2960)) * _2948))) + (_2856 * cbSceneParam._m0[80u].z);
        }
        vec4 _3251 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2746, _2747, 1.0), 0.0);
        float _3260 = exp2((_3249 * (-1.44269502162933349609375)) * (1.0 - _3251.w));
        float _3261 = log2(_3260);
        float _3277 = log2(_2766);
        _2865 = (exp2(_3277 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].x)) * _3251.x) / cbSceneParam._m0[78u].x)) + _2763;
        _2867 = (exp2(_3277 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].y)) * _3251.y) / cbSceneParam._m0[78u].y)) + _2764;
        _2869 = (exp2(_3277 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3261 * cbSceneParam._m0[78u].z)) * _3251.z) / cbSceneParam._m0[78u].z)) + _2765;
        _2871 = _3260 * _2766;
    }
    else
    {
        _2865 = _2763;
        _2867 = _2764;
        _2869 = _2765;
        _2871 = _2766;
    }
    bool _3287;
    vec4 _2881;
    vec4 _2903;
    float _2905;
    float _2909;
    float _2910;
    float _2911;
    float _2912;
    bool _2922;
    for (;;)
    {
        _2881 = cbMatDynParam._m0[0u];
        float _2883 = roundEven(_2881.y);
        bool _2884 = _2883 == 3.0;
        float _2885 = log2(_2871);
        float _2892 = exp2(_2885 * cbSceneParam._m0[78u].x) * _2735;
        float _2893 = exp2(_2885 * cbSceneParam._m0[78u].y) * _2736;
        float _2894 = exp2(_2885 * cbSceneParam._m0[78u].z) * _2737;
        float _2901 = _406 + (-0.5);
        _2903 = cbMtdParam._m0[1u];
        _2905 = _2903.y * _2901;
        float _2908 = (_2883 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2909 = _2908 * (_2884 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2865)));
        _2910 = _2908 * (_2884 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2867)));
        _2911 = _2908 * (_2884 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2869)));
        _2912 = _2901 * 0.999000012874603271484375;
        _2922 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2922)
        {
            if ((cbInstanceData._m0[_458 + 7u].x + _2912) < 0.5)
            {
                _3287 = true;
                break;
            }
        }
        uint _2983 = _460 + uint(_2881.w);
        if ((cbInstanceData._m0[_2983].w < 1.0) && ((cbInstanceData._m0[_2983].w + _2912) < 0.5))
        {
            _3287 = true;
            break;
        }
        if ((_2905 + _236) < _2903.x)
        {
            _3287 = true;
            break;
        }
        _3287 = false;
        break;
    }
    float _3305;
    if (_3287)
    {
        discard_state = true;
        _3305 = 0.0;
    }
    else
    {
        _3305 = cbInstanceData._m0[_2738].w;
    }
    SV_Target.x = _2909;
    SV_Target.y = _2910;
    SV_Target.z = _2911;
    SV_Target.w = _3305;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2738].w;
    discard_exit();
}


