#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _901;
float _3545;
float _3546;
float _3547;
float _3548;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.w;
    float _235 = _228.x * cbMtdParam._m0[9u].x;
    float _236 = _228.y * cbMtdParam._m0[9u].y;
    float _237 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = _249.x;
    vec4 _263 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3557 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))));
    vec4 _292 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _299 = cbMtdParam._m0[10u].x * _292.x;
    float _302 = fma(_280, _198 * NORMAL.x, fma(_273, _205 * TANGENT.x, (_191 * _184) * _271));
    float _305 = fma(_280, _198 * NORMAL.y, fma(_273, _205 * TANGENT.y, (_191 * _185) * _271));
    float _308 = fma(_280, _198 * NORMAL.z, fma(_273, _205 * TANGENT.z, (_191 * _186) * _271));
    float _312 = inversesqrt(dot(vec3(_302, _305, _308), vec3(_302, _305, _308)));
    float _313 = _312 * _302;
    float _314 = _312 * _305;
    float _315 = _312 * _308;
    float _3568 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _316 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
    float _317 = isnan(0.0) ? _299 : (isnan(_299) ? 0.0 : max(_299, 0.0));
    float _3584 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3595 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3606 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _3617 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _321 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _337 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _378 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _388 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _378);
    float _389 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _378);
    float _390 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _378);
    float _394 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _395 = _388 * _394;
    float _396 = _389 * _394;
    float _397 = _390 * _394;
    vec4 _402 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _404 = _402.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _580 = sqrt(((_388 * _388) + (_389 * _389)) + (_390 * _390));
        float _586 = (cbMatDynParam._m0[5u].x * _580) + cbMatDynParam._m0[5u].y;
        float _3628 = isnan(0.0) ? _586 : (isnan(_586) ? 0.0 : max(_586, 0.0));
        float _587 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _591 = (cbMatDynParam._m0[5u].z * _580) + cbMatDynParam._m0[5u].w;
        float _3639 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) - _587)) + _587) < ((_404 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _416 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _417 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _437 = fma(_315, cbSceneParam._m0[5u].z, fma(_314, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _313));
    float _440 = fma(_315, cbSceneParam._m0[6u].z, fma(_314, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _313));
    float _443 = fma(_315, cbSceneParam._m0[7u].z, fma(_314, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _313));
    uint _456 = uint(roundEven(NORMAL.w)) * 13u;
    uint _458 = _456 + 9u;
    uint _459 = _458 + uint(cbMatDynParam._m0[0u].w);
    float _465 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_459].x;
    float _466 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_459].y;
    float _467 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_459].z;
    float _3650 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _468 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _469 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _467 : (isnan(_467) ? 0.0 : max(_467, 0.0));
    float _470 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _471 = 1.0 - _321;
    float _472 = _468 * _471;
    float _473 = _469 * _471;
    float _474 = _470 * _471;
    float _479 = (_468 + (-0.039999999105930328369140625)) * _321;
    float _480 = (_469 + (-0.039999999105930328369140625)) * _321;
    float _481 = (_470 + (-0.039999999105930328369140625)) * _321;
    float _482 = _479 + 0.039999999105930328369140625;
    float _484 = _480 + 0.039999999105930328369140625;
    float _485 = _481 + 0.039999999105930328369140625;
    vec4 _494 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _416, cbSceneParam._m0[86u].y * _417));
    float _497 = _494.x * TEXCOORD.z;
    float _498 = dot(vec3(_313, _314, _315), vec3(_395, _396, _397));
    float _501 = _498 * 2.0;
    float _505 = (_501 * _313) - _395;
    float _506 = (_501 * _314) - _396;
    float _507 = (_501 * _315) - _397;
    float _508 = dot(vec3(_395, _396, _397), vec3(_313, _314, _315));
    float _511 = abs(_508);
    float _3683 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _513 = sqrt(_316);
    float _526 = exp2((_513 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_513 * 3.0));
    float _532 = (1.0 - _526) * ((_513 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _533 = _526 * _513;
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _565 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _569 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _900;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _625 = fma(_569, cbModelParam._m0[26u].z, fma(_565, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _561));
        float _629 = fma(_569, cbModelParam._m0[27u].z, fma(_565, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _561));
        float _633 = fma(_569, cbModelParam._m0[28u].z, fma(_565, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _561));
        float _658 = _561 + _313;
        float _659 = _565 + _314;
        float _660 = _569 + _315;
        float _670 = fma(_660, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) - _625;
        float _671 = fma(_660, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) - _629;
        float _672 = fma(_660, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) - _633;
        float _676 = inversesqrt(dot(vec3(_670, _671, _672), vec3(_670, _671, _672)));
        float _689 = ((_676 * _670) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_625 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _690 = ((_676 * _671) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_629 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _691 = ((_676 * _672) / cbModelParam._m0[34u].z) + ((((((_633 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _694 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_689, _690, _691), 0.0);
        float _728 = exp2((_694.w + (-0.5)) * 20.0) * 2.0;
        float _729 = _728 * (_694.x + (-0.5));
        float _730 = _728 * (_694.y + (-0.5));
        float _731 = _728 * (_694.z + (-0.5));
        float _738 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _739 = _738 * (_701.x + (-0.5));
        float _740 = _738 * (_701.y + (-0.5));
        float _741 = _738 * (_701.z + (-0.5));
        float _748 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _749 = _748 * (_708.x + (-0.5));
        float _750 = _748 * (_708.y + (-0.5));
        float _751 = _748 * (_708.z + (-0.5));
        float _758 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _759 = _758 * (_715.x + (-0.5));
        float _760 = _758 * (_715.y + (-0.5));
        float _761 = _758 * (_715.z + (-0.5));
        float _762 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _763 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = _729 * 0.5;
        float _766 = _739 * 0.5;
        float _767 = _749 * 0.5;
        float _768 = dot(vec3(_765, _766, _767), vec3(_765, _766, _767));
        float _773 = (_768 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_768);
        float _782 = (dot(vec3(_313, _314, _315), vec3(_773 * _765, _773 * _766, _773 * _767)) + 1.0) * 0.5;
        float _3709 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        float _792 = sqrt(((_766 * _766) + (_765 * _765)) + (_767 * _767)) / (_762 + 9.9999997473787516355514526367188e-06);
        float _3720 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _794 = _793 * 2.0;
        float _798 = (1.0 - _793) / (_793 + 1.0);
        float _3731 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
        float _799 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _808 = ((((1.0 - _799) * (_794 + 2.0)) * exp2(log2(isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * (_794 + 1.0))) + _799) * _762;
        float _809 = _730 * 0.5;
        float _810 = _740 * 0.5;
        float _811 = _750 * 0.5;
        float _812 = dot(vec3(_809, _810, _811), vec3(_809, _810, _811));
        float _817 = (_812 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_812);
        float _825 = (dot(vec3(_313, _314, _315), vec3(_817 * _809, _817 * _810, _817 * _811)) + 1.0) * 0.5;
        float _3742 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _834 = sqrt(((_810 * _810) + (_809 * _809)) + (_811 * _811)) / (_763 + 9.9999997473787516355514526367188e-06);
        float _3753 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _836 = _835 * 2.0;
        float _840 = (1.0 - _835) / (_835 + 1.0);
        float _3764 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _850 = ((((1.0 - _841) * (_836 + 2.0)) * exp2(log2(isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0))) * (_836 + 1.0))) + _841) * _763;
        float _851 = _731 * 0.5;
        float _852 = _741 * 0.5;
        float _853 = _751 * 0.5;
        float _854 = dot(vec3(_851, _852, _853), vec3(_851, _852, _853));
        float _859 = (_854 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_854);
        float _867 = (dot(vec3(_313, _314, _315), vec3(_859 * _851, _859 * _852, _859 * _853)) + 1.0) * 0.5;
        float _3775 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _876 = sqrt(((_852 * _852) + (_851 * _851)) + (_853 * _853)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _3786 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        float _877 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _878 = _877 * 2.0;
        float _882 = (1.0 - _877) / (_877 + 1.0);
        float _3797 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _892 = ((((1.0 - _883) * (_878 + 2.0)) * exp2(log2(isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * (_878 + 1.0))) + _883) * _764;
        _900 = _731;
        _902 = _730;
        _903 = _729;
        _904 = _741;
        _905 = _740;
        _906 = _739;
        _907 = _751;
        _908 = _750;
        _909 = _749;
        _910 = _764;
        _911 = _763;
        _912 = _762;
        _913 = cbModelParam._m0[36u].z * (isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)));
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0)));
    }
    else
    {
        _900 = _901;
        _902 = _901;
        _903 = _901;
        _904 = _901;
        _905 = _901;
        _906 = _901;
        _907 = _901;
        _908 = _901;
        _909 = _901;
        _910 = _901;
        _911 = _901;
        _912 = _901;
        _913 = 0.0;
        _914 = 0.0;
        _915 = 0.0;
    }
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _944 = fma(_569, cbModelParam._m0[30u].z, fma(_565, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _561));
        float _948 = fma(_569, cbModelParam._m0[31u].z, fma(_565, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _561));
        float _952 = fma(_569, cbModelParam._m0[32u].z, fma(_565, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _561));
        float _975 = _561 + _313;
        float _976 = _565 + _314;
        float _977 = _569 + _315;
        float _987 = fma(_977, cbModelParam._m0[30u].z, fma(_976, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _975)) - _944;
        float _988 = fma(_977, cbModelParam._m0[31u].z, fma(_976, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _975)) - _948;
        float _989 = fma(_977, cbModelParam._m0[32u].z, fma(_976, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _975)) - _952;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_944 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_948 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[35u].z) + ((((((_952 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1010 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1043 = exp2((_1010.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1010.x + (-0.5));
        float _1045 = _1043 * (_1010.y + (-0.5));
        float _1046 = _1043 * (_1010.z + (-0.5));
        float _1053 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1017.x + (-0.5));
        float _1055 = _1053 * (_1017.y + (-0.5));
        float _1056 = _1053 * (_1017.z + (-0.5));
        float _1063 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1024.x + (-0.5));
        float _1065 = _1063 * (_1024.y + (-0.5));
        float _1066 = _1063 * (_1024.z + (-0.5));
        float _1073 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1031.x + (-0.5));
        float _1075 = _1073 * (_1031.y + (-0.5));
        float _1076 = _1073 * (_1031.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1096 = (dot(vec3(_313, _314, _315), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3838 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1105 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3849 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3860 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_1107 + 1.0))) + _1112) * _1077;
        float _1122 = _1045 * 0.5;
        float _1123 = _1055 * 0.5;
        float _1124 = _1065 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_313, _314, _315), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3871 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3882 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3893 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0))) * (_1149 + 1.0))) + _1154) * _1078;
        float _1164 = _1046 * 0.5;
        float _1165 = _1056 * 0.5;
        float _1166 = _1066 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_313, _314, _315), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3904 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3915 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3926 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0))) * (_1191 + 1.0))) + _1196) * _1079;
        _1213 = _1046;
        _1214 = _1045;
        _1215 = _1044;
        _1216 = _1056;
        _1217 = _1055;
        _1218 = _1054;
        _1219 = _1066;
        _1220 = _1065;
        _1221 = _1064;
        _1222 = _1079;
        _1223 = _1078;
        _1224 = _1077;
        _1225 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1226 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1227 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _901;
        _1214 = _901;
        _1215 = _901;
        _1216 = _901;
        _1217 = _901;
        _1218 = _901;
        _1219 = _901;
        _1220 = _901;
        _1221 = _901;
        _1222 = _901;
        _1223 = _901;
        _1224 = _901;
        _1225 = 0.0;
        _1226 = 0.0;
        _1227 = 0.0;
    }
    float _1237 = (cbModelParam._m0[1u].x * (_1225 - _913)) + _913;
    float _1238 = (cbModelParam._m0[1u].x * (_1226 - _914)) + _914;
    float _1239 = (cbModelParam._m0[1u].x * (_1227 - _915)) + _915;
    float _1260 = fma(_1239, cbSceneParam._m0[89u].z, fma(_1238, cbSceneParam._m0[89u].y, _1237 * cbSceneParam._m0[89u].x));
    float _1263 = fma(_1239, cbSceneParam._m0[90u].z, fma(_1238, cbSceneParam._m0[90u].y, _1237 * cbSceneParam._m0[90u].x));
    float _1266 = fma(_1239, cbSceneParam._m0[91u].z, fma(_1238, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1237));
    float _1281 = _505 * 0.5;
    float _1282 = _506 * 0.5;
    float _1283 = _507 * 0.5;
    float _1284 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1215, _1218, _1221, _1224));
    float _1287 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1214, _1217, _1220, _1223));
    float _1290 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_1213, _1216, _1219, _1222));
    float _1324;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1297 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_900, _904, _907, _910));
        float _1301 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_902, _905, _908, _911));
        float _1305 = dot(vec4(_1281, _1282, _1283, 1.0), vec4(_903, _906, _909, _912));
        float _1312 = dot(vec4(cbModelParam._m0[39u]), vec4(_1281, _1282, _1283, 1.0));
        _1324 = dot(vec3(isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1312) ? 0.0 : (isnan(0.0) ? _1312 : max(0.0, _1312))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1324 = 1.0;
    }
    float _1335;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1326 = dot(vec4(cbModelParam._m0[40u]), vec4(_1281, _1282, _1283, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)), isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1326) ? 0.0 : (isnan(0.0) ? _1326 : max(0.0, _1326))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1339 = (_1335 * cbModelParam._m0[1u].x) + (_1324 * (1.0 - cbModelParam._m0[1u].x));
    float _1349 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _316);
    float _1350 = isnan(_1349) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1349 : min(cbModelParam._m0[25u].z, _1349));
    float _1432;
    float _1434;
    float _1436;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1399 = fma(_569, cbModelParam._m0[13u].z, fma(_565, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561)) + cbModelParam._m0[13u].w;
        float _1403 = fma(_569, cbModelParam._m0[14u].z, fma(_565, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561)) + cbModelParam._m0[14u].w;
        float _1407 = fma(_569, cbModelParam._m0[15u].z, fma(_565, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561)) + cbModelParam._m0[15u].w;
        float _1410 = fma(_507, cbModelParam._m0[13u].z, fma(_506, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _505));
        float _1413 = fma(_507, cbModelParam._m0[14u].z, fma(_506, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _505));
        float _1416 = fma(_507, cbModelParam._m0[15u].z, fma(_506, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _505));
        float _1444;
        if (_1410 > 0.0)
        {
            _1444 = abs((1.0 - _1399) / _1410);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1410 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1399 + 1.0) / _1410);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1444 = frontier_phi_17_15_ladder;
        }
        float _1647;
        if (_1413 > 0.0)
        {
            _1647 = abs((1.0 - _1403) / _1413);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1413 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1403 + 1.0) / _1413);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1647 = frontier_phi_26_22_ladder;
        }
        float _1721;
        if (_1416 > 0.0)
        {
            _1721 = abs((1.0 - _1407) / _1416);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1416 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1407 + 1.0) / _1416);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1721 = frontier_phi_37_33_ladder;
        }
        float _1723 = isnan(_1647) ? _1444 : (isnan(_1444) ? _1647 : min(_1444, _1647));
        float _1724 = isnan(_1721) ? _1723 : (isnan(_1723) ? _1721 : min(_1723, _1721));
        float _1728 = (_1724 * _1410) + _1399;
        float _1729 = (_1724 * _1413) + _1403;
        float _1730 = (_1724 * _1416) + _1407;
        float _1731 = _1724 * 9.9999997473787516355514526367188e-05;
        float _1733 = (-1.0) - _1731;
        float _1735 = _1731 + 1.0;
        float frontier_phi_16_37_ladder;
        float frontier_phi_16_37_ladder_1;
        float frontier_phi_16_37_ladder_2;
        if ((_1730 > _1735) || ((_1730 < _1733) || ((_1729 > _1735) || ((_1729 < _1733) || ((_1728 < _1733) || (_1728 > _1735))))))
        {
            frontier_phi_16_37_ladder = 0.0;
            frontier_phi_16_37_ladder_1 = 0.0;
            frontier_phi_16_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1806 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1730, cbModelParam._m0[9u].z, fma(_1729, cbModelParam._m0[9u].y, _1728 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1730, cbModelParam._m0[10u].z, fma(_1729, cbModelParam._m0[10u].y, _1728 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1730, cbModelParam._m0[11u].z, fma(_1729, cbModelParam._m0[11u].y, _1728 * cbModelParam._m0[11u].x))), _1350);
            frontier_phi_16_37_ladder = _1806.z * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_1 = _1806.y * cbModelParam._m0[1u].y;
            frontier_phi_16_37_ladder_2 = _1806.x * cbModelParam._m0[1u].y;
        }
        _1432 = frontier_phi_16_37_ladder_2;
        _1434 = frontier_phi_16_37_ladder_1;
        _1436 = frontier_phi_16_37_ladder;
    }
    else
    {
        vec4 _1420 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_505, _506, _507), _1350);
        _1432 = _1420.x * cbModelParam._m0[1u].y;
        _1434 = _1420.y * cbModelParam._m0[1u].y;
        _1436 = _1420.z * cbModelParam._m0[1u].y;
    }
    float _1440 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _316);
    float _1441 = isnan(_1440) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1440 : min(cbModelParam._m0[25u].w, _1440));
    float _1534;
    float _1536;
    float _1538;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1498 = fma(_569, cbModelParam._m0[21u].z, fma(_565, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561)) + cbModelParam._m0[21u].w;
        float _1502 = fma(_569, cbModelParam._m0[22u].z, fma(_565, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561)) + cbModelParam._m0[22u].w;
        float _1506 = fma(_569, cbModelParam._m0[23u].z, fma(_565, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561)) + cbModelParam._m0[23u].w;
        float _1509 = fma(_507, cbModelParam._m0[21u].z, fma(_506, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _505));
        float _1512 = fma(_507, cbModelParam._m0[22u].z, fma(_506, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _505));
        float _1515 = fma(_507, cbModelParam._m0[23u].z, fma(_506, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _505));
        float _1652;
        if (_1509 > 0.0)
        {
            _1652 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1652 = frontier_phi_28_24_ladder;
        }
        float _1748;
        if (_1512 > 0.0)
        {
            _1748 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_39_35_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_39_35_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_39_35_ladder = 5000.0;
            }
            _1748 = frontier_phi_39_35_ladder;
        }
        float _2030;
        if (_1515 > 0.0)
        {
            _2030 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2030 = frontier_phi_48_45_ladder;
        }
        float _2032 = isnan(_1748) ? _1652 : (isnan(_1652) ? _1748 : min(_1652, _1748));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1509) + _1498;
        float _2038 = (_2033 * _1512) + _1502;
        float _2039 = (_2033 * _1515) + _1506;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2040;
        float _2043 = _2040 + 1.0;
        float frontier_phi_25_48_ladder;
        float frontier_phi_25_48_ladder_1;
        float frontier_phi_25_48_ladder_2;
        if ((_2039 > _2043) || ((_2039 < _2041) || ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 < _2041) || (_2037 > _2043))))))
        {
            frontier_phi_25_48_ladder = 0.0;
            frontier_phi_25_48_ladder_1 = 0.0;
            frontier_phi_25_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2161 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2039, cbModelParam._m0[17u].z, fma(_2038, cbModelParam._m0[17u].y, _2037 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2039, cbModelParam._m0[18u].z, fma(_2038, cbModelParam._m0[18u].y, _2037 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2039, cbModelParam._m0[19u].z, fma(_2038, cbModelParam._m0[19u].y, _2037 * cbModelParam._m0[19u].x))), _1441);
            frontier_phi_25_48_ladder = _2161.z * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_1 = _2161.y * cbModelParam._m0[1u].z;
            frontier_phi_25_48_ladder_2 = _2161.x * cbModelParam._m0[1u].z;
        }
        _1534 = frontier_phi_25_48_ladder_2;
        _1536 = frontier_phi_25_48_ladder_1;
        _1538 = frontier_phi_25_48_ladder;
    }
    else
    {
        vec4 _1518 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_505, _506, _507), _1441);
        _1534 = _1518.x * cbModelParam._m0[1u].z;
        _1536 = _1518.y * cbModelParam._m0[1u].z;
        _1538 = _1518.z * cbModelParam._m0[1u].z;
    }
    float _1551 = (((_532 * _482) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1534 - _1432)) + _1432);
    float _1553 = (((_532 * _484) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1536 - _1434)) + _1434);
    float _1555 = (((_532 * _485) + _533) * _497) * ((cbModelParam._m0[1u].w * (_1538 - _1436)) + _1436);
    float _1558 = fma(_1555, cbSceneParam._m0[89u].z, fma(_1553, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1561 = fma(_1555, cbSceneParam._m0[90u].z, fma(_1553, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1564 = fma(_1555, cbSceneParam._m0[91u].z, fma(_1553, cbSceneParam._m0[91u].y, _1551 * cbSceneParam._m0[91u].x));
    vec4 _1572 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_416, _417));
    float _1574 = _1572.w;
    float _1586 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1574);
    float _1587 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1574);
    float _1588 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1574);
    uvec4 _1592 = floatBitsToUint(cbInstanceData._m0[_456 + 5u]);
    uint _1594 = _1592.x * 14u;
    uint _1595 = _1594 + 13u;
    float _1602 = _497 + (-1.0);
    float _1607 = (cbLight._m0[_1595].x * _1602) + 1.0;
    float _1608 = (cbLight._m0[_1595].y * _1602) + 1.0;
    float _1609 = (cbLight._m0[_1595].z * _1602) + 1.0;
    float _1610 = (cbLight._m0[_1595].w * _1602) + 1.0;
    uint _1612 = _1594 + 4u;
    float _1624 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_313, _314, _315));
    float _1627 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
    float _1628 = cbLight._m0[_1612].x * _1586;
    float _1629 = cbLight._m0[_1612].y * _1587;
    float _1630 = cbLight._m0[_1612].z * _1588;
    uint _1631 = _1594 + 5u;
    float _1643 = dot(vec3(cbLight._m0[_1594 | 1u].xyz), vec3(_313, _314, _315));
    float _1646 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    float _1711;
    float _1712;
    float _1713;
    if (_317 == 0.0)
    {
        float _4062 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
        float _4073 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1665 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
        float _1667 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
        _1711 = ((cbLight._m0[_1631].x * _1646) * _1667) + ((_1628 * _1627) * _1665);
        _1712 = ((_1646 * cbLight._m0[_1631].y) * _1667) + ((_1629 * _1627) * _1665);
        _1713 = ((_1646 * cbLight._m0[_1631].z) * _1667) + ((_1630 * _1627) * _1665);
    }
    else
    {
        float _1677 = _1624 + _317;
        float _1680 = (_317 * 2.0) + 1.0;
        float _1681 = (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) / _1680;
        float _1688 = _1643 + _317;
        float _1690 = (isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) / _1680;
        _1711 = (((_1690 * cbLight._m0[_1631].x) * _1646) + ((_1628 * _1681) * _1627)) * 0.3183098733425140380859375;
        _1712 = (((_1690 * cbLight._m0[_1631].y) * _1646) + ((_1629 * _1681) * _1627)) * 0.3183098733425140380859375;
        _1713 = (((_1690 * cbLight._m0[_1631].z) * _1646) + ((_1630 * _1681) * _1627)) * 0.3183098733425140380859375;
    }
    uvec4 _1718 = floatBitsToUint(cbLight._m0[_1594 + 12u]);
    bool _1720 = _1718.x == 0u;
    float _1753;
    float _1755;
    float _1757;
    if (_1720)
    {
        _1753 = _1711;
        _1755 = _1712;
        _1757 = _1713;
    }
    else
    {
        uint _1761 = _1594 + 6u;
        float _1777 = (dot(vec3(cbLight._m0[_1594 + 2u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _1778 = _1777 * _1777;
        float _4094 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
        float _1779 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1780 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _1753 = (((cbLight._m0[_1761].x * 0.3183098733425140380859375) * _1779) * _1780) + _1711;
        _1755 = (((cbLight._m0[_1761].y * 0.3183098733425140380859375) * _1779) * _1780) + _1712;
        _1757 = (((cbLight._m0[_1761].z * 0.3183098733425140380859375) * _1779) * _1780) + _1713;
    }
    bool _1760 = _1718.y == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1760)
    {
        _1815 = _1753;
        _1817 = _1755;
        _1819 = _1757;
    }
    else
    {
        uint _2001 = _1594 + 7u;
        float _2017 = (dot(vec3(cbLight._m0[_1594 + 3u].xyz), vec3(_313, _314, _315)) * 0.5) + 0.5;
        float _2018 = _2017 * _2017;
        float _4110 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2019 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2020 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _1815 = (((cbLight._m0[_2001].x * 0.3183098733425140380859375) * _2019) * _2020) + _1753;
        _1817 = (((cbLight._m0[_2001].y * 0.3183098733425140380859375) * _2019) * _2020) + _1755;
        _1819 = (((cbLight._m0[_2001].z * 0.3183098733425140380859375) * _2019) * _2020) + _1757;
    }
    uint _1824 = _1594 + 8u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1594].w)) * _316) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1594].x + _395;
    float _1843 = cbLight._m0[_1594].y + _396;
    float _1844 = cbLight._m0[_1594].z + _397;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1594].xyz));
    float _4126 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
    float _4137 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _1856 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
    float _1857 = dot(vec3(_313, _314, _315), vec3(_1849, _1850, _1851));
    float _4148 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1860 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
    float _1861 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_1849, _1850, _1851));
    float _4159 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1865 = _1841 * _1841;
    float _1869 = ((_1860 * _1860) * (_1865 + (-1.0))) + 1.0;
    float _1877 = exp2(log2(1.0 - (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) * 5.0);
    float _1878 = 0.959999978542327880859375 - _479;
    float _1880 = 0.959999978542327880859375 - _480;
    float _1881 = 0.959999978542327880859375 - _481;
    float _1888 = 1.0 - _1841;
    float _1899 = (0.5 / (((_1856 * ((_1855 * _1888) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1888) + _1841) * _1855))) * _1855;
    float _4170 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1901 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_1865 / ((_1869 * _1869) * 3.141590118408203125));
    float _1902 = isnan(1.0) ? _1607 : (isnan(_1607) ? 1.0 : min(_1607, 1.0));
    uint _1915 = _1594 | 1u;
    uint _1919 = _1594 + 9u;
    float _1933 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1915].w)) * _316) * 0.949999988079071044921875);
    float _1934 = _1933 * _1933;
    float _1935 = cbLight._m0[_1915].x + _395;
    float _1936 = cbLight._m0[_1915].y + _396;
    float _1937 = cbLight._m0[_1915].z + _397;
    float _1941 = inversesqrt(dot(vec3(_1935, _1936, _1937), vec3(_1935, _1936, _1937)));
    float _1942 = _1941 * _1935;
    float _1943 = _1941 * _1936;
    float _1944 = _1941 * _1937;
    float _1945 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_1915].xyz));
    float _4186 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1948 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
    float _1949 = dot(vec3(_313, _314, _315), vec3(_1942, _1943, _1944));
    float _4197 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1952 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
    float _1953 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_1942, _1943, _1944));
    float _4208 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1957 = _1934 * _1934;
    float _1961 = ((_1952 * _1952) * (_1957 + (-1.0))) + 1.0;
    float _1968 = exp2(log2(1.0 - (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0)))) * 5.0);
    float _1975 = 1.0 - _1934;
    float _1985 = (0.5 / (((_1856 * ((_1948 * _1975) + _1934)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _1975) + _1934) * _1948))) * _1948;
    float _4219 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
    float _1987 = (isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0))) * (_1957 / ((_1961 * _1961) * 3.141590118408203125));
    float _1988 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    float _1998 = (((((_1968 * _1878) + _482) * cbLight._m0[_1919].x) * _1987) * _1988) + ((((cbLight._m0[_1824].x * _1586) * ((_1877 * _1878) + _482)) * _1901) * _1902);
    float _1999 = (((((_1968 * _1880) + _484) * cbLight._m0[_1919].y) * _1987) * _1988) + ((((cbLight._m0[_1824].y * _1587) * ((_1877 * _1880) + _484)) * _1901) * _1902);
    float _2000 = (((((_1968 * _1881) + _485) * cbLight._m0[_1919].z) * _1987) * _1988) + ((((cbLight._m0[_1824].z * _1588) * ((_1877 * _1881) + _485)) * _1901) * _1902);
    float _2056;
    float _2058;
    float _2060;
    if (_1720)
    {
        _2056 = _1998;
        _2058 = _1999;
        _2060 = _2000;
    }
    else
    {
        uint _2062 = _1594 + 2u;
        uint _2066 = _1594 + 10u;
        float _2080 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2062].w)) * _316) * 0.949999988079071044921875);
        float _2081 = _2080 * _2080;
        float _2082 = cbLight._m0[_2062].x + _395;
        float _2083 = cbLight._m0[_2062].y + _396;
        float _2084 = cbLight._m0[_2062].z + _397;
        float _2088 = inversesqrt(dot(vec3(_2082, _2083, _2084), vec3(_2082, _2083, _2084)));
        float _2089 = _2088 * _2082;
        float _2090 = _2088 * _2083;
        float _2091 = _2088 * _2084;
        float _2092 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2062].xyz));
        float _4235 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2095 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2096 = dot(vec3(_313, _314, _315), vec3(_2089, _2090, _2091));
        float _4246 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
        float _2099 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2100 = dot(vec3(cbLight._m0[_2062].xyz), vec3(_2089, _2090, _2091));
        float _4257 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
        float _2104 = _2081 * _2081;
        float _2108 = ((_2099 * _2099) * (_2104 + (-1.0))) + 1.0;
        float _2115 = exp2(log2(1.0 - (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0)))) * 5.0);
        float _2122 = 1.0 - _2081;
        float _2132 = (0.5 / (((_1856 * ((_2095 * _2122) + _2081)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2122) + _2081) * _2095))) * _2095;
        float _4268 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2134 = (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2104 / ((_2108 * _2108) * 3.141590118408203125));
        float _2135 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
        _2056 = (((((_2115 * _1878) + _482) * cbLight._m0[_2066].x) * _2134) * _2135) + _1998;
        _2058 = (((((_2115 * _1880) + _484) * cbLight._m0[_2066].y) * _2134) * _2135) + _1999;
        _2060 = (((((_2115 * _1881) + _485) * cbLight._m0[_2066].z) * _2134) * _2135) + _2000;
    }
    float _2166;
    float _2168;
    float _2170;
    if (_1760)
    {
        _2166 = _2056;
        _2168 = _2058;
        _2170 = _2060;
    }
    else
    {
        uint _2177 = _1594 + 3u;
        uint _2181 = _1594 + 11u;
        float _2195 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2177].w)) * _316) * 0.949999988079071044921875);
        float _2196 = _2195 * _2195;
        float _2197 = cbLight._m0[_2177].x + _395;
        float _2198 = cbLight._m0[_2177].y + _396;
        float _2199 = cbLight._m0[_2177].z + _397;
        float _2203 = inversesqrt(dot(vec3(_2197, _2198, _2199), vec3(_2197, _2198, _2199)));
        float _2204 = _2203 * _2197;
        float _2205 = _2203 * _2198;
        float _2206 = _2203 * _2199;
        float _2207 = dot(vec3(_313, _314, _315), vec3(cbLight._m0[_2177].xyz));
        float _4284 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
        float _2210 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
        float _2211 = dot(vec3(_313, _314, _315), vec3(_2204, _2205, _2206));
        float _4295 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
        float _2214 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2215 = dot(vec3(cbLight._m0[_2177].xyz), vec3(_2204, _2205, _2206));
        float _4306 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
        float _2219 = _2196 * _2196;
        float _2223 = ((_2214 * _2214) * (_2219 + (-1.0))) + 1.0;
        float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0)))) * 5.0);
        float _2237 = 1.0 - _2196;
        float _2247 = (0.5 / (((_1856 * ((_2210 * _2237) + _2196)) + 9.9999999392252902907785028219223e-09) + (((_1856 * _2237) + _2196) * _2210))) * _2210;
        float _4317 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
        float _2249 = (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0))) * (_2219 / ((_2223 * _2223) * 3.141590118408203125));
        float _2250 = isnan(1.0) ? _1610 : (isnan(_1610) ? 1.0 : min(_1610, 1.0));
        _2166 = (((((_2230 * _1878) + _482) * cbLight._m0[_2181].x) * _2249) * _2250) + _2056;
        _2168 = (((((_2230 * _1880) + _484) * cbLight._m0[_2181].y) * _2249) * _2250) + _2058;
        _2170 = (((((_2230 * _1881) + _485) * cbLight._m0[_2181].z) * _2249) * _2250) + _2060;
    }
    float _2359;
    float _2361;
    float _2363;
    float _2365;
    float _2367;
    float _2369;
    if (_1592.y == 0u)
    {
        float _2299 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2300 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2299;
        float _2301 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2299;
        float _2302 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2299;
        uvec4 _2314 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2315 = _2314.x;
        uint _2326 = uint((float(_2314.y) * floor(float(uint(cbSceneParam._m0[85u].y * _417) / _2315))) + floor(float(uint(cbSceneParam._m0[85u].x * _416) / _2315)));
        float _2336 = (log2(_2302 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2337 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        uint _2340 = uint(isnan(14.0) ? _2337 : (isnan(_2337) ? 14.0 : min(_2337, 14.0)));
        uvec4 _2345 = texelFetch(g_lightClusterGridBuffer, int(((_2340 << 2u) + (_2326 << 6u)) >> 2u));
        uint _2346 = _2345.x;
        uint _2347 = _2314.z;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        if (((((1u << ((_2347 >> 4u) & 15u)) + 4294967295u) & _2346) == 0u) || ((_2347 & 240u) == 0u))
        {
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
        }
        else
        {
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            float _2557 = 0.0;
            float _2558 = 0.0;
            float _2559 = 0.0;
            uint _2560 = 0u;
            uint _2569;
            bool _2570;
            for (;;)
            {
                _2569 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2560 << 2u)) >> 2u)).x;
                _2570 = _2569 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2570)
                {
                    frontier_phi_67_pred = _2554;
                    frontier_phi_67_pred_1 = _2559;
                    frontier_phi_67_pred_2 = _2558;
                    frontier_phi_67_pred_3 = _2557;
                    frontier_phi_67_pred_4 = _2556;
                    frontier_phi_67_pred_5 = _2555;
                }
                else
                {
                    float _2755;
                    float _2756;
                    float _2757;
                    float _2758;
                    float _2759;
                    float _2760;
                    uint _2761;
                    _2755 = _2554;
                    _2756 = _2555;
                    _2757 = _2556;
                    _2758 = _2557;
                    _2759 = _2558;
                    _2760 = _2559;
                    _2761 = _2569;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    for (;;)
                    {
                        uint _2765 = uint(findLSB(_2761)) + (_2560 << 5u);
                        uint _2762 = (_2761 + 4294967295u) & _2761;
                        uint _2767 = _2765 * 48u;
                        vec4 _2781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2767)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2767 + 3u)).x));
                        uint _2787 = (_2765 * 48u) + 4u;
                        vec4 _2800 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2787)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2787 + 3u)).x));
                        float _2801 = _2800.x;
                        float _2802 = _2800.y;
                        float _2803 = _2800.z;
                        uint _2806 = (_2765 * 48u) + 8u;
                        vec3 _2817 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2806)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2806 + 2u)).x));
                        uint _2822 = (_2765 * 48u) + 12u;
                        vec2 _2830 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2822)).x, texelFetch(g_PointLightRenderingBuffer, int(_2822 + 1u)).x));
                        float _2836 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
                        float _2837 = _2836 * _2300;
                        float _2838 = _2836 * _2301;
                        float _2839 = _2836 * _2302;
                        float _2840 = _2781.x - _2300;
                        float _2841 = _2781.y - _2301;
                        float _2842 = _2781.z - _2302;
                        float _2843 = dot(vec3(_2840, _2841, _2842), vec3(_2840, _2841, _2842));
                        float _2846 = inversesqrt(_2843);
                        float _2847 = _2846 * _2840;
                        float _2848 = _2846 * _2841;
                        float _2849 = _2846 * _2842;
                        float _2850 = dot(vec3(_437, _440, _443), vec3(_2847, _2848, _2849));
                        float _2855 = 1.0 - (_2843 * _2781.w);
                        float _4343 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2856 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _2857 = sqrt(_2843) * _2800.w;
                        float _2860 = 1.39999997615814208984375 / (_2857 + 1.39999997615814208984375);
                        float _2861 = _2860 * _2860;
                        float _2862 = 1.0 - _2861;
                        float _2864 = (_2862 * _2862) * _317;
                        float _2867 = ((_2862 * _2850) + _2861) + _2864;
                        float _2872 = _2857 * _2857;
                        float _2877 = ((isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))) * _2856) / (((_2864 * 2.0) + 1.0) * ((_2872 * 0.699999988079071044921875) + 1.0));
                        float _2881 = dot(vec3(_2847, _2848, _2849), vec3(_2837, _2838, _2839));
                        float _4359 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2888 = dot(vec3((-0.0) - _2837, (-0.0) - _2838, (-0.0) - _2839), vec3(_437, _440, _443)) + 1.0;
                        float _2890 = (isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0))) * 0.5;
                        float _2897 = ((_2890 * _2890) * _2830.x) * exp2((_2830.y * 32.0) * log2(isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))));
                        float _2899 = _317 / (_317 + 1.0);
                        float _2915 = (-0.0) - _2300;
                        float _2916 = (-0.0) - _2301;
                        float _2917 = (-0.0) - _2302;
                        float _2921 = inversesqrt(dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917)));
                        float _2922 = _2921 * _2915;
                        float _2923 = _2921 * _2916;
                        float _2924 = _2921 * _2917;
                        float _2932 = exp2(log2(1.0 / ((_2872 * 3.5) + 5.0)) * 0.25);
                        float _2933 = 1.0 - _513;
                        float _2940 = sqrt(1.0 - ((1.0 - (_2933 * _2933)) * (1.0 - (_2932 * _2932))));
                        float _2941 = _2940 * _2940;
                        float _2942 = _2941 * _2941;
                        float _2943 = _2922 + _2847;
                        float _2944 = _2923 + _2848;
                        float _2945 = _2924 + _2849;
                        float _2949 = inversesqrt(dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945)));
                        float _2953 = dot(vec3(_437, _440, _443), vec3(_2922, _2923, _2924));
                        float _4375 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2956 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
                        float _2957 = dot(vec3(_437, _440, _443), vec3(_2949 * _2943, _2949 * _2944, _2949 * _2945));
                        float _4386 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2960 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
                        float _2964 = ((_2960 * _2960) * (_2942 + (-1.0))) + 1.0;
                        float _2965 = _2860 * _2941;
                        float _2966 = _2965 * _2965;
                        float _2969 = ((1.0 - _2966) * _2850) + _2966;
                        float _4397 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                        float _2970 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
                        float _2971 = 1.0 - _2941;
                        float _2981 = (0.5 / (((_2970 * ((_2956 * _2971) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2970 * _2971) + _2941) * _2956))) * _2970;
                        float _4408 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2992 = (((_2942 * 3.1415927410125732421875) * (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0)))) / ((_2964 * _2964) * ((_2872 * 2.1991131305694580078125) + 3.141590118408203125))) * _2856;
                        _2673 = (((((_2801 * 0.3183098733425140380859375) * _2899) * _2897) + _2801) * _2877) + _2758;
                        _2674 = (((((_2802 * 0.3183098733425140380859375) * _2899) * _2897) + _2802) * _2877) + _2759;
                        _2675 = (((((_2803 * 0.3183098733425140380859375) * _2899) * _2897) + _2803) * _2877) + _2760;
                        _2670 = (_2992 * _2817.x) + _2755;
                        _2671 = (_2992 * _2817.y) + _2756;
                        _2672 = (_2992 * _2817.z) + _2757;
                        if (_2762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2755 = _2670;
                            _2756 = _2671;
                            _2757 = _2672;
                            _2758 = _2673;
                            _2759 = _2674;
                            _2760 = _2675;
                            _2761 = _2762;
                        }
                    }
                    frontier_phi_67_pred = _2670;
                    frontier_phi_67_pred_1 = _2675;
                    frontier_phi_67_pred_2 = _2674;
                    frontier_phi_67_pred_3 = _2673;
                    frontier_phi_67_pred_4 = _2672;
                    frontier_phi_67_pred_5 = _2671;
                }
                _2373 = frontier_phi_67_pred;
                _2383 = frontier_phi_67_pred_1;
                _2381 = frontier_phi_67_pred_2;
                _2379 = frontier_phi_67_pred_3;
                _2377 = frontier_phi_67_pred_4;
                _2375 = frontier_phi_67_pred_5;
                uint _2561 = _2560 + 1u;
                if (_2561 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2554 = _2373;
                    _2555 = _2375;
                    _2556 = _2377;
                    _2557 = _2379;
                    _2558 = _2381;
                    _2559 = _2383;
                    _2560 = _2561;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
        }
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.z;
        uint _2389 = (_2387 >> 8u) & 15u;
        float _2522;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        if (((4294967295u << _2389) & _2346) == 0u)
        {
            _2522 = _2372;
            _2524 = _2374;
            _2526 = _2376;
            _2528 = _2378;
            _2530 = _2380;
            _2532 = _2382;
        }
        else
        {
            float _2547 = inversesqrt(dot(vec3(_2300, _2301, _2302), vec3(_2300, _2301, _2302)));
            float _2548 = _2547 * _2300;
            float _2549 = _2547 * _2301;
            float _2550 = _2547 * _2302;
            float frontier_phi_61_62_ladder;
            float frontier_phi_61_62_ladder_1;
            float frontier_phi_61_62_ladder_2;
            float frontier_phi_61_62_ladder_3;
            float frontier_phi_61_62_ladder_4;
            float frontier_phi_61_62_ladder_5;
            if (_2389 < ((_2387 >> 12u) & 15u))
            {
                float _2523;
                float _2525;
                float _2527;
                float _2529;
                float _2531;
                float _2533;
                float _2738 = _2372;
                float _2739 = _2374;
                float _2740 = _2376;
                float _2741 = _2378;
                float _2742 = _2380;
                float _2743 = _2382;
                uint _2744 = _2389;
                uint _2753;
                bool _2754;
                for (;;)
                {
                    _2753 = texelFetch(g_lightClassification, int((((_2340 << 5u) + (_2326 << 9u)) + (_2744 << 2u)) >> 2u)).x;
                    _2754 = _2753 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2754)
                    {
                        frontier_phi_79_pred = _2743;
                        frontier_phi_79_pred_1 = _2742;
                        frontier_phi_79_pred_2 = _2741;
                        frontier_phi_79_pred_3 = _2740;
                        frontier_phi_79_pred_4 = _2739;
                        frontier_phi_79_pred_5 = _2738;
                    }
                    else
                    {
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3393;
                        float _3394;
                        float _3395;
                        float _3396;
                        float _3397;
                        float _3398;
                        float _3062 = _2738;
                        float _3063 = _2739;
                        float _3064 = _2740;
                        float _3065 = _2741;
                        float _3066 = _2742;
                        float _3067 = _2743;
                        uint _3068 = _2753;
                        uint _3069;
                        vec4 _3094;
                        float _3095;
                        vec4 _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        vec3 _3125;
                        vec2 _3134;
                        vec4 _3150;
                        vec4 _3166;
                        float _3213;
                        bool _3214;
                        for (;;)
                        {
                            uint _3079 = ((_2744 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3068));
                            _3069 = (_3068 + 4294967295u) & _3068;
                            uint _3081 = _3079 * 40u;
                            _3094 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3081)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3081 + 3u)).x));
                            _3095 = _3094.w;
                            uint _3097 = (_3079 * 40u) + 4u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            _3111 = _3110.x;
                            _3112 = _3110.y;
                            _3113 = _3110.z;
                            uint _3115 = (_3079 * 40u) + 8u;
                            _3125 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x));
                            uint _3127 = (_3079 * 40u) + 12u;
                            _3134 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3127 + 1u)).x));
                            uint _3137 = (_3079 * 40u) + 16u;
                            _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            uint _3153 = (_3079 * 40u) + 20u;
                            _3166 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3153)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3153 + 3u)).x));
                            uint _3169 = (_3079 * 40u) + 24u;
                            vec4 _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3188 = (_3079 * 40u) + 28u;
                            vec4 _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            _3213 = fma(_2302, _3201.z, fma(_2301, _3201.y, _3201.x * _2300)) + _3201.w;
                            _3214 = !((fma(_2302, _3182.z, fma(_2301, _3182.y, _3182.x * _2300)) + _3182.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3214)
                            {
                                float _3240 = _3094.x - _2300;
                                float _3241 = _3094.y - _2301;
                                float _3242 = _3094.z - _2302;
                                float _3243 = dot(vec3(_3240, _3241, _3242), vec3(_3240, _3241, _3242));
                                float _3246 = inversesqrt(_3243);
                                float _3247 = _3246 * _3240;
                                float _3248 = _3246 * _3241;
                                float _3249 = _3246 * _3242;
                                float _3253 = 1.0 - (_3243 / (_3095 * _3095));
                                float _4419 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
                                float _3258 = sqrt(_3243) * _3110.w;
                                float _3260 = 1.39999997615814208984375 / (_3258 + 1.39999997615814208984375);
                                float _3261 = _3260 * _3260;
                                float _3262 = 1.0 - _3261;
                                float _3264 = (_3262 * _3262) * _317;
                                float _3267 = ((_3262 * dot(vec3(_3247, _3248, _3249), vec3(_437, _440, _443))) + _3261) + _3264;
                                float _3272 = _3258 * _3258;
                                float _3277 = (fma(_2302, _3150.z, fma(_2301, _3150.y, _3150.x * _2300)) + _3150.w) / _3213;
                                float _3278 = (fma(_2302, _3166.z, fma(_2301, _3166.y, _3166.x * _2300)) + _3166.w) / _3213;
                                float _3282 = 1.0 - dot(vec2(_3277, _3278), vec2(_3277, _3278));
                                float _4435 = isnan(0.0) ? _3282 : (isnan(_3282) ? 0.0 : max(_3282, 0.0));
                                float _3283 = isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0));
                                float _3284 = _3283 * (((isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0))) * _3254) / (((_3264 * 2.0) + 1.0) * ((_3272 * 0.699999988079071044921875) + 1.0)));
                                float _3285 = (-0.0) - _2548;
                                float _3286 = (-0.0) - _2549;
                                float _3287 = (-0.0) - _2550;
                                float _3288 = dot(vec3(_3247, _3248, _3249), vec3(_2548, _2549, _2550));
                                float _4446 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3295 = dot(vec3(_3285, _3286, _3287), vec3(_437, _440, _443)) + 1.0;
                                float _3297 = (isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0))) * 0.5;
                                float _3304 = ((_3297 * _3297) * _3134.x) * exp2((_3134.y * 32.0) * log2(isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))));
                                float _3306 = _317 / (_317 + 1.0);
                                float _3327 = exp2(log2(1.0 / ((_3272 * 3.5) + 5.0)) * 0.25);
                                float _3328 = 1.0 - _513;
                                float _3335 = sqrt(1.0 - ((1.0 - (_3328 * _3328)) * (1.0 - (_3327 * _3327))));
                                float _3336 = _3335 * _3335;
                                float _3337 = _3336 * _3336;
                                float _3338 = _3247 - _2548;
                                float _3339 = _3248 - _2549;
                                float _3340 = _3249 - _2550;
                                float _3344 = inversesqrt(dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340)));
                                float _3348 = dot(vec3(_437, _440, _443), vec3(_3285, _3286, _3287));
                                float _4462 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0));
                                float _3352 = dot(vec3(_437, _440, _443), vec3(_3344 * _3338, _3344 * _3339, _3344 * _3340));
                                float _4473 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4473 : (isnan(_4473) ? 1.0 : min(_4473, 1.0));
                                float _3359 = ((_3355 * _3355) * (_3337 + (-1.0))) + 1.0;
                                float _3360 = _3260 * _3336;
                                float _3361 = _3360 * _3360;
                                float _3367 = ((1.0 - _3361) * dot(vec3(_437, _440, _443), vec3(_3247, _3248, _3249))) + _3361;
                                float _4484 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                                float _3368 = isnan(1.0) ? _4484 : (isnan(_4484) ? 1.0 : min(_4484, 1.0));
                                float _3369 = 1.0 - _3336;
                                float _3379 = (0.5 / (((_3368 * ((_3351 * _3369) + _3336)) + 9.9999999392252902907785028219223e-09) + (((_3368 * _3369) + _3336) * _3351))) * _3368;
                                float _4495 = isnan(0.0) ? _3379 : (isnan(_3379) ? 0.0 : max(_3379, 0.0));
                                float _3389 = (_3283 * _3254) * (((_3337 * 3.1415927410125732421875) * (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0)))) / ((_3359 * _3359) * ((_3272 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = ((((_3113 * 0.3183098733425140380859375) * _3306) * _3304) + _3113) * _3284;
                                frontier_phi_88_pred_1 = ((((_3111 * 0.3183098733425140380859375) * _3306) * _3304) + _3111) * _3284;
                                frontier_phi_88_pred_2 = _3389 * _3125.z;
                                frontier_phi_88_pred_3 = _3389 * _3125.y;
                                frontier_phi_88_pred_4 = _3389 * _3125.x;
                                frontier_phi_88_pred_5 = ((((_3112 * 0.3183098733425140380859375) * _3306) * _3304) + _3112) * _3284;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3398 = frontier_phi_88_pred;
                            _3396 = frontier_phi_88_pred_1;
                            _3395 = frontier_phi_88_pred_2;
                            _3394 = frontier_phi_88_pred_3;
                            _3393 = frontier_phi_88_pred_4;
                            _3397 = frontier_phi_88_pred_5;
                            _3043 = _3396 + _3065;
                            _3044 = _3397 + _3066;
                            _3045 = _3398 + _3067;
                            _3040 = _3393 + _3062;
                            _3041 = _3394 + _3063;
                            _3042 = _3395 + _3064;
                            if (_3069 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3062 = _3040;
                                _3063 = _3041;
                                _3064 = _3042;
                                _3065 = _3043;
                                _3066 = _3044;
                                _3067 = _3045;
                                _3068 = _3069;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3045;
                        frontier_phi_79_pred_1 = _3044;
                        frontier_phi_79_pred_2 = _3043;
                        frontier_phi_79_pred_3 = _3042;
                        frontier_phi_79_pred_4 = _3041;
                        frontier_phi_79_pred_5 = _3040;
                    }
                    _2533 = frontier_phi_79_pred;
                    _2531 = frontier_phi_79_pred_1;
                    _2529 = frontier_phi_79_pred_2;
                    _2527 = frontier_phi_79_pred_3;
                    _2525 = frontier_phi_79_pred_4;
                    _2523 = frontier_phi_79_pred_5;
                    uint _2745 = _2744 + 1u;
                    if (_2745 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2738 = _2523;
                        _2739 = _2525;
                        _2740 = _2527;
                        _2741 = _2529;
                        _2742 = _2531;
                        _2743 = _2533;
                        _2744 = _2745;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_61_62_ladder = _2523;
                frontier_phi_61_62_ladder_1 = _2533;
                frontier_phi_61_62_ladder_2 = _2531;
                frontier_phi_61_62_ladder_3 = _2529;
                frontier_phi_61_62_ladder_4 = _2527;
                frontier_phi_61_62_ladder_5 = _2525;
            }
            else
            {
                frontier_phi_61_62_ladder = _2372;
                frontier_phi_61_62_ladder_1 = _2382;
                frontier_phi_61_62_ladder_2 = _2380;
                frontier_phi_61_62_ladder_3 = _2378;
                frontier_phi_61_62_ladder_4 = _2376;
                frontier_phi_61_62_ladder_5 = _2374;
            }
            _2522 = frontier_phi_61_62_ladder;
            _2524 = frontier_phi_61_62_ladder_5;
            _2526 = frontier_phi_61_62_ladder_4;
            _2528 = frontier_phi_61_62_ladder_3;
            _2530 = frontier_phi_61_62_ladder_2;
            _2532 = frontier_phi_61_62_ladder_1;
        }
        float _2537 = isnan(1.0) ? _497 : (isnan(_497) ? 1.0 : min(_497, 1.0));
        _2359 = (_2537 * _2528) + _1815;
        _2361 = (_2537 * _2530) + _1817;
        _2363 = (_2537 * _2532) + _1819;
        _2365 = ((_2522 * _482) * _2537) + _2166;
        _2367 = ((_2524 * _484) * _2537) + _2168;
        _2369 = ((_2526 * _485) * _2537) + _2170;
    }
    else
    {
        _2359 = _1815;
        _2361 = _1817;
        _2363 = _1819;
        _2365 = _2166;
        _2367 = _2168;
        _2369 = _2170;
    }
    float _2461;
    float _2462;
    float _2463;
    if (_317 > 0.0)
    {
        uint _2393 = _1594 + 4u;
        float _2399 = (-0.0) - _395;
        float _2401 = (-0.0) - _396;
        float _2402 = (-0.0) - _397;
        float _2403 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_2399, _2401, _2402));
        float _4511 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _508 + 1.0;
        float _2409 = (isnan(0.0) ? _2407 : (isnan(_2407) ? 0.0 : max(_2407, 0.0))) * 0.5;
        float _2414 = _2409 * _2409;
        float _2415 = _2414 * exp2(log2(isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 32.0);
        float _2417 = _317 / (_317 + 1.0);
        float _2418 = isnan(_1607) ? 1.0 : (isnan(1.0) ? _1607 : min(1.0, _1607));
        uint _2431 = _1594 + 5u;
        float _2437 = dot(vec3(cbLight._m0[_1915].xyz), vec3(_2399, _2401, _2402));
        float _4532 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
        float _2444 = _2414 * exp2(log2(isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 32.0);
        float _2445 = isnan(_1608) ? 1.0 : (isnan(1.0) ? _1608 : min(1.0, _1608));
        _2461 = ((((_2444 * cbLight._m0[_2431].x) * _2417) * _2445) + ((((cbLight._m0[_2393].x * _1586) * _2415) * _2417) * _2418)) * 0.3183098733425140380859375;
        _2462 = ((((_2444 * cbLight._m0[_2431].y) * _2417) * _2445) + ((((cbLight._m0[_2393].y * _1587) * _2415) * _2417) * _2418)) * 0.3183098733425140380859375;
        _2463 = ((((_2444 * cbLight._m0[_2431].z) * _2417) * _2445) + ((((cbLight._m0[_2393].z * _1588) * _2415) * _2417) * _2418)) * 0.3183098733425140380859375;
    }
    else
    {
        _2461 = 0.0;
        _2462 = 0.0;
        _2463 = 0.0;
    }
    float _4548 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _4559 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _4570 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2482 = ((isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * ((_2359 + ((isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0))) * _497)) + _2461)) + ((_2365 + ((isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    float _2483 = ((isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0))) * ((_2361 + ((isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))) * _497)) + _2462)) + ((_2367 + ((isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    float _2484 = ((isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * ((_2363 + ((isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0))) * _497)) + _2463)) + ((_2369 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1339)) * cbPerFrame._m0[3u].x);
    uint _2485 = _456 + 6u;
    float _2493 = _416 / cbSceneParam._m0[86u].x;
    float _2494 = _417 / cbSceneParam._m0[86u].y;
    vec4 _2508 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, (log2((isnan(cbSceneParam._m0[77u].w) ? _337 : (isnan(_337) ? cbSceneParam._m0[77u].w : min(_337, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2510 = _2508.x;
    float _2511 = _2508.y;
    float _2512 = _2508.z;
    float _2513 = _2508.w;
    float _2612;
    float _2614;
    float _2616;
    float _2618;
    if (_337 > cbSceneParam._m0[78u].w)
    {
        float _2575 = isnan(_337) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _337 : min(cbSceneParam._m0[80u].w, _337));
        float _2576 = _2575 / _337;
        float _2587 = _2576 * _388;
        float _2588 = _389 * _2576;
        float _2589 = (-0.0) - _2588;
        float _2590 = _2576 * _390;
        float _2592 = (cbSceneParam._m0[77u].w * _2589) / _2575;
        float _2593 = _2592 + cbSceneParam._m0[79u].w;
        float _2594 = cbSceneParam._m0[79u].w - _2588;
        float _2600 = sqrt(((_2587 * _2587) + (_2588 * _2588)) + (_2590 * _2590));
        float _2603 = (1.0 - (cbSceneParam._m0[77u].w / _2575)) * _2600;
        float _2608 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2610 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2997;
        if (abs((_2589 - _2592) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2997 = ((((_2593 > 0.0) ? exp2(_2608 * _2593) : (2.0 - exp2(_2610 * _2593))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2603;
        }
        else
        {
            float _2695 = 1.0 / cbSceneParam._m0[80u].x;
            float _2696 = isnan(_2594) ? _2593 : (isnan(_2593) ? _2594 : max(_2593, _2594));
            float _2697 = isnan(_2594) ? _2593 : (isnan(_2593) ? _2594 : min(_2593, _2594));
            float _2706 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : min(_2696, 0.0));
            float _2707 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : min(_2697, 0.0));
            _2997 = ((abs(_2600 / _2589) * cbSceneParam._m0[80u].y) * ((((_2706 - _2707) * 2.0) - ((exp2(_2608 * (isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0)))) - exp2(_2608 * (isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0))))) * _2695)) - ((exp2(_2610 * _2706) - exp2(_2610 * _2707)) * _2695))) + (_2603 * cbSceneParam._m0[80u].z);
        }
        vec4 _2999 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2493, _2494, 1.0), 0.0);
        float _3008 = exp2((_2997 * (-1.44269502162933349609375)) * (1.0 - _2999.w));
        float _3009 = log2(_3008);
        float _3025 = log2(_2513);
        _2612 = (exp2(_3025 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].x)) * _2999.x) / cbSceneParam._m0[78u].x)) + _2510;
        _2614 = (exp2(_3025 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].y)) * _2999.y) / cbSceneParam._m0[78u].y)) + _2511;
        _2616 = (exp2(_3025 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3009 * cbSceneParam._m0[78u].z)) * _2999.z) / cbSceneParam._m0[78u].z)) + _2512;
        _2618 = _3008 * _2513;
    }
    else
    {
        _2612 = _2510;
        _2614 = _2511;
        _2616 = _2512;
        _2618 = _2513;
    }
    bool _3035;
    vec4 _2628;
    vec4 _2650;
    float _2652;
    float _2656;
    float _2657;
    float _2658;
    float _2659;
    bool _2669;
    for (;;)
    {
        _2628 = cbMatDynParam._m0[0u];
        float _2630 = roundEven(_2628.y);
        bool _2631 = _2630 == 3.0;
        float _2632 = log2(_2618);
        float _2639 = exp2(_2632 * cbSceneParam._m0[78u].x) * _2482;
        float _2640 = exp2(_2632 * cbSceneParam._m0[78u].y) * _2483;
        float _2641 = exp2(_2632 * cbSceneParam._m0[78u].z) * _2484;
        float _2648 = _404 + (-0.5);
        _2650 = cbMtdParam._m0[1u];
        _2652 = _2650.y * _2648;
        float _2655 = (_2630 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2656 = _2655 * (_2631 ? _2639 : (_2639 + (cbSceneParam._m0[72u].w * _2612)));
        _2657 = _2655 * (_2631 ? _2640 : (_2640 + (cbSceneParam._m0[72u].w * _2614)));
        _2658 = _2655 * (_2631 ? _2641 : (_2641 + (cbSceneParam._m0[72u].w * _2616)));
        _2659 = _2648 * 0.999000012874603271484375;
        _2669 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2669)
        {
            if ((cbInstanceData._m0[_456 + 7u].x + _2659) < 0.5)
            {
                _3035 = true;
                break;
            }
        }
        uint _2730 = _458 + uint(_2628.w);
        if ((cbInstanceData._m0[_2730].w < 1.0) && ((cbInstanceData._m0[_2730].w + _2659) < 0.5))
        {
            _3035 = true;
            break;
        }
        if ((_2652 + _234) < _2650.x)
        {
            _3035 = true;
            break;
        }
        _3035 = false;
        break;
    }
    float _3053;
    if (_3035)
    {
        discard_state = true;
        _3053 = 0.0;
    }
    else
    {
        _3053 = cbInstanceData._m0[_2485].w;
    }
    SV_Target.x = _2656;
    SV_Target.y = _2657;
    SV_Target.z = _2658;
    SV_Target.w = _3053;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2485].w;
    discard_exit();
}


