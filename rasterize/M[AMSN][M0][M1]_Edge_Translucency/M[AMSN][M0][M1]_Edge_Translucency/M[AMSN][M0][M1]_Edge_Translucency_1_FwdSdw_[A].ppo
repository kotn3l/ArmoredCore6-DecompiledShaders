#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _868;
float _3750;
float _3751;
float _3752;
float _3753;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.w;
    float _235 = _228.x * cbMtdParam._m0[9u].x;
    float _236 = _228.y * cbMtdParam._m0[9u].y;
    float _237 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _249 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _253 = _249.z;
    float _257 = (_249.x * 2.0) + (-1.0);
    float _259 = (_249.y * 2.0) + (-1.0);
    float _260 = dot(vec2(_257, _259), vec2(_257, _259));
    float _3762 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _266 = sqrt(1.0 - (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0))));
    vec4 _278 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _285 = cbMtdParam._m0[10u].x * _278.x;
    float _288 = fma(_266, _198 * NORMAL.x, fma(_259, _205 * TANGENT.x, (_191 * _184) * _257));
    float _291 = fma(_266, _198 * NORMAL.y, fma(_259, _205 * TANGENT.y, (_191 * _185) * _257));
    float _294 = fma(_266, _198 * NORMAL.z, fma(_259, _205 * TANGENT.z, (_191 * _186) * _257));
    float _298 = inversesqrt(dot(vec3(_288, _291, _294), vec3(_288, _291, _294)));
    float _299 = _298 * _288;
    float _300 = _298 * _291;
    float _301 = _298 * _294;
    float _3773 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _302 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _303 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _3789 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3800 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3811 = isnan(0.0) ? _237 : (isnan(_237) ? 0.0 : max(_237, 0.0));
    float _322 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _363 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _373 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _363);
    float _374 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _363);
    float _375 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _363);
    float _379 = inversesqrt(dot(vec3(_373, _374, _375), vec3(_373, _374, _375)));
    float _380 = _373 * _379;
    float _381 = _374 * _379;
    float _382 = _375 * _379;
    vec4 _387 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _389 = _387.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _547 = sqrt(((_373 * _373) + (_374 * _374)) + (_375 * _375));
        float _553 = (cbMatDynParam._m0[5u].x * _547) + cbMatDynParam._m0[5u].y;
        float _3822 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _554 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
        float _558 = (cbMatDynParam._m0[5u].z * _547) + cbMatDynParam._m0[5u].w;
        float _3833 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0))) - _554)) + _554) < ((_389 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _401 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _402 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _422 = fma(_301, cbSceneParam._m0[5u].z, fma(_300, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _299));
    float _425 = fma(_301, cbSceneParam._m0[6u].z, fma(_300, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _299));
    float _428 = fma(_301, cbSceneParam._m0[7u].z, fma(_300, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _299));
    uint _441 = uint(roundEven(NORMAL.w)) * 13u;
    uint _443 = _441 + 9u;
    uint _444 = _443 + uint(cbMatDynParam._m0[0u].w);
    float _450 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * cbInstanceData._m0[_444].x;
    float _451 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * cbInstanceData._m0[_444].y;
    float _452 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) * cbInstanceData._m0[_444].z;
    float _3844 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _453 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _454 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _3866 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _455 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    vec4 _464 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _401, cbSceneParam._m0[86u].y * _402));
    float _467 = _464.x * TEXCOORD.z;
    float _468 = dot(vec3(_299, _300, _301), vec3(_380, _381, _382));
    float _471 = _468 * 2.0;
    float _475 = (_471 * _299) - _380;
    float _476 = (_471 * _300) - _381;
    float _477 = (_471 * _301) - _382;
    float _478 = dot(vec3(_380, _381, _382), vec3(_299, _300, _301));
    float _481 = abs(_478);
    float _3877 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _483 = sqrt(_302);
    float _496 = exp2((_483 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_483 * 3.0));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _867;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _592 = fma(_536, cbModelParam._m0[26u].z, fma(_532, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528));
        float _596 = fma(_536, cbModelParam._m0[27u].z, fma(_532, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528));
        float _600 = fma(_536, cbModelParam._m0[28u].z, fma(_532, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528));
        float _625 = _528 + _299;
        float _626 = _532 + _300;
        float _627 = _536 + _301;
        float _637 = fma(_627, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _625)) - _592;
        float _638 = fma(_627, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _625)) - _596;
        float _639 = fma(_627, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _625)) - _600;
        float _643 = inversesqrt(dot(vec3(_637, _638, _639), vec3(_637, _638, _639)));
        float _656 = ((_643 * _637) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_592 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _657 = ((_643 * _638) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_596 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _658 = ((_643 * _639) / cbModelParam._m0[34u].z) + ((((((_600 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_656, _657, _658), 0.0);
        float _695 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _696 = _695 * (_661.x + (-0.5));
        float _697 = _695 * (_661.y + (-0.5));
        float _698 = _695 * (_661.z + (-0.5));
        float _705 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _706 = _705 * (_668.x + (-0.5));
        float _707 = _705 * (_668.y + (-0.5));
        float _708 = _705 * (_668.z + (-0.5));
        float _715 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _716 = _715 * (_675.x + (-0.5));
        float _717 = _715 * (_675.y + (-0.5));
        float _718 = _715 * (_675.z + (-0.5));
        float _725 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _726 = _725 * (_682.x + (-0.5));
        float _727 = _725 * (_682.y + (-0.5));
        float _728 = _725 * (_682.z + (-0.5));
        float _729 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _730 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _731 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _732 = _696 * 0.5;
        float _733 = _706 * 0.5;
        float _734 = _716 * 0.5;
        float _735 = dot(vec3(_732, _733, _734), vec3(_732, _733, _734));
        float _740 = (_735 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_735);
        float _749 = (dot(vec3(_299, _300, _301), vec3(_740 * _732, _740 * _733, _740 * _734)) + 1.0) * 0.5;
        float _3903 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _759 = sqrt(((_733 * _733) + (_732 * _732)) + (_734 * _734)) / (_729 + 9.9999997473787516355514526367188e-06);
        float _3914 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
        float _760 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
        float _761 = _760 * 2.0;
        float _765 = (1.0 - _760) / (_760 + 1.0);
        float _3925 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _766 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
        float _775 = ((((1.0 - _766) * (_761 + 2.0)) * exp2(log2(isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * (_761 + 1.0))) + _766) * _729;
        float _776 = _697 * 0.5;
        float _777 = _707 * 0.5;
        float _778 = _717 * 0.5;
        float _779 = dot(vec3(_776, _777, _778), vec3(_776, _777, _778));
        float _784 = (_779 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_779);
        float _792 = (dot(vec3(_299, _300, _301), vec3(_784 * _776, _784 * _777, _784 * _778)) + 1.0) * 0.5;
        float _3936 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _801 = sqrt(((_777 * _777) + (_776 * _776)) + (_778 * _778)) / (_730 + 9.9999997473787516355514526367188e-06);
        float _3947 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _802 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _803 = _802 * 2.0;
        float _807 = (1.0 - _802) / (_802 + 1.0);
        float _3958 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _817 = ((((1.0 - _808) * (_803 + 2.0)) * exp2(log2(isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0))) * (_803 + 1.0))) + _808) * _730;
        float _818 = _698 * 0.5;
        float _819 = _708 * 0.5;
        float _820 = _718 * 0.5;
        float _821 = dot(vec3(_818, _819, _820), vec3(_818, _819, _820));
        float _826 = (_821 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_821);
        float _834 = (dot(vec3(_299, _300, _301), vec3(_826 * _818, _826 * _819, _826 * _820)) + 1.0) * 0.5;
        float _3969 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _843 = sqrt(((_819 * _819) + (_818 * _818)) + (_820 * _820)) / (_731 + 9.9999997473787516355514526367188e-06);
        float _3980 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _845 = _844 * 2.0;
        float _849 = (1.0 - _844) / (_844 + 1.0);
        float _3991 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _859 = ((((1.0 - _850) * (_845 + 2.0)) * exp2(log2(isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (_845 + 1.0))) + _850) * _731;
        _867 = _698;
        _869 = _697;
        _870 = _696;
        _871 = _708;
        _872 = _707;
        _873 = _706;
        _874 = _718;
        _875 = _717;
        _876 = _716;
        _877 = _731;
        _878 = _730;
        _879 = _729;
        _880 = cbModelParam._m0[36u].z * (isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0)));
        _881 = cbModelParam._m0[36u].z * (isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0)));
        _882 = cbModelParam._m0[36u].z * (isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0)));
    }
    else
    {
        _867 = _868;
        _869 = _868;
        _870 = _868;
        _871 = _868;
        _872 = _868;
        _873 = _868;
        _874 = _868;
        _875 = _868;
        _876 = _868;
        _877 = _868;
        _878 = _868;
        _879 = _868;
        _880 = 0.0;
        _881 = 0.0;
        _882 = 0.0;
    }
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _911 = fma(_536, cbModelParam._m0[30u].z, fma(_532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _528));
        float _915 = fma(_536, cbModelParam._m0[31u].z, fma(_532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _528));
        float _919 = fma(_536, cbModelParam._m0[32u].z, fma(_532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _528));
        float _942 = _528 + _299;
        float _943 = _532 + _300;
        float _944 = _536 + _301;
        float _954 = fma(_944, cbModelParam._m0[30u].z, fma(_943, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _942)) - _911;
        float _955 = fma(_944, cbModelParam._m0[31u].z, fma(_943, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _942)) - _915;
        float _956 = fma(_944, cbModelParam._m0[32u].z, fma(_943, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _942)) - _919;
        float _960 = inversesqrt(dot(vec3(_954, _955, _956), vec3(_954, _955, _956)));
        float _973 = ((_960 * _954) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_911 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _974 = ((_960 * _955) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_915 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _975 = ((_960 * _956) / cbModelParam._m0[35u].z) + ((((((_919 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _977 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_973, _974, _975), 0.0);
        float _1010 = exp2((_977.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_977.x + (-0.5));
        float _1012 = _1010 * (_977.y + (-0.5));
        float _1013 = _1010 * (_977.z + (-0.5));
        float _1020 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_984.x + (-0.5));
        float _1022 = _1020 * (_984.y + (-0.5));
        float _1023 = _1020 * (_984.z + (-0.5));
        float _1030 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_991.x + (-0.5));
        float _1032 = _1030 * (_991.y + (-0.5));
        float _1033 = _1030 * (_991.z + (-0.5));
        float _1040 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1041 = _1040 * (_998.x + (-0.5));
        float _1042 = _1040 * (_998.y + (-0.5));
        float _1043 = _1040 * (_998.z + (-0.5));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1047 = _1011 * 0.5;
        float _1048 = _1021 * 0.5;
        float _1049 = _1031 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_299, _300, _301), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _4032 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _4043 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _4054 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * (_1074 + 1.0))) + _1079) * _1044;
        float _1089 = _1012 * 0.5;
        float _1090 = _1022 * 0.5;
        float _1091 = _1032 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_299, _300, _301), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _4065 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _4076 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _4087 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1116 + 1.0))) + _1121) * _1045;
        float _1131 = _1013 * 0.5;
        float _1132 = _1023 * 0.5;
        float _1133 = _1033 * 0.5;
        float _1134 = dot(vec3(_1131, _1132, _1133), vec3(_1131, _1132, _1133));
        float _1139 = (_1134 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1134);
        float _1147 = (dot(vec3(_299, _300, _301), vec3(_1139 * _1131, _1139 * _1132, _1139 * _1133)) + 1.0) * 0.5;
        float _4098 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1156 = sqrt(((_1132 * _1132) + (_1131 * _1131)) + (_1133 * _1133)) / (_1046 + 9.9999997473787516355514526367188e-06);
        float _4109 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
        float _1158 = _1157 * 2.0;
        float _1162 = (1.0 - _1157) / (_1157 + 1.0);
        float _4120 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
        float _1172 = ((((1.0 - _1163) * (_1158 + 2.0)) * exp2(log2(isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_1158 + 1.0))) + _1163) * _1046;
        _1180 = _1013;
        _1181 = _1012;
        _1182 = _1011;
        _1183 = _1023;
        _1184 = _1022;
        _1185 = _1021;
        _1186 = _1033;
        _1187 = _1032;
        _1188 = _1031;
        _1189 = _1046;
        _1190 = _1045;
        _1191 = _1044;
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
        _1194 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0)));
    }
    else
    {
        _1180 = _868;
        _1181 = _868;
        _1182 = _868;
        _1183 = _868;
        _1184 = _868;
        _1185 = _868;
        _1186 = _868;
        _1187 = _868;
        _1188 = _868;
        _1189 = _868;
        _1190 = _868;
        _1191 = _868;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _880)) + _880;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _881)) + _881;
    float _1206 = (cbModelParam._m0[1u].x * (_1194 - _882)) + _882;
    float _1227 = fma(_1206, cbSceneParam._m0[89u].z, fma(_1205, cbSceneParam._m0[89u].y, _1204 * cbSceneParam._m0[89u].x));
    float _1230 = fma(_1206, cbSceneParam._m0[90u].z, fma(_1205, cbSceneParam._m0[90u].y, _1204 * cbSceneParam._m0[90u].x));
    float _1233 = fma(_1206, cbSceneParam._m0[91u].z, fma(_1205, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1204));
    float _1248 = _475 * 0.5;
    float _1249 = _476 * 0.5;
    float _1250 = _477 * 0.5;
    float _1251 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1182, _1185, _1188, _1191));
    float _1254 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1257 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1291;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1264 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_867, _871, _874, _877));
        float _1268 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_869, _872, _875, _878));
        float _1272 = dot(vec4(_1248, _1249, _1250, 1.0), vec4(_870, _873, _876, _879));
        float _1279 = dot(vec4(cbModelParam._m0[39u]), vec4(_1248, _1249, _1250, 1.0));
        _1291 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1279) ? 0.0 : (isnan(0.0) ? _1279 : max(0.0, _1279))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1291 = 1.0;
    }
    float _1302;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1293 = dot(vec4(cbModelParam._m0[40u]), vec4(_1248, _1249, _1250, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1293) ? 0.0 : (isnan(0.0) ? _1293 : max(0.0, _1293))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1306 = (_1302 * cbModelParam._m0[1u].x) + (_1291 * (1.0 - cbModelParam._m0[1u].x));
    float _1316 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _302);
    float _1317 = isnan(_1316) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1316 : min(cbModelParam._m0[25u].z, _1316));
    float _1399;
    float _1401;
    float _1403;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1366 = fma(_536, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528)) + cbModelParam._m0[13u].w;
        float _1370 = fma(_536, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528)) + cbModelParam._m0[14u].w;
        float _1374 = fma(_536, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528)) + cbModelParam._m0[15u].w;
        float _1377 = fma(_477, cbModelParam._m0[13u].z, fma(_476, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _475));
        float _1380 = fma(_477, cbModelParam._m0[14u].z, fma(_476, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _475));
        float _1383 = fma(_477, cbModelParam._m0[15u].z, fma(_476, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _475));
        float _1411;
        if (_1377 > 0.0)
        {
            _1411 = abs((1.0 - _1366) / _1377);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1366 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1411 = frontier_phi_17_15_ladder;
        }
        float _1585;
        if (_1380 > 0.0)
        {
            _1585 = abs((1.0 - _1370) / _1380);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1370 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1585 = frontier_phi_26_22_ladder;
        }
        float _1856;
        if (_1383 > 0.0)
        {
            _1856 = abs((1.0 - _1374) / _1383);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1383 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1374 + 1.0) / _1383);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1856 = frontier_phi_38_33_ladder;
        }
        float _1858 = isnan(_1585) ? _1411 : (isnan(_1411) ? _1585 : min(_1411, _1585));
        float _1859 = isnan(_1856) ? _1858 : (isnan(_1858) ? _1856 : min(_1858, _1856));
        float _1863 = (_1859 * _1377) + _1366;
        float _1864 = (_1859 * _1380) + _1370;
        float _1865 = (_1859 * _1383) + _1374;
        float _1866 = _1859 * 9.9999997473787516355514526367188e-05;
        float _1868 = (-1.0) - _1866;
        float _1870 = _1866 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1865 > _1870) || ((_1865 < _1868) || ((_1864 > _1870) || ((_1864 < _1868) || ((_1863 < _1868) || (_1863 > _1870))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2019 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1865, cbModelParam._m0[9u].z, fma(_1864, cbModelParam._m0[9u].y, _1863 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1865, cbModelParam._m0[10u].z, fma(_1864, cbModelParam._m0[10u].y, _1863 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1865, cbModelParam._m0[11u].z, fma(_1864, cbModelParam._m0[11u].y, _1863 * cbModelParam._m0[11u].x))), _1317);
            frontier_phi_16_38_ladder = _2019.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2019.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2019.x * cbModelParam._m0[1u].y;
        }
        _1399 = frontier_phi_16_38_ladder_2;
        _1401 = frontier_phi_16_38_ladder_1;
        _1403 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1387 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_475, _476, _477), _1317);
        _1399 = _1387.x * cbModelParam._m0[1u].y;
        _1401 = _1387.y * cbModelParam._m0[1u].y;
        _1403 = _1387.z * cbModelParam._m0[1u].y;
    }
    float _1407 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _302);
    float _1408 = isnan(_1407) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1407 : min(cbModelParam._m0[25u].w, _1407));
    float _1501;
    float _1503;
    float _1505;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1465 = fma(_536, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528)) + cbModelParam._m0[21u].w;
        float _1469 = fma(_536, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528)) + cbModelParam._m0[22u].w;
        float _1473 = fma(_536, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528)) + cbModelParam._m0[23u].w;
        float _1476 = fma(_477, cbModelParam._m0[21u].z, fma(_476, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _475));
        float _1479 = fma(_477, cbModelParam._m0[22u].z, fma(_476, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _475));
        float _1482 = fma(_477, cbModelParam._m0[23u].z, fma(_476, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _475));
        float _1590;
        if (_1476 > 0.0)
        {
            _1590 = abs((1.0 - _1465) / _1476);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1465 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1590 = frontier_phi_28_24_ladder;
        }
        float _1883;
        if (_1479 > 0.0)
        {
            _1883 = abs((1.0 - _1469) / _1479);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1469 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1883 = frontier_phi_40_35_ladder;
        }
        float _2037;
        if (_1482 > 0.0)
        {
            _2037 = abs((1.0 - _1473) / _1482);
        }
        else
        {
            float frontier_phi_49_47_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_49_47_ladder = abs((_1473 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_49_47_ladder = 5000.0;
            }
            _2037 = frontier_phi_49_47_ladder;
        }
        float _2039 = isnan(_1883) ? _1590 : (isnan(_1590) ? _1883 : min(_1590, _1883));
        float _2040 = isnan(_2037) ? _2039 : (isnan(_2039) ? _2037 : min(_2039, _2037));
        float _2044 = (_2040 * _1476) + _1465;
        float _2045 = (_2040 * _1479) + _1469;
        float _2046 = (_2040 * _1482) + _1473;
        float _2047 = _2040 * 9.9999997473787516355514526367188e-05;
        float _2048 = (-1.0) - _2047;
        float _2050 = _2047 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2046 > _2050) || ((_2046 < _2048) || ((_2045 > _2050) || ((_2045 < _2048) || ((_2044 < _2048) || (_2044 > _2050))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2116 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2046, cbModelParam._m0[17u].z, fma(_2045, cbModelParam._m0[17u].y, _2044 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2046, cbModelParam._m0[18u].z, fma(_2045, cbModelParam._m0[18u].y, _2044 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2046, cbModelParam._m0[19u].z, fma(_2045, cbModelParam._m0[19u].y, _2044 * cbModelParam._m0[19u].x))), _1408);
            frontier_phi_25_49_ladder = _2116.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2116.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2116.x * cbModelParam._m0[1u].z;
        }
        _1501 = frontier_phi_25_49_ladder_2;
        _1503 = frontier_phi_25_49_ladder_1;
        _1505 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1485 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_475, _476, _477), _1408);
        _1501 = _1485.x * cbModelParam._m0[1u].z;
        _1503 = _1485.y * cbModelParam._m0[1u].z;
        _1505 = _1485.z * cbModelParam._m0[1u].z;
    }
    float _1517 = ((((1.0 - _496) * ((_483 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_496 * _483)) * _467;
    float _1518 = _1517 * ((cbModelParam._m0[1u].w * (_1501 - _1399)) + _1399);
    float _1519 = _1517 * ((cbModelParam._m0[1u].w * (_1503 - _1401)) + _1401);
    float _1520 = _1517 * ((cbModelParam._m0[1u].w * (_1505 - _1403)) + _1403);
    float _1523 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1526 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1529 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, _1518 * cbSceneParam._m0[91u].x));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1577 = _1564 / _1576;
    float _1578 = _1568 / _1576;
    float _1579 = _1572 / _1576;
    float _1726;
    float _1727;
    float _1728;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1606 = ((uint(_1579 > cbSceneParam._m0[59u].y) + uint(_1579 > cbSceneParam._m0[59u].x)) + uint(_1579 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1607 = _1606 + 43u;
        uint _1615 = _1606 + 44u;
        uint _1623 = _1606 + 45u;
        uint _1631 = _1606 + 46u;
        float _1642 = fma(_1576, cbSceneParam._m0[_1607].w, fma(_1572, cbSceneParam._m0[_1607].z, fma(_1568, cbSceneParam._m0[_1607].y, _1564 * cbSceneParam._m0[_1607].x)));
        float _1646 = fma(_1576, cbSceneParam._m0[_1615].w, fma(_1572, cbSceneParam._m0[_1615].z, fma(_1568, cbSceneParam._m0[_1615].y, _1564 * cbSceneParam._m0[_1615].x)));
        float _1654 = fma(_1576, cbSceneParam._m0[_1631].w, fma(_1572, cbSceneParam._m0[_1631].z, fma(_1568, cbSceneParam._m0[_1631].y, _1564 * cbSceneParam._m0[_1631].x)));
        float _1659 = cbSceneParam._m0[33u].z * _1654;
        float _1661 = cbSceneParam._m0[33u].w * _1654;
        float _1664 = fma(_1576, cbSceneParam._m0[_1623].w, fma(_1572, cbSceneParam._m0[_1623].z, fma(_1568, cbSceneParam._m0[_1623].y, _1564 * cbSceneParam._m0[_1623].x))) / _1654;
        float _1712 = (cbSceneParam._m0[33u].x - sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579))) * cbSceneParam._m0[33u].y;
        float _4246 = isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0));
        float _1719 = (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1659 + _1642) / _1654, (_1661 + _1646) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1661 + _1642) / _1654, (_1646 - _1659) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 - _1659) / _1654, (_1646 - _1661) / _1654), _1664), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1642 - _1661) / _1654, (_1659 + _1646) / _1654), _1664), 0.0)).x), vec4(0.25)));
        _1726 = 1.0 - (_1719 * cbSceneParam._m0[34u].x);
        _1727 = 1.0 - (_1719 * cbSceneParam._m0[34u].y);
        _1728 = 1.0 - (_1719 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1726 = 1.0;
        _1727 = 1.0;
        _1728 = 1.0;
    }
    float _1792;
    float _1794;
    float _1796;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1780 = fma(_1576, cbSceneParam._m0[63u].w, fma(_1572, cbSceneParam._m0[63u].z, fma(_1568, cbSceneParam._m0[63u].y, _1564 * cbSceneParam._m0[63u].x)));
        float _1781 = fma(_1576, cbSceneParam._m0[60u].w, fma(_1572, cbSceneParam._m0[60u].z, fma(_1568, cbSceneParam._m0[60u].y, _1564 * cbSceneParam._m0[60u].x))) / _1780;
        float _1782 = fma(_1576, cbSceneParam._m0[61u].w, fma(_1572, cbSceneParam._m0[61u].z, fma(_1568, cbSceneParam._m0[61u].y, _1564 * cbSceneParam._m0[61u].x))) / _1780;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1781 >= cbSceneParam._m0[64u].x) && (_1782 >= cbSceneParam._m0[64u].y)) && (_1781 <= cbSceneParam._m0[64u].z)) && (_1782 <= cbSceneParam._m0[64u].w))
        {
            float _1896 = fma(_1576, cbSceneParam._m0[62u].w, fma(_1572, cbSceneParam._m0[62u].z, fma(_1568, cbSceneParam._m0[62u].y, _1564 * cbSceneParam._m0[62u].x))) / _1780;
            float _1900 = isnan(cbSceneParam._m0[41u].w) ? _1896 : (isnan(_1896) ? cbSceneParam._m0[41u].w : max(_1896, cbSceneParam._m0[41u].w));
            float _1943 = (cbSceneParam._m0[33u].x - sqrt(((_1578 * _1578) + (_1577 * _1577)) + (_1579 * _1579))) * cbSceneParam._m0[33u].y;
            float _4262 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
            float _1950 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1781, cbSceneParam._m0[33u].w + _1782), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1781, _1782 - cbSceneParam._m0[33u].z), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1781 - cbSceneParam._m0[33u].z, _1782 - cbSceneParam._m0[33u].w), _1900), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1781 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1782), _1900), 0.0)).x), vec4(0.25)));
            float _1954 = 1.0 - (_1950 * cbSceneParam._m0[34u].x);
            float _1955 = 1.0 - (_1950 * cbSceneParam._m0[34u].y);
            float _1956 = 1.0 - (_1950 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_1956) ? _1728 : (isnan(_1728) ? _1956 : min(_1728, _1956));
            frontier_phi_37_36_ladder_1 = isnan(_1955) ? _1727 : (isnan(_1727) ? _1955 : min(_1727, _1955));
            frontier_phi_37_36_ladder_2 = isnan(_1954) ? _1726 : (isnan(_1726) ? _1954 : min(_1726, _1954));
        }
        else
        {
            frontier_phi_37_36_ladder = _1728;
            frontier_phi_37_36_ladder_1 = _1727;
            frontier_phi_37_36_ladder_2 = _1726;
        }
        _1792 = frontier_phi_37_36_ladder_2;
        _1794 = frontier_phi_37_36_ladder_1;
        _1796 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1792 = _1726;
        _1794 = _1727;
        _1796 = _1728;
    }
    uvec4 _1801 = floatBitsToUint(cbInstanceData._m0[_441 + 5u]);
    uint _1803 = _1801.x * 14u;
    uint _1804 = _1803 + 13u;
    float _1811 = _467 + (-1.0);
    float _1816 = (cbLight._m0[_1804].x * _1811) + 1.0;
    float _1817 = (cbLight._m0[_1804].y * _1811) + 1.0;
    float _1818 = (cbLight._m0[_1804].z * _1811) + 1.0;
    float _1819 = (cbLight._m0[_1804].w * _1811) + 1.0;
    uint _1821 = _1803 + 4u;
    float _1833 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_299, _300, _301));
    float _1836 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    float _1837 = cbLight._m0[_1821].x * _1792;
    float _1838 = cbLight._m0[_1821].y * _1794;
    float _1839 = cbLight._m0[_1821].z * _1796;
    uint _1840 = _1803 + 5u;
    float _1852 = dot(vec3(cbLight._m0[_1803 | 1u].xyz), vec3(_299, _300, _301));
    float _1855 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    float _2028;
    float _2029;
    float _2030;
    if (_303 == 0.0)
    {
        float _4298 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _4309 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
        float _1965 = (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0))) * 0.3183098733425140380859375;
        float _1967 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * 0.3183098733425140380859375;
        _2028 = ((cbLight._m0[_1840].x * _1855) * _1967) + ((_1837 * _1836) * _1965);
        _2029 = ((_1855 * cbLight._m0[_1840].y) * _1967) + ((_1838 * _1836) * _1965);
        _2030 = ((_1855 * cbLight._m0[_1840].z) * _1967) + ((_1839 * _1836) * _1965);
    }
    else
    {
        float _1977 = _1833 + _303;
        float _1980 = (_303 * 2.0) + 1.0;
        float _1981 = (isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) / _1980;
        float _1988 = _1852 + _303;
        float _1990 = (isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0))) / _1980;
        _2028 = (((_1990 * cbLight._m0[_1840].x) * _1855) + ((_1837 * _1981) * _1836)) * 0.3183098733425140380859375;
        _2029 = (((_1990 * cbLight._m0[_1840].y) * _1855) + ((_1838 * _1981) * _1836)) * 0.3183098733425140380859375;
        _2030 = (((_1990 * cbLight._m0[_1840].z) * _1855) + ((_1839 * _1981) * _1836)) * 0.3183098733425140380859375;
    }
    uvec4 _2034 = floatBitsToUint(cbLight._m0[_1803 + 12u]);
    bool _2036 = _2034.x == 0u;
    float _2063;
    float _2065;
    float _2067;
    if (_2036)
    {
        _2063 = _2028;
        _2065 = _2029;
        _2067 = _2030;
    }
    else
    {
        uint _2071 = _1803 + 6u;
        float _2087 = (dot(vec3(cbLight._m0[_1803 + 2u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _2088 = _2087 * _2087;
        float _4330 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2089 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _2090 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2063 = (((cbLight._m0[_2071].x * 0.3183098733425140380859375) * _2089) * _2090) + _2028;
        _2065 = (((cbLight._m0[_2071].y * 0.3183098733425140380859375) * _2089) * _2090) + _2029;
        _2067 = (((cbLight._m0[_2071].z * 0.3183098733425140380859375) * _2089) * _2090) + _2030;
    }
    bool _2070 = _2034.y == 0u;
    float _2121;
    float _2123;
    float _2125;
    if (_2070)
    {
        _2121 = _2063;
        _2123 = _2065;
        _2125 = _2067;
    }
    else
    {
        uint _2296 = _1803 + 7u;
        float _2312 = (dot(vec3(cbLight._m0[_1803 + 3u].xyz), vec3(_299, _300, _301)) * 0.5) + 0.5;
        float _2313 = _2312 * _2312;
        float _4346 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
        float _2314 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
        float _2315 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2121 = (((cbLight._m0[_2296].x * 0.3183098733425140380859375) * _2314) * _2315) + _2063;
        _2123 = (((cbLight._m0[_2296].y * 0.3183098733425140380859375) * _2314) * _2315) + _2065;
        _2125 = (((cbLight._m0[_2296].z * 0.3183098733425140380859375) * _2314) * _2315) + _2067;
    }
    uint _2130 = _1803 + 8u;
    float _2146 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1803].w)) * _302) * 0.949999988079071044921875);
    float _2147 = _2146 * _2146;
    float _2148 = cbLight._m0[_1803].x + _380;
    float _2149 = cbLight._m0[_1803].y + _381;
    float _2150 = cbLight._m0[_1803].z + _382;
    float _2154 = inversesqrt(dot(vec3(_2148, _2149, _2150), vec3(_2148, _2149, _2150)));
    float _2155 = _2154 * _2148;
    float _2156 = _2154 * _2149;
    float _2157 = _2154 * _2150;
    float _2158 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_1803].xyz));
    float _4362 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2161 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
    float _4373 = isnan(0.0) ? _468 : (isnan(_468) ? 0.0 : max(_468, 0.0));
    float _2162 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
    float _2163 = dot(vec3(_299, _300, _301), vec3(_2155, _2156, _2157));
    float _4384 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
    float _2166 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
    float _2167 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2155, _2156, _2157));
    float _4395 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
    float _2171 = _2147 * _2147;
    float _2175 = ((_2166 * _2166) * (_2171 + (-1.0))) + 1.0;
    float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2187 = 1.0 - _2147;
    float _2198 = (0.5 / (((_2162 * ((_2161 * _2187) + _2147)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2187) + _2147) * _2161))) * _2161;
    float _4406 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2200 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2171 / ((_2175 * _2175) * 3.141590118408203125));
    float _2201 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _2214 = _1803 | 1u;
    uint _2218 = _1803 + 9u;
    float _2232 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2214].w)) * _302) * 0.949999988079071044921875);
    float _2233 = _2232 * _2232;
    float _2234 = cbLight._m0[_2214].x + _380;
    float _2235 = cbLight._m0[_2214].y + _381;
    float _2236 = cbLight._m0[_2214].z + _382;
    float _2240 = inversesqrt(dot(vec3(_2234, _2235, _2236), vec3(_2234, _2235, _2236)));
    float _2241 = _2240 * _2234;
    float _2242 = _2240 * _2235;
    float _2243 = _2240 * _2236;
    float _2244 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2214].xyz));
    float _4422 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _2247 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
    float _2248 = dot(vec3(_299, _300, _301), vec3(_2241, _2242, _2243));
    float _4433 = isnan(0.0) ? _2248 : (isnan(_2248) ? 0.0 : max(_2248, 0.0));
    float _2251 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
    float _2252 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2241, _2242, _2243));
    float _4444 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2256 = _2233 * _2233;
    float _2260 = ((_2251 * _2251) * (_2256 + (-1.0))) + 1.0;
    float _2269 = (exp2(log2(1.0 - (isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2270 = 1.0 - _2233;
    float _2280 = (0.5 / (((_2162 * ((_2247 * _2270) + _2233)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2270) + _2233) * _2247))) * _2247;
    float _4455 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2282 = (isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2256 / ((_2260 * _2260) * 3.141590118408203125));
    float _2283 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    float _2293 = (((_2269 * cbLight._m0[_2218].x) * _2282) * _2283) + ((((cbLight._m0[_2130].x * _1792) * _2186) * _2200) * _2201);
    float _2294 = (((_2269 * cbLight._m0[_2218].y) * _2282) * _2283) + ((((cbLight._m0[_2130].y * _1794) * _2186) * _2200) * _2201);
    float _2295 = (((_2269 * cbLight._m0[_2218].z) * _2282) * _2283) + ((((cbLight._m0[_2130].z * _1796) * _2186) * _2200) * _2201);
    float _2325;
    float _2327;
    float _2329;
    if (_2036)
    {
        _2325 = _2293;
        _2327 = _2294;
        _2329 = _2295;
    }
    else
    {
        uint _2331 = _1803 + 2u;
        uint _2335 = _1803 + 10u;
        float _2349 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2331].w)) * _302) * 0.949999988079071044921875);
        float _2350 = _2349 * _2349;
        float _2351 = cbLight._m0[_2331].x + _380;
        float _2352 = cbLight._m0[_2331].y + _381;
        float _2353 = cbLight._m0[_2331].z + _382;
        float _2357 = inversesqrt(dot(vec3(_2351, _2352, _2353), vec3(_2351, _2352, _2353)));
        float _2358 = _2357 * _2351;
        float _2359 = _2357 * _2352;
        float _2360 = _2357 * _2353;
        float _2361 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2331].xyz));
        float _4471 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
        float _2365 = dot(vec3(_299, _300, _301), vec3(_2358, _2359, _2360));
        float _4482 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2368 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2369 = dot(vec3(cbLight._m0[_2331].xyz), vec3(_2358, _2359, _2360));
        float _4493 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
        float _2373 = _2350 * _2350;
        float _2377 = ((_2368 * _2368) * (_2373 + (-1.0))) + 1.0;
        float _2386 = (exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2387 = 1.0 - _2350;
        float _2397 = (0.5 / (((_2162 * ((_2364 * _2387) + _2350)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2387) + _2350) * _2364))) * _2364;
        float _4504 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2373 / ((_2377 * _2377) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
        _2325 = (((_2386 * cbLight._m0[_2335].x) * _2399) * _2400) + _2293;
        _2327 = (((_2386 * cbLight._m0[_2335].y) * _2399) * _2400) + _2294;
        _2329 = (((_2386 * cbLight._m0[_2335].z) * _2399) * _2400) + _2295;
    }
    float _2410;
    float _2412;
    float _2414;
    if (_2070)
    {
        _2410 = _2325;
        _2412 = _2327;
        _2414 = _2329;
    }
    else
    {
        uint _2421 = _1803 + 3u;
        uint _2425 = _1803 + 11u;
        float _2439 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2421].w)) * _302) * 0.949999988079071044921875);
        float _2440 = _2439 * _2439;
        float _2441 = cbLight._m0[_2421].x + _380;
        float _2442 = cbLight._m0[_2421].y + _381;
        float _2443 = cbLight._m0[_2421].z + _382;
        float _2447 = inversesqrt(dot(vec3(_2441, _2442, _2443), vec3(_2441, _2442, _2443)));
        float _2448 = _2447 * _2441;
        float _2449 = _2447 * _2442;
        float _2450 = _2447 * _2443;
        float _2451 = dot(vec3(_299, _300, _301), vec3(cbLight._m0[_2421].xyz));
        float _4520 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2454 = isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0));
        float _2455 = dot(vec3(_299, _300, _301), vec3(_2448, _2449, _2450));
        float _4531 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
        float _2458 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2459 = dot(vec3(cbLight._m0[_2421].xyz), vec3(_2448, _2449, _2450));
        float _4542 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
        float _2463 = _2440 * _2440;
        float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
        float _2476 = (exp2(log2(1.0 - (isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2477 = 1.0 - _2440;
        float _2487 = (0.5 / (((_2162 * ((_2454 * _2477) + _2440)) + 9.9999999392252902907785028219223e-09) + (((_2162 * _2477) + _2440) * _2454))) * _2454;
        float _4553 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        float _2489 = (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
        float _2490 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
        _2410 = (((_2476 * cbLight._m0[_2425].x) * _2489) * _2490) + _2325;
        _2412 = (((_2476 * cbLight._m0[_2425].y) * _2489) * _2490) + _2327;
        _2414 = (((_2476 * cbLight._m0[_2425].z) * _2489) * _2490) + _2329;
    }
    float _2556;
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    if (_1801.y == 0u)
    {
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _402) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _401) / _2512)));
        float _2533 = (log2(_1579 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        float _2579;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
            _2579 = 0.0;
        }
        else
        {
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2580;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            float _2755 = 0.0;
            float _2756 = 0.0;
            uint _2757 = 0u;
            uint _2766;
            bool _2767;
            for (;;)
            {
                _2766 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2757 << 2u)) >> 2u)).x;
                _2767 = _2766 == 0u;
                float frontier_phi_72_pred;
                float frontier_phi_72_pred_1;
                float frontier_phi_72_pred_2;
                float frontier_phi_72_pred_3;
                float frontier_phi_72_pred_4;
                float frontier_phi_72_pred_5;
                if (_2767)
                {
                    frontier_phi_72_pred = _2756;
                    frontier_phi_72_pred_1 = _2755;
                    frontier_phi_72_pred_2 = _2754;
                    frontier_phi_72_pred_3 = _2753;
                    frontier_phi_72_pred_4 = _2752;
                    frontier_phi_72_pred_5 = _2751;
                }
                else
                {
                    float _2952;
                    float _2953;
                    float _2954;
                    float _2955;
                    float _2956;
                    float _2957;
                    uint _2958;
                    _2952 = _2751;
                    _2953 = _2752;
                    _2954 = _2753;
                    _2955 = _2754;
                    _2956 = _2755;
                    _2957 = _2756;
                    _2958 = _2766;
                    float _2867;
                    float _2868;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    for (;;)
                    {
                        uint _2962 = uint(findLSB(_2958)) + (_2757 << 5u);
                        uint _2959 = (_2958 + 4294967295u) & _2958;
                        uint _2964 = _2962 * 48u;
                        vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2964)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2964 + 3u)).x));
                        uint _2984 = (_2962 * 48u) + 4u;
                        vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2984)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2984 + 3u)).x));
                        float _2998 = _2997.x;
                        float _2999 = _2997.y;
                        float _3000 = _2997.z;
                        uint _3003 = (_2962 * 48u) + 8u;
                        vec3 _3014 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3003)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3003 + 2u)).x));
                        uint _3019 = (_2962 * 48u) + 12u;
                        vec2 _3027 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_3019)).x, texelFetch(g_PointLightRenderingBuffer, int(_3019 + 1u)).x));
                        float _3033 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
                        float _3034 = _3033 * _1577;
                        float _3035 = _3033 * _1578;
                        float _3036 = _3033 * _1579;
                        float _3037 = _2978.x - _1577;
                        float _3038 = _2978.y - _1578;
                        float _3039 = _2978.z - _1579;
                        float _3040 = dot(vec3(_3037, _3038, _3039), vec3(_3037, _3038, _3039));
                        float _3043 = inversesqrt(_3040);
                        float _3044 = _3043 * _3037;
                        float _3045 = _3043 * _3038;
                        float _3046 = _3043 * _3039;
                        float _3047 = dot(vec3(_422, _425, _428), vec3(_3044, _3045, _3046));
                        float _3052 = 1.0 - (_3040 * _2978.w);
                        float _4579 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                        float _3053 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3054 = sqrt(_3040) * _2997.w;
                        float _3057 = 1.39999997615814208984375 / (_3054 + 1.39999997615814208984375);
                        float _3058 = _3057 * _3057;
                        float _3059 = 1.0 - _3058;
                        float _3061 = (_3059 * _3059) * _303;
                        float _3064 = ((_3059 * _3047) + _3058) + _3061;
                        float _3069 = _3054 * _3054;
                        float _3074 = ((isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0))) * _3053) / (((_3061 * 2.0) + 1.0) * ((_3069 * 0.699999988079071044921875) + 1.0));
                        float _3078 = dot(vec3(_3044, _3045, _3046), vec3(_3034, _3035, _3036));
                        float _4595 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3085 = dot(vec3((-0.0) - _3034, (-0.0) - _3035, (-0.0) - _3036), vec3(_422, _425, _428)) + 1.0;
                        float _3087 = (isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0))) * 0.5;
                        float _3094 = ((_3087 * _3087) * _3027.x) * exp2((_3027.y * 32.0) * log2(isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))));
                        float _3096 = _303 / (_303 + 1.0);
                        float _3112 = (-0.0) - _1577;
                        float _3113 = (-0.0) - _1578;
                        float _3114 = (-0.0) - _1579;
                        float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                        float _3119 = _3118 * _3112;
                        float _3120 = _3118 * _3113;
                        float _3121 = _3118 * _3114;
                        float _3128 = exp2(log2(1.0 / ((_3069 * 3.5) + 5.0)) * 0.25);
                        float _3129 = 1.0 - _483;
                        float _3136 = sqrt(1.0 - ((1.0 - (_3129 * _3129)) * (1.0 - (_3128 * _3128))));
                        float _3137 = _3136 * _3136;
                        float _3138 = _3137 * _3137;
                        float _3139 = _3119 + _3044;
                        float _3140 = _3120 + _3045;
                        float _3141 = _3121 + _3046;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3149 = dot(vec3(_422, _425, _428), vec3(_3119, _3120, _3121));
                        float _4611 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                        float _3152 = isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0));
                        float _3153 = dot(vec3(_422, _425, _428), vec3(_3145 * _3139, _3145 * _3140, _3145 * _3141));
                        float _4622 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                        float _3156 = isnan(1.0) ? _4622 : (isnan(_4622) ? 1.0 : min(_4622, 1.0));
                        float _3160 = ((_3156 * _3156) * (_3138 + (-1.0))) + 1.0;
                        float _3161 = _3057 * _3137;
                        float _3162 = _3161 * _3161;
                        float _3165 = ((1.0 - _3162) * _3047) + _3162;
                        float _4633 = isnan(0.0) ? _3165 : (isnan(_3165) ? 0.0 : max(_3165, 0.0));
                        float _3166 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
                        float _3167 = 1.0 - _3137;
                        float _3177 = (0.5 / (((_3166 * ((_3152 * _3167) + _3137)) + 9.9999999392252902907785028219223e-09) + (((_3166 * _3167) + _3137) * _3152))) * _3166;
                        float _4644 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3188 = (((_3138 * 3.1415927410125732421875) * (isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0)))) / ((_3160 * _3160) * ((_3069 * 2.1991131305694580078125) + 3.141590118408203125))) * _3053;
                        _2870 = (((((_2998 * 0.3183098733425140380859375) * _3096) * _3094) + _2998) * _3074) + _2955;
                        _2871 = (((((_2999 * 0.3183098733425140380859375) * _3096) * _3094) + _2999) * _3074) + _2956;
                        _2872 = (((((_3000 * 0.3183098733425140380859375) * _3096) * _3094) + _3000) * _3074) + _2957;
                        _2867 = (_3188 * _3014.x) + _2952;
                        _2868 = (_3188 * _3014.y) + _2953;
                        _2869 = (_3188 * _3014.z) + _2954;
                        if (_2959 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2952 = _2867;
                            _2953 = _2868;
                            _2954 = _2869;
                            _2955 = _2870;
                            _2956 = _2871;
                            _2957 = _2872;
                            _2958 = _2959;
                        }
                    }
                    frontier_phi_72_pred = _2872;
                    frontier_phi_72_pred_1 = _2871;
                    frontier_phi_72_pred_2 = _2870;
                    frontier_phi_72_pred_3 = _2869;
                    frontier_phi_72_pred_4 = _2868;
                    frontier_phi_72_pred_5 = _2867;
                }
                _2580 = frontier_phi_72_pred;
                _2578 = frontier_phi_72_pred_1;
                _2576 = frontier_phi_72_pred_2;
                _2574 = frontier_phi_72_pred_3;
                _2572 = frontier_phi_72_pred_4;
                _2570 = frontier_phi_72_pred_5;
                uint _2758 = _2757 + 1u;
                if (_2758 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2751 = _2570;
                    _2752 = _2572;
                    _2753 = _2574;
                    _2754 = _2576;
                    _2755 = _2578;
                    _2756 = _2580;
                    _2757 = _2758;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
            _2579 = _2580;
        }
        uvec4 _2583 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2584 = _2583.z;
        uint _2586 = (_2584 >> 8u) & 15u;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        float _2729;
        if (((4294967295u << _2586) & _2543) == 0u)
        {
            _2719 = _2569;
            _2721 = _2571;
            _2723 = _2573;
            _2725 = _2575;
            _2727 = _2577;
            _2729 = _2579;
        }
        else
        {
            float _2744 = inversesqrt(dot(vec3(_1577, _1578, _1579), vec3(_1577, _1578, _1579)));
            float _2745 = _2744 * _1577;
            float _2746 = _2744 * _1578;
            float _2747 = _2744 * _1579;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2586 < ((_2584 >> 12u) & 15u))
            {
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2730;
                float _2935 = _2569;
                float _2936 = _2571;
                float _2937 = _2573;
                float _2938 = _2575;
                float _2939 = _2577;
                float _2940 = _2579;
                uint _2941 = _2586;
                uint _2950;
                bool _2951;
                for (;;)
                {
                    _2950 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2941 << 2u)) >> 2u)).x;
                    _2951 = _2950 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_2951)
                    {
                        frontier_phi_84_pred = _2940;
                        frontier_phi_84_pred_1 = _2939;
                        frontier_phi_84_pred_2 = _2938;
                        frontier_phi_84_pred_3 = _2937;
                        frontier_phi_84_pred_4 = _2936;
                        frontier_phi_84_pred_5 = _2935;
                    }
                    else
                    {
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3241;
                        float _3589;
                        float _3590;
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3258 = _2935;
                        float _3259 = _2936;
                        float _3260 = _2937;
                        float _3261 = _2938;
                        float _3262 = _2939;
                        float _3263 = _2940;
                        uint _3264 = _2950;
                        uint _3265;
                        vec4 _3290;
                        float _3291;
                        vec4 _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        vec3 _3321;
                        vec2 _3330;
                        vec4 _3346;
                        vec4 _3362;
                        float _3409;
                        bool _3410;
                        for (;;)
                        {
                            uint _3275 = ((_2941 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3264));
                            _3265 = (_3264 + 4294967295u) & _3264;
                            uint _3277 = _3275 * 40u;
                            _3290 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3277)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3277 + 3u)).x));
                            _3291 = _3290.w;
                            uint _3293 = (_3275 * 40u) + 4u;
                            _3306 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3293)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3293 + 3u)).x));
                            _3307 = _3306.x;
                            _3308 = _3306.y;
                            _3309 = _3306.z;
                            uint _3311 = (_3275 * 40u) + 8u;
                            _3321 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x));
                            uint _3323 = (_3275 * 40u) + 12u;
                            _3330 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x));
                            uint _3333 = (_3275 * 40u) + 16u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3349 = (_3275 * 40u) + 20u;
                            _3362 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3349)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3349 + 3u)).x));
                            uint _3365 = (_3275 * 40u) + 24u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3384 = (_3275 * 40u) + 28u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3409 = fma(_1579, _3397.z, fma(_1578, _3397.y, _3397.x * _1577)) + _3397.w;
                            _3410 = !((fma(_1579, _3378.z, fma(_1578, _3378.y, _3378.x * _1577)) + _3378.w) <= 0.0);
                            float frontier_phi_93_pred;
                            float frontier_phi_93_pred_1;
                            float frontier_phi_93_pred_2;
                            float frontier_phi_93_pred_3;
                            float frontier_phi_93_pred_4;
                            float frontier_phi_93_pred_5;
                            if (_3410)
                            {
                                float _3436 = _3290.x - _1577;
                                float _3437 = _3290.y - _1578;
                                float _3438 = _3290.z - _1579;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3291 * _3291));
                                float _4655 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4655 : (isnan(_4655) ? 1.0 : min(_4655, 1.0));
                                float _3454 = sqrt(_3439) * _3306.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3458 = 1.0 - _3457;
                                float _3460 = (_3458 * _3458) * _303;
                                float _3463 = ((_3458 * dot(vec3(_3443, _3444, _3445), vec3(_422, _425, _428))) + _3457) + _3460;
                                float _3468 = _3454 * _3454;
                                float _3473 = (fma(_1579, _3346.z, fma(_1578, _3346.y, _3346.x * _1577)) + _3346.w) / _3409;
                                float _3474 = (fma(_1579, _3362.z, fma(_1578, _3362.y, _3362.x * _1577)) + _3362.w) / _3409;
                                float _3478 = 1.0 - dot(vec2(_3473, _3474), vec2(_3473, _3474));
                                float _4671 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
                                float _3480 = _3479 * (((isnan(0.0) ? _3463 : (isnan(_3463) ? 0.0 : max(_3463, 0.0))) * _3450) / (((_3460 * 2.0) + 1.0) * ((_3468 * 0.699999988079071044921875) + 1.0)));
                                float _3481 = (-0.0) - _2745;
                                float _3482 = (-0.0) - _2746;
                                float _3483 = (-0.0) - _2747;
                                float _3484 = dot(vec3(_3443, _3444, _3445), vec3(_2745, _2746, _2747));
                                float _4682 = isnan(0.0) ? _3484 : (isnan(_3484) ? 0.0 : max(_3484, 0.0));
                                float _3491 = dot(vec3(_3481, _3482, _3483), vec3(_422, _425, _428)) + 1.0;
                                float _3493 = (isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0))) * 0.5;
                                float _3500 = ((_3493 * _3493) * _3330.x) * exp2((_3330.y * 32.0) * log2(isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0))));
                                float _3502 = _303 / (_303 + 1.0);
                                float _3523 = exp2(log2(1.0 / ((_3468 * 3.5) + 5.0)) * 0.25);
                                float _3524 = 1.0 - _483;
                                float _3531 = sqrt(1.0 - ((1.0 - (_3524 * _3524)) * (1.0 - (_3523 * _3523))));
                                float _3532 = _3531 * _3531;
                                float _3533 = _3532 * _3532;
                                float _3534 = _3443 - _2745;
                                float _3535 = _3444 - _2746;
                                float _3536 = _3445 - _2747;
                                float _3540 = inversesqrt(dot(vec3(_3534, _3535, _3536), vec3(_3534, _3535, _3536)));
                                float _3544 = dot(vec3(_422, _425, _428), vec3(_3481, _3482, _3483));
                                float _4698 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3547 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                                float _3548 = dot(vec3(_422, _425, _428), vec3(_3540 * _3534, _3540 * _3535, _3540 * _3536));
                                float _4709 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3551 = isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0));
                                float _3555 = ((_3551 * _3551) * (_3533 + (-1.0))) + 1.0;
                                float _3556 = _3456 * _3532;
                                float _3557 = _3556 * _3556;
                                float _3563 = ((1.0 - _3557) * dot(vec3(_422, _425, _428), vec3(_3443, _3444, _3445))) + _3557;
                                float _4720 = isnan(0.0) ? _3563 : (isnan(_3563) ? 0.0 : max(_3563, 0.0));
                                float _3564 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3565 = 1.0 - _3532;
                                float _3575 = (0.5 / (((_3564 * ((_3547 * _3565) + _3532)) + 9.9999999392252902907785028219223e-09) + (((_3564 * _3565) + _3532) * _3547))) * _3564;
                                float _4731 = isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0));
                                float _3585 = (_3479 * _3450) * (((_3533 * 3.1415927410125732421875) * (isnan(1.0) ? _4731 : (isnan(_4731) ? 1.0 : min(_4731, 1.0)))) / ((_3555 * _3555) * ((_3468 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_93_pred = ((((_3309 * 0.3183098733425140380859375) * _3502) * _3500) + _3309) * _3480;
                                frontier_phi_93_pred_1 = ((((_3308 * 0.3183098733425140380859375) * _3502) * _3500) + _3308) * _3480;
                                frontier_phi_93_pred_2 = ((((_3307 * 0.3183098733425140380859375) * _3502) * _3500) + _3307) * _3480;
                                frontier_phi_93_pred_3 = _3585 * _3321.z;
                                frontier_phi_93_pred_4 = _3585 * _3321.y;
                                frontier_phi_93_pred_5 = _3585 * _3321.x;
                            }
                            else
                            {
                                frontier_phi_93_pred = 0.0;
                                frontier_phi_93_pred_1 = 0.0;
                                frontier_phi_93_pred_2 = 0.0;
                                frontier_phi_93_pred_3 = 0.0;
                                frontier_phi_93_pred_4 = 0.0;
                                frontier_phi_93_pred_5 = 0.0;
                            }
                            _3594 = frontier_phi_93_pred;
                            _3593 = frontier_phi_93_pred_1;
                            _3592 = frontier_phi_93_pred_2;
                            _3591 = frontier_phi_93_pred_3;
                            _3590 = frontier_phi_93_pred_4;
                            _3589 = frontier_phi_93_pred_5;
                            _3239 = _3592 + _3261;
                            _3240 = _3593 + _3262;
                            _3241 = _3594 + _3263;
                            _3236 = _3589 + _3258;
                            _3237 = _3590 + _3259;
                            _3238 = _3591 + _3260;
                            if (_3265 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3258 = _3236;
                                _3259 = _3237;
                                _3260 = _3238;
                                _3261 = _3239;
                                _3262 = _3240;
                                _3263 = _3241;
                                _3264 = _3265;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3241;
                        frontier_phi_84_pred_1 = _3240;
                        frontier_phi_84_pred_2 = _3239;
                        frontier_phi_84_pred_3 = _3238;
                        frontier_phi_84_pred_4 = _3237;
                        frontier_phi_84_pred_5 = _3236;
                    }
                    _2730 = frontier_phi_84_pred;
                    _2728 = frontier_phi_84_pred_1;
                    _2726 = frontier_phi_84_pred_2;
                    _2724 = frontier_phi_84_pred_3;
                    _2722 = frontier_phi_84_pred_4;
                    _2720 = frontier_phi_84_pred_5;
                    uint _2942 = _2941 + 1u;
                    if (_2942 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2935 = _2720;
                        _2936 = _2722;
                        _2937 = _2724;
                        _2938 = _2726;
                        _2939 = _2728;
                        _2940 = _2730;
                        _2941 = _2942;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2726;
                frontier_phi_66_67_ladder_1 = _2724;
                frontier_phi_66_67_ladder_2 = _2730;
                frontier_phi_66_67_ladder_3 = _2728;
                frontier_phi_66_67_ladder_4 = _2722;
                frontier_phi_66_67_ladder_5 = _2720;
            }
            else
            {
                frontier_phi_66_67_ladder = _2575;
                frontier_phi_66_67_ladder_1 = _2573;
                frontier_phi_66_67_ladder_2 = _2579;
                frontier_phi_66_67_ladder_3 = _2577;
                frontier_phi_66_67_ladder_4 = _2571;
                frontier_phi_66_67_ladder_5 = _2569;
            }
            _2719 = frontier_phi_66_67_ladder_5;
            _2721 = frontier_phi_66_67_ladder_4;
            _2723 = frontier_phi_66_67_ladder_1;
            _2725 = frontier_phi_66_67_ladder;
            _2727 = frontier_phi_66_67_ladder_3;
            _2729 = frontier_phi_66_67_ladder_2;
        }
        float _2734 = isnan(1.0) ? _467 : (isnan(_467) ? 1.0 : min(_467, 1.0));
        _2556 = (_2734 * _2725) + _2121;
        _2558 = (_2734 * _2727) + _2123;
        _2560 = (_2734 * _2729) + _2125;
        _2562 = ((_2719 * 0.039999999105930328369140625) * _2734) + _2410;
        _2564 = ((_2721 * 0.039999999105930328369140625) * _2734) + _2412;
        _2566 = ((_2723 * 0.039999999105930328369140625) * _2734) + _2414;
    }
    else
    {
        _2556 = _2121;
        _2558 = _2123;
        _2560 = _2125;
        _2562 = _2410;
        _2564 = _2412;
        _2566 = _2414;
    }
    float _2658;
    float _2659;
    float _2660;
    if (_303 > 0.0)
    {
        uint _2590 = _1803 + 4u;
        float _2596 = (-0.0) - _380;
        float _2598 = (-0.0) - _381;
        float _2599 = (-0.0) - _382;
        float _2600 = dot(vec3(cbLight._m0[_1803].xyz), vec3(_2596, _2598, _2599));
        float _4747 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2604 = _478 + 1.0;
        float _2606 = (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0))) * 0.5;
        float _2611 = _2606 * _2606;
        float _2612 = _2611 * exp2(log2(isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0))) * 32.0);
        float _2614 = _303 / (_303 + 1.0);
        float _2615 = isnan(_1816) ? 1.0 : (isnan(1.0) ? _1816 : min(1.0, _1816));
        uint _2628 = _1803 + 5u;
        float _2634 = dot(vec3(cbLight._m0[_2214].xyz), vec3(_2596, _2598, _2599));
        float _4768 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
        float _2641 = _2611 * exp2(log2(isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * 32.0);
        float _2642 = isnan(_1817) ? 1.0 : (isnan(1.0) ? _1817 : min(1.0, _1817));
        _2658 = ((((_2641 * cbLight._m0[_2628].x) * _2614) * _2642) + ((((cbLight._m0[_2590].x * _1792) * _2612) * _2614) * _2615)) * 0.3183098733425140380859375;
        _2659 = ((((_2641 * cbLight._m0[_2628].y) * _2614) * _2642) + ((((cbLight._m0[_2590].y * _1794) * _2612) * _2614) * _2615)) * 0.3183098733425140380859375;
        _2660 = ((((_2641 * cbLight._m0[_2628].z) * _2614) * _2642) + ((((cbLight._m0[_2590].z * _1796) * _2612) * _2614) * _2615)) * 0.3183098733425140380859375;
    }
    else
    {
        _2658 = 0.0;
        _2659 = 0.0;
        _2660 = 0.0;
    }
    float _4784 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4795 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4806 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _2679 = ((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * ((_2556 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _467)) + _2658)) + ((_2562 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2680 = ((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * ((_2558 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _467)) + _2659)) + ((_2564 + ((isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    float _2681 = ((isnan(1.0) ? _4806 : (isnan(_4806) ? 1.0 : min(_4806, 1.0))) * ((_2560 + ((isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0))) * _467)) + _2660)) + ((_2566 + ((isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0))) * _1306)) * cbPerFrame._m0[3u].x);
    uint _2682 = _441 + 6u;
    float _2690 = _401 / cbSceneParam._m0[86u].x;
    float _2691 = _402 / cbSceneParam._m0[86u].y;
    vec4 _2705 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, (log2((isnan(cbSceneParam._m0[77u].w) ? _322 : (isnan(_322) ? cbSceneParam._m0[77u].w : min(_322, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2707 = _2705.x;
    float _2708 = _2705.y;
    float _2709 = _2705.z;
    float _2710 = _2705.w;
    float _2809;
    float _2811;
    float _2813;
    float _2815;
    if (_322 > cbSceneParam._m0[78u].w)
    {
        float _2772 = isnan(_322) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _322 : min(cbSceneParam._m0[80u].w, _322));
        float _2773 = _2772 / _322;
        float _2784 = _2773 * _373;
        float _2785 = _374 * _2773;
        float _2786 = (-0.0) - _2785;
        float _2787 = _2773 * _375;
        float _2789 = (cbSceneParam._m0[77u].w * _2786) / _2772;
        float _2790 = _2789 + cbSceneParam._m0[79u].w;
        float _2791 = cbSceneParam._m0[79u].w - _2785;
        float _2797 = sqrt(((_2784 * _2784) + (_2785 * _2785)) + (_2787 * _2787));
        float _2800 = (1.0 - (cbSceneParam._m0[77u].w / _2772)) * _2797;
        float _2805 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2807 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3193;
        if (abs((_2786 - _2789) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3193 = ((((_2790 > 0.0) ? exp2(_2805 * _2790) : (2.0 - exp2(_2807 * _2790))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2800;
        }
        else
        {
            float _2892 = 1.0 / cbSceneParam._m0[80u].x;
            float _2893 = isnan(_2791) ? _2790 : (isnan(_2790) ? _2791 : max(_2790, _2791));
            float _2894 = isnan(_2791) ? _2790 : (isnan(_2790) ? _2791 : min(_2790, _2791));
            float _2903 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : min(_2893, 0.0));
            float _2904 = isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : min(_2894, 0.0));
            _3193 = ((abs(_2797 / _2786) * cbSceneParam._m0[80u].y) * ((((_2903 - _2904) * 2.0) - ((exp2(_2805 * (isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0)))) - exp2(_2805 * (isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))))) * _2892)) - ((exp2(_2807 * _2903) - exp2(_2807 * _2904)) * _2892))) + (_2800 * cbSceneParam._m0[80u].z);
        }
        vec4 _3195 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2690, _2691, 1.0), 0.0);
        float _3204 = exp2((_3193 * (-1.44269502162933349609375)) * (1.0 - _3195.w));
        float _3205 = log2(_3204);
        float _3221 = log2(_2710);
        _2809 = (exp2(_3221 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].x)) * _3195.x) / cbSceneParam._m0[78u].x)) + _2707;
        _2811 = (exp2(_3221 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].y)) * _3195.y) / cbSceneParam._m0[78u].y)) + _2708;
        _2813 = (exp2(_3221 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3205 * cbSceneParam._m0[78u].z)) * _3195.z) / cbSceneParam._m0[78u].z)) + _2709;
        _2815 = _3204 * _2710;
    }
    else
    {
        _2809 = _2707;
        _2811 = _2708;
        _2813 = _2709;
        _2815 = _2710;
    }
    bool _3231;
    vec4 _2825;
    vec4 _2847;
    float _2849;
    float _2853;
    float _2854;
    float _2855;
    float _2856;
    bool _2866;
    for (;;)
    {
        _2825 = cbMatDynParam._m0[0u];
        float _2827 = roundEven(_2825.y);
        bool _2828 = _2827 == 3.0;
        float _2829 = log2(_2815);
        float _2836 = exp2(_2829 * cbSceneParam._m0[78u].x) * _2679;
        float _2837 = exp2(_2829 * cbSceneParam._m0[78u].y) * _2680;
        float _2838 = exp2(_2829 * cbSceneParam._m0[78u].z) * _2681;
        float _2845 = _389 + (-0.5);
        _2847 = cbMtdParam._m0[1u];
        _2849 = _2847.y * _2845;
        float _2852 = (_2827 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2853 = _2852 * (_2828 ? _2836 : (_2836 + (cbSceneParam._m0[72u].w * _2809)));
        _2854 = _2852 * (_2828 ? _2837 : (_2837 + (cbSceneParam._m0[72u].w * _2811)));
        _2855 = _2852 * (_2828 ? _2838 : (_2838 + (cbSceneParam._m0[72u].w * _2813)));
        _2856 = _2845 * 0.999000012874603271484375;
        _2866 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2866)
        {
            if ((cbInstanceData._m0[_441 + 7u].x + _2856) < 0.5)
            {
                _3231 = true;
                break;
            }
        }
        uint _2927 = _443 + uint(_2825.w);
        if ((cbInstanceData._m0[_2927].w < 1.0) && ((cbInstanceData._m0[_2927].w + _2856) < 0.5))
        {
            _3231 = true;
            break;
        }
        if ((_2849 + _234) < _2847.x)
        {
            _3231 = true;
            break;
        }
        _3231 = false;
        break;
    }
    float _3249;
    if (_3231)
    {
        discard_state = true;
        _3249 = 0.0;
    }
    else
    {
        _3249 = cbInstanceData._m0[_2682].w;
    }
    SV_Target.x = _2853;
    SV_Target.y = _2854;
    SV_Target.z = _2855;
    SV_Target.w = _3249;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2682].w;
    discard_exit();
}


