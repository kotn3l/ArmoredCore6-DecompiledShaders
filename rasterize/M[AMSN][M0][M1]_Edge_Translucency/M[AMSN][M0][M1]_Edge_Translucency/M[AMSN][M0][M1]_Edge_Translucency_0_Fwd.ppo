#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _853;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _244 = _242.x;
    vec4 _256 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _256.z;
    float _264 = (_256.x * 2.0) + (-1.0);
    float _266 = (_256.y * 2.0) + (-1.0);
    float _267 = dot(vec2(_264, _266), vec2(_264, _266));
    float _3416 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _273 = sqrt(1.0 - (isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))));
    vec4 _285 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _292 = cbMtdParam._m0[10u].x * _285.x;
    float _295 = fma(_273, _192 * NORMAL.x, fma(_266, _199 * TANGENT.x, (_185 * _178) * _264));
    float _298 = fma(_273, _192 * NORMAL.y, fma(_266, _199 * TANGENT.y, (_185 * _179) * _264));
    float _301 = fma(_273, _192 * NORMAL.z, fma(_266, _199 * TANGENT.z, (_185 * _180) * _264));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3427 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _309 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _310 = isnan(0.0) ? _292 : (isnan(_292) ? 0.0 : max(_292, 0.0));
    float _3443 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3454 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3465 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3476 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _314 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _330 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _371 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _381 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _371);
    float _382 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _371);
    float _383 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _371);
    float _387 = inversesqrt(dot(vec3(_381, _382, _383), vec3(_381, _382, _383)));
    float _388 = _381 * _387;
    float _389 = _382 * _387;
    float _390 = _383 * _387;
    float _396 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _397 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _418 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _421 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _424 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _437 = uint(roundEven(NORMAL.w)) * 13u;
    uint _440 = (_437 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _446 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0)))) * cbInstanceData._m0[_440].x;
    float _447 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0)))) * cbInstanceData._m0[_440].y;
    float _448 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0)))) * cbInstanceData._m0[_440].z;
    float _3487 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
    float _3498 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _450 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
    float _3509 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _451 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
    float _452 = 1.0 - _314;
    float _453 = _449 * _452;
    float _454 = _450 * _452;
    float _455 = _451 * _452;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _314;
    float _461 = (_450 + (-0.039999999105930328369140625)) * _314;
    float _462 = (_451 + (-0.039999999105930328369140625)) * _314;
    float _463 = _460 + 0.039999999105930328369140625;
    float _465 = _461 + 0.039999999105930328369140625;
    float _466 = _462 + 0.039999999105930328369140625;
    vec4 _475 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _396, cbSceneParam._m0[86u].y * _397));
    float _478 = _475.x * TEXCOORD.z;
    float _479 = dot(vec3(_306, _307, _308), vec3(_388, _389, _390));
    float _482 = _479 * 2.0;
    float _486 = (_482 * _306) - _388;
    float _487 = (_482 * _307) - _389;
    float _488 = (_482 * _308) - _390;
    float _489 = dot(vec3(_388, _389, _390), vec3(_306, _307, _308));
    float _492 = abs(_489);
    float _3520 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _494 = sqrt(_309);
    float _507 = exp2((_494 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_494 * 3.0));
    float _513 = (1.0 - _507) * ((_494 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _514 = _507 * _494;
    float _542 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _546 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _852;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _577 = fma(_550, cbModelParam._m0[26u].z, fma(_546, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _542));
        float _581 = fma(_550, cbModelParam._m0[27u].z, fma(_546, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _542));
        float _585 = fma(_550, cbModelParam._m0[28u].z, fma(_546, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _542));
        float _610 = _542 + _306;
        float _611 = _546 + _307;
        float _612 = _550 + _308;
        float _622 = fma(_612, cbModelParam._m0[26u].z, fma(_611, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _610)) - _577;
        float _623 = fma(_612, cbModelParam._m0[27u].z, fma(_611, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _610)) - _581;
        float _624 = fma(_612, cbModelParam._m0[28u].z, fma(_611, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _610)) - _585;
        float _628 = inversesqrt(dot(vec3(_622, _623, _624), vec3(_622, _623, _624)));
        float _641 = ((_628 * _622) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_577 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _642 = ((_628 * _623) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_581 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _643 = ((_628 * _624) / cbModelParam._m0[34u].z) + ((((((_585 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_641, _642, _643), 0.0);
        float _680 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_646.x + (-0.5));
        float _682 = _680 * (_646.y + (-0.5));
        float _683 = _680 * (_646.z + (-0.5));
        float _690 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_653.x + (-0.5));
        float _692 = _690 * (_653.y + (-0.5));
        float _693 = _690 * (_653.z + (-0.5));
        float _700 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_660.x + (-0.5));
        float _702 = _700 * (_660.y + (-0.5));
        float _703 = _700 * (_660.z + (-0.5));
        float _710 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_667.x + (-0.5));
        float _712 = _710 * (_667.y + (-0.5));
        float _713 = _710 * (_667.z + (-0.5));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _716 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
        float _717 = _681 * 0.5;
        float _718 = _691 * 0.5;
        float _719 = _701 * 0.5;
        float _720 = dot(vec3(_717, _718, _719), vec3(_717, _718, _719));
        float _725 = (_720 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_720);
        float _734 = (dot(vec3(_306, _307, _308), vec3(_725 * _717, _725 * _718, _725 * _719)) + 1.0) * 0.5;
        float _3546 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _744 = sqrt(((_718 * _718) + (_717 * _717)) + (_719 * _719)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3557 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _745 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _746 = _745 * 2.0;
        float _750 = (1.0 - _745) / (_745 + 1.0);
        float _3568 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _751 = isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0));
        float _760 = ((((1.0 - _751) * (_746 + 2.0)) * exp2(log2(isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0))) * (_746 + 1.0))) + _751) * _714;
        float _761 = _682 * 0.5;
        float _762 = _692 * 0.5;
        float _763 = _702 * 0.5;
        float _764 = dot(vec3(_761, _762, _763), vec3(_761, _762, _763));
        float _769 = (_764 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_764);
        float _777 = (dot(vec3(_306, _307, _308), vec3(_769 * _761, _769 * _762, _769 * _763)) + 1.0) * 0.5;
        float _3579 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _786 = sqrt(((_762 * _762) + (_761 * _761)) + (_763 * _763)) / (_715 + 9.9999997473787516355514526367188e-06);
        float _3590 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3590 : (isnan(_3590) ? 1.0 : min(_3590, 1.0));
        float _788 = _787 * 2.0;
        float _792 = (1.0 - _787) / (_787 + 1.0);
        float _3601 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _793 = isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0));
        float _802 = ((((1.0 - _793) * (_788 + 2.0)) * exp2(log2(isnan(1.0) ? _3579 : (isnan(_3579) ? 1.0 : min(_3579, 1.0))) * (_788 + 1.0))) + _793) * _715;
        float _803 = _683 * 0.5;
        float _804 = _693 * 0.5;
        float _805 = _703 * 0.5;
        float _806 = dot(vec3(_803, _804, _805), vec3(_803, _804, _805));
        float _811 = (_806 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_806);
        float _819 = (dot(vec3(_306, _307, _308), vec3(_811 * _803, _811 * _804, _811 * _805)) + 1.0) * 0.5;
        float _3612 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _828 = sqrt(((_804 * _804) + (_803 * _803)) + (_805 * _805)) / (_716 + 9.9999997473787516355514526367188e-06);
        float _3623 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _830 = _829 * 2.0;
        float _834 = (1.0 - _829) / (_829 + 1.0);
        float _3634 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _835 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _844 = ((((1.0 - _835) * (_830 + 2.0)) * exp2(log2(isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * (_830 + 1.0))) + _835) * _716;
        _852 = _683;
        _854 = _682;
        _855 = _681;
        _856 = _693;
        _857 = _692;
        _858 = _691;
        _859 = _703;
        _860 = _702;
        _861 = _701;
        _862 = _716;
        _863 = _715;
        _864 = _714;
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0)));
        _866 = cbModelParam._m0[36u].z * (isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0)));
        _867 = cbModelParam._m0[36u].z * (isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0)));
    }
    else
    {
        _852 = _853;
        _854 = _853;
        _855 = _853;
        _856 = _853;
        _857 = _853;
        _858 = _853;
        _859 = _853;
        _860 = _853;
        _861 = _853;
        _862 = _853;
        _863 = _853;
        _864 = _853;
        _865 = 0.0;
        _866 = 0.0;
        _867 = 0.0;
    }
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _893 = fma(_550, cbModelParam._m0[30u].z, fma(_546, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _542));
        float _897 = fma(_550, cbModelParam._m0[31u].z, fma(_546, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _542));
        float _901 = fma(_550, cbModelParam._m0[32u].z, fma(_546, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _542));
        float _924 = _542 + _306;
        float _925 = _546 + _307;
        float _926 = _550 + _308;
        float _936 = fma(_926, cbModelParam._m0[30u].z, fma(_925, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _924)) - _893;
        float _937 = fma(_926, cbModelParam._m0[31u].z, fma(_925, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _924)) - _897;
        float _938 = fma(_926, cbModelParam._m0[32u].z, fma(_925, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _924)) - _901;
        float _942 = inversesqrt(dot(vec3(_936, _937, _938), vec3(_936, _937, _938)));
        float _955 = ((_942 * _936) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_893 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _956 = ((_942 * _937) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_897 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _957 = ((_942 * _938) / cbModelParam._m0[35u].z) + ((((((_901 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_955, _956, _957), 0.0);
        float _992 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_959.x + (-0.5));
        float _994 = _992 * (_959.y + (-0.5));
        float _995 = _992 * (_959.z + (-0.5));
        float _1002 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_966.x + (-0.5));
        float _1004 = _1002 * (_966.y + (-0.5));
        float _1005 = _1002 * (_966.z + (-0.5));
        float _1012 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_973.x + (-0.5));
        float _1014 = _1012 * (_973.y + (-0.5));
        float _1015 = _1012 * (_973.z + (-0.5));
        float _1022 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_980.x + (-0.5));
        float _1024 = _1022 * (_980.y + (-0.5));
        float _1025 = _1022 * (_980.z + (-0.5));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1028 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1029 = _993 * 0.5;
        float _1030 = _1003 * 0.5;
        float _1031 = _1013 * 0.5;
        float _1032 = dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031));
        float _1037 = (_1032 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1032);
        float _1045 = (dot(vec3(_306, _307, _308), vec3(_1037 * _1029, _1037 * _1030, _1037 * _1031)) + 1.0) * 0.5;
        float _3675 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1054 = sqrt(((_1030 * _1030) + (_1029 * _1029)) + (_1031 * _1031)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3686 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
        float _1056 = _1055 * 2.0;
        float _1060 = (1.0 - _1055) / (_1055 + 1.0);
        float _3697 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
        float _1070 = ((((1.0 - _1061) * (_1056 + 2.0)) * exp2(log2(isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1056 + 1.0))) + _1061) * _1026;
        float _1071 = _994 * 0.5;
        float _1072 = _1004 * 0.5;
        float _1073 = _1014 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_306, _307, _308), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3708 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1027 + 9.9999997473787516355514526367188e-06);
        float _3719 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3730 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0))) * (_1098 + 1.0))) + _1103) * _1027;
        float _1113 = _995 * 0.5;
        float _1114 = _1005 * 0.5;
        float _1115 = _1015 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_306, _307, _308), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3741 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1028 + 9.9999997473787516355514526367188e-06);
        float _3752 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3763 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0))) * (_1140 + 1.0))) + _1145) * _1028;
        _1162 = _995;
        _1163 = _994;
        _1164 = _993;
        _1165 = _1005;
        _1166 = _1004;
        _1167 = _1003;
        _1168 = _1015;
        _1169 = _1014;
        _1170 = _1013;
        _1171 = _1028;
        _1172 = _1027;
        _1173 = _1026;
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0)));
        _1175 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1176 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
    }
    else
    {
        _1162 = _853;
        _1163 = _853;
        _1164 = _853;
        _1165 = _853;
        _1166 = _853;
        _1167 = _853;
        _1168 = _853;
        _1169 = _853;
        _1170 = _853;
        _1171 = _853;
        _1172 = _853;
        _1173 = _853;
        _1174 = 0.0;
        _1175 = 0.0;
        _1176 = 0.0;
    }
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _865)) + _865;
    float _1187 = (cbModelParam._m0[1u].x * (_1175 - _866)) + _866;
    float _1188 = (cbModelParam._m0[1u].x * (_1176 - _867)) + _867;
    float _1209 = fma(_1188, cbSceneParam._m0[89u].z, fma(_1187, cbSceneParam._m0[89u].y, _1186 * cbSceneParam._m0[89u].x));
    float _1212 = fma(_1188, cbSceneParam._m0[90u].z, fma(_1187, cbSceneParam._m0[90u].y, _1186 * cbSceneParam._m0[90u].x));
    float _1215 = fma(_1188, cbSceneParam._m0[91u].z, fma(_1187, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1186));
    float _1230 = _486 * 0.5;
    float _1231 = _487 * 0.5;
    float _1232 = _488 * 0.5;
    float _1233 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1164, _1167, _1170, _1173));
    float _1236 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1163, _1166, _1169, _1172));
    float _1239 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1273;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1246 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_852, _856, _859, _862));
        float _1250 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_854, _857, _860, _863));
        float _1254 = dot(vec4(_1230, _1231, _1232, 1.0), vec4(_855, _858, _861, _864));
        float _1261 = dot(vec4(cbModelParam._m0[39u]), vec4(_1230, _1231, _1232, 1.0));
        _1273 = dot(vec3(isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)), isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1261) ? 0.0 : (isnan(0.0) ? _1261 : max(0.0, _1261))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1273 = 1.0;
    }
    float _1284;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1275 = dot(vec4(cbModelParam._m0[40u]), vec4(_1230, _1231, _1232, 1.0));
        _1284 = dot(vec3(isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)), isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1275) ? 0.0 : (isnan(0.0) ? _1275 : max(0.0, _1275))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1284 = 1.0;
    }
    float _1288 = (_1284 * cbModelParam._m0[1u].x) + (_1273 * (1.0 - cbModelParam._m0[1u].x));
    float _1298 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _309);
    float _1299 = isnan(_1298) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1298 : min(cbModelParam._m0[25u].z, _1298));
    float _1381;
    float _1383;
    float _1385;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1348 = fma(_550, cbModelParam._m0[13u].z, fma(_546, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _542)) + cbModelParam._m0[13u].w;
        float _1352 = fma(_550, cbModelParam._m0[14u].z, fma(_546, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _542)) + cbModelParam._m0[14u].w;
        float _1356 = fma(_550, cbModelParam._m0[15u].z, fma(_546, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _542)) + cbModelParam._m0[15u].w;
        float _1359 = fma(_488, cbModelParam._m0[13u].z, fma(_487, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _486));
        float _1362 = fma(_488, cbModelParam._m0[14u].z, fma(_487, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _486));
        float _1365 = fma(_488, cbModelParam._m0[15u].z, fma(_487, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _486));
        float _1393;
        if (_1359 > 0.0)
        {
            _1393 = abs((1.0 - _1348) / _1359);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1348 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1393 = frontier_phi_14_12_ladder;
        }
        float _1575;
        if (_1362 > 0.0)
        {
            _1575 = abs((1.0 - _1352) / _1362);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1362 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1352 + 1.0) / _1362);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1575 = frontier_phi_23_19_ladder;
        }
        float _1649;
        if (_1365 > 0.0)
        {
            _1649 = abs((1.0 - _1356) / _1365);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1365 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1356 + 1.0) / _1365);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1649 = frontier_phi_34_30_ladder;
        }
        float _1651 = isnan(_1575) ? _1393 : (isnan(_1393) ? _1575 : min(_1393, _1575));
        float _1652 = isnan(_1649) ? _1651 : (isnan(_1651) ? _1649 : min(_1651, _1649));
        float _1656 = (_1652 * _1359) + _1348;
        float _1657 = (_1652 * _1362) + _1352;
        float _1658 = (_1652 * _1365) + _1356;
        float _1659 = _1652 * 9.9999997473787516355514526367188e-05;
        float _1661 = (-1.0) - _1659;
        float _1663 = _1659 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1658 > _1663) || ((_1658 < _1661) || ((_1657 > _1663) || ((_1657 < _1661) || ((_1656 < _1661) || (_1656 > _1663))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1658, cbModelParam._m0[9u].z, fma(_1657, cbModelParam._m0[9u].y, _1656 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1658, cbModelParam._m0[10u].z, fma(_1657, cbModelParam._m0[10u].y, _1656 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1658, cbModelParam._m0[11u].z, fma(_1657, cbModelParam._m0[11u].y, _1656 * cbModelParam._m0[11u].x))), _1299);
            frontier_phi_13_34_ladder = _1734.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _1734.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _1734.x * cbModelParam._m0[1u].y;
        }
        _1381 = frontier_phi_13_34_ladder_2;
        _1383 = frontier_phi_13_34_ladder_1;
        _1385 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1369 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_486, _487, _488), _1299);
        _1381 = _1369.x * cbModelParam._m0[1u].y;
        _1383 = _1369.y * cbModelParam._m0[1u].y;
        _1385 = _1369.z * cbModelParam._m0[1u].y;
    }
    float _1389 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _309);
    float _1390 = isnan(_1389) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1389 : min(cbModelParam._m0[25u].w, _1389));
    float _1483;
    float _1485;
    float _1487;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1447 = fma(_550, cbModelParam._m0[21u].z, fma(_546, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _542)) + cbModelParam._m0[21u].w;
        float _1451 = fma(_550, cbModelParam._m0[22u].z, fma(_546, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _542)) + cbModelParam._m0[22u].w;
        float _1455 = fma(_550, cbModelParam._m0[23u].z, fma(_546, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _542)) + cbModelParam._m0[23u].w;
        float _1458 = fma(_488, cbModelParam._m0[21u].z, fma(_487, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _486));
        float _1461 = fma(_488, cbModelParam._m0[22u].z, fma(_487, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _486));
        float _1464 = fma(_488, cbModelParam._m0[23u].z, fma(_487, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _486));
        float _1580;
        if (_1458 > 0.0)
        {
            _1580 = abs((1.0 - _1447) / _1458);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1458 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1447 + 1.0) / _1458);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1580 = frontier_phi_25_21_ladder;
        }
        float _1676;
        if (_1461 > 0.0)
        {
            _1676 = abs((1.0 - _1451) / _1461);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1461 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1451 + 1.0) / _1461);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1676 = frontier_phi_36_32_ladder;
        }
        float _1955;
        if (_1464 > 0.0)
        {
            _1955 = abs((1.0 - _1455) / _1464);
        }
        else
        {
            float frontier_phi_45_42_ladder;
            if (_1464 < 0.0)
            {
                frontier_phi_45_42_ladder = abs((_1455 + 1.0) / _1464);
            }
            else
            {
                frontier_phi_45_42_ladder = 5000.0;
            }
            _1955 = frontier_phi_45_42_ladder;
        }
        float _1957 = isnan(_1676) ? _1580 : (isnan(_1580) ? _1676 : min(_1580, _1676));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1458) + _1447;
        float _1963 = (_1958 * _1461) + _1451;
        float _1964 = (_1958 * _1464) + _1455;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1966 = (-1.0) - _1965;
        float _1968 = _1965 + 1.0;
        float frontier_phi_22_45_ladder;
        float frontier_phi_22_45_ladder_1;
        float frontier_phi_22_45_ladder_2;
        if ((_1964 > _1968) || ((_1964 < _1966) || ((_1963 > _1968) || ((_1963 < _1966) || ((_1962 < _1966) || (_1962 > _1968))))))
        {
            frontier_phi_22_45_ladder = 0.0;
            frontier_phi_22_45_ladder_1 = 0.0;
            frontier_phi_22_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2086 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1964, cbModelParam._m0[17u].z, fma(_1963, cbModelParam._m0[17u].y, _1962 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1964, cbModelParam._m0[18u].z, fma(_1963, cbModelParam._m0[18u].y, _1962 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1964, cbModelParam._m0[19u].z, fma(_1963, cbModelParam._m0[19u].y, _1962 * cbModelParam._m0[19u].x))), _1390);
            frontier_phi_22_45_ladder = _2086.z * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_1 = _2086.y * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_2 = _2086.x * cbModelParam._m0[1u].z;
        }
        _1483 = frontier_phi_22_45_ladder_2;
        _1485 = frontier_phi_22_45_ladder_1;
        _1487 = frontier_phi_22_45_ladder;
    }
    else
    {
        vec4 _1467 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_486, _487, _488), _1390);
        _1483 = _1467.x * cbModelParam._m0[1u].z;
        _1485 = _1467.y * cbModelParam._m0[1u].z;
        _1487 = _1467.z * cbModelParam._m0[1u].z;
    }
    float _1500 = (((_513 * _463) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1502 = (((_513 * _465) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1504 = (((_513 * _466) + _514) * _478) * ((cbModelParam._m0[1u].w * (_1487 - _1385)) + _1385);
    float _1507 = fma(_1504, cbSceneParam._m0[89u].z, fma(_1502, cbSceneParam._m0[89u].y, _1500 * cbSceneParam._m0[89u].x));
    float _1510 = fma(_1504, cbSceneParam._m0[90u].z, fma(_1502, cbSceneParam._m0[90u].y, _1500 * cbSceneParam._m0[90u].x));
    float _1513 = fma(_1504, cbSceneParam._m0[91u].z, fma(_1502, cbSceneParam._m0[91u].y, _1500 * cbSceneParam._m0[91u].x));
    uvec4 _1523 = floatBitsToUint(cbInstanceData._m0[_437 + 5u]);
    uint _1525 = _1523.x * 14u;
    uint _1526 = _1525 + 13u;
    float _1533 = _478 + (-1.0);
    float _1538 = (cbLight._m0[_1526].x * _1533) + 1.0;
    float _1539 = (cbLight._m0[_1526].y * _1533) + 1.0;
    float _1540 = (cbLight._m0[_1526].z * _1533) + 1.0;
    float _1541 = (cbLight._m0[_1526].w * _1533) + 1.0;
    uint _1543 = _1525 + 4u;
    float _1555 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_306, _307, _308));
    float _1558 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
    uint _1559 = _1525 + 5u;
    float _1571 = dot(vec3(cbLight._m0[_1525 | 1u].xyz), vec3(_306, _307, _308));
    float _1574 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    float _1639;
    float _1640;
    float _1641;
    if (_310 == 0.0)
    {
        float _3899 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _3910 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1593 = (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0))) * 0.3183098733425140380859375;
        float _1595 = (isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * 0.3183098733425140380859375;
        _1639 = ((cbLight._m0[_1559].x * _1574) * _1595) + ((cbLight._m0[_1543].x * _1558) * _1593);
        _1640 = ((_1574 * cbLight._m0[_1559].y) * _1595) + ((_1558 * cbLight._m0[_1543].y) * _1593);
        _1641 = ((_1574 * cbLight._m0[_1559].z) * _1595) + ((_1558 * cbLight._m0[_1543].z) * _1593);
    }
    else
    {
        float _1605 = _1555 + _310;
        float _1608 = (_310 * 2.0) + 1.0;
        float _1609 = (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) / _1608;
        float _1616 = _1571 + _310;
        float _1618 = (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0))) / _1608;
        _1639 = (((_1618 * cbLight._m0[_1559].x) * _1574) + ((_1609 * cbLight._m0[_1543].x) * _1558)) * 0.3183098733425140380859375;
        _1640 = (((_1618 * cbLight._m0[_1559].y) * _1574) + ((_1609 * cbLight._m0[_1543].y) * _1558)) * 0.3183098733425140380859375;
        _1641 = (((_1618 * cbLight._m0[_1559].z) * _1574) + ((_1609 * cbLight._m0[_1543].z) * _1558)) * 0.3183098733425140380859375;
    }
    uvec4 _1646 = floatBitsToUint(cbLight._m0[_1525 + 12u]);
    bool _1648 = _1646.x == 0u;
    float _1681;
    float _1683;
    float _1685;
    if (_1648)
    {
        _1681 = _1639;
        _1683 = _1640;
        _1685 = _1641;
    }
    else
    {
        uint _1689 = _1525 + 6u;
        float _1705 = (dot(vec3(cbLight._m0[_1525 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1706 = _1705 * _1705;
        float _3931 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
        float _1707 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1708 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1681 = (((cbLight._m0[_1689].x * 0.3183098733425140380859375) * _1707) * _1708) + _1639;
        _1683 = (((cbLight._m0[_1689].y * 0.3183098733425140380859375) * _1707) * _1708) + _1640;
        _1685 = (((cbLight._m0[_1689].z * 0.3183098733425140380859375) * _1707) * _1708) + _1641;
    }
    bool _1688 = _1646.y == 0u;
    float _1743;
    float _1745;
    float _1747;
    if (_1688)
    {
        _1743 = _1681;
        _1745 = _1683;
        _1747 = _1685;
    }
    else
    {
        uint _1926 = _1525 + 7u;
        float _1942 = (dot(vec3(cbLight._m0[_1525 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _3947 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _1945 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _1743 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1681;
        _1745 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1683;
        _1747 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1685;
    }
    uint _1752 = _1525 + 8u;
    float _1768 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1525].w)) * _309) * 0.949999988079071044921875);
    float _1769 = _1768 * _1768;
    float _1770 = cbLight._m0[_1525].x + _388;
    float _1771 = cbLight._m0[_1525].y + _389;
    float _1772 = cbLight._m0[_1525].z + _390;
    float _1776 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
    float _1777 = _1776 * _1770;
    float _1778 = _1776 * _1771;
    float _1779 = _1776 * _1772;
    float _1780 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1525].xyz));
    float _3963 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
    float _3974 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _1784 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _1785 = dot(vec3(_306, _307, _308), vec3(_1777, _1778, _1779));
    float _3985 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _1789 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_1777, _1778, _1779));
    float _3996 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1793 = _1769 * _1769;
    float _1797 = ((_1788 * _1788) * (_1793 + (-1.0))) + 1.0;
    float _1805 = exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0);
    float _1806 = 0.959999978542327880859375 - _460;
    float _1808 = 0.959999978542327880859375 - _461;
    float _1809 = 0.959999978542327880859375 - _462;
    float _1816 = 1.0 - _1769;
    float _1827 = (0.5 / (((_1784 * ((_1783 * _1816) + _1769)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1816) + _1769) * _1783))) * _1783;
    float _4007 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1793 / ((_1797 * _1797) * 3.141590118408203125));
    float _1830 = isnan(1.0) ? _1538 : (isnan(_1538) ? 1.0 : min(_1538, 1.0));
    uint _1840 = _1525 | 1u;
    uint _1844 = _1525 + 9u;
    float _1858 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1840].w)) * _309) * 0.949999988079071044921875);
    float _1859 = _1858 * _1858;
    float _1860 = cbLight._m0[_1840].x + _388;
    float _1861 = cbLight._m0[_1840].y + _389;
    float _1862 = cbLight._m0[_1840].z + _390;
    float _1866 = inversesqrt(dot(vec3(_1860, _1861, _1862), vec3(_1860, _1861, _1862)));
    float _1867 = _1866 * _1860;
    float _1868 = _1866 * _1861;
    float _1869 = _1866 * _1862;
    float _1870 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1840].xyz));
    float _4023 = isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0));
    float _1873 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _1874 = dot(vec3(_306, _307, _308), vec3(_1867, _1868, _1869));
    float _4034 = isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0));
    float _1877 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _1878 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_1867, _1868, _1869));
    float _4045 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0));
    float _1882 = _1859 * _1859;
    float _1886 = ((_1877 * _1877) * (_1882 + (-1.0))) + 1.0;
    float _1893 = exp2(log2(1.0 - (isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0)))) * 5.0);
    float _1900 = 1.0 - _1859;
    float _1910 = (0.5 / (((_1784 * ((_1873 * _1900) + _1859)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _1900) + _1859) * _1873))) * _1873;
    float _4056 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1912 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * (_1882 / ((_1886 * _1886) * 3.141590118408203125));
    float _1913 = isnan(1.0) ? _1539 : (isnan(_1539) ? 1.0 : min(_1539, 1.0));
    float _1923 = (((((_1893 * _1806) + _463) * cbLight._m0[_1844].x) * _1912) * _1913) + (((((_1805 * _1806) + _463) * cbLight._m0[_1752].x) * _1829) * _1830);
    float _1924 = (((((_1893 * _1808) + _465) * cbLight._m0[_1844].y) * _1912) * _1913) + (((((_1805 * _1808) + _465) * cbLight._m0[_1752].y) * _1829) * _1830);
    float _1925 = (((((_1893 * _1809) + _466) * cbLight._m0[_1844].z) * _1912) * _1913) + (((((_1805 * _1809) + _466) * cbLight._m0[_1752].z) * _1829) * _1830);
    float _1981;
    float _1983;
    float _1985;
    if (_1648)
    {
        _1981 = _1923;
        _1983 = _1924;
        _1985 = _1925;
    }
    else
    {
        uint _1987 = _1525 + 2u;
        uint _1991 = _1525 + 10u;
        float _2005 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _309) * 0.949999988079071044921875);
        float _2006 = _2005 * _2005;
        float _2007 = cbLight._m0[_1987].x + _388;
        float _2008 = cbLight._m0[_1987].y + _389;
        float _2009 = cbLight._m0[_1987].z + _390;
        float _2013 = inversesqrt(dot(vec3(_2007, _2008, _2009), vec3(_2007, _2008, _2009)));
        float _2014 = _2013 * _2007;
        float _2015 = _2013 * _2008;
        float _2016 = _2013 * _2009;
        float _2017 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1987].xyz));
        float _4072 = isnan(0.0) ? _2017 : (isnan(_2017) ? 0.0 : max(_2017, 0.0));
        float _2020 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
        float _2021 = dot(vec3(_306, _307, _308), vec3(_2014, _2015, _2016));
        float _4083 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
        float _2024 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _2025 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2014, _2015, _2016));
        float _4094 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
        float _2029 = _2006 * _2006;
        float _2033 = ((_2024 * _2024) * (_2029 + (-1.0))) + 1.0;
        float _2040 = exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0);
        float _2047 = 1.0 - _2006;
        float _2057 = (0.5 / (((_1784 * ((_2020 * _2047) + _2006)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2047) + _2006) * _2020))) * _2020;
        float _4105 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2059 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_2029 / ((_2033 * _2033) * 3.141590118408203125));
        float _2060 = isnan(1.0) ? _1540 : (isnan(_1540) ? 1.0 : min(_1540, 1.0));
        _1981 = (((((_2040 * _1806) + _463) * cbLight._m0[_1991].x) * _2059) * _2060) + _1923;
        _1983 = (((((_2040 * _1808) + _465) * cbLight._m0[_1991].y) * _2059) * _2060) + _1924;
        _1985 = (((((_2040 * _1809) + _466) * cbLight._m0[_1991].z) * _2059) * _2060) + _1925;
    }
    float _2091;
    float _2093;
    float _2095;
    if (_1688)
    {
        _2091 = _1981;
        _2093 = _1983;
        _2095 = _1985;
    }
    else
    {
        uint _2102 = _1525 + 3u;
        uint _2106 = _1525 + 11u;
        float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2102].w)) * _309) * 0.949999988079071044921875);
        float _2121 = _2120 * _2120;
        float _2122 = cbLight._m0[_2102].x + _388;
        float _2123 = cbLight._m0[_2102].y + _389;
        float _2124 = cbLight._m0[_2102].z + _390;
        float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
        float _2129 = _2128 * _2122;
        float _2130 = _2128 * _2123;
        float _2131 = _2128 * _2124;
        float _2132 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2102].xyz));
        float _4121 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        float _2135 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _2136 = dot(vec3(_306, _307, _308), vec3(_2129, _2130, _2131));
        float _4132 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
        float _2139 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _2140 = dot(vec3(cbLight._m0[_2102].xyz), vec3(_2129, _2130, _2131));
        float _4143 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2144 = _2121 * _2121;
        float _2148 = ((_2139 * _2139) * (_2144 + (-1.0))) + 1.0;
        float _2155 = exp2(log2(1.0 - (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) * 5.0);
        float _2162 = 1.0 - _2121;
        float _2172 = (0.5 / (((_1784 * ((_2135 * _2162) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_1784 * _2162) + _2121) * _2135))) * _2135;
        float _4154 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2174 = (isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_2144 / ((_2148 * _2148) * 3.141590118408203125));
        float _2175 = isnan(1.0) ? _1541 : (isnan(_1541) ? 1.0 : min(_1541, 1.0));
        _2091 = (((((_2155 * _1806) + _463) * cbLight._m0[_2106].x) * _2174) * _2175) + _1981;
        _2093 = (((((_2155 * _1808) + _465) * cbLight._m0[_2106].y) * _2174) * _2175) + _1983;
        _2095 = (((((_2155 * _1809) + _466) * cbLight._m0[_2106].z) * _2174) * _2175) + _1985;
    }
    float _2284;
    float _2286;
    float _2288;
    float _2290;
    float _2292;
    float _2294;
    if (_1523.y == 0u)
    {
        float _2224 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2225 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2224;
        float _2226 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2224;
        float _2227 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2224;
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.x;
        uint _2251 = uint((float(_2239.y) * floor(float(uint(cbSceneParam._m0[85u].y * _397) / _2240))) + floor(float(uint(cbSceneParam._m0[85u].x * _396) / _2240)));
        float _2261 = (log2(_2227 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2262 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        uint _2265 = uint(isnan(14.0) ? _2262 : (isnan(_2262) ? 14.0 : min(_2262, 14.0)));
        uvec4 _2270 = texelFetch(g_lightClusterGridBuffer, int(((_2265 << 2u) + (_2251 << 6u)) >> 2u));
        uint _2271 = _2270.x;
        uint _2272 = _2239.z;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        if (((((1u << ((_2272 >> 4u) & 15u)) + 4294967295u) & _2271) == 0u) || ((_2272 & 240u) == 0u))
        {
            _2297 = 0.0;
            _2299 = 0.0;
            _2301 = 0.0;
            _2303 = 0.0;
            _2305 = 0.0;
            _2307 = 0.0;
        }
        else
        {
            float _2298;
            float _2300;
            float _2302;
            float _2304;
            float _2306;
            float _2308;
            float _2476 = 0.0;
            float _2477 = 0.0;
            float _2478 = 0.0;
            float _2479 = 0.0;
            float _2480 = 0.0;
            float _2481 = 0.0;
            uint _2482 = 0u;
            uint _2491;
            bool _2492;
            for (;;)
            {
                _2491 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2482 << 2u)) >> 2u)).x;
                _2492 = _2491 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2492)
                {
                    frontier_phi_64_pred = _2479;
                    frontier_phi_64_pred_1 = _2481;
                    frontier_phi_64_pred_2 = _2480;
                    frontier_phi_64_pred_3 = _2478;
                    frontier_phi_64_pred_4 = _2477;
                    frontier_phi_64_pred_5 = _2476;
                }
                else
                {
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    uint _2659;
                    _2653 = _2476;
                    _2654 = _2477;
                    _2655 = _2478;
                    _2656 = _2479;
                    _2657 = _2480;
                    _2658 = _2481;
                    _2659 = _2491;
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    for (;;)
                    {
                        uint _2663 = uint(findLSB(_2659)) + (_2482 << 5u);
                        uint _2660 = (_2659 + 4294967295u) & _2659;
                        uint _2665 = _2663 * 48u;
                        vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2665)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2665 + 3u)).x));
                        uint _2685 = (_2663 * 48u) + 4u;
                        vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2685)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2685 + 3u)).x));
                        float _2699 = _2698.x;
                        float _2700 = _2698.y;
                        float _2701 = _2698.z;
                        uint _2704 = (_2663 * 48u) + 8u;
                        vec3 _2715 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x));
                        uint _2720 = (_2663 * 48u) + 12u;
                        vec2 _2728 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x));
                        float _2734 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
                        float _2735 = _2734 * _2225;
                        float _2736 = _2734 * _2226;
                        float _2737 = _2734 * _2227;
                        float _2738 = _2679.x - _2225;
                        float _2739 = _2679.y - _2226;
                        float _2740 = _2679.z - _2227;
                        float _2741 = dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740));
                        float _2744 = inversesqrt(_2741);
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2748 = dot(vec3(_418, _421, _424), vec3(_2745, _2746, _2747));
                        float _2753 = 1.0 - (_2741 * _2679.w);
                        float _4180 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                        float _2754 = isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0));
                        float _2755 = sqrt(_2741) * _2698.w;
                        float _2758 = 1.39999997615814208984375 / (_2755 + 1.39999997615814208984375);
                        float _2759 = _2758 * _2758;
                        float _2760 = 1.0 - _2759;
                        float _2762 = (_2760 * _2760) * _310;
                        float _2765 = ((_2760 * _2748) + _2759) + _2762;
                        float _2770 = _2755 * _2755;
                        float _2775 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2754) / (((_2762 * 2.0) + 1.0) * ((_2770 * 0.699999988079071044921875) + 1.0));
                        float _2779 = dot(vec3(_2745, _2746, _2747), vec3(_2735, _2736, _2737));
                        float _4196 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2786 = dot(vec3((-0.0) - _2735, (-0.0) - _2736, (-0.0) - _2737), vec3(_418, _421, _424)) + 1.0;
                        float _2788 = (isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0))) * 0.5;
                        float _2795 = ((_2788 * _2788) * _2728.x) * exp2((_2728.y * 32.0) * log2(isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))));
                        float _2797 = _310 / (_310 + 1.0);
                        float _2813 = (-0.0) - _2225;
                        float _2814 = (-0.0) - _2226;
                        float _2815 = (-0.0) - _2227;
                        float _2819 = inversesqrt(dot(vec3(_2813, _2814, _2815), vec3(_2813, _2814, _2815)));
                        float _2820 = _2819 * _2813;
                        float _2821 = _2819 * _2814;
                        float _2822 = _2819 * _2815;
                        float _2830 = exp2(log2(1.0 / ((_2770 * 3.5) + 5.0)) * 0.25);
                        float _2831 = 1.0 - _494;
                        float _2838 = sqrt(1.0 - ((1.0 - (_2831 * _2831)) * (1.0 - (_2830 * _2830))));
                        float _2839 = _2838 * _2838;
                        float _2840 = _2839 * _2839;
                        float _2841 = _2820 + _2745;
                        float _2842 = _2821 + _2746;
                        float _2843 = _2822 + _2747;
                        float _2847 = inversesqrt(dot(vec3(_2841, _2842, _2843), vec3(_2841, _2842, _2843)));
                        float _2851 = dot(vec3(_418, _421, _424), vec3(_2820, _2821, _2822));
                        float _4212 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
                        float _2854 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _2855 = dot(vec3(_418, _421, _424), vec3(_2847 * _2841, _2847 * _2842, _2847 * _2843));
                        float _4223 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2858 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                        float _2862 = ((_2858 * _2858) * (_2840 + (-1.0))) + 1.0;
                        float _2863 = _2758 * _2839;
                        float _2864 = _2863 * _2863;
                        float _2867 = ((1.0 - _2864) * _2748) + _2864;
                        float _4234 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
                        float _2868 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                        float _2869 = 1.0 - _2839;
                        float _2879 = (0.5 / (((_2868 * ((_2854 * _2869) + _2839)) + 9.9999999392252902907785028219223e-09) + (((_2868 * _2869) + _2839) * _2854))) * _2868;
                        float _4245 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                        float _2890 = (((_2840 * 3.1415927410125732421875) * (isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0)))) / ((_2862 * _2862) * ((_2770 * 2.1991131305694580078125) + 3.141590118408203125))) * _2754;
                        _2587 = (((((_2699 * 0.3183098733425140380859375) * _2797) * _2795) + _2699) * _2775) + _2656;
                        _2588 = (((((_2700 * 0.3183098733425140380859375) * _2797) * _2795) + _2700) * _2775) + _2657;
                        _2589 = (((((_2701 * 0.3183098733425140380859375) * _2797) * _2795) + _2701) * _2775) + _2658;
                        _2584 = (_2890 * _2715.x) + _2653;
                        _2585 = (_2890 * _2715.y) + _2654;
                        _2586 = (_2890 * _2715.z) + _2655;
                        if (_2660 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2653 = _2584;
                            _2654 = _2585;
                            _2655 = _2586;
                            _2656 = _2587;
                            _2657 = _2588;
                            _2658 = _2589;
                            _2659 = _2660;
                        }
                    }
                    frontier_phi_64_pred = _2587;
                    frontier_phi_64_pred_1 = _2589;
                    frontier_phi_64_pred_2 = _2588;
                    frontier_phi_64_pred_3 = _2586;
                    frontier_phi_64_pred_4 = _2585;
                    frontier_phi_64_pred_5 = _2584;
                }
                _2304 = frontier_phi_64_pred;
                _2308 = frontier_phi_64_pred_1;
                _2306 = frontier_phi_64_pred_2;
                _2302 = frontier_phi_64_pred_3;
                _2300 = frontier_phi_64_pred_4;
                _2298 = frontier_phi_64_pred_5;
                uint _2483 = _2482 + 1u;
                if (_2483 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2476 = _2298;
                    _2477 = _2300;
                    _2478 = _2302;
                    _2479 = _2304;
                    _2480 = _2306;
                    _2481 = _2308;
                    _2482 = _2483;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2297 = _2298;
            _2299 = _2300;
            _2301 = _2302;
            _2303 = _2304;
            _2305 = _2306;
            _2307 = _2308;
        }
        uvec4 _2311 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2312 = _2311.z;
        uint _2314 = (_2312 >> 8u) & 15u;
        float _2444;
        float _2446;
        float _2448;
        float _2450;
        float _2452;
        float _2454;
        if (((4294967295u << _2314) & _2271) == 0u)
        {
            _2444 = _2297;
            _2446 = _2299;
            _2448 = _2301;
            _2450 = _2303;
            _2452 = _2305;
            _2454 = _2307;
        }
        else
        {
            float _2469 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
            float _2470 = _2469 * _2225;
            float _2471 = _2469 * _2226;
            float _2472 = _2469 * _2227;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2314 < ((_2312 >> 12u) & 15u))
            {
                float _2445;
                float _2447;
                float _2449;
                float _2451;
                float _2453;
                float _2455;
                float _2636 = _2297;
                float _2637 = _2299;
                float _2638 = _2301;
                float _2639 = _2303;
                float _2640 = _2305;
                float _2641 = _2307;
                uint _2642 = _2314;
                uint _2651;
                bool _2652;
                for (;;)
                {
                    _2651 = texelFetch(g_lightClassification, int((((_2265 << 5u) + (_2251 << 9u)) + (_2642 << 2u)) >> 2u)).x;
                    _2652 = _2651 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2652)
                    {
                        frontier_phi_72_pred = _2641;
                        frontier_phi_72_pred_1 = _2640;
                        frontier_phi_72_pred_2 = _2639;
                        frontier_phi_72_pred_3 = _2638;
                        frontier_phi_72_pred_4 = _2637;
                        frontier_phi_72_pred_5 = _2636;
                    }
                    else
                    {
                        float _2933;
                        float _2934;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3282;
                        float _2946 = _2636;
                        float _2947 = _2637;
                        float _2948 = _2638;
                        float _2949 = _2639;
                        float _2950 = _2640;
                        float _2951 = _2641;
                        uint _2952 = _2651;
                        uint _2953;
                        vec4 _2978;
                        float _2979;
                        vec4 _2994;
                        float _2995;
                        float _2996;
                        float _2997;
                        vec3 _3009;
                        vec2 _3018;
                        vec4 _3034;
                        vec4 _3050;
                        float _3097;
                        bool _3098;
                        for (;;)
                        {
                            uint _2963 = ((_2642 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2952));
                            _2953 = (_2952 + 4294967295u) & _2952;
                            uint _2965 = _2963 * 40u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            _2979 = _2978.w;
                            uint _2981 = (_2963 * 40u) + 4u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            _2995 = _2994.x;
                            _2996 = _2994.y;
                            _2997 = _2994.z;
                            uint _2999 = (_2963 * 40u) + 8u;
                            _3009 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x));
                            uint _3011 = (_2963 * 40u) + 12u;
                            _3018 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_3011)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3011 + 1u)).x));
                            uint _3021 = (_2963 * 40u) + 16u;
                            _3034 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3021 + 3u)).x));
                            uint _3037 = (_2963 * 40u) + 20u;
                            _3050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3037 + 3u)).x));
                            uint _3053 = (_2963 * 40u) + 24u;
                            vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            uint _3072 = (_2963 * 40u) + 28u;
                            vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3097 = fma(_2227, _3085.z, fma(_2226, _3085.y, _3085.x * _2225)) + _3085.w;
                            _3098 = !((fma(_2227, _3066.z, fma(_2226, _3066.y, _3066.x * _2225)) + _3066.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3098)
                            {
                                float _3124 = _2978.x - _2225;
                                float _3125 = _2978.y - _2226;
                                float _3126 = _2978.z - _2227;
                                float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                                float _3130 = inversesqrt(_3127);
                                float _3131 = _3130 * _3124;
                                float _3132 = _3130 * _3125;
                                float _3133 = _3130 * _3126;
                                float _3137 = 1.0 - (_3127 / (_2979 * _2979));
                                float _4256 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3142 = sqrt(_3127) * _2994.w;
                                float _3144 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                                float _3145 = _3144 * _3144;
                                float _3146 = 1.0 - _3145;
                                float _3148 = (_3146 * _3146) * _310;
                                float _3151 = ((_3146 * dot(vec3(_3131, _3132, _3133), vec3(_418, _421, _424))) + _3145) + _3148;
                                float _3156 = _3142 * _3142;
                                float _3161 = (fma(_2227, _3034.z, fma(_2226, _3034.y, _3034.x * _2225)) + _3034.w) / _3097;
                                float _3162 = (fma(_2227, _3050.z, fma(_2226, _3050.y, _3050.x * _2225)) + _3050.w) / _3097;
                                float _3166 = 1.0 - dot(vec2(_3161, _3162), vec2(_3161, _3162));
                                float _4272 = isnan(0.0) ? _3166 : (isnan(_3166) ? 0.0 : max(_3166, 0.0));
                                float _3167 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3168 = _3167 * (((isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0))) * _3138) / (((_3148 * 2.0) + 1.0) * ((_3156 * 0.699999988079071044921875) + 1.0)));
                                float _3169 = (-0.0) - _2470;
                                float _3170 = (-0.0) - _2471;
                                float _3171 = (-0.0) - _2472;
                                float _3172 = dot(vec3(_3131, _3132, _3133), vec3(_2470, _2471, _2472));
                                float _4283 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3179 = dot(vec3(_3169, _3170, _3171), vec3(_418, _421, _424)) + 1.0;
                                float _3181 = (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))) * 0.5;
                                float _3188 = ((_3181 * _3181) * _3018.x) * exp2((_3018.y * 32.0) * log2(isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))));
                                float _3190 = _310 / (_310 + 1.0);
                                float _3211 = exp2(log2(1.0 / ((_3156 * 3.5) + 5.0)) * 0.25);
                                float _3212 = 1.0 - _494;
                                float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                                float _3220 = _3219 * _3219;
                                float _3221 = _3220 * _3220;
                                float _3222 = _3131 - _2470;
                                float _3223 = _3132 - _2471;
                                float _3224 = _3133 - _2472;
                                float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                                float _3232 = dot(vec3(_418, _421, _424), vec3(_3169, _3170, _3171));
                                float _4299 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                                float _3235 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
                                float _3236 = dot(vec3(_418, _421, _424), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                                float _4310 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3239 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
                                float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                                float _3244 = _3144 * _3220;
                                float _3245 = _3244 * _3244;
                                float _3251 = ((1.0 - _3245) * dot(vec3(_418, _421, _424), vec3(_3131, _3132, _3133))) + _3245;
                                float _4321 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                                float _3252 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
                                float _3253 = 1.0 - _3220;
                                float _3263 = (0.5 / (((_3252 * ((_3235 * _3253) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3252 * _3253) + _3220) * _3235))) * _3252;
                                float _4332 = isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0));
                                float _3273 = (_3167 * _3138) * (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0)))) / ((_3243 * _3243) * ((_3156 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_2997 * 0.3183098733425140380859375) * _3190) * _3188) + _2997) * _3168;
                                frontier_phi_78_pred_1 = ((((_2996 * 0.3183098733425140380859375) * _3190) * _3188) + _2996) * _3168;
                                frontier_phi_78_pred_2 = ((((_2995 * 0.3183098733425140380859375) * _3190) * _3188) + _2995) * _3168;
                                frontier_phi_78_pred_3 = _3273 * _3009.z;
                                frontier_phi_78_pred_4 = _3273 * _3009.y;
                                frontier_phi_78_pred_5 = _3273 * _3009.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3282 = frontier_phi_78_pred;
                            _3281 = frontier_phi_78_pred_1;
                            _3280 = frontier_phi_78_pred_2;
                            _3279 = frontier_phi_78_pred_3;
                            _3278 = frontier_phi_78_pred_4;
                            _3277 = frontier_phi_78_pred_5;
                            _2936 = _3280 + _2949;
                            _2937 = _3281 + _2950;
                            _2938 = _3282 + _2951;
                            _2933 = _3277 + _2946;
                            _2934 = _3278 + _2947;
                            _2935 = _3279 + _2948;
                            if (_2953 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2946 = _2933;
                                _2947 = _2934;
                                _2948 = _2935;
                                _2949 = _2936;
                                _2950 = _2937;
                                _2951 = _2938;
                                _2952 = _2953;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2938;
                        frontier_phi_72_pred_1 = _2937;
                        frontier_phi_72_pred_2 = _2936;
                        frontier_phi_72_pred_3 = _2935;
                        frontier_phi_72_pred_4 = _2934;
                        frontier_phi_72_pred_5 = _2933;
                    }
                    _2455 = frontier_phi_72_pred;
                    _2453 = frontier_phi_72_pred_1;
                    _2451 = frontier_phi_72_pred_2;
                    _2449 = frontier_phi_72_pred_3;
                    _2447 = frontier_phi_72_pred_4;
                    _2445 = frontier_phi_72_pred_5;
                    uint _2643 = _2642 + 1u;
                    if (_2643 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2636 = _2445;
                        _2637 = _2447;
                        _2638 = _2449;
                        _2639 = _2451;
                        _2640 = _2453;
                        _2641 = _2455;
                        _2642 = _2643;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2449;
                frontier_phi_58_59_ladder_1 = _2455;
                frontier_phi_58_59_ladder_2 = _2453;
                frontier_phi_58_59_ladder_3 = _2451;
                frontier_phi_58_59_ladder_4 = _2447;
                frontier_phi_58_59_ladder_5 = _2445;
            }
            else
            {
                frontier_phi_58_59_ladder = _2301;
                frontier_phi_58_59_ladder_1 = _2307;
                frontier_phi_58_59_ladder_2 = _2305;
                frontier_phi_58_59_ladder_3 = _2303;
                frontier_phi_58_59_ladder_4 = _2299;
                frontier_phi_58_59_ladder_5 = _2297;
            }
            _2444 = frontier_phi_58_59_ladder_5;
            _2446 = frontier_phi_58_59_ladder_4;
            _2448 = frontier_phi_58_59_ladder;
            _2450 = frontier_phi_58_59_ladder_3;
            _2452 = frontier_phi_58_59_ladder_2;
            _2454 = frontier_phi_58_59_ladder_1;
        }
        float _2459 = isnan(1.0) ? _478 : (isnan(_478) ? 1.0 : min(_478, 1.0));
        _2284 = (_2459 * _2450) + _1743;
        _2286 = (_2459 * _2452) + _1745;
        _2288 = (_2459 * _2454) + _1747;
        _2290 = ((_2444 * _463) * _2459) + _2091;
        _2292 = ((_2446 * _465) * _2459) + _2093;
        _2294 = ((_2448 * _466) * _2459) + _2095;
    }
    else
    {
        _2284 = _1743;
        _2286 = _1745;
        _2288 = _1747;
        _2290 = _2091;
        _2292 = _2093;
        _2294 = _2095;
    }
    float _2383;
    float _2384;
    float _2385;
    if (_310 > 0.0)
    {
        uint _2318 = _1525 + 4u;
        float _2324 = (-0.0) - _388;
        float _2326 = (-0.0) - _389;
        float _2327 = (-0.0) - _390;
        float _2328 = dot(vec3(cbLight._m0[_1525].xyz), vec3(_2324, _2326, _2327));
        float _4348 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
        float _2332 = _489 + 1.0;
        float _2334 = (isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0))) * 0.5;
        float _2339 = _2334 * _2334;
        float _2340 = _2339 * exp2(log2(isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0))) * 32.0);
        float _2342 = _310 / (_310 + 1.0);
        float _2343 = isnan(_1538) ? 1.0 : (isnan(1.0) ? _1538 : min(1.0, _1538));
        uint _2353 = _1525 + 5u;
        float _2359 = dot(vec3(cbLight._m0[_1840].xyz), vec3(_2324, _2326, _2327));
        float _4369 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
        float _2366 = _2339 * exp2(log2(isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0))) * 32.0);
        float _2367 = isnan(_1539) ? 1.0 : (isnan(1.0) ? _1539 : min(1.0, _1539));
        _2383 = ((((_2366 * cbLight._m0[_2353].x) * _2342) * _2367) + (((_2340 * cbLight._m0[_2318].x) * _2342) * _2343)) * 0.3183098733425140380859375;
        _2384 = ((((_2366 * cbLight._m0[_2353].y) * _2342) * _2367) + (((_2340 * cbLight._m0[_2318].y) * _2342) * _2343)) * 0.3183098733425140380859375;
        _2385 = ((((_2366 * cbLight._m0[_2353].z) * _2342) * _2367) + (((_2340 * cbLight._m0[_2318].z) * _2342) * _2343)) * 0.3183098733425140380859375;
    }
    else
    {
        _2383 = 0.0;
        _2384 = 0.0;
        _2385 = 0.0;
    }
    float _4385 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _4396 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4407 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    uint _2407 = _437 + 6u;
    float _2415 = _396 / cbSceneParam._m0[86u].x;
    float _2416 = _397 / cbSceneParam._m0[86u].y;
    vec4 _2430 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, (log2((isnan(cbSceneParam._m0[77u].w) ? _330 : (isnan(_330) ? cbSceneParam._m0[77u].w : min(_330, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2432 = _2430.x;
    float _2433 = _2430.y;
    float _2434 = _2430.z;
    float _2435 = _2430.w;
    float _2534;
    float _2536;
    float _2538;
    float _2540;
    if (_330 > cbSceneParam._m0[78u].w)
    {
        float _2497 = isnan(_330) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _330 : min(cbSceneParam._m0[80u].w, _330));
        float _2498 = _2497 / _330;
        float _2509 = _2498 * _381;
        float _2510 = _382 * _2498;
        float _2511 = (-0.0) - _2510;
        float _2512 = _2498 * _383;
        float _2514 = (cbSceneParam._m0[77u].w * _2511) / _2497;
        float _2515 = _2514 + cbSceneParam._m0[79u].w;
        float _2516 = cbSceneParam._m0[79u].w - _2510;
        float _2522 = sqrt(((_2509 * _2509) + (_2510 * _2510)) + (_2512 * _2512));
        float _2525 = (1.0 - (cbSceneParam._m0[77u].w / _2497)) * _2522;
        float _2530 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2532 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2895;
        if (abs((_2511 - _2514) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2895 = ((((_2515 > 0.0) ? exp2(_2530 * _2515) : (2.0 - exp2(_2532 * _2515))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2525;
        }
        else
        {
            float _2609 = 1.0 / cbSceneParam._m0[80u].x;
            float _2610 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : max(_2515, _2516));
            float _2611 = isnan(_2516) ? _2515 : (isnan(_2515) ? _2516 : min(_2515, _2516));
            float _2620 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : min(_2610, 0.0));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            _2895 = ((abs(_2522 / _2511) * cbSceneParam._m0[80u].y) * ((((_2620 - _2621) * 2.0) - ((exp2(_2530 * (isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0)))) - exp2(_2530 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0))))) * _2609)) - ((exp2(_2532 * _2620) - exp2(_2532 * _2621)) * _2609))) + (_2525 * cbSceneParam._m0[80u].z);
        }
        vec4 _2897 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2415, _2416, 1.0), 0.0);
        float _2906 = exp2((_2895 * (-1.44269502162933349609375)) * (1.0 - _2897.w));
        float _2907 = log2(_2906);
        float _2923 = log2(_2435);
        _2534 = (exp2(_2923 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].x)) * _2897.x) / cbSceneParam._m0[78u].x)) + _2432;
        _2536 = (exp2(_2923 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].y)) * _2897.y) / cbSceneParam._m0[78u].y)) + _2433;
        _2538 = (exp2(_2923 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2907 * cbSceneParam._m0[78u].z)) * _2897.z) / cbSceneParam._m0[78u].z)) + _2434;
        _2540 = _2906 * _2435;
    }
    else
    {
        _2534 = _2432;
        _2536 = _2433;
        _2538 = _2434;
        _2540 = _2435;
    }
    float _2552 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2553 = _2552 == 3.0;
    float _2554 = log2(_2540);
    float _2561 = exp2(_2554 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4385 : (isnan(_4385) ? 1.0 : min(_4385, 1.0))) * ((_2284 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _478)) + _2383)) + ((_2290 + ((isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2562 = exp2(_2554 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4396 : (isnan(_4396) ? 1.0 : min(_4396, 1.0))) * ((_2286 + ((isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0))) * _478)) + _2384)) + ((_2292 + ((isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2563 = exp2(_2554 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4407 : (isnan(_4407) ? 1.0 : min(_4407, 1.0))) * ((_2288 + ((isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0))) * _478)) + _2385)) + ((_2294 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1288)) * cbPerFrame._m0[3u].x));
    float _2572 = (_2552 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2572 * (_2553 ? _2561 : (_2561 + (cbSceneParam._m0[72u].w * _2534)));
    SV_Target.y = _2572 * (_2553 ? _2562 : (_2562 + (cbSceneParam._m0[72u].w * _2536)));
    SV_Target.z = _2572 * (_2553 ? _2563 : (_2563 + (cbSceneParam._m0[72u].w * _2538)));
    SV_Target.w = cbInstanceData._m0[_2407].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2407].w;
}


