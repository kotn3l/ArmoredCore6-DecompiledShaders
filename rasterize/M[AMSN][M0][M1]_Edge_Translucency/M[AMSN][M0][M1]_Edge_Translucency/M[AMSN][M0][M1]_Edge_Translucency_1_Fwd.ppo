#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _818;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.x * cbMtdParam._m0[9u].x;
    float _227 = _220.y * cbMtdParam._m0[9u].y;
    float _228 = _220.z * cbMtdParam._m0[9u].z;
    vec4 _240 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _244 = _240.z;
    float _248 = (_240.x * 2.0) + (-1.0);
    float _250 = (_240.y * 2.0) + (-1.0);
    float _251 = dot(vec2(_248, _250), vec2(_248, _250));
    float _3360 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _257 = sqrt(1.0 - (isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))));
    vec4 _269 = texture(sampler2D(M_AMSN_M0_M1_Edge_Translucency_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _276 = cbMtdParam._m0[10u].x * _269.x;
    float _279 = fma(_257, _190 * NORMAL.x, fma(_250, _197 * TANGENT.x, (_183 * _176) * _248));
    float _282 = fma(_257, _190 * NORMAL.y, fma(_250, _197 * TANGENT.y, (_183 * _177) * _248));
    float _285 = fma(_257, _190 * NORMAL.z, fma(_250, _197 * TANGENT.z, (_183 * _178) * _248));
    float _289 = inversesqrt(dot(vec3(_279, _282, _285), vec3(_279, _282, _285)));
    float _290 = _289 * _279;
    float _291 = _289 * _282;
    float _292 = _289 * _285;
    float _3371 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _293 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
    float _294 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _3387 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3398 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3409 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _313 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _354 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _364 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _354);
    float _365 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _354);
    float _366 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _354);
    float _370 = inversesqrt(dot(vec3(_364, _365, _366), vec3(_364, _365, _366)));
    float _371 = _364 * _370;
    float _372 = _365 * _370;
    float _373 = _366 * _370;
    float _379 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _380 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _401 = fma(_292, cbSceneParam._m0[5u].z, fma(_291, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _290));
    float _404 = fma(_292, cbSceneParam._m0[6u].z, fma(_291, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _290));
    float _407 = fma(_292, cbSceneParam._m0[7u].z, fma(_291, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _290));
    uint _420 = uint(roundEven(NORMAL.w)) * 13u;
    uint _423 = (_420 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _429 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_423].x;
    float _430 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_423].y;
    float _431 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0)))) * cbInstanceData._m0[_423].z;
    float _3420 = isnan(0.0) ? _429 : (isnan(_429) ? 0.0 : max(_429, 0.0));
    float _432 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _433 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    float _3442 = isnan(0.0) ? _431 : (isnan(_431) ? 0.0 : max(_431, 0.0));
    float _434 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
    vec4 _443 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _379, cbSceneParam._m0[86u].y * _380));
    float _446 = _443.x * TEXCOORD.z;
    float _447 = dot(vec3(_290, _291, _292), vec3(_371, _372, _373));
    float _450 = _447 * 2.0;
    float _454 = (_450 * _290) - _371;
    float _455 = (_450 * _291) - _372;
    float _456 = (_450 * _292) - _373;
    float _457 = dot(vec3(_371, _372, _373), vec3(_290, _291, _292));
    float _460 = abs(_457);
    float _3453 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _462 = sqrt(_293);
    float _475 = exp2((_462 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_462 * 3.0));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _817;
    float _819;
    float _820;
    float _821;
    float _822;
    float _823;
    float _824;
    float _825;
    float _826;
    float _827;
    float _828;
    float _829;
    float _830;
    float _831;
    float _832;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _542 = fma(_515, cbModelParam._m0[26u].z, fma(_511, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _507));
        float _546 = fma(_515, cbModelParam._m0[27u].z, fma(_511, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _507));
        float _550 = fma(_515, cbModelParam._m0[28u].z, fma(_511, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _507));
        float _575 = _507 + _290;
        float _576 = _511 + _291;
        float _577 = _515 + _292;
        float _587 = fma(_577, cbModelParam._m0[26u].z, fma(_576, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _575)) - _542;
        float _588 = fma(_577, cbModelParam._m0[27u].z, fma(_576, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _575)) - _546;
        float _589 = fma(_577, cbModelParam._m0[28u].z, fma(_576, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _575)) - _550;
        float _593 = inversesqrt(dot(vec3(_587, _588, _589), vec3(_587, _588, _589)));
        float _606 = ((_593 * _587) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_542 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _607 = ((_593 * _588) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_546 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _608 = ((_593 * _589) / cbModelParam._m0[34u].z) + ((((((_550 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _611 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_606, _607, _608), 0.0);
        vec4 _618 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_606, _607, _608), 0.0);
        vec4 _625 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_606, _607, _608), 0.0);
        vec4 _632 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_606, _607, _608), 0.0);
        float _645 = exp2((_611.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_611.x + (-0.5));
        float _647 = _645 * (_611.y + (-0.5));
        float _648 = _645 * (_611.z + (-0.5));
        float _655 = exp2((_618.w + (-0.5)) * 20.0) * 2.0;
        float _656 = _655 * (_618.x + (-0.5));
        float _657 = _655 * (_618.y + (-0.5));
        float _658 = _655 * (_618.z + (-0.5));
        float _665 = exp2((_625.w + (-0.5)) * 20.0) * 2.0;
        float _666 = _665 * (_625.x + (-0.5));
        float _667 = _665 * (_625.y + (-0.5));
        float _668 = _665 * (_625.z + (-0.5));
        float _675 = exp2((_632.w + (-0.5)) * 20.0) * 2.0;
        float _676 = _675 * (_632.x + (-0.5));
        float _677 = _675 * (_632.y + (-0.5));
        float _678 = _675 * (_632.z + (-0.5));
        float _679 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
        float _680 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
        float _681 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
        float _682 = _646 * 0.5;
        float _683 = _656 * 0.5;
        float _684 = _666 * 0.5;
        float _685 = dot(vec3(_682, _683, _684), vec3(_682, _683, _684));
        float _690 = (_685 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_685);
        float _699 = (dot(vec3(_290, _291, _292), vec3(_690 * _682, _690 * _683, _690 * _684)) + 1.0) * 0.5;
        float _3479 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
        float _709 = sqrt(((_683 * _683) + (_682 * _682)) + (_684 * _684)) / (_679 + 9.9999997473787516355514526367188e-06);
        float _3490 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _710 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _711 = _710 * 2.0;
        float _715 = (1.0 - _710) / (_710 + 1.0);
        float _3501 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
        float _716 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _725 = ((((1.0 - _716) * (_711 + 2.0)) * exp2(log2(isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0))) * (_711 + 1.0))) + _716) * _679;
        float _726 = _647 * 0.5;
        float _727 = _657 * 0.5;
        float _728 = _667 * 0.5;
        float _729 = dot(vec3(_726, _727, _728), vec3(_726, _727, _728));
        float _734 = (_729 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_729);
        float _742 = (dot(vec3(_290, _291, _292), vec3(_734 * _726, _734 * _727, _734 * _728)) + 1.0) * 0.5;
        float _3512 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _751 = sqrt(((_727 * _727) + (_726 * _726)) + (_728 * _728)) / (_680 + 9.9999997473787516355514526367188e-06);
        float _3523 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _752 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _753 = _752 * 2.0;
        float _757 = (1.0 - _752) / (_752 + 1.0);
        float _3534 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _758 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _767 = ((((1.0 - _758) * (_753 + 2.0)) * exp2(log2(isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_753 + 1.0))) + _758) * _680;
        float _768 = _648 * 0.5;
        float _769 = _658 * 0.5;
        float _770 = _668 * 0.5;
        float _771 = dot(vec3(_768, _769, _770), vec3(_768, _769, _770));
        float _776 = (_771 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_771);
        float _784 = (dot(vec3(_290, _291, _292), vec3(_776 * _768, _776 * _769, _776 * _770)) + 1.0) * 0.5;
        float _3545 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _793 = sqrt(((_769 * _769) + (_768 * _768)) + (_770 * _770)) / (_681 + 9.9999997473787516355514526367188e-06);
        float _3556 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        float _794 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _795 = _794 * 2.0;
        float _799 = (1.0 - _794) / (_794 + 1.0);
        float _3567 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _809 = ((((1.0 - _800) * (_795 + 2.0)) * exp2(log2(isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * (_795 + 1.0))) + _800) * _681;
        _817 = _648;
        _819 = _647;
        _820 = _646;
        _821 = _658;
        _822 = _657;
        _823 = _656;
        _824 = _668;
        _825 = _667;
        _826 = _666;
        _827 = _681;
        _828 = _680;
        _829 = _679;
        _830 = cbModelParam._m0[36u].z * (isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0)));
        _831 = cbModelParam._m0[36u].z * (isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0)));
        _832 = cbModelParam._m0[36u].z * (isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0)));
    }
    else
    {
        _817 = _818;
        _819 = _818;
        _820 = _818;
        _821 = _818;
        _822 = _818;
        _823 = _818;
        _824 = _818;
        _825 = _818;
        _826 = _818;
        _827 = _818;
        _828 = _818;
        _829 = _818;
        _830 = 0.0;
        _831 = 0.0;
        _832 = 0.0;
    }
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _858 = fma(_515, cbModelParam._m0[30u].z, fma(_511, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _507));
        float _862 = fma(_515, cbModelParam._m0[31u].z, fma(_511, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _507));
        float _866 = fma(_515, cbModelParam._m0[32u].z, fma(_511, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _507));
        float _889 = _507 + _290;
        float _890 = _511 + _291;
        float _891 = _515 + _292;
        float _901 = fma(_891, cbModelParam._m0[30u].z, fma(_890, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _889)) - _858;
        float _902 = fma(_891, cbModelParam._m0[31u].z, fma(_890, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _889)) - _862;
        float _903 = fma(_891, cbModelParam._m0[32u].z, fma(_890, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _889)) - _866;
        float _907 = inversesqrt(dot(vec3(_901, _902, _903), vec3(_901, _902, _903)));
        float _920 = ((_907 * _901) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_858 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _921 = ((_907 * _902) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_862 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _922 = ((_907 * _903) / cbModelParam._m0[35u].z) + ((((((_866 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        vec4 _945 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_920, _921, _922), 0.0);
        float _957 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_924.x + (-0.5));
        float _959 = _957 * (_924.y + (-0.5));
        float _960 = _957 * (_924.z + (-0.5));
        float _967 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_931.x + (-0.5));
        float _969 = _967 * (_931.y + (-0.5));
        float _970 = _967 * (_931.z + (-0.5));
        float _977 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_938.x + (-0.5));
        float _979 = _977 * (_938.y + (-0.5));
        float _980 = _977 * (_938.z + (-0.5));
        float _987 = exp2((_945.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_945.x + (-0.5));
        float _989 = _987 * (_945.y + (-0.5));
        float _990 = _987 * (_945.z + (-0.5));
        float _991 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _992 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _993 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _994 = _958 * 0.5;
        float _995 = _968 * 0.5;
        float _996 = _978 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_290, _291, _292), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3608 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_991 + 9.9999997473787516355514526367188e-06);
        float _3619 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3630 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) * (_1021 + 1.0))) + _1026) * _991;
        float _1036 = _959 * 0.5;
        float _1037 = _969 * 0.5;
        float _1038 = _979 * 0.5;
        float _1039 = dot(vec3(_1036, _1037, _1038), vec3(_1036, _1037, _1038));
        float _1044 = (_1039 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1039);
        float _1052 = (dot(vec3(_290, _291, _292), vec3(_1044 * _1036, _1044 * _1037, _1044 * _1038)) + 1.0) * 0.5;
        float _3641 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1061 = sqrt(((_1037 * _1037) + (_1036 * _1036)) + (_1038 * _1038)) / (_992 + 9.9999997473787516355514526367188e-06);
        float _3652 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1063 = _1062 * 2.0;
        float _1067 = (1.0 - _1062) / (_1062 + 1.0);
        float _3663 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1077 = ((((1.0 - _1068) * (_1063 + 2.0)) * exp2(log2(isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1063 + 1.0))) + _1068) * _992;
        float _1078 = _960 * 0.5;
        float _1079 = _970 * 0.5;
        float _1080 = _980 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1094 = (dot(vec3(_290, _291, _292), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3674 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1103 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_993 + 9.9999997473787516355514526367188e-06);
        float _3685 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1105 = _1104 * 2.0;
        float _1109 = (1.0 - _1104) / (_1104 + 1.0);
        float _3696 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1119 = ((((1.0 - _1110) * (_1105 + 2.0)) * exp2(log2(isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0))) * (_1105 + 1.0))) + _1110) * _993;
        _1127 = _960;
        _1128 = _959;
        _1129 = _958;
        _1130 = _970;
        _1131 = _969;
        _1132 = _968;
        _1133 = _980;
        _1134 = _979;
        _1135 = _978;
        _1136 = _993;
        _1137 = _992;
        _1138 = _991;
        _1139 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
        _1140 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0)));
        _1141 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0)));
    }
    else
    {
        _1127 = _818;
        _1128 = _818;
        _1129 = _818;
        _1130 = _818;
        _1131 = _818;
        _1132 = _818;
        _1133 = _818;
        _1134 = _818;
        _1135 = _818;
        _1136 = _818;
        _1137 = _818;
        _1138 = _818;
        _1139 = 0.0;
        _1140 = 0.0;
        _1141 = 0.0;
    }
    float _1151 = (cbModelParam._m0[1u].x * (_1139 - _830)) + _830;
    float _1152 = (cbModelParam._m0[1u].x * (_1140 - _831)) + _831;
    float _1153 = (cbModelParam._m0[1u].x * (_1141 - _832)) + _832;
    float _1174 = fma(_1153, cbSceneParam._m0[89u].z, fma(_1152, cbSceneParam._m0[89u].y, _1151 * cbSceneParam._m0[89u].x));
    float _1177 = fma(_1153, cbSceneParam._m0[90u].z, fma(_1152, cbSceneParam._m0[90u].y, _1151 * cbSceneParam._m0[90u].x));
    float _1180 = fma(_1153, cbSceneParam._m0[91u].z, fma(_1152, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1151));
    float _1195 = _454 * 0.5;
    float _1196 = _455 * 0.5;
    float _1197 = _456 * 0.5;
    float _1198 = dot(vec4(_1195, _1196, _1197, 1.0), vec4(_1129, _1132, _1135, _1138));
    float _1201 = dot(vec4(_1195, _1196, _1197, 1.0), vec4(_1128, _1131, _1134, _1137));
    float _1204 = dot(vec4(_1195, _1196, _1197, 1.0), vec4(_1127, _1130, _1133, _1136));
    float _1238;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1211 = dot(vec4(_1195, _1196, _1197, 1.0), vec4(_817, _821, _824, _827));
        float _1215 = dot(vec4(_1195, _1196, _1197, 1.0), vec4(_819, _822, _825, _828));
        float _1219 = dot(vec4(_1195, _1196, _1197, 1.0), vec4(_820, _823, _826, _829));
        float _1226 = dot(vec4(cbModelParam._m0[39u]), vec4(_1195, _1196, _1197, 1.0));
        _1238 = dot(vec3(isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)), isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)), isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1226) ? 0.0 : (isnan(0.0) ? _1226 : max(0.0, _1226))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1238 = 1.0;
    }
    float _1249;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1240 = dot(vec4(cbModelParam._m0[40u]), vec4(_1195, _1196, _1197, 1.0));
        _1249 = dot(vec3(isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)), isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1240) ? 0.0 : (isnan(0.0) ? _1240 : max(0.0, _1240))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1249 = 1.0;
    }
    float _1253 = (_1249 * cbModelParam._m0[1u].x) + (_1238 * (1.0 - cbModelParam._m0[1u].x));
    float _1263 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _293);
    float _1264 = isnan(_1263) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1263 : min(cbModelParam._m0[25u].z, _1263));
    float _1346;
    float _1348;
    float _1350;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1313 = fma(_515, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _507)) + cbModelParam._m0[13u].w;
        float _1317 = fma(_515, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _507)) + cbModelParam._m0[14u].w;
        float _1321 = fma(_515, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _507)) + cbModelParam._m0[15u].w;
        float _1324 = fma(_456, cbModelParam._m0[13u].z, fma(_455, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _454));
        float _1327 = fma(_456, cbModelParam._m0[14u].z, fma(_455, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _454));
        float _1330 = fma(_456, cbModelParam._m0[15u].z, fma(_455, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _454));
        float _1358;
        if (_1324 > 0.0)
        {
            _1358 = abs((1.0 - _1313) / _1324);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1324 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1313 + 1.0) / _1324);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1358 = frontier_phi_14_12_ladder;
        }
        float _1538;
        if (_1327 > 0.0)
        {
            _1538 = abs((1.0 - _1317) / _1327);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1327 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1317 + 1.0) / _1327);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1538 = frontier_phi_23_19_ladder;
        }
        float _1612;
        if (_1330 > 0.0)
        {
            _1612 = abs((1.0 - _1321) / _1330);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1330 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1321 + 1.0) / _1330);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1612 = frontier_phi_34_30_ladder;
        }
        float _1614 = isnan(_1538) ? _1358 : (isnan(_1358) ? _1538 : min(_1358, _1538));
        float _1615 = isnan(_1612) ? _1614 : (isnan(_1614) ? _1612 : min(_1614, _1612));
        float _1619 = (_1615 * _1324) + _1313;
        float _1620 = (_1615 * _1327) + _1317;
        float _1621 = (_1615 * _1330) + _1321;
        float _1622 = _1615 * 9.9999997473787516355514526367188e-05;
        float _1624 = (-1.0) - _1622;
        float _1626 = _1622 + 1.0;
        float frontier_phi_13_34_ladder;
        float frontier_phi_13_34_ladder_1;
        float frontier_phi_13_34_ladder_2;
        if ((_1621 > _1626) || ((_1621 < _1624) || ((_1620 > _1626) || ((_1620 < _1624) || ((_1619 < _1624) || (_1619 > _1626))))))
        {
            frontier_phi_13_34_ladder = 0.0;
            frontier_phi_13_34_ladder_1 = 0.0;
            frontier_phi_13_34_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1697 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1621, cbModelParam._m0[9u].z, fma(_1620, cbModelParam._m0[9u].y, _1619 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1621, cbModelParam._m0[10u].z, fma(_1620, cbModelParam._m0[10u].y, _1619 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1621, cbModelParam._m0[11u].z, fma(_1620, cbModelParam._m0[11u].y, _1619 * cbModelParam._m0[11u].x))), _1264);
            frontier_phi_13_34_ladder = _1697.z * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_1 = _1697.y * cbModelParam._m0[1u].y;
            frontier_phi_13_34_ladder_2 = _1697.x * cbModelParam._m0[1u].y;
        }
        _1346 = frontier_phi_13_34_ladder_2;
        _1348 = frontier_phi_13_34_ladder_1;
        _1350 = frontier_phi_13_34_ladder;
    }
    else
    {
        vec4 _1334 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_454, _455, _456), _1264);
        _1346 = _1334.x * cbModelParam._m0[1u].y;
        _1348 = _1334.y * cbModelParam._m0[1u].y;
        _1350 = _1334.z * cbModelParam._m0[1u].y;
    }
    float _1354 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _293);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1354 : min(cbModelParam._m0[25u].w, _1354));
    float _1448;
    float _1450;
    float _1452;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1412 = fma(_515, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _507)) + cbModelParam._m0[21u].w;
        float _1416 = fma(_515, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _507)) + cbModelParam._m0[22u].w;
        float _1420 = fma(_515, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _507)) + cbModelParam._m0[23u].w;
        float _1423 = fma(_456, cbModelParam._m0[21u].z, fma(_455, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _454));
        float _1426 = fma(_456, cbModelParam._m0[22u].z, fma(_455, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _454));
        float _1429 = fma(_456, cbModelParam._m0[23u].z, fma(_455, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _454));
        float _1543;
        if (_1423 > 0.0)
        {
            _1543 = abs((1.0 - _1412) / _1423);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1412 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1543 = frontier_phi_25_21_ladder;
        }
        float _1639;
        if (_1426 > 0.0)
        {
            _1639 = abs((1.0 - _1416) / _1426);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1416 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1639 = frontier_phi_36_32_ladder;
        }
        float _1907;
        if (_1429 > 0.0)
        {
            _1907 = abs((1.0 - _1420) / _1429);
        }
        else
        {
            float frontier_phi_45_42_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_45_42_ladder = abs((_1420 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_45_42_ladder = 5000.0;
            }
            _1907 = frontier_phi_45_42_ladder;
        }
        float _1909 = isnan(_1639) ? _1543 : (isnan(_1543) ? _1639 : min(_1543, _1639));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1423) + _1412;
        float _1915 = (_1910 * _1426) + _1416;
        float _1916 = (_1910 * _1429) + _1420;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1917;
        float _1920 = _1917 + 1.0;
        float frontier_phi_22_45_ladder;
        float frontier_phi_22_45_ladder_1;
        float frontier_phi_22_45_ladder_2;
        if ((_1916 > _1920) || ((_1916 < _1918) || ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 < _1918) || (_1914 > _1920))))))
        {
            frontier_phi_22_45_ladder = 0.0;
            frontier_phi_22_45_ladder_1 = 0.0;
            frontier_phi_22_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2034 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1916, cbModelParam._m0[17u].z, fma(_1915, cbModelParam._m0[17u].y, _1914 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1916, cbModelParam._m0[18u].z, fma(_1915, cbModelParam._m0[18u].y, _1914 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1916, cbModelParam._m0[19u].z, fma(_1915, cbModelParam._m0[19u].y, _1914 * cbModelParam._m0[19u].x))), _1355);
            frontier_phi_22_45_ladder = _2034.z * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_1 = _2034.y * cbModelParam._m0[1u].z;
            frontier_phi_22_45_ladder_2 = _2034.x * cbModelParam._m0[1u].z;
        }
        _1448 = frontier_phi_22_45_ladder_2;
        _1450 = frontier_phi_22_45_ladder_1;
        _1452 = frontier_phi_22_45_ladder;
    }
    else
    {
        vec4 _1432 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_454, _455, _456), _1355);
        _1448 = _1432.x * cbModelParam._m0[1u].z;
        _1450 = _1432.y * cbModelParam._m0[1u].z;
        _1452 = _1432.z * cbModelParam._m0[1u].z;
    }
    float _1464 = ((((1.0 - _475) * ((_462 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_475 * _462)) * _446;
    float _1465 = _1464 * ((cbModelParam._m0[1u].w * (_1448 - _1346)) + _1346);
    float _1466 = _1464 * ((cbModelParam._m0[1u].w * (_1450 - _1348)) + _1348);
    float _1467 = _1464 * ((cbModelParam._m0[1u].w * (_1452 - _1350)) + _1350);
    float _1470 = fma(_1467, cbSceneParam._m0[89u].z, fma(_1466, cbSceneParam._m0[89u].y, _1465 * cbSceneParam._m0[89u].x));
    float _1473 = fma(_1467, cbSceneParam._m0[90u].z, fma(_1466, cbSceneParam._m0[90u].y, _1465 * cbSceneParam._m0[90u].x));
    float _1476 = fma(_1467, cbSceneParam._m0[91u].z, fma(_1466, cbSceneParam._m0[91u].y, _1465 * cbSceneParam._m0[91u].x));
    uvec4 _1486 = floatBitsToUint(cbInstanceData._m0[_420 + 5u]);
    uint _1488 = _1486.x * 14u;
    uint _1489 = _1488 + 13u;
    float _1496 = _446 + (-1.0);
    float _1501 = (cbLight._m0[_1489].x * _1496) + 1.0;
    float _1502 = (cbLight._m0[_1489].y * _1496) + 1.0;
    float _1503 = (cbLight._m0[_1489].z * _1496) + 1.0;
    float _1504 = (cbLight._m0[_1489].w * _1496) + 1.0;
    uint _1506 = _1488 + 4u;
    float _1518 = dot(vec3(cbLight._m0[_1488].xyz), vec3(_290, _291, _292));
    float _1521 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
    uint _1522 = _1488 + 5u;
    float _1534 = dot(vec3(cbLight._m0[_1488 | 1u].xyz), vec3(_290, _291, _292));
    float _1537 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
    float _1602;
    float _1603;
    float _1604;
    if (_294 == 0.0)
    {
        float _3832 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _3843 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1556 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.3183098733425140380859375;
        float _1558 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * 0.3183098733425140380859375;
        _1602 = ((cbLight._m0[_1522].x * _1537) * _1558) + ((cbLight._m0[_1506].x * _1521) * _1556);
        _1603 = ((_1537 * cbLight._m0[_1522].y) * _1558) + ((_1521 * cbLight._m0[_1506].y) * _1556);
        _1604 = ((_1537 * cbLight._m0[_1522].z) * _1558) + ((_1521 * cbLight._m0[_1506].z) * _1556);
    }
    else
    {
        float _1568 = _1518 + _294;
        float _1571 = (_294 * 2.0) + 1.0;
        float _1572 = (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) / _1571;
        float _1579 = _1534 + _294;
        float _1581 = (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0))) / _1571;
        _1602 = (((_1581 * cbLight._m0[_1522].x) * _1537) + ((_1572 * cbLight._m0[_1506].x) * _1521)) * 0.3183098733425140380859375;
        _1603 = (((_1581 * cbLight._m0[_1522].y) * _1537) + ((_1572 * cbLight._m0[_1506].y) * _1521)) * 0.3183098733425140380859375;
        _1604 = (((_1581 * cbLight._m0[_1522].z) * _1537) + ((_1572 * cbLight._m0[_1506].z) * _1521)) * 0.3183098733425140380859375;
    }
    uvec4 _1609 = floatBitsToUint(cbLight._m0[_1488 + 12u]);
    bool _1611 = _1609.x == 0u;
    float _1644;
    float _1646;
    float _1648;
    if (_1611)
    {
        _1644 = _1602;
        _1646 = _1603;
        _1648 = _1604;
    }
    else
    {
        uint _1652 = _1488 + 6u;
        float _1668 = (dot(vec3(cbLight._m0[_1488 + 2u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1669 = _1668 * _1668;
        float _3864 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
        float _1671 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
        _1644 = (((cbLight._m0[_1652].x * 0.3183098733425140380859375) * _1670) * _1671) + _1602;
        _1646 = (((cbLight._m0[_1652].y * 0.3183098733425140380859375) * _1670) * _1671) + _1603;
        _1648 = (((cbLight._m0[_1652].z * 0.3183098733425140380859375) * _1670) * _1671) + _1604;
    }
    bool _1651 = _1609.y == 0u;
    float _1706;
    float _1708;
    float _1710;
    if (_1651)
    {
        _1706 = _1644;
        _1708 = _1646;
        _1710 = _1648;
    }
    else
    {
        uint _1878 = _1488 + 7u;
        float _1894 = (dot(vec3(cbLight._m0[_1488 + 3u].xyz), vec3(_290, _291, _292)) * 0.5) + 0.5;
        float _1895 = _1894 * _1894;
        float _3880 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
        float _1896 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1897 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
        _1706 = (((cbLight._m0[_1878].x * 0.3183098733425140380859375) * _1896) * _1897) + _1644;
        _1708 = (((cbLight._m0[_1878].y * 0.3183098733425140380859375) * _1896) * _1897) + _1646;
        _1710 = (((cbLight._m0[_1878].z * 0.3183098733425140380859375) * _1896) * _1897) + _1648;
    }
    uint _1715 = _1488 + 8u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1488].w)) * _293) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1488].x + _371;
    float _1734 = cbLight._m0[_1488].y + _372;
    float _1735 = cbLight._m0[_1488].z + _373;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1488].xyz));
    float _3896 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _3907 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _1747 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _1748 = dot(vec3(_290, _291, _292), vec3(_1740, _1741, _1742));
    float _3918 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1488].xyz), vec3(_1740, _1741, _1742));
    float _3929 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1732 * _1732;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1771 = (exp2(log2(1.0 - (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1772 = 1.0 - _1732;
    float _1783 = (0.5 / (((_1747 * ((_1746 * _1772) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1772) + _1732) * _1746))) * _1746;
    float _3940 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
    float _1785 = (isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    float _1786 = isnan(1.0) ? _1501 : (isnan(_1501) ? 1.0 : min(_1501, 1.0));
    uint _1796 = _1488 | 1u;
    uint _1800 = _1488 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _293) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1796].x + _371;
    float _1817 = cbLight._m0[_1796].y + _372;
    float _1818 = cbLight._m0[_1796].z + _373;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1796].xyz));
    float _3956 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _1830 = dot(vec3(_290, _291, _292), vec3(_1823, _1824, _1825));
    float _3967 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1823, _1824, _1825));
    float _3978 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1851 = (exp2(log2(1.0 - (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1852 = 1.0 - _1815;
    float _1862 = (0.5 / (((_1747 * ((_1829 * _1852) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1852) + _1815) * _1829))) * _1829;
    float _3989 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1864 = (isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1865 = isnan(1.0) ? _1502 : (isnan(_1502) ? 1.0 : min(_1502, 1.0));
    float _1875 = (((_1851 * cbLight._m0[_1800].x) * _1864) * _1865) + (((_1771 * cbLight._m0[_1715].x) * _1785) * _1786);
    float _1876 = (((_1851 * cbLight._m0[_1800].y) * _1864) * _1865) + (((_1771 * cbLight._m0[_1715].y) * _1785) * _1786);
    float _1877 = (((_1851 * cbLight._m0[_1800].z) * _1864) * _1865) + (((_1771 * cbLight._m0[_1715].z) * _1785) * _1786);
    float _1933;
    float _1935;
    float _1937;
    if (_1611)
    {
        _1933 = _1875;
        _1935 = _1876;
        _1937 = _1877;
    }
    else
    {
        uint _1939 = _1488 + 2u;
        uint _1943 = _1488 + 10u;
        float _1957 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _293) * 0.949999988079071044921875);
        float _1958 = _1957 * _1957;
        float _1959 = cbLight._m0[_1939].x + _371;
        float _1960 = cbLight._m0[_1939].y + _372;
        float _1961 = cbLight._m0[_1939].z + _373;
        float _1965 = inversesqrt(dot(vec3(_1959, _1960, _1961), vec3(_1959, _1960, _1961)));
        float _1966 = _1965 * _1959;
        float _1967 = _1965 * _1960;
        float _1968 = _1965 * _1961;
        float _1969 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_1939].xyz));
        float _4005 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1972 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1973 = dot(vec3(_290, _291, _292), vec3(_1966, _1967, _1968));
        float _4016 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1976 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1977 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_1966, _1967, _1968));
        float _4027 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
        float _1981 = _1958 * _1958;
        float _1985 = ((_1976 * _1976) * (_1981 + (-1.0))) + 1.0;
        float _1994 = (exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _1995 = 1.0 - _1958;
        float _2005 = (0.5 / (((_1747 * ((_1972 * _1995) + _1958)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1995) + _1958) * _1972))) * _1972;
        float _4038 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2007 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1981 / ((_1985 * _1985) * 3.141590118408203125));
        float _2008 = isnan(1.0) ? _1503 : (isnan(_1503) ? 1.0 : min(_1503, 1.0));
        _1933 = (((_1994 * cbLight._m0[_1943].x) * _2007) * _2008) + _1875;
        _1935 = (((_1994 * cbLight._m0[_1943].y) * _2007) * _2008) + _1876;
        _1937 = (((_1994 * cbLight._m0[_1943].z) * _2007) * _2008) + _1877;
    }
    float _2039;
    float _2041;
    float _2043;
    if (_1651)
    {
        _2039 = _1933;
        _2041 = _1935;
        _2043 = _1937;
    }
    else
    {
        uint _2050 = _1488 + 3u;
        uint _2054 = _1488 + 11u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _293) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _371;
        float _2071 = cbLight._m0[_2050].y + _372;
        float _2072 = cbLight._m0[_2050].z + _373;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_290, _291, _292), vec3(cbLight._m0[_2050].xyz));
        float _4054 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2084 = dot(vec3(_290, _291, _292), vec3(_2077, _2078, _2079));
        float _4065 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4076 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2105 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2106 = 1.0 - _2069;
        float _2116 = (0.5 / (((_1747 * ((_2083 * _2106) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2106) + _2069) * _2083))) * _2083;
        float _4087 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2118 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2119 = isnan(1.0) ? _1504 : (isnan(_1504) ? 1.0 : min(_1504, 1.0));
        _2039 = (((_2105 * cbLight._m0[_2054].x) * _2118) * _2119) + _1933;
        _2041 = (((_2105 * cbLight._m0[_2054].y) * _2118) * _2119) + _1935;
        _2043 = (((_2105 * cbLight._m0[_2054].z) * _2118) * _2119) + _1937;
    }
    float _2228;
    float _2230;
    float _2232;
    float _2234;
    float _2236;
    float _2238;
    if (_1486.y == 0u)
    {
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2168;
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2168;
        float _2171 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2168;
        uvec4 _2183 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2184 = _2183.x;
        uint _2195 = uint((float(_2183.y) * floor(float(uint(cbSceneParam._m0[85u].y * _380) / _2184))) + floor(float(uint(cbSceneParam._m0[85u].x * _379) / _2184)));
        float _2205 = (log2(_2171 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2206 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
        uint _2209 = uint(isnan(14.0) ? _2206 : (isnan(_2206) ? 14.0 : min(_2206, 14.0)));
        uvec4 _2214 = texelFetch(g_lightClusterGridBuffer, int(((_2209 << 2u) + (_2195 << 6u)) >> 2u));
        uint _2215 = _2214.x;
        uint _2216 = _2183.z;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        if (((((1u << ((_2216 >> 4u) & 15u)) + 4294967295u) & _2215) == 0u) || ((_2216 & 240u) == 0u))
        {
            _2241 = 0.0;
            _2243 = 0.0;
            _2245 = 0.0;
            _2247 = 0.0;
            _2249 = 0.0;
            _2251 = 0.0;
        }
        else
        {
            float _2242;
            float _2244;
            float _2246;
            float _2248;
            float _2250;
            float _2252;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            float _2423 = 0.0;
            float _2424 = 0.0;
            float _2425 = 0.0;
            uint _2426 = 0u;
            uint _2435;
            bool _2436;
            for (;;)
            {
                _2435 = texelFetch(g_lightClassification, int((((_2209 << 5u) + (_2195 << 9u)) + (_2426 << 2u)) >> 2u)).x;
                _2436 = _2435 == 0u;
                float frontier_phi_64_pred;
                float frontier_phi_64_pred_1;
                float frontier_phi_64_pred_2;
                float frontier_phi_64_pred_3;
                float frontier_phi_64_pred_4;
                float frontier_phi_64_pred_5;
                if (_2436)
                {
                    frontier_phi_64_pred = _2423;
                    frontier_phi_64_pred_1 = _2425;
                    frontier_phi_64_pred_2 = _2424;
                    frontier_phi_64_pred_3 = _2422;
                    frontier_phi_64_pred_4 = _2421;
                    frontier_phi_64_pred_5 = _2420;
                }
                else
                {
                    float _2597;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    uint _2603;
                    _2597 = _2420;
                    _2598 = _2421;
                    _2599 = _2422;
                    _2600 = _2423;
                    _2601 = _2424;
                    _2602 = _2425;
                    _2603 = _2435;
                    float _2528;
                    float _2529;
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    for (;;)
                    {
                        uint _2607 = uint(findLSB(_2603)) + (_2426 << 5u);
                        uint _2604 = (_2603 + 4294967295u) & _2603;
                        uint _2609 = _2607 * 48u;
                        vec4 _2623 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2609)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 3u)).x));
                        uint _2629 = (_2607 * 48u) + 4u;
                        vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2629)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2629 + 3u)).x));
                        float _2643 = _2642.x;
                        float _2644 = _2642.y;
                        float _2645 = _2642.z;
                        uint _2648 = (_2607 * 48u) + 8u;
                        vec3 _2659 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x));
                        uint _2664 = (_2607 * 48u) + 12u;
                        vec2 _2672 = uintBitsToFloat(uvec2(texelFetch(g_PointLightRenderingBuffer, int(_2664)).x, texelFetch(g_PointLightRenderingBuffer, int(_2664 + 1u)).x));
                        float _2678 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
                        float _2679 = _2678 * _2169;
                        float _2680 = _2678 * _2170;
                        float _2681 = _2678 * _2171;
                        float _2682 = _2623.x - _2169;
                        float _2683 = _2623.y - _2170;
                        float _2684 = _2623.z - _2171;
                        float _2685 = dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684));
                        float _2688 = inversesqrt(_2685);
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2692 = dot(vec3(_401, _404, _407), vec3(_2689, _2690, _2691));
                        float _2697 = 1.0 - (_2685 * _2623.w);
                        float _4113 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2698 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2699 = sqrt(_2685) * _2642.w;
                        float _2702 = 1.39999997615814208984375 / (_2699 + 1.39999997615814208984375);
                        float _2703 = _2702 * _2702;
                        float _2704 = 1.0 - _2703;
                        float _2706 = (_2704 * _2704) * _294;
                        float _2709 = ((_2704 * _2692) + _2703) + _2706;
                        float _2714 = _2699 * _2699;
                        float _2719 = ((isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0))) * _2698) / (((_2706 * 2.0) + 1.0) * ((_2714 * 0.699999988079071044921875) + 1.0));
                        float _2723 = dot(vec3(_2689, _2690, _2691), vec3(_2679, _2680, _2681));
                        float _4129 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2730 = dot(vec3((-0.0) - _2679, (-0.0) - _2680, (-0.0) - _2681), vec3(_401, _404, _407)) + 1.0;
                        float _2732 = (isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0))) * 0.5;
                        float _2739 = ((_2732 * _2732) * _2672.x) * exp2((_2672.y * 32.0) * log2(isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))));
                        float _2741 = _294 / (_294 + 1.0);
                        float _2757 = (-0.0) - _2169;
                        float _2758 = (-0.0) - _2170;
                        float _2759 = (-0.0) - _2171;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2764 = _2763 * _2757;
                        float _2765 = _2763 * _2758;
                        float _2766 = _2763 * _2759;
                        float _2774 = exp2(log2(1.0 / ((_2714 * 3.5) + 5.0)) * 0.25);
                        float _2775 = 1.0 - _462;
                        float _2782 = sqrt(1.0 - ((1.0 - (_2775 * _2775)) * (1.0 - (_2774 * _2774))));
                        float _2783 = _2782 * _2782;
                        float _2784 = _2783 * _2783;
                        float _2785 = _2764 + _2689;
                        float _2786 = _2765 + _2690;
                        float _2787 = _2766 + _2691;
                        float _2791 = inversesqrt(dot(vec3(_2785, _2786, _2787), vec3(_2785, _2786, _2787)));
                        float _2795 = dot(vec3(_401, _404, _407), vec3(_2764, _2765, _2766));
                        float _4145 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2798 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
                        float _2799 = dot(vec3(_401, _404, _407), vec3(_2791 * _2785, _2791 * _2786, _2791 * _2787));
                        float _4156 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2802 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2806 = ((_2802 * _2802) * (_2784 + (-1.0))) + 1.0;
                        float _2807 = _2702 * _2783;
                        float _2808 = _2807 * _2807;
                        float _2811 = ((1.0 - _2808) * _2692) + _2808;
                        float _4167 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                        float _2812 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                        float _2813 = 1.0 - _2783;
                        float _2823 = (0.5 / (((_2812 * ((_2798 * _2813) + _2783)) + 9.9999999392252902907785028219223e-09) + (((_2812 * _2813) + _2783) * _2798))) * _2812;
                        float _4178 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
                        float _2834 = (((_2784 * 3.1415927410125732421875) * (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) / ((_2806 * _2806) * ((_2714 * 2.1991131305694580078125) + 3.141590118408203125))) * _2698;
                        _2531 = (((((_2643 * 0.3183098733425140380859375) * _2741) * _2739) + _2643) * _2719) + _2600;
                        _2532 = (((((_2644 * 0.3183098733425140380859375) * _2741) * _2739) + _2644) * _2719) + _2601;
                        _2533 = (((((_2645 * 0.3183098733425140380859375) * _2741) * _2739) + _2645) * _2719) + _2602;
                        _2528 = (_2834 * _2659.x) + _2597;
                        _2529 = (_2834 * _2659.y) + _2598;
                        _2530 = (_2834 * _2659.z) + _2599;
                        if (_2604 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2597 = _2528;
                            _2598 = _2529;
                            _2599 = _2530;
                            _2600 = _2531;
                            _2601 = _2532;
                            _2602 = _2533;
                            _2603 = _2604;
                        }
                    }
                    frontier_phi_64_pred = _2531;
                    frontier_phi_64_pred_1 = _2533;
                    frontier_phi_64_pred_2 = _2532;
                    frontier_phi_64_pred_3 = _2530;
                    frontier_phi_64_pred_4 = _2529;
                    frontier_phi_64_pred_5 = _2528;
                }
                _2248 = frontier_phi_64_pred;
                _2252 = frontier_phi_64_pred_1;
                _2250 = frontier_phi_64_pred_2;
                _2246 = frontier_phi_64_pred_3;
                _2244 = frontier_phi_64_pred_4;
                _2242 = frontier_phi_64_pred_5;
                uint _2427 = _2426 + 1u;
                if (_2427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2420 = _2242;
                    _2421 = _2244;
                    _2422 = _2246;
                    _2423 = _2248;
                    _2424 = _2250;
                    _2425 = _2252;
                    _2426 = _2427;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2241 = _2242;
            _2243 = _2244;
            _2245 = _2246;
            _2247 = _2248;
            _2249 = _2250;
            _2251 = _2252;
        }
        uvec4 _2255 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2256 = _2255.z;
        uint _2258 = (_2256 >> 8u) & 15u;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        if (((4294967295u << _2258) & _2215) == 0u)
        {
            _2388 = _2241;
            _2390 = _2243;
            _2392 = _2245;
            _2394 = _2247;
            _2396 = _2249;
            _2398 = _2251;
        }
        else
        {
            float _2413 = inversesqrt(dot(vec3(_2169, _2170, _2171), vec3(_2169, _2170, _2171)));
            float _2414 = _2413 * _2169;
            float _2415 = _2413 * _2170;
            float _2416 = _2413 * _2171;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2258 < ((_2256 >> 12u) & 15u))
            {
                float _2389;
                float _2391;
                float _2393;
                float _2395;
                float _2397;
                float _2399;
                float _2580 = _2241;
                float _2581 = _2243;
                float _2582 = _2245;
                float _2583 = _2247;
                float _2584 = _2249;
                float _2585 = _2251;
                uint _2586 = _2258;
                uint _2595;
                bool _2596;
                for (;;)
                {
                    _2595 = texelFetch(g_lightClassification, int((((_2209 << 5u) + (_2195 << 9u)) + (_2586 << 2u)) >> 2u)).x;
                    _2596 = _2595 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2596)
                    {
                        frontier_phi_72_pred = _2585;
                        frontier_phi_72_pred_1 = _2584;
                        frontier_phi_72_pred_2 = _2583;
                        frontier_phi_72_pred_3 = _2582;
                        frontier_phi_72_pred_4 = _2581;
                        frontier_phi_72_pred_5 = _2580;
                    }
                    else
                    {
                        float _2877;
                        float _2878;
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _2890 = _2580;
                        float _2891 = _2581;
                        float _2892 = _2582;
                        float _2893 = _2583;
                        float _2894 = _2584;
                        float _2895 = _2585;
                        uint _2896 = _2595;
                        uint _2897;
                        vec4 _2922;
                        float _2923;
                        vec4 _2938;
                        float _2939;
                        float _2940;
                        float _2941;
                        vec3 _2953;
                        vec2 _2962;
                        vec4 _2978;
                        vec4 _2994;
                        float _3041;
                        bool _3042;
                        for (;;)
                        {
                            uint _2907 = ((_2586 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2896));
                            _2897 = (_2896 + 4294967295u) & _2896;
                            uint _2909 = _2907 * 40u;
                            _2922 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2909)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2909 + 3u)).x));
                            _2923 = _2922.w;
                            uint _2925 = (_2907 * 40u) + 4u;
                            _2938 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2925)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2925 + 3u)).x));
                            _2939 = _2938.x;
                            _2940 = _2938.y;
                            _2941 = _2938.z;
                            uint _2943 = (_2907 * 40u) + 8u;
                            _2953 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x));
                            uint _2955 = (_2907 * 40u) + 12u;
                            _2962 = uintBitsToFloat(uvec2(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x));
                            uint _2965 = (_2907 * 40u) + 16u;
                            _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            uint _2981 = (_2907 * 40u) + 20u;
                            _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            uint _2997 = (_2907 * 40u) + 24u;
                            vec4 _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3016 = (_2907 * 40u) + 28u;
                            vec4 _3029 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3016)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3016 + 3u)).x));
                            _3041 = fma(_2171, _3029.z, fma(_2170, _3029.y, _3029.x * _2169)) + _3029.w;
                            _3042 = !((fma(_2171, _3010.z, fma(_2170, _3010.y, _3010.x * _2169)) + _3010.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3042)
                            {
                                float _3068 = _2922.x - _2169;
                                float _3069 = _2922.y - _2170;
                                float _3070 = _2922.z - _2171;
                                float _3071 = dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070));
                                float _3074 = inversesqrt(_3071);
                                float _3075 = _3074 * _3068;
                                float _3076 = _3074 * _3069;
                                float _3077 = _3074 * _3070;
                                float _3081 = 1.0 - (_3071 / (_2923 * _2923));
                                float _4189 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3086 = sqrt(_3071) * _2938.w;
                                float _3088 = 1.39999997615814208984375 / (_3086 + 1.39999997615814208984375);
                                float _3089 = _3088 * _3088;
                                float _3090 = 1.0 - _3089;
                                float _3092 = (_3090 * _3090) * _294;
                                float _3095 = ((_3090 * dot(vec3(_3075, _3076, _3077), vec3(_401, _404, _407))) + _3089) + _3092;
                                float _3100 = _3086 * _3086;
                                float _3105 = (fma(_2171, _2978.z, fma(_2170, _2978.y, _2978.x * _2169)) + _2978.w) / _3041;
                                float _3106 = (fma(_2171, _2994.z, fma(_2170, _2994.y, _2994.x * _2169)) + _2994.w) / _3041;
                                float _3110 = 1.0 - dot(vec2(_3105, _3106), vec2(_3105, _3106));
                                float _4205 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3111 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3112 = _3111 * (((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3082) / (((_3092 * 2.0) + 1.0) * ((_3100 * 0.699999988079071044921875) + 1.0)));
                                float _3113 = (-0.0) - _2414;
                                float _3114 = (-0.0) - _2415;
                                float _3115 = (-0.0) - _2416;
                                float _3116 = dot(vec3(_3075, _3076, _3077), vec3(_2414, _2415, _2416));
                                float _4216 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3123 = dot(vec3(_3113, _3114, _3115), vec3(_401, _404, _407)) + 1.0;
                                float _3125 = (isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * 0.5;
                                float _3132 = ((_3125 * _3125) * _2962.x) * exp2((_2962.y * 32.0) * log2(isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))));
                                float _3134 = _294 / (_294 + 1.0);
                                float _3155 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                                float _3156 = 1.0 - _462;
                                float _3163 = sqrt(1.0 - ((1.0 - (_3156 * _3156)) * (1.0 - (_3155 * _3155))));
                                float _3164 = _3163 * _3163;
                                float _3165 = _3164 * _3164;
                                float _3166 = _3075 - _2414;
                                float _3167 = _3076 - _2415;
                                float _3168 = _3077 - _2416;
                                float _3172 = inversesqrt(dot(vec3(_3166, _3167, _3168), vec3(_3166, _3167, _3168)));
                                float _3176 = dot(vec3(_401, _404, _407), vec3(_3113, _3114, _3115));
                                float _4232 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3179 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3180 = dot(vec3(_401, _404, _407), vec3(_3172 * _3166, _3172 * _3167, _3172 * _3168));
                                float _4243 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3183 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3187 = ((_3183 * _3183) * (_3165 + (-1.0))) + 1.0;
                                float _3188 = _3088 * _3164;
                                float _3189 = _3188 * _3188;
                                float _3195 = ((1.0 - _3189) * dot(vec3(_401, _404, _407), vec3(_3075, _3076, _3077))) + _3189;
                                float _4254 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3197 = 1.0 - _3164;
                                float _3207 = (0.5 / (((_3196 * ((_3179 * _3197) + _3164)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3164) * _3179))) * _3196;
                                float _4265 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                                float _3217 = (_3111 * _3082) * (((_3165 * 3.1415927410125732421875) * (isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0)))) / ((_3187 * _3187) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = ((((_2941 * 0.3183098733425140380859375) * _3134) * _3132) + _2941) * _3112;
                                frontier_phi_78_pred_1 = ((((_2940 * 0.3183098733425140380859375) * _3134) * _3132) + _2940) * _3112;
                                frontier_phi_78_pred_2 = ((((_2939 * 0.3183098733425140380859375) * _3134) * _3132) + _2939) * _3112;
                                frontier_phi_78_pred_3 = _3217 * _2953.z;
                                frontier_phi_78_pred_4 = _3217 * _2953.y;
                                frontier_phi_78_pred_5 = _3217 * _2953.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3226 = frontier_phi_78_pred;
                            _3225 = frontier_phi_78_pred_1;
                            _3224 = frontier_phi_78_pred_2;
                            _3223 = frontier_phi_78_pred_3;
                            _3222 = frontier_phi_78_pred_4;
                            _3221 = frontier_phi_78_pred_5;
                            _2880 = _3224 + _2893;
                            _2881 = _3225 + _2894;
                            _2882 = _3226 + _2895;
                            _2877 = _3221 + _2890;
                            _2878 = _3222 + _2891;
                            _2879 = _3223 + _2892;
                            if (_2897 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2897;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2882;
                        frontier_phi_72_pred_1 = _2881;
                        frontier_phi_72_pred_2 = _2880;
                        frontier_phi_72_pred_3 = _2879;
                        frontier_phi_72_pred_4 = _2878;
                        frontier_phi_72_pred_5 = _2877;
                    }
                    _2399 = frontier_phi_72_pred;
                    _2397 = frontier_phi_72_pred_1;
                    _2395 = frontier_phi_72_pred_2;
                    _2393 = frontier_phi_72_pred_3;
                    _2391 = frontier_phi_72_pred_4;
                    _2389 = frontier_phi_72_pred_5;
                    uint _2587 = _2586 + 1u;
                    if (_2587 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2580 = _2389;
                        _2581 = _2391;
                        _2582 = _2393;
                        _2583 = _2395;
                        _2584 = _2397;
                        _2585 = _2399;
                        _2586 = _2587;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2393;
                frontier_phi_58_59_ladder_1 = _2399;
                frontier_phi_58_59_ladder_2 = _2397;
                frontier_phi_58_59_ladder_3 = _2395;
                frontier_phi_58_59_ladder_4 = _2391;
                frontier_phi_58_59_ladder_5 = _2389;
            }
            else
            {
                frontier_phi_58_59_ladder = _2245;
                frontier_phi_58_59_ladder_1 = _2251;
                frontier_phi_58_59_ladder_2 = _2249;
                frontier_phi_58_59_ladder_3 = _2247;
                frontier_phi_58_59_ladder_4 = _2243;
                frontier_phi_58_59_ladder_5 = _2241;
            }
            _2388 = frontier_phi_58_59_ladder_5;
            _2390 = frontier_phi_58_59_ladder_4;
            _2392 = frontier_phi_58_59_ladder;
            _2394 = frontier_phi_58_59_ladder_3;
            _2396 = frontier_phi_58_59_ladder_2;
            _2398 = frontier_phi_58_59_ladder_1;
        }
        float _2403 = isnan(1.0) ? _446 : (isnan(_446) ? 1.0 : min(_446, 1.0));
        _2228 = (_2403 * _2394) + _1706;
        _2230 = (_2403 * _2396) + _1708;
        _2232 = (_2403 * _2398) + _1710;
        _2234 = ((_2388 * 0.039999999105930328369140625) * _2403) + _2039;
        _2236 = ((_2390 * 0.039999999105930328369140625) * _2403) + _2041;
        _2238 = ((_2392 * 0.039999999105930328369140625) * _2403) + _2043;
    }
    else
    {
        _2228 = _1706;
        _2230 = _1708;
        _2232 = _1710;
        _2234 = _2039;
        _2236 = _2041;
        _2238 = _2043;
    }
    float _2327;
    float _2328;
    float _2329;
    if (_294 > 0.0)
    {
        uint _2262 = _1488 + 4u;
        float _2268 = (-0.0) - _371;
        float _2270 = (-0.0) - _372;
        float _2271 = (-0.0) - _373;
        float _2272 = dot(vec3(cbLight._m0[_1488].xyz), vec3(_2268, _2270, _2271));
        float _4281 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
        float _2276 = _457 + 1.0;
        float _2278 = (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0))) * 0.5;
        float _2283 = _2278 * _2278;
        float _2284 = _2283 * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * 32.0);
        float _2286 = _294 / (_294 + 1.0);
        float _2287 = isnan(_1501) ? 1.0 : (isnan(1.0) ? _1501 : min(1.0, _1501));
        uint _2297 = _1488 + 5u;
        float _2303 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_2268, _2270, _2271));
        float _4302 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2310 = _2283 * exp2(log2(isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * 32.0);
        float _2311 = isnan(_1502) ? 1.0 : (isnan(1.0) ? _1502 : min(1.0, _1502));
        _2327 = ((((_2310 * cbLight._m0[_2297].x) * _2286) * _2311) + (((_2284 * cbLight._m0[_2262].x) * _2286) * _2287)) * 0.3183098733425140380859375;
        _2328 = ((((_2310 * cbLight._m0[_2297].y) * _2286) * _2311) + (((_2284 * cbLight._m0[_2262].y) * _2286) * _2287)) * 0.3183098733425140380859375;
        _2329 = ((((_2310 * cbLight._m0[_2297].z) * _2286) * _2311) + (((_2284 * cbLight._m0[_2262].z) * _2286) * _2287)) * 0.3183098733425140380859375;
    }
    else
    {
        _2327 = 0.0;
        _2328 = 0.0;
        _2329 = 0.0;
    }
    float _4318 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _4329 = isnan(0.0) ? _433 : (isnan(_433) ? 0.0 : max(_433, 0.0));
    float _4340 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    uint _2351 = _420 + 6u;
    float _2359 = _379 / cbSceneParam._m0[86u].x;
    float _2360 = _380 / cbSceneParam._m0[86u].y;
    vec4 _2374 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, (log2((isnan(cbSceneParam._m0[77u].w) ? _313 : (isnan(_313) ? cbSceneParam._m0[77u].w : min(_313, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2376 = _2374.x;
    float _2377 = _2374.y;
    float _2378 = _2374.z;
    float _2379 = _2374.w;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_313 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_313) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _313 : min(cbSceneParam._m0[80u].w, _313));
        float _2442 = _2441 / _313;
        float _2453 = _2442 * _364;
        float _2454 = _365 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2456 = _2442 * _366;
        float _2458 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2459 = _2458 + cbSceneParam._m0[79u].w;
        float _2460 = cbSceneParam._m0[79u].w - _2454;
        float _2466 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2456 * _2456));
        float _2469 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2466;
        float _2474 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2476 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2839;
        if (abs((_2455 - _2458) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2839 = ((((_2459 > 0.0) ? exp2(_2474 * _2459) : (2.0 - exp2(_2476 * _2459))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2469;
        }
        else
        {
            float _2553 = 1.0 / cbSceneParam._m0[80u].x;
            float _2554 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : max(_2459, _2460));
            float _2555 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : min(_2459, _2460));
            float _2564 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : min(_2554, 0.0));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            _2839 = ((abs(_2466 / _2455) * cbSceneParam._m0[80u].y) * ((((_2564 - _2565) * 2.0) - ((exp2(_2474 * (isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0)))) - exp2(_2474 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0))))) * _2553)) - ((exp2(_2476 * _2564) - exp2(_2476 * _2565)) * _2553))) + (_2469 * cbSceneParam._m0[80u].z);
        }
        vec4 _2841 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2359, _2360, 1.0), 0.0);
        float _2850 = exp2((_2839 * (-1.44269502162933349609375)) * (1.0 - _2841.w));
        float _2851 = log2(_2850);
        float _2867 = log2(_2379);
        _2478 = (exp2(_2867 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].x)) * _2841.x) / cbSceneParam._m0[78u].x)) + _2376;
        _2480 = (exp2(_2867 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].y)) * _2841.y) / cbSceneParam._m0[78u].y)) + _2377;
        _2482 = (exp2(_2867 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2851 * cbSceneParam._m0[78u].z)) * _2841.z) / cbSceneParam._m0[78u].z)) + _2378;
        _2484 = _2850 * _2379;
    }
    else
    {
        _2478 = _2376;
        _2480 = _2377;
        _2482 = _2378;
        _2484 = _2379;
    }
    float _2496 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2497 = _2496 == 3.0;
    float _2498 = log2(_2484);
    float _2505 = exp2(_2498 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * ((_2228 + ((isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0))) * _446)) + _2327)) + ((_2234 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _1253)) * cbPerFrame._m0[3u].x));
    float _2506 = exp2(_2498 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * ((_2230 + ((isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0))) * _446)) + _2328)) + ((_2236 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _1253)) * cbPerFrame._m0[3u].x));
    float _2507 = exp2(_2498 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * ((_2232 + ((isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0))) * _446)) + _2329)) + ((_2238 + ((isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0))) * _1253)) * cbPerFrame._m0[3u].x));
    float _2516 = (_2496 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2516 * (_2497 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2478)));
    SV_Target.y = _2516 * (_2497 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2480)));
    SV_Target.z = _2516 * (_2497 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2482)));
    SV_Target.w = cbInstanceData._m0[_2351].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2351].w;
}


