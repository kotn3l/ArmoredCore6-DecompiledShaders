#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _861;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _242 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _249 = cbMtdParam._m0[11u].x + _242.x;
    vec4 _261 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _265 = _261.z;
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _3241 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))));
    vec4 _297 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _304 = fma(_278, _192 * NORMAL.x, fma(_271, _199 * TANGENT.x, (_185 * _178) * _269));
    float _307 = fma(_278, _192 * NORMAL.y, fma(_271, _199 * TANGENT.y, (_185 * _179) * _269));
    float _310 = fma(_278, _192 * NORMAL.z, fma(_271, _199 * TANGENT.z, (_185 * _180) * _269));
    float _314 = inversesqrt(dot(vec3(_304, _307, _310), vec3(_304, _307, _310)));
    float _315 = _314 * _304;
    float _316 = _314 * _307;
    float _317 = _314 * _310;
    float _3252 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _318 = isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0));
    float _3263 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3274 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3285 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3296 = isnan(0.0) ? _249 : (isnan(_249) ? 0.0 : max(_249, 0.0));
    float _322 = isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0));
    float _338 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _379 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _389 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _379);
    float _390 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _379);
    float _391 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _379);
    float _395 = inversesqrt(dot(vec3(_389, _390, _391), vec3(_389, _390, _391)));
    float _396 = _389 * _395;
    float _397 = _390 * _395;
    float _398 = _391 * _395;
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _426 = fma(_317, cbSceneParam._m0[5u].z, fma(_316, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _315));
    float _429 = fma(_317, cbSceneParam._m0[6u].z, fma(_316, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _315));
    float _432 = fma(_317, cbSceneParam._m0[7u].z, fma(_316, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _315));
    uint _445 = uint(roundEven(NORMAL.w)) * 13u;
    uint _447 = _445 + 9u;
    uint _448 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _454 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0)))) * cbInstanceData._m0[_448].x;
    float _455 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_448].y;
    float _456 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_448].z;
    float _3307 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _3318 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _3329 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _460 = 1.0 - _322;
    float _461 = _457 * _460;
    float _462 = _458 * _460;
    float _463 = _459 * _460;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _322;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _322;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _322;
    float _471 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    float _474 = _470 + 0.039999999105930328369140625;
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _486 = _483.x * TEXCOORD.z;
    float _487 = dot(vec3(_315, _316, _317), vec3(_396, _397, _398));
    float _490 = _487 * 2.0;
    float _494 = (_490 * _315) - _396;
    float _495 = (_490 * _316) - _397;
    float _496 = (_490 * _317) - _398;
    float _500 = abs(dot(vec3(_396, _397, _398), vec3(_315, _316, _317)));
    float _3340 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _502 = sqrt(_318);
    float _515 = exp2((_502 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_502 * 3.0));
    float _521 = (1.0 - _515) * ((_502 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _522 = _515 * _502;
    float _550 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _554 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _558 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _860;
    float _862;
    float _863;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _585 = fma(_558, cbModelParam._m0[26u].z, fma(_554, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _550));
        float _589 = fma(_558, cbModelParam._m0[27u].z, fma(_554, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _550));
        float _593 = fma(_558, cbModelParam._m0[28u].z, fma(_554, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _550));
        float _618 = _550 + _315;
        float _619 = _554 + _316;
        float _620 = _558 + _317;
        float _630 = fma(_620, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _618)) - _585;
        float _631 = fma(_620, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _618)) - _589;
        float _632 = fma(_620, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _618)) - _593;
        float _636 = inversesqrt(dot(vec3(_630, _631, _632), vec3(_630, _631, _632)));
        float _649 = ((_636 * _630) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_585 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _650 = ((_636 * _631) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_589 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _651 = ((_636 * _632) / cbModelParam._m0[34u].z) + ((((((_593 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _654 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _661 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_649, _650, _651), 0.0);
        float _688 = exp2((_654.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_654.x + (-0.5));
        float _690 = _688 * (_654.y + (-0.5));
        float _691 = _688 * (_654.z + (-0.5));
        float _698 = exp2((_661.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_661.x + (-0.5));
        float _700 = _698 * (_661.y + (-0.5));
        float _701 = _698 * (_661.z + (-0.5));
        float _708 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_668.x + (-0.5));
        float _710 = _708 * (_668.y + (-0.5));
        float _711 = _708 * (_668.z + (-0.5));
        float _718 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _719 = _718 * (_675.x + (-0.5));
        float _720 = _718 * (_675.y + (-0.5));
        float _721 = _718 * (_675.z + (-0.5));
        float _722 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
        float _723 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = _689 * 0.5;
        float _726 = _699 * 0.5;
        float _727 = _709 * 0.5;
        float _728 = dot(vec3(_725, _726, _727), vec3(_725, _726, _727));
        float _733 = (_728 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_728);
        float _742 = (dot(vec3(_315, _316, _317), vec3(_733 * _725, _733 * _726, _733 * _727)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _752 = sqrt(((_726 * _726) + (_725 * _725)) + (_727 * _727)) / (_722 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _753 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _754 = _753 * 2.0;
        float _758 = (1.0 - _753) / (_753 + 1.0);
        float _3388 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        float _759 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _768 = ((((1.0 - _759) * (_754 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_754 + 1.0))) + _759) * _722;
        float _769 = _690 * 0.5;
        float _770 = _700 * 0.5;
        float _771 = _710 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _785 = (dot(vec3(_315, _316, _317), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _794 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_723 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _3421 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_796 + 1.0))) + _801) * _723;
        float _811 = _691 * 0.5;
        float _812 = _701 * 0.5;
        float _813 = _711 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(_315, _316, _317), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _3454 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_838 + 1.0))) + _843) * _724;
        _860 = _691;
        _862 = _690;
        _863 = _689;
        _864 = _701;
        _865 = _700;
        _866 = _699;
        _867 = _711;
        _868 = _710;
        _869 = _709;
        _870 = _724;
        _871 = _723;
        _872 = _722;
        _873 = cbModelParam._m0[36u].z * (isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0)));
        _874 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
    }
    else
    {
        _860 = _861;
        _862 = _861;
        _863 = _861;
        _864 = _861;
        _865 = _861;
        _866 = _861;
        _867 = _861;
        _868 = _861;
        _869 = _861;
        _870 = _861;
        _871 = _861;
        _872 = _861;
        _873 = 0.0;
        _874 = 0.0;
        _875 = 0.0;
    }
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _901 = fma(_558, cbModelParam._m0[30u].z, fma(_554, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _550));
        float _905 = fma(_558, cbModelParam._m0[31u].z, fma(_554, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _550));
        float _909 = fma(_558, cbModelParam._m0[32u].z, fma(_554, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _550));
        float _932 = _550 + _315;
        float _933 = _554 + _316;
        float _934 = _558 + _317;
        float _944 = fma(_934, cbModelParam._m0[30u].z, fma(_933, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _932)) - _901;
        float _945 = fma(_934, cbModelParam._m0[31u].z, fma(_933, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _932)) - _905;
        float _946 = fma(_934, cbModelParam._m0[32u].z, fma(_933, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _932)) - _909;
        float _950 = inversesqrt(dot(vec3(_944, _945, _946), vec3(_944, _945, _946)));
        float _963 = ((_950 * _944) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_901 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _964 = ((_950 * _945) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_905 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _965 = ((_950 * _946) / cbModelParam._m0[35u].z) + ((((((_909 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_963, _964, _965), 0.0);
        float _1000 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_967.x + (-0.5));
        float _1002 = _1000 * (_967.y + (-0.5));
        float _1003 = _1000 * (_967.z + (-0.5));
        float _1010 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_974.x + (-0.5));
        float _1012 = _1010 * (_974.y + (-0.5));
        float _1013 = _1010 * (_974.z + (-0.5));
        float _1020 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_981.x + (-0.5));
        float _1022 = _1020 * (_981.y + (-0.5));
        float _1023 = _1020 * (_981.z + (-0.5));
        float _1030 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1031 = _1030 * (_988.x + (-0.5));
        float _1032 = _1030 * (_988.y + (-0.5));
        float _1033 = _1030 * (_988.z + (-0.5));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = _1001 * 0.5;
        float _1038 = _1011 * 0.5;
        float _1039 = _1021 * 0.5;
        float _1040 = dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039));
        float _1045 = (_1040 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1040);
        float _1053 = (dot(vec3(_315, _316, _317), vec3(_1045 * _1037, _1045 * _1038, _1045 * _1039)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1062 = sqrt(((_1038 * _1038) + (_1037 * _1037)) + (_1039 * _1039)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3517 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_1064 + 1.0))) + _1069) * _1034;
        float _1079 = _1002 * 0.5;
        float _1080 = _1012 * 0.5;
        float _1081 = _1022 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_315, _316, _317), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1035 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3550 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1106 + 1.0))) + _1111) * _1035;
        float _1121 = _1003 * 0.5;
        float _1122 = _1013 * 0.5;
        float _1123 = _1023 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_315, _316, _317), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3583 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_1148 + 1.0))) + _1153) * _1036;
        _1170 = _1003;
        _1171 = _1002;
        _1172 = _1001;
        _1173 = _1013;
        _1174 = _1012;
        _1175 = _1011;
        _1176 = _1023;
        _1177 = _1022;
        _1178 = _1021;
        _1179 = _1036;
        _1180 = _1035;
        _1181 = _1034;
        _1182 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1183 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _861;
        _1171 = _861;
        _1172 = _861;
        _1173 = _861;
        _1174 = _861;
        _1175 = _861;
        _1176 = _861;
        _1177 = _861;
        _1178 = _861;
        _1179 = _861;
        _1180 = _861;
        _1181 = _861;
        _1182 = 0.0;
        _1183 = 0.0;
        _1184 = 0.0;
    }
    float _1194 = (cbModelParam._m0[1u].x * (_1182 - _873)) + _873;
    float _1195 = (cbModelParam._m0[1u].x * (_1183 - _874)) + _874;
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1217 = fma(_1196, cbSceneParam._m0[89u].z, fma(_1195, cbSceneParam._m0[89u].y, _1194 * cbSceneParam._m0[89u].x));
    float _1220 = fma(_1196, cbSceneParam._m0[90u].z, fma(_1195, cbSceneParam._m0[90u].y, _1194 * cbSceneParam._m0[90u].x));
    float _1223 = fma(_1196, cbSceneParam._m0[91u].z, fma(_1195, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1194));
    float _1238 = _494 * 0.5;
    float _1239 = _495 * 0.5;
    float _1240 = _496 * 0.5;
    float _1241 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1244 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1171, _1174, _1177, _1180));
    float _1247 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_1170, _1173, _1176, _1179));
    float _1281;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1254 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_860, _864, _867, _870));
        float _1258 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_862, _865, _868, _871));
        float _1262 = dot(vec4(_1238, _1239, _1240, 1.0), vec4(_863, _866, _869, _872));
        float _1269 = dot(vec4(cbModelParam._m0[39u]), vec4(_1238, _1239, _1240, 1.0));
        _1281 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1269) ? 0.0 : (isnan(0.0) ? _1269 : max(0.0, _1269))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1281 = 1.0;
    }
    float _1292;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1283 = dot(vec4(cbModelParam._m0[40u]), vec4(_1238, _1239, _1240, 1.0));
        _1292 = dot(vec3(isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0)), isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1283) ? 0.0 : (isnan(0.0) ? _1283 : max(0.0, _1283))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1292 = 1.0;
    }
    float _1296 = (_1292 * cbModelParam._m0[1u].x) + (_1281 * (1.0 - cbModelParam._m0[1u].x));
    float _1306 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _318);
    float _1307 = isnan(_1306) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1306 : min(cbModelParam._m0[25u].z, _1306));
    float _1389;
    float _1391;
    float _1393;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1356 = fma(_558, cbModelParam._m0[13u].z, fma(_554, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _550)) + cbModelParam._m0[13u].w;
        float _1360 = fma(_558, cbModelParam._m0[14u].z, fma(_554, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _550)) + cbModelParam._m0[14u].w;
        float _1364 = fma(_558, cbModelParam._m0[15u].z, fma(_554, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _550)) + cbModelParam._m0[15u].w;
        float _1367 = fma(_496, cbModelParam._m0[13u].z, fma(_495, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494));
        float _1370 = fma(_496, cbModelParam._m0[14u].z, fma(_495, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494));
        float _1373 = fma(_496, cbModelParam._m0[15u].z, fma(_495, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494));
        float _1401;
        if (_1367 > 0.0)
        {
            _1401 = abs((1.0 - _1356) / _1367);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1367 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1356 + 1.0) / _1367);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1401 = frontier_phi_14_12_ladder;
        }
        float _1608;
        if (_1370 > 0.0)
        {
            _1608 = abs((1.0 - _1360) / _1370);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1370 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1360 + 1.0) / _1370);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1608 = frontier_phi_23_19_ladder;
        }
        float _1862;
        if (_1373 > 0.0)
        {
            _1862 = abs((1.0 - _1364) / _1373);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1373 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1364 + 1.0) / _1373);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1862 = frontier_phi_35_30_ladder;
        }
        float _1864 = isnan(_1608) ? _1401 : (isnan(_1401) ? _1608 : min(_1401, _1608));
        float _1865 = isnan(_1862) ? _1864 : (isnan(_1864) ? _1862 : min(_1864, _1862));
        float _1869 = (_1865 * _1367) + _1356;
        float _1870 = (_1865 * _1370) + _1360;
        float _1871 = (_1865 * _1373) + _1364;
        float _1872 = _1865 * 9.9999997473787516355514526367188e-05;
        float _1874 = (-1.0) - _1872;
        float _1876 = _1872 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1871 > _1876) || ((_1871 < _1874) || ((_1870 > _1876) || ((_1870 < _1874) || ((_1869 < _1874) || (_1869 > _1876))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1999 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1871, cbModelParam._m0[9u].z, fma(_1870, cbModelParam._m0[9u].y, _1869 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1871, cbModelParam._m0[10u].z, fma(_1870, cbModelParam._m0[10u].y, _1869 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1871, cbModelParam._m0[11u].z, fma(_1870, cbModelParam._m0[11u].y, _1869 * cbModelParam._m0[11u].x))), _1307);
            frontier_phi_13_35_ladder = _1999.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1999.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1999.x * cbModelParam._m0[1u].y;
        }
        _1389 = frontier_phi_13_35_ladder_2;
        _1391 = frontier_phi_13_35_ladder_1;
        _1393 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_494, _495, _496), _1307);
        _1389 = _1377.x * cbModelParam._m0[1u].y;
        _1391 = _1377.y * cbModelParam._m0[1u].y;
        _1393 = _1377.z * cbModelParam._m0[1u].y;
    }
    float _1397 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _318);
    float _1398 = isnan(_1397) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1397 : min(cbModelParam._m0[25u].w, _1397));
    float _1491;
    float _1493;
    float _1495;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1455 = fma(_558, cbModelParam._m0[21u].z, fma(_554, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _550)) + cbModelParam._m0[21u].w;
        float _1459 = fma(_558, cbModelParam._m0[22u].z, fma(_554, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _550)) + cbModelParam._m0[22u].w;
        float _1463 = fma(_558, cbModelParam._m0[23u].z, fma(_554, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _550)) + cbModelParam._m0[23u].w;
        float _1466 = fma(_496, cbModelParam._m0[21u].z, fma(_495, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494));
        float _1469 = fma(_496, cbModelParam._m0[22u].z, fma(_495, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494));
        float _1472 = fma(_496, cbModelParam._m0[23u].z, fma(_495, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494));
        float _1613;
        if (_1466 > 0.0)
        {
            _1613 = abs((1.0 - _1455) / _1466);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1466 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1455 + 1.0) / _1466);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1613 = frontier_phi_25_21_ladder;
        }
        float _1889;
        if (_1469 > 0.0)
        {
            _1889 = abs((1.0 - _1459) / _1469);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1469 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1459 + 1.0) / _1469);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1889 = frontier_phi_37_32_ladder;
        }
        float _2102;
        if (_1472 > 0.0)
        {
            _2102 = abs((1.0 - _1463) / _1472);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1472 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1463 + 1.0) / _1472);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2102 = frontier_phi_46_43_ladder;
        }
        float _2104 = isnan(_1889) ? _1613 : (isnan(_1613) ? _1889 : min(_1613, _1889));
        float _2105 = isnan(_2102) ? _2104 : (isnan(_2104) ? _2102 : min(_2104, _2102));
        float _2109 = (_2105 * _1466) + _1455;
        float _2110 = (_2105 * _1469) + _1459;
        float _2111 = (_2105 * _1472) + _1463;
        float _2112 = _2105 * 9.9999997473787516355514526367188e-05;
        float _2113 = (-1.0) - _2112;
        float _2115 = _2112 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2111 > _2115) || ((_2111 < _2113) || ((_2110 > _2115) || ((_2110 < _2113) || ((_2109 < _2113) || (_2109 > _2115))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2111, cbModelParam._m0[17u].z, fma(_2110, cbModelParam._m0[17u].y, _2109 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2111, cbModelParam._m0[18u].z, fma(_2110, cbModelParam._m0[18u].y, _2109 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2111, cbModelParam._m0[19u].z, fma(_2110, cbModelParam._m0[19u].y, _2109 * cbModelParam._m0[19u].x))), _1398);
            frontier_phi_22_46_ladder = _2345.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2345.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2345.x * cbModelParam._m0[1u].z;
        }
        _1491 = frontier_phi_22_46_ladder_2;
        _1493 = frontier_phi_22_46_ladder_1;
        _1495 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1475 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_494, _495, _496), _1398);
        _1491 = _1475.x * cbModelParam._m0[1u].z;
        _1493 = _1475.y * cbModelParam._m0[1u].z;
        _1495 = _1475.z * cbModelParam._m0[1u].z;
    }
    float _1508 = (((_521 * _471) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1491 - _1389)) + _1389);
    float _1510 = (((_521 * _473) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_521 * _474) + _522) * _486) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1515 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1510, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1510, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1510, cbSceneParam._m0[91u].y, _1508 * cbSceneParam._m0[91u].x));
    uvec4 _1531 = floatBitsToUint(cbInstanceData._m0[_445 + 5u]);
    uint _1533 = _1531.x * 14u;
    uint _1534 = _1533 + 13u;
    float _1541 = _486 + (-1.0);
    float _1546 = (cbLight._m0[_1534].x * _1541) + 1.0;
    float _1547 = (cbLight._m0[_1534].y * _1541) + 1.0;
    float _1548 = (cbLight._m0[_1534].z * _1541) + 1.0;
    float _1549 = (cbLight._m0[_1534].w * _1541) + 1.0;
    uint _1550 = _1533 + 5u;
    float _1556 = isnan(1.0) ? _1547 : (isnan(_1547) ? 1.0 : min(_1547, 1.0));
    uint _1560 = _1533 + 4u;
    float _1567 = isnan(1.0) ? _1546 : (isnan(_1546) ? 1.0 : min(_1546, 1.0));
    uint _1571 = _1533 | 1u;
    float _1582 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_315, _316, _317));
    float _1585 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_315, _316, _317));
    float _3719 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
    float _3730 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _1590 = (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 0.3183098733425140380859375;
    float _1592 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1599 = ((cbLight._m0[_1550].x * _1556) * _1592) + ((cbLight._m0[_1560].x * _1567) * _1590);
    float _1600 = ((_1556 * cbLight._m0[_1550].y) * _1592) + ((_1567 * cbLight._m0[_1560].y) * _1590);
    float _1601 = ((_1556 * cbLight._m0[_1550].z) * _1592) + ((_1567 * cbLight._m0[_1560].z) * _1590);
    uvec4 _1605 = floatBitsToUint(cbLight._m0[_1533 + 12u]);
    bool _1607 = _1605.x == 0u;
    float _1618;
    float _1620;
    float _1622;
    if (_1607)
    {
        _1618 = _1599;
        _1620 = _1600;
        _1622 = _1601;
    }
    else
    {
        uint _1626 = _1533 + 6u;
        float _1642 = (dot(vec3(cbLight._m0[_1533 + 2u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _1643 = _1642 * _1642;
        float _3741 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1645 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1618 = (((cbLight._m0[_1626].x * 0.3183098733425140380859375) * _1644) * _1645) + _1599;
        _1620 = (((cbLight._m0[_1626].y * 0.3183098733425140380859375) * _1644) * _1645) + _1600;
        _1622 = (((cbLight._m0[_1626].z * 0.3183098733425140380859375) * _1644) * _1645) + _1601;
    }
    bool _1625 = _1605.y == 0u;
    float _1663;
    float _1665;
    float _1667;
    if (_1625)
    {
        _1663 = _1618;
        _1665 = _1620;
        _1667 = _1622;
    }
    else
    {
        uint _1833 = _1533 + 7u;
        float _1849 = (dot(vec3(cbLight._m0[_1533 + 3u].xyz), vec3(_315, _316, _317)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _3757 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1852 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _1663 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1618;
        _1665 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1620;
        _1667 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1622;
    }
    uint _1670 = _1533 + 8u;
    float _1683 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1533].w)) * _318) * 0.949999988079071044921875);
    float _1684 = _1683 * _1683;
    float _1685 = cbLight._m0[_1533].x + _396;
    float _1686 = cbLight._m0[_1533].y + _397;
    float _1687 = cbLight._m0[_1533].z + _398;
    float _1691 = inversesqrt(dot(vec3(_1685, _1686, _1687), vec3(_1685, _1686, _1687)));
    float _1692 = _1691 * _1685;
    float _1693 = _1691 * _1686;
    float _1694 = _1691 * _1687;
    float _1695 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1533].xyz));
    float _3773 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1698 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _3784 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1699 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _1700 = dot(vec3(_315, _316, _317), vec3(_1692, _1693, _1694));
    float _3795 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
    float _1704 = dot(vec3(cbLight._m0[_1533].xyz), vec3(_1692, _1693, _1694));
    float _3806 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1708 = _1684 * _1684;
    float _1712 = ((_1703 * _1703) * (_1708 + (-1.0))) + 1.0;
    float _1720 = exp2(log2(1.0 - (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0)))) * 5.0);
    float _1721 = 0.959999978542327880859375 - _468;
    float _1723 = 0.959999978542327880859375 - _469;
    float _1724 = 0.959999978542327880859375 - _470;
    float _1731 = 1.0 - _1684;
    float _1742 = (0.5 / (((_1699 * ((_1698 * _1731) + _1684)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1731) + _1684) * _1698))) * _1698;
    float _3817 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1744 = (isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1708 / ((_1712 * _1712) * 3.141590118408203125));
    uint _1755 = _1533 + 9u;
    float _1766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1571].w)) * _318) * 0.949999988079071044921875);
    float _1767 = _1766 * _1766;
    float _1768 = cbLight._m0[_1571].x + _396;
    float _1769 = cbLight._m0[_1571].y + _397;
    float _1770 = cbLight._m0[_1571].z + _398;
    float _1774 = inversesqrt(dot(vec3(_1768, _1769, _1770), vec3(_1768, _1769, _1770)));
    float _1775 = _1774 * _1768;
    float _1776 = _1774 * _1769;
    float _1777 = _1774 * _1770;
    float _1778 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1571].xyz));
    float _3828 = isnan(0.0) ? _1778 : (isnan(_1778) ? 0.0 : max(_1778, 0.0));
    float _1781 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1782 = dot(vec3(_315, _316, _317), vec3(_1775, _1776, _1777));
    float _3839 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1785 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _1786 = dot(vec3(cbLight._m0[_1571].xyz), vec3(_1775, _1776, _1777));
    float _3850 = isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0));
    float _1790 = _1767 * _1767;
    float _1794 = ((_1785 * _1785) * (_1790 + (-1.0))) + 1.0;
    float _1801 = exp2(log2(1.0 - (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * 5.0);
    float _1808 = 1.0 - _1767;
    float _1818 = (0.5 / (((_1699 * ((_1781 * _1808) + _1767)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1808) + _1767) * _1781))) * _1781;
    float _3861 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _1820 = (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1790 / ((_1794 * _1794) * 3.141590118408203125));
    float _1830 = (((((_1801 * _1721) + _471) * cbLight._m0[_1755].x) * _1820) * _1556) + (((((_1720 * _1721) + _471) * cbLight._m0[_1670].x) * _1744) * _1567);
    float _1831 = (((((_1801 * _1723) + _473) * cbLight._m0[_1755].y) * _1820) * _1556) + (((((_1720 * _1723) + _473) * cbLight._m0[_1670].y) * _1744) * _1567);
    float _1832 = (((((_1801 * _1724) + _474) * cbLight._m0[_1755].z) * _1820) * _1556) + (((((_1720 * _1724) + _474) * cbLight._m0[_1670].z) * _1744) * _1567);
    float _1894;
    float _1896;
    float _1898;
    if (_1607)
    {
        _1894 = _1830;
        _1896 = _1831;
        _1898 = _1832;
    }
    else
    {
        uint _1900 = _1533 + 2u;
        uint _1904 = _1533 + 10u;
        float _1918 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1900].w)) * _318) * 0.949999988079071044921875);
        float _1919 = _1918 * _1918;
        float _1920 = cbLight._m0[_1900].x + _396;
        float _1921 = cbLight._m0[_1900].y + _397;
        float _1922 = cbLight._m0[_1900].z + _398;
        float _1926 = inversesqrt(dot(vec3(_1920, _1921, _1922), vec3(_1920, _1921, _1922)));
        float _1927 = _1926 * _1920;
        float _1928 = _1926 * _1921;
        float _1929 = _1926 * _1922;
        float _1930 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_1900].xyz));
        float _3872 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        float _1933 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1934 = dot(vec3(_315, _316, _317), vec3(_1927, _1928, _1929));
        float _3883 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
        float _1937 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1938 = dot(vec3(cbLight._m0[_1900].xyz), vec3(_1927, _1928, _1929));
        float _3894 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
        float _1942 = _1919 * _1919;
        float _1946 = ((_1937 * _1937) * (_1942 + (-1.0))) + 1.0;
        float _1953 = exp2(log2(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) * 5.0);
        float _1960 = 1.0 - _1919;
        float _1970 = (0.5 / (((_1699 * ((_1933 * _1960) + _1919)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _1960) + _1919) * _1933))) * _1933;
        float _3905 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        float _1972 = (isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1942 / ((_1946 * _1946) * 3.141590118408203125));
        float _1973 = isnan(1.0) ? _1548 : (isnan(_1548) ? 1.0 : min(_1548, 1.0));
        _1894 = (((((_1953 * _1721) + _471) * cbLight._m0[_1904].x) * _1972) * _1973) + _1830;
        _1896 = (((((_1953 * _1723) + _473) * cbLight._m0[_1904].y) * _1972) * _1973) + _1831;
        _1898 = (((((_1953 * _1724) + _474) * cbLight._m0[_1904].z) * _1972) * _1973) + _1832;
    }
    float _2008;
    float _2010;
    float _2012;
    if (_1625)
    {
        _2008 = _1894;
        _2010 = _1896;
        _2012 = _1898;
    }
    else
    {
        uint _2019 = _1533 + 3u;
        uint _2023 = _1533 + 11u;
        float _2037 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2019].w)) * _318) * 0.949999988079071044921875);
        float _2038 = _2037 * _2037;
        float _2039 = cbLight._m0[_2019].x + _396;
        float _2040 = cbLight._m0[_2019].y + _397;
        float _2041 = cbLight._m0[_2019].z + _398;
        float _2045 = inversesqrt(dot(vec3(_2039, _2040, _2041), vec3(_2039, _2040, _2041)));
        float _2046 = _2045 * _2039;
        float _2047 = _2045 * _2040;
        float _2048 = _2045 * _2041;
        float _2049 = dot(vec3(_315, _316, _317), vec3(cbLight._m0[_2019].xyz));
        float _3921 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _2053 = dot(vec3(_315, _316, _317), vec3(_2046, _2047, _2048));
        float _3932 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2056 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _2057 = dot(vec3(cbLight._m0[_2019].xyz), vec3(_2046, _2047, _2048));
        float _3943 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
        float _2061 = _2038 * _2038;
        float _2065 = ((_2056 * _2056) * (_2061 + (-1.0))) + 1.0;
        float _2072 = exp2(log2(1.0 - (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) * 5.0);
        float _2079 = 1.0 - _2038;
        float _2089 = (0.5 / (((_1699 * ((_2052 * _2079) + _2038)) + 9.9999999392252902907785028219223e-09) + (((_1699 * _2079) + _2038) * _2052))) * _2052;
        float _3954 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
        float _2091 = (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_2061 / ((_2065 * _2065) * 3.141590118408203125));
        float _2092 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
        _2008 = (((((_2072 * _1721) + _471) * cbLight._m0[_2023].x) * _2091) * _2092) + _1894;
        _2010 = (((((_2072 * _1723) + _473) * cbLight._m0[_2023].y) * _2091) * _2092) + _1896;
        _2012 = (((((_2072 * _1724) + _474) * cbLight._m0[_2023].z) * _2091) * _2092) + _1898;
    }
    float _2227;
    float _2229;
    float _2231;
    float _2233;
    float _2235;
    float _2237;
    if (_1531.y == 0u)
    {
        float _2167 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2168 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2167;
        float _2169 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2167;
        float _2170 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2167;
        uvec4 _2182 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2183 = _2182.x;
        uint _2194 = uint((float(_2182.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2183))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2183)));
        float _2204 = (log2(_2170 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2205 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        uint _2208 = uint(isnan(14.0) ? _2205 : (isnan(_2205) ? 14.0 : min(_2205, 14.0)));
        uvec4 _2213 = texelFetch(g_lightClusterGridBuffer, int(((_2208 << 2u) + (_2194 << 6u)) >> 2u));
        uint _2214 = _2213.x;
        uint _2215 = _2182.z;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        float _2358;
        float _2360;
        if (((((1u << ((_2215 >> 4u) & 15u)) + 4294967295u) & _2214) == 0u) || ((_2215 & 240u) == 0u))
        {
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
            _2358 = 0.0;
            _2360 = 0.0;
        }
        else
        {
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2359;
            float _2361;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            float _2507 = 0.0;
            float _2508 = 0.0;
            float _2509 = 0.0;
            uint _2510 = 0u;
            uint _2519;
            bool _2520;
            for (;;)
            {
                _2519 = texelFetch(g_lightClassification, int((((_2208 << 5u) + (_2194 << 9u)) + (_2510 << 2u)) >> 2u)).x;
                _2520 = _2519 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2520)
                {
                    frontier_phi_61_pred = _2504;
                    frontier_phi_61_pred_1 = _2509;
                    frontier_phi_61_pred_2 = _2508;
                    frontier_phi_61_pred_3 = _2507;
                    frontier_phi_61_pred_4 = _2506;
                    frontier_phi_61_pred_5 = _2505;
                }
                else
                {
                    float _2628;
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    uint _2634;
                    _2628 = _2504;
                    _2629 = _2505;
                    _2630 = _2506;
                    _2631 = _2507;
                    _2632 = _2508;
                    _2633 = _2509;
                    _2634 = _2519;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    for (;;)
                    {
                        uint _2638 = uint(findLSB(_2634)) + (_2510 << 5u);
                        uint _2635 = (_2634 + 4294967295u) & _2634;
                        uint _2640 = _2638 * 48u;
                        vec4 _2654 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 3u)).x));
                        uint _2660 = (_2638 * 48u) + 4u;
                        vec4 _2673 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2660)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2660 + 3u)).x));
                        uint _2679 = (_2638 * 48u) + 8u;
                        vec3 _2690 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2679)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2679 + 2u)).x));
                        float _2694 = _2654.x - _2168;
                        float _2695 = _2654.y - _2169;
                        float _2696 = _2654.z - _2170;
                        float _2697 = dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696));
                        float _2700 = inversesqrt(_2697);
                        float _2701 = _2700 * _2694;
                        float _2702 = _2700 * _2695;
                        float _2703 = _2700 * _2696;
                        float _2704 = dot(vec3(_426, _429, _432), vec3(_2701, _2702, _2703));
                        float _2709 = 1.0 - (_2697 * _2654.w);
                        float _3980 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
                        float _2710 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                        float _2711 = sqrt(_2697) * _2673.w;
                        float _2714 = 1.39999997615814208984375 / (_2711 + 1.39999997615814208984375);
                        float _2715 = _2714 * _2714;
                        float _2718 = ((1.0 - _2715) * _2704) + _2715;
                        float _2721 = _2711 * _2711;
                        float _2725 = ((isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0))) * _2710) / ((_2721 * 0.699999988079071044921875) + 1.0);
                        float _2729 = (-0.0) - _2168;
                        float _2730 = (-0.0) - _2169;
                        float _2731 = (-0.0) - _2170;
                        float _2735 = inversesqrt(dot(vec3(_2729, _2730, _2731), vec3(_2729, _2730, _2731)));
                        float _2736 = _2735 * _2729;
                        float _2737 = _2735 * _2730;
                        float _2738 = _2735 * _2731;
                        float _2746 = exp2(log2(1.0 / ((_2721 * 3.5) + 5.0)) * 0.25);
                        float _2747 = 1.0 - _502;
                        float _2754 = sqrt(1.0 - ((1.0 - (_2747 * _2747)) * (1.0 - (_2746 * _2746))));
                        float _2755 = _2754 * _2754;
                        float _2756 = _2755 * _2755;
                        float _2757 = _2736 + _2701;
                        float _2758 = _2737 + _2702;
                        float _2759 = _2738 + _2703;
                        float _2763 = inversesqrt(dot(vec3(_2757, _2758, _2759), vec3(_2757, _2758, _2759)));
                        float _2767 = dot(vec3(_426, _429, _432), vec3(_2736, _2737, _2738));
                        float _3996 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                        float _2770 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
                        float _2771 = dot(vec3(_426, _429, _432), vec3(_2763 * _2757, _2763 * _2758, _2763 * _2759));
                        float _4007 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2774 = isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0));
                        float _2778 = ((_2774 * _2774) * (_2756 + (-1.0))) + 1.0;
                        float _2779 = _2714 * _2755;
                        float _2780 = _2779 * _2779;
                        float _2783 = ((1.0 - _2780) * _2704) + _2780;
                        float _4018 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2784 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
                        float _2785 = 1.0 - _2755;
                        float _2795 = (0.5 / (((_2784 * ((_2770 * _2785) + _2755)) + 9.9999999392252902907785028219223e-09) + (((_2784 * _2785) + _2755) * _2770))) * _2784;
                        float _4029 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2806 = (((_2756 * 3.1415927410125732421875) * (isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0)))) / ((_2778 * _2778) * ((_2721 * 2.1991131305694580078125) + 3.141590118408203125))) * _2710;
                        _2563 = (_2725 * _2673.x) + _2631;
                        _2564 = (_2725 * _2673.y) + _2632;
                        _2565 = (_2725 * _2673.z) + _2633;
                        _2560 = (_2806 * _2690.x) + _2628;
                        _2561 = (_2806 * _2690.y) + _2629;
                        _2562 = (_2806 * _2690.z) + _2630;
                        if (_2635 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2628 = _2560;
                            _2629 = _2561;
                            _2630 = _2562;
                            _2631 = _2563;
                            _2632 = _2564;
                            _2633 = _2565;
                            _2634 = _2635;
                        }
                    }
                    frontier_phi_61_pred = _2560;
                    frontier_phi_61_pred_1 = _2565;
                    frontier_phi_61_pred_2 = _2564;
                    frontier_phi_61_pred_3 = _2563;
                    frontier_phi_61_pred_4 = _2562;
                    frontier_phi_61_pred_5 = _2561;
                }
                _2351 = frontier_phi_61_pred;
                _2361 = frontier_phi_61_pred_1;
                _2359 = frontier_phi_61_pred_2;
                _2357 = frontier_phi_61_pred_3;
                _2355 = frontier_phi_61_pred_4;
                _2353 = frontier_phi_61_pred_5;
                uint _2511 = _2510 + 1u;
                if (_2511 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2504 = _2351;
                    _2505 = _2353;
                    _2506 = _2355;
                    _2507 = _2357;
                    _2508 = _2359;
                    _2509 = _2361;
                    _2510 = _2511;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
            _2358 = _2359;
            _2360 = _2361;
        }
        uvec4 _2364 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2365 = _2364.z;
        uint _2367 = (_2365 >> 8u) & 15u;
        float _2472;
        float _2474;
        float _2476;
        float _2478;
        float _2480;
        float _2482;
        if (((4294967295u << _2367) & _2214) == 0u)
        {
            _2472 = _2350;
            _2474 = _2352;
            _2476 = _2354;
            _2478 = _2356;
            _2480 = _2358;
            _2482 = _2360;
        }
        else
        {
            float _2497 = inversesqrt(dot(vec3(_2168, _2169, _2170), vec3(_2168, _2169, _2170)));
            float _2498 = _2497 * _2168;
            float _2499 = _2497 * _2169;
            float _2500 = _2497 * _2170;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2367 < ((_2365 >> 12u) & 15u))
            {
                float _2473;
                float _2475;
                float _2477;
                float _2479;
                float _2481;
                float _2483;
                float _2611 = _2350;
                float _2612 = _2352;
                float _2613 = _2354;
                float _2614 = _2356;
                float _2615 = _2358;
                float _2616 = _2360;
                uint _2617 = _2367;
                uint _2626;
                bool _2627;
                for (;;)
                {
                    _2626 = texelFetch(g_lightClassification, int((((_2208 << 5u) + (_2194 << 9u)) + (_2617 << 2u)) >> 2u)).x;
                    _2627 = _2626 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2627)
                    {
                        frontier_phi_67_pred = _2614;
                        frontier_phi_67_pred_1 = _2615;
                        frontier_phi_67_pred_2 = _2616;
                        frontier_phi_67_pred_3 = _2613;
                        frontier_phi_67_pred_4 = _2612;
                        frontier_phi_67_pred_5 = _2611;
                    }
                    else
                    {
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2816;
                        float _3107;
                        float _3108;
                        float _3109;
                        float _3110;
                        float _3111;
                        float _3112;
                        float _2824 = _2611;
                        float _2825 = _2612;
                        float _2826 = _2613;
                        float _2827 = _2614;
                        float _2828 = _2615;
                        float _2829 = _2616;
                        uint _2830 = _2626;
                        uint _2831;
                        vec4 _2856;
                        float _2857;
                        vec4 _2872;
                        vec3 _2884;
                        vec4 _2900;
                        vec4 _2916;
                        float _2963;
                        bool _2964;
                        for (;;)
                        {
                            uint _2841 = ((_2617 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2830));
                            _2831 = (_2830 + 4294967295u) & _2830;
                            uint _2843 = _2841 * 40u;
                            _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            _2857 = _2856.w;
                            uint _2859 = (_2841 * 40u) + 4u;
                            _2872 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2859)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2859 + 3u)).x));
                            uint _2874 = (_2841 * 40u) + 8u;
                            _2884 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2874)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2874 + 2u)).x));
                            uint _2887 = (_2841 * 40u) + 16u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            uint _2903 = (_2841 * 40u) + 20u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2919 = (_2841 * 40u) + 24u;
                            vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2938 = (_2841 * 40u) + 28u;
                            vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2963 = fma(_2170, _2951.z, fma(_2169, _2951.y, _2951.x * _2168)) + _2951.w;
                            _2964 = !((fma(_2170, _2932.z, fma(_2169, _2932.y, _2932.x * _2168)) + _2932.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2964)
                            {
                                float _2991 = _2856.x - _2168;
                                float _2992 = _2856.y - _2169;
                                float _2993 = _2856.z - _2170;
                                float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                                float _2997 = inversesqrt(_2994);
                                float _2998 = _2997 * _2991;
                                float _2999 = _2997 * _2992;
                                float _3000 = _2997 * _2993;
                                float _3004 = 1.0 - (_2994 / (_2857 * _2857));
                                float _4040 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3005 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
                                float _3009 = sqrt(_2994) * _2872.w;
                                float _3011 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                                float _3012 = _3011 * _3011;
                                float _3015 = ((1.0 - _3012) * dot(vec3(_2998, _2999, _3000), vec3(_426, _429, _432))) + _3012;
                                float _3018 = _3009 * _3009;
                                float _3022 = (fma(_2170, _2900.z, fma(_2169, _2900.y, _2900.x * _2168)) + _2900.w) / _2963;
                                float _3023 = (fma(_2170, _2916.z, fma(_2169, _2916.y, _2916.x * _2168)) + _2916.w) / _2963;
                                float _3027 = 1.0 - dot(vec2(_3022, _3023), vec2(_3022, _3023));
                                float _4056 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                                float _3029 = _3028 * (((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3005) / ((_3018 * 0.699999988079071044921875) + 1.0));
                                float _3041 = exp2(log2(1.0 / ((_3018 * 3.5) + 5.0)) * 0.25);
                                float _3042 = 1.0 - _502;
                                float _3049 = sqrt(1.0 - ((1.0 - (_3042 * _3042)) * (1.0 - (_3041 * _3041))));
                                float _3050 = _3049 * _3049;
                                float _3051 = _3050 * _3050;
                                float _3052 = _2998 - _2498;
                                float _3053 = _2999 - _2499;
                                float _3054 = _3000 - _2500;
                                float _3058 = inversesqrt(dot(vec3(_3052, _3053, _3054), vec3(_3052, _3053, _3054)));
                                float _3062 = dot(vec3(_426, _429, _432), vec3((-0.0) - _2498, (-0.0) - _2499, (-0.0) - _2500));
                                float _4067 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                                float _3065 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                                float _3066 = dot(vec3(_426, _429, _432), vec3(_3058 * _3052, _3058 * _3053, _3058 * _3054));
                                float _4078 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3069 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                                float _3073 = ((_3069 * _3069) * (_3051 + (-1.0))) + 1.0;
                                float _3074 = _3011 * _3050;
                                float _3075 = _3074 * _3074;
                                float _3081 = ((1.0 - _3075) * dot(vec3(_426, _429, _432), vec3(_2998, _2999, _3000))) + _3075;
                                float _4089 = isnan(0.0) ? _3081 : (isnan(_3081) ? 0.0 : max(_3081, 0.0));
                                float _3082 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                                float _3083 = 1.0 - _3050;
                                float _3093 = (0.5 / (((_3082 * ((_3065 * _3083) + _3050)) + 9.9999999392252902907785028219223e-09) + (((_3082 * _3083) + _3050) * _3065))) * _3082;
                                float _4100 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3103 = (_3028 * _3005) * (((_3051 * 3.1415927410125732421875) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) / ((_3073 * _3073) * ((_3018 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3103 * _2884.x;
                                frontier_phi_73_pred_1 = _3103 * _2884.y;
                                frontier_phi_73_pred_2 = _3029 * _2872.z;
                                frontier_phi_73_pred_3 = _3029 * _2872.y;
                                frontier_phi_73_pred_4 = _3029 * _2872.x;
                                frontier_phi_73_pred_5 = _3103 * _2884.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3107 = frontier_phi_73_pred;
                            _3108 = frontier_phi_73_pred_1;
                            _3112 = frontier_phi_73_pred_2;
                            _3111 = frontier_phi_73_pred_3;
                            _3110 = frontier_phi_73_pred_4;
                            _3109 = frontier_phi_73_pred_5;
                            _2814 = _3110 + _2827;
                            _2815 = _3111 + _2828;
                            _2816 = _3112 + _2829;
                            _2811 = _3107 + _2824;
                            _2812 = _3108 + _2825;
                            _2813 = _3109 + _2826;
                            if (_2831 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2824 = _2811;
                                _2825 = _2812;
                                _2826 = _2813;
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2831;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2814;
                        frontier_phi_67_pred_1 = _2815;
                        frontier_phi_67_pred_2 = _2816;
                        frontier_phi_67_pred_3 = _2813;
                        frontier_phi_67_pred_4 = _2812;
                        frontier_phi_67_pred_5 = _2811;
                    }
                    _2479 = frontier_phi_67_pred;
                    _2481 = frontier_phi_67_pred_1;
                    _2483 = frontier_phi_67_pred_2;
                    _2477 = frontier_phi_67_pred_3;
                    _2475 = frontier_phi_67_pred_4;
                    _2473 = frontier_phi_67_pred_5;
                    uint _2618 = _2617 + 1u;
                    if (_2618 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2611 = _2473;
                        _2612 = _2475;
                        _2613 = _2477;
                        _2614 = _2479;
                        _2615 = _2481;
                        _2616 = _2483;
                        _2617 = _2618;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2481;
                frontier_phi_55_56_ladder_1 = _2483;
                frontier_phi_55_56_ladder_2 = _2479;
                frontier_phi_55_56_ladder_3 = _2477;
                frontier_phi_55_56_ladder_4 = _2475;
                frontier_phi_55_56_ladder_5 = _2473;
            }
            else
            {
                frontier_phi_55_56_ladder = _2358;
                frontier_phi_55_56_ladder_1 = _2360;
                frontier_phi_55_56_ladder_2 = _2356;
                frontier_phi_55_56_ladder_3 = _2354;
                frontier_phi_55_56_ladder_4 = _2352;
                frontier_phi_55_56_ladder_5 = _2350;
            }
            _2472 = frontier_phi_55_56_ladder_5;
            _2474 = frontier_phi_55_56_ladder_4;
            _2476 = frontier_phi_55_56_ladder_3;
            _2478 = frontier_phi_55_56_ladder_2;
            _2480 = frontier_phi_55_56_ladder;
            _2482 = frontier_phi_55_56_ladder_1;
        }
        float _2487 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2227 = (_2487 * _2478) + _1663;
        _2229 = (_2487 * _2480) + _1665;
        _2231 = (_2487 * _2482) + _1667;
        _2233 = ((_2472 * _471) * _2487) + _2008;
        _2235 = ((_2474 * _473) * _2487) + _2010;
        _2237 = ((_2476 * _474) * _2487) + _2012;
    }
    else
    {
        _2227 = _1663;
        _2229 = _1665;
        _2231 = _1667;
        _2233 = _2008;
        _2235 = _2010;
        _2237 = _2012;
    }
    uint _2243 = _447 + uint(cbMatDynParam._m0[0u].w);
    float _2251 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _297.x) * cbInstanceData._m0[_2243].x;
    float _2254 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _297.y) * cbInstanceData._m0[_2243].y;
    float _2257 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _297.z) * cbInstanceData._m0[_2243].z;
    float _4116 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4127 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _4138 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _2274 = (((isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0))) * (_2227 + ((isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0))) * _486))) + ((_2233 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + _2251;
    float _2276 = (_2254 + ((_2235 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0))) * (_2229 + ((isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0))) * _486)));
    float _2278 = (_2257 + ((_2237 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1296)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_2231 + ((isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0))) * _486)));
    float _4164 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2291 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    uint _2292 = _445 + 6u;
    float _2300 = _404 / cbSceneParam._m0[86u].x;
    float _2301 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2315 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2300, _2301, (log2((isnan(cbSceneParam._m0[77u].w) ? _338 : (isnan(_338) ? cbSceneParam._m0[77u].w : min(_338, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2317 = _2315.x;
    float _2318 = _2315.y;
    float _2319 = _2315.z;
    float _2320 = _2315.w;
    float _2413;
    float _2415;
    float _2417;
    float _2419;
    if (_338 > cbSceneParam._m0[78u].w)
    {
        float _2375 = isnan(_338) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _338 : min(cbSceneParam._m0[80u].w, _338));
        float _2376 = _2375 / _338;
        float _2387 = _2376 * _389;
        float _2388 = _390 * _2376;
        float _2389 = (-0.0) - _2388;
        float _2391 = _2376 * _391;
        float _2393 = (cbSceneParam._m0[77u].w * _2389) / _2375;
        float _2394 = _2393 + cbSceneParam._m0[79u].w;
        float _2395 = cbSceneParam._m0[79u].w - _2388;
        float _2401 = sqrt(((_2387 * _2387) + (_2388 * _2388)) + (_2391 * _2391));
        float _2404 = (1.0 - (cbSceneParam._m0[77u].w / _2375)) * _2401;
        float _2409 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2411 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2573;
        if (abs((_2389 - _2393) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2573 = ((((_2394 > 0.0) ? exp2(_2409 * _2394) : (2.0 - exp2(_2411 * _2394))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2404;
        }
        else
        {
            float _2533 = 1.0 / cbSceneParam._m0[80u].x;
            float _2534 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : max(_2394, _2395));
            float _2535 = isnan(_2395) ? _2394 : (isnan(_2394) ? _2395 : min(_2394, _2395));
            float _2544 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : min(_2534, 0.0));
            float _2545 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : min(_2535, 0.0));
            _2573 = ((abs(_2401 / _2389) * cbSceneParam._m0[80u].y) * ((((_2544 - _2545) * 2.0) - ((exp2(_2409 * (isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0)))) - exp2(_2409 * (isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0))))) * _2533)) - ((exp2(_2411 * _2544) - exp2(_2411 * _2545)) * _2533))) + (_2404 * cbSceneParam._m0[80u].z);
        }
        vec4 _2575 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2300, _2301, 1.0), 0.0);
        float _2584 = exp2((_2573 * (-1.44269502162933349609375)) * (1.0 - _2575.w));
        float _2585 = log2(_2584);
        float _2601 = log2(_2320);
        _2413 = (exp2(_2601 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].x)) * _2575.x) / cbSceneParam._m0[78u].x)) + _2317;
        _2415 = (exp2(_2601 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].y)) * _2575.y) / cbSceneParam._m0[78u].y)) + _2318;
        _2417 = (exp2(_2601 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2585 * cbSceneParam._m0[78u].z)) * _2575.z) / cbSceneParam._m0[78u].z)) + _2319;
        _2419 = _2584 * _2320;
    }
    else
    {
        _2413 = _2317;
        _2415 = _2318;
        _2417 = _2319;
        _2419 = _2320;
    }
    float _2431 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2432 = _2431 == 3.0;
    float _2433 = log2(_2419);
    float _2437 = exp2(_2433 * cbSceneParam._m0[78u].x);
    float _2438 = exp2(_2433 * cbSceneParam._m0[78u].y);
    float _2439 = exp2(_2433 * cbSceneParam._m0[78u].z);
    float _2440 = _2437 * (isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0)));
    float _2441 = _2438 * (isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0)));
    float _2442 = _2439 * (isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0)));
    float _2451 = (_2431 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2451 * (_2432 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.y = _2451 * (_2432 ? _2441 : (_2441 + (cbSceneParam._m0[72u].w * _2415)));
    SV_Target.z = _2451 * (_2432 ? _2442 : (_2442 + (cbSceneParam._m0[72u].w * _2417)));
    SV_Target.w = cbInstanceData._m0[_2292].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2251) * _2291) * _2437) * _2451;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2254) * _2291) * _2438) * _2451;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2257) * _2291) * _2439) * _2451;
    SV_Target_1.w = cbInstanceData._m0[_2292].w;
}


