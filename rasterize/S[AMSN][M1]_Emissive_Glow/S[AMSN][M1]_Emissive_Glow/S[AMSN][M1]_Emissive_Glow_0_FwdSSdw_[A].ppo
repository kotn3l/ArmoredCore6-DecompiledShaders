#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _908;
float _3366;
float _3367;
float _3368;
float _3369;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _255 = cbMtdParam._m0[11u].x + _248.x;
    vec4 _267 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _271 = _267.z;
    float _275 = (_267.x * 2.0) + (-1.0);
    float _277 = (_267.y * 2.0) + (-1.0);
    float _278 = dot(vec2(_275, _277), vec2(_275, _277));
    float _3378 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _284 = sqrt(1.0 - (isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))));
    vec4 _303 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _310 = fma(_284, _198 * NORMAL.x, fma(_277, _205 * TANGENT.x, (_191 * _184) * _275));
    float _313 = fma(_284, _198 * NORMAL.y, fma(_277, _205 * TANGENT.y, (_191 * _185) * _275));
    float _316 = fma(_284, _198 * NORMAL.z, fma(_277, _205 * TANGENT.z, (_191 * _186) * _275));
    float _320 = inversesqrt(dot(vec3(_310, _313, _316), vec3(_310, _313, _316)));
    float _321 = _320 * _310;
    float _322 = _320 * _313;
    float _323 = _320 * _316;
    float _3389 = isnan(0.0) ? _271 : (isnan(_271) ? 0.0 : max(_271, 0.0));
    float _324 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3411 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3422 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3433 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _328 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
    float _344 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _385 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _395 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _385);
    float _396 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _385);
    float _397 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _385);
    float _401 = inversesqrt(dot(vec3(_395, _396, _397), vec3(_395, _396, _397)));
    float _402 = _395 * _401;
    float _403 = _396 * _401;
    float _404 = _397 * _401;
    vec4 _409 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _411 = _409.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _587 = sqrt(((_395 * _395) + (_396 * _396)) + (_397 * _397));
        float _593 = (cbMatDynParam._m0[5u].x * _587) + cbMatDynParam._m0[5u].y;
        float _3444 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
        float _594 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _598 = (cbMatDynParam._m0[5u].z * _587) + cbMatDynParam._m0[5u].w;
        float _3455 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) - _594)) + _594) < ((_411 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _423 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _424 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _444 = fma(_323, cbSceneParam._m0[5u].z, fma(_322, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _321));
    float _447 = fma(_323, cbSceneParam._m0[6u].z, fma(_322, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _321));
    float _450 = fma(_323, cbSceneParam._m0[7u].z, fma(_322, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _321));
    uint _463 = uint(roundEven(NORMAL.w)) * 13u;
    uint _465 = _463 + 9u;
    uint _466 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _472 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0)))) * cbInstanceData._m0[_466].x;
    float _473 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_466].y;
    float _474 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_466].z;
    float _3466 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _476 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _477 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    float _478 = 1.0 - _328;
    float _479 = _475 * _478;
    float _480 = _476 * _478;
    float _481 = _477 * _478;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _328;
    float _487 = (_476 + (-0.039999999105930328369140625)) * _328;
    float _488 = (_477 + (-0.039999999105930328369140625)) * _328;
    float _489 = _486 + 0.039999999105930328369140625;
    float _491 = _487 + 0.039999999105930328369140625;
    float _492 = _488 + 0.039999999105930328369140625;
    vec4 _501 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _423, cbSceneParam._m0[86u].y * _424));
    float _504 = _501.x * TEXCOORD.z;
    float _505 = dot(vec3(_321, _322, _323), vec3(_402, _403, _404));
    float _508 = _505 * 2.0;
    float _512 = (_508 * _321) - _402;
    float _513 = (_508 * _322) - _403;
    float _514 = (_508 * _323) - _404;
    float _518 = abs(dot(vec3(_402, _403, _404), vec3(_321, _322, _323)));
    float _3499 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _520 = sqrt(_324);
    float _533 = exp2((_520 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_520 * 3.0));
    float _539 = (1.0 - _533) * ((_520 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _540 = _533 * _520;
    float _568 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _572 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _576 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _907;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _632 = fma(_576, cbModelParam._m0[26u].z, fma(_572, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _568));
        float _636 = fma(_576, cbModelParam._m0[27u].z, fma(_572, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _568));
        float _640 = fma(_576, cbModelParam._m0[28u].z, fma(_572, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _568));
        float _665 = _568 + _321;
        float _666 = _572 + _322;
        float _667 = _576 + _323;
        float _677 = fma(_667, cbModelParam._m0[26u].z, fma(_666, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _665)) - _632;
        float _678 = fma(_667, cbModelParam._m0[27u].z, fma(_666, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _665)) - _636;
        float _679 = fma(_667, cbModelParam._m0[28u].z, fma(_666, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _665)) - _640;
        float _683 = inversesqrt(dot(vec3(_677, _678, _679), vec3(_677, _678, _679)));
        float _696 = ((_683 * _677) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_632 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _697 = ((_683 * _678) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_636 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _698 = ((_683 * _679) / cbModelParam._m0[34u].z) + ((((((_640 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _701 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _708 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_696, _697, _698), 0.0);
        float _735 = exp2((_701.w + (-0.5)) * 20.0) * 2.0;
        float _736 = _735 * (_701.x + (-0.5));
        float _737 = _735 * (_701.y + (-0.5));
        float _738 = _735 * (_701.z + (-0.5));
        float _745 = exp2((_708.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_708.x + (-0.5));
        float _747 = _745 * (_708.y + (-0.5));
        float _748 = _745 * (_708.z + (-0.5));
        float _755 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_715.x + (-0.5));
        float _757 = _755 * (_715.y + (-0.5));
        float _758 = _755 * (_715.z + (-0.5));
        float _765 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_722.x + (-0.5));
        float _767 = _765 * (_722.y + (-0.5));
        float _768 = _765 * (_722.z + (-0.5));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
        float _771 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _772 = _736 * 0.5;
        float _773 = _746 * 0.5;
        float _774 = _756 * 0.5;
        float _775 = dot(vec3(_772, _773, _774), vec3(_772, _773, _774));
        float _780 = (_775 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_775);
        float _789 = (dot(vec3(_321, _322, _323), vec3(_780 * _772, _780 * _773, _780 * _774)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _799 = sqrt(((_773 * _773) + (_772 * _772)) + (_774 * _774)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _801 = _800 * 2.0;
        float _805 = (1.0 - _800) / (_800 + 1.0);
        float _3547 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _806 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _815 = ((((1.0 - _806) * (_801 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_801 + 1.0))) + _806) * _769;
        float _816 = _737 * 0.5;
        float _817 = _747 * 0.5;
        float _818 = _757 * 0.5;
        float _819 = dot(vec3(_816, _817, _818), vec3(_816, _817, _818));
        float _824 = (_819 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_819);
        float _832 = (dot(vec3(_321, _322, _323), vec3(_824 * _816, _824 * _817, _824 * _818)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _841 = sqrt(((_817 * _817) + (_816 * _816)) + (_818 * _818)) / (_770 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _842 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _843 = _842 * 2.0;
        float _847 = (1.0 - _842) / (_842 + 1.0);
        float _3580 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _857 = ((((1.0 - _848) * (_843 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_843 + 1.0))) + _848) * _770;
        float _858 = _738 * 0.5;
        float _859 = _748 * 0.5;
        float _860 = _758 * 0.5;
        float _861 = dot(vec3(_858, _859, _860), vec3(_858, _859, _860));
        float _866 = (_861 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_861);
        float _874 = (dot(vec3(_321, _322, _323), vec3(_866 * _858, _866 * _859, _866 * _860)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _883 = sqrt(((_859 * _859) + (_858 * _858)) + (_860 * _860)) / (_771 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _885 = _884 * 2.0;
        float _889 = (1.0 - _884) / (_884 + 1.0);
        float _3613 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _890 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _899 = ((((1.0 - _890) * (_885 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_885 + 1.0))) + _890) * _771;
        _907 = _738;
        _909 = _737;
        _910 = _736;
        _911 = _748;
        _912 = _747;
        _913 = _746;
        _914 = _758;
        _915 = _757;
        _916 = _756;
        _917 = _771;
        _918 = _770;
        _919 = _769;
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0)));
        _921 = cbModelParam._m0[36u].z * (isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0)));
        _922 = cbModelParam._m0[36u].z * (isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0)));
    }
    else
    {
        _907 = _908;
        _909 = _908;
        _910 = _908;
        _911 = _908;
        _912 = _908;
        _913 = _908;
        _914 = _908;
        _915 = _908;
        _916 = _908;
        _917 = _908;
        _918 = _908;
        _919 = _908;
        _920 = 0.0;
        _921 = 0.0;
        _922 = 0.0;
    }
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _951 = fma(_576, cbModelParam._m0[30u].z, fma(_572, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _568));
        float _955 = fma(_576, cbModelParam._m0[31u].z, fma(_572, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _568));
        float _959 = fma(_576, cbModelParam._m0[32u].z, fma(_572, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _568));
        float _982 = _568 + _321;
        float _983 = _572 + _322;
        float _984 = _576 + _323;
        float _994 = fma(_984, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _982)) - _951;
        float _995 = fma(_984, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _982)) - _955;
        float _996 = fma(_984, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _982)) - _959;
        float _1000 = inversesqrt(dot(vec3(_994, _995, _996), vec3(_994, _995, _996)));
        float _1013 = ((_1000 * _994) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_951 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1014 = ((_1000 * _995) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_955 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1015 = ((_1000 * _996) / cbModelParam._m0[35u].z) + ((((((_959 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1017 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1024 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1031 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1013, _1014, _1015), 0.0);
        float _1050 = exp2((_1017.w + (-0.5)) * 20.0) * 2.0;
        float _1051 = _1050 * (_1017.x + (-0.5));
        float _1052 = _1050 * (_1017.y + (-0.5));
        float _1053 = _1050 * (_1017.z + (-0.5));
        float _1060 = exp2((_1024.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1024.x + (-0.5));
        float _1062 = _1060 * (_1024.y + (-0.5));
        float _1063 = _1060 * (_1024.z + (-0.5));
        float _1070 = exp2((_1031.w + (-0.5)) * 20.0) * 2.0;
        float _1071 = _1070 * (_1031.x + (-0.5));
        float _1072 = _1070 * (_1031.y + (-0.5));
        float _1073 = _1070 * (_1031.z + (-0.5));
        float _1080 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1081 = _1080 * (_1038.x + (-0.5));
        float _1082 = _1080 * (_1038.y + (-0.5));
        float _1083 = _1080 * (_1038.z + (-0.5));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1086 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1087 = _1051 * 0.5;
        float _1088 = _1061 * 0.5;
        float _1089 = _1071 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_321, _322, _323), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3676 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1114 + 1.0))) + _1119) * _1084;
        float _1129 = _1052 * 0.5;
        float _1130 = _1062 * 0.5;
        float _1131 = _1072 * 0.5;
        float _1132 = dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131));
        float _1137 = (_1132 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1132);
        float _1145 = (dot(vec3(_321, _322, _323), vec3(_1137 * _1129, _1137 * _1130, _1137 * _1131)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1154 = sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131)) / (_1085 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3709 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1156 + 1.0))) + _1161) * _1085;
        float _1171 = _1053 * 0.5;
        float _1172 = _1063 * 0.5;
        float _1173 = _1073 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_321, _322, _323), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1086 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3742 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1198 + 1.0))) + _1203) * _1086;
        _1220 = _1053;
        _1221 = _1052;
        _1222 = _1051;
        _1223 = _1063;
        _1224 = _1062;
        _1225 = _1061;
        _1226 = _1073;
        _1227 = _1072;
        _1228 = _1071;
        _1229 = _1086;
        _1230 = _1085;
        _1231 = _1084;
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
        _1233 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1234 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
    }
    else
    {
        _1220 = _908;
        _1221 = _908;
        _1222 = _908;
        _1223 = _908;
        _1224 = _908;
        _1225 = _908;
        _1226 = _908;
        _1227 = _908;
        _1228 = _908;
        _1229 = _908;
        _1230 = _908;
        _1231 = _908;
        _1232 = 0.0;
        _1233 = 0.0;
        _1234 = 0.0;
    }
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1245 = (cbModelParam._m0[1u].x * (_1233 - _921)) + _921;
    float _1246 = (cbModelParam._m0[1u].x * (_1234 - _922)) + _922;
    float _1267 = fma(_1246, cbSceneParam._m0[89u].z, fma(_1245, cbSceneParam._m0[89u].y, _1244 * cbSceneParam._m0[89u].x));
    float _1270 = fma(_1246, cbSceneParam._m0[90u].z, fma(_1245, cbSceneParam._m0[90u].y, _1244 * cbSceneParam._m0[90u].x));
    float _1273 = fma(_1246, cbSceneParam._m0[91u].z, fma(_1245, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1244));
    float _1288 = _512 * 0.5;
    float _1289 = _513 * 0.5;
    float _1290 = _514 * 0.5;
    float _1291 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1222, _1225, _1228, _1231));
    float _1294 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1221, _1224, _1227, _1230));
    float _1297 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1331;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1304 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_907, _911, _914, _917));
        float _1308 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_909, _912, _915, _918));
        float _1312 = dot(vec4(_1288, _1289, _1290, 1.0), vec4(_910, _913, _916, _919));
        float _1319 = dot(vec4(cbModelParam._m0[39u]), vec4(_1288, _1289, _1290, 1.0));
        _1331 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1319) ? 0.0 : (isnan(0.0) ? _1319 : max(0.0, _1319))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1331 = 1.0;
    }
    float _1342;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1333 = dot(vec4(cbModelParam._m0[40u]), vec4(_1288, _1289, _1290, 1.0));
        _1342 = dot(vec3(isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)), isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0)), isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1333) ? 0.0 : (isnan(0.0) ? _1333 : max(0.0, _1333))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1342 = 1.0;
    }
    float _1346 = (_1342 * cbModelParam._m0[1u].x) + (_1331 * (1.0 - cbModelParam._m0[1u].x));
    float _1356 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _324);
    float _1357 = isnan(_1356) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1356 : min(cbModelParam._m0[25u].z, _1356));
    float _1439;
    float _1441;
    float _1443;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1406 = fma(_576, cbModelParam._m0[13u].z, fma(_572, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _568)) + cbModelParam._m0[13u].w;
        float _1410 = fma(_576, cbModelParam._m0[14u].z, fma(_572, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _568)) + cbModelParam._m0[14u].w;
        float _1414 = fma(_576, cbModelParam._m0[15u].z, fma(_572, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _568)) + cbModelParam._m0[15u].w;
        float _1417 = fma(_514, cbModelParam._m0[13u].z, fma(_513, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _512));
        float _1420 = fma(_514, cbModelParam._m0[14u].z, fma(_513, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _512));
        float _1423 = fma(_514, cbModelParam._m0[15u].z, fma(_513, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _512));
        float _1451;
        if (_1417 > 0.0)
        {
            _1451 = abs((1.0 - _1406) / _1417);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1417 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1406 + 1.0) / _1417);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1451 = frontier_phi_17_15_ladder;
        }
        float _1679;
        if (_1420 > 0.0)
        {
            _1679 = abs((1.0 - _1410) / _1420);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1420 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1410 + 1.0) / _1420);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1679 = frontier_phi_26_22_ladder;
        }
        float _1936;
        if (_1423 > 0.0)
        {
            _1936 = abs((1.0 - _1414) / _1423);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1414 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1936 = frontier_phi_38_33_ladder;
        }
        float _1938 = isnan(_1679) ? _1451 : (isnan(_1451) ? _1679 : min(_1451, _1679));
        float _1939 = isnan(_1936) ? _1938 : (isnan(_1938) ? _1936 : min(_1938, _1936));
        float _1943 = (_1939 * _1417) + _1406;
        float _1944 = (_1939 * _1420) + _1410;
        float _1945 = (_1939 * _1423) + _1414;
        float _1946 = _1939 * 9.9999997473787516355514526367188e-05;
        float _1948 = (-1.0) - _1946;
        float _1950 = _1946 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1945 > _1950) || ((_1945 < _1948) || ((_1944 > _1950) || ((_1944 < _1948) || ((_1943 < _1948) || (_1943 > _1950))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2073 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1945, cbModelParam._m0[9u].z, fma(_1944, cbModelParam._m0[9u].y, _1943 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1945, cbModelParam._m0[10u].z, fma(_1944, cbModelParam._m0[10u].y, _1943 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1945, cbModelParam._m0[11u].z, fma(_1944, cbModelParam._m0[11u].y, _1943 * cbModelParam._m0[11u].x))), _1357);
            frontier_phi_16_38_ladder = _2073.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2073.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2073.x * cbModelParam._m0[1u].y;
        }
        _1439 = frontier_phi_16_38_ladder_2;
        _1441 = frontier_phi_16_38_ladder_1;
        _1443 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1427 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_512, _513, _514), _1357);
        _1439 = _1427.x * cbModelParam._m0[1u].y;
        _1441 = _1427.y * cbModelParam._m0[1u].y;
        _1443 = _1427.z * cbModelParam._m0[1u].y;
    }
    float _1447 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _324);
    float _1448 = isnan(_1447) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1447 : min(cbModelParam._m0[25u].w, _1447));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_576, cbModelParam._m0[21u].z, fma(_572, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _568)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_576, cbModelParam._m0[22u].z, fma(_572, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _568)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_576, cbModelParam._m0[23u].z, fma(_572, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _568)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_514, cbModelParam._m0[21u].z, fma(_513, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _512));
        float _1519 = fma(_514, cbModelParam._m0[22u].z, fma(_513, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _512));
        float _1522 = fma(_514, cbModelParam._m0[23u].z, fma(_513, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _512));
        float _1684;
        if (_1516 > 0.0)
        {
            _1684 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1684 = frontier_phi_28_24_ladder;
        }
        float _1963;
        if (_1519 > 0.0)
        {
            _1963 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1963 = frontier_phi_40_35_ladder;
        }
        float _2176;
        if (_1522 > 0.0)
        {
            _2176 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2176 = frontier_phi_49_46_ladder;
        }
        float _2178 = isnan(_1963) ? _1684 : (isnan(_1684) ? _1963 : min(_1684, _1963));
        float _2179 = isnan(_2176) ? _2178 : (isnan(_2178) ? _2176 : min(_2178, _2176));
        float _2183 = (_2179 * _1516) + _1505;
        float _2184 = (_2179 * _1519) + _1509;
        float _2185 = (_2179 * _1522) + _1513;
        float _2186 = _2179 * 9.9999997473787516355514526367188e-05;
        float _2187 = (-1.0) - _2186;
        float _2189 = _2186 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2185 > _2189) || ((_2185 < _2187) || ((_2184 > _2189) || ((_2184 < _2187) || ((_2183 < _2187) || (_2183 > _2189))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2185, cbModelParam._m0[17u].z, fma(_2184, cbModelParam._m0[17u].y, _2183 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2185, cbModelParam._m0[18u].z, fma(_2184, cbModelParam._m0[18u].y, _2183 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2185, cbModelParam._m0[19u].z, fma(_2184, cbModelParam._m0[19u].y, _2183 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_25_49_ladder = _2419.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2419.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2419.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_25_49_ladder_2;
        _1543 = frontier_phi_25_49_ladder_1;
        _1545 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_512, _513, _514), _1448);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1558 = (((_539 * _489) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_539 * _491) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1562 = (((_539 * _492) + _540) * _504) * ((cbModelParam._m0[1u].w * (_1545 - _1443)) + _1443);
    float _1565 = fma(_1562, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1558 * cbSceneParam._m0[89u].x));
    float _1568 = fma(_1562, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1558 * cbSceneParam._m0[90u].x));
    float _1571 = fma(_1562, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1558 * cbSceneParam._m0[91u].x));
    vec4 _1579 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_423, _424));
    float _1581 = _1579.w;
    float _1593 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1581);
    float _1594 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1581);
    float _1595 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1581);
    uvec4 _1599 = floatBitsToUint(cbInstanceData._m0[_463 + 5u]);
    uint _1601 = _1599.x * 14u;
    uint _1602 = _1601 + 13u;
    float _1609 = _504 + (-1.0);
    float _1614 = (cbLight._m0[_1602].x * _1609) + 1.0;
    float _1615 = (cbLight._m0[_1602].y * _1609) + 1.0;
    float _1616 = (cbLight._m0[_1602].z * _1609) + 1.0;
    float _1617 = (cbLight._m0[_1602].w * _1609) + 1.0;
    uint _1618 = _1601 + 5u;
    float _1624 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
    uint _1628 = _1601 + 4u;
    float _1638 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1642 = _1601 | 1u;
    float _1653 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_321, _322, _323));
    float _1656 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_321, _322, _323));
    float _3878 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
    float _3889 = isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0));
    float _1661 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1663 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1670 = ((cbLight._m0[_1618].x * _1624) * _1663) + (((cbLight._m0[_1628].x * _1593) * _1638) * _1661);
    float _1671 = ((_1624 * cbLight._m0[_1618].y) * _1663) + (((cbLight._m0[_1628].y * _1594) * _1638) * _1661);
    float _1672 = ((_1624 * cbLight._m0[_1618].z) * _1663) + (((cbLight._m0[_1628].z * _1595) * _1638) * _1661);
    uvec4 _1676 = floatBitsToUint(cbLight._m0[_1601 + 12u]);
    bool _1678 = _1676.x == 0u;
    float _1689;
    float _1691;
    float _1693;
    if (_1678)
    {
        _1689 = _1670;
        _1691 = _1671;
        _1693 = _1672;
    }
    else
    {
        uint _1697 = _1601 + 6u;
        float _1713 = (dot(vec3(cbLight._m0[_1601 + 2u].xyz), vec3(_321, _322, _323)) * 0.5) + 0.5;
        float _1714 = _1713 * _1713;
        float _3900 = isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0));
        float _1715 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1716 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1689 = (((cbLight._m0[_1697].x * 0.3183098733425140380859375) * _1715) * _1716) + _1670;
        _1691 = (((cbLight._m0[_1697].y * 0.3183098733425140380859375) * _1715) * _1716) + _1671;
        _1693 = (((cbLight._m0[_1697].z * 0.3183098733425140380859375) * _1715) * _1716) + _1672;
    }
    bool _1696 = _1676.y == 0u;
    float _1734;
    float _1736;
    float _1738;
    if (_1696)
    {
        _1734 = _1689;
        _1736 = _1691;
        _1738 = _1693;
    }
    else
    {
        uint _1907 = _1601 + 7u;
        float _1923 = (dot(vec3(cbLight._m0[_1601 + 3u].xyz), vec3(_321, _322, _323)) * 0.5) + 0.5;
        float _1924 = _1923 * _1923;
        float _3916 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
        float _1925 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1926 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _1734 = (((cbLight._m0[_1907].x * 0.3183098733425140380859375) * _1925) * _1926) + _1689;
        _1736 = (((cbLight._m0[_1907].y * 0.3183098733425140380859375) * _1925) * _1926) + _1691;
        _1738 = (((cbLight._m0[_1907].z * 0.3183098733425140380859375) * _1925) * _1926) + _1693;
    }
    uint _1741 = _1601 + 8u;
    float _1754 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1601].w)) * _324) * 0.949999988079071044921875);
    float _1755 = _1754 * _1754;
    float _1756 = cbLight._m0[_1601].x + _402;
    float _1757 = cbLight._m0[_1601].y + _403;
    float _1758 = cbLight._m0[_1601].z + _404;
    float _1762 = inversesqrt(dot(vec3(_1756, _1757, _1758), vec3(_1756, _1757, _1758)));
    float _1763 = _1762 * _1756;
    float _1764 = _1762 * _1757;
    float _1765 = _1762 * _1758;
    float _1766 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1601].xyz));
    float _3932 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _1769 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _3943 = isnan(0.0) ? _505 : (isnan(_505) ? 0.0 : max(_505, 0.0));
    float _1770 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _1771 = dot(vec3(_321, _322, _323), vec3(_1763, _1764, _1765));
    float _3954 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1774 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
    float _1775 = dot(vec3(cbLight._m0[_1601].xyz), vec3(_1763, _1764, _1765));
    float _3965 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1779 = _1755 * _1755;
    float _1783 = ((_1774 * _1774) * (_1779 + (-1.0))) + 1.0;
    float _1791 = exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0);
    float _1792 = 0.959999978542327880859375 - _486;
    float _1794 = 0.959999978542327880859375 - _487;
    float _1795 = 0.959999978542327880859375 - _488;
    float _1802 = 1.0 - _1755;
    float _1813 = (0.5 / (((_1770 * ((_1769 * _1802) + _1755)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1802) + _1755) * _1769))) * _1769;
    float _3976 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1815 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1779 / ((_1783 * _1783) * 3.141590118408203125));
    uint _1829 = _1601 + 9u;
    float _1840 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1642].w)) * _324) * 0.949999988079071044921875);
    float _1841 = _1840 * _1840;
    float _1842 = cbLight._m0[_1642].x + _402;
    float _1843 = cbLight._m0[_1642].y + _403;
    float _1844 = cbLight._m0[_1642].z + _404;
    float _1848 = inversesqrt(dot(vec3(_1842, _1843, _1844), vec3(_1842, _1843, _1844)));
    float _1849 = _1848 * _1842;
    float _1850 = _1848 * _1843;
    float _1851 = _1848 * _1844;
    float _1852 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1642].xyz));
    float _3987 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
    float _1856 = dot(vec3(_321, _322, _323), vec3(_1849, _1850, _1851));
    float _3998 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1859 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
    float _1860 = dot(vec3(cbLight._m0[_1642].xyz), vec3(_1849, _1850, _1851));
    float _4009 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
    float _1864 = _1841 * _1841;
    float _1868 = ((_1859 * _1859) * (_1864 + (-1.0))) + 1.0;
    float _1875 = exp2(log2(1.0 - (isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0)))) * 5.0);
    float _1882 = 1.0 - _1841;
    float _1892 = (0.5 / (((_1770 * ((_1855 * _1882) + _1841)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _1882) + _1841) * _1855))) * _1855;
    float _4020 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1894 = (isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1864 / ((_1868 * _1868) * 3.141590118408203125));
    float _1904 = (((((_1875 * _1792) + _489) * cbLight._m0[_1829].x) * _1894) * _1624) + ((((cbLight._m0[_1741].x * _1593) * ((_1791 * _1792) + _489)) * _1815) * _1638);
    float _1905 = (((((_1875 * _1794) + _491) * cbLight._m0[_1829].y) * _1894) * _1624) + ((((cbLight._m0[_1741].y * _1594) * ((_1791 * _1794) + _491)) * _1815) * _1638);
    float _1906 = (((((_1875 * _1795) + _492) * cbLight._m0[_1829].z) * _1894) * _1624) + ((((cbLight._m0[_1741].z * _1595) * ((_1791 * _1795) + _492)) * _1815) * _1638);
    float _1968;
    float _1970;
    float _1972;
    if (_1678)
    {
        _1968 = _1904;
        _1970 = _1905;
        _1972 = _1906;
    }
    else
    {
        uint _1974 = _1601 + 2u;
        uint _1978 = _1601 + 10u;
        float _1992 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1974].w)) * _324) * 0.949999988079071044921875);
        float _1993 = _1992 * _1992;
        float _1994 = cbLight._m0[_1974].x + _402;
        float _1995 = cbLight._m0[_1974].y + _403;
        float _1996 = cbLight._m0[_1974].z + _404;
        float _2000 = inversesqrt(dot(vec3(_1994, _1995, _1996), vec3(_1994, _1995, _1996)));
        float _2001 = _2000 * _1994;
        float _2002 = _2000 * _1995;
        float _2003 = _2000 * _1996;
        float _2004 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_1974].xyz));
        float _4031 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
        float _2007 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _2008 = dot(vec3(_321, _322, _323), vec3(_2001, _2002, _2003));
        float _4042 = isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0));
        float _2011 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _2012 = dot(vec3(cbLight._m0[_1974].xyz), vec3(_2001, _2002, _2003));
        float _4053 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
        float _2016 = _1993 * _1993;
        float _2020 = ((_2011 * _2011) * (_2016 + (-1.0))) + 1.0;
        float _2027 = exp2(log2(1.0 - (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) * 5.0);
        float _2034 = 1.0 - _1993;
        float _2044 = (0.5 / (((_1770 * ((_2007 * _2034) + _1993)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2034) + _1993) * _2007))) * _2007;
        float _4064 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        float _2046 = (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))) * (_2016 / ((_2020 * _2020) * 3.141590118408203125));
        float _2047 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1968 = (((((_2027 * _1792) + _489) * cbLight._m0[_1978].x) * _2046) * _2047) + _1904;
        _1970 = (((((_2027 * _1794) + _491) * cbLight._m0[_1978].y) * _2046) * _2047) + _1905;
        _1972 = (((((_2027 * _1795) + _492) * cbLight._m0[_1978].z) * _2046) * _2047) + _1906;
    }
    float _2082;
    float _2084;
    float _2086;
    if (_1696)
    {
        _2082 = _1968;
        _2084 = _1970;
        _2086 = _1972;
    }
    else
    {
        uint _2093 = _1601 + 3u;
        uint _2097 = _1601 + 11u;
        float _2111 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2093].w)) * _324) * 0.949999988079071044921875);
        float _2112 = _2111 * _2111;
        float _2113 = cbLight._m0[_2093].x + _402;
        float _2114 = cbLight._m0[_2093].y + _403;
        float _2115 = cbLight._m0[_2093].z + _404;
        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
        float _2120 = _2119 * _2113;
        float _2121 = _2119 * _2114;
        float _2122 = _2119 * _2115;
        float _2123 = dot(vec3(_321, _322, _323), vec3(cbLight._m0[_2093].xyz));
        float _4080 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
        float _2126 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _2127 = dot(vec3(_321, _322, _323), vec3(_2120, _2121, _2122));
        float _4091 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
        float _2130 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2131 = dot(vec3(cbLight._m0[_2093].xyz), vec3(_2120, _2121, _2122));
        float _4102 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
        float _2135 = _2112 * _2112;
        float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
        float _2146 = exp2(log2(1.0 - (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) * 5.0);
        float _2153 = 1.0 - _2112;
        float _2163 = (0.5 / (((_1770 * ((_2126 * _2153) + _2112)) + 9.9999999392252902907785028219223e-09) + (((_1770 * _2153) + _2112) * _2126))) * _2126;
        float _4113 = isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0));
        float _2165 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
        float _2166 = isnan(1.0) ? _1617 : (isnan(_1617) ? 1.0 : min(_1617, 1.0));
        _2082 = (((((_2146 * _1792) + _489) * cbLight._m0[_2097].x) * _2165) * _2166) + _1968;
        _2084 = (((((_2146 * _1794) + _491) * cbLight._m0[_2097].y) * _2165) * _2166) + _1970;
        _2086 = (((((_2146 * _1795) + _492) * cbLight._m0[_2097].z) * _2165) * _2166) + _1972;
    }
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_1599.y == 0u)
    {
        float _2241 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2242 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2241;
        float _2243 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2241;
        float _2244 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2241;
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.x;
        uint _2268 = uint((float(_2256.y) * floor(float(uint(cbSceneParam._m0[85u].y * _424) / _2257))) + floor(float(uint(cbSceneParam._m0[85u].x * _423) / _2257)));
        float _2278 = (log2(_2244 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2279 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        uint _2282 = uint(isnan(14.0) ? _2279 : (isnan(_2279) ? 14.0 : min(_2279, 14.0)));
        uvec4 _2287 = texelFetch(g_lightClusterGridBuffer, int(((_2282 << 2u) + (_2268 << 6u)) >> 2u));
        uint _2288 = _2287.x;
        uint _2289 = _2256.z;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        float _2432;
        float _2434;
        if (((((1u << ((_2289 >> 4u) & 15u)) + 4294967295u) & _2288) == 0u) || ((_2289 & 240u) == 0u))
        {
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
            _2432 = 0.0;
            _2434 = 0.0;
        }
        else
        {
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2433;
            float _2435;
            float _2586 = 0.0;
            float _2587 = 0.0;
            float _2588 = 0.0;
            float _2589 = 0.0;
            float _2590 = 0.0;
            float _2591 = 0.0;
            uint _2592 = 0u;
            uint _2601;
            bool _2602;
            for (;;)
            {
                _2601 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2592 << 2u)) >> 2u)).x;
                _2602 = _2601 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2602)
                {
                    frontier_phi_66_pred = _2586;
                    frontier_phi_66_pred_1 = _2591;
                    frontier_phi_66_pred_2 = _2590;
                    frontier_phi_66_pred_3 = _2589;
                    frontier_phi_66_pred_4 = _2588;
                    frontier_phi_66_pred_5 = _2587;
                }
                else
                {
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    uint _2737;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2588;
                    _2734 = _2589;
                    _2735 = _2590;
                    _2736 = _2591;
                    _2737 = _2601;
                    float _2658;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    for (;;)
                    {
                        uint _2741 = uint(findLSB(_2737)) + (_2592 << 5u);
                        uint _2738 = (_2737 + 4294967295u) & _2737;
                        uint _2743 = _2741 * 48u;
                        vec4 _2757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 3u)).x));
                        uint _2763 = (_2741 * 48u) + 4u;
                        vec4 _2776 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2763)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2763 + 3u)).x));
                        uint _2782 = (_2741 * 48u) + 8u;
                        vec3 _2793 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2782)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2782 + 2u)).x));
                        float _2797 = _2757.x - _2242;
                        float _2798 = _2757.y - _2243;
                        float _2799 = _2757.z - _2244;
                        float _2800 = dot(vec3(_2797, _2798, _2799), vec3(_2797, _2798, _2799));
                        float _2803 = inversesqrt(_2800);
                        float _2804 = _2803 * _2797;
                        float _2805 = _2803 * _2798;
                        float _2806 = _2803 * _2799;
                        float _2807 = dot(vec3(_444, _447, _450), vec3(_2804, _2805, _2806));
                        float _2812 = 1.0 - (_2800 * _2757.w);
                        float _4139 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
                        float _2813 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
                        float _2814 = sqrt(_2800) * _2776.w;
                        float _2817 = 1.39999997615814208984375 / (_2814 + 1.39999997615814208984375);
                        float _2818 = _2817 * _2817;
                        float _2821 = ((1.0 - _2818) * _2807) + _2818;
                        float _2824 = _2814 * _2814;
                        float _2828 = ((isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0))) * _2813) / ((_2824 * 0.699999988079071044921875) + 1.0);
                        float _2832 = (-0.0) - _2242;
                        float _2833 = (-0.0) - _2243;
                        float _2834 = (-0.0) - _2244;
                        float _2838 = inversesqrt(dot(vec3(_2832, _2833, _2834), vec3(_2832, _2833, _2834)));
                        float _2839 = _2838 * _2832;
                        float _2840 = _2838 * _2833;
                        float _2841 = _2838 * _2834;
                        float _2849 = exp2(log2(1.0 / ((_2824 * 3.5) + 5.0)) * 0.25);
                        float _2850 = 1.0 - _520;
                        float _2857 = sqrt(1.0 - ((1.0 - (_2850 * _2850)) * (1.0 - (_2849 * _2849))));
                        float _2858 = _2857 * _2857;
                        float _2859 = _2858 * _2858;
                        float _2860 = _2839 + _2804;
                        float _2861 = _2840 + _2805;
                        float _2862 = _2841 + _2806;
                        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
                        float _2870 = dot(vec3(_444, _447, _450), vec3(_2839, _2840, _2841));
                        float _4155 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _2873 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
                        float _2874 = dot(vec3(_444, _447, _450), vec3(_2866 * _2860, _2866 * _2861, _2866 * _2862));
                        float _4166 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                        float _2877 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
                        float _2881 = ((_2877 * _2877) * (_2859 + (-1.0))) + 1.0;
                        float _2882 = _2817 * _2858;
                        float _2883 = _2882 * _2882;
                        float _2886 = ((1.0 - _2883) * _2807) + _2883;
                        float _4177 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                        float _2887 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
                        float _2888 = 1.0 - _2858;
                        float _2898 = (0.5 / (((_2887 * ((_2873 * _2888) + _2858)) + 9.9999999392252902907785028219223e-09) + (((_2887 * _2888) + _2858) * _2873))) * _2887;
                        float _4188 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                        float _2909 = (((_2859 * 3.1415927410125732421875) * (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) / ((_2881 * _2881) * ((_2824 * 2.1991131305694580078125) + 3.141590118408203125))) * _2813;
                        _2661 = (_2828 * _2776.x) + _2734;
                        _2662 = (_2828 * _2776.y) + _2735;
                        _2663 = (_2828 * _2776.z) + _2736;
                        _2658 = (_2909 * _2793.x) + _2731;
                        _2659 = (_2909 * _2793.y) + _2732;
                        _2660 = (_2909 * _2793.z) + _2733;
                        if (_2738 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2731 = _2658;
                            _2732 = _2659;
                            _2733 = _2660;
                            _2734 = _2661;
                            _2735 = _2662;
                            _2736 = _2663;
                            _2737 = _2738;
                        }
                    }
                    frontier_phi_66_pred = _2658;
                    frontier_phi_66_pred_1 = _2663;
                    frontier_phi_66_pred_2 = _2662;
                    frontier_phi_66_pred_3 = _2661;
                    frontier_phi_66_pred_4 = _2660;
                    frontier_phi_66_pred_5 = _2659;
                }
                _2425 = frontier_phi_66_pred;
                _2435 = frontier_phi_66_pred_1;
                _2433 = frontier_phi_66_pred_2;
                _2431 = frontier_phi_66_pred_3;
                _2429 = frontier_phi_66_pred_4;
                _2427 = frontier_phi_66_pred_5;
                uint _2593 = _2592 + 1u;
                if (_2593 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2586 = _2425;
                    _2587 = _2427;
                    _2588 = _2429;
                    _2589 = _2431;
                    _2590 = _2433;
                    _2591 = _2435;
                    _2592 = _2593;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
            _2432 = _2433;
            _2434 = _2435;
        }
        uvec4 _2438 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2439 = _2438.z;
        uint _2441 = (_2439 >> 8u) & 15u;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        float _2562;
        float _2564;
        if (((4294967295u << _2441) & _2288) == 0u)
        {
            _2554 = _2424;
            _2556 = _2426;
            _2558 = _2428;
            _2560 = _2430;
            _2562 = _2432;
            _2564 = _2434;
        }
        else
        {
            float _2579 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
            float _2580 = _2579 * _2242;
            float _2581 = _2579 * _2243;
            float _2582 = _2579 * _2244;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2441 < ((_2439 >> 12u) & 15u))
            {
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2563;
                float _2565;
                float _2714 = _2424;
                float _2715 = _2426;
                float _2716 = _2428;
                float _2717 = _2430;
                float _2718 = _2432;
                float _2719 = _2434;
                uint _2720 = _2441;
                uint _2729;
                bool _2730;
                for (;;)
                {
                    _2729 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2720 << 2u)) >> 2u)).x;
                    _2730 = _2729 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2730)
                    {
                        frontier_phi_77_pred = _2719;
                        frontier_phi_77_pred_1 = _2718;
                        frontier_phi_77_pred_2 = _2717;
                        frontier_phi_77_pred_3 = _2716;
                        frontier_phi_77_pred_4 = _2715;
                        frontier_phi_77_pred_5 = _2714;
                    }
                    else
                    {
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _3219;
                        float _3220;
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _2936 = _2714;
                        float _2937 = _2715;
                        float _2938 = _2716;
                        float _2939 = _2717;
                        float _2940 = _2718;
                        float _2941 = _2719;
                        uint _2942 = _2729;
                        uint _2943;
                        vec4 _2968;
                        float _2969;
                        vec4 _2984;
                        vec3 _2996;
                        vec4 _3012;
                        vec4 _3028;
                        float _3075;
                        bool _3076;
                        for (;;)
                        {
                            uint _2953 = ((_2720 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2942));
                            _2943 = (_2942 + 4294967295u) & _2942;
                            uint _2955 = _2953 * 40u;
                            _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2969 = _2968.w;
                            uint _2971 = (_2953 * 40u) + 4u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2986 = (_2953 * 40u) + 8u;
                            _2996 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x));
                            uint _2999 = (_2953 * 40u) + 16u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3015 = (_2953 * 40u) + 20u;
                            _3028 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3015)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3015 + 3u)).x));
                            uint _3031 = (_2953 * 40u) + 24u;
                            vec4 _3044 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3031)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3031 + 3u)).x));
                            uint _3050 = (_2953 * 40u) + 28u;
                            vec4 _3063 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3050)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3050 + 3u)).x));
                            _3075 = fma(_2244, _3063.z, fma(_2243, _3063.y, _3063.x * _2242)) + _3063.w;
                            _3076 = !((fma(_2244, _3044.z, fma(_2243, _3044.y, _3044.x * _2242)) + _3044.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3076)
                            {
                                float _3103 = _2968.x - _2242;
                                float _3104 = _2968.y - _2243;
                                float _3105 = _2968.z - _2244;
                                float _3106 = dot(vec3(_3103, _3104, _3105), vec3(_3103, _3104, _3105));
                                float _3109 = inversesqrt(_3106);
                                float _3110 = _3109 * _3103;
                                float _3111 = _3109 * _3104;
                                float _3112 = _3109 * _3105;
                                float _3116 = 1.0 - (_3106 / (_2969 * _2969));
                                float _4199 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                                float _3121 = sqrt(_3106) * _2984.w;
                                float _3123 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                                float _3124 = _3123 * _3123;
                                float _3127 = ((1.0 - _3124) * dot(vec3(_3110, _3111, _3112), vec3(_444, _447, _450))) + _3124;
                                float _3130 = _3121 * _3121;
                                float _3134 = (fma(_2244, _3012.z, fma(_2243, _3012.y, _3012.x * _2242)) + _3012.w) / _3075;
                                float _3135 = (fma(_2244, _3028.z, fma(_2243, _3028.y, _3028.x * _2242)) + _3028.w) / _3075;
                                float _3139 = 1.0 - dot(vec2(_3134, _3135), vec2(_3134, _3135));
                                float _4215 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3140 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                                float _3141 = _3140 * (((isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0))) * _3117) / ((_3130 * 0.699999988079071044921875) + 1.0));
                                float _3153 = exp2(log2(1.0 / ((_3130 * 3.5) + 5.0)) * 0.25);
                                float _3154 = 1.0 - _520;
                                float _3161 = sqrt(1.0 - ((1.0 - (_3154 * _3154)) * (1.0 - (_3153 * _3153))));
                                float _3162 = _3161 * _3161;
                                float _3163 = _3162 * _3162;
                                float _3164 = _3110 - _2580;
                                float _3165 = _3111 - _2581;
                                float _3166 = _3112 - _2582;
                                float _3170 = inversesqrt(dot(vec3(_3164, _3165, _3166), vec3(_3164, _3165, _3166)));
                                float _3174 = dot(vec3(_444, _447, _450), vec3((-0.0) - _2580, (-0.0) - _2581, (-0.0) - _2582));
                                float _4226 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3177 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                                float _3178 = dot(vec3(_444, _447, _450), vec3(_3170 * _3164, _3170 * _3165, _3170 * _3166));
                                float _4237 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                                float _3181 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                                float _3185 = ((_3181 * _3181) * (_3163 + (-1.0))) + 1.0;
                                float _3186 = _3123 * _3162;
                                float _3187 = _3186 * _3186;
                                float _3193 = ((1.0 - _3187) * dot(vec3(_444, _447, _450), vec3(_3110, _3111, _3112))) + _3187;
                                float _4248 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                                float _3194 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
                                float _3195 = 1.0 - _3162;
                                float _3205 = (0.5 / (((_3194 * ((_3177 * _3195) + _3162)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3162) * _3177))) * _3194;
                                float _4259 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                                float _3215 = (_3140 * _3117) * (((_3163 * 3.1415927410125732421875) * (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0)))) / ((_3185 * _3185) * ((_3130 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3141 * _2984.y;
                                frontier_phi_83_pred_1 = _3141 * _2984.x;
                                frontier_phi_83_pred_2 = _3215 * _2996.z;
                                frontier_phi_83_pred_3 = _3215 * _2996.y;
                                frontier_phi_83_pred_4 = _3215 * _2996.x;
                                frontier_phi_83_pred_5 = _3141 * _2984.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3223 = frontier_phi_83_pred;
                            _3222 = frontier_phi_83_pred_1;
                            _3221 = frontier_phi_83_pred_2;
                            _3220 = frontier_phi_83_pred_3;
                            _3219 = frontier_phi_83_pred_4;
                            _3224 = frontier_phi_83_pred_5;
                            _2926 = _3222 + _2939;
                            _2927 = _3223 + _2940;
                            _2928 = _3224 + _2941;
                            _2923 = _3219 + _2936;
                            _2924 = _3220 + _2937;
                            _2925 = _3221 + _2938;
                            if (_2943 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2928;
                                _2942 = _2943;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2928;
                        frontier_phi_77_pred_1 = _2927;
                        frontier_phi_77_pred_2 = _2926;
                        frontier_phi_77_pred_3 = _2925;
                        frontier_phi_77_pred_4 = _2924;
                        frontier_phi_77_pred_5 = _2923;
                    }
                    _2565 = frontier_phi_77_pred;
                    _2563 = frontier_phi_77_pred_1;
                    _2561 = frontier_phi_77_pred_2;
                    _2559 = frontier_phi_77_pred_3;
                    _2557 = frontier_phi_77_pred_4;
                    _2555 = frontier_phi_77_pred_5;
                    uint _2721 = _2720 + 1u;
                    if (_2721 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2714 = _2555;
                        _2715 = _2557;
                        _2716 = _2559;
                        _2717 = _2561;
                        _2718 = _2563;
                        _2719 = _2565;
                        _2720 = _2721;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2559;
                frontier_phi_58_59_ladder_1 = _2565;
                frontier_phi_58_59_ladder_2 = _2563;
                frontier_phi_58_59_ladder_3 = _2561;
                frontier_phi_58_59_ladder_4 = _2557;
                frontier_phi_58_59_ladder_5 = _2555;
            }
            else
            {
                frontier_phi_58_59_ladder = _2428;
                frontier_phi_58_59_ladder_1 = _2434;
                frontier_phi_58_59_ladder_2 = _2432;
                frontier_phi_58_59_ladder_3 = _2430;
                frontier_phi_58_59_ladder_4 = _2426;
                frontier_phi_58_59_ladder_5 = _2424;
            }
            _2554 = frontier_phi_58_59_ladder_5;
            _2556 = frontier_phi_58_59_ladder_4;
            _2558 = frontier_phi_58_59_ladder;
            _2560 = frontier_phi_58_59_ladder_3;
            _2562 = frontier_phi_58_59_ladder_2;
            _2564 = frontier_phi_58_59_ladder_1;
        }
        float _2569 = isnan(1.0) ? _504 : (isnan(_504) ? 1.0 : min(_504, 1.0));
        _2301 = (_2569 * _2560) + _1734;
        _2303 = (_2569 * _2562) + _1736;
        _2305 = (_2569 * _2564) + _1738;
        _2307 = ((_2554 * _489) * _2569) + _2082;
        _2309 = ((_2556 * _491) * _2569) + _2084;
        _2311 = ((_2558 * _492) * _2569) + _2086;
    }
    else
    {
        _2301 = _1734;
        _2303 = _1736;
        _2305 = _1738;
        _2307 = _2082;
        _2309 = _2084;
        _2311 = _2086;
    }
    uint _2317 = _465 + uint(cbMatDynParam._m0[0u].w);
    float _2325 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _303.x) * cbInstanceData._m0[_2317].x;
    float _2328 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _303.y) * cbInstanceData._m0[_2317].y;
    float _2331 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _303.z) * cbInstanceData._m0[_2317].z;
    float _4275 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _4286 = isnan(0.0) ? _480 : (isnan(_480) ? 0.0 : max(_480, 0.0));
    float _4297 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _2348 = (((isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_2301 + ((isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0))) * _504))) + ((_2307 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + _2325;
    float _2350 = (_2328 + ((_2309 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0))) * (_2303 + ((isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0))) * _504)));
    float _2352 = (_2331 + ((_2311 + ((isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))) * _1346)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2305 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _504)));
    float _2353 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2354 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    float _2355 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2361 = cbMtdParam._m0[2u].x * _2325;
    float _2362 = cbMtdParam._m0[2u].y * _2328;
    float _2363 = cbMtdParam._m0[2u].z * _2331;
    float _4323 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2365 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
    uint _2366 = _463 + 6u;
    float _2374 = _423 / cbSceneParam._m0[86u].x;
    float _2375 = _424 / cbSceneParam._m0[86u].y;
    vec4 _2389 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2374, _2375, (log2((isnan(cbSceneParam._m0[77u].w) ? _344 : (isnan(_344) ? cbSceneParam._m0[77u].w : min(_344, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2391 = _2389.x;
    float _2392 = _2389.y;
    float _2393 = _2389.z;
    float _2394 = _2389.w;
    float _2487;
    float _2489;
    float _2491;
    float _2493;
    if (_344 > cbSceneParam._m0[78u].w)
    {
        float _2449 = isnan(_344) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _344 : min(cbSceneParam._m0[80u].w, _344));
        float _2450 = _2449 / _344;
        float _2461 = _2450 * _395;
        float _2462 = _396 * _2450;
        float _2463 = (-0.0) - _2462;
        float _2465 = _2450 * _397;
        float _2467 = (cbSceneParam._m0[77u].w * _2463) / _2449;
        float _2468 = _2467 + cbSceneParam._m0[79u].w;
        float _2469 = cbSceneParam._m0[79u].w - _2462;
        float _2475 = sqrt(((_2461 * _2461) + (_2462 * _2462)) + (_2465 * _2465));
        float _2478 = (1.0 - (cbSceneParam._m0[77u].w / _2449)) * _2475;
        float _2483 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2485 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2671;
        if (abs((_2463 - _2467) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2671 = ((((_2468 > 0.0) ? exp2(_2483 * _2468) : (2.0 - exp2(_2485 * _2468))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2478;
        }
        else
        {
            float _2615 = 1.0 / cbSceneParam._m0[80u].x;
            float _2616 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : max(_2468, _2469));
            float _2617 = isnan(_2469) ? _2468 : (isnan(_2468) ? _2469 : min(_2468, _2469));
            float _2626 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : min(_2616, 0.0));
            float _2627 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : min(_2617, 0.0));
            _2671 = ((abs(_2475 / _2463) * cbSceneParam._m0[80u].y) * ((((_2626 - _2627) * 2.0) - ((exp2(_2483 * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0)))) - exp2(_2483 * (isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0))))) * _2615)) - ((exp2(_2485 * _2626) - exp2(_2485 * _2627)) * _2615))) + (_2478 * cbSceneParam._m0[80u].z);
        }
        vec4 _2673 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2374, _2375, 1.0), 0.0);
        float _2682 = exp2((_2671 * (-1.44269502162933349609375)) * (1.0 - _2673.w));
        float _2683 = log2(_2682);
        float _2699 = log2(_2394);
        _2487 = (exp2(_2699 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].x)) * _2673.x) / cbSceneParam._m0[78u].x)) + _2391;
        _2489 = (exp2(_2699 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].y)) * _2673.y) / cbSceneParam._m0[78u].y)) + _2392;
        _2491 = (exp2(_2699 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2683 * cbSceneParam._m0[78u].z)) * _2673.z) / cbSceneParam._m0[78u].z)) + _2393;
        _2493 = _2682 * _2394;
    }
    else
    {
        _2487 = _2391;
        _2489 = _2392;
        _2491 = _2393;
        _2493 = _2394;
    }
    bool _2709;
    vec4 _2503;
    vec4 _2525;
    float _2527;
    float _2531;
    float _2532;
    float _2533;
    float _2536;
    float _2539;
    float _2542;
    float _2543;
    bool _2553;
    for (;;)
    {
        _2503 = cbMatDynParam._m0[0u];
        float _2505 = roundEven(_2503.y);
        bool _2506 = _2505 == 3.0;
        float _2507 = log2(_2493);
        float _2511 = exp2(_2507 * cbSceneParam._m0[78u].x);
        float _2512 = exp2(_2507 * cbSceneParam._m0[78u].y);
        float _2513 = exp2(_2507 * cbSceneParam._m0[78u].z);
        float _2514 = _2511 * _2353;
        float _2515 = _2512 * _2354;
        float _2516 = _2513 * _2355;
        float _2523 = _411 + (-0.5);
        _2525 = cbMtdParam._m0[1u];
        _2527 = _2525.y * _2523;
        float _2530 = (_2505 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2531 = _2530 * (_2506 ? _2514 : (_2514 + (cbSceneParam._m0[72u].w * _2487)));
        _2532 = _2530 * (_2506 ? _2515 : (_2515 + (cbSceneParam._m0[72u].w * _2489)));
        _2533 = _2530 * (_2506 ? _2516 : (_2516 + (cbSceneParam._m0[72u].w * _2491)));
        _2536 = ((_2361 * _2365) * _2511) * _2530;
        _2539 = ((_2362 * _2365) * _2512) * _2530;
        _2542 = ((_2363 * _2365) * _2513) * _2530;
        _2543 = _2523 * 0.999000012874603271484375;
        _2553 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2553)
        {
            if ((cbInstanceData._m0[_463 + 7u].x + _2543) < 0.5)
            {
                _2709 = true;
                break;
            }
        }
        uint _2650 = _465 + uint(_2503.w);
        if ((cbInstanceData._m0[_2650].w < 1.0) && ((cbInstanceData._m0[_2650].w + _2543) < 0.5))
        {
            _2709 = true;
            break;
        }
        if ((_2527 + 1.0) < _2525.x)
        {
            _2709 = true;
            break;
        }
        _2709 = false;
        break;
    }
    float _2914;
    if (_2709)
    {
        discard_state = true;
        _2914 = 0.0;
    }
    else
    {
        _2914 = cbInstanceData._m0[_2366].w;
    }
    SV_Target.x = _2531;
    SV_Target.y = _2532;
    SV_Target.z = _2533;
    SV_Target.w = _2914;
    SV_Target_1.x = _2536;
    SV_Target_1.y = _2539;
    SV_Target_1.z = _2542;
    SV_Target_1.w = cbInstanceData._m0[_2366].w;
    discard_exit();
}


