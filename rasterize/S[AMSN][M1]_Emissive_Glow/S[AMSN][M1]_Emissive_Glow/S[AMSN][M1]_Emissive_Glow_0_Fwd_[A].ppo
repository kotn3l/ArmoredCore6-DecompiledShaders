#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _906;
float _3340;
float _3341;
float _3342;
float _3343;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _226 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _232 = _226.x * cbMtdParam._m0[9u].x;
    float _233 = _226.y * cbMtdParam._m0[9u].y;
    float _234 = _226.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _253 = cbMtdParam._m0[11u].x + _246.x;
    vec4 _265 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _269 = _265.z;
    float _273 = (_265.x * 2.0) + (-1.0);
    float _275 = (_265.y * 2.0) + (-1.0);
    float _276 = dot(vec2(_273, _275), vec2(_273, _275));
    float _3352 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _282 = sqrt(1.0 - (isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))));
    vec4 _301 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _308 = fma(_282, _196 * NORMAL.x, fma(_275, _203 * TANGENT.x, (_189 * _182) * _273));
    float _311 = fma(_282, _196 * NORMAL.y, fma(_275, _203 * TANGENT.y, (_189 * _183) * _273));
    float _314 = fma(_282, _196 * NORMAL.z, fma(_275, _203 * TANGENT.z, (_189 * _184) * _273));
    float _318 = inversesqrt(dot(vec3(_308, _311, _314), vec3(_308, _311, _314)));
    float _319 = _318 * _308;
    float _320 = _318 * _311;
    float _321 = _318 * _314;
    float _3363 = isnan(0.0) ? _269 : (isnan(_269) ? 0.0 : max(_269, 0.0));
    float _322 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3385 = isnan(0.0) ? _233 : (isnan(_233) ? 0.0 : max(_233, 0.0));
    float _3396 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3407 = isnan(0.0) ? _253 : (isnan(_253) ? 0.0 : max(_253, 0.0));
    float _326 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
    float _342 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _383 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _393 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _383);
    float _394 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _383);
    float _395 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _383);
    float _399 = inversesqrt(dot(vec3(_393, _394, _395), vec3(_393, _394, _395)));
    float _400 = _393 * _399;
    float _401 = _394 * _399;
    float _402 = _395 * _399;
    vec4 _407 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _409 = _407.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _585 = sqrt(((_393 * _393) + (_394 * _394)) + (_395 * _395));
        float _591 = (cbMatDynParam._m0[5u].x * _585) + cbMatDynParam._m0[5u].y;
        float _3418 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
        float _592 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _596 = (cbMatDynParam._m0[5u].z * _585) + cbMatDynParam._m0[5u].w;
        float _3429 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) - _592)) + _592) < ((_409 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _421 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _422 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _442 = fma(_321, cbSceneParam._m0[5u].z, fma(_320, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _319));
    float _445 = fma(_321, cbSceneParam._m0[6u].z, fma(_320, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _319));
    float _448 = fma(_321, cbSceneParam._m0[7u].z, fma(_320, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _319));
    uint _461 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = _461 + 9u;
    uint _464 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _470 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0)))) * cbInstanceData._m0[_464].x;
    float _471 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_464].y;
    float _472 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_464].z;
    float _3440 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _475 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _476 = 1.0 - _326;
    float _477 = _473 * _476;
    float _478 = _474 * _476;
    float _479 = _475 * _476;
    float _484 = (_473 + (-0.039999999105930328369140625)) * _326;
    float _485 = (_474 + (-0.039999999105930328369140625)) * _326;
    float _486 = (_475 + (-0.039999999105930328369140625)) * _326;
    float _487 = _484 + 0.039999999105930328369140625;
    float _489 = _485 + 0.039999999105930328369140625;
    float _490 = _486 + 0.039999999105930328369140625;
    vec4 _499 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _421, cbSceneParam._m0[86u].y * _422));
    float _502 = _499.x * TEXCOORD.z;
    float _503 = dot(vec3(_319, _320, _321), vec3(_400, _401, _402));
    float _506 = _503 * 2.0;
    float _510 = (_506 * _319) - _400;
    float _511 = (_506 * _320) - _401;
    float _512 = (_506 * _321) - _402;
    float _516 = abs(dot(vec3(_400, _401, _402), vec3(_319, _320, _321)));
    float _3473 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _518 = sqrt(_322);
    float _531 = exp2((_518 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_518 * 3.0));
    float _537 = (1.0 - _531) * ((_518 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _538 = _531 * _518;
    float _566 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _570 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _574 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _905;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    float _919;
    float _920;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _630 = fma(_574, cbModelParam._m0[26u].z, fma(_570, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _566));
        float _634 = fma(_574, cbModelParam._m0[27u].z, fma(_570, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _566));
        float _638 = fma(_574, cbModelParam._m0[28u].z, fma(_570, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _566));
        float _663 = _566 + _319;
        float _664 = _570 + _320;
        float _665 = _574 + _321;
        float _675 = fma(_665, cbModelParam._m0[26u].z, fma(_664, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _663)) - _630;
        float _676 = fma(_665, cbModelParam._m0[27u].z, fma(_664, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _663)) - _634;
        float _677 = fma(_665, cbModelParam._m0[28u].z, fma(_664, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _663)) - _638;
        float _681 = inversesqrt(dot(vec3(_675, _676, _677), vec3(_675, _676, _677)));
        float _694 = ((_681 * _675) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_630 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _695 = ((_681 * _676) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_634 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _696 = ((_681 * _677) / cbModelParam._m0[34u].z) + ((((((_638 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_694, _695, _696), 0.0);
        float _733 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_699.x + (-0.5));
        float _735 = _733 * (_699.y + (-0.5));
        float _736 = _733 * (_699.z + (-0.5));
        float _743 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_706.x + (-0.5));
        float _745 = _743 * (_706.y + (-0.5));
        float _746 = _743 * (_706.z + (-0.5));
        float _753 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_713.x + (-0.5));
        float _755 = _753 * (_713.y + (-0.5));
        float _756 = _753 * (_713.z + (-0.5));
        float _763 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_720.x + (-0.5));
        float _765 = _763 * (_720.y + (-0.5));
        float _766 = _763 * (_720.z + (-0.5));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _770 = _734 * 0.5;
        float _771 = _744 * 0.5;
        float _772 = _754 * 0.5;
        float _773 = dot(vec3(_770, _771, _772), vec3(_770, _771, _772));
        float _778 = (_773 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_773);
        float _787 = (dot(vec3(_319, _320, _321), vec3(_778 * _770, _778 * _771, _778 * _772)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _797 = sqrt(((_771 * _771) + (_770 * _770)) + (_772 * _772)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _798 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _799 = _798 * 2.0;
        float _803 = (1.0 - _798) / (_798 + 1.0);
        float _3521 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        float _804 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _813 = ((((1.0 - _804) * (_799 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_799 + 1.0))) + _804) * _767;
        float _814 = _735 * 0.5;
        float _815 = _745 * 0.5;
        float _816 = _755 * 0.5;
        float _817 = dot(vec3(_814, _815, _816), vec3(_814, _815, _816));
        float _822 = (_817 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_817);
        float _830 = (dot(vec3(_319, _320, _321), vec3(_822 * _814, _822 * _815, _822 * _816)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _839 = sqrt(((_815 * _815) + (_814 * _814)) + (_816 * _816)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
        float _840 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _841 = _840 * 2.0;
        float _845 = (1.0 - _840) / (_840 + 1.0);
        float _3554 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _855 = ((((1.0 - _846) * (_841 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_841 + 1.0))) + _846) * _768;
        float _856 = _736 * 0.5;
        float _857 = _746 * 0.5;
        float _858 = _756 * 0.5;
        float _859 = dot(vec3(_856, _857, _858), vec3(_856, _857, _858));
        float _864 = (_859 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_859);
        float _872 = (dot(vec3(_319, _320, _321), vec3(_864 * _856, _864 * _857, _864 * _858)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _881 = sqrt(((_857 * _857) + (_856 * _856)) + (_858 * _858)) / (_769 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3587 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_883 + 1.0))) + _888) * _769;
        _905 = _736;
        _907 = _735;
        _908 = _734;
        _909 = _746;
        _910 = _745;
        _911 = _744;
        _912 = _756;
        _913 = _755;
        _914 = _754;
        _915 = _769;
        _916 = _768;
        _917 = _767;
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0)));
        _919 = cbModelParam._m0[36u].z * (isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0)));
        _920 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
    }
    else
    {
        _905 = _906;
        _907 = _906;
        _908 = _906;
        _909 = _906;
        _910 = _906;
        _911 = _906;
        _912 = _906;
        _913 = _906;
        _914 = _906;
        _915 = _906;
        _916 = _906;
        _917 = _906;
        _918 = 0.0;
        _919 = 0.0;
        _920 = 0.0;
    }
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = fma(_574, cbModelParam._m0[30u].z, fma(_570, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _566));
        float _953 = fma(_574, cbModelParam._m0[31u].z, fma(_570, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _566));
        float _957 = fma(_574, cbModelParam._m0[32u].z, fma(_570, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _566));
        float _980 = _566 + _319;
        float _981 = _570 + _320;
        float _982 = _574 + _321;
        float _992 = fma(_982, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _980)) - _949;
        float _993 = fma(_982, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _980)) - _953;
        float _994 = fma(_982, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _980)) - _957;
        float _998 = inversesqrt(dot(vec3(_992, _993, _994), vec3(_992, _993, _994)));
        float _1011 = ((_998 * _992) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_949 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1012 = ((_998 * _993) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_953 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1013 = ((_998 * _994) / cbModelParam._m0[35u].z) + ((((((_957 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1029 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1011, _1012, _1013), 0.0);
        float _1048 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1015.x + (-0.5));
        float _1050 = _1048 * (_1015.y + (-0.5));
        float _1051 = _1048 * (_1015.z + (-0.5));
        float _1058 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1022.x + (-0.5));
        float _1060 = _1058 * (_1022.y + (-0.5));
        float _1061 = _1058 * (_1022.z + (-0.5));
        float _1068 = exp2((_1029.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1029.x + (-0.5));
        float _1070 = _1068 * (_1029.y + (-0.5));
        float _1071 = _1068 * (_1029.z + (-0.5));
        float _1078 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1036.x + (-0.5));
        float _1080 = _1078 * (_1036.y + (-0.5));
        float _1081 = _1078 * (_1036.z + (-0.5));
        float _1082 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1083 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1084 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1085 = _1049 * 0.5;
        float _1086 = _1059 * 0.5;
        float _1087 = _1069 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_319, _320, _321), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_1082 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3650 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1112 + 1.0))) + _1117) * _1082;
        float _1127 = _1050 * 0.5;
        float _1128 = _1060 * 0.5;
        float _1129 = _1070 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1143 = (dot(vec3(_319, _320, _321), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
        float _1152 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1083 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1154 = _1153 * 2.0;
        float _1158 = (1.0 - _1153) / (_1153 + 1.0);
        float _3683 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1168 = ((((1.0 - _1159) * (_1154 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1154 + 1.0))) + _1159) * _1083;
        float _1169 = _1051 * 0.5;
        float _1170 = _1061 * 0.5;
        float _1171 = _1071 * 0.5;
        float _1172 = dot(vec3(_1169, _1170, _1171), vec3(_1169, _1170, _1171));
        float _1177 = (_1172 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1172);
        float _1185 = (dot(vec3(_319, _320, _321), vec3(_1177 * _1169, _1177 * _1170, _1177 * _1171)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1194 = sqrt(((_1170 * _1170) + (_1169 * _1169)) + (_1171 * _1171)) / (_1084 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1196 = _1195 * 2.0;
        float _1200 = (1.0 - _1195) / (_1195 + 1.0);
        float _3716 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1210 = ((((1.0 - _1201) * (_1196 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1196 + 1.0))) + _1201) * _1084;
        _1218 = _1051;
        _1219 = _1050;
        _1220 = _1049;
        _1221 = _1061;
        _1222 = _1060;
        _1223 = _1059;
        _1224 = _1071;
        _1225 = _1070;
        _1226 = _1069;
        _1227 = _1084;
        _1228 = _1083;
        _1229 = _1082;
        _1230 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
        _1231 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0)));
        _1232 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0)));
    }
    else
    {
        _1218 = _906;
        _1219 = _906;
        _1220 = _906;
        _1221 = _906;
        _1222 = _906;
        _1223 = _906;
        _1224 = _906;
        _1225 = _906;
        _1226 = _906;
        _1227 = _906;
        _1228 = _906;
        _1229 = _906;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1242 = (cbModelParam._m0[1u].x * (_1230 - _918)) + _918;
    float _1243 = (cbModelParam._m0[1u].x * (_1231 - _919)) + _919;
    float _1244 = (cbModelParam._m0[1u].x * (_1232 - _920)) + _920;
    float _1265 = fma(_1244, cbSceneParam._m0[89u].z, fma(_1243, cbSceneParam._m0[89u].y, _1242 * cbSceneParam._m0[89u].x));
    float _1268 = fma(_1244, cbSceneParam._m0[90u].z, fma(_1243, cbSceneParam._m0[90u].y, _1242 * cbSceneParam._m0[90u].x));
    float _1271 = fma(_1244, cbSceneParam._m0[91u].z, fma(_1243, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1242));
    float _1286 = _510 * 0.5;
    float _1287 = _511 * 0.5;
    float _1288 = _512 * 0.5;
    float _1289 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1220, _1223, _1226, _1229));
    float _1292 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1219, _1222, _1225, _1228));
    float _1295 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_1218, _1221, _1224, _1227));
    float _1329;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1302 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_905, _909, _912, _915));
        float _1306 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_907, _910, _913, _916));
        float _1310 = dot(vec4(_1286, _1287, _1288, 1.0), vec4(_908, _911, _914, _917));
        float _1317 = dot(vec4(cbModelParam._m0[39u]), vec4(_1286, _1287, _1288, 1.0));
        _1329 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1329 = 1.0;
    }
    float _1340;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1331 = dot(vec4(cbModelParam._m0[40u]), vec4(_1286, _1287, _1288, 1.0));
        _1340 = dot(vec3(isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1331) ? 0.0 : (isnan(0.0) ? _1331 : max(0.0, _1331))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1340 = 1.0;
    }
    float _1344 = (_1340 * cbModelParam._m0[1u].x) + (_1329 * (1.0 - cbModelParam._m0[1u].x));
    float _1354 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _322);
    float _1355 = isnan(_1354) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1354 : min(cbModelParam._m0[25u].z, _1354));
    float _1437;
    float _1439;
    float _1441;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1404 = fma(_574, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _566)) + cbModelParam._m0[13u].w;
        float _1408 = fma(_574, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _566)) + cbModelParam._m0[14u].w;
        float _1412 = fma(_574, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _566)) + cbModelParam._m0[15u].w;
        float _1415 = fma(_512, cbModelParam._m0[13u].z, fma(_511, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _510));
        float _1418 = fma(_512, cbModelParam._m0[14u].z, fma(_511, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _510));
        float _1421 = fma(_512, cbModelParam._m0[15u].z, fma(_511, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _510));
        float _1449;
        if (_1415 > 0.0)
        {
            _1449 = abs((1.0 - _1404) / _1415);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1415 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1404 + 1.0) / _1415);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1449 = frontier_phi_17_15_ladder;
        }
        float _1656;
        if (_1418 > 0.0)
        {
            _1656 = abs((1.0 - _1408) / _1418);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1418 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1408 + 1.0) / _1418);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1656 = frontier_phi_26_22_ladder;
        }
        float _1910;
        if (_1421 > 0.0)
        {
            _1910 = abs((1.0 - _1412) / _1421);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1412 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1910 = frontier_phi_38_33_ladder;
        }
        float _1912 = isnan(_1656) ? _1449 : (isnan(_1449) ? _1656 : min(_1449, _1656));
        float _1913 = isnan(_1910) ? _1912 : (isnan(_1912) ? _1910 : min(_1912, _1910));
        float _1917 = (_1913 * _1415) + _1404;
        float _1918 = (_1913 * _1418) + _1408;
        float _1919 = (_1913 * _1421) + _1412;
        float _1920 = _1913 * 9.9999997473787516355514526367188e-05;
        float _1922 = (-1.0) - _1920;
        float _1924 = _1920 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1919 > _1924) || ((_1919 < _1922) || ((_1918 > _1924) || ((_1918 < _1922) || ((_1917 < _1922) || (_1917 > _1924))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2047 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1919, cbModelParam._m0[9u].z, fma(_1918, cbModelParam._m0[9u].y, _1917 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1919, cbModelParam._m0[10u].z, fma(_1918, cbModelParam._m0[10u].y, _1917 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1919, cbModelParam._m0[11u].z, fma(_1918, cbModelParam._m0[11u].y, _1917 * cbModelParam._m0[11u].x))), _1355);
            frontier_phi_16_38_ladder = _2047.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2047.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2047.x * cbModelParam._m0[1u].y;
        }
        _1437 = frontier_phi_16_38_ladder_2;
        _1439 = frontier_phi_16_38_ladder_1;
        _1441 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1425 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_510, _511, _512), _1355);
        _1437 = _1425.x * cbModelParam._m0[1u].y;
        _1439 = _1425.y * cbModelParam._m0[1u].y;
        _1441 = _1425.z * cbModelParam._m0[1u].y;
    }
    float _1445 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _322);
    float _1446 = isnan(_1445) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1445 : min(cbModelParam._m0[25u].w, _1445));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_574, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _566)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_574, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _566)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_574, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _566)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_512, cbModelParam._m0[21u].z, fma(_511, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _510));
        float _1517 = fma(_512, cbModelParam._m0[22u].z, fma(_511, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _510));
        float _1520 = fma(_512, cbModelParam._m0[23u].z, fma(_511, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _510));
        float _1661;
        if (_1514 > 0.0)
        {
            _1661 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1661 = frontier_phi_28_24_ladder;
        }
        float _1937;
        if (_1517 > 0.0)
        {
            _1937 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1937 = frontier_phi_40_35_ladder;
        }
        float _2150;
        if (_1520 > 0.0)
        {
            _2150 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2150 = frontier_phi_49_46_ladder;
        }
        float _2152 = isnan(_1937) ? _1661 : (isnan(_1661) ? _1937 : min(_1661, _1937));
        float _2153 = isnan(_2150) ? _2152 : (isnan(_2152) ? _2150 : min(_2152, _2150));
        float _2157 = (_2153 * _1514) + _1503;
        float _2158 = (_2153 * _1517) + _1507;
        float _2159 = (_2153 * _1520) + _1511;
        float _2160 = _2153 * 9.9999997473787516355514526367188e-05;
        float _2161 = (-1.0) - _2160;
        float _2163 = _2160 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2159 > _2163) || ((_2159 < _2161) || ((_2158 > _2163) || ((_2158 < _2161) || ((_2157 < _2161) || (_2157 > _2163))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2393 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2159, cbModelParam._m0[17u].z, fma(_2158, cbModelParam._m0[17u].y, _2157 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2159, cbModelParam._m0[18u].z, fma(_2158, cbModelParam._m0[18u].y, _2157 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2159, cbModelParam._m0[19u].z, fma(_2158, cbModelParam._m0[19u].y, _2157 * cbModelParam._m0[19u].x))), _1446);
            frontier_phi_25_49_ladder = _2393.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2393.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2393.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_25_49_ladder_2;
        _1541 = frontier_phi_25_49_ladder_1;
        _1543 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_510, _511, _512), _1446);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1556 = (((_537 * _487) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1539 - _1437)) + _1437);
    float _1558 = (((_537 * _489) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1541 - _1439)) + _1439);
    float _1560 = (((_537 * _490) + _538) * _502) * ((cbModelParam._m0[1u].w * (_1543 - _1441)) + _1441);
    float _1563 = fma(_1560, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1556 * cbSceneParam._m0[89u].x));
    float _1566 = fma(_1560, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1556 * cbSceneParam._m0[90u].x));
    float _1569 = fma(_1560, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1556 * cbSceneParam._m0[91u].x));
    uvec4 _1579 = floatBitsToUint(cbInstanceData._m0[_461 + 5u]);
    uint _1581 = _1579.x * 14u;
    uint _1582 = _1581 + 13u;
    float _1589 = _502 + (-1.0);
    float _1594 = (cbLight._m0[_1582].x * _1589) + 1.0;
    float _1595 = (cbLight._m0[_1582].y * _1589) + 1.0;
    float _1596 = (cbLight._m0[_1582].z * _1589) + 1.0;
    float _1597 = (cbLight._m0[_1582].w * _1589) + 1.0;
    uint _1598 = _1581 + 5u;
    float _1604 = isnan(1.0) ? _1595 : (isnan(_1595) ? 1.0 : min(_1595, 1.0));
    uint _1608 = _1581 + 4u;
    float _1615 = isnan(1.0) ? _1594 : (isnan(_1594) ? 1.0 : min(_1594, 1.0));
    uint _1619 = _1581 | 1u;
    float _1630 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_319, _320, _321));
    float _1633 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_319, _320, _321));
    float _3852 = isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0));
    float _3863 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1638 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1640 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1647 = ((cbLight._m0[_1598].x * _1604) * _1640) + ((cbLight._m0[_1608].x * _1615) * _1638);
    float _1648 = ((_1604 * cbLight._m0[_1598].y) * _1640) + ((_1615 * cbLight._m0[_1608].y) * _1638);
    float _1649 = ((_1604 * cbLight._m0[_1598].z) * _1640) + ((_1615 * cbLight._m0[_1608].z) * _1638);
    uvec4 _1653 = floatBitsToUint(cbLight._m0[_1581 + 12u]);
    bool _1655 = _1653.x == 0u;
    float _1666;
    float _1668;
    float _1670;
    if (_1655)
    {
        _1666 = _1647;
        _1668 = _1648;
        _1670 = _1649;
    }
    else
    {
        uint _1674 = _1581 + 6u;
        float _1690 = (dot(vec3(cbLight._m0[_1581 + 2u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _1691 = _1690 * _1690;
        float _3874 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1693 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1666 = (((cbLight._m0[_1674].x * 0.3183098733425140380859375) * _1692) * _1693) + _1647;
        _1668 = (((cbLight._m0[_1674].y * 0.3183098733425140380859375) * _1692) * _1693) + _1648;
        _1670 = (((cbLight._m0[_1674].z * 0.3183098733425140380859375) * _1692) * _1693) + _1649;
    }
    bool _1673 = _1653.y == 0u;
    float _1711;
    float _1713;
    float _1715;
    if (_1673)
    {
        _1711 = _1666;
        _1713 = _1668;
        _1715 = _1670;
    }
    else
    {
        uint _1881 = _1581 + 7u;
        float _1897 = (dot(vec3(cbLight._m0[_1581 + 3u].xyz), vec3(_319, _320, _321)) * 0.5) + 0.5;
        float _1898 = _1897 * _1897;
        float _3890 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
        float _1899 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
        float _1900 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _1711 = (((cbLight._m0[_1881].x * 0.3183098733425140380859375) * _1899) * _1900) + _1666;
        _1713 = (((cbLight._m0[_1881].y * 0.3183098733425140380859375) * _1899) * _1900) + _1668;
        _1715 = (((cbLight._m0[_1881].z * 0.3183098733425140380859375) * _1899) * _1900) + _1670;
    }
    uint _1718 = _1581 + 8u;
    float _1731 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1581].w)) * _322) * 0.949999988079071044921875);
    float _1732 = _1731 * _1731;
    float _1733 = cbLight._m0[_1581].x + _400;
    float _1734 = cbLight._m0[_1581].y + _401;
    float _1735 = cbLight._m0[_1581].z + _402;
    float _1739 = inversesqrt(dot(vec3(_1733, _1734, _1735), vec3(_1733, _1734, _1735)));
    float _1740 = _1739 * _1733;
    float _1741 = _1739 * _1734;
    float _1742 = _1739 * _1735;
    float _1743 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1581].xyz));
    float _3906 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1746 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _3917 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _1747 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1748 = dot(vec3(_319, _320, _321), vec3(_1740, _1741, _1742));
    float _3928 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1751 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _1752 = dot(vec3(cbLight._m0[_1581].xyz), vec3(_1740, _1741, _1742));
    float _3939 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1756 = _1732 * _1732;
    float _1760 = ((_1751 * _1751) * (_1756 + (-1.0))) + 1.0;
    float _1768 = exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0);
    float _1769 = 0.959999978542327880859375 - _484;
    float _1771 = 0.959999978542327880859375 - _485;
    float _1772 = 0.959999978542327880859375 - _486;
    float _1779 = 1.0 - _1732;
    float _1790 = (0.5 / (((_1747 * ((_1746 * _1779) + _1732)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1779) + _1732) * _1746))) * _1746;
    float _3950 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1792 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1756 / ((_1760 * _1760) * 3.141590118408203125));
    uint _1803 = _1581 + 9u;
    float _1814 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1619].w)) * _322) * 0.949999988079071044921875);
    float _1815 = _1814 * _1814;
    float _1816 = cbLight._m0[_1619].x + _400;
    float _1817 = cbLight._m0[_1619].y + _401;
    float _1818 = cbLight._m0[_1619].z + _402;
    float _1822 = inversesqrt(dot(vec3(_1816, _1817, _1818), vec3(_1816, _1817, _1818)));
    float _1823 = _1822 * _1816;
    float _1824 = _1822 * _1817;
    float _1825 = _1822 * _1818;
    float _1826 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1619].xyz));
    float _3961 = isnan(0.0) ? _1826 : (isnan(_1826) ? 0.0 : max(_1826, 0.0));
    float _1829 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _1830 = dot(vec3(_319, _320, _321), vec3(_1823, _1824, _1825));
    float _3972 = isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0));
    float _1833 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _1834 = dot(vec3(cbLight._m0[_1619].xyz), vec3(_1823, _1824, _1825));
    float _3983 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1838 = _1815 * _1815;
    float _1842 = ((_1833 * _1833) * (_1838 + (-1.0))) + 1.0;
    float _1849 = exp2(log2(1.0 - (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0)))) * 5.0);
    float _1856 = 1.0 - _1815;
    float _1866 = (0.5 / (((_1747 * ((_1829 * _1856) + _1815)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _1856) + _1815) * _1829))) * _1829;
    float _3994 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _1868 = (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1838 / ((_1842 * _1842) * 3.141590118408203125));
    float _1878 = (((((_1849 * _1769) + _487) * cbLight._m0[_1803].x) * _1868) * _1604) + (((((_1768 * _1769) + _487) * cbLight._m0[_1718].x) * _1792) * _1615);
    float _1879 = (((((_1849 * _1771) + _489) * cbLight._m0[_1803].y) * _1868) * _1604) + (((((_1768 * _1771) + _489) * cbLight._m0[_1718].y) * _1792) * _1615);
    float _1880 = (((((_1849 * _1772) + _490) * cbLight._m0[_1803].z) * _1868) * _1604) + (((((_1768 * _1772) + _490) * cbLight._m0[_1718].z) * _1792) * _1615);
    float _1942;
    float _1944;
    float _1946;
    if (_1655)
    {
        _1942 = _1878;
        _1944 = _1879;
        _1946 = _1880;
    }
    else
    {
        uint _1948 = _1581 + 2u;
        uint _1952 = _1581 + 10u;
        float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1948].w)) * _322) * 0.949999988079071044921875);
        float _1967 = _1966 * _1966;
        float _1968 = cbLight._m0[_1948].x + _400;
        float _1969 = cbLight._m0[_1948].y + _401;
        float _1970 = cbLight._m0[_1948].z + _402;
        float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
        float _1975 = _1974 * _1968;
        float _1976 = _1974 * _1969;
        float _1977 = _1974 * _1970;
        float _1978 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_1948].xyz));
        float _4005 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        float _1981 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1982 = dot(vec3(_319, _320, _321), vec3(_1975, _1976, _1977));
        float _4016 = isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0));
        float _1985 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1986 = dot(vec3(cbLight._m0[_1948].xyz), vec3(_1975, _1976, _1977));
        float _4027 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
        float _1990 = _1967 * _1967;
        float _1994 = ((_1985 * _1985) * (_1990 + (-1.0))) + 1.0;
        float _2001 = exp2(log2(1.0 - (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * 5.0);
        float _2008 = 1.0 - _1967;
        float _2018 = (0.5 / (((_1747 * ((_1981 * _2008) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2008) + _1967) * _1981))) * _1981;
        float _4038 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        float _2020 = (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0))) * (_1990 / ((_1994 * _1994) * 3.141590118408203125));
        float _2021 = isnan(1.0) ? _1596 : (isnan(_1596) ? 1.0 : min(_1596, 1.0));
        _1942 = (((((_2001 * _1769) + _487) * cbLight._m0[_1952].x) * _2020) * _2021) + _1878;
        _1944 = (((((_2001 * _1771) + _489) * cbLight._m0[_1952].y) * _2020) * _2021) + _1879;
        _1946 = (((((_2001 * _1772) + _490) * cbLight._m0[_1952].z) * _2020) * _2021) + _1880;
    }
    float _2056;
    float _2058;
    float _2060;
    if (_1673)
    {
        _2056 = _1942;
        _2058 = _1944;
        _2060 = _1946;
    }
    else
    {
        uint _2067 = _1581 + 3u;
        uint _2071 = _1581 + 11u;
        float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2067].w)) * _322) * 0.949999988079071044921875);
        float _2086 = _2085 * _2085;
        float _2087 = cbLight._m0[_2067].x + _400;
        float _2088 = cbLight._m0[_2067].y + _401;
        float _2089 = cbLight._m0[_2067].z + _402;
        float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
        float _2094 = _2093 * _2087;
        float _2095 = _2093 * _2088;
        float _2096 = _2093 * _2089;
        float _2097 = dot(vec3(_319, _320, _321), vec3(cbLight._m0[_2067].xyz));
        float _4054 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2100 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
        float _2101 = dot(vec3(_319, _320, _321), vec3(_2094, _2095, _2096));
        float _4065 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2104 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
        float _2105 = dot(vec3(cbLight._m0[_2067].xyz), vec3(_2094, _2095, _2096));
        float _4076 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
        float _2109 = _2086 * _2086;
        float _2113 = ((_2104 * _2104) * (_2109 + (-1.0))) + 1.0;
        float _2120 = exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0);
        float _2127 = 1.0 - _2086;
        float _2137 = (0.5 / (((_1747 * ((_2100 * _2127) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_1747 * _2127) + _2086) * _2100))) * _2100;
        float _4087 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
        float _2139 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2109 / ((_2113 * _2113) * 3.141590118408203125));
        float _2140 = isnan(1.0) ? _1597 : (isnan(_1597) ? 1.0 : min(_1597, 1.0));
        _2056 = (((((_2120 * _1769) + _487) * cbLight._m0[_2071].x) * _2139) * _2140) + _1942;
        _2058 = (((((_2120 * _1771) + _489) * cbLight._m0[_2071].y) * _2139) * _2140) + _1944;
        _2060 = (((((_2120 * _1772) + _490) * cbLight._m0[_2071].z) * _2139) * _2140) + _1946;
    }
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    float _2285;
    if (_1579.y == 0u)
    {
        float _2215 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2216 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2215;
        float _2217 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2215;
        float _2218 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2215;
        uvec4 _2230 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2231 = _2230.x;
        uint _2242 = uint((float(_2230.y) * floor(float(uint(cbSceneParam._m0[85u].y * _422) / _2231))) + floor(float(uint(cbSceneParam._m0[85u].x * _421) / _2231)));
        float _2252 = (log2(_2218 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2253 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
        uint _2256 = uint(isnan(14.0) ? _2253 : (isnan(_2253) ? 14.0 : min(_2253, 14.0)));
        uvec4 _2261 = texelFetch(g_lightClusterGridBuffer, int(((_2256 << 2u) + (_2242 << 6u)) >> 2u));
        uint _2262 = _2261.x;
        uint _2263 = _2230.z;
        float _2398;
        float _2400;
        float _2402;
        float _2404;
        float _2406;
        float _2408;
        if (((((1u << ((_2263 >> 4u) & 15u)) + 4294967295u) & _2262) == 0u) || ((_2263 & 240u) == 0u))
        {
            _2398 = 0.0;
            _2400 = 0.0;
            _2402 = 0.0;
            _2404 = 0.0;
            _2406 = 0.0;
            _2408 = 0.0;
        }
        else
        {
            float _2399;
            float _2401;
            float _2403;
            float _2405;
            float _2407;
            float _2409;
            float _2560 = 0.0;
            float _2561 = 0.0;
            float _2562 = 0.0;
            float _2563 = 0.0;
            float _2564 = 0.0;
            float _2565 = 0.0;
            uint _2566 = 0u;
            uint _2575;
            bool _2576;
            for (;;)
            {
                _2575 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2566 << 2u)) >> 2u)).x;
                _2576 = _2575 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2576)
                {
                    frontier_phi_66_pred = _2560;
                    frontier_phi_66_pred_1 = _2565;
                    frontier_phi_66_pred_2 = _2564;
                    frontier_phi_66_pred_3 = _2563;
                    frontier_phi_66_pred_4 = _2562;
                    frontier_phi_66_pred_5 = _2561;
                }
                else
                {
                    float _2705;
                    float _2706;
                    float _2707;
                    float _2708;
                    float _2709;
                    float _2710;
                    uint _2711;
                    _2705 = _2560;
                    _2706 = _2561;
                    _2707 = _2562;
                    _2708 = _2563;
                    _2709 = _2564;
                    _2710 = _2565;
                    _2711 = _2575;
                    float _2632;
                    float _2633;
                    float _2634;
                    float _2635;
                    float _2636;
                    float _2637;
                    for (;;)
                    {
                        uint _2715 = uint(findLSB(_2711)) + (_2566 << 5u);
                        uint _2712 = (_2711 + 4294967295u) & _2711;
                        uint _2717 = _2715 * 48u;
                        vec4 _2731 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2717)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 3u)).x));
                        uint _2737 = (_2715 * 48u) + 4u;
                        vec4 _2750 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2737)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2737 + 3u)).x));
                        uint _2756 = (_2715 * 48u) + 8u;
                        vec3 _2767 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2756)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2756 + 2u)).x));
                        float _2771 = _2731.x - _2216;
                        float _2772 = _2731.y - _2217;
                        float _2773 = _2731.z - _2218;
                        float _2774 = dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773));
                        float _2777 = inversesqrt(_2774);
                        float _2778 = _2777 * _2771;
                        float _2779 = _2777 * _2772;
                        float _2780 = _2777 * _2773;
                        float _2781 = dot(vec3(_442, _445, _448), vec3(_2778, _2779, _2780));
                        float _2786 = 1.0 - (_2774 * _2731.w);
                        float _4113 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                        float _2787 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                        float _2788 = sqrt(_2774) * _2750.w;
                        float _2791 = 1.39999997615814208984375 / (_2788 + 1.39999997615814208984375);
                        float _2792 = _2791 * _2791;
                        float _2795 = ((1.0 - _2792) * _2781) + _2792;
                        float _2798 = _2788 * _2788;
                        float _2802 = ((isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0))) * _2787) / ((_2798 * 0.699999988079071044921875) + 1.0);
                        float _2806 = (-0.0) - _2216;
                        float _2807 = (-0.0) - _2217;
                        float _2808 = (-0.0) - _2218;
                        float _2812 = inversesqrt(dot(vec3(_2806, _2807, _2808), vec3(_2806, _2807, _2808)));
                        float _2813 = _2812 * _2806;
                        float _2814 = _2812 * _2807;
                        float _2815 = _2812 * _2808;
                        float _2823 = exp2(log2(1.0 / ((_2798 * 3.5) + 5.0)) * 0.25);
                        float _2824 = 1.0 - _518;
                        float _2831 = sqrt(1.0 - ((1.0 - (_2824 * _2824)) * (1.0 - (_2823 * _2823))));
                        float _2832 = _2831 * _2831;
                        float _2833 = _2832 * _2832;
                        float _2834 = _2813 + _2778;
                        float _2835 = _2814 + _2779;
                        float _2836 = _2815 + _2780;
                        float _2840 = inversesqrt(dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836)));
                        float _2844 = dot(vec3(_442, _445, _448), vec3(_2813, _2814, _2815));
                        float _4129 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                        float _2847 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2848 = dot(vec3(_442, _445, _448), vec3(_2840 * _2834, _2840 * _2835, _2840 * _2836));
                        float _4140 = isnan(0.0) ? _2848 : (isnan(_2848) ? 0.0 : max(_2848, 0.0));
                        float _2851 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
                        float _2855 = ((_2851 * _2851) * (_2833 + (-1.0))) + 1.0;
                        float _2856 = _2791 * _2832;
                        float _2857 = _2856 * _2856;
                        float _2860 = ((1.0 - _2857) * _2781) + _2857;
                        float _4151 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2861 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                        float _2862 = 1.0 - _2832;
                        float _2872 = (0.5 / (((_2861 * ((_2847 * _2862) + _2832)) + 9.9999999392252902907785028219223e-09) + (((_2861 * _2862) + _2832) * _2847))) * _2861;
                        float _4162 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
                        float _2883 = (((_2833 * 3.1415927410125732421875) * (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) / ((_2855 * _2855) * ((_2798 * 2.1991131305694580078125) + 3.141590118408203125))) * _2787;
                        _2635 = (_2802 * _2750.x) + _2708;
                        _2636 = (_2802 * _2750.y) + _2709;
                        _2637 = (_2802 * _2750.z) + _2710;
                        _2632 = (_2883 * _2767.x) + _2705;
                        _2633 = (_2883 * _2767.y) + _2706;
                        _2634 = (_2883 * _2767.z) + _2707;
                        if (_2712 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2705 = _2632;
                            _2706 = _2633;
                            _2707 = _2634;
                            _2708 = _2635;
                            _2709 = _2636;
                            _2710 = _2637;
                            _2711 = _2712;
                        }
                    }
                    frontier_phi_66_pred = _2632;
                    frontier_phi_66_pred_1 = _2637;
                    frontier_phi_66_pred_2 = _2636;
                    frontier_phi_66_pred_3 = _2635;
                    frontier_phi_66_pred_4 = _2634;
                    frontier_phi_66_pred_5 = _2633;
                }
                _2399 = frontier_phi_66_pred;
                _2409 = frontier_phi_66_pred_1;
                _2407 = frontier_phi_66_pred_2;
                _2405 = frontier_phi_66_pred_3;
                _2403 = frontier_phi_66_pred_4;
                _2401 = frontier_phi_66_pred_5;
                uint _2567 = _2566 + 1u;
                if (_2567 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2560 = _2399;
                    _2561 = _2401;
                    _2562 = _2403;
                    _2563 = _2405;
                    _2564 = _2407;
                    _2565 = _2409;
                    _2566 = _2567;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2398 = _2399;
            _2400 = _2401;
            _2402 = _2403;
            _2404 = _2405;
            _2406 = _2407;
            _2408 = _2409;
        }
        uvec4 _2412 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2413 = _2412.z;
        uint _2415 = (_2413 >> 8u) & 15u;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        float _2536;
        float _2538;
        if (((4294967295u << _2415) & _2262) == 0u)
        {
            _2528 = _2398;
            _2530 = _2400;
            _2532 = _2402;
            _2534 = _2404;
            _2536 = _2406;
            _2538 = _2408;
        }
        else
        {
            float _2553 = inversesqrt(dot(vec3(_2216, _2217, _2218), vec3(_2216, _2217, _2218)));
            float _2554 = _2553 * _2216;
            float _2555 = _2553 * _2217;
            float _2556 = _2553 * _2218;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2415 < ((_2413 >> 12u) & 15u))
            {
                float _2529;
                float _2531;
                float _2533;
                float _2535;
                float _2537;
                float _2539;
                float _2688 = _2398;
                float _2689 = _2400;
                float _2690 = _2402;
                float _2691 = _2404;
                float _2692 = _2406;
                float _2693 = _2408;
                uint _2694 = _2415;
                uint _2703;
                bool _2704;
                for (;;)
                {
                    _2703 = texelFetch(g_lightClassification, int((((_2256 << 5u) + (_2242 << 9u)) + (_2694 << 2u)) >> 2u)).x;
                    _2704 = _2703 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2704)
                    {
                        frontier_phi_77_pred = _2693;
                        frontier_phi_77_pred_1 = _2692;
                        frontier_phi_77_pred_2 = _2691;
                        frontier_phi_77_pred_3 = _2690;
                        frontier_phi_77_pred_4 = _2689;
                        frontier_phi_77_pred_5 = _2688;
                    }
                    else
                    {
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _3193;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _2910 = _2688;
                        float _2911 = _2689;
                        float _2912 = _2690;
                        float _2913 = _2691;
                        float _2914 = _2692;
                        float _2915 = _2693;
                        uint _2916 = _2703;
                        uint _2917;
                        vec4 _2942;
                        float _2943;
                        vec4 _2958;
                        vec3 _2970;
                        vec4 _2986;
                        vec4 _3002;
                        float _3049;
                        bool _3050;
                        for (;;)
                        {
                            uint _2927 = ((_2694 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2916));
                            _2917 = (_2916 + 4294967295u) & _2916;
                            uint _2929 = _2927 * 40u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            _2943 = _2942.w;
                            uint _2945 = (_2927 * 40u) + 4u;
                            _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2960 = (_2927 * 40u) + 8u;
                            _2970 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2960)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2960 + 2u)).x));
                            uint _2973 = (_2927 * 40u) + 16u;
                            _2986 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2973)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2973 + 3u)).x));
                            uint _2989 = (_2927 * 40u) + 20u;
                            _3002 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2989)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2989 + 3u)).x));
                            uint _3005 = (_2927 * 40u) + 24u;
                            vec4 _3018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3005 + 3u)).x));
                            uint _3024 = (_2927 * 40u) + 28u;
                            vec4 _3037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3024 + 3u)).x));
                            _3049 = fma(_2218, _3037.z, fma(_2217, _3037.y, _3037.x * _2216)) + _3037.w;
                            _3050 = !((fma(_2218, _3018.z, fma(_2217, _3018.y, _3018.x * _2216)) + _3018.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3050)
                            {
                                float _3077 = _2942.x - _2216;
                                float _3078 = _2942.y - _2217;
                                float _3079 = _2942.z - _2218;
                                float _3080 = dot(vec3(_3077, _3078, _3079), vec3(_3077, _3078, _3079));
                                float _3083 = inversesqrt(_3080);
                                float _3084 = _3083 * _3077;
                                float _3085 = _3083 * _3078;
                                float _3086 = _3083 * _3079;
                                float _3090 = 1.0 - (_3080 / (_2943 * _2943));
                                float _4173 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
                                float _3095 = sqrt(_3080) * _2958.w;
                                float _3097 = 1.39999997615814208984375 / (_3095 + 1.39999997615814208984375);
                                float _3098 = _3097 * _3097;
                                float _3101 = ((1.0 - _3098) * dot(vec3(_3084, _3085, _3086), vec3(_442, _445, _448))) + _3098;
                                float _3104 = _3095 * _3095;
                                float _3108 = (fma(_2218, _2986.z, fma(_2217, _2986.y, _2986.x * _2216)) + _2986.w) / _3049;
                                float _3109 = (fma(_2218, _3002.z, fma(_2217, _3002.y, _3002.x * _2216)) + _3002.w) / _3049;
                                float _3113 = 1.0 - dot(vec2(_3108, _3109), vec2(_3108, _3109));
                                float _4189 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3114 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3115 = _3114 * (((isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0))) * _3091) / ((_3104 * 0.699999988079071044921875) + 1.0));
                                float _3127 = exp2(log2(1.0 / ((_3104 * 3.5) + 5.0)) * 0.25);
                                float _3128 = 1.0 - _518;
                                float _3135 = sqrt(1.0 - ((1.0 - (_3128 * _3128)) * (1.0 - (_3127 * _3127))));
                                float _3136 = _3135 * _3135;
                                float _3137 = _3136 * _3136;
                                float _3138 = _3084 - _2554;
                                float _3139 = _3085 - _2555;
                                float _3140 = _3086 - _2556;
                                float _3144 = inversesqrt(dot(vec3(_3138, _3139, _3140), vec3(_3138, _3139, _3140)));
                                float _3148 = dot(vec3(_442, _445, _448), vec3((-0.0) - _2554, (-0.0) - _2555, (-0.0) - _2556));
                                float _4200 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3151 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3152 = dot(vec3(_442, _445, _448), vec3(_3144 * _3138, _3144 * _3139, _3144 * _3140));
                                float _4211 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                                float _3159 = ((_3155 * _3155) * (_3137 + (-1.0))) + 1.0;
                                float _3160 = _3097 * _3136;
                                float _3161 = _3160 * _3160;
                                float _3167 = ((1.0 - _3161) * dot(vec3(_442, _445, _448), vec3(_3084, _3085, _3086))) + _3161;
                                float _4222 = isnan(0.0) ? _3167 : (isnan(_3167) ? 0.0 : max(_3167, 0.0));
                                float _3168 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                                float _3169 = 1.0 - _3136;
                                float _3179 = (0.5 / (((_3168 * ((_3151 * _3169) + _3136)) + 9.9999999392252902907785028219223e-09) + (((_3168 * _3169) + _3136) * _3151))) * _3168;
                                float _4233 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                                float _3189 = (_3114 * _3091) * (((_3137 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_3159 * _3159) * ((_3104 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3115 * _2958.y;
                                frontier_phi_83_pred_1 = _3115 * _2958.x;
                                frontier_phi_83_pred_2 = _3189 * _2970.z;
                                frontier_phi_83_pred_3 = _3189 * _2970.y;
                                frontier_phi_83_pred_4 = _3189 * _2970.x;
                                frontier_phi_83_pred_5 = _3115 * _2958.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3197 = frontier_phi_83_pred;
                            _3196 = frontier_phi_83_pred_1;
                            _3195 = frontier_phi_83_pred_2;
                            _3194 = frontier_phi_83_pred_3;
                            _3193 = frontier_phi_83_pred_4;
                            _3198 = frontier_phi_83_pred_5;
                            _2900 = _3196 + _2913;
                            _2901 = _3197 + _2914;
                            _2902 = _3198 + _2915;
                            _2897 = _3193 + _2910;
                            _2898 = _3194 + _2911;
                            _2899 = _3195 + _2912;
                            if (_2917 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2917;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2902;
                        frontier_phi_77_pred_1 = _2901;
                        frontier_phi_77_pred_2 = _2900;
                        frontier_phi_77_pred_3 = _2899;
                        frontier_phi_77_pred_4 = _2898;
                        frontier_phi_77_pred_5 = _2897;
                    }
                    _2539 = frontier_phi_77_pred;
                    _2537 = frontier_phi_77_pred_1;
                    _2535 = frontier_phi_77_pred_2;
                    _2533 = frontier_phi_77_pred_3;
                    _2531 = frontier_phi_77_pred_4;
                    _2529 = frontier_phi_77_pred_5;
                    uint _2695 = _2694 + 1u;
                    if (_2695 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2688 = _2529;
                        _2689 = _2531;
                        _2690 = _2533;
                        _2691 = _2535;
                        _2692 = _2537;
                        _2693 = _2539;
                        _2694 = _2695;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2533;
                frontier_phi_58_59_ladder_1 = _2539;
                frontier_phi_58_59_ladder_2 = _2537;
                frontier_phi_58_59_ladder_3 = _2535;
                frontier_phi_58_59_ladder_4 = _2531;
                frontier_phi_58_59_ladder_5 = _2529;
            }
            else
            {
                frontier_phi_58_59_ladder = _2402;
                frontier_phi_58_59_ladder_1 = _2408;
                frontier_phi_58_59_ladder_2 = _2406;
                frontier_phi_58_59_ladder_3 = _2404;
                frontier_phi_58_59_ladder_4 = _2400;
                frontier_phi_58_59_ladder_5 = _2398;
            }
            _2528 = frontier_phi_58_59_ladder_5;
            _2530 = frontier_phi_58_59_ladder_4;
            _2532 = frontier_phi_58_59_ladder;
            _2534 = frontier_phi_58_59_ladder_3;
            _2536 = frontier_phi_58_59_ladder_2;
            _2538 = frontier_phi_58_59_ladder_1;
        }
        float _2543 = isnan(1.0) ? _502 : (isnan(_502) ? 1.0 : min(_502, 1.0));
        _2275 = (_2543 * _2534) + _1711;
        _2277 = (_2543 * _2536) + _1713;
        _2279 = (_2543 * _2538) + _1715;
        _2281 = ((_2528 * _487) * _2543) + _2056;
        _2283 = ((_2530 * _489) * _2543) + _2058;
        _2285 = ((_2532 * _490) * _2543) + _2060;
    }
    else
    {
        _2275 = _1711;
        _2277 = _1713;
        _2279 = _1715;
        _2281 = _2056;
        _2283 = _2058;
        _2285 = _2060;
    }
    uint _2291 = _463 + uint(cbMatDynParam._m0[0u].w);
    float _2299 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _301.x) * cbInstanceData._m0[_2291].x;
    float _2302 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _301.y) * cbInstanceData._m0[_2291].y;
    float _2305 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _301.z) * cbInstanceData._m0[_2291].z;
    float _4249 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _4260 = isnan(0.0) ? _478 : (isnan(_478) ? 0.0 : max(_478, 0.0));
    float _4271 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _2322 = (((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2275 + ((isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0))) * _502))) + ((_2281 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + _2299;
    float _2324 = (_2302 + ((_2283 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0))) * (_2277 + ((isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))) * _502)));
    float _2326 = (_2305 + ((_2285 + ((isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))) * _1344)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0))) * (_2279 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _502)));
    float _2327 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
    float _2328 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2329 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2335 = cbMtdParam._m0[2u].x * _2299;
    float _2336 = cbMtdParam._m0[2u].y * _2302;
    float _2337 = cbMtdParam._m0[2u].z * _2305;
    float _4297 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2339 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
    uint _2340 = _461 + 6u;
    float _2348 = _421 / cbSceneParam._m0[86u].x;
    float _2349 = _422 / cbSceneParam._m0[86u].y;
    vec4 _2363 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2348, _2349, (log2((isnan(cbSceneParam._m0[77u].w) ? _342 : (isnan(_342) ? cbSceneParam._m0[77u].w : min(_342, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2365 = _2363.x;
    float _2366 = _2363.y;
    float _2367 = _2363.z;
    float _2368 = _2363.w;
    float _2461;
    float _2463;
    float _2465;
    float _2467;
    if (_342 > cbSceneParam._m0[78u].w)
    {
        float _2423 = isnan(_342) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _342 : min(cbSceneParam._m0[80u].w, _342));
        float _2424 = _2423 / _342;
        float _2435 = _2424 * _393;
        float _2436 = _394 * _2424;
        float _2437 = (-0.0) - _2436;
        float _2439 = _2424 * _395;
        float _2441 = (cbSceneParam._m0[77u].w * _2437) / _2423;
        float _2442 = _2441 + cbSceneParam._m0[79u].w;
        float _2443 = cbSceneParam._m0[79u].w - _2436;
        float _2449 = sqrt(((_2435 * _2435) + (_2436 * _2436)) + (_2439 * _2439));
        float _2452 = (1.0 - (cbSceneParam._m0[77u].w / _2423)) * _2449;
        float _2457 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2459 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2645;
        if (abs((_2437 - _2441) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2645 = ((((_2442 > 0.0) ? exp2(_2457 * _2442) : (2.0 - exp2(_2459 * _2442))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2452;
        }
        else
        {
            float _2589 = 1.0 / cbSceneParam._m0[80u].x;
            float _2590 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : max(_2442, _2443));
            float _2591 = isnan(_2443) ? _2442 : (isnan(_2442) ? _2443 : min(_2442, _2443));
            float _2600 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : min(_2590, 0.0));
            float _2601 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : min(_2591, 0.0));
            _2645 = ((abs(_2449 / _2437) * cbSceneParam._m0[80u].y) * ((((_2600 - _2601) * 2.0) - ((exp2(_2457 * (isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0)))) - exp2(_2457 * (isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))))) * _2589)) - ((exp2(_2459 * _2600) - exp2(_2459 * _2601)) * _2589))) + (_2452 * cbSceneParam._m0[80u].z);
        }
        vec4 _2647 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2348, _2349, 1.0), 0.0);
        float _2656 = exp2((_2645 * (-1.44269502162933349609375)) * (1.0 - _2647.w));
        float _2657 = log2(_2656);
        float _2673 = log2(_2368);
        _2461 = (exp2(_2673 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].x)) * _2647.x) / cbSceneParam._m0[78u].x)) + _2365;
        _2463 = (exp2(_2673 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].y)) * _2647.y) / cbSceneParam._m0[78u].y)) + _2366;
        _2465 = (exp2(_2673 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2657 * cbSceneParam._m0[78u].z)) * _2647.z) / cbSceneParam._m0[78u].z)) + _2367;
        _2467 = _2656 * _2368;
    }
    else
    {
        _2461 = _2365;
        _2463 = _2366;
        _2465 = _2367;
        _2467 = _2368;
    }
    bool _2683;
    vec4 _2477;
    vec4 _2499;
    float _2501;
    float _2505;
    float _2506;
    float _2507;
    float _2510;
    float _2513;
    float _2516;
    float _2517;
    bool _2527;
    for (;;)
    {
        _2477 = cbMatDynParam._m0[0u];
        float _2479 = roundEven(_2477.y);
        bool _2480 = _2479 == 3.0;
        float _2481 = log2(_2467);
        float _2485 = exp2(_2481 * cbSceneParam._m0[78u].x);
        float _2486 = exp2(_2481 * cbSceneParam._m0[78u].y);
        float _2487 = exp2(_2481 * cbSceneParam._m0[78u].z);
        float _2488 = _2485 * _2327;
        float _2489 = _2486 * _2328;
        float _2490 = _2487 * _2329;
        float _2497 = _409 + (-0.5);
        _2499 = cbMtdParam._m0[1u];
        _2501 = _2499.y * _2497;
        float _2504 = (_2479 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2505 = _2504 * (_2480 ? _2488 : (_2488 + (cbSceneParam._m0[72u].w * _2461)));
        _2506 = _2504 * (_2480 ? _2489 : (_2489 + (cbSceneParam._m0[72u].w * _2463)));
        _2507 = _2504 * (_2480 ? _2490 : (_2490 + (cbSceneParam._m0[72u].w * _2465)));
        _2510 = ((_2335 * _2339) * _2485) * _2504;
        _2513 = ((_2336 * _2339) * _2486) * _2504;
        _2516 = ((_2337 * _2339) * _2487) * _2504;
        _2517 = _2497 * 0.999000012874603271484375;
        _2527 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2527)
        {
            if ((cbInstanceData._m0[_461 + 7u].x + _2517) < 0.5)
            {
                _2683 = true;
                break;
            }
        }
        uint _2624 = _463 + uint(_2477.w);
        if ((cbInstanceData._m0[_2624].w < 1.0) && ((cbInstanceData._m0[_2624].w + _2517) < 0.5))
        {
            _2683 = true;
            break;
        }
        if ((_2501 + 1.0) < _2499.x)
        {
            _2683 = true;
            break;
        }
        _2683 = false;
        break;
    }
    float _2888;
    if (_2683)
    {
        discard_state = true;
        _2888 = 0.0;
    }
    else
    {
        _2888 = cbInstanceData._m0[_2340].w;
    }
    SV_Target.x = _2505;
    SV_Target.y = _2506;
    SV_Target.z = _2507;
    SV_Target.w = _2888;
    SV_Target_1.x = _2510;
    SV_Target_1.y = _2513;
    SV_Target_1.z = _2516;
    SV_Target_1.w = cbInstanceData._m0[_2340].w;
    discard_exit();
}


