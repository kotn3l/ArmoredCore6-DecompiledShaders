#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _889;
float _3323;
float _3324;
float _3325;
float _3326;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _248 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _248.z;
    float _256 = (_248.x * 2.0) + (-1.0);
    float _258 = (_248.y * 2.0) + (-1.0);
    float _259 = dot(vec2(_256, _258), vec2(_256, _258));
    float _3335 = isnan(0.0) ? _259 : (isnan(_259) ? 0.0 : max(_259, 0.0));
    float _265 = sqrt(1.0 - (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))));
    vec4 _284 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _291 = fma(_265, _194 * NORMAL.x, fma(_258, _201 * TANGENT.x, (_187 * _180) * _256));
    float _294 = fma(_265, _194 * NORMAL.y, fma(_258, _201 * TANGENT.y, (_187 * _181) * _256));
    float _297 = fma(_265, _194 * NORMAL.z, fma(_258, _201 * TANGENT.z, (_187 * _182) * _256));
    float _301 = inversesqrt(dot(vec3(_291, _294, _297), vec3(_291, _294, _297)));
    float _302 = _301 * _291;
    float _303 = _301 * _294;
    float _304 = _301 * _297;
    float _3346 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _305 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _3357 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3368 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3379 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3390 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _309 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
    float _325 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _366 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _376 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _366);
    float _377 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _366);
    float _378 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _366);
    float _382 = inversesqrt(dot(vec3(_376, _377, _378), vec3(_376, _377, _378)));
    float _383 = _376 * _382;
    float _384 = _377 * _382;
    float _385 = _378 * _382;
    vec4 _390 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _392 = _390.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _568 = sqrt(((_376 * _376) + (_377 * _377)) + (_378 * _378));
        float _574 = (cbMatDynParam._m0[5u].x * _568) + cbMatDynParam._m0[5u].y;
        float _3401 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
        float _575 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _579 = (cbMatDynParam._m0[5u].z * _568) + cbMatDynParam._m0[5u].w;
        float _3412 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) - _575)) + _575) < ((_392 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _404 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _405 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _425 = fma(_304, cbSceneParam._m0[5u].z, fma(_303, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _302));
    float _428 = fma(_304, cbSceneParam._m0[6u].z, fma(_303, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _302));
    float _431 = fma(_304, cbSceneParam._m0[7u].z, fma(_303, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _302));
    uint _444 = uint(roundEven(NORMAL.w)) * 13u;
    uint _446 = _444 + 9u;
    uint _447 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _453 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0)))) * cbInstanceData._m0[_447].x;
    float _454 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0)))) * cbInstanceData._m0[_447].y;
    float _455 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_447].z;
    float _3423 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _456 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
    float _3434 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _457 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _458 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _459 = 1.0 - _309;
    float _460 = _456 * _459;
    float _461 = _457 * _459;
    float _462 = _458 * _459;
    float _467 = (_456 + (-0.039999999105930328369140625)) * _309;
    float _468 = (_457 + (-0.039999999105930328369140625)) * _309;
    float _469 = (_458 + (-0.039999999105930328369140625)) * _309;
    float _470 = _467 + 0.039999999105930328369140625;
    float _472 = _468 + 0.039999999105930328369140625;
    float _473 = _469 + 0.039999999105930328369140625;
    vec4 _482 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _404, cbSceneParam._m0[86u].y * _405));
    float _485 = _482.x * TEXCOORD.z;
    float _486 = dot(vec3(_302, _303, _304), vec3(_383, _384, _385));
    float _489 = _486 * 2.0;
    float _493 = (_489 * _302) - _383;
    float _494 = (_489 * _303) - _384;
    float _495 = (_489 * _304) - _385;
    float _499 = abs(dot(vec3(_383, _384, _385), vec3(_302, _303, _304)));
    float _3456 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _501 = sqrt(_305);
    float _514 = exp2((_501 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_501 * 3.0));
    float _520 = (1.0 - _514) * ((_501 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _521 = _514 * _501;
    float _549 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _888;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _613 = fma(_557, cbModelParam._m0[26u].z, fma(_553, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _549));
        float _617 = fma(_557, cbModelParam._m0[27u].z, fma(_553, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _549));
        float _621 = fma(_557, cbModelParam._m0[28u].z, fma(_553, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _549));
        float _646 = _549 + _302;
        float _647 = _553 + _303;
        float _648 = _557 + _304;
        float _658 = fma(_648, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _646)) - _613;
        float _659 = fma(_648, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _646)) - _617;
        float _660 = fma(_648, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _646)) - _621;
        float _664 = inversesqrt(dot(vec3(_658, _659, _660), vec3(_658, _659, _660)));
        float _677 = ((_664 * _658) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_613 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _678 = ((_664 * _659) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_617 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _679 = ((_664 * _660) / cbModelParam._m0[34u].z) + ((((((_621 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _678, _679), 0.0);
        float _716 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _717 = _716 * (_682.x + (-0.5));
        float _718 = _716 * (_682.y + (-0.5));
        float _719 = _716 * (_682.z + (-0.5));
        float _726 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _727 = _726 * (_689.x + (-0.5));
        float _728 = _726 * (_689.y + (-0.5));
        float _729 = _726 * (_689.z + (-0.5));
        float _736 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _737 = _736 * (_696.x + (-0.5));
        float _738 = _736 * (_696.y + (-0.5));
        float _739 = _736 * (_696.z + (-0.5));
        float _746 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _747 = _746 * (_703.x + (-0.5));
        float _748 = _746 * (_703.y + (-0.5));
        float _749 = _746 * (_703.z + (-0.5));
        float _750 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        float _751 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _752 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        float _753 = _717 * 0.5;
        float _754 = _727 * 0.5;
        float _755 = _737 * 0.5;
        float _756 = dot(vec3(_753, _754, _755), vec3(_753, _754, _755));
        float _761 = (_756 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_756);
        float _770 = (dot(vec3(_302, _303, _304), vec3(_761 * _753, _761 * _754, _761 * _755)) + 1.0) * 0.5;
        float _3482 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _780 = sqrt(((_754 * _754) + (_753 * _753)) + (_755 * _755)) / (_750 + 9.9999997473787516355514526367188e-06);
        float _3493 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0));
        float _782 = _781 * 2.0;
        float _786 = (1.0 - _781) / (_781 + 1.0);
        float _3504 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _787 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _796 = ((((1.0 - _787) * (_782 + 2.0)) * exp2(log2(isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0))) * (_782 + 1.0))) + _787) * _750;
        float _797 = _718 * 0.5;
        float _798 = _728 * 0.5;
        float _799 = _738 * 0.5;
        float _800 = dot(vec3(_797, _798, _799), vec3(_797, _798, _799));
        float _805 = (_800 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_800);
        float _813 = (dot(vec3(_302, _303, _304), vec3(_805 * _797, _805 * _798, _805 * _799)) + 1.0) * 0.5;
        float _3515 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _822 = sqrt(((_798 * _798) + (_797 * _797)) + (_799 * _799)) / (_751 + 9.9999997473787516355514526367188e-06);
        float _3526 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _823 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _824 = _823 * 2.0;
        float _828 = (1.0 - _823) / (_823 + 1.0);
        float _3537 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _838 = ((((1.0 - _829) * (_824 + 2.0)) * exp2(log2(isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_824 + 1.0))) + _829) * _751;
        float _839 = _719 * 0.5;
        float _840 = _729 * 0.5;
        float _841 = _739 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _855 = (dot(vec3(_302, _303, _304), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3548 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _864 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_752 + 9.9999997473787516355514526367188e-06);
        float _3559 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3570 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) * (_866 + 1.0))) + _871) * _752;
        _888 = _719;
        _890 = _718;
        _891 = _717;
        _892 = _729;
        _893 = _728;
        _894 = _727;
        _895 = _739;
        _896 = _738;
        _897 = _737;
        _898 = _752;
        _899 = _751;
        _900 = _750;
        _901 = cbModelParam._m0[36u].z * (isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0)));
        _902 = cbModelParam._m0[36u].z * (isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)));
        _903 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
    }
    else
    {
        _888 = _889;
        _890 = _889;
        _891 = _889;
        _892 = _889;
        _893 = _889;
        _894 = _889;
        _895 = _889;
        _896 = _889;
        _897 = _889;
        _898 = _889;
        _899 = _889;
        _900 = _889;
        _901 = 0.0;
        _902 = 0.0;
        _903 = 0.0;
    }
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _932 = fma(_557, cbModelParam._m0[30u].z, fma(_553, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _549));
        float _936 = fma(_557, cbModelParam._m0[31u].z, fma(_553, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _549));
        float _940 = fma(_557, cbModelParam._m0[32u].z, fma(_553, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _549));
        float _963 = _549 + _302;
        float _964 = _553 + _303;
        float _965 = _557 + _304;
        float _975 = fma(_965, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _963)) - _932;
        float _976 = fma(_965, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _963)) - _936;
        float _977 = fma(_965, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _963)) - _940;
        float _981 = inversesqrt(dot(vec3(_975, _976, _977), vec3(_975, _976, _977)));
        float _994 = ((_981 * _975) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_932 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _995 = ((_981 * _976) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_936 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _996 = ((_981 * _977) / cbModelParam._m0[35u].z) + ((((((_940 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1012 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        vec4 _1019 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_994, _995, _996), 0.0);
        float _1031 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_998.x + (-0.5));
        float _1033 = _1031 * (_998.y + (-0.5));
        float _1034 = _1031 * (_998.z + (-0.5));
        float _1041 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1005.x + (-0.5));
        float _1043 = _1041 * (_1005.y + (-0.5));
        float _1044 = _1041 * (_1005.z + (-0.5));
        float _1051 = exp2((_1012.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1012.x + (-0.5));
        float _1053 = _1051 * (_1012.y + (-0.5));
        float _1054 = _1051 * (_1012.z + (-0.5));
        float _1061 = exp2((_1019.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1019.x + (-0.5));
        float _1063 = _1061 * (_1019.y + (-0.5));
        float _1064 = _1061 * (_1019.z + (-0.5));
        float _1065 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1066 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1067 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1068 = _1032 * 0.5;
        float _1069 = _1042 * 0.5;
        float _1070 = _1052 * 0.5;
        float _1071 = dot(vec3(_1068, _1069, _1070), vec3(_1068, _1069, _1070));
        float _1076 = (_1071 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1071);
        float _1084 = (dot(vec3(_302, _303, _304), vec3(_1076 * _1068, _1076 * _1069, _1076 * _1070)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0));
        float _1093 = sqrt(((_1069 * _1069) + (_1068 * _1068)) + (_1070 * _1070)) / (_1065 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _1095 = _1094 * 2.0;
        float _1099 = (1.0 - _1094) / (_1094 + 1.0);
        float _3633 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1109 = ((((1.0 - _1100) * (_1095 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_1095 + 1.0))) + _1100) * _1065;
        float _1110 = _1033 * 0.5;
        float _1111 = _1043 * 0.5;
        float _1112 = _1053 * 0.5;
        float _1113 = dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112));
        float _1118 = (_1113 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1113);
        float _1126 = (dot(vec3(_302, _303, _304), vec3(_1118 * _1110, _1118 * _1111, _1118 * _1112)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1135 = sqrt(((_1111 * _1111) + (_1110 * _1110)) + (_1112 * _1112)) / (_1066 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1137 = _1136 * 2.0;
        float _1141 = (1.0 - _1136) / (_1136 + 1.0);
        float _3666 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1142 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1151 = ((((1.0 - _1142) * (_1137 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1137 + 1.0))) + _1142) * _1066;
        float _1152 = _1034 * 0.5;
        float _1153 = _1044 * 0.5;
        float _1154 = _1054 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_302, _303, _304), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1067 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3699 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1179 + 1.0))) + _1184) * _1067;
        _1201 = _1034;
        _1202 = _1033;
        _1203 = _1032;
        _1204 = _1044;
        _1205 = _1043;
        _1206 = _1042;
        _1207 = _1054;
        _1208 = _1053;
        _1209 = _1052;
        _1210 = _1067;
        _1211 = _1066;
        _1212 = _1065;
        _1213 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0)));
        _1214 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)));
        _1215 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
    }
    else
    {
        _1201 = _889;
        _1202 = _889;
        _1203 = _889;
        _1204 = _889;
        _1205 = _889;
        _1206 = _889;
        _1207 = _889;
        _1208 = _889;
        _1209 = _889;
        _1210 = _889;
        _1211 = _889;
        _1212 = _889;
        _1213 = 0.0;
        _1214 = 0.0;
        _1215 = 0.0;
    }
    float _1225 = (cbModelParam._m0[1u].x * (_1213 - _901)) + _901;
    float _1226 = (cbModelParam._m0[1u].x * (_1214 - _902)) + _902;
    float _1227 = (cbModelParam._m0[1u].x * (_1215 - _903)) + _903;
    float _1248 = fma(_1227, cbSceneParam._m0[89u].z, fma(_1226, cbSceneParam._m0[89u].y, _1225 * cbSceneParam._m0[89u].x));
    float _1251 = fma(_1227, cbSceneParam._m0[90u].z, fma(_1226, cbSceneParam._m0[90u].y, _1225 * cbSceneParam._m0[90u].x));
    float _1254 = fma(_1227, cbSceneParam._m0[91u].z, fma(_1226, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1225));
    float _1269 = _493 * 0.5;
    float _1270 = _494 * 0.5;
    float _1271 = _495 * 0.5;
    float _1272 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1203, _1206, _1209, _1212));
    float _1275 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1202, _1205, _1208, _1211));
    float _1278 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_1201, _1204, _1207, _1210));
    float _1312;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1285 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_888, _892, _895, _898));
        float _1289 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_890, _893, _896, _899));
        float _1293 = dot(vec4(_1269, _1270, _1271, 1.0), vec4(_891, _894, _897, _900));
        float _1300 = dot(vec4(cbModelParam._m0[39u]), vec4(_1269, _1270, _1271, 1.0));
        _1312 = dot(vec3(isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)), isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1312 = 1.0;
    }
    float _1323;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1314 = dot(vec4(cbModelParam._m0[40u]), vec4(_1269, _1270, _1271, 1.0));
        _1323 = dot(vec3(isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1314) ? 0.0 : (isnan(0.0) ? _1314 : max(0.0, _1314))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1323 = 1.0;
    }
    float _1327 = (_1323 * cbModelParam._m0[1u].x) + (_1312 * (1.0 - cbModelParam._m0[1u].x));
    float _1337 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _305);
    float _1338 = isnan(_1337) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1337 : min(cbModelParam._m0[25u].z, _1337));
    float _1420;
    float _1422;
    float _1424;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1387 = fma(_557, cbModelParam._m0[13u].z, fma(_553, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _549)) + cbModelParam._m0[13u].w;
        float _1391 = fma(_557, cbModelParam._m0[14u].z, fma(_553, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _549)) + cbModelParam._m0[14u].w;
        float _1395 = fma(_557, cbModelParam._m0[15u].z, fma(_553, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _549)) + cbModelParam._m0[15u].w;
        float _1398 = fma(_495, cbModelParam._m0[13u].z, fma(_494, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _493));
        float _1401 = fma(_495, cbModelParam._m0[14u].z, fma(_494, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _493));
        float _1404 = fma(_495, cbModelParam._m0[15u].z, fma(_494, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _493));
        float _1432;
        if (_1398 > 0.0)
        {
            _1432 = abs((1.0 - _1387) / _1398);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1398 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1387 + 1.0) / _1398);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1432 = frontier_phi_17_15_ladder;
        }
        float _1639;
        if (_1401 > 0.0)
        {
            _1639 = abs((1.0 - _1391) / _1401);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1391 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1639 = frontier_phi_26_22_ladder;
        }
        float _1893;
        if (_1404 > 0.0)
        {
            _1893 = abs((1.0 - _1395) / _1404);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1395 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1893 = frontier_phi_38_33_ladder;
        }
        float _1895 = isnan(_1639) ? _1432 : (isnan(_1432) ? _1639 : min(_1432, _1639));
        float _1896 = isnan(_1893) ? _1895 : (isnan(_1895) ? _1893 : min(_1895, _1893));
        float _1900 = (_1896 * _1398) + _1387;
        float _1901 = (_1896 * _1401) + _1391;
        float _1902 = (_1896 * _1404) + _1395;
        float _1903 = _1896 * 9.9999997473787516355514526367188e-05;
        float _1905 = (-1.0) - _1903;
        float _1907 = _1903 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1902 > _1907) || ((_1902 < _1905) || ((_1901 > _1907) || ((_1901 < _1905) || ((_1900 < _1905) || (_1900 > _1907))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2030 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1902, cbModelParam._m0[9u].z, fma(_1901, cbModelParam._m0[9u].y, _1900 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1902, cbModelParam._m0[10u].z, fma(_1901, cbModelParam._m0[10u].y, _1900 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1902, cbModelParam._m0[11u].z, fma(_1901, cbModelParam._m0[11u].y, _1900 * cbModelParam._m0[11u].x))), _1338);
            frontier_phi_16_38_ladder = _2030.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2030.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2030.x * cbModelParam._m0[1u].y;
        }
        _1420 = frontier_phi_16_38_ladder_2;
        _1422 = frontier_phi_16_38_ladder_1;
        _1424 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_493, _494, _495), _1338);
        _1420 = _1408.x * cbModelParam._m0[1u].y;
        _1422 = _1408.y * cbModelParam._m0[1u].y;
        _1424 = _1408.z * cbModelParam._m0[1u].y;
    }
    float _1428 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _305);
    float _1429 = isnan(_1428) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1428 : min(cbModelParam._m0[25u].w, _1428));
    float _1522;
    float _1524;
    float _1526;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1486 = fma(_557, cbModelParam._m0[21u].z, fma(_553, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _549)) + cbModelParam._m0[21u].w;
        float _1490 = fma(_557, cbModelParam._m0[22u].z, fma(_553, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _549)) + cbModelParam._m0[22u].w;
        float _1494 = fma(_557, cbModelParam._m0[23u].z, fma(_553, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _549)) + cbModelParam._m0[23u].w;
        float _1497 = fma(_495, cbModelParam._m0[21u].z, fma(_494, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _493));
        float _1500 = fma(_495, cbModelParam._m0[22u].z, fma(_494, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _493));
        float _1503 = fma(_495, cbModelParam._m0[23u].z, fma(_494, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _493));
        float _1644;
        if (_1497 > 0.0)
        {
            _1644 = abs((1.0 - _1486) / _1497);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1486 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1644 = frontier_phi_28_24_ladder;
        }
        float _1920;
        if (_1500 > 0.0)
        {
            _1920 = abs((1.0 - _1490) / _1500);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1490 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1920 = frontier_phi_40_35_ladder;
        }
        float _2133;
        if (_1503 > 0.0)
        {
            _2133 = abs((1.0 - _1494) / _1503);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1494 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2133 = frontier_phi_49_46_ladder;
        }
        float _2135 = isnan(_1920) ? _1644 : (isnan(_1644) ? _1920 : min(_1644, _1920));
        float _2136 = isnan(_2133) ? _2135 : (isnan(_2135) ? _2133 : min(_2135, _2133));
        float _2140 = (_2136 * _1497) + _1486;
        float _2141 = (_2136 * _1500) + _1490;
        float _2142 = (_2136 * _1503) + _1494;
        float _2143 = _2136 * 9.9999997473787516355514526367188e-05;
        float _2144 = (-1.0) - _2143;
        float _2146 = _2143 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2142 > _2146) || ((_2142 < _2144) || ((_2141 > _2146) || ((_2141 < _2144) || ((_2140 < _2144) || (_2140 > _2146))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2142, cbModelParam._m0[17u].z, fma(_2141, cbModelParam._m0[17u].y, _2140 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2142, cbModelParam._m0[18u].z, fma(_2141, cbModelParam._m0[18u].y, _2140 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2142, cbModelParam._m0[19u].z, fma(_2141, cbModelParam._m0[19u].y, _2140 * cbModelParam._m0[19u].x))), _1429);
            frontier_phi_25_49_ladder = _2376.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2376.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2376.x * cbModelParam._m0[1u].z;
        }
        _1522 = frontier_phi_25_49_ladder_2;
        _1524 = frontier_phi_25_49_ladder_1;
        _1526 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_493, _494, _495), _1429);
        _1522 = _1506.x * cbModelParam._m0[1u].z;
        _1524 = _1506.y * cbModelParam._m0[1u].z;
        _1526 = _1506.z * cbModelParam._m0[1u].z;
    }
    float _1539 = (((_520 * _470) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1522 - _1420)) + _1420);
    float _1541 = (((_520 * _472) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1524 - _1422)) + _1422);
    float _1543 = (((_520 * _473) + _521) * _485) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1546 = fma(_1543, cbSceneParam._m0[89u].z, fma(_1541, cbSceneParam._m0[89u].y, _1539 * cbSceneParam._m0[89u].x));
    float _1549 = fma(_1543, cbSceneParam._m0[90u].z, fma(_1541, cbSceneParam._m0[90u].y, _1539 * cbSceneParam._m0[90u].x));
    float _1552 = fma(_1543, cbSceneParam._m0[91u].z, fma(_1541, cbSceneParam._m0[91u].y, _1539 * cbSceneParam._m0[91u].x));
    uvec4 _1562 = floatBitsToUint(cbInstanceData._m0[_444 + 5u]);
    uint _1564 = _1562.x * 14u;
    uint _1565 = _1564 + 13u;
    float _1572 = _485 + (-1.0);
    float _1577 = (cbLight._m0[_1565].x * _1572) + 1.0;
    float _1578 = (cbLight._m0[_1565].y * _1572) + 1.0;
    float _1579 = (cbLight._m0[_1565].z * _1572) + 1.0;
    float _1580 = (cbLight._m0[_1565].w * _1572) + 1.0;
    uint _1581 = _1564 + 5u;
    float _1587 = isnan(1.0) ? _1578 : (isnan(_1578) ? 1.0 : min(_1578, 1.0));
    uint _1591 = _1564 + 4u;
    float _1598 = isnan(1.0) ? _1577 : (isnan(_1577) ? 1.0 : min(_1577, 1.0));
    uint _1602 = _1564 | 1u;
    float _1613 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_302, _303, _304));
    float _1616 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_302, _303, _304));
    float _3835 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _3846 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1621 = (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * 0.3183098733425140380859375;
    float _1623 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
    float _1630 = ((cbLight._m0[_1581].x * _1587) * _1623) + ((cbLight._m0[_1591].x * _1598) * _1621);
    float _1631 = ((_1587 * cbLight._m0[_1581].y) * _1623) + ((_1598 * cbLight._m0[_1591].y) * _1621);
    float _1632 = ((_1587 * cbLight._m0[_1581].z) * _1623) + ((_1598 * cbLight._m0[_1591].z) * _1621);
    uvec4 _1636 = floatBitsToUint(cbLight._m0[_1564 + 12u]);
    bool _1638 = _1636.x == 0u;
    float _1649;
    float _1651;
    float _1653;
    if (_1638)
    {
        _1649 = _1630;
        _1651 = _1631;
        _1653 = _1632;
    }
    else
    {
        uint _1657 = _1564 + 6u;
        float _1673 = (dot(vec3(cbLight._m0[_1564 + 2u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1674 = _1673 * _1673;
        float _3857 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
        float _1675 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _1676 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1649 = (((cbLight._m0[_1657].x * 0.3183098733425140380859375) * _1675) * _1676) + _1630;
        _1651 = (((cbLight._m0[_1657].y * 0.3183098733425140380859375) * _1675) * _1676) + _1631;
        _1653 = (((cbLight._m0[_1657].z * 0.3183098733425140380859375) * _1675) * _1676) + _1632;
    }
    bool _1656 = _1636.y == 0u;
    float _1694;
    float _1696;
    float _1698;
    if (_1656)
    {
        _1694 = _1649;
        _1696 = _1651;
        _1698 = _1653;
    }
    else
    {
        uint _1864 = _1564 + 7u;
        float _1880 = (dot(vec3(cbLight._m0[_1564 + 3u].xyz), vec3(_302, _303, _304)) * 0.5) + 0.5;
        float _1881 = _1880 * _1880;
        float _3873 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
        float _1882 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1883 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _1694 = (((cbLight._m0[_1864].x * 0.3183098733425140380859375) * _1882) * _1883) + _1649;
        _1696 = (((cbLight._m0[_1864].y * 0.3183098733425140380859375) * _1882) * _1883) + _1651;
        _1698 = (((cbLight._m0[_1864].z * 0.3183098733425140380859375) * _1882) * _1883) + _1653;
    }
    uint _1701 = _1564 + 8u;
    float _1714 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1564].w)) * _305) * 0.949999988079071044921875);
    float _1715 = _1714 * _1714;
    float _1716 = cbLight._m0[_1564].x + _383;
    float _1717 = cbLight._m0[_1564].y + _384;
    float _1718 = cbLight._m0[_1564].z + _385;
    float _1722 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
    float _1723 = _1722 * _1716;
    float _1724 = _1722 * _1717;
    float _1725 = _1722 * _1718;
    float _1726 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1564].xyz));
    float _3889 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1729 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
    float _3900 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _1730 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _1731 = dot(vec3(_302, _303, _304), vec3(_1723, _1724, _1725));
    float _3911 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1734 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1735 = dot(vec3(cbLight._m0[_1564].xyz), vec3(_1723, _1724, _1725));
    float _3922 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1739 = _1715 * _1715;
    float _1743 = ((_1734 * _1734) * (_1739 + (-1.0))) + 1.0;
    float _1751 = exp2(log2(1.0 - (isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0)))) * 5.0);
    float _1752 = 0.959999978542327880859375 - _467;
    float _1754 = 0.959999978542327880859375 - _468;
    float _1755 = 0.959999978542327880859375 - _469;
    float _1762 = 1.0 - _1715;
    float _1773 = (0.5 / (((_1730 * ((_1729 * _1762) + _1715)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1762) + _1715) * _1729))) * _1729;
    float _3933 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1775 = (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * (_1739 / ((_1743 * _1743) * 3.141590118408203125));
    uint _1786 = _1564 + 9u;
    float _1797 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1602].w)) * _305) * 0.949999988079071044921875);
    float _1798 = _1797 * _1797;
    float _1799 = cbLight._m0[_1602].x + _383;
    float _1800 = cbLight._m0[_1602].y + _384;
    float _1801 = cbLight._m0[_1602].z + _385;
    float _1805 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
    float _1806 = _1805 * _1799;
    float _1807 = _1805 * _1800;
    float _1808 = _1805 * _1801;
    float _1809 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1602].xyz));
    float _3944 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1812 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    float _1813 = dot(vec3(_302, _303, _304), vec3(_1806, _1807, _1808));
    float _3955 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _1817 = dot(vec3(cbLight._m0[_1602].xyz), vec3(_1806, _1807, _1808));
    float _3966 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1821 = _1798 * _1798;
    float _1825 = ((_1816 * _1816) * (_1821 + (-1.0))) + 1.0;
    float _1832 = exp2(log2(1.0 - (isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0)))) * 5.0);
    float _1839 = 1.0 - _1798;
    float _1849 = (0.5 / (((_1730 * ((_1812 * _1839) + _1798)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1839) + _1798) * _1812))) * _1812;
    float _3977 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1851 = (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0))) * (_1821 / ((_1825 * _1825) * 3.141590118408203125));
    float _1861 = (((((_1832 * _1752) + _470) * cbLight._m0[_1786].x) * _1851) * _1587) + (((((_1751 * _1752) + _470) * cbLight._m0[_1701].x) * _1775) * _1598);
    float _1862 = (((((_1832 * _1754) + _472) * cbLight._m0[_1786].y) * _1851) * _1587) + (((((_1751 * _1754) + _472) * cbLight._m0[_1701].y) * _1775) * _1598);
    float _1863 = (((((_1832 * _1755) + _473) * cbLight._m0[_1786].z) * _1851) * _1587) + (((((_1751 * _1755) + _473) * cbLight._m0[_1701].z) * _1775) * _1598);
    float _1925;
    float _1927;
    float _1929;
    if (_1638)
    {
        _1925 = _1861;
        _1927 = _1862;
        _1929 = _1863;
    }
    else
    {
        uint _1931 = _1564 + 2u;
        uint _1935 = _1564 + 10u;
        float _1949 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1931].w)) * _305) * 0.949999988079071044921875);
        float _1950 = _1949 * _1949;
        float _1951 = cbLight._m0[_1931].x + _383;
        float _1952 = cbLight._m0[_1931].y + _384;
        float _1953 = cbLight._m0[_1931].z + _385;
        float _1957 = inversesqrt(dot(vec3(_1951, _1952, _1953), vec3(_1951, _1952, _1953)));
        float _1958 = _1957 * _1951;
        float _1959 = _1957 * _1952;
        float _1960 = _1957 * _1953;
        float _1961 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_1931].xyz));
        float _3988 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
        float _1964 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
        float _1965 = dot(vec3(_302, _303, _304), vec3(_1958, _1959, _1960));
        float _3999 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1968 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
        float _1969 = dot(vec3(cbLight._m0[_1931].xyz), vec3(_1958, _1959, _1960));
        float _4010 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1973 = _1950 * _1950;
        float _1977 = ((_1968 * _1968) * (_1973 + (-1.0))) + 1.0;
        float _1984 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
        float _1991 = 1.0 - _1950;
        float _2001 = (0.5 / (((_1730 * ((_1964 * _1991) + _1950)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _1991) + _1950) * _1964))) * _1964;
        float _4021 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2003 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1973 / ((_1977 * _1977) * 3.141590118408203125));
        float _2004 = isnan(1.0) ? _1579 : (isnan(_1579) ? 1.0 : min(_1579, 1.0));
        _1925 = (((((_1984 * _1752) + _470) * cbLight._m0[_1935].x) * _2003) * _2004) + _1861;
        _1927 = (((((_1984 * _1754) + _472) * cbLight._m0[_1935].y) * _2003) * _2004) + _1862;
        _1929 = (((((_1984 * _1755) + _473) * cbLight._m0[_1935].z) * _2003) * _2004) + _1863;
    }
    float _2039;
    float _2041;
    float _2043;
    if (_1656)
    {
        _2039 = _1925;
        _2041 = _1927;
        _2043 = _1929;
    }
    else
    {
        uint _2050 = _1564 + 3u;
        uint _2054 = _1564 + 11u;
        float _2068 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2050].w)) * _305) * 0.949999988079071044921875);
        float _2069 = _2068 * _2068;
        float _2070 = cbLight._m0[_2050].x + _383;
        float _2071 = cbLight._m0[_2050].y + _384;
        float _2072 = cbLight._m0[_2050].z + _385;
        float _2076 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
        float _2077 = _2076 * _2070;
        float _2078 = _2076 * _2071;
        float _2079 = _2076 * _2072;
        float _2080 = dot(vec3(_302, _303, _304), vec3(cbLight._m0[_2050].xyz));
        float _4037 = isnan(0.0) ? _2080 : (isnan(_2080) ? 0.0 : max(_2080, 0.0));
        float _2083 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _2084 = dot(vec3(_302, _303, _304), vec3(_2077, _2078, _2079));
        float _4048 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _2088 = dot(vec3(cbLight._m0[_2050].xyz), vec3(_2077, _2078, _2079));
        float _4059 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2092 = _2069 * _2069;
        float _2096 = ((_2087 * _2087) * (_2092 + (-1.0))) + 1.0;
        float _2103 = exp2(log2(1.0 - (isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0)))) * 5.0);
        float _2110 = 1.0 - _2069;
        float _2120 = (0.5 / (((_1730 * ((_2083 * _2110) + _2069)) + 9.9999999392252902907785028219223e-09) + (((_1730 * _2110) + _2069) * _2083))) * _2083;
        float _4070 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2122 = (isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_2092 / ((_2096 * _2096) * 3.141590118408203125));
        float _2123 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
        _2039 = (((((_2103 * _1752) + _470) * cbLight._m0[_2054].x) * _2122) * _2123) + _1925;
        _2041 = (((((_2103 * _1754) + _472) * cbLight._m0[_2054].y) * _2122) * _2123) + _1927;
        _2043 = (((((_2103 * _1755) + _473) * cbLight._m0[_2054].z) * _2122) * _2123) + _1929;
    }
    float _2258;
    float _2260;
    float _2262;
    float _2264;
    float _2266;
    float _2268;
    if (_1562.y == 0u)
    {
        float _2198 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2199 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2198;
        float _2200 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2198;
        float _2201 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2198;
        uvec4 _2213 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2214 = _2213.x;
        uint _2225 = uint((float(_2213.y) * floor(float(uint(cbSceneParam._m0[85u].y * _405) / _2214))) + floor(float(uint(cbSceneParam._m0[85u].x * _404) / _2214)));
        float _2235 = (log2(_2201 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2236 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        uint _2239 = uint(isnan(14.0) ? _2236 : (isnan(_2236) ? 14.0 : min(_2236, 14.0)));
        uvec4 _2244 = texelFetch(g_lightClusterGridBuffer, int(((_2239 << 2u) + (_2225 << 6u)) >> 2u));
        uint _2245 = _2244.x;
        uint _2246 = _2213.z;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((((1u << ((_2246 >> 4u) & 15u)) + 4294967295u) & _2245) == 0u) || ((_2246 & 240u) == 0u))
        {
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
        }
        else
        {
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            uint _2549 = 0u;
            uint _2558;
            bool _2559;
            for (;;)
            {
                _2558 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                _2559 = _2558 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2559)
                {
                    frontier_phi_66_pred = _2543;
                    frontier_phi_66_pred_1 = _2548;
                    frontier_phi_66_pred_2 = _2547;
                    frontier_phi_66_pred_3 = _2546;
                    frontier_phi_66_pred_4 = _2545;
                    frontier_phi_66_pred_5 = _2544;
                }
                else
                {
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    float _2692;
                    float _2693;
                    uint _2694;
                    _2688 = _2543;
                    _2689 = _2544;
                    _2690 = _2545;
                    _2691 = _2546;
                    _2692 = _2547;
                    _2693 = _2548;
                    _2694 = _2558;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    for (;;)
                    {
                        uint _2698 = uint(findLSB(_2694)) + (_2549 << 5u);
                        uint _2695 = (_2694 + 4294967295u) & _2694;
                        uint _2700 = _2698 * 48u;
                        vec4 _2714 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 3u)).x));
                        uint _2720 = (_2698 * 48u) + 4u;
                        vec4 _2733 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2720)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2720 + 3u)).x));
                        uint _2739 = (_2698 * 48u) + 8u;
                        vec3 _2750 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x));
                        float _2754 = _2714.x - _2199;
                        float _2755 = _2714.y - _2200;
                        float _2756 = _2714.z - _2201;
                        float _2757 = dot(vec3(_2754, _2755, _2756), vec3(_2754, _2755, _2756));
                        float _2760 = inversesqrt(_2757);
                        float _2761 = _2760 * _2754;
                        float _2762 = _2760 * _2755;
                        float _2763 = _2760 * _2756;
                        float _2764 = dot(vec3(_425, _428, _431), vec3(_2761, _2762, _2763));
                        float _2769 = 1.0 - (_2757 * _2714.w);
                        float _4096 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                        float _2770 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                        float _2771 = sqrt(_2757) * _2733.w;
                        float _2774 = 1.39999997615814208984375 / (_2771 + 1.39999997615814208984375);
                        float _2775 = _2774 * _2774;
                        float _2778 = ((1.0 - _2775) * _2764) + _2775;
                        float _2781 = _2771 * _2771;
                        float _2785 = ((isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0))) * _2770) / ((_2781 * 0.699999988079071044921875) + 1.0);
                        float _2789 = (-0.0) - _2199;
                        float _2790 = (-0.0) - _2200;
                        float _2791 = (-0.0) - _2201;
                        float _2795 = inversesqrt(dot(vec3(_2789, _2790, _2791), vec3(_2789, _2790, _2791)));
                        float _2796 = _2795 * _2789;
                        float _2797 = _2795 * _2790;
                        float _2798 = _2795 * _2791;
                        float _2806 = exp2(log2(1.0 / ((_2781 * 3.5) + 5.0)) * 0.25);
                        float _2807 = 1.0 - _501;
                        float _2814 = sqrt(1.0 - ((1.0 - (_2807 * _2807)) * (1.0 - (_2806 * _2806))));
                        float _2815 = _2814 * _2814;
                        float _2816 = _2815 * _2815;
                        float _2817 = _2796 + _2761;
                        float _2818 = _2797 + _2762;
                        float _2819 = _2798 + _2763;
                        float _2823 = inversesqrt(dot(vec3(_2817, _2818, _2819), vec3(_2817, _2818, _2819)));
                        float _2827 = dot(vec3(_425, _428, _431), vec3(_2796, _2797, _2798));
                        float _4112 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
                        float _2830 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                        float _2831 = dot(vec3(_425, _428, _431), vec3(_2823 * _2817, _2823 * _2818, _2823 * _2819));
                        float _4123 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2834 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                        float _2838 = ((_2834 * _2834) * (_2816 + (-1.0))) + 1.0;
                        float _2839 = _2774 * _2815;
                        float _2840 = _2839 * _2839;
                        float _2843 = ((1.0 - _2840) * _2764) + _2840;
                        float _4134 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0));
                        float _2844 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                        float _2845 = 1.0 - _2815;
                        float _2855 = (0.5 / (((_2844 * ((_2830 * _2845) + _2815)) + 9.9999999392252902907785028219223e-09) + (((_2844 * _2845) + _2815) * _2830))) * _2844;
                        float _4145 = isnan(0.0) ? _2855 : (isnan(_2855) ? 0.0 : max(_2855, 0.0));
                        float _2866 = (((_2816 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_2838 * _2838) * ((_2781 * 2.1991131305694580078125) + 3.141590118408203125))) * _2770;
                        _2618 = (_2785 * _2733.x) + _2691;
                        _2619 = (_2785 * _2733.y) + _2692;
                        _2620 = (_2785 * _2733.z) + _2693;
                        _2615 = (_2866 * _2750.x) + _2688;
                        _2616 = (_2866 * _2750.y) + _2689;
                        _2617 = (_2866 * _2750.z) + _2690;
                        if (_2695 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2688 = _2615;
                            _2689 = _2616;
                            _2690 = _2617;
                            _2691 = _2618;
                            _2692 = _2619;
                            _2693 = _2620;
                            _2694 = _2695;
                        }
                    }
                    frontier_phi_66_pred = _2615;
                    frontier_phi_66_pred_1 = _2620;
                    frontier_phi_66_pred_2 = _2619;
                    frontier_phi_66_pred_3 = _2618;
                    frontier_phi_66_pred_4 = _2617;
                    frontier_phi_66_pred_5 = _2616;
                }
                _2382 = frontier_phi_66_pred;
                _2392 = frontier_phi_66_pred_1;
                _2390 = frontier_phi_66_pred_2;
                _2388 = frontier_phi_66_pred_3;
                _2386 = frontier_phi_66_pred_4;
                _2384 = frontier_phi_66_pred_5;
                uint _2550 = _2549 + 1u;
                if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2543 = _2382;
                    _2544 = _2384;
                    _2545 = _2386;
                    _2546 = _2388;
                    _2547 = _2390;
                    _2548 = _2392;
                    _2549 = _2550;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
        }
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.z;
        uint _2398 = (_2396 >> 8u) & 15u;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        if (((4294967295u << _2398) & _2245) == 0u)
        {
            _2511 = _2381;
            _2513 = _2383;
            _2515 = _2385;
            _2517 = _2387;
            _2519 = _2389;
            _2521 = _2391;
        }
        else
        {
            float _2536 = inversesqrt(dot(vec3(_2199, _2200, _2201), vec3(_2199, _2200, _2201)));
            float _2537 = _2536 * _2199;
            float _2538 = _2536 * _2200;
            float _2539 = _2536 * _2201;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2398 < ((_2396 >> 12u) & 15u))
            {
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2671 = _2381;
                float _2672 = _2383;
                float _2673 = _2385;
                float _2674 = _2387;
                float _2675 = _2389;
                float _2676 = _2391;
                uint _2677 = _2398;
                uint _2686;
                bool _2687;
                for (;;)
                {
                    _2686 = texelFetch(g_lightClassification, int((((_2239 << 5u) + (_2225 << 9u)) + (_2677 << 2u)) >> 2u)).x;
                    _2687 = _2686 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2687)
                    {
                        frontier_phi_77_pred = _2676;
                        frontier_phi_77_pred_1 = _2675;
                        frontier_phi_77_pred_2 = _2674;
                        frontier_phi_77_pred_3 = _2673;
                        frontier_phi_77_pred_4 = _2672;
                        frontier_phi_77_pred_5 = _2671;
                    }
                    else
                    {
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _2885;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3179;
                        float _3180;
                        float _3181;
                        float _2893 = _2671;
                        float _2894 = _2672;
                        float _2895 = _2673;
                        float _2896 = _2674;
                        float _2897 = _2675;
                        float _2898 = _2676;
                        uint _2899 = _2686;
                        uint _2900;
                        vec4 _2925;
                        float _2926;
                        vec4 _2941;
                        vec3 _2953;
                        vec4 _2969;
                        vec4 _2985;
                        float _3032;
                        bool _3033;
                        for (;;)
                        {
                            uint _2910 = ((_2677 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2899));
                            _2900 = (_2899 + 4294967295u) & _2899;
                            uint _2912 = _2910 * 40u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2926 = _2925.w;
                            uint _2928 = (_2910 * 40u) + 4u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2943 = (_2910 * 40u) + 8u;
                            _2953 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x));
                            uint _2956 = (_2910 * 40u) + 16u;
                            _2969 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2956)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2956 + 3u)).x));
                            uint _2972 = (_2910 * 40u) + 20u;
                            _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            uint _2988 = (_2910 * 40u) + 24u;
                            vec4 _3001 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2988)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2988 + 3u)).x));
                            uint _3007 = (_2910 * 40u) + 28u;
                            vec4 _3020 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 3u)).x));
                            _3032 = fma(_2201, _3020.z, fma(_2200, _3020.y, _3020.x * _2199)) + _3020.w;
                            _3033 = !((fma(_2201, _3001.z, fma(_2200, _3001.y, _3001.x * _2199)) + _3001.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3033)
                            {
                                float _3060 = _2925.x - _2199;
                                float _3061 = _2925.y - _2200;
                                float _3062 = _2925.z - _2201;
                                float _3063 = dot(vec3(_3060, _3061, _3062), vec3(_3060, _3061, _3062));
                                float _3066 = inversesqrt(_3063);
                                float _3067 = _3066 * _3060;
                                float _3068 = _3066 * _3061;
                                float _3069 = _3066 * _3062;
                                float _3073 = 1.0 - (_3063 / (_2926 * _2926));
                                float _4156 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                                float _3074 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                                float _3078 = sqrt(_3063) * _2941.w;
                                float _3080 = 1.39999997615814208984375 / (_3078 + 1.39999997615814208984375);
                                float _3081 = _3080 * _3080;
                                float _3084 = ((1.0 - _3081) * dot(vec3(_3067, _3068, _3069), vec3(_425, _428, _431))) + _3081;
                                float _3087 = _3078 * _3078;
                                float _3091 = (fma(_2201, _2969.z, fma(_2200, _2969.y, _2969.x * _2199)) + _2969.w) / _3032;
                                float _3092 = (fma(_2201, _2985.z, fma(_2200, _2985.y, _2985.x * _2199)) + _2985.w) / _3032;
                                float _3096 = 1.0 - dot(vec2(_3091, _3092), vec2(_3091, _3092));
                                float _4172 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3097 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                                float _3098 = _3097 * (((isnan(0.0) ? _3084 : (isnan(_3084) ? 0.0 : max(_3084, 0.0))) * _3074) / ((_3087 * 0.699999988079071044921875) + 1.0));
                                float _3110 = exp2(log2(1.0 / ((_3087 * 3.5) + 5.0)) * 0.25);
                                float _3111 = 1.0 - _501;
                                float _3118 = sqrt(1.0 - ((1.0 - (_3111 * _3111)) * (1.0 - (_3110 * _3110))));
                                float _3119 = _3118 * _3118;
                                float _3120 = _3119 * _3119;
                                float _3121 = _3067 - _2537;
                                float _3122 = _3068 - _2538;
                                float _3123 = _3069 - _2539;
                                float _3127 = inversesqrt(dot(vec3(_3121, _3122, _3123), vec3(_3121, _3122, _3123)));
                                float _3131 = dot(vec3(_425, _428, _431), vec3((-0.0) - _2537, (-0.0) - _2538, (-0.0) - _2539));
                                float _4183 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                                float _3135 = dot(vec3(_425, _428, _431), vec3(_3127 * _3121, _3127 * _3122, _3127 * _3123));
                                float _4194 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3138 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                                float _3142 = ((_3138 * _3138) * (_3120 + (-1.0))) + 1.0;
                                float _3143 = _3080 * _3119;
                                float _3144 = _3143 * _3143;
                                float _3150 = ((1.0 - _3144) * dot(vec3(_425, _428, _431), vec3(_3067, _3068, _3069))) + _3144;
                                float _4205 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                                float _3151 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
                                float _3152 = 1.0 - _3119;
                                float _3162 = (0.5 / (((_3151 * ((_3134 * _3152) + _3119)) + 9.9999999392252902907785028219223e-09) + (((_3151 * _3152) + _3119) * _3134))) * _3151;
                                float _4216 = isnan(0.0) ? _3162 : (isnan(_3162) ? 0.0 : max(_3162, 0.0));
                                float _3172 = (_3097 * _3074) * (((_3120 * 3.1415927410125732421875) * (isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0)))) / ((_3142 * _3142) * ((_3087 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3098 * _2941.y;
                                frontier_phi_83_pred_1 = _3098 * _2941.x;
                                frontier_phi_83_pred_2 = _3172 * _2953.z;
                                frontier_phi_83_pred_3 = _3172 * _2953.y;
                                frontier_phi_83_pred_4 = _3172 * _2953.x;
                                frontier_phi_83_pred_5 = _3098 * _2941.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3180 = frontier_phi_83_pred;
                            _3179 = frontier_phi_83_pred_1;
                            _3178 = frontier_phi_83_pred_2;
                            _3177 = frontier_phi_83_pred_3;
                            _3176 = frontier_phi_83_pred_4;
                            _3181 = frontier_phi_83_pred_5;
                            _2883 = _3179 + _2896;
                            _2884 = _3180 + _2897;
                            _2885 = _3181 + _2898;
                            _2880 = _3176 + _2893;
                            _2881 = _3177 + _2894;
                            _2882 = _3178 + _2895;
                            if (_2900 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2885;
                                _2899 = _2900;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2885;
                        frontier_phi_77_pred_1 = _2884;
                        frontier_phi_77_pred_2 = _2883;
                        frontier_phi_77_pred_3 = _2882;
                        frontier_phi_77_pred_4 = _2881;
                        frontier_phi_77_pred_5 = _2880;
                    }
                    _2522 = frontier_phi_77_pred;
                    _2520 = frontier_phi_77_pred_1;
                    _2518 = frontier_phi_77_pred_2;
                    _2516 = frontier_phi_77_pred_3;
                    _2514 = frontier_phi_77_pred_4;
                    _2512 = frontier_phi_77_pred_5;
                    uint _2678 = _2677 + 1u;
                    if (_2678 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2671 = _2512;
                        _2672 = _2514;
                        _2673 = _2516;
                        _2674 = _2518;
                        _2675 = _2520;
                        _2676 = _2522;
                        _2677 = _2678;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2516;
                frontier_phi_58_59_ladder_1 = _2522;
                frontier_phi_58_59_ladder_2 = _2520;
                frontier_phi_58_59_ladder_3 = _2518;
                frontier_phi_58_59_ladder_4 = _2514;
                frontier_phi_58_59_ladder_5 = _2512;
            }
            else
            {
                frontier_phi_58_59_ladder = _2385;
                frontier_phi_58_59_ladder_1 = _2391;
                frontier_phi_58_59_ladder_2 = _2389;
                frontier_phi_58_59_ladder_3 = _2387;
                frontier_phi_58_59_ladder_4 = _2383;
                frontier_phi_58_59_ladder_5 = _2381;
            }
            _2511 = frontier_phi_58_59_ladder_5;
            _2513 = frontier_phi_58_59_ladder_4;
            _2515 = frontier_phi_58_59_ladder;
            _2517 = frontier_phi_58_59_ladder_3;
            _2519 = frontier_phi_58_59_ladder_2;
            _2521 = frontier_phi_58_59_ladder_1;
        }
        float _2526 = isnan(1.0) ? _485 : (isnan(_485) ? 1.0 : min(_485, 1.0));
        _2258 = (_2526 * _2517) + _1694;
        _2260 = (_2526 * _2519) + _1696;
        _2262 = (_2526 * _2521) + _1698;
        _2264 = ((_2511 * _470) * _2526) + _2039;
        _2266 = ((_2513 * _472) * _2526) + _2041;
        _2268 = ((_2515 * _473) * _2526) + _2043;
    }
    else
    {
        _2258 = _1694;
        _2260 = _1696;
        _2262 = _1698;
        _2264 = _2039;
        _2266 = _2041;
        _2268 = _2043;
    }
    uint _2274 = _446 + uint(cbMatDynParam._m0[0u].w);
    float _2282 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _284.x) * cbInstanceData._m0[_2274].x;
    float _2285 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _284.y) * cbInstanceData._m0[_2274].y;
    float _2288 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _284.z) * cbInstanceData._m0[_2274].z;
    float _4232 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _4243 = isnan(0.0) ? _461 : (isnan(_461) ? 0.0 : max(_461, 0.0));
    float _4254 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _2305 = (((isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0))) * (_2258 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _485))) + ((_2264 + ((isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + _2282;
    float _2307 = (_2285 + ((_2266 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0))) * (_2260 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _485)));
    float _2309 = (_2288 + ((_2268 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1327)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0))) * (_2262 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _485)));
    float _2310 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2311 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2318 = cbMtdParam._m0[2u].x * _2282;
    float _2319 = cbMtdParam._m0[2u].y * _2285;
    float _2320 = cbMtdParam._m0[2u].z * _2288;
    float _4280 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2322 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    uint _2323 = _444 + 6u;
    float _2331 = _404 / cbSceneParam._m0[86u].x;
    float _2332 = _405 / cbSceneParam._m0[86u].y;
    vec4 _2346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, (log2((isnan(cbSceneParam._m0[77u].w) ? _325 : (isnan(_325) ? cbSceneParam._m0[77u].w : min(_325, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2348 = _2346.x;
    float _2349 = _2346.y;
    float _2350 = _2346.z;
    float _2351 = _2346.w;
    float _2444;
    float _2446;
    float _2448;
    float _2450;
    if (_325 > cbSceneParam._m0[78u].w)
    {
        float _2406 = isnan(_325) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _325 : min(cbSceneParam._m0[80u].w, _325));
        float _2407 = _2406 / _325;
        float _2418 = _2407 * _376;
        float _2419 = _377 * _2407;
        float _2420 = (-0.0) - _2419;
        float _2422 = _2407 * _378;
        float _2424 = (cbSceneParam._m0[77u].w * _2420) / _2406;
        float _2425 = _2424 + cbSceneParam._m0[79u].w;
        float _2426 = cbSceneParam._m0[79u].w - _2419;
        float _2432 = sqrt(((_2418 * _2418) + (_2419 * _2419)) + (_2422 * _2422));
        float _2435 = (1.0 - (cbSceneParam._m0[77u].w / _2406)) * _2432;
        float _2440 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2442 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2628;
        if (abs((_2420 - _2424) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2628 = ((((_2425 > 0.0) ? exp2(_2440 * _2425) : (2.0 - exp2(_2442 * _2425))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2435;
        }
        else
        {
            float _2572 = 1.0 / cbSceneParam._m0[80u].x;
            float _2573 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : max(_2425, _2426));
            float _2574 = isnan(_2426) ? _2425 : (isnan(_2425) ? _2426 : min(_2425, _2426));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            _2628 = ((abs(_2432 / _2420) * cbSceneParam._m0[80u].y) * ((((_2583 - _2584) * 2.0) - ((exp2(_2440 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)))) - exp2(_2440 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))))) * _2572)) - ((exp2(_2442 * _2583) - exp2(_2442 * _2584)) * _2572))) + (_2435 * cbSceneParam._m0[80u].z);
        }
        vec4 _2630 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, 1.0), 0.0);
        float _2639 = exp2((_2628 * (-1.44269502162933349609375)) * (1.0 - _2630.w));
        float _2640 = log2(_2639);
        float _2656 = log2(_2351);
        _2444 = (exp2(_2656 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].x)) * _2630.x) / cbSceneParam._m0[78u].x)) + _2348;
        _2446 = (exp2(_2656 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].y)) * _2630.y) / cbSceneParam._m0[78u].y)) + _2349;
        _2448 = (exp2(_2656 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2640 * cbSceneParam._m0[78u].z)) * _2630.z) / cbSceneParam._m0[78u].z)) + _2350;
        _2450 = _2639 * _2351;
    }
    else
    {
        _2444 = _2348;
        _2446 = _2349;
        _2448 = _2350;
        _2450 = _2351;
    }
    bool _2666;
    vec4 _2460;
    vec4 _2482;
    float _2484;
    float _2488;
    float _2489;
    float _2490;
    float _2493;
    float _2496;
    float _2499;
    float _2500;
    bool _2510;
    for (;;)
    {
        _2460 = cbMatDynParam._m0[0u];
        float _2462 = roundEven(_2460.y);
        bool _2463 = _2462 == 3.0;
        float _2464 = log2(_2450);
        float _2468 = exp2(_2464 * cbSceneParam._m0[78u].x);
        float _2469 = exp2(_2464 * cbSceneParam._m0[78u].y);
        float _2470 = exp2(_2464 * cbSceneParam._m0[78u].z);
        float _2471 = _2468 * _2310;
        float _2472 = _2469 * _2311;
        float _2473 = _2470 * _2312;
        float _2480 = _392 + (-0.5);
        _2482 = cbMtdParam._m0[1u];
        _2484 = _2482.y * _2480;
        float _2487 = (_2462 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2488 = _2487 * (_2463 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2444)));
        _2489 = _2487 * (_2463 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2446)));
        _2490 = _2487 * (_2463 ? _2473 : (_2473 + (cbSceneParam._m0[72u].w * _2448)));
        _2493 = ((_2318 * _2322) * _2468) * _2487;
        _2496 = ((_2319 * _2322) * _2469) * _2487;
        _2499 = ((_2320 * _2322) * _2470) * _2487;
        _2500 = _2480 * 0.999000012874603271484375;
        _2510 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2510)
        {
            if ((cbInstanceData._m0[_444 + 7u].x + _2500) < 0.5)
            {
                _2666 = true;
                break;
            }
        }
        uint _2607 = _446 + uint(_2460.w);
        if ((cbInstanceData._m0[_2607].w < 1.0) && ((cbInstanceData._m0[_2607].w + _2500) < 0.5))
        {
            _2666 = true;
            break;
        }
        if ((_2484 + 1.0) < _2482.x)
        {
            _2666 = true;
            break;
        }
        _2666 = false;
        break;
    }
    float _2871;
    if (_2666)
    {
        discard_state = true;
        _2871 = 0.0;
    }
    else
    {
        _2871 = cbInstanceData._m0[_2323].w;
    }
    SV_Target.x = _2488;
    SV_Target.y = _2489;
    SV_Target.z = _2490;
    SV_Target.w = _2871;
    SV_Target_1.x = _2493;
    SV_Target_1.y = _2496;
    SV_Target_1.z = _2499;
    SV_Target_1.w = cbInstanceData._m0[_2323].w;
    discard_exit();
}


