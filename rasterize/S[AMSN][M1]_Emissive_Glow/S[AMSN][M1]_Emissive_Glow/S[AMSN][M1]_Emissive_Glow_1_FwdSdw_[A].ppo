#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _893;
float _3610;
float _3611;
float _3612;
float _3613;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _228 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _234 = _228.x * cbMtdParam._m0[9u].x;
    float _235 = _228.y * cbMtdParam._m0[9u].y;
    float _236 = _228.z * cbMtdParam._m0[9u].z;
    vec4 _252 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _252.z;
    float _260 = (_252.x * 2.0) + (-1.0);
    float _262 = (_252.y * 2.0) + (-1.0);
    float _263 = dot(vec2(_260, _262), vec2(_260, _262));
    float _3622 = isnan(0.0) ? _263 : (isnan(_263) ? 0.0 : max(_263, 0.0));
    float _269 = sqrt(1.0 - (isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))));
    vec4 _288 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _295 = fma(_269, _198 * NORMAL.x, fma(_262, _205 * TANGENT.x, (_191 * _184) * _260));
    float _298 = fma(_269, _198 * NORMAL.y, fma(_262, _205 * TANGENT.y, (_191 * _185) * _260));
    float _301 = fma(_269, _198 * NORMAL.z, fma(_262, _205 * TANGENT.z, (_191 * _186) * _260));
    float _305 = inversesqrt(dot(vec3(_295, _298, _301), vec3(_295, _298, _301)));
    float _306 = _305 * _295;
    float _307 = _305 * _298;
    float _308 = _305 * _301;
    float _3633 = isnan(0.0) ? _256 : (isnan(_256) ? 0.0 : max(_256, 0.0));
    float _309 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
    float _3644 = isnan(0.0) ? _234 : (isnan(_234) ? 0.0 : max(_234, 0.0));
    float _3655 = isnan(0.0) ? _235 : (isnan(_235) ? 0.0 : max(_235, 0.0));
    float _3666 = isnan(0.0) ? _236 : (isnan(_236) ? 0.0 : max(_236, 0.0));
    float _3677 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _313 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
    float _329 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _370 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _380 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _370);
    float _381 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _370);
    float _382 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _370);
    float _386 = inversesqrt(dot(vec3(_380, _381, _382), vec3(_380, _381, _382)));
    float _387 = _380 * _386;
    float _388 = _381 * _386;
    float _389 = _382 * _386;
    vec4 _394 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _396 = _394.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _572 = sqrt(((_380 * _380) + (_381 * _381)) + (_382 * _382));
        float _578 = (cbMatDynParam._m0[5u].x * _572) + cbMatDynParam._m0[5u].y;
        float _3688 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
        float _579 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _583 = (cbMatDynParam._m0[5u].z * _572) + cbMatDynParam._m0[5u].w;
        float _3699 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) - _579)) + _579) < ((_396 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _408 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _409 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _429 = fma(_308, cbSceneParam._m0[5u].z, fma(_307, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _306));
    float _432 = fma(_308, cbSceneParam._m0[6u].z, fma(_307, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _306));
    float _435 = fma(_308, cbSceneParam._m0[7u].z, fma(_307, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _306));
    uint _448 = uint(roundEven(NORMAL.w)) * 13u;
    uint _450 = _448 + 9u;
    uint _451 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _457 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0)))) * cbInstanceData._m0[_451].x;
    float _458 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_451].y;
    float _459 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_451].z;
    float _3710 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _3732 = isnan(0.0) ? _459 : (isnan(_459) ? 0.0 : max(_459, 0.0));
    float _462 = isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0));
    float _463 = 1.0 - _313;
    float _464 = _460 * _463;
    float _465 = _461 * _463;
    float _466 = _462 * _463;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _313;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _313;
    float _473 = (_462 + (-0.039999999105930328369140625)) * _313;
    float _474 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    float _477 = _473 + 0.039999999105930328369140625;
    vec4 _486 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _408, cbSceneParam._m0[86u].y * _409));
    float _489 = _486.x * TEXCOORD.z;
    float _490 = dot(vec3(_306, _307, _308), vec3(_387, _388, _389));
    float _493 = _490 * 2.0;
    float _497 = (_493 * _306) - _387;
    float _498 = (_493 * _307) - _388;
    float _499 = (_493 * _308) - _389;
    float _503 = abs(dot(vec3(_387, _388, _389), vec3(_306, _307, _308)));
    float _3743 = isnan(0.0) ? _503 : (isnan(_503) ? 0.0 : max(_503, 0.0));
    float _505 = sqrt(_309);
    float _518 = exp2((_505 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_505 * 3.0));
    float _524 = (1.0 - _518) * ((_505 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _525 = _518 * _505;
    float _553 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _557 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _561 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _892;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _617 = fma(_561, cbModelParam._m0[26u].z, fma(_557, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _553));
        float _621 = fma(_561, cbModelParam._m0[27u].z, fma(_557, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _553));
        float _625 = fma(_561, cbModelParam._m0[28u].z, fma(_557, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _553));
        float _650 = _553 + _306;
        float _651 = _557 + _307;
        float _652 = _561 + _308;
        float _662 = fma(_652, cbModelParam._m0[26u].z, fma(_651, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _650)) - _617;
        float _663 = fma(_652, cbModelParam._m0[27u].z, fma(_651, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _650)) - _621;
        float _664 = fma(_652, cbModelParam._m0[28u].z, fma(_651, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _650)) - _625;
        float _668 = inversesqrt(dot(vec3(_662, _663, _664), vec3(_662, _663, _664)));
        float _681 = ((_668 * _662) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_617 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_668 * _663) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_621 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _683 = ((_668 * _664) / cbModelParam._m0[34u].z) + ((((((_625 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        vec4 _707 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_681, _682, _683), 0.0);
        float _720 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_686.x + (-0.5));
        float _722 = _720 * (_686.y + (-0.5));
        float _723 = _720 * (_686.z + (-0.5));
        float _730 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_693.x + (-0.5));
        float _732 = _730 * (_693.y + (-0.5));
        float _733 = _730 * (_693.z + (-0.5));
        float _740 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_700.x + (-0.5));
        float _742 = _740 * (_700.y + (-0.5));
        float _743 = _740 * (_700.z + (-0.5));
        float _750 = exp2((_707.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_707.x + (-0.5));
        float _752 = _750 * (_707.y + (-0.5));
        float _753 = _750 * (_707.z + (-0.5));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _757 = _721 * 0.5;
        float _758 = _731 * 0.5;
        float _759 = _741 * 0.5;
        float _760 = dot(vec3(_757, _758, _759), vec3(_757, _758, _759));
        float _765 = (_760 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_760);
        float _774 = (dot(vec3(_306, _307, _308), vec3(_765 * _757, _765 * _758, _765 * _759)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _784 = sqrt(((_758 * _758) + (_757 * _757)) + (_759 * _759)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3791 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_786 + 1.0))) + _791) * _754;
        float _801 = _722 * 0.5;
        float _802 = _732 * 0.5;
        float _803 = _742 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_306, _307, _308), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3802 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3813 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3824 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_828 + 1.0))) + _833) * _755;
        float _843 = _723 * 0.5;
        float _844 = _733 * 0.5;
        float _845 = _743 * 0.5;
        float _846 = dot(vec3(_843, _844, _845), vec3(_843, _844, _845));
        float _851 = (_846 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_846);
        float _859 = (dot(vec3(_306, _307, _308), vec3(_851 * _843, _851 * _844, _851 * _845)) + 1.0) * 0.5;
        float _3835 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _868 = sqrt(((_844 * _844) + (_843 * _843)) + (_845 * _845)) / (_756 + 9.9999997473787516355514526367188e-06);
        float _3846 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3857 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_870 + 1.0))) + _875) * _756;
        _892 = _723;
        _894 = _722;
        _895 = _721;
        _896 = _733;
        _897 = _732;
        _898 = _731;
        _899 = _743;
        _900 = _742;
        _901 = _741;
        _902 = _756;
        _903 = _755;
        _904 = _754;
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
        _907 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
    }
    else
    {
        _892 = _893;
        _894 = _893;
        _895 = _893;
        _896 = _893;
        _897 = _893;
        _898 = _893;
        _899 = _893;
        _900 = _893;
        _901 = _893;
        _902 = _893;
        _903 = _893;
        _904 = _893;
        _905 = 0.0;
        _906 = 0.0;
        _907 = 0.0;
    }
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _936 = fma(_561, cbModelParam._m0[30u].z, fma(_557, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _553));
        float _940 = fma(_561, cbModelParam._m0[31u].z, fma(_557, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _553));
        float _944 = fma(_561, cbModelParam._m0[32u].z, fma(_557, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _553));
        float _967 = _553 + _306;
        float _968 = _557 + _307;
        float _969 = _561 + _308;
        float _979 = fma(_969, cbModelParam._m0[30u].z, fma(_968, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _967)) - _936;
        float _980 = fma(_969, cbModelParam._m0[31u].z, fma(_968, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _967)) - _940;
        float _981 = fma(_969, cbModelParam._m0[32u].z, fma(_968, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _967)) - _944;
        float _985 = inversesqrt(dot(vec3(_979, _980, _981), vec3(_979, _980, _981)));
        float _998 = ((_985 * _979) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_936 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_985 * _980) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_940 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_985 * _981) / cbModelParam._m0[35u].z) + ((((((_944 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_998, _999, _1000), 0.0);
        float _1035 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_1002.x + (-0.5));
        float _1037 = _1035 * (_1002.y + (-0.5));
        float _1038 = _1035 * (_1002.z + (-0.5));
        float _1045 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1009.x + (-0.5));
        float _1047 = _1045 * (_1009.y + (-0.5));
        float _1048 = _1045 * (_1009.z + (-0.5));
        float _1055 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1016.x + (-0.5));
        float _1057 = _1055 * (_1016.y + (-0.5));
        float _1058 = _1055 * (_1016.z + (-0.5));
        float _1065 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1023.x + (-0.5));
        float _1067 = _1065 * (_1023.y + (-0.5));
        float _1068 = _1065 * (_1023.z + (-0.5));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1072 = _1036 * 0.5;
        float _1073 = _1046 * 0.5;
        float _1074 = _1056 * 0.5;
        float _1075 = dot(vec3(_1072, _1073, _1074), vec3(_1072, _1073, _1074));
        float _1080 = (_1075 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1075);
        float _1088 = (dot(vec3(_306, _307, _308), vec3(_1080 * _1072, _1080 * _1073, _1080 * _1074)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1097 = sqrt(((_1073 * _1073) + (_1072 * _1072)) + (_1074 * _1074)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1099 = _1098 * 2.0;
        float _1103 = (1.0 - _1098) / (_1098 + 1.0);
        float _3920 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1104 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1113 = ((((1.0 - _1104) * (_1099 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1099 + 1.0))) + _1104) * _1069;
        float _1114 = _1037 * 0.5;
        float _1115 = _1047 * 0.5;
        float _1116 = _1057 * 0.5;
        float _1117 = dot(vec3(_1114, _1115, _1116), vec3(_1114, _1115, _1116));
        float _1122 = (_1117 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1117);
        float _1130 = (dot(vec3(_306, _307, _308), vec3(_1122 * _1114, _1122 * _1115, _1122 * _1116)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1139 = sqrt(((_1115 * _1115) + (_1114 * _1114)) + (_1116 * _1116)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1141 = _1140 * 2.0;
        float _1145 = (1.0 - _1140) / (_1140 + 1.0);
        float _3953 = isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0));
        float _1146 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1155 = ((((1.0 - _1146) * (_1141 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1141 + 1.0))) + _1146) * _1070;
        float _1156 = _1038 * 0.5;
        float _1157 = _1048 * 0.5;
        float _1158 = _1058 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_306, _307, _308), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1071 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3986 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1183 + 1.0))) + _1188) * _1071;
        _1205 = _1038;
        _1206 = _1037;
        _1207 = _1036;
        _1208 = _1048;
        _1209 = _1047;
        _1210 = _1046;
        _1211 = _1058;
        _1212 = _1057;
        _1213 = _1056;
        _1214 = _1071;
        _1215 = _1070;
        _1216 = _1069;
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)));
        _1219 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
    }
    else
    {
        _1205 = _893;
        _1206 = _893;
        _1207 = _893;
        _1208 = _893;
        _1209 = _893;
        _1210 = _893;
        _1211 = _893;
        _1212 = _893;
        _1213 = _893;
        _1214 = _893;
        _1215 = _893;
        _1216 = _893;
        _1217 = 0.0;
        _1218 = 0.0;
        _1219 = 0.0;
    }
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1231 = (cbModelParam._m0[1u].x * (_1219 - _907)) + _907;
    float _1252 = fma(_1231, cbSceneParam._m0[89u].z, fma(_1230, cbSceneParam._m0[89u].y, _1229 * cbSceneParam._m0[89u].x));
    float _1255 = fma(_1231, cbSceneParam._m0[90u].z, fma(_1230, cbSceneParam._m0[90u].y, _1229 * cbSceneParam._m0[90u].x));
    float _1258 = fma(_1231, cbSceneParam._m0[91u].z, fma(_1230, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1229));
    float _1273 = _497 * 0.5;
    float _1274 = _498 * 0.5;
    float _1275 = _499 * 0.5;
    float _1276 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1207, _1210, _1213, _1216));
    float _1279 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1282 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1316;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1289 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_892, _896, _899, _902));
        float _1293 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_894, _897, _900, _903));
        float _1297 = dot(vec4(_1273, _1274, _1275, 1.0), vec4(_895, _898, _901, _904));
        float _1304 = dot(vec4(cbModelParam._m0[39u]), vec4(_1273, _1274, _1275, 1.0));
        _1316 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)), isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1316 = 1.0;
    }
    float _1327;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1318 = dot(vec4(cbModelParam._m0[40u]), vec4(_1273, _1274, _1275, 1.0));
        _1327 = dot(vec3(isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1318) ? 0.0 : (isnan(0.0) ? _1318 : max(0.0, _1318))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1327 = 1.0;
    }
    float _1331 = (_1327 * cbModelParam._m0[1u].x) + (_1316 * (1.0 - cbModelParam._m0[1u].x));
    float _1341 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _309);
    float _1342 = isnan(_1341) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1341 : min(cbModelParam._m0[25u].z, _1341));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1391 = fma(_561, cbModelParam._m0[13u].z, fma(_557, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _553)) + cbModelParam._m0[13u].w;
        float _1395 = fma(_561, cbModelParam._m0[14u].z, fma(_557, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _553)) + cbModelParam._m0[14u].w;
        float _1399 = fma(_561, cbModelParam._m0[15u].z, fma(_557, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _553)) + cbModelParam._m0[15u].w;
        float _1402 = fma(_499, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _497));
        float _1405 = fma(_499, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _497));
        float _1408 = fma(_499, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _497));
        float _1436;
        if (_1402 > 0.0)
        {
            _1436 = abs((1.0 - _1391) / _1402);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1391 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1436 = frontier_phi_17_15_ladder;
        }
        float _1611;
        if (_1405 > 0.0)
        {
            _1611 = abs((1.0 - _1395) / _1405);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1395 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1611 = frontier_phi_26_22_ladder;
        }
        float _1907;
        if (_1408 > 0.0)
        {
            _1907 = abs((1.0 - _1399) / _1408);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1408 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1399 + 1.0) / _1408);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _1907 = frontier_phi_38_33_ladder;
        }
        float _1909 = isnan(_1611) ? _1436 : (isnan(_1436) ? _1611 : min(_1436, _1611));
        float _1910 = isnan(_1907) ? _1909 : (isnan(_1909) ? _1907 : min(_1909, _1907));
        float _1914 = (_1910 * _1402) + _1391;
        float _1915 = (_1910 * _1405) + _1395;
        float _1916 = (_1910 * _1408) + _1399;
        float _1917 = _1910 * 9.9999997473787516355514526367188e-05;
        float _1919 = (-1.0) - _1917;
        float _1921 = _1917 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_1916 > _1921) || ((_1916 < _1919) || ((_1915 > _1921) || ((_1915 < _1919) || ((_1914 < _1919) || (_1914 > _1921))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2061 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1916, cbModelParam._m0[9u].z, fma(_1915, cbModelParam._m0[9u].y, _1914 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1916, cbModelParam._m0[10u].z, fma(_1915, cbModelParam._m0[10u].y, _1914 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1916, cbModelParam._m0[11u].z, fma(_1915, cbModelParam._m0[11u].y, _1914 * cbModelParam._m0[11u].x))), _1342);
            frontier_phi_16_38_ladder = _2061.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2061.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2061.x * cbModelParam._m0[1u].y;
        }
        _1424 = frontier_phi_16_38_ladder_2;
        _1426 = frontier_phi_16_38_ladder_1;
        _1428 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1412 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_497, _498, _499), _1342);
        _1424 = _1412.x * cbModelParam._m0[1u].y;
        _1426 = _1412.y * cbModelParam._m0[1u].y;
        _1428 = _1412.z * cbModelParam._m0[1u].y;
    }
    float _1432 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _309);
    float _1433 = isnan(_1432) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1432 : min(cbModelParam._m0[25u].w, _1432));
    float _1526;
    float _1528;
    float _1530;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1490 = fma(_561, cbModelParam._m0[21u].z, fma(_557, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _553)) + cbModelParam._m0[21u].w;
        float _1494 = fma(_561, cbModelParam._m0[22u].z, fma(_557, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _553)) + cbModelParam._m0[22u].w;
        float _1498 = fma(_561, cbModelParam._m0[23u].z, fma(_557, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _553)) + cbModelParam._m0[23u].w;
        float _1501 = fma(_499, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _497));
        float _1504 = fma(_499, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _497));
        float _1507 = fma(_499, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _497));
        float _1616;
        if (_1501 > 0.0)
        {
            _1616 = abs((1.0 - _1490) / _1501);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1501 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1490 + 1.0) / _1501);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1616 = frontier_phi_28_24_ladder;
        }
        float _1934;
        if (_1504 > 0.0)
        {
            _1934 = abs((1.0 - _1494) / _1504);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1504 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1494 + 1.0) / _1504);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1934 = frontier_phi_40_35_ladder;
        }
        float _2272;
        if (_1507 > 0.0)
        {
            _2272 = abs((1.0 - _1498) / _1507);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1498 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2272 = frontier_phi_50_47_ladder;
        }
        float _2274 = isnan(_1934) ? _1616 : (isnan(_1616) ? _1934 : min(_1616, _1934));
        float _2275 = isnan(_2272) ? _2274 : (isnan(_2274) ? _2272 : min(_2274, _2272));
        float _2279 = (_2275 * _1501) + _1490;
        float _2280 = (_2275 * _1504) + _1494;
        float _2281 = (_2275 * _1507) + _1498;
        float _2282 = _2275 * 9.9999997473787516355514526367188e-05;
        float _2283 = (-1.0) - _2282;
        float _2285 = _2282 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2281 > _2285) || ((_2281 < _2283) || ((_2280 > _2285) || ((_2280 < _2283) || ((_2279 < _2283) || (_2279 > _2285))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2281, cbModelParam._m0[17u].z, fma(_2280, cbModelParam._m0[17u].y, _2279 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2281, cbModelParam._m0[18u].z, fma(_2280, cbModelParam._m0[18u].y, _2279 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2281, cbModelParam._m0[19u].z, fma(_2280, cbModelParam._m0[19u].y, _2279 * cbModelParam._m0[19u].x))), _1433);
            frontier_phi_25_50_ladder = _2403.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2403.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2403.x * cbModelParam._m0[1u].z;
        }
        _1526 = frontier_phi_25_50_ladder_2;
        _1528 = frontier_phi_25_50_ladder_1;
        _1530 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1510 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_497, _498, _499), _1433);
        _1526 = _1510.x * cbModelParam._m0[1u].z;
        _1528 = _1510.y * cbModelParam._m0[1u].z;
        _1530 = _1510.z * cbModelParam._m0[1u].z;
    }
    float _1543 = (((_524 * _474) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1526 - _1424)) + _1424);
    float _1545 = (((_524 * _476) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1528 - _1426)) + _1426);
    float _1547 = (((_524 * _477) + _525) * _489) * ((cbModelParam._m0[1u].w * (_1530 - _1428)) + _1428);
    float _1550 = fma(_1547, cbSceneParam._m0[89u].z, fma(_1545, cbSceneParam._m0[89u].y, _1543 * cbSceneParam._m0[89u].x));
    float _1553 = fma(_1547, cbSceneParam._m0[90u].z, fma(_1545, cbSceneParam._m0[90u].y, _1543 * cbSceneParam._m0[90u].x));
    float _1556 = fma(_1547, cbSceneParam._m0[91u].z, fma(_1545, cbSceneParam._m0[91u].y, _1543 * cbSceneParam._m0[91u].x));
    float _1590 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1594 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1598 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1602 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1603 = _1590 / _1602;
    float _1604 = _1594 / _1602;
    float _1605 = _1598 / _1602;
    float _1752;
    float _1753;
    float _1754;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1632 = ((uint(_1605 > cbSceneParam._m0[59u].y) + uint(_1605 > cbSceneParam._m0[59u].x)) + uint(_1605 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1633 = _1632 + 43u;
        uint _1641 = _1632 + 44u;
        uint _1649 = _1632 + 45u;
        uint _1657 = _1632 + 46u;
        float _1668 = fma(_1602, cbSceneParam._m0[_1633].w, fma(_1598, cbSceneParam._m0[_1633].z, fma(_1594, cbSceneParam._m0[_1633].y, _1590 * cbSceneParam._m0[_1633].x)));
        float _1672 = fma(_1602, cbSceneParam._m0[_1641].w, fma(_1598, cbSceneParam._m0[_1641].z, fma(_1594, cbSceneParam._m0[_1641].y, _1590 * cbSceneParam._m0[_1641].x)));
        float _1680 = fma(_1602, cbSceneParam._m0[_1657].w, fma(_1598, cbSceneParam._m0[_1657].z, fma(_1594, cbSceneParam._m0[_1657].y, _1590 * cbSceneParam._m0[_1657].x)));
        float _1685 = cbSceneParam._m0[33u].z * _1680;
        float _1687 = cbSceneParam._m0[33u].w * _1680;
        float _1690 = fma(_1602, cbSceneParam._m0[_1649].w, fma(_1598, cbSceneParam._m0[_1649].z, fma(_1594, cbSceneParam._m0[_1649].y, _1590 * cbSceneParam._m0[_1649].x))) / _1680;
        float _1738 = (cbSceneParam._m0[33u].x - sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605))) * cbSceneParam._m0[33u].y;
        float _4112 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
        float _1745 = (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1685 + _1668) / _1680, (_1687 + _1672) / _1680), _1690), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1687 + _1668) / _1680, (_1672 - _1685) / _1680), _1690), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1668 - _1685) / _1680, (_1672 - _1687) / _1680), _1690), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1668 - _1687) / _1680, (_1685 + _1672) / _1680), _1690), 0.0)).x), vec4(0.25)));
        _1752 = 1.0 - (_1745 * cbSceneParam._m0[34u].x);
        _1753 = 1.0 - (_1745 * cbSceneParam._m0[34u].y);
        _1754 = 1.0 - (_1745 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1752 = 1.0;
        _1753 = 1.0;
        _1754 = 1.0;
    }
    float _1818;
    float _1820;
    float _1822;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1806 = fma(_1602, cbSceneParam._m0[63u].w, fma(_1598, cbSceneParam._m0[63u].z, fma(_1594, cbSceneParam._m0[63u].y, _1590 * cbSceneParam._m0[63u].x)));
        float _1807 = fma(_1602, cbSceneParam._m0[60u].w, fma(_1598, cbSceneParam._m0[60u].z, fma(_1594, cbSceneParam._m0[60u].y, _1590 * cbSceneParam._m0[60u].x))) / _1806;
        float _1808 = fma(_1602, cbSceneParam._m0[61u].w, fma(_1598, cbSceneParam._m0[61u].z, fma(_1594, cbSceneParam._m0[61u].y, _1590 * cbSceneParam._m0[61u].x))) / _1806;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1807 >= cbSceneParam._m0[64u].x) && (_1808 >= cbSceneParam._m0[64u].y)) && (_1807 <= cbSceneParam._m0[64u].z)) && (_1808 <= cbSceneParam._m0[64u].w))
        {
            float _1947 = fma(_1602, cbSceneParam._m0[62u].w, fma(_1598, cbSceneParam._m0[62u].z, fma(_1594, cbSceneParam._m0[62u].y, _1590 * cbSceneParam._m0[62u].x))) / _1806;
            float _1951 = isnan(cbSceneParam._m0[41u].w) ? _1947 : (isnan(_1947) ? cbSceneParam._m0[41u].w : max(_1947, cbSceneParam._m0[41u].w));
            float _1994 = (cbSceneParam._m0[33u].x - sqrt(((_1604 * _1604) + (_1603 * _1603)) + (_1605 * _1605))) * cbSceneParam._m0[33u].y;
            float _4128 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
            float _2001 = (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1807, cbSceneParam._m0[33u].w + _1808), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1807, _1808 - cbSceneParam._m0[33u].z), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1807 - cbSceneParam._m0[33u].z, _1808 - cbSceneParam._m0[33u].w), _1951), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1807 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1808), _1951), 0.0)).x), vec4(0.25)));
            float _2005 = 1.0 - (_2001 * cbSceneParam._m0[34u].x);
            float _2006 = 1.0 - (_2001 * cbSceneParam._m0[34u].y);
            float _2007 = 1.0 - (_2001 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2007) ? _1754 : (isnan(_1754) ? _2007 : min(_1754, _2007));
            frontier_phi_37_36_ladder_1 = isnan(_2006) ? _1753 : (isnan(_1753) ? _2006 : min(_1753, _2006));
            frontier_phi_37_36_ladder_2 = isnan(_2005) ? _1752 : (isnan(_1752) ? _2005 : min(_1752, _2005));
        }
        else
        {
            frontier_phi_37_36_ladder = _1754;
            frontier_phi_37_36_ladder_1 = _1753;
            frontier_phi_37_36_ladder_2 = _1752;
        }
        _1818 = frontier_phi_37_36_ladder_2;
        _1820 = frontier_phi_37_36_ladder_1;
        _1822 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1818 = _1752;
        _1820 = _1753;
        _1822 = _1754;
    }
    uvec4 _1827 = floatBitsToUint(cbInstanceData._m0[_448 + 5u]);
    uint _1829 = _1827.x * 14u;
    uint _1830 = _1829 + 13u;
    float _1837 = _489 + (-1.0);
    float _1842 = (cbLight._m0[_1830].x * _1837) + 1.0;
    float _1843 = (cbLight._m0[_1830].y * _1837) + 1.0;
    float _1844 = (cbLight._m0[_1830].z * _1837) + 1.0;
    float _1845 = (cbLight._m0[_1830].w * _1837) + 1.0;
    uint _1846 = _1829 + 5u;
    float _1852 = isnan(1.0) ? _1843 : (isnan(_1843) ? 1.0 : min(_1843, 1.0));
    uint _1856 = _1829 + 4u;
    float _1866 = isnan(1.0) ? _1842 : (isnan(_1842) ? 1.0 : min(_1842, 1.0));
    uint _1870 = _1829 | 1u;
    float _1881 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_306, _307, _308));
    float _1884 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_306, _307, _308));
    float _4164 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _4175 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1889 = (isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * 0.3183098733425140380859375;
    float _1891 = (isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * 0.3183098733425140380859375;
    float _1898 = ((cbLight._m0[_1846].x * _1852) * _1891) + (((cbLight._m0[_1856].x * _1818) * _1866) * _1889);
    float _1899 = ((_1852 * cbLight._m0[_1846].y) * _1891) + (((cbLight._m0[_1856].y * _1820) * _1866) * _1889);
    float _1900 = ((_1852 * cbLight._m0[_1846].z) * _1891) + (((cbLight._m0[_1856].z * _1822) * _1866) * _1889);
    uvec4 _1904 = floatBitsToUint(cbLight._m0[_1829 + 12u]);
    bool _1906 = _1904.x == 0u;
    float _2008;
    float _2010;
    float _2012;
    if (_1906)
    {
        _2008 = _1898;
        _2010 = _1899;
        _2012 = _1900;
    }
    else
    {
        uint _2016 = _1829 + 6u;
        float _2032 = (dot(vec3(cbLight._m0[_1829 + 2u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _2033 = _2032 * _2032;
        float _4186 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        float _2034 = isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0));
        float _2035 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2008 = (((cbLight._m0[_2016].x * 0.3183098733425140380859375) * _2034) * _2035) + _1898;
        _2010 = (((cbLight._m0[_2016].y * 0.3183098733425140380859375) * _2034) * _2035) + _1899;
        _2012 = (((cbLight._m0[_2016].z * 0.3183098733425140380859375) * _2034) * _2035) + _1900;
    }
    bool _2015 = _1904.y == 0u;
    float _2070;
    float _2072;
    float _2074;
    if (_2015)
    {
        _2070 = _2008;
        _2072 = _2010;
        _2074 = _2012;
    }
    else
    {
        uint _2243 = _1829 + 7u;
        float _2259 = (dot(vec3(cbLight._m0[_1829 + 3u].xyz), vec3(_306, _307, _308)) * 0.5) + 0.5;
        float _2260 = _2259 * _2259;
        float _4202 = isnan(0.0) ? _2260 : (isnan(_2260) ? 0.0 : max(_2260, 0.0));
        float _2261 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
        float _2262 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2070 = (((cbLight._m0[_2243].x * 0.3183098733425140380859375) * _2261) * _2262) + _2008;
        _2072 = (((cbLight._m0[_2243].y * 0.3183098733425140380859375) * _2261) * _2262) + _2010;
        _2074 = (((cbLight._m0[_2243].z * 0.3183098733425140380859375) * _2261) * _2262) + _2012;
    }
    uint _2077 = _1829 + 8u;
    float _2090 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1829].w)) * _309) * 0.949999988079071044921875);
    float _2091 = _2090 * _2090;
    float _2092 = cbLight._m0[_1829].x + _387;
    float _2093 = cbLight._m0[_1829].y + _388;
    float _2094 = cbLight._m0[_1829].z + _389;
    float _2098 = inversesqrt(dot(vec3(_2092, _2093, _2094), vec3(_2092, _2093, _2094)));
    float _2099 = _2098 * _2092;
    float _2100 = _2098 * _2093;
    float _2101 = _2098 * _2094;
    float _2102 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1829].xyz));
    float _4218 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
    float _4229 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _2106 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
    float _2107 = dot(vec3(_306, _307, _308), vec3(_2099, _2100, _2101));
    float _4240 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2110 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
    float _2111 = dot(vec3(cbLight._m0[_1829].xyz), vec3(_2099, _2100, _2101));
    float _4251 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
    float _2115 = _2091 * _2091;
    float _2119 = ((_2110 * _2110) * (_2115 + (-1.0))) + 1.0;
    float _2127 = exp2(log2(1.0 - (isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0)))) * 5.0);
    float _2128 = 0.959999978542327880859375 - _471;
    float _2130 = 0.959999978542327880859375 - _472;
    float _2131 = 0.959999978542327880859375 - _473;
    float _2138 = 1.0 - _2091;
    float _2149 = (0.5 / (((_2106 * ((_2105 * _2138) + _2091)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2138) + _2091) * _2105))) * _2105;
    float _4262 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2151 = (isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0))) * (_2115 / ((_2119 * _2119) * 3.141590118408203125));
    uint _2165 = _1829 + 9u;
    float _2176 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1870].w)) * _309) * 0.949999988079071044921875);
    float _2177 = _2176 * _2176;
    float _2178 = cbLight._m0[_1870].x + _387;
    float _2179 = cbLight._m0[_1870].y + _388;
    float _2180 = cbLight._m0[_1870].z + _389;
    float _2184 = inversesqrt(dot(vec3(_2178, _2179, _2180), vec3(_2178, _2179, _2180)));
    float _2185 = _2184 * _2178;
    float _2186 = _2184 * _2179;
    float _2187 = _2184 * _2180;
    float _2188 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_1870].xyz));
    float _4273 = isnan(0.0) ? _2188 : (isnan(_2188) ? 0.0 : max(_2188, 0.0));
    float _2191 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2192 = dot(vec3(_306, _307, _308), vec3(_2185, _2186, _2187));
    float _4284 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2195 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _2196 = dot(vec3(cbLight._m0[_1870].xyz), vec3(_2185, _2186, _2187));
    float _4295 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2200 = _2177 * _2177;
    float _2204 = ((_2195 * _2195) * (_2200 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0)))) * 5.0);
    float _2218 = 1.0 - _2177;
    float _2228 = (0.5 / (((_2106 * ((_2191 * _2218) + _2177)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2218) + _2177) * _2191))) * _2191;
    float _4306 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2230 = (isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0))) * (_2200 / ((_2204 * _2204) * 3.141590118408203125));
    float _2240 = (((((_2211 * _2128) + _474) * cbLight._m0[_2165].x) * _2230) * _1852) + ((((cbLight._m0[_2077].x * _1818) * ((_2127 * _2128) + _474)) * _2151) * _1866);
    float _2241 = (((((_2211 * _2130) + _476) * cbLight._m0[_2165].y) * _2230) * _1852) + ((((cbLight._m0[_2077].y * _1820) * ((_2127 * _2130) + _476)) * _2151) * _1866);
    float _2242 = (((((_2211 * _2131) + _477) * cbLight._m0[_2165].z) * _2230) * _1852) + ((((cbLight._m0[_2077].z * _1822) * ((_2127 * _2131) + _477)) * _2151) * _1866);
    float _2298;
    float _2300;
    float _2302;
    if (_1906)
    {
        _2298 = _2240;
        _2300 = _2241;
        _2302 = _2242;
    }
    else
    {
        uint _2304 = _1829 + 2u;
        uint _2308 = _1829 + 10u;
        float _2322 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2304].w)) * _309) * 0.949999988079071044921875);
        float _2323 = _2322 * _2322;
        float _2324 = cbLight._m0[_2304].x + _387;
        float _2325 = cbLight._m0[_2304].y + _388;
        float _2326 = cbLight._m0[_2304].z + _389;
        float _2330 = inversesqrt(dot(vec3(_2324, _2325, _2326), vec3(_2324, _2325, _2326)));
        float _2331 = _2330 * _2324;
        float _2332 = _2330 * _2325;
        float _2333 = _2330 * _2326;
        float _2334 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2304].xyz));
        float _4317 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
        float _2337 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
        float _2338 = dot(vec3(_306, _307, _308), vec3(_2331, _2332, _2333));
        float _4328 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2341 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
        float _2342 = dot(vec3(cbLight._m0[_2304].xyz), vec3(_2331, _2332, _2333));
        float _4339 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
        float _2346 = _2323 * _2323;
        float _2350 = ((_2341 * _2341) * (_2346 + (-1.0))) + 1.0;
        float _2357 = exp2(log2(1.0 - (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0)))) * 5.0);
        float _2364 = 1.0 - _2323;
        float _2374 = (0.5 / (((_2106 * ((_2337 * _2364) + _2323)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2364) + _2323) * _2337))) * _2337;
        float _4350 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2376 = (isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0))) * (_2346 / ((_2350 * _2350) * 3.141590118408203125));
        float _2377 = isnan(1.0) ? _1844 : (isnan(_1844) ? 1.0 : min(_1844, 1.0));
        _2298 = (((((_2357 * _2128) + _474) * cbLight._m0[_2308].x) * _2376) * _2377) + _2240;
        _2300 = (((((_2357 * _2130) + _476) * cbLight._m0[_2308].y) * _2376) * _2377) + _2241;
        _2302 = (((((_2357 * _2131) + _477) * cbLight._m0[_2308].z) * _2376) * _2377) + _2242;
    }
    float _2408;
    float _2410;
    float _2412;
    if (_2015)
    {
        _2408 = _2298;
        _2410 = _2300;
        _2412 = _2302;
    }
    else
    {
        uint _2419 = _1829 + 3u;
        uint _2423 = _1829 + 11u;
        float _2437 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2419].w)) * _309) * 0.949999988079071044921875);
        float _2438 = _2437 * _2437;
        float _2439 = cbLight._m0[_2419].x + _387;
        float _2440 = cbLight._m0[_2419].y + _388;
        float _2441 = cbLight._m0[_2419].z + _389;
        float _2445 = inversesqrt(dot(vec3(_2439, _2440, _2441), vec3(_2439, _2440, _2441)));
        float _2446 = _2445 * _2439;
        float _2447 = _2445 * _2440;
        float _2448 = _2445 * _2441;
        float _2449 = dot(vec3(_306, _307, _308), vec3(cbLight._m0[_2419].xyz));
        float _4366 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        float _2452 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
        float _2453 = dot(vec3(_306, _307, _308), vec3(_2446, _2447, _2448));
        float _4377 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
        float _2456 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2457 = dot(vec3(cbLight._m0[_2419].xyz), vec3(_2446, _2447, _2448));
        float _4388 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2461 = _2438 * _2438;
        float _2465 = ((_2456 * _2456) * (_2461 + (-1.0))) + 1.0;
        float _2472 = exp2(log2(1.0 - (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) * 5.0);
        float _2479 = 1.0 - _2438;
        float _2489 = (0.5 / (((_2106 * ((_2452 * _2479) + _2438)) + 9.9999999392252902907785028219223e-09) + (((_2106 * _2479) + _2438) * _2452))) * _2452;
        float _4399 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2491 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2461 / ((_2465 * _2465) * 3.141590118408203125));
        float _2492 = isnan(1.0) ? _1845 : (isnan(_1845) ? 1.0 : min(_1845, 1.0));
        _2408 = (((((_2472 * _2128) + _474) * cbLight._m0[_2423].x) * _2491) * _2492) + _2298;
        _2410 = (((((_2472 * _2130) + _476) * cbLight._m0[_2423].y) * _2491) * _2492) + _2300;
        _2412 = (((((_2472 * _2131) + _477) * cbLight._m0[_2423].z) * _2491) * _2492) + _2302;
    }
    float _2558;
    float _2560;
    float _2562;
    float _2564;
    float _2566;
    float _2568;
    if (_1827.y == 0u)
    {
        uvec4 _2513 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2514 = _2513.x;
        uint _2525 = uint((float(_2513.y) * floor(float(uint(cbSceneParam._m0[85u].y * _409) / _2514))) + floor(float(uint(cbSceneParam._m0[85u].x * _408) / _2514)));
        float _2535 = (log2(_1605 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2536 = isnan(0.0) ? _2535 : (isnan(_2535) ? 0.0 : max(_2535, 0.0));
        uint _2539 = uint(isnan(14.0) ? _2536 : (isnan(_2536) ? 14.0 : min(_2536, 14.0)));
        uvec4 _2544 = texelFetch(g_lightClusterGridBuffer, int(((_2539 << 2u) + (_2525 << 6u)) >> 2u));
        uint _2545 = _2544.x;
        uint _2546 = _2513.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2546 >> 4u) & 15u)) + 4294967295u) & _2545) == 0u) || ((_2546 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2822 = 0.0;
            float _2823 = 0.0;
            float _2824 = 0.0;
            float _2825 = 0.0;
            float _2826 = 0.0;
            float _2827 = 0.0;
            uint _2828 = 0u;
            uint _2837;
            bool _2838;
            for (;;)
            {
                _2837 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                _2838 = _2837 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2838)
                {
                    frontier_phi_71_pred = _2827;
                    frontier_phi_71_pred_1 = _2826;
                    frontier_phi_71_pred_2 = _2825;
                    frontier_phi_71_pred_3 = _2824;
                    frontier_phi_71_pred_4 = _2823;
                    frontier_phi_71_pred_5 = _2822;
                }
                else
                {
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    uint _2973;
                    _2967 = _2822;
                    _2968 = _2823;
                    _2969 = _2824;
                    _2970 = _2825;
                    _2971 = _2826;
                    _2972 = _2827;
                    _2973 = _2837;
                    float _2894;
                    float _2895;
                    float _2896;
                    float _2897;
                    float _2898;
                    float _2899;
                    for (;;)
                    {
                        uint _2977 = uint(findLSB(_2973)) + (_2828 << 5u);
                        uint _2974 = (_2973 + 4294967295u) & _2973;
                        uint _2979 = _2977 * 48u;
                        vec4 _2993 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 3u)).x));
                        uint _2999 = (_2977 * 48u) + 4u;
                        vec4 _3012 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2999)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2999 + 3u)).x));
                        uint _3018 = (_2977 * 48u) + 8u;
                        vec3 _3029 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3018)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3018 + 2u)).x));
                        float _3033 = _2993.x - _1603;
                        float _3034 = _2993.y - _1604;
                        float _3035 = _2993.z - _1605;
                        float _3036 = dot(vec3(_3033, _3034, _3035), vec3(_3033, _3034, _3035));
                        float _3039 = inversesqrt(_3036);
                        float _3040 = _3039 * _3033;
                        float _3041 = _3039 * _3034;
                        float _3042 = _3039 * _3035;
                        float _3043 = dot(vec3(_429, _432, _435), vec3(_3040, _3041, _3042));
                        float _3048 = 1.0 - (_3036 * _2993.w);
                        float _4425 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                        float _3049 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                        float _3050 = sqrt(_3036) * _3012.w;
                        float _3053 = 1.39999997615814208984375 / (_3050 + 1.39999997615814208984375);
                        float _3054 = _3053 * _3053;
                        float _3057 = ((1.0 - _3054) * _3043) + _3054;
                        float _3060 = _3050 * _3050;
                        float _3064 = ((isnan(0.0) ? _3057 : (isnan(_3057) ? 0.0 : max(_3057, 0.0))) * _3049) / ((_3060 * 0.699999988079071044921875) + 1.0);
                        float _3068 = (-0.0) - _1603;
                        float _3069 = (-0.0) - _1604;
                        float _3070 = (-0.0) - _1605;
                        float _3074 = inversesqrt(dot(vec3(_3068, _3069, _3070), vec3(_3068, _3069, _3070)));
                        float _3075 = _3074 * _3068;
                        float _3076 = _3074 * _3069;
                        float _3077 = _3074 * _3070;
                        float _3084 = exp2(log2(1.0 / ((_3060 * 3.5) + 5.0)) * 0.25);
                        float _3085 = 1.0 - _505;
                        float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                        float _3093 = _3092 * _3092;
                        float _3094 = _3093 * _3093;
                        float _3095 = _3075 + _3040;
                        float _3096 = _3076 + _3041;
                        float _3097 = _3077 + _3042;
                        float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                        float _3105 = dot(vec3(_429, _432, _435), vec3(_3075, _3076, _3077));
                        float _4441 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                        float _3108 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                        float _3109 = dot(vec3(_429, _432, _435), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                        float _4452 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                        float _3112 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                        float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                        float _3117 = _3053 * _3093;
                        float _3118 = _3117 * _3117;
                        float _3121 = ((1.0 - _3118) * _3043) + _3118;
                        float _4463 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                        float _3123 = 1.0 - _3093;
                        float _3133 = (0.5 / (((_3122 * ((_3108 * _3123) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3122 * _3123) + _3093) * _3108))) * _3122;
                        float _4474 = isnan(0.0) ? _3133 : (isnan(_3133) ? 0.0 : max(_3133, 0.0));
                        float _3144 = (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3116 * _3116) * ((_3060 * 2.1991131305694580078125) + 3.141590118408203125))) * _3049;
                        _2897 = (_3064 * _3012.x) + _2970;
                        _2898 = (_3064 * _3012.y) + _2971;
                        _2899 = (_3064 * _3012.z) + _2972;
                        _2894 = (_3144 * _3029.x) + _2967;
                        _2895 = (_3144 * _3029.y) + _2968;
                        _2896 = (_3144 * _3029.z) + _2969;
                        if (_2974 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2967 = _2894;
                            _2968 = _2895;
                            _2969 = _2896;
                            _2970 = _2897;
                            _2971 = _2898;
                            _2972 = _2899;
                            _2973 = _2974;
                        }
                    }
                    frontier_phi_71_pred = _2899;
                    frontier_phi_71_pred_1 = _2898;
                    frontier_phi_71_pred_2 = _2897;
                    frontier_phi_71_pred_3 = _2896;
                    frontier_phi_71_pred_4 = _2895;
                    frontier_phi_71_pred_5 = _2894;
                }
                _2671 = frontier_phi_71_pred;
                _2669 = frontier_phi_71_pred_1;
                _2667 = frontier_phi_71_pred_2;
                _2665 = frontier_phi_71_pred_3;
                _2663 = frontier_phi_71_pred_4;
                _2661 = frontier_phi_71_pred_5;
                uint _2829 = _2828 + 1u;
                if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2822 = _2661;
                    _2823 = _2663;
                    _2824 = _2665;
                    _2825 = _2667;
                    _2826 = _2669;
                    _2827 = _2671;
                    _2828 = _2829;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2790;
        float _2792;
        float _2794;
        float _2796;
        float _2798;
        float _2800;
        if (((4294967295u << _2677) & _2545) == 0u)
        {
            _2790 = _2660;
            _2792 = _2662;
            _2794 = _2664;
            _2796 = _2666;
            _2798 = _2668;
            _2800 = _2670;
        }
        else
        {
            float _2815 = inversesqrt(dot(vec3(_1603, _1604, _1605), vec3(_1603, _1604, _1605)));
            float _2816 = _2815 * _1603;
            float _2817 = _2815 * _1604;
            float _2818 = _2815 * _1605;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2791;
                float _2793;
                float _2795;
                float _2797;
                float _2799;
                float _2801;
                float _2950 = _2660;
                float _2951 = _2662;
                float _2952 = _2664;
                float _2953 = _2666;
                float _2954 = _2668;
                float _2955 = _2670;
                uint _2956 = _2677;
                uint _2965;
                bool _2966;
                for (;;)
                {
                    _2965 = texelFetch(g_lightClassification, int((((_2539 << 5u) + (_2525 << 9u)) + (_2956 << 2u)) >> 2u)).x;
                    _2966 = _2965 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2966)
                    {
                        frontier_phi_82_pred = _2955;
                        frontier_phi_82_pred_1 = _2954;
                        frontier_phi_82_pred_2 = _2953;
                        frontier_phi_82_pred_3 = _2952;
                        frontier_phi_82_pred_4 = _2951;
                        frontier_phi_82_pred_5 = _2950;
                    }
                    else
                    {
                        float _3158;
                        float _3159;
                        float _3160;
                        float _3161;
                        float _3162;
                        float _3163;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3457;
                        float _3458;
                        float _3459;
                        float _3171 = _2950;
                        float _3172 = _2951;
                        float _3173 = _2952;
                        float _3174 = _2953;
                        float _3175 = _2954;
                        float _3176 = _2955;
                        uint _3177 = _2965;
                        uint _3178;
                        vec4 _3203;
                        float _3204;
                        vec4 _3219;
                        vec3 _3231;
                        vec4 _3247;
                        vec4 _3263;
                        float _3310;
                        bool _3311;
                        for (;;)
                        {
                            uint _3188 = ((_2956 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3177));
                            _3178 = (_3177 + 4294967295u) & _3177;
                            uint _3190 = _3188 * 40u;
                            _3203 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3190)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3190 + 3u)).x));
                            _3204 = _3203.w;
                            uint _3206 = (_3188 * 40u) + 4u;
                            _3219 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3206)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3206 + 3u)).x));
                            uint _3221 = (_3188 * 40u) + 8u;
                            _3231 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x));
                            uint _3234 = (_3188 * 40u) + 16u;
                            _3247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3234 + 3u)).x));
                            uint _3250 = (_3188 * 40u) + 20u;
                            _3263 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3250)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3250 + 3u)).x));
                            uint _3266 = (_3188 * 40u) + 24u;
                            vec4 _3279 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3266)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3266 + 3u)).x));
                            uint _3285 = (_3188 * 40u) + 28u;
                            vec4 _3298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3285 + 3u)).x));
                            _3310 = fma(_1605, _3298.z, fma(_1604, _3298.y, _3298.x * _1603)) + _3298.w;
                            _3311 = !((fma(_1605, _3279.z, fma(_1604, _3279.y, _3279.x * _1603)) + _3279.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3311)
                            {
                                float _3338 = _3203.x - _1603;
                                float _3339 = _3203.y - _1604;
                                float _3340 = _3203.z - _1605;
                                float _3341 = dot(vec3(_3338, _3339, _3340), vec3(_3338, _3339, _3340));
                                float _3344 = inversesqrt(_3341);
                                float _3345 = _3344 * _3338;
                                float _3346 = _3344 * _3339;
                                float _3347 = _3344 * _3340;
                                float _3351 = 1.0 - (_3341 / (_3204 * _3204));
                                float _4485 = isnan(0.0) ? _3351 : (isnan(_3351) ? 0.0 : max(_3351, 0.0));
                                float _3352 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                                float _3356 = sqrt(_3341) * _3219.w;
                                float _3358 = 1.39999997615814208984375 / (_3356 + 1.39999997615814208984375);
                                float _3359 = _3358 * _3358;
                                float _3362 = ((1.0 - _3359) * dot(vec3(_3345, _3346, _3347), vec3(_429, _432, _435))) + _3359;
                                float _3365 = _3356 * _3356;
                                float _3369 = (fma(_1605, _3247.z, fma(_1604, _3247.y, _3247.x * _1603)) + _3247.w) / _3310;
                                float _3370 = (fma(_1605, _3263.z, fma(_1604, _3263.y, _3263.x * _1603)) + _3263.w) / _3310;
                                float _3374 = 1.0 - dot(vec2(_3369, _3370), vec2(_3369, _3370));
                                float _4501 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3375 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                                float _3376 = _3375 * (((isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0))) * _3352) / ((_3365 * 0.699999988079071044921875) + 1.0));
                                float _3388 = exp2(log2(1.0 / ((_3365 * 3.5) + 5.0)) * 0.25);
                                float _3389 = 1.0 - _505;
                                float _3396 = sqrt(1.0 - ((1.0 - (_3389 * _3389)) * (1.0 - (_3388 * _3388))));
                                float _3397 = _3396 * _3396;
                                float _3398 = _3397 * _3397;
                                float _3399 = _3345 - _2816;
                                float _3400 = _3346 - _2817;
                                float _3401 = _3347 - _2818;
                                float _3405 = inversesqrt(dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401)));
                                float _3409 = dot(vec3(_429, _432, _435), vec3((-0.0) - _2816, (-0.0) - _2817, (-0.0) - _2818));
                                float _4512 = isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0));
                                float _3412 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                                float _3413 = dot(vec3(_429, _432, _435), vec3(_3405 * _3399, _3405 * _3400, _3405 * _3401));
                                float _4523 = isnan(0.0) ? _3413 : (isnan(_3413) ? 0.0 : max(_3413, 0.0));
                                float _3416 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                                float _3420 = ((_3416 * _3416) * (_3398 + (-1.0))) + 1.0;
                                float _3421 = _3358 * _3397;
                                float _3422 = _3421 * _3421;
                                float _3428 = ((1.0 - _3422) * dot(vec3(_429, _432, _435), vec3(_3345, _3346, _3347))) + _3422;
                                float _4534 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                                float _3429 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3430 = 1.0 - _3397;
                                float _3440 = (0.5 / (((_3429 * ((_3412 * _3430) + _3397)) + 9.9999999392252902907785028219223e-09) + (((_3429 * _3430) + _3397) * _3412))) * _3429;
                                float _4545 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3450 = (_3375 * _3352) * (((_3398 * 3.1415927410125732421875) * (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) / ((_3420 * _3420) * ((_3365 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3376 * _3219.z;
                                frontier_phi_88_pred_1 = _3376 * _3219.y;
                                frontier_phi_88_pred_2 = _3376 * _3219.x;
                                frontier_phi_88_pred_3 = _3450 * _3231.z;
                                frontier_phi_88_pred_4 = _3450 * _3231.y;
                                frontier_phi_88_pred_5 = _3450 * _3231.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3459 = frontier_phi_88_pred;
                            _3458 = frontier_phi_88_pred_1;
                            _3457 = frontier_phi_88_pred_2;
                            _3456 = frontier_phi_88_pred_3;
                            _3455 = frontier_phi_88_pred_4;
                            _3454 = frontier_phi_88_pred_5;
                            _3161 = _3457 + _3174;
                            _3162 = _3458 + _3175;
                            _3163 = _3459 + _3176;
                            _3158 = _3454 + _3171;
                            _3159 = _3455 + _3172;
                            _3160 = _3456 + _3173;
                            if (_3178 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3171 = _3158;
                                _3172 = _3159;
                                _3173 = _3160;
                                _3174 = _3161;
                                _3175 = _3162;
                                _3176 = _3163;
                                _3177 = _3178;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3163;
                        frontier_phi_82_pred_1 = _3162;
                        frontier_phi_82_pred_2 = _3161;
                        frontier_phi_82_pred_3 = _3160;
                        frontier_phi_82_pred_4 = _3159;
                        frontier_phi_82_pred_5 = _3158;
                    }
                    _2801 = frontier_phi_82_pred;
                    _2799 = frontier_phi_82_pred_1;
                    _2797 = frontier_phi_82_pred_2;
                    _2795 = frontier_phi_82_pred_3;
                    _2793 = frontier_phi_82_pred_4;
                    _2791 = frontier_phi_82_pred_5;
                    uint _2957 = _2956 + 1u;
                    if (_2957 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2950 = _2791;
                        _2951 = _2793;
                        _2952 = _2795;
                        _2953 = _2797;
                        _2954 = _2799;
                        _2955 = _2801;
                        _2956 = _2957;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2797;
                frontier_phi_63_64_ladder_1 = _2801;
                frontier_phi_63_64_ladder_2 = _2799;
                frontier_phi_63_64_ladder_3 = _2795;
                frontier_phi_63_64_ladder_4 = _2793;
                frontier_phi_63_64_ladder_5 = _2791;
            }
            else
            {
                frontier_phi_63_64_ladder = _2666;
                frontier_phi_63_64_ladder_1 = _2670;
                frontier_phi_63_64_ladder_2 = _2668;
                frontier_phi_63_64_ladder_3 = _2664;
                frontier_phi_63_64_ladder_4 = _2662;
                frontier_phi_63_64_ladder_5 = _2660;
            }
            _2790 = frontier_phi_63_64_ladder_5;
            _2792 = frontier_phi_63_64_ladder_4;
            _2794 = frontier_phi_63_64_ladder_3;
            _2796 = frontier_phi_63_64_ladder;
            _2798 = frontier_phi_63_64_ladder_2;
            _2800 = frontier_phi_63_64_ladder_1;
        }
        float _2805 = isnan(1.0) ? _489 : (isnan(_489) ? 1.0 : min(_489, 1.0));
        _2558 = (_2805 * _2796) + _2070;
        _2560 = (_2805 * _2798) + _2072;
        _2562 = (_2805 * _2800) + _2074;
        _2564 = ((_2790 * _474) * _2805) + _2408;
        _2566 = ((_2792 * _476) * _2805) + _2410;
        _2568 = ((_2794 * _477) * _2805) + _2412;
    }
    else
    {
        _2558 = _2070;
        _2560 = _2072;
        _2562 = _2074;
        _2564 = _2408;
        _2566 = _2410;
        _2568 = _2412;
    }
    uint _2574 = _450 + uint(cbMatDynParam._m0[0u].w);
    float _2582 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _288.x) * cbInstanceData._m0[_2574].x;
    float _2585 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _288.y) * cbInstanceData._m0[_2574].y;
    float _2588 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _288.z) * cbInstanceData._m0[_2574].z;
    float _4561 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4572 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _4583 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _2605 = (((isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0))) * (_2558 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _489))) + ((_2564 + ((isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + _2582;
    float _2607 = (_2585 + ((_2566 + ((isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2560 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _489)));
    float _2609 = (_2588 + ((_2568 + ((isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))) * _1331)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0))) * (_2562 + ((isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0))) * _489)));
    float _2610 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2611 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
    float _2612 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
    float _2618 = cbMtdParam._m0[2u].x * _2582;
    float _2619 = cbMtdParam._m0[2u].y * _2585;
    float _2620 = cbMtdParam._m0[2u].z * _2588;
    float _4609 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2622 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    uint _2623 = _448 + 6u;
    float _2631 = _408 / cbSceneParam._m0[86u].x;
    float _2632 = _409 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _329 : (isnan(_329) ? cbSceneParam._m0[77u].w : min(_329, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2723;
    float _2725;
    float _2727;
    float _2729;
    if (_329 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_329) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _329 : min(cbSceneParam._m0[80u].w, _329));
        float _2686 = _2685 / _329;
        float _2697 = _2686 * _380;
        float _2698 = _381 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2701 = _2686 * _382;
        float _2703 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2704 = _2703 + cbSceneParam._m0[79u].w;
        float _2705 = cbSceneParam._m0[79u].w - _2698;
        float _2711 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2701 * _2701));
        float _2714 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2711;
        float _2719 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2721 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2907;
        if (abs((_2699 - _2703) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2907 = ((((_2704 > 0.0) ? exp2(_2719 * _2704) : (2.0 - exp2(_2721 * _2704))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2714;
        }
        else
        {
            float _2851 = 1.0 / cbSceneParam._m0[80u].x;
            float _2852 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : max(_2704, _2705));
            float _2853 = isnan(_2705) ? _2704 : (isnan(_2704) ? _2705 : min(_2704, _2705));
            float _2862 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : min(_2852, 0.0));
            float _2863 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : min(_2853, 0.0));
            _2907 = ((abs(_2711 / _2699) * cbSceneParam._m0[80u].y) * ((((_2862 - _2863) * 2.0) - ((exp2(_2719 * (isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0)))) - exp2(_2719 * (isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))))) * _2851)) - ((exp2(_2721 * _2862) - exp2(_2721 * _2863)) * _2851))) + (_2714 * cbSceneParam._m0[80u].z);
        }
        vec4 _2909 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2918 = exp2((_2907 * (-1.44269502162933349609375)) * (1.0 - _2909.w));
        float _2919 = log2(_2918);
        float _2935 = log2(_2651);
        _2723 = (exp2(_2935 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].x)) * _2909.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2725 = (exp2(_2935 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].y)) * _2909.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2727 = (exp2(_2935 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2919 * cbSceneParam._m0[78u].z)) * _2909.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2729 = _2918 * _2651;
    }
    else
    {
        _2723 = _2648;
        _2725 = _2649;
        _2727 = _2650;
        _2729 = _2651;
    }
    bool _2945;
    vec4 _2739;
    vec4 _2761;
    float _2763;
    float _2767;
    float _2768;
    float _2769;
    float _2772;
    float _2775;
    float _2778;
    float _2779;
    bool _2789;
    for (;;)
    {
        _2739 = cbMatDynParam._m0[0u];
        float _2741 = roundEven(_2739.y);
        bool _2742 = _2741 == 3.0;
        float _2743 = log2(_2729);
        float _2747 = exp2(_2743 * cbSceneParam._m0[78u].x);
        float _2748 = exp2(_2743 * cbSceneParam._m0[78u].y);
        float _2749 = exp2(_2743 * cbSceneParam._m0[78u].z);
        float _2750 = _2747 * _2610;
        float _2751 = _2748 * _2611;
        float _2752 = _2749 * _2612;
        float _2759 = _396 + (-0.5);
        _2761 = cbMtdParam._m0[1u];
        _2763 = _2761.y * _2759;
        float _2766 = (_2741 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2767 = _2766 * (_2742 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2723)));
        _2768 = _2766 * (_2742 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2725)));
        _2769 = _2766 * (_2742 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2727)));
        _2772 = ((_2618 * _2622) * _2747) * _2766;
        _2775 = ((_2619 * _2622) * _2748) * _2766;
        _2778 = ((_2620 * _2622) * _2749) * _2766;
        _2779 = _2759 * 0.999000012874603271484375;
        _2789 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2789)
        {
            if ((cbInstanceData._m0[_448 + 7u].x + _2779) < 0.5)
            {
                _2945 = true;
                break;
            }
        }
        uint _2886 = _450 + uint(_2739.w);
        if ((cbInstanceData._m0[_2886].w < 1.0) && ((cbInstanceData._m0[_2886].w + _2779) < 0.5))
        {
            _2945 = true;
            break;
        }
        if ((_2763 + 1.0) < _2761.x)
        {
            _2945 = true;
            break;
        }
        _2945 = false;
        break;
    }
    float _3149;
    if (_2945)
    {
        discard_state = true;
        _3149 = 0.0;
    }
    else
    {
        _3149 = cbInstanceData._m0[_2623].w;
    }
    SV_Target.x = _2767;
    SV_Target.y = _2768;
    SV_Target.z = _2769;
    SV_Target.w = _3149;
    SV_Target_1.x = _2772;
    SV_Target_1.y = _2775;
    SV_Target_1.z = _2778;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
    discard_exit();
}


