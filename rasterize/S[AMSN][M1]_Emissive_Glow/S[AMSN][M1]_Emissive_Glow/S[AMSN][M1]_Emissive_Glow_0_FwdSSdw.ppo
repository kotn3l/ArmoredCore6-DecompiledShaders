#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _863;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _224 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _230 = _224.x * cbMtdParam._m0[9u].x;
    float _231 = _224.y * cbMtdParam._m0[9u].y;
    float _232 = _224.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _251 = cbMtdParam._m0[11u].x + _244.x;
    vec4 _263 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _267 = _263.z;
    float _271 = (_263.x * 2.0) + (-1.0);
    float _273 = (_263.y * 2.0) + (-1.0);
    float _274 = dot(vec2(_271, _273), vec2(_271, _273));
    float _3267 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _280 = sqrt(1.0 - (isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))));
    vec4 _299 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _306 = fma(_280, _194 * NORMAL.x, fma(_273, _201 * TANGENT.x, (_187 * _180) * _271));
    float _309 = fma(_280, _194 * NORMAL.y, fma(_273, _201 * TANGENT.y, (_187 * _181) * _271));
    float _312 = fma(_280, _194 * NORMAL.z, fma(_273, _201 * TANGENT.z, (_187 * _182) * _271));
    float _316 = inversesqrt(dot(vec3(_306, _309, _312), vec3(_306, _309, _312)));
    float _317 = _316 * _306;
    float _318 = _316 * _309;
    float _319 = _316 * _312;
    float _3278 = isnan(0.0) ? _267 : (isnan(_267) ? 0.0 : max(_267, 0.0));
    float _320 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
    float _3289 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3300 = isnan(0.0) ? _231 : (isnan(_231) ? 0.0 : max(_231, 0.0));
    float _3311 = isnan(0.0) ? _232 : (isnan(_232) ? 0.0 : max(_232, 0.0));
    float _3322 = isnan(0.0) ? _251 : (isnan(_251) ? 0.0 : max(_251, 0.0));
    float _324 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _340 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _381 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _391 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _381);
    float _392 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _381);
    float _393 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _381);
    float _397 = inversesqrt(dot(vec3(_391, _392, _393), vec3(_391, _392, _393)));
    float _398 = _391 * _397;
    float _399 = _392 * _397;
    float _400 = _393 * _397;
    float _406 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _407 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_319, cbSceneParam._m0[5u].z, fma(_318, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _317));
    float _431 = fma(_319, cbSceneParam._m0[6u].z, fma(_318, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _317));
    float _434 = fma(_319, cbSceneParam._m0[7u].z, fma(_318, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _317));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = _447 + 9u;
    uint _450 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3333 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _3344 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _462 = 1.0 - _324;
    float _463 = _459 * _462;
    float _464 = _460 * _462;
    float _465 = _461 * _462;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _324;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _324;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _324;
    float _473 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _406, cbSceneParam._m0[86u].y * _407));
    float _488 = _485.x * TEXCOORD.z;
    float _489 = dot(vec3(_317, _318, _319), vec3(_398, _399, _400));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _317) - _398;
    float _497 = (_492 * _318) - _399;
    float _498 = (_492 * _319) - _400;
    float _502 = abs(dot(vec3(_398, _399, _400), vec3(_317, _318, _319)));
    float _3366 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_320);
    float _517 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _523 = (1.0 - _517) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _524 = _517 * _504;
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _862;
    float _864;
    float _865;
    float _866;
    float _867;
    float _868;
    float _869;
    float _870;
    float _871;
    float _872;
    float _873;
    float _874;
    float _875;
    float _876;
    float _877;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _587 = fma(_560, cbModelParam._m0[26u].z, fma(_556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _552));
        float _591 = fma(_560, cbModelParam._m0[27u].z, fma(_556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _552));
        float _595 = fma(_560, cbModelParam._m0[28u].z, fma(_556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _552));
        float _620 = _552 + _317;
        float _621 = _556 + _318;
        float _622 = _560 + _319;
        float _632 = fma(_622, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620)) - _587;
        float _633 = fma(_622, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620)) - _591;
        float _634 = fma(_622, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620)) - _595;
        float _638 = inversesqrt(dot(vec3(_632, _633, _634), vec3(_632, _633, _634)));
        float _651 = ((_638 * _632) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_587 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _652 = ((_638 * _633) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_591 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _653 = ((_638 * _634) / cbModelParam._m0[34u].z) + ((((((_595 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _656 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _663 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _670 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        vec4 _677 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_651, _652, _653), 0.0);
        float _690 = exp2((_656.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_656.x + (-0.5));
        float _692 = _690 * (_656.y + (-0.5));
        float _693 = _690 * (_656.z + (-0.5));
        float _700 = exp2((_663.w + (-0.5)) * 20.0) * 2.0;
        float _701 = _700 * (_663.x + (-0.5));
        float _702 = _700 * (_663.y + (-0.5));
        float _703 = _700 * (_663.z + (-0.5));
        float _710 = exp2((_670.w + (-0.5)) * 20.0) * 2.0;
        float _711 = _710 * (_670.x + (-0.5));
        float _712 = _710 * (_670.y + (-0.5));
        float _713 = _710 * (_670.z + (-0.5));
        float _720 = exp2((_677.w + (-0.5)) * 20.0) * 2.0;
        float _721 = _720 * (_677.x + (-0.5));
        float _722 = _720 * (_677.y + (-0.5));
        float _723 = _720 * (_677.z + (-0.5));
        float _724 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _725 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _726 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        float _727 = _691 * 0.5;
        float _728 = _701 * 0.5;
        float _729 = _711 * 0.5;
        float _730 = dot(vec3(_727, _728, _729), vec3(_727, _728, _729));
        float _735 = (_730 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_730);
        float _744 = (dot(vec3(_317, _318, _319), vec3(_735 * _727, _735 * _728, _735 * _729)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
        float _754 = sqrt(((_728 * _728) + (_727 * _727)) + (_729 * _729)) / (_724 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _755 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _756 = _755 * 2.0;
        float _760 = (1.0 - _755) / (_755 + 1.0);
        float _3414 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
        float _761 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _770 = ((((1.0 - _761) * (_756 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_756 + 1.0))) + _761) * _724;
        float _771 = _692 * 0.5;
        float _772 = _702 * 0.5;
        float _773 = _712 * 0.5;
        float _774 = dot(vec3(_771, _772, _773), vec3(_771, _772, _773));
        float _779 = (_774 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_774);
        float _787 = (dot(vec3(_317, _318, _319), vec3(_779 * _771, _779 * _772, _779 * _773)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _796 = sqrt(((_772 * _772) + (_771 * _771)) + (_773 * _773)) / (_725 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3447 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_798 + 1.0))) + _803) * _725;
        float _813 = _693 * 0.5;
        float _814 = _703 * 0.5;
        float _815 = _713 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(_317, _318, _319), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_726 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3480 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_840 + 1.0))) + _845) * _726;
        _862 = _693;
        _864 = _692;
        _865 = _691;
        _866 = _703;
        _867 = _702;
        _868 = _701;
        _869 = _713;
        _870 = _712;
        _871 = _711;
        _872 = _726;
        _873 = _725;
        _874 = _724;
        _875 = cbModelParam._m0[36u].z * (isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0)));
        _876 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _877 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
    }
    else
    {
        _862 = _863;
        _864 = _863;
        _865 = _863;
        _866 = _863;
        _867 = _863;
        _868 = _863;
        _869 = _863;
        _870 = _863;
        _871 = _863;
        _872 = _863;
        _873 = _863;
        _874 = _863;
        _875 = 0.0;
        _876 = 0.0;
        _877 = 0.0;
    }
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _903 = fma(_560, cbModelParam._m0[30u].z, fma(_556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _552));
        float _907 = fma(_560, cbModelParam._m0[31u].z, fma(_556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _552));
        float _911 = fma(_560, cbModelParam._m0[32u].z, fma(_556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _552));
        float _934 = _552 + _317;
        float _935 = _556 + _318;
        float _936 = _560 + _319;
        float _946 = fma(_936, cbModelParam._m0[30u].z, fma(_935, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _934)) - _903;
        float _947 = fma(_936, cbModelParam._m0[31u].z, fma(_935, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _934)) - _907;
        float _948 = fma(_936, cbModelParam._m0[32u].z, fma(_935, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _934)) - _911;
        float _952 = inversesqrt(dot(vec3(_946, _947, _948), vec3(_946, _947, _948)));
        float _965 = ((_952 * _946) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_903 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _966 = ((_952 * _947) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_907 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _967 = ((_952 * _948) / cbModelParam._m0[35u].z) + ((((((_911 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_965, _966, _967), 0.0);
        float _1002 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1003 = _1002 * (_969.x + (-0.5));
        float _1004 = _1002 * (_969.y + (-0.5));
        float _1005 = _1002 * (_969.z + (-0.5));
        float _1012 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_976.x + (-0.5));
        float _1014 = _1012 * (_976.y + (-0.5));
        float _1015 = _1012 * (_976.z + (-0.5));
        float _1022 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1023 = _1022 * (_983.x + (-0.5));
        float _1024 = _1022 * (_983.y + (-0.5));
        float _1025 = _1022 * (_983.z + (-0.5));
        float _1032 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1033 = _1032 * (_990.x + (-0.5));
        float _1034 = _1032 * (_990.y + (-0.5));
        float _1035 = _1032 * (_990.z + (-0.5));
        float _1036 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1037 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1038 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1039 = _1003 * 0.5;
        float _1040 = _1013 * 0.5;
        float _1041 = _1023 * 0.5;
        float _1042 = dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041));
        float _1047 = (_1042 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1042);
        float _1055 = (dot(vec3(_317, _318, _319), vec3(_1047 * _1039, _1047 * _1040, _1047 * _1041)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1064 = sqrt(((_1040 * _1040) + (_1039 * _1039)) + (_1041 * _1041)) / (_1036 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1065 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1066 = _1065 * 2.0;
        float _1070 = (1.0 - _1065) / (_1065 + 1.0);
        float _3543 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1080 = ((((1.0 - _1071) * (_1066 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1066 + 1.0))) + _1071) * _1036;
        float _1081 = _1004 * 0.5;
        float _1082 = _1014 * 0.5;
        float _1083 = _1024 * 0.5;
        float _1084 = dot(vec3(_1081, _1082, _1083), vec3(_1081, _1082, _1083));
        float _1089 = (_1084 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1084);
        float _1097 = (dot(vec3(_317, _318, _319), vec3(_1089 * _1081, _1089 * _1082, _1089 * _1083)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1106 = sqrt(((_1082 * _1082) + (_1081 * _1081)) + (_1083 * _1083)) / (_1037 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1107 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1108 = _1107 * 2.0;
        float _1112 = (1.0 - _1107) / (_1107 + 1.0);
        float _3576 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1122 = ((((1.0 - _1113) * (_1108 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1108 + 1.0))) + _1113) * _1037;
        float _1123 = _1005 * 0.5;
        float _1124 = _1015 * 0.5;
        float _1125 = _1025 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1139 = (dot(vec3(_317, _318, _319), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1148 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1038 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1149 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1150 = _1149 * 2.0;
        float _1154 = (1.0 - _1149) / (_1149 + 1.0);
        float _3609 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1164 = ((((1.0 - _1155) * (_1150 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1150 + 1.0))) + _1155) * _1038;
        _1172 = _1005;
        _1173 = _1004;
        _1174 = _1003;
        _1175 = _1015;
        _1176 = _1014;
        _1177 = _1013;
        _1178 = _1025;
        _1179 = _1024;
        _1180 = _1023;
        _1181 = _1038;
        _1182 = _1037;
        _1183 = _1036;
        _1184 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0)));
        _1185 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0)));
        _1186 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0)));
    }
    else
    {
        _1172 = _863;
        _1173 = _863;
        _1174 = _863;
        _1175 = _863;
        _1176 = _863;
        _1177 = _863;
        _1178 = _863;
        _1179 = _863;
        _1180 = _863;
        _1181 = _863;
        _1182 = _863;
        _1183 = _863;
        _1184 = 0.0;
        _1185 = 0.0;
        _1186 = 0.0;
    }
    float _1196 = (cbModelParam._m0[1u].x * (_1184 - _875)) + _875;
    float _1197 = (cbModelParam._m0[1u].x * (_1185 - _876)) + _876;
    float _1198 = (cbModelParam._m0[1u].x * (_1186 - _877)) + _877;
    float _1219 = fma(_1198, cbSceneParam._m0[89u].z, fma(_1197, cbSceneParam._m0[89u].y, _1196 * cbSceneParam._m0[89u].x));
    float _1222 = fma(_1198, cbSceneParam._m0[90u].z, fma(_1197, cbSceneParam._m0[90u].y, _1196 * cbSceneParam._m0[90u].x));
    float _1225 = fma(_1198, cbSceneParam._m0[91u].z, fma(_1197, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1196));
    float _1240 = _496 * 0.5;
    float _1241 = _497 * 0.5;
    float _1242 = _498 * 0.5;
    float _1243 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1174, _1177, _1180, _1183));
    float _1246 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1173, _1176, _1179, _1182));
    float _1249 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_1172, _1175, _1178, _1181));
    float _1283;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1256 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_862, _866, _869, _872));
        float _1260 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_864, _867, _870, _873));
        float _1264 = dot(vec4(_1240, _1241, _1242, 1.0), vec4(_865, _868, _871, _874));
        float _1271 = dot(vec4(cbModelParam._m0[39u]), vec4(_1240, _1241, _1242, 1.0));
        _1283 = dot(vec3(isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)), isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1271) ? 0.0 : (isnan(0.0) ? _1271 : max(0.0, _1271))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1283 = 1.0;
    }
    float _1294;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1285 = dot(vec4(cbModelParam._m0[40u]), vec4(_1240, _1241, _1242, 1.0));
        _1294 = dot(vec3(isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)), isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1285) ? 0.0 : (isnan(0.0) ? _1285 : max(0.0, _1285))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1294 = 1.0;
    }
    float _1298 = (_1294 * cbModelParam._m0[1u].x) + (_1283 * (1.0 - cbModelParam._m0[1u].x));
    float _1308 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _320);
    float _1309 = isnan(_1308) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1308 : min(cbModelParam._m0[25u].z, _1308));
    float _1391;
    float _1393;
    float _1395;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1358 = fma(_560, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552)) + cbModelParam._m0[13u].w;
        float _1362 = fma(_560, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552)) + cbModelParam._m0[14u].w;
        float _1366 = fma(_560, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552)) + cbModelParam._m0[15u].w;
        float _1369 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1372 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1375 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1403;
        if (_1369 > 0.0)
        {
            _1403 = abs((1.0 - _1358) / _1369);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1369 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1358 + 1.0) / _1369);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1403 = frontier_phi_14_12_ladder;
        }
        float _1631;
        if (_1372 > 0.0)
        {
            _1631 = abs((1.0 - _1362) / _1372);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1362 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1631 = frontier_phi_23_19_ladder;
        }
        float _1888;
        if (_1375 > 0.0)
        {
            _1888 = abs((1.0 - _1366) / _1375);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1366 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1888 = frontier_phi_35_30_ladder;
        }
        float _1890 = isnan(_1631) ? _1403 : (isnan(_1403) ? _1631 : min(_1403, _1631));
        float _1891 = isnan(_1888) ? _1890 : (isnan(_1890) ? _1888 : min(_1890, _1888));
        float _1895 = (_1891 * _1369) + _1358;
        float _1896 = (_1891 * _1372) + _1362;
        float _1897 = (_1891 * _1375) + _1366;
        float _1898 = _1891 * 9.9999997473787516355514526367188e-05;
        float _1900 = (-1.0) - _1898;
        float _1902 = _1898 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1897 > _1902) || ((_1897 < _1900) || ((_1896 > _1902) || ((_1896 < _1900) || ((_1895 < _1900) || (_1895 > _1902))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2025 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1897, cbModelParam._m0[9u].z, fma(_1896, cbModelParam._m0[9u].y, _1895 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1897, cbModelParam._m0[10u].z, fma(_1896, cbModelParam._m0[10u].y, _1895 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1897, cbModelParam._m0[11u].z, fma(_1896, cbModelParam._m0[11u].y, _1895 * cbModelParam._m0[11u].x))), _1309);
            frontier_phi_13_35_ladder = _2025.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2025.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2025.x * cbModelParam._m0[1u].y;
        }
        _1391 = frontier_phi_13_35_ladder_2;
        _1393 = frontier_phi_13_35_ladder_1;
        _1395 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1379 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1309);
        _1391 = _1379.x * cbModelParam._m0[1u].y;
        _1393 = _1379.y * cbModelParam._m0[1u].y;
        _1395 = _1379.z * cbModelParam._m0[1u].y;
    }
    float _1399 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _320);
    float _1400 = isnan(_1399) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1399 : min(cbModelParam._m0[25u].w, _1399));
    float _1493;
    float _1495;
    float _1497;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1457 = fma(_560, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552)) + cbModelParam._m0[21u].w;
        float _1461 = fma(_560, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552)) + cbModelParam._m0[22u].w;
        float _1465 = fma(_560, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552)) + cbModelParam._m0[23u].w;
        float _1468 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1471 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1474 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1636;
        if (_1468 > 0.0)
        {
            _1636 = abs((1.0 - _1457) / _1468);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1457 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1636 = frontier_phi_25_21_ladder;
        }
        float _1915;
        if (_1471 > 0.0)
        {
            _1915 = abs((1.0 - _1461) / _1471);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1461 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1915 = frontier_phi_37_32_ladder;
        }
        float _2128;
        if (_1474 > 0.0)
        {
            _2128 = abs((1.0 - _1465) / _1474);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1474 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1465 + 1.0) / _1474);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2128 = frontier_phi_46_43_ladder;
        }
        float _2130 = isnan(_1915) ? _1636 : (isnan(_1636) ? _1915 : min(_1636, _1915));
        float _2131 = isnan(_2128) ? _2130 : (isnan(_2130) ? _2128 : min(_2130, _2128));
        float _2135 = (_2131 * _1468) + _1457;
        float _2136 = (_2131 * _1471) + _1461;
        float _2137 = (_2131 * _1474) + _1465;
        float _2138 = _2131 * 9.9999997473787516355514526367188e-05;
        float _2139 = (-1.0) - _2138;
        float _2141 = _2138 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2137 > _2141) || ((_2137 < _2139) || ((_2136 > _2141) || ((_2136 < _2139) || ((_2135 < _2139) || (_2135 > _2141))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2371 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2137, cbModelParam._m0[17u].z, fma(_2136, cbModelParam._m0[17u].y, _2135 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2137, cbModelParam._m0[18u].z, fma(_2136, cbModelParam._m0[18u].y, _2135 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2137, cbModelParam._m0[19u].z, fma(_2136, cbModelParam._m0[19u].y, _2135 * cbModelParam._m0[19u].x))), _1400);
            frontier_phi_22_46_ladder = _2371.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2371.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2371.x * cbModelParam._m0[1u].z;
        }
        _1493 = frontier_phi_22_46_ladder_2;
        _1495 = frontier_phi_22_46_ladder_1;
        _1497 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1477 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1400);
        _1493 = _1477.x * cbModelParam._m0[1u].z;
        _1495 = _1477.y * cbModelParam._m0[1u].z;
        _1497 = _1477.z * cbModelParam._m0[1u].z;
    }
    float _1510 = (((_523 * _473) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1493 - _1391)) + _1391);
    float _1512 = (((_523 * _475) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1495 - _1393)) + _1393);
    float _1514 = (((_523 * _476) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1497 - _1395)) + _1395);
    float _1517 = fma(_1514, cbSceneParam._m0[89u].z, fma(_1512, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1514, cbSceneParam._m0[90u].z, fma(_1512, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1514, cbSceneParam._m0[91u].z, fma(_1512, cbSceneParam._m0[91u].y, _1510 * cbSceneParam._m0[91u].x));
    vec4 _1531 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_406, _407));
    float _1533 = _1531.w;
    float _1545 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1533);
    float _1546 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1533);
    float _1547 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1533);
    uvec4 _1551 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1553 = _1551.x * 14u;
    uint _1554 = _1553 + 13u;
    float _1561 = _488 + (-1.0);
    float _1566 = (cbLight._m0[_1554].x * _1561) + 1.0;
    float _1567 = (cbLight._m0[_1554].y * _1561) + 1.0;
    float _1568 = (cbLight._m0[_1554].z * _1561) + 1.0;
    float _1569 = (cbLight._m0[_1554].w * _1561) + 1.0;
    uint _1570 = _1553 + 5u;
    float _1576 = isnan(1.0) ? _1567 : (isnan(_1567) ? 1.0 : min(_1567, 1.0));
    uint _1580 = _1553 + 4u;
    float _1590 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
    uint _1594 = _1553 | 1u;
    float _1605 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_317, _318, _319));
    float _1608 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_317, _318, _319));
    float _3745 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
    float _3756 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
    float _1613 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.3183098733425140380859375;
    float _1615 = (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.3183098733425140380859375;
    float _1622 = ((cbLight._m0[_1570].x * _1576) * _1615) + (((cbLight._m0[_1580].x * _1545) * _1590) * _1613);
    float _1623 = ((_1576 * cbLight._m0[_1570].y) * _1615) + (((cbLight._m0[_1580].y * _1546) * _1590) * _1613);
    float _1624 = ((_1576 * cbLight._m0[_1570].z) * _1615) + (((cbLight._m0[_1580].z * _1547) * _1590) * _1613);
    uvec4 _1628 = floatBitsToUint(cbLight._m0[_1553 + 12u]);
    bool _1630 = _1628.x == 0u;
    float _1641;
    float _1643;
    float _1645;
    if (_1630)
    {
        _1641 = _1622;
        _1643 = _1623;
        _1645 = _1624;
    }
    else
    {
        uint _1649 = _1553 + 6u;
        float _1665 = (dot(vec3(cbLight._m0[_1553 + 2u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1666 = _1665 * _1665;
        float _3767 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
        float _1667 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
        float _1668 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1641 = (((cbLight._m0[_1649].x * 0.3183098733425140380859375) * _1667) * _1668) + _1622;
        _1643 = (((cbLight._m0[_1649].y * 0.3183098733425140380859375) * _1667) * _1668) + _1623;
        _1645 = (((cbLight._m0[_1649].z * 0.3183098733425140380859375) * _1667) * _1668) + _1624;
    }
    bool _1648 = _1628.y == 0u;
    float _1686;
    float _1688;
    float _1690;
    if (_1648)
    {
        _1686 = _1641;
        _1688 = _1643;
        _1690 = _1645;
    }
    else
    {
        uint _1859 = _1553 + 7u;
        float _1875 = (dot(vec3(cbLight._m0[_1553 + 3u].xyz), vec3(_317, _318, _319)) * 0.5) + 0.5;
        float _1876 = _1875 * _1875;
        float _3783 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
        float _1877 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
        float _1878 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _1686 = (((cbLight._m0[_1859].x * 0.3183098733425140380859375) * _1877) * _1878) + _1641;
        _1688 = (((cbLight._m0[_1859].y * 0.3183098733425140380859375) * _1877) * _1878) + _1643;
        _1690 = (((cbLight._m0[_1859].z * 0.3183098733425140380859375) * _1877) * _1878) + _1645;
    }
    uint _1693 = _1553 + 8u;
    float _1706 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1553].w)) * _320) * 0.949999988079071044921875);
    float _1707 = _1706 * _1706;
    float _1708 = cbLight._m0[_1553].x + _398;
    float _1709 = cbLight._m0[_1553].y + _399;
    float _1710 = cbLight._m0[_1553].z + _400;
    float _1714 = inversesqrt(dot(vec3(_1708, _1709, _1710), vec3(_1708, _1709, _1710)));
    float _1715 = _1714 * _1708;
    float _1716 = _1714 * _1709;
    float _1717 = _1714 * _1710;
    float _1718 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1553].xyz));
    float _3799 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1722 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _1723 = dot(vec3(_317, _318, _319), vec3(_1715, _1716, _1717));
    float _3821 = isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0));
    float _1726 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _1727 = dot(vec3(cbLight._m0[_1553].xyz), vec3(_1715, _1716, _1717));
    float _3832 = isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0));
    float _1731 = _1707 * _1707;
    float _1735 = ((_1726 * _1726) * (_1731 + (-1.0))) + 1.0;
    float _1743 = exp2(log2(1.0 - (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * 5.0);
    float _1744 = 0.959999978542327880859375 - _470;
    float _1746 = 0.959999978542327880859375 - _471;
    float _1747 = 0.959999978542327880859375 - _472;
    float _1754 = 1.0 - _1707;
    float _1765 = (0.5 / (((_1722 * ((_1721 * _1754) + _1707)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1754) + _1707) * _1721))) * _1721;
    float _3843 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1767 = (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1731 / ((_1735 * _1735) * 3.141590118408203125));
    uint _1781 = _1553 + 9u;
    float _1792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1594].w)) * _320) * 0.949999988079071044921875);
    float _1793 = _1792 * _1792;
    float _1794 = cbLight._m0[_1594].x + _398;
    float _1795 = cbLight._m0[_1594].y + _399;
    float _1796 = cbLight._m0[_1594].z + _400;
    float _1800 = inversesqrt(dot(vec3(_1794, _1795, _1796), vec3(_1794, _1795, _1796)));
    float _1801 = _1800 * _1794;
    float _1802 = _1800 * _1795;
    float _1803 = _1800 * _1796;
    float _1804 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1594].xyz));
    float _3854 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _1808 = dot(vec3(_317, _318, _319), vec3(_1801, _1802, _1803));
    float _3865 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1811 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _1812 = dot(vec3(cbLight._m0[_1594].xyz), vec3(_1801, _1802, _1803));
    float _3876 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1816 = _1793 * _1793;
    float _1820 = ((_1811 * _1811) * (_1816 + (-1.0))) + 1.0;
    float _1827 = exp2(log2(1.0 - (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0)))) * 5.0);
    float _1834 = 1.0 - _1793;
    float _1844 = (0.5 / (((_1722 * ((_1807 * _1834) + _1793)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1834) + _1793) * _1807))) * _1807;
    float _3887 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1846 = (isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1816 / ((_1820 * _1820) * 3.141590118408203125));
    float _1856 = (((((_1827 * _1744) + _473) * cbLight._m0[_1781].x) * _1846) * _1576) + ((((cbLight._m0[_1693].x * _1545) * ((_1743 * _1744) + _473)) * _1767) * _1590);
    float _1857 = (((((_1827 * _1746) + _475) * cbLight._m0[_1781].y) * _1846) * _1576) + ((((cbLight._m0[_1693].y * _1546) * ((_1743 * _1746) + _475)) * _1767) * _1590);
    float _1858 = (((((_1827 * _1747) + _476) * cbLight._m0[_1781].z) * _1846) * _1576) + ((((cbLight._m0[_1693].z * _1547) * ((_1743 * _1747) + _476)) * _1767) * _1590);
    float _1920;
    float _1922;
    float _1924;
    if (_1630)
    {
        _1920 = _1856;
        _1922 = _1857;
        _1924 = _1858;
    }
    else
    {
        uint _1926 = _1553 + 2u;
        uint _1930 = _1553 + 10u;
        float _1944 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1926].w)) * _320) * 0.949999988079071044921875);
        float _1945 = _1944 * _1944;
        float _1946 = cbLight._m0[_1926].x + _398;
        float _1947 = cbLight._m0[_1926].y + _399;
        float _1948 = cbLight._m0[_1926].z + _400;
        float _1952 = inversesqrt(dot(vec3(_1946, _1947, _1948), vec3(_1946, _1947, _1948)));
        float _1953 = _1952 * _1946;
        float _1954 = _1952 * _1947;
        float _1955 = _1952 * _1948;
        float _1956 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_1926].xyz));
        float _3898 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1959 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1960 = dot(vec3(_317, _318, _319), vec3(_1953, _1954, _1955));
        float _3909 = isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0));
        float _1963 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1964 = dot(vec3(cbLight._m0[_1926].xyz), vec3(_1953, _1954, _1955));
        float _3920 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
        float _1968 = _1945 * _1945;
        float _1972 = ((_1963 * _1963) * (_1968 + (-1.0))) + 1.0;
        float _1979 = exp2(log2(1.0 - (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) * 5.0);
        float _1986 = 1.0 - _1945;
        float _1996 = (0.5 / (((_1722 * ((_1959 * _1986) + _1945)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _1986) + _1945) * _1959))) * _1959;
        float _3931 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        float _1998 = (isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1968 / ((_1972 * _1972) * 3.141590118408203125));
        float _1999 = isnan(1.0) ? _1568 : (isnan(_1568) ? 1.0 : min(_1568, 1.0));
        _1920 = (((((_1979 * _1744) + _473) * cbLight._m0[_1930].x) * _1998) * _1999) + _1856;
        _1922 = (((((_1979 * _1746) + _475) * cbLight._m0[_1930].y) * _1998) * _1999) + _1857;
        _1924 = (((((_1979 * _1747) + _476) * cbLight._m0[_1930].z) * _1998) * _1999) + _1858;
    }
    float _2034;
    float _2036;
    float _2038;
    if (_1648)
    {
        _2034 = _1920;
        _2036 = _1922;
        _2038 = _1924;
    }
    else
    {
        uint _2045 = _1553 + 3u;
        uint _2049 = _1553 + 11u;
        float _2063 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2045].w)) * _320) * 0.949999988079071044921875);
        float _2064 = _2063 * _2063;
        float _2065 = cbLight._m0[_2045].x + _398;
        float _2066 = cbLight._m0[_2045].y + _399;
        float _2067 = cbLight._m0[_2045].z + _400;
        float _2071 = inversesqrt(dot(vec3(_2065, _2066, _2067), vec3(_2065, _2066, _2067)));
        float _2072 = _2071 * _2065;
        float _2073 = _2071 * _2066;
        float _2074 = _2071 * _2067;
        float _2075 = dot(vec3(_317, _318, _319), vec3(cbLight._m0[_2045].xyz));
        float _3947 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
        float _2079 = dot(vec3(_317, _318, _319), vec3(_2072, _2073, _2074));
        float _3958 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2082 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _2083 = dot(vec3(cbLight._m0[_2045].xyz), vec3(_2072, _2073, _2074));
        float _3969 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
        float _2087 = _2064 * _2064;
        float _2091 = ((_2082 * _2082) * (_2087 + (-1.0))) + 1.0;
        float _2098 = exp2(log2(1.0 - (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0)))) * 5.0);
        float _2105 = 1.0 - _2064;
        float _2115 = (0.5 / (((_1722 * ((_2078 * _2105) + _2064)) + 9.9999999392252902907785028219223e-09) + (((_1722 * _2105) + _2064) * _2078))) * _2078;
        float _3980 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
        float _2117 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_2087 / ((_2091 * _2091) * 3.141590118408203125));
        float _2118 = isnan(1.0) ? _1569 : (isnan(_1569) ? 1.0 : min(_1569, 1.0));
        _2034 = (((((_2098 * _1744) + _473) * cbLight._m0[_2049].x) * _2117) * _2118) + _1920;
        _2036 = (((((_2098 * _1746) + _475) * cbLight._m0[_2049].y) * _2117) * _2118) + _1922;
        _2038 = (((((_2098 * _1747) + _476) * cbLight._m0[_2049].z) * _2117) * _2118) + _1924;
    }
    float _2253;
    float _2255;
    float _2257;
    float _2259;
    float _2261;
    float _2263;
    if (_1551.y == 0u)
    {
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2193;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2193;
        float _2196 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2193;
        uvec4 _2208 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2209 = _2208.x;
        uint _2220 = uint((float(_2208.y) * floor(float(uint(cbSceneParam._m0[85u].y * _407) / _2209))) + floor(float(uint(cbSceneParam._m0[85u].x * _406) / _2209)));
        float _2230 = (log2(_2196 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2231 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        uint _2234 = uint(isnan(14.0) ? _2231 : (isnan(_2231) ? 14.0 : min(_2231, 14.0)));
        uvec4 _2239 = texelFetch(g_lightClusterGridBuffer, int(((_2234 << 2u) + (_2220 << 6u)) >> 2u));
        uint _2240 = _2239.x;
        uint _2241 = _2208.z;
        float _2376;
        float _2378;
        float _2380;
        float _2382;
        float _2384;
        float _2386;
        if (((((1u << ((_2241 >> 4u) & 15u)) + 4294967295u) & _2240) == 0u) || ((_2241 & 240u) == 0u))
        {
            _2376 = 0.0;
            _2378 = 0.0;
            _2380 = 0.0;
            _2382 = 0.0;
            _2384 = 0.0;
            _2386 = 0.0;
        }
        else
        {
            float _2377;
            float _2379;
            float _2381;
            float _2383;
            float _2385;
            float _2387;
            float _2530 = 0.0;
            float _2531 = 0.0;
            float _2532 = 0.0;
            float _2533 = 0.0;
            float _2534 = 0.0;
            float _2535 = 0.0;
            uint _2536 = 0u;
            uint _2545;
            bool _2546;
            for (;;)
            {
                _2545 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2536 << 2u)) >> 2u)).x;
                _2546 = _2545 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2546)
                {
                    frontier_phi_61_pred = _2530;
                    frontier_phi_61_pred_1 = _2535;
                    frontier_phi_61_pred_2 = _2534;
                    frontier_phi_61_pred_3 = _2533;
                    frontier_phi_61_pred_4 = _2532;
                    frontier_phi_61_pred_5 = _2531;
                }
                else
                {
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    uint _2660;
                    _2654 = _2530;
                    _2655 = _2531;
                    _2656 = _2532;
                    _2657 = _2533;
                    _2658 = _2534;
                    _2659 = _2535;
                    _2660 = _2545;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    float _2590;
                    float _2591;
                    for (;;)
                    {
                        uint _2664 = uint(findLSB(_2660)) + (_2536 << 5u);
                        uint _2661 = (_2660 + 4294967295u) & _2660;
                        uint _2666 = _2664 * 48u;
                        vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 3u)).x));
                        uint _2686 = (_2664 * 48u) + 4u;
                        vec4 _2699 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 3u)).x));
                        uint _2705 = (_2664 * 48u) + 8u;
                        vec3 _2716 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2705)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2705 + 2u)).x));
                        float _2720 = _2680.x - _2194;
                        float _2721 = _2680.y - _2195;
                        float _2722 = _2680.z - _2196;
                        float _2723 = dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722));
                        float _2726 = inversesqrt(_2723);
                        float _2727 = _2726 * _2720;
                        float _2728 = _2726 * _2721;
                        float _2729 = _2726 * _2722;
                        float _2730 = dot(vec3(_428, _431, _434), vec3(_2727, _2728, _2729));
                        float _2735 = 1.0 - (_2723 * _2680.w);
                        float _4006 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
                        float _2736 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
                        float _2737 = sqrt(_2723) * _2699.w;
                        float _2740 = 1.39999997615814208984375 / (_2737 + 1.39999997615814208984375);
                        float _2741 = _2740 * _2740;
                        float _2744 = ((1.0 - _2741) * _2730) + _2741;
                        float _2747 = _2737 * _2737;
                        float _2751 = ((isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))) * _2736) / ((_2747 * 0.699999988079071044921875) + 1.0);
                        float _2755 = (-0.0) - _2194;
                        float _2756 = (-0.0) - _2195;
                        float _2757 = (-0.0) - _2196;
                        float _2761 = inversesqrt(dot(vec3(_2755, _2756, _2757), vec3(_2755, _2756, _2757)));
                        float _2762 = _2761 * _2755;
                        float _2763 = _2761 * _2756;
                        float _2764 = _2761 * _2757;
                        float _2772 = exp2(log2(1.0 / ((_2747 * 3.5) + 5.0)) * 0.25);
                        float _2773 = 1.0 - _504;
                        float _2780 = sqrt(1.0 - ((1.0 - (_2773 * _2773)) * (1.0 - (_2772 * _2772))));
                        float _2781 = _2780 * _2780;
                        float _2782 = _2781 * _2781;
                        float _2783 = _2762 + _2727;
                        float _2784 = _2763 + _2728;
                        float _2785 = _2764 + _2729;
                        float _2789 = inversesqrt(dot(vec3(_2783, _2784, _2785), vec3(_2783, _2784, _2785)));
                        float _2793 = dot(vec3(_428, _431, _434), vec3(_2762, _2763, _2764));
                        float _4022 = isnan(0.0) ? _2793 : (isnan(_2793) ? 0.0 : max(_2793, 0.0));
                        float _2796 = isnan(1.0) ? _4022 : (isnan(_4022) ? 1.0 : min(_4022, 1.0));
                        float _2797 = dot(vec3(_428, _431, _434), vec3(_2789 * _2783, _2789 * _2784, _2789 * _2785));
                        float _4033 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2800 = isnan(1.0) ? _4033 : (isnan(_4033) ? 1.0 : min(_4033, 1.0));
                        float _2804 = ((_2800 * _2800) * (_2782 + (-1.0))) + 1.0;
                        float _2805 = _2740 * _2781;
                        float _2806 = _2805 * _2805;
                        float _2809 = ((1.0 - _2806) * _2730) + _2806;
                        float _4044 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2810 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2811 = 1.0 - _2781;
                        float _2821 = (0.5 / (((_2810 * ((_2796 * _2811) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2810 * _2811) + _2781) * _2796))) * _2810;
                        float _4055 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2832 = (((_2782 * 3.1415927410125732421875) * (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0)))) / ((_2804 * _2804) * ((_2747 * 2.1991131305694580078125) + 3.141590118408203125))) * _2736;
                        _2589 = (_2751 * _2699.x) + _2657;
                        _2590 = (_2751 * _2699.y) + _2658;
                        _2591 = (_2751 * _2699.z) + _2659;
                        _2586 = (_2832 * _2716.x) + _2654;
                        _2587 = (_2832 * _2716.y) + _2655;
                        _2588 = (_2832 * _2716.z) + _2656;
                        if (_2661 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2654 = _2586;
                            _2655 = _2587;
                            _2656 = _2588;
                            _2657 = _2589;
                            _2658 = _2590;
                            _2659 = _2591;
                            _2660 = _2661;
                        }
                    }
                    frontier_phi_61_pred = _2586;
                    frontier_phi_61_pred_1 = _2591;
                    frontier_phi_61_pred_2 = _2590;
                    frontier_phi_61_pred_3 = _2589;
                    frontier_phi_61_pred_4 = _2588;
                    frontier_phi_61_pred_5 = _2587;
                }
                _2377 = frontier_phi_61_pred;
                _2387 = frontier_phi_61_pred_1;
                _2385 = frontier_phi_61_pred_2;
                _2383 = frontier_phi_61_pred_3;
                _2381 = frontier_phi_61_pred_4;
                _2379 = frontier_phi_61_pred_5;
                uint _2537 = _2536 + 1u;
                if (_2537 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2530 = _2377;
                    _2531 = _2379;
                    _2532 = _2381;
                    _2533 = _2383;
                    _2534 = _2385;
                    _2535 = _2387;
                    _2536 = _2537;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2376 = _2377;
            _2378 = _2379;
            _2380 = _2381;
            _2382 = _2383;
            _2384 = _2385;
            _2386 = _2387;
        }
        uvec4 _2390 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2391 = _2390.z;
        uint _2393 = (_2391 >> 8u) & 15u;
        float _2498;
        float _2500;
        float _2502;
        float _2504;
        float _2506;
        float _2508;
        if (((4294967295u << _2393) & _2240) == 0u)
        {
            _2498 = _2376;
            _2500 = _2378;
            _2502 = _2380;
            _2504 = _2382;
            _2506 = _2384;
            _2508 = _2386;
        }
        else
        {
            float _2523 = inversesqrt(dot(vec3(_2194, _2195, _2196), vec3(_2194, _2195, _2196)));
            float _2524 = _2523 * _2194;
            float _2525 = _2523 * _2195;
            float _2526 = _2523 * _2196;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2393 < ((_2391 >> 12u) & 15u))
            {
                float _2499;
                float _2501;
                float _2503;
                float _2505;
                float _2507;
                float _2509;
                float _2637 = _2376;
                float _2638 = _2378;
                float _2639 = _2380;
                float _2640 = _2382;
                float _2641 = _2384;
                float _2642 = _2386;
                uint _2643 = _2393;
                uint _2652;
                bool _2653;
                for (;;)
                {
                    _2652 = texelFetch(g_lightClassification, int((((_2234 << 5u) + (_2220 << 9u)) + (_2643 << 2u)) >> 2u)).x;
                    _2653 = _2652 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2653)
                    {
                        frontier_phi_67_pred = _2640;
                        frontier_phi_67_pred_1 = _2641;
                        frontier_phi_67_pred_2 = _2642;
                        frontier_phi_67_pred_3 = _2639;
                        frontier_phi_67_pred_4 = _2638;
                        frontier_phi_67_pred_5 = _2637;
                    }
                    else
                    {
                        float _2837;
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _3133;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _2850 = _2637;
                        float _2851 = _2638;
                        float _2852 = _2639;
                        float _2853 = _2640;
                        float _2854 = _2641;
                        float _2855 = _2642;
                        uint _2856 = _2652;
                        uint _2857;
                        vec4 _2882;
                        float _2883;
                        vec4 _2898;
                        vec3 _2910;
                        vec4 _2926;
                        vec4 _2942;
                        float _2989;
                        bool _2990;
                        for (;;)
                        {
                            uint _2867 = ((_2643 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2856));
                            _2857 = (_2856 + 4294967295u) & _2856;
                            uint _2869 = _2867 * 40u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            _2883 = _2882.w;
                            uint _2885 = (_2867 * 40u) + 4u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            uint _2900 = (_2867 * 40u) + 8u;
                            _2910 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x));
                            uint _2913 = (_2867 * 40u) + 16u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2929 = (_2867 * 40u) + 20u;
                            _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2945 = (_2867 * 40u) + 24u;
                            vec4 _2958 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2945)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2945 + 3u)).x));
                            uint _2964 = (_2867 * 40u) + 28u;
                            vec4 _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            _2989 = fma(_2196, _2977.z, fma(_2195, _2977.y, _2977.x * _2194)) + _2977.w;
                            _2990 = !((fma(_2196, _2958.z, fma(_2195, _2958.y, _2958.x * _2194)) + _2958.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2990)
                            {
                                float _3017 = _2882.x - _2194;
                                float _3018 = _2882.y - _2195;
                                float _3019 = _2882.z - _2196;
                                float _3020 = dot(vec3(_3017, _3018, _3019), vec3(_3017, _3018, _3019));
                                float _3023 = inversesqrt(_3020);
                                float _3024 = _3023 * _3017;
                                float _3025 = _3023 * _3018;
                                float _3026 = _3023 * _3019;
                                float _3030 = 1.0 - (_3020 / (_2883 * _2883));
                                float _4066 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                                float _3031 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                                float _3035 = sqrt(_3020) * _2898.w;
                                float _3037 = 1.39999997615814208984375 / (_3035 + 1.39999997615814208984375);
                                float _3038 = _3037 * _3037;
                                float _3041 = ((1.0 - _3038) * dot(vec3(_3024, _3025, _3026), vec3(_428, _431, _434))) + _3038;
                                float _3044 = _3035 * _3035;
                                float _3048 = (fma(_2196, _2926.z, fma(_2195, _2926.y, _2926.x * _2194)) + _2926.w) / _2989;
                                float _3049 = (fma(_2196, _2942.z, fma(_2195, _2942.y, _2942.x * _2194)) + _2942.w) / _2989;
                                float _3053 = 1.0 - dot(vec2(_3048, _3049), vec2(_3048, _3049));
                                float _4082 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                                float _3054 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
                                float _3055 = _3054 * (((isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0))) * _3031) / ((_3044 * 0.699999988079071044921875) + 1.0));
                                float _3067 = exp2(log2(1.0 / ((_3044 * 3.5) + 5.0)) * 0.25);
                                float _3068 = 1.0 - _504;
                                float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                                float _3076 = _3075 * _3075;
                                float _3077 = _3076 * _3076;
                                float _3078 = _3024 - _2524;
                                float _3079 = _3025 - _2525;
                                float _3080 = _3026 - _2526;
                                float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                                float _3088 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2524, (-0.0) - _2525, (-0.0) - _2526));
                                float _4093 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                                float _3091 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
                                float _3092 = dot(vec3(_428, _431, _434), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                                float _4104 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3095 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                                float _3100 = _3037 * _3076;
                                float _3101 = _3100 * _3100;
                                float _3107 = ((1.0 - _3101) * dot(vec3(_428, _431, _434), vec3(_3024, _3025, _3026))) + _3101;
                                float _4115 = isnan(0.0) ? _3107 : (isnan(_3107) ? 0.0 : max(_3107, 0.0));
                                float _3108 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3109 = 1.0 - _3076;
                                float _3119 = (0.5 / (((_3108 * ((_3091 * _3109) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3108 * _3109) + _3076) * _3091))) * _3108;
                                float _4126 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3129 = (_3054 * _3031) * (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0)))) / ((_3099 * _3099) * ((_3044 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3129 * _2910.x;
                                frontier_phi_73_pred_1 = _3129 * _2910.y;
                                frontier_phi_73_pred_2 = _3055 * _2898.z;
                                frontier_phi_73_pred_3 = _3055 * _2898.y;
                                frontier_phi_73_pred_4 = _3055 * _2898.x;
                                frontier_phi_73_pred_5 = _3129 * _2910.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3133 = frontier_phi_73_pred;
                            _3134 = frontier_phi_73_pred_1;
                            _3138 = frontier_phi_73_pred_2;
                            _3137 = frontier_phi_73_pred_3;
                            _3136 = frontier_phi_73_pred_4;
                            _3135 = frontier_phi_73_pred_5;
                            _2840 = _3136 + _2853;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2837 = _3133 + _2850;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            if (_2857 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2850 = _2837;
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2857;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2840;
                        frontier_phi_67_pred_1 = _2841;
                        frontier_phi_67_pred_2 = _2842;
                        frontier_phi_67_pred_3 = _2839;
                        frontier_phi_67_pred_4 = _2838;
                        frontier_phi_67_pred_5 = _2837;
                    }
                    _2505 = frontier_phi_67_pred;
                    _2507 = frontier_phi_67_pred_1;
                    _2509 = frontier_phi_67_pred_2;
                    _2503 = frontier_phi_67_pred_3;
                    _2501 = frontier_phi_67_pred_4;
                    _2499 = frontier_phi_67_pred_5;
                    uint _2644 = _2643 + 1u;
                    if (_2644 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2637 = _2499;
                        _2638 = _2501;
                        _2639 = _2503;
                        _2640 = _2505;
                        _2641 = _2507;
                        _2642 = _2509;
                        _2643 = _2644;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2507;
                frontier_phi_55_56_ladder_1 = _2509;
                frontier_phi_55_56_ladder_2 = _2505;
                frontier_phi_55_56_ladder_3 = _2503;
                frontier_phi_55_56_ladder_4 = _2501;
                frontier_phi_55_56_ladder_5 = _2499;
            }
            else
            {
                frontier_phi_55_56_ladder = _2384;
                frontier_phi_55_56_ladder_1 = _2386;
                frontier_phi_55_56_ladder_2 = _2382;
                frontier_phi_55_56_ladder_3 = _2380;
                frontier_phi_55_56_ladder_4 = _2378;
                frontier_phi_55_56_ladder_5 = _2376;
            }
            _2498 = frontier_phi_55_56_ladder_5;
            _2500 = frontier_phi_55_56_ladder_4;
            _2502 = frontier_phi_55_56_ladder_3;
            _2504 = frontier_phi_55_56_ladder_2;
            _2506 = frontier_phi_55_56_ladder;
            _2508 = frontier_phi_55_56_ladder_1;
        }
        float _2513 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2253 = (_2513 * _2504) + _1686;
        _2255 = (_2513 * _2506) + _1688;
        _2257 = (_2513 * _2508) + _1690;
        _2259 = ((_2498 * _473) * _2513) + _2034;
        _2261 = ((_2500 * _475) * _2513) + _2036;
        _2263 = ((_2502 * _476) * _2513) + _2038;
    }
    else
    {
        _2253 = _1686;
        _2255 = _1688;
        _2257 = _1690;
        _2259 = _2034;
        _2261 = _2036;
        _2263 = _2038;
    }
    uint _2269 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _2277 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _299.x) * cbInstanceData._m0[_2269].x;
    float _2280 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _299.y) * cbInstanceData._m0[_2269].y;
    float _2283 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _299.z) * cbInstanceData._m0[_2269].z;
    float _4142 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4153 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4164 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2300 = (((isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0))) * (_2253 + ((isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0))) * _488))) + ((_2259 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + _2277;
    float _2302 = (_2280 + ((_2261 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2255 + ((isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0))) * _488)));
    float _2304 = (_2283 + ((_2263 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _1298)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2257 + ((isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0))) * _488)));
    float _4190 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2317 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
    uint _2318 = _447 + 6u;
    float _2326 = _406 / cbSceneParam._m0[86u].x;
    float _2327 = _407 / cbSceneParam._m0[86u].y;
    vec4 _2341 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, (log2((isnan(cbSceneParam._m0[77u].w) ? _340 : (isnan(_340) ? cbSceneParam._m0[77u].w : min(_340, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2343 = _2341.x;
    float _2344 = _2341.y;
    float _2345 = _2341.z;
    float _2346 = _2341.w;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    if (_340 > cbSceneParam._m0[78u].w)
    {
        float _2401 = isnan(_340) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _340 : min(cbSceneParam._m0[80u].w, _340));
        float _2402 = _2401 / _340;
        float _2413 = _2402 * _391;
        float _2414 = _392 * _2402;
        float _2415 = (-0.0) - _2414;
        float _2417 = _2402 * _393;
        float _2419 = (cbSceneParam._m0[77u].w * _2415) / _2401;
        float _2420 = _2419 + cbSceneParam._m0[79u].w;
        float _2421 = cbSceneParam._m0[79u].w - _2414;
        float _2427 = sqrt(((_2413 * _2413) + (_2414 * _2414)) + (_2417 * _2417));
        float _2430 = (1.0 - (cbSceneParam._m0[77u].w / _2401)) * _2427;
        float _2435 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2437 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2599;
        if (abs((_2415 - _2419) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2599 = ((((_2420 > 0.0) ? exp2(_2435 * _2420) : (2.0 - exp2(_2437 * _2420))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2430;
        }
        else
        {
            float _2559 = 1.0 / cbSceneParam._m0[80u].x;
            float _2560 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : max(_2420, _2421));
            float _2561 = isnan(_2421) ? _2420 : (isnan(_2420) ? _2421 : min(_2420, _2421));
            float _2570 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : min(_2560, 0.0));
            float _2571 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : min(_2561, 0.0));
            _2599 = ((abs(_2427 / _2415) * cbSceneParam._m0[80u].y) * ((((_2570 - _2571) * 2.0) - ((exp2(_2435 * (isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0)))) - exp2(_2435 * (isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0))))) * _2559)) - ((exp2(_2437 * _2570) - exp2(_2437 * _2571)) * _2559))) + (_2430 * cbSceneParam._m0[80u].z);
        }
        vec4 _2601 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2326, _2327, 1.0), 0.0);
        float _2610 = exp2((_2599 * (-1.44269502162933349609375)) * (1.0 - _2601.w));
        float _2611 = log2(_2610);
        float _2627 = log2(_2346);
        _2439 = (exp2(_2627 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2611 * cbSceneParam._m0[78u].x)) * _2601.x) / cbSceneParam._m0[78u].x)) + _2343;
        _2441 = (exp2(_2627 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2611 * cbSceneParam._m0[78u].y)) * _2601.y) / cbSceneParam._m0[78u].y)) + _2344;
        _2443 = (exp2(_2627 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2611 * cbSceneParam._m0[78u].z)) * _2601.z) / cbSceneParam._m0[78u].z)) + _2345;
        _2445 = _2610 * _2346;
    }
    else
    {
        _2439 = _2343;
        _2441 = _2344;
        _2443 = _2345;
        _2445 = _2346;
    }
    float _2457 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2458 = _2457 == 3.0;
    float _2459 = log2(_2445);
    float _2463 = exp2(_2459 * cbSceneParam._m0[78u].x);
    float _2464 = exp2(_2459 * cbSceneParam._m0[78u].y);
    float _2465 = exp2(_2459 * cbSceneParam._m0[78u].z);
    float _2466 = _2463 * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2467 = _2464 * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2468 = _2465 * (isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0)));
    float _2477 = (_2457 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2477 * (_2458 ? _2466 : (_2466 + (cbSceneParam._m0[72u].w * _2439)));
    SV_Target.y = _2477 * (_2458 ? _2467 : (_2467 + (cbSceneParam._m0[72u].w * _2441)));
    SV_Target.z = _2477 * (_2458 ? _2468 : (_2468 + (cbSceneParam._m0[72u].w * _2443)));
    SV_Target.w = cbInstanceData._m0[_2318].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2277) * _2317) * _2463) * _2477;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2280) * _2317) * _2464) * _2477;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2283) * _2317) * _2465) * _2477;
    SV_Target_1.w = cbInstanceData._m0[_2318].w;
}


