#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _844;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _220 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _226 = _220.x * cbMtdParam._m0[9u].x;
    float _227 = _220.y * cbMtdParam._m0[9u].y;
    float _228 = _220.z * cbMtdParam._m0[9u].z;
    vec4 _244 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _248 = _244.z;
    float _252 = (_244.x * 2.0) + (-1.0);
    float _254 = (_244.y * 2.0) + (-1.0);
    float _255 = dot(vec2(_252, _254), vec2(_252, _254));
    float _3224 = isnan(0.0) ? _255 : (isnan(_255) ? 0.0 : max(_255, 0.0));
    float _261 = sqrt(1.0 - (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))));
    vec4 _280 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _287 = fma(_261, _190 * NORMAL.x, fma(_254, _197 * TANGENT.x, (_183 * _176) * _252));
    float _290 = fma(_261, _190 * NORMAL.y, fma(_254, _197 * TANGENT.y, (_183 * _177) * _252));
    float _293 = fma(_261, _190 * NORMAL.z, fma(_254, _197 * TANGENT.z, (_183 * _178) * _252));
    float _297 = inversesqrt(dot(vec3(_287, _290, _293), vec3(_287, _290, _293)));
    float _298 = _297 * _287;
    float _299 = _297 * _290;
    float _300 = _297 * _293;
    float _3235 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _301 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    float _3246 = isnan(0.0) ? _226 : (isnan(_226) ? 0.0 : max(_226, 0.0));
    float _3257 = isnan(0.0) ? _227 : (isnan(_227) ? 0.0 : max(_227, 0.0));
    float _3268 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3279 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _305 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
    float _321 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _362 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _372 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _362);
    float _373 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _362);
    float _374 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _362);
    float _378 = inversesqrt(dot(vec3(_372, _373, _374), vec3(_372, _373, _374)));
    float _379 = _372 * _378;
    float _380 = _373 * _378;
    float _381 = _374 * _378;
    float _387 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _388 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _409 = fma(_300, cbSceneParam._m0[5u].z, fma(_299, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _298));
    float _412 = fma(_300, cbSceneParam._m0[6u].z, fma(_299, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _298));
    float _415 = fma(_300, cbSceneParam._m0[7u].z, fma(_299, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _298));
    uint _428 = uint(roundEven(NORMAL.w)) * 13u;
    uint _430 = _428 + 9u;
    uint _431 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _437 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0)))) * cbInstanceData._m0[_431].x;
    float _438 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0)))) * cbInstanceData._m0[_431].y;
    float _439 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_431].z;
    float _3290 = isnan(0.0) ? _437 : (isnan(_437) ? 0.0 : max(_437, 0.0));
    float _440 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _3301 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _441 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _443 = 1.0 - _305;
    float _444 = _440 * _443;
    float _445 = _441 * _443;
    float _446 = _442 * _443;
    float _451 = (_440 + (-0.039999999105930328369140625)) * _305;
    float _452 = (_441 + (-0.039999999105930328369140625)) * _305;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _305;
    float _454 = _451 + 0.039999999105930328369140625;
    float _456 = _452 + 0.039999999105930328369140625;
    float _457 = _453 + 0.039999999105930328369140625;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _387, cbSceneParam._m0[86u].y * _388));
    float _469 = _466.x * TEXCOORD.z;
    float _470 = dot(vec3(_298, _299, _300), vec3(_379, _380, _381));
    float _473 = _470 * 2.0;
    float _477 = (_473 * _298) - _379;
    float _478 = (_473 * _299) - _380;
    float _479 = (_473 * _300) - _381;
    float _483 = abs(dot(vec3(_379, _380, _381), vec3(_298, _299, _300)));
    float _3323 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _485 = sqrt(_301);
    float _498 = exp2((_485 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_485 * 3.0));
    float _504 = (1.0 - _498) * ((_485 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _505 = _498 * _485;
    float _533 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _537 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _541 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _843;
    float _845;
    float _846;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _568 = fma(_541, cbModelParam._m0[26u].z, fma(_537, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _533));
        float _572 = fma(_541, cbModelParam._m0[27u].z, fma(_537, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _533));
        float _576 = fma(_541, cbModelParam._m0[28u].z, fma(_537, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _533));
        float _601 = _533 + _298;
        float _602 = _537 + _299;
        float _603 = _541 + _300;
        float _613 = fma(_603, cbModelParam._m0[26u].z, fma(_602, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _601)) - _568;
        float _614 = fma(_603, cbModelParam._m0[27u].z, fma(_602, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _601)) - _572;
        float _615 = fma(_603, cbModelParam._m0[28u].z, fma(_602, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _601)) - _576;
        float _619 = inversesqrt(dot(vec3(_613, _614, _615), vec3(_613, _614, _615)));
        float _632 = ((_619 * _613) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_568 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _633 = ((_619 * _614) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_572 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _634 = ((_619 * _615) / cbModelParam._m0[34u].z) + ((((((_576 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _637 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_632, _633, _634), 0.0);
        float _671 = exp2((_637.w + (-0.5)) * 20.0) * 2.0;
        float _672 = _671 * (_637.x + (-0.5));
        float _673 = _671 * (_637.y + (-0.5));
        float _674 = _671 * (_637.z + (-0.5));
        float _681 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _682 = _681 * (_644.x + (-0.5));
        float _683 = _681 * (_644.y + (-0.5));
        float _684 = _681 * (_644.z + (-0.5));
        float _691 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _692 = _691 * (_651.x + (-0.5));
        float _693 = _691 * (_651.y + (-0.5));
        float _694 = _691 * (_651.z + (-0.5));
        float _701 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _702 = _701 * (_658.x + (-0.5));
        float _703 = _701 * (_658.y + (-0.5));
        float _704 = _701 * (_658.z + (-0.5));
        float _705 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
        float _706 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = _672 * 0.5;
        float _709 = _682 * 0.5;
        float _710 = _692 * 0.5;
        float _711 = dot(vec3(_708, _709, _710), vec3(_708, _709, _710));
        float _716 = (_711 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_711);
        float _725 = (dot(vec3(_298, _299, _300), vec3(_716 * _708, _716 * _709, _716 * _710)) + 1.0) * 0.5;
        float _3349 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        float _735 = sqrt(((_709 * _709) + (_708 * _708)) + (_710 * _710)) / (_705 + 9.9999997473787516355514526367188e-06);
        float _3360 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _736 = isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0));
        float _737 = _736 * 2.0;
        float _741 = (1.0 - _736) / (_736 + 1.0);
        float _3371 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
        float _742 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _751 = ((((1.0 - _742) * (_737 + 2.0)) * exp2(log2(isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * (_737 + 1.0))) + _742) * _705;
        float _752 = _673 * 0.5;
        float _753 = _683 * 0.5;
        float _754 = _693 * 0.5;
        float _755 = dot(vec3(_752, _753, _754), vec3(_752, _753, _754));
        float _760 = (_755 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_755);
        float _768 = (dot(vec3(_298, _299, _300), vec3(_760 * _752, _760 * _753, _760 * _754)) + 1.0) * 0.5;
        float _3382 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _777 = sqrt(((_753 * _753) + (_752 * _752)) + (_754 * _754)) / (_706 + 9.9999997473787516355514526367188e-06);
        float _3393 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
        float _778 = isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0));
        float _779 = _778 * 2.0;
        float _783 = (1.0 - _778) / (_778 + 1.0);
        float _3404 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _793 = ((((1.0 - _784) * (_779 + 2.0)) * exp2(log2(isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0))) * (_779 + 1.0))) + _784) * _706;
        float _794 = _674 * 0.5;
        float _795 = _684 * 0.5;
        float _796 = _694 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _810 = (dot(vec3(_298, _299, _300), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3415 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _819 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3426 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3437 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * (_821 + 1.0))) + _826) * _707;
        _843 = _674;
        _845 = _673;
        _846 = _672;
        _847 = _684;
        _848 = _683;
        _849 = _682;
        _850 = _694;
        _851 = _693;
        _852 = _692;
        _853 = _707;
        _854 = _706;
        _855 = _705;
        _856 = cbModelParam._m0[36u].z * (isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0)));
        _857 = cbModelParam._m0[36u].z * (isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0)));
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
    }
    else
    {
        _843 = _844;
        _845 = _844;
        _846 = _844;
        _847 = _844;
        _848 = _844;
        _849 = _844;
        _850 = _844;
        _851 = _844;
        _852 = _844;
        _853 = _844;
        _854 = _844;
        _855 = _844;
        _856 = 0.0;
        _857 = 0.0;
        _858 = 0.0;
    }
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _884 = fma(_541, cbModelParam._m0[30u].z, fma(_537, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _533));
        float _888 = fma(_541, cbModelParam._m0[31u].z, fma(_537, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _533));
        float _892 = fma(_541, cbModelParam._m0[32u].z, fma(_537, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _533));
        float _915 = _533 + _298;
        float _916 = _537 + _299;
        float _917 = _541 + _300;
        float _927 = fma(_917, cbModelParam._m0[30u].z, fma(_916, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _915)) - _884;
        float _928 = fma(_917, cbModelParam._m0[31u].z, fma(_916, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _915)) - _888;
        float _929 = fma(_917, cbModelParam._m0[32u].z, fma(_916, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _915)) - _892;
        float _933 = inversesqrt(dot(vec3(_927, _928, _929), vec3(_927, _928, _929)));
        float _946 = ((_933 * _927) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_884 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_933 * _928) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_888 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_933 * _929) / cbModelParam._m0[35u].z) + ((((((_892 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_946, _947, _948), 0.0);
        float _983 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_950.x + (-0.5));
        float _985 = _983 * (_950.y + (-0.5));
        float _986 = _983 * (_950.z + (-0.5));
        float _993 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_957.x + (-0.5));
        float _995 = _993 * (_957.y + (-0.5));
        float _996 = _993 * (_957.z + (-0.5));
        float _1003 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_964.x + (-0.5));
        float _1005 = _1003 * (_964.y + (-0.5));
        float _1006 = _1003 * (_964.z + (-0.5));
        float _1013 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = _1013 * (_971.x + (-0.5));
        float _1015 = _1013 * (_971.y + (-0.5));
        float _1016 = _1013 * (_971.z + (-0.5));
        float _1017 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = _984 * 0.5;
        float _1021 = _994 * 0.5;
        float _1022 = _1004 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_298, _299, _300), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3478 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_1017 + 9.9999997473787516355514526367188e-06);
        float _3489 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3500 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * (_1047 + 1.0))) + _1052) * _1017;
        float _1062 = _985 * 0.5;
        float _1063 = _995 * 0.5;
        float _1064 = _1005 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_298, _299, _300), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3511 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3522 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3533 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * (_1089 + 1.0))) + _1094) * _1018;
        float _1104 = _986 * 0.5;
        float _1105 = _996 * 0.5;
        float _1106 = _1006 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_298, _299, _300), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3566 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1131 + 1.0))) + _1136) * _1019;
        _1153 = _986;
        _1154 = _985;
        _1155 = _984;
        _1156 = _996;
        _1157 = _995;
        _1158 = _994;
        _1159 = _1006;
        _1160 = _1005;
        _1161 = _1004;
        _1162 = _1019;
        _1163 = _1018;
        _1164 = _1017;
        _1165 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1166 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
    }
    else
    {
        _1153 = _844;
        _1154 = _844;
        _1155 = _844;
        _1156 = _844;
        _1157 = _844;
        _1158 = _844;
        _1159 = _844;
        _1160 = _844;
        _1161 = _844;
        _1162 = _844;
        _1163 = _844;
        _1164 = _844;
        _1165 = 0.0;
        _1166 = 0.0;
        _1167 = 0.0;
    }
    float _1177 = (cbModelParam._m0[1u].x * (_1165 - _856)) + _856;
    float _1178 = (cbModelParam._m0[1u].x * (_1166 - _857)) + _857;
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1200 = fma(_1179, cbSceneParam._m0[89u].z, fma(_1178, cbSceneParam._m0[89u].y, _1177 * cbSceneParam._m0[89u].x));
    float _1203 = fma(_1179, cbSceneParam._m0[90u].z, fma(_1178, cbSceneParam._m0[90u].y, _1177 * cbSceneParam._m0[90u].x));
    float _1206 = fma(_1179, cbSceneParam._m0[91u].z, fma(_1178, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1177));
    float _1221 = _477 * 0.5;
    float _1222 = _478 * 0.5;
    float _1223 = _479 * 0.5;
    float _1224 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1227 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1154, _1157, _1160, _1163));
    float _1230 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_1153, _1156, _1159, _1162));
    float _1264;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1237 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_843, _847, _850, _853));
        float _1241 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_845, _848, _851, _854));
        float _1245 = dot(vec4(_1221, _1222, _1223, 1.0), vec4(_846, _849, _852, _855));
        float _1252 = dot(vec4(cbModelParam._m0[39u]), vec4(_1221, _1222, _1223, 1.0));
        _1264 = dot(vec3(isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)), isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1252) ? 0.0 : (isnan(0.0) ? _1252 : max(0.0, _1252))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1264 = 1.0;
    }
    float _1275;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1266 = dot(vec4(cbModelParam._m0[40u]), vec4(_1221, _1222, _1223, 1.0));
        _1275 = dot(vec3(isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)), isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0)), isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1266) ? 0.0 : (isnan(0.0) ? _1266 : max(0.0, _1266))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1275 = 1.0;
    }
    float _1279 = (_1275 * cbModelParam._m0[1u].x) + (_1264 * (1.0 - cbModelParam._m0[1u].x));
    float _1289 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _301);
    float _1290 = isnan(_1289) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1289 : min(cbModelParam._m0[25u].z, _1289));
    float _1372;
    float _1374;
    float _1376;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1339 = fma(_541, cbModelParam._m0[13u].z, fma(_537, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _533)) + cbModelParam._m0[13u].w;
        float _1343 = fma(_541, cbModelParam._m0[14u].z, fma(_537, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _533)) + cbModelParam._m0[14u].w;
        float _1347 = fma(_541, cbModelParam._m0[15u].z, fma(_537, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _533)) + cbModelParam._m0[15u].w;
        float _1350 = fma(_479, cbModelParam._m0[13u].z, fma(_478, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477));
        float _1353 = fma(_479, cbModelParam._m0[14u].z, fma(_478, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477));
        float _1356 = fma(_479, cbModelParam._m0[15u].z, fma(_478, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477));
        float _1384;
        if (_1350 > 0.0)
        {
            _1384 = abs((1.0 - _1339) / _1350);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1350 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1339 + 1.0) / _1350);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1384 = frontier_phi_14_12_ladder;
        }
        float _1591;
        if (_1353 > 0.0)
        {
            _1591 = abs((1.0 - _1343) / _1353);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1343 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1591 = frontier_phi_23_19_ladder;
        }
        float _1845;
        if (_1356 > 0.0)
        {
            _1845 = abs((1.0 - _1347) / _1356);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1347 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1845 = frontier_phi_35_30_ladder;
        }
        float _1847 = isnan(_1591) ? _1384 : (isnan(_1384) ? _1591 : min(_1384, _1591));
        float _1848 = isnan(_1845) ? _1847 : (isnan(_1847) ? _1845 : min(_1847, _1845));
        float _1852 = (_1848 * _1350) + _1339;
        float _1853 = (_1848 * _1353) + _1343;
        float _1854 = (_1848 * _1356) + _1347;
        float _1855 = _1848 * 9.9999997473787516355514526367188e-05;
        float _1857 = (-1.0) - _1855;
        float _1859 = _1855 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1854 > _1859) || ((_1854 < _1857) || ((_1853 > _1859) || ((_1853 < _1857) || ((_1852 < _1857) || (_1852 > _1859))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1982 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1854, cbModelParam._m0[9u].z, fma(_1853, cbModelParam._m0[9u].y, _1852 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1854, cbModelParam._m0[10u].z, fma(_1853, cbModelParam._m0[10u].y, _1852 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1854, cbModelParam._m0[11u].z, fma(_1853, cbModelParam._m0[11u].y, _1852 * cbModelParam._m0[11u].x))), _1290);
            frontier_phi_13_35_ladder = _1982.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _1982.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _1982.x * cbModelParam._m0[1u].y;
        }
        _1372 = frontier_phi_13_35_ladder_2;
        _1374 = frontier_phi_13_35_ladder_1;
        _1376 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1360 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_477, _478, _479), _1290);
        _1372 = _1360.x * cbModelParam._m0[1u].y;
        _1374 = _1360.y * cbModelParam._m0[1u].y;
        _1376 = _1360.z * cbModelParam._m0[1u].y;
    }
    float _1380 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _301);
    float _1381 = isnan(_1380) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1380 : min(cbModelParam._m0[25u].w, _1380));
    float _1474;
    float _1476;
    float _1478;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1438 = fma(_541, cbModelParam._m0[21u].z, fma(_537, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _533)) + cbModelParam._m0[21u].w;
        float _1442 = fma(_541, cbModelParam._m0[22u].z, fma(_537, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _533)) + cbModelParam._m0[22u].w;
        float _1446 = fma(_541, cbModelParam._m0[23u].z, fma(_537, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _533)) + cbModelParam._m0[23u].w;
        float _1449 = fma(_479, cbModelParam._m0[21u].z, fma(_478, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477));
        float _1452 = fma(_479, cbModelParam._m0[22u].z, fma(_478, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477));
        float _1455 = fma(_479, cbModelParam._m0[23u].z, fma(_478, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477));
        float _1596;
        if (_1449 > 0.0)
        {
            _1596 = abs((1.0 - _1438) / _1449);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1449 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1438 + 1.0) / _1449);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1596 = frontier_phi_25_21_ladder;
        }
        float _1872;
        if (_1452 > 0.0)
        {
            _1872 = abs((1.0 - _1442) / _1452);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1452 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1442 + 1.0) / _1452);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1872 = frontier_phi_37_32_ladder;
        }
        float _2085;
        if (_1455 > 0.0)
        {
            _2085 = abs((1.0 - _1446) / _1455);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1455 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1446 + 1.0) / _1455);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2085 = frontier_phi_46_43_ladder;
        }
        float _2087 = isnan(_1872) ? _1596 : (isnan(_1596) ? _1872 : min(_1596, _1872));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1449) + _1438;
        float _2093 = (_2088 * _1452) + _1442;
        float _2094 = (_2088 * _1455) + _1446;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2095;
        float _2098 = _2095 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2094 > _2098) || ((_2094 < _2096) || ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 < _2096) || (_2092 > _2098))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2328 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2094, cbModelParam._m0[17u].z, fma(_2093, cbModelParam._m0[17u].y, _2092 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2094, cbModelParam._m0[18u].z, fma(_2093, cbModelParam._m0[18u].y, _2092 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2094, cbModelParam._m0[19u].z, fma(_2093, cbModelParam._m0[19u].y, _2092 * cbModelParam._m0[19u].x))), _1381);
            frontier_phi_22_46_ladder = _2328.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2328.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2328.x * cbModelParam._m0[1u].z;
        }
        _1474 = frontier_phi_22_46_ladder_2;
        _1476 = frontier_phi_22_46_ladder_1;
        _1478 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1458 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_477, _478, _479), _1381);
        _1474 = _1458.x * cbModelParam._m0[1u].z;
        _1476 = _1458.y * cbModelParam._m0[1u].z;
        _1478 = _1458.z * cbModelParam._m0[1u].z;
    }
    float _1491 = (((_504 * _454) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1474 - _1372)) + _1372);
    float _1493 = (((_504 * _456) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1495 = (((_504 * _457) + _505) * _469) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1498 = fma(_1495, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1491 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1495, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1491 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1495, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, _1491 * cbSceneParam._m0[91u].x));
    uvec4 _1514 = floatBitsToUint(cbInstanceData._m0[_428 + 5u]);
    uint _1516 = _1514.x * 14u;
    uint _1517 = _1516 + 13u;
    float _1524 = _469 + (-1.0);
    float _1529 = (cbLight._m0[_1517].x * _1524) + 1.0;
    float _1530 = (cbLight._m0[_1517].y * _1524) + 1.0;
    float _1531 = (cbLight._m0[_1517].z * _1524) + 1.0;
    float _1532 = (cbLight._m0[_1517].w * _1524) + 1.0;
    uint _1533 = _1516 + 5u;
    float _1539 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
    uint _1543 = _1516 + 4u;
    float _1550 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1554 = _1516 | 1u;
    float _1565 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_298, _299, _300));
    float _1568 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_298, _299, _300));
    float _3702 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
    float _3713 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1573 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.3183098733425140380859375;
    float _1575 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1582 = ((cbLight._m0[_1533].x * _1539) * _1575) + ((cbLight._m0[_1543].x * _1550) * _1573);
    float _1583 = ((_1539 * cbLight._m0[_1533].y) * _1575) + ((_1550 * cbLight._m0[_1543].y) * _1573);
    float _1584 = ((_1539 * cbLight._m0[_1533].z) * _1575) + ((_1550 * cbLight._m0[_1543].z) * _1573);
    uvec4 _1588 = floatBitsToUint(cbLight._m0[_1516 + 12u]);
    bool _1590 = _1588.x == 0u;
    float _1601;
    float _1603;
    float _1605;
    if (_1590)
    {
        _1601 = _1582;
        _1603 = _1583;
        _1605 = _1584;
    }
    else
    {
        uint _1609 = _1516 + 6u;
        float _1625 = (dot(vec3(cbLight._m0[_1516 + 2u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1626 = _1625 * _1625;
        float _3724 = isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0));
        float _1627 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _1628 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1601 = (((cbLight._m0[_1609].x * 0.3183098733425140380859375) * _1627) * _1628) + _1582;
        _1603 = (((cbLight._m0[_1609].y * 0.3183098733425140380859375) * _1627) * _1628) + _1583;
        _1605 = (((cbLight._m0[_1609].z * 0.3183098733425140380859375) * _1627) * _1628) + _1584;
    }
    bool _1608 = _1588.y == 0u;
    float _1646;
    float _1648;
    float _1650;
    if (_1608)
    {
        _1646 = _1601;
        _1648 = _1603;
        _1650 = _1605;
    }
    else
    {
        uint _1816 = _1516 + 7u;
        float _1832 = (dot(vec3(cbLight._m0[_1516 + 3u].xyz), vec3(_298, _299, _300)) * 0.5) + 0.5;
        float _1833 = _1832 * _1832;
        float _3740 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
        float _1834 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1835 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1646 = (((cbLight._m0[_1816].x * 0.3183098733425140380859375) * _1834) * _1835) + _1601;
        _1648 = (((cbLight._m0[_1816].y * 0.3183098733425140380859375) * _1834) * _1835) + _1603;
        _1650 = (((cbLight._m0[_1816].z * 0.3183098733425140380859375) * _1834) * _1835) + _1605;
    }
    uint _1653 = _1516 + 8u;
    float _1666 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1516].w)) * _301) * 0.949999988079071044921875);
    float _1667 = _1666 * _1666;
    float _1668 = cbLight._m0[_1516].x + _379;
    float _1669 = cbLight._m0[_1516].y + _380;
    float _1670 = cbLight._m0[_1516].z + _381;
    float _1674 = inversesqrt(dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670)));
    float _1675 = _1674 * _1668;
    float _1676 = _1674 * _1669;
    float _1677 = _1674 * _1670;
    float _1678 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1516].xyz));
    float _3756 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1681 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
    float _3767 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _1682 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _1683 = dot(vec3(_298, _299, _300), vec3(_1675, _1676, _1677));
    float _3778 = isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0));
    float _1686 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1687 = dot(vec3(cbLight._m0[_1516].xyz), vec3(_1675, _1676, _1677));
    float _3789 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
    float _1691 = _1667 * _1667;
    float _1695 = ((_1686 * _1686) * (_1691 + (-1.0))) + 1.0;
    float _1703 = exp2(log2(1.0 - (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0)))) * 5.0);
    float _1704 = 0.959999978542327880859375 - _451;
    float _1706 = 0.959999978542327880859375 - _452;
    float _1707 = 0.959999978542327880859375 - _453;
    float _1714 = 1.0 - _1667;
    float _1725 = (0.5 / (((_1682 * ((_1681 * _1714) + _1667)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1714) + _1667) * _1681))) * _1681;
    float _3800 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0));
    float _1727 = (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * (_1691 / ((_1695 * _1695) * 3.141590118408203125));
    uint _1738 = _1516 + 9u;
    float _1749 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1554].w)) * _301) * 0.949999988079071044921875);
    float _1750 = _1749 * _1749;
    float _1751 = cbLight._m0[_1554].x + _379;
    float _1752 = cbLight._m0[_1554].y + _380;
    float _1753 = cbLight._m0[_1554].z + _381;
    float _1757 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
    float _1758 = _1757 * _1751;
    float _1759 = _1757 * _1752;
    float _1760 = _1757 * _1753;
    float _1761 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1554].xyz));
    float _3811 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1764 = isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0));
    float _1765 = dot(vec3(_298, _299, _300), vec3(_1758, _1759, _1760));
    float _3822 = isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0));
    float _1768 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1769 = dot(vec3(cbLight._m0[_1554].xyz), vec3(_1758, _1759, _1760));
    float _3833 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1773 = _1750 * _1750;
    float _1777 = ((_1768 * _1768) * (_1773 + (-1.0))) + 1.0;
    float _1784 = exp2(log2(1.0 - (isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0)))) * 5.0);
    float _1791 = 1.0 - _1750;
    float _1801 = (0.5 / (((_1682 * ((_1764 * _1791) + _1750)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1791) + _1750) * _1764))) * _1764;
    float _3844 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1773 / ((_1777 * _1777) * 3.141590118408203125));
    float _1813 = (((((_1784 * _1704) + _454) * cbLight._m0[_1738].x) * _1803) * _1539) + (((((_1703 * _1704) + _454) * cbLight._m0[_1653].x) * _1727) * _1550);
    float _1814 = (((((_1784 * _1706) + _456) * cbLight._m0[_1738].y) * _1803) * _1539) + (((((_1703 * _1706) + _456) * cbLight._m0[_1653].y) * _1727) * _1550);
    float _1815 = (((((_1784 * _1707) + _457) * cbLight._m0[_1738].z) * _1803) * _1539) + (((((_1703 * _1707) + _457) * cbLight._m0[_1653].z) * _1727) * _1550);
    float _1877;
    float _1879;
    float _1881;
    if (_1590)
    {
        _1877 = _1813;
        _1879 = _1814;
        _1881 = _1815;
    }
    else
    {
        uint _1883 = _1516 + 2u;
        uint _1887 = _1516 + 10u;
        float _1901 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1883].w)) * _301) * 0.949999988079071044921875);
        float _1902 = _1901 * _1901;
        float _1903 = cbLight._m0[_1883].x + _379;
        float _1904 = cbLight._m0[_1883].y + _380;
        float _1905 = cbLight._m0[_1883].z + _381;
        float _1909 = inversesqrt(dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905)));
        float _1910 = _1909 * _1903;
        float _1911 = _1909 * _1904;
        float _1912 = _1909 * _1905;
        float _1913 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_1883].xyz));
        float _3855 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
        float _1916 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1917 = dot(vec3(_298, _299, _300), vec3(_1910, _1911, _1912));
        float _3866 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1920 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1921 = dot(vec3(cbLight._m0[_1883].xyz), vec3(_1910, _1911, _1912));
        float _3877 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
        float _1925 = _1902 * _1902;
        float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
        float _1936 = exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0);
        float _1943 = 1.0 - _1902;
        float _1953 = (0.5 / (((_1682 * ((_1916 * _1943) + _1902)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _1943) + _1902) * _1916))) * _1916;
        float _3888 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
        float _1955 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
        float _1956 = isnan(1.0) ? _1531 : (isnan(_1531) ? 1.0 : min(_1531, 1.0));
        _1877 = (((((_1936 * _1704) + _454) * cbLight._m0[_1887].x) * _1955) * _1956) + _1813;
        _1879 = (((((_1936 * _1706) + _456) * cbLight._m0[_1887].y) * _1955) * _1956) + _1814;
        _1881 = (((((_1936 * _1707) + _457) * cbLight._m0[_1887].z) * _1955) * _1956) + _1815;
    }
    float _1991;
    float _1993;
    float _1995;
    if (_1608)
    {
        _1991 = _1877;
        _1993 = _1879;
        _1995 = _1881;
    }
    else
    {
        uint _2002 = _1516 + 3u;
        uint _2006 = _1516 + 11u;
        float _2020 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _301) * 0.949999988079071044921875);
        float _2021 = _2020 * _2020;
        float _2022 = cbLight._m0[_2002].x + _379;
        float _2023 = cbLight._m0[_2002].y + _380;
        float _2024 = cbLight._m0[_2002].z + _381;
        float _2028 = inversesqrt(dot(vec3(_2022, _2023, _2024), vec3(_2022, _2023, _2024)));
        float _2029 = _2028 * _2022;
        float _2030 = _2028 * _2023;
        float _2031 = _2028 * _2024;
        float _2032 = dot(vec3(_298, _299, _300), vec3(cbLight._m0[_2002].xyz));
        float _3904 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
        float _2035 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _2036 = dot(vec3(_298, _299, _300), vec3(_2029, _2030, _2031));
        float _3915 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2039 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _2040 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2029, _2030, _2031));
        float _3926 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        float _2044 = _2021 * _2021;
        float _2048 = ((_2039 * _2039) * (_2044 + (-1.0))) + 1.0;
        float _2055 = exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0);
        float _2062 = 1.0 - _2021;
        float _2072 = (0.5 / (((_1682 * ((_2035 * _2062) + _2021)) + 9.9999999392252902907785028219223e-09) + (((_1682 * _2062) + _2021) * _2035))) * _2035;
        float _3937 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
        float _2074 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_2044 / ((_2048 * _2048) * 3.141590118408203125));
        float _2075 = isnan(1.0) ? _1532 : (isnan(_1532) ? 1.0 : min(_1532, 1.0));
        _1991 = (((((_2055 * _1704) + _454) * cbLight._m0[_2006].x) * _2074) * _2075) + _1877;
        _1993 = (((((_2055 * _1706) + _456) * cbLight._m0[_2006].y) * _2074) * _2075) + _1879;
        _1995 = (((((_2055 * _1707) + _457) * cbLight._m0[_2006].z) * _2074) * _2075) + _1881;
    }
    float _2210;
    float _2212;
    float _2214;
    float _2216;
    float _2218;
    float _2220;
    if (_1514.y == 0u)
    {
        float _2150 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2151 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2150;
        float _2152 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2150;
        float _2153 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2150;
        uvec4 _2165 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2166 = _2165.x;
        uint _2177 = uint((float(_2165.y) * floor(float(uint(cbSceneParam._m0[85u].y * _388) / _2166))) + floor(float(uint(cbSceneParam._m0[85u].x * _387) / _2166)));
        float _2187 = (log2(_2153 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2188 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        uint _2191 = uint(isnan(14.0) ? _2188 : (isnan(_2188) ? 14.0 : min(_2188, 14.0)));
        uvec4 _2196 = texelFetch(g_lightClusterGridBuffer, int(((_2191 << 2u) + (_2177 << 6u)) >> 2u));
        uint _2197 = _2196.x;
        uint _2198 = _2165.z;
        float _2333;
        float _2335;
        float _2337;
        float _2339;
        float _2341;
        float _2343;
        if (((((1u << ((_2198 >> 4u) & 15u)) + 4294967295u) & _2197) == 0u) || ((_2198 & 240u) == 0u))
        {
            _2333 = 0.0;
            _2335 = 0.0;
            _2337 = 0.0;
            _2339 = 0.0;
            _2341 = 0.0;
            _2343 = 0.0;
        }
        else
        {
            float _2334;
            float _2336;
            float _2338;
            float _2340;
            float _2342;
            float _2344;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            float _2490 = 0.0;
            float _2491 = 0.0;
            float _2492 = 0.0;
            uint _2493 = 0u;
            uint _2502;
            bool _2503;
            for (;;)
            {
                _2502 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2493 << 2u)) >> 2u)).x;
                _2503 = _2502 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2503)
                {
                    frontier_phi_61_pred = _2487;
                    frontier_phi_61_pred_1 = _2492;
                    frontier_phi_61_pred_2 = _2491;
                    frontier_phi_61_pred_3 = _2490;
                    frontier_phi_61_pred_4 = _2489;
                    frontier_phi_61_pred_5 = _2488;
                }
                else
                {
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    uint _2617;
                    _2611 = _2487;
                    _2612 = _2488;
                    _2613 = _2489;
                    _2614 = _2490;
                    _2615 = _2491;
                    _2616 = _2492;
                    _2617 = _2502;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    for (;;)
                    {
                        uint _2621 = uint(findLSB(_2617)) + (_2493 << 5u);
                        uint _2618 = (_2617 + 4294967295u) & _2617;
                        uint _2623 = _2621 * 48u;
                        vec4 _2637 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 3u)).x));
                        uint _2643 = (_2621 * 48u) + 4u;
                        vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2643)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 3u)).x));
                        uint _2662 = (_2621 * 48u) + 8u;
                        vec3 _2673 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x));
                        float _2677 = _2637.x - _2151;
                        float _2678 = _2637.y - _2152;
                        float _2679 = _2637.z - _2153;
                        float _2680 = dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679));
                        float _2683 = inversesqrt(_2680);
                        float _2684 = _2683 * _2677;
                        float _2685 = _2683 * _2678;
                        float _2686 = _2683 * _2679;
                        float _2687 = dot(vec3(_409, _412, _415), vec3(_2684, _2685, _2686));
                        float _2692 = 1.0 - (_2680 * _2637.w);
                        float _3963 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                        float _2693 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                        float _2694 = sqrt(_2680) * _2656.w;
                        float _2697 = 1.39999997615814208984375 / (_2694 + 1.39999997615814208984375);
                        float _2698 = _2697 * _2697;
                        float _2701 = ((1.0 - _2698) * _2687) + _2698;
                        float _2704 = _2694 * _2694;
                        float _2708 = ((isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0))) * _2693) / ((_2704 * 0.699999988079071044921875) + 1.0);
                        float _2712 = (-0.0) - _2151;
                        float _2713 = (-0.0) - _2152;
                        float _2714 = (-0.0) - _2153;
                        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
                        float _2719 = _2718 * _2712;
                        float _2720 = _2718 * _2713;
                        float _2721 = _2718 * _2714;
                        float _2729 = exp2(log2(1.0 / ((_2704 * 3.5) + 5.0)) * 0.25);
                        float _2730 = 1.0 - _485;
                        float _2737 = sqrt(1.0 - ((1.0 - (_2730 * _2730)) * (1.0 - (_2729 * _2729))));
                        float _2738 = _2737 * _2737;
                        float _2739 = _2738 * _2738;
                        float _2740 = _2719 + _2684;
                        float _2741 = _2720 + _2685;
                        float _2742 = _2721 + _2686;
                        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
                        float _2750 = dot(vec3(_409, _412, _415), vec3(_2719, _2720, _2721));
                        float _3979 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2753 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
                        float _2754 = dot(vec3(_409, _412, _415), vec3(_2746 * _2740, _2746 * _2741, _2746 * _2742));
                        float _3990 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2757 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
                        float _2761 = ((_2757 * _2757) * (_2739 + (-1.0))) + 1.0;
                        float _2762 = _2697 * _2738;
                        float _2763 = _2762 * _2762;
                        float _2766 = ((1.0 - _2763) * _2687) + _2763;
                        float _4001 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2767 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
                        float _2768 = 1.0 - _2738;
                        float _2778 = (0.5 / (((_2767 * ((_2753 * _2768) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2767 * _2768) + _2738) * _2753))) * _2767;
                        float _4012 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2789 = (((_2739 * 3.1415927410125732421875) * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) / ((_2761 * _2761) * ((_2704 * 2.1991131305694580078125) + 3.141590118408203125))) * _2693;
                        _2546 = (_2708 * _2656.x) + _2614;
                        _2547 = (_2708 * _2656.y) + _2615;
                        _2548 = (_2708 * _2656.z) + _2616;
                        _2543 = (_2789 * _2673.x) + _2611;
                        _2544 = (_2789 * _2673.y) + _2612;
                        _2545 = (_2789 * _2673.z) + _2613;
                        if (_2618 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2611 = _2543;
                            _2612 = _2544;
                            _2613 = _2545;
                            _2614 = _2546;
                            _2615 = _2547;
                            _2616 = _2548;
                            _2617 = _2618;
                        }
                    }
                    frontier_phi_61_pred = _2543;
                    frontier_phi_61_pred_1 = _2548;
                    frontier_phi_61_pred_2 = _2547;
                    frontier_phi_61_pred_3 = _2546;
                    frontier_phi_61_pred_4 = _2545;
                    frontier_phi_61_pred_5 = _2544;
                }
                _2334 = frontier_phi_61_pred;
                _2344 = frontier_phi_61_pred_1;
                _2342 = frontier_phi_61_pred_2;
                _2340 = frontier_phi_61_pred_3;
                _2338 = frontier_phi_61_pred_4;
                _2336 = frontier_phi_61_pred_5;
                uint _2494 = _2493 + 1u;
                if (_2494 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2487 = _2334;
                    _2488 = _2336;
                    _2489 = _2338;
                    _2490 = _2340;
                    _2491 = _2342;
                    _2492 = _2344;
                    _2493 = _2494;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2333 = _2334;
            _2335 = _2336;
            _2337 = _2338;
            _2339 = _2340;
            _2341 = _2342;
            _2343 = _2344;
        }
        uvec4 _2347 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2348 = _2347.z;
        uint _2350 = (_2348 >> 8u) & 15u;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        if (((4294967295u << _2350) & _2197) == 0u)
        {
            _2455 = _2333;
            _2457 = _2335;
            _2459 = _2337;
            _2461 = _2339;
            _2463 = _2341;
            _2465 = _2343;
        }
        else
        {
            float _2480 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
            float _2481 = _2480 * _2151;
            float _2482 = _2480 * _2152;
            float _2483 = _2480 * _2153;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2350 < ((_2348 >> 12u) & 15u))
            {
                float _2456;
                float _2458;
                float _2460;
                float _2462;
                float _2464;
                float _2466;
                float _2594 = _2333;
                float _2595 = _2335;
                float _2596 = _2337;
                float _2597 = _2339;
                float _2598 = _2341;
                float _2599 = _2343;
                uint _2600 = _2350;
                uint _2609;
                bool _2610;
                for (;;)
                {
                    _2609 = texelFetch(g_lightClassification, int((((_2191 << 5u) + (_2177 << 9u)) + (_2600 << 2u)) >> 2u)).x;
                    _2610 = _2609 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2610)
                    {
                        frontier_phi_67_pred = _2597;
                        frontier_phi_67_pred_1 = _2598;
                        frontier_phi_67_pred_2 = _2599;
                        frontier_phi_67_pred_3 = _2596;
                        frontier_phi_67_pred_4 = _2595;
                        frontier_phi_67_pred_5 = _2594;
                    }
                    else
                    {
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _2799;
                        float _3090;
                        float _3091;
                        float _3092;
                        float _3093;
                        float _3094;
                        float _3095;
                        float _2807 = _2594;
                        float _2808 = _2595;
                        float _2809 = _2596;
                        float _2810 = _2597;
                        float _2811 = _2598;
                        float _2812 = _2599;
                        uint _2813 = _2609;
                        uint _2814;
                        vec4 _2839;
                        float _2840;
                        vec4 _2855;
                        vec3 _2867;
                        vec4 _2883;
                        vec4 _2899;
                        float _2946;
                        bool _2947;
                        for (;;)
                        {
                            uint _2824 = ((_2600 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2813));
                            _2814 = (_2813 + 4294967295u) & _2813;
                            uint _2826 = _2824 * 40u;
                            _2839 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2826)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2826 + 3u)).x));
                            _2840 = _2839.w;
                            uint _2842 = (_2824 * 40u) + 4u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2857 = (_2824 * 40u) + 8u;
                            _2867 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x));
                            uint _2870 = (_2824 * 40u) + 16u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            uint _2886 = (_2824 * 40u) + 20u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2902 = (_2824 * 40u) + 24u;
                            vec4 _2915 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2902)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2902 + 3u)).x));
                            uint _2921 = (_2824 * 40u) + 28u;
                            vec4 _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            _2946 = fma(_2153, _2934.z, fma(_2152, _2934.y, _2934.x * _2151)) + _2934.w;
                            _2947 = !((fma(_2153, _2915.z, fma(_2152, _2915.y, _2915.x * _2151)) + _2915.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2947)
                            {
                                float _2974 = _2839.x - _2151;
                                float _2975 = _2839.y - _2152;
                                float _2976 = _2839.z - _2153;
                                float _2977 = dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976));
                                float _2980 = inversesqrt(_2977);
                                float _2981 = _2980 * _2974;
                                float _2982 = _2980 * _2975;
                                float _2983 = _2980 * _2976;
                                float _2987 = 1.0 - (_2977 / (_2840 * _2840));
                                float _4023 = isnan(0.0) ? _2987 : (isnan(_2987) ? 0.0 : max(_2987, 0.0));
                                float _2988 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                                float _2992 = sqrt(_2977) * _2855.w;
                                float _2994 = 1.39999997615814208984375 / (_2992 + 1.39999997615814208984375);
                                float _2995 = _2994 * _2994;
                                float _2998 = ((1.0 - _2995) * dot(vec3(_2981, _2982, _2983), vec3(_409, _412, _415))) + _2995;
                                float _3001 = _2992 * _2992;
                                float _3005 = (fma(_2153, _2883.z, fma(_2152, _2883.y, _2883.x * _2151)) + _2883.w) / _2946;
                                float _3006 = (fma(_2153, _2899.z, fma(_2152, _2899.y, _2899.x * _2151)) + _2899.w) / _2946;
                                float _3010 = 1.0 - dot(vec2(_3005, _3006), vec2(_3005, _3006));
                                float _4039 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                                float _3012 = _3011 * (((isnan(0.0) ? _2998 : (isnan(_2998) ? 0.0 : max(_2998, 0.0))) * _2988) / ((_3001 * 0.699999988079071044921875) + 1.0));
                                float _3024 = exp2(log2(1.0 / ((_3001 * 3.5) + 5.0)) * 0.25);
                                float _3025 = 1.0 - _485;
                                float _3032 = sqrt(1.0 - ((1.0 - (_3025 * _3025)) * (1.0 - (_3024 * _3024))));
                                float _3033 = _3032 * _3032;
                                float _3034 = _3033 * _3033;
                                float _3035 = _2981 - _2481;
                                float _3036 = _2982 - _2482;
                                float _3037 = _2983 - _2483;
                                float _3041 = inversesqrt(dot(vec3(_3035, _3036, _3037), vec3(_3035, _3036, _3037)));
                                float _3045 = dot(vec3(_409, _412, _415), vec3((-0.0) - _2481, (-0.0) - _2482, (-0.0) - _2483));
                                float _4050 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3048 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                                float _3049 = dot(vec3(_409, _412, _415), vec3(_3041 * _3035, _3041 * _3036, _3041 * _3037));
                                float _4061 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                                float _3052 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                                float _3056 = ((_3052 * _3052) * (_3034 + (-1.0))) + 1.0;
                                float _3057 = _2994 * _3033;
                                float _3058 = _3057 * _3057;
                                float _3064 = ((1.0 - _3058) * dot(vec3(_409, _412, _415), vec3(_2981, _2982, _2983))) + _3058;
                                float _4072 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                                float _3066 = 1.0 - _3033;
                                float _3076 = (0.5 / (((_3065 * ((_3048 * _3066) + _3033)) + 9.9999999392252902907785028219223e-09) + (((_3065 * _3066) + _3033) * _3048))) * _3065;
                                float _4083 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3086 = (_3011 * _2988) * (((_3034 * 3.1415927410125732421875) * (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0)))) / ((_3056 * _3056) * ((_3001 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3086 * _2867.x;
                                frontier_phi_73_pred_1 = _3086 * _2867.y;
                                frontier_phi_73_pred_2 = _3012 * _2855.z;
                                frontier_phi_73_pred_3 = _3012 * _2855.y;
                                frontier_phi_73_pred_4 = _3012 * _2855.x;
                                frontier_phi_73_pred_5 = _3086 * _2867.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3090 = frontier_phi_73_pred;
                            _3091 = frontier_phi_73_pred_1;
                            _3095 = frontier_phi_73_pred_2;
                            _3094 = frontier_phi_73_pred_3;
                            _3093 = frontier_phi_73_pred_4;
                            _3092 = frontier_phi_73_pred_5;
                            _2797 = _3093 + _2810;
                            _2798 = _3094 + _2811;
                            _2799 = _3095 + _2812;
                            _2794 = _3090 + _2807;
                            _2795 = _3091 + _2808;
                            _2796 = _3092 + _2809;
                            if (_2814 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2799;
                                _2813 = _2814;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2797;
                        frontier_phi_67_pred_1 = _2798;
                        frontier_phi_67_pred_2 = _2799;
                        frontier_phi_67_pred_3 = _2796;
                        frontier_phi_67_pred_4 = _2795;
                        frontier_phi_67_pred_5 = _2794;
                    }
                    _2462 = frontier_phi_67_pred;
                    _2464 = frontier_phi_67_pred_1;
                    _2466 = frontier_phi_67_pred_2;
                    _2460 = frontier_phi_67_pred_3;
                    _2458 = frontier_phi_67_pred_4;
                    _2456 = frontier_phi_67_pred_5;
                    uint _2601 = _2600 + 1u;
                    if (_2601 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2594 = _2456;
                        _2595 = _2458;
                        _2596 = _2460;
                        _2597 = _2462;
                        _2598 = _2464;
                        _2599 = _2466;
                        _2600 = _2601;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2464;
                frontier_phi_55_56_ladder_1 = _2466;
                frontier_phi_55_56_ladder_2 = _2462;
                frontier_phi_55_56_ladder_3 = _2460;
                frontier_phi_55_56_ladder_4 = _2458;
                frontier_phi_55_56_ladder_5 = _2456;
            }
            else
            {
                frontier_phi_55_56_ladder = _2341;
                frontier_phi_55_56_ladder_1 = _2343;
                frontier_phi_55_56_ladder_2 = _2339;
                frontier_phi_55_56_ladder_3 = _2337;
                frontier_phi_55_56_ladder_4 = _2335;
                frontier_phi_55_56_ladder_5 = _2333;
            }
            _2455 = frontier_phi_55_56_ladder_5;
            _2457 = frontier_phi_55_56_ladder_4;
            _2459 = frontier_phi_55_56_ladder_3;
            _2461 = frontier_phi_55_56_ladder_2;
            _2463 = frontier_phi_55_56_ladder;
            _2465 = frontier_phi_55_56_ladder_1;
        }
        float _2470 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _2210 = (_2470 * _2461) + _1646;
        _2212 = (_2470 * _2463) + _1648;
        _2214 = (_2470 * _2465) + _1650;
        _2216 = ((_2455 * _454) * _2470) + _1991;
        _2218 = ((_2457 * _456) * _2470) + _1993;
        _2220 = ((_2459 * _457) * _2470) + _1995;
    }
    else
    {
        _2210 = _1646;
        _2212 = _1648;
        _2214 = _1650;
        _2216 = _1991;
        _2218 = _1993;
        _2220 = _1995;
    }
    uint _2226 = _430 + uint(cbMatDynParam._m0[0u].w);
    float _2234 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _280.x) * cbInstanceData._m0[_2226].x;
    float _2237 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _280.y) * cbInstanceData._m0[_2226].y;
    float _2240 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _280.z) * cbInstanceData._m0[_2226].z;
    float _4099 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _4110 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _4121 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _2257 = (((isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0))) * (_2210 + ((isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0))) * _469))) + ((_2216 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + _2234;
    float _2259 = (_2237 + ((_2218 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_2212 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _469)));
    float _2261 = (_2240 + ((_2220 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _1279)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_2214 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _469)));
    float _4147 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2274 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    uint _2275 = _428 + 6u;
    float _2283 = _387 / cbSceneParam._m0[86u].x;
    float _2284 = _388 / cbSceneParam._m0[86u].y;
    vec4 _2298 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, (log2((isnan(cbSceneParam._m0[77u].w) ? _321 : (isnan(_321) ? cbSceneParam._m0[77u].w : min(_321, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2300 = _2298.x;
    float _2301 = _2298.y;
    float _2302 = _2298.z;
    float _2303 = _2298.w;
    float _2396;
    float _2398;
    float _2400;
    float _2402;
    if (_321 > cbSceneParam._m0[78u].w)
    {
        float _2358 = isnan(_321) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _321 : min(cbSceneParam._m0[80u].w, _321));
        float _2359 = _2358 / _321;
        float _2370 = _2359 * _372;
        float _2371 = _373 * _2359;
        float _2372 = (-0.0) - _2371;
        float _2374 = _2359 * _374;
        float _2376 = (cbSceneParam._m0[77u].w * _2372) / _2358;
        float _2377 = _2376 + cbSceneParam._m0[79u].w;
        float _2378 = cbSceneParam._m0[79u].w - _2371;
        float _2384 = sqrt(((_2370 * _2370) + (_2371 * _2371)) + (_2374 * _2374));
        float _2387 = (1.0 - (cbSceneParam._m0[77u].w / _2358)) * _2384;
        float _2392 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2394 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2556;
        if (abs((_2372 - _2376) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2556 = ((((_2377 > 0.0) ? exp2(_2392 * _2377) : (2.0 - exp2(_2394 * _2377))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2387;
        }
        else
        {
            float _2516 = 1.0 / cbSceneParam._m0[80u].x;
            float _2517 = isnan(_2378) ? _2377 : (isnan(_2377) ? _2378 : max(_2377, _2378));
            float _2518 = isnan(_2378) ? _2377 : (isnan(_2377) ? _2378 : min(_2377, _2378));
            float _2527 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : min(_2517, 0.0));
            float _2528 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : min(_2518, 0.0));
            _2556 = ((abs(_2384 / _2372) * cbSceneParam._m0[80u].y) * ((((_2527 - _2528) * 2.0) - ((exp2(_2392 * (isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0)))) - exp2(_2392 * (isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0))))) * _2516)) - ((exp2(_2394 * _2527) - exp2(_2394 * _2528)) * _2516))) + (_2387 * cbSceneParam._m0[80u].z);
        }
        vec4 _2558 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2283, _2284, 1.0), 0.0);
        float _2567 = exp2((_2556 * (-1.44269502162933349609375)) * (1.0 - _2558.w));
        float _2568 = log2(_2567);
        float _2584 = log2(_2303);
        _2396 = (exp2(_2584 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].x)) * _2558.x) / cbSceneParam._m0[78u].x)) + _2300;
        _2398 = (exp2(_2584 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].y)) * _2558.y) / cbSceneParam._m0[78u].y)) + _2301;
        _2400 = (exp2(_2584 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].z)) * _2558.z) / cbSceneParam._m0[78u].z)) + _2302;
        _2402 = _2567 * _2303;
    }
    else
    {
        _2396 = _2300;
        _2398 = _2301;
        _2400 = _2302;
        _2402 = _2303;
    }
    float _2414 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2415 = _2414 == 3.0;
    float _2416 = log2(_2402);
    float _2420 = exp2(_2416 * cbSceneParam._m0[78u].x);
    float _2421 = exp2(_2416 * cbSceneParam._m0[78u].y);
    float _2422 = exp2(_2416 * cbSceneParam._m0[78u].z);
    float _2423 = _2420 * (isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0)));
    float _2424 = _2421 * (isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0)));
    float _2425 = _2422 * (isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0)));
    float _2434 = (_2414 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2434 * (_2415 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2396)));
    SV_Target.y = _2434 * (_2415 ? _2424 : (_2424 + (cbSceneParam._m0[72u].w * _2398)));
    SV_Target.z = _2434 * (_2415 ? _2425 : (_2425 + (cbSceneParam._m0[72u].w * _2400)));
    SV_Target.w = cbInstanceData._m0[_2275].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2234) * _2274) * _2420) * _2434;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2237) * _2274) * _2421) * _2434;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2240) * _2274) * _2422) * _2434;
    SV_Target_1.w = cbInstanceData._m0[_2275].w;
}


