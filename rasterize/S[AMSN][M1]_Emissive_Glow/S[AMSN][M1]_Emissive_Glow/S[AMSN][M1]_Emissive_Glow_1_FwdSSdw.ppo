#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[12];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1;
layout(set = 0, binding = 3) uniform texture2D S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _846;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _222 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _228 = _222.x * cbMtdParam._m0[9u].x;
    float _229 = _222.y * cbMtdParam._m0[9u].y;
    float _230 = _222.z * cbMtdParam._m0[9u].z;
    vec4 _246 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _246.z;
    float _254 = (_246.x * 2.0) + (-1.0);
    float _256 = (_246.y * 2.0) + (-1.0);
    float _257 = dot(vec2(_254, _256), vec2(_254, _256));
    float _3250 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _263 = sqrt(1.0 - (isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))));
    vec4 _282 = texture(sampler2D(S_AMSN_M1_Emissive_Glow_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _289 = fma(_263, _192 * NORMAL.x, fma(_256, _199 * TANGENT.x, (_185 * _178) * _254));
    float _292 = fma(_263, _192 * NORMAL.y, fma(_256, _199 * TANGENT.y, (_185 * _179) * _254));
    float _295 = fma(_263, _192 * NORMAL.z, fma(_256, _199 * TANGENT.z, (_185 * _180) * _254));
    float _299 = inversesqrt(dot(vec3(_289, _292, _295), vec3(_289, _292, _295)));
    float _300 = _299 * _289;
    float _301 = _299 * _292;
    float _302 = _299 * _295;
    float _3261 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _303 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
    float _3272 = isnan(0.0) ? _228 : (isnan(_228) ? 0.0 : max(_228, 0.0));
    float _3283 = isnan(0.0) ? _229 : (isnan(_229) ? 0.0 : max(_229, 0.0));
    float _3294 = isnan(0.0) ? _230 : (isnan(_230) ? 0.0 : max(_230, 0.0));
    float _3305 = isnan(0.0) ? cbMtdParam._m0[11u].x : (isnan(cbMtdParam._m0[11u].x) ? 0.0 : max(cbMtdParam._m0[11u].x, 0.0));
    float _307 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
    float _323 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _364 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _374 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _364);
    float _375 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _364);
    float _376 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _364);
    float _380 = inversesqrt(dot(vec3(_374, _375, _376), vec3(_374, _375, _376)));
    float _381 = _374 * _380;
    float _382 = _375 * _380;
    float _383 = _376 * _380;
    float _389 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _390 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_302, cbSceneParam._m0[5u].z, fma(_301, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _300));
    float _414 = fma(_302, cbSceneParam._m0[6u].z, fma(_301, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _300));
    float _417 = fma(_302, cbSceneParam._m0[7u].z, fma(_301, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _300));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3316 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
    float _3327 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0));
    float _3338 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
    float _445 = 1.0 - _307;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _307;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _307;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _307;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _389, cbSceneParam._m0[86u].y * _390));
    float _471 = _468.x * TEXCOORD.z;
    float _472 = dot(vec3(_300, _301, _302), vec3(_381, _382, _383));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _300) - _381;
    float _480 = (_475 * _301) - _382;
    float _481 = (_475 * _302) - _383;
    float _485 = abs(dot(vec3(_381, _382, _383), vec3(_300, _301, _302)));
    float _3349 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_303);
    float _500 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _506 = (1.0 - _500) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _507 = _500 * _487;
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _845;
    float _847;
    float _848;
    float _849;
    float _850;
    float _851;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _570 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _574 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _578 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _603 = _535 + _300;
        float _604 = _539 + _301;
        float _605 = _543 + _302;
        float _615 = fma(_605, cbModelParam._m0[26u].z, fma(_604, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _603)) - _570;
        float _616 = fma(_605, cbModelParam._m0[27u].z, fma(_604, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _603)) - _574;
        float _617 = fma(_605, cbModelParam._m0[28u].z, fma(_604, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _603)) - _578;
        float _621 = inversesqrt(dot(vec3(_615, _616, _617), vec3(_615, _616, _617)));
        float _634 = ((_621 * _615) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_570 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _635 = ((_621 * _616) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_574 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _636 = ((_621 * _617) / cbModelParam._m0[34u].z) + ((((((_578 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _639 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _646 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _653 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        vec4 _660 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_634, _635, _636), 0.0);
        float _673 = exp2((_639.w + (-0.5)) * 20.0) * 2.0;
        float _674 = _673 * (_639.x + (-0.5));
        float _675 = _673 * (_639.y + (-0.5));
        float _676 = _673 * (_639.z + (-0.5));
        float _683 = exp2((_646.w + (-0.5)) * 20.0) * 2.0;
        float _684 = _683 * (_646.x + (-0.5));
        float _685 = _683 * (_646.y + (-0.5));
        float _686 = _683 * (_646.z + (-0.5));
        float _693 = exp2((_653.w + (-0.5)) * 20.0) * 2.0;
        float _694 = _693 * (_653.x + (-0.5));
        float _695 = _693 * (_653.y + (-0.5));
        float _696 = _693 * (_653.z + (-0.5));
        float _703 = exp2((_660.w + (-0.5)) * 20.0) * 2.0;
        float _704 = _703 * (_660.x + (-0.5));
        float _705 = _703 * (_660.y + (-0.5));
        float _706 = _703 * (_660.z + (-0.5));
        float _707 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
        float _708 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        float _709 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
        float _710 = _674 * 0.5;
        float _711 = _684 * 0.5;
        float _712 = _694 * 0.5;
        float _713 = dot(vec3(_710, _711, _712), vec3(_710, _711, _712));
        float _718 = (_713 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_713);
        float _727 = (dot(vec3(_300, _301, _302), vec3(_718 * _710, _718 * _711, _718 * _712)) + 1.0) * 0.5;
        float _3375 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _737 = sqrt(((_711 * _711) + (_710 * _710)) + (_712 * _712)) / (_707 + 9.9999997473787516355514526367188e-06);
        float _3386 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
        float _738 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _739 = _738 * 2.0;
        float _743 = (1.0 - _738) / (_738 + 1.0);
        float _3397 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
        float _744 = isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0));
        float _753 = ((((1.0 - _744) * (_739 + 2.0)) * exp2(log2(isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))) * (_739 + 1.0))) + _744) * _707;
        float _754 = _675 * 0.5;
        float _755 = _685 * 0.5;
        float _756 = _695 * 0.5;
        float _757 = dot(vec3(_754, _755, _756), vec3(_754, _755, _756));
        float _762 = (_757 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_757);
        float _770 = (dot(vec3(_300, _301, _302), vec3(_762 * _754, _762 * _755, _762 * _756)) + 1.0) * 0.5;
        float _3408 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _779 = sqrt(((_755 * _755) + (_754 * _754)) + (_756 * _756)) / (_708 + 9.9999997473787516355514526367188e-06);
        float _3419 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _780 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
        float _781 = _780 * 2.0;
        float _785 = (1.0 - _780) / (_780 + 1.0);
        float _3430 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        float _786 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
        float _795 = ((((1.0 - _786) * (_781 + 2.0)) * exp2(log2(isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0))) * (_781 + 1.0))) + _786) * _708;
        float _796 = _676 * 0.5;
        float _797 = _686 * 0.5;
        float _798 = _696 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _812 = (dot(vec3(_300, _301, _302), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3441 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _821 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_709 + 9.9999997473787516355514526367188e-06);
        float _3452 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3463 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * (_823 + 1.0))) + _828) * _709;
        _845 = _676;
        _847 = _675;
        _848 = _674;
        _849 = _686;
        _850 = _685;
        _851 = _684;
        _852 = _696;
        _853 = _695;
        _854 = _694;
        _855 = _709;
        _856 = _708;
        _857 = _707;
        _858 = cbModelParam._m0[36u].z * (isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0)));
        _859 = cbModelParam._m0[36u].z * (isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0)));
        _860 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
    }
    else
    {
        _845 = _846;
        _847 = _846;
        _848 = _846;
        _849 = _846;
        _850 = _846;
        _851 = _846;
        _852 = _846;
        _853 = _846;
        _854 = _846;
        _855 = _846;
        _856 = _846;
        _857 = _846;
        _858 = 0.0;
        _859 = 0.0;
        _860 = 0.0;
    }
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _886 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _890 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _894 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _917 = _535 + _300;
        float _918 = _539 + _301;
        float _919 = _543 + _302;
        float _929 = fma(_919, cbModelParam._m0[30u].z, fma(_918, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _917)) - _886;
        float _930 = fma(_919, cbModelParam._m0[31u].z, fma(_918, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _917)) - _890;
        float _931 = fma(_919, cbModelParam._m0[32u].z, fma(_918, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _917)) - _894;
        float _935 = inversesqrt(dot(vec3(_929, _930, _931), vec3(_929, _930, _931)));
        float _948 = ((_935 * _929) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_886 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_935 * _930) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_890 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_935 * _931) / cbModelParam._m0[35u].z) + ((((((_894 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_948, _949, _950), 0.0);
        float _985 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _986 = _985 * (_952.x + (-0.5));
        float _987 = _985 * (_952.y + (-0.5));
        float _988 = _985 * (_952.z + (-0.5));
        float _995 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _996 = _995 * (_959.x + (-0.5));
        float _997 = _995 * (_959.y + (-0.5));
        float _998 = _995 * (_959.z + (-0.5));
        float _1005 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = _1005 * (_966.x + (-0.5));
        float _1007 = _1005 * (_966.y + (-0.5));
        float _1008 = _1005 * (_966.z + (-0.5));
        float _1015 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = _1015 * (_973.x + (-0.5));
        float _1017 = _1015 * (_973.y + (-0.5));
        float _1018 = _1015 * (_973.z + (-0.5));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = _986 * 0.5;
        float _1023 = _996 * 0.5;
        float _1024 = _1006 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_300, _301, _302), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3504 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3515 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3526 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1049 + 1.0))) + _1054) * _1019;
        float _1064 = _987 * 0.5;
        float _1065 = _997 * 0.5;
        float _1066 = _1007 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_300, _301, _302), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3537 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3548 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3559 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0))) * (_1091 + 1.0))) + _1096) * _1020;
        float _1106 = _988 * 0.5;
        float _1107 = _998 * 0.5;
        float _1108 = _1008 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_300, _301, _302), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3592 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_1133 + 1.0))) + _1138) * _1021;
        _1155 = _988;
        _1156 = _987;
        _1157 = _986;
        _1158 = _998;
        _1159 = _997;
        _1160 = _996;
        _1161 = _1008;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1021;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1168 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
        _1169 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
    }
    else
    {
        _1155 = _846;
        _1156 = _846;
        _1157 = _846;
        _1158 = _846;
        _1159 = _846;
        _1160 = _846;
        _1161 = _846;
        _1162 = _846;
        _1163 = _846;
        _1164 = _846;
        _1165 = _846;
        _1166 = _846;
        _1167 = 0.0;
        _1168 = 0.0;
        _1169 = 0.0;
    }
    float _1179 = (cbModelParam._m0[1u].x * (_1167 - _858)) + _858;
    float _1180 = (cbModelParam._m0[1u].x * (_1168 - _859)) + _859;
    float _1181 = (cbModelParam._m0[1u].x * (_1169 - _860)) + _860;
    float _1202 = fma(_1181, cbSceneParam._m0[89u].z, fma(_1180, cbSceneParam._m0[89u].y, _1179 * cbSceneParam._m0[89u].x));
    float _1205 = fma(_1181, cbSceneParam._m0[90u].z, fma(_1180, cbSceneParam._m0[90u].y, _1179 * cbSceneParam._m0[90u].x));
    float _1208 = fma(_1181, cbSceneParam._m0[91u].z, fma(_1180, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1179));
    float _1223 = _479 * 0.5;
    float _1224 = _480 * 0.5;
    float _1225 = _481 * 0.5;
    float _1226 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1157, _1160, _1163, _1166));
    float _1229 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1156, _1159, _1162, _1165));
    float _1232 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_1155, _1158, _1161, _1164));
    float _1266;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1239 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_845, _849, _852, _855));
        float _1243 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_847, _850, _853, _856));
        float _1247 = dot(vec4(_1223, _1224, _1225, 1.0), vec4(_848, _851, _854, _857));
        float _1254 = dot(vec4(cbModelParam._m0[39u]), vec4(_1223, _1224, _1225, 1.0));
        _1266 = dot(vec3(isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)), isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)), isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1254) ? 0.0 : (isnan(0.0) ? _1254 : max(0.0, _1254))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1266 = 1.0;
    }
    float _1277;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1268 = dot(vec4(cbModelParam._m0[40u]), vec4(_1223, _1224, _1225, 1.0));
        _1277 = dot(vec3(isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)), isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)), isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1268) ? 0.0 : (isnan(0.0) ? _1268 : max(0.0, _1268))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1277 = 1.0;
    }
    float _1281 = (_1277 * cbModelParam._m0[1u].x) + (_1266 * (1.0 - cbModelParam._m0[1u].x));
    float _1291 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _303);
    float _1292 = isnan(_1291) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1291 : min(cbModelParam._m0[25u].z, _1291));
    float _1374;
    float _1376;
    float _1378;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1341 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1345 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1349 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1352 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1355 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1358 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1386;
        if (_1352 > 0.0)
        {
            _1386 = abs((1.0 - _1341) / _1352);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1352 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1341 + 1.0) / _1352);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1386 = frontier_phi_14_12_ladder;
        }
        float _1614;
        if (_1355 > 0.0)
        {
            _1614 = abs((1.0 - _1345) / _1355);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1355 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1345 + 1.0) / _1355);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1614 = frontier_phi_23_19_ladder;
        }
        float _1871;
        if (_1358 > 0.0)
        {
            _1871 = abs((1.0 - _1349) / _1358);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1358 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1349 + 1.0) / _1358);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1871 = frontier_phi_35_30_ladder;
        }
        float _1873 = isnan(_1614) ? _1386 : (isnan(_1386) ? _1614 : min(_1386, _1614));
        float _1874 = isnan(_1871) ? _1873 : (isnan(_1873) ? _1871 : min(_1873, _1871));
        float _1878 = (_1874 * _1352) + _1341;
        float _1879 = (_1874 * _1355) + _1345;
        float _1880 = (_1874 * _1358) + _1349;
        float _1881 = _1874 * 9.9999997473787516355514526367188e-05;
        float _1883 = (-1.0) - _1881;
        float _1885 = _1881 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1880 > _1885) || ((_1880 < _1883) || ((_1879 > _1885) || ((_1879 < _1883) || ((_1878 < _1883) || (_1878 > _1885))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2008 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1880, cbModelParam._m0[9u].z, fma(_1879, cbModelParam._m0[9u].y, _1878 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1880, cbModelParam._m0[10u].z, fma(_1879, cbModelParam._m0[10u].y, _1878 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1880, cbModelParam._m0[11u].z, fma(_1879, cbModelParam._m0[11u].y, _1878 * cbModelParam._m0[11u].x))), _1292);
            frontier_phi_13_35_ladder = _2008.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2008.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2008.x * cbModelParam._m0[1u].y;
        }
        _1374 = frontier_phi_13_35_ladder_2;
        _1376 = frontier_phi_13_35_ladder_1;
        _1378 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1292);
        _1374 = _1362.x * cbModelParam._m0[1u].y;
        _1376 = _1362.y * cbModelParam._m0[1u].y;
        _1378 = _1362.z * cbModelParam._m0[1u].y;
    }
    float _1382 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _303);
    float _1383 = isnan(_1382) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1382 : min(cbModelParam._m0[25u].w, _1382));
    float _1476;
    float _1478;
    float _1480;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1440 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1444 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1448 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1451 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1454 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1457 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1619;
        if (_1451 > 0.0)
        {
            _1619 = abs((1.0 - _1440) / _1451);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1451 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1440 + 1.0) / _1451);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1619 = frontier_phi_25_21_ladder;
        }
        float _1898;
        if (_1454 > 0.0)
        {
            _1898 = abs((1.0 - _1444) / _1454);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1454 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1444 + 1.0) / _1454);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1898 = frontier_phi_37_32_ladder;
        }
        float _2111;
        if (_1457 > 0.0)
        {
            _2111 = abs((1.0 - _1448) / _1457);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1457 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1448 + 1.0) / _1457);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2111 = frontier_phi_46_43_ladder;
        }
        float _2113 = isnan(_1898) ? _1619 : (isnan(_1619) ? _1898 : min(_1619, _1898));
        float _2114 = isnan(_2111) ? _2113 : (isnan(_2113) ? _2111 : min(_2113, _2111));
        float _2118 = (_2114 * _1451) + _1440;
        float _2119 = (_2114 * _1454) + _1444;
        float _2120 = (_2114 * _1457) + _1448;
        float _2121 = _2114 * 9.9999997473787516355514526367188e-05;
        float _2122 = (-1.0) - _2121;
        float _2124 = _2121 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2120 > _2124) || ((_2120 < _2122) || ((_2119 > _2124) || ((_2119 < _2122) || ((_2118 < _2122) || (_2118 > _2124))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2354 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2120, cbModelParam._m0[17u].z, fma(_2119, cbModelParam._m0[17u].y, _2118 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2120, cbModelParam._m0[18u].z, fma(_2119, cbModelParam._m0[18u].y, _2118 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2120, cbModelParam._m0[19u].z, fma(_2119, cbModelParam._m0[19u].y, _2118 * cbModelParam._m0[19u].x))), _1383);
            frontier_phi_22_46_ladder = _2354.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2354.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2354.x * cbModelParam._m0[1u].z;
        }
        _1476 = frontier_phi_22_46_ladder_2;
        _1478 = frontier_phi_22_46_ladder_1;
        _1480 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1460 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1383);
        _1476 = _1460.x * cbModelParam._m0[1u].z;
        _1478 = _1460.y * cbModelParam._m0[1u].z;
        _1480 = _1460.z * cbModelParam._m0[1u].z;
    }
    float _1493 = (((_506 * _456) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1476 - _1374)) + _1374);
    float _1495 = (((_506 * _458) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1478 - _1376)) + _1376);
    float _1497 = (((_506 * _459) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1480 - _1378)) + _1378);
    float _1500 = fma(_1497, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1493 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1497, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1493 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1497, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, _1493 * cbSceneParam._m0[91u].x));
    vec4 _1514 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_389, _390));
    float _1516 = _1514.w;
    float _1528 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1516);
    float _1529 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1516);
    float _1530 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1516);
    uvec4 _1534 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1536 = _1534.x * 14u;
    uint _1537 = _1536 + 13u;
    float _1544 = _471 + (-1.0);
    float _1549 = (cbLight._m0[_1537].x * _1544) + 1.0;
    float _1550 = (cbLight._m0[_1537].y * _1544) + 1.0;
    float _1551 = (cbLight._m0[_1537].z * _1544) + 1.0;
    float _1552 = (cbLight._m0[_1537].w * _1544) + 1.0;
    uint _1553 = _1536 + 5u;
    float _1559 = isnan(1.0) ? _1550 : (isnan(_1550) ? 1.0 : min(_1550, 1.0));
    uint _1563 = _1536 + 4u;
    float _1573 = isnan(1.0) ? _1549 : (isnan(_1549) ? 1.0 : min(_1549, 1.0));
    uint _1577 = _1536 | 1u;
    float _1588 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_300, _301, _302));
    float _1591 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_300, _301, _302));
    float _3728 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _3739 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1596 = (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.3183098733425140380859375;
    float _1598 = (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * 0.3183098733425140380859375;
    float _1605 = ((cbLight._m0[_1553].x * _1559) * _1598) + (((cbLight._m0[_1563].x * _1528) * _1573) * _1596);
    float _1606 = ((_1559 * cbLight._m0[_1553].y) * _1598) + (((cbLight._m0[_1563].y * _1529) * _1573) * _1596);
    float _1607 = ((_1559 * cbLight._m0[_1553].z) * _1598) + (((cbLight._m0[_1563].z * _1530) * _1573) * _1596);
    uvec4 _1611 = floatBitsToUint(cbLight._m0[_1536 + 12u]);
    bool _1613 = _1611.x == 0u;
    float _1624;
    float _1626;
    float _1628;
    if (_1613)
    {
        _1624 = _1605;
        _1626 = _1606;
        _1628 = _1607;
    }
    else
    {
        uint _1632 = _1536 + 6u;
        float _1648 = (dot(vec3(cbLight._m0[_1536 + 2u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1649 = _1648 * _1648;
        float _3750 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1651 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1624 = (((cbLight._m0[_1632].x * 0.3183098733425140380859375) * _1650) * _1651) + _1605;
        _1626 = (((cbLight._m0[_1632].y * 0.3183098733425140380859375) * _1650) * _1651) + _1606;
        _1628 = (((cbLight._m0[_1632].z * 0.3183098733425140380859375) * _1650) * _1651) + _1607;
    }
    bool _1631 = _1611.y == 0u;
    float _1669;
    float _1671;
    float _1673;
    if (_1631)
    {
        _1669 = _1624;
        _1671 = _1626;
        _1673 = _1628;
    }
    else
    {
        uint _1842 = _1536 + 7u;
        float _1858 = (dot(vec3(cbLight._m0[_1536 + 3u].xyz), vec3(_300, _301, _302)) * 0.5) + 0.5;
        float _1859 = _1858 * _1858;
        float _3766 = isnan(0.0) ? _1859 : (isnan(_1859) ? 0.0 : max(_1859, 0.0));
        float _1860 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1861 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _1669 = (((cbLight._m0[_1842].x * 0.3183098733425140380859375) * _1860) * _1861) + _1624;
        _1671 = (((cbLight._m0[_1842].y * 0.3183098733425140380859375) * _1860) * _1861) + _1626;
        _1673 = (((cbLight._m0[_1842].z * 0.3183098733425140380859375) * _1860) * _1861) + _1628;
    }
    uint _1676 = _1536 + 8u;
    float _1689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1536].w)) * _303) * 0.949999988079071044921875);
    float _1690 = _1689 * _1689;
    float _1691 = cbLight._m0[_1536].x + _381;
    float _1692 = cbLight._m0[_1536].y + _382;
    float _1693 = cbLight._m0[_1536].z + _383;
    float _1697 = inversesqrt(dot(vec3(_1691, _1692, _1693), vec3(_1691, _1692, _1693)));
    float _1698 = _1697 * _1691;
    float _1699 = _1697 * _1692;
    float _1700 = _1697 * _1693;
    float _1701 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1536].xyz));
    float _3782 = isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0));
    float _1704 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
    float _3793 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1705 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1706 = dot(vec3(_300, _301, _302), vec3(_1698, _1699, _1700));
    float _3804 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1709 = isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0));
    float _1710 = dot(vec3(cbLight._m0[_1536].xyz), vec3(_1698, _1699, _1700));
    float _3815 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
    float _1714 = _1690 * _1690;
    float _1718 = ((_1709 * _1709) * (_1714 + (-1.0))) + 1.0;
    float _1726 = exp2(log2(1.0 - (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0)))) * 5.0);
    float _1727 = 0.959999978542327880859375 - _453;
    float _1729 = 0.959999978542327880859375 - _454;
    float _1730 = 0.959999978542327880859375 - _455;
    float _1737 = 1.0 - _1690;
    float _1748 = (0.5 / (((_1705 * ((_1704 * _1737) + _1690)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1737) + _1690) * _1704))) * _1704;
    float _3826 = isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0));
    float _1750 = (isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) * (_1714 / ((_1718 * _1718) * 3.141590118408203125));
    uint _1764 = _1536 + 9u;
    float _1775 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1577].w)) * _303) * 0.949999988079071044921875);
    float _1776 = _1775 * _1775;
    float _1777 = cbLight._m0[_1577].x + _381;
    float _1778 = cbLight._m0[_1577].y + _382;
    float _1779 = cbLight._m0[_1577].z + _383;
    float _1783 = inversesqrt(dot(vec3(_1777, _1778, _1779), vec3(_1777, _1778, _1779)));
    float _1784 = _1783 * _1777;
    float _1785 = _1783 * _1778;
    float _1786 = _1783 * _1779;
    float _1787 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1577].xyz));
    float _3837 = isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0));
    float _1790 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _1791 = dot(vec3(_300, _301, _302), vec3(_1784, _1785, _1786));
    float _3848 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1794 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _1795 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1784, _1785, _1786));
    float _3859 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1799 = _1776 * _1776;
    float _1803 = ((_1794 * _1794) * (_1799 + (-1.0))) + 1.0;
    float _1810 = exp2(log2(1.0 - (isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0)))) * 5.0);
    float _1817 = 1.0 - _1776;
    float _1827 = (0.5 / (((_1705 * ((_1790 * _1817) + _1776)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1817) + _1776) * _1790))) * _1790;
    float _3870 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
    float _1829 = (isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * (_1799 / ((_1803 * _1803) * 3.141590118408203125));
    float _1839 = (((((_1810 * _1727) + _456) * cbLight._m0[_1764].x) * _1829) * _1559) + ((((cbLight._m0[_1676].x * _1528) * ((_1726 * _1727) + _456)) * _1750) * _1573);
    float _1840 = (((((_1810 * _1729) + _458) * cbLight._m0[_1764].y) * _1829) * _1559) + ((((cbLight._m0[_1676].y * _1529) * ((_1726 * _1729) + _458)) * _1750) * _1573);
    float _1841 = (((((_1810 * _1730) + _459) * cbLight._m0[_1764].z) * _1829) * _1559) + ((((cbLight._m0[_1676].z * _1530) * ((_1726 * _1730) + _459)) * _1750) * _1573);
    float _1903;
    float _1905;
    float _1907;
    if (_1613)
    {
        _1903 = _1839;
        _1905 = _1840;
        _1907 = _1841;
    }
    else
    {
        uint _1909 = _1536 + 2u;
        uint _1913 = _1536 + 10u;
        float _1927 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1909].w)) * _303) * 0.949999988079071044921875);
        float _1928 = _1927 * _1927;
        float _1929 = cbLight._m0[_1909].x + _381;
        float _1930 = cbLight._m0[_1909].y + _382;
        float _1931 = cbLight._m0[_1909].z + _383;
        float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
        float _1936 = _1935 * _1929;
        float _1937 = _1935 * _1930;
        float _1938 = _1935 * _1931;
        float _1939 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_1909].xyz));
        float _3881 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1942 = isnan(1.0) ? _3881 : (isnan(_3881) ? 1.0 : min(_3881, 1.0));
        float _1943 = dot(vec3(_300, _301, _302), vec3(_1936, _1937, _1938));
        float _3892 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1946 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
        float _1947 = dot(vec3(cbLight._m0[_1909].xyz), vec3(_1936, _1937, _1938));
        float _3903 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
        float _1951 = _1928 * _1928;
        float _1955 = ((_1946 * _1946) * (_1951 + (-1.0))) + 1.0;
        float _1962 = exp2(log2(1.0 - (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0)))) * 5.0);
        float _1969 = 1.0 - _1928;
        float _1979 = (0.5 / (((_1705 * ((_1942 * _1969) + _1928)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _1969) + _1928) * _1942))) * _1942;
        float _3914 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
        float _1981 = (isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0))) * (_1951 / ((_1955 * _1955) * 3.141590118408203125));
        float _1982 = isnan(1.0) ? _1551 : (isnan(_1551) ? 1.0 : min(_1551, 1.0));
        _1903 = (((((_1962 * _1727) + _456) * cbLight._m0[_1913].x) * _1981) * _1982) + _1839;
        _1905 = (((((_1962 * _1729) + _458) * cbLight._m0[_1913].y) * _1981) * _1982) + _1840;
        _1907 = (((((_1962 * _1730) + _459) * cbLight._m0[_1913].z) * _1981) * _1982) + _1841;
    }
    float _2017;
    float _2019;
    float _2021;
    if (_1631)
    {
        _2017 = _1903;
        _2019 = _1905;
        _2021 = _1907;
    }
    else
    {
        uint _2028 = _1536 + 3u;
        uint _2032 = _1536 + 11u;
        float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2028].w)) * _303) * 0.949999988079071044921875);
        float _2047 = _2046 * _2046;
        float _2048 = cbLight._m0[_2028].x + _381;
        float _2049 = cbLight._m0[_2028].y + _382;
        float _2050 = cbLight._m0[_2028].z + _383;
        float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
        float _2055 = _2054 * _2048;
        float _2056 = _2054 * _2049;
        float _2057 = _2054 * _2050;
        float _2058 = dot(vec3(_300, _301, _302), vec3(cbLight._m0[_2028].xyz));
        float _3930 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
        float _2061 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
        float _2062 = dot(vec3(_300, _301, _302), vec3(_2055, _2056, _2057));
        float _3941 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2065 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
        float _2066 = dot(vec3(cbLight._m0[_2028].xyz), vec3(_2055, _2056, _2057));
        float _3952 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
        float _2070 = _2047 * _2047;
        float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
        float _2081 = exp2(log2(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * 5.0);
        float _2088 = 1.0 - _2047;
        float _2098 = (0.5 / (((_1705 * ((_2061 * _2088) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_1705 * _2088) + _2047) * _2061))) * _2061;
        float _3963 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
        float _2100 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
        float _2101 = isnan(1.0) ? _1552 : (isnan(_1552) ? 1.0 : min(_1552, 1.0));
        _2017 = (((((_2081 * _1727) + _456) * cbLight._m0[_2032].x) * _2100) * _2101) + _1903;
        _2019 = (((((_2081 * _1729) + _458) * cbLight._m0[_2032].y) * _2100) * _2101) + _1905;
        _2021 = (((((_2081 * _1730) + _459) * cbLight._m0[_2032].z) * _2100) * _2101) + _1907;
    }
    float _2236;
    float _2238;
    float _2240;
    float _2242;
    float _2244;
    float _2246;
    if (_1534.y == 0u)
    {
        float _2176 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2177 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2176;
        float _2178 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2176;
        float _2179 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2176;
        uvec4 _2191 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2192 = _2191.x;
        uint _2203 = uint((float(_2191.y) * floor(float(uint(cbSceneParam._m0[85u].y * _390) / _2192))) + floor(float(uint(cbSceneParam._m0[85u].x * _389) / _2192)));
        float _2213 = (log2(_2179 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2214 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        uint _2217 = uint(isnan(14.0) ? _2214 : (isnan(_2214) ? 14.0 : min(_2214, 14.0)));
        uvec4 _2222 = texelFetch(g_lightClusterGridBuffer, int(((_2217 << 2u) + (_2203 << 6u)) >> 2u));
        uint _2223 = _2222.x;
        uint _2224 = _2191.z;
        float _2359;
        float _2361;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        if (((((1u << ((_2224 >> 4u) & 15u)) + 4294967295u) & _2223) == 0u) || ((_2224 & 240u) == 0u))
        {
            _2359 = 0.0;
            _2361 = 0.0;
            _2363 = 0.0;
            _2365 = 0.0;
            _2367 = 0.0;
            _2369 = 0.0;
        }
        else
        {
            float _2360;
            float _2362;
            float _2364;
            float _2366;
            float _2368;
            float _2370;
            float _2513 = 0.0;
            float _2514 = 0.0;
            float _2515 = 0.0;
            float _2516 = 0.0;
            float _2517 = 0.0;
            float _2518 = 0.0;
            uint _2519 = 0u;
            uint _2528;
            bool _2529;
            for (;;)
            {
                _2528 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2519 << 2u)) >> 2u)).x;
                _2529 = _2528 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2529)
                {
                    frontier_phi_61_pred = _2513;
                    frontier_phi_61_pred_1 = _2518;
                    frontier_phi_61_pred_2 = _2517;
                    frontier_phi_61_pred_3 = _2516;
                    frontier_phi_61_pred_4 = _2515;
                    frontier_phi_61_pred_5 = _2514;
                }
                else
                {
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    uint _2643;
                    _2637 = _2513;
                    _2638 = _2514;
                    _2639 = _2515;
                    _2640 = _2516;
                    _2641 = _2517;
                    _2642 = _2518;
                    _2643 = _2528;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    float _2573;
                    float _2574;
                    for (;;)
                    {
                        uint _2647 = uint(findLSB(_2643)) + (_2519 << 5u);
                        uint _2644 = (_2643 + 4294967295u) & _2643;
                        uint _2649 = _2647 * 48u;
                        vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2669 = (_2647 * 48u) + 4u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        uint _2688 = (_2647 * 48u) + 8u;
                        vec3 _2699 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x));
                        float _2703 = _2663.x - _2177;
                        float _2704 = _2663.y - _2178;
                        float _2705 = _2663.z - _2179;
                        float _2706 = dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705));
                        float _2709 = inversesqrt(_2706);
                        float _2710 = _2709 * _2703;
                        float _2711 = _2709 * _2704;
                        float _2712 = _2709 * _2705;
                        float _2713 = dot(vec3(_411, _414, _417), vec3(_2710, _2711, _2712));
                        float _2718 = 1.0 - (_2706 * _2663.w);
                        float _3989 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2719 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2720 = sqrt(_2706) * _2682.w;
                        float _2723 = 1.39999997615814208984375 / (_2720 + 1.39999997615814208984375);
                        float _2724 = _2723 * _2723;
                        float _2727 = ((1.0 - _2724) * _2713) + _2724;
                        float _2730 = _2720 * _2720;
                        float _2734 = ((isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))) * _2719) / ((_2730 * 0.699999988079071044921875) + 1.0);
                        float _2738 = (-0.0) - _2177;
                        float _2739 = (-0.0) - _2178;
                        float _2740 = (-0.0) - _2179;
                        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2755 = exp2(log2(1.0 / ((_2730 * 3.5) + 5.0)) * 0.25);
                        float _2756 = 1.0 - _487;
                        float _2763 = sqrt(1.0 - ((1.0 - (_2756 * _2756)) * (1.0 - (_2755 * _2755))));
                        float _2764 = _2763 * _2763;
                        float _2765 = _2764 * _2764;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2768 = _2747 + _2712;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2776 = dot(vec3(_411, _414, _417), vec3(_2745, _2746, _2747));
                        float _4005 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2779 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2780 = dot(vec3(_411, _414, _417), vec3(_2772 * _2766, _2772 * _2767, _2772 * _2768));
                        float _4016 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2787 = ((_2783 * _2783) * (_2765 + (-1.0))) + 1.0;
                        float _2788 = _2723 * _2764;
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2713) + _2789;
                        float _4027 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2794 = 1.0 - _2764;
                        float _2804 = (0.5 / (((_2793 * ((_2779 * _2794) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2793 * _2794) + _2764) * _2779))) * _2793;
                        float _4038 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2815 = (((_2765 * 3.1415927410125732421875) * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) / ((_2787 * _2787) * ((_2730 * 2.1991131305694580078125) + 3.141590118408203125))) * _2719;
                        _2572 = (_2734 * _2682.x) + _2640;
                        _2573 = (_2734 * _2682.y) + _2641;
                        _2574 = (_2734 * _2682.z) + _2642;
                        _2569 = (_2815 * _2699.x) + _2637;
                        _2570 = (_2815 * _2699.y) + _2638;
                        _2571 = (_2815 * _2699.z) + _2639;
                        if (_2644 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2637 = _2569;
                            _2638 = _2570;
                            _2639 = _2571;
                            _2640 = _2572;
                            _2641 = _2573;
                            _2642 = _2574;
                            _2643 = _2644;
                        }
                    }
                    frontier_phi_61_pred = _2569;
                    frontier_phi_61_pred_1 = _2574;
                    frontier_phi_61_pred_2 = _2573;
                    frontier_phi_61_pred_3 = _2572;
                    frontier_phi_61_pred_4 = _2571;
                    frontier_phi_61_pred_5 = _2570;
                }
                _2360 = frontier_phi_61_pred;
                _2370 = frontier_phi_61_pred_1;
                _2368 = frontier_phi_61_pred_2;
                _2366 = frontier_phi_61_pred_3;
                _2364 = frontier_phi_61_pred_4;
                _2362 = frontier_phi_61_pred_5;
                uint _2520 = _2519 + 1u;
                if (_2520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2513 = _2360;
                    _2514 = _2362;
                    _2515 = _2364;
                    _2516 = _2366;
                    _2517 = _2368;
                    _2518 = _2370;
                    _2519 = _2520;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2359 = _2360;
            _2361 = _2362;
            _2363 = _2364;
            _2365 = _2366;
            _2367 = _2368;
            _2369 = _2370;
        }
        uvec4 _2373 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2374 = _2373.z;
        uint _2376 = (_2374 >> 8u) & 15u;
        float _2481;
        float _2483;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        if (((4294967295u << _2376) & _2223) == 0u)
        {
            _2481 = _2359;
            _2483 = _2361;
            _2485 = _2363;
            _2487 = _2365;
            _2489 = _2367;
            _2491 = _2369;
        }
        else
        {
            float _2506 = inversesqrt(dot(vec3(_2177, _2178, _2179), vec3(_2177, _2178, _2179)));
            float _2507 = _2506 * _2177;
            float _2508 = _2506 * _2178;
            float _2509 = _2506 * _2179;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2376 < ((_2374 >> 12u) & 15u))
            {
                float _2482;
                float _2484;
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2620 = _2359;
                float _2621 = _2361;
                float _2622 = _2363;
                float _2623 = _2365;
                float _2624 = _2367;
                float _2625 = _2369;
                uint _2626 = _2376;
                uint _2635;
                bool _2636;
                for (;;)
                {
                    _2635 = texelFetch(g_lightClassification, int((((_2217 << 5u) + (_2203 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                    _2636 = _2635 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2636)
                    {
                        frontier_phi_67_pred = _2623;
                        frontier_phi_67_pred_1 = _2624;
                        frontier_phi_67_pred_2 = _2625;
                        frontier_phi_67_pred_3 = _2622;
                        frontier_phi_67_pred_4 = _2621;
                        frontier_phi_67_pred_5 = _2620;
                    }
                    else
                    {
                        float _2820;
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _2833 = _2620;
                        float _2834 = _2621;
                        float _2835 = _2622;
                        float _2836 = _2623;
                        float _2837 = _2624;
                        float _2838 = _2625;
                        uint _2839 = _2635;
                        uint _2840;
                        vec4 _2865;
                        float _2866;
                        vec4 _2881;
                        vec3 _2893;
                        vec4 _2909;
                        vec4 _2925;
                        float _2972;
                        bool _2973;
                        for (;;)
                        {
                            uint _2850 = ((_2626 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2839));
                            _2840 = (_2839 + 4294967295u) & _2839;
                            uint _2852 = _2850 * 40u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            _2866 = _2865.w;
                            uint _2868 = (_2850 * 40u) + 4u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2883 = (_2850 * 40u) + 8u;
                            _2893 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x));
                            uint _2896 = (_2850 * 40u) + 16u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2912 = (_2850 * 40u) + 20u;
                            _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            uint _2928 = (_2850 * 40u) + 24u;
                            vec4 _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2947 = (_2850 * 40u) + 28u;
                            vec4 _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            _2972 = fma(_2179, _2960.z, fma(_2178, _2960.y, _2960.x * _2177)) + _2960.w;
                            _2973 = !((fma(_2179, _2941.z, fma(_2178, _2941.y, _2941.x * _2177)) + _2941.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2973)
                            {
                                float _3000 = _2865.x - _2177;
                                float _3001 = _2865.y - _2178;
                                float _3002 = _2865.z - _2179;
                                float _3003 = dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002));
                                float _3006 = inversesqrt(_3003);
                                float _3007 = _3006 * _3000;
                                float _3008 = _3006 * _3001;
                                float _3009 = _3006 * _3002;
                                float _3013 = 1.0 - (_3003 / (_2866 * _2866));
                                float _4049 = isnan(0.0) ? _3013 : (isnan(_3013) ? 0.0 : max(_3013, 0.0));
                                float _3014 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3018 = sqrt(_3003) * _2881.w;
                                float _3020 = 1.39999997615814208984375 / (_3018 + 1.39999997615814208984375);
                                float _3021 = _3020 * _3020;
                                float _3024 = ((1.0 - _3021) * dot(vec3(_3007, _3008, _3009), vec3(_411, _414, _417))) + _3021;
                                float _3027 = _3018 * _3018;
                                float _3031 = (fma(_2179, _2909.z, fma(_2178, _2909.y, _2909.x * _2177)) + _2909.w) / _2972;
                                float _3032 = (fma(_2179, _2925.z, fma(_2178, _2925.y, _2925.x * _2177)) + _2925.w) / _2972;
                                float _3036 = 1.0 - dot(vec2(_3031, _3032), vec2(_3031, _3032));
                                float _4065 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3037 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3038 = _3037 * (((isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0))) * _3014) / ((_3027 * 0.699999988079071044921875) + 1.0));
                                float _3050 = exp2(log2(1.0 / ((_3027 * 3.5) + 5.0)) * 0.25);
                                float _3051 = 1.0 - _487;
                                float _3058 = sqrt(1.0 - ((1.0 - (_3051 * _3051)) * (1.0 - (_3050 * _3050))));
                                float _3059 = _3058 * _3058;
                                float _3060 = _3059 * _3059;
                                float _3061 = _3007 - _2507;
                                float _3062 = _3008 - _2508;
                                float _3063 = _3009 - _2509;
                                float _3067 = inversesqrt(dot(vec3(_3061, _3062, _3063), vec3(_3061, _3062, _3063)));
                                float _3071 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2507, (-0.0) - _2508, (-0.0) - _2509));
                                float _4076 = isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0));
                                float _3074 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3075 = dot(vec3(_411, _414, _417), vec3(_3067 * _3061, _3067 * _3062, _3067 * _3063));
                                float _4087 = isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0));
                                float _3078 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3082 = ((_3078 * _3078) * (_3060 + (-1.0))) + 1.0;
                                float _3083 = _3020 * _3059;
                                float _3084 = _3083 * _3083;
                                float _3090 = ((1.0 - _3084) * dot(vec3(_411, _414, _417), vec3(_3007, _3008, _3009))) + _3084;
                                float _4098 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0));
                                float _3091 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
                                float _3092 = 1.0 - _3059;
                                float _3102 = (0.5 / (((_3091 * ((_3074 * _3092) + _3059)) + 9.9999999392252902907785028219223e-09) + (((_3091 * _3092) + _3059) * _3074))) * _3091;
                                float _4109 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3112 = (_3037 * _3014) * (((_3060 * 3.1415927410125732421875) * (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0)))) / ((_3082 * _3082) * ((_3027 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3112 * _2893.x;
                                frontier_phi_73_pred_1 = _3112 * _2893.y;
                                frontier_phi_73_pred_2 = _3038 * _2881.z;
                                frontier_phi_73_pred_3 = _3038 * _2881.y;
                                frontier_phi_73_pred_4 = _3038 * _2881.x;
                                frontier_phi_73_pred_5 = _3112 * _2893.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3116 = frontier_phi_73_pred;
                            _3117 = frontier_phi_73_pred_1;
                            _3121 = frontier_phi_73_pred_2;
                            _3120 = frontier_phi_73_pred_3;
                            _3119 = frontier_phi_73_pred_4;
                            _3118 = frontier_phi_73_pred_5;
                            _2823 = _3119 + _2836;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2820 = _3116 + _2833;
                            _2821 = _3117 + _2834;
                            _2822 = _3118 + _2835;
                            if (_2840 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2833 = _2820;
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2840;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2823;
                        frontier_phi_67_pred_1 = _2824;
                        frontier_phi_67_pred_2 = _2825;
                        frontier_phi_67_pred_3 = _2822;
                        frontier_phi_67_pred_4 = _2821;
                        frontier_phi_67_pred_5 = _2820;
                    }
                    _2488 = frontier_phi_67_pred;
                    _2490 = frontier_phi_67_pred_1;
                    _2492 = frontier_phi_67_pred_2;
                    _2486 = frontier_phi_67_pred_3;
                    _2484 = frontier_phi_67_pred_4;
                    _2482 = frontier_phi_67_pred_5;
                    uint _2627 = _2626 + 1u;
                    if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2620 = _2482;
                        _2621 = _2484;
                        _2622 = _2486;
                        _2623 = _2488;
                        _2624 = _2490;
                        _2625 = _2492;
                        _2626 = _2627;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2490;
                frontier_phi_55_56_ladder_1 = _2492;
                frontier_phi_55_56_ladder_2 = _2488;
                frontier_phi_55_56_ladder_3 = _2486;
                frontier_phi_55_56_ladder_4 = _2484;
                frontier_phi_55_56_ladder_5 = _2482;
            }
            else
            {
                frontier_phi_55_56_ladder = _2367;
                frontier_phi_55_56_ladder_1 = _2369;
                frontier_phi_55_56_ladder_2 = _2365;
                frontier_phi_55_56_ladder_3 = _2363;
                frontier_phi_55_56_ladder_4 = _2361;
                frontier_phi_55_56_ladder_5 = _2359;
            }
            _2481 = frontier_phi_55_56_ladder_5;
            _2483 = frontier_phi_55_56_ladder_4;
            _2485 = frontier_phi_55_56_ladder_3;
            _2487 = frontier_phi_55_56_ladder_2;
            _2489 = frontier_phi_55_56_ladder;
            _2491 = frontier_phi_55_56_ladder_1;
        }
        float _2496 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2236 = (_2496 * _2487) + _1669;
        _2238 = (_2496 * _2489) + _1671;
        _2240 = (_2496 * _2491) + _1673;
        _2242 = ((_2481 * _456) * _2496) + _2017;
        _2244 = ((_2483 * _458) * _2496) + _2019;
        _2246 = ((_2485 * _459) * _2496) + _2021;
    }
    else
    {
        _2236 = _1669;
        _2238 = _1671;
        _2240 = _1673;
        _2242 = _2017;
        _2244 = _2019;
        _2246 = _2021;
    }
    uint _2252 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _2260 = ((cbMtdParam._m0[10u].x * cbMtdParam._m0[11u].y) * _282.x) * cbInstanceData._m0[_2252].x;
    float _2263 = ((cbMtdParam._m0[10u].y * cbMtdParam._m0[11u].y) * _282.y) * cbInstanceData._m0[_2252].y;
    float _2266 = ((cbMtdParam._m0[10u].z * cbMtdParam._m0[11u].y) * _282.z) * cbInstanceData._m0[_2252].z;
    float _4125 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4136 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4147 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2283 = (((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2236 + ((isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0))) * _471))) + ((_2242 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + _2260;
    float _2285 = (_2263 + ((_2244 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2238 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _471)));
    float _2287 = (_2266 + ((_2246 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _1281)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0))) * (_2240 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _471)));
    float _4173 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2300 = isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0));
    uint _2301 = _430 + 6u;
    float _2309 = _389 / cbSceneParam._m0[86u].x;
    float _2310 = _390 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _323 : (isnan(_323) ? cbSceneParam._m0[77u].w : min(_323, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2422;
    float _2424;
    float _2426;
    float _2428;
    if (_323 > cbSceneParam._m0[78u].w)
    {
        float _2384 = isnan(_323) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _323 : min(cbSceneParam._m0[80u].w, _323));
        float _2385 = _2384 / _323;
        float _2396 = _2385 * _374;
        float _2397 = _375 * _2385;
        float _2398 = (-0.0) - _2397;
        float _2400 = _2385 * _376;
        float _2402 = (cbSceneParam._m0[77u].w * _2398) / _2384;
        float _2403 = _2402 + cbSceneParam._m0[79u].w;
        float _2404 = cbSceneParam._m0[79u].w - _2397;
        float _2410 = sqrt(((_2396 * _2396) + (_2397 * _2397)) + (_2400 * _2400));
        float _2413 = (1.0 - (cbSceneParam._m0[77u].w / _2384)) * _2410;
        float _2418 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2420 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2582;
        if (abs((_2398 - _2402) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2582 = ((((_2403 > 0.0) ? exp2(_2418 * _2403) : (2.0 - exp2(_2420 * _2403))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2413;
        }
        else
        {
            float _2542 = 1.0 / cbSceneParam._m0[80u].x;
            float _2543 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : max(_2403, _2404));
            float _2544 = isnan(_2404) ? _2403 : (isnan(_2403) ? _2404 : min(_2403, _2404));
            float _2553 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : min(_2543, 0.0));
            float _2554 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : min(_2544, 0.0));
            _2582 = ((abs(_2410 / _2398) * cbSceneParam._m0[80u].y) * ((((_2553 - _2554) * 2.0) - ((exp2(_2418 * (isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0)))) - exp2(_2418 * (isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0))))) * _2542)) - ((exp2(_2420 * _2553) - exp2(_2420 * _2554)) * _2542))) + (_2413 * cbSceneParam._m0[80u].z);
        }
        vec4 _2584 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2593 = exp2((_2582 * (-1.44269502162933349609375)) * (1.0 - _2584.w));
        float _2594 = log2(_2593);
        float _2610 = log2(_2329);
        _2422 = (exp2(_2610 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].x)) * _2584.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2424 = (exp2(_2610 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].y)) * _2584.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2426 = (exp2(_2610 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2594 * cbSceneParam._m0[78u].z)) * _2584.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2428 = _2593 * _2329;
    }
    else
    {
        _2422 = _2326;
        _2424 = _2327;
        _2426 = _2328;
        _2428 = _2329;
    }
    float _2440 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2441 = _2440 == 3.0;
    float _2442 = log2(_2428);
    float _2446 = exp2(_2442 * cbSceneParam._m0[78u].x);
    float _2447 = exp2(_2442 * cbSceneParam._m0[78u].y);
    float _2448 = exp2(_2442 * cbSceneParam._m0[78u].z);
    float _2449 = _2446 * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0)));
    float _2450 = _2447 * (isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0)));
    float _2451 = _2448 * (isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0)));
    float _2460 = (_2440 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2460 * (_2441 ? _2449 : (_2449 + (cbSceneParam._m0[72u].w * _2422)));
    SV_Target.y = _2460 * (_2441 ? _2450 : (_2450 + (cbSceneParam._m0[72u].w * _2424)));
    SV_Target.z = _2460 * (_2441 ? _2451 : (_2451 + (cbSceneParam._m0[72u].w * _2426)));
    SV_Target.w = cbInstanceData._m0[_2301].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2260) * _2300) * _2446) * _2460;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2263) * _2300) * _2447) * _2460;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2266) * _2300) * _2448) * _2460;
    SV_Target_1.w = cbInstanceData._m0[_2301].w;
}


