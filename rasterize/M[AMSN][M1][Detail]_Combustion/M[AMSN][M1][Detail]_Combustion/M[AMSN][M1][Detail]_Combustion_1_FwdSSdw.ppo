#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1067;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _305 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3453 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
    float _313 = (_306 * ((_274.x * cbMtdParam._m0[12u].x) - _248)) + _248;
    float _314 = (_306 * ((_274.y * cbMtdParam._m0[12u].y) - _249)) + _249;
    float _315 = (_306 * ((_274.z * cbMtdParam._m0[12u].z) - _250)) + _250;
    vec4 _327 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _350 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _354 = _350.z;
    float _357 = (_350.x * 2.0) + (-1.0);
    float _358 = (_350.y * 2.0) + (-1.0);
    float _359 = dot(vec2(_357, _358), vec2(_357, _358));
    float _3464 = isnan(0.0) ? _359 : (isnan(_359) ? 0.0 : max(_359, 0.0));
    float _364 = sqrt(1.0 - (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))));
    float _372 = (((_327.z - _354) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _354;
    float _392 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _393 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _406 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_392 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_393 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _420 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3475 = isnan(0.0) ? _420 : (isnan(_420) ? 0.0 : max(_420, 0.0));
    float _421 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _429 = (((_421 * _421) * (3.0 - (_421 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _438 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _446 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3486 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _451 = (_447 * _447) * (3.0 - (_447 * 2.0));
    float _452 = _451 * cbMtdParam._m0[17u].x;
    float _453 = _451 * cbMtdParam._m0[17u].y;
    float _454 = sin(_438);
    float _455 = cos(_438);
    float _456 = TEXCOORD - _452;
    float _457 = TEXCOORD_1 - _453;
    vec4 _477 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_452 + fma(_457, (-0.0) - _454, _456 * _455))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_457, _455, _456 * _454) + _453)) + cbTextureTilingScale._m0[0u].w));
    float _483 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _477.x;
    float _485 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _477.y;
    float _487 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _477.z;
    vec4 _510 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _392) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _393) + cbTextureTilingScale._m0[5u].w));
    float _519 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_510.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3497 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    float _530 = (((((_327.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _357) + (cbMtdParam._m0[16u].y * _357);
    float _532 = (((((_327.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _358) + (cbMtdParam._m0[16u].y * _358);
    float _535 = fma(_364, _213 * NORMAL.x, fma(_532, _220 * TANGENT.x, (_206 * _198) * _530));
    float _538 = fma(_364, _213 * NORMAL.y, fma(_532, _220 * TANGENT.y, (_206 * _199) * _530));
    float _541 = fma(_364, _213 * NORMAL.z, fma(_532, _220 * TANGENT.z, (_206 * _200) * _530));
    float _545 = inversesqrt(dot(vec3(_535, _538, _541), vec3(_535, _538, _541)));
    float _546 = _545 * _535;
    float _547 = _545 * _538;
    float _548 = _545 * _541;
    float _3508 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _549 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _3519 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3530 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3541 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _568 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _608 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _618 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _608);
    float _619 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _608);
    float _620 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _608);
    float _624 = inversesqrt(dot(vec3(_618, _619, _620), vec3(_618, _619, _620)));
    float _625 = _618 * _624;
    float _626 = _619 * _624;
    float _627 = _620 * _624;
    float _633 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _634 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _652 = fma(_548, cbSceneParam._m0[5u].z, fma(_547, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _546));
    float _655 = fma(_548, cbSceneParam._m0[6u].z, fma(_547, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _546));
    float _658 = fma(_548, cbSceneParam._m0[7u].z, fma(_547, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _546));
    uint _671 = uint(roundEven(NORMAL.w)) * 13u;
    uint _672 = _671 + 9u;
    uint _673 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _679 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * cbInstanceData._m0[_673].x;
    float _680 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * cbInstanceData._m0[_673].y;
    float _681 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0)))) * cbInstanceData._m0[_673].z;
    float _3552 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _3563 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _683 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _3574 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
    vec4 _693 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _633, cbSceneParam._m0[86u].y * _634));
    float _696 = _693.x * TEXCOORD_3.w;
    float _697 = dot(vec3(_546, _547, _548), vec3(_625, _626, _627));
    float _700 = _697 * 2.0;
    float _704 = (_700 * _546) - _625;
    float _705 = (_700 * _547) - _626;
    float _706 = (_700 * _548) - _627;
    float _710 = abs(dot(vec3(_625, _626, _627), vec3(_546, _547, _548)));
    float _3585 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _712 = sqrt(_549);
    float _724 = exp2((_712 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_712 * 3.0));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _760 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _764 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1066;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _791 = fma(_764, cbModelParam._m0[26u].z, fma(_760, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756));
        float _795 = fma(_764, cbModelParam._m0[27u].z, fma(_760, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756));
        float _799 = fma(_764, cbModelParam._m0[28u].z, fma(_760, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756));
        float _824 = _756 + _546;
        float _825 = _760 + _547;
        float _826 = _764 + _548;
        float _836 = fma(_826, cbModelParam._m0[26u].z, fma(_825, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _824)) - _791;
        float _837 = fma(_826, cbModelParam._m0[27u].z, fma(_825, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _824)) - _795;
        float _838 = fma(_826, cbModelParam._m0[28u].z, fma(_825, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _824)) - _799;
        float _842 = inversesqrt(dot(vec3(_836, _837, _838), vec3(_836, _837, _838)));
        float _855 = ((_842 * _836) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_791 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _856 = ((_842 * _837) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_795 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _857 = ((_842 * _838) / cbModelParam._m0[34u].z) + ((((((_799 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_855, _856, _857), 0.0);
        float _894 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_860.x + (-0.5));
        float _896 = _894 * (_860.y + (-0.5));
        float _897 = _894 * (_860.z + (-0.5));
        float _904 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_867.x + (-0.5));
        float _906 = _904 * (_867.y + (-0.5));
        float _907 = _904 * (_867.z + (-0.5));
        float _914 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _915 = _914 * (_874.x + (-0.5));
        float _916 = _914 * (_874.y + (-0.5));
        float _917 = _914 * (_874.z + (-0.5));
        float _924 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _925 = _924 * (_881.x + (-0.5));
        float _926 = _924 * (_881.y + (-0.5));
        float _927 = _924 * (_881.z + (-0.5));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = _895 * 0.5;
        float _932 = _905 * 0.5;
        float _933 = _915 * 0.5;
        float _934 = dot(vec3(_931, _932, _933), vec3(_931, _932, _933));
        float _939 = (_934 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_934);
        float _948 = (dot(vec3(_546, _547, _548), vec3(_939 * _931, _939 * _932, _939 * _933)) + 1.0) * 0.5;
        float _3611 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _958 = sqrt(((_932 * _932) + (_931 * _931)) + (_933 * _933)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3622 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _960 = _959 * 2.0;
        float _964 = (1.0 - _959) / (_959 + 1.0);
        float _3633 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _974 = ((((1.0 - _965) * (_960 + 2.0)) * exp2(log2(isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0))) * (_960 + 1.0))) + _965) * _928;
        float _975 = _896 * 0.5;
        float _976 = _906 * 0.5;
        float _977 = _916 * 0.5;
        float _978 = dot(vec3(_975, _976, _977), vec3(_975, _976, _977));
        float _983 = (_978 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_978);
        float _991 = (dot(vec3(_546, _547, _548), vec3(_983 * _975, _983 * _976, _983 * _977)) + 1.0) * 0.5;
        float _3644 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _1000 = sqrt(((_976 * _976) + (_975 * _975)) + (_977 * _977)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3655 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1001 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
        float _1002 = _1001 * 2.0;
        float _1006 = (1.0 - _1001) / (_1001 + 1.0);
        float _3666 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1016 = ((((1.0 - _1007) * (_1002 + 2.0)) * exp2(log2(isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1002 + 1.0))) + _1007) * _929;
        float _1017 = _897 * 0.5;
        float _1018 = _907 * 0.5;
        float _1019 = _917 * 0.5;
        float _1020 = dot(vec3(_1017, _1018, _1019), vec3(_1017, _1018, _1019));
        float _1025 = (_1020 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1020);
        float _1033 = (dot(vec3(_546, _547, _548), vec3(_1025 * _1017, _1025 * _1018, _1025 * _1019)) + 1.0) * 0.5;
        float _3677 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1042 = sqrt(((_1018 * _1018) + (_1017 * _1017)) + (_1019 * _1019)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3688 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1043 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
        float _1044 = _1043 * 2.0;
        float _1048 = (1.0 - _1043) / (_1043 + 1.0);
        float _3699 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1058 = ((((1.0 - _1049) * (_1044 + 2.0)) * exp2(log2(isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * (_1044 + 1.0))) + _1049) * _930;
        _1066 = _897;
        _1068 = _896;
        _1069 = _895;
        _1070 = _907;
        _1071 = _906;
        _1072 = _905;
        _1073 = _917;
        _1074 = _916;
        _1075 = _915;
        _1076 = _930;
        _1077 = _929;
        _1078 = _928;
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)));
        _1080 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0)));
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0)));
    }
    else
    {
        _1066 = _1067;
        _1068 = _1067;
        _1069 = _1067;
        _1070 = _1067;
        _1071 = _1067;
        _1072 = _1067;
        _1073 = _1067;
        _1074 = _1067;
        _1075 = _1067;
        _1076 = _1067;
        _1077 = _1067;
        _1078 = _1067;
        _1079 = 0.0;
        _1080 = 0.0;
        _1081 = 0.0;
    }
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1107 = fma(_764, cbModelParam._m0[30u].z, fma(_760, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _756));
        float _1111 = fma(_764, cbModelParam._m0[31u].z, fma(_760, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _756));
        float _1115 = fma(_764, cbModelParam._m0[32u].z, fma(_760, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _756));
        float _1138 = _756 + _546;
        float _1139 = _760 + _547;
        float _1140 = _764 + _548;
        float _1150 = fma(_1140, cbModelParam._m0[30u].z, fma(_1139, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1138)) - _1107;
        float _1151 = fma(_1140, cbModelParam._m0[31u].z, fma(_1139, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1138)) - _1111;
        float _1152 = fma(_1140, cbModelParam._m0[32u].z, fma(_1139, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1138)) - _1115;
        float _1156 = inversesqrt(dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152)));
        float _1169 = ((_1156 * _1150) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1107 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1170 = ((_1156 * _1151) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1111 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1171 = ((_1156 * _1152) / cbModelParam._m0[35u].z) + ((((((_1115 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1173 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1180 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1187 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1169, _1170, _1171), 0.0);
        float _1206 = exp2((_1173.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1173.x + (-0.5));
        float _1208 = _1206 * (_1173.y + (-0.5));
        float _1209 = _1206 * (_1173.z + (-0.5));
        float _1216 = exp2((_1180.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1180.x + (-0.5));
        float _1218 = _1216 * (_1180.y + (-0.5));
        float _1219 = _1216 * (_1180.z + (-0.5));
        float _1226 = exp2((_1187.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1187.x + (-0.5));
        float _1228 = _1226 * (_1187.y + (-0.5));
        float _1229 = _1226 * (_1187.z + (-0.5));
        float _1236 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1194.x + (-0.5));
        float _1238 = _1236 * (_1194.y + (-0.5));
        float _1239 = _1236 * (_1194.z + (-0.5));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = _1207 * 0.5;
        float _1244 = _1217 * 0.5;
        float _1245 = _1227 * 0.5;
        float _1246 = dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245));
        float _1251 = (_1246 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1246);
        float _1259 = (dot(vec3(_546, _547, _548), vec3(_1251 * _1243, _1251 * _1244, _1251 * _1245)) + 1.0) * 0.5;
        float _3740 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1268 = sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3751 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
        float _1270 = _1269 * 2.0;
        float _1274 = (1.0 - _1269) / (_1269 + 1.0);
        float _3762 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
        float _1284 = ((((1.0 - _1275) * (_1270 + 2.0)) * exp2(log2(isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * (_1270 + 1.0))) + _1275) * _1240;
        float _1285 = _1208 * 0.5;
        float _1286 = _1218 * 0.5;
        float _1287 = _1228 * 0.5;
        float _1288 = dot(vec3(_1285, _1286, _1287), vec3(_1285, _1286, _1287));
        float _1293 = (_1288 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1288);
        float _1301 = (dot(vec3(_546, _547, _548), vec3(_1293 * _1285, _1293 * _1286, _1293 * _1287)) + 1.0) * 0.5;
        float _3773 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1310 = sqrt(((_1286 * _1286) + (_1285 * _1285)) + (_1287 * _1287)) / (_1241 + 9.9999997473787516355514526367188e-06);
        float _3784 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _1312 = _1311 * 2.0;
        float _1316 = (1.0 - _1311) / (_1311 + 1.0);
        float _3795 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0));
        float _1326 = ((((1.0 - _1317) * (_1312 + 2.0)) * exp2(log2(isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0))) * (_1312 + 1.0))) + _1317) * _1241;
        float _1327 = _1209 * 0.5;
        float _1328 = _1219 * 0.5;
        float _1329 = _1229 * 0.5;
        float _1330 = dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329));
        float _1335 = (_1330 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1330);
        float _1343 = (dot(vec3(_546, _547, _548), vec3(_1335 * _1327, _1335 * _1328, _1335 * _1329)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1352 = sqrt(((_1328 * _1328) + (_1327 * _1327)) + (_1329 * _1329)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1354 = _1353 * 2.0;
        float _1358 = (1.0 - _1353) / (_1353 + 1.0);
        float _3828 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1368 = ((((1.0 - _1359) * (_1354 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1354 + 1.0))) + _1359) * _1242;
        _1376 = _1209;
        _1377 = _1208;
        _1378 = _1207;
        _1379 = _1219;
        _1380 = _1218;
        _1381 = _1217;
        _1382 = _1229;
        _1383 = _1228;
        _1384 = _1227;
        _1385 = _1242;
        _1386 = _1241;
        _1387 = _1240;
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0)));
        _1389 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0)));
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)));
    }
    else
    {
        _1376 = _1067;
        _1377 = _1067;
        _1378 = _1067;
        _1379 = _1067;
        _1380 = _1067;
        _1381 = _1067;
        _1382 = _1067;
        _1383 = _1067;
        _1384 = _1067;
        _1385 = _1067;
        _1386 = _1067;
        _1387 = _1067;
        _1388 = 0.0;
        _1389 = 0.0;
        _1390 = 0.0;
    }
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1079)) + _1079;
    float _1401 = (cbModelParam._m0[1u].x * (_1389 - _1080)) + _1080;
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1081)) + _1081;
    float _1423 = fma(_1402, cbSceneParam._m0[89u].z, fma(_1401, cbSceneParam._m0[89u].y, _1400 * cbSceneParam._m0[89u].x));
    float _1426 = fma(_1402, cbSceneParam._m0[90u].z, fma(_1401, cbSceneParam._m0[90u].y, _1400 * cbSceneParam._m0[90u].x));
    float _1429 = fma(_1402, cbSceneParam._m0[91u].z, fma(_1401, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1400));
    float _1444 = _704 * 0.5;
    float _1445 = _705 * 0.5;
    float _1446 = _706 * 0.5;
    float _1447 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1450 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1377, _1380, _1383, _1386));
    float _1453 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1487;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1460 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1066, _1070, _1073, _1076));
        float _1464 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1068, _1071, _1074, _1077));
        float _1468 = dot(vec4(_1444, _1445, _1446, 1.0), vec4(_1069, _1072, _1075, _1078));
        float _1475 = dot(vec4(cbModelParam._m0[39u]), vec4(_1444, _1445, _1446, 1.0));
        _1487 = dot(vec3(isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0)), isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1475) ? 0.0 : (isnan(0.0) ? _1475 : max(0.0, _1475))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1487 = 1.0;
    }
    float _1498;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1489 = dot(vec4(cbModelParam._m0[40u]), vec4(_1444, _1445, _1446, 1.0));
        _1498 = dot(vec3(isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1489) ? 0.0 : (isnan(0.0) ? _1489 : max(0.0, _1489))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1498 = 1.0;
    }
    float _1502 = (_1498 * cbModelParam._m0[1u].x) + (_1487 * (1.0 - cbModelParam._m0[1u].x));
    float _1512 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _549);
    float _1513 = isnan(_1512) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1512 : min(cbModelParam._m0[25u].z, _1512));
    float _1593;
    float _1595;
    float _1597;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1560 = fma(_764, cbModelParam._m0[13u].z, fma(_760, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756)) + cbModelParam._m0[13u].w;
        float _1564 = fma(_764, cbModelParam._m0[14u].z, fma(_760, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756)) + cbModelParam._m0[14u].w;
        float _1568 = fma(_764, cbModelParam._m0[15u].z, fma(_760, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756)) + cbModelParam._m0[15u].w;
        float _1571 = fma(_706, cbModelParam._m0[13u].z, fma(_705, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704));
        float _1574 = fma(_706, cbModelParam._m0[14u].z, fma(_705, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704));
        float _1577 = fma(_706, cbModelParam._m0[15u].z, fma(_705, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704));
        float _1605;
        if (_1571 > 0.0)
        {
            _1605 = abs((1.0 - _1560) / _1571);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1560 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1605 = frontier_phi_14_12_ladder;
        }
        float _1828;
        if (_1574 > 0.0)
        {
            _1828 = abs((1.0 - _1564) / _1574);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1574 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1564 + 1.0) / _1574);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1828 = frontier_phi_23_19_ladder;
        }
        float _2074;
        if (_1577 > 0.0)
        {
            _2074 = abs((1.0 - _1568) / _1577);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1577 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1568 + 1.0) / _1577);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2074 = frontier_phi_35_30_ladder;
        }
        float _2076 = isnan(_1828) ? _1605 : (isnan(_1605) ? _1828 : min(_1605, _1828));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1571) + _1560;
        float _2082 = (_2077 * _1574) + _1564;
        float _2083 = (_2077 * _1577) + _1568;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2086 = (-1.0) - _2084;
        float _2088 = _2084 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2083 > _2088) || ((_2083 < _2086) || ((_2082 > _2088) || ((_2082 < _2086) || ((_2081 < _2086) || (_2081 > _2088))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2207 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1513);
            frontier_phi_13_35_ladder = _2207.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2207.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2207.x * cbModelParam._m0[1u].y;
        }
        _1593 = frontier_phi_13_35_ladder_2;
        _1595 = frontier_phi_13_35_ladder_1;
        _1597 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1581 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_704, _705, _706), _1513);
        _1593 = _1581.x * cbModelParam._m0[1u].y;
        _1595 = _1581.y * cbModelParam._m0[1u].y;
        _1597 = _1581.z * cbModelParam._m0[1u].y;
    }
    float _1601 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _549);
    float _1602 = isnan(_1601) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1601 : min(cbModelParam._m0[25u].w, _1601));
    float _1693;
    float _1695;
    float _1697;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1657 = fma(_764, cbModelParam._m0[21u].z, fma(_760, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756)) + cbModelParam._m0[21u].w;
        float _1661 = fma(_764, cbModelParam._m0[22u].z, fma(_760, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756)) + cbModelParam._m0[22u].w;
        float _1665 = fma(_764, cbModelParam._m0[23u].z, fma(_760, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756)) + cbModelParam._m0[23u].w;
        float _1668 = fma(_706, cbModelParam._m0[21u].z, fma(_705, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704));
        float _1671 = fma(_706, cbModelParam._m0[22u].z, fma(_705, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704));
        float _1674 = fma(_706, cbModelParam._m0[23u].z, fma(_705, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704));
        float _1833;
        if (_1668 > 0.0)
        {
            _1833 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1833 = frontier_phi_25_21_ladder;
        }
        float _2101;
        if (_1671 > 0.0)
        {
            _2101 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2101 = frontier_phi_37_32_ladder;
        }
        float _2306;
        if (_1674 > 0.0)
        {
            _2306 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2306 = frontier_phi_46_43_ladder;
        }
        float _2308 = isnan(_2101) ? _1833 : (isnan(_1833) ? _2101 : min(_1833, _2101));
        float _2309 = isnan(_2306) ? _2308 : (isnan(_2308) ? _2306 : min(_2308, _2306));
        float _2313 = (_2309 * _1668) + _1657;
        float _2314 = (_2309 * _1671) + _1661;
        float _2315 = (_2309 * _1674) + _1665;
        float _2316 = _2309 * 9.9999997473787516355514526367188e-05;
        float _2317 = (-1.0) - _2316;
        float _2319 = _2316 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2315 > _2319) || ((_2315 < _2317) || ((_2314 > _2319) || ((_2314 < _2317) || ((_2313 < _2317) || (_2313 > _2319))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2559 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2315, cbModelParam._m0[17u].z, fma(_2314, cbModelParam._m0[17u].y, _2313 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2315, cbModelParam._m0[18u].z, fma(_2314, cbModelParam._m0[18u].y, _2313 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2315, cbModelParam._m0[19u].z, fma(_2314, cbModelParam._m0[19u].y, _2313 * cbModelParam._m0[19u].x))), _1602);
            frontier_phi_22_46_ladder = _2559.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2559.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2559.x * cbModelParam._m0[1u].z;
        }
        _1693 = frontier_phi_22_46_ladder_2;
        _1695 = frontier_phi_22_46_ladder_1;
        _1697 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1677 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_704, _705, _706), _1602);
        _1693 = _1677.x * cbModelParam._m0[1u].z;
        _1695 = _1677.y * cbModelParam._m0[1u].z;
        _1697 = _1677.z * cbModelParam._m0[1u].z;
    }
    float _1709 = ((((1.0 - _724) * ((_712 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_724 * _712)) * _696;
    float _1710 = _1709 * ((cbModelParam._m0[1u].w * (_1693 - _1593)) + _1593);
    float _1711 = _1709 * ((cbModelParam._m0[1u].w * (_1695 - _1595)) + _1595);
    float _1712 = _1709 * ((cbModelParam._m0[1u].w * (_1697 - _1597)) + _1597);
    float _1715 = fma(_1712, cbSceneParam._m0[89u].z, fma(_1711, cbSceneParam._m0[89u].y, _1710 * cbSceneParam._m0[89u].x));
    float _1718 = fma(_1712, cbSceneParam._m0[90u].z, fma(_1711, cbSceneParam._m0[90u].y, _1710 * cbSceneParam._m0[90u].x));
    float _1721 = fma(_1712, cbSceneParam._m0[91u].z, fma(_1711, cbSceneParam._m0[91u].y, _1710 * cbSceneParam._m0[91u].x));
    vec4 _1729 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_633, _634));
    float _1731 = _1729.w;
    float _1743 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1731);
    float _1744 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1731);
    float _1745 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1731);
    uvec4 _1749 = floatBitsToUint(cbInstanceData._m0[_671 + 5u]);
    uint _1751 = _1749.x * 14u;
    uint _1752 = _1751 + 13u;
    float _1759 = _696 + (-1.0);
    float _1764 = (cbLight._m0[_1752].x * _1759) + 1.0;
    float _1765 = (cbLight._m0[_1752].y * _1759) + 1.0;
    float _1766 = (cbLight._m0[_1752].z * _1759) + 1.0;
    float _1767 = (cbLight._m0[_1752].w * _1759) + 1.0;
    uint _1768 = _1751 + 5u;
    float _1774 = isnan(1.0) ? _1765 : (isnan(_1765) ? 1.0 : min(_1765, 1.0));
    uint _1778 = _1751 + 4u;
    float _1787 = isnan(1.0) ? _1764 : (isnan(_1764) ? 1.0 : min(_1764, 1.0));
    uint _1791 = _1751 | 1u;
    float _1802 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_546, _547, _548));
    float _1805 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_546, _547, _548));
    float _3964 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
    float _3975 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1810 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * 0.3183098733425140380859375;
    float _1812 = (isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0))) * 0.3183098733425140380859375;
    float _1819 = ((cbLight._m0[_1768].x * _1774) * _1812) + (((cbLight._m0[_1778].x * _1743) * _1787) * _1810);
    float _1820 = ((_1774 * cbLight._m0[_1768].y) * _1812) + (((cbLight._m0[_1778].y * _1744) * _1787) * _1810);
    float _1821 = ((_1774 * cbLight._m0[_1768].z) * _1812) + (((cbLight._m0[_1778].z * _1745) * _1787) * _1810);
    uvec4 _1825 = floatBitsToUint(cbLight._m0[_1751 + 12u]);
    bool _1827 = _1825.x == 0u;
    float _1838;
    float _1840;
    float _1842;
    if (_1827)
    {
        _1838 = _1819;
        _1840 = _1820;
        _1842 = _1821;
    }
    else
    {
        uint _1846 = _1751 + 6u;
        float _1862 = (dot(vec3(cbLight._m0[_1751 + 2u].xyz), vec3(_546, _547, _548)) * 0.5) + 0.5;
        float _1863 = _1862 * _1862;
        float _3986 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
        float _1864 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1865 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _1838 = (((cbLight._m0[_1846].x * 0.3183098733425140380859375) * _1864) * _1865) + _1819;
        _1840 = (((cbLight._m0[_1846].y * 0.3183098733425140380859375) * _1864) * _1865) + _1820;
        _1842 = (((cbLight._m0[_1846].z * 0.3183098733425140380859375) * _1864) * _1865) + _1821;
    }
    bool _1845 = _1825.y == 0u;
    float _1883;
    float _1885;
    float _1887;
    if (_1845)
    {
        _1883 = _1838;
        _1885 = _1840;
        _1887 = _1842;
    }
    else
    {
        uint _2045 = _1751 + 7u;
        float _2061 = (dot(vec3(cbLight._m0[_1751 + 3u].xyz), vec3(_546, _547, _548)) * 0.5) + 0.5;
        float _2062 = _2061 * _2061;
        float _4002 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
        float _2063 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _2064 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _1883 = (((cbLight._m0[_2045].x * 0.3183098733425140380859375) * _2063) * _2064) + _1838;
        _1885 = (((cbLight._m0[_2045].y * 0.3183098733425140380859375) * _2063) * _2064) + _1840;
        _1887 = (((cbLight._m0[_2045].z * 0.3183098733425140380859375) * _2063) * _2064) + _1842;
    }
    uint _1890 = _1751 + 8u;
    float _1903 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1751].w)) * _549) * 0.949999988079071044921875);
    float _1904 = _1903 * _1903;
    float _1905 = cbLight._m0[_1751].x + _625;
    float _1906 = cbLight._m0[_1751].y + _626;
    float _1907 = cbLight._m0[_1751].z + _627;
    float _1911 = inversesqrt(dot(vec3(_1905, _1906, _1907), vec3(_1905, _1906, _1907)));
    float _1912 = _1911 * _1905;
    float _1913 = _1911 * _1906;
    float _1914 = _1911 * _1907;
    float _1915 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_1751].xyz));
    float _4018 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
    float _1918 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _1919 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _1920 = dot(vec3(_546, _547, _548), vec3(_1912, _1913, _1914));
    float _4040 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1923 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _1924 = dot(vec3(cbLight._m0[_1751].xyz), vec3(_1912, _1913, _1914));
    float _4051 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0));
    float _1928 = _1904 * _1904;
    float _1932 = ((_1923 * _1923) * (_1928 + (-1.0))) + 1.0;
    float _1943 = (exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1944 = 1.0 - _1904;
    float _1955 = (0.5 / (((_1919 * ((_1918 * _1944) + _1904)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _1944) + _1904) * _1918))) * _1918;
    float _4062 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1957 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_1928 / ((_1932 * _1932) * 3.141590118408203125));
    uint _1971 = _1751 + 9u;
    float _1982 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1791].w)) * _549) * 0.949999988079071044921875);
    float _1983 = _1982 * _1982;
    float _1984 = cbLight._m0[_1791].x + _625;
    float _1985 = cbLight._m0[_1791].y + _626;
    float _1986 = cbLight._m0[_1791].z + _627;
    float _1990 = inversesqrt(dot(vec3(_1984, _1985, _1986), vec3(_1984, _1985, _1986)));
    float _1991 = _1990 * _1984;
    float _1992 = _1990 * _1985;
    float _1993 = _1990 * _1986;
    float _1994 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_1791].xyz));
    float _4073 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _1998 = dot(vec3(_546, _547, _548), vec3(_1991, _1992, _1993));
    float _4084 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2001 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2002 = dot(vec3(cbLight._m0[_1791].xyz), vec3(_1991, _1992, _1993));
    float _4095 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2006 = _1983 * _1983;
    float _2010 = ((_2001 * _2001) * (_2006 + (-1.0))) + 1.0;
    float _2019 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2020 = 1.0 - _1983;
    float _2030 = (0.5 / (((_1919 * ((_1997 * _2020) + _1983)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2020) + _1983) * _1997))) * _1997;
    float _4106 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2032 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2006 / ((_2010 * _2010) * 3.141590118408203125));
    float _2042 = (((_2019 * cbLight._m0[_1971].x) * _2032) * _1774) + ((((cbLight._m0[_1890].x * _1743) * _1943) * _1957) * _1787);
    float _2043 = (((_2019 * cbLight._m0[_1971].y) * _2032) * _1774) + ((((cbLight._m0[_1890].y * _1744) * _1943) * _1957) * _1787);
    float _2044 = (((_2019 * cbLight._m0[_1971].z) * _2032) * _1774) + ((((cbLight._m0[_1890].z * _1745) * _1943) * _1957) * _1787);
    float _2106;
    float _2108;
    float _2110;
    if (_1827)
    {
        _2106 = _2042;
        _2108 = _2043;
        _2110 = _2044;
    }
    else
    {
        uint _2112 = _1751 + 2u;
        uint _2116 = _1751 + 10u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _549) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _625;
        float _2133 = cbLight._m0[_2112].y + _626;
        float _2134 = cbLight._m0[_2112].z + _627;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_2112].xyz));
        float _4117 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _2146 = dot(vec3(_546, _547, _548), vec3(_2139, _2140, _2141));
        float _4128 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4139 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2167 = (exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2168 = 1.0 - _2131;
        float _2178 = (0.5 / (((_1919 * ((_2145 * _2168) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2168) + _2131) * _2145))) * _2145;
        float _4150 = isnan(0.0) ? _2178 : (isnan(_2178) ? 0.0 : max(_2178, 0.0));
        float _2180 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2181 = isnan(1.0) ? _1766 : (isnan(_1766) ? 1.0 : min(_1766, 1.0));
        _2106 = (((_2167 * cbLight._m0[_2116].x) * _2180) * _2181) + _2042;
        _2108 = (((_2167 * cbLight._m0[_2116].y) * _2180) * _2181) + _2043;
        _2110 = (((_2167 * cbLight._m0[_2116].z) * _2180) * _2181) + _2044;
    }
    float _2216;
    float _2218;
    float _2220;
    if (_1845)
    {
        _2216 = _2106;
        _2218 = _2108;
        _2220 = _2110;
    }
    else
    {
        uint _2227 = _1751 + 3u;
        uint _2231 = _1751 + 11u;
        float _2245 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2227].w)) * _549) * 0.949999988079071044921875);
        float _2246 = _2245 * _2245;
        float _2247 = cbLight._m0[_2227].x + _625;
        float _2248 = cbLight._m0[_2227].y + _626;
        float _2249 = cbLight._m0[_2227].z + _627;
        float _2253 = inversesqrt(dot(vec3(_2247, _2248, _2249), vec3(_2247, _2248, _2249)));
        float _2254 = _2253 * _2247;
        float _2255 = _2253 * _2248;
        float _2256 = _2253 * _2249;
        float _2257 = dot(vec3(_546, _547, _548), vec3(cbLight._m0[_2227].xyz));
        float _4166 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
        float _2260 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _2261 = dot(vec3(_546, _547, _548), vec3(_2254, _2255, _2256));
        float _4177 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
        float _2264 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2265 = dot(vec3(cbLight._m0[_2227].xyz), vec3(_2254, _2255, _2256));
        float _4188 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
        float _2269 = _2246 * _2246;
        float _2273 = ((_2264 * _2264) * (_2269 + (-1.0))) + 1.0;
        float _2282 = (exp2(log2(1.0 - (isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2283 = 1.0 - _2246;
        float _2293 = (0.5 / (((_1919 * ((_2260 * _2283) + _2246)) + 9.9999999392252902907785028219223e-09) + (((_1919 * _2283) + _2246) * _2260))) * _2260;
        float _4199 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2295 = (isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_2269 / ((_2273 * _2273) * 3.141590118408203125));
        float _2296 = isnan(1.0) ? _1767 : (isnan(_1767) ? 1.0 : min(_1767, 1.0));
        _2216 = (((_2282 * cbLight._m0[_2231].x) * _2295) * _2296) + _2106;
        _2218 = (((_2282 * cbLight._m0[_2231].y) * _2295) * _2296) + _2108;
        _2220 = (((_2282 * cbLight._m0[_2231].z) * _2295) * _2296) + _2110;
    }
    float _2431;
    float _2433;
    float _2435;
    float _2437;
    float _2439;
    float _2441;
    if (_1749.y == 0u)
    {
        float _2371 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2372 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2371;
        float _2373 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2371;
        float _2374 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2371;
        uvec4 _2386 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2387 = _2386.x;
        uint _2398 = uint((float(_2386.y) * floor(float(uint(cbSceneParam._m0[85u].y * _634) / _2387))) + floor(float(uint(cbSceneParam._m0[85u].x * _633) / _2387)));
        float _2408 = (log2(_2374 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2409 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        uint _2412 = uint(isnan(14.0) ? _2409 : (isnan(_2409) ? 14.0 : min(_2409, 14.0)));
        uvec4 _2417 = texelFetch(g_lightClusterGridBuffer, int(((_2412 << 2u) + (_2398 << 6u)) >> 2u));
        uint _2418 = _2417.x;
        uint _2419 = _2386.z;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((((1u << ((_2419 >> 4u) & 15u)) + 4294967295u) & _2418) == 0u) || ((_2419 & 240u) == 0u))
        {
            _2564 = 0.0;
            _2566 = 0.0;
            _2568 = 0.0;
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
        }
        else
        {
            float _2565;
            float _2567;
            float _2569;
            float _2571;
            float _2573;
            float _2575;
            float _2717 = 0.0;
            float _2718 = 0.0;
            float _2719 = 0.0;
            float _2720 = 0.0;
            float _2721 = 0.0;
            float _2722 = 0.0;
            uint _2723 = 0u;
            uint _2732;
            bool _2733;
            for (;;)
            {
                _2732 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2723 << 2u)) >> 2u)).x;
                _2733 = _2732 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2733)
                {
                    frontier_phi_61_pred = _2717;
                    frontier_phi_61_pred_1 = _2722;
                    frontier_phi_61_pred_2 = _2721;
                    frontier_phi_61_pred_3 = _2720;
                    frontier_phi_61_pred_4 = _2719;
                    frontier_phi_61_pred_5 = _2718;
                }
                else
                {
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    uint _2847;
                    _2841 = _2717;
                    _2842 = _2718;
                    _2843 = _2719;
                    _2844 = _2720;
                    _2845 = _2721;
                    _2846 = _2722;
                    _2847 = _2732;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    float _2777;
                    float _2778;
                    for (;;)
                    {
                        uint _2851 = uint(findLSB(_2847)) + (_2723 << 5u);
                        uint _2848 = (_2847 + 4294967295u) & _2847;
                        uint _2853 = _2851 * 48u;
                        vec4 _2867 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2853)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2853 + 3u)).x));
                        uint _2873 = (_2851 * 48u) + 4u;
                        vec4 _2886 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2873)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2873 + 3u)).x));
                        uint _2892 = (_2851 * 48u) + 8u;
                        vec3 _2903 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2892)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2892 + 2u)).x));
                        float _2907 = _2867.x - _2372;
                        float _2908 = _2867.y - _2373;
                        float _2909 = _2867.z - _2374;
                        float _2910 = dot(vec3(_2907, _2908, _2909), vec3(_2907, _2908, _2909));
                        float _2913 = inversesqrt(_2910);
                        float _2914 = _2913 * _2907;
                        float _2915 = _2913 * _2908;
                        float _2916 = _2913 * _2909;
                        float _2917 = dot(vec3(_652, _655, _658), vec3(_2914, _2915, _2916));
                        float _2922 = 1.0 - (_2910 * _2867.w);
                        float _4225 = isnan(0.0) ? _2922 : (isnan(_2922) ? 0.0 : max(_2922, 0.0));
                        float _2923 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2924 = sqrt(_2910) * _2886.w;
                        float _2927 = 1.39999997615814208984375 / (_2924 + 1.39999997615814208984375);
                        float _2928 = _2927 * _2927;
                        float _2931 = ((1.0 - _2928) * _2917) + _2928;
                        float _2934 = _2924 * _2924;
                        float _2938 = ((isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0))) * _2923) / ((_2934 * 0.699999988079071044921875) + 1.0);
                        float _2942 = (-0.0) - _2372;
                        float _2943 = (-0.0) - _2373;
                        float _2944 = (-0.0) - _2374;
                        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2959 = exp2(log2(1.0 / ((_2934 * 3.5) + 5.0)) * 0.25);
                        float _2960 = 1.0 - _712;
                        float _2967 = sqrt(1.0 - ((1.0 - (_2960 * _2960)) * (1.0 - (_2959 * _2959))));
                        float _2968 = _2967 * _2967;
                        float _2969 = _2968 * _2968;
                        float _2970 = _2949 + _2914;
                        float _2971 = _2950 + _2915;
                        float _2972 = _2951 + _2916;
                        float _2976 = inversesqrt(dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972)));
                        float _2980 = dot(vec3(_652, _655, _658), vec3(_2949, _2950, _2951));
                        float _4241 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                        float _2983 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                        float _2984 = dot(vec3(_652, _655, _658), vec3(_2976 * _2970, _2976 * _2971, _2976 * _2972));
                        float _4252 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                        float _2987 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2991 = ((_2987 * _2987) * (_2969 + (-1.0))) + 1.0;
                        float _2992 = _2927 * _2968;
                        float _2993 = _2992 * _2992;
                        float _2996 = ((1.0 - _2993) * _2917) + _2993;
                        float _4263 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2997 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                        float _2998 = 1.0 - _2968;
                        float _3008 = (0.5 / (((_2997 * ((_2983 * _2998) + _2968)) + 9.9999999392252902907785028219223e-09) + (((_2997 * _2998) + _2968) * _2983))) * _2997;
                        float _4274 = isnan(0.0) ? _3008 : (isnan(_3008) ? 0.0 : max(_3008, 0.0));
                        float _3019 = (((_2969 * 3.1415927410125732421875) * (isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0)))) / ((_2991 * _2991) * ((_2934 * 2.1991131305694580078125) + 3.141590118408203125))) * _2923;
                        _2776 = (_2938 * _2886.x) + _2844;
                        _2777 = (_2938 * _2886.y) + _2845;
                        _2778 = (_2938 * _2886.z) + _2846;
                        _2773 = (_3019 * _2903.x) + _2841;
                        _2774 = (_3019 * _2903.y) + _2842;
                        _2775 = (_3019 * _2903.z) + _2843;
                        if (_2848 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2777;
                            _2846 = _2778;
                            _2847 = _2848;
                        }
                    }
                    frontier_phi_61_pred = _2773;
                    frontier_phi_61_pred_1 = _2778;
                    frontier_phi_61_pred_2 = _2777;
                    frontier_phi_61_pred_3 = _2776;
                    frontier_phi_61_pred_4 = _2775;
                    frontier_phi_61_pred_5 = _2774;
                }
                _2565 = frontier_phi_61_pred;
                _2575 = frontier_phi_61_pred_1;
                _2573 = frontier_phi_61_pred_2;
                _2571 = frontier_phi_61_pred_3;
                _2569 = frontier_phi_61_pred_4;
                _2567 = frontier_phi_61_pred_5;
                uint _2724 = _2723 + 1u;
                if (_2724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2717 = _2565;
                    _2718 = _2567;
                    _2719 = _2569;
                    _2720 = _2571;
                    _2721 = _2573;
                    _2722 = _2575;
                    _2723 = _2724;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2564 = _2565;
            _2566 = _2567;
            _2568 = _2569;
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
        }
        uvec4 _2578 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2579 = _2578.z;
        uint _2581 = (_2579 >> 8u) & 15u;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        float _2695;
        if (((4294967295u << _2581) & _2418) == 0u)
        {
            _2685 = _2564;
            _2687 = _2566;
            _2689 = _2568;
            _2691 = _2570;
            _2693 = _2572;
            _2695 = _2574;
        }
        else
        {
            float _2710 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
            float _2711 = _2710 * _2372;
            float _2712 = _2710 * _2373;
            float _2713 = _2710 * _2374;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2581 < ((_2579 >> 12u) & 15u))
            {
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2694;
                float _2696;
                float _2824 = _2564;
                float _2825 = _2566;
                float _2826 = _2568;
                float _2827 = _2570;
                float _2828 = _2572;
                float _2829 = _2574;
                uint _2830 = _2581;
                uint _2839;
                bool _2840;
                for (;;)
                {
                    _2839 = texelFetch(g_lightClassification, int((((_2412 << 5u) + (_2398 << 9u)) + (_2830 << 2u)) >> 2u)).x;
                    _2840 = _2839 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2840)
                    {
                        frontier_phi_67_pred = _2827;
                        frontier_phi_67_pred_1 = _2828;
                        frontier_phi_67_pred_2 = _2829;
                        frontier_phi_67_pred_3 = _2826;
                        frontier_phi_67_pred_4 = _2825;
                        frontier_phi_67_pred_5 = _2824;
                    }
                    else
                    {
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3027;
                        float _3028;
                        float _3029;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3322;
                        float _3323;
                        float _3324;
                        float _3037 = _2824;
                        float _3038 = _2825;
                        float _3039 = _2826;
                        float _3040 = _2827;
                        float _3041 = _2828;
                        float _3042 = _2829;
                        uint _3043 = _2839;
                        uint _3044;
                        vec4 _3069;
                        float _3070;
                        vec4 _3085;
                        vec3 _3097;
                        vec4 _3112;
                        vec4 _3128;
                        float _3175;
                        bool _3176;
                        for (;;)
                        {
                            uint _3054 = ((_2830 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3043));
                            _3044 = (_3043 + 4294967295u) & _3043;
                            uint _3056 = _3054 * 40u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            _3070 = _3069.w;
                            uint _3072 = (_3054 * 40u) + 4u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3054 * 40u) + 8u;
                            _3097 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x));
                            uint _3099 = (_3054 * 40u) + 16u;
                            _3112 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3099)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3099 + 3u)).x));
                            uint _3115 = (_3054 * 40u) + 20u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3131 = (_3054 * 40u) + 24u;
                            vec4 _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3150 = (_3054 * 40u) + 28u;
                            vec4 _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            _3175 = fma(_2374, _3163.z, fma(_2373, _3163.y, _3163.x * _2372)) + _3163.w;
                            _3176 = !((fma(_2374, _3144.z, fma(_2373, _3144.y, _3144.x * _2372)) + _3144.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3176)
                            {
                                float _3203 = _3069.x - _2372;
                                float _3204 = _3069.y - _2373;
                                float _3205 = _3069.z - _2374;
                                float _3206 = dot(vec3(_3203, _3204, _3205), vec3(_3203, _3204, _3205));
                                float _3209 = inversesqrt(_3206);
                                float _3210 = _3209 * _3203;
                                float _3211 = _3209 * _3204;
                                float _3212 = _3209 * _3205;
                                float _3216 = 1.0 - (_3206 / (_3070 * _3070));
                                float _4285 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                                float _3217 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3221 = sqrt(_3206) * _3085.w;
                                float _3223 = 1.39999997615814208984375 / (_3221 + 1.39999997615814208984375);
                                float _3224 = _3223 * _3223;
                                float _3227 = ((1.0 - _3224) * dot(vec3(_3210, _3211, _3212), vec3(_652, _655, _658))) + _3224;
                                float _3230 = _3221 * _3221;
                                float _3234 = (fma(_2374, _3112.z, fma(_2373, _3112.y, _3112.x * _2372)) + _3112.w) / _3175;
                                float _3235 = (fma(_2374, _3128.z, fma(_2373, _3128.y, _3128.x * _2372)) + _3128.w) / _3175;
                                float _3239 = 1.0 - dot(vec2(_3234, _3235), vec2(_3234, _3235));
                                float _4301 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                                float _3240 = isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0));
                                float _3241 = _3240 * (((isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0))) * _3217) / ((_3230 * 0.699999988079071044921875) + 1.0));
                                float _3253 = exp2(log2(1.0 / ((_3230 * 3.5) + 5.0)) * 0.25);
                                float _3254 = 1.0 - _712;
                                float _3261 = sqrt(1.0 - ((1.0 - (_3254 * _3254)) * (1.0 - (_3253 * _3253))));
                                float _3262 = _3261 * _3261;
                                float _3263 = _3262 * _3262;
                                float _3264 = _3210 - _2711;
                                float _3265 = _3211 - _2712;
                                float _3266 = _3212 - _2713;
                                float _3270 = inversesqrt(dot(vec3(_3264, _3265, _3266), vec3(_3264, _3265, _3266)));
                                float _3274 = dot(vec3(_652, _655, _658), vec3((-0.0) - _2711, (-0.0) - _2712, (-0.0) - _2713));
                                float _4312 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3277 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3278 = dot(vec3(_652, _655, _658), vec3(_3270 * _3264, _3270 * _3265, _3270 * _3266));
                                float _4323 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0));
                                float _3281 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
                                float _3285 = ((_3281 * _3281) * (_3263 + (-1.0))) + 1.0;
                                float _3286 = _3223 * _3262;
                                float _3287 = _3286 * _3286;
                                float _3293 = ((1.0 - _3287) * dot(vec3(_652, _655, _658), vec3(_3210, _3211, _3212))) + _3287;
                                float _4334 = isnan(0.0) ? _3293 : (isnan(_3293) ? 0.0 : max(_3293, 0.0));
                                float _3294 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                                float _3295 = 1.0 - _3262;
                                float _3305 = (0.5 / (((_3294 * ((_3277 * _3295) + _3262)) + 9.9999999392252902907785028219223e-09) + (((_3294 * _3295) + _3262) * _3277))) * _3294;
                                float _4345 = isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0));
                                float _3315 = (_3240 * _3217) * (((_3263 * 3.1415927410125732421875) * (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0)))) / ((_3285 * _3285) * ((_3230 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3315 * _3097.x;
                                frontier_phi_73_pred_1 = _3315 * _3097.y;
                                frontier_phi_73_pred_2 = _3241 * _3085.z;
                                frontier_phi_73_pred_3 = _3241 * _3085.y;
                                frontier_phi_73_pred_4 = _3241 * _3085.x;
                                frontier_phi_73_pred_5 = _3315 * _3097.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3319 = frontier_phi_73_pred;
                            _3320 = frontier_phi_73_pred_1;
                            _3324 = frontier_phi_73_pred_2;
                            _3323 = frontier_phi_73_pred_3;
                            _3322 = frontier_phi_73_pred_4;
                            _3321 = frontier_phi_73_pred_5;
                            _3027 = _3322 + _3040;
                            _3028 = _3323 + _3041;
                            _3029 = _3324 + _3042;
                            _3024 = _3319 + _3037;
                            _3025 = _3320 + _3038;
                            _3026 = _3321 + _3039;
                            if (_3044 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3027;
                                _3041 = _3028;
                                _3042 = _3029;
                                _3043 = _3044;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3027;
                        frontier_phi_67_pred_1 = _3028;
                        frontier_phi_67_pred_2 = _3029;
                        frontier_phi_67_pred_3 = _3026;
                        frontier_phi_67_pred_4 = _3025;
                        frontier_phi_67_pred_5 = _3024;
                    }
                    _2692 = frontier_phi_67_pred;
                    _2694 = frontier_phi_67_pred_1;
                    _2696 = frontier_phi_67_pred_2;
                    _2690 = frontier_phi_67_pred_3;
                    _2688 = frontier_phi_67_pred_4;
                    _2686 = frontier_phi_67_pred_5;
                    uint _2831 = _2830 + 1u;
                    if (_2831 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2824 = _2686;
                        _2825 = _2688;
                        _2826 = _2690;
                        _2827 = _2692;
                        _2828 = _2694;
                        _2829 = _2696;
                        _2830 = _2831;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2694;
                frontier_phi_55_56_ladder_1 = _2696;
                frontier_phi_55_56_ladder_2 = _2692;
                frontier_phi_55_56_ladder_3 = _2690;
                frontier_phi_55_56_ladder_4 = _2688;
                frontier_phi_55_56_ladder_5 = _2686;
            }
            else
            {
                frontier_phi_55_56_ladder = _2572;
                frontier_phi_55_56_ladder_1 = _2574;
                frontier_phi_55_56_ladder_2 = _2570;
                frontier_phi_55_56_ladder_3 = _2568;
                frontier_phi_55_56_ladder_4 = _2566;
                frontier_phi_55_56_ladder_5 = _2564;
            }
            _2685 = frontier_phi_55_56_ladder_5;
            _2687 = frontier_phi_55_56_ladder_4;
            _2689 = frontier_phi_55_56_ladder_3;
            _2691 = frontier_phi_55_56_ladder_2;
            _2693 = frontier_phi_55_56_ladder;
            _2695 = frontier_phi_55_56_ladder_1;
        }
        float _2700 = isnan(1.0) ? _696 : (isnan(_696) ? 1.0 : min(_696, 1.0));
        _2431 = (_2700 * _2691) + _1883;
        _2433 = (_2700 * _2693) + _1885;
        _2435 = (_2700 * _2695) + _1887;
        _2437 = ((_2685 * 0.039999999105930328369140625) * _2700) + _2216;
        _2439 = ((_2687 * 0.039999999105930328369140625) * _2700) + _2218;
        _2441 = ((_2689 * 0.039999999105930328369140625) * _2700) + _2220;
    }
    else
    {
        _2431 = _1883;
        _2433 = _1885;
        _2435 = _1887;
        _2437 = _2216;
        _2439 = _2218;
        _2441 = _2220;
    }
    uint _2447 = _672 + uint(cbMatDynParam._m0[0u].w);
    float _2453 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2459 = (((((_2453 * cbMtdParam._m0[10u].x) * _406.x) * _429) * (((1.0 - _483) * cbMtdParam._m0[16u].z) + _483)) * _520) * cbInstanceData._m0[_2447].x;
    float _2465 = (((((_2453 * cbMtdParam._m0[10u].y) * _406.y) * _429) * (((1.0 - _485) * cbMtdParam._m0[16u].z) + _485)) * _520) * cbInstanceData._m0[_2447].y;
    float _2471 = (((((_2453 * cbMtdParam._m0[10u].z) * _406.z) * _429) * (((1.0 - _487) * cbMtdParam._m0[16u].z) + _487)) * _520) * cbInstanceData._m0[_2447].z;
    float _4361 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _4372 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _4383 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _2488 = (((isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0))) * (_2431 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _696))) + ((_2437 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _1502)) * cbPerFrame._m0[3u].x)) + _2459;
    float _2490 = (_2465 + ((_2439 + ((isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0))) * _1502)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2433 + ((isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0))) * _696)));
    float _2492 = (_2471 + ((_2441 + ((isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0))) * _1502)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2435 + ((isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))) * _696)));
    float _4409 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2505 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    uint _2506 = _671 + 6u;
    float _2514 = _633 / cbSceneParam._m0[86u].x;
    float _2515 = _634 / cbSceneParam._m0[86u].y;
    vec4 _2529 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2514, _2515, (log2((isnan(cbSceneParam._m0[77u].w) ? _568 : (isnan(_568) ? cbSceneParam._m0[77u].w : min(_568, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2531 = _2529.x;
    float _2532 = _2529.y;
    float _2533 = _2529.z;
    float _2534 = _2529.w;
    float _2626;
    float _2628;
    float _2630;
    float _2632;
    if (_568 > cbSceneParam._m0[78u].w)
    {
        float _2589 = isnan(_568) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _568 : min(cbSceneParam._m0[80u].w, _568));
        float _2590 = _2589 / _568;
        float _2601 = _2590 * _618;
        float _2602 = _619 * _2590;
        float _2603 = (-0.0) - _2602;
        float _2604 = _2590 * _620;
        float _2606 = (cbSceneParam._m0[77u].w * _2603) / _2589;
        float _2607 = _2606 + cbSceneParam._m0[79u].w;
        float _2608 = cbSceneParam._m0[79u].w - _2602;
        float _2614 = sqrt(((_2601 * _2601) + (_2602 * _2602)) + (_2604 * _2604));
        float _2617 = (1.0 - (cbSceneParam._m0[77u].w / _2589)) * _2614;
        float _2622 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2624 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2786;
        if (abs((_2603 - _2606) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2786 = ((((_2607 > 0.0) ? exp2(_2622 * _2607) : (2.0 - exp2(_2624 * _2607))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2617;
        }
        else
        {
            float _2746 = 1.0 / cbSceneParam._m0[80u].x;
            float _2747 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : max(_2607, _2608));
            float _2748 = isnan(_2608) ? _2607 : (isnan(_2607) ? _2608 : min(_2607, _2608));
            float _2757 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : min(_2747, 0.0));
            float _2758 = isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : min(_2748, 0.0));
            _2786 = ((abs(_2614 / _2603) * cbSceneParam._m0[80u].y) * ((((_2757 - _2758) * 2.0) - ((exp2(_2622 * (isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0)))) - exp2(_2622 * (isnan(0.0) ? _2748 : (isnan(_2748) ? 0.0 : max(_2748, 0.0))))) * _2746)) - ((exp2(_2624 * _2757) - exp2(_2624 * _2758)) * _2746))) + (_2617 * cbSceneParam._m0[80u].z);
        }
        vec4 _2788 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2514, _2515, 1.0), 0.0);
        float _2797 = exp2((_2786 * (-1.44269502162933349609375)) * (1.0 - _2788.w));
        float _2798 = log2(_2797);
        float _2814 = log2(_2534);
        _2626 = (exp2(_2814 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].x)) * _2788.x) / cbSceneParam._m0[78u].x)) + _2531;
        _2628 = (exp2(_2814 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].y)) * _2788.y) / cbSceneParam._m0[78u].y)) + _2532;
        _2630 = (exp2(_2814 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2798 * cbSceneParam._m0[78u].z)) * _2788.z) / cbSceneParam._m0[78u].z)) + _2533;
        _2632 = _2797 * _2534;
    }
    else
    {
        _2626 = _2531;
        _2628 = _2532;
        _2630 = _2533;
        _2632 = _2534;
    }
    float _2644 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2645 = _2644 == 3.0;
    float _2646 = log2(_2632);
    float _2650 = exp2(_2646 * cbSceneParam._m0[78u].x);
    float _2651 = exp2(_2646 * cbSceneParam._m0[78u].y);
    float _2652 = exp2(_2646 * cbSceneParam._m0[78u].z);
    float _2653 = _2650 * (isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0)));
    float _2654 = _2651 * (isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0)));
    float _2655 = _2652 * (isnan(0.0) ? _2492 : (isnan(_2492) ? 0.0 : max(_2492, 0.0)));
    float _2664 = (_2644 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2664 * (_2645 ? _2653 : (_2653 + (cbSceneParam._m0[72u].w * _2626)));
    SV_Target.y = _2664 * (_2645 ? _2654 : (_2654 + (cbSceneParam._m0[72u].w * _2628)));
    SV_Target.z = _2664 * (_2645 ? _2655 : (_2655 + (cbSceneParam._m0[72u].w * _2630)));
    SV_Target.w = cbInstanceData._m0[_2506].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2459) * _2505) * _2650) * _2664;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2465) * _2505) * _2651) * _2664;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2471) * _2505) * _2652) * _2664;
    SV_Target_1.w = cbInstanceData._m0[_2506].w;
}


