#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1047;
float _3510;
float _3511;
float _3512;
float _3513;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _260 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _262 = _260.x;
    vec4 _275 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _279 = _275.z;
    float _283 = (_275.x * 2.0) + (-1.0);
    float _285 = (_275.y * 2.0) + (-1.0);
    float _286 = dot(vec2(_283, _285), vec2(_283, _285));
    float _3522 = isnan(0.0) ? _286 : (isnan(_286) ? 0.0 : max(_286, 0.0));
    float _292 = sqrt(1.0 - (isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))));
    float _318 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _319 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _332 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_318 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_319 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _346 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3533 = isnan(0.0) ? _346 : (isnan(_346) ? 0.0 : max(_346, 0.0));
    float _347 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _355 = (((_347 * _347) * (3.0 - (_347 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _364 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _372 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3544 = isnan(0.0) ? _372 : (isnan(_372) ? 0.0 : max(_372, 0.0));
    float _373 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
    float _377 = (_373 * _373) * (3.0 - (_373 * 2.0));
    float _378 = _377 * cbMtdParam._m0[17u].x;
    float _379 = _377 * cbMtdParam._m0[17u].y;
    float _380 = sin(_364);
    float _381 = cos(_364);
    float _382 = TEXCOORD - _378;
    float _383 = TEXCOORD_1 - _379;
    vec4 _403 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_378 + fma(_383, (-0.0) - _380, _382 * _381))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_383, _381, _382 * _380) + _379)) + cbTextureTilingScale._m0[0u].w));
    float _409 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _403.x;
    float _411 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _403.y;
    float _413 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _403.z;
    vec4 _436 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _318) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _319) + cbTextureTilingScale._m0[5u].w));
    float _446 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_436.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3555 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
    float _451 = (cbMtdParam._m0[16u].y * _283) + _283;
    float _452 = (cbMtdParam._m0[16u].y * _285) + _285;
    float _455 = fma(_292, _211 * NORMAL.x, fma(_452, _218 * TANGENT.x, (_204 * _196) * _451));
    float _458 = fma(_292, _211 * NORMAL.y, fma(_452, _218 * TANGENT.y, (_204 * _197) * _451));
    float _461 = fma(_292, _211 * NORMAL.z, fma(_452, _218 * TANGENT.z, (_204 * _198) * _451));
    float _465 = inversesqrt(dot(vec3(_455, _458, _461), vec3(_455, _458, _461)));
    float _466 = _465 * _455;
    float _467 = _465 * _458;
    float _468 = _465 * _461;
    float _3566 = isnan(0.0) ? _279 : (isnan(_279) ? 0.0 : max(_279, 0.0));
    float _469 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
    float _3577 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3588 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3599 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _3610 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _473 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
    float _489 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _540 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _530);
    float _541 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _530);
    float _542 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _530);
    float _546 = inversesqrt(dot(vec3(_540, _541, _542), vec3(_540, _541, _542)));
    float _547 = _540 * _546;
    float _548 = _541 * _546;
    float _549 = _542 * _546;
    vec4 _554 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _556 = _554.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _727 = sqrt(((_540 * _540) + (_541 * _541)) + (_542 * _542));
        float _733 = (cbMatDynParam._m0[5u].x * _727) + cbMatDynParam._m0[5u].y;
        float _3621 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _738 = (cbMatDynParam._m0[5u].z * _727) + cbMatDynParam._m0[5u].w;
        float _3632 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) - _734)) + _734) < ((_556 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _567 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _568 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _586 = fma(_468, cbSceneParam._m0[5u].z, fma(_467, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _466));
    float _589 = fma(_468, cbSceneParam._m0[6u].z, fma(_467, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _466));
    float _592 = fma(_468, cbSceneParam._m0[7u].z, fma(_467, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _466));
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _606 = _605 + 9u;
    uint _607 = _606 + uint(cbMatDynParam._m0[0u].w);
    float _613 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0)))) * cbInstanceData._m0[_607].x;
    float _614 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0)))) * cbInstanceData._m0[_607].y;
    float _615 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0)))) * cbInstanceData._m0[_607].z;
    float _3643 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
    float _3654 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
    float _3665 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
    float _619 = 1.0 - _473;
    float _620 = _616 * _619;
    float _621 = _617 * _619;
    float _622 = _618 * _619;
    float _627 = (_616 + (-0.039999999105930328369140625)) * _473;
    float _628 = (_617 + (-0.039999999105930328369140625)) * _473;
    float _629 = (_618 + (-0.039999999105930328369140625)) * _473;
    float _630 = _627 + 0.039999999105930328369140625;
    float _632 = _628 + 0.039999999105930328369140625;
    float _633 = _629 + 0.039999999105930328369140625;
    vec4 _642 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _567, cbSceneParam._m0[86u].y * _568));
    float _645 = _642.x * TEXCOORD_3.w;
    float _646 = dot(vec3(_466, _467, _468), vec3(_547, _548, _549));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _466) - _547;
    float _654 = (_649 * _467) - _548;
    float _655 = (_649 * _468) - _549;
    float _659 = abs(dot(vec3(_547, _548, _549), vec3(_466, _467, _468)));
    float _3676 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_469);
    float _673 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _679 = (1.0 - _673) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _680 = _673 * _661;
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _771 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _775 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _779 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _804 = _708 + _466;
        float _805 = _712 + _467;
        float _806 = _716 + _468;
        float _816 = fma(_806, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _804)) - _771;
        float _817 = fma(_806, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _804)) - _775;
        float _818 = fma(_806, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _804)) - _779;
        float _822 = inversesqrt(dot(vec3(_816, _817, _818), vec3(_816, _817, _818)));
        float _835 = ((_822 * _816) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_771 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_822 * _817) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_775 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _837 = ((_822 * _818) / cbModelParam._m0[34u].z) + ((((((_779 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_835, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(_466, _467, _468), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3702 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3713 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3724 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_466, _467, _468), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3757 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(_466, _467, _468), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3790 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1090 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1094 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1098 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1121 = _708 + _466;
        float _1122 = _712 + _467;
        float _1123 = _716 + _468;
        float _1133 = fma(_1123, cbModelParam._m0[30u].z, fma(_1122, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1121)) - _1090;
        float _1134 = fma(_1123, cbModelParam._m0[31u].z, fma(_1122, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1121)) - _1094;
        float _1135 = fma(_1123, cbModelParam._m0[32u].z, fma(_1122, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1121)) - _1098;
        float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
        float _1152 = ((_1139 * _1133) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1090 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1139 * _1134) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1094 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1139 * _1135) / cbModelParam._m0[35u].z) + ((((((_1098 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1152, _1153, _1154), 0.0);
        float _1189 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1190 = _1189 * (_1156.x + (-0.5));
        float _1191 = _1189 * (_1156.y + (-0.5));
        float _1192 = _1189 * (_1156.z + (-0.5));
        float _1199 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1200 = _1199 * (_1163.x + (-0.5));
        float _1201 = _1199 * (_1163.y + (-0.5));
        float _1202 = _1199 * (_1163.z + (-0.5));
        float _1209 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1210 = _1209 * (_1170.x + (-0.5));
        float _1211 = _1209 * (_1170.y + (-0.5));
        float _1212 = _1209 * (_1170.z + (-0.5));
        float _1219 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1220 = _1219 * (_1177.x + (-0.5));
        float _1221 = _1219 * (_1177.y + (-0.5));
        float _1222 = _1219 * (_1177.z + (-0.5));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = _1190 * 0.5;
        float _1227 = _1200 * 0.5;
        float _1228 = _1210 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_466, _467, _468), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3853 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1253 + 1.0))) + _1258) * _1223;
        float _1268 = _1191 * 0.5;
        float _1269 = _1201 * 0.5;
        float _1270 = _1211 * 0.5;
        float _1271 = dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270));
        float _1276 = (_1271 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1271);
        float _1284 = (dot(vec3(_466, _467, _468), vec3(_1276 * _1268, _1276 * _1269, _1276 * _1270)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1293 = sqrt(((_1269 * _1269) + (_1268 * _1268)) + (_1270 * _1270)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1294 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1295 = _1294 * 2.0;
        float _1299 = (1.0 - _1294) / (_1294 + 1.0);
        float _3886 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1309 = ((((1.0 - _1300) * (_1295 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1295 + 1.0))) + _1300) * _1224;
        float _1310 = _1192 * 0.5;
        float _1311 = _1202 * 0.5;
        float _1312 = _1212 * 0.5;
        float _1313 = dot(vec3(_1310, _1311, _1312), vec3(_1310, _1311, _1312));
        float _1318 = (_1313 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1313);
        float _1326 = (dot(vec3(_466, _467, _468), vec3(_1318 * _1310, _1318 * _1311, _1318 * _1312)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
        float _1335 = sqrt(((_1311 * _1311) + (_1310 * _1310)) + (_1312 * _1312)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1336 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1337 = _1336 * 2.0;
        float _1341 = (1.0 - _1336) / (_1336 + 1.0);
        float _3919 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1351 = ((((1.0 - _1342) * (_1337 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1337 + 1.0))) + _1342) * _1225;
        _1359 = _1192;
        _1360 = _1191;
        _1361 = _1190;
        _1362 = _1202;
        _1363 = _1201;
        _1364 = _1200;
        _1365 = _1212;
        _1366 = _1211;
        _1367 = _1210;
        _1368 = _1225;
        _1369 = _1224;
        _1370 = _1223;
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0)));
        _1373 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0)));
    }
    else
    {
        _1359 = _1047;
        _1360 = _1047;
        _1361 = _1047;
        _1362 = _1047;
        _1363 = _1047;
        _1364 = _1047;
        _1365 = _1047;
        _1366 = _1047;
        _1367 = _1047;
        _1368 = _1047;
        _1369 = _1047;
        _1370 = _1047;
        _1371 = 0.0;
        _1372 = 0.0;
        _1373 = 0.0;
    }
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1059)) + _1059;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1060)) + _1060;
    float _1385 = (cbModelParam._m0[1u].x * (_1373 - _1061)) + _1061;
    float _1406 = fma(_1385, cbSceneParam._m0[89u].z, fma(_1384, cbSceneParam._m0[89u].y, _1383 * cbSceneParam._m0[89u].x));
    float _1409 = fma(_1385, cbSceneParam._m0[90u].z, fma(_1384, cbSceneParam._m0[90u].y, _1383 * cbSceneParam._m0[90u].x));
    float _1412 = fma(_1385, cbSceneParam._m0[91u].z, fma(_1384, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1383));
    float _1427 = _653 * 0.5;
    float _1428 = _654 * 0.5;
    float _1429 = _655 * 0.5;
    float _1430 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1361, _1364, _1367, _1370));
    float _1433 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1436 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1470;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1443 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1447 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1451 = dot(vec4(_1427, _1428, _1429, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1458 = dot(vec4(cbModelParam._m0[39u]), vec4(_1427, _1428, _1429, 1.0));
        _1470 = dot(vec3(isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0)), isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1470 = 1.0;
    }
    float _1481;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1472 = dot(vec4(cbModelParam._m0[40u]), vec4(_1427, _1428, _1429, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1472) ? 0.0 : (isnan(0.0) ? _1472 : max(0.0, _1472))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1485 = (_1481 * cbModelParam._m0[1u].x) + (_1470 * (1.0 - cbModelParam._m0[1u].x));
    float _1495 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _469);
    float _1496 = isnan(_1495) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1495 : min(cbModelParam._m0[25u].z, _1495));
    float _1576;
    float _1578;
    float _1580;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1543 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1547 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1551 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1554 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1557 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1560 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1588;
        if (_1554 > 0.0)
        {
            _1588 = abs((1.0 - _1543) / _1554);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1543 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1588 = frontier_phi_17_15_ladder;
        }
        float _1815;
        if (_1557 > 0.0)
        {
            _1815 = abs((1.0 - _1547) / _1557);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1547 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1815 = frontier_phi_26_22_ladder;
        }
        float _2072;
        if (_1560 > 0.0)
        {
            _2072 = abs((1.0 - _1551) / _1560);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1560 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1551 + 1.0) / _1560);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2072 = frontier_phi_38_33_ladder;
        }
        float _2074 = isnan(_1815) ? _1588 : (isnan(_1588) ? _1815 : min(_1588, _1815));
        float _2075 = isnan(_2072) ? _2074 : (isnan(_2074) ? _2072 : min(_2074, _2072));
        float _2079 = (_2075 * _1554) + _1543;
        float _2080 = (_2075 * _1557) + _1547;
        float _2081 = (_2075 * _1560) + _1551;
        float _2082 = _2075 * 9.9999997473787516355514526367188e-05;
        float _2084 = (-1.0) - _2082;
        float _2086 = _2082 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2081 > _2086) || ((_2081 < _2084) || ((_2080 > _2086) || ((_2080 < _2084) || ((_2079 < _2084) || (_2079 > _2086))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2209 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2081, cbModelParam._m0[9u].z, fma(_2080, cbModelParam._m0[9u].y, _2079 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2081, cbModelParam._m0[10u].z, fma(_2080, cbModelParam._m0[10u].y, _2079 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2081, cbModelParam._m0[11u].z, fma(_2080, cbModelParam._m0[11u].y, _2079 * cbModelParam._m0[11u].x))), _1496);
            frontier_phi_16_38_ladder = _2209.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2209.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2209.x * cbModelParam._m0[1u].y;
        }
        _1576 = frontier_phi_16_38_ladder_2;
        _1578 = frontier_phi_16_38_ladder_1;
        _1580 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1496);
        _1576 = _1564.x * cbModelParam._m0[1u].y;
        _1578 = _1564.y * cbModelParam._m0[1u].y;
        _1580 = _1564.z * cbModelParam._m0[1u].y;
    }
    float _1584 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _469);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1584 : min(cbModelParam._m0[25u].w, _1584));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1640 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1644 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1648 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1651 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1654 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1657 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1820;
        if (_1651 > 0.0)
        {
            _1820 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1820 = frontier_phi_28_24_ladder;
        }
        float _2099;
        if (_1654 > 0.0)
        {
            _2099 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2099 = frontier_phi_40_35_ladder;
        }
        float _2312;
        if (_1657 > 0.0)
        {
            _2312 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2312 = frontier_phi_49_46_ladder;
        }
        float _2314 = isnan(_2099) ? _1820 : (isnan(_1820) ? _2099 : min(_1820, _2099));
        float _2315 = isnan(_2312) ? _2314 : (isnan(_2314) ? _2312 : min(_2314, _2312));
        float _2319 = (_2315 * _1651) + _1640;
        float _2320 = (_2315 * _1654) + _1644;
        float _2321 = (_2315 * _1657) + _1648;
        float _2322 = _2315 * 9.9999997473787516355514526367188e-05;
        float _2323 = (-1.0) - _2322;
        float _2325 = _2322 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2321 > _2325) || ((_2321 < _2323) || ((_2320 > _2325) || ((_2320 < _2323) || ((_2319 < _2323) || (_2319 > _2325))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2565 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2321, cbModelParam._m0[17u].z, fma(_2320, cbModelParam._m0[17u].y, _2319 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2321, cbModelParam._m0[18u].z, fma(_2320, cbModelParam._m0[18u].y, _2319 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2321, cbModelParam._m0[19u].z, fma(_2320, cbModelParam._m0[19u].y, _2319 * cbModelParam._m0[19u].x))), _1585);
            frontier_phi_25_49_ladder = _2565.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2565.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2565.x * cbModelParam._m0[1u].z;
        }
        _1676 = frontier_phi_25_49_ladder_2;
        _1678 = frontier_phi_25_49_ladder_1;
        _1680 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1585);
        _1676 = _1660.x * cbModelParam._m0[1u].z;
        _1678 = _1660.y * cbModelParam._m0[1u].z;
        _1680 = _1660.z * cbModelParam._m0[1u].z;
    }
    float _1693 = (((_679 * _630) + _680) * _645) * ((cbModelParam._m0[1u].w * (_1676 - _1576)) + _1576);
    float _1695 = (((_679 * _632) + _680) * _645) * ((cbModelParam._m0[1u].w * (_1678 - _1578)) + _1578);
    float _1697 = (((_679 * _633) + _680) * _645) * ((cbModelParam._m0[1u].w * (_1680 - _1580)) + _1580);
    float _1700 = fma(_1697, cbSceneParam._m0[89u].z, fma(_1695, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1697, cbSceneParam._m0[90u].z, fma(_1695, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1697, cbSceneParam._m0[91u].z, fma(_1695, cbSceneParam._m0[91u].y, _1693 * cbSceneParam._m0[91u].x));
    vec4 _1714 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_567, _568));
    float _1716 = _1714.w;
    float _1728 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1716);
    float _1729 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1716);
    float _1730 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1716);
    uvec4 _1734 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1736 = _1734.x * 14u;
    uint _1737 = _1736 + 13u;
    float _1744 = _645 + (-1.0);
    float _1749 = (cbLight._m0[_1737].x * _1744) + 1.0;
    float _1750 = (cbLight._m0[_1737].y * _1744) + 1.0;
    float _1751 = (cbLight._m0[_1737].z * _1744) + 1.0;
    float _1752 = (cbLight._m0[_1737].w * _1744) + 1.0;
    uint _1753 = _1736 + 5u;
    float _1759 = isnan(1.0) ? _1750 : (isnan(_1750) ? 1.0 : min(_1750, 1.0));
    uint _1763 = _1736 + 4u;
    float _1773 = isnan(1.0) ? _1749 : (isnan(_1749) ? 1.0 : min(_1749, 1.0));
    uint _1777 = _1736 | 1u;
    float _1788 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_466, _467, _468));
    float _1791 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_466, _467, _468));
    float _4055 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _4066 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1796 = (isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0))) * 0.3183098733425140380859375;
    float _1798 = (isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0))) * 0.3183098733425140380859375;
    float _1805 = ((cbLight._m0[_1753].x * _1759) * _1798) + (((cbLight._m0[_1763].x * _1728) * _1773) * _1796);
    float _1806 = ((_1759 * cbLight._m0[_1753].y) * _1798) + (((cbLight._m0[_1763].y * _1729) * _1773) * _1796);
    float _1807 = ((_1759 * cbLight._m0[_1753].z) * _1798) + (((cbLight._m0[_1763].z * _1730) * _1773) * _1796);
    uvec4 _1812 = floatBitsToUint(cbLight._m0[_1736 + 12u]);
    bool _1814 = _1812.x == 0u;
    float _1825;
    float _1827;
    float _1829;
    if (_1814)
    {
        _1825 = _1805;
        _1827 = _1806;
        _1829 = _1807;
    }
    else
    {
        uint _1833 = _1736 + 6u;
        float _1849 = (dot(vec3(cbLight._m0[_1736 + 2u].xyz), vec3(_466, _467, _468)) * 0.5) + 0.5;
        float _1850 = _1849 * _1849;
        float _4077 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        float _1851 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
        float _1852 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _1825 = (((cbLight._m0[_1833].x * 0.3183098733425140380859375) * _1851) * _1852) + _1805;
        _1827 = (((cbLight._m0[_1833].y * 0.3183098733425140380859375) * _1851) * _1852) + _1806;
        _1829 = (((cbLight._m0[_1833].z * 0.3183098733425140380859375) * _1851) * _1852) + _1807;
    }
    bool _1832 = _1812.y == 0u;
    float _1870;
    float _1872;
    float _1874;
    if (_1832)
    {
        _1870 = _1825;
        _1872 = _1827;
        _1874 = _1829;
    }
    else
    {
        uint _2043 = _1736 + 7u;
        float _2059 = (dot(vec3(cbLight._m0[_1736 + 3u].xyz), vec3(_466, _467, _468)) * 0.5) + 0.5;
        float _2060 = _2059 * _2059;
        float _4093 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2061 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
        float _2062 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _1870 = (((cbLight._m0[_2043].x * 0.3183098733425140380859375) * _2061) * _2062) + _1825;
        _1872 = (((cbLight._m0[_2043].y * 0.3183098733425140380859375) * _2061) * _2062) + _1827;
        _1874 = (((cbLight._m0[_2043].z * 0.3183098733425140380859375) * _2061) * _2062) + _1829;
    }
    uint _1877 = _1736 + 8u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1736].w)) * _469) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1736].x + _547;
    float _1893 = cbLight._m0[_1736].y + _548;
    float _1894 = cbLight._m0[_1736].z + _549;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_466, _467, _468), vec3(cbLight._m0[_1736].xyz));
    float _4109 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _4120 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1906 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _1907 = dot(vec3(_466, _467, _468), vec3(_1899, _1900, _1901));
    float _4131 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1910 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _1911 = dot(vec3(cbLight._m0[_1736].xyz), vec3(_1899, _1900, _1901));
    float _4142 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1915 = _1891 * _1891;
    float _1919 = ((_1910 * _1910) * (_1915 + (-1.0))) + 1.0;
    float _1927 = exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0);
    float _1928 = 0.959999978542327880859375 - _627;
    float _1930 = 0.959999978542327880859375 - _628;
    float _1931 = 0.959999978542327880859375 - _629;
    float _1938 = 1.0 - _1891;
    float _1949 = (0.5 / (((_1906 * ((_1905 * _1938) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _1938) + _1891) * _1905))) * _1905;
    float _4153 = isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0));
    float _1951 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_1915 / ((_1919 * _1919) * 3.141590118408203125));
    uint _1965 = _1736 + 9u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1777].w)) * _469) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1777].x + _547;
    float _1979 = cbLight._m0[_1777].y + _548;
    float _1980 = cbLight._m0[_1777].z + _549;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_466, _467, _468), vec3(cbLight._m0[_1777].xyz));
    float _4164 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0));
    float _1992 = dot(vec3(_466, _467, _468), vec3(_1985, _1986, _1987));
    float _4175 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1985, _1986, _1987));
    float _4186 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2000 = _1977 * _1977;
    float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
    float _2011 = exp2(log2(1.0 - (isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0)))) * 5.0);
    float _2018 = 1.0 - _1977;
    float _2028 = (0.5 / (((_1906 * ((_1991 * _2018) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2018) + _1977) * _1991))) * _1991;
    float _4197 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2030 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
    float _2040 = (((((_2011 * _1928) + _630) * cbLight._m0[_1965].x) * _2030) * _1759) + ((((cbLight._m0[_1877].x * _1728) * ((_1927 * _1928) + _630)) * _1951) * _1773);
    float _2041 = (((((_2011 * _1930) + _632) * cbLight._m0[_1965].y) * _2030) * _1759) + ((((cbLight._m0[_1877].y * _1729) * ((_1927 * _1930) + _632)) * _1951) * _1773);
    float _2042 = (((((_2011 * _1931) + _633) * cbLight._m0[_1965].z) * _2030) * _1759) + ((((cbLight._m0[_1877].z * _1730) * ((_1927 * _1931) + _633)) * _1951) * _1773);
    float _2104;
    float _2106;
    float _2108;
    if (_1814)
    {
        _2104 = _2040;
        _2106 = _2041;
        _2108 = _2042;
    }
    else
    {
        uint _2110 = _1736 + 2u;
        uint _2114 = _1736 + 10u;
        float _2128 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2110].w)) * _469) * 0.949999988079071044921875);
        float _2129 = _2128 * _2128;
        float _2130 = cbLight._m0[_2110].x + _547;
        float _2131 = cbLight._m0[_2110].y + _548;
        float _2132 = cbLight._m0[_2110].z + _549;
        float _2136 = inversesqrt(dot(vec3(_2130, _2131, _2132), vec3(_2130, _2131, _2132)));
        float _2137 = _2136 * _2130;
        float _2138 = _2136 * _2131;
        float _2139 = _2136 * _2132;
        float _2140 = dot(vec3(_466, _467, _468), vec3(cbLight._m0[_2110].xyz));
        float _4208 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
        float _2143 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
        float _2144 = dot(vec3(_466, _467, _468), vec3(_2137, _2138, _2139));
        float _4219 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2147 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2148 = dot(vec3(cbLight._m0[_2110].xyz), vec3(_2137, _2138, _2139));
        float _4230 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
        float _2152 = _2129 * _2129;
        float _2156 = ((_2147 * _2147) * (_2152 + (-1.0))) + 1.0;
        float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0)))) * 5.0);
        float _2170 = 1.0 - _2129;
        float _2180 = (0.5 / (((_1906 * ((_2143 * _2170) + _2129)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2170) + _2129) * _2143))) * _2143;
        float _4241 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        float _2182 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_2152 / ((_2156 * _2156) * 3.141590118408203125));
        float _2183 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
        _2104 = (((((_2163 * _1928) + _630) * cbLight._m0[_2114].x) * _2182) * _2183) + _2040;
        _2106 = (((((_2163 * _1930) + _632) * cbLight._m0[_2114].y) * _2182) * _2183) + _2041;
        _2108 = (((((_2163 * _1931) + _633) * cbLight._m0[_2114].z) * _2182) * _2183) + _2042;
    }
    float _2218;
    float _2220;
    float _2222;
    if (_1832)
    {
        _2218 = _2104;
        _2220 = _2106;
        _2222 = _2108;
    }
    else
    {
        uint _2229 = _1736 + 3u;
        uint _2233 = _1736 + 11u;
        float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2229].w)) * _469) * 0.949999988079071044921875);
        float _2248 = _2247 * _2247;
        float _2249 = cbLight._m0[_2229].x + _547;
        float _2250 = cbLight._m0[_2229].y + _548;
        float _2251 = cbLight._m0[_2229].z + _549;
        float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
        float _2256 = _2255 * _2249;
        float _2257 = _2255 * _2250;
        float _2258 = _2255 * _2251;
        float _2259 = dot(vec3(_466, _467, _468), vec3(cbLight._m0[_2229].xyz));
        float _4257 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
        float _2262 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2263 = dot(vec3(_466, _467, _468), vec3(_2256, _2257, _2258));
        float _4268 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
        float _2266 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2267 = dot(vec3(cbLight._m0[_2229].xyz), vec3(_2256, _2257, _2258));
        float _4279 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2271 = _2248 * _2248;
        float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
        float _2282 = exp2(log2(1.0 - (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0)))) * 5.0);
        float _2289 = 1.0 - _2248;
        float _2299 = (0.5 / (((_1906 * ((_2262 * _2289) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_1906 * _2289) + _2248) * _2262))) * _2262;
        float _4290 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
        float _2301 = (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
        float _2302 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
        _2218 = (((((_2282 * _1928) + _630) * cbLight._m0[_2233].x) * _2301) * _2302) + _2104;
        _2220 = (((((_2282 * _1930) + _632) * cbLight._m0[_2233].y) * _2301) * _2302) + _2106;
        _2222 = (((((_2282 * _1931) + _633) * cbLight._m0[_2233].z) * _2301) * _2302) + _2108;
    }
    float _2437;
    float _2439;
    float _2441;
    float _2443;
    float _2445;
    float _2447;
    if (_1734.y == 0u)
    {
        float _2377 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2378 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2377;
        float _2379 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2377;
        float _2380 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2377;
        uvec4 _2392 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2393 = _2392.x;
        uint _2404 = uint((float(_2392.y) * floor(float(uint(cbSceneParam._m0[85u].y * _568) / _2393))) + floor(float(uint(cbSceneParam._m0[85u].x * _567) / _2393)));
        float _2414 = (log2(_2380 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2415 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        uint _2418 = uint(isnan(14.0) ? _2415 : (isnan(_2415) ? 14.0 : min(_2415, 14.0)));
        uvec4 _2423 = texelFetch(g_lightClusterGridBuffer, int(((_2418 << 2u) + (_2404 << 6u)) >> 2u));
        uint _2424 = _2423.x;
        uint _2425 = _2392.z;
        float _2570;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        if (((((1u << ((_2425 >> 4u) & 15u)) + 4294967295u) & _2424) == 0u) || ((_2425 & 240u) == 0u))
        {
            _2570 = 0.0;
            _2572 = 0.0;
            _2574 = 0.0;
            _2576 = 0.0;
            _2578 = 0.0;
            _2580 = 0.0;
        }
        else
        {
            float _2571;
            float _2573;
            float _2575;
            float _2577;
            float _2579;
            float _2581;
            float _2731 = 0.0;
            float _2732 = 0.0;
            float _2733 = 0.0;
            float _2734 = 0.0;
            float _2735 = 0.0;
            float _2736 = 0.0;
            uint _2737 = 0u;
            uint _2746;
            bool _2747;
            for (;;)
            {
                _2746 = texelFetch(g_lightClassification, int((((_2418 << 5u) + (_2404 << 9u)) + (_2737 << 2u)) >> 2u)).x;
                _2747 = _2746 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2747)
                {
                    frontier_phi_66_pred = _2731;
                    frontier_phi_66_pred_1 = _2736;
                    frontier_phi_66_pred_2 = _2735;
                    frontier_phi_66_pred_3 = _2734;
                    frontier_phi_66_pred_4 = _2733;
                    frontier_phi_66_pred_5 = _2732;
                }
                else
                {
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    uint _2882;
                    _2876 = _2731;
                    _2877 = _2732;
                    _2878 = _2733;
                    _2879 = _2734;
                    _2880 = _2735;
                    _2881 = _2736;
                    _2882 = _2746;
                    float _2803;
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    for (;;)
                    {
                        uint _2886 = uint(findLSB(_2882)) + (_2737 << 5u);
                        uint _2883 = (_2882 + 4294967295u) & _2882;
                        uint _2888 = _2886 * 48u;
                        vec4 _2902 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2888)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2888 + 3u)).x));
                        uint _2908 = (_2886 * 48u) + 4u;
                        vec4 _2921 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2908)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2908 + 3u)).x));
                        uint _2927 = (_2886 * 48u) + 8u;
                        vec3 _2938 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2927)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2927 + 2u)).x));
                        float _2942 = _2902.x - _2378;
                        float _2943 = _2902.y - _2379;
                        float _2944 = _2902.z - _2380;
                        float _2945 = dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944));
                        float _2948 = inversesqrt(_2945);
                        float _2949 = _2948 * _2942;
                        float _2950 = _2948 * _2943;
                        float _2951 = _2948 * _2944;
                        float _2952 = dot(vec3(_586, _589, _592), vec3(_2949, _2950, _2951));
                        float _2957 = 1.0 - (_2945 * _2902.w);
                        float _4316 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                        float _2958 = isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0));
                        float _2959 = sqrt(_2945) * _2921.w;
                        float _2962 = 1.39999997615814208984375 / (_2959 + 1.39999997615814208984375);
                        float _2963 = _2962 * _2962;
                        float _2966 = ((1.0 - _2963) * _2952) + _2963;
                        float _2969 = _2959 * _2959;
                        float _2973 = ((isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0))) * _2958) / ((_2969 * 0.699999988079071044921875) + 1.0);
                        float _2977 = (-0.0) - _2378;
                        float _2978 = (-0.0) - _2379;
                        float _2979 = (-0.0) - _2380;
                        float _2983 = inversesqrt(dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979)));
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2994 = exp2(log2(1.0 / ((_2969 * 3.5) + 5.0)) * 0.25);
                        float _2995 = 1.0 - _661;
                        float _3002 = sqrt(1.0 - ((1.0 - (_2995 * _2995)) * (1.0 - (_2994 * _2994))));
                        float _3003 = _3002 * _3002;
                        float _3004 = _3003 * _3003;
                        float _3005 = _2984 + _2949;
                        float _3006 = _2985 + _2950;
                        float _3007 = _2986 + _2951;
                        float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                        float _3015 = dot(vec3(_586, _589, _592), vec3(_2984, _2985, _2986));
                        float _4332 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                        float _3018 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
                        float _3019 = dot(vec3(_586, _589, _592), vec3(_3011 * _3005, _3011 * _3006, _3011 * _3007));
                        float _4343 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                        float _3022 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
                        float _3026 = ((_3022 * _3022) * (_3004 + (-1.0))) + 1.0;
                        float _3027 = _2962 * _3003;
                        float _3028 = _3027 * _3027;
                        float _3031 = ((1.0 - _3028) * _2952) + _3028;
                        float _4354 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                        float _3032 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3033 = 1.0 - _3003;
                        float _3043 = (0.5 / (((_3032 * ((_3018 * _3033) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_3032 * _3033) + _3003) * _3018))) * _3032;
                        float _4365 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                        float _3054 = (((_3004 * 3.1415927410125732421875) * (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0)))) / ((_3026 * _3026) * ((_2969 * 2.1991131305694580078125) + 3.141590118408203125))) * _2958;
                        _2806 = (_2973 * _2921.x) + _2879;
                        _2807 = (_2973 * _2921.y) + _2880;
                        _2808 = (_2973 * _2921.z) + _2881;
                        _2803 = (_3054 * _2938.x) + _2876;
                        _2804 = (_3054 * _2938.y) + _2877;
                        _2805 = (_3054 * _2938.z) + _2878;
                        if (_2883 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2876 = _2803;
                            _2877 = _2804;
                            _2878 = _2805;
                            _2879 = _2806;
                            _2880 = _2807;
                            _2881 = _2808;
                            _2882 = _2883;
                        }
                    }
                    frontier_phi_66_pred = _2803;
                    frontier_phi_66_pred_1 = _2808;
                    frontier_phi_66_pred_2 = _2807;
                    frontier_phi_66_pred_3 = _2806;
                    frontier_phi_66_pred_4 = _2805;
                    frontier_phi_66_pred_5 = _2804;
                }
                _2571 = frontier_phi_66_pred;
                _2581 = frontier_phi_66_pred_1;
                _2579 = frontier_phi_66_pred_2;
                _2577 = frontier_phi_66_pred_3;
                _2575 = frontier_phi_66_pred_4;
                _2573 = frontier_phi_66_pred_5;
                uint _2738 = _2737 + 1u;
                if (_2738 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2731 = _2571;
                    _2732 = _2573;
                    _2733 = _2575;
                    _2734 = _2577;
                    _2735 = _2579;
                    _2736 = _2581;
                    _2737 = _2738;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2570 = _2571;
            _2572 = _2573;
            _2574 = _2575;
            _2576 = _2577;
            _2578 = _2579;
            _2580 = _2581;
        }
        uvec4 _2584 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2585 = _2584.z;
        uint _2587 = (_2585 >> 8u) & 15u;
        float _2699;
        float _2701;
        float _2703;
        float _2705;
        float _2707;
        float _2709;
        if (((4294967295u << _2587) & _2424) == 0u)
        {
            _2699 = _2570;
            _2701 = _2572;
            _2703 = _2574;
            _2705 = _2576;
            _2707 = _2578;
            _2709 = _2580;
        }
        else
        {
            float _2724 = inversesqrt(dot(vec3(_2378, _2379, _2380), vec3(_2378, _2379, _2380)));
            float _2725 = _2724 * _2378;
            float _2726 = _2724 * _2379;
            float _2727 = _2724 * _2380;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2587 < ((_2585 >> 12u) & 15u))
            {
                float _2700;
                float _2702;
                float _2704;
                float _2706;
                float _2708;
                float _2710;
                float _2859 = _2570;
                float _2860 = _2572;
                float _2861 = _2574;
                float _2862 = _2576;
                float _2863 = _2578;
                float _2864 = _2580;
                uint _2865 = _2587;
                uint _2874;
                bool _2875;
                for (;;)
                {
                    _2874 = texelFetch(g_lightClassification, int((((_2418 << 5u) + (_2404 << 9u)) + (_2865 << 2u)) >> 2u)).x;
                    _2875 = _2874 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2875)
                    {
                        frontier_phi_77_pred = _2864;
                        frontier_phi_77_pred_1 = _2863;
                        frontier_phi_77_pred_2 = _2862;
                        frontier_phi_77_pred_3 = _2861;
                        frontier_phi_77_pred_4 = _2860;
                        frontier_phi_77_pred_5 = _2859;
                    }
                    else
                    {
                        float _3068;
                        float _3069;
                        float _3070;
                        float _3071;
                        float _3072;
                        float _3073;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3081 = _2859;
                        float _3082 = _2860;
                        float _3083 = _2861;
                        float _3084 = _2862;
                        float _3085 = _2863;
                        float _3086 = _2864;
                        uint _3087 = _2874;
                        uint _3088;
                        vec4 _3113;
                        float _3114;
                        vec4 _3129;
                        vec3 _3141;
                        vec4 _3156;
                        vec4 _3172;
                        float _3219;
                        bool _3220;
                        for (;;)
                        {
                            uint _3098 = ((_2865 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3087));
                            _3088 = (_3087 + 4294967295u) & _3087;
                            uint _3100 = _3098 * 40u;
                            _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            _3114 = _3113.w;
                            uint _3116 = (_3098 * 40u) + 4u;
                            _3129 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3116)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3116 + 3u)).x));
                            uint _3131 = (_3098 * 40u) + 8u;
                            _3141 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x));
                            uint _3143 = (_3098 * 40u) + 16u;
                            _3156 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3143)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3143 + 3u)).x));
                            uint _3159 = (_3098 * 40u) + 20u;
                            _3172 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3159)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3159 + 3u)).x));
                            uint _3175 = (_3098 * 40u) + 24u;
                            vec4 _3188 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3175)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3175 + 3u)).x));
                            uint _3194 = (_3098 * 40u) + 28u;
                            vec4 _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            _3219 = fma(_2380, _3207.z, fma(_2379, _3207.y, _3207.x * _2378)) + _3207.w;
                            _3220 = !((fma(_2380, _3188.z, fma(_2379, _3188.y, _3188.x * _2378)) + _3188.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3220)
                            {
                                float _3247 = _3113.x - _2378;
                                float _3248 = _3113.y - _2379;
                                float _3249 = _3113.z - _2380;
                                float _3250 = dot(vec3(_3247, _3248, _3249), vec3(_3247, _3248, _3249));
                                float _3253 = inversesqrt(_3250);
                                float _3254 = _3253 * _3247;
                                float _3255 = _3253 * _3248;
                                float _3256 = _3253 * _3249;
                                float _3260 = 1.0 - (_3250 / (_3114 * _3114));
                                float _4376 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3261 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
                                float _3265 = sqrt(_3250) * _3129.w;
                                float _3267 = 1.39999997615814208984375 / (_3265 + 1.39999997615814208984375);
                                float _3268 = _3267 * _3267;
                                float _3271 = ((1.0 - _3268) * dot(vec3(_3254, _3255, _3256), vec3(_586, _589, _592))) + _3268;
                                float _3274 = _3265 * _3265;
                                float _3278 = (fma(_2380, _3156.z, fma(_2379, _3156.y, _3156.x * _2378)) + _3156.w) / _3219;
                                float _3279 = (fma(_2380, _3172.z, fma(_2379, _3172.y, _3172.x * _2378)) + _3172.w) / _3219;
                                float _3283 = 1.0 - dot(vec2(_3278, _3279), vec2(_3278, _3279));
                                float _4392 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                                float _3284 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                                float _3285 = _3284 * (((isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0))) * _3261) / ((_3274 * 0.699999988079071044921875) + 1.0));
                                float _3297 = exp2(log2(1.0 / ((_3274 * 3.5) + 5.0)) * 0.25);
                                float _3298 = 1.0 - _661;
                                float _3305 = sqrt(1.0 - ((1.0 - (_3298 * _3298)) * (1.0 - (_3297 * _3297))));
                                float _3306 = _3305 * _3305;
                                float _3307 = _3306 * _3306;
                                float _3308 = _3254 - _2725;
                                float _3309 = _3255 - _2726;
                                float _3310 = _3256 - _2727;
                                float _3314 = inversesqrt(dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310)));
                                float _3318 = dot(vec3(_586, _589, _592), vec3((-0.0) - _2725, (-0.0) - _2726, (-0.0) - _2727));
                                float _4403 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                                float _3321 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
                                float _3322 = dot(vec3(_586, _589, _592), vec3(_3314 * _3308, _3314 * _3309, _3314 * _3310));
                                float _4414 = isnan(0.0) ? _3322 : (isnan(_3322) ? 0.0 : max(_3322, 0.0));
                                float _3325 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3329 = ((_3325 * _3325) * (_3307 + (-1.0))) + 1.0;
                                float _3330 = _3267 * _3306;
                                float _3331 = _3330 * _3330;
                                float _3337 = ((1.0 - _3331) * dot(vec3(_586, _589, _592), vec3(_3254, _3255, _3256))) + _3331;
                                float _4425 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3338 = isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0));
                                float _3339 = 1.0 - _3306;
                                float _3349 = (0.5 / (((_3338 * ((_3321 * _3339) + _3306)) + 9.9999999392252902907785028219223e-09) + (((_3338 * _3339) + _3306) * _3321))) * _3338;
                                float _4436 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                                float _3359 = (_3284 * _3261) * (((_3307 * 3.1415927410125732421875) * (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0)))) / ((_3329 * _3329) * ((_3274 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3285 * _3129.y;
                                frontier_phi_83_pred_1 = _3285 * _3129.x;
                                frontier_phi_83_pred_2 = _3359 * _3141.z;
                                frontier_phi_83_pred_3 = _3359 * _3141.y;
                                frontier_phi_83_pred_4 = _3359 * _3141.x;
                                frontier_phi_83_pred_5 = _3285 * _3129.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3367 = frontier_phi_83_pred;
                            _3366 = frontier_phi_83_pred_1;
                            _3365 = frontier_phi_83_pred_2;
                            _3364 = frontier_phi_83_pred_3;
                            _3363 = frontier_phi_83_pred_4;
                            _3368 = frontier_phi_83_pred_5;
                            _3071 = _3366 + _3084;
                            _3072 = _3367 + _3085;
                            _3073 = _3368 + _3086;
                            _3068 = _3363 + _3081;
                            _3069 = _3364 + _3082;
                            _3070 = _3365 + _3083;
                            if (_3088 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3081 = _3068;
                                _3082 = _3069;
                                _3083 = _3070;
                                _3084 = _3071;
                                _3085 = _3072;
                                _3086 = _3073;
                                _3087 = _3088;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3073;
                        frontier_phi_77_pred_1 = _3072;
                        frontier_phi_77_pred_2 = _3071;
                        frontier_phi_77_pred_3 = _3070;
                        frontier_phi_77_pred_4 = _3069;
                        frontier_phi_77_pred_5 = _3068;
                    }
                    _2710 = frontier_phi_77_pred;
                    _2708 = frontier_phi_77_pred_1;
                    _2706 = frontier_phi_77_pred_2;
                    _2704 = frontier_phi_77_pred_3;
                    _2702 = frontier_phi_77_pred_4;
                    _2700 = frontier_phi_77_pred_5;
                    uint _2866 = _2865 + 1u;
                    if (_2866 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2859 = _2700;
                        _2860 = _2702;
                        _2861 = _2704;
                        _2862 = _2706;
                        _2863 = _2708;
                        _2864 = _2710;
                        _2865 = _2866;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2704;
                frontier_phi_58_59_ladder_1 = _2710;
                frontier_phi_58_59_ladder_2 = _2708;
                frontier_phi_58_59_ladder_3 = _2706;
                frontier_phi_58_59_ladder_4 = _2702;
                frontier_phi_58_59_ladder_5 = _2700;
            }
            else
            {
                frontier_phi_58_59_ladder = _2574;
                frontier_phi_58_59_ladder_1 = _2580;
                frontier_phi_58_59_ladder_2 = _2578;
                frontier_phi_58_59_ladder_3 = _2576;
                frontier_phi_58_59_ladder_4 = _2572;
                frontier_phi_58_59_ladder_5 = _2570;
            }
            _2699 = frontier_phi_58_59_ladder_5;
            _2701 = frontier_phi_58_59_ladder_4;
            _2703 = frontier_phi_58_59_ladder;
            _2705 = frontier_phi_58_59_ladder_3;
            _2707 = frontier_phi_58_59_ladder_2;
            _2709 = frontier_phi_58_59_ladder_1;
        }
        float _2714 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2437 = (_2714 * _2705) + _1870;
        _2439 = (_2714 * _2707) + _1872;
        _2441 = (_2714 * _2709) + _1874;
        _2443 = ((_2699 * _630) * _2714) + _2218;
        _2445 = ((_2701 * _632) * _2714) + _2220;
        _2447 = ((_2703 * _633) * _2714) + _2222;
    }
    else
    {
        _2437 = _1870;
        _2439 = _1872;
        _2441 = _1874;
        _2443 = _2218;
        _2445 = _2220;
        _2447 = _2222;
    }
    uint _2453 = _606 + uint(cbMatDynParam._m0[0u].w);
    float _2459 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2465 = (((((_2459 * cbMtdParam._m0[10u].x) * _332.x) * _355) * (((1.0 - _409) * cbMtdParam._m0[16u].z) + _409)) * _447) * cbInstanceData._m0[_2453].x;
    float _2471 = (((((_2459 * cbMtdParam._m0[10u].y) * _332.y) * _355) * (((1.0 - _411) * cbMtdParam._m0[16u].z) + _411)) * _447) * cbInstanceData._m0[_2453].y;
    float _2477 = (((((_2459 * cbMtdParam._m0[10u].z) * _332.z) * _355) * (((1.0 - _413) * cbMtdParam._m0[16u].z) + _413)) * _447) * cbInstanceData._m0[_2453].z;
    float _4452 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _4463 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _4474 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _2494 = (((isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2437 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _645))) + ((_2443 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1485)) * cbPerFrame._m0[3u].x)) + _2465;
    float _2496 = (_2471 + ((_2445 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1485)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0))) * (_2439 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _645)));
    float _2498 = (_2477 + ((_2447 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1485)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2441 + ((isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0))) * _645)));
    float _2499 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
    float _2500 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0));
    float _2501 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2507 = cbMtdParam._m0[2u].x * _2465;
    float _2508 = cbMtdParam._m0[2u].y * _2471;
    float _2509 = cbMtdParam._m0[2u].z * _2477;
    float _4500 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2511 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
    uint _2512 = _605 + 6u;
    float _2520 = _567 / cbSceneParam._m0[86u].x;
    float _2521 = _568 / cbSceneParam._m0[86u].y;
    vec4 _2535 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, (log2((isnan(cbSceneParam._m0[77u].w) ? _489 : (isnan(_489) ? cbSceneParam._m0[77u].w : min(_489, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2537 = _2535.x;
    float _2538 = _2535.y;
    float _2539 = _2535.z;
    float _2540 = _2535.w;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    if (_489 > cbSceneParam._m0[78u].w)
    {
        float _2595 = isnan(_489) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _489 : min(cbSceneParam._m0[80u].w, _489));
        float _2596 = _2595 / _489;
        float _2607 = _2596 * _540;
        float _2608 = _541 * _2596;
        float _2609 = (-0.0) - _2608;
        float _2610 = _2596 * _542;
        float _2612 = (cbSceneParam._m0[77u].w * _2609) / _2595;
        float _2613 = _2612 + cbSceneParam._m0[79u].w;
        float _2614 = cbSceneParam._m0[79u].w - _2608;
        float _2620 = sqrt(((_2607 * _2607) + (_2608 * _2608)) + (_2610 * _2610));
        float _2623 = (1.0 - (cbSceneParam._m0[77u].w / _2595)) * _2620;
        float _2628 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2630 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2816;
        if (abs((_2609 - _2612) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2816 = ((((_2613 > 0.0) ? exp2(_2628 * _2613) : (2.0 - exp2(_2630 * _2613))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2623;
        }
        else
        {
            float _2760 = 1.0 / cbSceneParam._m0[80u].x;
            float _2761 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : max(_2613, _2614));
            float _2762 = isnan(_2614) ? _2613 : (isnan(_2613) ? _2614 : min(_2613, _2614));
            float _2771 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : min(_2761, 0.0));
            float _2772 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : min(_2762, 0.0));
            _2816 = ((abs(_2620 / _2609) * cbSceneParam._m0[80u].y) * ((((_2771 - _2772) * 2.0) - ((exp2(_2628 * (isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0)))) - exp2(_2628 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))))) * _2760)) - ((exp2(_2630 * _2771) - exp2(_2630 * _2772)) * _2760))) + (_2623 * cbSceneParam._m0[80u].z);
        }
        vec4 _2818 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2520, _2521, 1.0), 0.0);
        float _2827 = exp2((_2816 * (-1.44269502162933349609375)) * (1.0 - _2818.w));
        float _2828 = log2(_2827);
        float _2844 = log2(_2540);
        _2632 = (exp2(_2844 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].x)) * _2818.x) / cbSceneParam._m0[78u].x)) + _2537;
        _2634 = (exp2(_2844 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].y)) * _2818.y) / cbSceneParam._m0[78u].y)) + _2538;
        _2636 = (exp2(_2844 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2828 * cbSceneParam._m0[78u].z)) * _2818.z) / cbSceneParam._m0[78u].z)) + _2539;
        _2638 = _2827 * _2540;
    }
    else
    {
        _2632 = _2537;
        _2634 = _2538;
        _2636 = _2539;
        _2638 = _2540;
    }
    bool _2854;
    vec4 _2648;
    vec4 _2670;
    float _2672;
    float _2676;
    float _2677;
    float _2678;
    float _2681;
    float _2684;
    float _2687;
    float _2688;
    bool _2698;
    for (;;)
    {
        _2648 = cbMatDynParam._m0[0u];
        float _2650 = roundEven(_2648.y);
        bool _2651 = _2650 == 3.0;
        float _2652 = log2(_2638);
        float _2656 = exp2(_2652 * cbSceneParam._m0[78u].x);
        float _2657 = exp2(_2652 * cbSceneParam._m0[78u].y);
        float _2658 = exp2(_2652 * cbSceneParam._m0[78u].z);
        float _2659 = _2656 * _2499;
        float _2660 = _2657 * _2500;
        float _2661 = _2658 * _2501;
        float _2668 = _556 + (-0.5);
        _2670 = cbMtdParam._m0[1u];
        _2672 = _2670.y * _2668;
        float _2675 = (_2650 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2676 = _2675 * (_2651 ? _2659 : (_2659 + (cbSceneParam._m0[72u].w * _2632)));
        _2677 = _2675 * (_2651 ? _2660 : (_2660 + (cbSceneParam._m0[72u].w * _2634)));
        _2678 = _2675 * (_2651 ? _2661 : (_2661 + (cbSceneParam._m0[72u].w * _2636)));
        _2681 = ((_2507 * _2511) * _2656) * _2675;
        _2684 = ((_2508 * _2511) * _2657) * _2675;
        _2687 = ((_2509 * _2511) * _2658) * _2675;
        _2688 = _2668 * 0.999000012874603271484375;
        _2698 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2698)
        {
            if ((cbInstanceData._m0[_605 + 7u].x + _2688) < 0.5)
            {
                _2854 = true;
                break;
            }
        }
        uint _2795 = _606 + uint(_2648.w);
        if ((cbInstanceData._m0[_2795].w < 1.0) && ((cbInstanceData._m0[_2795].w + _2688) < 0.5))
        {
            _2854 = true;
            break;
        }
        if ((_2672 + 1.0) < _2670.x)
        {
            _2854 = true;
            break;
        }
        _2854 = false;
        break;
    }
    float _3059;
    if (_2854)
    {
        discard_state = true;
        _3059 = 0.0;
    }
    else
    {
        _3059 = cbInstanceData._m0[_2512].w;
    }
    SV_Target.x = _2676;
    SV_Target.y = _2677;
    SV_Target.z = _2678;
    SV_Target.w = _3059;
    SV_Target_1.x = _2681;
    SV_Target_1.y = _2684;
    SV_Target_1.z = _2687;
    SV_Target_1.w = cbInstanceData._m0[_2512].w;
    discard_exit();
}


