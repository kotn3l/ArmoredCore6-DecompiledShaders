#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1014;
float _3715;
float _3716;
float _3717;
float _3718;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _261 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _265 = _261.z;
    float _269 = (_261.x * 2.0) + (-1.0);
    float _271 = (_261.y * 2.0) + (-1.0);
    float _272 = dot(vec2(_269, _271), vec2(_269, _271));
    float _3727 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _278 = sqrt(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))));
    float _304 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _305 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _318 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_304 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_305 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _332 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3738 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _333 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _341 = (((_333 * _333) * (3.0 - (_333 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _350 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _358 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3749 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _359 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _363 = (_359 * _359) * (3.0 - (_359 * 2.0));
    float _364 = _363 * cbMtdParam._m0[17u].x;
    float _365 = _363 * cbMtdParam._m0[17u].y;
    float _366 = sin(_350);
    float _367 = cos(_350);
    float _368 = TEXCOORD - _364;
    float _369 = TEXCOORD_1 - _365;
    vec4 _389 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_364 + fma(_369, (-0.0) - _366, _368 * _367))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_369, _367, _368 * _366) + _365)) + cbTextureTilingScale._m0[0u].w));
    float _395 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _389.x;
    float _397 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _389.y;
    float _399 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _389.z;
    vec4 _422 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _304) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _305) + cbTextureTilingScale._m0[5u].w));
    float _432 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_422.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3760 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _437 = (cbMtdParam._m0[16u].y * _269) + _269;
    float _438 = (cbMtdParam._m0[16u].y * _271) + _271;
    float _441 = fma(_278, _211 * NORMAL.x, fma(_438, _218 * TANGENT.x, (_204 * _196) * _437));
    float _444 = fma(_278, _211 * NORMAL.y, fma(_438, _218 * TANGENT.y, (_204 * _197) * _437));
    float _447 = fma(_278, _211 * NORMAL.z, fma(_438, _218 * TANGENT.z, (_204 * _198) * _437));
    float _451 = inversesqrt(dot(vec3(_441, _444, _447), vec3(_441, _444, _447)));
    float _452 = _451 * _441;
    float _453 = _451 * _444;
    float _454 = _451 * _447;
    float _3771 = isnan(0.0) ? _265 : (isnan(_265) ? 0.0 : max(_265, 0.0));
    float _455 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
    float _3782 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3793 = isnan(0.0) ? _247 : (isnan(_247) ? 0.0 : max(_247, 0.0));
    float _3804 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _474 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _525 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _515);
    float _526 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _515);
    float _527 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _515);
    float _531 = inversesqrt(dot(vec3(_525, _526, _527), vec3(_525, _526, _527)));
    float _532 = _525 * _531;
    float _533 = _526 * _531;
    float _534 = _527 * _531;
    vec4 _539 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _541 = _539.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _694 = sqrt(((_525 * _525) + (_526 * _526)) + (_527 * _527));
        float _700 = (cbMatDynParam._m0[5u].x * _694) + cbMatDynParam._m0[5u].y;
        float _3815 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
        float _701 = isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0));
        float _705 = (cbMatDynParam._m0[5u].z * _694) + cbMatDynParam._m0[5u].w;
        float _3826 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3826 : (isnan(_3826) ? 1.0 : min(_3826, 1.0))) - _701)) + _701) < ((_541 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _571 = fma(_454, cbSceneParam._m0[5u].z, fma(_453, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _452));
    float _574 = fma(_454, cbSceneParam._m0[6u].z, fma(_453, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _452));
    float _577 = fma(_454, cbSceneParam._m0[7u].z, fma(_453, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _452));
    uint _590 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = _590 + 9u;
    uint _592 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _598 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0)))) * cbInstanceData._m0[_592].x;
    float _599 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0)))) * cbInstanceData._m0[_592].y;
    float _600 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * cbInstanceData._m0[_592].z;
    float _3837 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0));
    float _3848 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0));
    float _3859 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0));
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _615 = _612.x * TEXCOORD_3.w;
    float _616 = dot(vec3(_452, _453, _454), vec3(_532, _533, _534));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _452) - _532;
    float _624 = (_619 * _453) - _533;
    float _625 = (_619 * _454) - _534;
    float _629 = abs(dot(vec3(_532, _533, _534), vec3(_452, _453, _454)));
    float _3870 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_455);
    float _643 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3870 : (isnan(_3870) ? 1.0 : min(_3870, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _675 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _679 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _683 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1013;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = fma(_683, cbModelParam._m0[26u].z, fma(_679, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _675));
        float _742 = fma(_683, cbModelParam._m0[27u].z, fma(_679, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _675));
        float _746 = fma(_683, cbModelParam._m0[28u].z, fma(_679, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _675));
        float _771 = _675 + _452;
        float _772 = _679 + _453;
        float _773 = _683 + _454;
        float _783 = fma(_773, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _771)) - _738;
        float _784 = fma(_773, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _771)) - _742;
        float _785 = fma(_773, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _771)) - _746;
        float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
        float _802 = ((_789 * _783) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_738 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _803 = ((_789 * _784) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_742 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _804 = ((_789 * _785) / cbModelParam._m0[34u].z) + ((((((_746 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _803, _804), 0.0);
        float _841 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _842 = _841 * (_807.x + (-0.5));
        float _843 = _841 * (_807.y + (-0.5));
        float _844 = _841 * (_807.z + (-0.5));
        float _851 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _852 = _851 * (_814.x + (-0.5));
        float _853 = _851 * (_814.y + (-0.5));
        float _854 = _851 * (_814.z + (-0.5));
        float _861 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _862 = _861 * (_821.x + (-0.5));
        float _863 = _861 * (_821.y + (-0.5));
        float _864 = _861 * (_821.z + (-0.5));
        float _871 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_828.x + (-0.5));
        float _873 = _871 * (_828.y + (-0.5));
        float _874 = _871 * (_828.z + (-0.5));
        float _875 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _876 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _877 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _878 = _842 * 0.5;
        float _879 = _852 * 0.5;
        float _880 = _862 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _895 = (dot(vec3(_452, _453, _454), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3896 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _905 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_875 + 9.9999997473787516355514526367188e-06);
        float _3907 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3918 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0))) * (_907 + 1.0))) + _912) * _875;
        float _922 = _843 * 0.5;
        float _923 = _853 * 0.5;
        float _924 = _863 * 0.5;
        float _925 = dot(vec3(_922, _923, _924), vec3(_922, _923, _924));
        float _930 = (_925 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_925);
        float _938 = (dot(vec3(_452, _453, _454), vec3(_930 * _922, _930 * _923, _930 * _924)) + 1.0) * 0.5;
        float _3929 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _947 = sqrt(((_923 * _923) + (_922 * _922)) + (_924 * _924)) / (_876 + 9.9999997473787516355514526367188e-06);
        float _3940 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
        float _949 = _948 * 2.0;
        float _953 = (1.0 - _948) / (_948 + 1.0);
        float _3951 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
        float _963 = ((((1.0 - _954) * (_949 + 2.0)) * exp2(log2(isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_949 + 1.0))) + _954) * _876;
        float _964 = _844 * 0.5;
        float _965 = _854 * 0.5;
        float _966 = _864 * 0.5;
        float _967 = dot(vec3(_964, _965, _966), vec3(_964, _965, _966));
        float _972 = (_967 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_967);
        float _980 = (dot(vec3(_452, _453, _454), vec3(_972 * _964, _972 * _965, _972 * _966)) + 1.0) * 0.5;
        float _3962 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _989 = sqrt(((_965 * _965) + (_964 * _964)) + (_966 * _966)) / (_877 + 9.9999997473787516355514526367188e-06);
        float _3973 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
        float _991 = _990 * 2.0;
        float _995 = (1.0 - _990) / (_990 + 1.0);
        float _3984 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1005 = ((((1.0 - _996) * (_991 + 2.0)) * exp2(log2(isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_991 + 1.0))) + _996) * _877;
        _1013 = _844;
        _1015 = _843;
        _1016 = _842;
        _1017 = _854;
        _1018 = _853;
        _1019 = _852;
        _1020 = _864;
        _1021 = _863;
        _1022 = _862;
        _1023 = _877;
        _1024 = _876;
        _1025 = _875;
        _1026 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
        _1027 = cbModelParam._m0[36u].z * (isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0)));
        _1028 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0)));
    }
    else
    {
        _1013 = _1014;
        _1015 = _1014;
        _1016 = _1014;
        _1017 = _1014;
        _1018 = _1014;
        _1019 = _1014;
        _1020 = _1014;
        _1021 = _1014;
        _1022 = _1014;
        _1023 = _1014;
        _1024 = _1014;
        _1025 = _1014;
        _1026 = 0.0;
        _1027 = 0.0;
        _1028 = 0.0;
    }
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    float _1339;
    float _1340;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1057 = fma(_683, cbModelParam._m0[30u].z, fma(_679, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _675));
        float _1061 = fma(_683, cbModelParam._m0[31u].z, fma(_679, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _675));
        float _1065 = fma(_683, cbModelParam._m0[32u].z, fma(_679, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _675));
        float _1088 = _675 + _452;
        float _1089 = _679 + _453;
        float _1090 = _683 + _454;
        float _1100 = fma(_1090, cbModelParam._m0[30u].z, fma(_1089, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1088)) - _1057;
        float _1101 = fma(_1090, cbModelParam._m0[31u].z, fma(_1089, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1088)) - _1061;
        float _1102 = fma(_1090, cbModelParam._m0[32u].z, fma(_1089, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1088)) - _1065;
        float _1106 = inversesqrt(dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102)));
        float _1119 = ((_1106 * _1100) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1057 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1120 = ((_1106 * _1101) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1061 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1121 = ((_1106 * _1102) / cbModelParam._m0[35u].z) + ((((((_1065 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1119, _1120, _1121), 0.0);
        float _1156 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1123.x + (-0.5));
        float _1158 = _1156 * (_1123.y + (-0.5));
        float _1159 = _1156 * (_1123.z + (-0.5));
        float _1166 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1130.x + (-0.5));
        float _1168 = _1166 * (_1130.y + (-0.5));
        float _1169 = _1166 * (_1130.z + (-0.5));
        float _1176 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1137.x + (-0.5));
        float _1178 = _1176 * (_1137.y + (-0.5));
        float _1179 = _1176 * (_1137.z + (-0.5));
        float _1186 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1144.x + (-0.5));
        float _1188 = _1186 * (_1144.y + (-0.5));
        float _1189 = _1186 * (_1144.z + (-0.5));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1192 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1193 = _1157 * 0.5;
        float _1194 = _1167 * 0.5;
        float _1195 = _1177 * 0.5;
        float _1196 = dot(vec3(_1193, _1194, _1195), vec3(_1193, _1194, _1195));
        float _1201 = (_1196 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1196);
        float _1209 = (dot(vec3(_452, _453, _454), vec3(_1201 * _1193, _1201 * _1194, _1201 * _1195)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1218 = sqrt(((_1194 * _1194) + (_1193 * _1193)) + (_1195 * _1195)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1220 = _1219 * 2.0;
        float _1224 = (1.0 - _1219) / (_1219 + 1.0);
        float _4047 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1234 = ((((1.0 - _1225) * (_1220 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1220 + 1.0))) + _1225) * _1190;
        float _1235 = _1158 * 0.5;
        float _1236 = _1168 * 0.5;
        float _1237 = _1178 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(_452, _453, _454), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _4058 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1191 + 9.9999997473787516355514526367188e-06);
        float _4069 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _4080 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * (_1262 + 1.0))) + _1267) * _1191;
        float _1277 = _1159 * 0.5;
        float _1278 = _1169 * 0.5;
        float _1279 = _1179 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(_452, _453, _454), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _4091 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1192 + 9.9999997473787516355514526367188e-06);
        float _4102 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _4113 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_1304 + 1.0))) + _1309) * _1192;
        _1326 = _1159;
        _1327 = _1158;
        _1328 = _1157;
        _1329 = _1169;
        _1330 = _1168;
        _1331 = _1167;
        _1332 = _1179;
        _1333 = _1178;
        _1334 = _1177;
        _1335 = _1192;
        _1336 = _1191;
        _1337 = _1190;
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)));
        _1339 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1340 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
    }
    else
    {
        _1326 = _1014;
        _1327 = _1014;
        _1328 = _1014;
        _1329 = _1014;
        _1330 = _1014;
        _1331 = _1014;
        _1332 = _1014;
        _1333 = _1014;
        _1334 = _1014;
        _1335 = _1014;
        _1336 = _1014;
        _1337 = _1014;
        _1338 = 0.0;
        _1339 = 0.0;
        _1340 = 0.0;
    }
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1026)) + _1026;
    float _1351 = (cbModelParam._m0[1u].x * (_1339 - _1027)) + _1027;
    float _1352 = (cbModelParam._m0[1u].x * (_1340 - _1028)) + _1028;
    float _1373 = fma(_1352, cbSceneParam._m0[89u].z, fma(_1351, cbSceneParam._m0[89u].y, _1350 * cbSceneParam._m0[89u].x));
    float _1376 = fma(_1352, cbSceneParam._m0[90u].z, fma(_1351, cbSceneParam._m0[90u].y, _1350 * cbSceneParam._m0[90u].x));
    float _1379 = fma(_1352, cbSceneParam._m0[91u].z, fma(_1351, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1350));
    float _1394 = _623 * 0.5;
    float _1395 = _624 * 0.5;
    float _1396 = _625 * 0.5;
    float _1397 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1328, _1331, _1334, _1337));
    float _1400 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1327, _1330, _1333, _1336));
    float _1403 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1437;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1410 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1013, _1017, _1020, _1023));
        float _1414 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1015, _1018, _1021, _1024));
        float _1418 = dot(vec4(_1394, _1395, _1396, 1.0), vec4(_1016, _1019, _1022, _1025));
        float _1425 = dot(vec4(cbModelParam._m0[39u]), vec4(_1394, _1395, _1396, 1.0));
        _1437 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1425) ? 0.0 : (isnan(0.0) ? _1425 : max(0.0, _1425))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1437 = 1.0;
    }
    float _1448;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1439 = dot(vec4(cbModelParam._m0[40u]), vec4(_1394, _1395, _1396, 1.0));
        _1448 = dot(vec3(isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0)), isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1439) ? 0.0 : (isnan(0.0) ? _1439 : max(0.0, _1439))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1448 = 1.0;
    }
    float _1452 = (_1448 * cbModelParam._m0[1u].x) + (_1437 * (1.0 - cbModelParam._m0[1u].x));
    float _1462 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _455);
    float _1463 = isnan(_1462) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1462 : min(cbModelParam._m0[25u].z, _1462));
    float _1543;
    float _1545;
    float _1547;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1510 = fma(_683, cbModelParam._m0[13u].z, fma(_679, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _675)) + cbModelParam._m0[13u].w;
        float _1514 = fma(_683, cbModelParam._m0[14u].z, fma(_679, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _675)) + cbModelParam._m0[14u].w;
        float _1518 = fma(_683, cbModelParam._m0[15u].z, fma(_679, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _675)) + cbModelParam._m0[15u].w;
        float _1521 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1524 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1527 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1555;
        if (_1521 > 0.0)
        {
            _1555 = abs((1.0 - _1510) / _1521);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1510 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1555 = frontier_phi_17_15_ladder;
        }
        float _1727;
        if (_1524 > 0.0)
        {
            _1727 = abs((1.0 - _1514) / _1524);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1524 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1514 + 1.0) / _1524);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1727 = frontier_phi_26_22_ladder;
        }
        float _2023;
        if (_1527 > 0.0)
        {
            _2023 = abs((1.0 - _1518) / _1527);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1518 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2023 = frontier_phi_38_33_ladder;
        }
        float _2025 = isnan(_1727) ? _1555 : (isnan(_1555) ? _1727 : min(_1555, _1727));
        float _2026 = isnan(_2023) ? _2025 : (isnan(_2025) ? _2023 : min(_2025, _2023));
        float _2030 = (_2026 * _1521) + _1510;
        float _2031 = (_2026 * _1524) + _1514;
        float _2032 = (_2026 * _1527) + _1518;
        float _2033 = _2026 * 9.9999997473787516355514526367188e-05;
        float _2035 = (-1.0) - _2033;
        float _2037 = _2033 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2032 > _2037) || ((_2032 < _2035) || ((_2031 > _2037) || ((_2031 < _2035) || ((_2030 < _2035) || (_2030 > _2037))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2177 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2032, cbModelParam._m0[9u].z, fma(_2031, cbModelParam._m0[9u].y, _2030 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2032, cbModelParam._m0[10u].z, fma(_2031, cbModelParam._m0[10u].y, _2030 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2032, cbModelParam._m0[11u].z, fma(_2031, cbModelParam._m0[11u].y, _2030 * cbModelParam._m0[11u].x))), _1463);
            frontier_phi_16_38_ladder = _2177.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2177.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2177.x * cbModelParam._m0[1u].y;
        }
        _1543 = frontier_phi_16_38_ladder_2;
        _1545 = frontier_phi_16_38_ladder_1;
        _1547 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1463);
        _1543 = _1531.x * cbModelParam._m0[1u].y;
        _1545 = _1531.y * cbModelParam._m0[1u].y;
        _1547 = _1531.z * cbModelParam._m0[1u].y;
    }
    float _1551 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _455);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1551 : min(cbModelParam._m0[25u].w, _1551));
    float _1643;
    float _1645;
    float _1647;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1607 = fma(_683, cbModelParam._m0[21u].z, fma(_679, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _675)) + cbModelParam._m0[21u].w;
        float _1611 = fma(_683, cbModelParam._m0[22u].z, fma(_679, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _675)) + cbModelParam._m0[22u].w;
        float _1615 = fma(_683, cbModelParam._m0[23u].z, fma(_679, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _675)) + cbModelParam._m0[23u].w;
        float _1618 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1621 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1624 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1732;
        if (_1618 > 0.0)
        {
            _1732 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1732 = frontier_phi_28_24_ladder;
        }
        float _2050;
        if (_1621 > 0.0)
        {
            _2050 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2050 = frontier_phi_40_35_ladder;
        }
        float _2377;
        if (_1624 > 0.0)
        {
            _2377 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2377 = frontier_phi_50_47_ladder;
        }
        float _2379 = isnan(_2050) ? _1732 : (isnan(_1732) ? _2050 : min(_1732, _2050));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1618) + _1607;
        float _2385 = (_2380 * _1621) + _1611;
        float _2386 = (_2380 * _1624) + _1615;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2388 = (-1.0) - _2387;
        float _2390 = _2387 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2386 > _2390) || ((_2386 < _2388) || ((_2385 > _2390) || ((_2385 < _2388) || ((_2384 < _2388) || (_2384 > _2390))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2504 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2386, cbModelParam._m0[17u].z, fma(_2385, cbModelParam._m0[17u].y, _2384 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2386, cbModelParam._m0[18u].z, fma(_2385, cbModelParam._m0[18u].y, _2384 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2386, cbModelParam._m0[19u].z, fma(_2385, cbModelParam._m0[19u].y, _2384 * cbModelParam._m0[19u].x))), _1552);
            frontier_phi_25_50_ladder = _2504.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2504.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2504.x * cbModelParam._m0[1u].z;
        }
        _1643 = frontier_phi_25_50_ladder_2;
        _1645 = frontier_phi_25_50_ladder_1;
        _1647 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1627 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1552);
        _1643 = _1627.x * cbModelParam._m0[1u].z;
        _1645 = _1627.y * cbModelParam._m0[1u].z;
        _1647 = _1627.z * cbModelParam._m0[1u].z;
    }
    float _1659 = ((((1.0 - _643) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_643 * _631)) * _615;
    float _1660 = _1659 * ((cbModelParam._m0[1u].w * (_1643 - _1543)) + _1543);
    float _1661 = _1659 * ((cbModelParam._m0[1u].w * (_1645 - _1545)) + _1545);
    float _1662 = _1659 * ((cbModelParam._m0[1u].w * (_1647 - _1547)) + _1547);
    float _1665 = fma(_1662, cbSceneParam._m0[89u].z, fma(_1661, cbSceneParam._m0[89u].y, _1660 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1662, cbSceneParam._m0[90u].z, fma(_1661, cbSceneParam._m0[90u].y, _1660 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1662, cbSceneParam._m0[91u].z, fma(_1661, cbSceneParam._m0[91u].y, _1660 * cbSceneParam._m0[91u].x));
    float _1706 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1710 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1714 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1718 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1719 = _1706 / _1718;
    float _1720 = _1710 / _1718;
    float _1721 = _1714 / _1718;
    float _1868;
    float _1869;
    float _1870;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1748 = ((uint(_1721 > cbSceneParam._m0[59u].y) + uint(_1721 > cbSceneParam._m0[59u].x)) + uint(_1721 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1749 = _1748 + 43u;
        uint _1757 = _1748 + 44u;
        uint _1765 = _1748 + 45u;
        uint _1773 = _1748 + 46u;
        float _1784 = fma(_1718, cbSceneParam._m0[_1749].w, fma(_1714, cbSceneParam._m0[_1749].z, fma(_1710, cbSceneParam._m0[_1749].y, _1706 * cbSceneParam._m0[_1749].x)));
        float _1788 = fma(_1718, cbSceneParam._m0[_1757].w, fma(_1714, cbSceneParam._m0[_1757].z, fma(_1710, cbSceneParam._m0[_1757].y, _1706 * cbSceneParam._m0[_1757].x)));
        float _1796 = fma(_1718, cbSceneParam._m0[_1773].w, fma(_1714, cbSceneParam._m0[_1773].z, fma(_1710, cbSceneParam._m0[_1773].y, _1706 * cbSceneParam._m0[_1773].x)));
        float _1801 = cbSceneParam._m0[33u].z * _1796;
        float _1803 = cbSceneParam._m0[33u].w * _1796;
        float _1806 = fma(_1718, cbSceneParam._m0[_1765].w, fma(_1714, cbSceneParam._m0[_1765].z, fma(_1710, cbSceneParam._m0[_1765].y, _1706 * cbSceneParam._m0[_1765].x))) / _1796;
        float _1854 = (cbSceneParam._m0[33u].x - sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721))) * cbSceneParam._m0[33u].y;
        float _4239 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1861 = (isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1801 + _1784) / _1796, (_1803 + _1788) / _1796), _1806), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1803 + _1784) / _1796, (_1788 - _1801) / _1796), _1806), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1784 - _1801) / _1796, (_1788 - _1803) / _1796), _1806), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1784 - _1803) / _1796, (_1801 + _1788) / _1796), _1806), 0.0)).x), vec4(0.25)));
        _1868 = 1.0 - (_1861 * cbSceneParam._m0[34u].x);
        _1869 = 1.0 - (_1861 * cbSceneParam._m0[34u].y);
        _1870 = 1.0 - (_1861 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1868 = 1.0;
        _1869 = 1.0;
        _1870 = 1.0;
    }
    float _1934;
    float _1936;
    float _1938;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1922 = fma(_1718, cbSceneParam._m0[63u].w, fma(_1714, cbSceneParam._m0[63u].z, fma(_1710, cbSceneParam._m0[63u].y, _1706 * cbSceneParam._m0[63u].x)));
        float _1923 = fma(_1718, cbSceneParam._m0[60u].w, fma(_1714, cbSceneParam._m0[60u].z, fma(_1710, cbSceneParam._m0[60u].y, _1706 * cbSceneParam._m0[60u].x))) / _1922;
        float _1924 = fma(_1718, cbSceneParam._m0[61u].w, fma(_1714, cbSceneParam._m0[61u].z, fma(_1710, cbSceneParam._m0[61u].y, _1706 * cbSceneParam._m0[61u].x))) / _1922;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_1923 >= cbSceneParam._m0[64u].x) && (_1924 >= cbSceneParam._m0[64u].y)) && (_1923 <= cbSceneParam._m0[64u].z)) && (_1924 <= cbSceneParam._m0[64u].w))
        {
            float _2063 = fma(_1718, cbSceneParam._m0[62u].w, fma(_1714, cbSceneParam._m0[62u].z, fma(_1710, cbSceneParam._m0[62u].y, _1706 * cbSceneParam._m0[62u].x))) / _1922;
            float _2067 = isnan(cbSceneParam._m0[41u].w) ? _2063 : (isnan(_2063) ? cbSceneParam._m0[41u].w : max(_2063, cbSceneParam._m0[41u].w));
            float _2110 = (cbSceneParam._m0[33u].x - sqrt(((_1720 * _1720) + (_1719 * _1719)) + (_1721 * _1721))) * cbSceneParam._m0[33u].y;
            float _4255 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
            float _2117 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1923, cbSceneParam._m0[33u].w + _1924), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1923, _1924 - cbSceneParam._m0[33u].z), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1923 - cbSceneParam._m0[33u].z, _1924 - cbSceneParam._m0[33u].w), _2067), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1923 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1924), _2067), 0.0)).x), vec4(0.25)));
            float _2121 = 1.0 - (_2117 * cbSceneParam._m0[34u].x);
            float _2122 = 1.0 - (_2117 * cbSceneParam._m0[34u].y);
            float _2123 = 1.0 - (_2117 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2123) ? _1870 : (isnan(_1870) ? _2123 : min(_1870, _2123));
            frontier_phi_37_36_ladder_1 = isnan(_2122) ? _1869 : (isnan(_1869) ? _2122 : min(_1869, _2122));
            frontier_phi_37_36_ladder_2 = isnan(_2121) ? _1868 : (isnan(_1868) ? _2121 : min(_1868, _2121));
        }
        else
        {
            frontier_phi_37_36_ladder = _1870;
            frontier_phi_37_36_ladder_1 = _1869;
            frontier_phi_37_36_ladder_2 = _1868;
        }
        _1934 = frontier_phi_37_36_ladder_2;
        _1936 = frontier_phi_37_36_ladder_1;
        _1938 = frontier_phi_37_36_ladder;
    }
    else
    {
        _1934 = _1868;
        _1936 = _1869;
        _1938 = _1870;
    }
    uvec4 _1943 = floatBitsToUint(cbInstanceData._m0[_590 + 5u]);
    uint _1945 = _1943.x * 14u;
    uint _1946 = _1945 + 13u;
    float _1953 = _615 + (-1.0);
    float _1958 = (cbLight._m0[_1946].x * _1953) + 1.0;
    float _1959 = (cbLight._m0[_1946].y * _1953) + 1.0;
    float _1960 = (cbLight._m0[_1946].z * _1953) + 1.0;
    float _1961 = (cbLight._m0[_1946].w * _1953) + 1.0;
    uint _1962 = _1945 + 5u;
    float _1968 = isnan(1.0) ? _1959 : (isnan(_1959) ? 1.0 : min(_1959, 1.0));
    uint _1972 = _1945 + 4u;
    float _1982 = isnan(1.0) ? _1958 : (isnan(_1958) ? 1.0 : min(_1958, 1.0));
    uint _1986 = _1945 | 1u;
    float _1997 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_452, _453, _454));
    float _2000 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_452, _453, _454));
    float _4291 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _4302 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2005 = (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0))) * 0.3183098733425140380859375;
    float _2007 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * 0.3183098733425140380859375;
    float _2014 = ((cbLight._m0[_1962].x * _1968) * _2007) + (((cbLight._m0[_1972].x * _1934) * _1982) * _2005);
    float _2015 = ((_1968 * cbLight._m0[_1962].y) * _2007) + (((cbLight._m0[_1972].y * _1936) * _1982) * _2005);
    float _2016 = ((_1968 * cbLight._m0[_1962].z) * _2007) + (((cbLight._m0[_1972].z * _1938) * _1982) * _2005);
    uvec4 _2020 = floatBitsToUint(cbLight._m0[_1945 + 12u]);
    bool _2022 = _2020.x == 0u;
    float _2124;
    float _2126;
    float _2128;
    if (_2022)
    {
        _2124 = _2014;
        _2126 = _2015;
        _2128 = _2016;
    }
    else
    {
        uint _2132 = _1945 + 6u;
        float _2148 = (dot(vec3(cbLight._m0[_1945 + 2u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2149 = _2148 * _2148;
        float _4313 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
        float _2150 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2151 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2124 = (((cbLight._m0[_2132].x * 0.3183098733425140380859375) * _2150) * _2151) + _2014;
        _2126 = (((cbLight._m0[_2132].y * 0.3183098733425140380859375) * _2150) * _2151) + _2015;
        _2128 = (((cbLight._m0[_2132].z * 0.3183098733425140380859375) * _2150) * _2151) + _2016;
    }
    bool _2131 = _2020.y == 0u;
    float _2186;
    float _2188;
    float _2190;
    if (_2131)
    {
        _2186 = _2124;
        _2188 = _2126;
        _2190 = _2128;
    }
    else
    {
        uint _2348 = _1945 + 7u;
        float _2364 = (dot(vec3(cbLight._m0[_1945 + 3u].xyz), vec3(_452, _453, _454)) * 0.5) + 0.5;
        float _2365 = _2364 * _2364;
        float _4329 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2366 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
        float _2367 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2186 = (((cbLight._m0[_2348].x * 0.3183098733425140380859375) * _2366) * _2367) + _2124;
        _2188 = (((cbLight._m0[_2348].y * 0.3183098733425140380859375) * _2366) * _2367) + _2126;
        _2190 = (((cbLight._m0[_2348].z * 0.3183098733425140380859375) * _2366) * _2367) + _2128;
    }
    uint _2193 = _1945 + 8u;
    float _2206 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1945].w)) * _455) * 0.949999988079071044921875);
    float _2207 = _2206 * _2206;
    float _2208 = cbLight._m0[_1945].x + _532;
    float _2209 = cbLight._m0[_1945].y + _533;
    float _2210 = cbLight._m0[_1945].z + _534;
    float _2214 = inversesqrt(dot(vec3(_2208, _2209, _2210), vec3(_2208, _2209, _2210)));
    float _2215 = _2214 * _2208;
    float _2216 = _2214 * _2209;
    float _2217 = _2214 * _2210;
    float _2218 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1945].xyz));
    float _4345 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _2221 = isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0));
    float _4356 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2222 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
    float _2223 = dot(vec3(_452, _453, _454), vec3(_2215, _2216, _2217));
    float _4367 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2226 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
    float _2227 = dot(vec3(cbLight._m0[_1945].xyz), vec3(_2215, _2216, _2217));
    float _4378 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
    float _2231 = _2207 * _2207;
    float _2235 = ((_2226 * _2226) * (_2231 + (-1.0))) + 1.0;
    float _2246 = (exp2(log2(1.0 - (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2247 = 1.0 - _2207;
    float _2258 = (0.5 / (((_2222 * ((_2221 * _2247) + _2207)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2247) + _2207) * _2221))) * _2221;
    float _4389 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2260 = (isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0))) * (_2231 / ((_2235 * _2235) * 3.141590118408203125));
    uint _2274 = _1945 + 9u;
    float _2285 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1986].w)) * _455) * 0.949999988079071044921875);
    float _2286 = _2285 * _2285;
    float _2287 = cbLight._m0[_1986].x + _532;
    float _2288 = cbLight._m0[_1986].y + _533;
    float _2289 = cbLight._m0[_1986].z + _534;
    float _2293 = inversesqrt(dot(vec3(_2287, _2288, _2289), vec3(_2287, _2288, _2289)));
    float _2294 = _2293 * _2287;
    float _2295 = _2293 * _2288;
    float _2296 = _2293 * _2289;
    float _2297 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_1986].xyz));
    float _4400 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
    float _2300 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
    float _2301 = dot(vec3(_452, _453, _454), vec3(_2294, _2295, _2296));
    float _4411 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
    float _2304 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
    float _2305 = dot(vec3(cbLight._m0[_1986].xyz), vec3(_2294, _2295, _2296));
    float _4422 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2309 = _2286 * _2286;
    float _2313 = ((_2304 * _2304) * (_2309 + (-1.0))) + 1.0;
    float _2322 = (exp2(log2(1.0 - (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2323 = 1.0 - _2286;
    float _2333 = (0.5 / (((_2222 * ((_2300 * _2323) + _2286)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2323) + _2286) * _2300))) * _2300;
    float _4433 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
    float _2335 = (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0))) * (_2309 / ((_2313 * _2313) * 3.141590118408203125));
    float _2345 = (((_2322 * cbLight._m0[_2274].x) * _2335) * _1968) + ((((cbLight._m0[_2193].x * _1934) * _2246) * _2260) * _1982);
    float _2346 = (((_2322 * cbLight._m0[_2274].y) * _2335) * _1968) + ((((cbLight._m0[_2193].y * _1936) * _2246) * _2260) * _1982);
    float _2347 = (((_2322 * cbLight._m0[_2274].z) * _2335) * _1968) + ((((cbLight._m0[_2193].z * _1938) * _2246) * _2260) * _1982);
    float _2403;
    float _2405;
    float _2407;
    if (_2022)
    {
        _2403 = _2345;
        _2405 = _2346;
        _2407 = _2347;
    }
    else
    {
        uint _2409 = _1945 + 2u;
        uint _2413 = _1945 + 10u;
        float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2409].w)) * _455) * 0.949999988079071044921875);
        float _2428 = _2427 * _2427;
        float _2429 = cbLight._m0[_2409].x + _532;
        float _2430 = cbLight._m0[_2409].y + _533;
        float _2431 = cbLight._m0[_2409].z + _534;
        float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
        float _2436 = _2435 * _2429;
        float _2437 = _2435 * _2430;
        float _2438 = _2435 * _2431;
        float _2439 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2409].xyz));
        float _4444 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2442 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
        float _2443 = dot(vec3(_452, _453, _454), vec3(_2436, _2437, _2438));
        float _4455 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
        float _2447 = dot(vec3(cbLight._m0[_2409].xyz), vec3(_2436, _2437, _2438));
        float _4466 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2451 = _2428 * _2428;
        float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
        float _2464 = (exp2(log2(1.0 - (isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2465 = 1.0 - _2428;
        float _2475 = (0.5 / (((_2222 * ((_2442 * _2465) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2465) + _2428) * _2442))) * _2442;
        float _4477 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0));
        float _2477 = (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
        float _2478 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
        _2403 = (((_2464 * cbLight._m0[_2413].x) * _2477) * _2478) + _2345;
        _2405 = (((_2464 * cbLight._m0[_2413].y) * _2477) * _2478) + _2346;
        _2407 = (((_2464 * cbLight._m0[_2413].z) * _2477) * _2478) + _2347;
    }
    float _2509;
    float _2511;
    float _2513;
    if (_2131)
    {
        _2509 = _2403;
        _2511 = _2405;
        _2513 = _2407;
    }
    else
    {
        uint _2520 = _1945 + 3u;
        uint _2524 = _1945 + 11u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _455) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _532;
        float _2541 = cbLight._m0[_2520].y + _533;
        float _2542 = cbLight._m0[_2520].z + _534;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_452, _453, _454), vec3(cbLight._m0[_2520].xyz));
        float _4493 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2554 = dot(vec3(_452, _453, _454), vec3(_2547, _2548, _2549));
        float _4504 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4515 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2575 = (exp2(log2(1.0 - (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2576 = 1.0 - _2539;
        float _2586 = (0.5 / (((_2222 * ((_2553 * _2576) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2222 * _2576) + _2539) * _2553))) * _2553;
        float _4526 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2588 = (isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2589 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
        _2509 = (((_2575 * cbLight._m0[_2524].x) * _2588) * _2589) + _2403;
        _2511 = (((_2575 * cbLight._m0[_2524].y) * _2588) * _2589) + _2405;
        _2513 = (((_2575 * cbLight._m0[_2524].z) * _2588) * _2589) + _2407;
    }
    float _2655;
    float _2657;
    float _2659;
    float _2661;
    float _2663;
    float _2665;
    if (_1943.y == 0u)
    {
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.x;
        uint _2622 = uint((float(_2610.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _2611))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _2611)));
        float _2632 = (log2(_1721 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2633 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
        uint _2636 = uint(isnan(14.0) ? _2633 : (isnan(_2633) ? 14.0 : min(_2633, 14.0)));
        uvec4 _2641 = texelFetch(g_lightClusterGridBuffer, int(((_2636 << 2u) + (_2622 << 6u)) >> 2u));
        uint _2642 = _2641.x;
        uint _2643 = _2610.z;
        float _2767;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        if (((((1u << ((_2643 >> 4u) & 15u)) + 4294967295u) & _2642) == 0u) || ((_2643 & 240u) == 0u))
        {
            _2767 = 0.0;
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
        }
        else
        {
            float _2768;
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2928 = 0.0;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            uint _2934 = 0u;
            uint _2943;
            bool _2944;
            for (;;)
            {
                _2943 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_2934 << 2u)) >> 2u)).x;
                _2944 = _2943 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2944)
                {
                    frontier_phi_71_pred = _2933;
                    frontier_phi_71_pred_1 = _2932;
                    frontier_phi_71_pred_2 = _2931;
                    frontier_phi_71_pred_3 = _2930;
                    frontier_phi_71_pred_4 = _2929;
                    frontier_phi_71_pred_5 = _2928;
                }
                else
                {
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    uint _3079;
                    _3073 = _2928;
                    _3074 = _2929;
                    _3075 = _2930;
                    _3076 = _2931;
                    _3077 = _2932;
                    _3078 = _2933;
                    _3079 = _2943;
                    float _3000;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    for (;;)
                    {
                        uint _3083 = uint(findLSB(_3079)) + (_2934 << 5u);
                        uint _3080 = (_3079 + 4294967295u) & _3079;
                        uint _3085 = _3083 * 48u;
                        vec4 _3099 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3105 = (_3083 * 48u) + 4u;
                        vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3105)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3105 + 3u)).x));
                        uint _3124 = (_3083 * 48u) + 8u;
                        vec3 _3135 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3124)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3124 + 2u)).x));
                        float _3139 = _3099.x - _1719;
                        float _3140 = _3099.y - _1720;
                        float _3141 = _3099.z - _1721;
                        float _3142 = dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141));
                        float _3145 = inversesqrt(_3142);
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3149 = dot(vec3(_571, _574, _577), vec3(_3146, _3147, _3148));
                        float _3154 = 1.0 - (_3142 * _3099.w);
                        float _4552 = isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0));
                        float _3155 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                        float _3156 = sqrt(_3142) * _3118.w;
                        float _3159 = 1.39999997615814208984375 / (_3156 + 1.39999997615814208984375);
                        float _3160 = _3159 * _3159;
                        float _3163 = ((1.0 - _3160) * _3149) + _3160;
                        float _3166 = _3156 * _3156;
                        float _3170 = ((isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0))) * _3155) / ((_3166 * 0.699999988079071044921875) + 1.0);
                        float _3174 = (-0.0) - _1719;
                        float _3175 = (-0.0) - _1720;
                        float _3176 = (-0.0) - _1721;
                        float _3180 = inversesqrt(dot(vec3(_3174, _3175, _3176), vec3(_3174, _3175, _3176)));
                        float _3181 = _3180 * _3174;
                        float _3182 = _3180 * _3175;
                        float _3183 = _3180 * _3176;
                        float _3190 = exp2(log2(1.0 / ((_3166 * 3.5) + 5.0)) * 0.25);
                        float _3191 = 1.0 - _631;
                        float _3198 = sqrt(1.0 - ((1.0 - (_3191 * _3191)) * (1.0 - (_3190 * _3190))));
                        float _3199 = _3198 * _3198;
                        float _3200 = _3199 * _3199;
                        float _3201 = _3181 + _3146;
                        float _3202 = _3182 + _3147;
                        float _3203 = _3183 + _3148;
                        float _3207 = inversesqrt(dot(vec3(_3201, _3202, _3203), vec3(_3201, _3202, _3203)));
                        float _3211 = dot(vec3(_571, _574, _577), vec3(_3181, _3182, _3183));
                        float _4568 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
                        float _3215 = dot(vec3(_571, _574, _577), vec3(_3207 * _3201, _3207 * _3202, _3207 * _3203));
                        float _4579 = isnan(0.0) ? _3215 : (isnan(_3215) ? 0.0 : max(_3215, 0.0));
                        float _3218 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
                        float _3222 = ((_3218 * _3218) * (_3200 + (-1.0))) + 1.0;
                        float _3223 = _3159 * _3199;
                        float _3224 = _3223 * _3223;
                        float _3227 = ((1.0 - _3224) * _3149) + _3224;
                        float _4590 = isnan(0.0) ? _3227 : (isnan(_3227) ? 0.0 : max(_3227, 0.0));
                        float _3228 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3229 = 1.0 - _3199;
                        float _3239 = (0.5 / (((_3228 * ((_3214 * _3229) + _3199)) + 9.9999999392252902907785028219223e-09) + (((_3228 * _3229) + _3199) * _3214))) * _3228;
                        float _4601 = isnan(0.0) ? _3239 : (isnan(_3239) ? 0.0 : max(_3239, 0.0));
                        float _3250 = (((_3200 * 3.1415927410125732421875) * (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) / ((_3222 * _3222) * ((_3166 * 2.1991131305694580078125) + 3.141590118408203125))) * _3155;
                        _3003 = (_3170 * _3118.x) + _3076;
                        _3004 = (_3170 * _3118.y) + _3077;
                        _3005 = (_3170 * _3118.z) + _3078;
                        _3000 = (_3250 * _3135.x) + _3073;
                        _3001 = (_3250 * _3135.y) + _3074;
                        _3002 = (_3250 * _3135.z) + _3075;
                        if (_3080 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3080;
                        }
                    }
                    frontier_phi_71_pred = _3005;
                    frontier_phi_71_pred_1 = _3004;
                    frontier_phi_71_pred_2 = _3003;
                    frontier_phi_71_pred_3 = _3002;
                    frontier_phi_71_pred_4 = _3001;
                    frontier_phi_71_pred_5 = _3000;
                }
                _2778 = frontier_phi_71_pred;
                _2776 = frontier_phi_71_pred_1;
                _2774 = frontier_phi_71_pred_2;
                _2772 = frontier_phi_71_pred_3;
                _2770 = frontier_phi_71_pred_4;
                _2768 = frontier_phi_71_pred_5;
                uint _2935 = _2934 + 1u;
                if (_2935 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2928 = _2768;
                    _2929 = _2770;
                    _2930 = _2772;
                    _2931 = _2774;
                    _2932 = _2776;
                    _2933 = _2778;
                    _2934 = _2935;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2767 = _2768;
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
        }
        uvec4 _2781 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2782 = _2781.z;
        uint _2784 = (_2782 >> 8u) & 15u;
        float _2896;
        float _2898;
        float _2900;
        float _2902;
        float _2904;
        float _2906;
        if (((4294967295u << _2784) & _2642) == 0u)
        {
            _2896 = _2767;
            _2898 = _2769;
            _2900 = _2771;
            _2902 = _2773;
            _2904 = _2775;
            _2906 = _2777;
        }
        else
        {
            float _2921 = inversesqrt(dot(vec3(_1719, _1720, _1721), vec3(_1719, _1720, _1721)));
            float _2922 = _2921 * _1719;
            float _2923 = _2921 * _1720;
            float _2924 = _2921 * _1721;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2784 < ((_2782 >> 12u) & 15u))
            {
                float _2897;
                float _2899;
                float _2901;
                float _2903;
                float _2905;
                float _2907;
                float _3056 = _2767;
                float _3057 = _2769;
                float _3058 = _2771;
                float _3059 = _2773;
                float _3060 = _2775;
                float _3061 = _2777;
                uint _3062 = _2784;
                uint _3071;
                bool _3072;
                for (;;)
                {
                    _3071 = texelFetch(g_lightClassification, int((((_2636 << 5u) + (_2622 << 9u)) + (_3062 << 2u)) >> 2u)).x;
                    _3072 = _3071 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3072)
                    {
                        frontier_phi_82_pred = _3061;
                        frontier_phi_82_pred_1 = _3060;
                        frontier_phi_82_pred_2 = _3059;
                        frontier_phi_82_pred_3 = _3058;
                        frontier_phi_82_pred_4 = _3057;
                        frontier_phi_82_pred_5 = _3056;
                    }
                    else
                    {
                        float _3264;
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3564;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        float _3282 = _3061;
                        uint _3283 = _3071;
                        uint _3284;
                        vec4 _3309;
                        float _3310;
                        vec4 _3325;
                        vec3 _3337;
                        vec4 _3352;
                        vec4 _3368;
                        float _3415;
                        bool _3416;
                        for (;;)
                        {
                            uint _3294 = ((_3062 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3283));
                            _3284 = (_3283 + 4294967295u) & _3283;
                            uint _3296 = _3294 * 40u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            _3310 = _3309.w;
                            uint _3312 = (_3294 * 40u) + 4u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            uint _3327 = (_3294 * 40u) + 8u;
                            _3337 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x));
                            uint _3339 = (_3294 * 40u) + 16u;
                            _3352 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 3u)).x));
                            uint _3355 = (_3294 * 40u) + 20u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3371 = (_3294 * 40u) + 24u;
                            vec4 _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            uint _3390 = (_3294 * 40u) + 28u;
                            vec4 _3403 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3390)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3390 + 3u)).x));
                            _3415 = fma(_1721, _3403.z, fma(_1720, _3403.y, _3403.x * _1719)) + _3403.w;
                            _3416 = !((fma(_1721, _3384.z, fma(_1720, _3384.y, _3384.x * _1719)) + _3384.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3416)
                            {
                                float _3443 = _3309.x - _1719;
                                float _3444 = _3309.y - _1720;
                                float _3445 = _3309.z - _1721;
                                float _3446 = dot(vec3(_3443, _3444, _3445), vec3(_3443, _3444, _3445));
                                float _3449 = inversesqrt(_3446);
                                float _3450 = _3449 * _3443;
                                float _3451 = _3449 * _3444;
                                float _3452 = _3449 * _3445;
                                float _3456 = 1.0 - (_3446 / (_3310 * _3310));
                                float _4612 = isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0));
                                float _3457 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
                                float _3461 = sqrt(_3446) * _3325.w;
                                float _3463 = 1.39999997615814208984375 / (_3461 + 1.39999997615814208984375);
                                float _3464 = _3463 * _3463;
                                float _3467 = ((1.0 - _3464) * dot(vec3(_3450, _3451, _3452), vec3(_571, _574, _577))) + _3464;
                                float _3470 = _3461 * _3461;
                                float _3474 = (fma(_1721, _3352.z, fma(_1720, _3352.y, _3352.x * _1719)) + _3352.w) / _3415;
                                float _3475 = (fma(_1721, _3368.z, fma(_1720, _3368.y, _3368.x * _1719)) + _3368.w) / _3415;
                                float _3479 = 1.0 - dot(vec2(_3474, _3475), vec2(_3474, _3475));
                                float _4628 = isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0));
                                float _3480 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                                float _3481 = _3480 * (((isnan(0.0) ? _3467 : (isnan(_3467) ? 0.0 : max(_3467, 0.0))) * _3457) / ((_3470 * 0.699999988079071044921875) + 1.0));
                                float _3493 = exp2(log2(1.0 / ((_3470 * 3.5) + 5.0)) * 0.25);
                                float _3494 = 1.0 - _631;
                                float _3501 = sqrt(1.0 - ((1.0 - (_3494 * _3494)) * (1.0 - (_3493 * _3493))));
                                float _3502 = _3501 * _3501;
                                float _3503 = _3502 * _3502;
                                float _3504 = _3450 - _2922;
                                float _3505 = _3451 - _2923;
                                float _3506 = _3452 - _2924;
                                float _3510 = inversesqrt(dot(vec3(_3504, _3505, _3506), vec3(_3504, _3505, _3506)));
                                float _3514 = dot(vec3(_571, _574, _577), vec3((-0.0) - _2922, (-0.0) - _2923, (-0.0) - _2924));
                                float _4639 = isnan(0.0) ? _3514 : (isnan(_3514) ? 0.0 : max(_3514, 0.0));
                                float _3517 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                                float _3518 = dot(vec3(_571, _574, _577), vec3(_3510 * _3504, _3510 * _3505, _3510 * _3506));
                                float _4650 = isnan(0.0) ? _3518 : (isnan(_3518) ? 0.0 : max(_3518, 0.0));
                                float _3521 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3525 = ((_3521 * _3521) * (_3503 + (-1.0))) + 1.0;
                                float _3526 = _3463 * _3502;
                                float _3527 = _3526 * _3526;
                                float _3533 = ((1.0 - _3527) * dot(vec3(_571, _574, _577), vec3(_3450, _3451, _3452))) + _3527;
                                float _4661 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3534 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                                float _3535 = 1.0 - _3502;
                                float _3545 = (0.5 / (((_3534 * ((_3517 * _3535) + _3502)) + 9.9999999392252902907785028219223e-09) + (((_3534 * _3535) + _3502) * _3517))) * _3534;
                                float _4672 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3555 = (_3480 * _3457) * (((_3503 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3525 * _3525) * ((_3470 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3481 * _3325.z;
                                frontier_phi_88_pred_1 = _3481 * _3325.y;
                                frontier_phi_88_pred_2 = _3481 * _3325.x;
                                frontier_phi_88_pred_3 = _3555 * _3337.z;
                                frontier_phi_88_pred_4 = _3555 * _3337.y;
                                frontier_phi_88_pred_5 = _3555 * _3337.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3564 = frontier_phi_88_pred;
                            _3563 = frontier_phi_88_pred_1;
                            _3562 = frontier_phi_88_pred_2;
                            _3561 = frontier_phi_88_pred_3;
                            _3560 = frontier_phi_88_pred_4;
                            _3559 = frontier_phi_88_pred_5;
                            _3267 = _3562 + _3280;
                            _3268 = _3563 + _3281;
                            _3269 = _3564 + _3282;
                            _3264 = _3559 + _3277;
                            _3265 = _3560 + _3278;
                            _3266 = _3561 + _3279;
                            if (_3284 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3284;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3269;
                        frontier_phi_82_pred_1 = _3268;
                        frontier_phi_82_pred_2 = _3267;
                        frontier_phi_82_pred_3 = _3266;
                        frontier_phi_82_pred_4 = _3265;
                        frontier_phi_82_pred_5 = _3264;
                    }
                    _2907 = frontier_phi_82_pred;
                    _2905 = frontier_phi_82_pred_1;
                    _2903 = frontier_phi_82_pred_2;
                    _2901 = frontier_phi_82_pred_3;
                    _2899 = frontier_phi_82_pred_4;
                    _2897 = frontier_phi_82_pred_5;
                    uint _3063 = _3062 + 1u;
                    if (_3063 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3056 = _2897;
                        _3057 = _2899;
                        _3058 = _2901;
                        _3059 = _2903;
                        _3060 = _2905;
                        _3061 = _2907;
                        _3062 = _3063;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2903;
                frontier_phi_63_64_ladder_1 = _2907;
                frontier_phi_63_64_ladder_2 = _2905;
                frontier_phi_63_64_ladder_3 = _2901;
                frontier_phi_63_64_ladder_4 = _2899;
                frontier_phi_63_64_ladder_5 = _2897;
            }
            else
            {
                frontier_phi_63_64_ladder = _2773;
                frontier_phi_63_64_ladder_1 = _2777;
                frontier_phi_63_64_ladder_2 = _2775;
                frontier_phi_63_64_ladder_3 = _2771;
                frontier_phi_63_64_ladder_4 = _2769;
                frontier_phi_63_64_ladder_5 = _2767;
            }
            _2896 = frontier_phi_63_64_ladder_5;
            _2898 = frontier_phi_63_64_ladder_4;
            _2900 = frontier_phi_63_64_ladder_3;
            _2902 = frontier_phi_63_64_ladder;
            _2904 = frontier_phi_63_64_ladder_2;
            _2906 = frontier_phi_63_64_ladder_1;
        }
        float _2911 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _2655 = (_2911 * _2902) + _2186;
        _2657 = (_2911 * _2904) + _2188;
        _2659 = (_2911 * _2906) + _2190;
        _2661 = ((_2896 * 0.039999999105930328369140625) * _2911) + _2509;
        _2663 = ((_2898 * 0.039999999105930328369140625) * _2911) + _2511;
        _2665 = ((_2900 * 0.039999999105930328369140625) * _2911) + _2513;
    }
    else
    {
        _2655 = _2186;
        _2657 = _2188;
        _2659 = _2190;
        _2661 = _2509;
        _2663 = _2511;
        _2665 = _2513;
    }
    uint _2671 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _2677 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2683 = (((((_2677 * cbMtdParam._m0[10u].x) * _318.x) * _341) * (((1.0 - _395) * cbMtdParam._m0[16u].z) + _395)) * _433) * cbInstanceData._m0[_2671].x;
    float _2689 = (((((_2677 * cbMtdParam._m0[10u].y) * _318.y) * _341) * (((1.0 - _397) * cbMtdParam._m0[16u].z) + _397)) * _433) * cbInstanceData._m0[_2671].y;
    float _2695 = (((((_2677 * cbMtdParam._m0[10u].z) * _318.z) * _341) * (((1.0 - _399) * cbMtdParam._m0[16u].z) + _399)) * _433) * cbInstanceData._m0[_2671].z;
    float _4688 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _4699 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _4710 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2712 = (((isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0))) * (_2655 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _615))) + ((_2661 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + _2683;
    float _2714 = (_2689 + ((_2663 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0))) * (_2657 + ((isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))) * _615)));
    float _2716 = (_2695 + ((_2665 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _1452)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0))) * (_2659 + ((isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))) * _615)));
    float _2717 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
    float _2718 = isnan(0.0) ? _2714 : (isnan(_2714) ? 0.0 : max(_2714, 0.0));
    float _2719 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
    float _2725 = cbMtdParam._m0[2u].x * _2683;
    float _2726 = cbMtdParam._m0[2u].y * _2689;
    float _2727 = cbMtdParam._m0[2u].z * _2695;
    float _4736 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2729 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
    uint _2730 = _590 + 6u;
    float _2738 = _552 / cbSceneParam._m0[86u].x;
    float _2739 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2753 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2738, _2739, (log2((isnan(cbSceneParam._m0[77u].w) ? _474 : (isnan(_474) ? cbSceneParam._m0[77u].w : min(_474, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2755 = _2753.x;
    float _2756 = _2753.y;
    float _2757 = _2753.z;
    float _2758 = _2753.w;
    float _2829;
    float _2831;
    float _2833;
    float _2835;
    if (_474 > cbSceneParam._m0[78u].w)
    {
        float _2792 = isnan(_474) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _474 : min(cbSceneParam._m0[80u].w, _474));
        float _2793 = _2792 / _474;
        float _2804 = _2793 * _525;
        float _2805 = _526 * _2793;
        float _2806 = (-0.0) - _2805;
        float _2807 = _2793 * _527;
        float _2809 = (cbSceneParam._m0[77u].w * _2806) / _2792;
        float _2810 = _2809 + cbSceneParam._m0[79u].w;
        float _2811 = cbSceneParam._m0[79u].w - _2805;
        float _2817 = sqrt(((_2804 * _2804) + (_2805 * _2805)) + (_2807 * _2807));
        float _2820 = (1.0 - (cbSceneParam._m0[77u].w / _2792)) * _2817;
        float _2825 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2827 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3013;
        if (abs((_2806 - _2809) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3013 = ((((_2810 > 0.0) ? exp2(_2825 * _2810) : (2.0 - exp2(_2827 * _2810))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2820;
        }
        else
        {
            float _2957 = 1.0 / cbSceneParam._m0[80u].x;
            float _2958 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : max(_2810, _2811));
            float _2959 = isnan(_2811) ? _2810 : (isnan(_2810) ? _2811 : min(_2810, _2811));
            float _2968 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : min(_2958, 0.0));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            _3013 = ((abs(_2817 / _2806) * cbSceneParam._m0[80u].y) * ((((_2968 - _2969) * 2.0) - ((exp2(_2825 * (isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0)))) - exp2(_2825 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0))))) * _2957)) - ((exp2(_2827 * _2968) - exp2(_2827 * _2969)) * _2957))) + (_2820 * cbSceneParam._m0[80u].z);
        }
        vec4 _3015 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2738, _2739, 1.0), 0.0);
        float _3024 = exp2((_3013 * (-1.44269502162933349609375)) * (1.0 - _3015.w));
        float _3025 = log2(_3024);
        float _3041 = log2(_2758);
        _2829 = (exp2(_3041 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].x)) * _3015.x) / cbSceneParam._m0[78u].x)) + _2755;
        _2831 = (exp2(_3041 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].y)) * _3015.y) / cbSceneParam._m0[78u].y)) + _2756;
        _2833 = (exp2(_3041 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3025 * cbSceneParam._m0[78u].z)) * _3015.z) / cbSceneParam._m0[78u].z)) + _2757;
        _2835 = _3024 * _2758;
    }
    else
    {
        _2829 = _2755;
        _2831 = _2756;
        _2833 = _2757;
        _2835 = _2758;
    }
    bool _3051;
    vec4 _2845;
    vec4 _2867;
    float _2869;
    float _2873;
    float _2874;
    float _2875;
    float _2878;
    float _2881;
    float _2884;
    float _2885;
    bool _2895;
    for (;;)
    {
        _2845 = cbMatDynParam._m0[0u];
        float _2847 = roundEven(_2845.y);
        bool _2848 = _2847 == 3.0;
        float _2849 = log2(_2835);
        float _2853 = exp2(_2849 * cbSceneParam._m0[78u].x);
        float _2854 = exp2(_2849 * cbSceneParam._m0[78u].y);
        float _2855 = exp2(_2849 * cbSceneParam._m0[78u].z);
        float _2856 = _2853 * _2717;
        float _2857 = _2854 * _2718;
        float _2858 = _2855 * _2719;
        float _2865 = _541 + (-0.5);
        _2867 = cbMtdParam._m0[1u];
        _2869 = _2867.y * _2865;
        float _2872 = (_2847 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2873 = _2872 * (_2848 ? _2856 : (_2856 + (cbSceneParam._m0[72u].w * _2829)));
        _2874 = _2872 * (_2848 ? _2857 : (_2857 + (cbSceneParam._m0[72u].w * _2831)));
        _2875 = _2872 * (_2848 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2833)));
        _2878 = ((_2725 * _2729) * _2853) * _2872;
        _2881 = ((_2726 * _2729) * _2854) * _2872;
        _2884 = ((_2727 * _2729) * _2855) * _2872;
        _2885 = _2865 * 0.999000012874603271484375;
        _2895 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2895)
        {
            if ((cbInstanceData._m0[_590 + 7u].x + _2885) < 0.5)
            {
                _3051 = true;
                break;
            }
        }
        uint _2992 = _591 + uint(_2845.w);
        if ((cbInstanceData._m0[_2992].w < 1.0) && ((cbInstanceData._m0[_2992].w + _2885) < 0.5))
        {
            _3051 = true;
            break;
        }
        if ((_2869 + 1.0) < _2867.x)
        {
            _3051 = true;
            break;
        }
        _3051 = false;
        break;
    }
    float _3255;
    if (_3051)
    {
        discard_state = true;
        _3255 = 0.0;
    }
    else
    {
        _3255 = cbInstanceData._m0[_2730].w;
    }
    SV_Target.x = _2873;
    SV_Target.y = _2874;
    SV_Target.z = _2875;
    SV_Target.w = _3255;
    SV_Target_1.x = _2878;
    SV_Target_1.y = _2881;
    SV_Target_1.z = _2884;
    SV_Target_1.w = cbInstanceData._m0[_2730].w;
    discard_exit();
}


