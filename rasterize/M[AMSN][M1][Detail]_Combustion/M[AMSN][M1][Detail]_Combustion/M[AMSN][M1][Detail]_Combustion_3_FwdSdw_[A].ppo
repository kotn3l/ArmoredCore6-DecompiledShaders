#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1150;
float _3870;
float _3871;
float _3872;
float _3873;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _206 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _207 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _208 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _214 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _221 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _228 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _256 = _250.x * cbMtdParam._m0[9u].x;
    float _257 = _250.y * cbMtdParam._m0[9u].y;
    float _258 = _250.z * cbMtdParam._m0[9u].z;
    vec4 _282 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    vec4 _302 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _313 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (_302.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3882 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _314 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _321 = (_314 * ((_282.x * cbMtdParam._m0[12u].x) - _256)) + _256;
    float _322 = (_314 * ((_282.y * cbMtdParam._m0[12u].y) - _257)) + _257;
    float _323 = (_314 * ((_282.z * cbMtdParam._m0[12u].z) - _258)) + _258;
    vec4 _335 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _337 = _335.x;
    float _339 = _337 - (_337 * _314);
    vec4 _351 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _374 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _378 = _374.z;
    float _381 = (_374.x * 2.0) + (-1.0);
    float _382 = (_374.y * 2.0) + (-1.0);
    float _383 = dot(vec2(_381, _382), vec2(_381, _382));
    float _3893 = isnan(0.0) ? _383 : (isnan(_383) ? 0.0 : max(_383, 0.0));
    float _388 = sqrt(1.0 - (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))));
    float _396 = (((_351.z - _378) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _378;
    float _416 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _417 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _430 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_416 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_417 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _444 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3904 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _453 = (((_445 * _445) * (3.0 - (_445 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _462 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _470 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3915 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _471 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _475 = (_471 * _471) * (3.0 - (_471 * 2.0));
    float _476 = _475 * cbMtdParam._m0[17u].x;
    float _477 = _475 * cbMtdParam._m0[17u].y;
    float _478 = sin(_462);
    float _479 = cos(_462);
    float _480 = TEXCOORD - _476;
    float _481 = TEXCOORD_1 - _477;
    vec4 _501 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_476 + fma(_481, (-0.0) - _478, _480 * _479))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_481, _479, _480 * _478) + _477)) + cbTextureTilingScale._m0[0u].w));
    float _507 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _501.x;
    float _509 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _501.y;
    float _511 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _501.z;
    vec4 _534 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _416) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _417) + cbTextureTilingScale._m0[5u].w));
    float _543 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_534.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3926 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _544 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
    float _554 = (((((_351.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _381) + (cbMtdParam._m0[16u].y * _381);
    float _556 = (((((_351.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _382) + (cbMtdParam._m0[16u].y * _382);
    float _559 = fma(_388, _221 * NORMAL.x, fma(_556, _228 * TANGENT.x, (_214 * _206) * _554));
    float _562 = fma(_388, _221 * NORMAL.y, fma(_556, _228 * TANGENT.y, (_214 * _207) * _554));
    float _565 = fma(_388, _221 * NORMAL.z, fma(_556, _228 * TANGENT.z, (_214 * _208) * _554));
    float _569 = inversesqrt(dot(vec3(_559, _562, _565), vec3(_559, _562, _565)));
    float _570 = _569 * _559;
    float _571 = _569 * _562;
    float _572 = _569 * _565;
    float _3937 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _573 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
    float _3948 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _3959 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3970 = isnan(0.0) ? _323 : (isnan(_323) ? 0.0 : max(_323, 0.0));
    float _3981 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _577 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
    float _593 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _643 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _633);
    float _644 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _633);
    float _645 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _633);
    float _649 = inversesqrt(dot(vec3(_643, _644, _645), vec3(_643, _644, _645)));
    float _650 = _643 * _649;
    float _651 = _644 * _649;
    float _652 = _645 * _649;
    vec4 _657 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _659 = _657.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _830 = sqrt(((_643 * _643) + (_644 * _644)) + (_645 * _645));
        float _836 = (cbMatDynParam._m0[5u].x * _830) + cbMatDynParam._m0[5u].y;
        float _3992 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _841 = (cbMatDynParam._m0[5u].z * _830) + cbMatDynParam._m0[5u].w;
        float _4003 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) - _837)) + _837) < ((_659 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _670 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _671 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _689 = fma(_572, cbSceneParam._m0[5u].z, fma(_571, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _570));
    float _692 = fma(_572, cbSceneParam._m0[6u].z, fma(_571, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _570));
    float _695 = fma(_572, cbSceneParam._m0[7u].z, fma(_571, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _570));
    uint _708 = uint(roundEven(NORMAL.w)) * 13u;
    uint _709 = _708 + 9u;
    uint _710 = _709 + uint(cbMatDynParam._m0[0u].w);
    float _716 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0)))) * cbInstanceData._m0[_710].x;
    float _717 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0)))) * cbInstanceData._m0[_710].y;
    float _718 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * cbInstanceData._m0[_710].z;
    float _4014 = isnan(0.0) ? _716 : (isnan(_716) ? 0.0 : max(_716, 0.0));
    float _719 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _4025 = isnan(0.0) ? _717 : (isnan(_717) ? 0.0 : max(_717, 0.0));
    float _720 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
    float _4036 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
    float _721 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
    float _722 = 1.0 - _577;
    float _723 = _719 * _722;
    float _724 = _720 * _722;
    float _725 = _721 * _722;
    float _730 = (_719 + (-0.039999999105930328369140625)) * _577;
    float _731 = (_720 + (-0.039999999105930328369140625)) * _577;
    float _732 = (_721 + (-0.039999999105930328369140625)) * _577;
    float _733 = _730 + 0.039999999105930328369140625;
    float _735 = _731 + 0.039999999105930328369140625;
    float _736 = _732 + 0.039999999105930328369140625;
    vec4 _745 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _670, cbSceneParam._m0[86u].y * _671));
    float _748 = _745.x * TEXCOORD_3.w;
    float _749 = dot(vec3(_570, _571, _572), vec3(_650, _651, _652));
    float _752 = _749 * 2.0;
    float _756 = (_752 * _570) - _650;
    float _757 = (_752 * _571) - _651;
    float _758 = (_752 * _572) - _652;
    float _762 = abs(dot(vec3(_650, _651, _652), vec3(_570, _571, _572)));
    float _4047 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _764 = sqrt(_573);
    float _776 = exp2((_764 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_764 * 3.0));
    float _782 = (1.0 - _776) * ((_764 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _783 = _776 * _764;
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1149;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _874 = fma(_819, cbModelParam._m0[26u].z, fma(_815, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _811));
        float _878 = fma(_819, cbModelParam._m0[27u].z, fma(_815, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _811));
        float _882 = fma(_819, cbModelParam._m0[28u].z, fma(_815, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _811));
        float _907 = _811 + _570;
        float _908 = _815 + _571;
        float _909 = _819 + _572;
        float _919 = fma(_909, cbModelParam._m0[26u].z, fma(_908, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907)) - _874;
        float _920 = fma(_909, cbModelParam._m0[27u].z, fma(_908, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907)) - _878;
        float _921 = fma(_909, cbModelParam._m0[28u].z, fma(_908, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907)) - _882;
        float _925 = inversesqrt(dot(vec3(_919, _920, _921), vec3(_919, _920, _921)));
        float _938 = ((_925 * _919) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_874 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _939 = ((_925 * _920) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_878 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _940 = ((_925 * _921) / cbModelParam._m0[34u].z) + ((((((_882 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _943 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_938, _939, _940), 0.0);
        float _977 = exp2((_943.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_943.x + (-0.5));
        float _979 = _977 * (_943.y + (-0.5));
        float _980 = _977 * (_943.z + (-0.5));
        float _987 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_950.x + (-0.5));
        float _989 = _987 * (_950.y + (-0.5));
        float _990 = _987 * (_950.z + (-0.5));
        float _997 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_957.x + (-0.5));
        float _999 = _997 * (_957.y + (-0.5));
        float _1000 = _997 * (_957.z + (-0.5));
        float _1007 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_964.x + (-0.5));
        float _1009 = _1007 * (_964.y + (-0.5));
        float _1010 = _1007 * (_964.z + (-0.5));
        float _1011 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1012 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1013 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1014 = _978 * 0.5;
        float _1015 = _988 * 0.5;
        float _1016 = _998 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1031 = (dot(vec3(_570, _571, _572), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _4073 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1041 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_1011 + 9.9999997473787516355514526367188e-06);
        float _4084 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _4095 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * (_1043 + 1.0))) + _1048) * _1011;
        float _1058 = _979 * 0.5;
        float _1059 = _989 * 0.5;
        float _1060 = _999 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(_570, _571, _572), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _4106 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1012 + 9.9999997473787516355514526367188e-06);
        float _4117 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _4128 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_1085 + 1.0))) + _1090) * _1012;
        float _1100 = _980 * 0.5;
        float _1101 = _990 * 0.5;
        float _1102 = _1000 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(_570, _571, _572), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _4139 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1013 + 9.9999997473787516355514526367188e-06);
        float _4150 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _4161 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * (_1127 + 1.0))) + _1132) * _1013;
        _1149 = _980;
        _1151 = _979;
        _1152 = _978;
        _1153 = _990;
        _1154 = _989;
        _1155 = _988;
        _1156 = _1000;
        _1157 = _999;
        _1158 = _998;
        _1159 = _1013;
        _1160 = _1012;
        _1161 = _1011;
        _1162 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1163 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1164 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
    }
    else
    {
        _1149 = _1150;
        _1151 = _1150;
        _1152 = _1150;
        _1153 = _1150;
        _1154 = _1150;
        _1155 = _1150;
        _1156 = _1150;
        _1157 = _1150;
        _1158 = _1150;
        _1159 = _1150;
        _1160 = _1150;
        _1161 = _1150;
        _1162 = 0.0;
        _1163 = 0.0;
        _1164 = 0.0;
    }
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1193 = fma(_819, cbModelParam._m0[30u].z, fma(_815, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _811));
        float _1197 = fma(_819, cbModelParam._m0[31u].z, fma(_815, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _811));
        float _1201 = fma(_819, cbModelParam._m0[32u].z, fma(_815, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _811));
        float _1224 = _811 + _570;
        float _1225 = _815 + _571;
        float _1226 = _819 + _572;
        float _1236 = fma(_1226, cbModelParam._m0[30u].z, fma(_1225, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1224)) - _1193;
        float _1237 = fma(_1226, cbModelParam._m0[31u].z, fma(_1225, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1224)) - _1197;
        float _1238 = fma(_1226, cbModelParam._m0[32u].z, fma(_1225, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1224)) - _1201;
        float _1242 = inversesqrt(dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238)));
        float _1255 = ((_1242 * _1236) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1193 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1256 = ((_1242 * _1237) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1197 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1257 = ((_1242 * _1238) / cbModelParam._m0[35u].z) + ((((((_1201 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1273 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1255, _1256, _1257), 0.0);
        float _1292 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1293 = _1292 * (_1259.x + (-0.5));
        float _1294 = _1292 * (_1259.y + (-0.5));
        float _1295 = _1292 * (_1259.z + (-0.5));
        float _1302 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1266.x + (-0.5));
        float _1304 = _1302 * (_1266.y + (-0.5));
        float _1305 = _1302 * (_1266.z + (-0.5));
        float _1312 = exp2((_1273.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1273.x + (-0.5));
        float _1314 = _1312 * (_1273.y + (-0.5));
        float _1315 = _1312 * (_1273.z + (-0.5));
        float _1322 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1280.x + (-0.5));
        float _1324 = _1322 * (_1280.y + (-0.5));
        float _1325 = _1322 * (_1280.z + (-0.5));
        float _1326 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1327 = isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0));
        float _1328 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1329 = _1293 * 0.5;
        float _1330 = _1303 * 0.5;
        float _1331 = _1313 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_570, _571, _572), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4202 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1326 + 9.9999997473787516355514526367188e-06);
        float _4213 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4224 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0))) * (_1356 + 1.0))) + _1361) * _1326;
        float _1371 = _1294 * 0.5;
        float _1372 = _1304 * 0.5;
        float _1373 = _1314 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_570, _571, _572), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _4235 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1327 + 9.9999997473787516355514526367188e-06);
        float _4246 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _4257 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_1398 + 1.0))) + _1403) * _1327;
        float _1413 = _1295 * 0.5;
        float _1414 = _1305 * 0.5;
        float _1415 = _1315 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_570, _571, _572), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4268 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1328 + 9.9999997473787516355514526367188e-06);
        float _4279 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4290 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_1440 + 1.0))) + _1445) * _1328;
        _1462 = _1295;
        _1463 = _1294;
        _1464 = _1293;
        _1465 = _1305;
        _1466 = _1304;
        _1467 = _1303;
        _1468 = _1315;
        _1469 = _1314;
        _1470 = _1313;
        _1471 = _1328;
        _1472 = _1327;
        _1473 = _1326;
        _1474 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1475 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
        _1476 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
    }
    else
    {
        _1462 = _1150;
        _1463 = _1150;
        _1464 = _1150;
        _1465 = _1150;
        _1466 = _1150;
        _1467 = _1150;
        _1468 = _1150;
        _1469 = _1150;
        _1470 = _1150;
        _1471 = _1150;
        _1472 = _1150;
        _1473 = _1150;
        _1474 = 0.0;
        _1475 = 0.0;
        _1476 = 0.0;
    }
    float _1486 = (cbModelParam._m0[1u].x * (_1474 - _1162)) + _1162;
    float _1487 = (cbModelParam._m0[1u].x * (_1475 - _1163)) + _1163;
    float _1488 = (cbModelParam._m0[1u].x * (_1476 - _1164)) + _1164;
    float _1509 = fma(_1488, cbSceneParam._m0[89u].z, fma(_1487, cbSceneParam._m0[89u].y, _1486 * cbSceneParam._m0[89u].x));
    float _1512 = fma(_1488, cbSceneParam._m0[90u].z, fma(_1487, cbSceneParam._m0[90u].y, _1486 * cbSceneParam._m0[90u].x));
    float _1515 = fma(_1488, cbSceneParam._m0[91u].z, fma(_1487, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1486));
    float _1530 = _756 * 0.5;
    float _1531 = _757 * 0.5;
    float _1532 = _758 * 0.5;
    float _1533 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1464, _1467, _1470, _1473));
    float _1536 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1463, _1466, _1469, _1472));
    float _1539 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1462, _1465, _1468, _1471));
    float _1573;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1546 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1149, _1153, _1156, _1159));
        float _1550 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1151, _1154, _1157, _1160));
        float _1554 = dot(vec4(_1530, _1531, _1532, 1.0), vec4(_1152, _1155, _1158, _1161));
        float _1561 = dot(vec4(cbModelParam._m0[39u]), vec4(_1530, _1531, _1532, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1584;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1575 = dot(vec4(cbModelParam._m0[40u]), vec4(_1530, _1531, _1532, 1.0));
        _1584 = dot(vec3(isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1575) ? 0.0 : (isnan(0.0) ? _1575 : max(0.0, _1575))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1584 = 1.0;
    }
    float _1588 = (_1584 * cbModelParam._m0[1u].x) + (_1573 * (1.0 - cbModelParam._m0[1u].x));
    float _1598 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _573);
    float _1599 = isnan(_1598) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1598 : min(cbModelParam._m0[25u].z, _1598));
    float _1679;
    float _1681;
    float _1683;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1646 = fma(_819, cbModelParam._m0[13u].z, fma(_815, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _811)) + cbModelParam._m0[13u].w;
        float _1650 = fma(_819, cbModelParam._m0[14u].z, fma(_815, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _811)) + cbModelParam._m0[14u].w;
        float _1654 = fma(_819, cbModelParam._m0[15u].z, fma(_815, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _811)) + cbModelParam._m0[15u].w;
        float _1657 = fma(_758, cbModelParam._m0[13u].z, fma(_757, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _756));
        float _1660 = fma(_758, cbModelParam._m0[14u].z, fma(_757, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _756));
        float _1663 = fma(_758, cbModelParam._m0[15u].z, fma(_757, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _756));
        float _1691;
        if (_1657 > 0.0)
        {
            _1691 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1691 = frontier_phi_17_15_ladder;
        }
        float _1864;
        if (_1660 > 0.0)
        {
            _1864 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1864 = frontier_phi_26_22_ladder;
        }
        float _2159;
        if (_1663 > 0.0)
        {
            _2159 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2159 = frontier_phi_38_33_ladder;
        }
        float _2161 = isnan(_1864) ? _1691 : (isnan(_1691) ? _1864 : min(_1691, _1864));
        float _2162 = isnan(_2159) ? _2161 : (isnan(_2161) ? _2159 : min(_2161, _2159));
        float _2166 = (_2162 * _1657) + _1646;
        float _2167 = (_2162 * _1660) + _1650;
        float _2168 = (_2162 * _1663) + _1654;
        float _2169 = _2162 * 9.9999997473787516355514526367188e-05;
        float _2171 = (-1.0) - _2169;
        float _2173 = _2169 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2168 > _2173) || ((_2168 < _2171) || ((_2167 > _2173) || ((_2167 < _2171) || ((_2166 < _2171) || (_2166 > _2173))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2168, cbModelParam._m0[9u].z, fma(_2167, cbModelParam._m0[9u].y, _2166 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2168, cbModelParam._m0[10u].z, fma(_2167, cbModelParam._m0[10u].y, _2166 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2168, cbModelParam._m0[11u].z, fma(_2167, cbModelParam._m0[11u].y, _2166 * cbModelParam._m0[11u].x))), _1599);
            frontier_phi_16_38_ladder = _2313.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2313.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2313.x * cbModelParam._m0[1u].y;
        }
        _1679 = frontier_phi_16_38_ladder_2;
        _1681 = frontier_phi_16_38_ladder_1;
        _1683 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1667 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_756, _757, _758), _1599);
        _1679 = _1667.x * cbModelParam._m0[1u].y;
        _1681 = _1667.y * cbModelParam._m0[1u].y;
        _1683 = _1667.z * cbModelParam._m0[1u].y;
    }
    float _1687 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _573);
    float _1688 = isnan(_1687) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1687 : min(cbModelParam._m0[25u].w, _1687));
    float _1779;
    float _1781;
    float _1783;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1743 = fma(_819, cbModelParam._m0[21u].z, fma(_815, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _811)) + cbModelParam._m0[21u].w;
        float _1747 = fma(_819, cbModelParam._m0[22u].z, fma(_815, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _811)) + cbModelParam._m0[22u].w;
        float _1751 = fma(_819, cbModelParam._m0[23u].z, fma(_815, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _811)) + cbModelParam._m0[23u].w;
        float _1754 = fma(_758, cbModelParam._m0[21u].z, fma(_757, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _756));
        float _1757 = fma(_758, cbModelParam._m0[22u].z, fma(_757, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _756));
        float _1760 = fma(_758, cbModelParam._m0[23u].z, fma(_757, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _756));
        float _1869;
        if (_1754 > 0.0)
        {
            _1869 = abs((1.0 - _1743) / _1754);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1743 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1869 = frontier_phi_28_24_ladder;
        }
        float _2186;
        if (_1757 > 0.0)
        {
            _2186 = abs((1.0 - _1747) / _1757);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1747 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2186 = frontier_phi_40_35_ladder;
        }
        float _2524;
        if (_1760 > 0.0)
        {
            _2524 = abs((1.0 - _1751) / _1760);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1760 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1751 + 1.0) / _1760);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2524 = frontier_phi_50_47_ladder;
        }
        float _2526 = isnan(_2186) ? _1869 : (isnan(_1869) ? _2186 : min(_1869, _2186));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _1754) + _1743;
        float _2532 = (_2527 * _1757) + _1747;
        float _2533 = (_2527 * _1760) + _1751;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2534;
        float _2537 = _2534 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2533 > _2537) || ((_2533 < _2535) || ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 < _2535) || (_2531 > _2537))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2655 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2533, cbModelParam._m0[17u].z, fma(_2532, cbModelParam._m0[17u].y, _2531 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2533, cbModelParam._m0[18u].z, fma(_2532, cbModelParam._m0[18u].y, _2531 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2533, cbModelParam._m0[19u].z, fma(_2532, cbModelParam._m0[19u].y, _2531 * cbModelParam._m0[19u].x))), _1688);
            frontier_phi_25_50_ladder = _2655.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2655.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2655.x * cbModelParam._m0[1u].z;
        }
        _1779 = frontier_phi_25_50_ladder_2;
        _1781 = frontier_phi_25_50_ladder_1;
        _1783 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_756, _757, _758), _1688);
        _1779 = _1763.x * cbModelParam._m0[1u].z;
        _1781 = _1763.y * cbModelParam._m0[1u].z;
        _1783 = _1763.z * cbModelParam._m0[1u].z;
    }
    float _1796 = (((_782 * _733) + _783) * _748) * ((cbModelParam._m0[1u].w * (_1779 - _1679)) + _1679);
    float _1798 = (((_782 * _735) + _783) * _748) * ((cbModelParam._m0[1u].w * (_1781 - _1681)) + _1681);
    float _1800 = (((_782 * _736) + _783) * _748) * ((cbModelParam._m0[1u].w * (_1783 - _1683)) + _1683);
    float _1803 = fma(_1800, cbSceneParam._m0[89u].z, fma(_1798, cbSceneParam._m0[89u].y, _1796 * cbSceneParam._m0[89u].x));
    float _1806 = fma(_1800, cbSceneParam._m0[90u].z, fma(_1798, cbSceneParam._m0[90u].y, _1796 * cbSceneParam._m0[90u].x));
    float _1809 = fma(_1800, cbSceneParam._m0[91u].z, fma(_1798, cbSceneParam._m0[91u].y, _1796 * cbSceneParam._m0[91u].x));
    float _1843 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1847 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1851 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1855 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1856 = _1843 / _1855;
    float _1857 = _1847 / _1855;
    float _1858 = _1851 / _1855;
    float _2005;
    float _2006;
    float _2007;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1885 = ((uint(_1858 > cbSceneParam._m0[59u].y) + uint(_1858 > cbSceneParam._m0[59u].x)) + uint(_1858 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1886 = _1885 + 43u;
        uint _1894 = _1885 + 44u;
        uint _1902 = _1885 + 45u;
        uint _1910 = _1885 + 46u;
        float _1921 = fma(_1855, cbSceneParam._m0[_1886].w, fma(_1851, cbSceneParam._m0[_1886].z, fma(_1847, cbSceneParam._m0[_1886].y, _1843 * cbSceneParam._m0[_1886].x)));
        float _1925 = fma(_1855, cbSceneParam._m0[_1894].w, fma(_1851, cbSceneParam._m0[_1894].z, fma(_1847, cbSceneParam._m0[_1894].y, _1843 * cbSceneParam._m0[_1894].x)));
        float _1933 = fma(_1855, cbSceneParam._m0[_1910].w, fma(_1851, cbSceneParam._m0[_1910].z, fma(_1847, cbSceneParam._m0[_1910].y, _1843 * cbSceneParam._m0[_1910].x)));
        float _1938 = cbSceneParam._m0[33u].z * _1933;
        float _1940 = cbSceneParam._m0[33u].w * _1933;
        float _1943 = fma(_1855, cbSceneParam._m0[_1902].w, fma(_1851, cbSceneParam._m0[_1902].z, fma(_1847, cbSceneParam._m0[_1902].y, _1843 * cbSceneParam._m0[_1902].x))) / _1933;
        float _1991 = (cbSceneParam._m0[33u].x - sqrt(((_1857 * _1857) + (_1856 * _1856)) + (_1858 * _1858))) * cbSceneParam._m0[33u].y;
        float _4416 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1998 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1938 + _1921) / _1933, (_1940 + _1925) / _1933), _1943), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1940 + _1921) / _1933, (_1925 - _1938) / _1933), _1943), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1921 - _1938) / _1933, (_1925 - _1940) / _1933), _1943), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1921 - _1940) / _1933, (_1938 + _1925) / _1933), _1943), 0.0)).x), vec4(0.25)));
        _2005 = 1.0 - (_1998 * cbSceneParam._m0[34u].x);
        _2006 = 1.0 - (_1998 * cbSceneParam._m0[34u].y);
        _2007 = 1.0 - (_1998 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2005 = 1.0;
        _2006 = 1.0;
        _2007 = 1.0;
    }
    float _2071;
    float _2073;
    float _2075;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2059 = fma(_1855, cbSceneParam._m0[63u].w, fma(_1851, cbSceneParam._m0[63u].z, fma(_1847, cbSceneParam._m0[63u].y, _1843 * cbSceneParam._m0[63u].x)));
        float _2060 = fma(_1855, cbSceneParam._m0[60u].w, fma(_1851, cbSceneParam._m0[60u].z, fma(_1847, cbSceneParam._m0[60u].y, _1843 * cbSceneParam._m0[60u].x))) / _2059;
        float _2061 = fma(_1855, cbSceneParam._m0[61u].w, fma(_1851, cbSceneParam._m0[61u].z, fma(_1847, cbSceneParam._m0[61u].y, _1843 * cbSceneParam._m0[61u].x))) / _2059;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2060 >= cbSceneParam._m0[64u].x) && (_2061 >= cbSceneParam._m0[64u].y)) && (_2060 <= cbSceneParam._m0[64u].z)) && (_2061 <= cbSceneParam._m0[64u].w))
        {
            float _2199 = fma(_1855, cbSceneParam._m0[62u].w, fma(_1851, cbSceneParam._m0[62u].z, fma(_1847, cbSceneParam._m0[62u].y, _1843 * cbSceneParam._m0[62u].x))) / _2059;
            float _2203 = isnan(cbSceneParam._m0[41u].w) ? _2199 : (isnan(_2199) ? cbSceneParam._m0[41u].w : max(_2199, cbSceneParam._m0[41u].w));
            float _2246 = (cbSceneParam._m0[33u].x - sqrt(((_1857 * _1857) + (_1856 * _1856)) + (_1858 * _1858))) * cbSceneParam._m0[33u].y;
            float _4432 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
            float _2253 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2060, cbSceneParam._m0[33u].w + _2061), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2060, _2061 - cbSceneParam._m0[33u].z), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2060 - cbSceneParam._m0[33u].z, _2061 - cbSceneParam._m0[33u].w), _2203), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2060 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2061), _2203), 0.0)).x), vec4(0.25)));
            float _2257 = 1.0 - (_2253 * cbSceneParam._m0[34u].x);
            float _2258 = 1.0 - (_2253 * cbSceneParam._m0[34u].y);
            float _2259 = 1.0 - (_2253 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2259) ? _2007 : (isnan(_2007) ? _2259 : min(_2007, _2259));
            frontier_phi_37_36_ladder_1 = isnan(_2258) ? _2006 : (isnan(_2006) ? _2258 : min(_2006, _2258));
            frontier_phi_37_36_ladder_2 = isnan(_2257) ? _2005 : (isnan(_2005) ? _2257 : min(_2005, _2257));
        }
        else
        {
            frontier_phi_37_36_ladder = _2007;
            frontier_phi_37_36_ladder_1 = _2006;
            frontier_phi_37_36_ladder_2 = _2005;
        }
        _2071 = frontier_phi_37_36_ladder_2;
        _2073 = frontier_phi_37_36_ladder_1;
        _2075 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2071 = _2005;
        _2073 = _2006;
        _2075 = _2007;
    }
    uvec4 _2080 = floatBitsToUint(cbInstanceData._m0[_708 + 5u]);
    uint _2082 = _2080.x * 14u;
    uint _2083 = _2082 + 13u;
    float _2090 = _748 + (-1.0);
    float _2095 = (cbLight._m0[_2083].x * _2090) + 1.0;
    float _2096 = (cbLight._m0[_2083].y * _2090) + 1.0;
    float _2097 = (cbLight._m0[_2083].z * _2090) + 1.0;
    float _2098 = (cbLight._m0[_2083].w * _2090) + 1.0;
    uint _2099 = _2082 + 5u;
    float _2105 = isnan(1.0) ? _2096 : (isnan(_2096) ? 1.0 : min(_2096, 1.0));
    uint _2109 = _2082 + 4u;
    float _2118 = isnan(1.0) ? _2095 : (isnan(_2095) ? 1.0 : min(_2095, 1.0));
    uint _2122 = _2082 | 1u;
    float _2133 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_570, _571, _572));
    float _2136 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_570, _571, _572));
    float _4468 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _4479 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2141 = (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0))) * 0.3183098733425140380859375;
    float _2143 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * 0.3183098733425140380859375;
    float _2150 = ((cbLight._m0[_2099].x * _2105) * _2143) + (((cbLight._m0[_2109].x * _2071) * _2118) * _2141);
    float _2151 = ((_2105 * cbLight._m0[_2099].y) * _2143) + (((cbLight._m0[_2109].y * _2073) * _2118) * _2141);
    float _2152 = ((_2105 * cbLight._m0[_2099].z) * _2143) + (((cbLight._m0[_2109].z * _2075) * _2118) * _2141);
    uvec4 _2156 = floatBitsToUint(cbLight._m0[_2082 + 12u]);
    bool _2158 = _2156.x == 0u;
    float _2260;
    float _2262;
    float _2264;
    if (_2158)
    {
        _2260 = _2150;
        _2262 = _2151;
        _2264 = _2152;
    }
    else
    {
        uint _2268 = _2082 + 6u;
        float _2284 = (dot(vec3(cbLight._m0[_2082 + 2u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2285 = _2284 * _2284;
        float _4490 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2286 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
        float _2287 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2260 = (((cbLight._m0[_2268].x * 0.3183098733425140380859375) * _2286) * _2287) + _2150;
        _2262 = (((cbLight._m0[_2268].y * 0.3183098733425140380859375) * _2286) * _2287) + _2151;
        _2264 = (((cbLight._m0[_2268].z * 0.3183098733425140380859375) * _2286) * _2287) + _2152;
    }
    bool _2267 = _2156.y == 0u;
    float _2322;
    float _2324;
    float _2326;
    if (_2267)
    {
        _2322 = _2260;
        _2324 = _2262;
        _2326 = _2264;
    }
    else
    {
        uint _2495 = _2082 + 7u;
        float _2511 = (dot(vec3(cbLight._m0[_2082 + 3u].xyz), vec3(_570, _571, _572)) * 0.5) + 0.5;
        float _2512 = _2511 * _2511;
        float _4506 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
        float _2513 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
        float _2514 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2322 = (((cbLight._m0[_2495].x * 0.3183098733425140380859375) * _2513) * _2514) + _2260;
        _2324 = (((cbLight._m0[_2495].y * 0.3183098733425140380859375) * _2513) * _2514) + _2262;
        _2326 = (((cbLight._m0[_2495].z * 0.3183098733425140380859375) * _2513) * _2514) + _2264;
    }
    uint _2329 = _2082 + 8u;
    float _2342 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2082].w)) * _573) * 0.949999988079071044921875);
    float _2343 = _2342 * _2342;
    float _2344 = cbLight._m0[_2082].x + _650;
    float _2345 = cbLight._m0[_2082].y + _651;
    float _2346 = cbLight._m0[_2082].z + _652;
    float _2350 = inversesqrt(dot(vec3(_2344, _2345, _2346), vec3(_2344, _2345, _2346)));
    float _2351 = _2350 * _2344;
    float _2352 = _2350 * _2345;
    float _2353 = _2350 * _2346;
    float _2354 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2082].xyz));
    float _4522 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2357 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
    float _4533 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _2358 = isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0));
    float _2359 = dot(vec3(_570, _571, _572), vec3(_2351, _2352, _2353));
    float _4544 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0));
    float _2362 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
    float _2363 = dot(vec3(cbLight._m0[_2082].xyz), vec3(_2351, _2352, _2353));
    float _4555 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
    float _2367 = _2343 * _2343;
    float _2371 = ((_2362 * _2362) * (_2367 + (-1.0))) + 1.0;
    float _2379 = exp2(log2(1.0 - (isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0)))) * 5.0);
    float _2380 = 0.959999978542327880859375 - _730;
    float _2382 = 0.959999978542327880859375 - _731;
    float _2383 = 0.959999978542327880859375 - _732;
    float _2390 = 1.0 - _2343;
    float _2401 = (0.5 / (((_2358 * ((_2357 * _2390) + _2343)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2390) + _2343) * _2357))) * _2357;
    float _4566 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2403 = (isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0))) * (_2367 / ((_2371 * _2371) * 3.141590118408203125));
    uint _2417 = _2082 + 9u;
    float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2122].w)) * _573) * 0.949999988079071044921875);
    float _2429 = _2428 * _2428;
    float _2430 = cbLight._m0[_2122].x + _650;
    float _2431 = cbLight._m0[_2122].y + _651;
    float _2432 = cbLight._m0[_2122].z + _652;
    float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
    float _2437 = _2436 * _2430;
    float _2438 = _2436 * _2431;
    float _2439 = _2436 * _2432;
    float _2440 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2122].xyz));
    float _4577 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
    float _2443 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
    float _2444 = dot(vec3(_570, _571, _572), vec3(_2437, _2438, _2439));
    float _4588 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2122].xyz), vec3(_2437, _2438, _2439));
    float _4599 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2429 * _2429;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) * 5.0);
    float _2470 = 1.0 - _2429;
    float _2480 = (0.5 / (((_2358 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2470) + _2429) * _2443))) * _2443;
    float _4610 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
    float _2482 = (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    float _2492 = (((((_2463 * _2380) + _733) * cbLight._m0[_2417].x) * _2482) * _2105) + ((((cbLight._m0[_2329].x * _2071) * ((_2379 * _2380) + _733)) * _2403) * _2118);
    float _2493 = (((((_2463 * _2382) + _735) * cbLight._m0[_2417].y) * _2482) * _2105) + ((((cbLight._m0[_2329].y * _2073) * ((_2379 * _2382) + _735)) * _2403) * _2118);
    float _2494 = (((((_2463 * _2383) + _736) * cbLight._m0[_2417].z) * _2482) * _2105) + ((((cbLight._m0[_2329].z * _2075) * ((_2379 * _2383) + _736)) * _2403) * _2118);
    float _2550;
    float _2552;
    float _2554;
    if (_2158)
    {
        _2550 = _2492;
        _2552 = _2493;
        _2554 = _2494;
    }
    else
    {
        uint _2556 = _2082 + 2u;
        uint _2560 = _2082 + 10u;
        float _2574 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2556].w)) * _573) * 0.949999988079071044921875);
        float _2575 = _2574 * _2574;
        float _2576 = cbLight._m0[_2556].x + _650;
        float _2577 = cbLight._m0[_2556].y + _651;
        float _2578 = cbLight._m0[_2556].z + _652;
        float _2582 = inversesqrt(dot(vec3(_2576, _2577, _2578), vec3(_2576, _2577, _2578)));
        float _2583 = _2582 * _2576;
        float _2584 = _2582 * _2577;
        float _2585 = _2582 * _2578;
        float _2586 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2556].xyz));
        float _4621 = isnan(0.0) ? _2586 : (isnan(_2586) ? 0.0 : max(_2586, 0.0));
        float _2589 = isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0));
        float _2590 = dot(vec3(_570, _571, _572), vec3(_2583, _2584, _2585));
        float _4632 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2593 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
        float _2594 = dot(vec3(cbLight._m0[_2556].xyz), vec3(_2583, _2584, _2585));
        float _4643 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
        float _2598 = _2575 * _2575;
        float _2602 = ((_2593 * _2593) * (_2598 + (-1.0))) + 1.0;
        float _2609 = exp2(log2(1.0 - (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0)))) * 5.0);
        float _2616 = 1.0 - _2575;
        float _2626 = (0.5 / (((_2358 * ((_2589 * _2616) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2616) + _2575) * _2589))) * _2589;
        float _4654 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
        float _2628 = (isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0))) * (_2598 / ((_2602 * _2602) * 3.141590118408203125));
        float _2629 = isnan(1.0) ? _2097 : (isnan(_2097) ? 1.0 : min(_2097, 1.0));
        _2550 = (((((_2609 * _2380) + _733) * cbLight._m0[_2560].x) * _2628) * _2629) + _2492;
        _2552 = (((((_2609 * _2382) + _735) * cbLight._m0[_2560].y) * _2628) * _2629) + _2493;
        _2554 = (((((_2609 * _2383) + _736) * cbLight._m0[_2560].z) * _2628) * _2629) + _2494;
    }
    float _2660;
    float _2662;
    float _2664;
    if (_2267)
    {
        _2660 = _2550;
        _2662 = _2552;
        _2664 = _2554;
    }
    else
    {
        uint _2671 = _2082 + 3u;
        uint _2675 = _2082 + 11u;
        float _2689 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2671].w)) * _573) * 0.949999988079071044921875);
        float _2690 = _2689 * _2689;
        float _2691 = cbLight._m0[_2671].x + _650;
        float _2692 = cbLight._m0[_2671].y + _651;
        float _2693 = cbLight._m0[_2671].z + _652;
        float _2697 = inversesqrt(dot(vec3(_2691, _2692, _2693), vec3(_2691, _2692, _2693)));
        float _2698 = _2697 * _2691;
        float _2699 = _2697 * _2692;
        float _2700 = _2697 * _2693;
        float _2701 = dot(vec3(_570, _571, _572), vec3(cbLight._m0[_2671].xyz));
        float _4670 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2705 = dot(vec3(_570, _571, _572), vec3(_2698, _2699, _2700));
        float _4681 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2708 = isnan(1.0) ? _4681 : (isnan(_4681) ? 1.0 : min(_4681, 1.0));
        float _2709 = dot(vec3(cbLight._m0[_2671].xyz), vec3(_2698, _2699, _2700));
        float _4692 = isnan(0.0) ? _2709 : (isnan(_2709) ? 0.0 : max(_2709, 0.0));
        float _2713 = _2690 * _2690;
        float _2717 = ((_2708 * _2708) * (_2713 + (-1.0))) + 1.0;
        float _2724 = exp2(log2(1.0 - (isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0)))) * 5.0);
        float _2731 = 1.0 - _2690;
        float _2741 = (0.5 / (((_2358 * ((_2704 * _2731) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2358 * _2731) + _2690) * _2704))) * _2704;
        float _4703 = isnan(0.0) ? _2741 : (isnan(_2741) ? 0.0 : max(_2741, 0.0));
        float _2743 = (isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0))) * (_2713 / ((_2717 * _2717) * 3.141590118408203125));
        float _2744 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
        _2660 = (((((_2724 * _2380) + _733) * cbLight._m0[_2675].x) * _2743) * _2744) + _2550;
        _2662 = (((((_2724 * _2382) + _735) * cbLight._m0[_2675].y) * _2743) * _2744) + _2552;
        _2664 = (((((_2724 * _2383) + _736) * cbLight._m0[_2675].z) * _2743) * _2744) + _2554;
    }
    float _2810;
    float _2812;
    float _2814;
    float _2816;
    float _2818;
    float _2820;
    if (_2080.y == 0u)
    {
        uvec4 _2765 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2766 = _2765.x;
        uint _2777 = uint((float(_2765.y) * floor(float(uint(cbSceneParam._m0[85u].y * _671) / _2766))) + floor(float(uint(cbSceneParam._m0[85u].x * _670) / _2766)));
        float _2787 = (log2(_1858 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2788 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        uint _2791 = uint(isnan(14.0) ? _2788 : (isnan(_2788) ? 14.0 : min(_2788, 14.0)));
        uvec4 _2796 = texelFetch(g_lightClusterGridBuffer, int(((_2791 << 2u) + (_2777 << 6u)) >> 2u));
        uint _2797 = _2796.x;
        uint _2798 = _2765.z;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2798 >> 4u) & 15u)) + 4294967295u) & _2797) == 0u) || ((_2798 & 240u) == 0u))
        {
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _3083 = 0.0;
            float _3084 = 0.0;
            float _3085 = 0.0;
            float _3086 = 0.0;
            float _3087 = 0.0;
            float _3088 = 0.0;
            uint _3089 = 0u;
            uint _3098;
            bool _3099;
            for (;;)
            {
                _3098 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3089 << 2u)) >> 2u)).x;
                _3099 = _3098 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3099)
                {
                    frontier_phi_71_pred = _3088;
                    frontier_phi_71_pred_1 = _3087;
                    frontier_phi_71_pred_2 = _3086;
                    frontier_phi_71_pred_3 = _3085;
                    frontier_phi_71_pred_4 = _3084;
                    frontier_phi_71_pred_5 = _3083;
                }
                else
                {
                    float _3228;
                    float _3229;
                    float _3230;
                    float _3231;
                    float _3232;
                    float _3233;
                    uint _3234;
                    _3228 = _3083;
                    _3229 = _3084;
                    _3230 = _3085;
                    _3231 = _3086;
                    _3232 = _3087;
                    _3233 = _3088;
                    _3234 = _3098;
                    float _3155;
                    float _3156;
                    float _3157;
                    float _3158;
                    float _3159;
                    float _3160;
                    for (;;)
                    {
                        uint _3238 = uint(findLSB(_3234)) + (_3089 << 5u);
                        uint _3235 = (_3234 + 4294967295u) & _3234;
                        uint _3240 = _3238 * 48u;
                        vec4 _3254 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3240)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3240 + 3u)).x));
                        uint _3260 = (_3238 * 48u) + 4u;
                        vec4 _3273 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3260)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3260 + 3u)).x));
                        uint _3279 = (_3238 * 48u) + 8u;
                        vec3 _3290 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3279)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3279 + 2u)).x));
                        float _3294 = _3254.x - _1856;
                        float _3295 = _3254.y - _1857;
                        float _3296 = _3254.z - _1858;
                        float _3297 = dot(vec3(_3294, _3295, _3296), vec3(_3294, _3295, _3296));
                        float _3300 = inversesqrt(_3297);
                        float _3301 = _3300 * _3294;
                        float _3302 = _3300 * _3295;
                        float _3303 = _3300 * _3296;
                        float _3304 = dot(vec3(_689, _692, _695), vec3(_3301, _3302, _3303));
                        float _3309 = 1.0 - (_3297 * _3254.w);
                        float _4729 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                        float _3310 = isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0));
                        float _3311 = sqrt(_3297) * _3273.w;
                        float _3314 = 1.39999997615814208984375 / (_3311 + 1.39999997615814208984375);
                        float _3315 = _3314 * _3314;
                        float _3318 = ((1.0 - _3315) * _3304) + _3315;
                        float _3321 = _3311 * _3311;
                        float _3325 = ((isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0))) * _3310) / ((_3321 * 0.699999988079071044921875) + 1.0);
                        float _3329 = (-0.0) - _1856;
                        float _3330 = (-0.0) - _1857;
                        float _3331 = (-0.0) - _1858;
                        float _3335 = inversesqrt(dot(vec3(_3329, _3330, _3331), vec3(_3329, _3330, _3331)));
                        float _3336 = _3335 * _3329;
                        float _3337 = _3335 * _3330;
                        float _3338 = _3335 * _3331;
                        float _3345 = exp2(log2(1.0 / ((_3321 * 3.5) + 5.0)) * 0.25);
                        float _3346 = 1.0 - _764;
                        float _3353 = sqrt(1.0 - ((1.0 - (_3346 * _3346)) * (1.0 - (_3345 * _3345))));
                        float _3354 = _3353 * _3353;
                        float _3355 = _3354 * _3354;
                        float _3356 = _3336 + _3301;
                        float _3357 = _3337 + _3302;
                        float _3358 = _3338 + _3303;
                        float _3362 = inversesqrt(dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358)));
                        float _3366 = dot(vec3(_689, _692, _695), vec3(_3336, _3337, _3338));
                        float _4745 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                        float _3369 = isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0));
                        float _3370 = dot(vec3(_689, _692, _695), vec3(_3362 * _3356, _3362 * _3357, _3362 * _3358));
                        float _4756 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                        float _3373 = isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0));
                        float _3377 = ((_3373 * _3373) * (_3355 + (-1.0))) + 1.0;
                        float _3378 = _3314 * _3354;
                        float _3379 = _3378 * _3378;
                        float _3382 = ((1.0 - _3379) * _3304) + _3379;
                        float _4767 = isnan(0.0) ? _3382 : (isnan(_3382) ? 0.0 : max(_3382, 0.0));
                        float _3383 = isnan(1.0) ? _4767 : (isnan(_4767) ? 1.0 : min(_4767, 1.0));
                        float _3384 = 1.0 - _3354;
                        float _3394 = (0.5 / (((_3383 * ((_3369 * _3384) + _3354)) + 9.9999999392252902907785028219223e-09) + (((_3383 * _3384) + _3354) * _3369))) * _3383;
                        float _4778 = isnan(0.0) ? _3394 : (isnan(_3394) ? 0.0 : max(_3394, 0.0));
                        float _3405 = (((_3355 * 3.1415927410125732421875) * (isnan(1.0) ? _4778 : (isnan(_4778) ? 1.0 : min(_4778, 1.0)))) / ((_3377 * _3377) * ((_3321 * 2.1991131305694580078125) + 3.141590118408203125))) * _3310;
                        _3158 = (_3325 * _3273.x) + _3231;
                        _3159 = (_3325 * _3273.y) + _3232;
                        _3160 = (_3325 * _3273.z) + _3233;
                        _3155 = (_3405 * _3290.x) + _3228;
                        _3156 = (_3405 * _3290.y) + _3229;
                        _3157 = (_3405 * _3290.z) + _3230;
                        if (_3235 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3228 = _3155;
                            _3229 = _3156;
                            _3230 = _3157;
                            _3231 = _3158;
                            _3232 = _3159;
                            _3233 = _3160;
                            _3234 = _3235;
                        }
                    }
                    frontier_phi_71_pred = _3160;
                    frontier_phi_71_pred_1 = _3159;
                    frontier_phi_71_pred_2 = _3158;
                    frontier_phi_71_pred_3 = _3157;
                    frontier_phi_71_pred_4 = _3156;
                    frontier_phi_71_pred_5 = _3155;
                }
                _2933 = frontier_phi_71_pred;
                _2931 = frontier_phi_71_pred_1;
                _2929 = frontier_phi_71_pred_2;
                _2927 = frontier_phi_71_pred_3;
                _2925 = frontier_phi_71_pred_4;
                _2923 = frontier_phi_71_pred_5;
                uint _3090 = _3089 + 1u;
                if (_3090 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3083 = _2923;
                    _3084 = _2925;
                    _3085 = _2927;
                    _3086 = _2929;
                    _3087 = _2931;
                    _3088 = _2933;
                    _3089 = _3090;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3051;
        float _3053;
        float _3055;
        float _3057;
        float _3059;
        float _3061;
        if (((4294967295u << _2939) & _2797) == 0u)
        {
            _3051 = _2922;
            _3053 = _2924;
            _3055 = _2926;
            _3057 = _2928;
            _3059 = _2930;
            _3061 = _2932;
        }
        else
        {
            float _3076 = inversesqrt(dot(vec3(_1856, _1857, _1858), vec3(_1856, _1857, _1858)));
            float _3077 = _3076 * _1856;
            float _3078 = _3076 * _1857;
            float _3079 = _3076 * _1858;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3052;
                float _3054;
                float _3056;
                float _3058;
                float _3060;
                float _3062;
                float _3211 = _2922;
                float _3212 = _2924;
                float _3213 = _2926;
                float _3214 = _2928;
                float _3215 = _2930;
                float _3216 = _2932;
                uint _3217 = _2939;
                uint _3226;
                bool _3227;
                for (;;)
                {
                    _3226 = texelFetch(g_lightClassification, int((((_2791 << 5u) + (_2777 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                    _3227 = _3226 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3227)
                    {
                        frontier_phi_82_pred = _3216;
                        frontier_phi_82_pred_1 = _3215;
                        frontier_phi_82_pred_2 = _3214;
                        frontier_phi_82_pred_3 = _3213;
                        frontier_phi_82_pred_4 = _3212;
                        frontier_phi_82_pred_5 = _3211;
                    }
                    else
                    {
                        float _3419;
                        float _3420;
                        float _3421;
                        float _3422;
                        float _3423;
                        float _3424;
                        float _3714;
                        float _3715;
                        float _3716;
                        float _3717;
                        float _3718;
                        float _3719;
                        float _3432 = _3211;
                        float _3433 = _3212;
                        float _3434 = _3213;
                        float _3435 = _3214;
                        float _3436 = _3215;
                        float _3437 = _3216;
                        uint _3438 = _3226;
                        uint _3439;
                        vec4 _3464;
                        float _3465;
                        vec4 _3480;
                        vec3 _3492;
                        vec4 _3507;
                        vec4 _3523;
                        float _3570;
                        bool _3571;
                        for (;;)
                        {
                            uint _3449 = ((_3217 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3438));
                            _3439 = (_3438 + 4294967295u) & _3438;
                            uint _3451 = _3449 * 40u;
                            _3464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3451 + 3u)).x));
                            _3465 = _3464.w;
                            uint _3467 = (_3449 * 40u) + 4u;
                            _3480 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3467)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3467 + 3u)).x));
                            uint _3482 = (_3449 * 40u) + 8u;
                            _3492 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3482)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3482 + 2u)).x));
                            uint _3494 = (_3449 * 40u) + 16u;
                            _3507 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3494)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3494 + 3u)).x));
                            uint _3510 = (_3449 * 40u) + 20u;
                            _3523 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3510)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3510 + 3u)).x));
                            uint _3526 = (_3449 * 40u) + 24u;
                            vec4 _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3545 = (_3449 * 40u) + 28u;
                            vec4 _3558 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3545)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3545 + 3u)).x));
                            _3570 = fma(_1858, _3558.z, fma(_1857, _3558.y, _3558.x * _1856)) + _3558.w;
                            _3571 = !((fma(_1858, _3539.z, fma(_1857, _3539.y, _3539.x * _1856)) + _3539.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3571)
                            {
                                float _3598 = _3464.x - _1856;
                                float _3599 = _3464.y - _1857;
                                float _3600 = _3464.z - _1858;
                                float _3601 = dot(vec3(_3598, _3599, _3600), vec3(_3598, _3599, _3600));
                                float _3604 = inversesqrt(_3601);
                                float _3605 = _3604 * _3598;
                                float _3606 = _3604 * _3599;
                                float _3607 = _3604 * _3600;
                                float _3611 = 1.0 - (_3601 / (_3465 * _3465));
                                float _4789 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3612 = isnan(1.0) ? _4789 : (isnan(_4789) ? 1.0 : min(_4789, 1.0));
                                float _3616 = sqrt(_3601) * _3480.w;
                                float _3618 = 1.39999997615814208984375 / (_3616 + 1.39999997615814208984375);
                                float _3619 = _3618 * _3618;
                                float _3622 = ((1.0 - _3619) * dot(vec3(_3605, _3606, _3607), vec3(_689, _692, _695))) + _3619;
                                float _3625 = _3616 * _3616;
                                float _3629 = (fma(_1858, _3507.z, fma(_1857, _3507.y, _3507.x * _1856)) + _3507.w) / _3570;
                                float _3630 = (fma(_1858, _3523.z, fma(_1857, _3523.y, _3523.x * _1856)) + _3523.w) / _3570;
                                float _3634 = 1.0 - dot(vec2(_3629, _3630), vec2(_3629, _3630));
                                float _4805 = isnan(0.0) ? _3634 : (isnan(_3634) ? 0.0 : max(_3634, 0.0));
                                float _3635 = isnan(1.0) ? _4805 : (isnan(_4805) ? 1.0 : min(_4805, 1.0));
                                float _3636 = _3635 * (((isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0))) * _3612) / ((_3625 * 0.699999988079071044921875) + 1.0));
                                float _3648 = exp2(log2(1.0 / ((_3625 * 3.5) + 5.0)) * 0.25);
                                float _3649 = 1.0 - _764;
                                float _3656 = sqrt(1.0 - ((1.0 - (_3649 * _3649)) * (1.0 - (_3648 * _3648))));
                                float _3657 = _3656 * _3656;
                                float _3658 = _3657 * _3657;
                                float _3659 = _3605 - _3077;
                                float _3660 = _3606 - _3078;
                                float _3661 = _3607 - _3079;
                                float _3665 = inversesqrt(dot(vec3(_3659, _3660, _3661), vec3(_3659, _3660, _3661)));
                                float _3669 = dot(vec3(_689, _692, _695), vec3((-0.0) - _3077, (-0.0) - _3078, (-0.0) - _3079));
                                float _4816 = isnan(0.0) ? _3669 : (isnan(_3669) ? 0.0 : max(_3669, 0.0));
                                float _3672 = isnan(1.0) ? _4816 : (isnan(_4816) ? 1.0 : min(_4816, 1.0));
                                float _3673 = dot(vec3(_689, _692, _695), vec3(_3665 * _3659, _3665 * _3660, _3665 * _3661));
                                float _4827 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4827 : (isnan(_4827) ? 1.0 : min(_4827, 1.0));
                                float _3680 = ((_3676 * _3676) * (_3658 + (-1.0))) + 1.0;
                                float _3681 = _3618 * _3657;
                                float _3682 = _3681 * _3681;
                                float _3688 = ((1.0 - _3682) * dot(vec3(_689, _692, _695), vec3(_3605, _3606, _3607))) + _3682;
                                float _4838 = isnan(0.0) ? _3688 : (isnan(_3688) ? 0.0 : max(_3688, 0.0));
                                float _3689 = isnan(1.0) ? _4838 : (isnan(_4838) ? 1.0 : min(_4838, 1.0));
                                float _3690 = 1.0 - _3657;
                                float _3700 = (0.5 / (((_3689 * ((_3672 * _3690) + _3657)) + 9.9999999392252902907785028219223e-09) + (((_3689 * _3690) + _3657) * _3672))) * _3689;
                                float _4849 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3710 = (_3635 * _3612) * (((_3658 * 3.1415927410125732421875) * (isnan(1.0) ? _4849 : (isnan(_4849) ? 1.0 : min(_4849, 1.0)))) / ((_3680 * _3680) * ((_3625 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3636 * _3480.z;
                                frontier_phi_88_pred_1 = _3636 * _3480.y;
                                frontier_phi_88_pred_2 = _3636 * _3480.x;
                                frontier_phi_88_pred_3 = _3710 * _3492.z;
                                frontier_phi_88_pred_4 = _3710 * _3492.y;
                                frontier_phi_88_pred_5 = _3710 * _3492.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3719 = frontier_phi_88_pred;
                            _3718 = frontier_phi_88_pred_1;
                            _3717 = frontier_phi_88_pred_2;
                            _3716 = frontier_phi_88_pred_3;
                            _3715 = frontier_phi_88_pred_4;
                            _3714 = frontier_phi_88_pred_5;
                            _3422 = _3717 + _3435;
                            _3423 = _3718 + _3436;
                            _3424 = _3719 + _3437;
                            _3419 = _3714 + _3432;
                            _3420 = _3715 + _3433;
                            _3421 = _3716 + _3434;
                            if (_3439 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3432 = _3419;
                                _3433 = _3420;
                                _3434 = _3421;
                                _3435 = _3422;
                                _3436 = _3423;
                                _3437 = _3424;
                                _3438 = _3439;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3424;
                        frontier_phi_82_pred_1 = _3423;
                        frontier_phi_82_pred_2 = _3422;
                        frontier_phi_82_pred_3 = _3421;
                        frontier_phi_82_pred_4 = _3420;
                        frontier_phi_82_pred_5 = _3419;
                    }
                    _3062 = frontier_phi_82_pred;
                    _3060 = frontier_phi_82_pred_1;
                    _3058 = frontier_phi_82_pred_2;
                    _3056 = frontier_phi_82_pred_3;
                    _3054 = frontier_phi_82_pred_4;
                    _3052 = frontier_phi_82_pred_5;
                    uint _3218 = _3217 + 1u;
                    if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3211 = _3052;
                        _3212 = _3054;
                        _3213 = _3056;
                        _3214 = _3058;
                        _3215 = _3060;
                        _3216 = _3062;
                        _3217 = _3218;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3058;
                frontier_phi_63_64_ladder_1 = _3062;
                frontier_phi_63_64_ladder_2 = _3060;
                frontier_phi_63_64_ladder_3 = _3056;
                frontier_phi_63_64_ladder_4 = _3054;
                frontier_phi_63_64_ladder_5 = _3052;
            }
            else
            {
                frontier_phi_63_64_ladder = _2928;
                frontier_phi_63_64_ladder_1 = _2932;
                frontier_phi_63_64_ladder_2 = _2930;
                frontier_phi_63_64_ladder_3 = _2926;
                frontier_phi_63_64_ladder_4 = _2924;
                frontier_phi_63_64_ladder_5 = _2922;
            }
            _3051 = frontier_phi_63_64_ladder_5;
            _3053 = frontier_phi_63_64_ladder_4;
            _3055 = frontier_phi_63_64_ladder_3;
            _3057 = frontier_phi_63_64_ladder;
            _3059 = frontier_phi_63_64_ladder_2;
            _3061 = frontier_phi_63_64_ladder_1;
        }
        float _3066 = isnan(1.0) ? _748 : (isnan(_748) ? 1.0 : min(_748, 1.0));
        _2810 = (_3066 * _3057) + _2322;
        _2812 = (_3066 * _3059) + _2324;
        _2814 = (_3066 * _3061) + _2326;
        _2816 = ((_3051 * _733) * _3066) + _2660;
        _2818 = ((_3053 * _735) * _3066) + _2662;
        _2820 = ((_3055 * _736) * _3066) + _2664;
    }
    else
    {
        _2810 = _2322;
        _2812 = _2324;
        _2814 = _2326;
        _2816 = _2660;
        _2818 = _2662;
        _2820 = _2664;
    }
    uint _2826 = _709 + uint(cbMatDynParam._m0[0u].w);
    float _2832 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2838 = (((((_2832 * cbMtdParam._m0[10u].x) * _430.x) * _453) * (((1.0 - _507) * cbMtdParam._m0[16u].z) + _507)) * _544) * cbInstanceData._m0[_2826].x;
    float _2844 = (((((_2832 * cbMtdParam._m0[10u].y) * _430.y) * _453) * (((1.0 - _509) * cbMtdParam._m0[16u].z) + _509)) * _544) * cbInstanceData._m0[_2826].y;
    float _2850 = (((((_2832 * cbMtdParam._m0[10u].z) * _430.z) * _453) * (((1.0 - _511) * cbMtdParam._m0[16u].z) + _511)) * _544) * cbInstanceData._m0[_2826].z;
    float _4865 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _4876 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _4887 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _2867 = (((isnan(1.0) ? _4865 : (isnan(_4865) ? 1.0 : min(_4865, 1.0))) * (_2810 + ((isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))) * _748))) + ((_2816 + ((isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0))) * _1588)) * cbPerFrame._m0[3u].x)) + _2838;
    float _2869 = (_2844 + ((_2818 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1588)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4876 : (isnan(_4876) ? 1.0 : min(_4876, 1.0))) * (_2812 + ((isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))) * _748)));
    float _2871 = (_2850 + ((_2820 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1588)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4887 : (isnan(_4887) ? 1.0 : min(_4887, 1.0))) * (_2814 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _748)));
    float _2872 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0));
    float _2873 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
    float _2874 = isnan(0.0) ? _2871 : (isnan(_2871) ? 0.0 : max(_2871, 0.0));
    float _2880 = cbMtdParam._m0[2u].x * _2838;
    float _2881 = cbMtdParam._m0[2u].y * _2844;
    float _2882 = cbMtdParam._m0[2u].z * _2850;
    float _4913 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2884 = isnan(1.0) ? _4913 : (isnan(_4913) ? 1.0 : min(_4913, 1.0));
    uint _2885 = _708 + 6u;
    float _2893 = _670 / cbSceneParam._m0[86u].x;
    float _2894 = _671 / cbSceneParam._m0[86u].y;
    vec4 _2908 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, (log2((isnan(cbSceneParam._m0[77u].w) ? _593 : (isnan(_593) ? cbSceneParam._m0[77u].w : min(_593, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2910 = _2908.x;
    float _2911 = _2908.y;
    float _2912 = _2908.z;
    float _2913 = _2908.w;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_593 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_593) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _593 : min(cbSceneParam._m0[80u].w, _593));
        float _2948 = _2947 / _593;
        float _2959 = _2948 * _643;
        float _2960 = _644 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2962 = _2948 * _645;
        float _2964 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2965 = _2964 + cbSceneParam._m0[79u].w;
        float _2966 = cbSceneParam._m0[79u].w - _2960;
        float _2972 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2962 * _2962));
        float _2975 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2972;
        float _2980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2982 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3168;
        if (abs((_2961 - _2964) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3168 = ((((_2965 > 0.0) ? exp2(_2980 * _2965) : (2.0 - exp2(_2982 * _2965))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2975;
        }
        else
        {
            float _3112 = 1.0 / cbSceneParam._m0[80u].x;
            float _3113 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : max(_2965, _2966));
            float _3114 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : min(_2965, _2966));
            float _3123 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : min(_3113, 0.0));
            float _3124 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : min(_3114, 0.0));
            _3168 = ((abs(_2972 / _2961) * cbSceneParam._m0[80u].y) * ((((_3123 - _3124) * 2.0) - ((exp2(_2980 * (isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0)))) - exp2(_2980 * (isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0))))) * _3112)) - ((exp2(_2982 * _3123) - exp2(_2982 * _3124)) * _3112))) + (_2975 * cbSceneParam._m0[80u].z);
        }
        vec4 _3170 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, 1.0), 0.0);
        float _3179 = exp2((_3168 * (-1.44269502162933349609375)) * (1.0 - _3170.w));
        float _3180 = log2(_3179);
        float _3196 = log2(_2913);
        _2984 = (exp2(_3196 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].x)) * _3170.x) / cbSceneParam._m0[78u].x)) + _2910;
        _2986 = (exp2(_3196 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].y)) * _3170.y) / cbSceneParam._m0[78u].y)) + _2911;
        _2988 = (exp2(_3196 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3180 * cbSceneParam._m0[78u].z)) * _3170.z) / cbSceneParam._m0[78u].z)) + _2912;
        _2990 = _3179 * _2913;
    }
    else
    {
        _2984 = _2910;
        _2986 = _2911;
        _2988 = _2912;
        _2990 = _2913;
    }
    bool _3206;
    vec4 _3000;
    vec4 _3022;
    float _3024;
    float _3028;
    float _3029;
    float _3030;
    float _3033;
    float _3036;
    float _3039;
    float _3040;
    bool _3050;
    for (;;)
    {
        _3000 = cbMatDynParam._m0[0u];
        float _3002 = roundEven(_3000.y);
        bool _3003 = _3002 == 3.0;
        float _3004 = log2(_2990);
        float _3008 = exp2(_3004 * cbSceneParam._m0[78u].x);
        float _3009 = exp2(_3004 * cbSceneParam._m0[78u].y);
        float _3010 = exp2(_3004 * cbSceneParam._m0[78u].z);
        float _3011 = _3008 * _2872;
        float _3012 = _3009 * _2873;
        float _3013 = _3010 * _2874;
        float _3020 = _659 + (-0.5);
        _3022 = cbMtdParam._m0[1u];
        _3024 = _3022.y * _3020;
        float _3027 = (_3002 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3028 = _3027 * (_3003 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2984)));
        _3029 = _3027 * (_3003 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2986)));
        _3030 = _3027 * (_3003 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2988)));
        _3033 = ((_2880 * _2884) * _3008) * _3027;
        _3036 = ((_2881 * _2884) * _3009) * _3027;
        _3039 = ((_2882 * _2884) * _3010) * _3027;
        _3040 = _3020 * 0.999000012874603271484375;
        _3050 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3050)
        {
            if ((cbInstanceData._m0[_708 + 7u].x + _3040) < 0.5)
            {
                _3206 = true;
                break;
            }
        }
        uint _3147 = _709 + uint(_3000.w);
        if ((cbInstanceData._m0[_3147].w < 1.0) && ((cbInstanceData._m0[_3147].w + _3040) < 0.5))
        {
            _3206 = true;
            break;
        }
        if ((_3024 + 1.0) < _3022.x)
        {
            _3206 = true;
            break;
        }
        _3206 = false;
        break;
    }
    float _3410;
    if (_3206)
    {
        discard_state = true;
        _3410 = 0.0;
    }
    else
    {
        _3410 = cbInstanceData._m0[_2885].w;
    }
    SV_Target.x = _3028;
    SV_Target.y = _3029;
    SV_Target.z = _3030;
    SV_Target.w = _3410;
    SV_Target_1.x = _3033;
    SV_Target_1.y = _3036;
    SV_Target_1.z = _3039;
    SV_Target_1.w = cbInstanceData._m0[_2885].w;
    discard_exit();
}


