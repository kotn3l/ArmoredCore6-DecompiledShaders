#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1069;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _208 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _215 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _222 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _244 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _250 = _244.x * cbMtdParam._m0[9u].x;
    float _251 = _244.y * cbMtdParam._m0[9u].y;
    float _252 = _244.z * cbMtdParam._m0[9u].z;
    vec4 _276 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _307 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3714 = isnan(0.0) ? _307 : (isnan(_307) ? 0.0 : max(_307, 0.0));
    float _308 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _315 = (_308 * ((_276.x * cbMtdParam._m0[12u].x) - _250)) + _250;
    float _316 = (_308 * ((_276.y * cbMtdParam._m0[12u].y) - _251)) + _251;
    float _317 = (_308 * ((_276.z * cbMtdParam._m0[12u].z) - _252)) + _252;
    vec4 _329 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _352 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _356 = _352.z;
    float _359 = (_352.x * 2.0) + (-1.0);
    float _360 = (_352.y * 2.0) + (-1.0);
    float _361 = dot(vec2(_359, _360), vec2(_359, _360));
    float _3725 = isnan(0.0) ? _361 : (isnan(_361) ? 0.0 : max(_361, 0.0));
    float _366 = sqrt(1.0 - (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))));
    float _374 = (((_329.z - _356) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _356;
    float _394 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _395 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _408 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_394 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_395 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _422 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3736 = isnan(0.0) ? _422 : (isnan(_422) ? 0.0 : max(_422, 0.0));
    float _423 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _431 = (((_423 * _423) * (3.0 - (_423 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _440 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _448 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3747 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _453 = (_449 * _449) * (3.0 - (_449 * 2.0));
    float _454 = _453 * cbMtdParam._m0[17u].x;
    float _455 = _453 * cbMtdParam._m0[17u].y;
    float _456 = sin(_440);
    float _457 = cos(_440);
    float _458 = TEXCOORD - _454;
    float _459 = TEXCOORD_1 - _455;
    vec4 _479 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_454 + fma(_459, (-0.0) - _456, _458 * _457))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_459, _457, _458 * _456) + _455)) + cbTextureTilingScale._m0[0u].w));
    float _485 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _479.x;
    float _487 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _479.y;
    float _489 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _479.z;
    vec4 _512 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _394) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _395) + cbTextureTilingScale._m0[5u].w));
    float _521 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_512.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3758 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _522 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _532 = (((((_329.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _359) + (cbMtdParam._m0[16u].y * _359);
    float _534 = (((((_329.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _360) + (cbMtdParam._m0[16u].y * _360);
    float _537 = fma(_366, _215 * NORMAL.x, fma(_534, _222 * TANGENT.x, (_208 * _200) * _532));
    float _540 = fma(_366, _215 * NORMAL.y, fma(_534, _222 * TANGENT.y, (_208 * _201) * _532));
    float _543 = fma(_366, _215 * NORMAL.z, fma(_534, _222 * TANGENT.z, (_208 * _202) * _532));
    float _547 = inversesqrt(dot(vec3(_537, _540, _543), vec3(_537, _540, _543)));
    float _548 = _547 * _537;
    float _549 = _547 * _540;
    float _550 = _547 * _543;
    float _3769 = isnan(0.0) ? _374 : (isnan(_374) ? 0.0 : max(_374, 0.0));
    float _551 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _3780 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3791 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3802 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _570 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _610 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _620 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _610);
    float _621 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _610);
    float _622 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _610);
    float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
    float _627 = _620 * _626;
    float _628 = _621 * _626;
    float _629 = _622 * _626;
    float _635 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _636 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _654 = fma(_550, cbSceneParam._m0[5u].z, fma(_549, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _548));
    float _657 = fma(_550, cbSceneParam._m0[6u].z, fma(_549, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _548));
    float _660 = fma(_550, cbSceneParam._m0[7u].z, fma(_549, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _548));
    uint _673 = uint(roundEven(NORMAL.w)) * 13u;
    uint _674 = _673 + 9u;
    uint _675 = _674 + uint(cbMatDynParam._m0[0u].w);
    float _681 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0)))) * cbInstanceData._m0[_675].x;
    float _682 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * cbInstanceData._m0[_675].y;
    float _683 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0)))) * cbInstanceData._m0[_675].z;
    float _3813 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _684 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _3824 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _685 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _3835 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _686 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
    vec4 _695 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _635, cbSceneParam._m0[86u].y * _636));
    float _698 = _695.x * TEXCOORD_3.w;
    float _699 = dot(vec3(_548, _549, _550), vec3(_627, _628, _629));
    float _702 = _699 * 2.0;
    float _706 = (_702 * _548) - _627;
    float _707 = (_702 * _549) - _628;
    float _708 = (_702 * _550) - _629;
    float _712 = abs(dot(vec3(_627, _628, _629), vec3(_548, _549, _550)));
    float _3846 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _714 = sqrt(_551);
    float _726 = exp2((_714 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_714 * 3.0));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _766 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1068;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    float _1080;
    float _1081;
    float _1082;
    float _1083;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _793 = fma(_766, cbModelParam._m0[26u].z, fma(_762, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758));
        float _797 = fma(_766, cbModelParam._m0[27u].z, fma(_762, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758));
        float _801 = fma(_766, cbModelParam._m0[28u].z, fma(_762, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758));
        float _826 = _758 + _548;
        float _827 = _762 + _549;
        float _828 = _766 + _550;
        float _838 = fma(_828, cbModelParam._m0[26u].z, fma(_827, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _826)) - _793;
        float _839 = fma(_828, cbModelParam._m0[27u].z, fma(_827, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _826)) - _797;
        float _840 = fma(_828, cbModelParam._m0[28u].z, fma(_827, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _826)) - _801;
        float _844 = inversesqrt(dot(vec3(_838, _839, _840), vec3(_838, _839, _840)));
        float _857 = ((_844 * _838) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_793 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _858 = ((_844 * _839) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_797 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _859 = ((_844 * _840) / cbModelParam._m0[34u].z) + ((((((_801 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _862 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _869 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _876 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_857, _858, _859), 0.0);
        float _896 = exp2((_862.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_862.x + (-0.5));
        float _898 = _896 * (_862.y + (-0.5));
        float _899 = _896 * (_862.z + (-0.5));
        float _906 = exp2((_869.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_869.x + (-0.5));
        float _908 = _906 * (_869.y + (-0.5));
        float _909 = _906 * (_869.z + (-0.5));
        float _916 = exp2((_876.w + (-0.5)) * 20.0) * 2.0;
        float _917 = _916 * (_876.x + (-0.5));
        float _918 = _916 * (_876.y + (-0.5));
        float _919 = _916 * (_876.z + (-0.5));
        float _926 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_883.x + (-0.5));
        float _928 = _926 * (_883.y + (-0.5));
        float _929 = _926 * (_883.z + (-0.5));
        float _930 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _931 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _932 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _933 = _897 * 0.5;
        float _934 = _907 * 0.5;
        float _935 = _917 * 0.5;
        float _936 = dot(vec3(_933, _934, _935), vec3(_933, _934, _935));
        float _941 = (_936 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_936);
        float _950 = (dot(vec3(_548, _549, _550), vec3(_941 * _933, _941 * _934, _941 * _935)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _960 = sqrt(((_934 * _934) + (_933 * _933)) + (_935 * _935)) / (_930 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _961 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _962 = _961 * 2.0;
        float _966 = (1.0 - _961) / (_961 + 1.0);
        float _3894 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _976 = ((((1.0 - _967) * (_962 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_962 + 1.0))) + _967) * _930;
        float _977 = _898 * 0.5;
        float _978 = _908 * 0.5;
        float _979 = _918 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _993 = (dot(vec3(_548, _549, _550), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _3905 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1002 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_931 + 9.9999997473787516355514526367188e-06);
        float _3916 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1004 = _1003 * 2.0;
        float _1008 = (1.0 - _1003) / (_1003 + 1.0);
        float _3927 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1018 = ((((1.0 - _1009) * (_1004 + 2.0)) * exp2(log2(isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0))) * (_1004 + 1.0))) + _1009) * _931;
        float _1019 = _899 * 0.5;
        float _1020 = _909 * 0.5;
        float _1021 = _919 * 0.5;
        float _1022 = dot(vec3(_1019, _1020, _1021), vec3(_1019, _1020, _1021));
        float _1027 = (_1022 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1022);
        float _1035 = (dot(vec3(_548, _549, _550), vec3(_1027 * _1019, _1027 * _1020, _1027 * _1021)) + 1.0) * 0.5;
        float _3938 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1044 = sqrt(((_1020 * _1020) + (_1019 * _1019)) + (_1021 * _1021)) / (_932 + 9.9999997473787516355514526367188e-06);
        float _3949 = isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0));
        float _1045 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
        float _1046 = _1045 * 2.0;
        float _1050 = (1.0 - _1045) / (_1045 + 1.0);
        float _3960 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1060 = ((((1.0 - _1051) * (_1046 + 2.0)) * exp2(log2(isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * (_1046 + 1.0))) + _1051) * _932;
        _1068 = _899;
        _1070 = _898;
        _1071 = _897;
        _1072 = _909;
        _1073 = _908;
        _1074 = _907;
        _1075 = _919;
        _1076 = _918;
        _1077 = _917;
        _1078 = _932;
        _1079 = _931;
        _1080 = _930;
        _1081 = cbModelParam._m0[36u].z * (isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0)));
        _1082 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0)));
        _1083 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0)));
    }
    else
    {
        _1068 = _1069;
        _1070 = _1069;
        _1071 = _1069;
        _1072 = _1069;
        _1073 = _1069;
        _1074 = _1069;
        _1075 = _1069;
        _1076 = _1069;
        _1077 = _1069;
        _1078 = _1069;
        _1079 = _1069;
        _1080 = _1069;
        _1081 = 0.0;
        _1082 = 0.0;
        _1083 = 0.0;
    }
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    float _1390;
    float _1391;
    float _1392;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1109 = fma(_766, cbModelParam._m0[30u].z, fma(_762, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _758));
        float _1113 = fma(_766, cbModelParam._m0[31u].z, fma(_762, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _758));
        float _1117 = fma(_766, cbModelParam._m0[32u].z, fma(_762, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _758));
        float _1140 = _758 + _548;
        float _1141 = _762 + _549;
        float _1142 = _766 + _550;
        float _1152 = fma(_1142, cbModelParam._m0[30u].z, fma(_1141, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1140)) - _1109;
        float _1153 = fma(_1142, cbModelParam._m0[31u].z, fma(_1141, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1140)) - _1113;
        float _1154 = fma(_1142, cbModelParam._m0[32u].z, fma(_1141, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1140)) - _1117;
        float _1158 = inversesqrt(dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154)));
        float _1171 = ((_1158 * _1152) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1109 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1172 = ((_1158 * _1153) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1113 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1173 = ((_1158 * _1154) / cbModelParam._m0[35u].z) + ((((((_1117 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        vec4 _1196 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1171, _1172, _1173), 0.0);
        float _1208 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1175.x + (-0.5));
        float _1210 = _1208 * (_1175.y + (-0.5));
        float _1211 = _1208 * (_1175.z + (-0.5));
        float _1218 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1182.x + (-0.5));
        float _1220 = _1218 * (_1182.y + (-0.5));
        float _1221 = _1218 * (_1182.z + (-0.5));
        float _1228 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1189.x + (-0.5));
        float _1230 = _1228 * (_1189.y + (-0.5));
        float _1231 = _1228 * (_1189.z + (-0.5));
        float _1238 = exp2((_1196.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1196.x + (-0.5));
        float _1240 = _1238 * (_1196.y + (-0.5));
        float _1241 = _1238 * (_1196.z + (-0.5));
        float _1242 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1243 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1244 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1245 = _1209 * 0.5;
        float _1246 = _1219 * 0.5;
        float _1247 = _1229 * 0.5;
        float _1248 = dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247));
        float _1253 = (_1248 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1248);
        float _1261 = (dot(vec3(_548, _549, _550), vec3(_1253 * _1245, _1253 * _1246, _1253 * _1247)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1270 = sqrt(((_1246 * _1246) + (_1245 * _1245)) + (_1247 * _1247)) / (_1242 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1272 = _1271 * 2.0;
        float _1276 = (1.0 - _1271) / (_1271 + 1.0);
        float _4023 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1277 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1286 = ((((1.0 - _1277) * (_1272 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1272 + 1.0))) + _1277) * _1242;
        float _1287 = _1210 * 0.5;
        float _1288 = _1220 * 0.5;
        float _1289 = _1230 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_548, _549, _550), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _4034 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1243 + 9.9999997473787516355514526367188e-06);
        float _4045 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _4056 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_1314 + 1.0))) + _1319) * _1243;
        float _1329 = _1211 * 0.5;
        float _1330 = _1221 * 0.5;
        float _1331 = _1231 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_548, _549, _550), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _4067 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1244 + 9.9999997473787516355514526367188e-06);
        float _4078 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _4089 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_1356 + 1.0))) + _1361) * _1244;
        _1378 = _1211;
        _1379 = _1210;
        _1380 = _1209;
        _1381 = _1221;
        _1382 = _1220;
        _1383 = _1219;
        _1384 = _1231;
        _1385 = _1230;
        _1386 = _1229;
        _1387 = _1244;
        _1388 = _1243;
        _1389 = _1242;
        _1390 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0)));
        _1391 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1392 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
    }
    else
    {
        _1378 = _1069;
        _1379 = _1069;
        _1380 = _1069;
        _1381 = _1069;
        _1382 = _1069;
        _1383 = _1069;
        _1384 = _1069;
        _1385 = _1069;
        _1386 = _1069;
        _1387 = _1069;
        _1388 = _1069;
        _1389 = _1069;
        _1390 = 0.0;
        _1391 = 0.0;
        _1392 = 0.0;
    }
    float _1402 = (cbModelParam._m0[1u].x * (_1390 - _1081)) + _1081;
    float _1403 = (cbModelParam._m0[1u].x * (_1391 - _1082)) + _1082;
    float _1404 = (cbModelParam._m0[1u].x * (_1392 - _1083)) + _1083;
    float _1425 = fma(_1404, cbSceneParam._m0[89u].z, fma(_1403, cbSceneParam._m0[89u].y, _1402 * cbSceneParam._m0[89u].x));
    float _1428 = fma(_1404, cbSceneParam._m0[90u].z, fma(_1403, cbSceneParam._m0[90u].y, _1402 * cbSceneParam._m0[90u].x));
    float _1431 = fma(_1404, cbSceneParam._m0[91u].z, fma(_1403, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1402));
    float _1446 = _706 * 0.5;
    float _1447 = _707 * 0.5;
    float _1448 = _708 * 0.5;
    float _1449 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1380, _1383, _1386, _1389));
    float _1452 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1379, _1382, _1385, _1388));
    float _1455 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1378, _1381, _1384, _1387));
    float _1489;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1462 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1068, _1072, _1075, _1078));
        float _1466 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1070, _1073, _1076, _1079));
        float _1470 = dot(vec4(_1446, _1447, _1448, 1.0), vec4(_1071, _1074, _1077, _1080));
        float _1477 = dot(vec4(cbModelParam._m0[39u]), vec4(_1446, _1447, _1448, 1.0));
        _1489 = dot(vec3(isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)), isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1477) ? 0.0 : (isnan(0.0) ? _1477 : max(0.0, _1477))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1489 = 1.0;
    }
    float _1500;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1491 = dot(vec4(cbModelParam._m0[40u]), vec4(_1446, _1447, _1448, 1.0));
        _1500 = dot(vec3(isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0)), isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1491) ? 0.0 : (isnan(0.0) ? _1491 : max(0.0, _1491))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1500 = 1.0;
    }
    float _1504 = (_1500 * cbModelParam._m0[1u].x) + (_1489 * (1.0 - cbModelParam._m0[1u].x));
    float _1514 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _551);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1514 : min(cbModelParam._m0[25u].z, _1514));
    float _1595;
    float _1597;
    float _1599;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1562 = fma(_766, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _758)) + cbModelParam._m0[13u].w;
        float _1566 = fma(_766, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _758)) + cbModelParam._m0[14u].w;
        float _1570 = fma(_766, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _758)) + cbModelParam._m0[15u].w;
        float _1573 = fma(_708, cbModelParam._m0[13u].z, fma(_707, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706));
        float _1576 = fma(_708, cbModelParam._m0[14u].z, fma(_707, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706));
        float _1579 = fma(_708, cbModelParam._m0[15u].z, fma(_707, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706));
        float _1607;
        if (_1573 > 0.0)
        {
            _1607 = abs((1.0 - _1562) / _1573);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1562 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1607 = frontier_phi_14_12_ladder;
        }
        float _1778;
        if (_1576 > 0.0)
        {
            _1778 = abs((1.0 - _1566) / _1576);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1576 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1566 + 1.0) / _1576);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1778 = frontier_phi_23_19_ladder;
        }
        float _2073;
        if (_1579 > 0.0)
        {
            _2073 = abs((1.0 - _1570) / _1579);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1579 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1570 + 1.0) / _1579);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2073 = frontier_phi_35_30_ladder;
        }
        float _2075 = isnan(_1778) ? _1607 : (isnan(_1607) ? _1778 : min(_1607, _1778));
        float _2076 = isnan(_2073) ? _2075 : (isnan(_2075) ? _2073 : min(_2075, _2073));
        float _2080 = (_2076 * _1573) + _1562;
        float _2081 = (_2076 * _1576) + _1566;
        float _2082 = (_2076 * _1579) + _1570;
        float _2083 = _2076 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2083;
        float _2087 = _2083 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 > _2087) || ((_2081 < _2085) || ((_2080 < _2085) || (_2080 > _2087))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2227 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2082, cbModelParam._m0[9u].z, fma(_2081, cbModelParam._m0[9u].y, _2080 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2082, cbModelParam._m0[10u].z, fma(_2081, cbModelParam._m0[10u].y, _2080 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2082, cbModelParam._m0[11u].z, fma(_2081, cbModelParam._m0[11u].y, _2080 * cbModelParam._m0[11u].x))), _1515);
            frontier_phi_13_35_ladder = _2227.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2227.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2227.x * cbModelParam._m0[1u].y;
        }
        _1595 = frontier_phi_13_35_ladder_2;
        _1597 = frontier_phi_13_35_ladder_1;
        _1599 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1583 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_706, _707, _708), _1515);
        _1595 = _1583.x * cbModelParam._m0[1u].y;
        _1597 = _1583.y * cbModelParam._m0[1u].y;
        _1599 = _1583.z * cbModelParam._m0[1u].y;
    }
    float _1603 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _551);
    float _1604 = isnan(_1603) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1603 : min(cbModelParam._m0[25u].w, _1603));
    float _1695;
    float _1697;
    float _1699;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1659 = fma(_766, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _758)) + cbModelParam._m0[21u].w;
        float _1663 = fma(_766, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _758)) + cbModelParam._m0[22u].w;
        float _1667 = fma(_766, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _758)) + cbModelParam._m0[23u].w;
        float _1670 = fma(_708, cbModelParam._m0[21u].z, fma(_707, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706));
        float _1673 = fma(_708, cbModelParam._m0[22u].z, fma(_707, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706));
        float _1676 = fma(_708, cbModelParam._m0[23u].z, fma(_707, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706));
        float _1783;
        if (_1670 > 0.0)
        {
            _1783 = abs((1.0 - _1659) / _1670);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1659 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1783 = frontier_phi_25_21_ladder;
        }
        float _2100;
        if (_1673 > 0.0)
        {
            _2100 = abs((1.0 - _1663) / _1673);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1673 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1663 + 1.0) / _1673);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2100 = frontier_phi_37_32_ladder;
        }
        float _2427;
        if (_1676 > 0.0)
        {
            _2427 = abs((1.0 - _1667) / _1676);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1676 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1667 + 1.0) / _1676);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2427 = frontier_phi_47_44_ladder;
        }
        float _2429 = isnan(_2100) ? _1783 : (isnan(_1783) ? _2100 : min(_1783, _2100));
        float _2430 = isnan(_2427) ? _2429 : (isnan(_2429) ? _2427 : min(_2429, _2427));
        float _2434 = (_2430 * _1670) + _1659;
        float _2435 = (_2430 * _1673) + _1663;
        float _2436 = (_2430 * _1676) + _1667;
        float _2437 = _2430 * 9.9999997473787516355514526367188e-05;
        float _2438 = (-1.0) - _2437;
        float _2440 = _2437 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2436 > _2440) || ((_2436 < _2438) || ((_2435 > _2440) || ((_2435 < _2438) || ((_2434 < _2438) || (_2434 > _2440))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2554 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2436, cbModelParam._m0[17u].z, fma(_2435, cbModelParam._m0[17u].y, _2434 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2436, cbModelParam._m0[18u].z, fma(_2435, cbModelParam._m0[18u].y, _2434 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2436, cbModelParam._m0[19u].z, fma(_2435, cbModelParam._m0[19u].y, _2434 * cbModelParam._m0[19u].x))), _1604);
            frontier_phi_22_47_ladder = _2554.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2554.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2554.x * cbModelParam._m0[1u].z;
        }
        _1695 = frontier_phi_22_47_ladder_2;
        _1697 = frontier_phi_22_47_ladder_1;
        _1699 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1679 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_706, _707, _708), _1604);
        _1695 = _1679.x * cbModelParam._m0[1u].z;
        _1697 = _1679.y * cbModelParam._m0[1u].z;
        _1699 = _1679.z * cbModelParam._m0[1u].z;
    }
    float _1711 = ((((1.0 - _726) * ((_714 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_726 * _714)) * _698;
    float _1712 = _1711 * ((cbModelParam._m0[1u].w * (_1695 - _1595)) + _1595);
    float _1713 = _1711 * ((cbModelParam._m0[1u].w * (_1697 - _1597)) + _1597);
    float _1714 = _1711 * ((cbModelParam._m0[1u].w * (_1699 - _1599)) + _1599);
    float _1717 = fma(_1714, cbSceneParam._m0[89u].z, fma(_1713, cbSceneParam._m0[89u].y, _1712 * cbSceneParam._m0[89u].x));
    float _1720 = fma(_1714, cbSceneParam._m0[90u].z, fma(_1713, cbSceneParam._m0[90u].y, _1712 * cbSceneParam._m0[90u].x));
    float _1723 = fma(_1714, cbSceneParam._m0[91u].z, fma(_1713, cbSceneParam._m0[91u].y, _1712 * cbSceneParam._m0[91u].x));
    float _1757 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1761 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1765 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1769 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1770 = _1757 / _1769;
    float _1771 = _1761 / _1769;
    float _1772 = _1765 / _1769;
    float _1919;
    float _1920;
    float _1921;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1799 = ((uint(_1772 > cbSceneParam._m0[59u].y) + uint(_1772 > cbSceneParam._m0[59u].x)) + uint(_1772 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1800 = _1799 + 43u;
        uint _1808 = _1799 + 44u;
        uint _1816 = _1799 + 45u;
        uint _1824 = _1799 + 46u;
        float _1835 = fma(_1769, cbSceneParam._m0[_1800].w, fma(_1765, cbSceneParam._m0[_1800].z, fma(_1761, cbSceneParam._m0[_1800].y, _1757 * cbSceneParam._m0[_1800].x)));
        float _1839 = fma(_1769, cbSceneParam._m0[_1808].w, fma(_1765, cbSceneParam._m0[_1808].z, fma(_1761, cbSceneParam._m0[_1808].y, _1757 * cbSceneParam._m0[_1808].x)));
        float _1847 = fma(_1769, cbSceneParam._m0[_1824].w, fma(_1765, cbSceneParam._m0[_1824].z, fma(_1761, cbSceneParam._m0[_1824].y, _1757 * cbSceneParam._m0[_1824].x)));
        float _1852 = cbSceneParam._m0[33u].z * _1847;
        float _1854 = cbSceneParam._m0[33u].w * _1847;
        float _1857 = fma(_1769, cbSceneParam._m0[_1816].w, fma(_1765, cbSceneParam._m0[_1816].z, fma(_1761, cbSceneParam._m0[_1816].y, _1757 * cbSceneParam._m0[_1816].x))) / _1847;
        float _1905 = (cbSceneParam._m0[33u].x - sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772))) * cbSceneParam._m0[33u].y;
        float _4215 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
        float _1912 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1852 + _1835) / _1847, (_1854 + _1839) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1854 + _1835) / _1847, (_1839 - _1852) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 - _1852) / _1847, (_1839 - _1854) / _1847), _1857), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 - _1854) / _1847, (_1852 + _1839) / _1847), _1857), 0.0)).x), vec4(0.25)));
        _1919 = 1.0 - (_1912 * cbSceneParam._m0[34u].x);
        _1920 = 1.0 - (_1912 * cbSceneParam._m0[34u].y);
        _1921 = 1.0 - (_1912 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1919 = 1.0;
        _1920 = 1.0;
        _1921 = 1.0;
    }
    float _1985;
    float _1987;
    float _1989;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1973 = fma(_1769, cbSceneParam._m0[63u].w, fma(_1765, cbSceneParam._m0[63u].z, fma(_1761, cbSceneParam._m0[63u].y, _1757 * cbSceneParam._m0[63u].x)));
        float _1974 = fma(_1769, cbSceneParam._m0[60u].w, fma(_1765, cbSceneParam._m0[60u].z, fma(_1761, cbSceneParam._m0[60u].y, _1757 * cbSceneParam._m0[60u].x))) / _1973;
        float _1975 = fma(_1769, cbSceneParam._m0[61u].w, fma(_1765, cbSceneParam._m0[61u].z, fma(_1761, cbSceneParam._m0[61u].y, _1757 * cbSceneParam._m0[61u].x))) / _1973;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1974 >= cbSceneParam._m0[64u].x) && (_1975 >= cbSceneParam._m0[64u].y)) && (_1974 <= cbSceneParam._m0[64u].z)) && (_1975 <= cbSceneParam._m0[64u].w))
        {
            float _2113 = fma(_1769, cbSceneParam._m0[62u].w, fma(_1765, cbSceneParam._m0[62u].z, fma(_1761, cbSceneParam._m0[62u].y, _1757 * cbSceneParam._m0[62u].x))) / _1973;
            float _2117 = isnan(cbSceneParam._m0[41u].w) ? _2113 : (isnan(_2113) ? cbSceneParam._m0[41u].w : max(_2113, cbSceneParam._m0[41u].w));
            float _2160 = (cbSceneParam._m0[33u].x - sqrt(((_1771 * _1771) + (_1770 * _1770)) + (_1772 * _1772))) * cbSceneParam._m0[33u].y;
            float _4231 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
            float _2167 = (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1974, cbSceneParam._m0[33u].w + _1975), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1974, _1975 - cbSceneParam._m0[33u].z), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1974 - cbSceneParam._m0[33u].z, _1975 - cbSceneParam._m0[33u].w), _2117), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1974 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1975), _2117), 0.0)).x), vec4(0.25)));
            float _2171 = 1.0 - (_2167 * cbSceneParam._m0[34u].x);
            float _2172 = 1.0 - (_2167 * cbSceneParam._m0[34u].y);
            float _2173 = 1.0 - (_2167 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2173) ? _1921 : (isnan(_1921) ? _2173 : min(_1921, _2173));
            frontier_phi_34_33_ladder_1 = isnan(_2172) ? _1920 : (isnan(_1920) ? _2172 : min(_1920, _2172));
            frontier_phi_34_33_ladder_2 = isnan(_2171) ? _1919 : (isnan(_1919) ? _2171 : min(_1919, _2171));
        }
        else
        {
            frontier_phi_34_33_ladder = _1921;
            frontier_phi_34_33_ladder_1 = _1920;
            frontier_phi_34_33_ladder_2 = _1919;
        }
        _1985 = frontier_phi_34_33_ladder_2;
        _1987 = frontier_phi_34_33_ladder_1;
        _1989 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1985 = _1919;
        _1987 = _1920;
        _1989 = _1921;
    }
    uvec4 _1994 = floatBitsToUint(cbInstanceData._m0[_673 + 5u]);
    uint _1996 = _1994.x * 14u;
    uint _1997 = _1996 + 13u;
    float _2004 = _698 + (-1.0);
    float _2009 = (cbLight._m0[_1997].x * _2004) + 1.0;
    float _2010 = (cbLight._m0[_1997].y * _2004) + 1.0;
    float _2011 = (cbLight._m0[_1997].z * _2004) + 1.0;
    float _2012 = (cbLight._m0[_1997].w * _2004) + 1.0;
    uint _2013 = _1996 + 5u;
    float _2019 = isnan(1.0) ? _2010 : (isnan(_2010) ? 1.0 : min(_2010, 1.0));
    uint _2023 = _1996 + 4u;
    float _2032 = isnan(1.0) ? _2009 : (isnan(_2009) ? 1.0 : min(_2009, 1.0));
    uint _2036 = _1996 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_548, _549, _550));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_548, _549, _550));
    float _4267 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4278 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2013].x * _2019) * _2057) + (((cbLight._m0[_2023].x * _1985) * _2032) * _2055);
    float _2065 = ((_2019 * cbLight._m0[_2013].y) * _2057) + (((cbLight._m0[_2023].y * _1987) * _2032) * _2055);
    float _2066 = ((_2019 * cbLight._m0[_2013].z) * _2057) + (((cbLight._m0[_2023].z * _1989) * _2032) * _2055);
    uvec4 _2070 = floatBitsToUint(cbLight._m0[_1996 + 12u]);
    bool _2072 = _2070.x == 0u;
    float _2174;
    float _2176;
    float _2178;
    if (_2072)
    {
        _2174 = _2064;
        _2176 = _2065;
        _2178 = _2066;
    }
    else
    {
        uint _2182 = _1996 + 6u;
        float _2198 = (dot(vec3(cbLight._m0[_1996 + 2u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _2199 = _2198 * _2198;
        float _4289 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
        float _2200 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _2201 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2174 = (((cbLight._m0[_2182].x * 0.3183098733425140380859375) * _2200) * _2201) + _2064;
        _2176 = (((cbLight._m0[_2182].y * 0.3183098733425140380859375) * _2200) * _2201) + _2065;
        _2178 = (((cbLight._m0[_2182].z * 0.3183098733425140380859375) * _2200) * _2201) + _2066;
    }
    bool _2181 = _2070.y == 0u;
    float _2236;
    float _2238;
    float _2240;
    if (_2181)
    {
        _2236 = _2174;
        _2238 = _2176;
        _2240 = _2178;
    }
    else
    {
        uint _2398 = _1996 + 7u;
        float _2414 = (dot(vec3(cbLight._m0[_1996 + 3u].xyz), vec3(_548, _549, _550)) * 0.5) + 0.5;
        float _2415 = _2414 * _2414;
        float _4305 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0));
        float _2416 = isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0));
        float _2417 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2236 = (((cbLight._m0[_2398].x * 0.3183098733425140380859375) * _2416) * _2417) + _2174;
        _2238 = (((cbLight._m0[_2398].y * 0.3183098733425140380859375) * _2416) * _2417) + _2176;
        _2240 = (((cbLight._m0[_2398].z * 0.3183098733425140380859375) * _2416) * _2417) + _2178;
    }
    uint _2243 = _1996 + 8u;
    float _2256 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1996].w)) * _551) * 0.949999988079071044921875);
    float _2257 = _2256 * _2256;
    float _2258 = cbLight._m0[_1996].x + _627;
    float _2259 = cbLight._m0[_1996].y + _628;
    float _2260 = cbLight._m0[_1996].z + _629;
    float _2264 = inversesqrt(dot(vec3(_2258, _2259, _2260), vec3(_2258, _2259, _2260)));
    float _2265 = _2264 * _2258;
    float _2266 = _2264 * _2259;
    float _2267 = _2264 * _2260;
    float _2268 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_1996].xyz));
    float _4321 = isnan(0.0) ? _2268 : (isnan(_2268) ? 0.0 : max(_2268, 0.0));
    float _2271 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
    float _4332 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _2272 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
    float _2273 = dot(vec3(_548, _549, _550), vec3(_2265, _2266, _2267));
    float _4343 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2276 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
    float _2277 = dot(vec3(cbLight._m0[_1996].xyz), vec3(_2265, _2266, _2267));
    float _4354 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _2281 = _2257 * _2257;
    float _2285 = ((_2276 * _2276) * (_2281 + (-1.0))) + 1.0;
    float _2296 = (exp2(log2(1.0 - (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2297 = 1.0 - _2257;
    float _2308 = (0.5 / (((_2272 * ((_2271 * _2297) + _2257)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2297) + _2257) * _2271))) * _2271;
    float _4365 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
    float _2310 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * (_2281 / ((_2285 * _2285) * 3.141590118408203125));
    uint _2324 = _1996 + 9u;
    float _2335 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _551) * 0.949999988079071044921875);
    float _2336 = _2335 * _2335;
    float _2337 = cbLight._m0[_2036].x + _627;
    float _2338 = cbLight._m0[_2036].y + _628;
    float _2339 = cbLight._m0[_2036].z + _629;
    float _2343 = inversesqrt(dot(vec3(_2337, _2338, _2339), vec3(_2337, _2338, _2339)));
    float _2344 = _2343 * _2337;
    float _2345 = _2343 * _2338;
    float _2346 = _2343 * _2339;
    float _2347 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2036].xyz));
    float _4376 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2350 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _2351 = dot(vec3(_548, _549, _550), vec3(_2344, _2345, _2346));
    float _4387 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _2354 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2355 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2344, _2345, _2346));
    float _4398 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2359 = _2336 * _2336;
    float _2363 = ((_2354 * _2354) * (_2359 + (-1.0))) + 1.0;
    float _2372 = (exp2(log2(1.0 - (isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2373 = 1.0 - _2336;
    float _2383 = (0.5 / (((_2272 * ((_2350 * _2373) + _2336)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2373) + _2336) * _2350))) * _2350;
    float _4409 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
    float _2385 = (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0))) * (_2359 / ((_2363 * _2363) * 3.141590118408203125));
    float _2395 = (((_2372 * cbLight._m0[_2324].x) * _2385) * _2019) + ((((cbLight._m0[_2243].x * _1985) * _2296) * _2310) * _2032);
    float _2396 = (((_2372 * cbLight._m0[_2324].y) * _2385) * _2019) + ((((cbLight._m0[_2243].y * _1987) * _2296) * _2310) * _2032);
    float _2397 = (((_2372 * cbLight._m0[_2324].z) * _2385) * _2019) + ((((cbLight._m0[_2243].z * _1989) * _2296) * _2310) * _2032);
    float _2453;
    float _2455;
    float _2457;
    if (_2072)
    {
        _2453 = _2395;
        _2455 = _2396;
        _2457 = _2397;
    }
    else
    {
        uint _2459 = _1996 + 2u;
        uint _2463 = _1996 + 10u;
        float _2477 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2459].w)) * _551) * 0.949999988079071044921875);
        float _2478 = _2477 * _2477;
        float _2479 = cbLight._m0[_2459].x + _627;
        float _2480 = cbLight._m0[_2459].y + _628;
        float _2481 = cbLight._m0[_2459].z + _629;
        float _2485 = inversesqrt(dot(vec3(_2479, _2480, _2481), vec3(_2479, _2480, _2481)));
        float _2486 = _2485 * _2479;
        float _2487 = _2485 * _2480;
        float _2488 = _2485 * _2481;
        float _2489 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2459].xyz));
        float _4420 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2493 = dot(vec3(_548, _549, _550), vec3(_2486, _2487, _2488));
        float _4431 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2496 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2497 = dot(vec3(cbLight._m0[_2459].xyz), vec3(_2486, _2487, _2488));
        float _4442 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2501 = _2478 * _2478;
        float _2505 = ((_2496 * _2496) * (_2501 + (-1.0))) + 1.0;
        float _2514 = (exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2515 = 1.0 - _2478;
        float _2525 = (0.5 / (((_2272 * ((_2492 * _2515) + _2478)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2515) + _2478) * _2492))) * _2492;
        float _4453 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2501 / ((_2505 * _2505) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
        _2453 = (((_2514 * cbLight._m0[_2463].x) * _2527) * _2528) + _2395;
        _2455 = (((_2514 * cbLight._m0[_2463].y) * _2527) * _2528) + _2396;
        _2457 = (((_2514 * cbLight._m0[_2463].z) * _2527) * _2528) + _2397;
    }
    float _2559;
    float _2561;
    float _2563;
    if (_2181)
    {
        _2559 = _2453;
        _2561 = _2455;
        _2563 = _2457;
    }
    else
    {
        uint _2570 = _1996 + 3u;
        uint _2574 = _1996 + 11u;
        float _2588 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2570].w)) * _551) * 0.949999988079071044921875);
        float _2589 = _2588 * _2588;
        float _2590 = cbLight._m0[_2570].x + _627;
        float _2591 = cbLight._m0[_2570].y + _628;
        float _2592 = cbLight._m0[_2570].z + _629;
        float _2596 = inversesqrt(dot(vec3(_2590, _2591, _2592), vec3(_2590, _2591, _2592)));
        float _2597 = _2596 * _2590;
        float _2598 = _2596 * _2591;
        float _2599 = _2596 * _2592;
        float _2600 = dot(vec3(_548, _549, _550), vec3(cbLight._m0[_2570].xyz));
        float _4469 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
        float _2603 = isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0));
        float _2604 = dot(vec3(_548, _549, _550), vec3(_2597, _2598, _2599));
        float _4480 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
        float _2607 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
        float _2608 = dot(vec3(cbLight._m0[_2570].xyz), vec3(_2597, _2598, _2599));
        float _4491 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2612 = _2589 * _2589;
        float _2616 = ((_2607 * _2607) * (_2612 + (-1.0))) + 1.0;
        float _2625 = (exp2(log2(1.0 - (isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2626 = 1.0 - _2589;
        float _2636 = (0.5 / (((_2272 * ((_2603 * _2626) + _2589)) + 9.9999999392252902907785028219223e-09) + (((_2272 * _2626) + _2589) * _2603))) * _2603;
        float _4502 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
        float _2638 = (isnan(1.0) ? _4502 : (isnan(_4502) ? 1.0 : min(_4502, 1.0))) * (_2612 / ((_2616 * _2616) * 3.141590118408203125));
        float _2639 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
        _2559 = (((_2625 * cbLight._m0[_2574].x) * _2638) * _2639) + _2453;
        _2561 = (((_2625 * cbLight._m0[_2574].y) * _2638) * _2639) + _2455;
        _2563 = (((_2625 * cbLight._m0[_2574].z) * _2638) * _2639) + _2457;
    }
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    if (_1994.y == 0u)
    {
        uvec4 _2660 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2661 = _2660.x;
        uint _2672 = uint((float(_2660.y) * floor(float(uint(cbSceneParam._m0[85u].y * _636) / _2661))) + floor(float(uint(cbSceneParam._m0[85u].x * _635) / _2661)));
        float _2682 = (log2(_1772 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2683 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        uint _2686 = uint(isnan(14.0) ? _2683 : (isnan(_2683) ? 14.0 : min(_2683, 14.0)));
        uvec4 _2691 = texelFetch(g_lightClusterGridBuffer, int(((_2686 << 2u) + (_2672 << 6u)) >> 2u));
        uint _2692 = _2691.x;
        uint _2693 = _2660.z;
        float _2817;
        float _2819;
        float _2821;
        float _2823;
        float _2825;
        float _2827;
        if (((((1u << ((_2693 >> 4u) & 15u)) + 4294967295u) & _2692) == 0u) || ((_2693 & 240u) == 0u))
        {
            _2817 = 0.0;
            _2819 = 0.0;
            _2821 = 0.0;
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
        }
        else
        {
            float _2818;
            float _2820;
            float _2822;
            float _2824;
            float _2826;
            float _2828;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            uint _2976 = 0u;
            uint _2985;
            bool _2986;
            for (;;)
            {
                _2985 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_2976 << 2u)) >> 2u)).x;
                _2986 = _2985 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2986)
                {
                    frontier_phi_66_pred = _2975;
                    frontier_phi_66_pred_1 = _2974;
                    frontier_phi_66_pred_2 = _2973;
                    frontier_phi_66_pred_3 = _2972;
                    frontier_phi_66_pred_4 = _2971;
                    frontier_phi_66_pred_5 = _2970;
                }
                else
                {
                    float _3094;
                    float _3095;
                    float _3096;
                    float _3097;
                    float _3098;
                    float _3099;
                    uint _3100;
                    _3094 = _2970;
                    _3095 = _2971;
                    _3096 = _2972;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2985;
                    float _3026;
                    float _3027;
                    float _3028;
                    float _3029;
                    float _3030;
                    float _3031;
                    for (;;)
                    {
                        uint _3104 = uint(findLSB(_3100)) + (_2976 << 5u);
                        uint _3101 = (_3100 + 4294967295u) & _3100;
                        uint _3106 = _3104 * 48u;
                        vec4 _3120 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3126 = (_3104 * 48u) + 4u;
                        vec4 _3139 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3145 = (_3104 * 48u) + 8u;
                        vec3 _3156 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3145)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3145 + 2u)).x));
                        float _3160 = _3120.x - _1770;
                        float _3161 = _3120.y - _1771;
                        float _3162 = _3120.z - _1772;
                        float _3163 = dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162));
                        float _3166 = inversesqrt(_3163);
                        float _3167 = _3166 * _3160;
                        float _3168 = _3166 * _3161;
                        float _3169 = _3166 * _3162;
                        float _3170 = dot(vec3(_654, _657, _660), vec3(_3167, _3168, _3169));
                        float _3175 = 1.0 - (_3163 * _3120.w);
                        float _4528 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                        float _3176 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3177 = sqrt(_3163) * _3139.w;
                        float _3180 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                        float _3181 = _3180 * _3180;
                        float _3184 = ((1.0 - _3181) * _3170) + _3181;
                        float _3187 = _3177 * _3177;
                        float _3191 = ((isnan(0.0) ? _3184 : (isnan(_3184) ? 0.0 : max(_3184, 0.0))) * _3176) / ((_3187 * 0.699999988079071044921875) + 1.0);
                        float _3195 = (-0.0) - _1770;
                        float _3196 = (-0.0) - _1771;
                        float _3197 = (-0.0) - _1772;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3202 = _3201 * _3195;
                        float _3203 = _3201 * _3196;
                        float _3204 = _3201 * _3197;
                        float _3211 = exp2(log2(1.0 / ((_3187 * 3.5) + 5.0)) * 0.25);
                        float _3212 = 1.0 - _714;
                        float _3219 = sqrt(1.0 - ((1.0 - (_3212 * _3212)) * (1.0 - (_3211 * _3211))));
                        float _3220 = _3219 * _3219;
                        float _3221 = _3220 * _3220;
                        float _3222 = _3202 + _3167;
                        float _3223 = _3203 + _3168;
                        float _3224 = _3204 + _3169;
                        float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                        float _3232 = dot(vec3(_654, _657, _660), vec3(_3202, _3203, _3204));
                        float _4544 = isnan(0.0) ? _3232 : (isnan(_3232) ? 0.0 : max(_3232, 0.0));
                        float _3235 = isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0));
                        float _3236 = dot(vec3(_654, _657, _660), vec3(_3228 * _3222, _3228 * _3223, _3228 * _3224));
                        float _4555 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                        float _3243 = ((_3239 * _3239) * (_3221 + (-1.0))) + 1.0;
                        float _3244 = _3180 * _3220;
                        float _3245 = _3244 * _3244;
                        float _3248 = ((1.0 - _3245) * _3170) + _3245;
                        float _4566 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                        float _3249 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                        float _3250 = 1.0 - _3220;
                        float _3260 = (0.5 / (((_3249 * ((_3235 * _3250) + _3220)) + 9.9999999392252902907785028219223e-09) + (((_3249 * _3250) + _3220) * _3235))) * _3249;
                        float _4577 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3271 = (((_3221 * 3.1415927410125732421875) * (isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0)))) / ((_3243 * _3243) * ((_3187 * 2.1991131305694580078125) + 3.141590118408203125))) * _3176;
                        _3029 = (_3191 * _3139.x) + _3097;
                        _3030 = (_3191 * _3139.y) + _3098;
                        _3031 = (_3191 * _3139.z) + _3099;
                        _3026 = (_3271 * _3156.x) + _3094;
                        _3027 = (_3271 * _3156.y) + _3095;
                        _3028 = (_3271 * _3156.z) + _3096;
                        if (_3101 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3094 = _3026;
                            _3095 = _3027;
                            _3096 = _3028;
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3101;
                        }
                    }
                    frontier_phi_66_pred = _3031;
                    frontier_phi_66_pred_1 = _3030;
                    frontier_phi_66_pred_2 = _3029;
                    frontier_phi_66_pred_3 = _3028;
                    frontier_phi_66_pred_4 = _3027;
                    frontier_phi_66_pred_5 = _3026;
                }
                _2828 = frontier_phi_66_pred;
                _2826 = frontier_phi_66_pred_1;
                _2824 = frontier_phi_66_pred_2;
                _2822 = frontier_phi_66_pred_3;
                _2820 = frontier_phi_66_pred_4;
                _2818 = frontier_phi_66_pred_5;
                uint _2977 = _2976 + 1u;
                if (_2977 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2970 = _2818;
                    _2971 = _2820;
                    _2972 = _2822;
                    _2973 = _2824;
                    _2974 = _2826;
                    _2975 = _2828;
                    _2976 = _2977;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2817 = _2818;
            _2819 = _2820;
            _2821 = _2822;
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
        }
        uvec4 _2831 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2832 = _2831.z;
        uint _2834 = (_2832 >> 8u) & 15u;
        float _2938;
        float _2940;
        float _2942;
        float _2944;
        float _2946;
        float _2948;
        if (((4294967295u << _2834) & _2692) == 0u)
        {
            _2938 = _2817;
            _2940 = _2819;
            _2942 = _2821;
            _2944 = _2823;
            _2946 = _2825;
            _2948 = _2827;
        }
        else
        {
            float _2963 = inversesqrt(dot(vec3(_1770, _1771, _1772), vec3(_1770, _1771, _1772)));
            float _2964 = _2963 * _1770;
            float _2965 = _2963 * _1771;
            float _2966 = _2963 * _1772;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2834 < ((_2832 >> 12u) & 15u))
            {
                float _2939;
                float _2941;
                float _2943;
                float _2945;
                float _2947;
                float _2949;
                float _3077 = _2817;
                float _3078 = _2819;
                float _3079 = _2821;
                float _3080 = _2823;
                float _3081 = _2825;
                float _3082 = _2827;
                uint _3083 = _2834;
                uint _3092;
                bool _3093;
                for (;;)
                {
                    _3092 = texelFetch(g_lightClassification, int((((_2686 << 5u) + (_2672 << 9u)) + (_3083 << 2u)) >> 2u)).x;
                    _3093 = _3092 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3093)
                    {
                        frontier_phi_72_pred = _3082;
                        frontier_phi_72_pred_1 = _3081;
                        frontier_phi_72_pred_2 = _3080;
                        frontier_phi_72_pred_3 = _3079;
                        frontier_phi_72_pred_4 = _3078;
                        frontier_phi_72_pred_5 = _3077;
                    }
                    else
                    {
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _3281;
                        float _3571;
                        float _3572;
                        float _3573;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3289 = _3077;
                        float _3290 = _3078;
                        float _3291 = _3079;
                        float _3292 = _3080;
                        float _3293 = _3081;
                        float _3294 = _3082;
                        uint _3295 = _3092;
                        uint _3296;
                        vec4 _3321;
                        float _3322;
                        vec4 _3337;
                        vec3 _3349;
                        vec4 _3364;
                        vec4 _3380;
                        float _3427;
                        bool _3428;
                        for (;;)
                        {
                            uint _3306 = ((_3083 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3295));
                            _3296 = (_3295 + 4294967295u) & _3295;
                            uint _3308 = _3306 * 40u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            _3322 = _3321.w;
                            uint _3324 = (_3306 * 40u) + 4u;
                            _3337 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3324)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3324 + 3u)).x));
                            uint _3339 = (_3306 * 40u) + 8u;
                            _3349 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3339)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3339 + 2u)).x));
                            uint _3351 = (_3306 * 40u) + 16u;
                            _3364 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3351)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3351 + 3u)).x));
                            uint _3367 = (_3306 * 40u) + 20u;
                            _3380 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3367)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3367 + 3u)).x));
                            uint _3383 = (_3306 * 40u) + 24u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            uint _3402 = (_3306 * 40u) + 28u;
                            vec4 _3415 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 3u)).x));
                            _3427 = fma(_1772, _3415.z, fma(_1771, _3415.y, _3415.x * _1770)) + _3415.w;
                            _3428 = !((fma(_1772, _3396.z, fma(_1771, _3396.y, _3396.x * _1770)) + _3396.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3428)
                            {
                                float _3455 = _3321.x - _1770;
                                float _3456 = _3321.y - _1771;
                                float _3457 = _3321.z - _1772;
                                float _3458 = dot(vec3(_3455, _3456, _3457), vec3(_3455, _3456, _3457));
                                float _3461 = inversesqrt(_3458);
                                float _3462 = _3461 * _3455;
                                float _3463 = _3461 * _3456;
                                float _3464 = _3461 * _3457;
                                float _3468 = 1.0 - (_3458 / (_3322 * _3322));
                                float _4588 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3473 = sqrt(_3458) * _3337.w;
                                float _3475 = 1.39999997615814208984375 / (_3473 + 1.39999997615814208984375);
                                float _3476 = _3475 * _3475;
                                float _3479 = ((1.0 - _3476) * dot(vec3(_3462, _3463, _3464), vec3(_654, _657, _660))) + _3476;
                                float _3482 = _3473 * _3473;
                                float _3486 = (fma(_1772, _3364.z, fma(_1771, _3364.y, _3364.x * _1770)) + _3364.w) / _3427;
                                float _3487 = (fma(_1772, _3380.z, fma(_1771, _3380.y, _3380.x * _1770)) + _3380.w) / _3427;
                                float _3491 = 1.0 - dot(vec2(_3486, _3487), vec2(_3486, _3487));
                                float _4604 = isnan(0.0) ? _3491 : (isnan(_3491) ? 0.0 : max(_3491, 0.0));
                                float _3492 = isnan(1.0) ? _4604 : (isnan(_4604) ? 1.0 : min(_4604, 1.0));
                                float _3493 = _3492 * (((isnan(0.0) ? _3479 : (isnan(_3479) ? 0.0 : max(_3479, 0.0))) * _3469) / ((_3482 * 0.699999988079071044921875) + 1.0));
                                float _3505 = exp2(log2(1.0 / ((_3482 * 3.5) + 5.0)) * 0.25);
                                float _3506 = 1.0 - _714;
                                float _3513 = sqrt(1.0 - ((1.0 - (_3506 * _3506)) * (1.0 - (_3505 * _3505))));
                                float _3514 = _3513 * _3513;
                                float _3515 = _3514 * _3514;
                                float _3516 = _3462 - _2964;
                                float _3517 = _3463 - _2965;
                                float _3518 = _3464 - _2966;
                                float _3522 = inversesqrt(dot(vec3(_3516, _3517, _3518), vec3(_3516, _3517, _3518)));
                                float _3526 = dot(vec3(_654, _657, _660), vec3((-0.0) - _2964, (-0.0) - _2965, (-0.0) - _2966));
                                float _4615 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3529 = isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0));
                                float _3530 = dot(vec3(_654, _657, _660), vec3(_3522 * _3516, _3522 * _3517, _3522 * _3518));
                                float _4626 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3533 = isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0));
                                float _3537 = ((_3533 * _3533) * (_3515 + (-1.0))) + 1.0;
                                float _3538 = _3475 * _3514;
                                float _3539 = _3538 * _3538;
                                float _3545 = ((1.0 - _3539) * dot(vec3(_654, _657, _660), vec3(_3462, _3463, _3464))) + _3539;
                                float _4637 = isnan(0.0) ? _3545 : (isnan(_3545) ? 0.0 : max(_3545, 0.0));
                                float _3546 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                                float _3547 = 1.0 - _3514;
                                float _3557 = (0.5 / (((_3546 * ((_3529 * _3547) + _3514)) + 9.9999999392252902907785028219223e-09) + (((_3546 * _3547) + _3514) * _3529))) * _3546;
                                float _4648 = isnan(0.0) ? _3557 : (isnan(_3557) ? 0.0 : max(_3557, 0.0));
                                float _3567 = (_3492 * _3469) * (((_3515 * 3.1415927410125732421875) * (isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0)))) / ((_3537 * _3537) * ((_3482 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3493 * _3337.y;
                                frontier_phi_78_pred_1 = _3493 * _3337.x;
                                frontier_phi_78_pred_2 = _3567 * _3349.z;
                                frontier_phi_78_pred_3 = _3567 * _3349.y;
                                frontier_phi_78_pred_4 = _3567 * _3349.x;
                                frontier_phi_78_pred_5 = _3493 * _3337.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3575 = frontier_phi_78_pred;
                            _3574 = frontier_phi_78_pred_1;
                            _3573 = frontier_phi_78_pred_2;
                            _3572 = frontier_phi_78_pred_3;
                            _3571 = frontier_phi_78_pred_4;
                            _3576 = frontier_phi_78_pred_5;
                            _3279 = _3574 + _3292;
                            _3280 = _3575 + _3293;
                            _3281 = _3576 + _3294;
                            _3276 = _3571 + _3289;
                            _3277 = _3572 + _3290;
                            _3278 = _3573 + _3291;
                            if (_3296 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3289 = _3276;
                                _3290 = _3277;
                                _3291 = _3278;
                                _3292 = _3279;
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3296;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3281;
                        frontier_phi_72_pred_1 = _3280;
                        frontier_phi_72_pred_2 = _3279;
                        frontier_phi_72_pred_3 = _3278;
                        frontier_phi_72_pred_4 = _3277;
                        frontier_phi_72_pred_5 = _3276;
                    }
                    _2949 = frontier_phi_72_pred;
                    _2947 = frontier_phi_72_pred_1;
                    _2945 = frontier_phi_72_pred_2;
                    _2943 = frontier_phi_72_pred_3;
                    _2941 = frontier_phi_72_pred_4;
                    _2939 = frontier_phi_72_pred_5;
                    uint _3084 = _3083 + 1u;
                    if (_3084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3077 = _2939;
                        _3078 = _2941;
                        _3079 = _2943;
                        _3080 = _2945;
                        _3081 = _2947;
                        _3082 = _2949;
                        _3083 = _3084;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2949;
                frontier_phi_60_61_ladder_1 = _2947;
                frontier_phi_60_61_ladder_2 = _2943;
                frontier_phi_60_61_ladder_3 = _2941;
                frontier_phi_60_61_ladder_4 = _2939;
                frontier_phi_60_61_ladder_5 = _2945;
            }
            else
            {
                frontier_phi_60_61_ladder = _2827;
                frontier_phi_60_61_ladder_1 = _2825;
                frontier_phi_60_61_ladder_2 = _2821;
                frontier_phi_60_61_ladder_3 = _2819;
                frontier_phi_60_61_ladder_4 = _2817;
                frontier_phi_60_61_ladder_5 = _2823;
            }
            _2938 = frontier_phi_60_61_ladder_4;
            _2940 = frontier_phi_60_61_ladder_3;
            _2942 = frontier_phi_60_61_ladder_2;
            _2944 = frontier_phi_60_61_ladder_5;
            _2946 = frontier_phi_60_61_ladder_1;
            _2948 = frontier_phi_60_61_ladder;
        }
        float _2953 = isnan(1.0) ? _698 : (isnan(_698) ? 1.0 : min(_698, 1.0));
        _2705 = (_2953 * _2944) + _2236;
        _2707 = (_2953 * _2946) + _2238;
        _2709 = (_2953 * _2948) + _2240;
        _2711 = ((_2938 * 0.039999999105930328369140625) * _2953) + _2559;
        _2713 = ((_2940 * 0.039999999105930328369140625) * _2953) + _2561;
        _2715 = ((_2942 * 0.039999999105930328369140625) * _2953) + _2563;
    }
    else
    {
        _2705 = _2236;
        _2707 = _2238;
        _2709 = _2240;
        _2711 = _2559;
        _2713 = _2561;
        _2715 = _2563;
    }
    uint _2721 = _674 + uint(cbMatDynParam._m0[0u].w);
    float _2727 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2733 = (((((_2727 * cbMtdParam._m0[10u].x) * _408.x) * _431) * (((1.0 - _485) * cbMtdParam._m0[16u].z) + _485)) * _522) * cbInstanceData._m0[_2721].x;
    float _2739 = (((((_2727 * cbMtdParam._m0[10u].y) * _408.y) * _431) * (((1.0 - _487) * cbMtdParam._m0[16u].z) + _487)) * _522) * cbInstanceData._m0[_2721].y;
    float _2745 = (((((_2727 * cbMtdParam._m0[10u].z) * _408.z) * _431) * (((1.0 - _489) * cbMtdParam._m0[16u].z) + _489)) * _522) * cbInstanceData._m0[_2721].z;
    float _4664 = isnan(0.0) ? _684 : (isnan(_684) ? 0.0 : max(_684, 0.0));
    float _4675 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _4686 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
    float _2762 = (((isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0))) * (_2705 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _698))) + ((_2711 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + _2733;
    float _2764 = (_2739 + ((_2713 + ((isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2707 + ((isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0))) * _698)));
    float _2766 = (_2745 + ((_2715 + ((isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0))) * _1504)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2709 + ((isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))) * _698)));
    float _4712 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2779 = isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0));
    uint _2780 = _673 + 6u;
    float _2788 = _635 / cbSceneParam._m0[86u].x;
    float _2789 = _636 / cbSceneParam._m0[86u].y;
    vec4 _2803 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, (log2((isnan(cbSceneParam._m0[77u].w) ? _570 : (isnan(_570) ? cbSceneParam._m0[77u].w : min(_570, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2805 = _2803.x;
    float _2806 = _2803.y;
    float _2807 = _2803.z;
    float _2808 = _2803.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_570 > cbSceneParam._m0[78u].w)
    {
        float _2842 = isnan(_570) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _570 : min(cbSceneParam._m0[80u].w, _570));
        float _2843 = _2842 / _570;
        float _2854 = _2843 * _620;
        float _2855 = _621 * _2843;
        float _2856 = (-0.0) - _2855;
        float _2857 = _2843 * _622;
        float _2859 = (cbSceneParam._m0[77u].w * _2856) / _2842;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2855;
        float _2867 = sqrt(((_2854 * _2854) + (_2855 * _2855)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2842)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3039;
        if (abs((_2856 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3039 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2999 = 1.0 / cbSceneParam._m0[80u].x;
            float _3000 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _3001 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            float _3011 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : min(_3001, 0.0));
            _3039 = ((abs(_2867 / _2856) * cbSceneParam._m0[80u].y) * ((((_3010 - _3011) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))))) * _2999)) - ((exp2(_2877 * _3010) - exp2(_2877 * _3011)) * _2999))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3041 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2788, _2789, 1.0), 0.0);
        float _3050 = exp2((_3039 * (-1.44269502162933349609375)) * (1.0 - _3041.w));
        float _3051 = log2(_3050);
        float _3067 = log2(_2808);
        _2879 = (exp2(_3067 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].x)) * _3041.x) / cbSceneParam._m0[78u].x)) + _2805;
        _2881 = (exp2(_3067 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].y)) * _3041.y) / cbSceneParam._m0[78u].y)) + _2806;
        _2883 = (exp2(_3067 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3051 * cbSceneParam._m0[78u].z)) * _3041.z) / cbSceneParam._m0[78u].z)) + _2807;
        _2885 = _3050 * _2808;
    }
    else
    {
        _2879 = _2805;
        _2881 = _2806;
        _2883 = _2807;
        _2885 = _2808;
    }
    float _2897 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2898 = _2897 == 3.0;
    float _2899 = log2(_2885);
    float _2903 = exp2(_2899 * cbSceneParam._m0[78u].x);
    float _2904 = exp2(_2899 * cbSceneParam._m0[78u].y);
    float _2905 = exp2(_2899 * cbSceneParam._m0[78u].z);
    float _2906 = _2903 * (isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0)));
    float _2907 = _2904 * (isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0)));
    float _2908 = _2905 * (isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0)));
    float _2917 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2917 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
    SV_Target.y = _2917 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
    SV_Target.z = _2917 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
    SV_Target.w = cbInstanceData._m0[_2780].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2733) * _2779) * _2903) * _2917;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2739) * _2779) * _2904) * _2917;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2745) * _2779) * _2905) * _2917;
    SV_Target_1.w = cbInstanceData._m0[_2780].w;
}


