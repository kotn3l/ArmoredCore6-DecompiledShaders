#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1102;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _206 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _213 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _220 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _242 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _248 = _242.x * cbMtdParam._m0[9u].x;
    float _249 = _242.y * cbMtdParam._m0[9u].y;
    float _250 = _242.z * cbMtdParam._m0[9u].z;
    vec4 _274 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    vec4 _294 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _305 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (_294.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3485 = isnan(0.0) ? _305 : (isnan(_305) ? 0.0 : max(_305, 0.0));
    float _306 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _313 = (_306 * ((_274.x * cbMtdParam._m0[12u].x) - _248)) + _248;
    float _314 = (_306 * ((_274.y * cbMtdParam._m0[12u].y) - _249)) + _249;
    float _315 = (_306 * ((_274.z * cbMtdParam._m0[12u].z) - _250)) + _250;
    vec4 _327 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _329 = _327.x;
    float _331 = _329 - (_329 * _306);
    vec4 _343 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _366 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _370 = _366.z;
    float _373 = (_366.x * 2.0) + (-1.0);
    float _374 = (_366.y * 2.0) + (-1.0);
    float _375 = dot(vec2(_373, _374), vec2(_373, _374));
    float _3496 = isnan(0.0) ? _375 : (isnan(_375) ? 0.0 : max(_375, 0.0));
    float _380 = sqrt(1.0 - (isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))));
    float _388 = (((_343.z - _370) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _370;
    float _408 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _409 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _422 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_408 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_409 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _436 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3507 = isnan(0.0) ? _436 : (isnan(_436) ? 0.0 : max(_436, 0.0));
    float _437 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _445 = (((_437 * _437) * (3.0 - (_437 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _454 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _462 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3518 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _467 = (_463 * _463) * (3.0 - (_463 * 2.0));
    float _468 = _467 * cbMtdParam._m0[17u].x;
    float _469 = _467 * cbMtdParam._m0[17u].y;
    float _470 = sin(_454);
    float _471 = cos(_454);
    float _472 = TEXCOORD - _468;
    float _473 = TEXCOORD_1 - _469;
    vec4 _493 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_468 + fma(_473, (-0.0) - _470, _472 * _471))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_473, _471, _472 * _470) + _469)) + cbTextureTilingScale._m0[0u].w));
    float _499 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _493.x;
    float _501 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _493.y;
    float _503 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _493.z;
    vec4 _526 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _408) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _409) + cbTextureTilingScale._m0[5u].w));
    float _535 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_526.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3529 = isnan(0.0) ? _535 : (isnan(_535) ? 0.0 : max(_535, 0.0));
    float _536 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
    float _546 = (((((_343.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _373) + (cbMtdParam._m0[16u].y * _373);
    float _548 = (((((_343.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _374) + (cbMtdParam._m0[16u].y * _374);
    float _551 = fma(_380, _213 * NORMAL.x, fma(_548, _220 * TANGENT.x, (_206 * _198) * _546));
    float _554 = fma(_380, _213 * NORMAL.y, fma(_548, _220 * TANGENT.y, (_206 * _199) * _546));
    float _557 = fma(_380, _213 * NORMAL.z, fma(_548, _220 * TANGENT.z, (_206 * _200) * _546));
    float _561 = inversesqrt(dot(vec3(_551, _554, _557), vec3(_551, _554, _557)));
    float _562 = _561 * _551;
    float _563 = _561 * _554;
    float _564 = _561 * _557;
    float _3540 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _565 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
    float _3551 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3562 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3573 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3584 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _569 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _585 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _635 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _625);
    float _636 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _625);
    float _637 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _625);
    float _641 = inversesqrt(dot(vec3(_635, _636, _637), vec3(_635, _636, _637)));
    float _642 = _635 * _641;
    float _643 = _636 * _641;
    float _644 = _637 * _641;
    float _650 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _651 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _669 = fma(_564, cbSceneParam._m0[5u].z, fma(_563, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _562));
    float _672 = fma(_564, cbSceneParam._m0[6u].z, fma(_563, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _562));
    float _675 = fma(_564, cbSceneParam._m0[7u].z, fma(_563, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _562));
    uint _688 = uint(roundEven(NORMAL.w)) * 13u;
    uint _689 = _688 + 9u;
    uint _690 = _689 + uint(cbMatDynParam._m0[0u].w);
    float _696 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_690].x;
    float _697 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0)))) * cbInstanceData._m0[_690].y;
    float _698 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) * cbInstanceData._m0[_690].z;
    float _3595 = isnan(0.0) ? _696 : (isnan(_696) ? 0.0 : max(_696, 0.0));
    float _699 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _3606 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
    float _3617 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _702 = 1.0 - _569;
    float _703 = _699 * _702;
    float _704 = _700 * _702;
    float _705 = _701 * _702;
    float _710 = (_699 + (-0.039999999105930328369140625)) * _569;
    float _711 = (_700 + (-0.039999999105930328369140625)) * _569;
    float _712 = (_701 + (-0.039999999105930328369140625)) * _569;
    float _713 = _710 + 0.039999999105930328369140625;
    float _715 = _711 + 0.039999999105930328369140625;
    float _716 = _712 + 0.039999999105930328369140625;
    vec4 _725 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _650, cbSceneParam._m0[86u].y * _651));
    float _728 = _725.x * TEXCOORD_3.w;
    float _729 = dot(vec3(_562, _563, _564), vec3(_642, _643, _644));
    float _732 = _729 * 2.0;
    float _736 = (_732 * _562) - _642;
    float _737 = (_732 * _563) - _643;
    float _738 = (_732 * _564) - _644;
    float _742 = abs(dot(vec3(_642, _643, _644), vec3(_562, _563, _564)));
    float _3628 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _744 = sqrt(_565);
    float _756 = exp2((_744 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_744 * 3.0));
    float _762 = (1.0 - _756) * ((_744 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _763 = _756 * _744;
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1101;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _826 = fma(_799, cbModelParam._m0[26u].z, fma(_795, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _791));
        float _830 = fma(_799, cbModelParam._m0[27u].z, fma(_795, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _791));
        float _834 = fma(_799, cbModelParam._m0[28u].z, fma(_795, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _791));
        float _859 = _791 + _562;
        float _860 = _795 + _563;
        float _861 = _799 + _564;
        float _871 = fma(_861, cbModelParam._m0[26u].z, fma(_860, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _859)) - _826;
        float _872 = fma(_861, cbModelParam._m0[27u].z, fma(_860, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _859)) - _830;
        float _873 = fma(_861, cbModelParam._m0[28u].z, fma(_860, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _859)) - _834;
        float _877 = inversesqrt(dot(vec3(_871, _872, _873), vec3(_871, _872, _873)));
        float _890 = ((_877 * _871) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_826 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _891 = ((_877 * _872) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_830 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _892 = ((_877 * _873) / cbModelParam._m0[34u].z) + ((((((_834 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_890, _891, _892), 0.0);
        float _929 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_895.x + (-0.5));
        float _931 = _929 * (_895.y + (-0.5));
        float _932 = _929 * (_895.z + (-0.5));
        float _939 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_902.x + (-0.5));
        float _941 = _939 * (_902.y + (-0.5));
        float _942 = _939 * (_902.z + (-0.5));
        float _949 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_909.x + (-0.5));
        float _951 = _949 * (_909.y + (-0.5));
        float _952 = _949 * (_909.z + (-0.5));
        float _959 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_916.x + (-0.5));
        float _961 = _959 * (_916.y + (-0.5));
        float _962 = _959 * (_916.z + (-0.5));
        float _963 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
        float _964 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _965 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _966 = _930 * 0.5;
        float _967 = _940 * 0.5;
        float _968 = _950 * 0.5;
        float _969 = dot(vec3(_966, _967, _968), vec3(_966, _967, _968));
        float _974 = (_969 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_969);
        float _983 = (dot(vec3(_562, _563, _564), vec3(_974 * _966, _974 * _967, _974 * _968)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _993 = sqrt(((_967 * _967) + (_966 * _966)) + (_968 * _968)) / (_963 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _995 = _994 * 2.0;
        float _999 = (1.0 - _994) / (_994 + 1.0);
        float _3676 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1009 = ((((1.0 - _1000) * (_995 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_995 + 1.0))) + _1000) * _963;
        float _1010 = _931 * 0.5;
        float _1011 = _941 * 0.5;
        float _1012 = _951 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1026 = (dot(vec3(_562, _563, _564), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1035 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_964 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0));
        float _1036 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1037 = _1036 * 2.0;
        float _1041 = (1.0 - _1036) / (_1036 + 1.0);
        float _3709 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1051 = ((((1.0 - _1042) * (_1037 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1037 + 1.0))) + _1042) * _964;
        float _1052 = _932 * 0.5;
        float _1053 = _942 * 0.5;
        float _1054 = _952 * 0.5;
        float _1055 = dot(vec3(_1052, _1053, _1054), vec3(_1052, _1053, _1054));
        float _1060 = (_1055 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1055);
        float _1068 = (dot(vec3(_562, _563, _564), vec3(_1060 * _1052, _1060 * _1053, _1060 * _1054)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1077 = sqrt(((_1053 * _1053) + (_1052 * _1052)) + (_1054 * _1054)) / (_965 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1079 = _1078 * 2.0;
        float _1083 = (1.0 - _1078) / (_1078 + 1.0);
        float _3742 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1093 = ((((1.0 - _1084) * (_1079 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1079 + 1.0))) + _1084) * _965;
        _1101 = _932;
        _1103 = _931;
        _1104 = _930;
        _1105 = _942;
        _1106 = _941;
        _1107 = _940;
        _1108 = _952;
        _1109 = _951;
        _1110 = _950;
        _1111 = _965;
        _1112 = _964;
        _1113 = _963;
        _1114 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0)));
        _1115 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)));
        _1116 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0)));
    }
    else
    {
        _1101 = _1102;
        _1103 = _1102;
        _1104 = _1102;
        _1105 = _1102;
        _1106 = _1102;
        _1107 = _1102;
        _1108 = _1102;
        _1109 = _1102;
        _1110 = _1102;
        _1111 = _1102;
        _1112 = _1102;
        _1113 = _1102;
        _1114 = 0.0;
        _1115 = 0.0;
        _1116 = 0.0;
    }
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1142 = fma(_799, cbModelParam._m0[30u].z, fma(_795, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _791));
        float _1146 = fma(_799, cbModelParam._m0[31u].z, fma(_795, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _791));
        float _1150 = fma(_799, cbModelParam._m0[32u].z, fma(_795, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _791));
        float _1173 = _791 + _562;
        float _1174 = _795 + _563;
        float _1175 = _799 + _564;
        float _1185 = fma(_1175, cbModelParam._m0[30u].z, fma(_1174, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1173)) - _1142;
        float _1186 = fma(_1175, cbModelParam._m0[31u].z, fma(_1174, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1173)) - _1146;
        float _1187 = fma(_1175, cbModelParam._m0[32u].z, fma(_1174, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1173)) - _1150;
        float _1191 = inversesqrt(dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187)));
        float _1204 = ((_1191 * _1185) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1142 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1205 = ((_1191 * _1186) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1146 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1206 = ((_1191 * _1187) / cbModelParam._m0[35u].z) + ((((((_1150 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1204, _1205, _1206), 0.0);
        float _1241 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1242 = _1241 * (_1208.x + (-0.5));
        float _1243 = _1241 * (_1208.y + (-0.5));
        float _1244 = _1241 * (_1208.z + (-0.5));
        float _1251 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1252 = _1251 * (_1215.x + (-0.5));
        float _1253 = _1251 * (_1215.y + (-0.5));
        float _1254 = _1251 * (_1215.z + (-0.5));
        float _1261 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1262 = _1261 * (_1222.x + (-0.5));
        float _1263 = _1261 * (_1222.y + (-0.5));
        float _1264 = _1261 * (_1222.z + (-0.5));
        float _1271 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1272 = _1271 * (_1229.x + (-0.5));
        float _1273 = _1271 * (_1229.y + (-0.5));
        float _1274 = _1271 * (_1229.z + (-0.5));
        float _1275 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1276 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1277 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1278 = _1242 * 0.5;
        float _1279 = _1252 * 0.5;
        float _1280 = _1262 * 0.5;
        float _1281 = dot(vec3(_1278, _1279, _1280), vec3(_1278, _1279, _1280));
        float _1286 = (_1281 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1281);
        float _1294 = (dot(vec3(_562, _563, _564), vec3(_1286 * _1278, _1286 * _1279, _1286 * _1280)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1303 = sqrt(((_1279 * _1279) + (_1278 * _1278)) + (_1280 * _1280)) / (_1275 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1304 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1305 = _1304 * 2.0;
        float _1309 = (1.0 - _1304) / (_1304 + 1.0);
        float _3805 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1310 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1319 = ((((1.0 - _1310) * (_1305 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1305 + 1.0))) + _1310) * _1275;
        float _1320 = _1243 * 0.5;
        float _1321 = _1253 * 0.5;
        float _1322 = _1263 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_562, _563, _564), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1276 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _3838 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1347 + 1.0))) + _1352) * _1276;
        float _1362 = _1244 * 0.5;
        float _1363 = _1254 * 0.5;
        float _1364 = _1264 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_562, _563, _564), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1277 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _3871 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1389 + 1.0))) + _1394) * _1277;
        _1411 = _1244;
        _1412 = _1243;
        _1413 = _1242;
        _1414 = _1254;
        _1415 = _1253;
        _1416 = _1252;
        _1417 = _1264;
        _1418 = _1263;
        _1419 = _1262;
        _1420 = _1277;
        _1421 = _1276;
        _1422 = _1275;
        _1423 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0)));
        _1424 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1425 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
    }
    else
    {
        _1411 = _1102;
        _1412 = _1102;
        _1413 = _1102;
        _1414 = _1102;
        _1415 = _1102;
        _1416 = _1102;
        _1417 = _1102;
        _1418 = _1102;
        _1419 = _1102;
        _1420 = _1102;
        _1421 = _1102;
        _1422 = _1102;
        _1423 = 0.0;
        _1424 = 0.0;
        _1425 = 0.0;
    }
    float _1435 = (cbModelParam._m0[1u].x * (_1423 - _1114)) + _1114;
    float _1436 = (cbModelParam._m0[1u].x * (_1424 - _1115)) + _1115;
    float _1437 = (cbModelParam._m0[1u].x * (_1425 - _1116)) + _1116;
    float _1458 = fma(_1437, cbSceneParam._m0[89u].z, fma(_1436, cbSceneParam._m0[89u].y, _1435 * cbSceneParam._m0[89u].x));
    float _1461 = fma(_1437, cbSceneParam._m0[90u].z, fma(_1436, cbSceneParam._m0[90u].y, _1435 * cbSceneParam._m0[90u].x));
    float _1464 = fma(_1437, cbSceneParam._m0[91u].z, fma(_1436, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1435));
    float _1479 = _736 * 0.5;
    float _1480 = _737 * 0.5;
    float _1481 = _738 * 0.5;
    float _1482 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1413, _1416, _1419, _1422));
    float _1485 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1412, _1415, _1418, _1421));
    float _1488 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1411, _1414, _1417, _1420));
    float _1522;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1495 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1101, _1105, _1108, _1111));
        float _1499 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1103, _1106, _1109, _1112));
        float _1503 = dot(vec4(_1479, _1480, _1481, 1.0), vec4(_1104, _1107, _1110, _1113));
        float _1510 = dot(vec4(cbModelParam._m0[39u]), vec4(_1479, _1480, _1481, 1.0));
        _1522 = dot(vec3(isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1510) ? 0.0 : (isnan(0.0) ? _1510 : max(0.0, _1510))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1522 = 1.0;
    }
    float _1533;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1524 = dot(vec4(cbModelParam._m0[40u]), vec4(_1479, _1480, _1481, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0)), isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0)), isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1524) ? 0.0 : (isnan(0.0) ? _1524 : max(0.0, _1524))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1537 = (_1533 * cbModelParam._m0[1u].x) + (_1522 * (1.0 - cbModelParam._m0[1u].x));
    float _1547 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _565);
    float _1548 = isnan(_1547) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1547 : min(cbModelParam._m0[25u].z, _1547));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1595 = fma(_799, cbModelParam._m0[13u].z, fma(_795, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791)) + cbModelParam._m0[13u].w;
        float _1599 = fma(_799, cbModelParam._m0[14u].z, fma(_795, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791)) + cbModelParam._m0[14u].w;
        float _1603 = fma(_799, cbModelParam._m0[15u].z, fma(_795, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791)) + cbModelParam._m0[15u].w;
        float _1606 = fma(_738, cbModelParam._m0[13u].z, fma(_737, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _736));
        float _1609 = fma(_738, cbModelParam._m0[14u].z, fma(_737, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _736));
        float _1612 = fma(_738, cbModelParam._m0[15u].z, fma(_737, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _736));
        float _1640;
        if (_1606 > 0.0)
        {
            _1640 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1640 = frontier_phi_14_12_ladder;
        }
        float _1844;
        if (_1609 > 0.0)
        {
            _1844 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1844 = frontier_phi_23_19_ladder;
        }
        float _2098;
        if (_1612 > 0.0)
        {
            _2098 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2098 = frontier_phi_35_30_ladder;
        }
        float _2100 = isnan(_1844) ? _1640 : (isnan(_1640) ? _1844 : min(_1640, _1844));
        float _2101 = isnan(_2098) ? _2100 : (isnan(_2100) ? _2098 : min(_2100, _2098));
        float _2105 = (_2101 * _1606) + _1595;
        float _2106 = (_2101 * _1609) + _1599;
        float _2107 = (_2101 * _1612) + _1603;
        float _2108 = _2101 * 9.9999997473787516355514526367188e-05;
        float _2110 = (-1.0) - _2108;
        float _2112 = _2108 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2107 > _2112) || ((_2107 < _2110) || ((_2106 > _2112) || ((_2106 < _2110) || ((_2105 < _2110) || (_2105 > _2112))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2235 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2107, cbModelParam._m0[9u].z, fma(_2106, cbModelParam._m0[9u].y, _2105 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2107, cbModelParam._m0[10u].z, fma(_2106, cbModelParam._m0[10u].y, _2105 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2107, cbModelParam._m0[11u].z, fma(_2106, cbModelParam._m0[11u].y, _2105 * cbModelParam._m0[11u].x))), _1548);
            frontier_phi_13_35_ladder = _2235.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2235.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2235.x * cbModelParam._m0[1u].y;
        }
        _1628 = frontier_phi_13_35_ladder_2;
        _1630 = frontier_phi_13_35_ladder_1;
        _1632 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_736, _737, _738), _1548);
        _1628 = _1616.x * cbModelParam._m0[1u].y;
        _1630 = _1616.y * cbModelParam._m0[1u].y;
        _1632 = _1616.z * cbModelParam._m0[1u].y;
    }
    float _1636 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _565);
    float _1637 = isnan(_1636) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1636 : min(cbModelParam._m0[25u].w, _1636));
    float _1728;
    float _1730;
    float _1732;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1692 = fma(_799, cbModelParam._m0[21u].z, fma(_795, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791)) + cbModelParam._m0[21u].w;
        float _1696 = fma(_799, cbModelParam._m0[22u].z, fma(_795, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791)) + cbModelParam._m0[22u].w;
        float _1700 = fma(_799, cbModelParam._m0[23u].z, fma(_795, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791)) + cbModelParam._m0[23u].w;
        float _1703 = fma(_738, cbModelParam._m0[21u].z, fma(_737, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _736));
        float _1706 = fma(_738, cbModelParam._m0[22u].z, fma(_737, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _736));
        float _1709 = fma(_738, cbModelParam._m0[23u].z, fma(_737, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _736));
        float _1849;
        if (_1703 > 0.0)
        {
            _1849 = abs((1.0 - _1692) / _1703);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1703 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1692 + 1.0) / _1703);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1849 = frontier_phi_25_21_ladder;
        }
        float _2125;
        if (_1706 > 0.0)
        {
            _2125 = abs((1.0 - _1696) / _1706);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1706 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1696 + 1.0) / _1706);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2125 = frontier_phi_37_32_ladder;
        }
        float _2338;
        if (_1709 > 0.0)
        {
            _2338 = abs((1.0 - _1700) / _1709);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1709 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1700 + 1.0) / _1709);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2338 = frontier_phi_46_43_ladder;
        }
        float _2340 = isnan(_2125) ? _1849 : (isnan(_1849) ? _2125 : min(_1849, _2125));
        float _2341 = isnan(_2338) ? _2340 : (isnan(_2340) ? _2338 : min(_2340, _2338));
        float _2345 = (_2341 * _1703) + _1692;
        float _2346 = (_2341 * _1706) + _1696;
        float _2347 = (_2341 * _1709) + _1700;
        float _2348 = _2341 * 9.9999997473787516355514526367188e-05;
        float _2349 = (-1.0) - _2348;
        float _2351 = _2348 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2347 > _2351) || ((_2347 < _2349) || ((_2346 > _2351) || ((_2346 < _2349) || ((_2345 < _2349) || (_2345 > _2351))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2591 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2347, cbModelParam._m0[17u].z, fma(_2346, cbModelParam._m0[17u].y, _2345 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2347, cbModelParam._m0[18u].z, fma(_2346, cbModelParam._m0[18u].y, _2345 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2347, cbModelParam._m0[19u].z, fma(_2346, cbModelParam._m0[19u].y, _2345 * cbModelParam._m0[19u].x))), _1637);
            frontier_phi_22_46_ladder = _2591.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2591.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2591.x * cbModelParam._m0[1u].z;
        }
        _1728 = frontier_phi_22_46_ladder_2;
        _1730 = frontier_phi_22_46_ladder_1;
        _1732 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_736, _737, _738), _1637);
        _1728 = _1712.x * cbModelParam._m0[1u].z;
        _1730 = _1712.y * cbModelParam._m0[1u].z;
        _1732 = _1712.z * cbModelParam._m0[1u].z;
    }
    float _1745 = (((_762 * _713) + _763) * _728) * ((cbModelParam._m0[1u].w * (_1728 - _1628)) + _1628);
    float _1747 = (((_762 * _715) + _763) * _728) * ((cbModelParam._m0[1u].w * (_1730 - _1630)) + _1630);
    float _1749 = (((_762 * _716) + _763) * _728) * ((cbModelParam._m0[1u].w * (_1732 - _1632)) + _1632);
    float _1752 = fma(_1749, cbSceneParam._m0[89u].z, fma(_1747, cbSceneParam._m0[89u].y, _1745 * cbSceneParam._m0[89u].x));
    float _1755 = fma(_1749, cbSceneParam._m0[90u].z, fma(_1747, cbSceneParam._m0[90u].y, _1745 * cbSceneParam._m0[90u].x));
    float _1758 = fma(_1749, cbSceneParam._m0[91u].z, fma(_1747, cbSceneParam._m0[91u].y, _1745 * cbSceneParam._m0[91u].x));
    uvec4 _1768 = floatBitsToUint(cbInstanceData._m0[_688 + 5u]);
    uint _1770 = _1768.x * 14u;
    uint _1771 = _1770 + 13u;
    float _1778 = _728 + (-1.0);
    float _1783 = (cbLight._m0[_1771].x * _1778) + 1.0;
    float _1784 = (cbLight._m0[_1771].y * _1778) + 1.0;
    float _1785 = (cbLight._m0[_1771].z * _1778) + 1.0;
    float _1786 = (cbLight._m0[_1771].w * _1778) + 1.0;
    uint _1787 = _1770 + 5u;
    float _1793 = isnan(1.0) ? _1784 : (isnan(_1784) ? 1.0 : min(_1784, 1.0));
    uint _1797 = _1770 + 4u;
    float _1803 = isnan(1.0) ? _1783 : (isnan(_1783) ? 1.0 : min(_1783, 1.0));
    uint _1807 = _1770 | 1u;
    float _1818 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_562, _563, _564));
    float _1821 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_562, _563, _564));
    float _4007 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _4018 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1826 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.3183098733425140380859375;
    float _1828 = (isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * 0.3183098733425140380859375;
    float _1835 = ((cbLight._m0[_1787].x * _1793) * _1828) + ((cbLight._m0[_1797].x * _1803) * _1826);
    float _1836 = ((_1793 * cbLight._m0[_1787].y) * _1828) + ((_1803 * cbLight._m0[_1797].y) * _1826);
    float _1837 = ((_1793 * cbLight._m0[_1787].z) * _1828) + ((_1803 * cbLight._m0[_1797].z) * _1826);
    uvec4 _1841 = floatBitsToUint(cbLight._m0[_1770 + 12u]);
    bool _1843 = _1841.x == 0u;
    float _1854;
    float _1856;
    float _1858;
    if (_1843)
    {
        _1854 = _1835;
        _1856 = _1836;
        _1858 = _1837;
    }
    else
    {
        uint _1862 = _1770 + 6u;
        float _1878 = (dot(vec3(cbLight._m0[_1770 + 2u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _1879 = _1878 * _1878;
        float _4029 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
        float _1880 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1881 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _1854 = (((cbLight._m0[_1862].x * 0.3183098733425140380859375) * _1880) * _1881) + _1835;
        _1856 = (((cbLight._m0[_1862].y * 0.3183098733425140380859375) * _1880) * _1881) + _1836;
        _1858 = (((cbLight._m0[_1862].z * 0.3183098733425140380859375) * _1880) * _1881) + _1837;
    }
    bool _1861 = _1841.y == 0u;
    float _1899;
    float _1901;
    float _1903;
    if (_1861)
    {
        _1899 = _1854;
        _1901 = _1856;
        _1903 = _1858;
    }
    else
    {
        uint _2069 = _1770 + 7u;
        float _2085 = (dot(vec3(cbLight._m0[_1770 + 3u].xyz), vec3(_562, _563, _564)) * 0.5) + 0.5;
        float _2086 = _2085 * _2085;
        float _4045 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
        float _2087 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _2088 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _1899 = (((cbLight._m0[_2069].x * 0.3183098733425140380859375) * _2087) * _2088) + _1854;
        _1901 = (((cbLight._m0[_2069].y * 0.3183098733425140380859375) * _2087) * _2088) + _1856;
        _1903 = (((cbLight._m0[_2069].z * 0.3183098733425140380859375) * _2087) * _2088) + _1858;
    }
    uint _1906 = _1770 + 8u;
    float _1919 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1770].w)) * _565) * 0.949999988079071044921875);
    float _1920 = _1919 * _1919;
    float _1921 = cbLight._m0[_1770].x + _642;
    float _1922 = cbLight._m0[_1770].y + _643;
    float _1923 = cbLight._m0[_1770].z + _644;
    float _1927 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
    float _1928 = _1927 * _1921;
    float _1929 = _1927 * _1922;
    float _1930 = _1927 * _1923;
    float _1931 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_1770].xyz));
    float _4061 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
    float _4072 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _1935 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
    float _1936 = dot(vec3(_562, _563, _564), vec3(_1928, _1929, _1930));
    float _4083 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1770].xyz), vec3(_1928, _1929, _1930));
    float _4094 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1944 = _1920 * _1920;
    float _1948 = ((_1939 * _1939) * (_1944 + (-1.0))) + 1.0;
    float _1956 = exp2(log2(1.0 - (isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0)))) * 5.0);
    float _1957 = 0.959999978542327880859375 - _710;
    float _1959 = 0.959999978542327880859375 - _711;
    float _1960 = 0.959999978542327880859375 - _712;
    float _1967 = 1.0 - _1920;
    float _1978 = (0.5 / (((_1935 * ((_1934 * _1967) + _1920)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _1967) + _1920) * _1934))) * _1934;
    float _4105 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1980 = (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1944 / ((_1948 * _1948) * 3.141590118408203125));
    uint _1991 = _1770 + 9u;
    float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _565) * 0.949999988079071044921875);
    float _2003 = _2002 * _2002;
    float _2004 = cbLight._m0[_1807].x + _642;
    float _2005 = cbLight._m0[_1807].y + _643;
    float _2006 = cbLight._m0[_1807].z + _644;
    float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
    float _2011 = _2010 * _2004;
    float _2012 = _2010 * _2005;
    float _2013 = _2010 * _2006;
    float _2014 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_1807].xyz));
    float _4116 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
    float _2018 = dot(vec3(_562, _563, _564), vec3(_2011, _2012, _2013));
    float _4127 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_2011, _2012, _2013));
    float _4138 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2003 * _2003;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2037 = exp2(log2(1.0 - (isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0)))) * 5.0);
    float _2044 = 1.0 - _2003;
    float _2054 = (0.5 / (((_1935 * ((_2017 * _2044) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2044) + _2003) * _2017))) * _2017;
    float _4149 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2056 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    float _2066 = (((((_2037 * _1957) + _713) * cbLight._m0[_1991].x) * _2056) * _1793) + (((((_1956 * _1957) + _713) * cbLight._m0[_1906].x) * _1980) * _1803);
    float _2067 = (((((_2037 * _1959) + _715) * cbLight._m0[_1991].y) * _2056) * _1793) + (((((_1956 * _1959) + _715) * cbLight._m0[_1906].y) * _1980) * _1803);
    float _2068 = (((((_2037 * _1960) + _716) * cbLight._m0[_1991].z) * _2056) * _1793) + (((((_1956 * _1960) + _716) * cbLight._m0[_1906].z) * _1980) * _1803);
    float _2130;
    float _2132;
    float _2134;
    if (_1843)
    {
        _2130 = _2066;
        _2132 = _2067;
        _2134 = _2068;
    }
    else
    {
        uint _2136 = _1770 + 2u;
        uint _2140 = _1770 + 10u;
        float _2154 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2136].w)) * _565) * 0.949999988079071044921875);
        float _2155 = _2154 * _2154;
        float _2156 = cbLight._m0[_2136].x + _642;
        float _2157 = cbLight._m0[_2136].y + _643;
        float _2158 = cbLight._m0[_2136].z + _644;
        float _2162 = inversesqrt(dot(vec3(_2156, _2157, _2158), vec3(_2156, _2157, _2158)));
        float _2163 = _2162 * _2156;
        float _2164 = _2162 * _2157;
        float _2165 = _2162 * _2158;
        float _2166 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2136].xyz));
        float _4160 = isnan(0.0) ? _2166 : (isnan(_2166) ? 0.0 : max(_2166, 0.0));
        float _2169 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _2170 = dot(vec3(_562, _563, _564), vec3(_2163, _2164, _2165));
        float _4171 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2173 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
        float _2174 = dot(vec3(cbLight._m0[_2136].xyz), vec3(_2163, _2164, _2165));
        float _4182 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
        float _2178 = _2155 * _2155;
        float _2182 = ((_2173 * _2173) * (_2178 + (-1.0))) + 1.0;
        float _2189 = exp2(log2(1.0 - (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0)))) * 5.0);
        float _2196 = 1.0 - _2155;
        float _2206 = (0.5 / (((_1935 * ((_2169 * _2196) + _2155)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2196) + _2155) * _2169))) * _2169;
        float _4193 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
        float _2208 = (isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0))) * (_2178 / ((_2182 * _2182) * 3.141590118408203125));
        float _2209 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
        _2130 = (((((_2189 * _1957) + _713) * cbLight._m0[_2140].x) * _2208) * _2209) + _2066;
        _2132 = (((((_2189 * _1959) + _715) * cbLight._m0[_2140].y) * _2208) * _2209) + _2067;
        _2134 = (((((_2189 * _1960) + _716) * cbLight._m0[_2140].z) * _2208) * _2209) + _2068;
    }
    float _2244;
    float _2246;
    float _2248;
    if (_1861)
    {
        _2244 = _2130;
        _2246 = _2132;
        _2248 = _2134;
    }
    else
    {
        uint _2255 = _1770 + 3u;
        uint _2259 = _1770 + 11u;
        float _2273 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2255].w)) * _565) * 0.949999988079071044921875);
        float _2274 = _2273 * _2273;
        float _2275 = cbLight._m0[_2255].x + _642;
        float _2276 = cbLight._m0[_2255].y + _643;
        float _2277 = cbLight._m0[_2255].z + _644;
        float _2281 = inversesqrt(dot(vec3(_2275, _2276, _2277), vec3(_2275, _2276, _2277)));
        float _2282 = _2281 * _2275;
        float _2283 = _2281 * _2276;
        float _2284 = _2281 * _2277;
        float _2285 = dot(vec3(_562, _563, _564), vec3(cbLight._m0[_2255].xyz));
        float _4209 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        float _2288 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2289 = dot(vec3(_562, _563, _564), vec3(_2282, _2283, _2284));
        float _4220 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        float _2292 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
        float _2293 = dot(vec3(cbLight._m0[_2255].xyz), vec3(_2282, _2283, _2284));
        float _4231 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2297 = _2274 * _2274;
        float _2301 = ((_2292 * _2292) * (_2297 + (-1.0))) + 1.0;
        float _2308 = exp2(log2(1.0 - (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) * 5.0);
        float _2315 = 1.0 - _2274;
        float _2325 = (0.5 / (((_1935 * ((_2288 * _2315) + _2274)) + 9.9999999392252902907785028219223e-09) + (((_1935 * _2315) + _2274) * _2288))) * _2288;
        float _4242 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
        float _2327 = (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_2297 / ((_2301 * _2301) * 3.141590118408203125));
        float _2328 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
        _2244 = (((((_2308 * _1957) + _713) * cbLight._m0[_2259].x) * _2327) * _2328) + _2130;
        _2246 = (((((_2308 * _1959) + _715) * cbLight._m0[_2259].y) * _2327) * _2328) + _2132;
        _2248 = (((((_2308 * _1960) + _716) * cbLight._m0[_2259].z) * _2327) * _2328) + _2134;
    }
    float _2463;
    float _2465;
    float _2467;
    float _2469;
    float _2471;
    float _2473;
    if (_1768.y == 0u)
    {
        float _2403 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2404 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2403;
        float _2405 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2403;
        float _2406 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2403;
        uvec4 _2418 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2419 = _2418.x;
        uint _2430 = uint((float(_2418.y) * floor(float(uint(cbSceneParam._m0[85u].y * _651) / _2419))) + floor(float(uint(cbSceneParam._m0[85u].x * _650) / _2419)));
        float _2440 = (log2(_2406 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2441 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        uint _2444 = uint(isnan(14.0) ? _2441 : (isnan(_2441) ? 14.0 : min(_2441, 14.0)));
        uvec4 _2449 = texelFetch(g_lightClusterGridBuffer, int(((_2444 << 2u) + (_2430 << 6u)) >> 2u));
        uint _2450 = _2449.x;
        uint _2451 = _2418.z;
        float _2596;
        float _2598;
        float _2600;
        float _2602;
        float _2604;
        float _2606;
        if (((((1u << ((_2451 >> 4u) & 15u)) + 4294967295u) & _2450) == 0u) || ((_2451 & 240u) == 0u))
        {
            _2596 = 0.0;
            _2598 = 0.0;
            _2600 = 0.0;
            _2602 = 0.0;
            _2604 = 0.0;
            _2606 = 0.0;
        }
        else
        {
            float _2597;
            float _2599;
            float _2601;
            float _2603;
            float _2605;
            float _2607;
            float _2749 = 0.0;
            float _2750 = 0.0;
            float _2751 = 0.0;
            float _2752 = 0.0;
            float _2753 = 0.0;
            float _2754 = 0.0;
            uint _2755 = 0u;
            uint _2764;
            bool _2765;
            for (;;)
            {
                _2764 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2755 << 2u)) >> 2u)).x;
                _2765 = _2764 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2765)
                {
                    frontier_phi_61_pred = _2749;
                    frontier_phi_61_pred_1 = _2754;
                    frontier_phi_61_pred_2 = _2753;
                    frontier_phi_61_pred_3 = _2752;
                    frontier_phi_61_pred_4 = _2751;
                    frontier_phi_61_pred_5 = _2750;
                }
                else
                {
                    float _2873;
                    float _2874;
                    float _2875;
                    float _2876;
                    float _2877;
                    float _2878;
                    uint _2879;
                    _2873 = _2749;
                    _2874 = _2750;
                    _2875 = _2751;
                    _2876 = _2752;
                    _2877 = _2753;
                    _2878 = _2754;
                    _2879 = _2764;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    float _2810;
                    for (;;)
                    {
                        uint _2883 = uint(findLSB(_2879)) + (_2755 << 5u);
                        uint _2880 = (_2879 + 4294967295u) & _2879;
                        uint _2885 = _2883 * 48u;
                        vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 3u)).x));
                        uint _2905 = (_2883 * 48u) + 4u;
                        vec4 _2918 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2905)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2905 + 3u)).x));
                        uint _2924 = (_2883 * 48u) + 8u;
                        vec3 _2935 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2924)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2924 + 2u)).x));
                        float _2939 = _2899.x - _2404;
                        float _2940 = _2899.y - _2405;
                        float _2941 = _2899.z - _2406;
                        float _2942 = dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941));
                        float _2945 = inversesqrt(_2942);
                        float _2946 = _2945 * _2939;
                        float _2947 = _2945 * _2940;
                        float _2948 = _2945 * _2941;
                        float _2949 = dot(vec3(_669, _672, _675), vec3(_2946, _2947, _2948));
                        float _2954 = 1.0 - (_2942 * _2899.w);
                        float _4268 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2955 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2956 = sqrt(_2942) * _2918.w;
                        float _2959 = 1.39999997615814208984375 / (_2956 + 1.39999997615814208984375);
                        float _2960 = _2959 * _2959;
                        float _2963 = ((1.0 - _2960) * _2949) + _2960;
                        float _2966 = _2956 * _2956;
                        float _2970 = ((isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))) * _2955) / ((_2966 * 0.699999988079071044921875) + 1.0);
                        float _2974 = (-0.0) - _2404;
                        float _2975 = (-0.0) - _2405;
                        float _2976 = (-0.0) - _2406;
                        float _2980 = inversesqrt(dot(vec3(_2974, _2975, _2976), vec3(_2974, _2975, _2976)));
                        float _2981 = _2980 * _2974;
                        float _2982 = _2980 * _2975;
                        float _2983 = _2980 * _2976;
                        float _2991 = exp2(log2(1.0 / ((_2966 * 3.5) + 5.0)) * 0.25);
                        float _2992 = 1.0 - _744;
                        float _2999 = sqrt(1.0 - ((1.0 - (_2992 * _2992)) * (1.0 - (_2991 * _2991))));
                        float _3000 = _2999 * _2999;
                        float _3001 = _3000 * _3000;
                        float _3002 = _2981 + _2946;
                        float _3003 = _2982 + _2947;
                        float _3004 = _2983 + _2948;
                        float _3008 = inversesqrt(dot(vec3(_3002, _3003, _3004), vec3(_3002, _3003, _3004)));
                        float _3012 = dot(vec3(_669, _672, _675), vec3(_2981, _2982, _2983));
                        float _4284 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3015 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
                        float _3016 = dot(vec3(_669, _672, _675), vec3(_3008 * _3002, _3008 * _3003, _3008 * _3004));
                        float _4295 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                        float _3019 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
                        float _3023 = ((_3019 * _3019) * (_3001 + (-1.0))) + 1.0;
                        float _3024 = _2959 * _3000;
                        float _3025 = _3024 * _3024;
                        float _3028 = ((1.0 - _3025) * _2949) + _3025;
                        float _4306 = isnan(0.0) ? _3028 : (isnan(_3028) ? 0.0 : max(_3028, 0.0));
                        float _3029 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
                        float _3030 = 1.0 - _3000;
                        float _3040 = (0.5 / (((_3029 * ((_3015 * _3030) + _3000)) + 9.9999999392252902907785028219223e-09) + (((_3029 * _3030) + _3000) * _3015))) * _3029;
                        float _4317 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                        float _3051 = (((_3001 * 3.1415927410125732421875) * (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) / ((_3023 * _3023) * ((_2966 * 2.1991131305694580078125) + 3.141590118408203125))) * _2955;
                        _2808 = (_2970 * _2918.x) + _2876;
                        _2809 = (_2970 * _2918.y) + _2877;
                        _2810 = (_2970 * _2918.z) + _2878;
                        _2805 = (_3051 * _2935.x) + _2873;
                        _2806 = (_3051 * _2935.y) + _2874;
                        _2807 = (_3051 * _2935.z) + _2875;
                        if (_2880 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2873 = _2805;
                            _2874 = _2806;
                            _2875 = _2807;
                            _2876 = _2808;
                            _2877 = _2809;
                            _2878 = _2810;
                            _2879 = _2880;
                        }
                    }
                    frontier_phi_61_pred = _2805;
                    frontier_phi_61_pred_1 = _2810;
                    frontier_phi_61_pred_2 = _2809;
                    frontier_phi_61_pred_3 = _2808;
                    frontier_phi_61_pred_4 = _2807;
                    frontier_phi_61_pred_5 = _2806;
                }
                _2597 = frontier_phi_61_pred;
                _2607 = frontier_phi_61_pred_1;
                _2605 = frontier_phi_61_pred_2;
                _2603 = frontier_phi_61_pred_3;
                _2601 = frontier_phi_61_pred_4;
                _2599 = frontier_phi_61_pred_5;
                uint _2756 = _2755 + 1u;
                if (_2756 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2749 = _2597;
                    _2750 = _2599;
                    _2751 = _2601;
                    _2752 = _2603;
                    _2753 = _2605;
                    _2754 = _2607;
                    _2755 = _2756;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2596 = _2597;
            _2598 = _2599;
            _2600 = _2601;
            _2602 = _2603;
            _2604 = _2605;
            _2606 = _2607;
        }
        uvec4 _2610 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2611 = _2610.z;
        uint _2613 = (_2611 >> 8u) & 15u;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        float _2725;
        float _2727;
        if (((4294967295u << _2613) & _2450) == 0u)
        {
            _2717 = _2596;
            _2719 = _2598;
            _2721 = _2600;
            _2723 = _2602;
            _2725 = _2604;
            _2727 = _2606;
        }
        else
        {
            float _2742 = inversesqrt(dot(vec3(_2404, _2405, _2406), vec3(_2404, _2405, _2406)));
            float _2743 = _2742 * _2404;
            float _2744 = _2742 * _2405;
            float _2745 = _2742 * _2406;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2613 < ((_2611 >> 12u) & 15u))
            {
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2726;
                float _2728;
                float _2856 = _2596;
                float _2857 = _2598;
                float _2858 = _2600;
                float _2859 = _2602;
                float _2860 = _2604;
                float _2861 = _2606;
                uint _2862 = _2613;
                uint _2871;
                bool _2872;
                for (;;)
                {
                    _2871 = texelFetch(g_lightClassification, int((((_2444 << 5u) + (_2430 << 9u)) + (_2862 << 2u)) >> 2u)).x;
                    _2872 = _2871 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2872)
                    {
                        frontier_phi_67_pred = _2859;
                        frontier_phi_67_pred_1 = _2860;
                        frontier_phi_67_pred_2 = _2861;
                        frontier_phi_67_pred_3 = _2858;
                        frontier_phi_67_pred_4 = _2857;
                        frontier_phi_67_pred_5 = _2856;
                    }
                    else
                    {
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3351;
                        float _3352;
                        float _3353;
                        float _3354;
                        float _3355;
                        float _3356;
                        float _3069 = _2856;
                        float _3070 = _2857;
                        float _3071 = _2858;
                        float _3072 = _2859;
                        float _3073 = _2860;
                        float _3074 = _2861;
                        uint _3075 = _2871;
                        uint _3076;
                        vec4 _3101;
                        float _3102;
                        vec4 _3117;
                        vec3 _3129;
                        vec4 _3144;
                        vec4 _3160;
                        float _3207;
                        bool _3208;
                        for (;;)
                        {
                            uint _3086 = ((_2862 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3075));
                            _3076 = (_3075 + 4294967295u) & _3075;
                            uint _3088 = _3086 * 40u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            _3102 = _3101.w;
                            uint _3104 = (_3086 * 40u) + 4u;
                            _3117 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3104)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3104 + 3u)).x));
                            uint _3119 = (_3086 * 40u) + 8u;
                            _3129 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x));
                            uint _3131 = (_3086 * 40u) + 16u;
                            _3144 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3131)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3131 + 3u)).x));
                            uint _3147 = (_3086 * 40u) + 20u;
                            _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            uint _3163 = (_3086 * 40u) + 24u;
                            vec4 _3176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3163 + 3u)).x));
                            uint _3182 = (_3086 * 40u) + 28u;
                            vec4 _3195 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3182)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3182 + 3u)).x));
                            _3207 = fma(_2406, _3195.z, fma(_2405, _3195.y, _3195.x * _2404)) + _3195.w;
                            _3208 = !((fma(_2406, _3176.z, fma(_2405, _3176.y, _3176.x * _2404)) + _3176.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3208)
                            {
                                float _3235 = _3101.x - _2404;
                                float _3236 = _3101.y - _2405;
                                float _3237 = _3101.z - _2406;
                                float _3238 = dot(vec3(_3235, _3236, _3237), vec3(_3235, _3236, _3237));
                                float _3241 = inversesqrt(_3238);
                                float _3242 = _3241 * _3235;
                                float _3243 = _3241 * _3236;
                                float _3244 = _3241 * _3237;
                                float _3248 = 1.0 - (_3238 / (_3102 * _3102));
                                float _4328 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3249 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3253 = sqrt(_3238) * _3117.w;
                                float _3255 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                                float _3256 = _3255 * _3255;
                                float _3259 = ((1.0 - _3256) * dot(vec3(_3242, _3243, _3244), vec3(_669, _672, _675))) + _3256;
                                float _3262 = _3253 * _3253;
                                float _3266 = (fma(_2406, _3144.z, fma(_2405, _3144.y, _3144.x * _2404)) + _3144.w) / _3207;
                                float _3267 = (fma(_2406, _3160.z, fma(_2405, _3160.y, _3160.x * _2404)) + _3160.w) / _3207;
                                float _3271 = 1.0 - dot(vec2(_3266, _3267), vec2(_3266, _3267));
                                float _4344 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3272 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
                                float _3273 = _3272 * (((isnan(0.0) ? _3259 : (isnan(_3259) ? 0.0 : max(_3259, 0.0))) * _3249) / ((_3262 * 0.699999988079071044921875) + 1.0));
                                float _3285 = exp2(log2(1.0 / ((_3262 * 3.5) + 5.0)) * 0.25);
                                float _3286 = 1.0 - _744;
                                float _3293 = sqrt(1.0 - ((1.0 - (_3286 * _3286)) * (1.0 - (_3285 * _3285))));
                                float _3294 = _3293 * _3293;
                                float _3295 = _3294 * _3294;
                                float _3296 = _3242 - _2743;
                                float _3297 = _3243 - _2744;
                                float _3298 = _3244 - _2745;
                                float _3302 = inversesqrt(dot(vec3(_3296, _3297, _3298), vec3(_3296, _3297, _3298)));
                                float _3306 = dot(vec3(_669, _672, _675), vec3((-0.0) - _2743, (-0.0) - _2744, (-0.0) - _2745));
                                float _4355 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                                float _3309 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
                                float _3310 = dot(vec3(_669, _672, _675), vec3(_3302 * _3296, _3302 * _3297, _3302 * _3298));
                                float _4366 = isnan(0.0) ? _3310 : (isnan(_3310) ? 0.0 : max(_3310, 0.0));
                                float _3313 = isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0));
                                float _3317 = ((_3313 * _3313) * (_3295 + (-1.0))) + 1.0;
                                float _3318 = _3255 * _3294;
                                float _3319 = _3318 * _3318;
                                float _3325 = ((1.0 - _3319) * dot(vec3(_669, _672, _675), vec3(_3242, _3243, _3244))) + _3319;
                                float _4377 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                                float _3326 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
                                float _3327 = 1.0 - _3294;
                                float _3337 = (0.5 / (((_3326 * ((_3309 * _3327) + _3294)) + 9.9999999392252902907785028219223e-09) + (((_3326 * _3327) + _3294) * _3309))) * _3326;
                                float _4388 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                                float _3347 = (_3272 * _3249) * (((_3295 * 3.1415927410125732421875) * (isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0)))) / ((_3317 * _3317) * ((_3262 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3347 * _3129.x;
                                frontier_phi_73_pred_1 = _3347 * _3129.y;
                                frontier_phi_73_pred_2 = _3273 * _3117.z;
                                frontier_phi_73_pred_3 = _3273 * _3117.y;
                                frontier_phi_73_pred_4 = _3273 * _3117.x;
                                frontier_phi_73_pred_5 = _3347 * _3129.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3351 = frontier_phi_73_pred;
                            _3352 = frontier_phi_73_pred_1;
                            _3356 = frontier_phi_73_pred_2;
                            _3355 = frontier_phi_73_pred_3;
                            _3354 = frontier_phi_73_pred_4;
                            _3353 = frontier_phi_73_pred_5;
                            _3059 = _3354 + _3072;
                            _3060 = _3355 + _3073;
                            _3061 = _3356 + _3074;
                            _3056 = _3351 + _3069;
                            _3057 = _3352 + _3070;
                            _3058 = _3353 + _3071;
                            if (_3076 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3069 = _3056;
                                _3070 = _3057;
                                _3071 = _3058;
                                _3072 = _3059;
                                _3073 = _3060;
                                _3074 = _3061;
                                _3075 = _3076;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3059;
                        frontier_phi_67_pred_1 = _3060;
                        frontier_phi_67_pred_2 = _3061;
                        frontier_phi_67_pred_3 = _3058;
                        frontier_phi_67_pred_4 = _3057;
                        frontier_phi_67_pred_5 = _3056;
                    }
                    _2724 = frontier_phi_67_pred;
                    _2726 = frontier_phi_67_pred_1;
                    _2728 = frontier_phi_67_pred_2;
                    _2722 = frontier_phi_67_pred_3;
                    _2720 = frontier_phi_67_pred_4;
                    _2718 = frontier_phi_67_pred_5;
                    uint _2863 = _2862 + 1u;
                    if (_2863 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2856 = _2718;
                        _2857 = _2720;
                        _2858 = _2722;
                        _2859 = _2724;
                        _2860 = _2726;
                        _2861 = _2728;
                        _2862 = _2863;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2726;
                frontier_phi_55_56_ladder_1 = _2728;
                frontier_phi_55_56_ladder_2 = _2724;
                frontier_phi_55_56_ladder_3 = _2722;
                frontier_phi_55_56_ladder_4 = _2720;
                frontier_phi_55_56_ladder_5 = _2718;
            }
            else
            {
                frontier_phi_55_56_ladder = _2604;
                frontier_phi_55_56_ladder_1 = _2606;
                frontier_phi_55_56_ladder_2 = _2602;
                frontier_phi_55_56_ladder_3 = _2600;
                frontier_phi_55_56_ladder_4 = _2598;
                frontier_phi_55_56_ladder_5 = _2596;
            }
            _2717 = frontier_phi_55_56_ladder_5;
            _2719 = frontier_phi_55_56_ladder_4;
            _2721 = frontier_phi_55_56_ladder_3;
            _2723 = frontier_phi_55_56_ladder_2;
            _2725 = frontier_phi_55_56_ladder;
            _2727 = frontier_phi_55_56_ladder_1;
        }
        float _2732 = isnan(1.0) ? _728 : (isnan(_728) ? 1.0 : min(_728, 1.0));
        _2463 = (_2732 * _2723) + _1899;
        _2465 = (_2732 * _2725) + _1901;
        _2467 = (_2732 * _2727) + _1903;
        _2469 = ((_2717 * _713) * _2732) + _2244;
        _2471 = ((_2719 * _715) * _2732) + _2246;
        _2473 = ((_2721 * _716) * _2732) + _2248;
    }
    else
    {
        _2463 = _1899;
        _2465 = _1901;
        _2467 = _1903;
        _2469 = _2244;
        _2471 = _2246;
        _2473 = _2248;
    }
    uint _2479 = _689 + uint(cbMatDynParam._m0[0u].w);
    float _2485 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2491 = (((((_2485 * cbMtdParam._m0[10u].x) * _422.x) * _445) * (((1.0 - _499) * cbMtdParam._m0[16u].z) + _499)) * _536) * cbInstanceData._m0[_2479].x;
    float _2497 = (((((_2485 * cbMtdParam._m0[10u].y) * _422.y) * _445) * (((1.0 - _501) * cbMtdParam._m0[16u].z) + _501)) * _536) * cbInstanceData._m0[_2479].y;
    float _2503 = (((((_2485 * cbMtdParam._m0[10u].z) * _422.z) * _445) * (((1.0 - _503) * cbMtdParam._m0[16u].z) + _503)) * _536) * cbInstanceData._m0[_2479].z;
    float _4404 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _4415 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _4426 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _2520 = (((isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2463 + ((isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))) * _728))) + ((_2469 + ((isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))) * _1537)) * cbPerFrame._m0[3u].x)) + _2491;
    float _2522 = (_2497 + ((_2471 + ((isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0))) * _1537)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0))) * (_2465 + ((isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0))) * _728)));
    float _2524 = (_2503 + ((_2473 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1537)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0))) * (_2467 + ((isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0))) * _728)));
    float _4452 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2537 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    uint _2538 = _688 + 6u;
    float _2546 = _650 / cbSceneParam._m0[86u].x;
    float _2547 = _651 / cbSceneParam._m0[86u].y;
    vec4 _2561 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2546, _2547, (log2((isnan(cbSceneParam._m0[77u].w) ? _585 : (isnan(_585) ? cbSceneParam._m0[77u].w : min(_585, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2563 = _2561.x;
    float _2564 = _2561.y;
    float _2565 = _2561.z;
    float _2566 = _2561.w;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    if (_585 > cbSceneParam._m0[78u].w)
    {
        float _2621 = isnan(_585) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _585 : min(cbSceneParam._m0[80u].w, _585));
        float _2622 = _2621 / _585;
        float _2633 = _2622 * _635;
        float _2634 = _636 * _2622;
        float _2635 = (-0.0) - _2634;
        float _2636 = _2622 * _637;
        float _2638 = (cbSceneParam._m0[77u].w * _2635) / _2621;
        float _2639 = _2638 + cbSceneParam._m0[79u].w;
        float _2640 = cbSceneParam._m0[79u].w - _2634;
        float _2646 = sqrt(((_2633 * _2633) + (_2634 * _2634)) + (_2636 * _2636));
        float _2649 = (1.0 - (cbSceneParam._m0[77u].w / _2621)) * _2646;
        float _2654 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2656 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2818;
        if (abs((_2635 - _2638) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2818 = ((((_2639 > 0.0) ? exp2(_2654 * _2639) : (2.0 - exp2(_2656 * _2639))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2649;
        }
        else
        {
            float _2778 = 1.0 / cbSceneParam._m0[80u].x;
            float _2779 = isnan(_2640) ? _2639 : (isnan(_2639) ? _2640 : max(_2639, _2640));
            float _2780 = isnan(_2640) ? _2639 : (isnan(_2639) ? _2640 : min(_2639, _2640));
            float _2789 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : min(_2779, 0.0));
            float _2790 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : min(_2780, 0.0));
            _2818 = ((abs(_2646 / _2635) * cbSceneParam._m0[80u].y) * ((((_2789 - _2790) * 2.0) - ((exp2(_2654 * (isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0)))) - exp2(_2654 * (isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0))))) * _2778)) - ((exp2(_2656 * _2789) - exp2(_2656 * _2790)) * _2778))) + (_2649 * cbSceneParam._m0[80u].z);
        }
        vec4 _2820 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2546, _2547, 1.0), 0.0);
        float _2829 = exp2((_2818 * (-1.44269502162933349609375)) * (1.0 - _2820.w));
        float _2830 = log2(_2829);
        float _2846 = log2(_2566);
        _2658 = (exp2(_2846 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].x)) * _2820.x) / cbSceneParam._m0[78u].x)) + _2563;
        _2660 = (exp2(_2846 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].y)) * _2820.y) / cbSceneParam._m0[78u].y)) + _2564;
        _2662 = (exp2(_2846 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2830 * cbSceneParam._m0[78u].z)) * _2820.z) / cbSceneParam._m0[78u].z)) + _2565;
        _2664 = _2829 * _2566;
    }
    else
    {
        _2658 = _2563;
        _2660 = _2564;
        _2662 = _2565;
        _2664 = _2566;
    }
    float _2676 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2677 = _2676 == 3.0;
    float _2678 = log2(_2664);
    float _2682 = exp2(_2678 * cbSceneParam._m0[78u].x);
    float _2683 = exp2(_2678 * cbSceneParam._m0[78u].y);
    float _2684 = exp2(_2678 * cbSceneParam._m0[78u].z);
    float _2685 = _2682 * (isnan(0.0) ? _2520 : (isnan(_2520) ? 0.0 : max(_2520, 0.0)));
    float _2686 = _2683 * (isnan(0.0) ? _2522 : (isnan(_2522) ? 0.0 : max(_2522, 0.0)));
    float _2687 = _2684 * (isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0)));
    float _2696 = (_2676 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2696 * (_2677 ? _2685 : (_2685 + (cbSceneParam._m0[72u].w * _2658)));
    SV_Target.y = _2696 * (_2677 ? _2686 : (_2686 + (cbSceneParam._m0[72u].w * _2660)));
    SV_Target.z = _2696 * (_2677 ? _2687 : (_2687 + (cbSceneParam._m0[72u].w * _2662)));
    SV_Target.w = cbInstanceData._m0[_2538].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2491) * _2537) * _2682) * _2696;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2497) * _2537) * _2683) * _2696;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2503) * _2537) * _2684) * _2696;
    SV_Target_1.w = cbInstanceData._m0[_2538].w;
}


