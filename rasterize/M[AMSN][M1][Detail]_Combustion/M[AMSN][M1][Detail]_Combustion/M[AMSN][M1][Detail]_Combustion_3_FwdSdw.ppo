#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1106;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    vec4 _298 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _309 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (_298.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3772 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[12u].x) - _252)) + _252;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[12u].y) - _253)) + _253;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[12u].z) - _254)) + _254;
    vec4 _331 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _333 = _331.x;
    float _335 = _333 - (_333 * _310);
    vec4 _347 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _370 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _374 = _370.z;
    float _377 = (_370.x * 2.0) + (-1.0);
    float _378 = (_370.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3783 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _384 = sqrt(1.0 - (isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))));
    float _392 = (((_347.z - _374) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _374;
    float _412 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _413 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _426 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_412 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_413 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _440 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3794 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _449 = (((_441 * _441) * (3.0 - (_441 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _458 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _466 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3805 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
    float _471 = (_467 * _467) * (3.0 - (_467 * 2.0));
    float _472 = _471 * cbMtdParam._m0[17u].x;
    float _473 = _471 * cbMtdParam._m0[17u].y;
    float _474 = sin(_458);
    float _475 = cos(_458);
    float _476 = TEXCOORD - _472;
    float _477 = TEXCOORD_1 - _473;
    vec4 _497 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_472 + fma(_477, (-0.0) - _474, _476 * _475))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_477, _475, _476 * _474) + _473)) + cbTextureTilingScale._m0[0u].w));
    float _503 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _497.x;
    float _505 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _497.y;
    float _507 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _497.z;
    vec4 _530 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _412) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _413) + cbTextureTilingScale._m0[5u].w));
    float _539 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_530.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3816 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
    float _550 = (((((_347.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _377) + (cbMtdParam._m0[16u].y * _377);
    float _552 = (((((_347.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _378) + (cbMtdParam._m0[16u].y * _378);
    float _555 = fma(_384, _217 * NORMAL.x, fma(_552, _224 * TANGENT.x, (_210 * _202) * _550));
    float _558 = fma(_384, _217 * NORMAL.y, fma(_552, _224 * TANGENT.y, (_210 * _203) * _550));
    float _561 = fma(_384, _217 * NORMAL.z, fma(_552, _224 * TANGENT.z, (_210 * _204) * _550));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _3827 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _569 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
    float _3838 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3849 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3860 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3871 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _573 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _639 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _629);
    float _640 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _629);
    float _641 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _629);
    float _645 = inversesqrt(dot(vec3(_639, _640, _641), vec3(_639, _640, _641)));
    float _646 = _639 * _645;
    float _647 = _640 * _645;
    float _648 = _641 * _645;
    float _654 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _655 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _673 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _676 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _679 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    uint _692 = uint(roundEven(NORMAL.w)) * 13u;
    uint _693 = _692 + 9u;
    uint _694 = _693 + uint(cbMatDynParam._m0[0u].w);
    float _700 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0)))) * cbInstanceData._m0[_694].x;
    float _701 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0)))) * cbInstanceData._m0[_694].y;
    float _702 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0)))) * cbInstanceData._m0[_694].z;
    float _3882 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _703 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
    float _3893 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _704 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
    float _3904 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _706 = 1.0 - _573;
    float _707 = _703 * _706;
    float _708 = _704 * _706;
    float _709 = _705 * _706;
    float _714 = (_703 + (-0.039999999105930328369140625)) * _573;
    float _715 = (_704 + (-0.039999999105930328369140625)) * _573;
    float _716 = (_705 + (-0.039999999105930328369140625)) * _573;
    float _717 = _714 + 0.039999999105930328369140625;
    float _719 = _715 + 0.039999999105930328369140625;
    float _720 = _716 + 0.039999999105930328369140625;
    vec4 _729 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _654, cbSceneParam._m0[86u].y * _655));
    float _732 = _729.x * TEXCOORD_3.w;
    float _733 = dot(vec3(_566, _567, _568), vec3(_646, _647, _648));
    float _736 = _733 * 2.0;
    float _740 = (_736 * _566) - _646;
    float _741 = (_736 * _567) - _647;
    float _742 = (_736 * _568) - _648;
    float _746 = abs(dot(vec3(_646, _647, _648), vec3(_566, _567, _568)));
    float _3915 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _748 = sqrt(_569);
    float _760 = exp2((_748 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_748 * 3.0));
    float _766 = (1.0 - _760) * ((_748 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _767 = _760 * _748;
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _799 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1105;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _830 = fma(_803, cbModelParam._m0[26u].z, fma(_799, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _795));
        float _834 = fma(_803, cbModelParam._m0[27u].z, fma(_799, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _795));
        float _838 = fma(_803, cbModelParam._m0[28u].z, fma(_799, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _795));
        float _863 = _795 + _566;
        float _864 = _799 + _567;
        float _865 = _803 + _568;
        float _875 = fma(_865, cbModelParam._m0[26u].z, fma(_864, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _863)) - _830;
        float _876 = fma(_865, cbModelParam._m0[27u].z, fma(_864, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _863)) - _834;
        float _877 = fma(_865, cbModelParam._m0[28u].z, fma(_864, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _863)) - _838;
        float _881 = inversesqrt(dot(vec3(_875, _876, _877), vec3(_875, _876, _877)));
        float _894 = ((_881 * _875) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_830 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _895 = ((_881 * _876) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_834 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _896 = ((_881 * _877) / cbModelParam._m0[34u].z) + ((((((_838 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_894, _895, _896), 0.0);
        float _933 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_899.x + (-0.5));
        float _935 = _933 * (_899.y + (-0.5));
        float _936 = _933 * (_899.z + (-0.5));
        float _943 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_906.x + (-0.5));
        float _945 = _943 * (_906.y + (-0.5));
        float _946 = _943 * (_906.z + (-0.5));
        float _953 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_913.x + (-0.5));
        float _955 = _953 * (_913.y + (-0.5));
        float _956 = _953 * (_913.z + (-0.5));
        float _963 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_920.x + (-0.5));
        float _965 = _963 * (_920.y + (-0.5));
        float _966 = _963 * (_920.z + (-0.5));
        float _967 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _968 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _969 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _970 = _934 * 0.5;
        float _971 = _944 * 0.5;
        float _972 = _954 * 0.5;
        float _973 = dot(vec3(_970, _971, _972), vec3(_970, _971, _972));
        float _978 = (_973 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_973);
        float _987 = (dot(vec3(_566, _567, _568), vec3(_978 * _970, _978 * _971, _978 * _972)) + 1.0) * 0.5;
        float _3941 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _997 = sqrt(((_971 * _971) + (_970 * _970)) + (_972 * _972)) / (_967 + 9.9999997473787516355514526367188e-06);
        float _3952 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3963 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0))) * (_999 + 1.0))) + _1004) * _967;
        float _1014 = _935 * 0.5;
        float _1015 = _945 * 0.5;
        float _1016 = _955 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(_566, _567, _568), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3974 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_968 + 9.9999997473787516355514526367188e-06);
        float _3985 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3996 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0))) * (_1041 + 1.0))) + _1046) * _968;
        float _1056 = _936 * 0.5;
        float _1057 = _946 * 0.5;
        float _1058 = _956 * 0.5;
        float _1059 = dot(vec3(_1056, _1057, _1058), vec3(_1056, _1057, _1058));
        float _1064 = (_1059 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1059);
        float _1072 = (dot(vec3(_566, _567, _568), vec3(_1064 * _1056, _1064 * _1057, _1064 * _1058)) + 1.0) * 0.5;
        float _4007 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1081 = sqrt(((_1057 * _1057) + (_1056 * _1056)) + (_1058 * _1058)) / (_969 + 9.9999997473787516355514526367188e-06);
        float _4018 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
        float _1083 = _1082 * 2.0;
        float _1087 = (1.0 - _1082) / (_1082 + 1.0);
        float _4029 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _1097 = ((((1.0 - _1088) * (_1083 + 2.0)) * exp2(log2(isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_1083 + 1.0))) + _1088) * _969;
        _1105 = _936;
        _1107 = _935;
        _1108 = _934;
        _1109 = _946;
        _1110 = _945;
        _1111 = _944;
        _1112 = _956;
        _1113 = _955;
        _1114 = _954;
        _1115 = _969;
        _1116 = _968;
        _1117 = _967;
        _1118 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1119 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
        _1120 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0)));
    }
    else
    {
        _1105 = _1106;
        _1107 = _1106;
        _1108 = _1106;
        _1109 = _1106;
        _1110 = _1106;
        _1111 = _1106;
        _1112 = _1106;
        _1113 = _1106;
        _1114 = _1106;
        _1115 = _1106;
        _1116 = _1106;
        _1117 = _1106;
        _1118 = 0.0;
        _1119 = 0.0;
        _1120 = 0.0;
    }
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1146 = fma(_803, cbModelParam._m0[30u].z, fma(_799, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _795));
        float _1150 = fma(_803, cbModelParam._m0[31u].z, fma(_799, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _795));
        float _1154 = fma(_803, cbModelParam._m0[32u].z, fma(_799, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _795));
        float _1177 = _795 + _566;
        float _1178 = _799 + _567;
        float _1179 = _803 + _568;
        float _1189 = fma(_1179, cbModelParam._m0[30u].z, fma(_1178, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1177)) - _1146;
        float _1190 = fma(_1179, cbModelParam._m0[31u].z, fma(_1178, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1177)) - _1150;
        float _1191 = fma(_1179, cbModelParam._m0[32u].z, fma(_1178, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1177)) - _1154;
        float _1195 = inversesqrt(dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191)));
        float _1208 = ((_1195 * _1189) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1146 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1209 = ((_1195 * _1190) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1150 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1210 = ((_1195 * _1191) / cbModelParam._m0[35u].z) + ((((((_1154 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1212 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1208, _1209, _1210), 0.0);
        float _1245 = exp2((_1212.w + (-0.5)) * 20.0) * 2.0;
        float _1246 = _1245 * (_1212.x + (-0.5));
        float _1247 = _1245 * (_1212.y + (-0.5));
        float _1248 = _1245 * (_1212.z + (-0.5));
        float _1255 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1219.x + (-0.5));
        float _1257 = _1255 * (_1219.y + (-0.5));
        float _1258 = _1255 * (_1219.z + (-0.5));
        float _1265 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1226.x + (-0.5));
        float _1267 = _1265 * (_1226.y + (-0.5));
        float _1268 = _1265 * (_1226.z + (-0.5));
        float _1275 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1233.x + (-0.5));
        float _1277 = _1275 * (_1233.y + (-0.5));
        float _1278 = _1275 * (_1233.z + (-0.5));
        float _1279 = isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0));
        float _1280 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1281 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1282 = _1246 * 0.5;
        float _1283 = _1256 * 0.5;
        float _1284 = _1266 * 0.5;
        float _1285 = dot(vec3(_1282, _1283, _1284), vec3(_1282, _1283, _1284));
        float _1290 = (_1285 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1285);
        float _1298 = (dot(vec3(_566, _567, _568), vec3(_1290 * _1282, _1290 * _1283, _1290 * _1284)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1307 = sqrt(((_1283 * _1283) + (_1282 * _1282)) + (_1284 * _1284)) / (_1279 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1308 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1309 = _1308 * 2.0;
        float _1313 = (1.0 - _1308) / (_1308 + 1.0);
        float _4092 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1314 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1323 = ((((1.0 - _1314) * (_1309 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1309 + 1.0))) + _1314) * _1279;
        float _1324 = _1247 * 0.5;
        float _1325 = _1257 * 0.5;
        float _1326 = _1267 * 0.5;
        float _1327 = dot(vec3(_1324, _1325, _1326), vec3(_1324, _1325, _1326));
        float _1332 = (_1327 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1327);
        float _1340 = (dot(vec3(_566, _567, _568), vec3(_1332 * _1324, _1332 * _1325, _1332 * _1326)) + 1.0) * 0.5;
        float _4103 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1349 = sqrt(((_1325 * _1325) + (_1324 * _1324)) + (_1326 * _1326)) / (_1280 + 9.9999997473787516355514526367188e-06);
        float _4114 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
        float _1351 = _1350 * 2.0;
        float _1355 = (1.0 - _1350) / (_1350 + 1.0);
        float _4125 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1356 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _1365 = ((((1.0 - _1356) * (_1351 + 2.0)) * exp2(log2(isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_1351 + 1.0))) + _1356) * _1280;
        float _1366 = _1248 * 0.5;
        float _1367 = _1258 * 0.5;
        float _1368 = _1268 * 0.5;
        float _1369 = dot(vec3(_1366, _1367, _1368), vec3(_1366, _1367, _1368));
        float _1374 = (_1369 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1369);
        float _1382 = (dot(vec3(_566, _567, _568), vec3(_1374 * _1366, _1374 * _1367, _1374 * _1368)) + 1.0) * 0.5;
        float _4136 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1391 = sqrt(((_1367 * _1367) + (_1366 * _1366)) + (_1368 * _1368)) / (_1281 + 9.9999997473787516355514526367188e-06);
        float _4147 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
        float _1393 = _1392 * 2.0;
        float _1397 = (1.0 - _1392) / (_1392 + 1.0);
        float _4158 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1398 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
        float _1407 = ((((1.0 - _1398) * (_1393 + 2.0)) * exp2(log2(isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_1393 + 1.0))) + _1398) * _1281;
        _1415 = _1248;
        _1416 = _1247;
        _1417 = _1246;
        _1418 = _1258;
        _1419 = _1257;
        _1420 = _1256;
        _1421 = _1268;
        _1422 = _1267;
        _1423 = _1266;
        _1424 = _1281;
        _1425 = _1280;
        _1426 = _1279;
        _1427 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0)));
        _1428 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0)));
        _1429 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0)));
    }
    else
    {
        _1415 = _1106;
        _1416 = _1106;
        _1417 = _1106;
        _1418 = _1106;
        _1419 = _1106;
        _1420 = _1106;
        _1421 = _1106;
        _1422 = _1106;
        _1423 = _1106;
        _1424 = _1106;
        _1425 = _1106;
        _1426 = _1106;
        _1427 = 0.0;
        _1428 = 0.0;
        _1429 = 0.0;
    }
    float _1439 = (cbModelParam._m0[1u].x * (_1427 - _1118)) + _1118;
    float _1440 = (cbModelParam._m0[1u].x * (_1428 - _1119)) + _1119;
    float _1441 = (cbModelParam._m0[1u].x * (_1429 - _1120)) + _1120;
    float _1462 = fma(_1441, cbSceneParam._m0[89u].z, fma(_1440, cbSceneParam._m0[89u].y, _1439 * cbSceneParam._m0[89u].x));
    float _1465 = fma(_1441, cbSceneParam._m0[90u].z, fma(_1440, cbSceneParam._m0[90u].y, _1439 * cbSceneParam._m0[90u].x));
    float _1468 = fma(_1441, cbSceneParam._m0[91u].z, fma(_1440, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1439));
    float _1483 = _740 * 0.5;
    float _1484 = _741 * 0.5;
    float _1485 = _742 * 0.5;
    float _1486 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1417, _1420, _1423, _1426));
    float _1489 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1416, _1419, _1422, _1425));
    float _1492 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1415, _1418, _1421, _1424));
    float _1526;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1499 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1105, _1109, _1112, _1115));
        float _1503 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1107, _1110, _1113, _1116));
        float _1507 = dot(vec4(_1483, _1484, _1485, 1.0), vec4(_1108, _1111, _1114, _1117));
        float _1514 = dot(vec4(cbModelParam._m0[39u]), vec4(_1483, _1484, _1485, 1.0));
        _1526 = dot(vec3(isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1514) ? 0.0 : (isnan(0.0) ? _1514 : max(0.0, _1514))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1526 = 1.0;
    }
    float _1537;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1528 = dot(vec4(cbModelParam._m0[40u]), vec4(_1483, _1484, _1485, 1.0));
        _1537 = dot(vec3(isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)), isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)), isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1528) ? 0.0 : (isnan(0.0) ? _1528 : max(0.0, _1528))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1537 = 1.0;
    }
    float _1541 = (_1537 * cbModelParam._m0[1u].x) + (_1526 * (1.0 - cbModelParam._m0[1u].x));
    float _1551 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _569);
    float _1552 = isnan(_1551) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1551 : min(cbModelParam._m0[25u].z, _1551));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1599 = fma(_803, cbModelParam._m0[13u].z, fma(_799, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _795)) + cbModelParam._m0[13u].w;
        float _1603 = fma(_803, cbModelParam._m0[14u].z, fma(_799, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _795)) + cbModelParam._m0[14u].w;
        float _1607 = fma(_803, cbModelParam._m0[15u].z, fma(_799, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _795)) + cbModelParam._m0[15u].w;
        float _1610 = fma(_742, cbModelParam._m0[13u].z, fma(_741, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740));
        float _1613 = fma(_742, cbModelParam._m0[14u].z, fma(_741, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740));
        float _1616 = fma(_742, cbModelParam._m0[15u].z, fma(_741, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740));
        float _1644;
        if (_1610 > 0.0)
        {
            _1644 = abs((1.0 - _1599) / _1610);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1599 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1644 = frontier_phi_14_12_ladder;
        }
        float _1817;
        if (_1613 > 0.0)
        {
            _1817 = abs((1.0 - _1603) / _1613);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1603 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1817 = frontier_phi_23_19_ladder;
        }
        float _2112;
        if (_1616 > 0.0)
        {
            _2112 = abs((1.0 - _1607) / _1616);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1607 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2112 = frontier_phi_35_30_ladder;
        }
        float _2114 = isnan(_1817) ? _1644 : (isnan(_1644) ? _1817 : min(_1644, _1817));
        float _2115 = isnan(_2112) ? _2114 : (isnan(_2114) ? _2112 : min(_2114, _2112));
        float _2119 = (_2115 * _1610) + _1599;
        float _2120 = (_2115 * _1613) + _1603;
        float _2121 = (_2115 * _1616) + _1607;
        float _2122 = _2115 * 9.9999997473787516355514526367188e-05;
        float _2124 = (-1.0) - _2122;
        float _2126 = _2122 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2121 > _2126) || ((_2121 < _2124) || ((_2120 > _2126) || ((_2120 < _2124) || ((_2119 < _2124) || (_2119 > _2126))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2266 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2121, cbModelParam._m0[9u].z, fma(_2120, cbModelParam._m0[9u].y, _2119 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2121, cbModelParam._m0[10u].z, fma(_2120, cbModelParam._m0[10u].y, _2119 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2121, cbModelParam._m0[11u].z, fma(_2120, cbModelParam._m0[11u].y, _2119 * cbModelParam._m0[11u].x))), _1552);
            frontier_phi_13_35_ladder = _2266.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2266.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2266.x * cbModelParam._m0[1u].y;
        }
        _1632 = frontier_phi_13_35_ladder_2;
        _1634 = frontier_phi_13_35_ladder_1;
        _1636 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_740, _741, _742), _1552);
        _1632 = _1620.x * cbModelParam._m0[1u].y;
        _1634 = _1620.y * cbModelParam._m0[1u].y;
        _1636 = _1620.z * cbModelParam._m0[1u].y;
    }
    float _1640 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _569);
    float _1641 = isnan(_1640) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1640 : min(cbModelParam._m0[25u].w, _1640));
    float _1732;
    float _1734;
    float _1736;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1696 = fma(_803, cbModelParam._m0[21u].z, fma(_799, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _795)) + cbModelParam._m0[21u].w;
        float _1700 = fma(_803, cbModelParam._m0[22u].z, fma(_799, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _795)) + cbModelParam._m0[22u].w;
        float _1704 = fma(_803, cbModelParam._m0[23u].z, fma(_799, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _795)) + cbModelParam._m0[23u].w;
        float _1707 = fma(_742, cbModelParam._m0[21u].z, fma(_741, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740));
        float _1710 = fma(_742, cbModelParam._m0[22u].z, fma(_741, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740));
        float _1713 = fma(_742, cbModelParam._m0[23u].z, fma(_741, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740));
        float _1822;
        if (_1707 > 0.0)
        {
            _1822 = abs((1.0 - _1696) / _1707);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1707 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1696 + 1.0) / _1707);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1822 = frontier_phi_25_21_ladder;
        }
        float _2139;
        if (_1710 > 0.0)
        {
            _2139 = abs((1.0 - _1700) / _1710);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1710 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1700 + 1.0) / _1710);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2139 = frontier_phi_37_32_ladder;
        }
        float _2477;
        if (_1713 > 0.0)
        {
            _2477 = abs((1.0 - _1704) / _1713);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1704 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2477 = frontier_phi_47_44_ladder;
        }
        float _2479 = isnan(_2139) ? _1822 : (isnan(_1822) ? _2139 : min(_1822, _2139));
        float _2480 = isnan(_2477) ? _2479 : (isnan(_2479) ? _2477 : min(_2479, _2477));
        float _2484 = (_2480 * _1707) + _1696;
        float _2485 = (_2480 * _1710) + _1700;
        float _2486 = (_2480 * _1713) + _1704;
        float _2487 = _2480 * 9.9999997473787516355514526367188e-05;
        float _2488 = (-1.0) - _2487;
        float _2490 = _2487 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2486 > _2490) || ((_2486 < _2488) || ((_2485 > _2490) || ((_2485 < _2488) || ((_2484 < _2488) || (_2484 > _2490))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2486, cbModelParam._m0[17u].z, fma(_2485, cbModelParam._m0[17u].y, _2484 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2486, cbModelParam._m0[18u].z, fma(_2485, cbModelParam._m0[18u].y, _2484 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2486, cbModelParam._m0[19u].z, fma(_2485, cbModelParam._m0[19u].y, _2484 * cbModelParam._m0[19u].x))), _1641);
            frontier_phi_22_47_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1732 = frontier_phi_22_47_ladder_2;
        _1734 = frontier_phi_22_47_ladder_1;
        _1736 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1716 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_740, _741, _742), _1641);
        _1732 = _1716.x * cbModelParam._m0[1u].z;
        _1734 = _1716.y * cbModelParam._m0[1u].z;
        _1736 = _1716.z * cbModelParam._m0[1u].z;
    }
    float _1749 = (((_766 * _717) + _767) * _732) * ((cbModelParam._m0[1u].w * (_1732 - _1632)) + _1632);
    float _1751 = (((_766 * _719) + _767) * _732) * ((cbModelParam._m0[1u].w * (_1734 - _1634)) + _1634);
    float _1753 = (((_766 * _720) + _767) * _732) * ((cbModelParam._m0[1u].w * (_1736 - _1636)) + _1636);
    float _1756 = fma(_1753, cbSceneParam._m0[89u].z, fma(_1751, cbSceneParam._m0[89u].y, _1749 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1753, cbSceneParam._m0[90u].z, fma(_1751, cbSceneParam._m0[90u].y, _1749 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1753, cbSceneParam._m0[91u].z, fma(_1751, cbSceneParam._m0[91u].y, _1749 * cbSceneParam._m0[91u].x));
    float _1796 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1800 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1809 = _1796 / _1808;
    float _1810 = _1800 / _1808;
    float _1811 = _1804 / _1808;
    float _1958;
    float _1959;
    float _1960;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1838 = ((uint(_1811 > cbSceneParam._m0[59u].y) + uint(_1811 > cbSceneParam._m0[59u].x)) + uint(_1811 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1839 = _1838 + 43u;
        uint _1847 = _1838 + 44u;
        uint _1855 = _1838 + 45u;
        uint _1863 = _1838 + 46u;
        float _1874 = fma(_1808, cbSceneParam._m0[_1839].w, fma(_1804, cbSceneParam._m0[_1839].z, fma(_1800, cbSceneParam._m0[_1839].y, _1796 * cbSceneParam._m0[_1839].x)));
        float _1878 = fma(_1808, cbSceneParam._m0[_1847].w, fma(_1804, cbSceneParam._m0[_1847].z, fma(_1800, cbSceneParam._m0[_1847].y, _1796 * cbSceneParam._m0[_1847].x)));
        float _1886 = fma(_1808, cbSceneParam._m0[_1863].w, fma(_1804, cbSceneParam._m0[_1863].z, fma(_1800, cbSceneParam._m0[_1863].y, _1796 * cbSceneParam._m0[_1863].x)));
        float _1891 = cbSceneParam._m0[33u].z * _1886;
        float _1893 = cbSceneParam._m0[33u].w * _1886;
        float _1896 = fma(_1808, cbSceneParam._m0[_1855].w, fma(_1804, cbSceneParam._m0[_1855].z, fma(_1800, cbSceneParam._m0[_1855].y, _1796 * cbSceneParam._m0[_1855].x))) / _1886;
        float _1944 = (cbSceneParam._m0[33u].x - sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811))) * cbSceneParam._m0[33u].y;
        float _4284 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
        float _1951 = (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1891 + _1874) / _1886, (_1893 + _1878) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1893 + _1874) / _1886, (_1878 - _1891) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 - _1891) / _1886, (_1878 - _1893) / _1886), _1896), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1874 - _1893) / _1886, (_1891 + _1878) / _1886), _1896), 0.0)).x), vec4(0.25)));
        _1958 = 1.0 - (_1951 * cbSceneParam._m0[34u].x);
        _1959 = 1.0 - (_1951 * cbSceneParam._m0[34u].y);
        _1960 = 1.0 - (_1951 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1958 = 1.0;
        _1959 = 1.0;
        _1960 = 1.0;
    }
    float _2024;
    float _2026;
    float _2028;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2012 = fma(_1808, cbSceneParam._m0[63u].w, fma(_1804, cbSceneParam._m0[63u].z, fma(_1800, cbSceneParam._m0[63u].y, _1796 * cbSceneParam._m0[63u].x)));
        float _2013 = fma(_1808, cbSceneParam._m0[60u].w, fma(_1804, cbSceneParam._m0[60u].z, fma(_1800, cbSceneParam._m0[60u].y, _1796 * cbSceneParam._m0[60u].x))) / _2012;
        float _2014 = fma(_1808, cbSceneParam._m0[61u].w, fma(_1804, cbSceneParam._m0[61u].z, fma(_1800, cbSceneParam._m0[61u].y, _1796 * cbSceneParam._m0[61u].x))) / _2012;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2013 >= cbSceneParam._m0[64u].x) && (_2014 >= cbSceneParam._m0[64u].y)) && (_2013 <= cbSceneParam._m0[64u].z)) && (_2014 <= cbSceneParam._m0[64u].w))
        {
            float _2152 = fma(_1808, cbSceneParam._m0[62u].w, fma(_1804, cbSceneParam._m0[62u].z, fma(_1800, cbSceneParam._m0[62u].y, _1796 * cbSceneParam._m0[62u].x))) / _2012;
            float _2156 = isnan(cbSceneParam._m0[41u].w) ? _2152 : (isnan(_2152) ? cbSceneParam._m0[41u].w : max(_2152, cbSceneParam._m0[41u].w));
            float _2199 = (cbSceneParam._m0[33u].x - sqrt(((_1810 * _1810) + (_1809 * _1809)) + (_1811 * _1811))) * cbSceneParam._m0[33u].y;
            float _4300 = isnan(0.0) ? _2199 : (isnan(_2199) ? 0.0 : max(_2199, 0.0));
            float _2206 = (isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2013, cbSceneParam._m0[33u].w + _2014), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2013, _2014 - cbSceneParam._m0[33u].z), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2013 - cbSceneParam._m0[33u].z, _2014 - cbSceneParam._m0[33u].w), _2156), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2013 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2014), _2156), 0.0)).x), vec4(0.25)));
            float _2210 = 1.0 - (_2206 * cbSceneParam._m0[34u].x);
            float _2211 = 1.0 - (_2206 * cbSceneParam._m0[34u].y);
            float _2212 = 1.0 - (_2206 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2212) ? _1960 : (isnan(_1960) ? _2212 : min(_1960, _2212));
            frontier_phi_34_33_ladder_1 = isnan(_2211) ? _1959 : (isnan(_1959) ? _2211 : min(_1959, _2211));
            frontier_phi_34_33_ladder_2 = isnan(_2210) ? _1958 : (isnan(_1958) ? _2210 : min(_1958, _2210));
        }
        else
        {
            frontier_phi_34_33_ladder = _1960;
            frontier_phi_34_33_ladder_1 = _1959;
            frontier_phi_34_33_ladder_2 = _1958;
        }
        _2024 = frontier_phi_34_33_ladder_2;
        _2026 = frontier_phi_34_33_ladder_1;
        _2028 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2024 = _1958;
        _2026 = _1959;
        _2028 = _1960;
    }
    uvec4 _2033 = floatBitsToUint(cbInstanceData._m0[_692 + 5u]);
    uint _2035 = _2033.x * 14u;
    uint _2036 = _2035 + 13u;
    float _2043 = _732 + (-1.0);
    float _2048 = (cbLight._m0[_2036].x * _2043) + 1.0;
    float _2049 = (cbLight._m0[_2036].y * _2043) + 1.0;
    float _2050 = (cbLight._m0[_2036].z * _2043) + 1.0;
    float _2051 = (cbLight._m0[_2036].w * _2043) + 1.0;
    uint _2052 = _2035 + 5u;
    float _2058 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
    uint _2062 = _2035 + 4u;
    float _2071 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2075 = _2035 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_566, _567, _568));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_566, _567, _568));
    float _4336 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4347 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2052].x * _2058) * _2096) + (((cbLight._m0[_2062].x * _2024) * _2071) * _2094);
    float _2104 = ((_2058 * cbLight._m0[_2052].y) * _2096) + (((cbLight._m0[_2062].y * _2026) * _2071) * _2094);
    float _2105 = ((_2058 * cbLight._m0[_2052].z) * _2096) + (((cbLight._m0[_2062].z * _2028) * _2071) * _2094);
    uvec4 _2109 = floatBitsToUint(cbLight._m0[_2035 + 12u]);
    bool _2111 = _2109.x == 0u;
    float _2213;
    float _2215;
    float _2217;
    if (_2111)
    {
        _2213 = _2103;
        _2215 = _2104;
        _2217 = _2105;
    }
    else
    {
        uint _2221 = _2035 + 6u;
        float _2237 = (dot(vec3(cbLight._m0[_2035 + 2u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2238 = _2237 * _2237;
        float _4358 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
        float _2239 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2240 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2213 = (((cbLight._m0[_2221].x * 0.3183098733425140380859375) * _2239) * _2240) + _2103;
        _2215 = (((cbLight._m0[_2221].y * 0.3183098733425140380859375) * _2239) * _2240) + _2104;
        _2217 = (((cbLight._m0[_2221].z * 0.3183098733425140380859375) * _2239) * _2240) + _2105;
    }
    bool _2220 = _2109.y == 0u;
    float _2275;
    float _2277;
    float _2279;
    if (_2220)
    {
        _2275 = _2213;
        _2277 = _2215;
        _2279 = _2217;
    }
    else
    {
        uint _2448 = _2035 + 7u;
        float _2464 = (dot(vec3(cbLight._m0[_2035 + 3u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2465 = _2464 * _2464;
        float _4374 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2466 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2467 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2275 = (((cbLight._m0[_2448].x * 0.3183098733425140380859375) * _2466) * _2467) + _2213;
        _2277 = (((cbLight._m0[_2448].y * 0.3183098733425140380859375) * _2466) * _2467) + _2215;
        _2279 = (((cbLight._m0[_2448].z * 0.3183098733425140380859375) * _2466) * _2467) + _2217;
    }
    uint _2282 = _2035 + 8u;
    float _2295 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2035].w)) * _569) * 0.949999988079071044921875);
    float _2296 = _2295 * _2295;
    float _2297 = cbLight._m0[_2035].x + _646;
    float _2298 = cbLight._m0[_2035].y + _647;
    float _2299 = cbLight._m0[_2035].z + _648;
    float _2303 = inversesqrt(dot(vec3(_2297, _2298, _2299), vec3(_2297, _2298, _2299)));
    float _2304 = _2303 * _2297;
    float _2305 = _2303 * _2298;
    float _2306 = _2303 * _2299;
    float _2307 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2035].xyz));
    float _4390 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2310 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _4401 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _2311 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2312 = dot(vec3(_566, _567, _568), vec3(_2304, _2305, _2306));
    float _4412 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2316 = dot(vec3(cbLight._m0[_2035].xyz), vec3(_2304, _2305, _2306));
    float _4423 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2320 = _2296 * _2296;
    float _2324 = ((_2315 * _2315) * (_2320 + (-1.0))) + 1.0;
    float _2332 = exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0);
    float _2333 = 0.959999978542327880859375 - _714;
    float _2335 = 0.959999978542327880859375 - _715;
    float _2336 = 0.959999978542327880859375 - _716;
    float _2343 = 1.0 - _2296;
    float _2354 = (0.5 / (((_2311 * ((_2310 * _2343) + _2296)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2343) + _2296) * _2310))) * _2310;
    float _4434 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2356 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2320 / ((_2324 * _2324) * 3.141590118408203125));
    uint _2370 = _2035 + 9u;
    float _2381 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _569) * 0.949999988079071044921875);
    float _2382 = _2381 * _2381;
    float _2383 = cbLight._m0[_2075].x + _646;
    float _2384 = cbLight._m0[_2075].y + _647;
    float _2385 = cbLight._m0[_2075].z + _648;
    float _2389 = inversesqrt(dot(vec3(_2383, _2384, _2385), vec3(_2383, _2384, _2385)));
    float _2390 = _2389 * _2383;
    float _2391 = _2389 * _2384;
    float _2392 = _2389 * _2385;
    float _2393 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2075].xyz));
    float _4445 = isnan(0.0) ? _2393 : (isnan(_2393) ? 0.0 : max(_2393, 0.0));
    float _2396 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2397 = dot(vec3(_566, _567, _568), vec3(_2390, _2391, _2392));
    float _4456 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
    float _2400 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2401 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2390, _2391, _2392));
    float _4467 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
    float _2405 = _2382 * _2382;
    float _2409 = ((_2400 * _2400) * (_2405 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
    float _2423 = 1.0 - _2382;
    float _2433 = (0.5 / (((_2311 * ((_2396 * _2423) + _2382)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2423) + _2382) * _2396))) * _2396;
    float _4478 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
    float _2435 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2405 / ((_2409 * _2409) * 3.141590118408203125));
    float _2445 = (((((_2416 * _2333) + _717) * cbLight._m0[_2370].x) * _2435) * _2058) + ((((cbLight._m0[_2282].x * _2024) * ((_2332 * _2333) + _717)) * _2356) * _2071);
    float _2446 = (((((_2416 * _2335) + _719) * cbLight._m0[_2370].y) * _2435) * _2058) + ((((cbLight._m0[_2282].y * _2026) * ((_2332 * _2335) + _719)) * _2356) * _2071);
    float _2447 = (((((_2416 * _2336) + _720) * cbLight._m0[_2370].z) * _2435) * _2058) + ((((cbLight._m0[_2282].z * _2028) * ((_2332 * _2336) + _720)) * _2356) * _2071);
    float _2503;
    float _2505;
    float _2507;
    if (_2111)
    {
        _2503 = _2445;
        _2505 = _2446;
        _2507 = _2447;
    }
    else
    {
        uint _2509 = _2035 + 2u;
        uint _2513 = _2035 + 10u;
        float _2527 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2509].w)) * _569) * 0.949999988079071044921875);
        float _2528 = _2527 * _2527;
        float _2529 = cbLight._m0[_2509].x + _646;
        float _2530 = cbLight._m0[_2509].y + _647;
        float _2531 = cbLight._m0[_2509].z + _648;
        float _2535 = inversesqrt(dot(vec3(_2529, _2530, _2531), vec3(_2529, _2530, _2531)));
        float _2536 = _2535 * _2529;
        float _2537 = _2535 * _2530;
        float _2538 = _2535 * _2531;
        float _2539 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2509].xyz));
        float _4489 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
        float _2542 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2543 = dot(vec3(_566, _567, _568), vec3(_2536, _2537, _2538));
        float _4500 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2546 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2547 = dot(vec3(cbLight._m0[_2509].xyz), vec3(_2536, _2537, _2538));
        float _4511 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0));
        float _2551 = _2528 * _2528;
        float _2555 = ((_2546 * _2546) * (_2551 + (-1.0))) + 1.0;
        float _2562 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
        float _2569 = 1.0 - _2528;
        float _2579 = (0.5 / (((_2311 * ((_2542 * _2569) + _2528)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2569) + _2528) * _2542))) * _2542;
        float _4522 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
        float _2581 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2551 / ((_2555 * _2555) * 3.141590118408203125));
        float _2582 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2503 = (((((_2562 * _2333) + _717) * cbLight._m0[_2513].x) * _2581) * _2582) + _2445;
        _2505 = (((((_2562 * _2335) + _719) * cbLight._m0[_2513].y) * _2581) * _2582) + _2446;
        _2507 = (((((_2562 * _2336) + _720) * cbLight._m0[_2513].z) * _2581) * _2582) + _2447;
    }
    float _2613;
    float _2615;
    float _2617;
    if (_2220)
    {
        _2613 = _2503;
        _2615 = _2505;
        _2617 = _2507;
    }
    else
    {
        uint _2624 = _2035 + 3u;
        uint _2628 = _2035 + 11u;
        float _2642 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2624].w)) * _569) * 0.949999988079071044921875);
        float _2643 = _2642 * _2642;
        float _2644 = cbLight._m0[_2624].x + _646;
        float _2645 = cbLight._m0[_2624].y + _647;
        float _2646 = cbLight._m0[_2624].z + _648;
        float _2650 = inversesqrt(dot(vec3(_2644, _2645, _2646), vec3(_2644, _2645, _2646)));
        float _2651 = _2650 * _2644;
        float _2652 = _2650 * _2645;
        float _2653 = _2650 * _2646;
        float _2654 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2624].xyz));
        float _4538 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
        float _2657 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2658 = dot(vec3(_566, _567, _568), vec3(_2651, _2652, _2653));
        float _4549 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        float _2661 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2662 = dot(vec3(cbLight._m0[_2624].xyz), vec3(_2651, _2652, _2653));
        float _4560 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
        float _2666 = _2643 * _2643;
        float _2670 = ((_2661 * _2661) * (_2666 + (-1.0))) + 1.0;
        float _2677 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
        float _2684 = 1.0 - _2643;
        float _2694 = (0.5 / (((_2311 * ((_2657 * _2684) + _2643)) + 9.9999999392252902907785028219223e-09) + (((_2311 * _2684) + _2643) * _2657))) * _2657;
        float _4571 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
        float _2696 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2666 / ((_2670 * _2670) * 3.141590118408203125));
        float _2697 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
        _2613 = (((((_2677 * _2333) + _717) * cbLight._m0[_2628].x) * _2696) * _2697) + _2503;
        _2615 = (((((_2677 * _2335) + _719) * cbLight._m0[_2628].y) * _2696) * _2697) + _2505;
        _2617 = (((((_2677 * _2336) + _720) * cbLight._m0[_2628].z) * _2696) * _2697) + _2507;
    }
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    float _2773;
    if (_2033.y == 0u)
    {
        uvec4 _2718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2719 = _2718.x;
        uint _2730 = uint((float(_2718.y) * floor(float(uint(cbSceneParam._m0[85u].y * _655) / _2719))) + floor(float(uint(cbSceneParam._m0[85u].x * _654) / _2719)));
        float _2740 = (log2(_1811 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2741 = isnan(0.0) ? _2740 : (isnan(_2740) ? 0.0 : max(_2740, 0.0));
        uint _2744 = uint(isnan(14.0) ? _2741 : (isnan(_2741) ? 14.0 : min(_2741, 14.0)));
        uvec4 _2749 = texelFetch(g_lightClusterGridBuffer, int(((_2744 << 2u) + (_2730 << 6u)) >> 2u));
        uint _2750 = _2749.x;
        uint _2751 = _2718.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2751 >> 4u) & 15u)) + 4294967295u) & _2750) == 0u) || ((_2751 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3044)
                {
                    frontier_phi_66_pred = _3033;
                    frontier_phi_66_pred_1 = _3032;
                    frontier_phi_66_pred_2 = _3031;
                    frontier_phi_66_pred_3 = _3030;
                    frontier_phi_66_pred_4 = _3029;
                    frontier_phi_66_pred_5 = _3028;
                }
                else
                {
                    float _3152;
                    float _3153;
                    float _3154;
                    float _3155;
                    float _3156;
                    float _3157;
                    uint _3158;
                    _3152 = _3028;
                    _3153 = _3029;
                    _3154 = _3030;
                    _3155 = _3031;
                    _3156 = _3032;
                    _3157 = _3033;
                    _3158 = _3043;
                    float _3084;
                    float _3085;
                    float _3086;
                    float _3087;
                    float _3088;
                    float _3089;
                    for (;;)
                    {
                        uint _3162 = uint(findLSB(_3158)) + (_3034 << 5u);
                        uint _3159 = (_3158 + 4294967295u) & _3158;
                        uint _3164 = _3162 * 48u;
                        vec4 _3178 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3164)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3164 + 3u)).x));
                        uint _3184 = (_3162 * 48u) + 4u;
                        vec4 _3197 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3184)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3184 + 3u)).x));
                        uint _3203 = (_3162 * 48u) + 8u;
                        vec3 _3214 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3203)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3203 + 2u)).x));
                        float _3218 = _3178.x - _1809;
                        float _3219 = _3178.y - _1810;
                        float _3220 = _3178.z - _1811;
                        float _3221 = dot(vec3(_3218, _3219, _3220), vec3(_3218, _3219, _3220));
                        float _3224 = inversesqrt(_3221);
                        float _3225 = _3224 * _3218;
                        float _3226 = _3224 * _3219;
                        float _3227 = _3224 * _3220;
                        float _3228 = dot(vec3(_673, _676, _679), vec3(_3225, _3226, _3227));
                        float _3233 = 1.0 - (_3221 * _3178.w);
                        float _4597 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3234 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3235 = sqrt(_3221) * _3197.w;
                        float _3238 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                        float _3239 = _3238 * _3238;
                        float _3242 = ((1.0 - _3239) * _3228) + _3239;
                        float _3245 = _3235 * _3235;
                        float _3249 = ((isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))) * _3234) / ((_3245 * 0.699999988079071044921875) + 1.0);
                        float _3253 = (-0.0) - _1809;
                        float _3254 = (-0.0) - _1810;
                        float _3255 = (-0.0) - _1811;
                        float _3259 = inversesqrt(dot(vec3(_3253, _3254, _3255), vec3(_3253, _3254, _3255)));
                        float _3260 = _3259 * _3253;
                        float _3261 = _3259 * _3254;
                        float _3262 = _3259 * _3255;
                        float _3269 = exp2(log2(1.0 / ((_3245 * 3.5) + 5.0)) * 0.25);
                        float _3270 = 1.0 - _748;
                        float _3277 = sqrt(1.0 - ((1.0 - (_3270 * _3270)) * (1.0 - (_3269 * _3269))));
                        float _3278 = _3277 * _3277;
                        float _3279 = _3278 * _3278;
                        float _3280 = _3260 + _3225;
                        float _3281 = _3261 + _3226;
                        float _3282 = _3262 + _3227;
                        float _3286 = inversesqrt(dot(vec3(_3280, _3281, _3282), vec3(_3280, _3281, _3282)));
                        float _3290 = dot(vec3(_673, _676, _679), vec3(_3260, _3261, _3262));
                        float _4613 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3294 = dot(vec3(_673, _676, _679), vec3(_3286 * _3280, _3286 * _3281, _3286 * _3282));
                        float _4624 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                        float _3297 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3301 = ((_3297 * _3297) * (_3279 + (-1.0))) + 1.0;
                        float _3302 = _3238 * _3278;
                        float _3303 = _3302 * _3302;
                        float _3306 = ((1.0 - _3303) * _3228) + _3303;
                        float _4635 = isnan(0.0) ? _3306 : (isnan(_3306) ? 0.0 : max(_3306, 0.0));
                        float _3307 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3308 = 1.0 - _3278;
                        float _3318 = (0.5 / (((_3307 * ((_3293 * _3308) + _3278)) + 9.9999999392252902907785028219223e-09) + (((_3307 * _3308) + _3278) * _3293))) * _3307;
                        float _4646 = isnan(0.0) ? _3318 : (isnan(_3318) ? 0.0 : max(_3318, 0.0));
                        float _3329 = (((_3279 * 3.1415927410125732421875) * (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) / ((_3301 * _3301) * ((_3245 * 2.1991131305694580078125) + 3.141590118408203125))) * _3234;
                        _3087 = (_3249 * _3197.x) + _3155;
                        _3088 = (_3249 * _3197.y) + _3156;
                        _3089 = (_3249 * _3197.z) + _3157;
                        _3084 = (_3329 * _3214.x) + _3152;
                        _3085 = (_3329 * _3214.y) + _3153;
                        _3086 = (_3329 * _3214.z) + _3154;
                        if (_3159 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3152 = _3084;
                            _3153 = _3085;
                            _3154 = _3086;
                            _3155 = _3087;
                            _3156 = _3088;
                            _3157 = _3089;
                            _3158 = _3159;
                        }
                    }
                    frontier_phi_66_pred = _3089;
                    frontier_phi_66_pred_1 = _3088;
                    frontier_phi_66_pred_2 = _3087;
                    frontier_phi_66_pred_3 = _3086;
                    frontier_phi_66_pred_4 = _3085;
                    frontier_phi_66_pred_5 = _3084;
                }
                _2886 = frontier_phi_66_pred;
                _2884 = frontier_phi_66_pred_1;
                _2882 = frontier_phi_66_pred_2;
                _2880 = frontier_phi_66_pred_3;
                _2878 = frontier_phi_66_pred_4;
                _2876 = frontier_phi_66_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2876;
                    _3029 = _2878;
                    _3030 = _2880;
                    _3031 = _2882;
                    _3032 = _2884;
                    _3033 = _2886;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2892) & _2750) == 0u)
        {
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_1809, _1810, _1811), vec3(_1809, _1810, _1811)));
            float _3022 = _3021 * _1809;
            float _3023 = _3021 * _1810;
            float _3024 = _3021 * _1811;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3135 = _2875;
                float _3136 = _2877;
                float _3137 = _2879;
                float _3138 = _2881;
                float _3139 = _2883;
                float _3140 = _2885;
                uint _3141 = _2892;
                uint _3150;
                bool _3151;
                for (;;)
                {
                    _3150 = texelFetch(g_lightClassification, int((((_2744 << 5u) + (_2730 << 9u)) + (_3141 << 2u)) >> 2u)).x;
                    _3151 = _3150 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3151)
                    {
                        frontier_phi_72_pred = _3140;
                        frontier_phi_72_pred_1 = _3139;
                        frontier_phi_72_pred_2 = _3138;
                        frontier_phi_72_pred_3 = _3137;
                        frontier_phi_72_pred_4 = _3136;
                        frontier_phi_72_pred_5 = _3135;
                    }
                    else
                    {
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3339;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3632;
                        float _3633;
                        float _3634;
                        float _3347 = _3135;
                        float _3348 = _3136;
                        float _3349 = _3137;
                        float _3350 = _3138;
                        float _3351 = _3139;
                        float _3352 = _3140;
                        uint _3353 = _3150;
                        uint _3354;
                        vec4 _3379;
                        float _3380;
                        vec4 _3395;
                        vec3 _3407;
                        vec4 _3422;
                        vec4 _3438;
                        float _3485;
                        bool _3486;
                        for (;;)
                        {
                            uint _3364 = ((_3141 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3353));
                            _3354 = (_3353 + 4294967295u) & _3353;
                            uint _3366 = _3364 * 40u;
                            _3379 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3366)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3366 + 3u)).x));
                            _3380 = _3379.w;
                            uint _3382 = (_3364 * 40u) + 4u;
                            _3395 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3382)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3382 + 3u)).x));
                            uint _3397 = (_3364 * 40u) + 8u;
                            _3407 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x));
                            uint _3409 = (_3364 * 40u) + 16u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3425 = (_3364 * 40u) + 20u;
                            _3438 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3425)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3425 + 3u)).x));
                            uint _3441 = (_3364 * 40u) + 24u;
                            vec4 _3454 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3441)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3441 + 3u)).x));
                            uint _3460 = (_3364 * 40u) + 28u;
                            vec4 _3473 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3460)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3460 + 3u)).x));
                            _3485 = fma(_1811, _3473.z, fma(_1810, _3473.y, _3473.x * _1809)) + _3473.w;
                            _3486 = !((fma(_1811, _3454.z, fma(_1810, _3454.y, _3454.x * _1809)) + _3454.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3486)
                            {
                                float _3513 = _3379.x - _1809;
                                float _3514 = _3379.y - _1810;
                                float _3515 = _3379.z - _1811;
                                float _3516 = dot(vec3(_3513, _3514, _3515), vec3(_3513, _3514, _3515));
                                float _3519 = inversesqrt(_3516);
                                float _3520 = _3519 * _3513;
                                float _3521 = _3519 * _3514;
                                float _3522 = _3519 * _3515;
                                float _3526 = 1.0 - (_3516 / (_3380 * _3380));
                                float _4657 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3531 = sqrt(_3516) * _3395.w;
                                float _3533 = 1.39999997615814208984375 / (_3531 + 1.39999997615814208984375);
                                float _3534 = _3533 * _3533;
                                float _3537 = ((1.0 - _3534) * dot(vec3(_3520, _3521, _3522), vec3(_673, _676, _679))) + _3534;
                                float _3540 = _3531 * _3531;
                                float _3544 = (fma(_1811, _3422.z, fma(_1810, _3422.y, _3422.x * _1809)) + _3422.w) / _3485;
                                float _3545 = (fma(_1811, _3438.z, fma(_1810, _3438.y, _3438.x * _1809)) + _3438.w) / _3485;
                                float _3549 = 1.0 - dot(vec2(_3544, _3545), vec2(_3544, _3545));
                                float _4673 = isnan(0.0) ? _3549 : (isnan(_3549) ? 0.0 : max(_3549, 0.0));
                                float _3550 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3551 = _3550 * (((isnan(0.0) ? _3537 : (isnan(_3537) ? 0.0 : max(_3537, 0.0))) * _3527) / ((_3540 * 0.699999988079071044921875) + 1.0));
                                float _3563 = exp2(log2(1.0 / ((_3540 * 3.5) + 5.0)) * 0.25);
                                float _3564 = 1.0 - _748;
                                float _3571 = sqrt(1.0 - ((1.0 - (_3564 * _3564)) * (1.0 - (_3563 * _3563))));
                                float _3572 = _3571 * _3571;
                                float _3573 = _3572 * _3572;
                                float _3574 = _3520 - _3022;
                                float _3575 = _3521 - _3023;
                                float _3576 = _3522 - _3024;
                                float _3580 = inversesqrt(dot(vec3(_3574, _3575, _3576), vec3(_3574, _3575, _3576)));
                                float _3584 = dot(vec3(_673, _676, _679), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4684 = isnan(0.0) ? _3584 : (isnan(_3584) ? 0.0 : max(_3584, 0.0));
                                float _3587 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3588 = dot(vec3(_673, _676, _679), vec3(_3580 * _3574, _3580 * _3575, _3580 * _3576));
                                float _4695 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3595 = ((_3591 * _3591) * (_3573 + (-1.0))) + 1.0;
                                float _3596 = _3533 * _3572;
                                float _3597 = _3596 * _3596;
                                float _3603 = ((1.0 - _3597) * dot(vec3(_673, _676, _679), vec3(_3520, _3521, _3522))) + _3597;
                                float _4706 = isnan(0.0) ? _3603 : (isnan(_3603) ? 0.0 : max(_3603, 0.0));
                                float _3604 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3605 = 1.0 - _3572;
                                float _3615 = (0.5 / (((_3604 * ((_3587 * _3605) + _3572)) + 9.9999999392252902907785028219223e-09) + (((_3604 * _3605) + _3572) * _3587))) * _3604;
                                float _4717 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3625 = (_3550 * _3527) * (((_3573 * 3.1415927410125732421875) * (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) / ((_3595 * _3595) * ((_3540 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3551 * _3395.y;
                                frontier_phi_78_pred_1 = _3551 * _3395.x;
                                frontier_phi_78_pred_2 = _3625 * _3407.z;
                                frontier_phi_78_pred_3 = _3625 * _3407.y;
                                frontier_phi_78_pred_4 = _3625 * _3407.x;
                                frontier_phi_78_pred_5 = _3551 * _3395.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3633 = frontier_phi_78_pred;
                            _3632 = frontier_phi_78_pred_1;
                            _3631 = frontier_phi_78_pred_2;
                            _3630 = frontier_phi_78_pred_3;
                            _3629 = frontier_phi_78_pred_4;
                            _3634 = frontier_phi_78_pred_5;
                            _3337 = _3632 + _3350;
                            _3338 = _3633 + _3351;
                            _3339 = _3634 + _3352;
                            _3334 = _3629 + _3347;
                            _3335 = _3630 + _3348;
                            _3336 = _3631 + _3349;
                            if (_3354 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3338;
                                _3352 = _3339;
                                _3353 = _3354;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3339;
                        frontier_phi_72_pred_1 = _3338;
                        frontier_phi_72_pred_2 = _3337;
                        frontier_phi_72_pred_3 = _3336;
                        frontier_phi_72_pred_4 = _3335;
                        frontier_phi_72_pred_5 = _3334;
                    }
                    _3007 = frontier_phi_72_pred;
                    _3005 = frontier_phi_72_pred_1;
                    _3003 = frontier_phi_72_pred_2;
                    _3001 = frontier_phi_72_pred_3;
                    _2999 = frontier_phi_72_pred_4;
                    _2997 = frontier_phi_72_pred_5;
                    uint _3142 = _3141 + 1u;
                    if (_3142 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3135 = _2997;
                        _3136 = _2999;
                        _3137 = _3001;
                        _3138 = _3003;
                        _3139 = _3005;
                        _3140 = _3007;
                        _3141 = _3142;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3007;
                frontier_phi_60_61_ladder_1 = _3005;
                frontier_phi_60_61_ladder_2 = _3001;
                frontier_phi_60_61_ladder_3 = _2999;
                frontier_phi_60_61_ladder_4 = _2997;
                frontier_phi_60_61_ladder_5 = _3003;
            }
            else
            {
                frontier_phi_60_61_ladder = _2885;
                frontier_phi_60_61_ladder_1 = _2883;
                frontier_phi_60_61_ladder_2 = _2879;
                frontier_phi_60_61_ladder_3 = _2877;
                frontier_phi_60_61_ladder_4 = _2875;
                frontier_phi_60_61_ladder_5 = _2881;
            }
            _2996 = frontier_phi_60_61_ladder_4;
            _2998 = frontier_phi_60_61_ladder_3;
            _3000 = frontier_phi_60_61_ladder_2;
            _3002 = frontier_phi_60_61_ladder_5;
            _3004 = frontier_phi_60_61_ladder_1;
            _3006 = frontier_phi_60_61_ladder;
        }
        float _3011 = isnan(1.0) ? _732 : (isnan(_732) ? 1.0 : min(_732, 1.0));
        _2763 = (_3011 * _3002) + _2275;
        _2765 = (_3011 * _3004) + _2277;
        _2767 = (_3011 * _3006) + _2279;
        _2769 = ((_2996 * _717) * _3011) + _2613;
        _2771 = ((_2998 * _719) * _3011) + _2615;
        _2773 = ((_3000 * _720) * _3011) + _2617;
    }
    else
    {
        _2763 = _2275;
        _2765 = _2277;
        _2767 = _2279;
        _2769 = _2613;
        _2771 = _2615;
        _2773 = _2617;
    }
    uint _2779 = _693 + uint(cbMatDynParam._m0[0u].w);
    float _2785 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2791 = (((((_2785 * cbMtdParam._m0[10u].x) * _426.x) * _449) * (((1.0 - _503) * cbMtdParam._m0[16u].z) + _503)) * _540) * cbInstanceData._m0[_2779].x;
    float _2797 = (((((_2785 * cbMtdParam._m0[10u].y) * _426.y) * _449) * (((1.0 - _505) * cbMtdParam._m0[16u].z) + _505)) * _540) * cbInstanceData._m0[_2779].y;
    float _2803 = (((((_2785 * cbMtdParam._m0[10u].z) * _426.z) * _449) * (((1.0 - _507) * cbMtdParam._m0[16u].z) + _507)) * _540) * cbInstanceData._m0[_2779].z;
    float _4733 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _4744 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _4755 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _2820 = (((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2763 + ((isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0))) * _732))) + ((_2769 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _1541)) * cbPerFrame._m0[3u].x)) + _2791;
    float _2822 = (_2797 + ((_2771 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _1541)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2765 + ((isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0))) * _732)));
    float _2824 = (_2803 + ((_2773 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1541)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2767 + ((isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0))) * _732)));
    float _4781 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2837 = isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0));
    uint _2838 = _692 + 6u;
    float _2846 = _654 / cbSceneParam._m0[86u].x;
    float _2847 = _655 / cbSceneParam._m0[86u].y;
    vec4 _2861 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2863 = _2861.x;
    float _2864 = _2861.y;
    float _2865 = _2861.z;
    float _2866 = _2861.w;
    float _2937;
    float _2939;
    float _2941;
    float _2943;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2901 = _2900 / _589;
        float _2912 = _2901 * _639;
        float _2913 = _640 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2915 = _2901 * _641;
        float _2917 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2918 = _2917 + cbSceneParam._m0[79u].w;
        float _2919 = cbSceneParam._m0[79u].w - _2913;
        float _2925 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2915 * _2915));
        float _2928 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2925;
        float _2933 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2935 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3097;
        if (abs((_2914 - _2917) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3097 = ((((_2918 > 0.0) ? exp2(_2933 * _2918) : (2.0 - exp2(_2935 * _2918))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2928;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : max(_2918, _2919));
            float _3059 = isnan(_2919) ? _2918 : (isnan(_2918) ? _2919 : min(_2918, _2919));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3097 = ((abs(_2925 / _2914) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2933 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2933 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2935 * _3068) - exp2(_2935 * _3069)) * _3057))) + (_2928 * cbSceneParam._m0[80u].z);
        }
        vec4 _3099 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2846, _2847, 1.0), 0.0);
        float _3108 = exp2((_3097 * (-1.44269502162933349609375)) * (1.0 - _3099.w));
        float _3109 = log2(_3108);
        float _3125 = log2(_2866);
        _2937 = (exp2(_3125 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].x)) * _3099.x) / cbSceneParam._m0[78u].x)) + _2863;
        _2939 = (exp2(_3125 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].y)) * _3099.y) / cbSceneParam._m0[78u].y)) + _2864;
        _2941 = (exp2(_3125 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3109 * cbSceneParam._m0[78u].z)) * _3099.z) / cbSceneParam._m0[78u].z)) + _2865;
        _2943 = _3108 * _2866;
    }
    else
    {
        _2937 = _2863;
        _2939 = _2864;
        _2941 = _2865;
        _2943 = _2866;
    }
    float _2955 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2956 = _2955 == 3.0;
    float _2957 = log2(_2943);
    float _2961 = exp2(_2957 * cbSceneParam._m0[78u].x);
    float _2962 = exp2(_2957 * cbSceneParam._m0[78u].y);
    float _2963 = exp2(_2957 * cbSceneParam._m0[78u].z);
    float _2964 = _2961 * (isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0)));
    float _2965 = _2962 * (isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0)));
    float _2966 = _2963 * (isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0)));
    float _2975 = (_2955 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2975 * (_2956 ? _2964 : (_2964 + (cbSceneParam._m0[72u].w * _2937)));
    SV_Target.y = _2975 * (_2956 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2939)));
    SV_Target.z = _2975 * (_2956 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2941)));
    SV_Target.w = cbInstanceData._m0[_2838].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2791) * _2837) * _2961) * _2975;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2797) * _2837) * _2962) * _2975;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2803) * _2837) * _2963) * _2975;
    SV_Target_1.w = cbInstanceData._m0[_2838].w;
}


