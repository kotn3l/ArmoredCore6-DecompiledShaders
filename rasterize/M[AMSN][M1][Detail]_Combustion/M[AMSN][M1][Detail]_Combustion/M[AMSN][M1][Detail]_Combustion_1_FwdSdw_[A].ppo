#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1113;
float _3812;
float _3813;
float _3814;
float _3815;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _204 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _205 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _206 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _212 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _219 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _226 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _254 = _248.x * cbMtdParam._m0[9u].x;
    float _255 = _248.y * cbMtdParam._m0[9u].y;
    float _256 = _248.z * cbMtdParam._m0[9u].z;
    vec4 _280 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _311 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3824 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _312 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _319 = (_312 * ((_280.x * cbMtdParam._m0[12u].x) - _254)) + _254;
    float _320 = (_312 * ((_280.y * cbMtdParam._m0[12u].y) - _255)) + _255;
    float _321 = (_312 * ((_280.z * cbMtdParam._m0[12u].z) - _256)) + _256;
    vec4 _333 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _356 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _360 = _356.z;
    float _363 = (_356.x * 2.0) + (-1.0);
    float _364 = (_356.y * 2.0) + (-1.0);
    float _365 = dot(vec2(_363, _364), vec2(_363, _364));
    float _3835 = isnan(0.0) ? _365 : (isnan(_365) ? 0.0 : max(_365, 0.0));
    float _370 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    float _378 = (((_333.z - _360) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _360;
    float _398 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _399 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _412 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_398 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_399 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _426 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3846 = isnan(0.0) ? _426 : (isnan(_426) ? 0.0 : max(_426, 0.0));
    float _427 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _435 = (((_427 * _427) * (3.0 - (_427 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _444 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _452 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3857 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0));
    float _457 = (_453 * _453) * (3.0 - (_453 * 2.0));
    float _458 = _457 * cbMtdParam._m0[17u].x;
    float _459 = _457 * cbMtdParam._m0[17u].y;
    float _460 = sin(_444);
    float _461 = cos(_444);
    float _462 = TEXCOORD - _458;
    float _463 = TEXCOORD_1 - _459;
    vec4 _483 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_458 + fma(_463, (-0.0) - _460, _462 * _461))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_463, _461, _462 * _460) + _459)) + cbTextureTilingScale._m0[0u].w));
    float _489 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _483.x;
    float _491 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _483.y;
    float _493 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _483.z;
    vec4 _516 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _398) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _399) + cbTextureTilingScale._m0[5u].w));
    float _525 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_516.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3868 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _526 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _536 = (((((_333.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _363) + (cbMtdParam._m0[16u].y * _363);
    float _538 = (((((_333.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _364) + (cbMtdParam._m0[16u].y * _364);
    float _541 = fma(_370, _219 * NORMAL.x, fma(_538, _226 * TANGENT.x, (_212 * _204) * _536));
    float _544 = fma(_370, _219 * NORMAL.y, fma(_538, _226 * TANGENT.y, (_212 * _205) * _536));
    float _547 = fma(_370, _219 * NORMAL.z, fma(_538, _226 * TANGENT.z, (_212 * _206) * _536));
    float _551 = inversesqrt(dot(vec3(_541, _544, _547), vec3(_541, _544, _547)));
    float _552 = _551 * _541;
    float _553 = _551 * _544;
    float _554 = _551 * _547;
    float _3879 = isnan(0.0) ? _378 : (isnan(_378) ? 0.0 : max(_378, 0.0));
    float _555 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _3890 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3901 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3912 = isnan(0.0) ? _321 : (isnan(_321) ? 0.0 : max(_321, 0.0));
    float _574 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _614 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _624 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _614);
    float _625 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _614);
    float _626 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _614);
    float _630 = inversesqrt(dot(vec3(_624, _625, _626), vec3(_624, _625, _626)));
    float _631 = _624 * _630;
    float _632 = _625 * _630;
    float _633 = _626 * _630;
    vec4 _638 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _640 = _638.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _793 = sqrt(((_624 * _624) + (_625 * _625)) + (_626 * _626));
        float _799 = (cbMatDynParam._m0[5u].x * _793) + cbMatDynParam._m0[5u].y;
        float _3923 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _800 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
        float _804 = (cbMatDynParam._m0[5u].z * _793) + cbMatDynParam._m0[5u].w;
        float _3934 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) - _800)) + _800) < ((_640 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _651 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _652 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _670 = fma(_554, cbSceneParam._m0[5u].z, fma(_553, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _552));
    float _673 = fma(_554, cbSceneParam._m0[6u].z, fma(_553, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _552));
    float _676 = fma(_554, cbSceneParam._m0[7u].z, fma(_553, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _552));
    uint _689 = uint(roundEven(NORMAL.w)) * 13u;
    uint _690 = _689 + 9u;
    uint _691 = _690 + uint(cbMatDynParam._m0[0u].w);
    float _697 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0)))) * cbInstanceData._m0[_691].x;
    float _698 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * cbInstanceData._m0[_691].y;
    float _699 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0)))) * cbInstanceData._m0[_691].z;
    float _3945 = isnan(0.0) ? _697 : (isnan(_697) ? 0.0 : max(_697, 0.0));
    float _700 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _3956 = isnan(0.0) ? _698 : (isnan(_698) ? 0.0 : max(_698, 0.0));
    float _701 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _3967 = isnan(0.0) ? _699 : (isnan(_699) ? 0.0 : max(_699, 0.0));
    float _702 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
    vec4 _711 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _651, cbSceneParam._m0[86u].y * _652));
    float _714 = _711.x * TEXCOORD_3.w;
    float _715 = dot(vec3(_552, _553, _554), vec3(_631, _632, _633));
    float _718 = _715 * 2.0;
    float _722 = (_718 * _552) - _631;
    float _723 = (_718 * _553) - _632;
    float _724 = (_718 * _554) - _633;
    float _728 = abs(dot(vec3(_631, _632, _633), vec3(_552, _553, _554)));
    float _3978 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _730 = sqrt(_555);
    float _742 = exp2((_730 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_730 * 3.0));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _782 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1112;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_782, cbModelParam._m0[26u].z, fma(_778, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _774));
        float _841 = fma(_782, cbModelParam._m0[27u].z, fma(_778, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _774));
        float _845 = fma(_782, cbModelParam._m0[28u].z, fma(_778, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _774));
        float _870 = _774 + _552;
        float _871 = _778 + _553;
        float _872 = _782 + _554;
        float _882 = fma(_872, cbModelParam._m0[26u].z, fma(_871, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _870)) - _837;
        float _883 = fma(_872, cbModelParam._m0[27u].z, fma(_871, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _870)) - _841;
        float _884 = fma(_872, cbModelParam._m0[28u].z, fma(_871, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _870)) - _845;
        float _888 = inversesqrt(dot(vec3(_882, _883, _884), vec3(_882, _883, _884)));
        float _901 = ((_888 * _882) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_888 * _883) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_888 * _884) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_901, _902, _903), 0.0);
        float _940 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _941 = _940 * (_906.x + (-0.5));
        float _942 = _940 * (_906.y + (-0.5));
        float _943 = _940 * (_906.z + (-0.5));
        float _950 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _951 = _950 * (_913.x + (-0.5));
        float _952 = _950 * (_913.y + (-0.5));
        float _953 = _950 * (_913.z + (-0.5));
        float _960 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _961 = _960 * (_920.x + (-0.5));
        float _962 = _960 * (_920.y + (-0.5));
        float _963 = _960 * (_920.z + (-0.5));
        float _970 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _971 = _970 * (_927.x + (-0.5));
        float _972 = _970 * (_927.y + (-0.5));
        float _973 = _970 * (_927.z + (-0.5));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = _941 * 0.5;
        float _978 = _951 * 0.5;
        float _979 = _961 * 0.5;
        float _980 = dot(vec3(_977, _978, _979), vec3(_977, _978, _979));
        float _985 = (_980 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_980);
        float _994 = (dot(vec3(_552, _553, _554), vec3(_985 * _977, _985 * _978, _985 * _979)) + 1.0) * 0.5;
        float _4004 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1004 = sqrt(((_978 * _978) + (_977 * _977)) + (_979 * _979)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _4015 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1006 = _1005 * 2.0;
        float _1010 = (1.0 - _1005) / (_1005 + 1.0);
        float _4026 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
        float _1020 = ((((1.0 - _1011) * (_1006 + 2.0)) * exp2(log2(isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0))) * (_1006 + 1.0))) + _1011) * _974;
        float _1021 = _942 * 0.5;
        float _1022 = _952 * 0.5;
        float _1023 = _962 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1037 = (dot(vec3(_552, _553, _554), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _4037 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1046 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _4048 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1048 = _1047 * 2.0;
        float _1052 = (1.0 - _1047) / (_1047 + 1.0);
        float _4059 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
        float _1062 = ((((1.0 - _1053) * (_1048 + 2.0)) * exp2(log2(isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0))) * (_1048 + 1.0))) + _1053) * _975;
        float _1063 = _943 * 0.5;
        float _1064 = _953 * 0.5;
        float _1065 = _963 * 0.5;
        float _1066 = dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065));
        float _1071 = (_1066 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1066);
        float _1079 = (dot(vec3(_552, _553, _554), vec3(_1071 * _1063, _1071 * _1064, _1071 * _1065)) + 1.0) * 0.5;
        float _4070 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1088 = sqrt(((_1064 * _1064) + (_1063 * _1063)) + (_1065 * _1065)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _4081 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1089 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
        float _1090 = _1089 * 2.0;
        float _1094 = (1.0 - _1089) / (_1089 + 1.0);
        float _4092 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
        float _1104 = ((((1.0 - _1095) * (_1090 + 2.0)) * exp2(log2(isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0))) * (_1090 + 1.0))) + _1095) * _976;
        _1112 = _943;
        _1114 = _942;
        _1115 = _941;
        _1116 = _953;
        _1117 = _952;
        _1118 = _951;
        _1119 = _963;
        _1120 = _962;
        _1121 = _961;
        _1122 = _976;
        _1123 = _975;
        _1124 = _974;
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0)));
    }
    else
    {
        _1112 = _1113;
        _1114 = _1113;
        _1115 = _1113;
        _1116 = _1113;
        _1117 = _1113;
        _1118 = _1113;
        _1119 = _1113;
        _1120 = _1113;
        _1121 = _1113;
        _1122 = _1113;
        _1123 = _1113;
        _1124 = _1113;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1156 = fma(_782, cbModelParam._m0[30u].z, fma(_778, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _774));
        float _1160 = fma(_782, cbModelParam._m0[31u].z, fma(_778, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _774));
        float _1164 = fma(_782, cbModelParam._m0[32u].z, fma(_778, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _774));
        float _1187 = _774 + _552;
        float _1188 = _778 + _553;
        float _1189 = _782 + _554;
        float _1199 = fma(_1189, cbModelParam._m0[30u].z, fma(_1188, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1187)) - _1156;
        float _1200 = fma(_1189, cbModelParam._m0[31u].z, fma(_1188, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1187)) - _1160;
        float _1201 = fma(_1189, cbModelParam._m0[32u].z, fma(_1188, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1187)) - _1164;
        float _1205 = inversesqrt(dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201)));
        float _1218 = ((_1205 * _1199) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1156 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1205 * _1200) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1160 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1220 = ((_1205 * _1201) / cbModelParam._m0[35u].z) + ((((((_1164 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1222 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1229 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1236 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1218, _1219, _1220), 0.0);
        float _1255 = exp2((_1222.w + (-0.5)) * 20.0) * 2.0;
        float _1256 = _1255 * (_1222.x + (-0.5));
        float _1257 = _1255 * (_1222.y + (-0.5));
        float _1258 = _1255 * (_1222.z + (-0.5));
        float _1265 = exp2((_1229.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1229.x + (-0.5));
        float _1267 = _1265 * (_1229.y + (-0.5));
        float _1268 = _1265 * (_1229.z + (-0.5));
        float _1275 = exp2((_1236.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1236.x + (-0.5));
        float _1277 = _1275 * (_1236.y + (-0.5));
        float _1278 = _1275 * (_1236.z + (-0.5));
        float _1285 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1243.x + (-0.5));
        float _1287 = _1285 * (_1243.y + (-0.5));
        float _1288 = _1285 * (_1243.z + (-0.5));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1292 = _1256 * 0.5;
        float _1293 = _1266 * 0.5;
        float _1294 = _1276 * 0.5;
        float _1295 = dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294));
        float _1300 = (_1295 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1295);
        float _1308 = (dot(vec3(_552, _553, _554), vec3(_1300 * _1292, _1300 * _1293, _1300 * _1294)) + 1.0) * 0.5;
        float _4133 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1317 = sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _4144 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
        float _1318 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1319 = _1318 * 2.0;
        float _1323 = (1.0 - _1318) / (_1318 + 1.0);
        float _4155 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _1333 = ((((1.0 - _1324) * (_1319 + 2.0)) * exp2(log2(isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_1319 + 1.0))) + _1324) * _1289;
        float _1334 = _1257 * 0.5;
        float _1335 = _1267 * 0.5;
        float _1336 = _1277 * 0.5;
        float _1337 = dot(vec3(_1334, _1335, _1336), vec3(_1334, _1335, _1336));
        float _1342 = (_1337 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1337);
        float _1350 = (dot(vec3(_552, _553, _554), vec3(_1342 * _1334, _1342 * _1335, _1342 * _1336)) + 1.0) * 0.5;
        float _4166 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1359 = sqrt(((_1335 * _1335) + (_1334 * _1334)) + (_1336 * _1336)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _4177 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1360 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1361 = _1360 * 2.0;
        float _1365 = (1.0 - _1360) / (_1360 + 1.0);
        float _4188 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1366 = isnan(1.0) ? _4188 : (isnan(_4188) ? 1.0 : min(_4188, 1.0));
        float _1375 = ((((1.0 - _1366) * (_1361 + 2.0)) * exp2(log2(isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_1361 + 1.0))) + _1366) * _1290;
        float _1376 = _1258 * 0.5;
        float _1377 = _1268 * 0.5;
        float _1378 = _1278 * 0.5;
        float _1379 = dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378));
        float _1384 = (_1379 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1379);
        float _1392 = (dot(vec3(_552, _553, _554), vec3(_1384 * _1376, _1384 * _1377, _1384 * _1378)) + 1.0) * 0.5;
        float _4199 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1401 = sqrt(((_1377 * _1377) + (_1376 * _1376)) + (_1378 * _1378)) / (_1291 + 9.9999997473787516355514526367188e-06);
        float _4210 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
        float _1402 = isnan(1.0) ? _4210 : (isnan(_4210) ? 1.0 : min(_4210, 1.0));
        float _1403 = _1402 * 2.0;
        float _1407 = (1.0 - _1402) / (_1402 + 1.0);
        float _4221 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1408 = isnan(1.0) ? _4221 : (isnan(_4221) ? 1.0 : min(_4221, 1.0));
        float _1417 = ((((1.0 - _1408) * (_1403 + 2.0)) * exp2(log2(isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0))) * (_1403 + 1.0))) + _1408) * _1291;
        _1425 = _1258;
        _1426 = _1257;
        _1427 = _1256;
        _1428 = _1268;
        _1429 = _1267;
        _1430 = _1266;
        _1431 = _1278;
        _1432 = _1277;
        _1433 = _1276;
        _1434 = _1291;
        _1435 = _1290;
        _1436 = _1289;
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)));
        _1439 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)));
    }
    else
    {
        _1425 = _1113;
        _1426 = _1113;
        _1427 = _1113;
        _1428 = _1113;
        _1429 = _1113;
        _1430 = _1113;
        _1431 = _1113;
        _1432 = _1113;
        _1433 = _1113;
        _1434 = _1113;
        _1435 = _1113;
        _1436 = _1113;
        _1437 = 0.0;
        _1438 = 0.0;
        _1439 = 0.0;
    }
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1125)) + _1125;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1126)) + _1126;
    float _1451 = (cbModelParam._m0[1u].x * (_1439 - _1127)) + _1127;
    float _1472 = fma(_1451, cbSceneParam._m0[89u].z, fma(_1450, cbSceneParam._m0[89u].y, _1449 * cbSceneParam._m0[89u].x));
    float _1475 = fma(_1451, cbSceneParam._m0[90u].z, fma(_1450, cbSceneParam._m0[90u].y, _1449 * cbSceneParam._m0[90u].x));
    float _1478 = fma(_1451, cbSceneParam._m0[91u].z, fma(_1450, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1449));
    float _1493 = _722 * 0.5;
    float _1494 = _723 * 0.5;
    float _1495 = _724 * 0.5;
    float _1496 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1427, _1430, _1433, _1436));
    float _1499 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1502 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1536;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1509 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1112, _1116, _1119, _1122));
        float _1513 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1517 = dot(vec4(_1493, _1494, _1495, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1524 = dot(vec4(cbModelParam._m0[39u]), vec4(_1493, _1494, _1495, 1.0));
        _1536 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1524) ? 0.0 : (isnan(0.0) ? _1524 : max(0.0, _1524))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1536 = 1.0;
    }
    float _1547;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1538 = dot(vec4(cbModelParam._m0[40u]), vec4(_1493, _1494, _1495, 1.0));
        _1547 = dot(vec3(isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1538) ? 0.0 : (isnan(0.0) ? _1538 : max(0.0, _1538))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1547 = 1.0;
    }
    float _1551 = (_1547 * cbModelParam._m0[1u].x) + (_1536 * (1.0 - cbModelParam._m0[1u].x));
    float _1561 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _555);
    float _1562 = isnan(_1561) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1561 : min(cbModelParam._m0[25u].z, _1561));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1609 = fma(_782, cbModelParam._m0[13u].z, fma(_778, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774)) + cbModelParam._m0[13u].w;
        float _1613 = fma(_782, cbModelParam._m0[14u].z, fma(_778, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774)) + cbModelParam._m0[14u].w;
        float _1617 = fma(_782, cbModelParam._m0[15u].z, fma(_778, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774)) + cbModelParam._m0[15u].w;
        float _1620 = fma(_724, cbModelParam._m0[13u].z, fma(_723, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _722));
        float _1623 = fma(_724, cbModelParam._m0[14u].z, fma(_723, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _722));
        float _1626 = fma(_724, cbModelParam._m0[15u].z, fma(_723, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _722));
        float _1654;
        if (_1620 > 0.0)
        {
            _1654 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1654 = frontier_phi_17_15_ladder;
        }
        float _1825;
        if (_1623 > 0.0)
        {
            _1825 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1825 = frontier_phi_26_22_ladder;
        }
        float _2120;
        if (_1626 > 0.0)
        {
            _2120 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2120 = frontier_phi_38_33_ladder;
        }
        float _2122 = isnan(_1825) ? _1654 : (isnan(_1654) ? _1825 : min(_1654, _1825));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1620) + _1609;
        float _2128 = (_2123 * _1623) + _1613;
        float _2129 = (_2123 * _1626) + _1617;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2132 = (-1.0) - _2130;
        float _2134 = _2130 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2129 > _2134) || ((_2129 < _2132) || ((_2128 > _2134) || ((_2128 < _2132) || ((_2127 < _2132) || (_2127 > _2134))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2274 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2129, cbModelParam._m0[9u].z, fma(_2128, cbModelParam._m0[9u].y, _2127 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2129, cbModelParam._m0[10u].z, fma(_2128, cbModelParam._m0[10u].y, _2127 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2129, cbModelParam._m0[11u].z, fma(_2128, cbModelParam._m0[11u].y, _2127 * cbModelParam._m0[11u].x))), _1562);
            frontier_phi_16_38_ladder = _2274.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2274.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2274.x * cbModelParam._m0[1u].y;
        }
        _1642 = frontier_phi_16_38_ladder_2;
        _1644 = frontier_phi_16_38_ladder_1;
        _1646 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_722, _723, _724), _1562);
        _1642 = _1630.x * cbModelParam._m0[1u].y;
        _1644 = _1630.y * cbModelParam._m0[1u].y;
        _1646 = _1630.z * cbModelParam._m0[1u].y;
    }
    float _1650 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _555);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1650 : min(cbModelParam._m0[25u].w, _1650));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1706 = fma(_782, cbModelParam._m0[21u].z, fma(_778, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774)) + cbModelParam._m0[21u].w;
        float _1710 = fma(_782, cbModelParam._m0[22u].z, fma(_778, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774)) + cbModelParam._m0[22u].w;
        float _1714 = fma(_782, cbModelParam._m0[23u].z, fma(_778, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774)) + cbModelParam._m0[23u].w;
        float _1717 = fma(_724, cbModelParam._m0[21u].z, fma(_723, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _722));
        float _1720 = fma(_724, cbModelParam._m0[22u].z, fma(_723, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _722));
        float _1723 = fma(_724, cbModelParam._m0[23u].z, fma(_723, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _722));
        float _1830;
        if (_1717 > 0.0)
        {
            _1830 = abs((1.0 - _1706) / _1717);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1706 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1830 = frontier_phi_28_24_ladder;
        }
        float _2147;
        if (_1720 > 0.0)
        {
            _2147 = abs((1.0 - _1710) / _1720);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1710 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2147 = frontier_phi_40_35_ladder;
        }
        float _2474;
        if (_1723 > 0.0)
        {
            _2474 = abs((1.0 - _1714) / _1723);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1714 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2474 = frontier_phi_50_47_ladder;
        }
        float _2476 = isnan(_2147) ? _1830 : (isnan(_1830) ? _2147 : min(_1830, _2147));
        float _2477 = isnan(_2474) ? _2476 : (isnan(_2476) ? _2474 : min(_2476, _2474));
        float _2481 = (_2477 * _1717) + _1706;
        float _2482 = (_2477 * _1720) + _1710;
        float _2483 = (_2477 * _1723) + _1714;
        float _2484 = _2477 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2484;
        float _2487 = _2484 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2483 > _2487) || ((_2483 < _2485) || ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 < _2485) || (_2481 > _2487))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2483, cbModelParam._m0[17u].z, fma(_2482, cbModelParam._m0[17u].y, _2481 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2483, cbModelParam._m0[18u].z, fma(_2482, cbModelParam._m0[18u].y, _2481 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2483, cbModelParam._m0[19u].z, fma(_2482, cbModelParam._m0[19u].y, _2481 * cbModelParam._m0[19u].x))), _1651);
            frontier_phi_25_50_ladder = _2601.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2601.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2601.x * cbModelParam._m0[1u].z;
        }
        _1742 = frontier_phi_25_50_ladder_2;
        _1744 = frontier_phi_25_50_ladder_1;
        _1746 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_722, _723, _724), _1651);
        _1742 = _1726.x * cbModelParam._m0[1u].z;
        _1744 = _1726.y * cbModelParam._m0[1u].z;
        _1746 = _1726.z * cbModelParam._m0[1u].z;
    }
    float _1758 = ((((1.0 - _742) * ((_730 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_742 * _730)) * _714;
    float _1759 = _1758 * ((cbModelParam._m0[1u].w * (_1742 - _1642)) + _1642);
    float _1760 = _1758 * ((cbModelParam._m0[1u].w * (_1744 - _1644)) + _1644);
    float _1761 = _1758 * ((cbModelParam._m0[1u].w * (_1746 - _1646)) + _1646);
    float _1764 = fma(_1761, cbSceneParam._m0[89u].z, fma(_1760, cbSceneParam._m0[89u].y, _1759 * cbSceneParam._m0[89u].x));
    float _1767 = fma(_1761, cbSceneParam._m0[90u].z, fma(_1760, cbSceneParam._m0[90u].y, _1759 * cbSceneParam._m0[90u].x));
    float _1770 = fma(_1761, cbSceneParam._m0[91u].z, fma(_1760, cbSceneParam._m0[91u].y, _1759 * cbSceneParam._m0[91u].x));
    float _1804 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1808 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1812 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1816 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1817 = _1804 / _1816;
    float _1818 = _1808 / _1816;
    float _1819 = _1812 / _1816;
    float _1966;
    float _1967;
    float _1968;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1846 = ((uint(_1819 > cbSceneParam._m0[59u].y) + uint(_1819 > cbSceneParam._m0[59u].x)) + uint(_1819 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1847 = _1846 + 43u;
        uint _1855 = _1846 + 44u;
        uint _1863 = _1846 + 45u;
        uint _1871 = _1846 + 46u;
        float _1882 = fma(_1816, cbSceneParam._m0[_1847].w, fma(_1812, cbSceneParam._m0[_1847].z, fma(_1808, cbSceneParam._m0[_1847].y, _1804 * cbSceneParam._m0[_1847].x)));
        float _1886 = fma(_1816, cbSceneParam._m0[_1855].w, fma(_1812, cbSceneParam._m0[_1855].z, fma(_1808, cbSceneParam._m0[_1855].y, _1804 * cbSceneParam._m0[_1855].x)));
        float _1894 = fma(_1816, cbSceneParam._m0[_1871].w, fma(_1812, cbSceneParam._m0[_1871].z, fma(_1808, cbSceneParam._m0[_1871].y, _1804 * cbSceneParam._m0[_1871].x)));
        float _1899 = cbSceneParam._m0[33u].z * _1894;
        float _1901 = cbSceneParam._m0[33u].w * _1894;
        float _1904 = fma(_1816, cbSceneParam._m0[_1863].w, fma(_1812, cbSceneParam._m0[_1863].z, fma(_1808, cbSceneParam._m0[_1863].y, _1804 * cbSceneParam._m0[_1863].x))) / _1894;
        float _1952 = (cbSceneParam._m0[33u].x - sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819))) * cbSceneParam._m0[33u].y;
        float _4347 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1959 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1899 + _1882) / _1894, (_1901 + _1886) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1901 + _1882) / _1894, (_1886 - _1899) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 - _1899) / _1894, (_1886 - _1901) / _1894), _1904), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 - _1901) / _1894, (_1899 + _1886) / _1894), _1904), 0.0)).x), vec4(0.25)));
        _1966 = 1.0 - (_1959 * cbSceneParam._m0[34u].x);
        _1967 = 1.0 - (_1959 * cbSceneParam._m0[34u].y);
        _1968 = 1.0 - (_1959 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1966 = 1.0;
        _1967 = 1.0;
        _1968 = 1.0;
    }
    float _2032;
    float _2034;
    float _2036;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2020 = fma(_1816, cbSceneParam._m0[63u].w, fma(_1812, cbSceneParam._m0[63u].z, fma(_1808, cbSceneParam._m0[63u].y, _1804 * cbSceneParam._m0[63u].x)));
        float _2021 = fma(_1816, cbSceneParam._m0[60u].w, fma(_1812, cbSceneParam._m0[60u].z, fma(_1808, cbSceneParam._m0[60u].y, _1804 * cbSceneParam._m0[60u].x))) / _2020;
        float _2022 = fma(_1816, cbSceneParam._m0[61u].w, fma(_1812, cbSceneParam._m0[61u].z, fma(_1808, cbSceneParam._m0[61u].y, _1804 * cbSceneParam._m0[61u].x))) / _2020;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2021 >= cbSceneParam._m0[64u].x) && (_2022 >= cbSceneParam._m0[64u].y)) && (_2021 <= cbSceneParam._m0[64u].z)) && (_2022 <= cbSceneParam._m0[64u].w))
        {
            float _2160 = fma(_1816, cbSceneParam._m0[62u].w, fma(_1812, cbSceneParam._m0[62u].z, fma(_1808, cbSceneParam._m0[62u].y, _1804 * cbSceneParam._m0[62u].x))) / _2020;
            float _2164 = isnan(cbSceneParam._m0[41u].w) ? _2160 : (isnan(_2160) ? cbSceneParam._m0[41u].w : max(_2160, cbSceneParam._m0[41u].w));
            float _2207 = (cbSceneParam._m0[33u].x - sqrt(((_1818 * _1818) + (_1817 * _1817)) + (_1819 * _1819))) * cbSceneParam._m0[33u].y;
            float _4363 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
            float _2214 = (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2021, cbSceneParam._m0[33u].w + _2022), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2021, _2022 - cbSceneParam._m0[33u].z), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2021 - cbSceneParam._m0[33u].z, _2022 - cbSceneParam._m0[33u].w), _2164), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2021 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2022), _2164), 0.0)).x), vec4(0.25)));
            float _2218 = 1.0 - (_2214 * cbSceneParam._m0[34u].x);
            float _2219 = 1.0 - (_2214 * cbSceneParam._m0[34u].y);
            float _2220 = 1.0 - (_2214 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2220) ? _1968 : (isnan(_1968) ? _2220 : min(_1968, _2220));
            frontier_phi_37_36_ladder_1 = isnan(_2219) ? _1967 : (isnan(_1967) ? _2219 : min(_1967, _2219));
            frontier_phi_37_36_ladder_2 = isnan(_2218) ? _1966 : (isnan(_1966) ? _2218 : min(_1966, _2218));
        }
        else
        {
            frontier_phi_37_36_ladder = _1968;
            frontier_phi_37_36_ladder_1 = _1967;
            frontier_phi_37_36_ladder_2 = _1966;
        }
        _2032 = frontier_phi_37_36_ladder_2;
        _2034 = frontier_phi_37_36_ladder_1;
        _2036 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2032 = _1966;
        _2034 = _1967;
        _2036 = _1968;
    }
    uvec4 _2041 = floatBitsToUint(cbInstanceData._m0[_689 + 5u]);
    uint _2043 = _2041.x * 14u;
    uint _2044 = _2043 + 13u;
    float _2051 = _714 + (-1.0);
    float _2056 = (cbLight._m0[_2044].x * _2051) + 1.0;
    float _2057 = (cbLight._m0[_2044].y * _2051) + 1.0;
    float _2058 = (cbLight._m0[_2044].z * _2051) + 1.0;
    float _2059 = (cbLight._m0[_2044].w * _2051) + 1.0;
    uint _2060 = _2043 + 5u;
    float _2066 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
    uint _2070 = _2043 + 4u;
    float _2079 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2083 = _2043 | 1u;
    float _2094 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_552, _553, _554));
    float _2097 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_552, _553, _554));
    float _4399 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _4410 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2102 = (isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * 0.3183098733425140380859375;
    float _2104 = (isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * 0.3183098733425140380859375;
    float _2111 = ((cbLight._m0[_2060].x * _2066) * _2104) + (((cbLight._m0[_2070].x * _2032) * _2079) * _2102);
    float _2112 = ((_2066 * cbLight._m0[_2060].y) * _2104) + (((cbLight._m0[_2070].y * _2034) * _2079) * _2102);
    float _2113 = ((_2066 * cbLight._m0[_2060].z) * _2104) + (((cbLight._m0[_2070].z * _2036) * _2079) * _2102);
    uvec4 _2117 = floatBitsToUint(cbLight._m0[_2043 + 12u]);
    bool _2119 = _2117.x == 0u;
    float _2221;
    float _2223;
    float _2225;
    if (_2119)
    {
        _2221 = _2111;
        _2223 = _2112;
        _2225 = _2113;
    }
    else
    {
        uint _2229 = _2043 + 6u;
        float _2245 = (dot(vec3(cbLight._m0[_2043 + 2u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2246 = _2245 * _2245;
        float _4421 = isnan(0.0) ? _2246 : (isnan(_2246) ? 0.0 : max(_2246, 0.0));
        float _2247 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _2248 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2221 = (((cbLight._m0[_2229].x * 0.3183098733425140380859375) * _2247) * _2248) + _2111;
        _2223 = (((cbLight._m0[_2229].y * 0.3183098733425140380859375) * _2247) * _2248) + _2112;
        _2225 = (((cbLight._m0[_2229].z * 0.3183098733425140380859375) * _2247) * _2248) + _2113;
    }
    bool _2228 = _2117.y == 0u;
    float _2283;
    float _2285;
    float _2287;
    if (_2228)
    {
        _2283 = _2221;
        _2285 = _2223;
        _2287 = _2225;
    }
    else
    {
        uint _2445 = _2043 + 7u;
        float _2461 = (dot(vec3(cbLight._m0[_2043 + 3u].xyz), vec3(_552, _553, _554)) * 0.5) + 0.5;
        float _2462 = _2461 * _2461;
        float _4437 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2463 = isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0));
        float _2464 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2283 = (((cbLight._m0[_2445].x * 0.3183098733425140380859375) * _2463) * _2464) + _2221;
        _2285 = (((cbLight._m0[_2445].y * 0.3183098733425140380859375) * _2463) * _2464) + _2223;
        _2287 = (((cbLight._m0[_2445].z * 0.3183098733425140380859375) * _2463) * _2464) + _2225;
    }
    uint _2290 = _2043 + 8u;
    float _2303 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2043].w)) * _555) * 0.949999988079071044921875);
    float _2304 = _2303 * _2303;
    float _2305 = cbLight._m0[_2043].x + _631;
    float _2306 = cbLight._m0[_2043].y + _632;
    float _2307 = cbLight._m0[_2043].z + _633;
    float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
    float _2312 = _2311 * _2305;
    float _2313 = _2311 * _2306;
    float _2314 = _2311 * _2307;
    float _2315 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2043].xyz));
    float _4453 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
    float _2318 = isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0));
    float _4464 = isnan(0.0) ? _715 : (isnan(_715) ? 0.0 : max(_715, 0.0));
    float _2319 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2320 = dot(vec3(_552, _553, _554), vec3(_2312, _2313, _2314));
    float _4475 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2323 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2324 = dot(vec3(cbLight._m0[_2043].xyz), vec3(_2312, _2313, _2314));
    float _4486 = isnan(0.0) ? _2324 : (isnan(_2324) ? 0.0 : max(_2324, 0.0));
    float _2328 = _2304 * _2304;
    float _2332 = ((_2323 * _2323) * (_2328 + (-1.0))) + 1.0;
    float _2343 = (exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2344 = 1.0 - _2304;
    float _2355 = (0.5 / (((_2319 * ((_2318 * _2344) + _2304)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2344) + _2304) * _2318))) * _2318;
    float _4497 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
    float _2357 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2328 / ((_2332 * _2332) * 3.141590118408203125));
    uint _2371 = _2043 + 9u;
    float _2382 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2083].w)) * _555) * 0.949999988079071044921875);
    float _2383 = _2382 * _2382;
    float _2384 = cbLight._m0[_2083].x + _631;
    float _2385 = cbLight._m0[_2083].y + _632;
    float _2386 = cbLight._m0[_2083].z + _633;
    float _2390 = inversesqrt(dot(vec3(_2384, _2385, _2386), vec3(_2384, _2385, _2386)));
    float _2391 = _2390 * _2384;
    float _2392 = _2390 * _2385;
    float _2393 = _2390 * _2386;
    float _2394 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2083].xyz));
    float _4508 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2397 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
    float _2398 = dot(vec3(_552, _553, _554), vec3(_2391, _2392, _2393));
    float _4519 = isnan(0.0) ? _2398 : (isnan(_2398) ? 0.0 : max(_2398, 0.0));
    float _2401 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
    float _2402 = dot(vec3(cbLight._m0[_2083].xyz), vec3(_2391, _2392, _2393));
    float _4530 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
    float _2406 = _2383 * _2383;
    float _2410 = ((_2401 * _2401) * (_2406 + (-1.0))) + 1.0;
    float _2419 = (exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2420 = 1.0 - _2383;
    float _2430 = (0.5 / (((_2319 * ((_2397 * _2420) + _2383)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2420) + _2383) * _2397))) * _2397;
    float _4541 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
    float _2432 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2406 / ((_2410 * _2410) * 3.141590118408203125));
    float _2442 = (((_2419 * cbLight._m0[_2371].x) * _2432) * _2066) + ((((cbLight._m0[_2290].x * _2032) * _2343) * _2357) * _2079);
    float _2443 = (((_2419 * cbLight._m0[_2371].y) * _2432) * _2066) + ((((cbLight._m0[_2290].y * _2034) * _2343) * _2357) * _2079);
    float _2444 = (((_2419 * cbLight._m0[_2371].z) * _2432) * _2066) + ((((cbLight._m0[_2290].z * _2036) * _2343) * _2357) * _2079);
    float _2500;
    float _2502;
    float _2504;
    if (_2119)
    {
        _2500 = _2442;
        _2502 = _2443;
        _2504 = _2444;
    }
    else
    {
        uint _2506 = _2043 + 2u;
        uint _2510 = _2043 + 10u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _555) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _631;
        float _2527 = cbLight._m0[_2506].y + _632;
        float _2528 = cbLight._m0[_2506].z + _633;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2506].xyz));
        float _4552 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2540 = dot(vec3(_552, _553, _554), vec3(_2533, _2534, _2535));
        float _4563 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4574 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2561 = (exp2(log2(1.0 - (isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2562 = 1.0 - _2525;
        float _2572 = (0.5 / (((_2319 * ((_2539 * _2562) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2562) + _2525) * _2539))) * _2539;
        float _4585 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        float _2574 = (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2575 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2500 = (((_2561 * cbLight._m0[_2510].x) * _2574) * _2575) + _2442;
        _2502 = (((_2561 * cbLight._m0[_2510].y) * _2574) * _2575) + _2443;
        _2504 = (((_2561 * cbLight._m0[_2510].z) * _2574) * _2575) + _2444;
    }
    float _2606;
    float _2608;
    float _2610;
    if (_2228)
    {
        _2606 = _2500;
        _2608 = _2502;
        _2610 = _2504;
    }
    else
    {
        uint _2617 = _2043 + 3u;
        uint _2621 = _2043 + 11u;
        float _2635 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2617].w)) * _555) * 0.949999988079071044921875);
        float _2636 = _2635 * _2635;
        float _2637 = cbLight._m0[_2617].x + _631;
        float _2638 = cbLight._m0[_2617].y + _632;
        float _2639 = cbLight._m0[_2617].z + _633;
        float _2643 = inversesqrt(dot(vec3(_2637, _2638, _2639), vec3(_2637, _2638, _2639)));
        float _2644 = _2643 * _2637;
        float _2645 = _2643 * _2638;
        float _2646 = _2643 * _2639;
        float _2647 = dot(vec3(_552, _553, _554), vec3(cbLight._m0[_2617].xyz));
        float _4601 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
        float _2650 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
        float _2651 = dot(vec3(_552, _553, _554), vec3(_2644, _2645, _2646));
        float _4612 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
        float _2654 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
        float _2655 = dot(vec3(cbLight._m0[_2617].xyz), vec3(_2644, _2645, _2646));
        float _4623 = isnan(0.0) ? _2655 : (isnan(_2655) ? 0.0 : max(_2655, 0.0));
        float _2659 = _2636 * _2636;
        float _2663 = ((_2654 * _2654) * (_2659 + (-1.0))) + 1.0;
        float _2672 = (exp2(log2(1.0 - (isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2673 = 1.0 - _2636;
        float _2683 = (0.5 / (((_2319 * ((_2650 * _2673) + _2636)) + 9.9999999392252902907785028219223e-09) + (((_2319 * _2673) + _2636) * _2650))) * _2650;
        float _4634 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2685 = (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2659 / ((_2663 * _2663) * 3.141590118408203125));
        float _2686 = isnan(1.0) ? _2059 : (isnan(_2059) ? 1.0 : min(_2059, 1.0));
        _2606 = (((_2672 * cbLight._m0[_2621].x) * _2685) * _2686) + _2500;
        _2608 = (((_2672 * cbLight._m0[_2621].y) * _2685) * _2686) + _2502;
        _2610 = (((_2672 * cbLight._m0[_2621].z) * _2685) * _2686) + _2504;
    }
    float _2752;
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    if (_2041.y == 0u)
    {
        uvec4 _2707 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2708 = _2707.x;
        uint _2719 = uint((float(_2707.y) * floor(float(uint(cbSceneParam._m0[85u].y * _652) / _2708))) + floor(float(uint(cbSceneParam._m0[85u].x * _651) / _2708)));
        float _2729 = (log2(_1819 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2730 = isnan(0.0) ? _2729 : (isnan(_2729) ? 0.0 : max(_2729, 0.0));
        uint _2733 = uint(isnan(14.0) ? _2730 : (isnan(_2730) ? 14.0 : min(_2730, 14.0)));
        uvec4 _2738 = texelFetch(g_lightClusterGridBuffer, int(((_2733 << 2u) + (_2719 << 6u)) >> 2u));
        uint _2739 = _2738.x;
        uint _2740 = _2707.z;
        float _2864;
        float _2866;
        float _2868;
        float _2870;
        float _2872;
        float _2874;
        if (((((1u << ((_2740 >> 4u) & 15u)) + 4294967295u) & _2739) == 0u) || ((_2740 & 240u) == 0u))
        {
            _2864 = 0.0;
            _2866 = 0.0;
            _2868 = 0.0;
            _2870 = 0.0;
            _2872 = 0.0;
            _2874 = 0.0;
        }
        else
        {
            float _2865;
            float _2867;
            float _2869;
            float _2871;
            float _2873;
            float _2875;
            float _3025 = 0.0;
            float _3026 = 0.0;
            float _3027 = 0.0;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            uint _3031 = 0u;
            uint _3040;
            bool _3041;
            for (;;)
            {
                _3040 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3031 << 2u)) >> 2u)).x;
                _3041 = _3040 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3041)
                {
                    frontier_phi_71_pred = _3030;
                    frontier_phi_71_pred_1 = _3029;
                    frontier_phi_71_pred_2 = _3028;
                    frontier_phi_71_pred_3 = _3027;
                    frontier_phi_71_pred_4 = _3026;
                    frontier_phi_71_pred_5 = _3025;
                }
                else
                {
                    float _3170;
                    float _3171;
                    float _3172;
                    float _3173;
                    float _3174;
                    float _3175;
                    uint _3176;
                    _3170 = _3025;
                    _3171 = _3026;
                    _3172 = _3027;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3040;
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    for (;;)
                    {
                        uint _3180 = uint(findLSB(_3176)) + (_3031 << 5u);
                        uint _3177 = (_3176 + 4294967295u) & _3176;
                        uint _3182 = _3180 * 48u;
                        vec4 _3196 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3182)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3182 + 3u)).x));
                        uint _3202 = (_3180 * 48u) + 4u;
                        vec4 _3215 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3221 = (_3180 * 48u) + 8u;
                        vec3 _3232 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3221)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3221 + 2u)).x));
                        float _3236 = _3196.x - _1817;
                        float _3237 = _3196.y - _1818;
                        float _3238 = _3196.z - _1819;
                        float _3239 = dot(vec3(_3236, _3237, _3238), vec3(_3236, _3237, _3238));
                        float _3242 = inversesqrt(_3239);
                        float _3243 = _3242 * _3236;
                        float _3244 = _3242 * _3237;
                        float _3245 = _3242 * _3238;
                        float _3246 = dot(vec3(_670, _673, _676), vec3(_3243, _3244, _3245));
                        float _3251 = 1.0 - (_3239 * _3196.w);
                        float _4660 = isnan(0.0) ? _3251 : (isnan(_3251) ? 0.0 : max(_3251, 0.0));
                        float _3252 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
                        float _3253 = sqrt(_3239) * _3215.w;
                        float _3256 = 1.39999997615814208984375 / (_3253 + 1.39999997615814208984375);
                        float _3257 = _3256 * _3256;
                        float _3260 = ((1.0 - _3257) * _3246) + _3257;
                        float _3263 = _3253 * _3253;
                        float _3267 = ((isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0))) * _3252) / ((_3263 * 0.699999988079071044921875) + 1.0);
                        float _3271 = (-0.0) - _1817;
                        float _3272 = (-0.0) - _1818;
                        float _3273 = (-0.0) - _1819;
                        float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                        float _3278 = _3277 * _3271;
                        float _3279 = _3277 * _3272;
                        float _3280 = _3277 * _3273;
                        float _3287 = exp2(log2(1.0 / ((_3263 * 3.5) + 5.0)) * 0.25);
                        float _3288 = 1.0 - _730;
                        float _3295 = sqrt(1.0 - ((1.0 - (_3288 * _3288)) * (1.0 - (_3287 * _3287))));
                        float _3296 = _3295 * _3295;
                        float _3297 = _3296 * _3296;
                        float _3298 = _3278 + _3243;
                        float _3299 = _3279 + _3244;
                        float _3300 = _3280 + _3245;
                        float _3304 = inversesqrt(dot(vec3(_3298, _3299, _3300), vec3(_3298, _3299, _3300)));
                        float _3308 = dot(vec3(_670, _673, _676), vec3(_3278, _3279, _3280));
                        float _4676 = isnan(0.0) ? _3308 : (isnan(_3308) ? 0.0 : max(_3308, 0.0));
                        float _3311 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                        float _3312 = dot(vec3(_670, _673, _676), vec3(_3304 * _3298, _3304 * _3299, _3304 * _3300));
                        float _4687 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
                        float _3319 = ((_3315 * _3315) * (_3297 + (-1.0))) + 1.0;
                        float _3320 = _3256 * _3296;
                        float _3321 = _3320 * _3320;
                        float _3324 = ((1.0 - _3321) * _3246) + _3321;
                        float _4698 = isnan(0.0) ? _3324 : (isnan(_3324) ? 0.0 : max(_3324, 0.0));
                        float _3325 = isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0));
                        float _3326 = 1.0 - _3296;
                        float _3336 = (0.5 / (((_3325 * ((_3311 * _3326) + _3296)) + 9.9999999392252902907785028219223e-09) + (((_3325 * _3326) + _3296) * _3311))) * _3325;
                        float _4709 = isnan(0.0) ? _3336 : (isnan(_3336) ? 0.0 : max(_3336, 0.0));
                        float _3347 = (((_3297 * 3.1415927410125732421875) * (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0)))) / ((_3319 * _3319) * ((_3263 * 2.1991131305694580078125) + 3.141590118408203125))) * _3252;
                        _3100 = (_3267 * _3215.x) + _3173;
                        _3101 = (_3267 * _3215.y) + _3174;
                        _3102 = (_3267 * _3215.z) + _3175;
                        _3097 = (_3347 * _3232.x) + _3170;
                        _3098 = (_3347 * _3232.y) + _3171;
                        _3099 = (_3347 * _3232.z) + _3172;
                        if (_3177 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3170 = _3097;
                            _3171 = _3098;
                            _3172 = _3099;
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3177;
                        }
                    }
                    frontier_phi_71_pred = _3102;
                    frontier_phi_71_pred_1 = _3101;
                    frontier_phi_71_pred_2 = _3100;
                    frontier_phi_71_pred_3 = _3099;
                    frontier_phi_71_pred_4 = _3098;
                    frontier_phi_71_pred_5 = _3097;
                }
                _2875 = frontier_phi_71_pred;
                _2873 = frontier_phi_71_pred_1;
                _2871 = frontier_phi_71_pred_2;
                _2869 = frontier_phi_71_pred_3;
                _2867 = frontier_phi_71_pred_4;
                _2865 = frontier_phi_71_pred_5;
                uint _3032 = _3031 + 1u;
                if (_3032 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3025 = _2865;
                    _3026 = _2867;
                    _3027 = _2869;
                    _3028 = _2871;
                    _3029 = _2873;
                    _3030 = _2875;
                    _3031 = _3032;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2864 = _2865;
            _2866 = _2867;
            _2868 = _2869;
            _2870 = _2871;
            _2872 = _2873;
            _2874 = _2875;
        }
        uvec4 _2878 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2879 = _2878.z;
        uint _2881 = (_2879 >> 8u) & 15u;
        float _2993;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        if (((4294967295u << _2881) & _2739) == 0u)
        {
            _2993 = _2864;
            _2995 = _2866;
            _2997 = _2868;
            _2999 = _2870;
            _3001 = _2872;
            _3003 = _2874;
        }
        else
        {
            float _3018 = inversesqrt(dot(vec3(_1817, _1818, _1819), vec3(_1817, _1818, _1819)));
            float _3019 = _3018 * _1817;
            float _3020 = _3018 * _1818;
            float _3021 = _3018 * _1819;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2881 < ((_2879 >> 12u) & 15u))
            {
                float _2994;
                float _2996;
                float _2998;
                float _3000;
                float _3002;
                float _3004;
                float _3153 = _2864;
                float _3154 = _2866;
                float _3155 = _2868;
                float _3156 = _2870;
                float _3157 = _2872;
                float _3158 = _2874;
                uint _3159 = _2881;
                uint _3168;
                bool _3169;
                for (;;)
                {
                    _3168 = texelFetch(g_lightClassification, int((((_2733 << 5u) + (_2719 << 9u)) + (_3159 << 2u)) >> 2u)).x;
                    _3169 = _3168 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3169)
                    {
                        frontier_phi_82_pred = _3158;
                        frontier_phi_82_pred_1 = _3157;
                        frontier_phi_82_pred_2 = _3156;
                        frontier_phi_82_pred_3 = _3155;
                        frontier_phi_82_pred_4 = _3154;
                        frontier_phi_82_pred_5 = _3153;
                    }
                    else
                    {
                        float _3361;
                        float _3362;
                        float _3363;
                        float _3364;
                        float _3365;
                        float _3366;
                        float _3656;
                        float _3657;
                        float _3658;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3374 = _3153;
                        float _3375 = _3154;
                        float _3376 = _3155;
                        float _3377 = _3156;
                        float _3378 = _3157;
                        float _3379 = _3158;
                        uint _3380 = _3168;
                        uint _3381;
                        vec4 _3406;
                        float _3407;
                        vec4 _3422;
                        vec3 _3434;
                        vec4 _3449;
                        vec4 _3465;
                        float _3512;
                        bool _3513;
                        for (;;)
                        {
                            uint _3391 = ((_3159 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3380));
                            _3381 = (_3380 + 4294967295u) & _3380;
                            uint _3393 = _3391 * 40u;
                            _3406 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3393)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3393 + 3u)).x));
                            _3407 = _3406.w;
                            uint _3409 = (_3391 * 40u) + 4u;
                            _3422 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3409)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3409 + 3u)).x));
                            uint _3424 = (_3391 * 40u) + 8u;
                            _3434 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3424)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3424 + 2u)).x));
                            uint _3436 = (_3391 * 40u) + 16u;
                            _3449 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3436)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3436 + 3u)).x));
                            uint _3452 = (_3391 * 40u) + 20u;
                            _3465 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3452)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3452 + 3u)).x));
                            uint _3468 = (_3391 * 40u) + 24u;
                            vec4 _3481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3468 + 3u)).x));
                            uint _3487 = (_3391 * 40u) + 28u;
                            vec4 _3500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 3u)).x));
                            _3512 = fma(_1819, _3500.z, fma(_1818, _3500.y, _3500.x * _1817)) + _3500.w;
                            _3513 = !((fma(_1819, _3481.z, fma(_1818, _3481.y, _3481.x * _1817)) + _3481.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3513)
                            {
                                float _3540 = _3406.x - _1817;
                                float _3541 = _3406.y - _1818;
                                float _3542 = _3406.z - _1819;
                                float _3543 = dot(vec3(_3540, _3541, _3542), vec3(_3540, _3541, _3542));
                                float _3546 = inversesqrt(_3543);
                                float _3547 = _3546 * _3540;
                                float _3548 = _3546 * _3541;
                                float _3549 = _3546 * _3542;
                                float _3553 = 1.0 - (_3543 / (_3407 * _3407));
                                float _4720 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4720 : (isnan(_4720) ? 1.0 : min(_4720, 1.0));
                                float _3558 = sqrt(_3543) * _3422.w;
                                float _3560 = 1.39999997615814208984375 / (_3558 + 1.39999997615814208984375);
                                float _3561 = _3560 * _3560;
                                float _3564 = ((1.0 - _3561) * dot(vec3(_3547, _3548, _3549), vec3(_670, _673, _676))) + _3561;
                                float _3567 = _3558 * _3558;
                                float _3571 = (fma(_1819, _3449.z, fma(_1818, _3449.y, _3449.x * _1817)) + _3449.w) / _3512;
                                float _3572 = (fma(_1819, _3465.z, fma(_1818, _3465.y, _3465.x * _1817)) + _3465.w) / _3512;
                                float _3576 = 1.0 - dot(vec2(_3571, _3572), vec2(_3571, _3572));
                                float _4736 = isnan(0.0) ? _3576 : (isnan(_3576) ? 0.0 : max(_3576, 0.0));
                                float _3577 = isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0));
                                float _3578 = _3577 * (((isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0))) * _3554) / ((_3567 * 0.699999988079071044921875) + 1.0));
                                float _3590 = exp2(log2(1.0 / ((_3567 * 3.5) + 5.0)) * 0.25);
                                float _3591 = 1.0 - _730;
                                float _3598 = sqrt(1.0 - ((1.0 - (_3591 * _3591)) * (1.0 - (_3590 * _3590))));
                                float _3599 = _3598 * _3598;
                                float _3600 = _3599 * _3599;
                                float _3601 = _3547 - _3019;
                                float _3602 = _3548 - _3020;
                                float _3603 = _3549 - _3021;
                                float _3607 = inversesqrt(dot(vec3(_3601, _3602, _3603), vec3(_3601, _3602, _3603)));
                                float _3611 = dot(vec3(_670, _673, _676), vec3((-0.0) - _3019, (-0.0) - _3020, (-0.0) - _3021));
                                float _4747 = isnan(0.0) ? _3611 : (isnan(_3611) ? 0.0 : max(_3611, 0.0));
                                float _3614 = isnan(1.0) ? _4747 : (isnan(_4747) ? 1.0 : min(_4747, 1.0));
                                float _3615 = dot(vec3(_670, _673, _676), vec3(_3607 * _3601, _3607 * _3602, _3607 * _3603));
                                float _4758 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3618 = isnan(1.0) ? _4758 : (isnan(_4758) ? 1.0 : min(_4758, 1.0));
                                float _3622 = ((_3618 * _3618) * (_3600 + (-1.0))) + 1.0;
                                float _3623 = _3560 * _3599;
                                float _3624 = _3623 * _3623;
                                float _3630 = ((1.0 - _3624) * dot(vec3(_670, _673, _676), vec3(_3547, _3548, _3549))) + _3624;
                                float _4769 = isnan(0.0) ? _3630 : (isnan(_3630) ? 0.0 : max(_3630, 0.0));
                                float _3631 = isnan(1.0) ? _4769 : (isnan(_4769) ? 1.0 : min(_4769, 1.0));
                                float _3632 = 1.0 - _3599;
                                float _3642 = (0.5 / (((_3631 * ((_3614 * _3632) + _3599)) + 9.9999999392252902907785028219223e-09) + (((_3631 * _3632) + _3599) * _3614))) * _3631;
                                float _4780 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3652 = (_3577 * _3554) * (((_3600 * 3.1415927410125732421875) * (isnan(1.0) ? _4780 : (isnan(_4780) ? 1.0 : min(_4780, 1.0)))) / ((_3622 * _3622) * ((_3567 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3578 * _3422.z;
                                frontier_phi_88_pred_1 = _3578 * _3422.y;
                                frontier_phi_88_pred_2 = _3578 * _3422.x;
                                frontier_phi_88_pred_3 = _3652 * _3434.z;
                                frontier_phi_88_pred_4 = _3652 * _3434.y;
                                frontier_phi_88_pred_5 = _3652 * _3434.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3661 = frontier_phi_88_pred;
                            _3660 = frontier_phi_88_pred_1;
                            _3659 = frontier_phi_88_pred_2;
                            _3658 = frontier_phi_88_pred_3;
                            _3657 = frontier_phi_88_pred_4;
                            _3656 = frontier_phi_88_pred_5;
                            _3364 = _3659 + _3377;
                            _3365 = _3660 + _3378;
                            _3366 = _3661 + _3379;
                            _3361 = _3656 + _3374;
                            _3362 = _3657 + _3375;
                            _3363 = _3658 + _3376;
                            if (_3381 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3374 = _3361;
                                _3375 = _3362;
                                _3376 = _3363;
                                _3377 = _3364;
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3381;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3366;
                        frontier_phi_82_pred_1 = _3365;
                        frontier_phi_82_pred_2 = _3364;
                        frontier_phi_82_pred_3 = _3363;
                        frontier_phi_82_pred_4 = _3362;
                        frontier_phi_82_pred_5 = _3361;
                    }
                    _3004 = frontier_phi_82_pred;
                    _3002 = frontier_phi_82_pred_1;
                    _3000 = frontier_phi_82_pred_2;
                    _2998 = frontier_phi_82_pred_3;
                    _2996 = frontier_phi_82_pred_4;
                    _2994 = frontier_phi_82_pred_5;
                    uint _3160 = _3159 + 1u;
                    if (_3160 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3153 = _2994;
                        _3154 = _2996;
                        _3155 = _2998;
                        _3156 = _3000;
                        _3157 = _3002;
                        _3158 = _3004;
                        _3159 = _3160;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3000;
                frontier_phi_63_64_ladder_1 = _3004;
                frontier_phi_63_64_ladder_2 = _3002;
                frontier_phi_63_64_ladder_3 = _2998;
                frontier_phi_63_64_ladder_4 = _2996;
                frontier_phi_63_64_ladder_5 = _2994;
            }
            else
            {
                frontier_phi_63_64_ladder = _2870;
                frontier_phi_63_64_ladder_1 = _2874;
                frontier_phi_63_64_ladder_2 = _2872;
                frontier_phi_63_64_ladder_3 = _2868;
                frontier_phi_63_64_ladder_4 = _2866;
                frontier_phi_63_64_ladder_5 = _2864;
            }
            _2993 = frontier_phi_63_64_ladder_5;
            _2995 = frontier_phi_63_64_ladder_4;
            _2997 = frontier_phi_63_64_ladder_3;
            _2999 = frontier_phi_63_64_ladder;
            _3001 = frontier_phi_63_64_ladder_2;
            _3003 = frontier_phi_63_64_ladder_1;
        }
        float _3008 = isnan(1.0) ? _714 : (isnan(_714) ? 1.0 : min(_714, 1.0));
        _2752 = (_3008 * _2999) + _2283;
        _2754 = (_3008 * _3001) + _2285;
        _2756 = (_3008 * _3003) + _2287;
        _2758 = ((_2993 * 0.039999999105930328369140625) * _3008) + _2606;
        _2760 = ((_2995 * 0.039999999105930328369140625) * _3008) + _2608;
        _2762 = ((_2997 * 0.039999999105930328369140625) * _3008) + _2610;
    }
    else
    {
        _2752 = _2283;
        _2754 = _2285;
        _2756 = _2287;
        _2758 = _2606;
        _2760 = _2608;
        _2762 = _2610;
    }
    uint _2768 = _690 + uint(cbMatDynParam._m0[0u].w);
    float _2774 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2780 = (((((_2774 * cbMtdParam._m0[10u].x) * _412.x) * _435) * (((1.0 - _489) * cbMtdParam._m0[16u].z) + _489)) * _526) * cbInstanceData._m0[_2768].x;
    float _2786 = (((((_2774 * cbMtdParam._m0[10u].y) * _412.y) * _435) * (((1.0 - _491) * cbMtdParam._m0[16u].z) + _491)) * _526) * cbInstanceData._m0[_2768].y;
    float _2792 = (((((_2774 * cbMtdParam._m0[10u].z) * _412.z) * _435) * (((1.0 - _493) * cbMtdParam._m0[16u].z) + _493)) * _526) * cbInstanceData._m0[_2768].z;
    float _4796 = isnan(0.0) ? _700 : (isnan(_700) ? 0.0 : max(_700, 0.0));
    float _4807 = isnan(0.0) ? _701 : (isnan(_701) ? 0.0 : max(_701, 0.0));
    float _4818 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _2809 = (((isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0))) * (_2752 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _714))) + ((_2758 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1551)) * cbPerFrame._m0[3u].x)) + _2780;
    float _2811 = (_2786 + ((_2760 + ((isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))) * _1551)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2754 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _714)));
    float _2813 = (_2792 + ((_2762 + ((isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0))) * _1551)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2756 + ((isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0))) * _714)));
    float _2814 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
    float _2815 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
    float _2816 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
    float _2822 = cbMtdParam._m0[2u].x * _2780;
    float _2823 = cbMtdParam._m0[2u].y * _2786;
    float _2824 = cbMtdParam._m0[2u].z * _2792;
    float _4844 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2826 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
    uint _2827 = _689 + 6u;
    float _2835 = _651 / cbSceneParam._m0[86u].x;
    float _2836 = _652 / cbSceneParam._m0[86u].y;
    vec4 _2850 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, (log2((isnan(cbSceneParam._m0[77u].w) ? _574 : (isnan(_574) ? cbSceneParam._m0[77u].w : min(_574, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2852 = _2850.x;
    float _2853 = _2850.y;
    float _2854 = _2850.z;
    float _2855 = _2850.w;
    float _2926;
    float _2928;
    float _2930;
    float _2932;
    if (_574 > cbSceneParam._m0[78u].w)
    {
        float _2889 = isnan(_574) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _574 : min(cbSceneParam._m0[80u].w, _574));
        float _2890 = _2889 / _574;
        float _2901 = _2890 * _624;
        float _2902 = _625 * _2890;
        float _2903 = (-0.0) - _2902;
        float _2904 = _2890 * _626;
        float _2906 = (cbSceneParam._m0[77u].w * _2903) / _2889;
        float _2907 = _2906 + cbSceneParam._m0[79u].w;
        float _2908 = cbSceneParam._m0[79u].w - _2902;
        float _2914 = sqrt(((_2901 * _2901) + (_2902 * _2902)) + (_2904 * _2904));
        float _2917 = (1.0 - (cbSceneParam._m0[77u].w / _2889)) * _2914;
        float _2922 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2924 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3110;
        if (abs((_2903 - _2906) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3110 = ((((_2907 > 0.0) ? exp2(_2922 * _2907) : (2.0 - exp2(_2924 * _2907))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2917;
        }
        else
        {
            float _3054 = 1.0 / cbSceneParam._m0[80u].x;
            float _3055 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : max(_2907, _2908));
            float _3056 = isnan(_2908) ? _2907 : (isnan(_2907) ? _2908 : min(_2907, _2908));
            float _3065 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : min(_3055, 0.0));
            float _3066 = isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : min(_3056, 0.0));
            _3110 = ((abs(_2914 / _2903) * cbSceneParam._m0[80u].y) * ((((_3065 - _3066) * 2.0) - ((exp2(_2922 * (isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0)))) - exp2(_2922 * (isnan(0.0) ? _3056 : (isnan(_3056) ? 0.0 : max(_3056, 0.0))))) * _3054)) - ((exp2(_2924 * _3065) - exp2(_2924 * _3066)) * _3054))) + (_2917 * cbSceneParam._m0[80u].z);
        }
        vec4 _3112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2835, _2836, 1.0), 0.0);
        float _3121 = exp2((_3110 * (-1.44269502162933349609375)) * (1.0 - _3112.w));
        float _3122 = log2(_3121);
        float _3138 = log2(_2855);
        _2926 = (exp2(_3138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].x)) * _3112.x) / cbSceneParam._m0[78u].x)) + _2852;
        _2928 = (exp2(_3138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].y)) * _3112.y) / cbSceneParam._m0[78u].y)) + _2853;
        _2930 = (exp2(_3138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3122 * cbSceneParam._m0[78u].z)) * _3112.z) / cbSceneParam._m0[78u].z)) + _2854;
        _2932 = _3121 * _2855;
    }
    else
    {
        _2926 = _2852;
        _2928 = _2853;
        _2930 = _2854;
        _2932 = _2855;
    }
    bool _3148;
    vec4 _2942;
    vec4 _2964;
    float _2966;
    float _2970;
    float _2971;
    float _2972;
    float _2975;
    float _2978;
    float _2981;
    float _2982;
    bool _2992;
    for (;;)
    {
        _2942 = cbMatDynParam._m0[0u];
        float _2944 = roundEven(_2942.y);
        bool _2945 = _2944 == 3.0;
        float _2946 = log2(_2932);
        float _2950 = exp2(_2946 * cbSceneParam._m0[78u].x);
        float _2951 = exp2(_2946 * cbSceneParam._m0[78u].y);
        float _2952 = exp2(_2946 * cbSceneParam._m0[78u].z);
        float _2953 = _2950 * _2814;
        float _2954 = _2951 * _2815;
        float _2955 = _2952 * _2816;
        float _2962 = _640 + (-0.5);
        _2964 = cbMtdParam._m0[1u];
        _2966 = _2964.y * _2962;
        float _2969 = (_2944 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2970 = _2969 * (_2945 ? _2953 : (_2953 + (cbSceneParam._m0[72u].w * _2926)));
        _2971 = _2969 * (_2945 ? _2954 : (_2954 + (cbSceneParam._m0[72u].w * _2928)));
        _2972 = _2969 * (_2945 ? _2955 : (_2955 + (cbSceneParam._m0[72u].w * _2930)));
        _2975 = ((_2822 * _2826) * _2950) * _2969;
        _2978 = ((_2823 * _2826) * _2951) * _2969;
        _2981 = ((_2824 * _2826) * _2952) * _2969;
        _2982 = _2962 * 0.999000012874603271484375;
        _2992 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2992)
        {
            if ((cbInstanceData._m0[_689 + 7u].x + _2982) < 0.5)
            {
                _3148 = true;
                break;
            }
        }
        uint _3089 = _690 + uint(_2942.w);
        if ((cbInstanceData._m0[_3089].w < 1.0) && ((cbInstanceData._m0[_3089].w + _2982) < 0.5))
        {
            _3148 = true;
            break;
        }
        if ((_2966 + 1.0) < _2964.x)
        {
            _3148 = true;
            break;
        }
        _3148 = false;
        break;
    }
    float _3352;
    if (_3148)
    {
        discard_state = true;
        _3352 = 0.0;
    }
    else
    {
        _3352 = cbInstanceData._m0[_2827].w;
    }
    SV_Target.x = _2970;
    SV_Target.y = _2971;
    SV_Target.z = _2972;
    SV_Target.w = _3352;
    SV_Target_1.x = _2975;
    SV_Target_1.y = _2978;
    SV_Target_1.z = _2981;
    SV_Target_1.w = cbInstanceData._m0[_2827].w;
    discard_exit();
}


