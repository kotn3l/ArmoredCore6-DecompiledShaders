#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1065;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _204 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _211 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _218 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _240 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _246 = _240.x * cbMtdParam._m0[9u].x;
    float _247 = _240.y * cbMtdParam._m0[9u].y;
    float _248 = _240.z * cbMtdParam._m0[9u].z;
    vec4 _272 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _303 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3427 = isnan(0.0) ? _303 : (isnan(_303) ? 0.0 : max(_303, 0.0));
    float _304 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
    float _311 = (_304 * ((_272.x * cbMtdParam._m0[12u].x) - _246)) + _246;
    float _312 = (_304 * ((_272.y * cbMtdParam._m0[12u].y) - _247)) + _247;
    float _313 = (_304 * ((_272.z * cbMtdParam._m0[12u].z) - _248)) + _248;
    vec4 _325 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _348 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _352 = _348.z;
    float _355 = (_348.x * 2.0) + (-1.0);
    float _356 = (_348.y * 2.0) + (-1.0);
    float _357 = dot(vec2(_355, _356), vec2(_355, _356));
    float _3438 = isnan(0.0) ? _357 : (isnan(_357) ? 0.0 : max(_357, 0.0));
    float _362 = sqrt(1.0 - (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))));
    float _370 = (((_325.z - _352) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _352;
    float _390 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _391 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _404 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_390 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_391 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _418 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3449 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _419 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
    float _427 = (((_419 * _419) * (3.0 - (_419 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _436 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _444 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3460 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _449 = (_445 * _445) * (3.0 - (_445 * 2.0));
    float _450 = _449 * cbMtdParam._m0[17u].x;
    float _451 = _449 * cbMtdParam._m0[17u].y;
    float _452 = sin(_436);
    float _453 = cos(_436);
    float _454 = TEXCOORD - _450;
    float _455 = TEXCOORD_1 - _451;
    vec4 _475 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_450 + fma(_455, (-0.0) - _452, _454 * _453))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_455, _453, _454 * _452) + _451)) + cbTextureTilingScale._m0[0u].w));
    float _481 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _475.x;
    float _483 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _475.y;
    float _485 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _475.z;
    vec4 _508 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _390) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _391) + cbTextureTilingScale._m0[5u].w));
    float _517 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_508.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3471 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _528 = (((((_325.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _355) + (cbMtdParam._m0[16u].y * _355);
    float _530 = (((((_325.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _356) + (cbMtdParam._m0[16u].y * _356);
    float _533 = fma(_362, _211 * NORMAL.x, fma(_530, _218 * TANGENT.x, (_204 * _196) * _528));
    float _536 = fma(_362, _211 * NORMAL.y, fma(_530, _218 * TANGENT.y, (_204 * _197) * _528));
    float _539 = fma(_362, _211 * NORMAL.z, fma(_530, _218 * TANGENT.z, (_204 * _198) * _528));
    float _543 = inversesqrt(dot(vec3(_533, _536, _539), vec3(_533, _536, _539)));
    float _544 = _543 * _533;
    float _545 = _543 * _536;
    float _546 = _543 * _539;
    float _3482 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _547 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3504 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3515 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _566 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _606 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _616 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _606);
    float _617 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _606);
    float _618 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _606);
    float _622 = inversesqrt(dot(vec3(_616, _617, _618), vec3(_616, _617, _618)));
    float _623 = _616 * _622;
    float _624 = _617 * _622;
    float _625 = _618 * _622;
    float _631 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _632 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _650 = fma(_546, cbSceneParam._m0[5u].z, fma(_545, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _544));
    float _653 = fma(_546, cbSceneParam._m0[6u].z, fma(_545, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _544));
    float _656 = fma(_546, cbSceneParam._m0[7u].z, fma(_545, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _544));
    uint _669 = uint(roundEven(NORMAL.w)) * 13u;
    uint _670 = _669 + 9u;
    uint _671 = _670 + uint(cbMatDynParam._m0[0u].w);
    float _677 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_671].x;
    float _678 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_671].y;
    float _679 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_671].z;
    float _3526 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _680 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _3537 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _681 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _682 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    vec4 _691 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _631, cbSceneParam._m0[86u].y * _632));
    float _694 = _691.x * TEXCOORD_3.w;
    float _695 = dot(vec3(_544, _545, _546), vec3(_623, _624, _625));
    float _698 = _695 * 2.0;
    float _702 = (_698 * _544) - _623;
    float _703 = (_698 * _545) - _624;
    float _704 = (_698 * _546) - _625;
    float _708 = abs(dot(vec3(_623, _624, _625), vec3(_544, _545, _546)));
    float _3559 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _710 = sqrt(_547);
    float _722 = exp2((_710 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_710 * 3.0));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _762 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1064;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    float _1079;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _789 = fma(_762, cbModelParam._m0[26u].z, fma(_758, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754));
        float _793 = fma(_762, cbModelParam._m0[27u].z, fma(_758, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754));
        float _797 = fma(_762, cbModelParam._m0[28u].z, fma(_758, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754));
        float _822 = _754 + _544;
        float _823 = _758 + _545;
        float _824 = _762 + _546;
        float _834 = fma(_824, cbModelParam._m0[26u].z, fma(_823, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822)) - _789;
        float _835 = fma(_824, cbModelParam._m0[27u].z, fma(_823, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822)) - _793;
        float _836 = fma(_824, cbModelParam._m0[28u].z, fma(_823, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822)) - _797;
        float _840 = inversesqrt(dot(vec3(_834, _835, _836), vec3(_834, _835, _836)));
        float _853 = ((_840 * _834) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_789 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _854 = ((_840 * _835) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_793 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _855 = ((_840 * _836) / cbModelParam._m0[34u].z) + ((((((_797 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_853, _854, _855), 0.0);
        float _892 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_858.x + (-0.5));
        float _894 = _892 * (_858.y + (-0.5));
        float _895 = _892 * (_858.z + (-0.5));
        float _902 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_865.x + (-0.5));
        float _904 = _902 * (_865.y + (-0.5));
        float _905 = _902 * (_865.z + (-0.5));
        float _912 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _913 = _912 * (_872.x + (-0.5));
        float _914 = _912 * (_872.y + (-0.5));
        float _915 = _912 * (_872.z + (-0.5));
        float _922 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_879.x + (-0.5));
        float _924 = _922 * (_879.y + (-0.5));
        float _925 = _922 * (_879.z + (-0.5));
        float _926 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = _893 * 0.5;
        float _930 = _903 * 0.5;
        float _931 = _913 * 0.5;
        float _932 = dot(vec3(_929, _930, _931), vec3(_929, _930, _931));
        float _937 = (_932 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_932);
        float _946 = (dot(vec3(_544, _545, _546), vec3(_937 * _929, _937 * _930, _937 * _931)) + 1.0) * 0.5;
        float _3585 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _956 = sqrt(((_930 * _930) + (_929 * _929)) + (_931 * _931)) / (_926 + 9.9999997473787516355514526367188e-06);
        float _3596 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
        float _958 = _957 * 2.0;
        float _962 = (1.0 - _957) / (_957 + 1.0);
        float _3607 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
        float _963 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _972 = ((((1.0 - _963) * (_958 + 2.0)) * exp2(log2(isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * (_958 + 1.0))) + _963) * _926;
        float _973 = _894 * 0.5;
        float _974 = _904 * 0.5;
        float _975 = _914 * 0.5;
        float _976 = dot(vec3(_973, _974, _975), vec3(_973, _974, _975));
        float _981 = (_976 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_976);
        float _989 = (dot(vec3(_544, _545, _546), vec3(_981 * _973, _981 * _974, _981 * _975)) + 1.0) * 0.5;
        float _3618 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _998 = sqrt(((_974 * _974) + (_973 * _973)) + (_975 * _975)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3629 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _999 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
        float _1000 = _999 * 2.0;
        float _1004 = (1.0 - _999) / (_999 + 1.0);
        float _3640 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1014 = ((((1.0 - _1005) * (_1000 + 2.0)) * exp2(log2(isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))) * (_1000 + 1.0))) + _1005) * _927;
        float _1015 = _895 * 0.5;
        float _1016 = _905 * 0.5;
        float _1017 = _915 * 0.5;
        float _1018 = dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017));
        float _1023 = (_1018 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1018);
        float _1031 = (dot(vec3(_544, _545, _546), vec3(_1023 * _1015, _1023 * _1016, _1023 * _1017)) + 1.0) * 0.5;
        float _3651 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1040 = sqrt(((_1016 * _1016) + (_1015 * _1015)) + (_1017 * _1017)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3662 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1041 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
        float _1042 = _1041 * 2.0;
        float _1046 = (1.0 - _1041) / (_1041 + 1.0);
        float _3673 = isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0));
        float _1047 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1056 = ((((1.0 - _1047) * (_1042 + 2.0)) * exp2(log2(isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0))) * (_1042 + 1.0))) + _1047) * _928;
        _1064 = _895;
        _1066 = _894;
        _1067 = _893;
        _1068 = _905;
        _1069 = _904;
        _1070 = _903;
        _1071 = _915;
        _1072 = _914;
        _1073 = _913;
        _1074 = _928;
        _1075 = _927;
        _1076 = _926;
        _1077 = cbModelParam._m0[36u].z * (isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)));
        _1078 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0)));
        _1079 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0)));
    }
    else
    {
        _1064 = _1065;
        _1066 = _1065;
        _1067 = _1065;
        _1068 = _1065;
        _1069 = _1065;
        _1070 = _1065;
        _1071 = _1065;
        _1072 = _1065;
        _1073 = _1065;
        _1074 = _1065;
        _1075 = _1065;
        _1076 = _1065;
        _1077 = 0.0;
        _1078 = 0.0;
        _1079 = 0.0;
    }
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1105 = fma(_762, cbModelParam._m0[30u].z, fma(_758, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _754));
        float _1109 = fma(_762, cbModelParam._m0[31u].z, fma(_758, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _754));
        float _1113 = fma(_762, cbModelParam._m0[32u].z, fma(_758, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _754));
        float _1136 = _754 + _544;
        float _1137 = _758 + _545;
        float _1138 = _762 + _546;
        float _1148 = fma(_1138, cbModelParam._m0[30u].z, fma(_1137, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1136)) - _1105;
        float _1149 = fma(_1138, cbModelParam._m0[31u].z, fma(_1137, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1136)) - _1109;
        float _1150 = fma(_1138, cbModelParam._m0[32u].z, fma(_1137, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1136)) - _1113;
        float _1154 = inversesqrt(dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150)));
        float _1167 = ((_1154 * _1148) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1105 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1168 = ((_1154 * _1149) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1109 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1169 = ((_1154 * _1150) / cbModelParam._m0[35u].z) + ((((((_1113 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1167, _1168, _1169), 0.0);
        float _1204 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1171.x + (-0.5));
        float _1206 = _1204 * (_1171.y + (-0.5));
        float _1207 = _1204 * (_1171.z + (-0.5));
        float _1214 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1178.x + (-0.5));
        float _1216 = _1214 * (_1178.y + (-0.5));
        float _1217 = _1214 * (_1178.z + (-0.5));
        float _1224 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1185.x + (-0.5));
        float _1226 = _1224 * (_1185.y + (-0.5));
        float _1227 = _1224 * (_1185.z + (-0.5));
        float _1234 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1192.x + (-0.5));
        float _1236 = _1234 * (_1192.y + (-0.5));
        float _1237 = _1234 * (_1192.z + (-0.5));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1240 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1241 = _1205 * 0.5;
        float _1242 = _1215 * 0.5;
        float _1243 = _1225 * 0.5;
        float _1244 = dot(vec3(_1241, _1242, _1243), vec3(_1241, _1242, _1243));
        float _1249 = (_1244 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1244);
        float _1257 = (dot(vec3(_544, _545, _546), vec3(_1249 * _1241, _1249 * _1242, _1249 * _1243)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1266 = sqrt(((_1242 * _1242) + (_1241 * _1241)) + (_1243 * _1243)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _3736 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1268 + 1.0))) + _1273) * _1238;
        float _1283 = _1206 * 0.5;
        float _1284 = _1216 * 0.5;
        float _1285 = _1226 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_544, _545, _546), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _3747 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1239 + 9.9999997473787516355514526367188e-06);
        float _3758 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _3769 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0))) * (_1310 + 1.0))) + _1315) * _1239;
        float _1325 = _1207 * 0.5;
        float _1326 = _1217 * 0.5;
        float _1327 = _1227 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_544, _545, _546), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3780 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1240 + 9.9999997473787516355514526367188e-06);
        float _3791 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3802 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1352 + 1.0))) + _1357) * _1240;
        _1374 = _1207;
        _1375 = _1206;
        _1376 = _1205;
        _1377 = _1217;
        _1378 = _1216;
        _1379 = _1215;
        _1380 = _1227;
        _1381 = _1226;
        _1382 = _1225;
        _1383 = _1240;
        _1384 = _1239;
        _1385 = _1238;
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1387 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1388 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1065;
        _1375 = _1065;
        _1376 = _1065;
        _1377 = _1065;
        _1378 = _1065;
        _1379 = _1065;
        _1380 = _1065;
        _1381 = _1065;
        _1382 = _1065;
        _1383 = _1065;
        _1384 = _1065;
        _1385 = _1065;
        _1386 = 0.0;
        _1387 = 0.0;
        _1388 = 0.0;
    }
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1077)) + _1077;
    float _1399 = (cbModelParam._m0[1u].x * (_1387 - _1078)) + _1078;
    float _1400 = (cbModelParam._m0[1u].x * (_1388 - _1079)) + _1079;
    float _1421 = fma(_1400, cbSceneParam._m0[89u].z, fma(_1399, cbSceneParam._m0[89u].y, _1398 * cbSceneParam._m0[89u].x));
    float _1424 = fma(_1400, cbSceneParam._m0[90u].z, fma(_1399, cbSceneParam._m0[90u].y, _1398 * cbSceneParam._m0[90u].x));
    float _1427 = fma(_1400, cbSceneParam._m0[91u].z, fma(_1399, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1398));
    float _1442 = _702 * 0.5;
    float _1443 = _703 * 0.5;
    float _1444 = _704 * 0.5;
    float _1445 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1376, _1379, _1382, _1385));
    float _1448 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1375, _1378, _1381, _1384));
    float _1451 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1485;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1458 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1064, _1068, _1071, _1074));
        float _1462 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1066, _1069, _1072, _1075));
        float _1466 = dot(vec4(_1442, _1443, _1444, 1.0), vec4(_1067, _1070, _1073, _1076));
        float _1473 = dot(vec4(cbModelParam._m0[39u]), vec4(_1442, _1443, _1444, 1.0));
        _1485 = dot(vec3(isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)), isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1473) ? 0.0 : (isnan(0.0) ? _1473 : max(0.0, _1473))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1485 = 1.0;
    }
    float _1496;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1487 = dot(vec4(cbModelParam._m0[40u]), vec4(_1442, _1443, _1444, 1.0));
        _1496 = dot(vec3(isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)), isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1487) ? 0.0 : (isnan(0.0) ? _1487 : max(0.0, _1487))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1496 = 1.0;
    }
    float _1500 = (_1496 * cbModelParam._m0[1u].x) + (_1485 * (1.0 - cbModelParam._m0[1u].x));
    float _1510 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _547);
    float _1511 = isnan(_1510) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1510 : min(cbModelParam._m0[25u].z, _1510));
    float _1591;
    float _1593;
    float _1595;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1558 = fma(_762, cbModelParam._m0[13u].z, fma(_758, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _754)) + cbModelParam._m0[13u].w;
        float _1562 = fma(_762, cbModelParam._m0[14u].z, fma(_758, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _754)) + cbModelParam._m0[14u].w;
        float _1566 = fma(_762, cbModelParam._m0[15u].z, fma(_758, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _754)) + cbModelParam._m0[15u].w;
        float _1569 = fma(_704, cbModelParam._m0[13u].z, fma(_703, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _702));
        float _1572 = fma(_704, cbModelParam._m0[14u].z, fma(_703, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _702));
        float _1575 = fma(_704, cbModelParam._m0[15u].z, fma(_703, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _702));
        float _1603;
        if (_1569 > 0.0)
        {
            _1603 = abs((1.0 - _1558) / _1569);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1558 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1603 = frontier_phi_14_12_ladder;
        }
        float _1805;
        if (_1572 > 0.0)
        {
            _1805 = abs((1.0 - _1562) / _1572);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1572 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1562 + 1.0) / _1572);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1805 = frontier_phi_23_19_ladder;
        }
        float _2048;
        if (_1575 > 0.0)
        {
            _2048 = abs((1.0 - _1566) / _1575);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1575 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1566 + 1.0) / _1575);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2048 = frontier_phi_35_30_ladder;
        }
        float _2050 = isnan(_1805) ? _1603 : (isnan(_1603) ? _1805 : min(_1603, _1805));
        float _2051 = isnan(_2048) ? _2050 : (isnan(_2050) ? _2048 : min(_2050, _2048));
        float _2055 = (_2051 * _1569) + _1558;
        float _2056 = (_2051 * _1572) + _1562;
        float _2057 = (_2051 * _1575) + _1566;
        float _2058 = _2051 * 9.9999997473787516355514526367188e-05;
        float _2060 = (-1.0) - _2058;
        float _2062 = _2058 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2057 > _2062) || ((_2057 < _2060) || ((_2056 > _2062) || ((_2056 < _2060) || ((_2055 < _2060) || (_2055 > _2062))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2181 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2057, cbModelParam._m0[9u].z, fma(_2056, cbModelParam._m0[9u].y, _2055 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2057, cbModelParam._m0[10u].z, fma(_2056, cbModelParam._m0[10u].y, _2055 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2057, cbModelParam._m0[11u].z, fma(_2056, cbModelParam._m0[11u].y, _2055 * cbModelParam._m0[11u].x))), _1511);
            frontier_phi_13_35_ladder = _2181.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2181.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2181.x * cbModelParam._m0[1u].y;
        }
        _1591 = frontier_phi_13_35_ladder_2;
        _1593 = frontier_phi_13_35_ladder_1;
        _1595 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1579 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_702, _703, _704), _1511);
        _1591 = _1579.x * cbModelParam._m0[1u].y;
        _1593 = _1579.y * cbModelParam._m0[1u].y;
        _1595 = _1579.z * cbModelParam._m0[1u].y;
    }
    float _1599 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _547);
    float _1600 = isnan(_1599) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1599 : min(cbModelParam._m0[25u].w, _1599));
    float _1691;
    float _1693;
    float _1695;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1655 = fma(_762, cbModelParam._m0[21u].z, fma(_758, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _754)) + cbModelParam._m0[21u].w;
        float _1659 = fma(_762, cbModelParam._m0[22u].z, fma(_758, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _754)) + cbModelParam._m0[22u].w;
        float _1663 = fma(_762, cbModelParam._m0[23u].z, fma(_758, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _754)) + cbModelParam._m0[23u].w;
        float _1666 = fma(_704, cbModelParam._m0[21u].z, fma(_703, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _702));
        float _1669 = fma(_704, cbModelParam._m0[22u].z, fma(_703, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _702));
        float _1672 = fma(_704, cbModelParam._m0[23u].z, fma(_703, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _702));
        float _1810;
        if (_1666 > 0.0)
        {
            _1810 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1810 = frontier_phi_25_21_ladder;
        }
        float _2075;
        if (_1669 > 0.0)
        {
            _2075 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2075 = frontier_phi_37_32_ladder;
        }
        float _2280;
        if (_1672 > 0.0)
        {
            _2280 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2280 = frontier_phi_46_43_ladder;
        }
        float _2282 = isnan(_2075) ? _1810 : (isnan(_1810) ? _2075 : min(_1810, _2075));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1666) + _1655;
        float _2288 = (_2283 * _1669) + _1659;
        float _2289 = (_2283 * _1672) + _1663;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2289, cbModelParam._m0[17u].z, fma(_2288, cbModelParam._m0[17u].y, _2287 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2289, cbModelParam._m0[18u].z, fma(_2288, cbModelParam._m0[18u].y, _2287 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2289, cbModelParam._m0[19u].z, fma(_2288, cbModelParam._m0[19u].y, _2287 * cbModelParam._m0[19u].x))), _1600);
            frontier_phi_22_46_ladder = _2533.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2533.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2533.x * cbModelParam._m0[1u].z;
        }
        _1691 = frontier_phi_22_46_ladder_2;
        _1693 = frontier_phi_22_46_ladder_1;
        _1695 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1675 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_702, _703, _704), _1600);
        _1691 = _1675.x * cbModelParam._m0[1u].z;
        _1693 = _1675.y * cbModelParam._m0[1u].z;
        _1695 = _1675.z * cbModelParam._m0[1u].z;
    }
    float _1707 = ((((1.0 - _722) * ((_710 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_722 * _710)) * _694;
    float _1708 = _1707 * ((cbModelParam._m0[1u].w * (_1691 - _1591)) + _1591);
    float _1709 = _1707 * ((cbModelParam._m0[1u].w * (_1693 - _1593)) + _1593);
    float _1710 = _1707 * ((cbModelParam._m0[1u].w * (_1695 - _1595)) + _1595);
    float _1713 = fma(_1710, cbSceneParam._m0[89u].z, fma(_1709, cbSceneParam._m0[89u].y, _1708 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1710, cbSceneParam._m0[90u].z, fma(_1709, cbSceneParam._m0[90u].y, _1708 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1710, cbSceneParam._m0[91u].z, fma(_1709, cbSceneParam._m0[91u].y, _1708 * cbSceneParam._m0[91u].x));
    uvec4 _1729 = floatBitsToUint(cbInstanceData._m0[_669 + 5u]);
    uint _1731 = _1729.x * 14u;
    uint _1732 = _1731 + 13u;
    float _1739 = _694 + (-1.0);
    float _1744 = (cbLight._m0[_1732].x * _1739) + 1.0;
    float _1745 = (cbLight._m0[_1732].y * _1739) + 1.0;
    float _1746 = (cbLight._m0[_1732].z * _1739) + 1.0;
    float _1747 = (cbLight._m0[_1732].w * _1739) + 1.0;
    uint _1748 = _1731 + 5u;
    float _1754 = isnan(1.0) ? _1745 : (isnan(_1745) ? 1.0 : min(_1745, 1.0));
    uint _1758 = _1731 + 4u;
    float _1764 = isnan(1.0) ? _1744 : (isnan(_1744) ? 1.0 : min(_1744, 1.0));
    uint _1768 = _1731 | 1u;
    float _1779 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_544, _545, _546));
    float _1782 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_544, _545, _546));
    float _3938 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _3949 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
    float _1787 = (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.3183098733425140380859375;
    float _1789 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * 0.3183098733425140380859375;
    float _1796 = ((cbLight._m0[_1748].x * _1754) * _1789) + ((cbLight._m0[_1758].x * _1764) * _1787);
    float _1797 = ((_1754 * cbLight._m0[_1748].y) * _1789) + ((_1764 * cbLight._m0[_1758].y) * _1787);
    float _1798 = ((_1754 * cbLight._m0[_1748].z) * _1789) + ((_1764 * cbLight._m0[_1758].z) * _1787);
    uvec4 _1802 = floatBitsToUint(cbLight._m0[_1731 + 12u]);
    bool _1804 = _1802.x == 0u;
    float _1815;
    float _1817;
    float _1819;
    if (_1804)
    {
        _1815 = _1796;
        _1817 = _1797;
        _1819 = _1798;
    }
    else
    {
        uint _1823 = _1731 + 6u;
        float _1839 = (dot(vec3(cbLight._m0[_1731 + 2u].xyz), vec3(_544, _545, _546)) * 0.5) + 0.5;
        float _1840 = _1839 * _1839;
        float _3960 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
        float _1841 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1842 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _1815 = (((cbLight._m0[_1823].x * 0.3183098733425140380859375) * _1841) * _1842) + _1796;
        _1817 = (((cbLight._m0[_1823].y * 0.3183098733425140380859375) * _1841) * _1842) + _1797;
        _1819 = (((cbLight._m0[_1823].z * 0.3183098733425140380859375) * _1841) * _1842) + _1798;
    }
    bool _1822 = _1802.y == 0u;
    float _1860;
    float _1862;
    float _1864;
    if (_1822)
    {
        _1860 = _1815;
        _1862 = _1817;
        _1864 = _1819;
    }
    else
    {
        uint _2019 = _1731 + 7u;
        float _2035 = (dot(vec3(cbLight._m0[_1731 + 3u].xyz), vec3(_544, _545, _546)) * 0.5) + 0.5;
        float _2036 = _2035 * _2035;
        float _3976 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
        float _2037 = isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0));
        float _2038 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _1860 = (((cbLight._m0[_2019].x * 0.3183098733425140380859375) * _2037) * _2038) + _1815;
        _1862 = (((cbLight._m0[_2019].y * 0.3183098733425140380859375) * _2037) * _2038) + _1817;
        _1864 = (((cbLight._m0[_2019].z * 0.3183098733425140380859375) * _2037) * _2038) + _1819;
    }
    uint _1867 = _1731 + 8u;
    float _1880 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1731].w)) * _547) * 0.949999988079071044921875);
    float _1881 = _1880 * _1880;
    float _1882 = cbLight._m0[_1731].x + _623;
    float _1883 = cbLight._m0[_1731].y + _624;
    float _1884 = cbLight._m0[_1731].z + _625;
    float _1888 = inversesqrt(dot(vec3(_1882, _1883, _1884), vec3(_1882, _1883, _1884)));
    float _1889 = _1888 * _1882;
    float _1890 = _1888 * _1883;
    float _1891 = _1888 * _1884;
    float _1892 = dot(vec3(_544, _545, _546), vec3(cbLight._m0[_1731].xyz));
    float _3992 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
    float _4003 = isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0));
    float _1896 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
    float _1897 = dot(vec3(_544, _545, _546), vec3(_1889, _1890, _1891));
    float _4014 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1731].xyz), vec3(_1889, _1890, _1891));
    float _4025 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1881 * _1881;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1920 = (exp2(log2(1.0 - (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1921 = 1.0 - _1881;
    float _1932 = (0.5 / (((_1896 * ((_1895 * _1921) + _1881)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1921) + _1881) * _1895))) * _1895;
    float _4036 = isnan(0.0) ? _1932 : (isnan(_1932) ? 0.0 : max(_1932, 0.0));
    float _1934 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    uint _1945 = _1731 + 9u;
    float _1956 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1768].w)) * _547) * 0.949999988079071044921875);
    float _1957 = _1956 * _1956;
    float _1958 = cbLight._m0[_1768].x + _623;
    float _1959 = cbLight._m0[_1768].y + _624;
    float _1960 = cbLight._m0[_1768].z + _625;
    float _1964 = inversesqrt(dot(vec3(_1958, _1959, _1960), vec3(_1958, _1959, _1960)));
    float _1965 = _1964 * _1958;
    float _1966 = _1964 * _1959;
    float _1967 = _1964 * _1960;
    float _1968 = dot(vec3(_544, _545, _546), vec3(cbLight._m0[_1768].xyz));
    float _4047 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _1972 = dot(vec3(_544, _545, _546), vec3(_1965, _1966, _1967));
    float _4058 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1975 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _1976 = dot(vec3(cbLight._m0[_1768].xyz), vec3(_1965, _1966, _1967));
    float _4069 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1980 = _1957 * _1957;
    float _1984 = ((_1975 * _1975) * (_1980 + (-1.0))) + 1.0;
    float _1993 = (exp2(log2(1.0 - (isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1994 = 1.0 - _1957;
    float _2004 = (0.5 / (((_1896 * ((_1971 * _1994) + _1957)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _1994) + _1957) * _1971))) * _1971;
    float _4080 = isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0));
    float _2006 = (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0))) * (_1980 / ((_1984 * _1984) * 3.141590118408203125));
    float _2016 = (((_1993 * cbLight._m0[_1945].x) * _2006) * _1754) + (((_1920 * cbLight._m0[_1867].x) * _1934) * _1764);
    float _2017 = (((_1993 * cbLight._m0[_1945].y) * _2006) * _1754) + (((_1920 * cbLight._m0[_1867].y) * _1934) * _1764);
    float _2018 = (((_1993 * cbLight._m0[_1945].z) * _2006) * _1754) + (((_1920 * cbLight._m0[_1867].z) * _1934) * _1764);
    float _2080;
    float _2082;
    float _2084;
    if (_1804)
    {
        _2080 = _2016;
        _2082 = _2017;
        _2084 = _2018;
    }
    else
    {
        uint _2086 = _1731 + 2u;
        uint _2090 = _1731 + 10u;
        float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _547) * 0.949999988079071044921875);
        float _2105 = _2104 * _2104;
        float _2106 = cbLight._m0[_2086].x + _623;
        float _2107 = cbLight._m0[_2086].y + _624;
        float _2108 = cbLight._m0[_2086].z + _625;
        float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
        float _2113 = _2112 * _2106;
        float _2114 = _2112 * _2107;
        float _2115 = _2112 * _2108;
        float _2116 = dot(vec3(_544, _545, _546), vec3(cbLight._m0[_2086].xyz));
        float _4091 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
        float _2120 = dot(vec3(_544, _545, _546), vec3(_2113, _2114, _2115));
        float _4102 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
        float _2124 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2113, _2114, _2115));
        float _4113 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2128 = _2105 * _2105;
        float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
        float _2141 = (exp2(log2(1.0 - (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2142 = 1.0 - _2105;
        float _2152 = (0.5 / (((_1896 * ((_2119 * _2142) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2142) + _2105) * _2119))) * _2119;
        float _4124 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
        float _2154 = (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
        float _2155 = isnan(1.0) ? _1746 : (isnan(_1746) ? 1.0 : min(_1746, 1.0));
        _2080 = (((_2141 * cbLight._m0[_2090].x) * _2154) * _2155) + _2016;
        _2082 = (((_2141 * cbLight._m0[_2090].y) * _2154) * _2155) + _2017;
        _2084 = (((_2141 * cbLight._m0[_2090].z) * _2154) * _2155) + _2018;
    }
    float _2190;
    float _2192;
    float _2194;
    if (_1822)
    {
        _2190 = _2080;
        _2192 = _2082;
        _2194 = _2084;
    }
    else
    {
        uint _2201 = _1731 + 3u;
        uint _2205 = _1731 + 11u;
        float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2201].w)) * _547) * 0.949999988079071044921875);
        float _2220 = _2219 * _2219;
        float _2221 = cbLight._m0[_2201].x + _623;
        float _2222 = cbLight._m0[_2201].y + _624;
        float _2223 = cbLight._m0[_2201].z + _625;
        float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
        float _2228 = _2227 * _2221;
        float _2229 = _2227 * _2222;
        float _2230 = _2227 * _2223;
        float _2231 = dot(vec3(_544, _545, _546), vec3(cbLight._m0[_2201].xyz));
        float _4140 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
        float _2234 = isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0));
        float _2235 = dot(vec3(_544, _545, _546), vec3(_2228, _2229, _2230));
        float _4151 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
        float _2238 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
        float _2239 = dot(vec3(cbLight._m0[_2201].xyz), vec3(_2228, _2229, _2230));
        float _4162 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        float _2243 = _2220 * _2220;
        float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
        float _2256 = (exp2(log2(1.0 - (isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2257 = 1.0 - _2220;
        float _2267 = (0.5 / (((_1896 * ((_2234 * _2257) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_1896 * _2257) + _2220) * _2234))) * _2234;
        float _4173 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2269 = (isnan(1.0) ? _4173 : (isnan(_4173) ? 1.0 : min(_4173, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
        float _2270 = isnan(1.0) ? _1747 : (isnan(_1747) ? 1.0 : min(_1747, 1.0));
        _2190 = (((_2256 * cbLight._m0[_2205].x) * _2269) * _2270) + _2080;
        _2192 = (((_2256 * cbLight._m0[_2205].y) * _2269) * _2270) + _2082;
        _2194 = (((_2256 * cbLight._m0[_2205].z) * _2269) * _2270) + _2084;
    }
    float _2405;
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_1729.y == 0u)
    {
        float _2345 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2346 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2345;
        float _2347 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2345;
        float _2348 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2345;
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.x;
        uint _2372 = uint((float(_2360.y) * floor(float(uint(cbSceneParam._m0[85u].y * _632) / _2361))) + floor(float(uint(cbSceneParam._m0[85u].x * _631) / _2361)));
        float _2382 = (log2(_2348 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2383 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        uint _2386 = uint(isnan(14.0) ? _2383 : (isnan(_2383) ? 14.0 : min(_2383, 14.0)));
        uvec4 _2391 = texelFetch(g_lightClusterGridBuffer, int(((_2386 << 2u) + (_2372 << 6u)) >> 2u));
        uint _2392 = _2391.x;
        uint _2393 = _2360.z;
        float _2538;
        float _2540;
        float _2542;
        float _2544;
        float _2546;
        float _2548;
        if (((((1u << ((_2393 >> 4u) & 15u)) + 4294967295u) & _2392) == 0u) || ((_2393 & 240u) == 0u))
        {
            _2538 = 0.0;
            _2540 = 0.0;
            _2542 = 0.0;
            _2544 = 0.0;
            _2546 = 0.0;
            _2548 = 0.0;
        }
        else
        {
            float _2539;
            float _2541;
            float _2543;
            float _2545;
            float _2547;
            float _2549;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            uint _2697 = 0u;
            uint _2706;
            bool _2707;
            for (;;)
            {
                _2706 = texelFetch(g_lightClassification, int((((_2386 << 5u) + (_2372 << 9u)) + (_2697 << 2u)) >> 2u)).x;
                _2707 = _2706 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2707)
                {
                    frontier_phi_61_pred = _2691;
                    frontier_phi_61_pred_1 = _2696;
                    frontier_phi_61_pred_2 = _2695;
                    frontier_phi_61_pred_3 = _2694;
                    frontier_phi_61_pred_4 = _2693;
                    frontier_phi_61_pred_5 = _2692;
                }
                else
                {
                    float _2815;
                    float _2816;
                    float _2817;
                    float _2818;
                    float _2819;
                    float _2820;
                    uint _2821;
                    _2815 = _2691;
                    _2816 = _2692;
                    _2817 = _2693;
                    _2818 = _2694;
                    _2819 = _2695;
                    _2820 = _2696;
                    _2821 = _2706;
                    float _2747;
                    float _2748;
                    float _2749;
                    float _2750;
                    float _2751;
                    float _2752;
                    for (;;)
                    {
                        uint _2825 = uint(findLSB(_2821)) + (_2697 << 5u);
                        uint _2822 = (_2821 + 4294967295u) & _2821;
                        uint _2827 = _2825 * 48u;
                        vec4 _2841 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2847 = (_2825 * 48u) + 4u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2847)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2847 + 3u)).x));
                        uint _2866 = (_2825 * 48u) + 8u;
                        vec3 _2877 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x));
                        float _2881 = _2841.x - _2346;
                        float _2882 = _2841.y - _2347;
                        float _2883 = _2841.z - _2348;
                        float _2884 = dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883));
                        float _2887 = inversesqrt(_2884);
                        float _2888 = _2887 * _2881;
                        float _2889 = _2887 * _2882;
                        float _2890 = _2887 * _2883;
                        float _2891 = dot(vec3(_650, _653, _656), vec3(_2888, _2889, _2890));
                        float _2896 = 1.0 - (_2884 * _2841.w);
                        float _4199 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0));
                        float _2897 = isnan(1.0) ? _4199 : (isnan(_4199) ? 1.0 : min(_4199, 1.0));
                        float _2898 = sqrt(_2884) * _2860.w;
                        float _2901 = 1.39999997615814208984375 / (_2898 + 1.39999997615814208984375);
                        float _2902 = _2901 * _2901;
                        float _2905 = ((1.0 - _2902) * _2891) + _2902;
                        float _2908 = _2898 * _2898;
                        float _2912 = ((isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0))) * _2897) / ((_2908 * 0.699999988079071044921875) + 1.0);
                        float _2916 = (-0.0) - _2346;
                        float _2917 = (-0.0) - _2347;
                        float _2918 = (-0.0) - _2348;
                        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
                        float _2923 = _2922 * _2916;
                        float _2924 = _2922 * _2917;
                        float _2925 = _2922 * _2918;
                        float _2933 = exp2(log2(1.0 / ((_2908 * 3.5) + 5.0)) * 0.25);
                        float _2934 = 1.0 - _710;
                        float _2941 = sqrt(1.0 - ((1.0 - (_2934 * _2934)) * (1.0 - (_2933 * _2933))));
                        float _2942 = _2941 * _2941;
                        float _2943 = _2942 * _2942;
                        float _2944 = _2923 + _2888;
                        float _2945 = _2924 + _2889;
                        float _2946 = _2925 + _2890;
                        float _2950 = inversesqrt(dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946)));
                        float _2954 = dot(vec3(_650, _653, _656), vec3(_2923, _2924, _2925));
                        float _4215 = isnan(0.0) ? _2954 : (isnan(_2954) ? 0.0 : max(_2954, 0.0));
                        float _2957 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
                        float _2958 = dot(vec3(_650, _653, _656), vec3(_2950 * _2944, _2950 * _2945, _2950 * _2946));
                        float _4226 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2961 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
                        float _2965 = ((_2961 * _2961) * (_2943 + (-1.0))) + 1.0;
                        float _2966 = _2901 * _2942;
                        float _2967 = _2966 * _2966;
                        float _2970 = ((1.0 - _2967) * _2891) + _2967;
                        float _4237 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2971 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
                        float _2972 = 1.0 - _2942;
                        float _2982 = (0.5 / (((_2971 * ((_2957 * _2972) + _2942)) + 9.9999999392252902907785028219223e-09) + (((_2971 * _2972) + _2942) * _2957))) * _2971;
                        float _4248 = isnan(0.0) ? _2982 : (isnan(_2982) ? 0.0 : max(_2982, 0.0));
                        float _2993 = (((_2943 * 3.1415927410125732421875) * (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) / ((_2965 * _2965) * ((_2908 * 2.1991131305694580078125) + 3.141590118408203125))) * _2897;
                        _2750 = (_2912 * _2860.x) + _2818;
                        _2751 = (_2912 * _2860.y) + _2819;
                        _2752 = (_2912 * _2860.z) + _2820;
                        _2747 = (_2993 * _2877.x) + _2815;
                        _2748 = (_2993 * _2877.y) + _2816;
                        _2749 = (_2993 * _2877.z) + _2817;
                        if (_2822 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2815 = _2747;
                            _2816 = _2748;
                            _2817 = _2749;
                            _2818 = _2750;
                            _2819 = _2751;
                            _2820 = _2752;
                            _2821 = _2822;
                        }
                    }
                    frontier_phi_61_pred = _2747;
                    frontier_phi_61_pred_1 = _2752;
                    frontier_phi_61_pred_2 = _2751;
                    frontier_phi_61_pred_3 = _2750;
                    frontier_phi_61_pred_4 = _2749;
                    frontier_phi_61_pred_5 = _2748;
                }
                _2539 = frontier_phi_61_pred;
                _2549 = frontier_phi_61_pred_1;
                _2547 = frontier_phi_61_pred_2;
                _2545 = frontier_phi_61_pred_3;
                _2543 = frontier_phi_61_pred_4;
                _2541 = frontier_phi_61_pred_5;
                uint _2698 = _2697 + 1u;
                if (_2698 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2691 = _2539;
                    _2692 = _2541;
                    _2693 = _2543;
                    _2694 = _2545;
                    _2695 = _2547;
                    _2696 = _2549;
                    _2697 = _2698;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2538 = _2539;
            _2540 = _2541;
            _2542 = _2543;
            _2544 = _2545;
            _2546 = _2547;
            _2548 = _2549;
        }
        uvec4 _2552 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2553 = _2552.z;
        uint _2555 = (_2553 >> 8u) & 15u;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        if (((4294967295u << _2555) & _2392) == 0u)
        {
            _2659 = _2538;
            _2661 = _2540;
            _2663 = _2542;
            _2665 = _2544;
            _2667 = _2546;
            _2669 = _2548;
        }
        else
        {
            float _2684 = inversesqrt(dot(vec3(_2346, _2347, _2348), vec3(_2346, _2347, _2348)));
            float _2685 = _2684 * _2346;
            float _2686 = _2684 * _2347;
            float _2687 = _2684 * _2348;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2555 < ((_2553 >> 12u) & 15u))
            {
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2670;
                float _2798 = _2538;
                float _2799 = _2540;
                float _2800 = _2542;
                float _2801 = _2544;
                float _2802 = _2546;
                float _2803 = _2548;
                uint _2804 = _2555;
                uint _2813;
                bool _2814;
                for (;;)
                {
                    _2813 = texelFetch(g_lightClassification, int((((_2386 << 5u) + (_2372 << 9u)) + (_2804 << 2u)) >> 2u)).x;
                    _2814 = _2813 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2814)
                    {
                        frontier_phi_67_pred = _2801;
                        frontier_phi_67_pred_1 = _2802;
                        frontier_phi_67_pred_2 = _2803;
                        frontier_phi_67_pred_3 = _2800;
                        frontier_phi_67_pred_4 = _2799;
                        frontier_phi_67_pred_5 = _2798;
                    }
                    else
                    {
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3001;
                        float _3002;
                        float _3003;
                        float _3293;
                        float _3294;
                        float _3295;
                        float _3296;
                        float _3297;
                        float _3298;
                        float _3011 = _2798;
                        float _3012 = _2799;
                        float _3013 = _2800;
                        float _3014 = _2801;
                        float _3015 = _2802;
                        float _3016 = _2803;
                        uint _3017 = _2813;
                        uint _3018;
                        vec4 _3043;
                        float _3044;
                        vec4 _3059;
                        vec3 _3071;
                        vec4 _3086;
                        vec4 _3102;
                        float _3149;
                        bool _3150;
                        for (;;)
                        {
                            uint _3028 = ((_2804 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3017));
                            _3018 = (_3017 + 4294967295u) & _3017;
                            uint _3030 = _3028 * 40u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            _3044 = _3043.w;
                            uint _3046 = (_3028 * 40u) + 4u;
                            _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            uint _3061 = (_3028 * 40u) + 8u;
                            _3071 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x));
                            uint _3073 = (_3028 * 40u) + 16u;
                            _3086 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3073)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3073 + 3u)).x));
                            uint _3089 = (_3028 * 40u) + 20u;
                            _3102 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3089)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3089 + 3u)).x));
                            uint _3105 = (_3028 * 40u) + 24u;
                            vec4 _3118 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3105)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3105 + 3u)).x));
                            uint _3124 = (_3028 * 40u) + 28u;
                            vec4 _3137 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3124)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3124 + 3u)).x));
                            _3149 = fma(_2348, _3137.z, fma(_2347, _3137.y, _3137.x * _2346)) + _3137.w;
                            _3150 = !((fma(_2348, _3118.z, fma(_2347, _3118.y, _3118.x * _2346)) + _3118.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3150)
                            {
                                float _3177 = _3043.x - _2346;
                                float _3178 = _3043.y - _2347;
                                float _3179 = _3043.z - _2348;
                                float _3180 = dot(vec3(_3177, _3178, _3179), vec3(_3177, _3178, _3179));
                                float _3183 = inversesqrt(_3180);
                                float _3184 = _3183 * _3177;
                                float _3185 = _3183 * _3178;
                                float _3186 = _3183 * _3179;
                                float _3190 = 1.0 - (_3180 / (_3044 * _3044));
                                float _4259 = isnan(0.0) ? _3190 : (isnan(_3190) ? 0.0 : max(_3190, 0.0));
                                float _3191 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
                                float _3195 = sqrt(_3180) * _3059.w;
                                float _3197 = 1.39999997615814208984375 / (_3195 + 1.39999997615814208984375);
                                float _3198 = _3197 * _3197;
                                float _3201 = ((1.0 - _3198) * dot(vec3(_3184, _3185, _3186), vec3(_650, _653, _656))) + _3198;
                                float _3204 = _3195 * _3195;
                                float _3208 = (fma(_2348, _3086.z, fma(_2347, _3086.y, _3086.x * _2346)) + _3086.w) / _3149;
                                float _3209 = (fma(_2348, _3102.z, fma(_2347, _3102.y, _3102.x * _2346)) + _3102.w) / _3149;
                                float _3213 = 1.0 - dot(vec2(_3208, _3209), vec2(_3208, _3209));
                                float _4275 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
                                float _3215 = _3214 * (((isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0))) * _3191) / ((_3204 * 0.699999988079071044921875) + 1.0));
                                float _3227 = exp2(log2(1.0 / ((_3204 * 3.5) + 5.0)) * 0.25);
                                float _3228 = 1.0 - _710;
                                float _3235 = sqrt(1.0 - ((1.0 - (_3228 * _3228)) * (1.0 - (_3227 * _3227))));
                                float _3236 = _3235 * _3235;
                                float _3237 = _3236 * _3236;
                                float _3238 = _3184 - _2685;
                                float _3239 = _3185 - _2686;
                                float _3240 = _3186 - _2687;
                                float _3244 = inversesqrt(dot(vec3(_3238, _3239, _3240), vec3(_3238, _3239, _3240)));
                                float _3248 = dot(vec3(_650, _653, _656), vec3((-0.0) - _2685, (-0.0) - _2686, (-0.0) - _2687));
                                float _4286 = isnan(0.0) ? _3248 : (isnan(_3248) ? 0.0 : max(_3248, 0.0));
                                float _3251 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
                                float _3252 = dot(vec3(_650, _653, _656), vec3(_3244 * _3238, _3244 * _3239, _3244 * _3240));
                                float _4297 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                                float _3255 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
                                float _3259 = ((_3255 * _3255) * (_3237 + (-1.0))) + 1.0;
                                float _3260 = _3197 * _3236;
                                float _3261 = _3260 * _3260;
                                float _3267 = ((1.0 - _3261) * dot(vec3(_650, _653, _656), vec3(_3184, _3185, _3186))) + _3261;
                                float _4308 = isnan(0.0) ? _3267 : (isnan(_3267) ? 0.0 : max(_3267, 0.0));
                                float _3268 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                                float _3269 = 1.0 - _3236;
                                float _3279 = (0.5 / (((_3268 * ((_3251 * _3269) + _3236)) + 9.9999999392252902907785028219223e-09) + (((_3268 * _3269) + _3236) * _3251))) * _3268;
                                float _4319 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                                float _3289 = (_3214 * _3191) * (((_3237 * 3.1415927410125732421875) * (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0)))) / ((_3259 * _3259) * ((_3204 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3289 * _3071.x;
                                frontier_phi_73_pred_1 = _3289 * _3071.y;
                                frontier_phi_73_pred_2 = _3215 * _3059.z;
                                frontier_phi_73_pred_3 = _3215 * _3059.y;
                                frontier_phi_73_pred_4 = _3215 * _3059.x;
                                frontier_phi_73_pred_5 = _3289 * _3071.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3293 = frontier_phi_73_pred;
                            _3294 = frontier_phi_73_pred_1;
                            _3298 = frontier_phi_73_pred_2;
                            _3297 = frontier_phi_73_pred_3;
                            _3296 = frontier_phi_73_pred_4;
                            _3295 = frontier_phi_73_pred_5;
                            _3001 = _3296 + _3014;
                            _3002 = _3297 + _3015;
                            _3003 = _3298 + _3016;
                            _2998 = _3293 + _3011;
                            _2999 = _3294 + _3012;
                            _3000 = _3295 + _3013;
                            if (_3018 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3001;
                                _3015 = _3002;
                                _3016 = _3003;
                                _3017 = _3018;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3001;
                        frontier_phi_67_pred_1 = _3002;
                        frontier_phi_67_pred_2 = _3003;
                        frontier_phi_67_pred_3 = _3000;
                        frontier_phi_67_pred_4 = _2999;
                        frontier_phi_67_pred_5 = _2998;
                    }
                    _2666 = frontier_phi_67_pred;
                    _2668 = frontier_phi_67_pred_1;
                    _2670 = frontier_phi_67_pred_2;
                    _2664 = frontier_phi_67_pred_3;
                    _2662 = frontier_phi_67_pred_4;
                    _2660 = frontier_phi_67_pred_5;
                    uint _2805 = _2804 + 1u;
                    if (_2805 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2798 = _2660;
                        _2799 = _2662;
                        _2800 = _2664;
                        _2801 = _2666;
                        _2802 = _2668;
                        _2803 = _2670;
                        _2804 = _2805;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2668;
                frontier_phi_55_56_ladder_1 = _2670;
                frontier_phi_55_56_ladder_2 = _2666;
                frontier_phi_55_56_ladder_3 = _2664;
                frontier_phi_55_56_ladder_4 = _2662;
                frontier_phi_55_56_ladder_5 = _2660;
            }
            else
            {
                frontier_phi_55_56_ladder = _2546;
                frontier_phi_55_56_ladder_1 = _2548;
                frontier_phi_55_56_ladder_2 = _2544;
                frontier_phi_55_56_ladder_3 = _2542;
                frontier_phi_55_56_ladder_4 = _2540;
                frontier_phi_55_56_ladder_5 = _2538;
            }
            _2659 = frontier_phi_55_56_ladder_5;
            _2661 = frontier_phi_55_56_ladder_4;
            _2663 = frontier_phi_55_56_ladder_3;
            _2665 = frontier_phi_55_56_ladder_2;
            _2667 = frontier_phi_55_56_ladder;
            _2669 = frontier_phi_55_56_ladder_1;
        }
        float _2674 = isnan(1.0) ? _694 : (isnan(_694) ? 1.0 : min(_694, 1.0));
        _2405 = (_2674 * _2665) + _1860;
        _2407 = (_2674 * _2667) + _1862;
        _2409 = (_2674 * _2669) + _1864;
        _2411 = ((_2659 * 0.039999999105930328369140625) * _2674) + _2190;
        _2413 = ((_2661 * 0.039999999105930328369140625) * _2674) + _2192;
        _2415 = ((_2663 * 0.039999999105930328369140625) * _2674) + _2194;
    }
    else
    {
        _2405 = _1860;
        _2407 = _1862;
        _2409 = _1864;
        _2411 = _2190;
        _2413 = _2192;
        _2415 = _2194;
    }
    uint _2421 = _670 + uint(cbMatDynParam._m0[0u].w);
    float _2427 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2433 = (((((_2427 * cbMtdParam._m0[10u].x) * _404.x) * _427) * (((1.0 - _481) * cbMtdParam._m0[16u].z) + _481)) * _518) * cbInstanceData._m0[_2421].x;
    float _2439 = (((((_2427 * cbMtdParam._m0[10u].y) * _404.y) * _427) * (((1.0 - _483) * cbMtdParam._m0[16u].z) + _483)) * _518) * cbInstanceData._m0[_2421].y;
    float _2445 = (((((_2427 * cbMtdParam._m0[10u].z) * _404.z) * _427) * (((1.0 - _485) * cbMtdParam._m0[16u].z) + _485)) * _518) * cbInstanceData._m0[_2421].z;
    float _4335 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _4346 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
    float _4357 = isnan(0.0) ? _682 : (isnan(_682) ? 0.0 : max(_682, 0.0));
    float _2462 = (((isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0))) * (_2405 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _694))) + ((_2411 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + _2433;
    float _2464 = (_2439 + ((_2413 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2407 + ((isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))) * _694)));
    float _2466 = (_2445 + ((_2415 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _1500)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2409 + ((isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))) * _694)));
    float _4383 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2479 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    uint _2480 = _669 + 6u;
    float _2488 = _631 / cbSceneParam._m0[86u].x;
    float _2489 = _632 / cbSceneParam._m0[86u].y;
    vec4 _2503 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, (log2((isnan(cbSceneParam._m0[77u].w) ? _566 : (isnan(_566) ? cbSceneParam._m0[77u].w : min(_566, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2505 = _2503.x;
    float _2506 = _2503.y;
    float _2507 = _2503.z;
    float _2508 = _2503.w;
    float _2600;
    float _2602;
    float _2604;
    float _2606;
    if (_566 > cbSceneParam._m0[78u].w)
    {
        float _2563 = isnan(_566) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _566 : min(cbSceneParam._m0[80u].w, _566));
        float _2564 = _2563 / _566;
        float _2575 = _2564 * _616;
        float _2576 = _617 * _2564;
        float _2577 = (-0.0) - _2576;
        float _2578 = _2564 * _618;
        float _2580 = (cbSceneParam._m0[77u].w * _2577) / _2563;
        float _2581 = _2580 + cbSceneParam._m0[79u].w;
        float _2582 = cbSceneParam._m0[79u].w - _2576;
        float _2588 = sqrt(((_2575 * _2575) + (_2576 * _2576)) + (_2578 * _2578));
        float _2591 = (1.0 - (cbSceneParam._m0[77u].w / _2563)) * _2588;
        float _2596 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2598 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2760;
        if (abs((_2577 - _2580) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2760 = ((((_2581 > 0.0) ? exp2(_2596 * _2581) : (2.0 - exp2(_2598 * _2581))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2591;
        }
        else
        {
            float _2720 = 1.0 / cbSceneParam._m0[80u].x;
            float _2721 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : max(_2581, _2582));
            float _2722 = isnan(_2582) ? _2581 : (isnan(_2581) ? _2582 : min(_2581, _2582));
            float _2731 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : min(_2721, 0.0));
            float _2732 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : min(_2722, 0.0));
            _2760 = ((abs(_2588 / _2577) * cbSceneParam._m0[80u].y) * ((((_2731 - _2732) * 2.0) - ((exp2(_2596 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0)))) - exp2(_2596 * (isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0))))) * _2720)) - ((exp2(_2598 * _2731) - exp2(_2598 * _2732)) * _2720))) + (_2591 * cbSceneParam._m0[80u].z);
        }
        vec4 _2762 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2488, _2489, 1.0), 0.0);
        float _2771 = exp2((_2760 * (-1.44269502162933349609375)) * (1.0 - _2762.w));
        float _2772 = log2(_2771);
        float _2788 = log2(_2508);
        _2600 = (exp2(_2788 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].x)) * _2762.x) / cbSceneParam._m0[78u].x)) + _2505;
        _2602 = (exp2(_2788 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].y)) * _2762.y) / cbSceneParam._m0[78u].y)) + _2506;
        _2604 = (exp2(_2788 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2772 * cbSceneParam._m0[78u].z)) * _2762.z) / cbSceneParam._m0[78u].z)) + _2507;
        _2606 = _2771 * _2508;
    }
    else
    {
        _2600 = _2505;
        _2602 = _2506;
        _2604 = _2507;
        _2606 = _2508;
    }
    float _2618 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2619 = _2618 == 3.0;
    float _2620 = log2(_2606);
    float _2624 = exp2(_2620 * cbSceneParam._m0[78u].x);
    float _2625 = exp2(_2620 * cbSceneParam._m0[78u].y);
    float _2626 = exp2(_2620 * cbSceneParam._m0[78u].z);
    float _2627 = _2624 * (isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0)));
    float _2628 = _2625 * (isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0)));
    float _2629 = _2626 * (isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0)));
    float _2638 = (_2618 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2638 * (_2619 ? _2627 : (_2627 + (cbSceneParam._m0[72u].w * _2600)));
    SV_Target.y = _2638 * (_2619 ? _2628 : (_2628 + (cbSceneParam._m0[72u].w * _2602)));
    SV_Target.z = _2638 * (_2619 ? _2629 : (_2629 + (cbSceneParam._m0[72u].w * _2604)));
    SV_Target.w = cbInstanceData._m0[_2480].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2433) * _2479) * _2624) * _2638;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2439) * _2479) * _2625) * _2638;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2445) * _2479) * _2626) * _2638;
    SV_Target_1.w = cbInstanceData._m0[_2480].w;
}


