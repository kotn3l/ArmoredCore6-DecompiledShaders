#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _966;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _196 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _203 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _232 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _238 = _232.x * cbMtdParam._m0[9u].x;
    float _239 = _232.y * cbMtdParam._m0[9u].y;
    float _240 = _232.z * cbMtdParam._m0[9u].z;
    vec4 _253 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _257 = _253.z;
    float _261 = (_253.x * 2.0) + (-1.0);
    float _263 = (_253.y * 2.0) + (-1.0);
    float _264 = dot(vec2(_261, _263), vec2(_261, _263));
    float _3330 = isnan(0.0) ? _264 : (isnan(_264) ? 0.0 : max(_264, 0.0));
    float _270 = sqrt(1.0 - (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0))));
    float _296 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _297 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _310 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_296 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_297 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _324 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3341 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _325 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _333 = (((_325 * _325) * (3.0 - (_325 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _342 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _350 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3352 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _351 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _355 = (_351 * _351) * (3.0 - (_351 * 2.0));
    float _356 = _355 * cbMtdParam._m0[17u].x;
    float _357 = _355 * cbMtdParam._m0[17u].y;
    float _358 = sin(_342);
    float _359 = cos(_342);
    float _360 = TEXCOORD - _356;
    float _361 = TEXCOORD_1 - _357;
    vec4 _381 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_356 + fma(_361, (-0.0) - _358, _360 * _359))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_361, _359, _360 * _358) + _357)) + cbTextureTilingScale._m0[0u].w));
    float _387 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _381.x;
    float _389 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _381.y;
    float _391 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _381.z;
    vec4 _414 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _296) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _297) + cbTextureTilingScale._m0[5u].w));
    float _424 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_414.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3363 = isnan(0.0) ? _424 : (isnan(_424) ? 0.0 : max(_424, 0.0));
    float _425 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _429 = (cbMtdParam._m0[16u].y * _261) + _261;
    float _430 = (cbMtdParam._m0[16u].y * _263) + _263;
    float _433 = fma(_270, _203 * NORMAL.x, fma(_430, _210 * TANGENT.x, (_196 * _188) * _429));
    float _436 = fma(_270, _203 * NORMAL.y, fma(_430, _210 * TANGENT.y, (_196 * _189) * _429));
    float _439 = fma(_270, _203 * NORMAL.z, fma(_430, _210 * TANGENT.z, (_196 * _190) * _429));
    float _443 = inversesqrt(dot(vec3(_433, _436, _439), vec3(_433, _436, _439)));
    float _444 = _443 * _433;
    float _445 = _443 * _436;
    float _446 = _443 * _439;
    float _3374 = isnan(0.0) ? _257 : (isnan(_257) ? 0.0 : max(_257, 0.0));
    float _447 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _238 : (isnan(_238) ? 0.0 : max(_238, 0.0));
    float _3396 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3407 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _466 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _507 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _517 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _507);
    float _518 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _507);
    float _519 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _507);
    float _523 = inversesqrt(dot(vec3(_517, _518, _519), vec3(_517, _518, _519)));
    float _524 = _517 * _523;
    float _525 = _518 * _523;
    float _526 = _519 * _523;
    float _532 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _533 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _551 = fma(_446, cbSceneParam._m0[5u].z, fma(_445, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _444));
    float _554 = fma(_446, cbSceneParam._m0[6u].z, fma(_445, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _444));
    float _557 = fma(_446, cbSceneParam._m0[7u].z, fma(_445, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _444));
    uint _570 = uint(roundEven(NORMAL.w)) * 13u;
    uint _571 = _570 + 9u;
    uint _572 = _571 + uint(cbMatDynParam._m0[0u].w);
    float _578 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_572].x;
    float _579 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_572].y;
    float _580 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_572].z;
    float _3418 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _3429 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _3440 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    vec4 _592 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _532, cbSceneParam._m0[86u].y * _533));
    float _595 = _592.x * TEXCOORD_3.w;
    float _596 = dot(vec3(_444, _445, _446), vec3(_524, _525, _526));
    float _599 = _596 * 2.0;
    float _603 = (_599 * _444) - _524;
    float _604 = (_599 * _445) - _525;
    float _605 = (_599 * _446) - _526;
    float _609 = abs(dot(vec3(_524, _525, _526), vec3(_444, _445, _446)));
    float _3451 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _611 = sqrt(_447);
    float _623 = exp2((_611 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_611 * 3.0));
    float _655 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _659 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _663 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _965;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _690 = fma(_663, cbModelParam._m0[26u].z, fma(_659, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _655));
        float _694 = fma(_663, cbModelParam._m0[27u].z, fma(_659, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _655));
        float _698 = fma(_663, cbModelParam._m0[28u].z, fma(_659, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _655));
        float _723 = _655 + _444;
        float _724 = _659 + _445;
        float _725 = _663 + _446;
        float _735 = fma(_725, cbModelParam._m0[26u].z, fma(_724, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _723)) - _690;
        float _736 = fma(_725, cbModelParam._m0[27u].z, fma(_724, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _723)) - _694;
        float _737 = fma(_725, cbModelParam._m0[28u].z, fma(_724, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _723)) - _698;
        float _741 = inversesqrt(dot(vec3(_735, _736, _737), vec3(_735, _736, _737)));
        float _754 = ((_741 * _735) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_690 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _755 = ((_741 * _736) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_694 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _756 = ((_741 * _737) / cbModelParam._m0[34u].z) + ((((((_698 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_754, _755, _756), 0.0);
        float _793 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _794 = _793 * (_759.x + (-0.5));
        float _795 = _793 * (_759.y + (-0.5));
        float _796 = _793 * (_759.z + (-0.5));
        float _803 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _804 = _803 * (_766.x + (-0.5));
        float _805 = _803 * (_766.y + (-0.5));
        float _806 = _803 * (_766.z + (-0.5));
        float _813 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_773.x + (-0.5));
        float _815 = _813 * (_773.y + (-0.5));
        float _816 = _813 * (_773.z + (-0.5));
        float _823 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_780.x + (-0.5));
        float _825 = _823 * (_780.y + (-0.5));
        float _826 = _823 * (_780.z + (-0.5));
        float _827 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
        float _828 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _829 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _830 = _794 * 0.5;
        float _831 = _804 * 0.5;
        float _832 = _814 * 0.5;
        float _833 = dot(vec3(_830, _831, _832), vec3(_830, _831, _832));
        float _838 = (_833 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_833);
        float _847 = (dot(vec3(_444, _445, _446), vec3(_838 * _830, _838 * _831, _838 * _832)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _857 = sqrt(((_831 * _831) + (_830 * _830)) + (_832 * _832)) / (_827 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _858 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _859 = _858 * 2.0;
        float _863 = (1.0 - _858) / (_858 + 1.0);
        float _3499 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _873 = ((((1.0 - _864) * (_859 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_859 + 1.0))) + _864) * _827;
        float _874 = _795 * 0.5;
        float _875 = _805 * 0.5;
        float _876 = _815 * 0.5;
        float _877 = dot(vec3(_874, _875, _876), vec3(_874, _875, _876));
        float _882 = (_877 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_877);
        float _890 = (dot(vec3(_444, _445, _446), vec3(_882 * _874, _882 * _875, _882 * _876)) + 1.0) * 0.5;
        float _3510 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _899 = sqrt(((_875 * _875) + (_874 * _874)) + (_876 * _876)) / (_828 + 9.9999997473787516355514526367188e-06);
        float _3521 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _900 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _901 = _900 * 2.0;
        float _905 = (1.0 - _900) / (_900 + 1.0);
        float _3532 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _915 = ((((1.0 - _906) * (_901 + 2.0)) * exp2(log2(isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0))) * (_901 + 1.0))) + _906) * _828;
        float _916 = _796 * 0.5;
        float _917 = _806 * 0.5;
        float _918 = _816 * 0.5;
        float _919 = dot(vec3(_916, _917, _918), vec3(_916, _917, _918));
        float _924 = (_919 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_919);
        float _932 = (dot(vec3(_444, _445, _446), vec3(_924 * _916, _924 * _917, _924 * _918)) + 1.0) * 0.5;
        float _3543 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _941 = sqrt(((_917 * _917) + (_916 * _916)) + (_918 * _918)) / (_829 + 9.9999997473787516355514526367188e-06);
        float _3554 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _943 = _942 * 2.0;
        float _947 = (1.0 - _942) / (_942 + 1.0);
        float _3565 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
        float _948 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _957 = ((((1.0 - _948) * (_943 + 2.0)) * exp2(log2(isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * (_943 + 1.0))) + _948) * _829;
        _965 = _796;
        _967 = _795;
        _968 = _794;
        _969 = _806;
        _970 = _805;
        _971 = _804;
        _972 = _816;
        _973 = _815;
        _974 = _814;
        _975 = _829;
        _976 = _828;
        _977 = _827;
        _978 = cbModelParam._m0[36u].z * (isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0)));
        _979 = cbModelParam._m0[36u].z * (isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0)));
        _980 = cbModelParam._m0[36u].z * (isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)));
    }
    else
    {
        _965 = _966;
        _967 = _966;
        _968 = _966;
        _969 = _966;
        _970 = _966;
        _971 = _966;
        _972 = _966;
        _973 = _966;
        _974 = _966;
        _975 = _966;
        _976 = _966;
        _977 = _966;
        _978 = 0.0;
        _979 = 0.0;
        _980 = 0.0;
    }
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1006 = fma(_663, cbModelParam._m0[30u].z, fma(_659, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _655));
        float _1010 = fma(_663, cbModelParam._m0[31u].z, fma(_659, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _655));
        float _1014 = fma(_663, cbModelParam._m0[32u].z, fma(_659, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _655));
        float _1037 = _655 + _444;
        float _1038 = _659 + _445;
        float _1039 = _663 + _446;
        float _1049 = fma(_1039, cbModelParam._m0[30u].z, fma(_1038, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1037)) - _1006;
        float _1050 = fma(_1039, cbModelParam._m0[31u].z, fma(_1038, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1037)) - _1010;
        float _1051 = fma(_1039, cbModelParam._m0[32u].z, fma(_1038, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1037)) - _1014;
        float _1055 = inversesqrt(dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051)));
        float _1068 = ((_1055 * _1049) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1006 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1069 = ((_1055 * _1050) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1010 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1070 = ((_1055 * _1051) / cbModelParam._m0[35u].z) + ((((((_1014 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1068, _1069, _1070), 0.0);
        float _1105 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1072.x + (-0.5));
        float _1107 = _1105 * (_1072.y + (-0.5));
        float _1108 = _1105 * (_1072.z + (-0.5));
        float _1115 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1079.x + (-0.5));
        float _1117 = _1115 * (_1079.y + (-0.5));
        float _1118 = _1115 * (_1079.z + (-0.5));
        float _1125 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1086.x + (-0.5));
        float _1127 = _1125 * (_1086.y + (-0.5));
        float _1128 = _1125 * (_1086.z + (-0.5));
        float _1135 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1093.x + (-0.5));
        float _1137 = _1135 * (_1093.y + (-0.5));
        float _1138 = _1135 * (_1093.z + (-0.5));
        float _1139 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1140 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1141 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1142 = _1106 * 0.5;
        float _1143 = _1116 * 0.5;
        float _1144 = _1126 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_444, _445, _446), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1139 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3628 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1169 + 1.0))) + _1174) * _1139;
        float _1184 = _1107 * 0.5;
        float _1185 = _1117 * 0.5;
        float _1186 = _1127 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_444, _445, _446), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1140 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _3661 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_1211 + 1.0))) + _1216) * _1140;
        float _1226 = _1108 * 0.5;
        float _1227 = _1118 * 0.5;
        float _1228 = _1128 * 0.5;
        float _1229 = dot(vec3(_1226, _1227, _1228), vec3(_1226, _1227, _1228));
        float _1234 = (_1229 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1229);
        float _1242 = (dot(vec3(_444, _445, _446), vec3(_1234 * _1226, _1234 * _1227, _1234 * _1228)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1251 = sqrt(((_1227 * _1227) + (_1226 * _1226)) + (_1228 * _1228)) / (_1141 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1253 = _1252 * 2.0;
        float _1257 = (1.0 - _1252) / (_1252 + 1.0);
        float _3694 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1258 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1267 = ((((1.0 - _1258) * (_1253 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1253 + 1.0))) + _1258) * _1141;
        _1275 = _1108;
        _1276 = _1107;
        _1277 = _1106;
        _1278 = _1118;
        _1279 = _1117;
        _1280 = _1116;
        _1281 = _1128;
        _1282 = _1127;
        _1283 = _1126;
        _1284 = _1141;
        _1285 = _1140;
        _1286 = _1139;
        _1287 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1288 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
        _1289 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)));
    }
    else
    {
        _1275 = _966;
        _1276 = _966;
        _1277 = _966;
        _1278 = _966;
        _1279 = _966;
        _1280 = _966;
        _1281 = _966;
        _1282 = _966;
        _1283 = _966;
        _1284 = _966;
        _1285 = _966;
        _1286 = _966;
        _1287 = 0.0;
        _1288 = 0.0;
        _1289 = 0.0;
    }
    float _1299 = (cbModelParam._m0[1u].x * (_1287 - _978)) + _978;
    float _1300 = (cbModelParam._m0[1u].x * (_1288 - _979)) + _979;
    float _1301 = (cbModelParam._m0[1u].x * (_1289 - _980)) + _980;
    float _1322 = fma(_1301, cbSceneParam._m0[89u].z, fma(_1300, cbSceneParam._m0[89u].y, _1299 * cbSceneParam._m0[89u].x));
    float _1325 = fma(_1301, cbSceneParam._m0[90u].z, fma(_1300, cbSceneParam._m0[90u].y, _1299 * cbSceneParam._m0[90u].x));
    float _1328 = fma(_1301, cbSceneParam._m0[91u].z, fma(_1300, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1299));
    float _1343 = _603 * 0.5;
    float _1344 = _604 * 0.5;
    float _1345 = _605 * 0.5;
    float _1346 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1277, _1280, _1283, _1286));
    float _1349 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1276, _1279, _1282, _1285));
    float _1352 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_1275, _1278, _1281, _1284));
    float _1386;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1359 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_965, _969, _972, _975));
        float _1363 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_967, _970, _973, _976));
        float _1367 = dot(vec4(_1343, _1344, _1345, 1.0), vec4(_968, _971, _974, _977));
        float _1374 = dot(vec4(cbModelParam._m0[39u]), vec4(_1343, _1344, _1345, 1.0));
        _1386 = dot(vec3(isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1374) ? 0.0 : (isnan(0.0) ? _1374 : max(0.0, _1374))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1386 = 1.0;
    }
    float _1397;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1388 = dot(vec4(cbModelParam._m0[40u]), vec4(_1343, _1344, _1345, 1.0));
        _1397 = dot(vec3(isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)), isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0)), isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1397 = 1.0;
    }
    float _1401 = (_1397 * cbModelParam._m0[1u].x) + (_1386 * (1.0 - cbModelParam._m0[1u].x));
    float _1411 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _447);
    float _1412 = isnan(_1411) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1411 : min(cbModelParam._m0[25u].z, _1411));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1459 = fma(_663, cbModelParam._m0[13u].z, fma(_659, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655)) + cbModelParam._m0[13u].w;
        float _1463 = fma(_663, cbModelParam._m0[14u].z, fma(_659, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655)) + cbModelParam._m0[14u].w;
        float _1467 = fma(_663, cbModelParam._m0[15u].z, fma(_659, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655)) + cbModelParam._m0[15u].w;
        float _1470 = fma(_605, cbModelParam._m0[13u].z, fma(_604, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _603));
        float _1473 = fma(_605, cbModelParam._m0[14u].z, fma(_604, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _603));
        float _1476 = fma(_605, cbModelParam._m0[15u].z, fma(_604, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _603));
        float _1504;
        if (_1470 > 0.0)
        {
            _1504 = abs((1.0 - _1459) / _1470);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1459 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1504 = frontier_phi_14_12_ladder;
        }
        float _1708;
        if (_1473 > 0.0)
        {
            _1708 = abs((1.0 - _1463) / _1473);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1463 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1708 = frontier_phi_23_19_ladder;
        }
        float _1951;
        if (_1476 > 0.0)
        {
            _1951 = abs((1.0 - _1467) / _1476);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1476 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1467 + 1.0) / _1476);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _1951 = frontier_phi_35_30_ladder;
        }
        float _1953 = isnan(_1708) ? _1504 : (isnan(_1504) ? _1708 : min(_1504, _1708));
        float _1954 = isnan(_1951) ? _1953 : (isnan(_1953) ? _1951 : min(_1953, _1951));
        float _1958 = (_1954 * _1470) + _1459;
        float _1959 = (_1954 * _1473) + _1463;
        float _1960 = (_1954 * _1476) + _1467;
        float _1961 = _1954 * 9.9999997473787516355514526367188e-05;
        float _1963 = (-1.0) - _1961;
        float _1965 = _1961 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_1960 > _1965) || ((_1960 < _1963) || ((_1959 > _1965) || ((_1959 < _1963) || ((_1958 < _1963) || (_1958 > _1965))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2084 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1960, cbModelParam._m0[9u].z, fma(_1959, cbModelParam._m0[9u].y, _1958 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1960, cbModelParam._m0[10u].z, fma(_1959, cbModelParam._m0[10u].y, _1958 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1960, cbModelParam._m0[11u].z, fma(_1959, cbModelParam._m0[11u].y, _1958 * cbModelParam._m0[11u].x))), _1412);
            frontier_phi_13_35_ladder = _2084.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2084.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2084.x * cbModelParam._m0[1u].y;
        }
        _1492 = frontier_phi_13_35_ladder_2;
        _1494 = frontier_phi_13_35_ladder_1;
        _1496 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1480 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_603, _604, _605), _1412);
        _1492 = _1480.x * cbModelParam._m0[1u].y;
        _1494 = _1480.y * cbModelParam._m0[1u].y;
        _1496 = _1480.z * cbModelParam._m0[1u].y;
    }
    float _1500 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _447);
    float _1501 = isnan(_1500) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1500 : min(cbModelParam._m0[25u].w, _1500));
    float _1592;
    float _1594;
    float _1596;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1556 = fma(_663, cbModelParam._m0[21u].z, fma(_659, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655)) + cbModelParam._m0[21u].w;
        float _1560 = fma(_663, cbModelParam._m0[22u].z, fma(_659, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655)) + cbModelParam._m0[22u].w;
        float _1564 = fma(_663, cbModelParam._m0[23u].z, fma(_659, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655)) + cbModelParam._m0[23u].w;
        float _1567 = fma(_605, cbModelParam._m0[21u].z, fma(_604, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _603));
        float _1570 = fma(_605, cbModelParam._m0[22u].z, fma(_604, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _603));
        float _1573 = fma(_605, cbModelParam._m0[23u].z, fma(_604, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _603));
        float _1713;
        if (_1567 > 0.0)
        {
            _1713 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1713 = frontier_phi_25_21_ladder;
        }
        float _1978;
        if (_1570 > 0.0)
        {
            _1978 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1978 = frontier_phi_37_32_ladder;
        }
        float _2183;
        if (_1573 > 0.0)
        {
            _2183 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2183 = frontier_phi_46_43_ladder;
        }
        float _2185 = isnan(_1978) ? _1713 : (isnan(_1713) ? _1978 : min(_1713, _1978));
        float _2186 = isnan(_2183) ? _2185 : (isnan(_2185) ? _2183 : min(_2185, _2183));
        float _2190 = (_2186 * _1567) + _1556;
        float _2191 = (_2186 * _1570) + _1560;
        float _2192 = (_2186 * _1573) + _1564;
        float _2193 = _2186 * 9.9999997473787516355514526367188e-05;
        float _2194 = (-1.0) - _2193;
        float _2196 = _2193 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2192 > _2196) || ((_2192 < _2194) || ((_2191 > _2196) || ((_2191 < _2194) || ((_2190 < _2194) || (_2190 > _2196))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2192, cbModelParam._m0[17u].z, fma(_2191, cbModelParam._m0[17u].y, _2190 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2192, cbModelParam._m0[18u].z, fma(_2191, cbModelParam._m0[18u].y, _2190 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2192, cbModelParam._m0[19u].z, fma(_2191, cbModelParam._m0[19u].y, _2190 * cbModelParam._m0[19u].x))), _1501);
            frontier_phi_22_46_ladder = _2436.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2436.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2436.x * cbModelParam._m0[1u].z;
        }
        _1592 = frontier_phi_22_46_ladder_2;
        _1594 = frontier_phi_22_46_ladder_1;
        _1596 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1576 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_603, _604, _605), _1501);
        _1592 = _1576.x * cbModelParam._m0[1u].z;
        _1594 = _1576.y * cbModelParam._m0[1u].z;
        _1596 = _1576.z * cbModelParam._m0[1u].z;
    }
    float _1608 = ((((1.0 - _623) * ((_611 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_623 * _611)) * _595;
    float _1609 = _1608 * ((cbModelParam._m0[1u].w * (_1592 - _1492)) + _1492);
    float _1610 = _1608 * ((cbModelParam._m0[1u].w * (_1594 - _1494)) + _1494);
    float _1611 = _1608 * ((cbModelParam._m0[1u].w * (_1596 - _1496)) + _1496);
    float _1614 = fma(_1611, cbSceneParam._m0[89u].z, fma(_1610, cbSceneParam._m0[89u].y, _1609 * cbSceneParam._m0[89u].x));
    float _1617 = fma(_1611, cbSceneParam._m0[90u].z, fma(_1610, cbSceneParam._m0[90u].y, _1609 * cbSceneParam._m0[90u].x));
    float _1620 = fma(_1611, cbSceneParam._m0[91u].z, fma(_1610, cbSceneParam._m0[91u].y, _1609 * cbSceneParam._m0[91u].x));
    uvec4 _1630 = floatBitsToUint(cbInstanceData._m0[_570 + 5u]);
    uint _1632 = _1630.x * 14u;
    uint _1633 = _1632 + 13u;
    float _1640 = _595 + (-1.0);
    float _1645 = (cbLight._m0[_1633].x * _1640) + 1.0;
    float _1646 = (cbLight._m0[_1633].y * _1640) + 1.0;
    float _1647 = (cbLight._m0[_1633].z * _1640) + 1.0;
    float _1648 = (cbLight._m0[_1633].w * _1640) + 1.0;
    uint _1649 = _1632 + 5u;
    float _1655 = isnan(1.0) ? _1646 : (isnan(_1646) ? 1.0 : min(_1646, 1.0));
    uint _1659 = _1632 + 4u;
    float _1666 = isnan(1.0) ? _1645 : (isnan(_1645) ? 1.0 : min(_1645, 1.0));
    uint _1670 = _1632 | 1u;
    float _1681 = dot(vec3(cbLight._m0[_1632].xyz), vec3(_444, _445, _446));
    float _1684 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_444, _445, _446));
    float _3830 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _3841 = isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0));
    float _1689 = (isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0))) * 0.3183098733425140380859375;
    float _1691 = (isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0))) * 0.3183098733425140380859375;
    float _1698 = ((cbLight._m0[_1649].x * _1655) * _1691) + ((cbLight._m0[_1659].x * _1666) * _1689);
    float _1699 = ((_1655 * cbLight._m0[_1649].y) * _1691) + ((_1666 * cbLight._m0[_1659].y) * _1689);
    float _1700 = ((_1655 * cbLight._m0[_1649].z) * _1691) + ((_1666 * cbLight._m0[_1659].z) * _1689);
    uvec4 _1705 = floatBitsToUint(cbLight._m0[_1632 + 12u]);
    bool _1707 = _1705.x == 0u;
    float _1718;
    float _1720;
    float _1722;
    if (_1707)
    {
        _1718 = _1698;
        _1720 = _1699;
        _1722 = _1700;
    }
    else
    {
        uint _1726 = _1632 + 6u;
        float _1742 = (dot(vec3(cbLight._m0[_1632 + 2u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1743 = _1742 * _1742;
        float _3852 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
        float _1744 = isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0));
        float _1745 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
        _1718 = (((cbLight._m0[_1726].x * 0.3183098733425140380859375) * _1744) * _1745) + _1698;
        _1720 = (((cbLight._m0[_1726].y * 0.3183098733425140380859375) * _1744) * _1745) + _1699;
        _1722 = (((cbLight._m0[_1726].z * 0.3183098733425140380859375) * _1744) * _1745) + _1700;
    }
    bool _1725 = _1705.y == 0u;
    float _1763;
    float _1765;
    float _1767;
    if (_1725)
    {
        _1763 = _1718;
        _1765 = _1720;
        _1767 = _1722;
    }
    else
    {
        uint _1922 = _1632 + 7u;
        float _1938 = (dot(vec3(cbLight._m0[_1632 + 3u].xyz), vec3(_444, _445, _446)) * 0.5) + 0.5;
        float _1939 = _1938 * _1938;
        float _3868 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
        float _1940 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
        float _1941 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
        _1763 = (((cbLight._m0[_1922].x * 0.3183098733425140380859375) * _1940) * _1941) + _1718;
        _1765 = (((cbLight._m0[_1922].y * 0.3183098733425140380859375) * _1940) * _1941) + _1720;
        _1767 = (((cbLight._m0[_1922].z * 0.3183098733425140380859375) * _1940) * _1941) + _1722;
    }
    uint _1770 = _1632 + 8u;
    float _1783 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1632].w)) * _447) * 0.949999988079071044921875);
    float _1784 = _1783 * _1783;
    float _1785 = cbLight._m0[_1632].x + _524;
    float _1786 = cbLight._m0[_1632].y + _525;
    float _1787 = cbLight._m0[_1632].z + _526;
    float _1791 = inversesqrt(dot(vec3(_1785, _1786, _1787), vec3(_1785, _1786, _1787)));
    float _1792 = _1791 * _1785;
    float _1793 = _1791 * _1786;
    float _1794 = _1791 * _1787;
    float _1795 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1632].xyz));
    float _3884 = isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0));
    float _1798 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _3895 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _1799 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1800 = dot(vec3(_444, _445, _446), vec3(_1792, _1793, _1794));
    float _3906 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1804 = dot(vec3(cbLight._m0[_1632].xyz), vec3(_1792, _1793, _1794));
    float _3917 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1808 = _1784 * _1784;
    float _1812 = ((_1803 * _1803) * (_1808 + (-1.0))) + 1.0;
    float _1823 = (exp2(log2(1.0 - (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1824 = 1.0 - _1784;
    float _1835 = (0.5 / (((_1799 * ((_1798 * _1824) + _1784)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _1824) + _1784) * _1798))) * _1798;
    float _3928 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
    float _1837 = (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0))) * (_1808 / ((_1812 * _1812) * 3.141590118408203125));
    uint _1848 = _1632 + 9u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1670].w)) * _447) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1670].x + _524;
    float _1862 = cbLight._m0[_1670].y + _525;
    float _1863 = cbLight._m0[_1670].z + _526;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1670].xyz));
    float _3939 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _1875 = dot(vec3(_444, _445, _446), vec3(_1868, _1869, _1870));
    float _3950 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _1879 = dot(vec3(cbLight._m0[_1670].xyz), vec3(_1868, _1869, _1870));
    float _3961 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1883 = _1860 * _1860;
    float _1887 = ((_1878 * _1878) * (_1883 + (-1.0))) + 1.0;
    float _1896 = (exp2(log2(1.0 - (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1897 = 1.0 - _1860;
    float _1907 = (0.5 / (((_1799 * ((_1874 * _1897) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _1897) + _1860) * _1874))) * _1874;
    float _3972 = isnan(0.0) ? _1907 : (isnan(_1907) ? 0.0 : max(_1907, 0.0));
    float _1909 = (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_1883 / ((_1887 * _1887) * 3.141590118408203125));
    float _1919 = (((_1896 * cbLight._m0[_1848].x) * _1909) * _1655) + (((_1823 * cbLight._m0[_1770].x) * _1837) * _1666);
    float _1920 = (((_1896 * cbLight._m0[_1848].y) * _1909) * _1655) + (((_1823 * cbLight._m0[_1770].y) * _1837) * _1666);
    float _1921 = (((_1896 * cbLight._m0[_1848].z) * _1909) * _1655) + (((_1823 * cbLight._m0[_1770].z) * _1837) * _1666);
    float _1983;
    float _1985;
    float _1987;
    if (_1707)
    {
        _1983 = _1919;
        _1985 = _1920;
        _1987 = _1921;
    }
    else
    {
        uint _1989 = _1632 + 2u;
        uint _1993 = _1632 + 10u;
        float _2007 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1989].w)) * _447) * 0.949999988079071044921875);
        float _2008 = _2007 * _2007;
        float _2009 = cbLight._m0[_1989].x + _524;
        float _2010 = cbLight._m0[_1989].y + _525;
        float _2011 = cbLight._m0[_1989].z + _526;
        float _2015 = inversesqrt(dot(vec3(_2009, _2010, _2011), vec3(_2009, _2010, _2011)));
        float _2016 = _2015 * _2009;
        float _2017 = _2015 * _2010;
        float _2018 = _2015 * _2011;
        float _2019 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_1989].xyz));
        float _3983 = isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0));
        float _2022 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
        float _2023 = dot(vec3(_444, _445, _446), vec3(_2016, _2017, _2018));
        float _3994 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _2027 = dot(vec3(cbLight._m0[_1989].xyz), vec3(_2016, _2017, _2018));
        float _4005 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2031 = _2008 * _2008;
        float _2035 = ((_2026 * _2026) * (_2031 + (-1.0))) + 1.0;
        float _2044 = (exp2(log2(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2045 = 1.0 - _2008;
        float _2055 = (0.5 / (((_1799 * ((_2022 * _2045) + _2008)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _2045) + _2008) * _2022))) * _2022;
        float _4016 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
        float _2057 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_2031 / ((_2035 * _2035) * 3.141590118408203125));
        float _2058 = isnan(1.0) ? _1647 : (isnan(_1647) ? 1.0 : min(_1647, 1.0));
        _1983 = (((_2044 * cbLight._m0[_1993].x) * _2057) * _2058) + _1919;
        _1985 = (((_2044 * cbLight._m0[_1993].y) * _2057) * _2058) + _1920;
        _1987 = (((_2044 * cbLight._m0[_1993].z) * _2057) * _2058) + _1921;
    }
    float _2093;
    float _2095;
    float _2097;
    if (_1725)
    {
        _2093 = _1983;
        _2095 = _1985;
        _2097 = _1987;
    }
    else
    {
        uint _2104 = _1632 + 3u;
        uint _2108 = _1632 + 11u;
        float _2122 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2104].w)) * _447) * 0.949999988079071044921875);
        float _2123 = _2122 * _2122;
        float _2124 = cbLight._m0[_2104].x + _524;
        float _2125 = cbLight._m0[_2104].y + _525;
        float _2126 = cbLight._m0[_2104].z + _526;
        float _2130 = inversesqrt(dot(vec3(_2124, _2125, _2126), vec3(_2124, _2125, _2126)));
        float _2131 = _2130 * _2124;
        float _2132 = _2130 * _2125;
        float _2133 = _2130 * _2126;
        float _2134 = dot(vec3(_444, _445, _446), vec3(cbLight._m0[_2104].xyz));
        float _4032 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
        float _2137 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
        float _2138 = dot(vec3(_444, _445, _446), vec3(_2131, _2132, _2133));
        float _4043 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
        float _2141 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
        float _2142 = dot(vec3(cbLight._m0[_2104].xyz), vec3(_2131, _2132, _2133));
        float _4054 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2146 = _2123 * _2123;
        float _2150 = ((_2141 * _2141) * (_2146 + (-1.0))) + 1.0;
        float _2159 = (exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2160 = 1.0 - _2123;
        float _2170 = (0.5 / (((_1799 * ((_2137 * _2160) + _2123)) + 9.9999999392252902907785028219223e-09) + (((_1799 * _2160) + _2123) * _2137))) * _2137;
        float _4065 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
        float _2172 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_2146 / ((_2150 * _2150) * 3.141590118408203125));
        float _2173 = isnan(1.0) ? _1648 : (isnan(_1648) ? 1.0 : min(_1648, 1.0));
        _2093 = (((_2159 * cbLight._m0[_2108].x) * _2172) * _2173) + _1983;
        _2095 = (((_2159 * cbLight._m0[_2108].y) * _2172) * _2173) + _1985;
        _2097 = (((_2159 * cbLight._m0[_2108].z) * _2172) * _2173) + _1987;
    }
    float _2308;
    float _2310;
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    if (_1630.y == 0u)
    {
        float _2248 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2249 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2248;
        float _2250 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2248;
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2248;
        uvec4 _2263 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2264 = _2263.x;
        uint _2275 = uint((float(_2263.y) * floor(float(uint(cbSceneParam._m0[85u].y * _533) / _2264))) + floor(float(uint(cbSceneParam._m0[85u].x * _532) / _2264)));
        float _2285 = (log2(_2251 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2286 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
        uint _2289 = uint(isnan(14.0) ? _2286 : (isnan(_2286) ? 14.0 : min(_2286, 14.0)));
        uvec4 _2294 = texelFetch(g_lightClusterGridBuffer, int(((_2289 << 2u) + (_2275 << 6u)) >> 2u));
        uint _2295 = _2294.x;
        uint _2296 = _2263.z;
        float _2441;
        float _2443;
        float _2445;
        float _2447;
        float _2449;
        float _2451;
        if (((((1u << ((_2296 >> 4u) & 15u)) + 4294967295u) & _2295) == 0u) || ((_2296 & 240u) == 0u))
        {
            _2441 = 0.0;
            _2443 = 0.0;
            _2445 = 0.0;
            _2447 = 0.0;
            _2449 = 0.0;
            _2451 = 0.0;
        }
        else
        {
            float _2442;
            float _2444;
            float _2446;
            float _2448;
            float _2450;
            float _2452;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            float _2599 = 0.0;
            uint _2600 = 0u;
            uint _2609;
            bool _2610;
            for (;;)
            {
                _2609 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2600 << 2u)) >> 2u)).x;
                _2610 = _2609 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2610)
                {
                    frontier_phi_61_pred = _2594;
                    frontier_phi_61_pred_1 = _2599;
                    frontier_phi_61_pred_2 = _2598;
                    frontier_phi_61_pred_3 = _2597;
                    frontier_phi_61_pred_4 = _2596;
                    frontier_phi_61_pred_5 = _2595;
                }
                else
                {
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    uint _2724;
                    _2718 = _2594;
                    _2719 = _2595;
                    _2720 = _2596;
                    _2721 = _2597;
                    _2722 = _2598;
                    _2723 = _2599;
                    _2724 = _2609;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    float _2655;
                    for (;;)
                    {
                        uint _2728 = uint(findLSB(_2724)) + (_2600 << 5u);
                        uint _2725 = (_2724 + 4294967295u) & _2724;
                        uint _2730 = _2728 * 48u;
                        vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 3u)).x));
                        uint _2750 = (_2728 * 48u) + 4u;
                        vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2769 = (_2728 * 48u) + 8u;
                        vec3 _2780 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x));
                        float _2784 = _2744.x - _2249;
                        float _2785 = _2744.y - _2250;
                        float _2786 = _2744.z - _2251;
                        float _2787 = dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786));
                        float _2790 = inversesqrt(_2787);
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2794 = dot(vec3(_551, _554, _557), vec3(_2791, _2792, _2793));
                        float _2799 = 1.0 - (_2787 * _2744.w);
                        float _4091 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2800 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                        float _2801 = sqrt(_2787) * _2763.w;
                        float _2804 = 1.39999997615814208984375 / (_2801 + 1.39999997615814208984375);
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2794) + _2805;
                        float _2811 = _2801 * _2801;
                        float _2815 = ((isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))) * _2800) / ((_2811 * 0.699999988079071044921875) + 1.0);
                        float _2819 = (-0.0) - _2249;
                        float _2820 = (-0.0) - _2250;
                        float _2821 = (-0.0) - _2251;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2826 = _2825 * _2819;
                        float _2827 = _2825 * _2820;
                        float _2828 = _2825 * _2821;
                        float _2836 = exp2(log2(1.0 / ((_2811 * 3.5) + 5.0)) * 0.25);
                        float _2837 = 1.0 - _611;
                        float _2844 = sqrt(1.0 - ((1.0 - (_2837 * _2837)) * (1.0 - (_2836 * _2836))));
                        float _2845 = _2844 * _2844;
                        float _2846 = _2845 * _2845;
                        float _2847 = _2826 + _2791;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                        float _2857 = dot(vec3(_551, _554, _557), vec3(_2826, _2827, _2828));
                        float _4107 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                        float _2861 = dot(vec3(_551, _554, _557), vec3(_2853 * _2847, _2853 * _2848, _2853 * _2849));
                        float _4118 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                        float _2868 = ((_2864 * _2864) * (_2846 + (-1.0))) + 1.0;
                        float _2869 = _2804 * _2845;
                        float _2870 = _2869 * _2869;
                        float _2873 = ((1.0 - _2870) * _2794) + _2870;
                        float _4129 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0));
                        float _2875 = 1.0 - _2845;
                        float _2885 = (0.5 / (((_2874 * ((_2860 * _2875) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2874 * _2875) + _2845) * _2860))) * _2874;
                        float _4140 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2896 = (((_2846 * 3.1415927410125732421875) * (isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0)))) / ((_2868 * _2868) * ((_2811 * 2.1991131305694580078125) + 3.141590118408203125))) * _2800;
                        _2653 = (_2815 * _2763.x) + _2721;
                        _2654 = (_2815 * _2763.y) + _2722;
                        _2655 = (_2815 * _2763.z) + _2723;
                        _2650 = (_2896 * _2780.x) + _2718;
                        _2651 = (_2896 * _2780.y) + _2719;
                        _2652 = (_2896 * _2780.z) + _2720;
                        if (_2725 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2718 = _2650;
                            _2719 = _2651;
                            _2720 = _2652;
                            _2721 = _2653;
                            _2722 = _2654;
                            _2723 = _2655;
                            _2724 = _2725;
                        }
                    }
                    frontier_phi_61_pred = _2650;
                    frontier_phi_61_pred_1 = _2655;
                    frontier_phi_61_pred_2 = _2654;
                    frontier_phi_61_pred_3 = _2653;
                    frontier_phi_61_pred_4 = _2652;
                    frontier_phi_61_pred_5 = _2651;
                }
                _2442 = frontier_phi_61_pred;
                _2452 = frontier_phi_61_pred_1;
                _2450 = frontier_phi_61_pred_2;
                _2448 = frontier_phi_61_pred_3;
                _2446 = frontier_phi_61_pred_4;
                _2444 = frontier_phi_61_pred_5;
                uint _2601 = _2600 + 1u;
                if (_2601 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2594 = _2442;
                    _2595 = _2444;
                    _2596 = _2446;
                    _2597 = _2448;
                    _2598 = _2450;
                    _2599 = _2452;
                    _2600 = _2601;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2441 = _2442;
            _2443 = _2444;
            _2445 = _2446;
            _2447 = _2448;
            _2449 = _2450;
            _2451 = _2452;
        }
        uvec4 _2455 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2456 = _2455.z;
        uint _2458 = (_2456 >> 8u) & 15u;
        float _2562;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        if (((4294967295u << _2458) & _2295) == 0u)
        {
            _2562 = _2441;
            _2564 = _2443;
            _2566 = _2445;
            _2568 = _2447;
            _2570 = _2449;
            _2572 = _2451;
        }
        else
        {
            float _2587 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
            float _2588 = _2587 * _2249;
            float _2589 = _2587 * _2250;
            float _2590 = _2587 * _2251;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2458 < ((_2456 >> 12u) & 15u))
            {
                float _2563;
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2701 = _2441;
                float _2702 = _2443;
                float _2703 = _2445;
                float _2704 = _2447;
                float _2705 = _2449;
                float _2706 = _2451;
                uint _2707 = _2458;
                uint _2716;
                bool _2717;
                for (;;)
                {
                    _2716 = texelFetch(g_lightClassification, int((((_2289 << 5u) + (_2275 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                    _2717 = _2716 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2717)
                    {
                        frontier_phi_67_pred = _2704;
                        frontier_phi_67_pred_1 = _2705;
                        frontier_phi_67_pred_2 = _2706;
                        frontier_phi_67_pred_3 = _2703;
                        frontier_phi_67_pred_4 = _2702;
                        frontier_phi_67_pred_5 = _2701;
                    }
                    else
                    {
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _2914 = _2701;
                        float _2915 = _2702;
                        float _2916 = _2703;
                        float _2917 = _2704;
                        float _2918 = _2705;
                        float _2919 = _2706;
                        uint _2920 = _2716;
                        uint _2921;
                        vec4 _2946;
                        float _2947;
                        vec4 _2962;
                        vec3 _2974;
                        vec4 _2989;
                        vec4 _3005;
                        float _3052;
                        bool _3053;
                        for (;;)
                        {
                            uint _2931 = ((_2707 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2920));
                            _2921 = (_2920 + 4294967295u) & _2920;
                            uint _2933 = _2931 * 40u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            _2947 = _2946.w;
                            uint _2949 = (_2931 * 40u) + 4u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2931 * 40u) + 8u;
                            _2974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x));
                            uint _2976 = (_2931 * 40u) + 16u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2992 = (_2931 * 40u) + 20u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3008 = (_2931 * 40u) + 24u;
                            vec4 _3021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3008 + 3u)).x));
                            uint _3027 = (_2931 * 40u) + 28u;
                            vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3052 = fma(_2251, _3040.z, fma(_2250, _3040.y, _3040.x * _2249)) + _3040.w;
                            _3053 = !((fma(_2251, _3021.z, fma(_2250, _3021.y, _3021.x * _2249)) + _3021.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3053)
                            {
                                float _3080 = _2946.x - _2249;
                                float _3081 = _2946.y - _2250;
                                float _3082 = _2946.z - _2251;
                                float _3083 = dot(vec3(_3080, _3081, _3082), vec3(_3080, _3081, _3082));
                                float _3086 = inversesqrt(_3083);
                                float _3087 = _3086 * _3080;
                                float _3088 = _3086 * _3081;
                                float _3089 = _3086 * _3082;
                                float _3093 = 1.0 - (_3083 / (_2947 * _2947));
                                float _4151 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0));
                                float _3098 = sqrt(_3083) * _2962.w;
                                float _3100 = 1.39999997615814208984375 / (_3098 + 1.39999997615814208984375);
                                float _3101 = _3100 * _3100;
                                float _3104 = ((1.0 - _3101) * dot(vec3(_3087, _3088, _3089), vec3(_551, _554, _557))) + _3101;
                                float _3107 = _3098 * _3098;
                                float _3111 = (fma(_2251, _2989.z, fma(_2250, _2989.y, _2989.x * _2249)) + _2989.w) / _3052;
                                float _3112 = (fma(_2251, _3005.z, fma(_2250, _3005.y, _3005.x * _2249)) + _3005.w) / _3052;
                                float _3116 = 1.0 - dot(vec2(_3111, _3112), vec2(_3111, _3112));
                                float _4167 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                                float _3117 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
                                float _3118 = _3117 * (((isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0))) * _3094) / ((_3107 * 0.699999988079071044921875) + 1.0));
                                float _3130 = exp2(log2(1.0 / ((_3107 * 3.5) + 5.0)) * 0.25);
                                float _3131 = 1.0 - _611;
                                float _3138 = sqrt(1.0 - ((1.0 - (_3131 * _3131)) * (1.0 - (_3130 * _3130))));
                                float _3139 = _3138 * _3138;
                                float _3140 = _3139 * _3139;
                                float _3141 = _3087 - _2588;
                                float _3142 = _3088 - _2589;
                                float _3143 = _3089 - _2590;
                                float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                                float _3151 = dot(vec3(_551, _554, _557), vec3((-0.0) - _2588, (-0.0) - _2589, (-0.0) - _2590));
                                float _4178 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                                float _3154 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
                                float _3155 = dot(vec3(_551, _554, _557), vec3(_3147 * _3141, _3147 * _3142, _3147 * _3143));
                                float _4189 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                                float _3158 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
                                float _3162 = ((_3158 * _3158) * (_3140 + (-1.0))) + 1.0;
                                float _3163 = _3100 * _3139;
                                float _3164 = _3163 * _3163;
                                float _3170 = ((1.0 - _3164) * dot(vec3(_551, _554, _557), vec3(_3087, _3088, _3089))) + _3164;
                                float _4200 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3171 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                                float _3172 = 1.0 - _3139;
                                float _3182 = (0.5 / (((_3171 * ((_3154 * _3172) + _3139)) + 9.9999999392252902907785028219223e-09) + (((_3171 * _3172) + _3139) * _3154))) * _3171;
                                float _4211 = isnan(0.0) ? _3182 : (isnan(_3182) ? 0.0 : max(_3182, 0.0));
                                float _3192 = (_3117 * _3094) * (((_3140 * 3.1415927410125732421875) * (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0)))) / ((_3162 * _3162) * ((_3107 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3192 * _2974.x;
                                frontier_phi_73_pred_1 = _3192 * _2974.y;
                                frontier_phi_73_pred_2 = _3118 * _2962.z;
                                frontier_phi_73_pred_3 = _3118 * _2962.y;
                                frontier_phi_73_pred_4 = _3118 * _2962.x;
                                frontier_phi_73_pred_5 = _3192 * _2974.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3196 = frontier_phi_73_pred;
                            _3197 = frontier_phi_73_pred_1;
                            _3201 = frontier_phi_73_pred_2;
                            _3200 = frontier_phi_73_pred_3;
                            _3199 = frontier_phi_73_pred_4;
                            _3198 = frontier_phi_73_pred_5;
                            _2904 = _3199 + _2917;
                            _2905 = _3200 + _2918;
                            _2906 = _3201 + _2919;
                            _2901 = _3196 + _2914;
                            _2902 = _3197 + _2915;
                            _2903 = _3198 + _2916;
                            if (_2921 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2921;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2904;
                        frontier_phi_67_pred_1 = _2905;
                        frontier_phi_67_pred_2 = _2906;
                        frontier_phi_67_pred_3 = _2903;
                        frontier_phi_67_pred_4 = _2902;
                        frontier_phi_67_pred_5 = _2901;
                    }
                    _2569 = frontier_phi_67_pred;
                    _2571 = frontier_phi_67_pred_1;
                    _2573 = frontier_phi_67_pred_2;
                    _2567 = frontier_phi_67_pred_3;
                    _2565 = frontier_phi_67_pred_4;
                    _2563 = frontier_phi_67_pred_5;
                    uint _2708 = _2707 + 1u;
                    if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2701 = _2563;
                        _2702 = _2565;
                        _2703 = _2567;
                        _2704 = _2569;
                        _2705 = _2571;
                        _2706 = _2573;
                        _2707 = _2708;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2571;
                frontier_phi_55_56_ladder_1 = _2573;
                frontier_phi_55_56_ladder_2 = _2569;
                frontier_phi_55_56_ladder_3 = _2567;
                frontier_phi_55_56_ladder_4 = _2565;
                frontier_phi_55_56_ladder_5 = _2563;
            }
            else
            {
                frontier_phi_55_56_ladder = _2449;
                frontier_phi_55_56_ladder_1 = _2451;
                frontier_phi_55_56_ladder_2 = _2447;
                frontier_phi_55_56_ladder_3 = _2445;
                frontier_phi_55_56_ladder_4 = _2443;
                frontier_phi_55_56_ladder_5 = _2441;
            }
            _2562 = frontier_phi_55_56_ladder_5;
            _2564 = frontier_phi_55_56_ladder_4;
            _2566 = frontier_phi_55_56_ladder_3;
            _2568 = frontier_phi_55_56_ladder_2;
            _2570 = frontier_phi_55_56_ladder;
            _2572 = frontier_phi_55_56_ladder_1;
        }
        float _2577 = isnan(1.0) ? _595 : (isnan(_595) ? 1.0 : min(_595, 1.0));
        _2308 = (_2577 * _2568) + _1763;
        _2310 = (_2577 * _2570) + _1765;
        _2312 = (_2577 * _2572) + _1767;
        _2314 = ((_2562 * 0.039999999105930328369140625) * _2577) + _2093;
        _2316 = ((_2564 * 0.039999999105930328369140625) * _2577) + _2095;
        _2318 = ((_2566 * 0.039999999105930328369140625) * _2577) + _2097;
    }
    else
    {
        _2308 = _1763;
        _2310 = _1765;
        _2312 = _1767;
        _2314 = _2093;
        _2316 = _2095;
        _2318 = _2097;
    }
    uint _2324 = _571 + uint(cbMatDynParam._m0[0u].w);
    float _2330 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2336 = (((((_2330 * cbMtdParam._m0[10u].x) * _310.x) * _333) * (((1.0 - _387) * cbMtdParam._m0[16u].z) + _387)) * _425) * cbInstanceData._m0[_2324].x;
    float _2342 = (((((_2330 * cbMtdParam._m0[10u].y) * _310.y) * _333) * (((1.0 - _389) * cbMtdParam._m0[16u].z) + _389)) * _425) * cbInstanceData._m0[_2324].y;
    float _2348 = (((((_2330 * cbMtdParam._m0[10u].z) * _310.z) * _333) * (((1.0 - _391) * cbMtdParam._m0[16u].z) + _391)) * _425) * cbInstanceData._m0[_2324].z;
    float _4227 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _4238 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _4249 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _2365 = (((isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0))) * (_2308 + ((isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0))) * _595))) + ((_2314 + ((isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0))) * _1401)) * cbPerFrame._m0[3u].x)) + _2336;
    float _2367 = (_2342 + ((_2316 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _1401)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2310 + ((isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))) * _595)));
    float _2369 = (_2348 + ((_2318 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _1401)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0))) * (_2312 + ((isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0))) * _595)));
    float _4275 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2382 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
    uint _2383 = _570 + 6u;
    float _2391 = _532 / cbSceneParam._m0[86u].x;
    float _2392 = _533 / cbSceneParam._m0[86u].y;
    vec4 _2406 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2391, _2392, (log2((isnan(cbSceneParam._m0[77u].w) ? _466 : (isnan(_466) ? cbSceneParam._m0[77u].w : min(_466, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2408 = _2406.x;
    float _2409 = _2406.y;
    float _2410 = _2406.z;
    float _2411 = _2406.w;
    float _2503;
    float _2505;
    float _2507;
    float _2509;
    if (_466 > cbSceneParam._m0[78u].w)
    {
        float _2466 = isnan(_466) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _466 : min(cbSceneParam._m0[80u].w, _466));
        float _2467 = _2466 / _466;
        float _2478 = _2467 * _517;
        float _2479 = _518 * _2467;
        float _2480 = (-0.0) - _2479;
        float _2481 = _2467 * _519;
        float _2483 = (cbSceneParam._m0[77u].w * _2480) / _2466;
        float _2484 = _2483 + cbSceneParam._m0[79u].w;
        float _2485 = cbSceneParam._m0[79u].w - _2479;
        float _2491 = sqrt(((_2478 * _2478) + (_2479 * _2479)) + (_2481 * _2481));
        float _2494 = (1.0 - (cbSceneParam._m0[77u].w / _2466)) * _2491;
        float _2499 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2501 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2663;
        if (abs((_2480 - _2483) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2663 = ((((_2484 > 0.0) ? exp2(_2499 * _2484) : (2.0 - exp2(_2501 * _2484))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2494;
        }
        else
        {
            float _2623 = 1.0 / cbSceneParam._m0[80u].x;
            float _2624 = isnan(_2485) ? _2484 : (isnan(_2484) ? _2485 : max(_2484, _2485));
            float _2625 = isnan(_2485) ? _2484 : (isnan(_2484) ? _2485 : min(_2484, _2485));
            float _2634 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : min(_2624, 0.0));
            float _2635 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : min(_2625, 0.0));
            _2663 = ((abs(_2491 / _2480) * cbSceneParam._m0[80u].y) * ((((_2634 - _2635) * 2.0) - ((exp2(_2499 * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0)))) - exp2(_2499 * (isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0))))) * _2623)) - ((exp2(_2501 * _2634) - exp2(_2501 * _2635)) * _2623))) + (_2494 * cbSceneParam._m0[80u].z);
        }
        vec4 _2665 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2391, _2392, 1.0), 0.0);
        float _2674 = exp2((_2663 * (-1.44269502162933349609375)) * (1.0 - _2665.w));
        float _2675 = log2(_2674);
        float _2691 = log2(_2411);
        _2503 = (exp2(_2691 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].x)) * _2665.x) / cbSceneParam._m0[78u].x)) + _2408;
        _2505 = (exp2(_2691 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].y)) * _2665.y) / cbSceneParam._m0[78u].y)) + _2409;
        _2507 = (exp2(_2691 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2675 * cbSceneParam._m0[78u].z)) * _2665.z) / cbSceneParam._m0[78u].z)) + _2410;
        _2509 = _2674 * _2411;
    }
    else
    {
        _2503 = _2408;
        _2505 = _2409;
        _2507 = _2410;
        _2509 = _2411;
    }
    float _2521 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2522 = _2521 == 3.0;
    float _2523 = log2(_2509);
    float _2527 = exp2(_2523 * cbSceneParam._m0[78u].x);
    float _2528 = exp2(_2523 * cbSceneParam._m0[78u].y);
    float _2529 = exp2(_2523 * cbSceneParam._m0[78u].z);
    float _2530 = _2527 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0)));
    float _2531 = _2528 * (isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0)));
    float _2532 = _2529 * (isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0)));
    float _2541 = (_2521 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2541 * (_2522 ? _2530 : (_2530 + (cbSceneParam._m0[72u].w * _2503)));
    SV_Target.y = _2541 * (_2522 ? _2531 : (_2531 + (cbSceneParam._m0[72u].w * _2505)));
    SV_Target.z = _2541 * (_2522 ? _2532 : (_2532 + (cbSceneParam._m0[72u].w * _2507)));
    SV_Target.w = cbInstanceData._m0[_2383].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2336) * _2382) * _2527) * _2541;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2342) * _2382) * _2528) * _2541;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2348) * _2382) * _2529) * _2541;
    SV_Target_1.w = cbInstanceData._m0[_2383].w;
}


