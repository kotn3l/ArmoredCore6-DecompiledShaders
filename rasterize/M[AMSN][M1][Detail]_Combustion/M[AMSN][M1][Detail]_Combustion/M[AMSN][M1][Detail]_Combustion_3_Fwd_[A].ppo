#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1146;
float _3583;
float _3584;
float _3585;
float _3586;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _210 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _217 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _224 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _252 = _246.x * cbMtdParam._m0[9u].x;
    float _253 = _246.y * cbMtdParam._m0[9u].y;
    float _254 = _246.z * cbMtdParam._m0[9u].z;
    vec4 _278 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    vec4 _298 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _309 = (TEXCOORD_6 - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_6)) * (_298.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3595 = isnan(0.0) ? _309 : (isnan(_309) ? 0.0 : max(_309, 0.0));
    float _310 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    float _317 = (_310 * ((_278.x * cbMtdParam._m0[12u].x) - _252)) + _252;
    float _318 = (_310 * ((_278.y * cbMtdParam._m0[12u].y) - _253)) + _253;
    float _319 = (_310 * ((_278.z * cbMtdParam._m0[12u].z) - _254)) + _254;
    vec4 _331 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _333 = _331.x;
    float _335 = _333 - (_333 * _310);
    vec4 _347 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    vec4 _370 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _374 = _370.z;
    float _377 = (_370.x * 2.0) + (-1.0);
    float _378 = (_370.y * 2.0) + (-1.0);
    float _379 = dot(vec2(_377, _378), vec2(_377, _378));
    float _3606 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _384 = sqrt(1.0 - (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))));
    float _392 = (((_347.z - _374) * TEXCOORD_6) * cbMtdParam._m0[16u].x) + _374;
    float _412 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _413 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _426 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_412 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_413 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _440 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3617 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _449 = (((_441 * _441) * (3.0 - (_441 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _458 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _466 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3628 = isnan(0.0) ? _466 : (isnan(_466) ? 0.0 : max(_466, 0.0));
    float _467 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _471 = (_467 * _467) * (3.0 - (_467 * 2.0));
    float _472 = _471 * cbMtdParam._m0[17u].x;
    float _473 = _471 * cbMtdParam._m0[17u].y;
    float _474 = sin(_458);
    float _475 = cos(_458);
    float _476 = TEXCOORD - _472;
    float _477 = TEXCOORD_1 - _473;
    vec4 _497 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_472 + fma(_477, (-0.0) - _474, _476 * _475))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_477, _475, _476 * _474) + _473)) + cbTextureTilingScale._m0[0u].w));
    float _503 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _497.x;
    float _505 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _497.y;
    float _507 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _497.z;
    vec4 _530 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _412) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _413) + cbTextureTilingScale._m0[5u].w));
    float _539 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_530.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3639 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _540 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _550 = (((((_347.x * 2.0) + (-1.0)) * TEXCOORD_6) * cbMtdParam._m0[15u].x) + _377) + (cbMtdParam._m0[16u].y * _377);
    float _552 = (((((_347.y * 2.0) + (-1.0)) * TEXCOORD_7) * cbMtdParam._m0[15u].x) + _378) + (cbMtdParam._m0[16u].y * _378);
    float _555 = fma(_384, _217 * NORMAL.x, fma(_552, _224 * TANGENT.x, (_210 * _202) * _550));
    float _558 = fma(_384, _217 * NORMAL.y, fma(_552, _224 * TANGENT.y, (_210 * _203) * _550));
    float _561 = fma(_384, _217 * NORMAL.z, fma(_552, _224 * TANGENT.z, (_210 * _204) * _550));
    float _565 = inversesqrt(dot(vec3(_555, _558, _561), vec3(_555, _558, _561)));
    float _566 = _565 * _555;
    float _567 = _565 * _558;
    float _568 = _565 * _561;
    float _3650 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _569 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3672 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3683 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3694 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _573 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _589 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _639 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _629);
    float _640 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _629);
    float _641 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _629);
    float _645 = inversesqrt(dot(vec3(_639, _640, _641), vec3(_639, _640, _641)));
    float _646 = _639 * _645;
    float _647 = _640 * _645;
    float _648 = _641 * _645;
    vec4 _653 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _655 = _653.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _826 = sqrt(((_639 * _639) + (_640 * _640)) + (_641 * _641));
        float _832 = (cbMatDynParam._m0[5u].x * _826) + cbMatDynParam._m0[5u].y;
        float _3705 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _837 = (cbMatDynParam._m0[5u].z * _826) + cbMatDynParam._m0[5u].w;
        float _3716 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0))) - _833)) + _833) < ((_655 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _666 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _667 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _685 = fma(_568, cbSceneParam._m0[5u].z, fma(_567, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _566));
    float _688 = fma(_568, cbSceneParam._m0[6u].z, fma(_567, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _566));
    float _691 = fma(_568, cbSceneParam._m0[7u].z, fma(_567, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _566));
    uint _704 = uint(roundEven(NORMAL.w)) * 13u;
    uint _705 = _704 + 9u;
    uint _706 = _705 + uint(cbMatDynParam._m0[0u].w);
    float _712 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0)))) * cbInstanceData._m0[_706].x;
    float _713 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0)))) * cbInstanceData._m0[_706].y;
    float _714 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0)))) * cbInstanceData._m0[_706].z;
    float _3727 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _715 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
    float _3738 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _716 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
    float _3749 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
    float _717 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _718 = 1.0 - _573;
    float _719 = _715 * _718;
    float _720 = _716 * _718;
    float _721 = _717 * _718;
    float _726 = (_715 + (-0.039999999105930328369140625)) * _573;
    float _727 = (_716 + (-0.039999999105930328369140625)) * _573;
    float _728 = (_717 + (-0.039999999105930328369140625)) * _573;
    float _729 = _726 + 0.039999999105930328369140625;
    float _731 = _727 + 0.039999999105930328369140625;
    float _732 = _728 + 0.039999999105930328369140625;
    vec4 _741 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _666, cbSceneParam._m0[86u].y * _667));
    float _744 = _741.x * TEXCOORD_3.w;
    float _745 = dot(vec3(_566, _567, _568), vec3(_646, _647, _648));
    float _748 = _745 * 2.0;
    float _752 = (_748 * _566) - _646;
    float _753 = (_748 * _567) - _647;
    float _754 = (_748 * _568) - _648;
    float _758 = abs(dot(vec3(_646, _647, _648), vec3(_566, _567, _568)));
    float _3760 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _760 = sqrt(_569);
    float _772 = exp2((_760 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_760 * 3.0));
    float _778 = (1.0 - _772) * ((_760 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _779 = _772 * _760;
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _815 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1145;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _870 = fma(_815, cbModelParam._m0[26u].z, fma(_811, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _807));
        float _874 = fma(_815, cbModelParam._m0[27u].z, fma(_811, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _807));
        float _878 = fma(_815, cbModelParam._m0[28u].z, fma(_811, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _807));
        float _903 = _807 + _566;
        float _904 = _811 + _567;
        float _905 = _815 + _568;
        float _915 = fma(_905, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903)) - _870;
        float _916 = fma(_905, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903)) - _874;
        float _917 = fma(_905, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903)) - _878;
        float _921 = inversesqrt(dot(vec3(_915, _916, _917), vec3(_915, _916, _917)));
        float _934 = ((_921 * _915) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_870 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _935 = ((_921 * _916) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_874 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _936 = ((_921 * _917) / cbModelParam._m0[34u].z) + ((((((_878 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_934, _935, _936), 0.0);
        float _973 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_939.x + (-0.5));
        float _975 = _973 * (_939.y + (-0.5));
        float _976 = _973 * (_939.z + (-0.5));
        float _983 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_946.x + (-0.5));
        float _985 = _983 * (_946.y + (-0.5));
        float _986 = _983 * (_946.z + (-0.5));
        float _993 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _994 = _993 * (_953.x + (-0.5));
        float _995 = _993 * (_953.y + (-0.5));
        float _996 = _993 * (_953.z + (-0.5));
        float _1003 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = _1003 * (_960.x + (-0.5));
        float _1005 = _1003 * (_960.y + (-0.5));
        float _1006 = _1003 * (_960.z + (-0.5));
        float _1007 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1008 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1009 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1010 = _974 * 0.5;
        float _1011 = _984 * 0.5;
        float _1012 = _994 * 0.5;
        float _1013 = dot(vec3(_1010, _1011, _1012), vec3(_1010, _1011, _1012));
        float _1018 = (_1013 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1013);
        float _1027 = (dot(vec3(_566, _567, _568), vec3(_1018 * _1010, _1018 * _1011, _1018 * _1012)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1037 = sqrt(((_1011 * _1011) + (_1010 * _1010)) + (_1012 * _1012)) / (_1007 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1039 = _1038 * 2.0;
        float _1043 = (1.0 - _1038) / (_1038 + 1.0);
        float _3808 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1053 = ((((1.0 - _1044) * (_1039 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1039 + 1.0))) + _1044) * _1007;
        float _1054 = _975 * 0.5;
        float _1055 = _985 * 0.5;
        float _1056 = _995 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_566, _567, _568), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3819 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1008 + 9.9999997473787516355514526367188e-06);
        float _3830 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3841 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * (_1081 + 1.0))) + _1086) * _1008;
        float _1096 = _976 * 0.5;
        float _1097 = _986 * 0.5;
        float _1098 = _996 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_566, _567, _568), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3852 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1009 + 9.9999997473787516355514526367188e-06);
        float _3863 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3874 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * (_1123 + 1.0))) + _1128) * _1009;
        _1145 = _976;
        _1147 = _975;
        _1148 = _974;
        _1149 = _986;
        _1150 = _985;
        _1151 = _984;
        _1152 = _996;
        _1153 = _995;
        _1154 = _994;
        _1155 = _1009;
        _1156 = _1008;
        _1157 = _1007;
        _1158 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)));
        _1159 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1160 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
    }
    else
    {
        _1145 = _1146;
        _1147 = _1146;
        _1148 = _1146;
        _1149 = _1146;
        _1150 = _1146;
        _1151 = _1146;
        _1152 = _1146;
        _1153 = _1146;
        _1154 = _1146;
        _1155 = _1146;
        _1156 = _1146;
        _1157 = _1146;
        _1158 = 0.0;
        _1159 = 0.0;
        _1160 = 0.0;
    }
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1189 = fma(_815, cbModelParam._m0[30u].z, fma(_811, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _807));
        float _1193 = fma(_815, cbModelParam._m0[31u].z, fma(_811, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _807));
        float _1197 = fma(_815, cbModelParam._m0[32u].z, fma(_811, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _807));
        float _1220 = _807 + _566;
        float _1221 = _811 + _567;
        float _1222 = _815 + _568;
        float _1232 = fma(_1222, cbModelParam._m0[30u].z, fma(_1221, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1220)) - _1189;
        float _1233 = fma(_1222, cbModelParam._m0[31u].z, fma(_1221, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1220)) - _1193;
        float _1234 = fma(_1222, cbModelParam._m0[32u].z, fma(_1221, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1220)) - _1197;
        float _1238 = inversesqrt(dot(vec3(_1232, _1233, _1234), vec3(_1232, _1233, _1234)));
        float _1251 = ((_1238 * _1232) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1189 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1252 = ((_1238 * _1233) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1193 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1253 = ((_1238 * _1234) / cbModelParam._m0[35u].z) + ((((((_1197 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1251, _1252, _1253), 0.0);
        float _1288 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1255.x + (-0.5));
        float _1290 = _1288 * (_1255.y + (-0.5));
        float _1291 = _1288 * (_1255.z + (-0.5));
        float _1298 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1262.x + (-0.5));
        float _1300 = _1298 * (_1262.y + (-0.5));
        float _1301 = _1298 * (_1262.z + (-0.5));
        float _1308 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1269.x + (-0.5));
        float _1310 = _1308 * (_1269.y + (-0.5));
        float _1311 = _1308 * (_1269.z + (-0.5));
        float _1318 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1276.x + (-0.5));
        float _1320 = _1318 * (_1276.y + (-0.5));
        float _1321 = _1318 * (_1276.z + (-0.5));
        float _1322 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1323 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1324 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1325 = _1289 * 0.5;
        float _1326 = _1299 * 0.5;
        float _1327 = _1309 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_566, _567, _568), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1322 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _3937 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1352 + 1.0))) + _1357) * _1322;
        float _1367 = _1290 * 0.5;
        float _1368 = _1300 * 0.5;
        float _1369 = _1310 * 0.5;
        float _1370 = dot(vec3(_1367, _1368, _1369), vec3(_1367, _1368, _1369));
        float _1375 = (_1370 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1370);
        float _1383 = (dot(vec3(_566, _567, _568), vec3(_1375 * _1367, _1375 * _1368, _1375 * _1369)) + 1.0) * 0.5;
        float _3948 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1392 = sqrt(((_1368 * _1368) + (_1367 * _1367)) + (_1369 * _1369)) / (_1323 + 9.9999997473787516355514526367188e-06);
        float _3959 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1394 = _1393 * 2.0;
        float _1398 = (1.0 - _1393) / (_1393 + 1.0);
        float _3970 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1408 = ((((1.0 - _1399) * (_1394 + 2.0)) * exp2(log2(isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0))) * (_1394 + 1.0))) + _1399) * _1323;
        float _1409 = _1291 * 0.5;
        float _1410 = _1301 * 0.5;
        float _1411 = _1311 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_566, _567, _568), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1324 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _4003 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1436 + 1.0))) + _1441) * _1324;
        _1458 = _1291;
        _1459 = _1290;
        _1460 = _1289;
        _1461 = _1301;
        _1462 = _1300;
        _1463 = _1299;
        _1464 = _1311;
        _1465 = _1310;
        _1466 = _1309;
        _1467 = _1324;
        _1468 = _1323;
        _1469 = _1322;
        _1470 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
        _1471 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)));
        _1472 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
    }
    else
    {
        _1458 = _1146;
        _1459 = _1146;
        _1460 = _1146;
        _1461 = _1146;
        _1462 = _1146;
        _1463 = _1146;
        _1464 = _1146;
        _1465 = _1146;
        _1466 = _1146;
        _1467 = _1146;
        _1468 = _1146;
        _1469 = _1146;
        _1470 = 0.0;
        _1471 = 0.0;
        _1472 = 0.0;
    }
    float _1482 = (cbModelParam._m0[1u].x * (_1470 - _1158)) + _1158;
    float _1483 = (cbModelParam._m0[1u].x * (_1471 - _1159)) + _1159;
    float _1484 = (cbModelParam._m0[1u].x * (_1472 - _1160)) + _1160;
    float _1505 = fma(_1484, cbSceneParam._m0[89u].z, fma(_1483, cbSceneParam._m0[89u].y, _1482 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1484, cbSceneParam._m0[90u].z, fma(_1483, cbSceneParam._m0[90u].y, _1482 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1484, cbSceneParam._m0[91u].z, fma(_1483, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1482));
    float _1526 = _752 * 0.5;
    float _1527 = _753 * 0.5;
    float _1528 = _754 * 0.5;
    float _1529 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1460, _1463, _1466, _1469));
    float _1532 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1459, _1462, _1465, _1468));
    float _1535 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1458, _1461, _1464, _1467));
    float _1569;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1542 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1145, _1149, _1152, _1155));
        float _1546 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1147, _1150, _1153, _1156));
        float _1550 = dot(vec4(_1526, _1527, _1528, 1.0), vec4(_1148, _1151, _1154, _1157));
        float _1557 = dot(vec4(cbModelParam._m0[39u]), vec4(_1526, _1527, _1528, 1.0));
        _1569 = dot(vec3(isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1569 = 1.0;
    }
    float _1580;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1571 = dot(vec4(cbModelParam._m0[40u]), vec4(_1526, _1527, _1528, 1.0));
        _1580 = dot(vec3(isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1580 = 1.0;
    }
    float _1584 = (_1580 * cbModelParam._m0[1u].x) + (_1569 * (1.0 - cbModelParam._m0[1u].x));
    float _1594 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _569);
    float _1595 = isnan(_1594) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1594 : min(cbModelParam._m0[25u].z, _1594));
    float _1675;
    float _1677;
    float _1679;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1642 = fma(_815, cbModelParam._m0[13u].z, fma(_811, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _807)) + cbModelParam._m0[13u].w;
        float _1646 = fma(_815, cbModelParam._m0[14u].z, fma(_811, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _807)) + cbModelParam._m0[14u].w;
        float _1650 = fma(_815, cbModelParam._m0[15u].z, fma(_811, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _807)) + cbModelParam._m0[15u].w;
        float _1653 = fma(_754, cbModelParam._m0[13u].z, fma(_753, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _752));
        float _1656 = fma(_754, cbModelParam._m0[14u].z, fma(_753, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _752));
        float _1659 = fma(_754, cbModelParam._m0[15u].z, fma(_753, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _752));
        float _1687;
        if (_1653 > 0.0)
        {
            _1687 = abs((1.0 - _1642) / _1653);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1642 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1687 = frontier_phi_17_15_ladder;
        }
        float _1891;
        if (_1656 > 0.0)
        {
            _1891 = abs((1.0 - _1646) / _1656);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1656 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1646 + 1.0) / _1656);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1891 = frontier_phi_26_22_ladder;
        }
        float _2145;
        if (_1659 > 0.0)
        {
            _2145 = abs((1.0 - _1650) / _1659);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1650 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2145 = frontier_phi_38_33_ladder;
        }
        float _2147 = isnan(_1891) ? _1687 : (isnan(_1687) ? _1891 : min(_1687, _1891));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1653) + _1642;
        float _2153 = (_2148 * _1656) + _1646;
        float _2154 = (_2148 * _1659) + _1650;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2157 = (-1.0) - _2155;
        float _2159 = _2155 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2154 > _2159) || ((_2154 < _2157) || ((_2153 > _2159) || ((_2153 < _2157) || ((_2152 < _2157) || (_2152 > _2159))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2282 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2154, cbModelParam._m0[9u].z, fma(_2153, cbModelParam._m0[9u].y, _2152 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2154, cbModelParam._m0[10u].z, fma(_2153, cbModelParam._m0[10u].y, _2152 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2154, cbModelParam._m0[11u].z, fma(_2153, cbModelParam._m0[11u].y, _2152 * cbModelParam._m0[11u].x))), _1595);
            frontier_phi_16_38_ladder = _2282.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2282.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2282.x * cbModelParam._m0[1u].y;
        }
        _1675 = frontier_phi_16_38_ladder_2;
        _1677 = frontier_phi_16_38_ladder_1;
        _1679 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1663 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_752, _753, _754), _1595);
        _1675 = _1663.x * cbModelParam._m0[1u].y;
        _1677 = _1663.y * cbModelParam._m0[1u].y;
        _1679 = _1663.z * cbModelParam._m0[1u].y;
    }
    float _1683 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _569);
    float _1684 = isnan(_1683) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1683 : min(cbModelParam._m0[25u].w, _1683));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1739 = fma(_815, cbModelParam._m0[21u].z, fma(_811, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _807)) + cbModelParam._m0[21u].w;
        float _1743 = fma(_815, cbModelParam._m0[22u].z, fma(_811, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _807)) + cbModelParam._m0[22u].w;
        float _1747 = fma(_815, cbModelParam._m0[23u].z, fma(_811, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _807)) + cbModelParam._m0[23u].w;
        float _1750 = fma(_754, cbModelParam._m0[21u].z, fma(_753, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _752));
        float _1753 = fma(_754, cbModelParam._m0[22u].z, fma(_753, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _752));
        float _1756 = fma(_754, cbModelParam._m0[23u].z, fma(_753, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _752));
        float _1896;
        if (_1750 > 0.0)
        {
            _1896 = abs((1.0 - _1739) / _1750);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1739 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1896 = frontier_phi_28_24_ladder;
        }
        float _2172;
        if (_1753 > 0.0)
        {
            _2172 = abs((1.0 - _1743) / _1753);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1743 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2172 = frontier_phi_40_35_ladder;
        }
        float _2385;
        if (_1756 > 0.0)
        {
            _2385 = abs((1.0 - _1747) / _1756);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1747 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2385 = frontier_phi_49_46_ladder;
        }
        float _2387 = isnan(_2172) ? _1896 : (isnan(_1896) ? _2172 : min(_1896, _2172));
        float _2388 = isnan(_2385) ? _2387 : (isnan(_2387) ? _2385 : min(_2387, _2385));
        float _2392 = (_2388 * _1750) + _1739;
        float _2393 = (_2388 * _1753) + _1743;
        float _2394 = (_2388 * _1756) + _1747;
        float _2395 = _2388 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2395;
        float _2398 = _2395 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2394 > _2398) || ((_2394 < _2396) || ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 < _2396) || (_2392 > _2398))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2394, cbModelParam._m0[17u].z, fma(_2393, cbModelParam._m0[17u].y, _2392 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2394, cbModelParam._m0[18u].z, fma(_2393, cbModelParam._m0[18u].y, _2392 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2394, cbModelParam._m0[19u].z, fma(_2393, cbModelParam._m0[19u].y, _2392 * cbModelParam._m0[19u].x))), _1684);
            frontier_phi_25_49_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1775 = frontier_phi_25_49_ladder_2;
        _1777 = frontier_phi_25_49_ladder_1;
        _1779 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_752, _753, _754), _1684);
        _1775 = _1759.x * cbModelParam._m0[1u].z;
        _1777 = _1759.y * cbModelParam._m0[1u].z;
        _1779 = _1759.z * cbModelParam._m0[1u].z;
    }
    float _1792 = (((_778 * _729) + _779) * _744) * ((cbModelParam._m0[1u].w * (_1775 - _1675)) + _1675);
    float _1794 = (((_778 * _731) + _779) * _744) * ((cbModelParam._m0[1u].w * (_1777 - _1677)) + _1677);
    float _1796 = (((_778 * _732) + _779) * _744) * ((cbModelParam._m0[1u].w * (_1779 - _1679)) + _1679);
    float _1799 = fma(_1796, cbSceneParam._m0[89u].z, fma(_1794, cbSceneParam._m0[89u].y, _1792 * cbSceneParam._m0[89u].x));
    float _1802 = fma(_1796, cbSceneParam._m0[90u].z, fma(_1794, cbSceneParam._m0[90u].y, _1792 * cbSceneParam._m0[90u].x));
    float _1805 = fma(_1796, cbSceneParam._m0[91u].z, fma(_1794, cbSceneParam._m0[91u].y, _1792 * cbSceneParam._m0[91u].x));
    uvec4 _1815 = floatBitsToUint(cbInstanceData._m0[_704 + 5u]);
    uint _1817 = _1815.x * 14u;
    uint _1818 = _1817 + 13u;
    float _1825 = _744 + (-1.0);
    float _1830 = (cbLight._m0[_1818].x * _1825) + 1.0;
    float _1831 = (cbLight._m0[_1818].y * _1825) + 1.0;
    float _1832 = (cbLight._m0[_1818].z * _1825) + 1.0;
    float _1833 = (cbLight._m0[_1818].w * _1825) + 1.0;
    uint _1834 = _1817 + 5u;
    float _1840 = isnan(1.0) ? _1831 : (isnan(_1831) ? 1.0 : min(_1831, 1.0));
    uint _1844 = _1817 + 4u;
    float _1850 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1854 = _1817 | 1u;
    float _1865 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_566, _567, _568));
    float _1868 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_566, _567, _568));
    float _4139 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _4150 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1873 = (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0))) * 0.3183098733425140380859375;
    float _1875 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * 0.3183098733425140380859375;
    float _1882 = ((cbLight._m0[_1834].x * _1840) * _1875) + ((cbLight._m0[_1844].x * _1850) * _1873);
    float _1883 = ((_1840 * cbLight._m0[_1834].y) * _1875) + ((_1850 * cbLight._m0[_1844].y) * _1873);
    float _1884 = ((_1840 * cbLight._m0[_1834].z) * _1875) + ((_1850 * cbLight._m0[_1844].z) * _1873);
    uvec4 _1888 = floatBitsToUint(cbLight._m0[_1817 + 12u]);
    bool _1890 = _1888.x == 0u;
    float _1901;
    float _1903;
    float _1905;
    if (_1890)
    {
        _1901 = _1882;
        _1903 = _1883;
        _1905 = _1884;
    }
    else
    {
        uint _1909 = _1817 + 6u;
        float _1925 = (dot(vec3(cbLight._m0[_1817 + 2u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _1926 = _1925 * _1925;
        float _4161 = isnan(0.0) ? _1926 : (isnan(_1926) ? 0.0 : max(_1926, 0.0));
        float _1927 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1928 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _1901 = (((cbLight._m0[_1909].x * 0.3183098733425140380859375) * _1927) * _1928) + _1882;
        _1903 = (((cbLight._m0[_1909].y * 0.3183098733425140380859375) * _1927) * _1928) + _1883;
        _1905 = (((cbLight._m0[_1909].z * 0.3183098733425140380859375) * _1927) * _1928) + _1884;
    }
    bool _1908 = _1888.y == 0u;
    float _1946;
    float _1948;
    float _1950;
    if (_1908)
    {
        _1946 = _1901;
        _1948 = _1903;
        _1950 = _1905;
    }
    else
    {
        uint _2116 = _1817 + 7u;
        float _2132 = (dot(vec3(cbLight._m0[_1817 + 3u].xyz), vec3(_566, _567, _568)) * 0.5) + 0.5;
        float _2133 = _2132 * _2132;
        float _4177 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
        float _2134 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _2135 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _1946 = (((cbLight._m0[_2116].x * 0.3183098733425140380859375) * _2134) * _2135) + _1901;
        _1948 = (((cbLight._m0[_2116].y * 0.3183098733425140380859375) * _2134) * _2135) + _1903;
        _1950 = (((cbLight._m0[_2116].z * 0.3183098733425140380859375) * _2134) * _2135) + _1905;
    }
    uint _1953 = _1817 + 8u;
    float _1966 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1817].w)) * _569) * 0.949999988079071044921875);
    float _1967 = _1966 * _1966;
    float _1968 = cbLight._m0[_1817].x + _646;
    float _1969 = cbLight._m0[_1817].y + _647;
    float _1970 = cbLight._m0[_1817].z + _648;
    float _1974 = inversesqrt(dot(vec3(_1968, _1969, _1970), vec3(_1968, _1969, _1970)));
    float _1975 = _1974 * _1968;
    float _1976 = _1974 * _1969;
    float _1977 = _1974 * _1970;
    float _1978 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1817].xyz));
    float _4193 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
    float _1981 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _4204 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _1982 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
    float _1983 = dot(vec3(_566, _567, _568), vec3(_1975, _1976, _1977));
    float _4215 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1817].xyz), vec3(_1975, _1976, _1977));
    float _4226 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1991 = _1967 * _1967;
    float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
    float _2003 = exp2(log2(1.0 - (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0)))) * 5.0);
    float _2004 = 0.959999978542327880859375 - _726;
    float _2006 = 0.959999978542327880859375 - _727;
    float _2007 = 0.959999978542327880859375 - _728;
    float _2014 = 1.0 - _1967;
    float _2025 = (0.5 / (((_1982 * ((_1981 * _2014) + _1967)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2014) + _1967) * _1981))) * _1981;
    float _4237 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2027 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
    uint _2038 = _1817 + 9u;
    float _2049 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _569) * 0.949999988079071044921875);
    float _2050 = _2049 * _2049;
    float _2051 = cbLight._m0[_1854].x + _646;
    float _2052 = cbLight._m0[_1854].y + _647;
    float _2053 = cbLight._m0[_1854].z + _648;
    float _2057 = inversesqrt(dot(vec3(_2051, _2052, _2053), vec3(_2051, _2052, _2053)));
    float _2058 = _2057 * _2051;
    float _2059 = _2057 * _2052;
    float _2060 = _2057 * _2053;
    float _2061 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_1854].xyz));
    float _4248 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0));
    float _2064 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _2065 = dot(vec3(_566, _567, _568), vec3(_2058, _2059, _2060));
    float _4259 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
    float _2068 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2069 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_2058, _2059, _2060));
    float _4270 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2073 = _2050 * _2050;
    float _2077 = ((_2068 * _2068) * (_2073 + (-1.0))) + 1.0;
    float _2084 = exp2(log2(1.0 - (isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0)))) * 5.0);
    float _2091 = 1.0 - _2050;
    float _2101 = (0.5 / (((_1982 * ((_2064 * _2091) + _2050)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2091) + _2050) * _2064))) * _2064;
    float _4281 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    float _2103 = (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_2073 / ((_2077 * _2077) * 3.141590118408203125));
    float _2113 = (((((_2084 * _2004) + _729) * cbLight._m0[_2038].x) * _2103) * _1840) + (((((_2003 * _2004) + _729) * cbLight._m0[_1953].x) * _2027) * _1850);
    float _2114 = (((((_2084 * _2006) + _731) * cbLight._m0[_2038].y) * _2103) * _1840) + (((((_2003 * _2006) + _731) * cbLight._m0[_1953].y) * _2027) * _1850);
    float _2115 = (((((_2084 * _2007) + _732) * cbLight._m0[_2038].z) * _2103) * _1840) + (((((_2003 * _2007) + _732) * cbLight._m0[_1953].z) * _2027) * _1850);
    float _2177;
    float _2179;
    float _2181;
    if (_1890)
    {
        _2177 = _2113;
        _2179 = _2114;
        _2181 = _2115;
    }
    else
    {
        uint _2183 = _1817 + 2u;
        uint _2187 = _1817 + 10u;
        float _2201 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2183].w)) * _569) * 0.949999988079071044921875);
        float _2202 = _2201 * _2201;
        float _2203 = cbLight._m0[_2183].x + _646;
        float _2204 = cbLight._m0[_2183].y + _647;
        float _2205 = cbLight._m0[_2183].z + _648;
        float _2209 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
        float _2210 = _2209 * _2203;
        float _2211 = _2209 * _2204;
        float _2212 = _2209 * _2205;
        float _2213 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2183].xyz));
        float _4292 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2216 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _2217 = dot(vec3(_566, _567, _568), vec3(_2210, _2211, _2212));
        float _4303 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
        float _2220 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _2221 = dot(vec3(cbLight._m0[_2183].xyz), vec3(_2210, _2211, _2212));
        float _4314 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
        float _2225 = _2202 * _2202;
        float _2229 = ((_2220 * _2220) * (_2225 + (-1.0))) + 1.0;
        float _2236 = exp2(log2(1.0 - (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0)))) * 5.0);
        float _2243 = 1.0 - _2202;
        float _2253 = (0.5 / (((_1982 * ((_2216 * _2243) + _2202)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2243) + _2202) * _2216))) * _2216;
        float _4325 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
        float _2255 = (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0))) * (_2225 / ((_2229 * _2229) * 3.141590118408203125));
        float _2256 = isnan(1.0) ? _1832 : (isnan(_1832) ? 1.0 : min(_1832, 1.0));
        _2177 = (((((_2236 * _2004) + _729) * cbLight._m0[_2187].x) * _2255) * _2256) + _2113;
        _2179 = (((((_2236 * _2006) + _731) * cbLight._m0[_2187].y) * _2255) * _2256) + _2114;
        _2181 = (((((_2236 * _2007) + _732) * cbLight._m0[_2187].z) * _2255) * _2256) + _2115;
    }
    float _2291;
    float _2293;
    float _2295;
    if (_1908)
    {
        _2291 = _2177;
        _2293 = _2179;
        _2295 = _2181;
    }
    else
    {
        uint _2302 = _1817 + 3u;
        uint _2306 = _1817 + 11u;
        float _2320 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2302].w)) * _569) * 0.949999988079071044921875);
        float _2321 = _2320 * _2320;
        float _2322 = cbLight._m0[_2302].x + _646;
        float _2323 = cbLight._m0[_2302].y + _647;
        float _2324 = cbLight._m0[_2302].z + _648;
        float _2328 = inversesqrt(dot(vec3(_2322, _2323, _2324), vec3(_2322, _2323, _2324)));
        float _2329 = _2328 * _2322;
        float _2330 = _2328 * _2323;
        float _2331 = _2328 * _2324;
        float _2332 = dot(vec3(_566, _567, _568), vec3(cbLight._m0[_2302].xyz));
        float _4341 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
        float _2335 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2336 = dot(vec3(_566, _567, _568), vec3(_2329, _2330, _2331));
        float _4352 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
        float _2339 = isnan(1.0) ? _4352 : (isnan(_4352) ? 1.0 : min(_4352, 1.0));
        float _2340 = dot(vec3(cbLight._m0[_2302].xyz), vec3(_2329, _2330, _2331));
        float _4363 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
        float _2344 = _2321 * _2321;
        float _2348 = ((_2339 * _2339) * (_2344 + (-1.0))) + 1.0;
        float _2355 = exp2(log2(1.0 - (isnan(1.0) ? _4363 : (isnan(_4363) ? 1.0 : min(_4363, 1.0)))) * 5.0);
        float _2362 = 1.0 - _2321;
        float _2372 = (0.5 / (((_1982 * ((_2335 * _2362) + _2321)) + 9.9999999392252902907785028219223e-09) + (((_1982 * _2362) + _2321) * _2335))) * _2335;
        float _4374 = isnan(0.0) ? _2372 : (isnan(_2372) ? 0.0 : max(_2372, 0.0));
        float _2374 = (isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0))) * (_2344 / ((_2348 * _2348) * 3.141590118408203125));
        float _2375 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
        _2291 = (((((_2355 * _2004) + _729) * cbLight._m0[_2306].x) * _2374) * _2375) + _2177;
        _2293 = (((((_2355 * _2006) + _731) * cbLight._m0[_2306].y) * _2374) * _2375) + _2179;
        _2295 = (((((_2355 * _2007) + _732) * cbLight._m0[_2306].z) * _2374) * _2375) + _2181;
    }
    float _2510;
    float _2512;
    float _2514;
    float _2516;
    float _2518;
    float _2520;
    if (_1815.y == 0u)
    {
        float _2450 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2451 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2450;
        float _2452 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2450;
        float _2453 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2450;
        uvec4 _2465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2466 = _2465.x;
        uint _2477 = uint((float(_2465.y) * floor(float(uint(cbSceneParam._m0[85u].y * _667) / _2466))) + floor(float(uint(cbSceneParam._m0[85u].x * _666) / _2466)));
        float _2487 = (log2(_2453 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2488 = isnan(0.0) ? _2487 : (isnan(_2487) ? 0.0 : max(_2487, 0.0));
        uint _2491 = uint(isnan(14.0) ? _2488 : (isnan(_2488) ? 14.0 : min(_2488, 14.0)));
        uvec4 _2496 = texelFetch(g_lightClusterGridBuffer, int(((_2491 << 2u) + (_2477 << 6u)) >> 2u));
        uint _2497 = _2496.x;
        uint _2498 = _2465.z;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((((1u << ((_2498 >> 4u) & 15u)) + 4294967295u) & _2497) == 0u) || ((_2498 & 240u) == 0u))
        {
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
        }
        else
        {
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2820)
                {
                    frontier_phi_66_pred = _2804;
                    frontier_phi_66_pred_1 = _2809;
                    frontier_phi_66_pred_2 = _2808;
                    frontier_phi_66_pred_3 = _2807;
                    frontier_phi_66_pred_4 = _2806;
                    frontier_phi_66_pred_5 = _2805;
                }
                else
                {
                    float _2949;
                    float _2950;
                    float _2951;
                    float _2952;
                    float _2953;
                    float _2954;
                    uint _2955;
                    _2949 = _2804;
                    _2950 = _2805;
                    _2951 = _2806;
                    _2952 = _2807;
                    _2953 = _2808;
                    _2954 = _2809;
                    _2955 = _2819;
                    float _2876;
                    float _2877;
                    float _2878;
                    float _2879;
                    float _2880;
                    float _2881;
                    for (;;)
                    {
                        uint _2959 = uint(findLSB(_2955)) + (_2810 << 5u);
                        uint _2956 = (_2955 + 4294967295u) & _2955;
                        uint _2961 = _2959 * 48u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2961)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2961 + 3u)).x));
                        uint _2981 = (_2959 * 48u) + 4u;
                        vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 3u)).x));
                        uint _3000 = (_2959 * 48u) + 8u;
                        vec3 _3011 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3000)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3000 + 2u)).x));
                        float _3015 = _2975.x - _2451;
                        float _3016 = _2975.y - _2452;
                        float _3017 = _2975.z - _2453;
                        float _3018 = dot(vec3(_3015, _3016, _3017), vec3(_3015, _3016, _3017));
                        float _3021 = inversesqrt(_3018);
                        float _3022 = _3021 * _3015;
                        float _3023 = _3021 * _3016;
                        float _3024 = _3021 * _3017;
                        float _3025 = dot(vec3(_685, _688, _691), vec3(_3022, _3023, _3024));
                        float _3030 = 1.0 - (_3018 * _2975.w);
                        float _4400 = isnan(0.0) ? _3030 : (isnan(_3030) ? 0.0 : max(_3030, 0.0));
                        float _3031 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                        float _3032 = sqrt(_3018) * _2994.w;
                        float _3035 = 1.39999997615814208984375 / (_3032 + 1.39999997615814208984375);
                        float _3036 = _3035 * _3035;
                        float _3039 = ((1.0 - _3036) * _3025) + _3036;
                        float _3042 = _3032 * _3032;
                        float _3046 = ((isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0))) * _3031) / ((_3042 * 0.699999988079071044921875) + 1.0);
                        float _3050 = (-0.0) - _2451;
                        float _3051 = (-0.0) - _2452;
                        float _3052 = (-0.0) - _2453;
                        float _3056 = inversesqrt(dot(vec3(_3050, _3051, _3052), vec3(_3050, _3051, _3052)));
                        float _3057 = _3056 * _3050;
                        float _3058 = _3056 * _3051;
                        float _3059 = _3056 * _3052;
                        float _3067 = exp2(log2(1.0 / ((_3042 * 3.5) + 5.0)) * 0.25);
                        float _3068 = 1.0 - _760;
                        float _3075 = sqrt(1.0 - ((1.0 - (_3068 * _3068)) * (1.0 - (_3067 * _3067))));
                        float _3076 = _3075 * _3075;
                        float _3077 = _3076 * _3076;
                        float _3078 = _3057 + _3022;
                        float _3079 = _3058 + _3023;
                        float _3080 = _3059 + _3024;
                        float _3084 = inversesqrt(dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080)));
                        float _3088 = dot(vec3(_685, _688, _691), vec3(_3057, _3058, _3059));
                        float _4416 = isnan(0.0) ? _3088 : (isnan(_3088) ? 0.0 : max(_3088, 0.0));
                        float _3091 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
                        float _3092 = dot(vec3(_685, _688, _691), vec3(_3084 * _3078, _3084 * _3079, _3084 * _3080));
                        float _4427 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3095 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
                        float _3099 = ((_3095 * _3095) * (_3077 + (-1.0))) + 1.0;
                        float _3100 = _3035 * _3076;
                        float _3101 = _3100 * _3100;
                        float _3104 = ((1.0 - _3101) * _3025) + _3101;
                        float _4438 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3105 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
                        float _3106 = 1.0 - _3076;
                        float _3116 = (0.5 / (((_3105 * ((_3091 * _3106) + _3076)) + 9.9999999392252902907785028219223e-09) + (((_3105 * _3106) + _3076) * _3091))) * _3105;
                        float _4449 = isnan(0.0) ? _3116 : (isnan(_3116) ? 0.0 : max(_3116, 0.0));
                        float _3127 = (((_3077 * 3.1415927410125732421875) * (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) / ((_3099 * _3099) * ((_3042 * 2.1991131305694580078125) + 3.141590118408203125))) * _3031;
                        _2879 = (_3046 * _2994.x) + _2952;
                        _2880 = (_3046 * _2994.y) + _2953;
                        _2881 = (_3046 * _2994.z) + _2954;
                        _2876 = (_3127 * _3011.x) + _2949;
                        _2877 = (_3127 * _3011.y) + _2950;
                        _2878 = (_3127 * _3011.z) + _2951;
                        if (_2956 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2949 = _2876;
                            _2950 = _2877;
                            _2951 = _2878;
                            _2952 = _2879;
                            _2953 = _2880;
                            _2954 = _2881;
                            _2955 = _2956;
                        }
                    }
                    frontier_phi_66_pred = _2876;
                    frontier_phi_66_pred_1 = _2881;
                    frontier_phi_66_pred_2 = _2880;
                    frontier_phi_66_pred_3 = _2879;
                    frontier_phi_66_pred_4 = _2878;
                    frontier_phi_66_pred_5 = _2877;
                }
                _2644 = frontier_phi_66_pred;
                _2654 = frontier_phi_66_pred_1;
                _2652 = frontier_phi_66_pred_2;
                _2650 = frontier_phi_66_pred_3;
                _2648 = frontier_phi_66_pred_4;
                _2646 = frontier_phi_66_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2644;
                    _2805 = _2646;
                    _2806 = _2648;
                    _2807 = _2650;
                    _2808 = _2652;
                    _2809 = _2654;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
        }
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.z;
        uint _2660 = (_2658 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2660) & _2497) == 0u)
        {
            _2772 = _2643;
            _2774 = _2645;
            _2776 = _2647;
            _2778 = _2649;
            _2780 = _2651;
            _2782 = _2653;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_2451, _2452, _2453), vec3(_2451, _2452, _2453)));
            float _2798 = _2797 * _2451;
            float _2799 = _2797 * _2452;
            float _2800 = _2797 * _2453;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2660 < ((_2658 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2932 = _2643;
                float _2933 = _2645;
                float _2934 = _2647;
                float _2935 = _2649;
                float _2936 = _2651;
                float _2937 = _2653;
                uint _2938 = _2660;
                uint _2947;
                bool _2948;
                for (;;)
                {
                    _2947 = texelFetch(g_lightClassification, int((((_2491 << 5u) + (_2477 << 9u)) + (_2938 << 2u)) >> 2u)).x;
                    _2948 = _2947 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2948)
                    {
                        frontier_phi_77_pred = _2937;
                        frontier_phi_77_pred_1 = _2936;
                        frontier_phi_77_pred_2 = _2935;
                        frontier_phi_77_pred_3 = _2934;
                        frontier_phi_77_pred_4 = _2933;
                        frontier_phi_77_pred_5 = _2932;
                    }
                    else
                    {
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _3436;
                        float _3437;
                        float _3438;
                        float _3439;
                        float _3440;
                        float _3441;
                        float _3154 = _2932;
                        float _3155 = _2933;
                        float _3156 = _2934;
                        float _3157 = _2935;
                        float _3158 = _2936;
                        float _3159 = _2937;
                        uint _3160 = _2947;
                        uint _3161;
                        vec4 _3186;
                        float _3187;
                        vec4 _3202;
                        vec3 _3214;
                        vec4 _3229;
                        vec4 _3245;
                        float _3292;
                        bool _3293;
                        for (;;)
                        {
                            uint _3171 = ((_2938 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3160));
                            _3161 = (_3160 + 4294967295u) & _3160;
                            uint _3173 = _3171 * 40u;
                            _3186 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 3u)).x));
                            _3187 = _3186.w;
                            uint _3189 = (_3171 * 40u) + 4u;
                            _3202 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3189)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3189 + 3u)).x));
                            uint _3204 = (_3171 * 40u) + 8u;
                            _3214 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x));
                            uint _3216 = (_3171 * 40u) + 16u;
                            _3229 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3216)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3216 + 3u)).x));
                            uint _3232 = (_3171 * 40u) + 20u;
                            _3245 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3232)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3232 + 3u)).x));
                            uint _3248 = (_3171 * 40u) + 24u;
                            vec4 _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3267 = (_3171 * 40u) + 28u;
                            vec4 _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3292 = fma(_2453, _3280.z, fma(_2452, _3280.y, _3280.x * _2451)) + _3280.w;
                            _3293 = !((fma(_2453, _3261.z, fma(_2452, _3261.y, _3261.x * _2451)) + _3261.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3293)
                            {
                                float _3320 = _3186.x - _2451;
                                float _3321 = _3186.y - _2452;
                                float _3322 = _3186.z - _2453;
                                float _3323 = dot(vec3(_3320, _3321, _3322), vec3(_3320, _3321, _3322));
                                float _3326 = inversesqrt(_3323);
                                float _3327 = _3326 * _3320;
                                float _3328 = _3326 * _3321;
                                float _3329 = _3326 * _3322;
                                float _3333 = 1.0 - (_3323 / (_3187 * _3187));
                                float _4460 = isnan(0.0) ? _3333 : (isnan(_3333) ? 0.0 : max(_3333, 0.0));
                                float _3334 = isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0));
                                float _3338 = sqrt(_3323) * _3202.w;
                                float _3340 = 1.39999997615814208984375 / (_3338 + 1.39999997615814208984375);
                                float _3341 = _3340 * _3340;
                                float _3344 = ((1.0 - _3341) * dot(vec3(_3327, _3328, _3329), vec3(_685, _688, _691))) + _3341;
                                float _3347 = _3338 * _3338;
                                float _3351 = (fma(_2453, _3229.z, fma(_2452, _3229.y, _3229.x * _2451)) + _3229.w) / _3292;
                                float _3352 = (fma(_2453, _3245.z, fma(_2452, _3245.y, _3245.x * _2451)) + _3245.w) / _3292;
                                float _3356 = 1.0 - dot(vec2(_3351, _3352), vec2(_3351, _3352));
                                float _4476 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3357 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
                                float _3358 = _3357 * (((isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0))) * _3334) / ((_3347 * 0.699999988079071044921875) + 1.0));
                                float _3370 = exp2(log2(1.0 / ((_3347 * 3.5) + 5.0)) * 0.25);
                                float _3371 = 1.0 - _760;
                                float _3378 = sqrt(1.0 - ((1.0 - (_3371 * _3371)) * (1.0 - (_3370 * _3370))));
                                float _3379 = _3378 * _3378;
                                float _3380 = _3379 * _3379;
                                float _3381 = _3327 - _2798;
                                float _3382 = _3328 - _2799;
                                float _3383 = _3329 - _2800;
                                float _3387 = inversesqrt(dot(vec3(_3381, _3382, _3383), vec3(_3381, _3382, _3383)));
                                float _3391 = dot(vec3(_685, _688, _691), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4487 = isnan(0.0) ? _3391 : (isnan(_3391) ? 0.0 : max(_3391, 0.0));
                                float _3394 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                                float _3395 = dot(vec3(_685, _688, _691), vec3(_3387 * _3381, _3387 * _3382, _3387 * _3383));
                                float _4498 = isnan(0.0) ? _3395 : (isnan(_3395) ? 0.0 : max(_3395, 0.0));
                                float _3398 = isnan(1.0) ? _4498 : (isnan(_4498) ? 1.0 : min(_4498, 1.0));
                                float _3402 = ((_3398 * _3398) * (_3380 + (-1.0))) + 1.0;
                                float _3403 = _3340 * _3379;
                                float _3404 = _3403 * _3403;
                                float _3410 = ((1.0 - _3404) * dot(vec3(_685, _688, _691), vec3(_3327, _3328, _3329))) + _3404;
                                float _4509 = isnan(0.0) ? _3410 : (isnan(_3410) ? 0.0 : max(_3410, 0.0));
                                float _3411 = isnan(1.0) ? _4509 : (isnan(_4509) ? 1.0 : min(_4509, 1.0));
                                float _3412 = 1.0 - _3379;
                                float _3422 = (0.5 / (((_3411 * ((_3394 * _3412) + _3379)) + 9.9999999392252902907785028219223e-09) + (((_3411 * _3412) + _3379) * _3394))) * _3411;
                                float _4520 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3432 = (_3357 * _3334) * (((_3380 * 3.1415927410125732421875) * (isnan(1.0) ? _4520 : (isnan(_4520) ? 1.0 : min(_4520, 1.0)))) / ((_3402 * _3402) * ((_3347 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3358 * _3202.y;
                                frontier_phi_83_pred_1 = _3358 * _3202.x;
                                frontier_phi_83_pred_2 = _3432 * _3214.z;
                                frontier_phi_83_pred_3 = _3432 * _3214.y;
                                frontier_phi_83_pred_4 = _3432 * _3214.x;
                                frontier_phi_83_pred_5 = _3358 * _3202.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3440 = frontier_phi_83_pred;
                            _3439 = frontier_phi_83_pred_1;
                            _3438 = frontier_phi_83_pred_2;
                            _3437 = frontier_phi_83_pred_3;
                            _3436 = frontier_phi_83_pred_4;
                            _3441 = frontier_phi_83_pred_5;
                            _3144 = _3439 + _3157;
                            _3145 = _3440 + _3158;
                            _3146 = _3441 + _3159;
                            _3141 = _3436 + _3154;
                            _3142 = _3437 + _3155;
                            _3143 = _3438 + _3156;
                            if (_3161 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3154 = _3141;
                                _3155 = _3142;
                                _3156 = _3143;
                                _3157 = _3144;
                                _3158 = _3145;
                                _3159 = _3146;
                                _3160 = _3161;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3146;
                        frontier_phi_77_pred_1 = _3145;
                        frontier_phi_77_pred_2 = _3144;
                        frontier_phi_77_pred_3 = _3143;
                        frontier_phi_77_pred_4 = _3142;
                        frontier_phi_77_pred_5 = _3141;
                    }
                    _2783 = frontier_phi_77_pred;
                    _2781 = frontier_phi_77_pred_1;
                    _2779 = frontier_phi_77_pred_2;
                    _2777 = frontier_phi_77_pred_3;
                    _2775 = frontier_phi_77_pred_4;
                    _2773 = frontier_phi_77_pred_5;
                    uint _2939 = _2938 + 1u;
                    if (_2939 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2932 = _2773;
                        _2933 = _2775;
                        _2934 = _2777;
                        _2935 = _2779;
                        _2936 = _2781;
                        _2937 = _2783;
                        _2938 = _2939;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2777;
                frontier_phi_58_59_ladder_1 = _2783;
                frontier_phi_58_59_ladder_2 = _2781;
                frontier_phi_58_59_ladder_3 = _2779;
                frontier_phi_58_59_ladder_4 = _2775;
                frontier_phi_58_59_ladder_5 = _2773;
            }
            else
            {
                frontier_phi_58_59_ladder = _2647;
                frontier_phi_58_59_ladder_1 = _2653;
                frontier_phi_58_59_ladder_2 = _2651;
                frontier_phi_58_59_ladder_3 = _2649;
                frontier_phi_58_59_ladder_4 = _2645;
                frontier_phi_58_59_ladder_5 = _2643;
            }
            _2772 = frontier_phi_58_59_ladder_5;
            _2774 = frontier_phi_58_59_ladder_4;
            _2776 = frontier_phi_58_59_ladder;
            _2778 = frontier_phi_58_59_ladder_3;
            _2780 = frontier_phi_58_59_ladder_2;
            _2782 = frontier_phi_58_59_ladder_1;
        }
        float _2787 = isnan(1.0) ? _744 : (isnan(_744) ? 1.0 : min(_744, 1.0));
        _2510 = (_2787 * _2778) + _1946;
        _2512 = (_2787 * _2780) + _1948;
        _2514 = (_2787 * _2782) + _1950;
        _2516 = ((_2772 * _729) * _2787) + _2291;
        _2518 = ((_2774 * _731) * _2787) + _2293;
        _2520 = ((_2776 * _732) * _2787) + _2295;
    }
    else
    {
        _2510 = _1946;
        _2512 = _1948;
        _2514 = _1950;
        _2516 = _2291;
        _2518 = _2293;
        _2520 = _2295;
    }
    uint _2526 = _705 + uint(cbMatDynParam._m0[0u].w);
    float _2532 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2538 = (((((_2532 * cbMtdParam._m0[10u].x) * _426.x) * _449) * (((1.0 - _503) * cbMtdParam._m0[16u].z) + _503)) * _540) * cbInstanceData._m0[_2526].x;
    float _2544 = (((((_2532 * cbMtdParam._m0[10u].y) * _426.y) * _449) * (((1.0 - _505) * cbMtdParam._m0[16u].z) + _505)) * _540) * cbInstanceData._m0[_2526].y;
    float _2550 = (((((_2532 * cbMtdParam._m0[10u].z) * _426.z) * _449) * (((1.0 - _507) * cbMtdParam._m0[16u].z) + _507)) * _540) * cbInstanceData._m0[_2526].z;
    float _4536 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _4547 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _4558 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _2567 = (((isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0))) * (_2510 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _744))) + ((_2516 + ((isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0))) * _1584)) * cbPerFrame._m0[3u].x)) + _2538;
    float _2569 = (_2544 + ((_2518 + ((isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0))) * _1584)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * (_2512 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _744)));
    float _2571 = (_2550 + ((_2520 + ((isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0))) * _1584)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * (_2514 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _744)));
    float _2572 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2573 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
    float _2574 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
    float _2580 = cbMtdParam._m0[2u].x * _2538;
    float _2581 = cbMtdParam._m0[2u].y * _2544;
    float _2582 = cbMtdParam._m0[2u].z * _2550;
    float _4584 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2584 = isnan(1.0) ? _4584 : (isnan(_4584) ? 1.0 : min(_4584, 1.0));
    uint _2585 = _704 + 6u;
    float _2593 = _666 / cbSceneParam._m0[86u].x;
    float _2594 = _667 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _589 : (isnan(_589) ? cbSceneParam._m0[77u].w : min(_589, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_589 > cbSceneParam._m0[78u].w)
    {
        float _2668 = isnan(_589) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _589 : min(cbSceneParam._m0[80u].w, _589));
        float _2669 = _2668 / _589;
        float _2680 = _2669 * _639;
        float _2681 = _640 * _2669;
        float _2682 = (-0.0) - _2681;
        float _2683 = _2669 * _641;
        float _2685 = (cbSceneParam._m0[77u].w * _2682) / _2668;
        float _2686 = _2685 + cbSceneParam._m0[79u].w;
        float _2687 = cbSceneParam._m0[79u].w - _2681;
        float _2693 = sqrt(((_2680 * _2680) + (_2681 * _2681)) + (_2683 * _2683));
        float _2696 = (1.0 - (cbSceneParam._m0[77u].w / _2668)) * _2693;
        float _2701 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2889;
        if (abs((_2682 - _2685) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2889 = ((((_2686 > 0.0) ? exp2(_2701 * _2686) : (2.0 - exp2(_2703 * _2686))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2696;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : max(_2686, _2687));
            float _2835 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : min(_2686, _2687));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2889 = ((abs(_2693 / _2682) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2701 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2701 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2703 * _2844) - exp2(_2703 * _2845)) * _2833))) + (_2696 * cbSceneParam._m0[80u].z);
        }
        vec4 _2891 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2900 = exp2((_2889 * (-1.44269502162933349609375)) * (1.0 - _2891.w));
        float _2901 = log2(_2900);
        float _2917 = log2(_2613);
        _2705 = (exp2(_2917 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].x)) * _2891.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2707 = (exp2(_2917 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].y)) * _2891.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2709 = (exp2(_2917 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2901 * cbSceneParam._m0[78u].z)) * _2891.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2711 = _2900 * _2613;
    }
    else
    {
        _2705 = _2610;
        _2707 = _2611;
        _2709 = _2612;
        _2711 = _2613;
    }
    bool _2927;
    vec4 _2721;
    vec4 _2743;
    float _2745;
    float _2749;
    float _2750;
    float _2751;
    float _2754;
    float _2757;
    float _2760;
    float _2761;
    bool _2771;
    for (;;)
    {
        _2721 = cbMatDynParam._m0[0u];
        float _2723 = roundEven(_2721.y);
        bool _2724 = _2723 == 3.0;
        float _2725 = log2(_2711);
        float _2729 = exp2(_2725 * cbSceneParam._m0[78u].x);
        float _2730 = exp2(_2725 * cbSceneParam._m0[78u].y);
        float _2731 = exp2(_2725 * cbSceneParam._m0[78u].z);
        float _2732 = _2729 * _2572;
        float _2733 = _2730 * _2573;
        float _2734 = _2731 * _2574;
        float _2741 = _655 + (-0.5);
        _2743 = cbMtdParam._m0[1u];
        _2745 = _2743.y * _2741;
        float _2748 = (_2723 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2749 = _2748 * (_2724 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2705)));
        _2750 = _2748 * (_2724 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
        _2751 = _2748 * (_2724 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
        _2754 = ((_2580 * _2584) * _2729) * _2748;
        _2757 = ((_2581 * _2584) * _2730) * _2748;
        _2760 = ((_2582 * _2584) * _2731) * _2748;
        _2761 = _2741 * 0.999000012874603271484375;
        _2771 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2771)
        {
            if ((cbInstanceData._m0[_704 + 7u].x + _2761) < 0.5)
            {
                _2927 = true;
                break;
            }
        }
        uint _2868 = _705 + uint(_2721.w);
        if ((cbInstanceData._m0[_2868].w < 1.0) && ((cbInstanceData._m0[_2868].w + _2761) < 0.5))
        {
            _2927 = true;
            break;
        }
        if ((_2745 + 1.0) < _2743.x)
        {
            _2927 = true;
            break;
        }
        _2927 = false;
        break;
    }
    float _3132;
    if (_2927)
    {
        discard_state = true;
        _3132 = 0.0;
    }
    else
    {
        _3132 = cbInstanceData._m0[_2585].w;
    }
    SV_Target.x = _2749;
    SV_Target.y = _2750;
    SV_Target.z = _2751;
    SV_Target.w = _3132;
    SV_Target_1.x = _2754;
    SV_Target_1.y = _2757;
    SV_Target_1.z = _2760;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
    discard_exit();
}


