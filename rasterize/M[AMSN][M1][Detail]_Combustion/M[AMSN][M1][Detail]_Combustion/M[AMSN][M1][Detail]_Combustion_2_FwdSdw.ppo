#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[18];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1005;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _202 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _209 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _216 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _238 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _244 = _238.x * cbMtdParam._m0[9u].x;
    float _245 = _238.y * cbMtdParam._m0[9u].y;
    float _246 = _238.z * cbMtdParam._m0[9u].z;
    vec4 _258 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _260 = _258.x;
    vec4 _273 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _277 = _273.z;
    float _281 = (_273.x * 2.0) + (-1.0);
    float _283 = (_273.y * 2.0) + (-1.0);
    float _284 = dot(vec2(_281, _283), vec2(_281, _283));
    float _3673 = isnan(0.0) ? _284 : (isnan(_284) ? 0.0 : max(_284, 0.0));
    float _290 = sqrt(1.0 - (isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))));
    float _316 = (cbMtdParam._m0[17u].z * cbPerFrame._m0[22u].x) + TEXCOORD;
    float _317 = (cbMtdParam._m0[17u].w * cbPerFrame._m0[22u].x) + TEXCOORD_1;
    vec4 _330 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_4, SS_DiffuseMap), vec2((_316 * cbTextureTilingScale._m0[6u].x) + cbTextureTilingScale._m0[6u].z, (_317 * cbTextureTilingScale._m0[6u].y) + cbTextureTilingScale._m0[6u].w));
    float _344 = abs((fract(cbMtdParam._m0[13u].z * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3684 = isnan(0.0) ? _344 : (isnan(_344) ? 0.0 : max(_344, 0.0));
    float _345 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
    float _353 = (((_345 * _345) * (3.0 - (_345 * 2.0))) * cbMtdParam._m0[14u].x) - cbMtdParam._m0[14u].y;
    float _362 = cbMtdParam._m0[14u].z * cbPerFrame._m0[22u].x;
    float _370 = abs((fract(cbMtdParam._m0[14u].w * cbPerFrame._m0[22u].x) * 2.0) + (-1.0));
    float _3695 = isnan(0.0) ? _370 : (isnan(_370) ? 0.0 : max(_370, 0.0));
    float _371 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _375 = (_371 * _371) * (3.0 - (_371 * 2.0));
    float _376 = _375 * cbMtdParam._m0[17u].x;
    float _377 = _375 * cbMtdParam._m0[17u].y;
    float _378 = sin(_362);
    float _379 = cos(_362);
    float _380 = TEXCOORD - _376;
    float _381 = TEXCOORD_1 - _377;
    vec4 _401 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_10, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (_376 + fma(_381, (-0.0) - _378, _380 * _379))) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (fma(_381, _379, _380 * _378) + _377)) + cbTextureTilingScale._m0[0u].w));
    float _407 = (cbMtdParam._m0[11u].x * cbMtdParam._m0[13u].w) * _401.x;
    float _409 = (cbMtdParam._m0[11u].y * cbMtdParam._m0[13u].w) * _401.y;
    float _411 = (cbMtdParam._m0[11u].z * cbMtdParam._m0[13u].w) * _401.z;
    vec4 _434 = texture(sampler2D(M_AMSN_M1_Detail_Combustion_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * _316) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * _317) + cbTextureTilingScale._m0[5u].w));
    float _444 = (TEXCOORD_3.x - ((cbMtdParam._m0[16u].w * (1.0 - TEXCOORD_3.x)) * (_434.x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[13u].x + 1.0);
    float _3706 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _449 = (cbMtdParam._m0[16u].y * _281) + _281;
    float _450 = (cbMtdParam._m0[16u].y * _283) + _283;
    float _453 = fma(_290, _209 * NORMAL.x, fma(_450, _216 * TANGENT.x, (_202 * _194) * _449));
    float _456 = fma(_290, _209 * NORMAL.y, fma(_450, _216 * TANGENT.y, (_202 * _195) * _449));
    float _459 = fma(_290, _209 * NORMAL.z, fma(_450, _216 * TANGENT.z, (_202 * _196) * _449));
    float _463 = inversesqrt(dot(vec3(_453, _456, _459), vec3(_453, _456, _459)));
    float _464 = _463 * _453;
    float _465 = _463 * _456;
    float _466 = _463 * _459;
    float _3717 = isnan(0.0) ? _277 : (isnan(_277) ? 0.0 : max(_277, 0.0));
    float _467 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    float _3728 = isnan(0.0) ? _244 : (isnan(_244) ? 0.0 : max(_244, 0.0));
    float _3739 = isnan(0.0) ? _245 : (isnan(_245) ? 0.0 : max(_245, 0.0));
    float _3750 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _3761 = isnan(0.0) ? _260 : (isnan(_260) ? 0.0 : max(_260, 0.0));
    float _471 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
    float _487 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _538 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _528);
    float _539 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _528);
    float _540 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _528);
    float _544 = inversesqrt(dot(vec3(_538, _539, _540), vec3(_538, _539, _540)));
    float _545 = _538 * _544;
    float _546 = _539 * _544;
    float _547 = _540 * _544;
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _572 = fma(_466, cbSceneParam._m0[5u].z, fma(_465, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _464));
    float _575 = fma(_466, cbSceneParam._m0[6u].z, fma(_465, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _464));
    float _578 = fma(_466, cbSceneParam._m0[7u].z, fma(_465, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _464));
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _592 = _591 + 9u;
    uint _593 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _599 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_593].x;
    float _600 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_593].y;
    float _601 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_593].z;
    float _3772 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _605 = 1.0 - _471;
    float _606 = _602 * _605;
    float _607 = _603 * _605;
    float _608 = _604 * _605;
    float _613 = (_602 + (-0.039999999105930328369140625)) * _471;
    float _614 = (_603 + (-0.039999999105930328369140625)) * _471;
    float _615 = (_604 + (-0.039999999105930328369140625)) * _471;
    float _616 = _613 + 0.039999999105930328369140625;
    float _618 = _614 + 0.039999999105930328369140625;
    float _619 = _615 + 0.039999999105930328369140625;
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _553, cbSceneParam._m0[86u].y * _554));
    float _631 = _628.x * TEXCOORD_3.w;
    float _632 = dot(vec3(_464, _465, _466), vec3(_545, _546, _547));
    float _635 = _632 * 2.0;
    float _639 = (_635 * _464) - _545;
    float _640 = (_635 * _465) - _546;
    float _641 = (_635 * _466) - _547;
    float _645 = abs(dot(vec3(_545, _546, _547), vec3(_464, _465, _466)));
    float _3805 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _647 = sqrt(_467);
    float _659 = exp2((_647 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_647 * 3.0));
    float _665 = (1.0 - _659) * ((_647 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _666 = _659 * _647;
    float _694 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _698 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _702 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1004;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    float _1016;
    float _1017;
    float _1018;
    float _1019;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _729 = fma(_702, cbModelParam._m0[26u].z, fma(_698, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _694));
        float _733 = fma(_702, cbModelParam._m0[27u].z, fma(_698, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _694));
        float _737 = fma(_702, cbModelParam._m0[28u].z, fma(_698, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _694));
        float _762 = _694 + _464;
        float _763 = _698 + _465;
        float _764 = _702 + _466;
        float _774 = fma(_764, cbModelParam._m0[26u].z, fma(_763, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _762)) - _729;
        float _775 = fma(_764, cbModelParam._m0[27u].z, fma(_763, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _762)) - _733;
        float _776 = fma(_764, cbModelParam._m0[28u].z, fma(_763, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _762)) - _737;
        float _780 = inversesqrt(dot(vec3(_774, _775, _776), vec3(_774, _775, _776)));
        float _793 = ((_780 * _774) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_729 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _794 = ((_780 * _775) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_733 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _795 = ((_780 * _776) / cbModelParam._m0[34u].z) + ((((((_737 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _798 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_793, _794, _795), 0.0);
        float _832 = exp2((_798.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_798.x + (-0.5));
        float _834 = _832 * (_798.y + (-0.5));
        float _835 = _832 * (_798.z + (-0.5));
        float _842 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _843 = _842 * (_805.x + (-0.5));
        float _844 = _842 * (_805.y + (-0.5));
        float _845 = _842 * (_805.z + (-0.5));
        float _852 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _853 = _852 * (_812.x + (-0.5));
        float _854 = _852 * (_812.y + (-0.5));
        float _855 = _852 * (_812.z + (-0.5));
        float _862 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_819.x + (-0.5));
        float _864 = _862 * (_819.y + (-0.5));
        float _865 = _862 * (_819.z + (-0.5));
        float _866 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _867 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _868 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _869 = _833 * 0.5;
        float _870 = _843 * 0.5;
        float _871 = _853 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _886 = (dot(vec3(_464, _465, _466), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _896 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_866 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3853 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_898 + 1.0))) + _903) * _866;
        float _913 = _834 * 0.5;
        float _914 = _844 * 0.5;
        float _915 = _854 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(_464, _465, _466), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_867 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3886 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_940 + 1.0))) + _945) * _867;
        float _955 = _835 * 0.5;
        float _956 = _845 * 0.5;
        float _957 = _855 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(_464, _465, _466), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_868 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3919 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_982 + 1.0))) + _987) * _868;
        _1004 = _835;
        _1006 = _834;
        _1007 = _833;
        _1008 = _845;
        _1009 = _844;
        _1010 = _843;
        _1011 = _855;
        _1012 = _854;
        _1013 = _853;
        _1014 = _868;
        _1015 = _867;
        _1016 = _866;
        _1017 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _1018 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1019 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
    }
    else
    {
        _1004 = _1005;
        _1006 = _1005;
        _1007 = _1005;
        _1008 = _1005;
        _1009 = _1005;
        _1010 = _1005;
        _1011 = _1005;
        _1012 = _1005;
        _1013 = _1005;
        _1014 = _1005;
        _1015 = _1005;
        _1016 = _1005;
        _1017 = 0.0;
        _1018 = 0.0;
        _1019 = 0.0;
    }
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1045 = fma(_702, cbModelParam._m0[30u].z, fma(_698, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _694));
        float _1049 = fma(_702, cbModelParam._m0[31u].z, fma(_698, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _694));
        float _1053 = fma(_702, cbModelParam._m0[32u].z, fma(_698, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _694));
        float _1076 = _694 + _464;
        float _1077 = _698 + _465;
        float _1078 = _702 + _466;
        float _1088 = fma(_1078, cbModelParam._m0[30u].z, fma(_1077, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[31u].z, fma(_1077, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[32u].z, fma(_1077, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1045 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1049 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[35u].z) + ((((((_1053 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1118 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1125 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1132 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1144 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1111.x + (-0.5));
        float _1146 = _1144 * (_1111.y + (-0.5));
        float _1147 = _1144 * (_1111.z + (-0.5));
        float _1154 = exp2((_1118.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1118.x + (-0.5));
        float _1156 = _1154 * (_1118.y + (-0.5));
        float _1157 = _1154 * (_1118.z + (-0.5));
        float _1164 = exp2((_1125.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1125.x + (-0.5));
        float _1166 = _1164 * (_1125.y + (-0.5));
        float _1167 = _1164 * (_1125.z + (-0.5));
        float _1174 = exp2((_1132.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1132.x + (-0.5));
        float _1176 = _1174 * (_1132.y + (-0.5));
        float _1177 = _1174 * (_1132.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1197 = (dot(vec3(_464, _465, _466), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1206 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3982 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1208 + 1.0))) + _1213) * _1178;
        float _1223 = _1146 * 0.5;
        float _1224 = _1156 * 0.5;
        float _1225 = _1166 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_464, _465, _466), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4015 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1250 + 1.0))) + _1255) * _1179;
        float _1265 = _1147 * 0.5;
        float _1266 = _1157 * 0.5;
        float _1267 = _1167 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_464, _465, _466), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4048 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1292 + 1.0))) + _1297) * _1180;
        _1314 = _1147;
        _1315 = _1146;
        _1316 = _1145;
        _1317 = _1157;
        _1318 = _1156;
        _1319 = _1155;
        _1320 = _1167;
        _1321 = _1166;
        _1322 = _1165;
        _1323 = _1180;
        _1324 = _1179;
        _1325 = _1178;
        _1326 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1327 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1328 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1005;
        _1315 = _1005;
        _1316 = _1005;
        _1317 = _1005;
        _1318 = _1005;
        _1319 = _1005;
        _1320 = _1005;
        _1321 = _1005;
        _1322 = _1005;
        _1323 = _1005;
        _1324 = _1005;
        _1325 = _1005;
        _1326 = 0.0;
        _1327 = 0.0;
        _1328 = 0.0;
    }
    float _1338 = (cbModelParam._m0[1u].x * (_1326 - _1017)) + _1017;
    float _1339 = (cbModelParam._m0[1u].x * (_1327 - _1018)) + _1018;
    float _1340 = (cbModelParam._m0[1u].x * (_1328 - _1019)) + _1019;
    float _1361 = fma(_1340, cbSceneParam._m0[89u].z, fma(_1339, cbSceneParam._m0[89u].y, _1338 * cbSceneParam._m0[89u].x));
    float _1364 = fma(_1340, cbSceneParam._m0[90u].z, fma(_1339, cbSceneParam._m0[90u].y, _1338 * cbSceneParam._m0[90u].x));
    float _1367 = fma(_1340, cbSceneParam._m0[91u].z, fma(_1339, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1338));
    float _1382 = _639 * 0.5;
    float _1383 = _640 * 0.5;
    float _1384 = _641 * 0.5;
    float _1385 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1316, _1319, _1322, _1325));
    float _1388 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1315, _1318, _1321, _1324));
    float _1391 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1314, _1317, _1320, _1323));
    float _1425;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1398 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1004, _1008, _1011, _1014));
        float _1402 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1006, _1009, _1012, _1015));
        float _1406 = dot(vec4(_1382, _1383, _1384, 1.0), vec4(_1007, _1010, _1013, _1016));
        float _1413 = dot(vec4(cbModelParam._m0[39u]), vec4(_1382, _1383, _1384, 1.0));
        _1425 = dot(vec3(isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)), isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1413) ? 0.0 : (isnan(0.0) ? _1413 : max(0.0, _1413))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1425 = 1.0;
    }
    float _1436;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1427 = dot(vec4(cbModelParam._m0[40u]), vec4(_1382, _1383, _1384, 1.0));
        _1436 = dot(vec3(isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)), isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1427) ? 0.0 : (isnan(0.0) ? _1427 : max(0.0, _1427))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1436 = 1.0;
    }
    float _1440 = (_1436 * cbModelParam._m0[1u].x) + (_1425 * (1.0 - cbModelParam._m0[1u].x));
    float _1450 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _467);
    float _1451 = isnan(_1450) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1450 : min(cbModelParam._m0[25u].z, _1450));
    float _1531;
    float _1533;
    float _1535;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1498 = fma(_702, cbModelParam._m0[13u].z, fma(_698, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _694)) + cbModelParam._m0[13u].w;
        float _1502 = fma(_702, cbModelParam._m0[14u].z, fma(_698, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _694)) + cbModelParam._m0[14u].w;
        float _1506 = fma(_702, cbModelParam._m0[15u].z, fma(_698, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _694)) + cbModelParam._m0[15u].w;
        float _1509 = fma(_641, cbModelParam._m0[13u].z, fma(_640, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639));
        float _1512 = fma(_641, cbModelParam._m0[14u].z, fma(_640, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639));
        float _1515 = fma(_641, cbModelParam._m0[15u].z, fma(_640, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639));
        float _1543;
        if (_1509 > 0.0)
        {
            _1543 = abs((1.0 - _1498) / _1509);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1498 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1543 = frontier_phi_14_12_ladder;
        }
        float _1717;
        if (_1512 > 0.0)
        {
            _1717 = abs((1.0 - _1502) / _1512);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1502 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1717 = frontier_phi_23_19_ladder;
        }
        float _2013;
        if (_1515 > 0.0)
        {
            _2013 = abs((1.0 - _1506) / _1515);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1506 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2013 = frontier_phi_35_30_ladder;
        }
        float _2015 = isnan(_1717) ? _1543 : (isnan(_1543) ? _1717 : min(_1543, _1717));
        float _2016 = isnan(_2013) ? _2015 : (isnan(_2015) ? _2013 : min(_2015, _2013));
        float _2020 = (_2016 * _1509) + _1498;
        float _2021 = (_2016 * _1512) + _1502;
        float _2022 = (_2016 * _1515) + _1506;
        float _2023 = _2016 * 9.9999997473787516355514526367188e-05;
        float _2025 = (-1.0) - _2023;
        float _2027 = _2023 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2022 > _2027) || ((_2022 < _2025) || ((_2021 > _2027) || ((_2021 < _2025) || ((_2020 < _2025) || (_2020 > _2027))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2167 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2022, cbModelParam._m0[9u].z, fma(_2021, cbModelParam._m0[9u].y, _2020 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2022, cbModelParam._m0[10u].z, fma(_2021, cbModelParam._m0[10u].y, _2020 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2022, cbModelParam._m0[11u].z, fma(_2021, cbModelParam._m0[11u].y, _2020 * cbModelParam._m0[11u].x))), _1451);
            frontier_phi_13_35_ladder = _2167.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2167.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2167.x * cbModelParam._m0[1u].y;
        }
        _1531 = frontier_phi_13_35_ladder_2;
        _1533 = frontier_phi_13_35_ladder_1;
        _1535 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1519 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_639, _640, _641), _1451);
        _1531 = _1519.x * cbModelParam._m0[1u].y;
        _1533 = _1519.y * cbModelParam._m0[1u].y;
        _1535 = _1519.z * cbModelParam._m0[1u].y;
    }
    float _1539 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _467);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1539 : min(cbModelParam._m0[25u].w, _1539));
    float _1631;
    float _1633;
    float _1635;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1595 = fma(_702, cbModelParam._m0[21u].z, fma(_698, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _694)) + cbModelParam._m0[21u].w;
        float _1599 = fma(_702, cbModelParam._m0[22u].z, fma(_698, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _694)) + cbModelParam._m0[22u].w;
        float _1603 = fma(_702, cbModelParam._m0[23u].z, fma(_698, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _694)) + cbModelParam._m0[23u].w;
        float _1606 = fma(_641, cbModelParam._m0[21u].z, fma(_640, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639));
        float _1609 = fma(_641, cbModelParam._m0[22u].z, fma(_640, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639));
        float _1612 = fma(_641, cbModelParam._m0[23u].z, fma(_640, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639));
        float _1722;
        if (_1606 > 0.0)
        {
            _1722 = abs((1.0 - _1595) / _1606);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1595 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1722 = frontier_phi_25_21_ladder;
        }
        float _2040;
        if (_1609 > 0.0)
        {
            _2040 = abs((1.0 - _1599) / _1609);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1599 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2040 = frontier_phi_37_32_ladder;
        }
        float _2378;
        if (_1612 > 0.0)
        {
            _2378 = abs((1.0 - _1603) / _1612);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1603 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2378 = frontier_phi_47_44_ladder;
        }
        float _2380 = isnan(_2040) ? _1722 : (isnan(_1722) ? _2040 : min(_1722, _2040));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1606) + _1595;
        float _2386 = (_2381 * _1609) + _1599;
        float _2387 = (_2381 * _1612) + _1603;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2389 = (-1.0) - _2388;
        float _2391 = _2388 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2387 > _2391) || ((_2387 < _2389) || ((_2386 > _2391) || ((_2386 < _2389) || ((_2385 < _2389) || (_2385 > _2391))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2387, cbModelParam._m0[17u].z, fma(_2386, cbModelParam._m0[17u].y, _2385 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2387, cbModelParam._m0[18u].z, fma(_2386, cbModelParam._m0[18u].y, _2385 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2387, cbModelParam._m0[19u].z, fma(_2386, cbModelParam._m0[19u].y, _2385 * cbModelParam._m0[19u].x))), _1540);
            frontier_phi_22_47_ladder = _2509.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2509.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2509.x * cbModelParam._m0[1u].z;
        }
        _1631 = frontier_phi_22_47_ladder_2;
        _1633 = frontier_phi_22_47_ladder_1;
        _1635 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1615 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_639, _640, _641), _1540);
        _1631 = _1615.x * cbModelParam._m0[1u].z;
        _1633 = _1615.y * cbModelParam._m0[1u].z;
        _1635 = _1615.z * cbModelParam._m0[1u].z;
    }
    float _1648 = (((_665 * _616) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1631 - _1531)) + _1531);
    float _1650 = (((_665 * _618) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1633 - _1533)) + _1533);
    float _1652 = (((_665 * _619) + _666) * _631) * ((cbModelParam._m0[1u].w * (_1635 - _1535)) + _1535);
    float _1655 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1650, cbSceneParam._m0[89u].y, _1648 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1650, cbSceneParam._m0[90u].y, _1648 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1650, cbSceneParam._m0[91u].y, _1648 * cbSceneParam._m0[91u].x));
    float _1696 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1704 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1708 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1709 = _1696 / _1708;
    float _1710 = _1700 / _1708;
    float _1711 = _1704 / _1708;
    float _1858;
    float _1859;
    float _1860;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1738 = ((uint(_1711 > cbSceneParam._m0[59u].y) + uint(_1711 > cbSceneParam._m0[59u].x)) + uint(_1711 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1739 = _1738 + 43u;
        uint _1747 = _1738 + 44u;
        uint _1755 = _1738 + 45u;
        uint _1763 = _1738 + 46u;
        float _1774 = fma(_1708, cbSceneParam._m0[_1739].w, fma(_1704, cbSceneParam._m0[_1739].z, fma(_1700, cbSceneParam._m0[_1739].y, _1696 * cbSceneParam._m0[_1739].x)));
        float _1778 = fma(_1708, cbSceneParam._m0[_1747].w, fma(_1704, cbSceneParam._m0[_1747].z, fma(_1700, cbSceneParam._m0[_1747].y, _1696 * cbSceneParam._m0[_1747].x)));
        float _1786 = fma(_1708, cbSceneParam._m0[_1763].w, fma(_1704, cbSceneParam._m0[_1763].z, fma(_1700, cbSceneParam._m0[_1763].y, _1696 * cbSceneParam._m0[_1763].x)));
        float _1791 = cbSceneParam._m0[33u].z * _1786;
        float _1793 = cbSceneParam._m0[33u].w * _1786;
        float _1796 = fma(_1708, cbSceneParam._m0[_1755].w, fma(_1704, cbSceneParam._m0[_1755].z, fma(_1700, cbSceneParam._m0[_1755].y, _1696 * cbSceneParam._m0[_1755].x))) / _1786;
        float _1844 = (cbSceneParam._m0[33u].x - sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711))) * cbSceneParam._m0[33u].y;
        float _4174 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
        float _1851 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1791 + _1774) / _1786, (_1793 + _1778) / _1786), _1796), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1793 + _1774) / _1786, (_1778 - _1791) / _1786), _1796), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1774 - _1791) / _1786, (_1778 - _1793) / _1786), _1796), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1774 - _1793) / _1786, (_1791 + _1778) / _1786), _1796), 0.0)).x), vec4(0.25)));
        _1858 = 1.0 - (_1851 * cbSceneParam._m0[34u].x);
        _1859 = 1.0 - (_1851 * cbSceneParam._m0[34u].y);
        _1860 = 1.0 - (_1851 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1858 = 1.0;
        _1859 = 1.0;
        _1860 = 1.0;
    }
    float _1924;
    float _1926;
    float _1928;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1912 = fma(_1708, cbSceneParam._m0[63u].w, fma(_1704, cbSceneParam._m0[63u].z, fma(_1700, cbSceneParam._m0[63u].y, _1696 * cbSceneParam._m0[63u].x)));
        float _1913 = fma(_1708, cbSceneParam._m0[60u].w, fma(_1704, cbSceneParam._m0[60u].z, fma(_1700, cbSceneParam._m0[60u].y, _1696 * cbSceneParam._m0[60u].x))) / _1912;
        float _1914 = fma(_1708, cbSceneParam._m0[61u].w, fma(_1704, cbSceneParam._m0[61u].z, fma(_1700, cbSceneParam._m0[61u].y, _1696 * cbSceneParam._m0[61u].x))) / _1912;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_1913 >= cbSceneParam._m0[64u].x) && (_1914 >= cbSceneParam._m0[64u].y)) && (_1913 <= cbSceneParam._m0[64u].z)) && (_1914 <= cbSceneParam._m0[64u].w))
        {
            float _2053 = fma(_1708, cbSceneParam._m0[62u].w, fma(_1704, cbSceneParam._m0[62u].z, fma(_1700, cbSceneParam._m0[62u].y, _1696 * cbSceneParam._m0[62u].x))) / _1912;
            float _2057 = isnan(cbSceneParam._m0[41u].w) ? _2053 : (isnan(_2053) ? cbSceneParam._m0[41u].w : max(_2053, cbSceneParam._m0[41u].w));
            float _2100 = (cbSceneParam._m0[33u].x - sqrt(((_1710 * _1710) + (_1709 * _1709)) + (_1711 * _1711))) * cbSceneParam._m0[33u].y;
            float _4190 = isnan(0.0) ? _2100 : (isnan(_2100) ? 0.0 : max(_2100, 0.0));
            float _2107 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1913, cbSceneParam._m0[33u].w + _1914), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1913, _1914 - cbSceneParam._m0[33u].z), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1913 - cbSceneParam._m0[33u].z, _1914 - cbSceneParam._m0[33u].w), _2057), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1913 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1914), _2057), 0.0)).x), vec4(0.25)));
            float _2111 = 1.0 - (_2107 * cbSceneParam._m0[34u].x);
            float _2112 = 1.0 - (_2107 * cbSceneParam._m0[34u].y);
            float _2113 = 1.0 - (_2107 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2113) ? _1860 : (isnan(_1860) ? _2113 : min(_1860, _2113));
            frontier_phi_34_33_ladder_1 = isnan(_2112) ? _1859 : (isnan(_1859) ? _2112 : min(_1859, _2112));
            frontier_phi_34_33_ladder_2 = isnan(_2111) ? _1858 : (isnan(_1858) ? _2111 : min(_1858, _2111));
        }
        else
        {
            frontier_phi_34_33_ladder = _1860;
            frontier_phi_34_33_ladder_1 = _1859;
            frontier_phi_34_33_ladder_2 = _1858;
        }
        _1924 = frontier_phi_34_33_ladder_2;
        _1926 = frontier_phi_34_33_ladder_1;
        _1928 = frontier_phi_34_33_ladder;
    }
    else
    {
        _1924 = _1858;
        _1926 = _1859;
        _1928 = _1860;
    }
    uvec4 _1933 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1935 = _1933.x * 14u;
    uint _1936 = _1935 + 13u;
    float _1943 = _631 + (-1.0);
    float _1948 = (cbLight._m0[_1936].x * _1943) + 1.0;
    float _1949 = (cbLight._m0[_1936].y * _1943) + 1.0;
    float _1950 = (cbLight._m0[_1936].z * _1943) + 1.0;
    float _1951 = (cbLight._m0[_1936].w * _1943) + 1.0;
    uint _1952 = _1935 + 5u;
    float _1958 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1962 = _1935 + 4u;
    float _1972 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
    uint _1976 = _1935 | 1u;
    float _1987 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_464, _465, _466));
    float _1990 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_464, _465, _466));
    float _4226 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _4237 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1995 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _1997 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2004 = ((cbLight._m0[_1952].x * _1958) * _1997) + (((cbLight._m0[_1962].x * _1924) * _1972) * _1995);
    float _2005 = ((_1958 * cbLight._m0[_1952].y) * _1997) + (((cbLight._m0[_1962].y * _1926) * _1972) * _1995);
    float _2006 = ((_1958 * cbLight._m0[_1952].z) * _1997) + (((cbLight._m0[_1962].z * _1928) * _1972) * _1995);
    uvec4 _2010 = floatBitsToUint(cbLight._m0[_1935 + 12u]);
    bool _2012 = _2010.x == 0u;
    float _2114;
    float _2116;
    float _2118;
    if (_2012)
    {
        _2114 = _2004;
        _2116 = _2005;
        _2118 = _2006;
    }
    else
    {
        uint _2122 = _1935 + 6u;
        float _2138 = (dot(vec3(cbLight._m0[_1935 + 2u].xyz), vec3(_464, _465, _466)) * 0.5) + 0.5;
        float _2139 = _2138 * _2138;
        float _4248 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        float _2140 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2141 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2114 = (((cbLight._m0[_2122].x * 0.3183098733425140380859375) * _2140) * _2141) + _2004;
        _2116 = (((cbLight._m0[_2122].y * 0.3183098733425140380859375) * _2140) * _2141) + _2005;
        _2118 = (((cbLight._m0[_2122].z * 0.3183098733425140380859375) * _2140) * _2141) + _2006;
    }
    bool _2121 = _2010.y == 0u;
    float _2176;
    float _2178;
    float _2180;
    if (_2121)
    {
        _2176 = _2114;
        _2178 = _2116;
        _2180 = _2118;
    }
    else
    {
        uint _2349 = _1935 + 7u;
        float _2365 = (dot(vec3(cbLight._m0[_1935 + 3u].xyz), vec3(_464, _465, _466)) * 0.5) + 0.5;
        float _2366 = _2365 * _2365;
        float _4264 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
        float _2367 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2368 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2176 = (((cbLight._m0[_2349].x * 0.3183098733425140380859375) * _2367) * _2368) + _2114;
        _2178 = (((cbLight._m0[_2349].y * 0.3183098733425140380859375) * _2367) * _2368) + _2116;
        _2180 = (((cbLight._m0[_2349].z * 0.3183098733425140380859375) * _2367) * _2368) + _2118;
    }
    uint _2183 = _1935 + 8u;
    float _2196 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _467) * 0.949999988079071044921875);
    float _2197 = _2196 * _2196;
    float _2198 = cbLight._m0[_1935].x + _545;
    float _2199 = cbLight._m0[_1935].y + _546;
    float _2200 = cbLight._m0[_1935].z + _547;
    float _2204 = inversesqrt(dot(vec3(_2198, _2199, _2200), vec3(_2198, _2199, _2200)));
    float _2205 = _2204 * _2198;
    float _2206 = _2204 * _2199;
    float _2207 = _2204 * _2200;
    float _2208 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_1935].xyz));
    float _4280 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _2212 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2213 = dot(vec3(_464, _465, _466), vec3(_2205, _2206, _2207));
    float _4302 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2216 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2217 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_2205, _2206, _2207));
    float _4313 = isnan(0.0) ? _2217 : (isnan(_2217) ? 0.0 : max(_2217, 0.0));
    float _2221 = _2197 * _2197;
    float _2225 = ((_2216 * _2216) * (_2221 + (-1.0))) + 1.0;
    float _2233 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
    float _2234 = 0.959999978542327880859375 - _613;
    float _2236 = 0.959999978542327880859375 - _614;
    float _2237 = 0.959999978542327880859375 - _615;
    float _2244 = 1.0 - _2197;
    float _2255 = (0.5 / (((_2212 * ((_2211 * _2244) + _2197)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2244) + _2197) * _2211))) * _2211;
    float _4324 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
    float _2257 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2221 / ((_2225 * _2225) * 3.141590118408203125));
    uint _2271 = _1935 + 9u;
    float _2282 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1976].w)) * _467) * 0.949999988079071044921875);
    float _2283 = _2282 * _2282;
    float _2284 = cbLight._m0[_1976].x + _545;
    float _2285 = cbLight._m0[_1976].y + _546;
    float _2286 = cbLight._m0[_1976].z + _547;
    float _2290 = inversesqrt(dot(vec3(_2284, _2285, _2286), vec3(_2284, _2285, _2286)));
    float _2291 = _2290 * _2284;
    float _2292 = _2290 * _2285;
    float _2293 = _2290 * _2286;
    float _2294 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_1976].xyz));
    float _4335 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2297 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2298 = dot(vec3(_464, _465, _466), vec3(_2291, _2292, _2293));
    float _4346 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2301 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2302 = dot(vec3(cbLight._m0[_1976].xyz), vec3(_2291, _2292, _2293));
    float _4357 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
    float _2306 = _2283 * _2283;
    float _2310 = ((_2301 * _2301) * (_2306 + (-1.0))) + 1.0;
    float _2317 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
    float _2324 = 1.0 - _2283;
    float _2334 = (0.5 / (((_2212 * ((_2297 * _2324) + _2283)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2324) + _2283) * _2297))) * _2297;
    float _4368 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
    float _2336 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2306 / ((_2310 * _2310) * 3.141590118408203125));
    float _2346 = (((((_2317 * _2234) + _616) * cbLight._m0[_2271].x) * _2336) * _1958) + ((((cbLight._m0[_2183].x * _1924) * ((_2233 * _2234) + _616)) * _2257) * _1972);
    float _2347 = (((((_2317 * _2236) + _618) * cbLight._m0[_2271].y) * _2336) * _1958) + ((((cbLight._m0[_2183].y * _1926) * ((_2233 * _2236) + _618)) * _2257) * _1972);
    float _2348 = (((((_2317 * _2237) + _619) * cbLight._m0[_2271].z) * _2336) * _1958) + ((((cbLight._m0[_2183].z * _1928) * ((_2233 * _2237) + _619)) * _2257) * _1972);
    float _2404;
    float _2406;
    float _2408;
    if (_2012)
    {
        _2404 = _2346;
        _2406 = _2347;
        _2408 = _2348;
    }
    else
    {
        uint _2410 = _1935 + 2u;
        uint _2414 = _1935 + 10u;
        float _2428 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2410].w)) * _467) * 0.949999988079071044921875);
        float _2429 = _2428 * _2428;
        float _2430 = cbLight._m0[_2410].x + _545;
        float _2431 = cbLight._m0[_2410].y + _546;
        float _2432 = cbLight._m0[_2410].z + _547;
        float _2436 = inversesqrt(dot(vec3(_2430, _2431, _2432), vec3(_2430, _2431, _2432)));
        float _2437 = _2436 * _2430;
        float _2438 = _2436 * _2431;
        float _2439 = _2436 * _2432;
        float _2440 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_2410].xyz));
        float _4379 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0));
        float _2443 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2444 = dot(vec3(_464, _465, _466), vec3(_2437, _2438, _2439));
        float _4390 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2447 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2448 = dot(vec3(cbLight._m0[_2410].xyz), vec3(_2437, _2438, _2439));
        float _4401 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
        float _2452 = _2429 * _2429;
        float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
        float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
        float _2470 = 1.0 - _2429;
        float _2480 = (0.5 / (((_2212 * ((_2443 * _2470) + _2429)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2470) + _2429) * _2443))) * _2443;
        float _4412 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2482 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
        float _2483 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
        _2404 = (((((_2463 * _2234) + _616) * cbLight._m0[_2414].x) * _2482) * _2483) + _2346;
        _2406 = (((((_2463 * _2236) + _618) * cbLight._m0[_2414].y) * _2482) * _2483) + _2347;
        _2408 = (((((_2463 * _2237) + _619) * cbLight._m0[_2414].z) * _2482) * _2483) + _2348;
    }
    float _2514;
    float _2516;
    float _2518;
    if (_2121)
    {
        _2514 = _2404;
        _2516 = _2406;
        _2518 = _2408;
    }
    else
    {
        uint _2525 = _1935 + 3u;
        uint _2529 = _1935 + 11u;
        float _2543 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2525].w)) * _467) * 0.949999988079071044921875);
        float _2544 = _2543 * _2543;
        float _2545 = cbLight._m0[_2525].x + _545;
        float _2546 = cbLight._m0[_2525].y + _546;
        float _2547 = cbLight._m0[_2525].z + _547;
        float _2551 = inversesqrt(dot(vec3(_2545, _2546, _2547), vec3(_2545, _2546, _2547)));
        float _2552 = _2551 * _2545;
        float _2553 = _2551 * _2546;
        float _2554 = _2551 * _2547;
        float _2555 = dot(vec3(_464, _465, _466), vec3(cbLight._m0[_2525].xyz));
        float _4428 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
        float _2558 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2559 = dot(vec3(_464, _465, _466), vec3(_2552, _2553, _2554));
        float _4439 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        float _2562 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2563 = dot(vec3(cbLight._m0[_2525].xyz), vec3(_2552, _2553, _2554));
        float _4450 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
        float _2567 = _2544 * _2544;
        float _2571 = ((_2562 * _2562) * (_2567 + (-1.0))) + 1.0;
        float _2578 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
        float _2585 = 1.0 - _2544;
        float _2595 = (0.5 / (((_2212 * ((_2558 * _2585) + _2544)) + 9.9999999392252902907785028219223e-09) + (((_2212 * _2585) + _2544) * _2558))) * _2558;
        float _4461 = isnan(0.0) ? _2595 : (isnan(_2595) ? 0.0 : max(_2595, 0.0));
        float _2597 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2567 / ((_2571 * _2571) * 3.141590118408203125));
        float _2598 = isnan(1.0) ? _1951 : (isnan(_1951) ? 1.0 : min(_1951, 1.0));
        _2514 = (((((_2578 * _2234) + _616) * cbLight._m0[_2529].x) * _2597) * _2598) + _2404;
        _2516 = (((((_2578 * _2236) + _618) * cbLight._m0[_2529].y) * _2597) * _2598) + _2406;
        _2518 = (((((_2578 * _2237) + _619) * cbLight._m0[_2529].z) * _2597) * _2598) + _2408;
    }
    float _2664;
    float _2666;
    float _2668;
    float _2670;
    float _2672;
    float _2674;
    if (_1933.y == 0u)
    {
        uvec4 _2619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2620 = _2619.x;
        uint _2631 = uint((float(_2619.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _2620))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _2620)));
        float _2641 = (log2(_1711 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2642 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
        uint _2645 = uint(isnan(14.0) ? _2642 : (isnan(_2642) ? 14.0 : min(_2642, 14.0)));
        uvec4 _2650 = texelFetch(g_lightClusterGridBuffer, int(((_2645 << 2u) + (_2631 << 6u)) >> 2u));
        uint _2651 = _2650.x;
        uint _2652 = _2619.z;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        float _2786;
        if (((((1u << ((_2652 >> 4u) & 15u)) + 4294967295u) & _2651) == 0u) || ((_2652 & 240u) == 0u))
        {
            _2776 = 0.0;
            _2778 = 0.0;
            _2780 = 0.0;
            _2782 = 0.0;
            _2784 = 0.0;
            _2786 = 0.0;
        }
        else
        {
            float _2777;
            float _2779;
            float _2781;
            float _2783;
            float _2785;
            float _2787;
            float _2929 = 0.0;
            float _2930 = 0.0;
            float _2931 = 0.0;
            float _2932 = 0.0;
            float _2933 = 0.0;
            float _2934 = 0.0;
            uint _2935 = 0u;
            uint _2944;
            bool _2945;
            for (;;)
            {
                _2944 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_2935 << 2u)) >> 2u)).x;
                _2945 = _2944 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2945)
                {
                    frontier_phi_66_pred = _2934;
                    frontier_phi_66_pred_1 = _2933;
                    frontier_phi_66_pred_2 = _2932;
                    frontier_phi_66_pred_3 = _2931;
                    frontier_phi_66_pred_4 = _2930;
                    frontier_phi_66_pred_5 = _2929;
                }
                else
                {
                    float _3053;
                    float _3054;
                    float _3055;
                    float _3056;
                    float _3057;
                    float _3058;
                    uint _3059;
                    _3053 = _2929;
                    _3054 = _2930;
                    _3055 = _2931;
                    _3056 = _2932;
                    _3057 = _2933;
                    _3058 = _2934;
                    _3059 = _2944;
                    float _2985;
                    float _2986;
                    float _2987;
                    float _2988;
                    float _2989;
                    float _2990;
                    for (;;)
                    {
                        uint _3063 = uint(findLSB(_3059)) + (_2935 << 5u);
                        uint _3060 = (_3059 + 4294967295u) & _3059;
                        uint _3065 = _3063 * 48u;
                        vec4 _3079 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3085 = (_3063 * 48u) + 4u;
                        vec4 _3098 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3085)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3085 + 3u)).x));
                        uint _3104 = (_3063 * 48u) + 8u;
                        vec3 _3115 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3104)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3104 + 2u)).x));
                        float _3119 = _3079.x - _1709;
                        float _3120 = _3079.y - _1710;
                        float _3121 = _3079.z - _1711;
                        float _3122 = dot(vec3(_3119, _3120, _3121), vec3(_3119, _3120, _3121));
                        float _3125 = inversesqrt(_3122);
                        float _3126 = _3125 * _3119;
                        float _3127 = _3125 * _3120;
                        float _3128 = _3125 * _3121;
                        float _3129 = dot(vec3(_572, _575, _578), vec3(_3126, _3127, _3128));
                        float _3134 = 1.0 - (_3122 * _3079.w);
                        float _4487 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                        float _3135 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3136 = sqrt(_3122) * _3098.w;
                        float _3139 = 1.39999997615814208984375 / (_3136 + 1.39999997615814208984375);
                        float _3140 = _3139 * _3139;
                        float _3143 = ((1.0 - _3140) * _3129) + _3140;
                        float _3146 = _3136 * _3136;
                        float _3150 = ((isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0))) * _3135) / ((_3146 * 0.699999988079071044921875) + 1.0);
                        float _3154 = (-0.0) - _1709;
                        float _3155 = (-0.0) - _1710;
                        float _3156 = (-0.0) - _1711;
                        float _3160 = inversesqrt(dot(vec3(_3154, _3155, _3156), vec3(_3154, _3155, _3156)));
                        float _3161 = _3160 * _3154;
                        float _3162 = _3160 * _3155;
                        float _3163 = _3160 * _3156;
                        float _3170 = exp2(log2(1.0 / ((_3146 * 3.5) + 5.0)) * 0.25);
                        float _3171 = 1.0 - _647;
                        float _3178 = sqrt(1.0 - ((1.0 - (_3171 * _3171)) * (1.0 - (_3170 * _3170))));
                        float _3179 = _3178 * _3178;
                        float _3180 = _3179 * _3179;
                        float _3181 = _3161 + _3126;
                        float _3182 = _3162 + _3127;
                        float _3183 = _3163 + _3128;
                        float _3187 = inversesqrt(dot(vec3(_3181, _3182, _3183), vec3(_3181, _3182, _3183)));
                        float _3191 = dot(vec3(_572, _575, _578), vec3(_3161, _3162, _3163));
                        float _4503 = isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0));
                        float _3194 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3195 = dot(vec3(_572, _575, _578), vec3(_3187 * _3181, _3187 * _3182, _3187 * _3183));
                        float _4514 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3198 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3202 = ((_3198 * _3198) * (_3180 + (-1.0))) + 1.0;
                        float _3203 = _3139 * _3179;
                        float _3204 = _3203 * _3203;
                        float _3207 = ((1.0 - _3204) * _3129) + _3204;
                        float _4525 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3208 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3209 = 1.0 - _3179;
                        float _3219 = (0.5 / (((_3208 * ((_3194 * _3209) + _3179)) + 9.9999999392252902907785028219223e-09) + (((_3208 * _3209) + _3179) * _3194))) * _3208;
                        float _4536 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3230 = (((_3180 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3202 * _3202) * ((_3146 * 2.1991131305694580078125) + 3.141590118408203125))) * _3135;
                        _2988 = (_3150 * _3098.x) + _3056;
                        _2989 = (_3150 * _3098.y) + _3057;
                        _2990 = (_3150 * _3098.z) + _3058;
                        _2985 = (_3230 * _3115.x) + _3053;
                        _2986 = (_3230 * _3115.y) + _3054;
                        _2987 = (_3230 * _3115.z) + _3055;
                        if (_3060 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3053 = _2985;
                            _3054 = _2986;
                            _3055 = _2987;
                            _3056 = _2988;
                            _3057 = _2989;
                            _3058 = _2990;
                            _3059 = _3060;
                        }
                    }
                    frontier_phi_66_pred = _2990;
                    frontier_phi_66_pred_1 = _2989;
                    frontier_phi_66_pred_2 = _2988;
                    frontier_phi_66_pred_3 = _2987;
                    frontier_phi_66_pred_4 = _2986;
                    frontier_phi_66_pred_5 = _2985;
                }
                _2787 = frontier_phi_66_pred;
                _2785 = frontier_phi_66_pred_1;
                _2783 = frontier_phi_66_pred_2;
                _2781 = frontier_phi_66_pred_3;
                _2779 = frontier_phi_66_pred_4;
                _2777 = frontier_phi_66_pred_5;
                uint _2936 = _2935 + 1u;
                if (_2936 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2929 = _2777;
                    _2930 = _2779;
                    _2931 = _2781;
                    _2932 = _2783;
                    _2933 = _2785;
                    _2934 = _2787;
                    _2935 = _2936;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2776 = _2777;
            _2778 = _2779;
            _2780 = _2781;
            _2782 = _2783;
            _2784 = _2785;
            _2786 = _2787;
        }
        uvec4 _2790 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2791 = _2790.z;
        uint _2793 = (_2791 >> 8u) & 15u;
        float _2897;
        float _2899;
        float _2901;
        float _2903;
        float _2905;
        float _2907;
        if (((4294967295u << _2793) & _2651) == 0u)
        {
            _2897 = _2776;
            _2899 = _2778;
            _2901 = _2780;
            _2903 = _2782;
            _2905 = _2784;
            _2907 = _2786;
        }
        else
        {
            float _2922 = inversesqrt(dot(vec3(_1709, _1710, _1711), vec3(_1709, _1710, _1711)));
            float _2923 = _2922 * _1709;
            float _2924 = _2922 * _1710;
            float _2925 = _2922 * _1711;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2793 < ((_2791 >> 12u) & 15u))
            {
                float _2898;
                float _2900;
                float _2902;
                float _2904;
                float _2906;
                float _2908;
                float _3036 = _2776;
                float _3037 = _2778;
                float _3038 = _2780;
                float _3039 = _2782;
                float _3040 = _2784;
                float _3041 = _2786;
                uint _3042 = _2793;
                uint _3051;
                bool _3052;
                for (;;)
                {
                    _3051 = texelFetch(g_lightClassification, int((((_2645 << 5u) + (_2631 << 9u)) + (_3042 << 2u)) >> 2u)).x;
                    _3052 = _3051 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3052)
                    {
                        frontier_phi_72_pred = _3041;
                        frontier_phi_72_pred_1 = _3040;
                        frontier_phi_72_pred_2 = _3039;
                        frontier_phi_72_pred_3 = _3038;
                        frontier_phi_72_pred_4 = _3037;
                        frontier_phi_72_pred_5 = _3036;
                    }
                    else
                    {
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3238;
                        float _3239;
                        float _3240;
                        float _3530;
                        float _3531;
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3248 = _3036;
                        float _3249 = _3037;
                        float _3250 = _3038;
                        float _3251 = _3039;
                        float _3252 = _3040;
                        float _3253 = _3041;
                        uint _3254 = _3051;
                        uint _3255;
                        vec4 _3280;
                        float _3281;
                        vec4 _3296;
                        vec3 _3308;
                        vec4 _3323;
                        vec4 _3339;
                        float _3386;
                        bool _3387;
                        for (;;)
                        {
                            uint _3265 = ((_3042 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3254));
                            _3255 = (_3254 + 4294967295u) & _3254;
                            uint _3267 = _3265 * 40u;
                            _3280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3267 + 3u)).x));
                            _3281 = _3280.w;
                            uint _3283 = (_3265 * 40u) + 4u;
                            _3296 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3283)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3283 + 3u)).x));
                            uint _3298 = (_3265 * 40u) + 8u;
                            _3308 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x));
                            uint _3310 = (_3265 * 40u) + 16u;
                            _3323 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 3u)).x));
                            uint _3326 = (_3265 * 40u) + 20u;
                            _3339 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3326)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3326 + 3u)).x));
                            uint _3342 = (_3265 * 40u) + 24u;
                            vec4 _3355 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3342)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3342 + 3u)).x));
                            uint _3361 = (_3265 * 40u) + 28u;
                            vec4 _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            _3386 = fma(_1711, _3374.z, fma(_1710, _3374.y, _3374.x * _1709)) + _3374.w;
                            _3387 = !((fma(_1711, _3355.z, fma(_1710, _3355.y, _3355.x * _1709)) + _3355.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3387)
                            {
                                float _3414 = _3280.x - _1709;
                                float _3415 = _3280.y - _1710;
                                float _3416 = _3280.z - _1711;
                                float _3417 = dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416));
                                float _3420 = inversesqrt(_3417);
                                float _3421 = _3420 * _3414;
                                float _3422 = _3420 * _3415;
                                float _3423 = _3420 * _3416;
                                float _3427 = 1.0 - (_3417 / (_3281 * _3281));
                                float _4547 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3428 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3432 = sqrt(_3417) * _3296.w;
                                float _3434 = 1.39999997615814208984375 / (_3432 + 1.39999997615814208984375);
                                float _3435 = _3434 * _3434;
                                float _3438 = ((1.0 - _3435) * dot(vec3(_3421, _3422, _3423), vec3(_572, _575, _578))) + _3435;
                                float _3441 = _3432 * _3432;
                                float _3445 = (fma(_1711, _3323.z, fma(_1710, _3323.y, _3323.x * _1709)) + _3323.w) / _3386;
                                float _3446 = (fma(_1711, _3339.z, fma(_1710, _3339.y, _3339.x * _1709)) + _3339.w) / _3386;
                                float _3450 = 1.0 - dot(vec2(_3445, _3446), vec2(_3445, _3446));
                                float _4563 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3452 = _3451 * (((isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0))) * _3428) / ((_3441 * 0.699999988079071044921875) + 1.0));
                                float _3464 = exp2(log2(1.0 / ((_3441 * 3.5) + 5.0)) * 0.25);
                                float _3465 = 1.0 - _647;
                                float _3472 = sqrt(1.0 - ((1.0 - (_3465 * _3465)) * (1.0 - (_3464 * _3464))));
                                float _3473 = _3472 * _3472;
                                float _3474 = _3473 * _3473;
                                float _3475 = _3421 - _2923;
                                float _3476 = _3422 - _2924;
                                float _3477 = _3423 - _2925;
                                float _3481 = inversesqrt(dot(vec3(_3475, _3476, _3477), vec3(_3475, _3476, _3477)));
                                float _3485 = dot(vec3(_572, _575, _578), vec3((-0.0) - _2923, (-0.0) - _2924, (-0.0) - _2925));
                                float _4574 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3489 = dot(vec3(_572, _575, _578), vec3(_3481 * _3475, _3481 * _3476, _3481 * _3477));
                                float _4585 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3492 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3496 = ((_3492 * _3492) * (_3474 + (-1.0))) + 1.0;
                                float _3497 = _3434 * _3473;
                                float _3498 = _3497 * _3497;
                                float _3504 = ((1.0 - _3498) * dot(vec3(_572, _575, _578), vec3(_3421, _3422, _3423))) + _3498;
                                float _4596 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3506 = 1.0 - _3473;
                                float _3516 = (0.5 / (((_3505 * ((_3488 * _3506) + _3473)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3473) * _3488))) * _3505;
                                float _4607 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                                float _3526 = (_3451 * _3428) * (((_3474 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3496 * _3496) * ((_3441 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3452 * _3296.y;
                                frontier_phi_78_pred_1 = _3452 * _3296.x;
                                frontier_phi_78_pred_2 = _3526 * _3308.z;
                                frontier_phi_78_pred_3 = _3526 * _3308.y;
                                frontier_phi_78_pred_4 = _3526 * _3308.x;
                                frontier_phi_78_pred_5 = _3452 * _3296.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3534 = frontier_phi_78_pred;
                            _3533 = frontier_phi_78_pred_1;
                            _3532 = frontier_phi_78_pred_2;
                            _3531 = frontier_phi_78_pred_3;
                            _3530 = frontier_phi_78_pred_4;
                            _3535 = frontier_phi_78_pred_5;
                            _3238 = _3533 + _3251;
                            _3239 = _3534 + _3252;
                            _3240 = _3535 + _3253;
                            _3235 = _3530 + _3248;
                            _3236 = _3531 + _3249;
                            _3237 = _3532 + _3250;
                            if (_3255 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3238;
                                _3252 = _3239;
                                _3253 = _3240;
                                _3254 = _3255;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3240;
                        frontier_phi_72_pred_1 = _3239;
                        frontier_phi_72_pred_2 = _3238;
                        frontier_phi_72_pred_3 = _3237;
                        frontier_phi_72_pred_4 = _3236;
                        frontier_phi_72_pred_5 = _3235;
                    }
                    _2908 = frontier_phi_72_pred;
                    _2906 = frontier_phi_72_pred_1;
                    _2904 = frontier_phi_72_pred_2;
                    _2902 = frontier_phi_72_pred_3;
                    _2900 = frontier_phi_72_pred_4;
                    _2898 = frontier_phi_72_pred_5;
                    uint _3043 = _3042 + 1u;
                    if (_3043 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3036 = _2898;
                        _3037 = _2900;
                        _3038 = _2902;
                        _3039 = _2904;
                        _3040 = _2906;
                        _3041 = _2908;
                        _3042 = _3043;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2908;
                frontier_phi_60_61_ladder_1 = _2906;
                frontier_phi_60_61_ladder_2 = _2902;
                frontier_phi_60_61_ladder_3 = _2900;
                frontier_phi_60_61_ladder_4 = _2898;
                frontier_phi_60_61_ladder_5 = _2904;
            }
            else
            {
                frontier_phi_60_61_ladder = _2786;
                frontier_phi_60_61_ladder_1 = _2784;
                frontier_phi_60_61_ladder_2 = _2780;
                frontier_phi_60_61_ladder_3 = _2778;
                frontier_phi_60_61_ladder_4 = _2776;
                frontier_phi_60_61_ladder_5 = _2782;
            }
            _2897 = frontier_phi_60_61_ladder_4;
            _2899 = frontier_phi_60_61_ladder_3;
            _2901 = frontier_phi_60_61_ladder_2;
            _2903 = frontier_phi_60_61_ladder_5;
            _2905 = frontier_phi_60_61_ladder_1;
            _2907 = frontier_phi_60_61_ladder;
        }
        float _2912 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _2664 = (_2912 * _2903) + _2176;
        _2666 = (_2912 * _2905) + _2178;
        _2668 = (_2912 * _2907) + _2180;
        _2670 = ((_2897 * _616) * _2912) + _2514;
        _2672 = ((_2899 * _618) * _2912) + _2516;
        _2674 = ((_2901 * _619) * _2912) + _2518;
    }
    else
    {
        _2664 = _2176;
        _2666 = _2178;
        _2668 = _2180;
        _2670 = _2514;
        _2672 = _2516;
        _2674 = _2518;
    }
    uint _2680 = _592 + uint(cbMatDynParam._m0[0u].w);
    float _2686 = cbMtdParam._m0[13u].y * cbMtdParam._m0[15u].y;
    float _2692 = (((((_2686 * cbMtdParam._m0[10u].x) * _330.x) * _353) * (((1.0 - _407) * cbMtdParam._m0[16u].z) + _407)) * _445) * cbInstanceData._m0[_2680].x;
    float _2698 = (((((_2686 * cbMtdParam._m0[10u].y) * _330.y) * _353) * (((1.0 - _409) * cbMtdParam._m0[16u].z) + _409)) * _445) * cbInstanceData._m0[_2680].y;
    float _2704 = (((((_2686 * cbMtdParam._m0[10u].z) * _330.z) * _353) * (((1.0 - _411) * cbMtdParam._m0[16u].z) + _411)) * _445) * cbInstanceData._m0[_2680].z;
    float _4623 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4634 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _4645 = isnan(0.0) ? _608 : (isnan(_608) ? 0.0 : max(_608, 0.0));
    float _2721 = (((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2664 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _631))) + ((_2670 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1440)) * cbPerFrame._m0[3u].x)) + _2692;
    float _2723 = (_2698 + ((_2672 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1440)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2666 + ((isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))) * _631)));
    float _2725 = (_2704 + ((_2674 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1440)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2668 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _631)));
    float _4671 = isnan(0.0) ? cbMtdParam._m0[2u].w : (isnan(cbMtdParam._m0[2u].w) ? 0.0 : max(cbMtdParam._m0[2u].w, 0.0));
    float _2738 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    uint _2739 = _591 + 6u;
    float _2747 = _553 / cbSceneParam._m0[86u].x;
    float _2748 = _554 / cbSceneParam._m0[86u].y;
    vec4 _2762 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2747, _2748, (log2((isnan(cbSceneParam._m0[77u].w) ? _487 : (isnan(_487) ? cbSceneParam._m0[77u].w : min(_487, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2764 = _2762.x;
    float _2765 = _2762.y;
    float _2766 = _2762.z;
    float _2767 = _2762.w;
    float _2838;
    float _2840;
    float _2842;
    float _2844;
    if (_487 > cbSceneParam._m0[78u].w)
    {
        float _2801 = isnan(_487) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _487 : min(cbSceneParam._m0[80u].w, _487));
        float _2802 = _2801 / _487;
        float _2813 = _2802 * _538;
        float _2814 = _539 * _2802;
        float _2815 = (-0.0) - _2814;
        float _2816 = _2802 * _540;
        float _2818 = (cbSceneParam._m0[77u].w * _2815) / _2801;
        float _2819 = _2818 + cbSceneParam._m0[79u].w;
        float _2820 = cbSceneParam._m0[79u].w - _2814;
        float _2826 = sqrt(((_2813 * _2813) + (_2814 * _2814)) + (_2816 * _2816));
        float _2829 = (1.0 - (cbSceneParam._m0[77u].w / _2801)) * _2826;
        float _2834 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2836 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2998;
        if (abs((_2815 - _2818) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2998 = ((((_2819 > 0.0) ? exp2(_2834 * _2819) : (2.0 - exp2(_2836 * _2819))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2829;
        }
        else
        {
            float _2958 = 1.0 / cbSceneParam._m0[80u].x;
            float _2959 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : max(_2819, _2820));
            float _2960 = isnan(_2820) ? _2819 : (isnan(_2819) ? _2820 : min(_2819, _2820));
            float _2969 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : min(_2959, 0.0));
            float _2970 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : min(_2960, 0.0));
            _2998 = ((abs(_2826 / _2815) * cbSceneParam._m0[80u].y) * ((((_2969 - _2970) * 2.0) - ((exp2(_2834 * (isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0)))) - exp2(_2834 * (isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))))) * _2958)) - ((exp2(_2836 * _2969) - exp2(_2836 * _2970)) * _2958))) + (_2829 * cbSceneParam._m0[80u].z);
        }
        vec4 _3000 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2747, _2748, 1.0), 0.0);
        float _3009 = exp2((_2998 * (-1.44269502162933349609375)) * (1.0 - _3000.w));
        float _3010 = log2(_3009);
        float _3026 = log2(_2767);
        _2838 = (exp2(_3026 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].x)) * _3000.x) / cbSceneParam._m0[78u].x)) + _2764;
        _2840 = (exp2(_3026 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].y)) * _3000.y) / cbSceneParam._m0[78u].y)) + _2765;
        _2842 = (exp2(_3026 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3010 * cbSceneParam._m0[78u].z)) * _3000.z) / cbSceneParam._m0[78u].z)) + _2766;
        _2844 = _3009 * _2767;
    }
    else
    {
        _2838 = _2764;
        _2840 = _2765;
        _2842 = _2766;
        _2844 = _2767;
    }
    float _2856 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2857 = _2856 == 3.0;
    float _2858 = log2(_2844);
    float _2862 = exp2(_2858 * cbSceneParam._m0[78u].x);
    float _2863 = exp2(_2858 * cbSceneParam._m0[78u].y);
    float _2864 = exp2(_2858 * cbSceneParam._m0[78u].z);
    float _2865 = _2862 * (isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0)));
    float _2866 = _2863 * (isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0)));
    float _2867 = _2864 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0)));
    float _2876 = (_2856 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2876 * (_2857 ? _2865 : (_2865 + (cbSceneParam._m0[72u].w * _2838)));
    SV_Target.y = _2876 * (_2857 ? _2866 : (_2866 + (cbSceneParam._m0[72u].w * _2840)));
    SV_Target.z = _2876 * (_2857 ? _2867 : (_2867 + (cbSceneParam._m0[72u].w * _2842)));
    SV_Target.w = cbInstanceData._m0[_2739].w;
    SV_Target_1.x = (((cbMtdParam._m0[2u].x * _2692) * _2738) * _2862) * _2876;
    SV_Target_1.y = (((cbMtdParam._m0[2u].y * _2698) * _2738) * _2863) * _2876;
    SV_Target_1.z = (((cbMtdParam._m0[2u].z * _2704) * _2738) * _2864) * _2876;
    SV_Target_1.w = cbInstanceData._m0[_2739].w;
}


